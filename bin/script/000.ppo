#line 6 "C:\fw195\Gestool\bin\Script\000.prg"
static dbfArticulo
static dbfFPago
static dbfCount
static dbfDiv
static dbfIva
static dbfClient
static dbfAlbCliT
static dbfAlbCliL
static dbfAlbCliP
static lOpenFiles       := .F.



function InicioHRB()

   local cDirOrigen
   local aDirectorio
   local cFichero





   if !OpenFiles( .F. )
      return .F.
   end

   CursorWait()

   ImportaAlbaran()

   Msginfo( "Importación realizada con éxito" )

   CursorWe()





   CloseFiles()

   SysRefresh()

return .T.



static function OpenFiles()

   local oError
   local oBlock






   CursorWait()

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      lOpenFiles  := .T.

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIT.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliT ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIP.DBF" ), ( cCheckArea( "ALBCLIP", @dbfAlbCliP ) ), if(.T. .OR. .F., !.F., NIL), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   RECOVER USING oError

      lOpenFiles           := .F.

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

   CursorWE()

return ( lOpenFiles )



static function CloseFiles()

   if dbfClient <> nil
      ( dbfClient )->( dbCloseArea() )
   end

   if dbfArticulo <> nil
      ( dbfArticulo )->( dbCloseArea() )
   end

   if dbfCount <> nil
      ( dbfCount )->( dbCloseArea() )
   end

   if dbfDiv <> nil
      ( dbfDiv )->( dbCloseArea() )
   end

   if dbfFPago <> nil
      ( dbfFPago )->( dbCloseArea() )
   end

   if dbfIva <> nil
      ( dbfIva )->( dbCloseArea() )
   end

   if dbfAlbCliT <> nil
      ( dbfAlbCliT )->( dbCloseArea() )
   end

   if dbfAlbCliL <> nil
      ( dbfAlbCliL )->( dbCloseArea() )
   end

   if dbfAlbCliP <> nil
      ( dbfAlbCliP )->( dbCloseArea() )
   end

   dbfArticulo    := nil
   dbfDiv         := nil
   dbfCount       := nil
   dbfFPago       := nil
   dbfIva         := nil
   dbfAlbCliT     := nil
   dbfAlbCliL     := nil
   dbfAlbCliP     := nil

   lOpenFiles     := .F.

RETURN ( .T. )



static function ImportaAlbaran()

   local oBlock
   local oError
   local cFile
   local hFile
   local cBufer
   local nBytes
   local cFilEdm
   local oFilEdm
   local hAlbaran := {=>}

   CursorWait()

   cFilEdm                               := cGetFile( "All | *.*", "Seleccione los ficheros a importar", "*.*" , , .F.)

   if !Empty( cFilEdm )

      oFilEdm                            := TTxtFile():New( cFilEdm )

      while ! oFilEdm:lEoF()

         hAlbaran                        := {=>}
         hAlbaran[ "Fecha" ]             := ctod( substr( oFilEdm:cLine, 7, 10 ) )
         hAlbaran[ "Hora" ]              := subStr( oFilEdm:cLine, 18, 8)
         hAlbaran[ "CodArt" ]            := Alltrim( subStr( oFilEdm:cLine, 26, 10) )
         if hAlbaran[ "CodArt" ]    == "1"
            hAlbaran[ "CodArt" ]    = "G.A."
            halbaran[ "Almacen"]    = "GSA"
         else
            hAlbaran[ "CodArt" ]    = "G.B."
            hAlbaran[ "Almacen" ]   = "GSB"
         end
         hAlbaran[ "Litros" ]            := Val( subStr( oFilEdm:cLine, 42, 13) )/1000
         hAlbaran[ "Precio" ]            := Val( subStr( oFilEdm:cLine, 55, 8) )/1000
         hAlbaran[ "Descuento" ]         := Val( subStr( oFilEdm:cLine, 63, 6) )/100
         hAlbaran[ "TotalImpIvaIncl" ]   := Val( subStr( oFilEdm:cLine, 70, 9) )/100
         hAlbaran[ "Cobrado" ]           := Val( subStr( oFilEdm:cLine, 79, 9) )/100
         hAlbaran[ "FPago" ]             := subStr( oFilEdm:cLine, 88, 18)
         hAlbaran[ "NumeroVale" ]        := subStr( oFilEdm:cLine, 116, 10)

         MsgInfo( subStr( oFilEdm:cLine, 126, 6), "lo que trae 1" )
         MsgInfo( Alltrim( subStr( oFilEdm:cLine, 126, 6) ), "lo que trae 2" )

         hAlbaran[ "CodCliente" ]        := Alltrim( subStr( oFilEdm:cLine, 126, 6) )

         EditarAlbaran( hAlbaran)

         oFilEdm:Skip()

      end

   oFilEdm:Close()

   end

   CursorWe()

Return .T.



static function EditarAlbaran( hAlbaran )

local nRecNoCli
local nRecNoPago
local nRecNoArt
local nOrdAntCli
local nOrdantPago
local nOrdAntArt
local nRecNoIva
local nOrdAntIva
local nTarifa
local cCodCliente
local nNumAlb

nRecNoCli      := ( dbfClient )->( RecNo( ) )
nOrdAnt        := ( dbfClient )->( OrdSetFocus( "cod" ) )
nRecNoPago     := ( dbfFPago )->( RecNo( ) )
nOrdAntPago    := ( dbfFPago )->( OrdSetFocus( "cDesPago" ) )
nRecNoArt      := ( dbfArticulo )->( RecNo() )
nOrdAntArt     := ( dbfArticulo )->( OrdSetFocus( "Codigo" ) )
nRecNoIva      := ( dbfIva )->( RecNo() )
nOrdantIva     := ( dbfIva )->( OrdSetFocus( "Tipo" ) )

   if !Empty( hAlbaran )



      ( dbfAlbCliT )->( dbAppend( ) )

      ( dbfAlbCliT )->cSerAlb       := "T"
      nNumAlb                       := nNewDoc( "T", dbfAlbCliT, "NALBCLI", , dbfCount )
      ( dbfAlbCliT )->nNumAlb       := nNumAlb
      ( dbfAlbCliT )->cSufAlb       := "00"
      ( dbfAlbCliT )->cTurAlb       := cCurSesion()
      ( dbfAlbCliT )->dFecAlb       := hAlbaran[ "Fecha" ]
      ( dbfAlbCliT )->cSuPed        := hAlbaran[ "NumeroVale" ]
      ( dbfAlbCliT )->lFacturado    := .F.
      ( dbfAlbCliT )->lEntregado    := .F.

      if ( dbfClient )->( dbSeek( hAlbaran[ "CodCliente" ] ) )

         cCodCliente                := ( dbfClient )->Cod
         ( dbfAlbCliT )->cCodCli    := cCodCliente
         ( dbfAlbCliT )->cNomCli    := ( dbfClient )->Titulo
         ( dbfAlbCliT )->cDirCli    := ( dbfClient )->Domicilio
         ( dbfAlbCliT )->cPobCli    := ( dbfClient )->Poblacion
         ( dbfAlbCliT )->cPrvCli    := ( dbfClient )->Provincia
         ( dbfAlbCliT )->cPosCli    := ( dbfClient )->CodPostal
         ( dbfAlbCliT )->cDniCli    := ( dbfClient )->Nif
         ( dbfAlbCliT )->nRegIva    := ( dbfClient )->nRegIva
         ( dbfAlbCliT )->cCodPago   := ( dbfClient )->CodPago
         ( dbfAlbCliT )->cCodGrp    := ( dbfClient )->cCodGrp
         ( dbfAlbCliT )->cTlfCli    := ( dbfClient )->Telefono

      end

      ( dbfAlbCliT )->cCodAlm       := hAlbaran[ "Almacen" ]
      ( dbfAlbCliT )->cCodCaj       := cDefCaj()
      ( dbfAlbCliT )->lIvaInc       := .T.
      ( dbfAlbCliT )->cDivAlb       := cDivEmp()
      ( dbfAlbCliT )->cCodUsr       := cCurUsr()
      ( dbfAlbCliT )->cCodDlg       := "00"

      ( dbfAlbCliT )->( dbUnlock( ) )



      ( dbfAlbCliL )->( dbAppend( ) )

         ( dbfAlbCliL )->cSerAlb       := "T"
         ( dbfAlbCliL )->nNumAlb       := nNumAlb
         ( dbfAlbCliL )->cSufAlb       := "00"

         if ( dbfArticulo )->( dbSeek( hAlbaran[ "CodArt" ] ) )
            ( dbfAlbCliL )->cRef       := ( dbfArticulo )->Codigo
            ( dbfAlbCliL )->cDetalle   := ( dbfArticulo )->Nombre
            ( dbfAlbCliL )->nCtlStk    := ( dbfArticulo )->nCtlStock

            if ( dbfIva )->( dbSeek( (dbfArticulo )->TipoIva ) )
               ( dbfAlbCliL )->nIva    := ( dbfIva )->TpIva
            end

            ( dbfAlbCliL )->nCosDiv    := ( dbfArticulo )->pCosto
            ( dbfAlbCliL )->cCodTip    := ( dbfArticulo )->cCodTip
            ( dbfAlbCliL )->cCodFam    := ( dbfArticulo )->Familia

         end

         ( dbfAlbCliL )->nPreUnit      := hAlbaran[ "Precio" ]
         ( dbfAlbCliL )->nDto          := hAlbaran[ "Descuento" ]
         ( dbfAlbCliL )->nCanEnt       := 1
         ( dbfAlbCliL )->nUniCaja      := hAlbaran[ "Litros" ]
         ( dbfAlbCliL )->dFecha        := hAlbaran[ "Fecha" ]
         ( dbfAlbCliL )->nNumLin       := 1
         ( dbfAlbCliL )->cAlmLin       := hAlbaran[ "Almacen" ]
         ( dbfAlbCliL )->lIvaLin       := .T.
         ( dbfAlbCliL )->dFecAlb       := hAlbaran[ "Fecha" ]

         MsgInfo( cCodCliente, "cCodCliente" )

         ( dbfAlbCliL )->cCodCli       := cCodCliente

      ( dbfAlbCliL )->( dbUnlock( ) )

      ( dbfClient )->( ordSetFocus( nOrdAntCli ) )
      ( dbfClient )->( dbGoTo( nRecNoCli ) )
      ( dbfFPago )->( ordSetFocus( nOrdAntPago ) )
      ( dbfFPago )->( dbGoTo( nRecNoPago ) )
      ( dbfArticulo )->( ordSetFocus( nOrdAntArt ) )
      ( dbfArticulo )->( dbGoTo( nRecNoArt ) )
      ( dbfIva )->( ordSetFocus( nOrdantIva ) )
      ( dbfIva )->( dbGoTo( nRecNoIva ) )

   end

Return .T.



static function nGetNumeric( uVal )

   local nVal     := 0

   do case
      case Valtype( uVal ) == "C"
         nVal     := Val( StrTran( uVal, ",", "." ) )
      case Valtype( uVal ) == "N"
         nVal     := uVal
   end

Return ( nVal )



static function cGetChar( uVal )

   if Valtype( uVal ) == "N"
      uVal := Int( uVal )
   end

Return ( cValToChar( uVal ) )
