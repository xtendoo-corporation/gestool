#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 7 "C:\fwh1801\Gestool\bin\Script\002.prg"
Function Inicio()

   local oImportador

   oImportador    := Importador():New()

   oImportador:Run()

Return ( nil )



_HB_CLASS Importador ; function Importador ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "Importador", iif( .F., { }, { @HBObject() } ), @Importador() ) ) ;

; _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

; _HB_MEMBER { hParentBuffer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hParentBuffer"}, .F. )

; _HB_MEMBER { hLineBuffer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hLineBuffer"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @Importador_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Run(); oClass:AddMethod( "Run", @Importador_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRegistroCabecera(); oClass:AddMethod( "AddRegistroCabecera", @Importador_AddRegistroCabecera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRegistroLinea(); oClass:AddMethod( "AddRegistroLinea", @Importador_AddRegistroLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS Importador ;



static FUNCTION Importador_New( nView ) ; local Self AS CLASS Importador := QSelf() AS CLASS Importador

   ::nView              := D():CreateView()

Return ( Self )



static FUNCTION Importador_Run( ) ; local Self AS CLASS Importador := QSelf() AS CLASS Importador

   ( D():AlbaranesClientes( ::nView ) )->( dbGoTop() )

   while !( D():AlbaranesClientes( ::nView ) )->( Eof() )

      MsgWait( "Documento: " + ( D():AlbaranesClientes( ::nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( ::nView ) )->nNumAlb ) + ( D():AlbaranesClientes( ::nView ) )->cSufAlb, "Importando", 0.05 )

      ::AddRegistroCabecera()

      if ( D():AlbaranesClientesLineas( ::nView ) )->( dbSeek( ( D():AlbaranesClientes( ::nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( ::nView ) )->nNumAlb ) + ( D():AlbaranesClientes( ::nView ) )->cSufAlb ) )


         while ( D():AlbaranesClientes( ::nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( ::nView ) )->nNumAlb ) + ( D():AlbaranesClientes( ::nView ) )->cSufAlb == ( D():AlbaranesClientesLineas( ::nView ) )->cSerAlb + Str( ( D():AlbaranesClientesLineas( ::nView ) )->nNumAlb ) + ( D():AlbaranesClientesLineas( ::nView ) )->cSufAlb .AND. !( D():AlbaranesClientesLineas( ::nView ) )->( Eof() )

               MsgWait( "Articulo: " + ( D():AlbaranesClientesLineas( ::nView ) )->cRef, "Artículos", 0.05 )

               ::AddRegistroLinea()

            ( D():AlbaranesClientesLineas( ::nView ) )->( dbSkip() )

         end

      end

      ( D():AlbaranesClientes( ::nView ) )->( dbSkip() )

   end





   D():DeleteView( ::nView )

   MsgStop( "Proceso realizado con éxito" )

Return ( Self )



static FUNCTION Importador_AddRegistroCabecera( ) ; local Self AS CLASS Importador := QSelf() AS CLASS Importador

   ::hParentBuffer        := SQLMovimientosAlmacenModel():loadBlankBuffer()

   hSet( ::hParentBuffer, "numero", Str( ( D():AlbaranesClientes( ::nView ) )->nNumAlb ) )
   hSet( ::hParentBuffer, "fecha_hora", dateTimeToTimeStamp( ( D():AlbaranesClientes( ::nView ) )->dFecAlb, ( D():AlbaranesClientes( ::nView ) )->tFecAlb ) )
   hSet( ::hParentBuffer, "tipo_movimiento", 1 )
   hSet( ::hParentBuffer, "almacen_origen", "000" )
   hSet( ::hParentBuffer, "almacen_destino", right( AllTrim( ( D():AlbaranesClientes( ::nView ) )->cCodCli ), 3 ) )
   hSet( ::hParentBuffer, "comentarios", "Importado desde albarán: " + ( D():AlbaranesClientes( ::nView ) )->cSerAlb + "/" + AllTrim( Str( ( D():AlbaranesClientes( ::nView ) )->nNumAlb ) ) + "/" + ( D():AlbaranesClientes( ::nView ) )->cSufAlb )

   SQLMovimientosAlmacenModel():insertBuffer( ::hParentBuffer )

Return ( Self )



static FUNCTION Importador_AddRegistroLinea( ) ; local Self AS CLASS Importador := QSelf() AS CLASS Importador

   ::hLineBuffer           := SQLMovimientosAlmacenLineasModel():loadBlankBuffer()

   hSet( ::hLineBuffer, "parent_uuid", hGet( ::hParentBuffer, "uuid" ) )

   hSet( ::hLineBuffer, "codigo_articulo", ( D():AlbaranesClientesLineas( ::nView ) )->cRef )
   hSet( ::hLineBuffer, "nombre_articulo", ( D():AlbaranesClientesLineas( ::nView ) )->cDetalle )
   hSet( ::hLineBuffer, "cajas_articulo", ( D():AlbaranesClientesLineas( ::nView ) )->nCanEnt )
   hSet( ::hLineBuffer, "unidades_articulo", ( D():AlbaranesClientesLineas( ::nView ) )->nUniCaja )
   hSet( ::hLineBuffer, "precio_articulo", ( D():AlbaranesClientesLineas( ::nView ) )->nCosDiv )
   hSet( ::hLineBuffer, "precio_venta", ( D():AlbaranesClientesLineas( ::nView ) )->nPreUnit )
   hSet( ::hLineBuffer, "tipo_iva", ( D():AlbaranesClientesLineas( ::nView ) )->nIva )

   SQLMovimientosAlmacenLineasModel():insertBuffer( ::hLineBuffer )

Return ( Self )
