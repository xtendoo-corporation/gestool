#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
         EXTERNAL FW_GT











extern errorsys
#line 6 "C:\fwh1801\Gestool\bin\Script\Produccion\CreaParteGeneral.prg"
function InicioHRB( oParte )

   local oCreateParte   := createParte():new( oParte )

   if !Empty( oCreateParte )

      oCreateParte:run()
   end

return ( .T. )



_HB_CLASS createParte ; function createParte ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "createParte", iif( .F., { }, { @HBObject() } ), @createParte() ) ) ;

; _HB_MEMBER { fechaProceso } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"fechaProceso"}, .F. )
; _HB_MEMBER { grupoParte } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"grupoParte"}, .F. )
; _HB_MEMBER { arrayGrupos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"arrayGrupos"}, .F. )
; _HB_MEMBER { oParteProduccion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oParteProduccion"}, .F. )
; _HB_MEMBER { cDocumento } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDocumento"}, .F. )
; _HB_MEMBER { newNumero } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"newNumero"}, .F. )
; _HB_MEMBER { aItems } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aItems"}, .F. )

   _HB_MEMBER new(); oClass:AddMethod( "new", @createParte_new(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER run(); oClass:AddMethod( "run", @createParte_run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runTest(); oClass:AddMethod( "runTest", @createParte_runTest(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaProceso(); oClass:AddMethod( "getFechaProceso", @createParte_getFechaProceso(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER compruebaFechaProceso(); oClass:AddMethod( "compruebaFechaProceso", @createParte_compruebaFechaProceso(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getGrupoParte(); oClass:AddMethod( "getGrupoParte", @createParte_getGrupoParte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getArrayGruposOfParte(); oClass:AddMethod( "getArrayGruposOfParte", @createParte_getArrayGruposOfParte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isOnlyOneGrupoOfParte(); oClass:AddInline( "isOnlyOneGrupoOfParte", {|Self | ( ( Self ) ), ( Len( ::getArrayGruposOfParte() ) <= 1 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isOnlyOneGrupoToProcess(); oClass:AddInline( "isOnlyOneGrupoToProcess", {|Self | ( ( Self ) ), ( Len( ::arrayGrupos ) <= 0 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER procesaGrupo(); oClass:AddMethod( "procesaGrupo", @createParte_procesaGrupo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER procesaParte( cGrupo); oClass:AddMethod( "procesaParte", @createParte_procesaParte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createCabecera(); oClass:AddMethod( "createCabecera", @createParte_createCabecera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateElaborado(); oClass:AddMethod( "updateElaborado", @createParte_updateElaborado(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateMateriaPrima(); oClass:AddMethod( "updateMateriaPrima", @createParte_updateMateriaPrima(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aItemsTemporadas(); oClass:AddMethod( "aItemsTemporadas", @createParte_aItemsTemporadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS createParte ;



static FUNCTION createParte_new( oParte ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   ::fechaProceso         := GetSysDate()
   ::grupoParte           := Padr( "Todos", 20 )
   ::oParteProduccion     := oParte
   ::aItemsTemporadas()

Return ( self )



static FUNCTION createParte_aItemsTemporadas( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   ::aItems   := {}

   aAdd( ::aItems, "Todos" )

   ::oParteProduccion:oTemporada:GoTop()

   while !::oParteProduccion:oTemporada:Eof()

      aAdd( ::aItems, AllTrim( ::oParteProduccion:oTemporada:cCodigo ) )

      ::oParteProduccion:oTemporada:Skip()

   end

Return ( self )



static FUNCTION createParte_run( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   ::getFechaProceso()
   ::getGrupoParte()

   if Empty( ::cDocumento )
      MsgStop( "No existe ningun documento con las condiciones seleccionadas" )
      Return .T.
   end

   if ::isOnlyOneGrupoOfParte()
      MsgStop( "Existe un solo grupo de parte" )
      Return .T.
   end

   ::procesaGrupo()

Return .T.



static FUNCTION createParte_runTest( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   ::arrayGrupos  := { "Todos" }
   ::cDocumento   := "P        7  "

   if ::isOnlyOneGrupoOfParte()
      MsgStop( "Existe un solo grupo de parte" )
      Return .T.
   end

   ::procesaGrupo()

Return .T.



static FUNCTION createParte_getFechaProceso( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   while .T.
      if MsgGet( "Seleccione una fecha", "Fecha: ", @::fechaProceso )
         if ::compruebaFechaProceso()
            exit
         end
      else
         exit
      end
   end

Return .T.



static FUNCTION createParte_compruebaFechaProceso( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   local lResult  := .F.

   ::oParteProduccion:oDbf:getStatus()

   ::oParteProduccion:oDbf:OrdSetFocus( "dFecOrd" )

   if ::oParteProduccion:oDbf:Seek( dTos( ::fechaProceso ) )
      ::cDocumento   := ::oParteProduccion:oDbf:cSerOrd + Str( ::oParteProduccion:oDbf:nNumOrd ) + ::oParteProduccion:oDbf:cSufOrd
      lResult        := .T.
   else
      MsgStop( "No existen partes para la fecha seleccionada" )
   end

   ::oParteProduccion:oDbf:setStatus()

Return lResult



static FUNCTION createParte_getGrupoParte( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   if MsgCombo( "Seleccione un grupo", "Grupo: ", ::aItems, @::grupoParte )
      Return .T.
   end

Return .T.



static FUNCTION createParte_getArrayGruposOfParte( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   local arrayGruposOfParte   := {}

   if Empty( ::cDocumento )
      Return arrayGruposOfParte
   end



   ::oParteProduccion:oDetProduccion:oDbf:getStatus()

   ::oParteProduccion:oDetProduccion:oDbf:OrdSetFocus( "cNumOrd" )

   ::oParteProduccion:oDetProduccion:oDbf:GoTop()

   MsgInfo( ::cDocumento, "::cDocumento" )

   if ::oParteProduccion:oDetProduccion:oDbf:Seek( ::cDocumento )


      while ::oParteProduccion:oDetProduccion:oDbf:cSerOrd + Str( ::oParteProduccion:oDetProduccion:oDbf:nNumOrd ) + ::oParteProduccion:oDetProduccion:oDbf:cSufOrd == ::cDocumento .AND. !::oParteProduccion:oDetProduccion:oDbf:Eof()

         if aScan( arrayGruposOfParte, ::oParteProduccion:oDetProduccion:oDbf:cCodTmp ) == 0
            MsgInfo( AllTrim( ::oParteProduccion:oDetProduccion:oDbf:cCodTmp ) )
            aAdd( arrayGruposOfParte, AllTrim( ::oParteProduccion:oDetProduccion:oDbf:cCodTmp ) )
         end

         ::oParteProduccion:oDetProduccion:oDbf:Skip()

      end

   end

   ::oParteProduccion:oDetProduccion:oDbf:setStatus()



   ::oParteProduccion:oDetMaterial:oDbf:getStatus()

   ::oParteProduccion:oDetMaterial:oDbf:OrdSetFocus( "cNumOrd" )

   ::oParteProduccion:oDetMaterial:oDbf:GoTop()

   if ::oParteProduccion:oDetMaterial:oDbf:Seek( ::cDocumento )


      while ::oParteProduccion:oDetMaterial:oDbf:cSerOrd + Str( ::oParteProduccion:oDetMaterial:oDbf:nNumOrd ) + ::oParteProduccion:oDetMaterial:oDbf:cSufOrd == ::cDocumento .AND. !::oParteProduccion:oDetMaterial:oDbf:Eof()

         if aScan( arrayGruposOfParte, ::oParteProduccion:oDetMaterial:oDbf:cCodTmp ) == 0
            MsgInfo( AllTrim( ::oParteProduccion:oDetMaterial:oDbf:cCodTmp ) )
            aAdd( arrayGruposOfParte, AllTrim( ::oParteProduccion:oDetMaterial:oDbf:cCodTmp ) )
         end

         ::oParteProduccion:oDetMaterial:oDbf:Skip()

      end

   end

   ::oParteProduccion:oDetMaterial:oDbf:setStatus()

   MsgInfo( hb_valToExp( arrayGruposOfParte ), "arrayGruposOfParte" )

Return arrayGruposOfParte



static FUNCTION createParte_procesaGrupo( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   local cGrupo
   local arrayTodos  := {}

   if Empty( ::GrupoParte )
      Return .F.
   end



   if AllTrim( ::grupoParte ) == "Todos"

      arrayTodos  := ::getArrayGruposOfParte()

      for each cGrupo in arrayTodos

         if !::isOnlyOneGrupoOfParte()
            ::procesaParte( cGrupo )
         end

      next

   end



   if !::isOnlyOneGrupoOfParte()

      if aScan( ::getArrayGruposOfParte(), AllTrim( ::GrupoParte ) ) <> 0
         ::procesaParte( AllTrim( ::grupoParte ) )
      else
         MsgStop( "El grupo que intenta crear no existe en el parte: " + ::cDocumento )
      end

   end


Return .T.



static FUNCTION createParte_procesaParte( cGrupo ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   ::createCabecera()

   ::updateElaborado( cGrupo )

   ::updateMateriaPrima( cGrupo )

Return .T.



static FUNCTION createParte_createCabecera( ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   local aCabecera

   ::oParteProduccion:oDbf:getStatus()

   ::oParteProduccion:oDbf:OrdSetFocus( "cNumOrd" )

   if ::oParteProduccion:oDbf:Seek( ::cDocumento )

      ::newNumero    := nNewDoc( ::oParteProduccion:oDbf:cSerOrd, ::oParteProduccion:oDbf:nArea, "nParPrd", , ::oParteProduccion:oDbfCount:cAlias )

      aCabecera      := dbScatter( ::oParteProduccion:oDbf:cAlias )

      aCabecera[2]   := ::newNumero

      dbGather( aCabecera, ::oParteProduccion:oDbf:cAlias, .T. )

   end

   ::oParteProduccion:oDbf:setStatus()

Return .T.



static FUNCTION createParte_updateElaborado( cGrupo ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   ::oParteProduccion:oDetProduccion:oDbf:getStatus()

   ::oParteProduccion:oDetProduccion:oDbf:OrdSetFocus( "cCodTmp" )

   while ::oParteProduccion:oDetProduccion:oDbf:Seek( ::cDocumento + Padr( cGrupo, 10 ) )

      ::oParteProduccion:oDetProduccion:oDbf:Load()
      ::oParteProduccion:oDetProduccion:oDbf:nNumOrd    := ::newNumero
      ::oParteProduccion:oDetProduccion:oDbf:Save()

   end

   ::oParteProduccion:oDetProduccion:oDbf:setStatus()

Return .T.



static FUNCTION createParte_updateMateriaPrima( cGrupo ) ; local Self AS CLASS createParte := QSelf() AS CLASS createParte

   ::oParteProduccion:oDetMaterial:oDbf:getStatus()

   ::oParteProduccion:oDetMaterial:oDbf:OrdSetFocus( "cCodTmp" )

   while ::oParteProduccion:oDetMaterial:oDbf:Seek( ::cDocumento + Padr( cGrupo, 10 ) )

      ::oParteProduccion:oDetMaterial:oDbf:Load()
      ::oParteProduccion:oDetMaterial:oDbf:nNumOrd    := ::newNumero
      ::oParteProduccion:oDetMaterial:oDbf:Save()

   end

   ::oParteProduccion:oDetMaterial:oDbf:setStatus()

Return .T.



FUNCTION MsgCombo( cTitle, cText, aItems, uVar, cBmpFile, cResName )

   local oDlg, oBmp, oCbx
   local lOk      := .F.
   local cItem

   If( cTitle == nil, cTitle := "Title", ) ;
   If( cText == nil, cText := "Valor", ) ;
   If( aItems == nil, aItems := { "One", "Two", "Three" }, ) ;

   cItem          := aItems[1]

   oDlg = TDialog():New( 10, 20, 18, 59.5, cTitle,,, .F.,,,,,, .F.,,,,,, .F.,, "oDlg" )

   if ! empty( cBmpFile ) .OR. ! empty( cResName )

      if ! empty( cBmpFile )
         oBmp := TBitmap():New( 1, 1, 20, 20,, cBmpFile, .T., oDlg,,, .F., .F.,,, .F.,, .F.,, .F. )
      endif

      if ! empty( cResName )
         oBmp := TBitmap():New( 1, 1, 20, 20, cResName,, .T., oDlg,,, .F., .F.,,, .F.,, .F.,, .F. )
      endif

      TSay():New( 0.5, 6, {|| cText}, oDlg,,, .F., .F., .F., .F.,,, 250, 10, .F., .F., .F., .F., .F., .F., .F. )




      oCbx := TComboBox():New( 1.6, 4, { | u | If( PCount()==0, cItem, cItem:= u ) }, aItems, 120, 12,,,,,,, .F.,,, .F.,, .F.,,,,, )
   else

      TSay():New( 0.5, 3.3, {|| cText}, oDlg,,, .F., .F., .F., .F.,,, 250, 10, .F., .F., .F., .F., .F., .F., .F. )




      oCbx := TComboBox():New( 1.6, 2.3, { | u | If( PCount()==0, cItem, cItem:= u ) }, aItems, 120, 12,,,,,,, .F.,,, .F.,, .F.,,,,, )
   endif


   TButton():New( 2.25, 7.5 - If( oBmp == nil, 2, 0 ), "&Ok", oDlg, {|| ( oDlg:End(), lOk := .T. )}, 35, 12,,, .T., .F., .F.,, .F.,,, .F. )


   TButton():New( 2.25, 16.5 - If( oBmp == nil, 2, 0 ), "&Cancel", oDlg, {|| ( oDlg:End(), lOk := .F. )}, 35, 12,,, .F., .F., .F.,, .F.,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if lOk
      uVar := cItem
   endif

RETURN lOk
