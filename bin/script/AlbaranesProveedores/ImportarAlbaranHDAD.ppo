#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
         EXTERNAL FW_GT











extern errorsys
#line 22 "C:\fwh1801\Gestool\bin\Script\AlbaranesProveedores\ImportarAlbaranHDAD.prg"
Function ImportarExcelAlbaranes( nView, oWndBrw )

   local oImportarExcel    := TImportarExcelAlbaranes():New( nView, oWndBrw )

   oImportarExcel:Run()

Return nil



_HB_CLASS TImportarExcelAlbaranes ; function TImportarExcelAlbaranes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TImportarExcelAlbaranes", iif( .T., { @TImportarExcel() }, { @HBObject() } ), @TImportarExcelAlbaranes() ) ) ;

; _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )
; _HB_MEMBER { oWndBrw } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oWndBrw"}, .F. )

; _HB_MEMBER { oDialog } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDialog"}, .F. )

; _HB_MEMBER { oExcel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oExcel"}, .F. )

; _HB_MEMBER { oFicheroExcel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFicheroExcel"}, .F. )
; _HB_MEMBER { cFicheroExcel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFicheroExcel"}, .F. )

; _HB_MEMBER { oCodigoProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodigoProveedor"}, .F. )
; _HB_MEMBER { cCodigoProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodigoProveedor"}, .F. )

; _HB_MEMBER { oCodigoAlmacen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodigoAlmacen"}, .F. )
; _HB_MEMBER { cCodigoAlmacen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodigoAlmacen"}, .F. )

; _HB_MEMBER { aLineasPedido } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aLineasPedido"}, .F. )

; _HB_MEMBER { cSerieAlbaran } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSerieAlbaran"}, .F. )
; _HB_MEMBER { cNumeroAlbaran } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNumeroAlbaran"}, .F. )
; _HB_MEMBER { cSufijoAlbaran } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSufijoAlbaran"}, .F. )

; _HB_MEMBER { dFechaAlbaran } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFechaAlbaran"}, .F. )
; _HB_MEMBER { cHoraAlbaran } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cHoraAlbaran"}, .F. )

; _HB_MEMBER { nNumeroHojas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nNumeroHojas"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TImportarExcelAlbaranes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Run(); oClass:AddMethod( "Run", @TImportarExcelAlbaranes_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetResources(); oClass:AddInline( "SetResources", {|Self | ( ( Self ) ), ( SetResources( fullcurdir() + "Script\AlbaranesProveedores\ImportarAlbaranHDAD.dll" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FreeResources(); oClass:AddInline( "FreeResources", {|Self | ( ( Self ) ), ( FreeResources() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource(); oClass:AddMethod( "Resource", @TImportarExcelAlbaranes_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TImportarExcelAlbaranes_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidProcess(); oClass:AddMethod( "lValidProcess", @TImportarExcelAlbaranes_lValidProcess(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addCabecera(); oClass:AddMethod( "addCabecera", @TImportarExcelAlbaranes_addCabecera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addLineas(); oClass:AddMethod( "addLineas", @TImportarExcelAlbaranes_addLineas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addLine( hLine); oClass:AddMethod( "addLine", @TImportarExcelAlbaranes_addLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addProduct( hLine); oClass:AddMethod( "addProduct", @TImportarExcelAlbaranes_addProduct(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addFamilia( hLine); oClass:AddMethod( "addFamilia", @TImportarExcelAlbaranes_addFamilia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER recalculaTotales(); oClass:AddMethod( "recalculaTotales", @TImportarExcelAlbaranes_recalculaTotales(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER procesaFicheroExcel(); oClass:AddMethod( "procesaFicheroExcel", @TImportarExcelAlbaranes_procesaFicheroExcel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER procesaLinea(); oClass:AddMethod( "procesaLinea", @TImportarExcelAlbaranes_procesaLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TImportarExcelAlbaranes ;



static FUNCTION TImportarExcelAlbaranes_New( nView, oWndBrw ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   ::nView                    := nView
   ::oWndBrw                  := oWndBrw

   ::aLineasPedido            := {}

Return ( Self )



static FUNCTION TImportarExcelAlbaranes_Run( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   ::SetResources()

   ::Resource()

   ::FreeResources()

   if !Empty( ::oWndBrw )
      ::oWndBrw:Refresh()
   end

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_Resource( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   ::oDialog = TDialog():New(,,,,, "INFORME",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog" )





   ::oCodigoProveedor := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cCodigoProveedor, ::cCodigoProveedor:= u ) }, ::oDialog,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 110 )

   ::oCodigoProveedor:bHelp   := {|| BrwProvee( ::oCodigoProveedor, ::oCodigoProveedor:oHelpText, .F. ) }
   ::oCodigoProveedor:bValid  := {|| cProvee( ::oCodigoProveedor, D():Proveedores( ::nView ), ::oCodigoProveedor:oHelpText ) }





   ::oCodigoAlmacen := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cCodigoAlmacen, ::cCodigoAlmacen:= u ) }, ::oDialog,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 140 )

   ::oCodigoAlmacen:bHelp   := {|| BrwAlmacen( ::oCodigoAlmacen, ::oCodigoAlmacen:oHelpText, .F. ) }
   ::oCodigoAlmacen:bValid  := {|| cAlmacen( ::oCodigoAlmacen, D():Almacen( ::nView ), ::oCodigoAlmacen:oHelpText ) }





   ::oFicheroExcel := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::cFicheroExcel, ::cFicheroExcel:= u ) }, ::oDialog,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )
   ::oFicheroExcel:bHelp      := {|| ::oFicheroExcel:cText( cGetFile( "Excel ( *Xls, *.Xlsx ) |*Xls;*.Xlsx", "Seleccione la hoja de calculo" ) ) }




   TButton():ReDefine( 1, {||( ::Process() )}, ::oDialog,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::oDialog:End( 2 ) )}, ::oDialog,,, .F.,,,, .F. )

   ::oDialog:AddFastKey( 116, {|| ::Process() } )

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_lValidProcess( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   if Empty( ::cCodigoProveedor )
      MsgStop( "Tiene que seleccionar un proveedor" )
      ::oCodigoProveedor:SetFocus()
      Return ( .F. )
   end

   if Empty( ::cCodigoAlmacen )
      MsgStop( "Tiene que seleccionar un almacen" )
      ::oCodigoAlmacen:SetFocus()
      Return ( .F. )
   end

   if !file( ::cFicheroExcel )
      msgStop( "Fichero erroneo" )
      ::oFicheroExcel:SetFocus()
      Return ( .F. )
   end

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_Process( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   if !::lValidProcess()
      Return .F.
   end

   msgrun( "Procesando fichero " + ::cFicheroExcel, "Espere por favor...",  {|| ::procesaFicheroExcel() } )

   if Len( ::aLineasPedido ) == 0
      MsgInfo( "No existen lineas que importar en el fichero indicado" )
      ::oDialog:End( 1 )
      Return .F.
   end

   ::addCabecera()

   ::addLineas()

   ::RecalculaTotales()

   msginfo( "Proceso finalizado" )

   ::oDialog:End( 1 )

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_procesaFicheroExcel( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   ::oExcel                      := TOleExcel():New( "Importando hoja de excel", "Conectando...", .F. )

   ::oExcel:oExcel:Visible       := .F.
   ::oExcel:oExcel:DisplayAlerts := .F.
   ::oExcel:oExcel:WorkBooks:Open( ::cFicheroExcel )
   ::oExcel:oExcel:WorkSheets( 1 ):Activate()

   ::procesaLinea()

   ::oExcel:oExcel:Quit()
   ::oExcel:oExcel:DisplayAlerts := .T.
   ::oExcel:End()

Return nil



static FUNCTION TImportarExcelAlbaranes_procesaLinea( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   local n
   local cCodArt
   local cCodBar
   local hLine    := {=>}
   local nPos

   for n := 2 to 65536

      cCodArt     := cValToChar( ::oExcel:oExcel:ActiveSheet:Range( "A" + lTrim( str( n ) ) ):Value )

      if !empty( cCodArt )





         nPos           := at( ".", cCodArt )
         if nPos <> 0
            cCodArt     := SubStr( cCodArt, 1, nPos - 1 )
         end
         hSet( hLine, "CodigoArticulo", Padr( cCodArt, 18 ) )





         hSet( hLine, "NombreArticulo", cValToChar( ::oExcel:oExcel:ActiveSheet:Range( "B" + lTrim( str( n ) ) ):Value ) )





         hSet( hLine, "Unidades", ::oExcel:oExcel:ActiveSheet:Range( "C" + lTrim( str( n ) ) ):Value )





         hSet( hLine, "PVenta", ::oExcel:oExcel:ActiveSheet:Range( "F" + lTrim( str( n ) ) ):Value )





         hSet( hLine, "PCosto", ::oExcel:oExcel:ActiveSheet:Range( "D" + lTrim( str( n ) ) ):Value )





         hSet( hLine, "Familia", ::oExcel:oExcel:ActiveSheet:Range( "H" + lTrim( str( n ) ) ):Value )
         hSet( hLine, "cNomFamilia", ::oExcel:oExcel:ActiveSheet:Range( "I" + lTrim( str( n ) ) ):Value )

         aAdd( ::aLineasPedido, hLine )

      else

         exit

      end

      hLine     := {=>}

   next

Return nil



static FUNCTION TImportarExcelAlbaranes_addCabecera( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   ::cSerieAlbaran      := cNewSer( "nAlbPrv", D():Contadores( ::nView ) )
   ::cNumeroAlbaran     := nNewDoc( ::cSerieAlbaran, D():AlbaranesProveedores( ::nView ), "NALBPRV", , D():Contadores( ::nView ) )
   ::cSufijoAlbaran     := Application():CodigoDelegacion()
   ::dFechaAlbaran      := getSysDate()
   ::cHoraAlbaran       := getSysTime()

   ( D():AlbaranesProveedores( ::nView ) )->( dbAppend() )

   ( D():AlbaranesProveedores( ::nView ) )->CSERALB       := ::cSerieAlbaran
   ( D():AlbaranesProveedores( ::nView ) )->NNUMALB       := ::cNumeroAlbaran
   ( D():AlbaranesProveedores( ::nView ) )->CSUFALB       := ::cSufijoAlbaran
   ( D():AlbaranesProveedores( ::nView ) )->CTURALB       := cCurSesion()
   ( D():AlbaranesProveedores( ::nView ) )->DFECALB       := ::dFechaAlbaran
   ( D():AlbaranesProveedores( ::nView ) )->tFecALB       := ::cHoraAlbaran
   ( D():AlbaranesProveedores( ::nView ) )->CCODALM       := ::cCodigoAlmacen
   ( D():AlbaranesProveedores( ::nView ) )->CCODCAJ       := Application():CodigoCaja()
   ( D():AlbaranesProveedores( ::nView ) )->CDTOESP       := "General"
   ( D():AlbaranesProveedores( ::nView ) )->CDPP          := "Pronto pago"
   ( D():AlbaranesProveedores( ::nView ) )->CDIVALB       := cDivEmp()
   ( D():AlbaranesProveedores( ::nView ) )->NVDVALB       := nChgDiv( cDivEmp(), D():Divisas( ::nView ) )
   ( D():AlbaranesProveedores( ::nView ) )->CCODUSR       := Auth():Codigo()
   ( D():AlbaranesProveedores( ::nView ) )->cCodDlg       := ::cSufijoAlbaran
   ( D():AlbaranesProveedores( ::nView ) )->lFacturado    := .F.
   ( D():AlbaranesProveedores( ::nView ) )->nFacturado    := 1

   ( D():AlbaranesProveedores( ::nView ) )->CCODPRV       := ::cCodigoProveedor

   if ( D():Proveedores( ::nView ) )->( dbSeek( ::cCodigoProveedor  ) )
      ( D():AlbaranesProveedores( ::nView ) )->CNOMPRV    := ( D():Proveedores( ::nView ) )->Titulo
      ( D():AlbaranesProveedores( ::nView ) )->CDIRPRV    := ( D():Proveedores( ::nView ) )->Domicilio
      ( D():AlbaranesProveedores( ::nView ) )->CPOBPRV    := ( D():Proveedores( ::nView ) )->Poblacion
      ( D():AlbaranesProveedores( ::nView ) )->CPROPRV    := ( D():Proveedores( ::nView ) )->Poblacion
      ( D():AlbaranesProveedores( ::nView ) )->CPOSPRV    := ( D():Proveedores( ::nView ) )->CodPostal
      ( D():AlbaranesProveedores( ::nView ) )->CDNIPRV    := ( D():Proveedores( ::nView ) )->Nif
      ( D():AlbaranesProveedores( ::nView ) )->CCODPGO    := ( D():Proveedores( ::nView ) )->fPago
   end

   ( D():AlbaranesProveedores( ::nView ) )->( dbUnLock() )

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_addLineas( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   aEval( ::aLineasPedido, {|hLine| ::addLine( hLine ) } )

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_addProduct( hLine ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   local nRecAntArticulos     := ( D():Articulos( ::nView ) )->( recno() )
   local nOrdAntArticulos     := ( D():Articulos( ::nView ) )->( OrdSetFocus( "Codigo" ) )

   if !( D():Articulos( ::nView ) )->( dbSeek( hGet( hLine, "CodigoArticulo" ) ) )

      ( D():Articulos( ::nView ) )->( dbAppend() )

      ( D():Articulos( ::nView ) )->Codigo      := hGet( hLine, "CodigoArticulo" )
      ( D():Articulos( ::nView ) )->Nombre      := hGet( hLine, "NombreArticulo" )
      ( D():Articulos( ::nView ) )->pCosto      := hGet( hLine, "PCosto" )
      ( D():Articulos( ::nView ) )->TipoIva     := "G"
      ( D():Articulos( ::nView ) )->pVenta1     := ( hGet( hLine, "PVenta" ) / 1.21 )
      ( D():Articulos( ::nView ) )->pVtaIva1    := hGet( hLine, "PVenta" )
      ( D():Articulos( ::nView ) )->Familia     := hGet( hLine, "Familia" )

      ( D():Articulos( ::nView ) )->( dbUnLock() )

   else











   end

   ( D():Articulos( ::nView ) )->( OrdSetFocus( nOrdAntArticulos ) )
   ( D():Articulos( ::nView ) )->( dbGoTo( nRecAntArticulos ) )

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_addFamilia( hLine ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   local nRecAnt     := ( D():Familias( ::nView ) )->( recno() )
   local nOrdAnt     := ( D():Familias( ::nView ) )->( OrdSetFocus( "cNomFam" ) )
   local cNewCodFam  := ""

   if !( D():Familias( ::nView ) )->( dbSeek( Upper( hGet( hLine, "cNomFamilia" ) ) ) )

      cNewCodFam     := NextKey( space (16), D():Familias( ::nView ) )

      ( D():Familias( ::nView ) )->( dbAppend() )

      ( D():Familias( ::nView ) )->cCodFam      := cNewCodFam
      ( D():Familias( ::nView ) )->cNomFam      := hGet( hLine, "cNomFamilia" )

      ( D():Familias( ::nView ) )->( dbUnLock() )

      hSet( hLine, "Familia", cNewCodFam )

   else

      hSet( hLine, "Familia", ( D():Familias( ::nView ) )->cCodFam )

   end

   ( D():Familias( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():Familias( ::nView ) )->( dbGoTo( nRecAnt ) )

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_addLine( hLine ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes





   ::addFamilia( hLine )
   ::addProduct( hLine )





   ( D():AlbaranesProveedoresLineas( ::nView ) )->( dbAppend() )

   ( D():AlbaranesProveedoresLineas( ::nView ) )->cSerAlb       :=  ::cSerieAlbaran
   ( D():AlbaranesProveedoresLineas( ::nView ) )->nNumAlb       :=  ::cNumeroAlbaran
   ( D():AlbaranesProveedoresLineas( ::nView ) )->cSufAlb       :=  ::cSufijoAlbaran
   ( D():AlbaranesProveedoresLineas( ::nView ) )->dFecAlb       :=  ::dFechaAlbaran
   ( D():AlbaranesProveedoresLineas( ::nView ) )->tFecAlb       :=  ::cHoraAlbaran

   ( D():AlbaranesProveedoresLineas( ::nView ) )->CREF          := hGet( hLine, "CodigoArticulo" )

   if ( D():Articulos( ::nView ) )->( dbSeek( hGet( hLine, "CodigoArticulo" ) ) )

      ( D():AlbaranesProveedoresLineas( ::nView ) )->CDETALLE   :=  ( D():Articulos( ::nView ) )->Nombre
      ( D():AlbaranesProveedoresLineas( ::nView ) )->CUNIDAD    :=  ( D():Articulos( ::nView ) )->cUnidad
      ( D():AlbaranesProveedoresLineas( ::nView ) )->NIVA       :=  nIva( D():TiposIva( ::nView ), ( D():Articulos( ::nView ) )->TipoIva )
      ( D():AlbaranesProveedoresLineas( ::nView ) )->NCTLSTK    :=  ( D():Articulos( ::nView ) )->NCTLSTOCK
      ( D():AlbaranesProveedoresLineas( ::nView ) )->CCODFAM    :=  ( D():Articulos( ::nView ) )->Familia

   end

   ( D():AlbaranesProveedoresLineas( ::nView ) )->nPreDiv       := hGet( hLine, "PCosto" )
   ( D():AlbaranesProveedoresLineas( ::nView ) )->NUNICAJA      := hGet( hLine, "Unidades" )
   ( D():AlbaranesProveedoresLineas( ::nView ) )->nCanEnt       := 1
   ( D():AlbaranesProveedoresLineas( ::nView ) )->CALMLIN       := ::cCodigoAlmacen

   ( D():AlbaranesProveedoresLineas( ::nView ) )->( dbUnLock() )

Return ( .T. )



static FUNCTION TImportarExcelAlbaranes_recalculaTotales( ) ; local Self AS CLASS TImportarExcelAlbaranes := QSelf() AS CLASS TImportarExcelAlbaranes

   local aTotAlb
   local nRec     := ( D():AlbaranesProveedores( ::nView ) )->( recno() )
   local nOrdAnt  := ( D():AlbaranesProveedores( ::nView ) )->( OrdSetFocus( "NNUMALB" ) )

   if ( D():AlbaranesProveedores( ::nView ) )->( dbSeek( ::cSerieAlbaran + Str( ::cNumeroAlbaran ) + ::cSufijoAlbaran ) )

      if dbLock( D():AlbaranesProveedores( ::nView ) )






         aTotAlb                 := aTotAlbPrv( ::cSerieAlbaran + Str( ::cNumeroAlbaran ) + ::cSufijoAlbaran, D():AlbaranesProveedores( ::nView ), D():AlbaranesProveedoresLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), ( D():AlbaranesProveedores( ::nView ) )->cDivAlb )

         ( D():AlbaranesProveedores( ::nView ) )->nTotNet := aTotAlb[1]
         ( D():AlbaranesProveedores( ::nView ) )->nTotIva := aTotAlb[2]
         ( D():AlbaranesProveedores( ::nView ) )->nTotReq := aTotAlb[3]
         ( D():AlbaranesProveedores( ::nView ) )->nTotAlb := aTotAlb[4]

         ( D():AlbaranesProveedores( ::nView ) )->( dbUnLock() )

      end

   end

   ( D():AlbaranesProveedores( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():AlbaranesProveedores( ::nView ) )->( dbGoTo( nRec ) )

Return ( .T. )
#line 11 "C:\fwh1801\Gestool\bin\Script\AlbaranesProveedores\ImportarExcel.prg"
Function ImportarExcel( nView )

   TImportarExcel():New( nView ):Run()

Return nil



_HB_CLASS TImportarExcel ; function TImportarExcel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TImportarExcel", iif( .F., { }, { @HBObject() } ), @TImportarExcel() ) ) ;

; _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

; _HB_MEMBER { oExcel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oExcel"}, .F. )

; _HB_MEMBER { cFicheroExcel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFicheroExcel"}, .F. )

; _HB_MEMBER { nFilaInicioImportacion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFilaInicioImportacion"}, .F. )

; _HB_MEMBER { cColumnaCampoClave } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cColumnaCampoClave"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TImportarExcel_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Run(); oClass:AddMethod( "Run", @TImportarExcel_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER procesaFicheroExcel(); oClass:AddMethod( "procesaFicheroExcel", @TImportarExcel_procesaFicheroExcel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER filaValida(); oClass:AddMethod( "filaValida", @TImportarExcel_filaValida(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER siguienteLinea(); oClass:AddInline( "siguienteLinea", {|Self | ( ( Self ) ), ( ++::nFilaInicioImportacion ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExcelValue(); oClass:AddMethod( "getExcelValue", @TImportarExcel_getExcelValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExcelString(); oClass:AddMethod( "getExcelString", @TImportarExcel_getExcelString(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExcelNumeric( columna, fila); oClass:AddMethod( "getExcelNumeric", @TImportarExcel_getExcelNumeric(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExcelLogic( columna, fila); oClass:AddMethod( "getExcelLogic", @TImportarExcel_getExcelLogic(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER openExcel(); oClass:AddMethod( "openExcel", @TImportarExcel_openExcel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER closeExcel(); oClass:AddMethod( "closeExcel", @TImportarExcel_closeExcel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existeRegistro(); oClass:AddInline( "existeRegistro", {|Self | ( ( Self ) ), ( D():gotoArticulos( ::getExcelValue( ::cColumnaCampoClave ), ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER appendRegistro(); oClass:AddInline( "appendRegistro", {|Self | ( ( Self ) ), ( ( D():Articulos( ::nView ) )->( dbappend() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER bloqueaRegistro(); oClass:AddInline( "bloqueaRegistro", {|Self | ( ( Self ) ), ( ( D():Articulos( ::nView ) )->( dbrlock() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER desbloqueaRegistro(); oClass:AddInline( "desbloqueaRegistro", {|Self | ( ( Self ) ), ( ( D():Articulos( ::nView ) )->( dbcommit() ), ( D():Articulos( ::nView ) )->( dbunlock() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER importarCampos(); oClass:AddMethod( "importarCampos", @TImportarExcel_importarCampos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TImportarExcel ;



static FUNCTION TImportarExcel_New( nView ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   ::nView                    := nView





   ::cFicheroExcel            := "C:\Users\calero\Desktop\Importar.xlsx"





   ::nFilaInicioImportacion   := 7





   ::cColumnaCampoClave       := "A"

Return ( Self )



static FUNCTION TImportarExcel_Run( ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   if !file( ::cFicheroExcel )
      msgStop( "El fichero " + ::cFicheroExcel + " no existe." )
      Return ( .F. )
   end



   msgrun(  "Procesando fichero " + ::cFicheroExcel, "Espere por favor...", {|| ::procesaFicheroExcel() } )

   msginfo( "Proceso finalizado" )

Return ( .T. )



static FUNCTION TImportarExcel_openExcel( ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   ::oExcel                        := TOleExcel():New( "Importando hoja de excel", "Conectando...", .F. )

   ::oExcel:oExcel:Visible         := .T.
   ::oExcel:oExcel:DisplayAlerts   := .F.
   ::oExcel:oExcel:WorkBooks:Open( ::cFicheroExcel )
   ::oExcel:oExcel:WorkSheets( 1 ):Activate()

Return ( Self )



static FUNCTION TImportarExcel_closeExcel( ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   ::oExcel:oExcel:Quit()
   ::oExcel:oExcel:DisplayAlerts := .T.
   ::oExcel:End()

Return ( Self )



static FUNCTION TImportarExcel_procesaFicheroExcel( ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   ::oExcel                        := TOleExcel():New( "Importando hoja de excel", "Conectando...", .F. )

   ::oExcel:oExcel:Visible         := .T.
   ::oExcel:oExcel:DisplayAlerts   := .F.
   ::oExcel:oExcel:WorkBooks:Open( ::cFicheroExcel )
   ::oExcel:oExcel:WorkSheets( 1 ):Activate()

   while ( ::filaValida() )

      if ::existeRegistro()
         ::bloqueaRegistro()
      else
         ::appendRegistro()
      end

      if !( neterr() )

         ::importarCampos()

         ::desbloqueaRegistro()

      endif

      ::siguienteLinea()

   end

   ::oExcel:oExcel:Quit()
   ::oExcel:oExcel:DisplayAlerts := .T.
   ::oExcel:End()

Return nil






static FUNCTION TImportarExcel_importarCampos( ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   ( D():Articulos( ::nView ) )->Codigo   := ::getExcelValue( "A" )
   ( D():Articulos( ::nView ) )->Nombre   := ::getExcelValue( "B" )

Return nil



static FUNCTION TImportarExcel_filaValida( ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

Return ( !empty( ::getExcelValue( ::cColumnaCampoClave ) ) )



static FUNCTION TImportarExcel_getExcelValue( columna, fila, valorPorDefecto ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   local oBlock
   local oError
   local excelValue

   If( fila == nil, fila := ::nFilaInicioImportacion, ) ;

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   excelValue           := ::oExcel:oExcel:ActiveSheet:Range( columna + ltrim( str( fila ) ) ):Value

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

   if empty( excelValue )
      Return ( valorPorDefecto )
   end

Return ( excelValue )



static FUNCTION TImportarExcel_getExcelString( columna, fila ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   local excelValue
   local valorPorDefecto      := ""

   If( fila == nil, fila := ::nFilaInicioImportacion, ) ;

   excelValue                 := ::getExcelValue( columna, fila, valorPorDefecto )

   if valtype( excelValue ) == "N"
      excelValue              := int( excelValue )
   end

   if valtype( excelValue ) <> "C"
      excelValue              := cvaltochar( excelValue )
   end

   if empty( excelValue )
      Return ( valorPorDefecto )
   end

Return ( excelValue )



static FUNCTION TImportarExcel_getExcelNumeric( columna, fila ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   local excelValue
   local valorPorDefecto      := 0

   If( fila == nil, fila := ::nFilaInicioImportacion, ) ;

   excelValue                 := ::getExcelValue( columna, fila, valorPorDefecto )

   if valtype( excelValue ) <> "N"
      excelValue              := strtran( excelValue, ",", "." )
      excelValue              := val( AllTrim( excelValue ) )
   end





Return ( excelValue )



static FUNCTION TImportarExcel_getExcelLogic( columna, fila ) ; local Self AS CLASS TImportarExcel := QSelf() AS CLASS TImportarExcel

   local excelValue
   local valorPorDefecto      := .F.

   If( fila == nil, fila := ::nFilaInicioImportacion, ) ;

   excelValue                 := ::getExcelValue( columna, fila, valorPorDefecto )

   if valtype( excelValue ) == "C"
      excelValue              := ( upper( excelValue ) == "SI" )
   end

   if valtype( excelValue ) == "N"
      excelValue              := ( excelValue == 1 )
   end

   if empty( excelValue )
      Return ( valorPorDefecto )
   end

Return ( excelValue )
