#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
         EXTERNAL FW_GT











extern errorsys
#line 15 "C:\fwh1801\Gestool\bin\Script\AlbaranesProveedores\importarAlbaranesAndelMail.prg"
static nView
static nNumAlb
static oBtnAceptar



Function IcgMotor( nVie )

   local oDlg
   local aFichero
   local oInforme
   local oBrwFichero
   local oTreeImportacion
   local oImageImportacion

   aFichero                         := {}
   cInforme                         := ""
   lIncidencia                      := .F.
   nView                            := nVie

   oDlg = TDialog():New(,,,,, "ImportarICG",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg" )





      oBrwFichero                   := IXBrowse():New( oDlg )

      oBrwFichero:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFichero:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFichero:SetArray( aFichero, , , .F. )

      oBrwFichero:nMarqueeStyle     := 5

      oBrwFichero:lHScroll          := .F.

      oBrwFichero:CreateFromResource( 220 )

      oBrwFichero:bLDblClick        := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( aFichero[ oBrwFichero:nArrayAt ] ) ) }

      with object ( oBrwFichero:AddCol() )
         :cHeader          := "Fichero"
         :bEditValue       := {|| aFichero[ oBrwFichero:nArrayAt ] }
         :nWidth           := 460
      end




      TButton():ReDefine( 200, {||( AddFicheroICG( aFichero, oBrwFichero ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 210, {||( DelFicheroICG( aFichero, oBrwFichero ) )}, oDlg,,, .F.,,,, .F. )








      oInforme := TMultiGet():ReDefine( 230, { | u | If( PCount()==0, cInforme, cInforme:= u ) }, oDlg,,,,,,, .F.,, .F.,, )




      oBtnAceptar := TButton():ReDefine( 1, {||( Ejecutar( aFichero, oDlg, oInforme ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| Ejecutar( aFichero, oDlg, oInforme ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION Ejecutar( aFichero, oDlg, oInforme )

   msgRun( "Ejecutando el script", "Espere por favor...", {|| IcgAlbPrv( aFichero, oDlg, oInforme ) } )

RETURN ( nil )



STATIC FUNCTION IcgAlbPrv( aFichero, oDlg, oInforme )

   local nBytes
   local aTotAlb
   local cSerDoc
   local nNumDoc
   local cSufDoc
   local dFecDoc
   local cRefLin
   local cDesLin
   local nUntLin
   local nPvpLin
   local nDtoLin
   local cFilEdm
   local hFilEdm
   local cBuffer
   local cInformeToShow
   local hashDatabaseList  := {=>}

   cInforme                := ""





   for each cFilEdm in aFichero

      if file( cFilEdm )

         cInforme          += "Importando el fichero " + cFilEdm + Chr(13)+Chr(10)
         cInforme          += Chr(13)+Chr(10)





         hFilEdm           := fOpen( cFilEdm )

         fSeek( hFilEdm, 0, 0 )

         SysRefresh()

         cBuffer           := Space( 211 )
         nBytes            := fRead( hFilEdm, @cBuffer, 211 )

         cSerDoc           := SubStr( cBuffer,  9, 1 )

         if !( upper( cSerDoc ) >= "A" .AND. upper( cSerDoc ) <= "Z" )
            cSerDoc        := "A"
         end

         nNumDoc           := SubStr( cBuffer, 11, 8 )
         cSufDoc           := SubStr( cBuffer,  9, 2 )
         dFecDoc           := SubStr( cBuffer, 20, 8 )

         IcgCabAlbPrv( cSerDoc, nNumDoc, cSufDoc, dFecDoc )

         cBuffer           := Space( 211 )

         nBytes            := fRead( hFilEdm, @cBuffer, 211 )

         cBuffer           := Space( 211 )

         while ( nBytes    := fRead( hFilEdm, @cBuffer, 211 ) ) == 211

            cBuffer        := Alltrim( cBuffer )

            cDesLin        := Upper( AllTrim( SubStr( cBuffer, 21, 36 ) ) )

            nUntLin        := SubStr( cBuffer, 57, 5 )

            if At( "-", nUntLin ) <> 0
               nUntLin     := StrTran( nUntLin, "-", "" )
               nUntLin     := Val( nUntLin ) * -1
            else
               nUntLin     := Val( nUntLin )
            end

            nPvpLin        := Val( SubStr( cBuffer, 63, 7 ) )

            nDtoLin        := val( strtran( substr( cBuffer, 71, 7 ), ",", "." ) )

            if ( nDtoLin >= 100 )

               cRefLin     := Alltrim( SubStr( cBuffer, 87, 8 ) )



               fRead( hFilEdm, @cBuffer, 1 )

            else

               cRefLin     := Alltrim( SubStr( cBuffer, 87, 8 ) )

            end

            if Left( cDesLin, 1 ) <> "*"
               IcgDetAlbPrv( cSerDoc, cSufDoc, cDesLin, nUntLin, nPvpLin, nDtoLin, cRefLin, dFecDoc )
            end

            SysRefresh()

            cBuffer        := Space( 211 )

         end

         fClose( hFilEdm )



         if dbLock( D():AlbaranesProveedores( nView ) )

            aTotAlb                 := aTotAlbPrv( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, D():AlbaranesProveedores( nView ), D():AlbaranesProveedoresLineas( nView ), D():TiposIva( nView ), D():Divisas( nView ), ( D():AlbaranesProveedores( nView ) )->cDivAlb )

            ( D():AlbaranesProveedores( nView ) )->nTotNet := aTotAlb[ 1 ]
            ( D():AlbaranesProveedores( nView ) )->nTotIva := aTotAlb[ 2 ]
            ( D():AlbaranesProveedores( nView ) )->nTotReq := aTotAlb[ 3 ]
            ( D():AlbaranesProveedores( nView ) )->nTotAlb := aTotAlb[ 4 ]

            ( D():AlbaranesProveedores( nView ) )->( dbUnLock() )

         end

      else

         if !Empty( cFilEdm )
            cInforme                   += "No existe el fichero " + cFilEdm + Chr(13)+Chr(10)
         end

      end

   next

   oInforme:cText( cInforme )

   if lIncidencia





      cInformeToShow                   := strtran( cInforme, Chr(13)+Chr(10), "</p>",  )

      hSet( hashDatabaseList, "mail", "josecarlos@icgmotor.com" )

      hSet( hashDatabaseList, "subject", "Indicencias en albaranes de proveedor" )
      hSet( hashDatabaseList, "message", Rtrim( cInformeToShow ) )

      with object TSendMail():New()

         if :buildMailerObject()

            :sendMail( hashDatabaseList )

         end

      end

   end

   oBtnAceptar:Hide()

RETURN ( nil )



Static Function AddFicheroICG( aFichero, oBrwFichero )

   local i
   local cFile
   local aFile
   local nFlag    := nOr( 0x00000800, 0x00000008, 0x00000200, 0x00080000, 0x00200000 )

   aFile          := cGetFile( "All | *.*", "Seleccione los ficheros a importar", "*.*" , , .F., .T., nFlag )

   if !Empty( aFile )

      if Len( aFile ) > 1

         for i := 2 to Len( aFile )
            aFile[ i ] := aFile[ 1 ] + "\" + aFile[ i ]
         next

         aDel( aFile, 1, .T. )

      endif

      if IsArray( aFile )

         for i := 1 to Len( aFile )
            aAdd( aFichero, aFile[ i ] )
         next

      else

         aAdd( aFichero, aFile )

      endif

   end

   oBrwFichero:Refresh()

RETURN ( aFichero )



Static Function DelFicheroICG( aFichero, oBrwFichero )

   aDel( aFichero, oBrwFichero:nArrayAt, .T. )

   oBrwFichero:Refresh()

RETURN ( nil )



Static Function IcgCabAlbPrv( cSerDoc, nNumDoc, cSufDoc, dFecDoc )

   local lApp
   local cCodPrv                 := Replicate( "0", RetNumCodPrvEmp() )

   if dbSeekInOrd( cSerDoc + nNumDoc + cSufDoc, "cSuAlb", D():AlbaranesProveedores( nView ) )

      lApp                       := .F.
      cSerDoc                    := ( D():AlbaranesProveedores( nView ) )->cSerAlb
      nNumAlb                    := ( D():AlbaranesProveedores( nView ) )->nNumAlb
      cSufDoc                    := ( D():AlbaranesProveedores( nView ) )->cSufAlb

      while ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( cSerDoc + Str( nNumAlb ) + cSufDoc ) )
         if dbLock( D():AlbaranesProveedoresLineas( nView ) )
            ( D():AlbaranesProveedoresLineas( nView ) )->( dbDelete() )
            ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnLock() )
         end
      end

   else

      lApp                       := .T.
      nNumAlb                    := nNewDoc( cSerDoc, D():AlbaranesProveedores( nView ), "nAlbPrv", , D():Contadores( nView ) )

   end

   if lApp
      dbAppe( D():AlbaranesProveedores( nView ) )
   else
      dbLock( D():AlbaranesProveedores( nView ) )
   end

      ( D():AlbaranesProveedores( nView ) )->cSerAlb    := cSerDoc
      ( D():AlbaranesProveedores( nView ) )->nNumAlb    := nNumAlb
      ( D():AlbaranesProveedores( nView ) )->cSufAlb    := cSufDoc
      ( D():AlbaranesProveedores( nView ) )->dFecAlb    := Stod( dFecDoc )
      ( D():AlbaranesProveedores( nView ) )->tFecAlb    := GetSysTime()
      ( D():AlbaranesProveedores( nView ) )->cCodAlm    := Application():codigoAlmacen()
      ( D():AlbaranesProveedores( nView ) )->cDivAlb    := cDivEmp()
      ( D():AlbaranesProveedores( nView ) )->nVdvAlb    := nChgDiv( cDivEmp(), D():Divisas( nView ) )
      ( D():AlbaranesProveedores( nView ) )->cSuAlb     := cSerDoc + nNumDoc + cSufDoc
      ( D():AlbaranesProveedores( nView ) )->cCodUsr    := Auth():Codigo()
      ( D():AlbaranesProveedores( nView ) )->cCodDlg    := Application():CodigoDelegacion()
      ( D():AlbaranesProveedores( nView ) )->cCodCaj    := Application():CodigoCaja()
      ( D():AlbaranesProveedores( nView ) )->cTurAlb    := cCurSesion()
      ( D():AlbaranesProveedores( nView ) )->lFacturado := .F.
      ( D():AlbaranesProveedores( nView ) )->nFacturado := 1

      ( D():AlbaranesProveedores( nView ) )->cCodPrv    := cCodPrv

      if ( D():Proveedores( nView ) )->( dbSeek( cCodPrv ) )
         ( D():AlbaranesProveedores( nView ) )->cNomPrv := ( D():Proveedores( nView ) )->Titulo
         ( D():AlbaranesProveedores( nView ) )->cDirPrv := ( D():Proveedores( nView ) )->Domicilio
         ( D():AlbaranesProveedores( nView ) )->cPobPrv := ( D():Proveedores( nView ) )->Poblacion
         ( D():AlbaranesProveedores( nView ) )->cProPrv := ( D():Proveedores( nView ) )->Provincia
         ( D():AlbaranesProveedores( nView ) )->cPosPrv := ( D():Proveedores( nView ) )->CodPostal
         ( D():AlbaranesProveedores( nView ) )->cDniPrv := ( D():Proveedores( nView ) )->Nif
      end

   ( D():AlbaranesProveedores( nView ) )->( dbUnlock() )

RETURN ( nil )



Static Function IcgDetAlbPrv( cSerDoc, cSufDoc, cDesLin, nUntLin, nPvpLin, nDtoLin, cRefLin, dFecDoc )

   if !dbSeekInOrd( cRefLin, "Codigo", D():Articulos( nView ) )
      cInforme                += "...Articulo " + cRefLin + ", " + cDesLin + " no existe en la base de datos" + Chr(13)+Chr(10)
      cInforme                += Chr(13)+Chr(10)
      lIncidencia             := .T.
   else
      if ( Round( ( D():Articulos( nView ) )->pCosto, 2 ) <> ( Round( ( nPvpLin ) - ( nPvpLin * nDtoLin / 100 ), 2 ) ) )
         cInforme             += "...Articulo " + cRefLin + ", " + cDesLin + " ha variado su precio de costo," + Chr(13)+Chr(10)
         cInforme             += "......Familia " + ( D():Articulos( nView ) )->Familia + ", " + alltrim( retFamilia( ( D():Articulos( nView ) )->Familia, D():Familias( nView ) ) ) + Chr(13)+Chr(10)
         cInforme             += "......Precio nuevo " + alltrim( str( round( ( nPvpLin ) - ( nPvpLin * nDtoLin / 100 ), 2 ) ) )  + Chr(13)+Chr(10)
         cInforme             += "......Precio anterior " + alltrim( str( round( ( D():Articulos( nView ) )->pCosto, 2 ) ) ) + " con fecha " + dtoc( ( D():Articulos( nView ) )->dFecChg ) + Chr(13)+Chr(10)
         cInforme             += Chr(13)+Chr(10)
         lIncidencia          := .T.
      end
   end

   ( D():AlbaranesProveedoresLineas( nView ) )->( dbAppend() )
   ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb    := cSerDoc
   ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb    := nNumAlb
   ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb    := cSufDoc
   ( D():AlbaranesProveedoresLineas( nView ) )->cAlmLin    := Application():codigoAlmacen()
   ( D():AlbaranesProveedoresLineas( nView ) )->cRef       := cRefLin
   ( D():AlbaranesProveedoresLineas( nView ) )->cDetalle   := cDesLin
   ( D():AlbaranesProveedoresLineas( nView ) )->mLngDes    := cDesLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nUniCaja   := nUntLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nPreDiv    := nPvpLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nDtoLin    := nDtoLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nIva       := nIva( D():TiposIva( nView ), "G" )
   ( D():AlbaranesProveedoresLineas( nView ) )->lFacturado := .F.
   ( D():AlbaranesProveedoresLineas( nView ) )->dFecAlb    := Stod( dFecDoc )
   ( D():AlbaranesProveedoresLineas( nView ) )->tFecAlb    := GetSysTime()
   ( D():AlbaranesProveedoresLineas( nView ) )->nNumLin    := AlbaranesProveedoresLineasModel():nLastNumLin( cSerDoc, nNumAlb, cSufDoc )

   ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnlock() )

RETURN ( nil )
