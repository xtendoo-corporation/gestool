#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
         EXTERNAL FW_GT











extern errorsys
#line 10 "C:\fwh1801\Gestool\bin\Script\Articulos\ActUltCosto.prg"
Function ActUltCosto( nView )

   local oActUltCost    := TActUltCost():New( nView )

   oActUltCost:Run()

Return nil



_HB_CLASS TActUltCost ; function TActUltCost ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TActUltCost", iif( .F., { }, { @HBObject() } ), @TActUltCost() ) ) ;

; _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TActUltCost_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Run(); oClass:AddMethod( "Run", @TActUltCost_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER procesa(); oClass:AddMethod( "procesa", @TActUltCost_procesa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TActUltCost ;



static FUNCTION TActUltCost_New( nView ) ; local Self AS CLASS TActUltCost := QSelf() AS CLASS TActUltCost

   ::nView                    := nView

Return ( Self )



static FUNCTION TActUltCost_Run( ) ; local Self AS CLASS TActUltCost := QSelf() AS CLASS TActUltCost

   msgrun( "Procesando ", "Espere por favor...",  {|| ::procesa() } )

   msginfo( "Proceso finalizado" )

Return ( .T. )



static FUNCTION TActUltCost_procesa( ) ; local Self AS CLASS TActUltCost := QSelf() AS CLASS TActUltCost

   local nUltCos  := 0
   local nRec     := ( D():Articulos( ::nView ) )->( Recno() )
   local nRecAlb  := ( D():AlbaranesProveedoresLineas( ::nView ) )->( Recno() )
   local nRecFac  := ( D():FacturasProveedoresLineas( ::nView ) )->( Recno() )
   local nOrdAlb  := ( D():AlbaranesProveedoresLineas( ::nView ) )->( OrdSetFocus( "cRefFec" ) )
   local nOrdFac  := ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( "cRefFec" ) )


   ( D():Articulos( ::nView ) )->( dbGoTop() )

   while !( D():Articulos( ::nView ) )->( Eof() )

      if ( D():Articulos( ::nView ) )->pCosto <= 0

         nUltCos  := nCostoUltimaCompra( ( D():Articulos( ::nView ) )->Codigo, D():AlbaranesProveedoresLineas( ::nView ), D():FacturasProveedoresLineas( ::nView ) )

         if nUltCos > 0

            if dbLock( D():Articulos( ::nView ) )
               ( D():Articulos( ::nView ) )->pCosto := nUltCos
               ( D():Articulos( ::nView ) )->( dbUnLock() )
            end

         end

      end

      ( D():Articulos( ::nView ) )->( dbSkip() )

   end

   ( D():AlbaranesProveedoresLineas( ::nView ) )->( OrdSetFocus( nOrdAlb ) )
   ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( nOrdFac ) )

   ( D():Articulos( ::nView ) )->( dbGoTo( nRec ) )

   ( D():AlbaranesProveedoresLineas( ::nView ) )->( dbGoTo( nRecAlb ) )
   ( D():FacturasProveedoresLineas( ::nView ) )->( dbGoTo( nRecFac ) )

Return nil
