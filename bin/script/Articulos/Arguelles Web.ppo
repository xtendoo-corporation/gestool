#line 38 "C:\fwh1801\Gestool\bin\include\fivewin.ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\fivewin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 7 "C:\fwh1801\Gestool\bin\Script\Articulos\Arguelles Web.prg"
static dbfArticulo

static hFile
static cFile
static oText



Function Luncher()

   local oDlg, oMeter, oBtn, oFont
   local nVal     := 0
   local cMsg     := "Proceso de exportacion a fichero"
   local cTitle   := "Espere por favor..."

   cFile          := fullCurDir() + Dtos( date() ) + Strtran( Time(), ":", "" ) + ".txt"

   oFont := TFont():New( GetSysFont(), 0, -8,,,,,,,,,,,,,, )

   oDlg = TDialog():New( 5, 5, 13, 45, cTitle,,, .F.,,,,,, .F.,, oFont,,,, .F.,, "oDlg" )

   oText := TSay():New( 0.2, 0.5, {|| cMsg}, oDlg,,, .F., .F., .F., .F.,,, 130, 20, .F., .F., .F., .F., .F., .F., .F. )

   oMeter := TMeter():New( 2.2, 0.5, { | u | If( PCount()==0, nVal, nVal:= u ) }, 10, oDlg, 150, 2, .F., .F.,,, .F.,,,,, .F. )

   oDlg:bStart = { || ExportaStock( oMeter, oDlg ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oFont:End()

   ferase( cFile )

Return nil



Function ExportaStock( oMeter, oDlg )

       local oInt
       local oFtp
       local nTotStockAct

       if lOpenFiles()

          if File( cFile )
             fErase( cFile )
          end

          hFile       := fCreate( cFile )

          ( dbfArticulo )->( dbGoTop() )

          if !empty(oMeter)
             oMeter:setTotal( ( dbfArticulo )->( ordkeyCount() ) )
          end

          while !( dbfArticulo )->( eof() )

             if ( dbfArticulo )->lPubInt

                nTotStockAct   := StocksModel():nStockArticulo( ( dbfArticulo )->Codigo, "006             " )

                oText:setText( alltrim( ( dbfArticulo )->Codigo ) + space(1) + alltrim( ( dbfArticulo )->Nombre ) )





                fWrite( hFile, AllTrim( ( dbfArticulo )->Codigo ) + ";" +  AllTrim( Trans( nTotStockAct, "@E 999,999,999" ) ) + ";" +  AllTrim( Trans( ( dbfArticulo )->pVenta1, "@E 999,999,999.999" ) ) + ";" +  AllTrim( Trans( ( dbfArticulo )->pCosto, "@E 999,999,999.999" ) ) +  Chr( 13 ) + Chr( 10 ) )

             end

             ( dbfArticulo )->( dbSkip() )

             if !empty(oMeter)
                oMeter:set( ( dbfArticulo )->( ordkeyno() ) )
             end

          end

          fClose( hFile )

          CloseFiles()



          oText:setText( "Subimos el fichero resultante al Ftp" )

          envioFtp()

           oText:setText( "Fichero subido" )

       end

       oDlg:End()

Return ( nil )



STATIC FUNCTION envioFtp()

    local oFtp
    local ftpSit            := "ftp.arguelles360.com"
    local ftpDir            := cNoPathLeft( Rtrim( ftpSit ) )
    local nbrUsr            := "stock@arguelles360.com"
    local accUsr            := "7pePMlfxcLXBbS83"
    local pasInt            := .F.
    local nPuerto           := 21
    local cCarpeta          := ""

    if !file( cFile )
        Return ( Self )
    end

    oFtp               := TFtpCurl():New( nbrUsr, accUsr, ftpSit, nPuerto )
    oFtp:setPassive( pasInt )

    if oFtp:CreateConexion()

        oText:setText( "Conexión creada con el ftp." )

        if isFalse( oFtp:createFile( cFile, cCarpeta ) )
            oText:setText( "Error subiendo fichero " + cFile )
        else
            oText:setText( "Subido correctamente:  " + cFile )
        end

        oFtp:EndConexion()

        oText:setText( "Conexión cerrada con el ftp." )

    else

        msgStop( "Imposible conectar al sitio ftp " + oFtp:cServer )

    end

Return ( nil )



STATIC FUNCTION lOpenFiles( lExt, cPath )

   local oError
   local oBlock

   CursorWait()

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      oMsgText( "Abriendo ficheros artículos" )

      lOpenFiles  := .T.

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   RECOVER USING oError

      lOpenFiles           := .F.

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de artículos" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

   CursorWE()

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles( )

   if dbfArticulo <> nil
      ( dbfArticulo )->( dbCloseArea() )
   end

   dbfArticulo    := nil

   lOpenFiles     := .F.

RETURN ( .T. )
