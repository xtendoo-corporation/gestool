#line 38 "Z:\include\FiveWin.ch"
      static bError
#line 203 "Z:\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "Z:\include\FiveWin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 151 "Z:\Script\FacturasClientes\EDI\EDI_MariscosMendez.prg"
Function EDI_CafesyZymos( lNoExportados, oTree, nView )

   local oTEdiExporarFacturas

   oTEdiExporarFacturas          := TEdiExporarFacturas():New( lNoExportados, oTree, nView )
   oTEdiExporarFacturas:Run()

Return nil



_HB_CLASS TEdiExporarFacturas ; function TEdiExporarFacturas ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TEdiExporarFacturas", iif( .F., { }, { @HBObject() } ), @TEdiExporarFacturas() ) ) ;

; _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

; _HB_MEMBER { oTree } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTree"}, .F. )

; _HB_MEMBER { lNoExportados } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lNoExportados"}, .F. )

; _HB_MEMBER { cFileEDI } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileEDI"}, .F. )
; _HB_MEMBER { oFileEDI } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFileEDI"}, .F. )

; _HB_MEMBER { cCodigoCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodigoCliente"}, .F. )

; _HB_MEMBER { sTotalFactura } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"sTotalFactura"}, .F. )

   _HB_MEMBER New( lNoExportados, oTree, nView); oClass:AddMethod( "New", @TEdiExporarFacturas_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Run(); oClass:AddMethod( "Run", @TEdiExporarFacturas_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isFacturaProcesada(); oClass:AddMethod( "isFacturaProcesada", @TEdiExporarFacturas_isFacturaProcesada(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER infoFacturaEnProceso(); oClass:AddInline( "infoFacturaEnProceso", {|Self | ( ( Self ) ), ( ::oTree:Select( ::oTree:Add( "Factura : " + D():FacturasClientesIdText( ::nView ) + " en proceso.", 1 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER infoFacturaGenerada(); oClass:AddInline( "infoFacturaGenerada", {|Self | ( ( Self ) ), ( ::oTree:Select( ::oTree:Add( "Factura : " + D():FacturasClientesIdText( ::nView ) + " generada en el fichero " + ::cFileEDI, 1 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createFile(); oClass:AddMethod( "createFile", @TEdiExporarFacturas_createFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER closeFile(); oClass:AddInline( "closeFile", {|Self | ( ( Self ) ), ( ::oFileEDI:Close() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isFile(); oClass:AddInline( "isFile", {|Self | ( ( Self ) ), ( file( ::cFileEDI ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeDatosFijos(); oClass:AddInline( "writeDatosFijos", {|Self | ( ( Self ) ), ( ::oFileEDI:add( "INVOIC_D_93A_UN_EAN007" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeDatosGenerales(); oClass:AddMethod( "writeDatosGenerales", @TEdiExporarFacturas_writeDatosGenerales(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeFechas(); oClass:AddMethod( "writeFechas", @TEdiExporarFacturas_writeFechas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeFormadePago(); oClass:AddMethod( "writeFormadePago", @TEdiExporarFacturas_writeFormadePago(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeReferenciaAlbaran(); oClass:AddMethod( "writeReferenciaAlbaran", @TEdiExporarFacturas_writeReferenciaAlbaran(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeReferenciaPedido(); oClass:AddMethod( "writeReferenciaPedido", @TEdiExporarFacturas_writeReferenciaPedido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeDatosProveedor(); oClass:AddMethod( "writeDatosProveedor", @TEdiExporarFacturas_writeDatosProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeDatosComprador(); oClass:AddMethod( "writeDatosComprador", @TEdiExporarFacturas_writeDatosComprador(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeDatosCompradorLegal(); oClass:AddMethod( "writeDatosCompradorLegal", @TEdiExporarFacturas_writeDatosCompradorLegal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeEmisorFactura(); oClass:AddMethod( "writeEmisorFactura", @TEdiExporarFacturas_writeEmisorFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeReceptorFactura(); oClass:AddMethod( "writeReceptorFactura", @TEdiExporarFacturas_writeReceptorFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeReceptorMercancia(); oClass:AddMethod( "writeReceptorMercancia", @TEdiExporarFacturas_writeReceptorMercancia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeEmisorPago(); oClass:AddMethod( "writeEmisorPago", @TEdiExporarFacturas_writeEmisorPago(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeDivisa(); oClass:AddMethod( "writeDivisa", @TEdiExporarFacturas_writeDivisa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeMarcaCalculoTotales(); oClass:AddInline( "writeMarcaCalculoTotales", {|Self | ( ( Self ) ), ( ::oFileEDI:add( "CNTRES|2" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeResumenTotales(); oClass:AddMethod( "writeResumenTotales", @TEdiExporarFacturas_writeResumenTotales(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeResumenPrimerImpuesto(); oClass:AddMethod( "writeResumenPrimerImpuesto", @TEdiExporarFacturas_writeResumenPrimerImpuesto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeResumenSegundoImpuesto(); oClass:AddMethod( "writeResumenSegundoImpuesto", @TEdiExporarFacturas_writeResumenSegundoImpuesto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeResumenTercerImpuesto(); oClass:AddMethod( "writeResumenTercerImpuesto", @TEdiExporarFacturas_writeResumenTercerImpuesto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeLineas(); oClass:AddMethod( "writeLineas", @TEdiExporarFacturas_writeLineas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeCabeceraLinea(); oClass:AddMethod( "writeCabeceraLinea", @TEdiExporarFacturas_writeCabeceraLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeDescripcionesLinea(); oClass:AddMethod( "writeDescripcionesLinea", @TEdiExporarFacturas_writeDescripcionesLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeCantidadLinea(); oClass:AddMethod( "writeCantidadLinea", @TEdiExporarFacturas_writeCantidadLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeTotalLinea(); oClass:AddMethod( "writeTotalLinea", @TEdiExporarFacturas_writeTotalLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writePrecioBrutoUnitarioLinea(); oClass:AddMethod( "writePrecioBrutoUnitarioLinea", @TEdiExporarFacturas_writePrecioBrutoUnitarioLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writePrecioNetoUnitarioLinea(); oClass:AddMethod( "writePrecioNetoUnitarioLinea", @TEdiExporarFacturas_writePrecioNetoUnitarioLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER writeImpuestosLinea(); oClass:AddMethod( "writeImpuestosLinea", @TEdiExporarFacturas_writeImpuestosLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNumero(); oClass:AddInline( "getNumero", {|Self, nNumero | ( ( Self ) ), ( transform( nNumero, "@R 99999999999.999" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFecha(); oClass:AddInline( "getFecha", {|Self, dFecha | ( ( Self ) ), ( dtos( dFecha ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isLineaValida(); oClass:AddInline( "isLineaValida", {|Self | ( ( Self ) ), ( lValLine( D():FacturasClientesLineas( ::nView ) ) .AND. !( D():FacturasClientesLineas( ::nView ) )->lTotLin .AND. nTotNFacCli() <> 0 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isDescuentoValido(); oClass:AddInline( "isDescuentoValido", {|Self | ( ( Self ) ), ( ( D():FacturasClientesLineas( ::nView ) )->nDto <> 0 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setFacturaClienteGeneradaEDI(); oClass:AddMethod( "setFacturaClienteGeneradaEDI", @TEdiExporarFacturas_setFacturaClienteGeneradaEDI(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TEdiExporarFacturas ;



static FUNCTION TEdiExporarFacturas_New( lNoExportados, oTree, nView ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   ::lNoExportados            := lNoExportados
   ::oTree                    := oTree
   ::nView                    := nView

Return ( self )



static FUNCTION TEdiExporarFacturas_Run( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local oNode

   if ::isFacturaProcesada()
      Return ( self )
   end

   ::infoFacturaEnProceso()

   ::sTotalFactura         := sTotFacCli()

   ::cCodigoCliente        := ( D():FacturasClientes( ::nView ) )->cCodCli

   ::createFile()

   if ::isFile()

      ::writeDatosFijos()
      ::writeDatosGenerales()
      ::writeFechas()
      ::writeFormadePago()

      ::writeReferenciaAlbaran()
      ::writeReferenciaPedido()
      ::writeDatosProveedor()

      ::writeDatosComprador()
      ::writeDatosCompradorLegal()

      ::writeEmisorFactura()
      ::writeReceptorFactura()
      ::writeReceptorMercancia()
      ::writeEmisorPago()

      ::writeDivisa()

      ::writeLineas()

      ::writeMarcaCalculoTotales()
      ::writeResumenTotales()
      ::writeResumenPrimerImpuesto()
      ::writeResumenSegundoImpuesto()
      ::writeResumenTercerImpuesto()

      ::closeFile()

      ::setFacturaClienteGeneradaEDI()

      ::infoFacturaGenerada()

   end

Return ( self )



static FUNCTION TEdiExporarFacturas_isFacturaProcesada( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   if ( D():FacturasClientes( ::nView ) )->lExpEdi .AND. ::lNoExportados
      ::oTree:Select( ::oTree:Add( "Factura : " + D():FacturasClientesIdText( ::nView ) + " anteriormente generada.", 1 ) )
      Return ( .T. )
   end

Return ( .F. )



static FUNCTION TEdiExporarFacturas_createFile( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   ::cFileEDI     := "c:\eDiversa\send\Planos\" + "F" + D():FacturasClientesIdShort( ::nView ) + ".pla"

   if file( ::cFileEDI )
      fErase( ::cFileEDI )
   end

   ::oFileEDI     := TTxtFile():New( ::cFileEDI )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeDatosGenerales( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "INV" + "|"
   cLine          += D():FacturasClientesIdShort( ::nView ) + "|"
   cLine          += "380" + "|"
   cLine          += "9"

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeFechas( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "DTM" + "|"
   cLine          += ::getFecha( ( D():FacturasClientes( ::nView ) )->dFecFac )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeFormadePago( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "PAI" + "|"
   cLine          += AllTrim( RetFld( ( D():FacturasClientes( ::nView ) )->cCodPago, D():FormasPago( ::nView ), "cCodEdi" ) )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeReferenciaAlbaran( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "RFF" + "|"
   cLine          += "DQ" + "|"
   cLine          += AllTrim( ( D():FacturasClientes( ::nView ) )->cSuAlb )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeReferenciaPedido( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "RFF" + "|"
   cLine          += "ON" + "|"
   cLine          += AllTrim( ( D():FacturasClientes( ::nView ) )->cSuFac )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeDatosProveedor( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

::oFileEDI:add( "NADSU|" + AllTrim( uFieldEmpresa( "cCodEdi" ) ) + "|MARISCOS MENDEZ  SL|R.M.Huelva,Tomo269 Gral.Lb.96 Secc.1º,Fol.96, Hoja H-1925 Inscr.1º|POLIGONO PESQUERO NORTE S/N|HUELVA|21002     |B21173786" )

::oFileEDI:add( "NADSCO|" + AllTrim( uFieldEmpresa( "cCodEdi" ) ) + "|MARISCOS MENDEZ  SL|R.M.Huelva,Tomo269 Gral.Lb.96 Secc.1º,Fol.96, Hoja H-1925 Inscr.1º|POLIGONO PESQUERO NORTE S/N|HUELVA|21002     |B21173786" )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeDatosComprador( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cCodigo
   local cLine    := "NADBY" + "|"

   cCodigo        := getCustomExtraField( "025", "Clientes", ( D():FacturasClientes( ::nView ) )->cCodCli )

   if !Empty( cCodigo )
      cLine       += AllTrim( cCodigo ) + "|"
   else
      cLine       += "" + "|"
   end

   cLine          += AllTrim( ( D():FacturasClientes( ::nView ) )->cNomCli ) + "|"

   if ( D():Clientes( ::nView ) )->( dbSeek( ( D():FacturasClientes( ::nView ) )->cCodCli ) )
      cLine       += AllTrim( ( D():Clientes( ::nView ) )->cDomEnt ) + "|"
      cLine       += AllTrim( ( D():Clientes( ::nView ) )->cPobEnt ) + "|"
      cLine       += Padr( ( D():Clientes( ::nView ) )->cCPEnt, 10 ) + "|"
      cLine       += AllTrim( ( D():FacturasClientes( ::nView ) )->cDniCli ) + "|"
      cLine       += AllTrim( ( D():Clientes( ::nView ) )->cDeparta ) + "|"
   end
   cLine           += "ES"

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeDatosCompradorLegal( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cCodigo
   local cLine    := "NADBCO" + "|"

   cCodigo        := AllTrim( getCustomExtraField( "025", "Clientes", ( D():FacturasClientes( ::nView ) )->cCodCli ) ) + "|"

   if !Empty( cCodigo )
      cLine       += AllTrim( cCodigo ) + "|"
   else
      cLine       += "" + "|"
   end

   cLine          += AllTrim( ( D():FacturasClientes( ::nView ) )->cNomCli ) + "|"







   cLine          += AllTrim( ( D():FacturasClientes( ::nView ) )->cDniCli ) + "|"

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeEmisorFactura( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "NADII" + "|"
   cLine          += AllTrim( uFieldEmpresa( "cCodEdi" ) ) + "|"
   cLine          += "MARISCOS MENDEZ  SL" + "|"
   cLine          += "POLIGONO PESQUERO NORTE S/N" + "|"
   cLine          += "HUELVA" + "|"
   cLine          += "21002     " + "|"
   cLine          += "B21173786" + "|"
   cLine          += "ES"

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeReceptorFactura( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "NADIV" + "|"
   cLine          += AllTrim( getCustomExtraField( "026", "Clientes", ( D():FacturasClientes( ::nView ) )->cCodCli ) ) + "|"
   cLine          += AllTrim( ( D():FacturasClientes( ::nView ) )->cNomCli ) + "|"

   if ( D():Clientes( ::nView ) )->( dbSeek( ( D():FacturasClientes( ::nView ) )->cCodCli ) )
      cLine       += AllTrim( ( D():Clientes( ::nView ) )->Domicilio ) + "|"
      cLine       += AllTrim( ( D():Clientes( ::nView ) )->Poblacion ) + "|"
      cLine       += Padr( ( D():Clientes( ::nView ) )->CodPostal, 10 ) + "|"
      cLine       += AllTrim( ( D():Clientes( ::nView ) )->Nif ) + "|"
   end

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeEmisorPago( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "NADPR" + "|"

   cLine          += AllTrim( getCustomExtraField( "026", "Clientes", ( D():FacturasClientes( ::nView ) )->cCodCli ) )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeReceptorMercancia( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "NADDP" + "|"

   if ( D():Clientes( ::nView ) )->( dbSeek( ( D():FacturasClientes( ::nView ) )->cCodCli ) )
      cLine       += AllTrim( ( D():Clientes( ::nView ) )->cCodEdi )
   end

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeDivisa( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "CUX" + "|"

   cLine          += "EUR" + "|"
   cLine          += "4"

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeResumenTotales( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := "MOARES" + "|"
   cLine          += ::getNumero( ::sTotalFactura:nTotalBruto ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:nTotalNeto ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:TotalBase() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:TotalDocumento() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:TotalIva() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:TotalDescuento() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeResumenPrimerImpuesto( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   if empty( ::sTotalFactura:nPorcentajePrimerIva() )
      Return ( self )
   end

   cLine          += "TAXRES" + "|"
   cLine          += "VAT" + "|"
   cLine          += ::getNumero( ::sTotalFactura:nPorcentajePrimerIva() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:nTotalPrimerIva() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:nBasePrimerIva() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeResumenSegundoImpuesto( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   if empty( ::sTotalFactura:nPorcentajeSegundoIva() )
      Return ( self )
   end

   cLine          += "TAXRES" + "|"
   cLine          += "VAT" + "|"
   cLine          += ::getNumero( ::sTotalFactura:nPorcentajeSegundoIva() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:nTotalSegundoIva() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:nBaseSegundoIva() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeResumenTercerImpuesto( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   if empty( ::sTotalFactura:nPorcentajeTercerIva() )
      Return ( self )
   end

   cLine          += "TAXRES" + "|"
   cLine          += "VAT" + "|"
   cLine          += ::getNumero( ::sTotalFactura:nPorcentajeTercerIva() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:nTotalTercerIva() ) + "|"
   cLine          += ::getNumero( ::sTotalFactura:nBaseTercerIva() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeLineas( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local id       := D():FacturasClientesId( ::nView )

   if ( D():FacturasClientesLineas( ::nView ) )->( dbSeek( id ) )

      while ( D():FacturasClientesLineasId( ::nView ) == id ) .AND. !( D():FacturasClientesLineas( ::nView ) )->( eof() )

         if ::isLineaValida()

            if ( D():Articulos( ::nView ) )->( dbSeek( ( D():FacturasClientesLineas( ::nView ) )->cRef ) )

               ::writeCabeceraLinea()
               ::writeDescripcionesLinea()
               ::writeCantidadLinea()
               ::writeTotalLinea()
               ::writePrecioBrutoUnitarioLinea()
               ::writePrecioNetoUnitarioLinea()
               ::writeImpuestosLinea()

            end

         end

         ( D():FacturasClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

Return ( self )



static FUNCTION TEdiExporarFacturas_writeCabeceraLinea( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   cLine          += "LIN" + "|"
   cLine          += AllTrim( ( D():Articulos( ::nView ) )->cCodEdi ) + "|"
   cLine          += "EN"

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeDescripcionesLinea( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   cLine          += "IMDLIN" + "|"
   cLine          += AllTrim( ( D():FacturasClientesLineas( ::nView ) )->cDetalle ) + "|"
   cLine          += "M"

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeCantidadLinea( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   cLine          += "QTYLIN" + "|"
   cLine          += "47" + "|"
   cLine          += ::getNumero( nTotNFacCli() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeTotalLinea( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   cLine          += "MOALIN" + "|"
   cLine          += ::getNumero( nTotLFacCli() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writePrecioBrutoUnitarioLinea( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   cLine          += "PRILIN" + "|"
   cLine          += "AAB" + "|"
   cLine          += ::getNumero( nTotUFacCli() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writePrecioNetoUnitarioLinea( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   local cLine    := ""

   cLine          += "PRILIN" + "|"
   cLine          += "AAA" + "|"
   cLine          += ::getNumero( nTotUFacCli() )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_writeImpuestosLinea( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

local cLine    := ""

   cLine          += "TAXLIN" + "|"
   cLine          += "VAT" + "|"
   cLine          += ::getNumero( ( D():FacturasClientesLineas( ::nView ) )->nIva )

   ::oFileEDI:add( cLine )

Return ( self )



static FUNCTION TEdiExporarFacturas_setFacturaClienteGeneradaEDI( ) ; local Self AS CLASS TEdiExporarFacturas := QSelf() AS CLASS TEdiExporarFacturas

   if D():lockFacturasClientes( ::nView )
      ( D():FacturasClientes( ::nView ) )->lExpEdi    := .T.
      ( D():FacturasClientes( ::nView ) )->dFecEdi    := getSysDate()
      ( D():FacturasClientes( ::nView ) )->cHorEdi    := time()
      D():unlockFacturasClientes( ::nView )
   end

Return ( self )
