#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
         EXTERNAL FW_GT











extern errorsys
#line 10 "C:\fwh1801\Gestool\bin\Script\FacturasProveedores\costos.prg"
Function afterSave( nView, oStock )

   if ( D():FacturasProveedores( nView ) )->lContab
      MsgStop( "El script ya ha sido ejecutado para Ã©sta factura." )
      Return nil
   end

   oActualizaCostos   := tActualizaCostos():New( nView, oStock )
   oActualizaCostos:Run()

Return nil



_HB_CLASS tActualizaCostos ; function tActualizaCostos ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "tActualizaCostos", iif( .F., { }, { @HBObject() } ), @tActualizaCostos() ) ) ;

; _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

; _HB_MEMBER { oStock } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oStock"}, .F. )

; _HB_MEMBER { cNumeroFactura } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNumeroFactura"}, .F. )

; _HB_MEMBER { aLinesFacturaProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aLinesFacturaProveedor"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @tActualizaCostos_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Run(); oClass:AddMethod( "Run", @tActualizaCostos_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS tActualizaCostos ;



static FUNCTION tActualizaCostos_New( nView, oStock ) ; local Self AS CLASS tActualizaCostos := QSelf() AS CLASS tActualizaCostos

   ::nView                    := nView

   ::oStock                   := oStock

   ::cNumeroFactura           := ( D():FacturasProveedores( nView ) )->cSerFac + Str( ( D():FacturasProveedores( nView ) )->nNumFac ) + ( D():FacturasProveedores( nView ) )->cSufFac

   ::aLinesFacturaProveedor   := {}

Return ( Self )



static FUNCTION tActualizaCostos_Run( ) ; local Self AS CLASS tActualizaCostos := QSelf() AS CLASS tActualizaCostos

   local nRec
   local nOrdAnt
   local nAt
   local hLine
   local nStockAct
   local nImporte
   local nUnidades
   local nCostoMedio





   nRec        := ( D():FacturasProveedoresLineas( ::nView ) )->( Recno() )
   nOrdAnt     := ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( "NNUMFAC" ) )

   if ( D():FacturasProveedoresLineas( ::nView ) )->( dbSeek( ::cNumeroFactura ) )


      while ( D():FacturasProveedoresLineas( ::nView ) )->cSerFac + Str( ( D():FacturasProveedoresLineas( ::nView ) )->nNumFac ) + ( D():FacturasProveedoresLineas( ::nView ) )->cSufFac == ::cNumeroFactura .AND. !( D():FacturasProveedoresLineas( ::nView ) )->( Eof() )






            nAt := AScan( ::aLinesFacturaProveedor, { | hLine | hGet( hLine, "codigo" ) == ( D():FacturasProveedoresLineas( ::nView ) )->cRef } )

            if nAt == 0




               aAdd( ::aLinesFacturaProveedor, {   "codigo" => ( D():FacturasProveedoresLineas( ::nView ) )->cRef, "unidades" => nTotNFacPrv( D():FacturasProveedoresLineas( ::nView ) ), "importe" => nTotLFacPrv( D():FacturasProveedoresLineas( ::nView ) ), "costomedio" => ( nTotLFacPrv( D():FacturasProveedoresLineas( ::nView ) ) / nTotNFacPrv( D():FacturasProveedoresLineas( ::nView ) ) ) } )
            else

               hSet( ::aLinesFacturaProveedor[ nAt ], "unidades", ( hGet( ::aLinesFacturaProveedor[ nAt ], "unidades" ) + nTotNFacPrv( D():FacturasProveedoresLineas( ::nView ) ) ) )
               hSet( ::aLinesFacturaProveedor[ nAt ], "importe", ( hGet( ::aLinesFacturaProveedor[ nAt ], "importe" ) + nTotLFacPrv( D():FacturasProveedoresLineas( ::nView ) ) ) )
               hSet( ::aLinesFacturaProveedor[ nAt ], "costomedio", ( hGet( ::aLinesFacturaProveedor[ nAt ], "importe" ) / hGet( ::aLinesFacturaProveedor[ nAt ], "unidades" ) ) )

            end

         ( D():FacturasProveedoresLineas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasProveedoresLineas( ::nView ) )->( dbGoTo( nRec ) )





   nRec                 := ( D():Articulos( ::nView ) )->( Recno() )
   nOrdAnt              := ( D():Articulos( ::nView ) )->( OrdSetFocus( "Codigo" ) )

   for each hLine in ::aLinesFacturaProveedor

      if ( D():Articulos( ::nView ) )->( dbSeek( hGet( hLine, "codigo" ) ) )

         nStockAct      := StocksModel():nGlobalStockArticulo( ( D():Articulos( ::nView ) )->Codigo )

         if nStockAct <= 0
            nUnidades   := hGet( hLine, "unidades" )
            nStockAct   := 0
         else
            nUnidades   := nStockAct
            nStockAct   -= hGet( hLine, "unidades" )
         end

         nImporte       := ( nStockAct * ( D():Articulos( ::nView ) )->pCosto ) + ( hGet( hLine, "unidades" ) * hGet( hLine, "costomedio" ) )

         nCostoMedio    := nImporte / nUnidades

         if dbLock( D():Articulos( ::nView ) )
            ( D():Articulos( ::nView ) )->pCosto := nCostoMedio
            ( D():Articulos( ::nView ) )->( dbUnLock() )
         end

      end

   next

   ( D():Articulos( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():Articulos( ::nView ) )->( dbGoTo( nRec ) )





   if dbLock( D():FacturasProveedores( ::nView ) )
      ( D():FacturasProveedores( ::nView ) )->lContab := .T.
      ( D():FacturasProveedores( ::nView ) )->( dbUnLock() )
   end

   MsgInfo( "Proceso finalizado" )

Return ( .T. )
