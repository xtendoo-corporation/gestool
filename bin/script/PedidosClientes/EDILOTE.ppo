#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
         EXTERNAL FW_GT











extern errorsys
#line 17 "C:\fwh1801\Gestool\bin\Script\PedidosClientes\EDILOTE.prg"
Function ImportarEDI( nView )

   ImportarPedidosClientesEDI():Run( nView )

Return ( nil )



_HB_CLASS ImportarPedidosClientesEDI ; function ImportarPedidosClientesEDI ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImportarPedidosClientesEDI", iif( .F., { }, { @HBObject() } ), @ImportarPedidosClientesEDI() ) ) ;

; _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

; _HB_MEMBER { aEDIFiles } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEDIFiles"}, .F. )

; _HB_MEMBER { oFileEDI } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFileEDI"}, .F. )

; _HB_MEMBER { aTokens } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTokens"}, .F. )

; _HB_MEMBER { cLote } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLote"}, .F. )

; _HB_MEMBER { hDocument } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDocument"}, .F. )
; _HB_MEMBER { hLine } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hLine"}, .F. )

; _HB_MEMBER { hPedidoCabecera } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hPedidoCabecera"}, .F. )
; _HB_MEMBER { hPedidoLinea } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hPedidoLinea"}, .F. )

; _HB_MEMBER { seriePedido } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"seriePedido"}, .F. )
; _HB_MEMBER { numeroPedido } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"numeroPedido"}, .F. )
; _HB_MEMBER { sufijoPedido } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"sufijoPedido"}, .F. )

; _HB_MEMBER { cTarifa } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTarifa"}, .F. )







; _HB_MEMBER { ordTipo } ; oClass:AddMultiData(, {  "220" => "Pedido normal", "22E" => "Propuesta de pedido", "221" => "Pedido abierto", "224" => "Pedido urgente", "226" => "Pedido parcial que cancela un pedido abierto", "227" => "Pedido consignación", "YB1" => "Pedido cross dock" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"ordTipo"}, .F. )








; _HB_MEMBER { ordFuncion } ; oClass:AddMultiData(, {  "9"   => "Original", "3"   => "Cancelación", "5"   => "Sustitución", "6"   => "Confirmación", "7"   => "Duplicado", "16"  => "Propuesta", "31"  => "Copia", "46"  => "Provisional" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"ordFuncion"}, .F. )













; _HB_MEMBER { calificadorCodigo } ; oClass:AddMultiData(, {  "SA"  => "Código de artículo interno del proveedor ", "IN"  => "codigoInternoComprador", "BP"  => "Código interno del comprador ", "SN"  => "Número de serie ", "NS"  => "Número de lote", "ADU" => "Código de la unidad de embalaje ", "MN"  => "Identificación interna del modelo del fabricante ", "DW"  => "Identificación interna del proveedor para el dibujo ", "PV"  => "Variable promocional", "EN"  => "Número EAN de la unidad de expedición", "GB"  => "Código de grupo de producto interno ", "CNA" => "Código nacional", "AT"  => "numeroBusquedaPrecio" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"calificadorCodigo"}, .F. )




; _HB_MEMBER { calificadorDescripcion } ; oClass:AddMultiData(, {  "F"   => "descripcionTextoLibre", "C"   => "Descripción codificada", "E"   => "Descripción corta ECI", "B"   => "Código y texto" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"calificadorDescripcion"}, .F. )







; _HB_MEMBER { calificadorCantidad } ; oClass:AddMultiData(, {  "21"  => "unidadesPedidas", "59"  => "Número de unidades de consumo en la unidad de expedición", "15E" => "Cantidad de mercancía sin cargo", "61"  => "Cantidad devuelta", "17E" => "Unidades a nivel de subembalaje", "192" => "Cantidad gratuita incluida TRU", "1"   => "Cantidad solicitada para bonificación" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"calificadorCantidad"}, .F. )




; _HB_MEMBER { calificadorPrecios } ; oClass:AddMultiData(, {  "AAA" => "precioNetoUnitario", "AAB" => "Precio bruto unitario", "INF" => "Precio a título informativo", "NTP" => "Precio neto" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"calificadorPrecios"}, .F. )

   _HB_MEMBER Run( nView); oClass:AddMethod( "Run", @ImportarPedidosClientesEDI_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER labelToken(); oClass:AddInline( "labelToken", {|Self | ( ( Self ) ), ( ::aTokens[ 1 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER say(); oClass:AddInline( "say", {|Self | ( ( Self ) ), ( hb_valtoexp( ::hPedidoCabecera ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER proccessEDIFiles( cEDIFiles); oClass:AddMethod( "proccessEDIFiles", @ImportarPedidosClientesEDI_proccessEDIFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER proccessEDILine(); oClass:AddMethod( "proccessEDILine", @ImportarPedidosClientesEDI_proccessEDILine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER proccessEDITokens( aTokens); oClass:AddMethod( "proccessEDITokens", @ImportarPedidosClientesEDI_proccessEDITokens(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessORD(); oClass:AddMethod( "proccessORD", @ImportarPedidosClientesEDI_proccessORD(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessDTM(); oClass:AddMethod( "proccessDTM", @ImportarPedidosClientesEDI_proccessDTM(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessNADMS(); oClass:AddInline( "proccessNADMS", {|Self | ( ( Self ) ), ( ::hDocument[ "emisor" ]    := ::getField( 1 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessNADMR(); oClass:AddInline( "proccessNADMR", {|Self | ( ( Self ) ), ( ::hDocument[ "receptor" ]  := ::getField( 1 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessNADSU(); oClass:AddMethod( "proccessNADSU", @ImportarPedidosClientesEDI_proccessNADSU(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessNADBY(); oClass:AddMethod( "proccessNADBY", @ImportarPedidosClientesEDI_proccessNADBY(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessNADDP(); oClass:AddMethod( "proccessNADDP", @ImportarPedidosClientesEDI_proccessNADDP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessNADIV(); oClass:AddMethod( "proccessNADIV", @ImportarPedidosClientesEDI_proccessNADIV(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessLIN(); oClass:AddMethod( "proccessLIN", @ImportarPedidosClientesEDI_proccessLIN(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessPIALIN(); oClass:AddMethod( "proccessPIALIN", @ImportarPedidosClientesEDI_proccessPIALIN(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessIMDLIN(); oClass:AddMethod( "proccessIMDLIN", @ImportarPedidosClientesEDI_proccessIMDLIN(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessQTYLIN(); oClass:AddMethod( "proccessQTYLIN", @ImportarPedidosClientesEDI_proccessQTYLIN(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessPRILIN(); oClass:AddMethod( "proccessPRILIN", @ImportarPedidosClientesEDI_proccessPRILIN(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessLOCLIN(); oClass:AddMethod( "proccessLOCLIN", @ImportarPedidosClientesEDI_proccessLOCLIN(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessTAXLIN(); oClass:AddInline( "proccessTAXLIN", {|Self | ( ( Self ) ), ( if( !empty( ::hLine ), ::hLine[ "porcentajeImpuesto" ]  := ::getNum( 2 ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER proccessCNTRES(); oClass:AddMethod( "proccessCNTRES", @ImportarPedidosClientesEDI_proccessCNTRES(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertLineInDcoument(); oClass:AddMethod( "insertLineInDcoument", @ImportarPedidosClientesEDI_insertLineInDcoument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getField(); oClass:AddInline( "getField", {|Self, nPosition | ( ( Self ) ), ( if( len( ::aTokens ) >= nPosition + 1, ::aTokens[ nPosition + 1 ], "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFieldTable(); oClass:AddInline( "getFieldTable", {|Self, nPosition, hTable | ( ( Self ) ), ( hget( hTable, ::getField( nPosition ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDate(); oClass:AddInline( "getDate", {|Self, nPosition | ( ( Self ) ), ( stod( ::getField( nPosition ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNum(); oClass:AddInline( "getNum", {|Self, nPosition | ( ( Self ) ), ( val( ::getField( nPosition ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isbuildPedidoCliente(); oClass:AddMethod( "isbuildPedidoCliente", @ImportarPedidosClientesEDI_isbuildPedidoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER buildPedidoCliente(); oClass:AddMethod( "buildPedidoCliente", @ImportarPedidosClientesEDI_buildPedidoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isDocumentImported(); oClass:AddMethod( "isDocumentImported", @ImportarPedidosClientesEDI_isDocumentImported(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isClient(); oClass:AddMethod( "isClient", @ImportarPedidosClientesEDI_isClient(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isDireccion(); oClass:AddMethod( "isDireccion", @ImportarPedidosClientesEDI_isDireccion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER buildCabeceraPedido(); oClass:AddMethod( "buildCabeceraPedido", @ImportarPedidosClientesEDI_buildCabeceraPedido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER codigoCliente(); oClass:AddMethod( "codigoCliente", @ImportarPedidosClientesEDI_codigoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER codigoDireccion(); oClass:AddMethod( "codigoDireccion", @ImportarPedidosClientesEDI_codigoDireccion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER datosCliente(); oClass:AddMethod( "datosCliente", @ImportarPedidosClientesEDI_datosCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER datosCabecera(); oClass:AddMethod( "datosCabecera", @ImportarPedidosClientesEDI_datosCabecera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER datosBancoCliente(); oClass:AddMethod( "datosBancoCliente", @ImportarPedidosClientesEDI_datosBancoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveCabecera(); oClass:AddInline( "saveCabecera", {|Self | ( ( Self ) ), ( D():appendHashRecord( ::hPedidoCabecera, D():PedidosClientes( ::nView ), ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER buildLineasPedido(); oClass:AddMethod( "buildLineasPedido", @ImportarPedidosClientesEDI_buildLineasPedido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CreaLinea(); oClass:AddMethod( "CreaLinea", @ImportarPedidosClientesEDI_CreaLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER datosArticulo( cNormalizado); oClass:AddMethod( "datosArticulo", @ImportarPedidosClientesEDI_datosArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER appendLinea(); oClass:AddInline( "appendLinea", {|Self | ( ( Self ) ), ( ::hPedidoLinea := D():GetPedidoClienteLineasDefaultValue( ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveLinea(); oClass:AddInline( "saveLinea", {|Self | ( ( Self ) ), ( D():appendHashRecord( ::hPedidoLinea, D():PedidosClientesLineas( ::nView ), ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER datosDireccion( hDestinatario); oClass:AddMethod( "datosDireccion", @ImportarPedidosClientesEDI_datosDireccion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER buildTotalPedido(); oClass:AddMethod( "buildTotalPedido", @ImportarPedidosClientesEDI_buildTotalPedido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImportarPedidosClientesEDI ;



static FUNCTION ImportarPedidosClientesEDI_Run( nView ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local aEDIFile

   ::cLote  := Space( 100 )
   MsgGet( "Seleccione el lote a importar", "Lote: ", @::cLote )

   ::nView           := nView

   ::aEDIFiles       := Directory( "C:\ficheros\" + "*.pla" )

   if !empty( ::aEDIFiles )
      for each aEDIFile in ::aEDIFiles
         MsgWait( aEDIFile[ 1 ], "Procesando fichero...", 0.1 )
         ::ProccessEDIFiles( aEDIFile[ 1 ] )
         ::buildPedidoCliente()
      next
   else
      msgStop( "No hay ficheros en el directorio")
   end

   MsgInfo( "Proceso terminado con éxito" )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessEDIFiles( cEDIFile ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   if !file( "C:\ficheros\" + cEDIFile )
      msgStop( "C:\ficheros\" + cEDIFile, "Fichero no existe" )
      Return .F.
   end

   ::hDocument             := {=>}
   ::hDocument[ "lineas" ] := {}

   ::oFileEDI              := TTxtFile():New( "C:\ficheros\" + cEDIFile )

   while ! ::oFileEDI:lEoF()
      ::proccessEDILine()
      ::oFileEDI:Skip()
   end

   ::oFileEDI:Close()

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessEDILine( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::aTokens              := hb_atokens( ::oFileEDI:cLine, "|" )

   if valtype( ::aTokens ) <> "A" .OR. len( ::aTokens ) <= 1
      Return ( nil )
   end

   ::proccessEDITokens()

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessEDITokens( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   do case
      case ::labelToken() == "ORD"     ;  ::proccessORD()

      case ::labelToken() == "DTM"     ;  ::proccessDTM()

      case ::labelToken() == "NADMS"   ;  ::proccessNADMS()

      case ::labelToken() == "NADMR"   ;  ::proccessNADMR()

      case ::labelToken() == "NADSU"   ;  ::proccessNADSU()

      case ::labelToken() == "NADBY"   ;  ::proccessNADBY()

      case ::labelToken() == "NADDP"   ;  ::proccessNADDP()

      case ::labelToken() == "NADIV"   ;  ::proccessNADIV()

      case ::labelToken() == "LIN"     ;  ::proccessLIN()

      case ::labelToken() == "PIALIN"  ;  ::proccessPIALIN()

      case ::labelToken() == "IMDLIN"  ;  ::proccessIMDLIN()

      case ::labelToken() == "QTYLIN"  ;  ::proccessQTYLIN()

      case ::labelToken() == "LOCLIN"  ;  ::proccessLOCLIN()

      case ::labelToken() == "TAXLIN"  ;  ::proccessTAXLIN()

      case ::labelToken() == "CNTRES"  ;  ::proccessCNTRES()

   end

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessORD( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hDocument[ "documentoOrigen" ]    := ::getField( 1 )
   ::hDocument[ "tipo" ]               := ::getFieldTable( 2, ::ordTipo )
   ::hDocument[ "funcion" ]            := ::getFieldTable( 3, ::ordFuncion )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessDTM( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hDocument[ "documento" ]    := ::getDate( 1 )
   ::hDocument[ "entrega" ]      := ::getDate( 2 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessNADSU( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hDocument[ "proveedor" ]    := ::getField( 1 )
   ::hDocument[ "codprov" ]      := ::getField( 2 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessNADBY( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hDocument[ "comprador" ]    := Padr( ::getField( 1 ), 17 )
   ::hDocument[ "departamento" ] := RJust( ::getField( 2 ), "0", 4 )
   ::hDocument[ "reposicion" ]   := ::getField( 3 )
   ::hDocument[ "sucursal" ]     := ::getField( 4 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessNADDP( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hDocument[ "almacen" ]      := ::getField( 1 )
   ::hDocument[ "puerta" ]       := ::getField( 2 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessNADIV( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hDocument[ "receptorFactura" ]        := ::getField( 1 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_insertLineInDcoument( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   if !empty(::hLine)
      aadd( ::hDocument[ "lineas" ], ::hLine )
   end

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessLIN( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hLine                       := {=>}
   ::hLine[ "destinatarios" ]    := {}

   ::hLine[ "codigo" ]           := Padr( ::getField( 1 ), 20 )
   ::hLine[ "tipoCodigo" ]       := ::getField( 2 )
   ::hLine[ "linea" ]            := ::getNum( 3 )

   ::insertLineInDcoument()

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessPIALIN( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local calificadorCodigo
   local referenciaArticulo

   if empty( ::hLine )
      Return ( nil )
   end

   calificadorCodigo                  := ::getFieldTable( 1, ::calificadorCodigo )
   referenciaArticulo                 := ::getField( 2 )

   if !empty(calificadorCodigo) .AND. !empty(referenciaArticulo)
      ::hLine[ calificadorCodigo ]    := referenciaArticulo
   end

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessIMDLIN( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local calificadorDescripcion
   local descripcionArticulo

   if empty( ::hLine )
      Return ( nil )
   end

   calificadorDescripcion                 := ::getFieldTable( 1, ::calificadorDescripcion )
   descripcionArticulo                    := ::getNum( 2 )

   if !empty(calificadorDescripcion) .AND. !empty(descripcionArticulo)
      ::hLine[ calificadorDescripcion ]  := descripcionArticulo
   end

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessQTYLIN( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local calificadorCantidad
   local cantidadArticulo

   if empty( ::hLine )
      Return ( nil )
   end

   calificadorCantidad                 := ::getFieldTable( 1, ::calificadorCantidad )
   cantidadArticulo                    := ::getNum( 2 )

   if !empty(calificadorCantidad) .AND. !empty(cantidadArticulo)
      ::hLine[ calificadorCantidad ]   := cantidadArticulo
   end

   ::hLine[ "unidadMedicion" ]         := ::getField( 3 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessPRILIN( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local calificadorPrecios
   local cantidadArticulo

   if empty( ::hLine )
      Return ( nil )
   end

   calificadorPrecios                  := ::getFieldTable( 1, ::calificadorPrecios )
   cantidadArticulo                    := ::getNum( 2 )

   if !empty(calificadorPrecios) .AND. !empty(cantidadArticulo)
      ::hLine[ calificadorPrecios ]    := cantidadArticulo
   end

   ::hLine[ "precioVenta" ]            := ::getField( 3 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessLOCLIN( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local hDestinatario     := {=>}

   if empty( ::hLine )
      Return ( nil )
   end

   hDestinatario[ "puntoEntrega" ]           := ::getField( 1 )
   hDestinatario[ "unidadesEntrega" ]        := ::getField( 3 )
   hDestinatario[ "departamentoEntrega" ]    := ::getField( 6 )

   aAdd( ::hLine[ "destinatarios" ], hDestinatario )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_proccessCNTRES( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hDocument[ "numeroBultos" ]    := ::getNum( 1 )
   ::hDocument[ "numeroLineas" ]    := ::getNum( 4 )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_isbuildPedidoCliente( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   if ::isDocumentImported()
      msgStop( "El documento ya ha sido importado" )
      Return ( .F. )
   end

   if ::isClient()
      return ( .T. )
   end

   if ::isDireccion()
      return ( .T. )
   end

return .F.



static FUNCTION ImportarPedidosClientesEDI_buildPedidoCliente( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   if ::isbuildPedidoCliente()

      ::buildCabeceraPedido()

      ::buildLineasPedido()

      ::buildTotalPedido()

   end

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_isDocumentImported( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local isDocumentImported   := .F.

   D():getStatusPedidosClientes( ::nView )
   D():setFocusPedidosClientes( "cSuPed", ::nView )

   isDocumentImported         := ( D():PedidosClientes( ::nView ) )->( dbseek( ::hDocument[ "documentoOrigen" ] ) )

   D():setStatusPedidosClientes( ::nView )

Return ( isDocumentImported )



static FUNCTION ImportarPedidosClientesEDI_isClient( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local isClient   := .F.

   D():getStatusClientes( ::nView )
   D():setFocusClientes( "cCodEdi", ::nView )

   isClient         := ( D():Clientes( ::nView ) )->( dbseek( ::hDocument[ "comprador" ] + Padr( ::hDocument[ "departamento" ], 4 ) ) )

   D():setStatusClientes( ::nView )

Return ( isClient )



static FUNCTION ImportarPedidosClientesEDI_isDireccion( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local isDireccion   := .F.

   D():getStatusClientesDirecciones( ::nView )
   D():setFocusClientesDirecciones( "cCodEdi", ::nView )

   isDireccion         := ( D():ClientesDirecciones( ::nView ) )->( dbseek( ::hDocument[ "comprador" ] + ::hDocument[ "departamento" ] ) )

   D():setStatusClientesDirecciones( ::nView )

Return ( isDireccion )



static FUNCTION ImportarPedidosClientesEDI_codigoCliente( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   D():getStatusClientesDirecciones( ::nView )
   D():setFocusClientesDirecciones( "cCodEdi", ::nView )

   if ( D():ClientesDirecciones( ::nView ) )->( dbseek( ::hDocument[ "comprador" ] + ::hDocument[ "departamento" ] ) )

      ::hPedidoCabecera[ "Cliente" ]      := ( D():ClientesDirecciones( ::nView ) )->cCodCli

   end

   D():setStatusClientesDirecciones( ::nView )

   if Empty( ::hPedidoCabecera[ "Cliente" ] )

      D():getStatusClientes( ::nView )
      D():setFocusClientes( "cCodEdi", ::nView )



      if ( D():Clientes( ::nView ) )->( dbseek( ::hDocument[ "comprador" ] + ::hDocument[ "departamento" ] ) )

         ::hPedidoCabecera[ "Cliente" ]      := ( D():Clientes( ::nView ) )->Cod

      end

      D():setStatusClientes( ::nView )

   end

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_codigoDireccion( comprador, departamento ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local direccion

   D():getStatusClientesDirecciones( ::nView )
   D():setFocusClientesDirecciones( "cCodEdi", ::nView )

   if ( D():ClientesDirecciones( ::nView ) )->( dbseek( Padr( comprador, 17 ) + Padr( departamento, 4 ) ) )

      direccion         := ( D():ClientesDirecciones( ::nView ) )->cCodObr

   end

   D():setStatusClientesDirecciones( ::nView )

Return ( direccion )



static FUNCTION ImportarPedidosClientesEDI_buildCabeceraPedido( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hPedidoCabecera                   := D():getDefaultHashPedidoCliente( ::nView )

   ::codigoCliente()
   ::hPedidoCabecera[ "Direccion" ]    := ::codigoDireccion( ::hDocument[ "comprador" ], ::hDocument[ "departamento" ] )

   ::datosCliente()
   ::datosBancoCliente()

   ::datosCabecera()

   ::saveCabecera()

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_datosCabecera( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::numeroPedido                           := nNewDoc( ::hPedidoCabecera[ "Serie" ], D():PedidosClientes( ::nView ), "nPedCli", , D():Contadores( ::nView ) )
   ::sufijoPedido                           := "00"

   ::hPedidoCabecera[ "Numero"            ] := ::numeroPedido
   ::hPedidoCabecera[ "Sufijo"            ] := ::sufijoPedido
   ::hPedidoCabecera[ "Fecha"             ] := ::hDocument[ "documento" ]
   ::hPedidoCabecera[ "FechaCreacion"     ] := getSysDate()
   ::hPedidoCabecera[ "HoraCreacion"      ] := Time()
   ::hPedidoCabecera[ "DocumentoOrigen"   ] := ::hDocument[ "documentoOrigen" ]

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_datosCliente( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   if Empty( ::hPedidoCabecera[ "Cliente" ] )
      Return .F.
   end

   D():getStatusClientes( ::nView )
   D():setFocusClientes( "Cod", ::nView )

   if ( D():Clientes( ::nView ) )->( dbseek( ::hPedidoCabecera[ "Cliente" ] ) )

      ::seriePedido                                  := if( Empty( ( D():Clientes( ::nView ) )->Serie ), "A", ( D():Clientes( ::nView ) )->Serie )

      ::hPedidoCabecera[ "NombreCliente"           ] := ( D():Clientes( ::nView ) )->Titulo
      ::hPedidoCabecera[ "DomicilioCliente"        ] := ( D():Clientes( ::nView ) )->Domicilio
      ::hPedidoCabecera[ "PoblacionCliente"        ] := ( D():Clientes( ::nView ) )->Poblacion
      ::hPedidoCabecera[ "ProvinciaCliente"        ] := ( D():Clientes( ::nView ) )->Provincia
      ::hPedidoCabecera[ "CodigoPostalCliente"     ] := ( D():Clientes( ::nView ) )->CodPostal
      ::hPedidoCabecera[ "DniCliente"              ] := ( D():Clientes( ::nView ) )->Nif
      ::hPedidoCabecera[ "TelefonoCliente"         ] := ( D():Clientes( ::nView ) )->Telefono
      ::hPedidoCabecera[ "GrupoCliente"            ] := ( D():Clientes( ::nView ) )->cCodGrp

      ::hPedidoCabecera[ "ModificarDatosCliente"   ] := ( D():Clientes( ::nView ) )->lModDat
      ::hPedidoCabecera[ "Serie"                   ] := ::seriePedido
      ::hPedidoCabecera[ "Tarifa"                  ] := ( D():Clientes( ::nView ) )->cCodTar
      ::hPedidoCabecera[ "Pago"                    ] := ( D():Clientes( ::nView ) )->CodPago
      ::hPedidoCabecera[ "Agente"                  ] := ( D():Clientes( ::nView ) )->cAgente
      ::hPedidoCabecera[ "Ruta"                    ] := ( D():Clientes( ::nView ) )->cCodRut
      ::hPedidoCabecera[ "NumeroTarifa"            ] := ( D():Clientes( ::nView ) )->nTarifa
      ::hPedidoCabecera[ "RecargoEquivalencia"     ] := ( D():Clientes( ::nView ) )->lReq
      ::hPedidoCabecera[ "OperarPuntoVerde"        ] := ( D():Clientes( ::nView ) )->lPntVer

      ::hPedidoCabecera[ "DescripcionDescuento1"   ] := ( D():Clientes( ::nView ) )->cDtoEsp
      ::hPedidoCabecera[ "PorcentajeDescuento1"    ] := ( D():Clientes( ::nView ) )->nDtoEsp
      ::hPedidoCabecera[ "DescripcionDescuento2"   ] := ( D():Clientes( ::nView ) )->cDpp
      ::hPedidoCabecera[ "PorcentajeDescuento2"    ] := ( D():Clientes( ::nView ) )->nDpp
      ::hPedidoCabecera[ "DescripcionDescuento3"   ] := ( D():Clientes( ::nView ) )->cDtoUno
      ::hPedidoCabecera[ "PorcentajeDescuento3"    ] := ( D():Clientes( ::nView ) )->nDtoCnt
      ::hPedidoCabecera[ "DescripcionDescuento4"   ] := ( D():Clientes( ::nView ) )->cDtoDos
      ::hPedidoCabecera[ "PorcentajeDescuento4"    ] := ( D():Clientes( ::nView ) )->nDtoRap

   end

   D():setStatusClientes( ::nView )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_datosBancoCliente( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   D():getStatusClientesBancos( ::nView )
   D():setFocusClientesBancos( "cCodDef", ::nView )

   if ( D():ClientesBancos( ::nView ) )->( dbseek( ::hPedidoCabecera[ "Cliente" ] ) )

      ::hPedidoCabecera[ "NombreBanco"          ]    := ( D():ClientesBancos( ::nView ) )->cCodBnc
      ::hPedidoCabecera[ "CuentaIBAN"           ]    := ( D():ClientesBancos( ::nView ) )->cPaisIBAN
      ::hPedidoCabecera[ "DigitoControlIBAN"    ]    := ( D():ClientesBancos( ::nView ) )->cCtrlIBAN
      ::hPedidoCabecera[ "EntidadCuenta"        ]    := ( D():ClientesBancos( ::nView ) )->cEntBnc
      ::hPedidoCabecera[ "SucursalCuenta"       ]    := ( D():ClientesBancos( ::nView ) )->cSucBnc
      ::hPedidoCabecera[ "DigitoControlCuenta"  ]    := ( D():ClientesBancos( ::nView ) )->cDigBnc
      ::hPedidoCabecera[ "CuentaBancaria"       ]    := ( D():ClientesBancos( ::nView ) )->cCtaBnc

   end

   D():setStatusClientesBancos( ::nView )

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_buildLineasPedido( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local n
   local hLine

   for each hLine in ::hDocument[ "lineas" ]

      if Len( hLine[ "destinatarios" ] ) > 1

         for n := 2 to Len( hLine[ "destinatarios" ] )

            ::CreaLinea( hLine, n )

         next

      else

         ::CreaLinea( hLine, 1 )

      end

   next

return ( nil )



static FUNCTION ImportarPedidosClientesEDI_CreaLinea( hLine, n ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::appendLinea()

   ::hPedidoLinea[ "Serie"    ]     := ::seriePedido
   ::hPedidoLinea[ "Numero"   ]     := ::numeroPedido
   ::hPedidoLinea[ "Sufijo"   ]     := ::sufijoPedido
   ::datosArticulo( hLine[ "codigo" ] )

   if Len( hLine[ "destinatarios" ] ) <> 0
      ::datosDireccion( hLine[ "destinatarios" ][n] )
   else
      ::hPedidoLinea[ "Unidades" ]     := hLine[ "unidadesPedidas" ]
   end

   ::hPedidoLinea[ "Almacen" ]      := "001"

   ::saveLinea()

Return ( nil )



static FUNCTION ImportarPedidosClientesEDI_datosArticulo( cNormalizado ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local CodigoArticulo             := ""

   D():getStatusArticulos( ::nView )
   D():setFocusArticulos( "cCodEdi", ::nView )

   if ( D():Articulos( ::nView ) )->( dbSeek( cNormalizado ) )
      ::hPedidoLinea[ "Articulo" ]                 := ( D():Articulos( ::nView ) )->Codigo
      ::hPedidoLinea[ "DescripcionArticulo" ]      := ( D():Articulos( ::nView ) )->Nombre
      ::hPedidoLinea[ "DescripcionAmpliada" ]      := ( D():Articulos( ::nView ) )->Descrip
      ::hPedidoLinea[ "Familia" ]                  := ( D():Articulos( ::nView ) )->Familia
      ::hPedidoLinea[ "GrupoFamilia" ]             := if( !Empty( ( D():Articulos( ::nView ) )->Familia ), cGruFam( ( D():Articulos( ::nView ) )->Familia, D():Familias( ::nView ) ), "" )
      ::hPedidoLinea[ "LogicoLote" ]               := ( D():Articulos( ::nView ) )->lLote
      ::hPedidoLinea[ "Lote" ]                     := ::cLote
      ::hPedidoLinea[ "AvisarSinStock" ]           := ( D():Articulos( ::nView ) )->lMsgVta
      ::hPedidoLinea[ "NoPermitirSinStock" ]       := ( D():Articulos( ::nView ) )->lNotVta
      ::hPedidoLinea[ "Peso" ]                     := ( D():Articulos( ::nView ) )->nPesoKg
      ::hPedidoLinea[ "Volumen" ]                  := ( D():Articulos( ::nView ) )->nVolumen
      ::hPedidoLinea[ "TipoArticulo" ]             := ( D():Articulos( ::nView ) )->cCodTip
      ::hPedidoLinea[ "FactorConversion" ]         := ( D():Articulos( ::nView ) )->nFacCnv
      ::hPedidoLinea[ "Imagen" ]                   := ( D():Articulos( ::nView ) )->cImagen
      ::hPedidoLinea[ "PrecioVentaRecomendado" ]   := ( D():Articulos( ::nView ) )->PvpRec
      ::hPedidoLinea[ "PuntoVerde" ]               := ( D():Articulos( ::nView ) )->nPntVer1
      ::hPedidoLinea[ "PorcentajeImpuesto" ]       := nIva( D():TiposIva( ::nView ), ( D():Articulos( ::nView ) )->TipoIva )
      ::hPedidoLinea[ "RecargoEquivalencia" ]      := nReq( D():TiposIva( ::nView ), ( D():Articulos( ::nView ) )->TipoIva )
      ::hPedidoLinea[ "PrecioCosto" ]              := ( D():Articulos( ::nView ) )->pCosto
      ::hPedidoLinea[ "PrecioVenta" ]              := RetPrcTar( ( D():Articulos( ::nView ) )->Codigo, ::hPedidoCabecera[ "Tarifa" ], , , , , D():TarifaPreciosLineas( ::nView ) )

   end

   D():setStatusArticulos( ::nView )

return ( nil )



static FUNCTION ImportarPedidosClientesEDI_datosDireccion( hDestinatario ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   ::hPedidoLinea[ "Cajas" ]        := val( hDestinatario[ "unidadesEntrega" ] ) / Val( RetFld( "20006" + ::hPedidoLinea[ "Articulo" ], D():DetCamposExtras( ::nView ), "cValor", "cTotClave" ) )
   ::hPedidoLinea[ "Unidades" ]     := val( hDestinatario[ "unidadesEntrega" ] )
   ::hPedidoLinea[ "Direccion" ]    := ::codigoDireccion( hDestinatario[ "puntoEntrega" ], hDestinatario[ "departamentoEntrega" ] )

Return nil



static FUNCTION ImportarPedidosClientesEDI_buildTotalPedido( ) ; local Self AS CLASS ImportarPedidosClientesEDI := QSelf() AS CLASS ImportarPedidosClientesEDI

   local aTotales






   aTotales       := aTotPedCli( ::seriePedido + Str( ::numeroPedido ) + ::sufijoPedido, D():PedidosClientes( ::nView ), D():PedidosClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FormasPago( ::nView ) )

   D():getStatusPedidosClientes( ::nView )
   D():setFocusPedidosClientes( "nNumPed", ::nView )

   if ( D():PedidosClientes( ::nView ) )->( dbseek( ::seriePedido + Str( ::numeroPedido ) + ::sufijoPedido ) )

      if dbLock( D():PedidosClientes( ::nView ) )

         ( D():PedidosClientes( ::nView ) )->nTotNet  := aTotales[1]
         ( D():PedidosClientes( ::nView ) )->nTotIva  := aTotales[2]
         ( D():PedidosClientes( ::nView ) )->nTotReq  := aTotales[3]
         ( D():PedidosClientes( ::nView ) )->nTotPed  := aTotales[4]


         ( D():PedidosClientes( ::nView ) )->( dbUnlock() )

      end

   end

   D():setStatusPedidosClientes( ::nView )

Return nil
