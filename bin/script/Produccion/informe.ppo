#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.Ch"
         EXTERNAL FW_GT











extern errorsys
#line 8 "C:\fwh1801\Gestool\bin\Script\Produccion\informe.prg"
Function InformeArticulos( oProducc )

   local oInformeArticulos    := TInformeArticulos():New( oProducc )

   oInformeArticulos:Run()

Return nil



_HB_CLASS TInformeArticulos ; function TInformeArticulos ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInformeArticulos", iif( .F., { }, { @HBObject() } ), @TInformeArticulos() ) ) ;

; _HB_MEMBER { oDialog } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDialog"}, .F. )
; _HB_MEMBER { oProducc } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProducc"}, .F. )

; _HB_MEMBER { oFecIni } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFecIni"}, .F. )
; _HB_MEMBER { dFecIni } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFecIni"}, .F. )
; _HB_MEMBER { oFecFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFecFin"}, .F. )
; _HB_MEMBER { dFecFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFecFin"}, .F. )

; _HB_MEMBER { cCodCate } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodCate"}, .F. )

; _HB_MEMBER { separador } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"separador"}, .F. )
; _HB_MEMBER { finLinea } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"finLinea"}, .F. )

; _HB_MEMBER { cFichero } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFichero"}, .F. )

; _HB_MEMBER { cNameFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNameFile"}, .F. )

; _HB_MEMBER { selectLineasProducidas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"selectLineasProducidas"}, .F. )
; _HB_MEMBER { selectLineasConsumidas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"selectLineasConsumidas"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TInformeArticulos_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Run(); oClass:AddMethod( "Run", @TInformeArticulos_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetResources(); oClass:AddInline( "SetResources", {|Self | ( ( Self ) ), ( SetResources( fullcurdir() + "Script\Produccion\Informe.dll" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FreeResources(); oClass:AddInline( "FreeResources", {|Self | ( ( Self ) ), ( FreeResources() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource(); oClass:AddMethod( "Resource", @TInformeArticulos_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TInformeArticulos_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addCabecera(); oClass:AddMethod( "addCabecera", @TInformeArticulos_addCabecera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLineasProducidas(); oClass:AddMethod( "getLineasProducidas", @TInformeArticulos_getLineasProducidas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addLineasProducidas(); oClass:AddMethod( "addLineasProducidas", @TInformeArticulos_addLineasProducidas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLineasConsumidas(); oClass:AddMethod( "getLineasConsumidas", @TInformeArticulos_getLineasConsumidas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addLineasConsumidas(); oClass:AddMethod( "addLineasConsumidas", @TInformeArticulos_addLineasConsumidas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInformeArticulos ;



static FUNCTION TInformeArticulos_New( oProducc ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos

   ::oProducc                 := oProducc

   ::dFecIni                  := cTod( "01/01/" + AllTrim( Str( Year( Date() ) ) ) )
   ::dFecFin                  := GetSysDate()

   ::separador                := ";"
   ::finLinea                 := Chr(13)+Chr(10)
   ::cFichero                 := ""

   ::cCodCate                 := ""

   ::cNameFile                := ""

   ::selectLineasProducidas   := "selectLineasProducidas"
   ::selectLineasConsumidas   := "selectLineasConsumidas"

Return ( Self )



static FUNCTION TInformeArticulos_Run( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos

   ::SetResources()

   ::Resource()

   ::FreeResources()

Return ( .T. )



static FUNCTION TInformeArticulos_Resource( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos

   ::oDialog = TDialog():New(,,,,, "INFORME",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog" )




   ::oFecIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::dFecIni, ::dFecIni:= u ) }, ::oDialog,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   ::oFecFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::dFecFin, ::dFecFin:= u ) }, ::oDialog,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   TButton():ReDefine( 1, {||( ::Process() )}, ::oDialog,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::oDialog:End( 2 ) )}, ::oDialog,,, .F.,,,, .F. )

   ::oDialog:AddFastKey( 116, {|| ::Process() } )

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

Return ( .T. )



static FUNCTION TInformeArticulos_Process( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos

   local nHand
   local cNameFile

   ::addCabecera()

   ::getLineasProducidas()
   ::addLineasProducidas()

   ::getLineasConsumidas()
   ::addLineasConsumidas()

   ::cNameFile             := "c:\ficheros\Produccion"
   ::cNameFile             += if( day( ::dFecIni ) < 10, "0" + AllTrim( Str( day( ::dFecIni ) ) ), AllTrim( Str( day( ::dFecIni ) ) ) )
   ::cNameFile             += if( month( ::dFecIni ) < 10, "0" + AllTrim( Str( month( ::dFecIni ) ) ), AllTrim( Str( month( ::dFecIni ) ) ) )
   ::cNameFile             += AllTrim( Str( year( ::dFecIni ) ) )
   ::cNameFile             += if( day( ::dFecFin ) < 10, "0" + AllTrim( Str( day( ::dFecFin ) ) ), AllTrim( Str( day( ::dFecFin ) ) ) )
   ::cNameFile             += if( month( ::dFecFin ) < 10, "0" + AllTrim( Str( month( ::dFecFin ) ) ), AllTrim( Str( month( ::dFecFin ) ) ) )
   ::cNameFile             += AllTrim( Str( year( ::dFecFin ) ) )
   ::cNameFile             += ".csv"

   if !Empty( ::cFichero )

      fErase( ::cNameFile )
      nHand                := fCreate( ::cNameFile )
      fWrite( nHand, ::cFichero )
      fClose( nHand )

   end

   MsgInfo( "Proceso finalizado con éxito" )

   ::oDialog:End( 1 )

Return ( .T. )



static FUNCTION TInformeArticulos_addCabecera( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos

   ::cFichero  += "Número Referencia Interno" + ::separador
   ::cFichero  += "Número Asiento Previo" + ::separador
   ::cFichero  += "Fecha Movimiento" + ::separador
   ::cFichero  += "Fecha Registro Contable" + ::separador
   ::cFichero  += "Tipo Movimiento" + ::separador
   ::cFichero  += "Información adicional Diferencia en Menos" + ::separador
   ::cFichero  += "Régimen Fiscal" + ::separador
   ::cFichero  += "Tipo de Operación" + ::separador
   ::cFichero  += "Número Operación" + ::separador
   ::cFichero  += "Descripción Unidad de Fabricación" + ::separador
   ::cFichero  += "Código Unidad de Fabricación" + ::separador
   ::cFichero  += "Tipo Justificante" + ::separador
   ::cFichero  += "Número Justificante" + ::separador
   ::cFichero  += "Tipo Documento Identificativo" + ::separador
   ::cFichero  += "Número Documento Identificativo" + ::separador
   ::cFichero  += "Razón Social" + ::separador
   ::cFichero  += "CAE/Número Seed" + ::separador
   ::cFichero  += "Repercusión Tipo Documento Identificativo" + ::separador
   ::cFichero  += "Repercusión Número Documento Identificativo" + ::separador
   ::cFichero  += "Repercusión Razón Social" + ::separador
   ::cFichero  += "Epígrafe" + ::separador
   ::cFichero  += "Código Epígrafe" + ::separador
   ::cFichero  += "Código NC" + ::separador
   ::cFichero  += "Clave" + ::separador
   ::cFichero  += "Cantidad" + ::separador
   ::cFichero  += "Unidad de Medida" + ::separador
   ::cFichero  += "Descripción de Producto" + ::separador
   ::cFichero  += "Referencia Producto" + ::separador
   ::cFichero  += "Densidad" + ::separador
   ::cFichero  += "Grado Alcohólico" + ::separador
   ::cFichero  += "Cantidad de Alcohol Puro" + ::separador
   ::cFichero  += "Porcentaje de Extracto" + ::separador
   ::cFichero  += "Kg. - Extracto" + ::separador
   ::cFichero  += "Grado Plato Medio" + ::separador
   ::cFichero  += "Grado Acético" + ::separador
   ::cFichero  += "Tipo de Envase" + ::separador
   ::cFichero  += "Capacidad de Envase" + ::separador
   ::cFichero  += "Número de Envases" + ::separador
   ::cFichero  += "Observaciones" + ::finLinea

Return ( .T. )



static FUNCTION TInformeArticulos_getLineasProducidas( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos


   local cSql        := "SELECT * FROM " + cPatEmp() + "ProLin" +  " WHERE dFecOrd >= " + quoted( dToc( ::dFecIni ) ) + " AND dFecOrd <= " + quoted( dToc( ::dFecFin ) )

   ADSBaseModel():ExecuteSqlStatement( cSql, @::selectLineasProducidas )

   ( ::selectLineasProducidas )->( dbGoTop() )

   while !( ::selectLineasProducidas )->( Eof() )

      if !Empty( ( ::selectLineasProducidas )->cCodArt )

         ::cCodCate  := ArticulosModel():getField( "CCODCATE", "Codigo", ( ::selectLineasProducidas )->cCodArt )




















         if AllTrim( ::cCodCate ) == "001" .OR. AllTrim( ::cCodCate ) == "002" .OR. AllTrim( ::cCodCate ) == "003" .OR. AllTrim( ::cCodCate ) == "004" .OR. AllTrim( ::cCodCate ) == "005" .OR. AllTrim( ::cCodCate ) == "006" .OR. AllTrim( ::cCodCate ) == "007" .OR. AllTrim( ::cCodCate ) == "008" .OR. AllTrim( ::cCodCate ) == "009" .OR. AllTrim( ::cCodCate ) == "010" .OR. AllTrim( ::cCodCate ) == "011" .OR. AllTrim( ::cCodCate ) == "012" .OR. AllTrim( ::cCodCate ) == "013" .OR. AllTrim( ::cCodCate ) == "014" .OR. AllTrim( ::cCodCate ) == "015" .OR. AllTrim( ::cCodCate ) == "016" .OR. AllTrim( ::cCodCate ) == "017" .OR. AllTrim( ::cCodCate ) == "018" .OR. AllTrim( ::cCodCate ) == "019" .OR. AllTrim( ::cCodCate ) == "020"

            ::addLineasProducidas()

         end

      end

      ( ::selectLineasProducidas )->( dbSkip() )

   end

Return ( .T. )



static FUNCTION TInformeArticulos_addLineasProducidas( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos

   MsgWait( "Duplicando:" + AllTrim( ( ::selectLineasProducidas )->cSerOrd ) + "/" + AllTrim( Str( ( ::selectLineasProducidas )->nNumOrd ) ) + "---" + AllTrim( ( ::selectLineasProducidas )->cCodArt ) + " - " + AllTrim( ( ::selectLineasProducidas )->cNomArt ), "", 0.05 )

   ::cFichero  += AllTrim( ( ::selectLineasProducidas )->cCodArt ) + ::finLinea























































Return ( .T. )



static FUNCTION TInformeArticulos_getLineasConsumidas( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos


   local cSql        := "SELECT * FROM " + cPatEmp() + "ProMat" +  " WHERE dFecOrd >= " + quoted( dToc( ::dFecIni ) ) + " AND dFecOrd <= " + quoted( dToc( ::dFecFin ) )

   ADSBaseModel():ExecuteSqlStatement( cSql, @::selectLineasConsumidas )

   ( ::selectLineasConsumidas )->( dbGoTop() )

   while !( ::selectLineasConsumidas )->( Eof() )

      if !Empty( ( ::selectLineasConsumidas )->cCodArt )

         ::cCodCate  := ArticulosModel():getField( "CCODCATE", "Codigo", ( ::selectLineasConsumidas )->cCodArt )




















         if AllTrim( ::cCodCate ) == "001" .OR. AllTrim( ::cCodCate ) == "002" .OR. AllTrim( ::cCodCate ) == "003" .OR. AllTrim( ::cCodCate ) == "004" .OR. AllTrim( ::cCodCate ) == "005" .OR. AllTrim( ::cCodCate ) == "006" .OR. AllTrim( ::cCodCate ) == "007" .OR. AllTrim( ::cCodCate ) == "008" .OR. AllTrim( ::cCodCate ) == "009" .OR. AllTrim( ::cCodCate ) == "010" .OR. AllTrim( ::cCodCate ) == "011" .OR. AllTrim( ::cCodCate ) == "012" .OR. AllTrim( ::cCodCate ) == "013" .OR. AllTrim( ::cCodCate ) == "014" .OR. AllTrim( ::cCodCate ) == "015" .OR. AllTrim( ::cCodCate ) == "016" .OR. AllTrim( ::cCodCate ) == "017" .OR. AllTrim( ::cCodCate ) == "018" .OR. AllTrim( ::cCodCate ) == "019" .OR. AllTrim( ::cCodCate ) == "020"

            ::addLineasConsumidas()

         end

      end

      ( ::selectLineasConsumidas )->( dbSkip() )

   end

Return ( .T. )



static FUNCTION TInformeArticulos_addLineasConsumidas( ) ; local Self AS CLASS TInformeArticulos := QSelf() AS CLASS TInformeArticulos

   MsgWait( "Duplicando:" + AllTrim( ( ::selectLineasConsumidas )->cSerOrd ) + "/" + AllTrim( Str( ( ::selectLineasConsumidas )->nNumOrd ) ) + "---" + AllTrim( ( ::selectLineasConsumidas )->cCodArt ) + " - " + AllTrim( ( ::selectLineasConsumidas )->cNomArt ), "", 0.05 )

   ::cFichero  += AllTrim( ( ::selectLineasConsumidas )->cCodArt ) + ::finLinea























































Return ( .T. )
