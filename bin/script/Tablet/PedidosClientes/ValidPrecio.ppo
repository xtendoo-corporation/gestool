#line 38 "C:\fwh1801\Gestool\bin\include\FiveWin.ch"
      static bError
#line 203 "C:\fwh1801\Gestool\bin\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 79 "C:\fwh1801\Gestool\bin\include\FiveWin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 6 "C:\fwh1801\Gestool\bin\Script\tablet\Facturasclientes\ValidPrecio.prg"
Function ValidPrecio( oSender, oGetPrecio )

   local oValid

   oValid      := oValidPrecio():new( oSender, oGetPrecio )

Return oValid:run()



_HB_CLASS oValidPrecio ; function oValidPrecio ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "oValidPrecio", iif( .F., { }, { @HBObject() } ), @oValidPrecio() ) ) ;

; _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

; _HB_MEMBER { oGetPrecio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetPrecio"}, .F. )

; _HB_MEMBER { nPrecioNuevo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPrecioNuevo"}, .F. )

; _HB_MEMBER { nPrecioNormal } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPrecioNormal"}, .F. )

; _HB_MEMBER { nPorcentaje } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPorcentaje"}, .F. )

    _HB_MEMBER new( oSender, oGetPrecio); oClass:AddMethod( "new", @oValidPrecio_new(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER run(); oClass:AddMethod( "run", @oValidPrecio_run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS oValidPrecio ;



static FUNCTION oValidPrecio_new( oSender, oGetPrecio ) ; local Self AS CLASS oValidPrecio := QSelf() AS CLASS oValidPrecio

       ::oSender          := oSender
       ::oGetPrecio       := oGetPrecio

    ::nPrecioNuevo     := oGetPrecio:VarGet()






       ::nPrecioNormal := nRetPreArt(     ::oSender:hGetDetail( "NumeroTarifa" ),    ::oSender:hGetMaster( "Divisa" ),    ::oSender:hGetMaster( "ImpuestosIncluidos" ),    D():Articulos( ::oSender:getView() ),    D():Divisas( ::oSender:getView() ),    D():Kit( ::oSender:getView() ),    D():TiposIva( ::oSender:getView() ) )

       ::nPorcentaje      := 50

Return ( self )



static FUNCTION oValidPrecio_run( ) ; local Self AS CLASS oValidPrecio := QSelf() AS CLASS oValidPrecio

       local nPor         := 0
       local lReturn      := .T.

       if ::nPrecioNormal == ::nPrecioNuevo
           Return lReturn
       end

       nPor             := ( ( ::nPrecioNuevo * 100 ) / ::nPrecioNormal )

       lReturn         := ( nPor >= ::nPorcentaje )

       if !lReturn
           ApoloMsgStop( "No puede bajar el precio por debajo de un " + AllTrim( Str( ::nPorcentaje ) ) + "%", "¡Atención!" )
           ::oGetPrecio:SetFocus()
       end

Return ( lReturn )
