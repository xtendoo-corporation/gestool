#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 12 ".\.\Prg\AccessCode.prg"
_HB_CLASS AccessCode ; function AccessCode ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AccessCode", iif( .F., { }, { @HBObject() } ), @AccessCode() ) ) ;

   _HB_MEMBER { cAgente } ; oClass:AddMultiClsData(, space( 3 ), nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAgente"}, .F. )
   _HB_MEMBER { cRuta } ; oClass:AddMultiClsData(, space( 4 ), nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cRuta"}, .F. )
   _HB_MEMBER { lFilterByAgent } ; oClass:AddMultiClsData(, .F., nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFilterByAgent"}, .F. )
   _HB_MEMBER { lInvoiceModify } ; oClass:AddMultiClsData(, .T., nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lInvoiceModify"}, .F. )
   _HB_MEMBER { lUnitsModify } ; oClass:AddMultiClsData(, .T., nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lUnitsModify"}, .F. )
   _HB_MEMBER { lSalesView } ; oClass:AddMultiClsData(, .T., nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSalesView"}, .F. )
   _HB_MEMBER { lAddLote } ; oClass:AddMultiClsData(, .F., nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAddLote"}, .F. )

   _HB_MEMBER { cGetUser } ; oClass:AddMultiData(, Space( 100 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetUser"}, .F. )

   _HB_MEMBER { cGetPassword } ; oClass:AddMultiData(, Space( 10 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetPassword"}, .F. )

   _HB_MEMBER { cIniFile } ; oClass:AddMultiData(, cIniAplication(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIniFile"}, .F. )

   _HB_MEMBER loadTableConfiguration(); oClass:AddMethod( "loadTableConfiguration", @AccessCode_loadTableConfiguration(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getLogicValueFromIni(); oClass:AddInline( "getLogicValueFromIni", {|Self, cTag, cField, lDefaultValue | ( ( Self ) ), ( lower( getPvProfString( cTag, cField, lDefaultValue, ::cIniFile ) ) == ".t." ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AccessCode ;



static FUNCTION AccessCode_loadTableConfiguration( ) ; local Self AS CLASS AccessCode := QSelf() AS CLASS AccessCode

   local cTag
   local lGetUser    := .F.
   local oUserPresenter

   sysRefresh()

   cTag              := "Tablet"

   if ( "TABLET:" $ appParamsMain() )
      cTag           += right( appParamsMain(), 1 )
   end

   ::cGetUser        := getPvProfString( cTag, "User",               "",      ::cIniFile )
   ::cGetPassword    := getPvProfString( cTag, "Password",           "",      ::cIniFile )
   ::cAgente         := getPvProfString( cTag, "Agente",             "",      ::cIniFile )
   ::cRuta           := getPvProfString( cTag, "Ruta",               "",      ::cIniFile )

   ::lInvoiceModify  := ::getLogicValueFromIni( cTag, "ModificarFactura",  ".t." )
   ::lUnitsModify    := ::getLogicValueFromIni( cTag, "ModificarUnidades", ".t." )
   ::lFilterByAgent  := ::getLogicValueFromIni( cTag, "FiltrarAgente",     ".f." )
   ::lSalesView      := ::getLogicValueFromIni( cTag, "VisualizarVentas",  ".t." )
   ::lAddLote        := ::getLogicValueFromIni( cTag, "AddLote",           ".f." )

   if empty( ::cGetUser )

      oUserPresenter := UserPresenter():New()

      oUserPresenter:Play()

      if !Empty( oUserPresenter:cSelectUser )

         ::cGetUser := AllTrim( oUserPresenter:cSelectUser )

         lGetUser    := .T.

      end

   end

   if empty( ::cGetUser )
      Return .F.
   end

   Auth():guardWhereCodigo( ::cGetUser )

   if lGetUser
      ::cAgente   := UsuariosModel():getUsuarioAgenteExclusivo( Auth():uuid )
      ::cRuta     := UsuariosModel():getUsuarioRutaExclusivo( Auth():uuid )
   end

RETURN ( .T. )
