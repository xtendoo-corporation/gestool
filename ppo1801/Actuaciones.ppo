#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Actuaciones.prg"
_HB_CLASS TActuaciones ; function TActuaciones ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TActuaciones", iif( .T., { @TMant() }, { @HBObject() } ), @TActuaciones() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_power_drill2_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )
   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 197 + ( 227 * 256 ) + ( 9 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TActuaciones_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TActuaciones_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TActuaciones_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave( nMode); oClass:AddMethod( "lPreSave", @TActuaciones_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TActuaciones ;



static FUNCTION TActuaciones_OpenFiles( lExclusive ) ; local Self AS CLASS TActuaciones := QSelf() AS CLASS TActuaciones

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError )  )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TActuaciones_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TActuaciones := QSelf() AS CLASS TActuaciones

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;

   oDbf := DbfServer( "Actuaciones.Dbf", "Actuaciones" ):New( "Actuaciones.Dbf", "Actuac", ( cDriver() ), "Actuaciones", ( cPath ) )

      oDbf:AddField( "cCodAct", "C", 3, 0,,,,, "Código", .F., 100, .F., {} )
      oDbf:AddField( "cDesAct", "C", 35, 0,,,,, "Nombre", .F., 400, .F., {} )

      oDbf:AddIndex( "cCodAct", "Actuaciones.Cdx", "cCodAct",,, .F., .F., "Código",,, .T., .F. )
      oDbf:AddIndex( "cDesAct", "Actuaciones.Cdx", "cDesAct",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TActuaciones_Resource( nMode ) ; local Self AS CLASS TActuaciones := QSelf() AS CLASS TActuaciones

   local oDlg
   local oGet

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "actuaciones", "Horas",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cCodAct, ::oDbf:cCodAct:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias, .T., "0" )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cDesAct, ::oDbf:cDesAct:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( if( ::lPreSave( nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





      TButton():ReDefine( 559, {||( MsgInfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| if( ::lPreSave( nMode ), oDlg:end( 1 ), ) } )
   end

   oDlg:bStart := { || oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TActuaciones_lPreSave( nMode ) ; local Self AS CLASS TActuaciones := QSelf() AS CLASS TActuaciones

   if nMode == 1 .OR. nMode == 4

      if ::oDbf:SeekInOrd( ::oDbf:cCodAct, "cCodAct" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodAct ) )
         Return .F.
      end

   end

   if Empty( ::oDbf:cDesAct )
      MsgStop( "La descripción de la actuación no puede estar vacía." )
      Return .F.
   end

RETURN .T.
