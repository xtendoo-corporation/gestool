#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\ActualizaCosto.prg"
_HB_CLASS ActualizaCosto ; function ActualizaCosto ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ActualizaCosto", iif( .T., { @TInfGen() }, { @HBObject() } ), @ActualizaCosto() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfDiv } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfDiv"}, .F. )
   _HB_MEMBER { AS OBJECT oProduccT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProduccT"}, .F. )
   _HB_MEMBER { AS OBJECT oMetMsg } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMetMsg"}, .F. )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @ActualizaCosto_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @ActualizaCosto_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate( oMenuItem, oWnd); oClass:AddMethod( "Activate", @ActualizaCosto_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Search(); oClass:AddMethod( "Search", @ActualizaCosto_Search(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ActualizaCosto ;



static FUNCTION ActualizaCosto_OpenFiles( ) ; local Self AS CLASS ActualizaCosto := QSelf() AS CLASS ActualizaCosto

   local lOpen       := .T.
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

      ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

      ::oProduccT    :=  TProduccion():Create( cPatEmp() )
      ::oProduccT:OpenFiles()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos.", "Atención" )

      ::CloseFiles()

      lOpen := .F.

   end

   ErrorBlock( oBlock )

RETURN( lOpen )



static FUNCTION ActualizaCosto_CloseFiles( ) ; local Self AS CLASS ActualizaCosto := QSelf() AS CLASS ActualizaCosto

   if !Empty( ::oDbfArt )
      ::oDbfArt:End()
   end

   if !Empty( ::oProduccT )
      ::oProduccT:end()
   end

   if !Empty( ::oDbfDiv )
      ::oDbfDiv:End()
   end

   ::oDbfArt   := nil
   ::oDbfDiv   := nil
   ::oProduccT := nil

RETURN ( Self )



static FUNCTION ActualizaCosto_Activate( oMenuItem, oWnd ) ; local Self AS CLASS ActualizaCosto := QSelf() AS CLASS ActualizaCosto

   local oDlg
   local nLevel
   local nMetMsg        := 0
   local oCodArt
   local cCodArt        := ""
   local oSayArt
   local cSayArt        := ""
   local oBmp

   If( oMenuItem == nil, oMenuItem := "04008", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;



   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return nil
   end



   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !::OpenFiles()
      Return ( Self )
   end

   oDlg = TDialog():New(,,,,, "ACTUALIZACOSTOS",, .F.,,,,, oWnd(), .F.,,,,,, .F.,, "oDlg", nil, )





   oBmp := TBitmap():ReDefine( 600, "gc_worker2_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )

   ::oDefIniInf( 100, oDlg )
   ::oDefFinInf( 110, oDlg )






   oCodArt := TGetHlp():ReDefine( ( 120 ), { | u | If( PCount()==0, cCodArt, cCodArt:= u ) }, oDlg,,, {||    cArticulo( oCodArt, ::oDbfArt:cAlias, oSayArt )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwArticulo( oCodArt, oSayArt )}, nil, "LUPA",, )




   oSayArt := TGetHlp():ReDefine( ( 130 ), { | u | If( PCount()==0, cSayArt, cSayArt:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )




   ::oMetMsg := TApoloMeter():ReDefine( 140, { | u | If( PCount()==0, nMetMsg, nMetMsg:= u ) }, ( ::oProduccT:oDbf:Lastrec() ), oDlg, .F.,,, .F.,,,, )




   TButton():ReDefine( 500, {||( ::Search( cCodArt, oDlg ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 550, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ::CloseFiles()

   oBmp:End()

RETURN ( Self )



static FUNCTION ActualizaCosto_Search( cCodArt, oDlg ) ; local Self AS CLASS ActualizaCosto := QSelf() AS CLASS ActualizaCosto

   local cExpHead          := ""
   local nTotCostoPersonal := 0
   local nTotLitros        := 0



   if Empty( cCodArt )
      MsgStop( "Tiene que seleccionar el artículo al que va a cambiar el costo" )
      return .F.
   end

   if ::dFinInf < ::dIniInf
      MsgStop( "Margen de fecha erróneo" )
      return .F.
   end



   ::oProduccT:oDbf:OrdSetFocus( "dFecOrd" )

   cExpHead       := 'dFecOrd >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFin <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::oProduccT:oDbf:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDbf:cFile ), ::oProduccT:oDbf:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMetMsg:SetTotal( ::oProduccT:oDbf:OrdKeyCount() )

   ::oProduccT:oDbf:GoTop()

   while !::oProduccT:oDbf:Eof()

      nTotCostoPersonal    += ::oProduccT:nTotalPersonal( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )

      if ::oProduccT:oDetProduccion:oDbf:Seek( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )

         while ::oProduccT:oDetProduccion:oDbf:cSerOrd + Str( ::oProduccT:oDetProduccion:oDbf:nNumOrd ) + ::oProduccT:oDetProduccion:oDbf:cSufOrd == ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd .AND. !::oProduccT:oDetProduccion:oDbf:eof()

            nTotLitros     += NotCaja( ::oProduccT:oDetProduccion:oDbf:nCajOrd ) * NotCero( ::oProduccT:oDetProduccion:oDbf:nUndOrd ) * NotCero( ::oProduccT:oDetProduccion:oDbf:nVolumen )

            ::oProduccT:oDetProduccion:oDbf:Skip()

         end

      end

      ::oProduccT:oDbf:Skip()

      ::oMetMsg:Set( ::oProduccT:oDbf:OrdKeyNo() )

   end

   ::oProduccT:oDbf:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDbf:cFile ) )

   ::oMetMsg:Set( ::oProduccT:oDbf:Lastrec() )






   if ApoloMsgNoYes( "Se va a cambiar costo del artículo."                                         + Chr(13)+Chr(10) +  AllTrim( cCodArt ) + " - " + AllTrim( oRetFld( cCodArt, ::oDbfArt ) ) + ";"   + Chr(13)+Chr(10) +  "el nuevo costo será : " + AllTrim( Trans( ( nTotCostoPersonal / nTotLitros ), cPinDiv( cDivEmp(), ::oDbfDiv ) ) ) + cSimDiv( cDivEmp(), ::oDbfDiv ) , "¿ Desea proceder ?" )

      if ::oDbfArt:SeekInOrd( cCodArt, "Codigo" )

         ::oDbfArt:Load()
         ::oDbfArt:pCosto  := ( nTotCostoPersonal / nTotLitros )
         ::oDbfArt:Save()

         msgInfo( "El precio del artículo se ha actualizado correctamente", AllTrim( cCodArt ) + " - " + AllTrim( oRetFld( cCodArt, ::oDbfArt ) ) )

      end

   end

RETURN ( oDlg:End() )
