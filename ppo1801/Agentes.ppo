#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 41 ".\.\Prg\Agentes.prg"
static oWndBrw

static cAgentesComisiones
static cAgentesRelaciones
static cAgentesAtipicas

static cOldCodigoAgente          := ""
static nOldPctComision           := 0

static lOpenFiles                := .F.

static bEdit                     := { |aTmp, aoGet, dbfAge, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aoGet, dbfAge, oBrw, bWhen, bValid, nMode ) }
static bEdtDet                   := { |aTmp, aoGet, dbfAge, oBrw, bWhen, bValid, nMode | EdtDet( aTmp, aoGet, dbfAge, oBrw, bWhen, bValid, nMode ) }
static bEdtRel                   := { |aTmp, aoGet, dbfAge, oBrw, cCodAge, bValid, nMode | EdtRel( aTmp, aoGet, dbfAge, oBrw, cCodAge, bValid, nMode ) }

static dbfAge

static oDetCamposExtra

static tmpAgentesComisiones
static tmpAgentesRelaciones

static nView





FUNCTION Agentes( oMenuItem, oWnd )

   local nLevel

   If( oMenuItem == nil, oMenuItem := "01033", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

   if oWndBrw == NIL

   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return nil
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      return .F.
   end



















   oWndBrw := TShell():New( 2, 10, 18, 70, "Agentes",, oWnd,,, .F.,,, ( dbfAge ),,,,, {"Código",    "Apellidos" ,    "Nombre"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfAge ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfAge ) )}, {||( DBDelRec(  oWndBrw:oBrw, dbfAge ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfAge ) )}, nil, nLevel, "gc_businessman2_16", ( 190 + ( 57 * 256 ) + ( 0 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodAge"
         :bEditValue       := {|| ( dbfAge )->cCodAge }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Apellidos"
         :cSortOrder       := "cApeAge"
         :bEditValue       := {|| ( dbfAge )->cApeAge }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNbrAge"
         :bEditValue       := {|| ( dbfAge )->cNbrAge }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      oWndBrw:cHtmlHelp    := "Agentes"

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfAge ) )}, "(Z)oom", "Z",,,,, .F. )





        oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )

      if RolesModel():getRolCambiarCampos( Auth():rolUuid() )





      oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, dbfAge, aItmAge() ) )}, "Cambiar campos",,,, 2,, .F. )

      end





      oWndBrw:NewAt( "IMP",,, {||( InfAge():New( "Listado de agentes" ):Play() )}, "(L)istado", "L",,,,, .F. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

   end

Return nil



Static Function OpenFiles()

   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      nView             := D():CreateView()

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAge ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      D():AgentesComisiones( nView )

      D():AgentesRelaciones( nView )

      D():Proveedores( nView )

      D():Familias( nView )

      D():Articulos( nView )

      D():Atipicas( nView )
      ( D():Atipicas( nView ) )->( ordSetFocus( "cCodAge" ) )

      oDetCamposExtra   := TDetCamposExtra():New()
      oDetCamposExtra:OpenFiles()
      oDetCamposExtra:SetTipoDocumento( "Agentes" )
      oDetCamposExtra:setbId( {|| D():AgentesId( nView ) } )

      lOpenFiles        := .T.

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de agentes" )

      CloseFiles()

   end

   ErrorBlock( oBlock )

Return ( lOpenFiles )



Static Function CloseFiles()

   if !Empty( dbfAge )
      ( dbfAge )->( dbCloseArea() )
   end

   if !Empty( oDetCamposExtra )
      oDetCamposExtra:CloseFiles()
   end

   D():DeleteView( nView )

   dbfAge                  := nil

   oWndBrw                 := nil

Return ( .T. )



STATIC FUNCTION EdtRec( aTemp, aoGet, dbfAge, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oFld
   local oBrwLin
   local oBrwRel
   local oBmpGeneral
   local oBmpComisiones
   local oBmpRelaciones





   if lPreEdit( aTemp, nMode )
      Return .F.
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Agentes : " + cNombreAgente( aTemp ), "AGENTES",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









        oFld := TFolder():ReDefine( 500, {"General"         , "Comisiones"      , "Relaciones"}, { "AGENTES_1","AGENTES_2","AGENTES_3" }, oDlg,,,,, .F., )







      oBmpGeneral := TBitmap():ReDefine( 500, "gc_businessman2_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )





      aoGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTemp[ 1 ], aTemp[ 1 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )





      aoGet[ 2 ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTemp[ 2 ], aTemp[ 2 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aoGet[ 3 ] := TGetHlp():ReDefine( 102, { | u | If( PCount()==0, aTemp[ 3 ], aTemp[ 3 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




        TGetHlp():ReDefine( 103, { | u | If( PCount()==0, aTemp[ 4 ], aTemp[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




        TGetHlp():ReDefine( 104, { | u | If( PCount()==0, aTemp[ 5 ], aTemp[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




        TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTemp[ 6 ], aTemp[ 6 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




        TGetHlp():ReDefine( 106, { | u | If( PCount()==0, aTemp[ 7 ], aTemp[ 7 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




        TGetHlp():ReDefine( 107, { | u | If( PCount()==0, aTemp[ 8 ], aTemp[ 8 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





        TGetHlp():ReDefine( 108, { | u | If( PCount()==0, aTemp[ 9 ], aTemp[ 9 ]:= u ) }, oFld:aDialogs[1],, "############",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 113, { | u | If( PCount()==0, aTemp[ 11 ], aTemp[ 11 ]:= u ) }, oFld:aDialogs[1],, "############",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





        TGetHlp():ReDefine( 109, { | u | If( PCount()==0, aTemp[ 10 ], aTemp[ 10 ]:= u ) }, oFld:aDialogs[1],, "############",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 114, { | u | If( PCount()==0, aTemp[ 16 ], aTemp[ 16 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TMultiGet():ReDefine( 112, { | u | If( PCount()==0, aTemp[ 13 ], aTemp[ 13 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||         ( nMode <> 3 )}, .F.,, )








      aoGet[ 21 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTemp[ 21 ], aTemp[ 21 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cProvee( aoGet[ 21 ], D():Proveedores( nView ), aoGet[ 21 ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwProvee( aoGet[ 21 ], aoGet[ 21 ]:oHelpText ) )}, nil, "LUPA",, 330 )








      aoGet[ 22 ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTemp[ 22 ], aTemp[ 22 ]:= u ) }, oFld:aDialogs[1],,, {||    cArticulo( aoGet[ 22 ], D():Articulos( nView ), aoGet[ 22 ]:oHelpText )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwArticulo( aoGet[ 22 ], aoGet[ 22 ]:oHelpText )}, nil, "LUPA",, 350 )







      oBmpComisiones := TBitmap():ReDefine( 500, "gc_symbol_percent_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )








      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTemp[ 15 ], aTemp[ 15 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTemp[ 23 ], aTemp[ 23 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTemp[ 24 ], aTemp[ 24 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      TGetHlp():ReDefine( 102, { | u | If( PCount()==0, aTemp[ 25 ], aTemp[ 25 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      TGetHlp():ReDefine( 103, { | u | If( PCount()==0, aTemp[ 26 ], aTemp[ 26 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      TGetHlp():ReDefine( 104, { | u | If( PCount()==0, aTemp[ 27 ], aTemp[ 27 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTemp[ 28 ], aTemp[ 28 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )



      oBrwLin                 := IXBrowse():New( oFld:aDialogs[2] )

      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLin:cAlias          := tmpAgentesComisiones
      oBrwLin:nMarqueeStyle   := 5

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Hasta"
         :bEditValue       := {|| ( tmpAgentesComisiones )->nImpVta }
         :cEditPicture     := PicOut()
         :nWidth           := 120
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "% Comisión"
         :bEditValue       := {|| ( tmpAgentesComisiones )->nPctCom }
         :cEditPicture     := "@E 999.99"
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      if nMode <> 3
         oBrwLin:bLDblClick   := {|| WinEdtRec( oBrwLin, bEdtDet, tmpAgentesComisiones ) }
      end

      oBrwLin:CreateFromResource( 310 )





      TButton():ReDefine( 501, {||( WinAppRec( oBrwLin, bEdtDet, tmpAgentesComisiones ) )}, oFld:aDialogs[2],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( WinEdtRec( oBrwLin, bEdtDet, tmpAgentesComisiones ) )}, oFld:aDialogs[2],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( dbDelRec( oBrwLin, tmpAgentesComisiones ) )}, oFld:aDialogs[2],,, .F., {||     ( nMode <> 3 )},,, .F. )




















      aoGet[ 19 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTemp[ 19 ], aTemp[ 19 ]:= u ) }, oFld:aDialogs[2],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aoGet[ 19 ], {  aTemp[ 19    ], Rtrim( aTemp[ 3 ] ) + Space( 1 ) + Rtrim( aTemp[ 2 ] ), aTemp[ 4   ], aTemp[ 5   ], aTemp[ 6   ], aTemp[ 7     ], aTemp[ 8   ], aTemp[ 9   ], aTemp[ 10   ], aTemp[ 16  ] }, aoGet[ 19 ]:oHelpText ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aoGet[ 19 ], aoGet[ 19 ]:oHelpText ) )}, nil, "LUPA",, 351 )









      aoGet[ 20 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTemp[ 20 ], aTemp[ 20 ]:= u ) }, oFld:aDialogs[2],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aoGet[ 20 ], nil, aoGet[ 20 ]:oHelpText ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aoGet[ 20 ], aoGet[ 20 ]:oHelpText ) )}, nil, "LUPA",, 361 )








         oBmpRelaciones := TBitmap():ReDefine( 500, "gc_businessman2_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )

      oBrwRel                 := IXBrowse():New( oFld:aDialogs[3] )

      oBrwRel:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwRel:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwRel:cAlias          := tmpAgentesRelaciones
      oBrwRel:nMarqueeStyle   := 5

      with object ( oBrwRel:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( tmpAgentesRelaciones )->cCodRel }
         :nWidth           := 60
      end

      with object ( oBrwRel:AddCol() )
         :cHeader          := "Agente"
         :bEditValue       := {|| cNbrAgent( ( tmpAgentesRelaciones )->cCodRel, dbfAge ) }
         :nWidth           := 240
      end

      with object ( oBrwRel:AddCol() )
         :cHeader          := "% Comisión"
         :bEditValue       := {|| ( tmpAgentesRelaciones )->nComRel }
         :cEditPicture     := "@E 999.99"
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      if nMode <> 3
         oBrwRel:bLDblClick   := {|| WinEdtRec( oBrwRel, bEdtRel, tmpAgentesRelaciones, aTemp[ 1 ] ) }
      end

      oBrwRel:CreateFromResource( 310 )





      TButton():ReDefine( 501, {||( WinAppRec( oBrwRel, bEdtRel, tmpAgentesRelaciones, aTemp[ 1 ] ) )}, oFld:aDialogs[3],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( WinEdtRec( oBrwRel, bEdtRel, tmpAgentesRelaciones, aTemp[ 1 ] ) )}, oFld:aDialogs[3],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( dbDelRec( oBrwRel, tmpAgentesRelaciones ) )}, oFld:aDialogs[3],,, .F., {||     ( nMode <> 3 )},,, .F. )









      TButton():ReDefine( 1, {||( lPreSave( aTemp, aoGet, dbfAge, oBrw, oBrwLin, nMode, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| lPreSave( aTemp, aoGet, dbfAge, oBrw, oBrwLin, nMode, oDlg ) } )

         oDlg:AddFastKey( 120, {|| oDetCamposExtra:Play( Space(1) ) } )

      endif

      oDlg:bStart := {|| EvalGet( aoGet, nMode ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( EdtRecMenu( oDlg, aTemp ) )}, oDlg:bRClicked,,, )
   oBmpGeneral:End()
   oBmpComisiones:End()
   oBmpRelaciones:End()

RETURN ( oDlg:nResult == 1 )



Static Function EdtRecMenu( oDlg, aTemp )

   local oMenu

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra para la familia", .F.,, {|oMenuItem|( oDetCamposExtra:Play( Space(1) ) )},, "GC_FORM_PLUS2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return ( oMenu )



Static Function lPreEdit( aTmp, nMode )

   local lErrors              := .F.
   local cCodAge              := aTmp[ 1 ]
   local oError
   local oBlock
   local tmpCom

   oBlock                     := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE



      cAgentesComisiones      := cGetNewFileName( cPatTmp() + "ComAge" )

      dbCreate( cAgentesComisiones, aSqlStruct( aItmCom() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cAgentesComisiones, cCheckArea( "ComAge", @tmpAgentesComisiones ), .F. )

      ( tmpAgentesComisiones )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpAgentesComisiones )->( OrdCreate( cAgentesComisiones, "nImpVta", "Str( nImpVta )", {|| Str( Field->nImpVta ) } ) )

      if ( D():AgentesComisiones( nView ) )->( dbSeek( cCodAge ) )
         while ( ( D():AgentesComisiones( nView ) )->cCodAge == cCodAge .AND. !( D():AgentesComisiones( nView ) )->( eof() ) )
            dbPass( D():AgentesComisiones( nView ), tmpAgentesComisiones, .T. )
            ( D():AgentesComisiones( nView ) )->( dbSkip() )
         end
      end

      ( tmpAgentesComisiones )->( dbGoTop() )



      cAgentesRelaciones     := cGetNewFileName( cPatTmp() + "RelAge" )

      dbCreate( cAgentesRelaciones, aSqlStruct( aItmRel() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cAgentesRelaciones, cCheckArea( "RelAge", @tmpAgentesRelaciones ), .F. )

      ( tmpAgentesRelaciones )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpAgentesRelaciones )->( OrdCreate( cAgentesRelaciones, "cCodAge", "cCodAge", {|| Field->cCodAge } ) )

      if ( D():AgentesRelaciones( nView ) )->( dbSeek( cCodAge ) )
         while ( ( D():AgentesRelaciones( nView ) )->cCodAge == cCodAge .AND. !( D():AgentesRelaciones( nView ) )->( eof() ) )
            dbPass( D():AgentesRelaciones( nView ), tmpAgentesRelaciones, .T. )
            ( D():AgentesRelaciones( nView ) )->( dbSkip() )
         end
      end

      ( tmpAgentesRelaciones )->( dbGoTop() )





   oDetCamposExtra:SetTemporal( aTmp[ 1 ], "", nMode )

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      lPosEdit()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

RETURN ( lErrors )



Static Function lPosEdit( oBrwLin )

   if !empty( oBrwLin )
      oBrwLin:CloseData()
   end

   if !Empty( tmpAgentesComisiones ) .AND. ( tmpAgentesComisiones )->( Used() )
      ( tmpAgentesComisiones )->( dbCloseArea() )
   end
   tmpAgentesComisiones          := nil
   dbfErase( cAgentesComisiones )

   if !Empty( tmpAgentesRelaciones ) .AND. ( tmpAgentesRelaciones )->( Used() )
      ( tmpAgentesRelaciones )->( dbCloseArea() )
   end
   tmpAgentesRelaciones          := nil
   dbfErase( cAgentesRelaciones )

Return .T.



STATIC FUNCTION lPreSave( aTemp, aoGet, dbfAge, oBrw, oBrwLin, nMode, oDlg )

   if nMode == 1 .OR. nMode == 4

      if Empty( aTemp[ 1 ] )
         MsgStop( "El código del agente no puede estar vacío." )
         aoGet[ 1 ]:SetFocus()
         Return nil
      end

      if !NotValid( aoGet[ 1 ], dbfAge, .T., "0" )
         aoGet[ 1 ]:SetFocus()
         Return nil
      end

   end

   if Empty( aTemp[ 3 ] )
      MsgStop( "El nombre del agente no puede estar vacío." )
      aoGet[ 3 ]:SetFocus()
      Return nil
   end

   CursorWait()

   oDlg:Disable()

   oMsgText( "Archivando" )



   if nMode == 2
      deleteRelations( aTemp[ 1 ], D():AgentesComisiones( nView ) )
      deleteRelations( aTemp[ 1 ], D():AgentesRelaciones( nView ) )
      deleteRelations( aTemp[ 1 ], D():Atipicas( nView ) )
   end



   oMsgProgress()
   oMsgProgress():SetRange( 0, ( tmpAgentesComisiones )->( LastRec() ) )



   buildRelation( tmpAgentesComisiones, D():AgentesComisiones( nView ), { "cCodAge" => aTemp[ 1 ] } )
   buildRelation( tmpAgentesRelaciones, D():AgentesRelaciones( nView ), { "cCodAge" => aTemp[ 1 ] } )





   oDetCamposExtra:saveExtraField( aTemp[ 1 ], "" )




   winGather( aTemp, aoGet, dbfAge, oBrw, nMode )

   dbCommitAll()

   oMsgText()

   lPosEdit( oBrwLin )

   endProgress()

   oDlg:Enable()
   oDlg:End( 1 )

   CursorWE()

Return ( .T. )



Static Function EdtDet( aTmp, aGet, tmpAgentesComisiones, oBrw, bWhen, bValid, nMode )

    local oDlg



   oDlg = TDialog():New(,,,,, "AgeDet",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







      aGet[ ( tmpAgentesComisiones )->( FieldPos( "nImpVta" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( tmpAgentesComisiones )->( FieldPos( "nImpVta" ) ) ], aTmp[ ( tmpAgentesComisiones )->( FieldPos( "nImpVta" ) ) ]:= u ) }, oDlg,, PicOut(),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ ( tmpAgentesComisiones )->( FieldPos( "nPctCom" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( tmpAgentesComisiones )->( FieldPos( "nPctCom" ) ) ], aTmp[ ( tmpAgentesComisiones )->( FieldPos( "nPctCom" ) ) ]:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, tmpAgentesComisiones, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function EdtRel( aTmp, aGet, tmpAgentesRelaciones, oBrw, cCodAge, bValid, nMode )

    local oDlg



   oDlg = TDialog():New(,,,,, "AgeRel",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )










      aGet[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ], aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ]:= u ) }, oDlg,, "@!", {||    ( lValidEdtRel( cCodAge, aTmp, aGet, dbfAge ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ], aGet[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ]:oHelpText, .T., aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ] ) )}, nil, "LUPA",, 101 )







      aGet[ ( tmpAgentesRelaciones )->( FieldPos( "nComRel" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "nComRel" ) ) ], aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "nComRel" ) ) ]:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, tmpAgentesRelaciones, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart := {|| aGet[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ]:lValid() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function lValidEdtRel( cCodAge, aTmp, aGet, dbfAge )

   local nRec
   local nOrd
   local lVal  := .F.

   if Empty( aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ] )
      return .T.
   end

   if ( cCodAge == aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ] )
      MsgStop( "No se puede relacionar un agente con el mismo" )
      return .F.
   end

   nRec        := ( dbfAge )->( RecNo() )
   nOrd        := ( dbfAge )->( OrdSetFocus( "cCodAge" ) )

   if ( dbfAge )->( dbSeek( aTmp[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ] ) )
      aGet[ ( tmpAgentesRelaciones )->( FieldPos( "cCodRel" ) ) ]:oHelpText:cText( cNombreAgente( dbfAge ) )
      lVal     := .T.
   end

   ( dbfAge )->( dbGoTo( nRec ) )
   ( dbfAge )->( OrdSetFocus( nOrd ) )

Return ( lVal )



FUNCTION BrwAgentes( oGet, oGet2, lRelacionado, cCodigoAgente )

    local oDlg
    local oBrw
   local oGet1
    local cGet1
   local oBlock
   local oError
   local nOrdAnt
   local oCbxOrd
   local aCbxOrd
   local cCbxOrd
   local aStatus
   local nLevelUsr
   local cReturn        := ""

   aCbxOrd              := { "Código", "Apellidos", "Nombre" }

   nOrdAnt              := GetBrwOpt( "BrwAgentes" )
   nOrdAnt              := Min( Max( nOrdAnt, 1 ), len( aCbxOrd ) )

   cCbxOrd              := aCbxOrd[ nOrdAnt ]

   nLevelUsr            := Auth():Level( "01033" )

   If( lRelacionado == nil, lRelacionado := .F., ) ;

   if lRelacionado

      if !lOpenFiles
         Return ( .F. )
      else

         aStatus        := aGetStatus( dbfAge )
         ( dbfAge )->( dbSetFilter( {|| Field->cCodAge <> cCodigoAgente }, "cCodAge" ) )
         ( dbfAge )->( dbGoTop() )

      end

   else

      if !OpenFiles()
         Return ( .F. )
      end

   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   oDlg = TDialog():New(,,,, "Seleccionar agentes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfAge ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfAge ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfAge )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfAge
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Agentes"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodAge"
         :bEditValue       := {|| ( dbfAge )->cCodAge }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Apellidos"
         :cSortOrder       := "cApeAge"
         :bEditValue       := {|| ( dbfAge )->cApeAge }
         :nWidth           := 225
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNbrAge"
         :bEditValue       := {|| ( dbfAge )->cNbrAge }
         :nWidth           := 225
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if !( "PDA" $ appParamsMain() )





        TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfAge ) )}, oDlg,,, .F., {||     ( nAnd( nLevelUsr, 2 ) <> 0 .AND. !IsReport() .AND. !lRelacionado )},,, .F. )





        TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfAge ) )}, oDlg,,, .F., {||     ( nAnd( nLevelUsr, 4 ) <> 0 .AND. !IsReport() .AND. !lRelacionado )},,, .F. )

      if nAnd( nLevelUsr, 2 ) <> 0 .AND. !IsReport() .AND. !lRelacionado
         oDlg:AddFastKey( 113, {|| WinAppRec( oBrw, bEdit, dbfAge ) } )
      end

      if nAnd( nLevelUsr, 4 ) <> 0 .AND. !IsReport() .AND. !lRelacionado
         oDlg:AddFastKey( 114, {|| WinEdtRec( oBrw, bEdit, dbfAge ) } )
      end

   end

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      cReturn                 := ( dbfAge )->cCodAge

      if !Empty( oGet )
         oGet:cText( ( dbfAge )->cCodAge )
      end

      if IsObject( oGet2 )
         oGet2:cText( RTrim( ( dbfAge )->cApeAge ) + ", " + ( dbfAge )->cNbrAge )
      end

   end

   DestroyFastFilter( dbfAge )

   SetBrwOpt( "BrwAgentes", ( dbfAge )->( OrdNumber() ) )

   if lRelacionado

      ( dbfAge )->( dbClearFilter() )

      SetStatus( dbfAge, aStatus )

   else

      CloseFiles()

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !Empty( oGet )
      oGet:SetFocus()
   end

Return ( cReturn )



FUNCTION RetNbrAge( cCodAge, dbfAge )

   local oBlock
   local oError
   local nRecNo
    local nOrdAnt
    local cNombre    := ""
   local lClose   := .F.

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfAge )
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAge ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   nRecNo         := (dbfAge)->( RecNo() )
   nOrdAnt        := (dbfAge)->( OrdSetFocus( 1 ) )

   IF (dbfAge)->( DbSeek( cCodAge ) )
      cNombre     := Rtrim( (dbfAge)->CNBRAGE ) + " " + (dbfAge)->CAPEAGE
    end

   (dbfAge)->( dbGoTo( nRecNo ) )
   (dbfAge)->( OrdSetFocus( nOrdAnt ) )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

    IF lClose
      ( dbfAge )->( dbCloseArea() )
    end

RETURN ( cNombre )



FUNCTION aAgentesRelacionados( cCodAge, nView )

   local nOrd
   local oBlock
   local oError
   local aAgentes    := {}

   if IsObject( cCodAge )
      cCodAge        := cCodAge:VarGet()
   end

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   nOrd              := ( D():AgentesRelaciones( nView ) )->( ordSetFocus( "cCodRel" ) )

   if ( D():AgentesRelaciones( nView ) )->( dbSeek( cCodAge ) )
      while ( ( D():AgentesRelaciones( nView ) )->cCodRel == cCodAge ) .AND. !( D():AgentesRelaciones( nView ) )->( eof() )
         aAdd( aAgentes, { ( D():AgentesRelaciones( nView ) )->cCodAge, ( D():AgentesRelaciones( nView ) )->nComRel } )
         ( D():AgentesRelaciones( nView ) )->( dbSkip() )
      end
   end

   ( D():AgentesRelaciones( nView ) )->( ordSetFocus( nOrd ) )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible obtener los agentes relacionados" )

   end

   ErrorBlock( oBlock )

RETURN ( aAgentes )



Static Function aAgentes( cCodAge, uAgentes, dbfAge )

   local oNode
   local nRecNo
    local nOrdAnt

   nRecNo            := ( dbfAge )->( RecNo() )
   nOrdAnt           := ( dbfAge )->( OrdSetFocus( "cAgeRel" ) )

   if ( dbfAge )->( dbSeek( cCodAge ) ) .AND. ( dbfAge )->cAgeRel <> ( dbfAge )->cCodAge

      while ( dbfAge )->cAgeRel == cCodAge .AND. !( dbfAge )->( eof() )

         do case
            case isObject( uAgentes )

               oNode := uAgentes:Add( cNombreAgente( dbfAge ) + Space( 1 ) + "[" + Trans( ( dbfAge )->nComRel, "@E 99.99" ) + "% ]" )

               aAgentes( ( dbfAge )->cCodAge, oNode, dbfAge )

            case isArray( uAgentes )

               aAdd( uAgentes, { ( dbfAge )->cCodAge, ( dbfAge )->nComRel } )

               aAgentes( ( dbfAge )->cCodAge, uAgentes, dbfAge )

         end

         ( dbfAge )->( dbSkip() )

      end

   end

   ( dbfAge )->( dbGoTo( nRecNo ) )
   ( dbfAge )->( OrdSetFocus( nOrdAnt ) )

RETURN ( uAgentes )



Function IsAgentes()

   local oError
   local oBlock
   local dbfAgente

   if !lExistTable( cPatEmp() + "Agentes.Dbf" )
      mkAgentes( cPatEmp() )
   end

   if !lExistIndex( cPatEmp() + "Agentes.Cdx" )
      rxAgentes( cPatEmp() )
   end

   oBlock                     := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Agentes.Dbf" ), ( cCheckArea( "CCODAGE", @dbfAge ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "Agentes.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

   ( dbfAge )->( dbCloseArea() )

Return ( .T. )



FUNCTION mkAgentes( cPath, lAppend, cPathOld, oMeter )

   If( lAppend == nil, lAppend := .F., ) ;
   If( cPath == nil, cPath := cPatEmp(), ) ;

   if oMeter <> nil
        oMeter:cText    := "Generando Bases"
        sysrefresh()
   end

   if !lExistTable( cPath + "Agentes.Dbf" )
      dbCreate( cPath + "Agentes.Dbf", aSqlStruct( aItmAge() ), cDriver() )
   end

   if !lExistTable( cPath + "AgeCom.Dbf" )
      dbCreate( cPath + "AgeCom.Dbf", aSqlStruct( aItmCom() ), cDriver() )
   end

   if !lExistTable( cPath + "AgeRel.Dbf" )
      dbCreate( cPath + "AgeRel.Dbf", aSqlStruct( aItmRel() ), cDriver() )
   end

    rxAgentes( cPath, oMeter )

   if lAppend .AND. lIsDir( cPathOld )
      appDbf( cPathOld, cPath, "Agentes" )
      appDbf( cPathOld, cPath, "AgeCom" )
      appDbf( cPathOld, cPath, "AgeRel" )
   end

RETURN NIL



FUNCTION rxAgentes( cPath, oMeter )

   local dbfAge

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "Agentes.Dbf" ) .OR. !lExistTable( cPath + "AgeCom.Dbf" ) .OR. !lExistTable( cPath + "AgeRel.Dbf" )
        mkAgentes( cPath, , , oMeter )
   end

   fEraseIndex( cPath + "Agentes.Cdx" )
   fEraseIndex( cPath + "AgeCom.Cdx" )
   fEraseIndex( cPath + "AgeRel.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "AGENTES.DBF", cCheckArea( "AGENTES", @dbfAge ), .F. )

   if !( dbfAge )->( neterr() )
      ( dbfAge )->( __dbPack() )

      ( dbfAge )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfAge )->( ordCreate( cPath + "AGENTES.CDX", "CCODAGE", "CCODAGE", {|| Field->cCodAge } ) )

      ( dbfAge )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfAge )->( ordCreate( cPath + "AGENTES.CDX", "CAPEAGE", "CAPEAGE", {|| Field->cApeAge } ) )

      ( dbfAge )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfAge )->( ordCreate( cPath + "AGENTES.CDX", "CNBRAGE", "CNBRAGE", {|| Field->cNbrAge } ) )

      ( dbfAge )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfAge )->( ordCreate( cPath + "AGENTES.CDX", "CAGEREL", "CAGEREL", {|| Field->cAgeRel } ) )

      ( dbfAge )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de agentes" )
   end

   dbUseArea( .T., cDriver(), cPath + "AGECOM.DBF", cCheckArea( "AGENTES", @dbfAge ), .F. )

   if !( dbfAge )->( neterr() )
      ( dbfAge )->( __dbPack() )

      ( dbfAge )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfAge )->( ordCreate( cPath + "AGECOM.CDX", "CCODAGE", "cCodAge + Str( nImpVta )", {|| Field->cCodAge + Str( Field->nImpVta ) } ) )

      ( dbfAge )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de agentes" )
   end

   dbUseArea( .T., cDriver(), cPath + "AgeRel.Dbf", cCheckArea( "AGENTES", @dbfAge ), .F. )

   if !( dbfAge )->( neterr() )
      ( dbfAge )->( __dbPack() )

      ( dbfAge )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfAge )->( ordCreate( cPath + "AgeRel.Cdx", "cCodAge", "cCodAge + cCodRel", {|| Field->cCodAge + Field->cCodRel } ) )

      ( dbfAge )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfAge )->( ordCreate( cPath + "AgeRel.Cdx", "cCodRel", "cCodRel", {|| Field->cCodRel } ) )

      ( dbfAge )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de agentes" )
   end

RETURN NIL



FUNCTION aItmAge()





























   local aBase := {  { "cCodAge",   "C",  3,  0, "Código del agente" ,        "",            "", "( cDbfAge )" }, { "cApeAge",   "C",100,  0, "Apellidos del agente" ,     "'@!'",        "", "( cDbfAge )" }, { "cNbrAge",   "C",100,  0, "Nombre del agente" ,        "'@!'",        "", "( cDbfAge )" }, { "cDniNif",   "C", 15,  0, "DNI del agente" ,           "'@!'",        "", "( cDbfAge )" }, { "cDirAge",   "C", 35,  0, "Domicilio del agente" ,     "'@!'",        "", "( cDbfAge )" }, { "cPobAge",   "C", 25,  0, "Población del agente" ,     "'@!'",        "", "( cDbfAge )" }, { "cProv",     "C", 15,  0, "Provincia del agente" ,     "'@!'",        "", "( cDbfAge )" }, { "cPtlAge",   "C",  5,  0, "Código postal del agente" , "'@!'",        "", "( cDbfAge )" }, { "cTfoAge",   "C", 12,  0, "Teléfono del agente" ,      "",            "", "( cDbfAge )" }, { "cFaxAge",   "C", 12,  0, "Fax del agente" ,           "",            "", "( cDbfAge )" }, { "cMovAge",   "C", 12,  0, "Teléfono movíl del agente" ,"",            "", "( cDbfAge )" }, { "nIrpfAge",  "N",  5,  2, "IRPF del agente" ,          "'@E 99.99'",  "", "( cDbfAge )" }, { "mComEnt",   "M", 10,  0, "Comentarios" ,              "",            "", "( cDbfAge )" }, { "lSelAge",   "L",  1,  0, "Seleccionar el agente" ,    "",            "", "( cDbfAge )" }, { "nCom1",     "N",  6,  2, "Comisión del agente" ,      "'@E 99.99'",  "", "( cDbfAge )" }, { "cMailAge",  "C",120,  0, "Email del agente" ,         "",            "", "( cDbfAge )" }, { "cAgeRel",   "C",  3,  0, "Código del agente relacionado" ,     "",   "", "( cDbfAge )" }, { "nComRel",   "N",  6,  2, "Comisión del agente relacionado" ,   "",   "", "( cDbfAge )" }, { "CtaAge",    "C", 12,  0, "Código subcuenta agente",   "",            "", "( cDbfAge )" }, { "CtaGas",    "C", 12,  0, "Código subcuenta gasto",    "",            "", "( cDbfAge )" }, { "cCodPrv",   "C", 12,  0, "Código de proveedor",       "",            "", "( cDbfAge )" }, { "cCodArt",   "C", 18,  0, "Código de artículo",        "",            "", "( cDbfAge )" }, { "nComTar1",  "N",  6,  2, "Comisión de la tarifa 1" ,  "'@E 99.99'",  "", "( cDbfAge )" }, { "nComTar2",  "N",  6,  2, "Comisión de la tarifa 2" ,  "'@E 99.99'",  "", "( cDbfAge )" }, { "nComTar3",  "N",  6,  2, "Comisión de la tarifa 3" ,  "'@E 99.99'",  "", "( cDbfAge )" }, { "nComTar4",  "N",  6,  2, "Comisión de la tarifa 4" ,  "'@E 99.99'",  "", "( cDbfAge )" }, { "nComTar5",  "N",  6,  2, "Comisión de la tarifa 5" ,  "'@E 99.99'",  "", "( cDbfAge )" }, { "nComTar6",  "N",  6,  2, "Comisión de la tarifa 6" ,  "'@E 99.99'",  "", "( cDbfAge )" }, { "Uuid",      "C", 40,  0, "Identificador único" ,      "",            "", "( cDbfAge )" } }

RETURN ( aBase )



FUNCTION aItmCom()



   local aBase := {  { "cCodAge",   "C",  3,  0, "Código del agente" ,        "",            "", "( cDbfAge )" }, { "nImpVta",   "N", 16,  6, "Importe de venta" ,         "",            "", "( cDbfAge )" }, { "nPctCom",   "N",  6,  2, "Porcentaje de comisión" ,   "",            "", "( cDbfAge )" } }

RETURN ( aBase )



FUNCTION aItmRel()



   local aBase := {  { "cCodAge",   "C",  3,  0, "Código del agente" ,        "",            "", "( cDbfAge )" }, { "cCodRel",   "C",  3,  0, "Código del agente relacionado" , "",       "", "( cDbfAge )" }, { "nComRel",   "N",  6,  2, "Porcentaje de comisión" ,   "",            "", "( cDbfAge )" } }

RETURN ( aBase )



FUNCTION cAgentes( oGet, dbfAge, oGet2, oGetPct )

   local nRec
   local oBlock
   local oError
   local xValor
   local lClose      := .F.
   local lValid      := .F.

   if Empty( oGet:varGet() ) .OR. ( oGet:varGet() == replicate( "Z", 3 ) )

      if isObject( oGet2 )
            oGet2:cText( "" )
      end

      if isObject( oGetPct )
            oGetPct:cText( 0 )
      end

      return .T.

   else

      xValor         := RJustObj( oGet, "0", 3 )

   end

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfAge )
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAge ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose         := .T.
   else
      nRec           := ( dbfAge )->( Recno() )
   end

   if dbSeekInOrd( xValor, "cCodAge", dbfAge )

      if isObject( oGet2 )
         oGet2:cText( RTrim( ( dbfAge )->cApeAge ) + ", " + ( dbfAge )->cNbrAge )
      end

      if isObject( oGetPct )
         oGetPct:cText( ( dbfAge )->nCom1 )
      end

      lValid         := .T.

   else

      msgStop( "Agente no encontrado", "Código " + xValor )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( dbfAge )->( dbCloseArea() )
   else
      ( dbfAge )->( dbGoTo( nRec ) )
   end

RETURN lValid



FUNCTION cNbrAgent( cCodAge, dbfAge )

   local nRec
   local nOrd
   local oBlock
   local oError
   local xValRet  := ""
   local lClose   := .F.

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfAge )
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAge ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   do case
      case IsChar( dbfAge )

         nRec     := ( dbfAge )->( RecNo() )
         nOrd     := ( dbfAge )->( OrdSetFocus( "cCodAge" ) )

         if ( dbfAge )->( dbSeek( cCodAge ) )
            xValRet  := cNombreAgente( dbfAge )
         end

         nRec     := ( dbfAge )->( dbGoTo( nRec ) )
         nOrd     := ( dbfAge )->( OrdSetFocus( nOrd ) )

      case IsObject( dbfAge )

         dbfAge:GetStatus()

         if dbfAge:Seek( cCodAge )
            xValRet  := cNombreAgente( dbfAge )
         end

         dbfAge:SetStatus()

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( dbfAge )->( dbCloseArea() )
   end

Return xValRet



FUNCTION cNombreAgente( uAge )

   local xValRet     := ""

   do case
      case IsChar( uAge )

         xValRet     := if( !Empty( ( uAge )->cApeAge ), Rtrim( ( uAge )->cApeAge ) + ", ", "" ) + ( uAge )->cNbrAge

      case IsObject( uAge )

         xValRet     := if( !Empty( uAge:cApeAge ), Rtrim( uAge:cApeAge ) + ", ", "" ) + uAge:cNbrAge

      case IsArray( uAge )

         xValRet     := if( !Empty( uAge[ 2 ] ), Rtrim( uAge[ 3 ] ) + ", ", "" ) + uAge[ 3 ]

   end

Return ( Alltrim( xValRet ) )



FUNCTION nComisionAgenteTarifa( cCodigoAgente, nTarifaPrecio, nView )

   local nComisionAgente   := 0

   if empty( cCodigoAgente )
      Return ( nComisionAgente )
   end

   D():getStatus( "Agentes", nView )

   if dbSeekInOrd( cCodigoAgente, "cCodAge", D():Agentes( nView ) )
      nComisionAgente      := ( D():Agentes( nView ) )->( fieldGet( fieldpos( "nComTar" + str( nTarifaPrecio, 1 ) ) ) )
   else
      msgStop( "Agente no encontrado", "Código " + cCodigoAgente )
   end

   D():setStatus( "Agentes", nView )

RETURN ( nComisionAgente )






FUNCTION EdtAge( cCodAge )

   local nLevel         := Auth():Level( "01033" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if OpenFiles()

      if dbSeekInOrd( cCodAge, "cCodAge", dbfAge )
         WinEdtRec( nil, bEdit, dbfAge )
      end

      CloseFiles()

   end

RETURN .T.




Function lGetAgente( oGetAgente, dbfAgente )

   local oDlg
   local oBmpUsuario
   local oSayUsuario
   local oCodigoAgente
   local cCodigoAgente := Space( 3 )
   local oNombreAgente
   local cNombreAgente := ""

   if !lRecogerAgentes()
      Return .T.
   end

   oDlg = TDialog():New(,,,, "Introduzca agente", "GetUsuario",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmpUsuario := TBitmap():ReDefine( 500, "gc_businessman2_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )




      oSayUsuario := TSay():ReDefine( 510, {||      "Agentes"}, oDlg,,,, .F.,, .F., .F., )







      oCodigoAgente := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodigoAgente, cCodigoAgente:= u ) }, oDlg,,, {||    ( SetAgentes( oCodigoAgente, oNombreAgente, oDlg, dbfAgente ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwAgentes( oCodigoAgente ) )}, nil, "LUPA",, )





      oNombreAgente := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cNombreAgente, cNombreAgente:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 1, {||( if( oCodigoAgente:lValid(), oDlg:end( 1 ), ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart       := { || oCodigoAgente:SetFocus(), oCodigoAgente:SelectAll() }
      oDlg:bKeyDown     := { | nKey | if( nKey == 65 .AND. GetKeyState( 17 ), CreateInfoArticulo(), 0 ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBmpUsuario:End()

   if oDlg:nResult == 1

      oCodigoAgente:cText( cCodigoAgente )
      oCodigoAgente:lValid()

      if !Empty( oGetAgente )
         oGetAgente:cText( cCodigoAgente )
         oGetAgente:lValid()
      end

   end

Return ( oDlg:nResult == 1 )



Function SetAgentes( oCodigoAgente, oSay, oDlg, dbfAgente )

   local lSetAgente  := .T.
   local cCodAgente  := oCodigoAgente:VarGet()

   if dbSeekInOrd( cCodAgente, "cCodAge", dbfAgente )
      oSay:cText( Rtrim( cNombreAgente( dbfAgente ) ) )
      if !Empty( oDlg )
         oDlg:End( 1 )
      end
   else
      oCodigoAgente:cText( Space( 3 ) )
      lSetAgente     := .F.
   end

Return ( lSetAgente )



Static Function deleteRelations( cCodigoAgente, dbfRelation )

   while ( ( dbfRelation )->( dbSeek( cCodigoAgente ) ) .AND. !( dbfRelation )->( eof() ) )
      if dbLock( dbfRelation )
         ( dbfRelation )->( dbDelete() )
         ( dbfRelation )->( dbUnLock() )
      end
   end

Return ( nil )



Static Function buildRelation( dbfTemporal, dbfRelation, hHash )

   ( dbfTemporal )->( dbGoTop() )
   while ( dbfTemporal )->( !eof() )
      appendRegisterByHash( dbfTemporal, dbfRelation, hHash )
      ( dbfTemporal )->( dbSkip() )
      oMsgProgress():Deltapos( 1 )
   end

Return ( nil )



FUNCTION nPrecioAgenteArticuloTarifa( cCodigoAgente, cCodigoArticulo, nTarifaPrecio, nView )

   local cNombreCampo
   local nPrecioAgenteArticuloTarifa   := 0

   if empty( cCodigoAgente )
      Return ( nPrecioAgenteArticuloTarifa )
   end

   if nTarifaPrecio == 1
      cNombreCampo   := "nPrcArt"
   else
      cNombreCampo   := "nPrcArt" + str( nTarifaPrecio, 1 )
   end

   if D():gotoIdAtipicasAgentes( cCodigoAgente, cCodigoArticulo, nView )
      nPrecioAgenteArticuloTarifa      := ( D():Atipicas( nView ) )->( fieldGet( fieldpos( cNombreCampo ) ) )
   end

RETURN ( nPrecioAgenteArticuloTarifa )



Function setOldPorcentajeAgente( nPctComision )

   nOldPctComision   := nPctComision

RETURN ( nil )



FUNCTION LoadAgente( oGetCodigoAgente, dbfAge, oGetNombreAgente, oGetPorcentajeAgente, dbfAgeCom, dbfTmpLin, oBrw )

   if cAgentes( oGetCodigoAgente, dbfAge, oGetNombreAgente, oGetPorcentajeAgente )

      validateAgentPercentage( oGetPorcentajeAgente, dbfTmpLin, oBrw )

   end

RETURN ( nil )



FUNCTION validateAgentPercentage( oGetPorcentajeAgente, dbfTmpLin, oBrw )

   local nNewPctComision   := oGetPorcentajeAgente:varGet()

   if ( nNewPctComision <> nOldPctComision )




      if ( dbfTmpLin )->( ordkeycount() ) > 0 .AND.  apoloMsgNoYes( "La comisión del agente seleccionado es distinta a la anterior," + Chr(13)+Chr(10) +  "¿desea extender el cambio de comisión a todas las líneas?", "¿Relizar el cambio?" )

         changeAgentPercentageInAllLines( nNewPctComision, dbfTmpLin, oBrw )

      end

   end

   setOldPorcentajeAgente( nNewPctComision )

RETURN ( nil )



Function SynAgente()

   local oError
   local oBlock
   local dbfAgente

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAgente ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end


      ( dbfAgente )->( dbGoTop() )

      while !( dbfAgente )->( Eof() )

         if Empty( ( dbfAgente )->Uuid )
            if dbLock( dbfAgente )
               ( dbfAgente )->Uuid := win_uuidcreatestring()
               ( dbfAgente )->( dbUnLock() )
            end
         end

         ( dbfAgente )->( dbSkip() )

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de agentes" )

   end

   ErrorBlock( oBlock )

   ( dbfAgente )->( dbCloseArea() )

Return ( nil )
