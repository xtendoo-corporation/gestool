#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\AgentesController.prg"
_HB_CLASS AgentesController ; function AgentesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AgentesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @AgentesController() ) ) ;

   _HB_MEMBER { oDireccionesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDireccionesController"}, .F. )

   _HB_MEMBER { oPaisesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPaisesController"}, .F. )

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @AgentesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @AgentesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AgentesController ;



static FUNCTION AgentesController_New( oSenderController ) ; local Self AS CLASS AgentesController := QSelf() AS CLASS AgentesController

   ::Super:New( oSenderController )

   ::cTitle                      := "Agentes"

   ::cName                       := "agentes"



   ::hImage                      := {  "16" => "gc_businessman2_16", "32" => "gc_businessman2_32", "48" => "gc_businessman2_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLAgentesModel():New( self )

   ::oBrowseView                    := AgentesBrowseView():New( self )

   ::oDialogView                    := AgentesView():New( self )

   ::oValidator                     := AgentesValidator():New( self, ::oDialogView )

   ::oDireccionesController         := DireccionesController():New( self )

   ::oRepository                    := AgentesRepository():New( self )

   ::oPaisesController              := PaisesController():New( self )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, "agentes")

   ::oGetSelector                   := GetSelector():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

   ::oModel:setEvent( "loadedBlankBuffer",            {|| ::oDireccionesController:loadPrincipalBlankBuffer() } )
   ::oModel:setEvent( "insertedBuffer",               {|| ::oDireccionesController:insertBuffer() } )

   ::oModel:setEvent( "loadedCurrentBuffer",          {|| ::oDireccionesController:loadedCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "updatedBuffer",                {|| ::oDireccionesController:updateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "loadedDuplicateCurrentBuffer", {|| ::oDireccionesController:loadedDuplicateCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "loadedDuplicateBuffer",        {|| ::oDireccionesController:loadedDuplicateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "deletedSelection",             {|| ::oDireccionesController:deleteBuffer( ::getUuidFromRecno( ::oBrowseView:getBrowse():aSelected ) ) } )

RETURN ( Self )


static FUNCTION AgentesController_End( ) ; local Self AS CLASS AgentesController := QSelf() AS CLASS AgentesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oDireccionesController:End()

   ::oRepository:End()

   ::oPaisesController:End()

   ::Super:End()

RETURN ( Self )







_HB_CLASS AgentesBrowseView ; function AgentesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AgentesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @AgentesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @AgentesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AgentesBrowseView ;



static FUNCTION AgentesBrowseView_addColumns( ) ; local Self AS CLASS AgentesBrowseView := QSelf() AS CLASS AgentesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "dni"
      :cHeader             := "DNI/CIF"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "dni" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "comision"
      :cHeader             := "Comisión %"
      :nWidth              := 60
      :nHeadStrAlign       := 1
      :nDataStrAlign       := 1
      :bEditValue          := {|| transform( ::getRowSet():fieldGet( "comision" ), "@E 999.99" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "telefono"
      :cHeader             := "Teléfono"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "telefono" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "movil"
      :cHeader             := "Móvil"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "movil" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "email"
      :cHeader             := "Email"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "email" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS AgentesView ; function AgentesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AgentesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @AgentesView() ) ) ;

   _HB_MEMBER { oGetProvincia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetProvincia"}, .F. )
   _HB_MEMBER { oGetPoblacion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetPoblacion"}, .F. )
   _HB_MEMBER { oGetPais } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetPais"}, .F. )
   _HB_MEMBER { oGetDni } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetDni"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @AgentesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER StartActivate(); oClass:AddMethod( "StartActivate", @AgentesView_StartActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activating(); oClass:AddMethod( "Activating", @AgentesView_Activating(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDireccionesController(); oClass:AddInline( "getDireccionesController", {|Self | ( ( Self ) ), ( ::oController:oDireccionesController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AgentesView ;



static FUNCTION AgentesView_Activating( ) ; local Self AS CLASS AgentesView := QSelf() AS CLASS AgentesView

   if ::oController:isAppendOrDuplicateMode()
      ::oController:oModel:hBuffer()
   end

RETURN ( self )







static FUNCTION AgentesView_Activate( ) ; local Self AS CLASS AgentesView := QSelf() AS CLASS AgentesView

   local oGetDni



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "agente", "AGENTE",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   ::oGetDni := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "dni" ], ::oController:oModel:hBuffer[ "dni" ]:= u ) }, ::oDialog,,, {||       ( CheckCif( ::oGetDni ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "comision" ], ::oController:oModel:hBuffer[ "comision" ]:= u ) }, ::oDialog,, "@E 999.99",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )

   ::oController:oDireccionesController:oDialogView:ExternalRedefine( ::oDialog )

   ::redefineExplorerBar( 200 )





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::StartActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )



static FUNCTION AgentesView_StartActivate( ) ; local Self AS CLASS AgentesView := QSelf() AS CLASS AgentesView

   local oPanel                  := ::oExplorerBar:AddPanel( "Datos relacionados", nil, 1 )

   oPanel:AddLink( "Campos extra...", {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }, "gc_form_plus2_16" )

   ::oController:oDireccionesController:oDialogView:StartDialog()

RETURN ( self )







_HB_CLASS AgentesValidator ; function AgentesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AgentesValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @AgentesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @AgentesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AgentesValidator ;



static FUNCTION AgentesValidator_getValidators( ) ; local Self AS CLASS AgentesValidator := QSelf() AS CLASS AgentesValidator




   ::hValidators  := {  "nombre" =>                {  "required"           => "El nombre es un dato requerido", "unique"             => "El nombre introducido ya existe" }, "codigo" =>                {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe"  } }
RETURN ( ::hValidators )










_HB_CLASS SQLAgentesModel ; function SQLAgentesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLAgentesModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLAgentesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "agentes", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLAgentesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLAgentesModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLAgentesModel ;



static FUNCTION SQLAgentesModel_getInitialSelect( ) ; local Self AS CLASS SQLAgentesModel := QSelf() AS CLASS SQLAgentesModel











   local cSelect  := "SELECT agentes.id,"                                                               + " " +  "agentes.uuid,"                                                                 + " " +  "agentes.codigo,"                                                               + " " +  "agentes.nombre,"                                                               + " " +  "agentes.dni,"                                                                  + " " +  "agentes.comision,"                                                             + " " +  "direcciones.telefono as telefono,"                                             + " " +  "direcciones.movil as movil,"                                                   + " " +  "direcciones.email as email"                                                    + " " +  "FROM  agentes"                                                                    + " " +  "INNER JOIN direcciones ON agentes.uuid = direcciones.parent_uuid"              + " "

RETURN ( cSelect )



static FUNCTION SQLAgentesModel_getColumns( ) ; local Self AS CLASS SQLAgentesModel := QSelf() AS CLASS SQLAgentesModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )

   ::getEmpresaColumns()


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR(20) NOT NULL UNIQUE"             , "default"   => {|| space( 20 )}})


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 140 )"                         , "default"   => {|| space( 140 ) } }                      )


   hset( ::hColumns, "dni",               {  "create"    => "VARCHAR( 20 )"                          , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "comision",          {  "create"    => "FLOAT( 5,2 )"                            , "default"   => {|| 0 } }                                 )

RETURN ( ::hColumns )











_HB_CLASS AgentesRepository ; function AgentesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AgentesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @AgentesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLAgentesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombres(); oClass:AddMethod( "getNombres", @AgentesRepository_getNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, Uuid | ( ( Self ) ), ( ::getColumnWhereUuid( Uuid, "nombre" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidWhereNombre(); oClass:AddInline( "getUuidWhereNombre", {|Self, cNombre | ( ( Self ) ), ( ::getUuidWhereColumn( cNombre, "nombre", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AgentesRepository ;



static FUNCTION AgentesRepository_getNombres( ) ; local Self AS CLASS AgentesRepository := QSelf() AS CLASS AgentesRepository

   local aNombres    := ::getDatabase():selectFetchHash( "SELECT nombre FROM " + ::getTableName() )
   local aResult     := {}

   if !empty( aNombres )
      aeval( aNombres, {| h | aadd( aResult, alltrim( hGet( h, "nombre" ) ) ) } )
   end

RETURN ( aResult )
