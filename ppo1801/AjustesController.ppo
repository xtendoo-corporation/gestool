#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\AjustesController.prg"
_HB_CLASS AjustesController ; function AjustesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AjustesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @AjustesController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @AjustesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @AjustesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AjustesController ;



static FUNCTION AjustesController_New( ) ; local Self AS CLASS AjustesController := QSelf() AS CLASS AjustesController

   ::Super:New()

   ::cTitle                := "Ajustes"

   ::setName( "ajustes" )

   ::lTransactional        := .T.

   ::hImage                := { "16" => "gc_businesspeople_16" }

   ::oModel                := SQLAjustesModel():New( self )

   ::oRepository           := AjustesRepository():New( self )

RETURN ( Self )



static FUNCTION AjustesController_End( ) ; local Self AS CLASS AjustesController := QSelf() AS CLASS AjustesController

   if !empty(::oModel)
      ::oModel:End()
   endif

   ::Super:End()

RETURN ( nil )







_HB_CLASS SQLAjustesModel ; function SQLAjustesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLAjustesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLAjustesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "ajustes", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY (id), KEY (ajuste)", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLAjustesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInsertAjustesSentence(); oClass:AddMethod( "getInsertAjustesSentence", @SQLAjustesModel_getInsertAjustesSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAjusteUuidSentence( cAjuste); oClass:AddMethod( "getAjusteUuidSentence", @SQLAjustesModel_getAjusteUuidSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAjusteUuid( cAjuste); oClass:AddMethod( "getAjusteUuid", @SQLAjustesModel_getAjusteUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLAjustesModel ;



static FUNCTION SQLAjustesModel_getColumns( ) ; local Self AS CLASS SQLAjustesModel := QSelf() AS CLASS SQLAjustesModel


   hset( ::hColumns, "id",             {  "create"    => "INTEGER AUTO_INCREMENT"                  , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",           {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "ajuste",         {  "create"    => "VARCHAR ( 100 ) NOT NULL UNIQUE"         , "default"   => {|| space( 100 ) } }                      )


   hset( ::hColumns, "sistema",        {  "create"    => "TINYINT ( 1 )"                          , "default"   => {|| "1" } }                    )


   hset( ::hColumns, "tipo_dato",      {  "create"    => "VARCHAR ( 12 )"                          , "default"   => {|| "alphanumeric" } }                    )


   hset( ::hColumns, "valor_minimo",   {  "create"    => "INT"                                     , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "valor_maximo",   {  "create"    => "INT"                                     , "default"   => {|| 0 } }                                 )

RETURN ( ::hColumns )



static FUNCTION SQLAjustesModel_getInsertAjustesSentence( ) ; local Self AS CLASS SQLAjustesModel := QSelf() AS CLASS SQLAjustesModel

   local cSentence

   cSentence  := "INSERT IGNORE INTO " + ::cTableName + " "
   cSentence  +=    "( uuid, ajuste, sistema, tipo_dato, valor_minimo, valor_maximo ) "
   cSentence  += "VALUES "
   cSentence  +=    "( UUID(), 'empresa_exclusiva',         '1',  'alphanumeric', NULL, NULL ), "
   cSentence  +=    "( UUID(), 'caja_exclusiva',            '1',  'alphanumeric', NULL, NULL ), "
   cSentence  +=    "( UUID(), 'almacen_exclusivo',         '1',  'alphanumeric', NULL, NULL ), "
   cSentence  +=    "( UUID(), 'delegacion_exclusiva',      '1',  'alphanumeric', NULL, NULL ), "
   cSentence  +=    "( UUID(), 'pc_en_uso',                 '1',  'alphanumeric', NULL, NULL ), "
   cSentence  +=    "( UUID(), 'empresa_en_uso',            '1',  'alphanumeric', NULL, NULL ), "
   cSentence  +=    "( UUID(), 'mostrar_rentabilidad',      '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'cambiar_precios',           '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'ver_precios_costo',         '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'confirmacion_eliminacion',  '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'fitrar_ventas_por_usuario', '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'abrir_cajon_portamonedas',  '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'cobrar_en_tactil',          '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'seleccionar_usuarios',      '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'albaran_entregado',         '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'asistente_generar_facturas','1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'cambiar_estado',            '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'cambiar_campos',            '1',  'boolean',      NULL, NULL ), "
   cSentence  +=    "( UUID(), 'delegacion_defecto',        '1',  'alphanumeric', NULL, NULL )"

RETURN ( cSentence )



static FUNCTION SQLAjustesModel_getAjusteUuidSentence( cAjuste ) ; local Self AS CLASS SQLAjustesModel := QSelf() AS CLASS SQLAjustesModel

   local cSentence

   cSentence  := "SELECT uuid FROM " + ::cTableName + " "
   cSentence  +=    "WHERE ajuste = " + quoted( cAjuste )

RETURN ( cSentence )



static FUNCTION SQLAjustesModel_getAjusteUuid( cAjuste ) ; local Self AS CLASS SQLAjustesModel := QSelf() AS CLASS SQLAjustesModel

RETURN ( ::getDatabase():getValue( ::getAjusteUuidSentence( cAjuste ) ) )








_HB_CLASS AjustesRepository ; function AjustesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AjustesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @AjustesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLAjustesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AjustesRepository ;