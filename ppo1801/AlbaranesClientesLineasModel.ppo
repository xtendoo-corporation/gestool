#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\AlbaranesClientesLineasModel.prg"
_HB_CLASS AlbaranesClientesLineasModel ; function AlbaranesClientesLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlbaranesClientesLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @AlbaranesClientesLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "AlbCliL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExtraWhere(); oClass:AddInline( "getExtraWhere", {|Self | ( ( Self ) ), ( "AND nCtlStk < 2 AND NOT lFacturado" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaFieldName(); oClass:AddInline( "getFechaFieldName", {|Self | ( ( Self ) ), ( "dFecAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHoraFieldName(); oClass:AddInline( "getHoraFieldName", {|Self | ( ( Self ) ), ( "tFecAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerieFieldName(); oClass:AddInline( "getSerieFieldName", {|Self | ( ( Self ) ), ( "cSerAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroFieldName(); oClass:AddInline( "getNumeroFieldName", {|Self | ( ( Self ) ), ( "nNumAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijoFieldName(); oClass:AddInline( "getSufijoFieldName", {|Self | ( ( Self ) ), ( "cSufAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTipoDocumento(); oClass:AddInline( "getTipoDocumento", {|Self | ( ( Self ) ), ( "10" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lineasUnidadesEntregadas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote); oClass:AddMethod( "lineasUnidadesEntregadas", @AlbaranesClientesLineasModel_lineasUnidadesEntregadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nUnidadesEntregadas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote); oClass:AddMethod( "nUnidadesEntregadas", @AlbaranesClientesLineasModel_nUnidadesEntregadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLinesFromDocument( cSerie, nNumero, cSufijo, lPrepare); oClass:AddMethod( "getLinesFromDocument", @AlbaranesClientesLineasModel_getLinesFromDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInfoPdtEntregar( cCodigoArticulo, cCodigoAlmacen, dFechaHasta); oClass:AddMethod( "getInfoPdtEntregar", @AlbaranesClientesLineasModel_getInfoPdtEntregar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER UpdateFacturado( cNumAlb, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote); oClass:AddMethod( "UpdateFacturado", @AlbaranesClientesLineasModel_UpdateFacturado(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER UpdateAllFacturado( cNumAlb, lFacturado); oClass:AddMethod( "UpdateAllFacturado", @AlbaranesClientesLineasModel_UpdateAllFacturado(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLines( cNumAlb); oClass:AddMethod( "getLines", @AlbaranesClientesLineasModel_getLines(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aLines(); oClass:AddInline( "aLines", {|Self, cNumAlb | ( ( Self ) ), ( DBHScatter( ::getLines( cNumAlb ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUndVendidasFromDocument( cCodArt, idDoc); oClass:AddMethod( "getUndVendidasFromDocument", @AlbaranesClientesLineasModel_getUndVendidasFromDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlbaranesClientesLineasModel ;



static FUNCTION AlbaranesClientesLineasModel_lineasUnidadesEntregadas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

    local cStm           := "lineasUnidadesEntregadasAlbCli"
    local cSql           := ""

      If( cCodPr1 == nil, cCodPr1 := "", ) ;
      If( cCodPr2 == nil, cCodPr2 := "", ) ;
      If( cValPr1 == nil, cValPr1 := "", ) ;
      If( cValPr2 == nil, cValPr2 := "", ) ;
      If( cLote == nil, cLote := "", ) ;

    cSql                += "SELECT * "
      cSql                += "FROM " + ::getTableName() + Space( 1 )
    cSql                += "WHERE cNumPed = " + quoted( cNumPed ) + " AND "
    cSql                += "cRef = " + quoted( cCodArt ) + " AND "
     cSql              += "cCodPr1 = " + quoted( cCodPr1 ) + " AND "
      cSql              += "cCodPr2 = " + quoted( cCodPr2 ) + " AND "
      cSql                += "cValPr1 = " + quoted( cValPr1 ) + " AND "
    cSql                += "cValPr2 = " + quoted( cValPr2 )


     if ::ExecuteSqlStatement( cSql, @cStm )
      Return ( cStm )
       end

Return nil



static FUNCTION AlbaranesClientesLineasModel_nUnidadesEntregadas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

    local cStm
    local cSql             := ""
    local nUnidades     := 0

    If( cCodPr1 == nil, cCodPr1 := "", ) ;
    If( cCodPr2 == nil, cCodPr2 := "", ) ;
    If( cValPr1 == nil, cValPr1 := "", ) ;
    If( cValPr2 == nil, cValPr2 := "", ) ;
    If( cLote == nil, cLote := "", ) ;

    cSql    += "SELECT * "
    cSql    += "FROM " + ::getTableName() + Space( 1 )
    cSql    += "WHERE not lFacturado AND cNumPed = " + quoted( cNumPed ) + " AND "
    cSql    += "cRef = " + quoted( cCodArt ) + " AND "
    cSql    += "cCodPr1 = " + quoted( cCodPr1 ) + " AND "
    cSql    += "cValPr1 = " + quoted( cValPr1 ) + " AND "
    cSql    += "cCodPr2 = " + quoted( cCodPr2 ) + " AND "
     cSql    += "cValPr2 = " + quoted( cValPr2 )


     if ::ExecuteSqlStatement( cSql, @cStm )

         if ( cStm )->( OrdKeyCount() ) <> 0

            ( cStm )->( dbGotop() )

            while !( cStm )->( eof() )

                nUnidades     += nTotNAlbCli( cStm )

                ( cStm )->( dbSkip() )

            end

        end

       end

Return ( nUnidades )



static FUNCTION AlbaranesClientesLineasModel_getLinesFromDocument( cSerie, nNumero, cSufijo, lPrepare ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

  local aLines      := {}
  local cStm        := "PrepareLineasAlbCli"
  local cSql        := ""

  If( lPrepare == nil, lPrepare := .F., ) ;

  cSql              += "SELECT * "
  cSql              += "FROM " + ::getTableName() + Space( 1 )
  cSql              += "WHERE cSerAlb = " + quoted( cSerie ) + " AND "
  cSql              += "nNumAlb = " + Str( nNumero ) + " AND "
  cSql              += "cSufAlb = " + quoted( cSufijo ) + " AND "

  if lPrepare
    cSql            += "lPreparado"
  else
    cSql            += "NOT lPreparado"
  end

  if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )

        aAdd( aLines, DBScatter( cStm ) )

        ( cStm )->( dbSkip() )

      end

  end

Return ( aLines )



static FUNCTION AlbaranesClientesLineasModel_getInfoPdtEntregar( cCodigoArticulo, cCodigoAlmacen, dFechaHasta ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

    local cSql        := ""

    cSql              := "SELECT "
    cSql              += "0 as pdtrecibir, "

    do case
      case lCalCaj() .AND. lCalBul()
         cSql         += "( ( nBultos * nCanEnt * nUniCaja ) * -1 ) as pdtentrega, "

      case lCalCaj() .AND. !lCalBul()
         cSql         += "( ( nCanEnt * nUniCaja ) * -1 ) as pdtentrega, "

      case !lCalCaj() .AND. lCalBul()
         cSql         += "( ( nBultos * nUniCaja ) * -1 ) as pdtentrega, "

      case !lCalCaj() .AND. !lCalBul()
         cSql            += "( nUniCaja * - 1 ) as pdtentrega, "

    end

    cSql              += quoted( "10" ) + " AS Document, "
    cSql              += "dFecAlb AS Fecha, "
    cSql              += "tFecAlb AS Hora, "
    cSql              += "cSerAlb AS Serie, "
    cSql              += "CAST( nNumAlb AS SQL_INTEGER ) AS Numero, "
    cSql              += "cSufAlb AS Sufijo, "
    cSql              += "CAST( nNumLin AS SQL_INTEGER ) AS nNumLin, "
    cSql              += "cRef AS Articulo, "
    cSql              += "cAlmLin AS Almacen "
    cSql              += "FROM " + ::getTableName()
    cSql              += " WHERE NOT lFacturado AND NOT ( cNumPed = '' ) AND cRef = " + quoted( cCodigoArticulo ) + " "

    if !empty( cCodigoAlmacen )
      cSql            += "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
    end

    if hb_isdate( dFechaHasta )
      cSql            += "AND CAST( dFecAlb AS SQL_CHAR ) <= " + formatoFechaSql( dFechaHasta ) + " "
    end

RETURN ( cSql )



static FUNCTION AlbaranesClientesLineasModel_UpdateFacturado( cNumAlb, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote, lFacturado ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

  local cStm  := "UpdateFacturado"
  local cSql  := ""

  If( lFacturado == nil, lFacturado := .T., ) ;

  cSql        := "UPDATE " + ::getTableName()
  cSql        += " SET lFacturado = " + if( lFacturado, ".t.", ".f." )
  cSql        += " WHERE cSerAlb = " + quoted( SubStr( cNumAlb, 1, 1 ) )
  cSql        += " AND nNumAlb = " + SubStr( cNumAlb, 2, 9 )
  cSql        += " AND cSufAlb = " + quoted( SubStr( cNumAlb, 11, 2 ) )
  cSql        += " AND cRef = " + quoted( cCodArt )
  cSql        += " AND cCodPr1 = " + quoted( cCodPr1 )
  cSql        += " AND cCodPr2 = " + quoted( cCodPr2 )
  cSql        += " AND cValPr1 = " + quoted( cValPr1 )
  cSql        += " AND cValPr2 = " + quoted( cValPr2 )
  cSql        += " AND cLote = " + quoted( cLote )

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION AlbaranesClientesLineasModel_UpdateAllFacturado( cNumAlb, lFacturado ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

  local cStm  := "UpdateFacturado"
  local cSql  := ""

  If( lFacturado == nil, lFacturado := .T., ) ;

  cSql        := "UPDATE " + ::getTableName()
  cSql        += " SET lFacturado = " + if( lFacturado, ".t.", ".f." )
  cSql        += " WHERE cSerAlb = " + quoted( SubStr( cNumAlb, 1, 1 ) )
  cSql        += " AND nNumAlb = " + SubStr( cNumAlb, 2, 9 )
  cSql        += " AND cSufAlb = " + quoted( SubStr( cNumAlb, 11, 2 ) )

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION AlbaranesClientesLineasModel_getLines( cNumAlb ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

  local cStm  := "getLines"
  local cSql  := ""

  cSql        := "SELECT * FROM " + ::getTableName()
  cSql        += " WHERE cSerAlb = " + quoted( SubStr( cNumAlb, 1, 1 ) )
  cSql        += " AND nNumAlb = " + SubStr( cNumAlb, 2, 9 )
  cSql        += " AND cSufAlb = " + quoted( SubStr( cNumAlb, 11, 2 ) )

    if ::ExecuteSqlStatement( cSql, @cStm )
        Return ( cStm )
    end

RETURN ( nil )



static FUNCTION AlbaranesClientesLineasModel_getUndVendidasFromDocument( cCodArt, idDoc ) ; local Self AS CLASS AlbaranesClientesLineasModel := QSelf() AS CLASS AlbaranesClientesLineasModel

  local cStm        := "UnidadesVendidasLineasAlbCli"
  local cSql        := ""
  local nUnd        := 0

  cSql              += "SELECT nUniCaja "
  cSql              += "FROM " + ::getTableName() + Space( 1 )
  cSql              += "WHERE cRef = " + quoted( cCodArt ) + " AND "
  cSql              += "cidNumCom = " + quoted( idDoc )

  if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )

        nUnd        += ( cStm )->nUniCaja

        ( cStm )->( dbSkip() )

      end

  end

Return ( nUnd )
