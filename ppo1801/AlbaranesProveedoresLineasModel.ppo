#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\AlbaranesProveedoresLineasModel.prg"
_HB_CLASS AlbaranesProveedoresLineasModel ; function AlbaranesProveedoresLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlbaranesProveedoresLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @AlbaranesProveedoresLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "AlbProvL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExtraWhere(); oClass:AddInline( "getExtraWhere", {|Self | ( ( Self ) ), ( "AND nCtlStk < 2 AND NOT lFacturado " ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceFechaCaducidad(); oClass:AddMethod( "getSQLSentenceFechaCaducidad", @AlbaranesProveedoresLineasModel_getSQLSentenceFechaCaducidad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaFieldName(); oClass:AddInline( "getFechaFieldName", {|Self | ( ( Self ) ), ( "dFecAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHoraFieldName(); oClass:AddInline( "getHoraFieldName", {|Self | ( ( Self ) ), ( "tFecAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerieFieldName(); oClass:AddInline( "getSerieFieldName", {|Self | ( ( Self ) ), ( "cSerAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroFieldName(); oClass:AddInline( "getNumeroFieldName", {|Self | ( ( Self ) ), ( "nNumAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijoFieldName(); oClass:AddInline( "getSufijoFieldName", {|Self | ( ( Self ) ), ( "cSufAlb" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTipoDocumento(); oClass:AddInline( "getTipoDocumento", {|Self | ( ( Self ) ), ( "02" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPrimerCosto( cCodigoArticulo, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "getPrimerCosto", @AlbaranesProveedoresLineasModel_getPrimerCosto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "getFechaCaducidad", @AlbaranesProveedoresLineasModel_getFechaCaducidad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nUnidadesRecibidas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote); oClass:AddMethod( "nUnidadesRecibidas", @AlbaranesProveedoresLineasModel_nUnidadesRecibidas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCostoFecha( cCodigoArticulo, dFecha); oClass:AddMethod( "getCostoFecha", @AlbaranesProveedoresLineasModel_getCostoFecha(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUltimasCompras( cCodigoArticulo, cCodigoProveedor); oClass:AddMethod( "getUltimasCompras", @AlbaranesProveedoresLineasModel_getUltimasCompras(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInfoPdtRecibir( cCodigoArticulo, cCodigoAlmacen, dFechaHasta); oClass:AddMethod( "getInfoPdtRecibir", @AlbaranesProveedoresLineasModel_getInfoPdtRecibir(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nLastNumLin( cSerie, nNumero, cSufijo); oClass:AddMethod( "nLastNumLin", @AlbaranesProveedoresLineasModel_nLastNumLin(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getComprasArticulo( cCodigoArticulo); oClass:AddMethod( "getComprasArticulo", @AlbaranesProveedoresLineasModel_getComprasArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlbaranesProveedoresLineasModel ;



static FUNCTION AlbaranesProveedoresLineasModel_nLastNumLin( cSerie, nNumero, cSufijo ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

   local cStm        := "nLastNumLin"





   local cSql        := "SELECT TOP 1 nNumLin "                           +  "FROM " + ::getTableName()                        +  " WHERE cSerAlb = " + quoted( cSerie )            +  " AND nNumAlb = " + AllTrim( Str( nNumero ) )  +  " AND cSufAlb = " + quoted( cSufijo )          +  " ORDER BY nNumLin DESC"

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->nNumLin + 1 )
   end

RETURN ( 0 )



static FUNCTION AlbaranesProveedoresLineasModel_nUnidadesRecibidas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

   local cStm        := "unidadesrecibidasalbprov"
   local cSql        := ""
   local nUnidades   := 0

   If( cCodPr1 == nil, cCodPr1 := "", ) ;
   If( cCodPr2 == nil, cCodPr2 := "", ) ;
   If( cValPr1 == nil, cValPr1 := "", ) ;
   If( cValPr2 == nil, cValPr2 := "", ) ;
   If( cLote == nil, cLote := "", ) ;

   cSql              += "SELECT * "
   cSql              += "FROM " + ::getTableName() + Space( 1 )
   cSql              += "WHERE cCodPed = " + quoted( cNumPed ) + " AND "
   cSql              += "cRef = " + quoted( cCodArt ) + " AND "
   cSql              += "cCodPr1 = " + quoted( cCodPr1 ) + " AND "
   cSql              += "cValPr1 = " + quoted( cValPr1 ) + " AND "
   cSql              += "cCodPr2 = " + quoted( cCodPr2 ) + " AND "
   cSql              += "cValPr2 = " + quoted( cValPr2 )


   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( OrdKeyCount() ) <> 0

         ( cStm )->( dbGotop() )

         while !( cStm )->( eof() )

            nUnidades   += nTotNAlbPrv( cStm )

            ( cStm )->( dbSkip() )

         end

      end

   end

Return ( nUnidades )



static FUNCTION AlbaranesProveedoresLineasModel_getSQLSentenceFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel












   local cSql  := "SELECT "                                          +  "cRef as cCodigoArticulo, "                     +  "cCodPr1 as cCodigoPrimeraPropiedad, "          +  "cCodPr2 as cCodigoSegundaPropiedad, "          +  "cValPr1 as cValorPrimeraPropiedad, "           +  "cValPr2 as cValorSegundaPropiedad, "           +  "cLote as cLote, "                              +  "dFecAlb as dFecDoc, "                          +  "dFecCad as dFecCad "                           +  "FROM " + ::getTableName() + " "                   +  "WHERE cRef = " + quoted( cCodigoArticulo ) + " "  +  "AND dFecCad IS NOT NULL "

   cSql        += ::getExtraWhere()
   cSql        += "AND cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " "
   cSql        += "AND cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " "
   cSql        += "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
   cSql        += "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
   cSql        += "AND cLote = " + quoted( cLote ) + " "

RETURN ( cSql )



static FUNCTION AlbaranesProveedoresLineasModel_getPrimerCosto( cCodigoArticulo, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

   local nVal  := 0
   local cStm



   local cSql  := "SELECT TOP 1 "                                                +  "nPreDiv "                                                  +  "FROM " + ::getTableName() + " "                               +  "WHERE cRef = " + quoted( cCodigoArticulo ) + " "

   if !empty(cValorPrimeraPropiedad)
      cSql     +=    "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
   end

   if !empty(cValorSegundaPropiedad)
      cSql     +=    "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
   end

   if !empty(cLote)
      cSql     +=    "AND cLote = " + quoted( cLote ) + " "
   end

   cSql        +=    "ORDER BY dFecAlb,tFecAlb"

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )
      nVal     := ( ( cStm )->nPreDiv )
   end

RETURN ( nVal )



static FUNCTION AlbaranesProveedoresLineasModel_getFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

   local nVal  := cTod( "" )
   local cStm



   local cSql  := "SELECT TOP 1 "                                                +  "dFecCad "                                                  +  "FROM " + ::getTableName() + " "                               +  "WHERE NOT lFacturado AND lLote AND cRef = " + quoted( cCodigoArticulo ) + " "
      cSql     +=    "AND cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " "
      cSql     +=    "AND cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " "
      cSql     +=    "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
      cSql     +=    "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
      cSql     +=    "AND cLote = " + quoted( cLote ) + " "
      cSql     +=    "ORDER BY dFecAlb DESC"

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )
      nVal     := ( ( cStm )->dFecCad )
   end

RETURN ( nVal )



static FUNCTION AlbaranesProveedoresLineasModel_getCostoFecha( cCodigoArticulo, dFecha ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

   local hCosto   := {=>}
   local cStm




   local cSql     := "SELECT TOP 1 "                                             +  "lineas.nPreDiv, cabecera.dFecAlb "                     +  "FROM " + ::getTableName() + " AS lineas "                  +  "INNER JOIN " + ::getEmpresaTableName( "AlbProvT" ) + " AS cabecera ON cabecera.cSerAlb = lineas.cSerAlb AND cabecera.nNumAlb = lineas.nNumAlb AND cabecera.cSufAlb = lineas.cSufAlb " +  "WHERE NOT cabecera.lFacturado AND cRef = " + quoted( cCodigoArticulo ) + " "
      cSql        +=    "AND cabecera.dFecAlb <= " + quoted( Dtoc( dFecha ) ) + " "
      cSql        +=    "ORDER BY cabecera.dFecAlb DESC"

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( ordkeycount() ) > 0
         hSet( hCosto, "Costo", ( cStm )->nPreDiv )
         hSet( hCosto, "Fecha", ( cStm )->dFecAlb )
      else
         hSet( hCosto, "Costo", 0 )
         hSet( hCosto, "Fecha", cTod( "" ) )
      end

   end

RETURN ( hCosto )



static FUNCTION AlbaranesProveedoresLineasModel_getUltimasCompras( cCodigoArticulo, cCodigoProveedor ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

   local aValores    := {}
   local cStm        := "UltComAlbProv"










   local cSql        := "SELECT "                                                   +  "cabecera.cSerAlb AS serie, "                            +  "cabecera.nNumAlb AS numero, "                           +  "cabecera.cSufAlb AS sufijo, "                           +  "cabecera.dFecAlb AS fecha, "                            +  "lineas.nPreDiv AS precio "                              +  "FROM " + ::getTableName() + " AS lineas "                  +  "INNER JOIN " + ::getEmpresaTableName( "AlbProvT" ) + " AS cabecera ON cabecera.cSerAlb = lineas.cSerAlb AND cabecera.nNumAlb = lineas.nNumAlb AND cabecera.cSufAlb = lineas.cSufAlb " +  "WHERE lineas.cRef = " + quoted( cCodigoArticulo ) + " "    +  "AND NOT lineas.lFacturado "                             +  "AND cabecera.cCodPrv = " + quoted( cCodigoProveedor )

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )





         aAdd( aValores, { "tipo" => "Albarán proveedor", "numero" => ( cStm )->serie + "/" + AllTrim( Str( ( cStm )->numero ) ), "fecha" => ( cStm )->fecha, "precio" => ( cStm )->precio } )


         ( cStm )->( dbSkip() )

      end

   end

RETURN ( aValores )



static FUNCTION AlbaranesProveedoresLineasModel_getComprasArticulo( cCodigoArticulo ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

   local aValores    := {}
   local cStm        := "getComprasArticuloAlb"











   local cSql        := "SELECT "                                                   +  "cabecera.cSerAlb AS serie, "                            +  "cabecera.nNumAlb AS numero, "                           +  "cabecera.cSufAlb AS sufijo, "                           +  "cabecera.dFecAlb AS fecha, "                            +  "cabecera.cCodPrv AS proveedor, "                        +  "lineas.nPreDiv AS precio, "                             +  "lineas.nUnicaja AS unidades "                           +  "FROM " + ::getTableName() + " AS lineas "                  +  "INNER JOIN " + ::getEmpresaTableName( "AlbProvT" ) + " AS cabecera ON cabecera.cSerAlb = lineas.cSerAlb AND cabecera.nNumAlb = lineas.nNumAlb AND cabecera.cSufAlb = lineas.cSufAlb " +  "WHERE lineas.cRef = " + quoted( cCodigoArticulo ) + " "    +  "AND NOT lineas.lFacturado "

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )









         aAdd( aValores, { "tipo" => "Albarán proveedor", "id" => ( cStm )->serie + Str( ( cStm )->numero ) + ( cStm )->sufijo , "idDoc" => "02" + ( cStm )->serie + Str( ( cStm )->numero ) + ( cStm )->sufijo , "proveedor" => ( cStm )->proveedor , "numero" => ( cStm )->serie + "/" + AllTrim( Str( ( cStm )->numero ) ), "fecha" => ( cStm )->fecha, "unidades" => ( cStm )->unidades, "precio" => ( cStm )->precio, "und_vendidas" => 0 } )

         ( cStm )->( dbSkip() )

      end

   end

RETURN ( aValores )



static FUNCTION AlbaranesProveedoresLineasModel_getInfoPdtRecibir( cCodigoArticulo, cCodigoAlmacen, dFechaHasta ) ; local Self AS CLASS AlbaranesProveedoresLineasModel := QSelf() AS CLASS AlbaranesProveedoresLineasModel

    local cSql        := ""

    cSql              := "SELECT "

    do case
      case lCalCaj() .AND. lCalBul()
         cSql         += "( ( nBultos * nCanPed * nUniCaja ) * -1 ) as pdtrecibir, "

      case lCalCaj() .AND. !lCalBul()
         cSql         += "( ( nCanPed * nUniCaja ) * -1 ) as pdtrecibir, "

      case !lCalCaj() .AND. lCalBul()
         cSql         += "( ( nBultos * nUniCaja ) * -1 ) as pdtrecibir, "

      case !lCalCaj() .AND. !lCalBul()
         cSql            += "( nUniCaja * - 1 ) as pdtrecibir, "

    end

    cSql              += "0 as pdtentrega, "
    cSql              += quoted( "02" ) + " AS Document, "
    cSql              += "dFecAlb AS Fecha, "
    cSql              += "tFecAlb AS Hora, "
    cSql              += "cSerAlb AS Serie, "
    cSql              += "CAST( nNumAlb AS SQL_INTEGER ) AS Numero, "
    cSql              += "cSufAlb AS Sufijo, "
    cSql              += "CAST( nNumLin AS SQL_INTEGER ) AS nNumLin, "
    cSql              += "cRef AS Articulo, "
    cSql              += "cAlmLin AS Almacen "
    cSql              += "FROM " + ::getTableName()
    cSql              += " WHERE cCodPed is not null AND cRef = " + quoted( cCodigoArticulo ) + " "

    if !empty( cCodigoAlmacen )
      cSql            += "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
    end

    if hb_isdate( dFechaHasta )
      cSql            += "AND CAST( dFecAlb AS SQL_CHAR ) <= " + formatoFechaSql( dFechaHasta ) + " "
    end

RETURN ( cSql )
