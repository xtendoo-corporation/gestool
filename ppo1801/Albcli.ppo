#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 258 ".\.\Prg\Albcli.prg"
memvar cDbf
memvar cDbfCol
memvar cDbfPag
memvar cCliente
memvar cDbfCli
memvar cIva
memvar cDbfIva
memvar cDbfDiv
memvar cFPago
memvar cDbfPgo
memvar cAgent
memvar cDbfAge
memvar cTvta
memvar cObras
memvar cDbfObr
memvar cTarPreL
memvar cTarPreS
memvar cDbfRut
memvar cDbfTrn
memvar cDbfPro
memvar cDbfDlg
memvar cDbfTblPro
memvar cDbfAnt
memvar aTotIva
memvar cCtaCli
memvar nTotBrt
memvar nTotDto
memvar nTotDpp
memvar nTotUno
memvar nTotDos
memvar nTotNet
memvar nTotIva
memvar nTotIvm
memvar aTotIvm
memvar nTotReq
memvar nTotImp
memvar nTotAlb
memvar nTotPag
memvar nTotEur
memvar nTotPnt
memvar nTotPes
memvar nTotCos
memvar nTotAge
memvar nTotTrn
memvar nTotRnt
memvar nTotDif
memvar nTotAtp
memvar nPctRnt
memvar aIvaUno
memvar aIvaDos
memvar aIvaTre
memvar aIvmUno
memvar aIvmDos
memvar aIvmTre
memvar nVdvDivAlb
memvar cPicUndAlb
memvar cPouDivAlb
memvar cPorDivAlb
memvar cPpvDivAlb
memvar cPouEurAlb
memvar nDouDivAlb
memvar nRouDivAlb
memvar nTotArt
memvar nTotCaj
memvar cPorDivEnt
memvar cDbfEnt
memvar nTotPage
memvar oStk
memvar nTotalDto
memvar nTotalDtoLineal

memvar lEnd
memvar nRow
memvar oInf
memvar nPagina
memvar oReport





static oWndBrw
static oBrwIva
static nView
static dbfProSer
static dbfMatSer
static dbfAlbPrvL
static dbfAlbPrvS
static dbfTmpLin
static dbfTmpInc
static dbfTmpDoc
static dbfTmpEst
static dbfTmpSer
static dbfAlbCliE
static dbfDelega
static cTmpLin
static cTmpInc
static cTmpDoc
static cTmpPgo
static cTmpEst
static cTmpSer
static dbfRuta
static dbfCliBnc
static dbfAlm
static dbfAgent
static dbfTarPreL
static dbfTarPreS
static dbfPedCliT
static dbfPedCliL
static dbfPedCliR
static dbfPedCliP
static dbfPedCliI
static dbfPedCliD
static dbfPreCliT
static dbfPreCliL
static dbfPreCliI
static dbfPreCliD
static dbfAlbCliT
static dbfAlbCliL
static dbfAlbCliI
static dbfAlbCliD
static dbfAlbCliS
static dbfFacRecT
static dbfFacRecL
static dbfFacRecS
static dbfPedPrvL
static dbfTikT
static dbfTikL
static dbfTikS
static dbfCodebar
static dbfPromoT
static dbfPromoL
static dbfPromoC
static dbfTblPro
static dbfPro
static dbfCajT
static dbfFacPrvL
static dbfFacPrvS
static dbfRctPrvL
static dbfRctPrvS
static dbfProLin
static dbfProMat
static dbfEmp
static oMenu
static oDetMenu
static oStock
static TComercio
static oNewImp
static oUndMedicion
static oCentroCoste
static oBandera
static dbfKit
static dbfOferta
static dbfObrasT
static dbfCentroCoste
static dbfArtDiv
static dbfAgeCom
static oTrans
static oGetTotal
static oGetTarifa
static oGetIvm
static oGetRnt
static cGetRnt          := ""
static oGetMasDiv
static cGetMasDiv       := ""
static oGetNet
static oGetIva
static oGetReq
static oGetAge
static oComisionLinea
static nComisionLinea   := 0
static oGetTrn
static oGetPnt
static cPouDiv
static cPorDiv
static cPpvDiv
static cPouEur
static cPicUnd
static nVdvDiv
static nDouDiv
static nRouDiv
static nDorDiv
static nDpvDiv

static oTipArt
static oGrpFam
static oFraPub

static Counter

static oDetCamposExtra
static oLinDetCamposExtra

static oBtnKit
static oBtnAtp

static oBtnPre
static oBtnPed
static oBtnAgruparPedido
static oBtnPrecio

static oRieCli
static nRieCli

static oTlfCli
static cTlfCli

static aNumPed          := {}
static oGetAlb
static oGetEnt
static oGetPdt
static oGetPes
static oGetDif
static nTotOld
static nNumCaj          := 0
static cOldCodCli       := ""
static cOldCodArt       := ""
static cOldPrpArt       := ""
static cOldLotArt       := ""
static dOldFecCad       := cToD( "" )
static cOldUndMed       := ""
static lOpenFiles       := .F.
static lExternal        := .F.
static aTipAlb          := { "Venta", "Alquiler" }
static oTipAlb
static cFiltroUsuario   := ""
static oTotAlbLin
static oImpuestos
static lImpuestos       := .F.

static oBrwLin
static oBrwInc
static oBrwDoc

static aPedidos         := {}

static oTipoCtrCoste
static cTipoCtrCoste
static aTipoCtrCoste       := { "Centro de coste", "Proveedor", "Agente", "Cliente" }

static bEdtRec          := { | aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, hHash | EdtRec( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, hHash ) }
static bEdtDet          := { | aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlb | EdtDet( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlb ) }
static bEdtInc          := { | aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin | EdtInc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtDoc          := { | aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin | EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtEst          := { | aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlb | EdtEst( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlb ) }

static oMailing

static oBrwProperties

static oGetCelda
static cGetCelda



FUNCTION AlbCli( oMenuItem, oWnd, hHash )

   local oRpl
   local oSnd
   local oPrv
   local oImp
   local oDel
   local oPdf
   local oMail
   local oDup
   local oBtnEur
   local nLevel
   local oRotor
   local oScript
   local lEuro          := .F.

   If( oMenuItem == nil, oMenuItem := "albaranes_de_clientes", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return .F.
   end





   if oWnd <> nil
      oWnd:CloseAll()
   end

   if !OpenFiles()
      return .F.
   end

   DisableAcceso()


















   oWndBrw := TShell():New( 0, 0, 22, 80, "Albaranes de clientes",, oWnd,,, .F.,,, ( D():Get( "AlbCliT", nView ) ),,,,, {"Número", "Fecha", "Código", "Nombre", "Su albarán"}, {||( WinAppRec( oWndBrw:oBrw, bEdtRec, D():Get( "AlbCliT", nView ), hHash ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdtRec, D():Get( "AlbCliT", nView ), hHash ) )}, {||( WinDelRec( oWndBrw:oBrw, D():Get( "AlbCliT", nView ), {|| QuiAlbCli() } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdtRec, D():Get( "AlbCliT", nView ), hHash ) )}, nil, nLevel, "gc_document_empty_16", ( 190 + ( 57 * 256 ) + ( 0 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEdtRec, D():Get( "AlbCliT", nView ) ) )}, .T. )

      oWndBrw:lFechado     := .T.

      oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->lCloAlb }
         :nWidth           := 20
         :SetCheck( { "gc_lock2_12", "Nil16" } )
         :AddResource( "gc_lock2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Facturado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| { "No facturado", "Parcialmente", "Facturado" }[ max( 1, ( D():Get( "AlbCliT", nView ) )->nFacturado ) ] }
         :bBmpData         := {|| ( D():Get( "AlbCliT", nView ) )->nFacturado }
         :nWidth           := 20
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_trafficlight_on_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "gc_mail2_12", "Nil16" } )
         :AddResource( "gc_mail2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := getConfigTraslation( "Entregado" )
         :nHeadBmpNo       := 3
         :bStrData         := {|| if( ( D():Get( "AlbCliT", nView ) )->lEntregado, getConfigTraslation( "Entregado" ), "" ) }
         :bEditValue       := {|| if( ( D():Get( "AlbCliT", nView ) )->lEntregado, 1, 2 ) }
         :nWidth           := 20
         :nDataStrAlign    := 3
         :nHeadStrAlign    := 3
         :AddResource( "Sel16" )
         :AddResource( "Nil16" )
         :AddResource( "gc_hand_paper_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Incidencia"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| nEstadoIncidencia( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_document_information_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Impreso"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->lImprimido }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_printer2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| aTipAlb[ if( ( D():Get( "AlbCliT", nView ) )->lAlquiler, 2, 1 ) ] }
         :nWidth           := 50
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumAlb"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + Alltrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cSufAlb }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| Trans( ( D():Get( "AlbCliT", nView ) )->cTurAlb, "######" ) }
         :nWidth           := 40
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecAlb"
         :bEditValue       := {|| Dtoc( ( D():Get( "AlbCliT", nView ) )->dFecAlb ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Hora"
         :cSortOrder       := "tFecAlb"
         :bEditValue       := {|| Trans( ( D():Get( "AlbCliT", nView ) )->tFecAlb, "@R 99:99:99" ) }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCodCaj }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Usuario"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCodUsr }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( D():Get( "AlbCliT", nView ) )->cCodCli ) }
         :nWidth           := 70
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cNomCli }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Su albarán"
         :cSortOrder       := "cCodSuAlb"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCodSuAlb }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| alltrim( ( D():Get( "AlbCliT", nView ) )->cPosCli ) }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| alltrim( ( D():Get( "AlbCliT", nView ) )->cPobCli ) }
         :nWidth           := 180
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| alltrim( ( D():Get( "AlbCliT", nView ) )->cPrvCli ) }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Agente"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCodAge }
         :nWidth           := 50
      end

       with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre agente"
         :bEditValue       := {|| AgentesModel():getNombre( ( D():Get( "AlbCliT", nView ) )->cCodAge ) }
         :nWidth           := 150
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Ruta"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCodRut }
         :nWidth           := 40
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCodAlm }
         :nWidth           := 60
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Dirección"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCodObr }
         :nWidth           := 40
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Des. dirección"
         :bEditValue       := {|| ClientesDireccionesModel():getName( ( D():Get( "AlbCliT", nView ) )->cCodCli, ( D():Get( "AlbCliT", nView ) )->cCodObr ) }
         :nWidth           := 150
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Su pedido"
         :cSortOrder       := "cSuPed"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cSuPed }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Facturado"
         :cSortOrder       := "cNumFac"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cNumFac }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->nTotNet }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->nTotIva }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "R.E."
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->nTotReq }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->nTotAlb }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( D():Get( "AlbCliT", nView ) )->cDivAlb ), D():Get( "Divisas", nView ) ) }
         :nWidth           := 30
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end


      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Entregado"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->nTotPag }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total und."
         :bEditValue       := {|| nTotalUnd( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb, MasUnd() ) }
         :nWidth           := 95
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total peso"
         :bEditValue       := {|| nTotalPesoAlbaranCliente( D():AlbaranesClientesId( nView ), nView, MasUnd() ) }
         :nWidth           := 95
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Bultos"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->nBultos }
         :cEditPicture     := "99999"
         :nWidth           := 95
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
         :nEditType        := 1
         :bOnPostEdit      := {|oCol, uNewValue, nKey| ChangeBultos( oCol, uNewValue, nKey ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Centro de coste"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cCtrCoste }
         :nWidth           := 30
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Creación/Modificación"
         :bEditValue       := {|| dtoc( ( D():Get( "AlbCliT", nView ) )->dFecCre ) + space( 1 ) + ( D():Get( "AlbCliT", nView ) )->cTimCre }
         :nWidth           := 120
         :lHide            := .T.
      end

   oDetCamposExtra:addCamposExtra( oWndBrw )

   oWndBrw:cHtmlHelp    := "Albaranes a clientes"

   oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()








   oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







   oDup := oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",, {|This|This:Toggle()}, 2,, .F. )







      oWndBrw:NewAt( "Dup",,, {||( DupSerie( oWndBrw ) )}, "Series",,,, 2, oDup, .F. )







   oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )







   oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,, 8,, .F. )






   oDel := oWndBrw:NewAt( "DEL",,, {||( WinDelRec( oWndBrw:oBrw, D():Get( "AlbCliT", nView ), {|| QuiAlbCli() } ) )}, "(E)liminar", "E",,, 16,, .F. )







      oWndBrw:NewAt( "DEL",,, {||( DelSerie( oWndBrw ) )}, "Series",,,, 16, oDel, .F. )







   oImp := oWndBrw:NewAt( "IMP",,, {||( selectedGenAlbCli( 1 ), oWndBrw:Refresh() )}, "(I)mprimir", "I",, {|This|This:Toggle()}, 32,, .F. )


      lGenAlbCli( oWndBrw:oBrw, oImp, 1 )





   oWndBrw:NewAt( "GC_PRINTER2_",,, {||( ImprimirSeriesAlbaranes() )}, "Imp(r)imir series", "R",,, 32,, .F. )







   oPrv := oWndBrw:NewAt( "Prev1",,, {||( selectedGenAlbCli( 2 ), oWndBrw:Refresh() )}, "(P)revisualizar", "P",, {|This|This:Toggle()}, 32,, .F. )


      lGenAlbCli( oWndBrw:oBrw, oPrv, 2 )






   oPdf := oWndBrw:NewAt( "DOCLOCK",,, {||( selectedGenAlbCli( 3 ) )}, "Pd(f)", "F",, {|This|This:Toggle()}, 32,, .F. )


      lGenAlbCli( oWndBrw:oBrw, oPdf, 3 )





   oMail := oWndBrw:NewAt( "GC_MAIL_EARTH_",,, {||( oMailing:documentsDialog( oWndBrw:oBrw:aSelected ) )}, "Correo electrónico",,, {|This|This:Toggle()}, 32,, .F. )






   oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TLabelGeneratorAlbaranClientes():New( nView ):Dialog() )}, "Eti(q)uetas", "Q",,, 32,, .F. )






   oWndBrw:NewAt( "gc_document_empty_chart_",,, {||( if( validRunReport( "01118" ), TFastVentasArticulos():New():Play( "10" ), ) )}, "Rep(o)rting", "O",,, 32,, .F. )

   if RolesModel():getRolAsistenteGenerarFacturas( Auth():rolUuid() )






      oWndBrw:NewAt( "gc_gearwheel_",,, {||( GeneraFacturasClientes():New() )}, "(G)enerar facturas", "G",,, 2,, .F. )

   end

   if RolesModel():getRolCambiarEstado( Auth():rolUuid() )






      oWndBrw:NewAt( "CHGSTATE",,, {||( if( ApoloMsgNoYes( "¿ Está seguro de cambiar el estado del documento ?", "Elija una opción" ), SetFacturadoAlbaranCliente( !lFacturado( D():Get( "AlbCliT", nView ) ), oWndBrw:oBrw ), ) )}, "Cambiar Es(t)ado", "T",,, 4,, .F. )

   end






   oWndBrw:NewAt( "Sel",,, {||( SelSend( oWndBrw:oBrw ) )}, "Entregad(o)", "O",,, 2,, .F. )








   oSnd := oWndBrw:NewAt( "LBL",, "Seleccionar albaranes para ser enviados", {||lSnd( oWndBrw, D():Get( "AlbCliT", nView ) )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():Get( "AlbCliT", nView ), "lSndDoc", .T., .T., .T. ) )}, "Todos",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():Get( "AlbCliT", nView ), "lSndDoc", .F., .T., .T. ) )}, "Ninguno",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():Get( "AlbCliT", nView ), "lSndDoc", .T., .F., .T. ) )}, "Abajo",,,, 4, oSnd, .F. )





   oBtnEur := oWndBrw:NewAt( "gc_currency_euro_",,, {||( lEuro := !lEuro, oWndBrw:Refresh() )}, "M(o)neda", "O",,,,, .F. )

   if RolesModel():getRolCambiarCampos( Auth():rolUuid() )






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():Get( "AlbCliT", nView ), aItmAlbCli(), "10" ) )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )






         oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():Get( "AlbCliL", nView ), aColAlbCli() ) )}, "Líneas",,,, 4, oRpl, .F. )

    end





   oWndBrw:NewAt( "INFO",,, {||( TTrazaDocumento():Activate( "10", ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb ) )}, "I(n)forme documento", "N",,, 4,, .F. )




   oWndBrw:NewAt( "gc_document_text_pencil_",,, {||( Counter:OpenDialog() )}, "Establecer contadores",,,,,, .F. )





   oScript := oWndBrw:NewAt( "gc_folder_document_",,, {||( oScript:Expand() )}, "Scripts",,,,,, .F. )
      ImportScript( oWndBrw, oScript, "AlbaranesClientes", nView )





   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,,,, .F. )





      oWndBrw:NewAt( "GC_USER_",,, {||( EdtCli( ( D():Get( "AlbCliT", nView ) )->cCodCli ) )}, "Modificar cliente",,,,, oRotor, .F. )





      oWndBrw:NewAt( "INFO",,, {||( InfCliente( ( D():Get( "AlbCliT", nView ) )->cCodCli ) )}, "Informe de cliente",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_CLIPBOARD_EMPTY_USER_",,, {||( EdtObras( ( D():Get( "AlbCliT", nView ) )->cCodCli, ( D():Get( "AlbCliT", nView ) )->cCodObr, dbfObrasT ) )}, "Modificar dirección",,,,, oRotor, .F. )




      oWndBrw:NewAt( "GC_CLIPBOARD_EMPTY_USER_",,, {||( if( !empty( ( D():Get( "AlbCliT", nView ) )->cNumPed ), ZooPedCli( ( D():Get( "AlbCliT", nView ) )->cNumPed ), MsgStop( "El albarán no procede de un pedido" ) ) )}, "Visualizar pedido",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_DOCUMENT_TEXT_USER_",,, {||( if( !lFacturado( D():Get( "AlbCliT", nView ) ), FactCli( nil, nil, { "Albaran" => ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb } ), MsgStop( "Albarán facturado" ) ) )}, "Generar factura",,,,, oRotor, .T. )




      oWndBrw:NewAt( "GC_DOCUMENT_TEXT_USER_",,, {||( if( !empty( ( D():Get( "AlbCliT", nView ) )->cNumFac ), EdtFacCli( ( D():Get( "AlbCliT", nView ) )->cNumFac ), msgStop( "No hay factura asociada" ) ) )}, "Modificar factura",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_NOTE_",,, {||( AlbCliNotas() )}, "Generar nota de agenda",,,,, oRotor, .T. )













      oWndBrw:NewAt( "GC_CASH_REGISTER_USER_",,, {||( FacturarLineas() )}, "Facturar lineas",,,,, oRotor, .T. )




   oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )





   oWndBrw:oActiveFilter:SetFields( aItmAlbCli() )
   oWndBrw:oActiveFilter:SetFilterType( "10" )

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

   EnableAcceso()

   if !empty( oWndBrw )

      if uFieldempresa( "lFltYea" )
         oWndBrw:setYearCombobox()
      end

      if !empty( hHash )
         oWndBrw:recAdd()
      end

      hHash    := nil

   end

Return .T.



STATIC FUNCTION OpenFiles()

   local oError
   local oBlock

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de albaranes de clientes" )
      Return ( .F. )
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      lOpenFiles        := .T.

      nView             := D():CreateView()

      D():GetObject( "UnidadMedicion", nView )





      D():Get( "AlbCliT", nView )

      D():Get( "AlbCliL", nView )

      D():Get( "AlbCliI", nView )

      D():Get( "AlbCliD", nView )

      D():Get( "AlbCliS", nView )





      D():Get( "FacCliT", nView )

      D():Get( "FacCliL", nView )

      D():Get( "FacCliP", nView )

      D():Get( "FacCliS", nView )

      D():Get( "AntCliT", nView )

      D():Get( "CliInc", nView )





      D():Get( "NCount", nView )





      D():Get( "FPago", nView )





      D():Get( "Client", nView )





      D():Get( "Divisas", nView )





      D():Get( "TIva", nView )





      D():Documentos( nView )
      ( D():Documentos( nView ) )->( OrdSetFocus( "cTipo" ) )



      D():objectGruposClientes( nView )





      D():Get( "Provee", nView )





      D():Atipicas( nView )

      D():Articulos( nView )

      D():ArticuloStockAlmacenes( nView )

      D():ArticuloLenguaje( nView )

      D():AlbaranesClientesSituaciones( nView )

      D():ImpuestosEspeciales( nView )

      D():Familias( nView )

      D():SatClientes( nView )

      D():SatClientesLineas( nView )



      if !TDataCenter():OpenPreCliT( @dbfPreCliT )
         lOpenFiles     := .F.
      end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PreCliL.DBF" ), ( cCheckArea( "PreCliT", @dbfPreCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PreCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PreCliI.DBF" ), ( cCheckArea( "PreCliI", @dbfPreCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PreCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PreCliD.DBF" ), ( cCheckArea( "PreCliD", @dbfPreCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PreCliD.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliL.DBF" ), ( cCheckArea( "AlbCliL", @dbfAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliI.DBF" ), ( cCheckArea( "AlbCliI", @dbfAlbCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliD.DBF" ), ( cCheckArea( "AlbCliD", @dbfAlbCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliD.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliS.DBF" ), ( cCheckArea( "AlbCliS", @dbfAlbCliS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIL", @dbfPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIR.DBF" ), ( cCheckArea( "PEDCLIR", @dbfPedCliR ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLII.DBF" ), ( cCheckArea( "PEDCLII", @dbfPedCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLID.DBF" ), ( cCheckArea( "PEDCLID", @dbfPedCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cNumDoc" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKES.DBF" ), ( cCheckArea( "TIKES", @dbfTikS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfCliBnc ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAgent ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TarPreL.DBF" ), ( cCheckArea( "TarPreL", @dbfTarPreL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TarPreL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TarPreS.DBF" ), ( cCheckArea( "TarPreS", @dbfTarPreS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TarPreS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOT.DBF" ), ( cCheckArea( "PROMOT", @dbfPromoT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOL.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOC.DBF" ), ( cCheckArea( "PROMOC", @dbfPromoC ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOC.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfKit ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOferta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRO.DBF" ), ( cCheckArea( "PRO", @dbfPro ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TBLPRO.DBF" ), ( cCheckArea( "TBLPRO", @dbfTblPro ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RUTA.DBF" ), ( cCheckArea( "RUTA", @dbfRuta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RUTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @dbfArtDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Cajas.Dbf" ), ( cCheckArea( "CAJAS", @dbfCajT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "Cajas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Almacen.Dbf" ), ( cCheckArea( "ALMACEN", @dbfAlm ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "Almacen.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDelega ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGECOM.DBF" ), ( cCheckArea( "AGECOM", @dbfAgeCom ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGECOM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECT.DBF" ), ( cCheckArea( "FACRECT", @dbfFacRecT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECL.DBF" ), ( cCheckArea( "FACRECL", @dbfFacRecL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECS.DBF" ), ( cCheckArea( "FACRECS", @dbfFacRecS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Empresa.DBF" ), ( cCheckArea( "Empresa", @dbfEmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "Empresa.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPRVS.DBF" ), ( cCheckArea( "ALBPRVS", @dbfAlbPrvS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPRVS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVS.DBF" ), ( cCheckArea( "FACPRVS", @dbfFacPrvS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvS.DBF" ), ( cCheckArea( "RctPrvS", @dbfRctPrvS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.DBF" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.DBF" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.DBF" ), ( cCheckArea( "PedPrvL", @dbfPedPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROSER.DBF" ), ( cCheckArea( "PROSER", @dbfProSer ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROSER.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "MATSER.DBF" ), ( cCheckArea( "MATSER", @dbfMatSer ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "MATSER.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if !TDataCenter():OpenAlbCliT( @dbfAlbCliT )
         lOpenFiles        := .F.
      end

      if !TDataCenter():OpenPedCliT( @dbfPedCliT )
         lOpenFiles     := .F.
      end

      oBandera          := TBandera():New()

      oStock               := TStock():Create( cPatEmp() )
      if !oStock:lOpenFiles()
         lOpenFiles     := .F.
      end

      oNewImp           := TNewImp():Create( cPatEmp() )
      if !oNewImp:OpenFiles()
         lOpenFiles     := .F.
      end

      oTrans            := TTrans():Create( cPatEmp() )
      if !oTrans:OpenFiles()
         lOpenFiles     := .F.
      end

      oTipArt           := TTipArt():Create( cPatEmp() )
      if !oTipArt:OpenFiles()
         lOpenFiles     := .F.
      end

      oGrpFam           := TGrpFam():Create( cPatEmp() )
      if !oGrpFam:OpenFiles()
         lOpenFiles     := .F.
      end

      oUndMedicion      := UniMedicion():Create( cPatEmp() )
      if !oUndMedicion:OpenFiles()
         lOpenFiles     := .F.
      end

      oCentroCoste      := TCentroCoste():Create( cPatDat() )
      if !oCentroCoste:OpenFiles()
         lOpenFiles     := .F.
      end

      oFraPub           := TFrasesPublicitarias():Create( cPatEmp() )
      if !oFraPub:OpenFiles()
         lOpenFiles     := .F.
      end

      oMailing          := TGenmailingDatabaseAlbaranesClientes():New( nView )

      TComercio         := TComercio():New( nView, oStock )

      Counter                    := TCounter():New( nView, "nAlbCli" )





      public nTotBrt    := 0
      public nTotAlb    := 0
      public nTotDto    := 0
      public nTotDPP    := 0
      public nTotNet    := 0
      public nTotIva    := 0
      public nTotIvm    := 0
      public nTotAge    := 0
      public nTotReq    := 0
      public nTotPnt    := 0
      public nTotUno    := 0
      public nTotDos    := 0
      public nTotCos    := 0
      public nTotPes    := 0
      public nTotDif    := 0
      public nTotAtp    := 0
      public nTotTrn    := 0
      public nPctRnt    := 0
      public nTotRnt    := 0










      public aTotIva    := { {   "porcentajeiva" => 0, "logrecargo"   => .F., "porcentajere" => 0, "bruto"        => 0, "neto"         => 0, "impiva"    => 0, "impre"        => 0, "nivmh"        => 0, "ntransporte"  => 0, "npntver"      => 0 } }
      public aIvaUno    := {}
      public aIvaDos    := {}
      public aIvaTre    := {}

      public aTotIvm    := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }
      public aIvmUno    := aTotIvm[ 1 ]
      public aIvmDos    := aTotIvm[ 2 ]
      public aIvmTre    := aTotIvm[ 3 ]

      public nTotPag    := 0

      public nTotArt    := 0
      public nTotCaj    := 0





      if .F.

         cFiltroUsuario    := "Field->cSufAlb == '" + Application():CodigoDelegacion() + "' .and. Field->cCodCaj == '" + Application():CodigoCaja() + "'"

         if RolesModel():getRolFiltrarVentas( Auth():rolUuid() )
            cFiltroUsuario += " .and. Field->cCodUsr == '" + Auth():Codigo() + "'"
         end

         ( D():Get( "AlbCliT", nView ) )->( AdsSetAOF( cFiltroUsuario ) )

      end





      oDetCamposExtra      := TDetCamposExtra():New()
      oDetCamposExtra:OpenFiles()
      oDetCamposExtra:SetTipoDocumento( "Albaranes a clientes" )
      oDetCamposExtra:setbId( {|| D():AlbaranesClientesId( nView ) } )

      oLinDetCamposExtra   := TDetCamposExtra():New()
      oLinDetCamposExtra:OpenFiles()
      oLinDetCamposExtra:setTipoDocumento( "Lineas de albaranes a clientes" )
      oLinDetCamposExtra:setbId( {|| D():AlbaranesClientesLineasEscandalloId( nView ) } )

   RECOVER USING oError

      lOpenFiles           := .F.

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

Return ( lOpenFiles )



STATIC FUNCTION CloseFiles()

   DisableAcceso()

   DestroyFastFilter( D():Get( "AlbCliT", nView ), .T., .T. )

   if !empty( dbfTikT )
      ( dbfTikT      )->( dbCloseArea() )
   end
   if !empty( dbfPreCliT )
      ( dbfPreCliT )->( dbCloseArea() )
   end
   if !empty( dbfPreCliL )
      ( dbfPreCliL )->( dbCloseArea() )
   end
   if !empty( dbfPreCliI )
      ( dbfPreCliI )->( dbCloseArea() )
   end
   if !empty( dbfPreCliD )
      ( dbfPreCliD )->( dbCloseArea() )
   end
   if !empty( dbfAlbCliT )
      ( dbfAlbCliT )->( dbCloseArea() )
   end
   if !empty( dbfAlbCliL )
      ( dbfAlbCliL )->( dbCloseArea() )
   end
   if !empty( dbfAlbCliI )
      ( dbfAlbCliI )->( dbCloseArea() )
   end
   if !empty( dbfAlbCliD )
      ( dbfAlbCliD )->( dbCloseArea() )
   end

   if !empty( dbfAlbCliS )
      ( dbfAlbCliS )->( dbCloseArea() )
   end

   if !empty( dbfPedCliT )
      ( dbfPedCliT   )->( dbCloseArea() )
   end

   if !empty( dbfPedCliL )
      ( dbfPedCliL   )->( dbCloseArea() )
   end
   if !empty( dbfPedCliR )
      ( dbfPedCliR   )->( dbCloseArea() )
   end
   if !empty( dbfPedCliP )
      ( dbfPedCliP   )->( dbCloseArea() )
   end
   if !empty( dbfPedCliI )
      ( dbfPedCliI   )->( dbCloseArea() )
   end
   if !empty( dbfPedCliD )
      ( dbfPedCliD   )->( dbCloseArea() )
   end
   if !empty( dbfAgent )
      ( dbfAgent     )->( dbCloseArea() )
   end
   if !empty( dbfTarPreL )
      ( dbfTarPreL   )->( dbCloseArea() )
   end
   if !empty( dbfTarPreS )
      ( dbfTarPreS   )->( dbCloseArea() )
   end
   if !empty( dbfPromoT )
      ( dbfPromoT    )->( dbCloseArea() )
   end
   if !empty( dbfPromoL )
      ( dbfPromoL    )->( dbCloseArea() )
   end
   if !empty( dbfPromoC )
      ( dbfPromoC    )->( dbCloseArea() )
   end
   if !empty( dbfCodebar )
      ( dbfCodebar   )->( dbCloseArea() )
   end
   if !empty( dbfKit )
      ( dbfKit       )->( dbCloseArea() )
   end
   if !empty( dbfAlm )
      ( dbfAlm       )->( dbCloseArea() )
   end
   if !empty( dbfOferta )
      ( dbfOferta    )->( dbCloseArea() )
   end
   if !empty( dbfObrasT )
      ( dbfObrasT    )->( dbCloseArea() )
   end
   if !empty( dbfPro )
      ( dbfPro       )->( dbCloseArea() )
   end
   if !empty( dbfTblPro )
      ( dbfTblPro    )->( dbCloseArea() )
   end
   if !empty( dbfRuta )
      ( dbfRuta      )->( dbCloseArea() )
   end
   if !empty( dbfArtDiv )
      ( dbfArtDiv    )->( dbCloseArea() )
   end
   if !empty( dbfCajT )
      ( dbfCajT )->( dbCloseArea() )
   end
   if dbfDelega <> nil
      ( dbfDelega )->( dbCloseArea() )
   end
   if dbfAgeCom <> nil
      ( dbfAgeCom )->( dbCloseArea() )
   end
   if dbfFacRecT <> nil
      ( dbfFacRecT )->( dbCloseArea() )
   end
   if dbfFacRecL <> nil
      ( dbfFacRecL )->( dbCloseArea() )
   end
   if dbfFacRecS <> nil
      ( dbfFacRecS )->( dbCloseArea() )
   end
   if dbfTikT <> nil
      ( dbfTikT )->( dbCloseArea() )
   end
   if dbfTikL <> nil
      ( dbfTikL )->( dbCloseArea() )
   end
   if dbfTikS <> nil
      ( dbfTikS )->( dbCloseArea() )
   end
   if dbfEmp <> nil
      ( dbfEmp )->( dbCloseArea() )
   end
   if dbfProLin <> nil
      ( dbfProLin )->( dbCloseArea() )
   end
   if dbfProMat <> nil
      ( dbfProMat )->( dbCloseArea() )
   end
   if dbfProSer <> nil
      ( dbfProSer )->( dbCloseArea() )
   end
   if dbfMatSer <> nil
      ( dbfMatSer )->( dbCloseArea() )
   end
   if dbfAlbPrvL <> nil
      ( dbfAlbPrvL )->( dbCloseArea() )
   end
   if dbfAlbPrvS <> nil
      ( dbfAlbPrvS )->( dbCloseArea() )
   end
   if dbfFacPrvL <> nil
      ( dbfFacPrvL )->( dbCloseArea() )
   end
   if dbfFacPrvS <> nil
      ( dbfFacPrvS )->( dbCloseArea() )
   end
   if dbfRctPrvL <> nil
      ( dbfRctPrvL )->( dbCloseArea() )
   end
   if dbfRctPrvS <> nil
      ( dbfRctPrvS )->( dbCloseArea() )
   end
   if dbfPedPrvL <> nil
      ( dbfPedPrvL )->( dbCloseArea() )
   end
   if !empty( dbfCliBnc  )
      ( dbfCliBnc  )->( dbCloseArea() )
   end

   if !empty( oStock )
      oStock:end()
   end

   if !empty( oNewImp )
      oNewImp:end()
   end
   if !empty( oTrans )
      oTrans:end()
   end
   if !empty( oTipArt )
      oTipArt:end()
   end
   if !empty( oGrpFam )
      oGrpFam:end()
   end
   if !empty( oUndMedicion )
      oUndMedicion:end()
   end
   if !empty( oFraPub )
      oFraPub:end()
   end
   if !empty( oCentroCoste )
      oCentroCoste:end()
   end

   if !empty( oDetCamposExtra )
      oDetCamposExtra:CloseFiles()
   end

   if !empty( oLinDetCamposExtra )
      oLinDetCamposExtra:CloseFiles()
      oLinDetCamposExtra:End()
   end

   if !empty( oMailing )
      oMailing:End()
   end

   if !empty( TComercio )
      TComercio:end()
   end

   D():DeleteView( nView )

   dbfPedCliT     := nil
   dbfPedCliL     := nil
   dbfPedCliR     := nil
   dbfPedCliP     := nil
   dbfPedCliI     := nil
   dbfPedCliD     := nil
   dbfTikT        := nil
   dbfAgent       := nil
   dbfAlm         := nil
   dbfTarPreL     := nil
   dbfTarPreS     := nil
   dbfPromoT      := nil
   dbfPromoL      := nil
   dbfPromoC      := nil
   dbfCodebar     := nil
   dbfKit         := nil
   oBandera       := nil
   dbfOferta      := nil
   dbfObrasT      := nil
   dbfPro         := nil
   dbfTblPro      := nil
   dbfRuta        := nil
   dbfArtDiv      := nil
   dbfCajT        := nil
   dbfDelega      := nil
   dbfAgeCom      := nil
   dbfFacRecT     := nil
   dbfFacRecL     := nil
   dbfTikT        := nil
   dbfTikL        := nil
   dbfTikS        := nil
   dbfEmp         := nil
   dbfProLin      := nil
   dbfProMat      := nil
   dbfAlbPrvL     := nil
   dbfPedPrvL     := nil
   dbfCliBnc      := nil

   oStock         := nil
   oNewImp        := nil
   oTrans         := nil
   oTipArt        := nil
   oGrpFam        := nil
   oUndMedicion   := nil
   oCentroCoste   := nil
   oFraPub        := nil

   nView          := nil

   lOpenFiles     := .F.

   oWndBrw        := nil

   EnableAcceso()

Return .T.



STATIC FUNCTION selectedGenAlbCli( nDevice, cTitle, cCodigoDocumento )

   local nPos

   for each nPos in ( oWndBrw:oBrw:aSelected )

      ( D():AlbaranesClientes( nView ) )->( dbgoto( nPos ) )

      genAlbCli( nDevice, cTitle, cCodigoDocumento )

      SysRefresh()

   next

RETURN NIL



STATIC FUNCTION bGenAlbCli( nDevice, cTitle, cCodDoc )

   local bGen
   local nDev  := by( nDevice )
   local cTit  := by( cTitle  )
   local cCod  := by( cCodDoc )

   if nDev == 1
      bGen     := {|| selectedGenAlbCli( nDev, cTit, cCod ) }
   else
      bGen     := {|| selectedGenAlbCli( nDev, cTit, cCod ) }
   end

RETURN ( bGen )



STATIC FUNCTION GenAlbCli( nDevice, cCaption, cCodigoDocumento, cPrinter, nCopies )

   local oDevice
   local cAlbaran
   local nOrdAnt

   if ( D():AlbaranesClientes( nView ) )->( lastrec() ) == 0
      return nil
   end

   If( nDevice == nil, nDevice := 1, ) ;
   If( cCaption == nil, cCaption := "Imprimiendo albaranes a clientes", ) ;
   If( cCodigoDocumento == nil, cCodigoDocumento := cFormatoAlbaranesClientes(), ) ;
   If( cPrinter == nil, cPrinter := cPrinterAlbaran( Application():CodigoCaja(), dbfCajT ), ) ;





   runScript( "AlbaranesClientes\imprimir\beforeprint.prg", nView )

   nOrdAnt                    := ( D():AlbaranesClientes( nView ) )->( OrdSetFocus() )



   if !lExisteDocumento( cCodigoDocumento, D():Documentos( nView ) )
      return nil
   end



   if empty( nCopies )
      nCopies           := retfld( ( D():AlbaranesClientes( nView ) )->cCodCli, D():Get( "Client", nView ), "CopiasF" )
   end

   if nCopies == 0
      nCopies           := nCopiasDocumento( ( D():Get( "AlbCliT", nView ) )->cSerAlb, "nAlbCli", D():Get( "NCount", nView ) )
   end

   if nCopies == 0
      nCopies           := 1
   end



   cAlbaran             := D():AlbaranesClientesId( nView )



   if lVisualDocumento( cCodigoDocumento, D():Documentos( nView ) )
      PrintReportAlbCli( nDevice, nCopies, cPrinter, cCodigoDocumento )
   else
      msgStop( "El formato ya no es soportado" )
   end





   lChgImpDoc( D():Get( "AlbCliT", nView ) )

   ( D():AlbaranesClientes( nView ) )->( OrdSetFocus( nOrdAnt ) )

Return nil



FUNCTION imprimeAlbaranCliente( cNumeroAlbaran, cFormatoDocumento )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if OpenFiles( .T. )

      if dbSeekInOrd( cNumeroAlbaran, "nNumAlb", D():Get( "AlbCliT", nView ) )

         nTotAlbCli()

         genAlbCli( 1, nil, cFormatoDocumento )

      else

         msgStop( "Número de albarán " + alltrim(  cNumeroAlbaran ) + " no encontrado" )

      end

      CloseFiles()

   end

Return .T.



Static Function AlbCliReportSkipper()

   ( D():Get( "AlbCliL", nView ) )->( dbSkip() )

   nTotPage              += nTotLAlbCli( D():Get( "AlbCliL", nView ) )

Return nil



STATIC FUNCTION EPage( oInf, cCodigoDocumento )

   private nPagina      := oInf:nPage
   private lEnd         := oInf:lFinish
   private nRow         := oInf:nRow

   PrintItems( cCodigoDocumento, oInf )

RETURN NIL



STATIC FUNCTION EdtRec( aTmp, aGet, dbf, oBrw, hHash, bValid, nMode )

   local oDlg
   local oFld
   local nOrd
   local cEstAlb
   local oSay        := Array( 11 )
   local cSay        := Array( 11 )
   local oSayLabels  := Array( 10 )
   local oBmpDiv
   local oBmpEmp
   local oBrwEst
   local lWhen       := if( oUser():lAdministrador(), nMode <> 3, if( nMode == 2, !aTmp[ 69 ], nMode <> 3 ) )
   local oSayGetRnt
   local cTipAlb
   local oSayDias
   local oSayTxtDias
   local oBmpGeneral





   cOldCodCli                 := aTmp[ 6 ]

   setOldPorcentajeAgente( aTmp[ 51 ] )

   do case
      case nMode == 1

         if !lCurSesion()
            MsgStop( "No hay sesiones activas, imposible añadir documentos" )
            Return .F.
         end

         if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
            msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
            Return .F.
         end

         aTmp[ 4   ]   := cCurSesion()
         aTmp[ 7   ]   := Application():codigoAlmacen()
         aTmp[ 53   ]   := cDivEmp()
         aTmp[ 23  ]   := cDefFpg()
         aTmp[ 8   ]   := Application():CodigoCaja()
         aTmp[ 70   ]   := Auth():Codigo()
         aTmp[ 54   ]   := nChgDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) )
         aTmp[ 16]   := .F.
         aTmp[ 52   ]   := .T.
         aTmp[ 3   ]   := RetSufEmp()
         aTmp[ 1   ]   := cNewSer( "NALBCLI", D():Get( "NCount", nView ) )
         aTmp[ 73   ]   := Ctod( "" )
         aTmp[ 76   ]   := Ctod( "" )
         aTmp[ 78   ]   := Application():CodigoDelegacion()
         aTmp[ 59   ]   := uFieldEmpresa( "lIvaInc" )
         aTmp[ 65   ]   := nIva( D():Get( "TIva", nView ), cDefIva() )
         aTmp[ 85   ]   := Padr( getConfigTraslation( "Gastos" ), 250 )
         aTmp[ 103]   := 1
         aTmp[ 104   ]   := GetSysTime()

      case nMode == 4

         if !lCurSesion()
            MsgStop( "No hay sesiones activas, imposible añadir documentos" )
            Return .F.
         end

         if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
            msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
            Return .F.
         end

         aTmp[ 5   ]   := GetSysDate()
         aTmp[ 104   ]   := GetSysTime()
         aTmp[ 4   ]   := cCurSesion()
         aTmp[ 8   ]   := Application():CodigoCaja()
         aTmp[ 16]   := .F.
         aTmp[ 52   ]   := .T.
         aTmp[ 30   ]   := ""
         aTmp[ 69   ]   := .F.
         aTmp[ 103]   := 1
         aTmp[ 70   ]   := Auth():Codigo()

      case nMode == 2

         if aTmp[ 69 ] .AND. !oUser():lAdministrador()
            MsgStop( "El albarán está cerrado." )
            Return .F.
         end

         if lFacturado( aTmp )
            MsgStop( "El albarán ya fue facturado." )
            return .T.
         end

         aTmp[ 52   ]   := .T.

         lChangeRegIva( aTmp )

   end

   if empty( aTmp[ 1 ] )
      aTmp[ 1 ]        := cDefSer()
   end

   if empty( aTmp[ 36 ] )
      aTmp[ 36 ]        := Max( uFieldEmpresa( "nPreVta" ), 1 )
   end

   if empty( aTmp[ 37 ] )
      aTmp[ 37 ]        := Padr( "General", 50 )
   end

   if empty( aTmp[ 39 ] )
      aTmp[ 39 ]           := Padr( "Pronto pago", 50 )
   end





   cTipAlb                    := aTipAlb[ if( aTmp[ 84 ], 2, 1  ) ]





   if BeginTrans( aTmp, nMode )
      Return .F.
   end





   nRieCli                    := 0

   if empty( aTmp[ 88 ] )
      aTmp[ 88 ]        := RetFld( aTmp[ 6 ], D():Get( "Client", nView ), "Telefono" )
   end

   nOrd                       := ( D():Get( "AlbCliT", nView ) )->( ordSetFocus( "nNumAlb" ) )

   cPicUnd                    := MasUnd()
   cPouDiv                    := cPouDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) )
   cPorDiv                    := cPorDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) )
   cPpvDiv                    := cPpvDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) )
   nDouDiv                    := nDouDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) )
   nDorDiv                    := nRouDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) )
   nDpvDiv                    := nDpvDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) )

   if lFacturado( aTmp )
      cEstAlb                 := "Facturado"
   else
      cEstAlb                 := "Pendiente"
   end





   cSay[ 2 ]                  := RetFld( aTmp[ 7 ], dbfAlm )
   cSay[ 3 ]                  := RetFld( aTmp[ 23], D():Get( "FPago", nView ) )
   cSay[ 4 ]                  := RetFld( aTmp[ 26 ], dbfAgent )
   cSay[ 5 ]                  := RetFld( aTmp[ 28 ], dbfTarPreS )
   cSay[ 6 ]                  := RetFld( aTmp[ 6 ] + aTmp[ 27 ], dbfObrasT, "cNomObr", "cCodCli" )
   cSay[ 7 ]                  := RetFld( aTmp[ 29 ], dbfRuta )
   cSay[ 8 ]                  := oTrans:cNombre( aTmp[ 67 ] )
   cSay[ 9 ]                  := RetFld( aTmp[ 8 ], dbfCajT )
   cSay[ 10]                  := UsuariosModel():getNombreWhereCodigo( aTmp[ 70 ] )
   cSay[ 11]                  := RetFld( cCodEmp() + aTmp[ 78 ], dbfDelega, "cNomDlg" )





   InitTarifaCabecera( aTmp[ 36 ] )







   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "albaranes a clientes", "PEDCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )













      oFld := TFolder():ReDefine( 200, {"Albará&n", "Da&tos", "&Incidencias", "D&ocumentos", "&Situaciones"}, { "ALBCLI_1","ALBCLI_2","PEDCLI_3","PEDCLI_4","PEDCLI_5" }, oDlg,,,,, .F., )









      oBmpGeneral := TBitmap():ReDefine( 990, "gc_document_empty_user_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_folders2_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_information_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_address_book_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_document_attachment_48",, oFld:aDialogs[5],,, .F., .F.,,, .F.,,, .T. )







      aGet[ 6 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],,, {||    ( LoaCli( aGet, aTmp, nMode ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwClient( aGet[ 6 ], aGet[ 9 ] ) )}, nil, "LUPA",, )







      TBtnBmp():ReDefine( 175, "gc_symbol_percent_16",,,,, {|Self|( HistoricoVentas():New():Historico() )}, oFld:aDialogs[1], .F., {||     ( nMode <> 3 )}, .F.,,,,,, !.T.,, .F.,,, .F., !.F.,, .F. )




      aGet[9] := TGetHlp():ReDefine( 171, { | u | If( PCount()==0, aTmp[9], aTmp[9]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 15 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[14] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[14], aTmp[14]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 15 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )






      aGet[ 10 ] := TGetHlp():ReDefine( 102, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 15 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 10 ], Rtrim( aTmp[ 11 ] ) + Space( 1 ) + Rtrim( aTmp[ 12 ] ) )}, nil, "gc_earth_lupa_16",, )





      aGet[ 11 ] := TGetHlp():ReDefine( 103, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 15 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )





      aGet[ 12 ] := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 15 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )





      aGet[ 13 ] := TGetHlp():ReDefine( 107, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 15 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )





      oGetTarifa  := comboTarifa():Build( { "idCombo" => 172, "uValue" => aTmp[ 36 ] } )
      oGetTarifa:Resource( oFld:aDialogs[1] )







      oBtnPrecio := TBtnBmp():ReDefine( 174, "gc_arrow_down_16",,,,, {|Self|( ChangeTarifaCabecera( oGetTarifa:getTarifa(), dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1], .F., {||     ( nMode <> 3 .AND. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) )}, .F.,,,,,, !.T.,, .F.,,, .F., !.F.,, .F. )





      oRieCli := TGetHlp():ReDefine( 173, { | u | If( PCount()==0, nRieCli, nRieCli:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 88 ] := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, aTmp[ 88 ], aTmp[ 88 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 15 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )





      aGet[ 70 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 70 ], aTmp[ 70 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSay[ 10 ]:cText( UsuariosModel():getNombreWhereCodigo( aTmp[ 70 ] ) ), .T.  )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      oSay[ 10 ] := TGetHlp():ReDefine( 126, { | u | If( PCount()==0, cSay[ 10 ], cSay[ 10 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )












      aGet[ 28 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cTarifa( aGet[ 28 ], oSay[ 5 ] ) )}, "N/W*",,,,, .F., {||     ( lWhen .AND. oUser():lAdministrador() )},, .F., .F.,,,,, {|Self|( BrwTarifa( aGet[ 28 ], oSay[ 5 ] ) )}, nil, "LUPA",, )




      oSay[ 5 ] := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, cSay[ 5 ], cSay[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 27 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cObras( aGet[ 27 ], oSay[ 6 ], aTmp[ 6 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwObras( aGet[ 27 ], oSay[ 6 ], aTmp[ 6 ], dbfObrasT ) )}, nil, "LUPA",, )




      oSay[ 6 ] := TGetHlp():ReDefine( 191, { | u | If( PCount()==0, cSay[ 6 ], cSay[ 6 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )












      aGet[ 7 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 7 ], , oSay[ 2 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 7 ], oSay[ 2 ] ) )}, nil, "LUPA",, )






      oSay[ 2 ] := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( ExpAlmacen( aTmp[ 7 ], dbfTmpLin, oBrwLin ) )}, nil, "Bot",, )












      aGet[ 23 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cFPago( aGet[ 23 ], D():Get( "FPago", nView ), oSay[ 3 ] ) )},,,,,, .F., {||     ( lWhen .AND. oUser():lAdministrador() )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 23 ], oSay[ 3 ] ) )}, nil, "LUPA",, )




      oSay[ 3 ] := TGetHlp():ReDefine( 211, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ 95 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 95 ], aTmp[ 95 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwBncCli( aGet[ 95 ], aGet[ 96 ], aGet[ 97 ], aGet[ 98 ], aGet[ 99 ], aGet[ 100 ], aGet[ 101 ], aTmp[ 6 ] ) )}, nil, "LUPA",, )






      aGet[ 96 ] := TGetHlp():ReDefine( 424, { | u | If( PCount()==0, aTmp[ 96 ], aTmp[ 96 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( lIbanDigit( aTmp[ 96 ], aTmp[ 98 ], aTmp[ 99 ], aTmp[ 100 ], aTmp[ 101 ], aGet[ 97 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 97 ] := TGetHlp():ReDefine( 425, { | u | If( PCount()==0, aTmp[ 97 ], aTmp[ 97 ]:= u ) }, oFld:aDialogs[1],,, {||    ( lIbanDigit( aTmp[ 96 ], aTmp[ 98 ], aTmp[ 99 ], aTmp[ 100 ], aTmp[ 101 ], aGet[ 97 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 98 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 98 ], aTmp[ 98 ]:= u ) }, oFld:aDialogs[1],,, {||    (  lCalcDC( aTmp[ 98 ], aTmp[ 99 ], aTmp[ 100 ], aTmp[ 101 ], aGet[ 100 ], aTmp[ 96 ] ), aGet[ 96 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[ 99 ] := TGetHlp():ReDefine( 421, { | u | If( PCount()==0, aTmp[ 99 ], aTmp[ 99 ]:= u ) }, oFld:aDialogs[1],,, {||    (  lCalcDC( aTmp[ 98 ], aTmp[ 99 ], aTmp[ 100 ], aTmp[ 101 ], aGet[ 100 ], aTmp[ 96 ] ), aGet[ 96 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[ 100 ] := TGetHlp():ReDefine( 422, { | u | If( PCount()==0, aTmp[ 100 ], aTmp[ 100 ]:= u ) }, oFld:aDialogs[1],,, {||    (  lCalcDC( aTmp[ 98 ], aTmp[ 99 ], aTmp[ 100 ], aTmp[ 101 ], aGet[ 100 ], aTmp[ 96 ] ), aGet[ 96 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )







      aGet[ 101 ] := TGetHlp():ReDefine( 423, { | u | If( PCount()==0, aTmp[ 101 ], aTmp[ 101 ]:= u ) }, oFld:aDialogs[1],, "9999999999", {||    (  lCalcDC( aTmp[ 98 ], aTmp[ 99 ], aTmp[ 100 ], aTmp[ 101 ], aGet[ 100 ], aTmp[ 96 ] ), aGet[ 96 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )












      aGet[ 26 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 26 ], aTmp[ 26 ]:= u ) }, oFld:aDialogs[1],,, {||    ( LoadAgente( aGet[ 26 ], dbfAgent, oSay[ 4 ], aGet[ 51 ], dbfAgeCom, dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 26 ], oSay[ 4 ] ) )}, nil, "LUPA",, )






      oSay[ 4 ] := TGetHlp():ReDefine( 221, { | u | If( PCount()==0, cSay[ 4 ], cSay[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( !empty( aTmp[ 26 ] ) .AND. lWhen )},, .F., .F.,,,,, {|Self|( changeAgentPercentageInAllLines(aTmp[ 51 ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, nil, "Bot",, )







      aGet[ 51 ] := TGetHlp():ReDefine( 222, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( validateAgentPercentage( aGet[ 51 ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( !empty( aTmp[ 26 ] ) .AND. lWhen )},, .F., .T.,,,,,, nil,,, )




      oGetAge := TGetHlp():ReDefine( 223, { | u | If( PCount()==0, nTotAge, nTotAge:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[ 29 ] := TGetHlp():ReDefine( 225, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cRuta( aGet[ 29 ], dbfRuta, oSay[ 7 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwRuta( aGet[ 29 ], dbfRuta, oSay[ 7 ] ) )}, nil, "LUPA",, )




      oSay[ 7 ] := TGetHlp():ReDefine( 226, { | u | If( PCount()==0, cSay[ 7 ], cSay[ 7 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      oSay[ 9 ] := TGetHlp():ReDefine( 166, { | u | If( PCount()==0, cSay[ 9 ], cSay[ 9 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )












      aGet[ 53 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDivOut( aGet[ 53 ], oBmpDiv, aTmp[ 54 ], @cPouDiv, @nDouDiv, @cPorDiv, @nDorDiv, @cPpvDiv, @nDpvDiv, oGetMasDiv, D():Get( "Divisas", nView ), oBandera ) )},,,,,, .F., {||     ( nMode == 1 .AND. ( dbfTmpLin )->( LastRec() ) == 0 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 53 ], oBmpDiv, aTmp[ 54 ], D():Get( "Divisas", nView ), oBandera )}, nil, "LUPA",, )




      oBmpDiv := TBitmap():ReDefine( 231, ( cBmpDiv( aTmp[ 53 ], D():Get( "Divisas", nView ) ) ),, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )
















      oBmpEmp := TBitmap():ReDefine( 500,, "Bmp\ImgAlbCli.bmp", oDlg,,, .F., .F.,,, .F.,,, .F. )





      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )

      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
      oBrwLin:bClrStd         := {|| { if( ( dbfTmpLin )->lKitChl, 8421504, 0 ), GetSysColor( 5 ) } }

      oBrwLin:cAlias          := dbfTmpLin

      oBrwLin:nMarqueeStyle   := 6
      oBrwLin:cName           := "Albaran de cliente.Detalle"
      oBrwLin:lFooter         := .T.
      oBrwLin:lAutoSort       := .T.

      oBrwLin:bExportLector   := {|| stringExport( dbfTmpLin ) }

      oBrwLin:CreateFromResource( 240 )

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Of. Oferta"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfTmpLin )->lLinOfe }
         :nWidth              := 20
         :SetCheck( { "gc_star2_16", "Nil16" } )
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Número"
         :cSortOrder          := "nNumLin"
         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :cEditPicture        := "9999"
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Número Kit"
         :bEditValue          := {|| ( dbfTmpLin )->nNumKit }
         :cEditPicture        := "9999"
         :nWidth              := 55
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Posición"
         :cSortOrder          := "nPosPrint"
         :bEditValue          := {|| ( dbfTmpLin )->nPosPrint }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :cEditPicture        := "9999"
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Código"
         :cSortOrder          := "cRef"
         :bEditValue          := {|| ( dbfTmpLin )->cRef }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :nWidth              := 70
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "C. Barras"
         :bEditValue          := {|| cCodigoBarrasDefecto( ( dbfTmpLin )->cRef, dbfCodeBar ) }
         :nWidth              := 100
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Descripción"
         :cSortOrder          := "cDetalle"
         :bEditValue          := {|| Descrip( dbfTmpLin ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :nWidth              := 260
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Última venta"
         :cSortOrder          := "dFecUltCom"
         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecUltCom ) }
         :bClrStd             := {|| { if( ( GetSysDate() - ( dbfTmpLin )->dFecUltCom ) > 30, 255, 0 ), GetSysColor( 5 )} }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Última unidades"
         :cSortOrder          := "nUniUltCom"
         :bEditValue          := {|| ( dbfTmpLin )->nUniUltCom }
         :cEditPicture        := MasUnd()
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Último precio"
         :bEditValue          := {|| ( dbfTmpLin )->nPrcUltCom }
         :cEditPicture        := cPouDiv
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Valor prop. 1"
         :bEditValue          := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cValPr1, nView ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Valor prop. 2"
         :bEditValue          := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr2, nView ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfTmpLin )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Caducidad"
         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecCad ) }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Bultos"
         :bEditValue          := {|| ( dbfTmpLin )->nBultos }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := cNombreCajas()
         :bEditValue          := {|| ( dbfTmpLin )->nCanEnt }
         :cEditPicture        := MasUnd()
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := cNombreUnidades()
         :cSortOrder          := "nUniCaja"
         :bEditValue          := {|| ( dbfTmpLin )->nUniCaja }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nEditType           := 1
         :nFooterType         := 1
         :bOnPostEdit         := {|o,x,n| if( lCompruebaStock( dbfTmpLin, oStock, ( x - nTotNAlbCli( dbfTmpLin ) ) ), ChangeUnidades( o, x, n, aTmp ), ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Sumar unidades"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| SumaUnidadLinea( aTmp ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_navigate_plus_16" )
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Restar unidades"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| RestaUnidadLinea( aTmp ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_navigate_minus_16" )
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total " + cNombreUnidades()
         :bEditValue          := {|| nTotNAlbCli( dbfTmpLin ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }
         :nWidth              := 25
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Peso"
         :bEditValue          := {|| ( dbfTmpLin )->nPesokg }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "T. Peso"
         :bEditValue          := {|| ( nTotNAlbCli( dbfTmpLin ) * ( dbfTmpLin )->nPesokg ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }
         :nWidth              := 35
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Precio"
         :bEditValue          := {|| nTotUAlbCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nEditType           := oUser():nEditarPrecio()
         :bOnPostEdit         := {|o,x,n| changeFieldLine( o, x, n, aTmp ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Precio " + cImp() + " inc."
         :bEditValue          := {|| nIncUAlbCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Dto."
         :bEditValue          := {|| ( dbfTmpLin )->nDto }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nEditType           := oUser():nEditarPrecio()
         :bOnPostEdit         := {|o,x,n| changeFieldLine( o, x, n, aTmp, "nDto" ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Dto. Lin."
         :bEditValue          := {|| nDtoUAlbCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nEditType           := oUser():nEditarPrecio()
         :bOnPostEdit         := {|o,x,n| changeFieldLine( o, x, n, aTmp, "nDtoDiv" ) }
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Prm."
         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nEditType           := oUser():nEditarPrecio()
         :bOnPostEdit         := {|o,x,n| changeFieldLine( o, x, n, aTmp, "nDtoPrm" ) }
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Codigo agente"
         :bEditValue          := {|| ( dbfTmpLin )->cCodAge }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Age"
         :bEditValue          := {|| ( dbfTmpLin )->nComAge }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% " + cImp()
         :bEditValue          := {|| ( dbfTmpLin )->nIva }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Portes"
         :bEditValue          := {|| nTrnUAlbCli( dbfTmpLin, nRouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "P. verde"
         :bEditValue          := {|| nPntUAlbCli( dbfTmpLin, nDpvDiv ) }
         :cEditPicture        := cPpvDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total"
         :bEditValue          := {|| nTotLAlbCli( dbfTmpLin, nDouDiv, nRouDiv, nil, .T., aTmp[ 94 ], .T. ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 102
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Centro de coste"
         :bEditValue          := {|| ( dbfTmpLin )->cCtrCoste }
         :nWidth              := 20
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Dirección"
         :bEditValue          := {|| ( dbfTmpLin )->cObrLin + Space( 1 ) + RetFld( aTmp[ 6 ] + ( dbfTmpLin )->cObrLin, dbfObrasT, "cNomObr" ) }
         :nWidth              := 250
         :lHide               := .T.
      end

      if nMode <> 3
         oBrwLin:bLDblClick   := {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) }
      end








      aGet[ 37 ] := TGetHlp():ReDefine( 249, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )








      aGet[ 38 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oSayLabels[ 2 ] := TButton():ReDefine( 248, {||( aGet[ 38 ]:cText( Val( GetPvProfString( "Descuentos", "Descuento especial", 0, cIniEmpresa() ) ) ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[ 1 ],,, .F., {||     ( lWhen )},,, .F. )




      aGet[ 39 ] := TGetHlp():ReDefine( 259, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )








      aGet[ 40 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oSayLabels[ 3 ] := TButton():ReDefine( 258, {||( aGet[ 40 ]:cText( Val( GetPvProfString( "Descuentos", "Descuento pronto pago", 0, cIniEmpresa() ) ) ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[ 1 ],,, .F., {||     ( lWhen )},,, .F. )




      aGet[ 41 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )








      aGet[ 42 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oSayLabels[ 4 ] := TButton():ReDefine( 268, {||( aGet[ 42 ]:cText( Val( GetPvProfString( "Descuentos", "Descuento uno", 0, cIniEmpresa() ) ) ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[ 1 ],,, .F., {||     ( lWhen )},,, .F. )




      aGet[ 43 ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ 43 ], aTmp[ 43 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )








      aGet[ 44 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oSayLabels[ 5 ] := TButton():ReDefine( 288, {||( aGet[ 44 ]:cText( Val( GetPvProfString( "Descuentos", "Descuento dos", 0, cIniEmpresa() ) ) ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[ 1 ],,, .F., {||     ( lWhen )},,, .F. )





      oBrwIva                        := IXBrowse():New( oFld:aDialogs[ 1 ] )

      oBrwIva:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwIva:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwIva:SetArray( aTotIva, , , .F. )

      oBrwIva:nMarqueeStyle          := 5
      oBrwIva:lRecordSelector        := .F.
      oBrwIva:lHScroll               := .F.

      oBrwIva:CreateFromResource( 310 )

























































      with object ( oBrwIva:AddCol() )
         :cHeader          := "Base"
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ) <> 0 .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ) <> 0 ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "%" + cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), "@E 999.99" ), "" ), "" ) }
         :bEditValue       := {|| hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) }
         :nWidth           := 44
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
         :nEditType        := 1
         :bEditWhen        := {|| !IsNil( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) ) }
         :bOnPostEdit      := {|o,x| EdtIva( o, x, hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), dbfTmpLin, D():Get( "TIva", nView ), oBrwLin ), RecalculaTotal( aTmp ) }
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "% R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) <> nil .AND. aTmp[ 50 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ), cPicReq() ), "" ), "" ) }
         :nWidth           := 44
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impre" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ) <> nil .AND. aTmp[ 50 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end










      aGet[ 85 ] := TGetHlp():ReDefine( 411, { | u | If( PCount()==0, aTmp[ 85 ], aTmp[ 85 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









      aGet[ 65 ] := TGetHlp():ReDefine( 412, { | u | If( PCount()==0, aTmp[ 65 ], aTmp[ 65 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( D():Get( "TIva", nView ), aTmp[ 65 ] ) .AND. RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 65 ], D():Get( "TIva", nView ), , .T. ) )}, nil, "LUPA",, )






      aGet[ 66 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 66 ], aTmp[ 66 ]:= u ) }, oFld:aDialogs[1],, cPorDiv, {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )



      oGetNet := TSay():ReDefine( 401, {|| nTotNet}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetTrn := TSay():ReDefine( 402, {|| nTotTrn}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSayGetRnt := TSay():ReDefine( 709,, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetRnt := TGetHlp():ReDefine( 408, { | u | If( PCount()==0, cGetRnt, cGetRnt:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      oGetIvm := TSay():ReDefine( 403, {|| nTotIvm}, oFld:aDialogs[1],,,, .F.,, .F., .F., )






      aGet[ 94 ] := TCheckBox():ReDefine( 409, { | u | If( PCount()==0, aTmp[ 94  ], aTmp[ 94  ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ), oBrwLin:Refresh() )},,,,, .F., {||     ( lWhen )}, .F. )



      oGetPnt := TSay():ReDefine( 404, {|| nTotPnt}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetIva := TSay():ReDefine( 405, {|| nTotIva}, oFld:aDialogs[1],,,, .F.,, .F., .F., )






      aGet[ 50 ] := TCheckBox():ReDefine( 406, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ) )},,,,, .F., {||     ( lWhen )}, .F. )





      oImpuestos := TCheckBox():ReDefine( 711, { | u | If( PCount()==0, lImpuestos, lImpuestos:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( .F. )}, .F. )



      oGetReq := TSay():ReDefine( 407, {|| nTotReq}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oGetTotal := TSay():ReDefine( 360, {|| nTotAlb}, oFld:aDialogs[1],,,, .F., oFontTotal(), .F., .F., )









      TButton():ReDefine( 515, {||( AppDeta( oBrwLin, bEdtDet, aTmp, .T., nMode ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 500, {||( AppDeta( oBrwLin, bEdtDet, aTmp, .F., nMode ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( EdtDeta( oBrwLin, bEdtDet, aTmp, .F., nMode ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwLin, dbfTmpLin, {|| delDeta() }, {|| RecalculaTotal( aTmp ) } ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwLin, bEdtDet, dbfTmpLin, .F., nMode, aTmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )





      TButton():ReDefine( 524, {||( lineUp( dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 525, {||( lineDown( dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )




      oBtnKit := TButton():ReDefine( 526, {||( lEscandalloEdtRec( .T., oBrwLin ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )





      oBtnAtp := TButton():ReDefine( 527, {||( CargaAtipicasCliente( aTmp, oBrwLin, oDlg ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 528, {||( TGetDialog():New( {|getDialog| runMasiveAppendLines( getDialog, aTmp ) } ):Run() )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )










      aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( aTmp[ 1 ] >= "A" .AND. aTmp[ 1 ] <= "Z"  )}, "N/W*",,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .T., {||    ( UpSerie( aGet[ 1 ] ) )}, {||  ( DwSerie( aGet[ 1 ] ) )},,,, nil,,, )





      aGet[ 2 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oFld:aDialogs[1],, "999999999",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ 3 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 5 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,, {|Self|aGet[ 5 ]:cText( Calendario( aTmp[ 5 ] ) )}, nil,,, )








      aGet[ 104 ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 104 ], aTmp[ 104 ]:= u ) }, oFld:aDialogs[1],, "@R 99:99:99", {||    ( iif(   !validTime( aTmp[ 104 ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      oTipAlb := TComboBox():ReDefine( 217, { | u | If( PCount()==0, cTipAlb, cTipAlb:= u ) }, aTipAlb, oFld:aDialogs[1],,, {|Self|( SetDialog( aGet, oSayDias, oSayTxtDias ) )},,,, .F., {||     ( ( dbfTmpLin )->( LastRec() ) == 0 )},,,,,, "oTipAlb",,,,,,, )








      aGet[ 83 ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 83 ], aTmp[ 83 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,, 112, )








      aGet[ 82 ] := TGetHlp():ReDefine( 113, { | u | If( PCount()==0, aTmp[ 82 ], aTmp[ 82 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,, 114, )





      oSayDias := TSay():ReDefine( 115, {||      ( aTmp[ 82 ] - aTmp[ 83 ] )}, oFld:aDialogs[1], "9999",,, .F.,, .F., .F., )



      oSayTxtDias := TSay():ReDefine( 116,, oFld:aDialogs[1],,,, .F.,, .F., .F., )





      aGet[ 19 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,, 141, )








      oBtnPre := TBtnBmp():ReDefine( 601, "gc_notebook_user_16",,,,, {|Self|( BrwPreCli( aGet[ 31 ], dbfPreCliT, dbfPreCliL, D():Get( "TIva", nView ), D():Get( "Divisas", nView ), D():Get( "FPago", nView ), aGet[ 59 ] ) )}, oFld:aDialogs[1], .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )}, .F., "Importar presupuesto",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )








      oBtnPed := TBtnBmp():ReDefine( 603, "gc_clipboard_empty_user_16",,,,, {|Self|( BrwPedCli( aGet[ 30 ], dbfPedCliT, dbfPedCliL, D():Get( "TIva", nView ), D():Get( "Divisas", nView ), D():Get( "FPago", nView ), aGet[ 59 ] ) )}, oFld:aDialogs[1], .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )}, .F., "Importar pedido",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )





      oBtnAgruparPedido := TButton():ReDefine( 512, {||( GrpPed( aGet, aTmp, oBrwLin  ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )},,, .F. )





      TButton():ReDefine( 513, {||( importarLineasPedidosClientes( aTmp, aGet, oBrwLin )  )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )









      aGet[ 30 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[1],, "@R A/XXXXXXXXX/XX", {||    ( cPedCli( aGet, aTmp, oBrwLin, nMode ), RecalculaTotal( aTmp ), SetDialog( aGet, oSayDias, oSayTxtDias ) )},,,,,, .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )},, .F., .F.,,,,, {|Self|( BrwPedCli( aGet[ 30 ], dbfPedCliT, dbfPedCliL, D():Get( "TIva", nView ), D():Get( "Divisas", nView ), D():Get( "FPago", nView ), aGet[ 59 ] ), RecalculaTotal( aTmp ) )}, nil, "LUPA",, )






      aGet[ 31 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oFld:aDialogs[1],, "@R A/XXXXXXXXX/XX", {||    ( cPreCli( aGet, aTmp, oBrwLin, nMode ), RecalculaTotal( aTmp ), SetDialog( aGet, oSayDias, oSayTxtDias ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 32 ] := TGetHlp():ReDefine( 153, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "@R A/XXXXXXXXX/XX", {||    ( cSatCli( aGet, aTmp, oBrwLin, nMode ), SetDialog( aGet, oSayDias, oSayTxtDias ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 16 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cEstAlb, cEstAlb:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 59 ] := TCheckBox():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( lWhen )}, .F. )









      aGet[ 67 ] := TGetHlp():ReDefine( 235, { | u | If( PCount()==0, aTmp[ 67 ], aTmp[ 67 ]:= u ) }, oFld:aDialogs[2],,, {||    ( LoadTrans( aTmp, aGet[ 67 ], aGet[ 68 ], oSay[ 8 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( oTrans:Buscar( aGet[ 67 ] ), .T. )}, nil, "LUPA",, )



      oSay[ 8 ] := TGetHlp():ReDefine( 236, { | u | If( PCount()==0, cSay[ 8 ], cSay[ 8 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      aGet[ 68 ] := TGetHlp():ReDefine( 237, { | u | If( PCount()==0, aTmp[ 68 ], aTmp[ 68 ]:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ 24 ] := TGetHlp():ReDefine( 128, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[2],, "99999",, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )




      aGet[ 58 ] := TGetHlp():ReDefine( 129, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )












      aGet[ 8 ] := TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[2],,, {||    cCajas( aGet[ 8 ], dbfCajT, oSay[ 9 ] )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 8 ], oSay[ 9 ] ) )}, nil, "LUPA",, )









      aGet[55] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[55], aTmp[55]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[56] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[56], aTmp[56]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )











      aGet[ 17 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[2],, {||( ValCheck( aGet, aTmp ) )},,,,, .F., {||     ( lWhen )}, getConfigTraslation( "Entregado" ) )






      aGet[ 73 ] := TGetHlp():ReDefine( 127, { | u | If( PCount()==0, aTmp[ 73 ], aTmp[ 73 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )




      aGet[ 71 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 71 ], aTmp[ 71 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 72 ] := TGetHlp():ReDefine( 401, { | u | If( PCount()==0, aTmp[ 72 ], aTmp[ 72 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[20] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[20], aTmp[20]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      aGet[22] := TMultiGet():ReDefine( 240, { | u | If( PCount()==0, aTmp[22], aTmp[22]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F.,, )




      aGet[21] := TMultiGet():ReDefine( 250, { | u | If( PCount()==0, aTmp[21], aTmp[21]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F.,, )




      aGet[78] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[78], aTmp[78]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 11 ] := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSay[ 11 ], cSay[ 11 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 75 ] := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 75 ], aTmp[ 75 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F. )




      aGet[ 76 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      aGet[ 77 ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 77 ], aTmp[ 77 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      oGetMasDiv := TSay():ReDefine( 488, {|| cGetMasDiv}, oFld:aDialogs[1],,,, .F., oFontTotal(), .F., .F., )










      aGet[ 105 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 105 ], aTmp[ 105 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oCentroCoste:Existe( aGet[ 105 ], aGet[ 105 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 105 ] ) )}, nil, "LUPA",, 181 )





      oBrwInc                 := IXBrowse():New( oFld:aDialogs[ 3 ] )

      oBrwInc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwInc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwInc:cAlias          := dbfTmpInc

      oBrwInc:nMarqueeStyle   := 6
      oBrwInc:cName           := "Albaran de cliente.Incidencias"

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Resuelta"
            :bStrData         := {|| "" }
            :bEditValue       := {|| ( dbfTmpInc )->lListo }
            :nWidth           := 65
            :SetCheck( { "Sel16", "Cnt16" } )
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Código"
            :bEditValue       := {|| ( dbfTmpInc )->cCodTip }
            :nWidth           := 80
         end







         with object ( oBrwInc:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }
            :nWidth           := 90
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }
            :nWidth           := 480
         end

         if nMode <> 3
            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }
         else
            oBrwInc:bLDblClick   := {|| WinZooRec( oBrwInc, bEdtDet, aTmp ) }
         end

         oBrwInc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwInc, dbfTmpInc ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) )}, oFld:aDialogs[ 3 ],,, .F.,,,, .F. )



      oBrwDoc                 := IXBrowse():New( oFld:aDialogs[ 4 ] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc

      oBrwDoc:nMarqueeStyle   := 6
      oBrwDoc:nRowHeight      := 40
      oBrwDoc:nDataLines      := 2

      with object ( oBrwDoc:AddCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }
         :nWidth           := 860
      end

      if nMode <> 3
         oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) }
      end

      oBrwDoc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )




      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", rTrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )






      oBrwEst                 := IXBrowse():New( oFld:aDialogs[ 5 ] )

      oBrwEst:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwEst:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwEst:cAlias          := dbfTmpEst

      oBrwEst:nMarqueeStyle   := 6
      oBrwEst:cName           := "Pedido de cliente.Situaciones"

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Nombre"
            :bEditValue       := {|| ( dbfTmpEst )->cSitua }
            :nWidth           := 140
         end

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpEst )->dFecSit ) }
            :nWidth           := 90
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Hora"
            :bEditValue       := {|| trans( ( dbfTmpEst )->tFecSit, "@R 99:99:99" ) }
            :nWidth           := 90
         end

         if nMode <> 3
            oBrwEst:bLDblClick   := {|| WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) }
         end

         oBrwEst:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[ 5 ],,, .F., {||     ( lWhen )},,, .F. )






      TButton():ReDefine( 501, {||( WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[ 5 ],,, .F., {||     ( lWhen )},,, .F. )






      TButton():ReDefine( 502, {||( WinDelRec( oBrwEst, dbfTmpEst ) )}, oFld:aDialogs[ 5 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 503, {||( WinZooRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[ 5 ],,, .F.,,,, .F. )









      TButton():ReDefine( 3, {||( RecAlbCli( aTmp, oDlg ), oBrwLin:Refresh(), RecalculaTotal( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 4, {||( if( EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ), ImprimirSeriesAlbaranes(), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( cancelEdtRec( nMode, aGet, oDlg ) )}, oDlg,,, .F.,,,, .T. )

      oSayLabels[ 1 ] := TGroup():ReDefine( 700,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 6 ] := TSay():ReDefine( 708,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 7 ] := TSay():ReDefine( 710,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 9 ] := TSay():ReDefine( 712,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )

   if nMode <> 3

      oFld:aDialogs[1]:AddFastKey( 113, {|| AppDeta( oBrwLin, bEdtDet, aTmp, .F., nMode ) } )
      oFld:aDialogs[1]:AddFastKey( 114, {|| EdtDeta( oBrwLin, bEdtDet, aTmp, .F., nMode ) } )
      oFld:aDialogs[1]:AddFastKey( 115, {|| WinDelRec( oBrwLin, dbfTmpLin, {|| delDeta() }, {|| RecalculaTotal( aTmp ) } ) } )
      oFld:aDialogs[1]:AddFastKey( 119, {|| TGetDialog():New( {|getDialog| runMasiveAppendLines( getDialog, aTmp ) } ):Run() } )

      oFld:aDialogs[3]:AddFastKey( 113, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 114, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 115, {|| WinDelRec( oBrwInc, dbfTmpInc ) } )

      oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 115, {|| WinDelRec( oBrwDoc, dbfTmpDoc ) } )

      oFld:aDialogs[5]:AddFastKey( 113, {|| WinAppRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) } )
      oFld:aDialogs[5]:AddFastKey( 114, {|| WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) } )
      oFld:aDialogs[5]:AddFastKey( 115, {|| WinDelRec( oBrwEst, dbfTmpEst ) } )

      oDlg:AddFastKey( 117,             {|| if( EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ), ImprimirSeriesAlbaranes(), ) } )
      oDlg:AddFastKey( 116,             {|| EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ) } )
      oDlg:AddFastKey( 120,             {|| oDetCamposExtra:Play( space(1) ) } )
      oDlg:AddFastKey( 65,                {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )

   end

   oDlg:SetControlFastKey( "AlbaranesClientesLineas", nView, aGet, dbfTmpLin, oBrwLin, dbfTblPro )

   oDlg:bStart       := {|| StartEdtRec( aTmp, aGet, oDlg, nMode, hHash, oBrwLin,  ) }




   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( recalculaTotal( aTmp ) )}, .T.,,, {|Self|( initEdtRec( aTmp, aGet, oDlg, oSayDias, oSayTxtDias, hHash ) )}, oDlg:bRClicked,,, )

   oMenu:end()

   oBmpEmp:end()
   oBmpDiv:end()
   oBmpGeneral:end()

   oBrwLin:CloseData()
   oBrwInc:CloseData()

   ( D():Get( "AlbCliT", nView ) )->( ordSetFocus( nOrd ) )

   KillTrans()

RETURN ( oDlg:nResult == 1 )



Static Function StartEdtRec( aTmp, aGet, oDlg, nMode, hHash, oBrwLin )

   if nMode == 1

      if lRecogerUsuario()

         if !lGetUsuario( aGet[ 70 ] )
            oDlg:End()
         end

      end

      if IsHash( hHash )

         do case
            case HGetKeyAt( hHash, 1 ) == "Artículo"
               AppDeta( oBrwLin, bEdtDet, aTmp, nil, nMode, HGetValueAt( hHash, 1 ) )

            case HGetKeyAt( hHash, 1 ) == "Cliente"
               aGet[ 6 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 6 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "Presupuesto"
               aGet[ 31 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 31 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "Pedido"
               aGet[ 30 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 30 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "SAT"
               aGet[ 32 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 32 ]:lValid()

         end

      end

   else

      aGet[ 31 ]:Hide()
      aGet[ 30 ]:Hide()
      aGet[ 32 ]:Hide()

      if !empty( aTmp[ 31 ] )
         aGet[ 31 ]:Show()
      end

      if !empty( aTmp[ 30 ] )
         aGet[ 30 ]:Show()
      end

      if !empty( aTmp[ 32 ] )
         aGet[ 32 ]:Show()
      end

      if !empty( aGet[ 105 ] )
         aGet[ 105 ]:lValid()
      endif

      if !empty( aGet[ 67 ] )
         aGet[ 67 ]:lValid()
      endif

      if !Empty( aGet[ 6 ] )
         aGet[ 6 ]:lValid()
      end

   end





   lEscandalloEdtRec( .F., oBrwLin )





   if !empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )

      while !( dbfTmpInc )->( Eof() )
         if ( dbfTmpInc )->lAviso .AND. !( dbfTmpInc )->lListo
            msginfo( Trim( ( dbfTmpInc )->mDesInc ), "¡Incidencia!" )
         end
         ( dbfTmpInc )->( dbSkip() )
      end

      ( dbfTmpInc )->( dbGoTop() )

   end

Return ( nil )



Static Function InitEdtRec( aTmp, aGet, oDlg, oSayDias, oSayTxtDias, hHash )

   EdtRecMenu( aGet, aTmp, oBrwLin, oDlg )

   SetDialog( aGet, oSayDias, oSayTxtDias )

   oBrwLin:MakeTotals()

   oBrwLin:Load()
   oBrwInc:Load()

RETURN ( nil )



Static Function CancelEdtRec( nMode, aGet, oDlg )

   local cNumDoc

   if ( nMode == 1 .OR. nMode == 4 )

      if !exitNoSave( nMode, dbfTmpLin )
         Return nil
      end

      CursorWait()



      cNumDoc                             := aGet[ 31 ]:VarGet()

      if !empty( cNumDoc ) .AND. dbSeekInOrd( cNumDoc, "nNumPre", dbfPreCliT )
         if ( dbfPreCliT )->lEstado .AND. dbLock( dbfPreCliT )
            ( dbfPreCliT )->cNumAlb    := ""
            ( dbfPreCliT )->lEstado    := .F.
            ( dbfPreCliT )->( dbUnLock() )
         end
      end



      cNumDoc                             := aGet[ 30 ]:VarGet()

      if !empty( cNumDoc ) .AND. dbSeekInOrd( cNumDoc, "nNumPed", dbfPedCliT )
         if ( dbfPedCliT )->nEstado <> 3 .AND. dbLock( dbfPedCliT )
            ( dbfPedCliT )->cNumAlb    := ""
            ( dbfPedCliT )->nEstado    := 1
            ( dbfPedCliT )->( dbUnLock() )
         end
      end



      cNumDoc                                         := aGet[ 32 ]:VarGet()

      if !empty( cNumDoc ) .AND. dbSeekInOrd( cNumDoc, "nNumSat", D():SatClientes( nView ) )
         if ( D():SatClientes( nView ) )->lEstado .AND. dbLock( D():SatClientes( nView ) )
            ( D():SatClientes( nView ) )->cNumAlb    := ""
            ( D():SatClientes( nView ) )->lEstado    := 1
            ( D():SatClientes( nView ) )->( dbUnLock() )
         end
      end

      CursorWE()

   end

   oDlg:end()

Return ( nil )



Static Function EdtRecMenu( aGet, aTmp, oBrw, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra para la familia", .F.,, {|oMenuItem|( oDetCamposExtra:Play( Space(1) ) )},, "GC_FORM_PLUS2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&2. Visualizar pedido", "Visualiza el pedido del que proviene", .F.,, {|oMenuItem|( if( !empty( aTmp[ 30 ] ), ZooPedCli( aTmp[ 30 ] ), MsgStop( "El albarán no procede de un pedido" ) ) )},, "gc_clipboard_empty_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)





            MenuAddItem( "&3. Modificar cliente", "Modifica la ficha del cliente", .F.,, {|oMenuItem|( if( !empty( aTmp[ 6 ] ), EdtCli( aTmp[ 6 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "gc_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )



            MenuAddItem( "&4. Modificar cliente contactos", "Modifica la ficha del cliente en contactos", .F.,, {|oMenuItem|( if( !empty( aTmp[ 6 ] ), EdtCli( aTmp[ 6 ], , 5 ), MsgStop( "Código de cliente vacío" ) ) )},, "gc_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&5. Informe de cliente", "Informe de cliente", .F.,, {|oMenuItem|( if( !empty( aTmp[ 6 ] ), InfCliente( aTmp[ 6 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&6. Modificar dirección", "Modifica ficha de la dirección", .F.,, {|oMenuItem|( if( !empty( aTmp[ 27 ] ), EdtObras( aTmp[ 6 ], aTmp[ 27 ], dbfObrasT ), MsgStop( "Código de obra vacío" ) ) )},, "gc_worker2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)





            MenuAddItem( "&7. Informe del documento", "Informe del documento", .F.,, {|oMenuItem|( TTrazaDocumento():Activate( "10", aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&8. Firmar documento", "Firmar documento", .F.,, {|oMenuItem|( if( empty( aTmp[ 106 ] ) .OR.  msgNoYes( "El documento ya esta firmado, ¿Desea voler a firmarlo?" ), aTmp[ 106 ] := signatureToMemo(), ) )},, "gc_sign_document_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return ( oMenu )



Static Function lEscandalloEdtRec( lSet, oBrwLin )

   local lShwKit     := lShwKit()

   if lSet
      lShwKit        := !lShwKit
   end

   if lShwKit
      SetWindowText( oBtnKit:hWnd, "Ocultar Esc&ll." )
      if ( dbfTmpLin )->( Used() )
         ( dbfTmpLin )->( dbClearFilter() )
      end
   else
      SetWindowText( oBtnKit:hWnd, "Mostrar Esc&ll." )
      if ( dbfTmpLin )->( Used() )
         ( dbfTmpLin )->( dbSetFilter( {|| ! Field->lKitChl }, "! lKitChl" ) )
      end
   end

   if lSet
      lShwKit( lShwKit )
   end

   if !empty( oBrwLin )
      oBrwLin:Refresh()
   end

Return ( nil )



Static Function ValCheck( aGet, aTmp )

   if aTmp[ 17 ]
      aGet[ 73 ]:cText( GetSysDate() )
   else
      aGet[ 73 ]:cText( Ctod( "" ) )
   end

Return .T.






STATIC FUNCTION EdtDet( aTmp, aGet, dbf, oBrw, lTotLin, cCodArtEnt, nMode, aTmpAlb )

   local oDlg
   local oFld
   local oBtn
   local oTotal
   local nTotal               := 0
   local oSayPr1
   local oSayPr2
   local cSayPr1              := ""
   local cSayPr2              := ""
   local oSayVp1
   local oSayVp2
   local cSayVp1              := ""
   local cSayVp2              := ""
   local bmpImage
   local oSayAlm
   local cSayAlm
   local oStkAct
   local nStkAct              := 0
   local oBtnSer
   local oSayGrp
   local cSayGrp              := ""
   local oSayFam
   local cSayFam              := ""
   local cCodArt              := Padr( aTmp[ 4 ], 200 )
   local oRentLin
   local cRentLin             := ""
   local cCodDiv              := aTmpAlb[ 53 ]
   local oSayDias

   cGetCelda                  := Space(20)

   cTipoCtrCoste              := AllTrim( aTmp[ 109 ] )

   do case
   case nMode == 1

      aTmp[ 1]        := aTmpAlb[ 1 ]
      aTmp[ 2]        := aTmpAlb[ 2 ]
      aTmp[ 12 ]        := 1
      aTmp[ 19]        := 1
      aTmp[ 21  ]        := GetSysDate()
      aTmp[ 24 ]        := lTotLin
      aTmp[ 26 ]        := .T.
      aTmp[ 38 ]        := aTmpAlb[ 7 ]
      aTmp[ 39 ]        := aTmpAlb[ 59 ]
      aTmp[ 27]        := aTmpAlb[ 30 ]
      aTmp[ 76 ]        := oGetTarifa:getTarifa()
      aTmp[ 45 ]        := Ctod( "" )

      aTmp[ 69 ]       := aTmpAlb[ 83 ]
      aTmp[ 68 ]       := aTmpAlb[ 82 ]
      aTmp[ 71 ]     := !empty( oTipAlb ) .AND. ( oTipAlb:nAt == 2 )

      aTmp[ 105 ]        := aTmpAlb[ 27 ]

      if !empty( cCodArtEnt )
         cCodArt              := cCodArtEnt
      end

      cTipoCtrCoste           := "Centro de coste"

      oLinDetCamposExtra:setTemporalAppend()

   case nMode == 2

      lTotLin                 := aTmp[ 24 ]

   end





   cOldCodArt           := aTmp[ 4 ]
   cOldPrpArt           := aTmp[ 28 ] + aTmp[ 29 ] + aTmp[ 30 ] + aTmp[ 31 ]
   cOldUndMed           := aTmp[ 17 ]

   cSayGrp              := RetFld( aTmp[ 55 ], oGrpFam:GetAlias() )
   cSayFam              := RetFld( aTmp[ 54 ], D():Familias( nView ) )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "líneas a albaranes de clientes", "LFACCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )











      oFld := TFolder():ReDefine( 400, {"&General", "Da&tos", "&Observaciones", "&Centro coste"}, { "LALBCLI_1","LALBCLI_2","LFACCLI_3","LCTRCOSTE" }, oDlg,,,,, .F., )





      aGet[ 4 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodArt, cCodArt:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

      aGet[ 4 ]:bValid       := {|| LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode ) }
      aGet[ 4 ]:bHelp        := {|| brwArticulo( aGet[ 4 ], aGet[ 5 ], .F., .T., oBtn, aGet[ 44 ], aTmp[ 28 ], aTmp[ 29 ], aGet[ 30 ], aGet[ 31 ], aGet[ 45 ], if( uFieldEmpresa( "lStockAlm" ), aTmp[ 38 ], nil ) ) }
      aGet[ 4 ]:bLostFocus   := {|| lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) }




      aGet[ 5 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( ( lModDes() .OR. empty( aTmp[ 5 ] ) ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 23 ] := TMultiGet():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( ( lModDes() .OR. empty( aTmp[ 23 ] ) ) .AND. nMode <> 3 )}, .F.,, )











      aGet[ 44 ] := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 113, )

         aGet[ 44 ]:bValid   := {|| LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode ) }






      aGet[ 45 ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 341, )



      oBrwProperties                       := IXBrowse():New( oFld:aDialogs[1] )

      oBrwProperties:nDataType             := 2

      oBrwProperties:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwProperties:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwProperties:lHScroll              := .T.
      oBrwProperties:lVScroll              := .T.

      oBrwProperties:nMarqueeStyle         := 3
      oBrwProperties:lRecordSelector       := .F.
      oBrwProperties:lFastEdit             := .T.
      oBrwProperties:nFreeze               := 1
      oBrwProperties:lFooter               := .T.

      oBrwProperties:SetArray( {}, .F., 0, .F. )

      oBrwProperties:MakeTotals()

      oBrwProperties:CreateFromResource( 500 )





      oGetCelda := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, cGetCelda, cGetCelda:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 184, )

      oGetCelda:bValid              := {|| SearchProperty( oGetCelda, oBrwProperties ), .T. }









      aGet[ 30 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 30 ], oSayVp1, aTmp[ 28 ], dbfTblPro ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ), .F. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 30 ], oSayVp1, aTmp[ 28 ] ) )}, nil, "LUPA",, )

         aGet[ 30 ]:bChange      := {|| aGet[ 30 ]:Assign(), if( !uFieldEmpresa( "lNStkAct" ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 38 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ], oStkAct ), .T. ) }




      oSayPr1 := TSay():ReDefine( 271, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp1 := TGetHlp():ReDefine( 272, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 31 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 31 ], oSayVp2, aTmp[ 29 ], dbfTblPro ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ), .F. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 31 ], oSayVp2, aTmp[ 29 ] ) )}, nil, "LUPA",, )

         aGet[ 31 ]:bChange      := {|| aGet[ 31 ]:Assign(), if( !uFieldEmpresa( "lNStkAct" ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 38 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ], oStkAct ), .T. ) }




      oSayPr2 := TSay():ReDefine( 281, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp2 := TGetHlp():ReDefine( 282, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )














      aGet[ 11 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( D():Get( "TIva", nView ), aTmp[ 11 ], @aTmp[ 56 ] ) )},,,,,, .F., {||     ( !aTmp[ 14 ] .AND. lModIva() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 11 ], D():Get( "TIva", nView ), , .T. ) )}, nil, "LUPA",, )










      aGet[ 40 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[1],, cPouDiv,, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,, {|Self|( oNewImp:nBrwImp( aGet[ 40 ] ) )}, nil,, 126, )







      aGet[ 99 ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 99 ], aTmp[ 99 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 ) .AND. uFieldEmpresa( "lUseBultos" )},, .F., .T.,,,,,, nil,, 451, )

      aGet[ 99 ]:Cargo          := "nBultos"
      aGet[ 99 ]:bPostValidate  := {| oSender | runScript( "AlbaranesClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpAlb ) }










      aGet[ 12 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) )},,,,,, .F., {||     ( !aTmp[ 14 ] .AND. lUseCaj() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 131, )
      aGet[ 12 ]:Cargo          := "nCanEnt"
      aGet[ 12 ]:bPostValidate  := {| oSender | runScript( "AlbaranesClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpAlb ) }









      aGet[ 19 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     ( !aTmp[ 14 ] .AND. nMode <> 3 .AND. oUser():lModificaUnidades() )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 141, )
      aGet[ 19 ]:Cargo          := "nUniCaja"
      aGet[ 19 ]:bPostValidate  := {| oSender | runScript( "AlbaranesClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpAlb ) }





      aGet[ 32 ] := TGetHlp():ReDefine( 295, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( !aTmp[14] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 6 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( !aTmp[14] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )












      aGet[ 76 ] := TGetHlp():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[1],, "9", {||    ( aTmp[ 76 ] >= 1 .AND. aTmp[ 76 ] <= 6 )},,,,,, .F., {||     ( nMode <> 3 .AND. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) )}, {|nKey,nFlags,Self| (  ChangeTarifa( aTmp, aGet, aTmpAlb ), loadComisionAgente( aTmp, aGet, aTmpAlb ), lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,, {||      1}, {||      6},, nil,,, )








      aGet[ 17 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oUndMedicion:Existe( aGet[ 17 ], aGet[ 17 ]:oHelpText, "cNombre" ), ValidaMedicion( aTmp, aGet ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oUndMedicion:Buscar( aGet[ 17 ] ), ValidaMedicion( aTmp, aGet ) )}, nil, "LUPA",, 171 )











      aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ] := TGetHlp():ReDefine( 520, { | u | If( PCount()==0, aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ], aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 521, )

         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetColor( 8388608 )










      aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ], aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 531, )

         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetColor( 8388608 )










      aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ], aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 541, )

         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetColor( 8388608 )

      if aTmp[ 71 ]








         aGet[ 70 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 70 ], aTmp[ 70 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )

      end









      aGet[ 8 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 351, )








      aGet[ 7 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],, cPpvDiv, {||    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( !aTmp[14] .AND. nMode <> 3 .AND. !lTotLin)},, .F., .T.,,,,,, nil,, 152, )





      aGet[ 15 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( !aTmp[14] .AND. nMode <> 3 .AND. !lTotLin)},, .F., .F.,,,,,, nil,,, )




      aGet[ 16 ] := TGetHlp():ReDefine( 175, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( !aTmp[14] .AND. nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )





      aGet[ 66 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 66 ], aTmp[ 66 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( !aTmp[14] .AND. nMode <> 3 .AND. !lTotLin)},, .F., .F.,,,,,, nil,,, )





      aGet[ 67 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 67 ], aTmp[ 67 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !aTmp[14] .AND. nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )




      aGet[ 100 ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ 100 ], aTmp[ 100 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[9] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[9], aTmp[9]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||     ( !aTmp[ 14 ] .AND. nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )







      aGet[ 10 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||     ( !aTmp[ 14 ] .AND. nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )






      aGet[ 18 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||     ( !aTmp[ 14 ] .AND. nMode <> 3 .AND. !lTotLin )},, .F., .T.,,,,,, nil,,, )

      if !aTmp[ 71 ]





      oComisionLinea := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, nComisionLinea, nComisionLinea:= u ) }, oFld:aDialogs[ 1 ],, cPorDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      end











      aGet[ 33 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( !aTmp[ 14 ] .AND. aTmp[ 33 ] >= 0 )}, ( 255 + ( 0 * 256 ) + ( 0 * 65536 ) ),,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) ) }, .F., .T.,,, {||      0},,, nil,, 261, )












      aGet[ 53 ] := TGetHlp():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oTipArt:Existe( aGet[ 53 ], aGet[ 53 ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )},, .F., .F.,,,,, {|Self|( oTipArt:Buscar( aGet[ 53 ] ) )}, nil, "LUPA",, 206 )












      aGet[ 38 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 38 ], , oSayAlm ), if( !uFieldEmpresa( "lNStkAct" ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 38 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ], oStkAct ), .T. ) )}, "N/W*",,,,, .F., {||     ( !aTmp[ 14 ] .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 38 ], oSayAlm ) )}, nil, "LUPA",, )




      oSayAlm := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSayAlm, cSayAlm:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 105 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 105 ], aTmp[ 105 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cObras( aGet[ 105 ], aGet[ 105 ]:oHelpText, aTmpAlb[ 6 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwObras( aGet[ 105 ], aGet[ 105 ]:oHelpText, aTmpAlb[ 6 ], dbfObrasT ) )}, nil, "LUPA",, 331 )





      oStkAct := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, nStkAct, nStkAct:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      oTotal := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nTotal, nTotal:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      aGet[ 36 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[1],, cPouDiv,,,,,,, .F., {||     ( RolesModel():getRolVerPreciosCosto( Auth():rolUuid() ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,, 321, )

      TBtnBmp():ReDefine( 322, "gc_businessman_16",,,,,{|| THistoricoProveedor():run( aTmp[ 4 ], aGet[ 36 ], aGet[ 58 ], aGet[ 117 ] ) }, oFld:aDialogs[1], .F., , .F.,  )










      aGet[ 108 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 108 ], aTmp[ 108 ]:= u ) }, oFld:aDialogs[2],, "9999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[25] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[25], aTmp[25]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





      aGet[21] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[21], aTmp[21]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[14] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[14], aTmp[14]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )






      aGet[37] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[37], aTmp[37]:= u ) }, oFld:aDialogs[2],, cPouDiv,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 60 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 60 ], aTmp[ 60 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( aGet[ 60 ], bmpImage ) ) }, .F., .F.,,,,, {|Self|( GetBmp( aGet[ 60 ], bmpImage ) )}, nil, "LUPA",, )











      aGet[ 55 ] := TGetHlp():ReDefine( ( 150 ), { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( oSayGrp:cText( RetFld( aTmp[ 55  ], oGrpFam:GetAlias() ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oGrpFam:Buscar( aGet[ 55 ] ) )}, nil, "LUPA",, )




      oSayGrp := TGetHlp():ReDefine( ( 151 ), { | u | If( PCount()==0, cSayGrp, cSayGrp:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 54 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 54 ], aTmp[ 54 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSayFam:cText( RetFld( aTmp[ 54  ], D():Familias( nView ) ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFamilia( aGet[ 54 ], oSayFam ) )}, nil, "LUPA",, )




      oSayFam := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSayFam, cSayFam:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 58 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( cProvee( aGet[ 58 ], D():Get( "Provee", nView ), aGet[ 58 ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwProvee( aGet[ 58 ], aGet[ 58 ]:oHelpText ) )}, nil, "LUPA",, 201 )




      oRentLin := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, cRentLin, cRentLin:= u ) }, oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 301, )




      aGet[ 47 ] := TCheckBox():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 48 ] := TCheckBox():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 116 ] := TCheckBox():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 116 ], aTmp[ 116 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( Auth():isSuperAdmin() .AND. nMode <> 3 )}, .F. )




      aGet[ 35 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[ 2 ],, { 350, 351, 352 },,,,, .F., {||     ( nMode <> 3 )}, )





      aGet[ 93 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      aGet[ 101 ] := TGetHlp():ReDefine( 361, { | u | If( PCount()==0, aTmp[ 101 ], aTmp[ 101 ]:= u ) }, oFld:aDialogs[2],, "@R 99:99:99", {||    ( iif(   !validTime( aTmp[ 101 ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 27 ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[2],, "@R A/XXXXXXXXX/XX",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 117 ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ 117 ], aTmp[ 117 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ 57 ] := TMultiGet():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 57 ], aTmp[ 57 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      aGet[ 89 ] := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 89 ], aTmp[ 89 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )








      aGet[ 102 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 102 ], aTmp[ 102 ]:= u ) }, oFld:aDialogs[4],,, {||    ( oCentroCoste:Existe( aGet[ 102 ], aGet[ 102 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 102 ] ) )}, nil, "LUPA",, 411 )






      oTipoCtrCoste := TComboBox():ReDefine( 140, { | u | If( PCount()==0, cTipoCtrCoste, cTipoCtrCoste:= u ) }, aTipoCtrCoste, oFld:aDialogs[4],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oTipoCtrCoste",,,,,,, )

         oTipoCtrCoste:bChange   := {|| clearGet( aGet[ 110 ] ), loadGet( aGet[ 110 ], cTipoCtrCoste ) }







      aGet[ 110 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 110 ], aTmp[ 110 ]:= u ) }, oFld:aDialogs[4],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 160 )





      bmpImage := TBitmap():ReDefine( 220,, ( cFileBitmap( cPatImg(), aTmp[ 60 ] ) ), oDlg,, { |nRow,nCol,nKeyFlags| ( bmpImage:lStretch := !bmpImage:lStretch, bmpImage:Refresh() ) }, .F., .F.,,, .F.,,, .F. )

         bmpImage:SetColor( , GetSysColor( 15 ) )





      oBtn := TButton():ReDefine( 1, {||SaveDeta( aTmp, aTmpAlb, oFld, aGet, oBrw, bmpImage, oDlg, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nStkAct, oTotal, cCodArt, oBtn, oBtnSer )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 9, {||( ChmHelp( "Añadir_v" ) )}, oDlg,,, .F.,,,, .F. )




      oBtnSer := TButton():ReDefine( 552, {||( EditarNumeroSerie( aTmp, oStock, nMode ) )}, oDlg,,, .F.,,,, .F. )



   if nMode <> 3



      oDlg:AddFastKey( 116,          {|| oBtn:SetFocus(), oBtn:Click() } )
   end

   oDlg:AddFastKey( 120,             {|| oLinDetCamposExtra:Play( if( nMode == 1, "", Str( ( dbfTmpLin )->( OrdKeyNo() ) ) ) ) } )
   oDlg:AddFastKey( 117,             {|| oBtnSer:Click() } )






   oDlg:bStart    := {||   SetDlgMode( aTmp, aTmpAlb, nMode, aGet, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, oTotal, oRentLin ), if( !empty( cCodArtEnt ), aGet[ 4 ]:lValid(), ), loadGet( aGet[ 110 ], cTipoCtrCoste ), aGet[ 110 ]:lValid(), lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( menuEdtDet( aGet[ 4 ], oDlg, , if( nMode == 1, "", Str( ( dbfTmpLin )->( OrdKeyNo() ) ) ) ) )}, oDlg:bRClicked,,, )


   if !Empty( oDetMenu )
      oDetMenu:End()
   end

RETURN ( oDlg:nResult == 1 )



Static Function runMasiveAppendLines( oDialog, aCabeceraAlbaran )

   oDialog:cleanErrors()

   if !empty( oDialog:cGet )
      oneAppendLine( aCabeceraAlbaran, oDialog:cGet )
      oDialog:cleanGet()
   end

   if !empty( oDialog:cGetRelacion )
      masiveAppendLines( aCabeceraAlbaran, oDialog )
      oDialog:cleanGet()
   end

RETURN ( nil )



Static Function masiveAppendLines( aCabeceraAlbaran, oDialog )

   local aArticulo
   local aRelacion
   local aArticulos
   local aRelaciones
   local cRelaciones       := oDialog:cGetRelacion

   oDialog:cleanErrors()

   aRelaciones             := hb_atokens( cRelaciones, Chr(13)+Chr(10) )

   for each aRelacion in aRelaciones

      aArticulo           := hb_atokens( aRelacion, "," )

      if isArray( aArticulo ) .AND. len( aArticulo ) >= 2 .AND. !empty( aArticulo[1] ) .AND. !empty( aArticulo[2] )
         if !( oneAppendLine( aCabeceraAlbaran, aArticulo[1], val( aArticulo[2] ) ) )
            msgStop("- Error al añadir el artículo " + alltrim( aArticulo[1] ) )
            aadd( oDialog:aErrors, "- Error al añadir el artículo " + alltrim( aArticulo[1] ) )
         end
      end

   next

RETURN ( nil )



Static Function oneAppendLine( aCabeceraAlbaran, cCodigoArticulo, nUnidadesArticulos )

   local aLineasAlbaranes

   If( nUnidadesArticulos == nil, nUnidadesArticulos := 1, ) ;

   aLineasAlbaranes              := dbBlankRec( dbfAlbCliL )

   setDlgMode( aLineasAlbaranes, aCabeceraAlbaran, 1 )

   if loaArt( cCodigoArticulo, aLineasAlbaranes, nil, aCabeceraAlbaran )

      aLineasAlbaranes[ 19 ] := nUnidadesArticulos

      saveDeta( aLineasAlbaranes, aCabeceraAlbaran, , , , , , 1 )

      if !empty( oBrwLin )
         oBrwLin:Refresh()
      end

      recalculaTotal( aCabeceraAlbaran )

      return ( .T. )

   end

RETURN ( .F. )



Static Function EdtInc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlb )

   local oDlg

   if nMode == 1
      aTmp[ 1  ] := aTmpAlb[ 1 ]
      aTmp[ 2  ] := aTmpAlb[ 2 ]
      aTmp[ 3  ] := aTmpAlb[ 3 ]
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "incidencias de albaranes a clientes", "INCIDENCIA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||        ( nMode <> 3 )}, .F. )





      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||        ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||        ( nMode <> 3 )}, .F. )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||        ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function EdtEst( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlb )

      local oDlg

      if nMode == 1

         aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("tFecSit")) ]   := GetSysTime()

    end

      oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Situación del documento del cliente", "SITUACION_ESTADO",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






         aGet[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("cSitua")) ] := TComboBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("cSitua")) ], aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("cSitua")) ]:= u ) }, ( SituacionesModel():getArrayNombres() ), oDlg,,,,,,, .F., {||     ( nMode <> 3 )},,,,,, 'aGet[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("cSitua")) ]',,,,,,, )







         aGet[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("dFecSit")) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("dFecSit")) ], aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("dFecSit")) ]:= u ) }, oDlg,,,,,,,,, .F., {||  ( nMode <> 3 )},, .F., .T.,,,,, {|Self|aGet[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("dFecSit")) ]:cText( Calendario( aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("dFecSit")) ] ) )}, nil,,, )









         aGet[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("tFecSit")) ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("tFecSit")) ], aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("tFecSit")) ]:= u ) }, oDlg,, "@R 99:99:99", {||    ( iif( !validTime( aTmp[ (D():AlbaranesClientesSituaciones( nView ))->(fieldpos("tFecSit")) ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





         TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpEst, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





         TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpEst, oBrw, nMode ), oDlg:end( 1 ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( .T. )



Static Function EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de albaranes de clientes", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | *.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )







static function nTotalUnd( nAlbaran, cPicUnd )

   local nTotUnd  := 0
   local nRecNum  := ( D():Get( "AlbCliL", nView ) )->( RecNo() )

   if ( D():Get( "AlbCliL", nView ) )->( DbSeek( nAlbaran ) )
      while  ( D():Get( "AlbCliL", nView ) )->CSERALB + Str( ( D():Get( "AlbCliL", nView ) )->NNUMALB ) + ( D():Get( "AlbCliL", nView ) )->CSUFALB == nAlbaran .AND. ( D():Get( "AlbCliL", nView ) )->( !eof() )
         nTotUnd  += nTotNAlbCli( D():Get( "AlbCliL", nView ) )
         ( D():Get( "AlbCliL", nView ) )->( dbSkip() )
      end
   end

   ( D():Get( "AlbCliL", nView ) )->( dbGoTo( nRecNum ) )

RETURN ( Trans( nTotUnd, cPicUnd ) )







function nTotalPesoAlbaranCliente( nAlbaran, nView, cPicUnd )

   local nTotPeso    := 0

   if ( D():AlbaranesClientesLineas( nView ) )->( dbSeek( nAlbaran ) )
      while D():AlbaranesClientesLineasId( nView ) == nAlbaran .AND. ( D():AlbaranesClientesLineas( nView ) )->( !eof() )
         nTotPeso    += nPesLAlbCli( D():AlbaranesClientesLineas( nView ) )
         ( D():AlbaranesClientesLineas( nView ) )->( dbSkip() )
      end
   end

RETURN ( if( empty( cPicUnd ), nTotPeso, Trans( nTotPeso, cPicUnd ) ) )



Static Function QuiAlbCli()

   local nOrdLin
   local nOrdInc
   local nOrdDoc
   local nOrdSer
   local cNumAlb
   local cNumPed
   local cNumSat
   local aNumPed

   if ( D():Get( "AlbCliT", nView ) )->lCloAlb .AND. !oUser():lAdministrador()
      msgStop( "Solo pueden eliminar albarares cerrados los administradores." )
      Return .F.
   end

   CursorWait()

   aNumPed        := {}
   cNumAlb        := ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb
   cNumPed        := ( D():Get( "AlbCliT", nView ) )->cNumPed
   cNumSat        := ( D():Get( "AlbCliT", nView ) )->cNumSat
   nOrdLin        := ( D():Get( "AlbCliL", nView ) )->( OrdSetFocus( "nNumAlb" ) )
   nOrdInc        := ( D():Get( "AlbCliI", nView ) )->( OrdSetFocus( "nNumAlb" ) )
   nOrdDoc        := ( D():Get( "AlbCliD", nView ) )->( OrdSetFocus( "nNumAlb" ) )
   nOrdSer        := ( D():Get( "AlbCliS", nView ) )->( OrdSetFocus( "nNumAlb" ) )

   TComercio:resetProductsToUpdateStocks()



   while ( D():Get( "AlbCliL", nView ) )->( dbSeek( cNumAlb ) ) .AND. !( D():Get( "AlbCliL", nView ) )->( eof() )

      if aScan( aNumPed, ( D():Get( "AlbCliL", nView ) )->cNumPed ) == 0
         aAdd( aNumPed, ( D():Get( "AlbCliL", nView ) )->cNumPed )
      end

      TComercio:appendProductsToUpadateStocks( ( D():Get( "AlbCliL", nView ) )->cRef, nView )

      if dbLock( D():Get( "AlbCliL", nView ) )
         ( D():Get( "AlbCliL", nView ) )->( dbDelete() )
         ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
      end

   end





   while ( D():Get( "AlbCliI", nView ) )->( dbSeek( cNumAlb ) ) .AND. !( D():Get( "AlbCliI", nView ) )->( eof() )
      if dbLock( D():Get( "AlbCliI", nView ) )
         ( D():Get( "AlbCliI", nView ) )->( dbDelete() )
         ( D():Get( "AlbCliI", nView ) )->( dbUnLock() )
      end
   end





   while ( D():Get( "AlbCliD", nView ) )->( dbSeek( cNumAlb ) ) .AND. !( D():Get( "AlbCliD", nView ) )->( eof() )
      if dbLock( D():Get( "AlbCliD", nView ) )
         ( D():Get( "AlbCliD", nView ) )->( dbDelete() )
         ( D():Get( "AlbCliD", nView ) )->( dbUnLock() )
      end
   end





   while ( D():Get( "AlbCliS", nView ) )->( dbSeek( cNumAlb ) ) .AND. !( D():Get( "AlbCliS", nView ) )->( eof() )
      if dbLock( D():Get( "AlbCliS", nView ) )
         ( D():Get( "AlbCliS", nView ) )->( dbDelete() )
         ( D():Get( "AlbCliS", nView ) )->( dbUnLock() )
      end
   end





   if !empty( cNumPed )
      oStock:SetEstadoPedCli( cNumPed, .T., cNumAlb )
   end





   if !empty( cNumSat ) .AND. dbSeekInOrd( cNumSat, "nNumSat", D():SatClientes( nView ) )
      if dbLock( D():SatClientes( nView ) )
         ( D():SatClientes( nView ) )->cNumAlb    := ""
         ( D():SatClientes( nView ) )->lEstado    := .F.
         ( D():SatClientes( nView ) )->( dbUnLock() )
      end
   end





   for each cNumPed in aNumPed
      oStock:SetEstadoPedCli( cNumPed )
   next



   TComercio:updateWebProductStocks()





   ( D():Get( "AlbCliL", nView ) )->( OrdSetFocus( nOrdLin ) )
   ( D():Get( "AlbCliI", nView ) )->( OrdSetFocus( nOrdInc ) )
   ( D():Get( "AlbCliD", nView ) )->( OrdSetFocus( nOrdDoc ) )
   ( D():Get( "AlbCliS", nView ) )->( OrdSetFocus( nOrdSer ) )

   CursorWE()

Return .T.






STATIC FUNCTION cPedCli( aGet, aTmp, oBrwLin, nMode )

   local nDiv
   local cDesAlb
   local nTotRet
   local cPedido  := aGet[ 30 ]:VarGet()
   local lValid   := .F.
   local oWaitMeter

   if nMode <> 1 .OR. empty( cPedido )
      Return .T.
   end

   if !( dbSeekInOrd( cPedido, "nNumPed", dbfPedCliT ) )
      msgStop( "Pedido " + cPedido + " no existe" )
      Return .T.
   end

   if ( dbfPedCliT )->nEstado == 3
      msgStop( "Pedido " + cPedido + " ya fue recibido" )
      Return .T.
   end

   if ( ConfiguracionesEmpresaModel():getLogic( "lPasPrepare", .F. ) .AND. ( dbfPedCliT )->nPrepare < 3 )
      msgStop( "Pedido " + cPedido + " no preparado para albaranar" )
      Return .T.
   end

   CursorWait()

   aGet[ 1 ]:cText( (dbfPedCliT)->cSerPed )
   aGet[ 30 ]:bWhen := {|| .F. }

   aGet[ 6 ]:cText( (dbfPedCliT)->CCODCLI )
   aGet[ 6 ]:lValid()
   aGet[ 6 ]:Disable()

   aGet[ 9 ]:cText( (dbfPedCliT)->CNOMCLI )
   aGet[ 10 ]:cText( (dbfPedCliT)->CDIRCLI )
   aGet[ 11 ]:cText( (dbfPedCliT)->CPOBCLI )
   aGet[ 12 ]:cText( (dbfPedCliT)->CPRVCLI )
   aGet[ 13 ]:cText( (dbfPedCliT)->CPOSCLI )
   aGet[ 14 ]:cText( (dbfPedCliT)->CDNICLI )
   aGet[ 7 ]:cText( (dbfPedCliT)->CCODALM )
   aGet[ 88 ]:cText( (dbfPedCliT)->CTLFCLI )
   aGet[ 7 ]:lValid()

   aGet[ 8 ]:cText( (dbfPedCliT)->cCodCaj )
   aGet[ 8 ]:lValid()

   aGet[ 23]:cText( (dbfPedCliT)->CCODPGO )
   aGet[ 23]:lValid()

   aGet[ 26 ]:cText( (dbfPedCliT)->CCODAGE )
   aGet[ 26 ]:lValid()

   aGet[ 51 ]:cText( ( dbfPedCliT )->nPctComAge )

   aGet[ 28 ]:cText( (dbfPedCliT)->CCODTAR )
   aGet[ 28 ]:lValid()

   aGet[ 27 ]:cText( (dbfPedCliT)->CCODOBR )
   aGet[ 27 ]:lValid()

   oGetTarifa:setTarifa( ( dbfPedCliT )->nTarifa )

   aGet[ 67 ]:cText( ( dbfPedCliT )->cCodTrn )
   aGet[ 67 ]:lValid()

   aGet[ 59 ]:Click( ( dbfPedCliT )->lIvaInc )
   aGet[ 50]:Click( ( dbfPedCliT )->lRecargo )
   aGet[ 94 ]:Click( ( dbfPedCliT )->lOperPv )





   aGet[ 20 ]:cText( ( dbfPedCliT )->cCondEnt )
   aGet[ 21  ]:cText( ( dbfPedCliT )->mComent )
   aGet[ 22  ]:cText( ( dbfPedCliT )->mObserv )





   aGet[ 37 ]:cText( ( dbfPedCliT )->cDtoEsp )
   aGet[ 38 ]:cText( ( dbfPedCliT )->nDtoEsp )
   aGet[ 39    ]:cText( ( dbfPedCliT )->cDpp    )
   aGet[ 40    ]:cText( ( dbfPedCliT )->nDpp    )
   aGet[ 41 ]:cText( ( dbfPedCLiT )->cDtoUno )
   aGet[ 42 ]:cText( ( dbfPedCLiT )->nDtoUno )
   aGet[ 43 ]:cText( ( dbfPedCLiT )->cDtoDos )
   aGet[ 44 ]:cText( ( dbfPedCLiT )->nDtoDos )
   aGet[ 85 ]:cText( ( dbfPedCliT )->cManObr )
   aGet[ 65 ]:cText( ( dbfPedCliT )->nIvaMan )
   aGet[ 66 ]:cText( ( dbfPedCliT )->nManObr )
   aGet[ 24 ]:cText( ( dbfPedCliT )->nBultos )

   aTmp[ 58 ]                := ( dbfPedCliT )->cSuPed





   aTmp[ 74 ]               := ( dbfPedCliT )->cCodGrp
   aTmp[ 15 ]               := ( dbfPedCliT )->lModCli
   aTmp[ 94 ]               := ( dbfPedCliT )->lOperPv





   aTmp[ 84 ]            := ( dbfPedCliT )->lAlquiler
   aTmp[ 82  ]            := ( dbfPedCliT )->dFecEntr
   aTmp[ 83   ]            := ( dbfPedCliT )->dFecSal

   if !empty( oTipAlb )
      if ( dbfPedCliT )->lAlquiler
         oTipAlb:Select( 2 )
      else
         oTipAlb:Select( 1 )
      end
   end





   if ( dbfPedCliL )->( dbSeek( cPedido ) )

      if lNumPed()
         ( dbfTmpLin )->( dbAppend() )
         cDesAlb                 := Rtrim( cNumPed() )
         cDesAlb                 += " PEDIDO " + Rtrim( cNumPed() ) + Space( 1 ) + ( dbfPedCliT )->cSerPed + "/" + AllTrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + ( dbfPedCliT )->cSufPed
         cDesAlb                 += " - FECHA " + Dtoc( ( dbfPedCliT )->dFecPed )
         cDesAlb                 += " - SU PEDIDO  " + AllTrim( ( dbfPedCliT )->cSuPed )
         (dbfTmpLin)->cDetalle   := cDesAlb
         (dbfTmpLin)->lControl   := .T.
      end

      oWaitMeter        := TWaitMeter():New( "Añadiendo lineas", "Espere por favor..." )
      oWaitMeter:run()
      oWaitMeter:setTotal( 100 )

      while ( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cPedido )

         if ( !ConfiguracionesEmpresaModel():getLogic( "lPasPrepare", .F. ) .OR. ( ( dbfPedCliL )->lPreparado .OR. ( dbfPedCliL )->lKitChl ) )

            nTotRet                 := nTotNPedCli( dbfPedCliL )

            nTotRet                 -= AlbaranesClientesLineasModel():nUnidadesEntregadas( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cValPr1, ( dbfPedCliL )->cValPr2, ( dbfPedCliL )->cLote )
            nTotRet                 -= FacturasClientesLineasModel():nUnidadesEntregadas( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cValPr1, ( dbfPedCliL )->cValPr2, ( dbfPedCliL )->cLote )

            if nTotRet > 0

               (dbfTmpLin)->( dbAppend() )

               (dbfTmpLin)->nNumAlb    := 0
               (dbfTmpLin)->cNumPed    := cPedido
               (dbfTmpLin)->nNumLin    := (dbfPedCliL)->nNumLin
               (dbfTmpLin)->nPosPrint  := (dbfPedCliL)->nPosPrint
               (dbfTmpLin)->cRef       := (dbfPedCliL)->cRef
               (dbfTmpLin)->cDetalle   := (dbfPedCliL)->cDetalle
               (dbfTmpLin)->mLngDes    := (dbfPedCliL)->mLngDes
               (dbfTmpLin)->mNumSer    := (dbfPedCliL)->mNumSer
               (dbfTmpLin)->nPreUnit   := (dbfPedCliL)->nPreDiv
               (dbfTmpLin)->nPntVer    := (dbfPedCliL)->nPntVer
               (dbfTmpLin)->nImpTrn    := (dbfPedCliL)->nImpTrn
               (dbfTmpLin)->nUndKit    := (dbfPedCliL)->nUndKit
               (dbfTmpLin)->nPesoKg    := (dbfPedCliL)->nPesoKg
               (dbfTmpLin)->cPesoKg    := (dbfPedCliL)->cPesoKg
               (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad
               (dbfTmpLin)->nVolumen   := (dbfPedCliL)->nVolumen
               (dbfTmpLin)->cVolumen   := (dbfPedCliL)->cVolumen
               (dbfTmpLin)->nIva       := (dbfPedCliL)->nIva
               (dbfTmpLin)->nReq       := (dbfPedCliL)->nReq
               (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad
               (dbfTmpLin)->nDto       := (dbfPedCliL)->nDto
               (dbfTmpLin)->nDtoPrm    := (dbfPedCliL)->nDtoPrm
               (dbfTmpLin)->nComAge    := (dbfPedCliL)->nComAge
               (dbfTmpLin)->lTotLin    := (dbfPedCliL)->lTotLin
               (dbfTmpLin)->nDtoDiv    := (dbfPedCliL)->nDtoDiv
               (dbfTmpLin)->nCtlStk    := (dbfPedCliL)->nCtlStk
               (dbfTmpLin)->nCosDiv    := (dbfPedCliL)->nCosDiv
               (dbfTmpLin)->nPvpRec    := (dbfPedCliL)->nPvpRec
               (dbfTmpLin)->id_tipo_v  := (dbfPedCliL)->id_tipo_v
               (dbfTmpLin)->cAlmLin    := (dbfPedCliL)->cAlmLin
               (dbfTmpLin)->lIvaLin    := (dbfPedCliL)->lIvaLin
               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp
               (dbfTmpLin)->nValImp    := (dbfPedCliL)->nValImp
               (dbfTmpLin)->lLote      := (dbfPedCliL)->lLote
               (dbfTmpLin)->nLote      := (dbfPedCliL)->nLote
               (dbfTmpLin)->cLote      := (dbfPedCliL)->cLote
               (dbfTmpLin)->lKitArt    := (dbfPedCliL)->lKitArt
               (dbfTmpLin)->lKitChl    := (dbfPedCliL)->lKitChl
               (dbfTmpLin)->lKitPrc    := (dbfPedCliL)->lKitPrc
               (dbfTmpLin)->lMsgVta    := (dbfPedCliL)->lMsgVta
               (dbfTmpLin)->lNotVta    := (dbfPedCliL)->lNotVta
               (dbfTmpLin)->cCodPr1    := (dbfPedCliL)->cCodPr1
               (dbfTmpLin)->cCodPr2    := (dbfPedCliL)->cCodPr2
               (dbfTmpLin)->cValPr1    := (dbfPedCliL)->cValPr1
               (dbfTmpLin)->cValPr2    := (dbfPedCliL)->cValPr2
               (dbfTmpLin)->lImpLin    := (dbfPedCliL)->lImpLin
               (dbfTmpLin)->cCodTip    := (dbfPedCliL)->cCodTip
               (dbfTmpLin)->mObsLin    := (dbfPedCliL)->mObsLin
               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip
               (dbfTmpLin)->cCodPrv    := (dbfPedCliL)->cCodPrv
               (dbfTmpLin)->cImagen    := (dbfPedCliL)->cImagen
               (dbfTmpLin)->cCodFam    := (dbfPedCliL)->cCodFam
               (dbfTmpLin)->cGrpFam    := (dbfPedCliL)->cGrpFam
               (dbfTmpLin)->cRefPrv    := (dbfPedCliL)->cRefPrv
               (dbfTmpLin)->dFecEnt    := (dbfPedCliL)->dFecEnt
               (dbfTmpLin)->dFecSal    := (dbfPedCliL)->dFecSal
               (dbfTmpLin)->nPreAlq    := (dbfPedCliL)->nPreAlq
               (dbfTmpLin)->lAlquiler  := (dbfPedCliL)->lAlquiler
               (dbfTmpLin)->nNumMed    := (dbfPedCliL)->nNumMed
               (dbfTmpLin)->nMedUno    := (dbfPedCliL)->nMedUno
               (dbfTmpLin)->nMedDos    := (dbfPedCliL)->nMedDos
               (dbfTmpLin)->nMedTre    := (dbfPedCliL)->nMedTre
               (dbfTmpLin)->nPuntos    := (dbfPedCliL)->nPuntos
               (dbfTmpLin)->nValPnt    := (dbfPedCliL)->nValPnt
               (dbfTmpLin)->nDtoPnt    := (dbfPedCliL)->nDtoPnt
               (dbfTmpLin)->nIncPnt    := (dbfPedCliL)->nIncPnt
               (dbfTmpLin)->lControl   := (dbfPedCliL)->lControl
               (dbfTmpLin)->lLinOfe    := (dbfPedCliL)->lLinOfe
               (dbfTmpLin)->nBultos    := (dbfPedCliL)->nBultos
               (dbfTmpLin)->cFormato   := (dbfPedCliL)->cFormato
               (dbfTmpLin)->cObrLin    := (dbfPedCliL)->cObrLin
               (dbfTmpLin)->cRefAux    := (dbfPedCliL)->cRefAux
               (dbfTmpLin)->cRefAux2   := (dbfPedCliL)->cRefAux2
               (dbfTmpLin)->cCtrCoste  := (dbfPedCliL)->cCtrCoste
               (dbfTmpLin)->cTipCtr    := (dbfPedCliL)->cTipCtr
               (dbfTmpLin)->cTerCtr    := (dbfPedCliL)->cTerCtr
               (dbfTmpLin)->nNumKit    := (dbfPedCliL)->nNumKit

               if !( dbfPedCliL )->lKitArt





                  if lCalCaj()

                     nDiv                       := DecimalMod( nTotRet, ( dbfPedCliL )->nCanPed )
                     if nDiv == 0 .AND. ( dbfPedCliL )->nCanPed <> 0
                        ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed
                        ( dbfTmpLin )->nUniCaja := nTotRet / ( dbfPedCliL )->nCanPed
                     else
                        ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed
                        ( dbfTmpLin )->nUniCaja := nTotRet
                     end

                  else

                     ( dbfTmpLin )->nCanEnt     := ( dbfPedCliL )->nCanPed
                     ( dbfTmpLin )->nUniCaja    := nTotRet

                  end

               else

                  ( dbfTmpLin )->nCanEnt        := ( dbfPedCliL )->nCanPed
                  ( dbfTmpLin )->nUniCaja       := ( dbfPedCliL )->nUniCaja

               end

            end

         end

         oWaitMeter:autoInc()

         ( dbfPedCliL )->( dbSkip( 1 ) )

      end

      oWaitMeter:end()

      ( dbfTmpLin )->( dbGoTop() )





      if ( dbfPedCliI )->( dbSeek( cPedido ) )

         while ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cPedido .AND. !( dbfPedCliI )->( Eof() )
            dbPass( dbfPedCliI, dbfTmpInc, .T. )
            ( dbfPedCliI )->( dbSkip() )
         end

      end

      ( dbfPedCliI )->( dbGoTop() )





      if ( dbfPedCliD )->( dbSeek( cPedido ) )

         while ( dbfPedCliD )->cSerPed + Str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed == cPedido .AND. !( dbfPedCliD )->( Eof() )
            dbPass( dbfPedCliD, dbfTmpDoc, .T. )
            ( dbfPedCliD )->( dbSkip() )
         end

      end

      ( dbfPedCliD )->( dbGoTop() )





      oBrwLin:Refresh()
      oBrwLin:SetFocus()

   end

   lValid   := .T.

   aGet[ 30 ]:Disable()

   CursorWE()

RETURN lValid



STATIC FUNCTION SelSend( oBrw )

   local oDlg
   local oFecEnv
   local dFecEnv  := GetSysDate()

   if RolesModel():getRolNoAlbaranEntregado( Auth():rolUuid() )
      msgStop( "Sin autorización para cambio de entrega." )
      RETURN ( nil )
   end

   if dbDialogLock( D():Get( "AlbCliT", nView ) )

      if ( D():Get( "AlbCliT", nView ) )->lEntregado

         ( D():Get( "AlbCliT", nView ) )->lEntregado := !( D():Get( "AlbCliT", nView ) )->lEntregado
         ( D():Get( "AlbCliT", nView ) )->dFecEnv    := Ctod( "" )

      else

         oDlg = TDialog():New(,,,, "Fecha entrega", "ENVIADO",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






            oFecEnv := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, dFecEnv, dFecEnv:= u ) }, oDlg,,,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil, "LUPA",, )







            TButton():ReDefine( 501, {||(  ( D():Get( "AlbCliT", nView ) )->lEntregado := !( D():Get( "AlbCliT", nView ) )->lEntregado , ( D():Get( "AlbCliT", nView ) )->dFecEnv    := dFecEnv , ( D():Get( "AlbCliT", nView ) )->lSndDoc    := .T. , oDlg:end() )}, oDlg,,, .F.,,,, .F. )




            TButton():ReDefine( 502, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

         oDlg:AddFastKey( 116, {|| ( D():Get( "AlbCliT", nView ) )->lEntregado := !( D():Get( "AlbCliT", nView ) )->lEntregado , ( D():Get( "AlbCliT", nView ) )->dFecEnv    := dFecEnv , ( D():Get( "AlbCliT", nView ) )->lSndDoc    := .T. , oDlg:end() } )

         oDlg:bStart := { || oFecEnv:SetFocus() }

         oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

      end

   ( D():Get( "AlbCliT", nView ) )->( dbUnLock() )

   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL






STATIC FUNCTION GrpPed( aGet, aTmp, oBrw )

   local oDlg
   local nDiv
   local nItem       := 1
   local cCodAge
   local oBrwLin
   local nOrdAnt
   local nNumLin
   local nPosPrint
   local lCodAge     := .F.
   local nOffSet     := 0
   local cDesAlb     := ""
   local cCodCli     := aGet[ 6 ]:varGet()
   local nTotPed
   local nTotRec
   local nTotPdt
   local lAlquiler   := .F.
   local cCliente    := RTrim( aTmp[ 9 ] )
   local cObra       := if( empty( aTmp[ 27 ] ), "Todas", Rtrim( aTmp[ 27 ] ) )
   local cIva        := cImp() + Space( 1 ) + if( aTmp[ 59 ], "Incluido", "Desglosado" )

   aPedidos          := {}

   if empty( cCodCli )
      msgStop( "Es necesario codificar un cliente", "Agrupar pedidos" )
      return .T.
   end

   if !empty( aGet[ 30 ]:VarGet() )
      msgStop( "Ya ha importado un pedido", "Agrupar pedidos" )
      return .T.
   end

   if !empty( oTipAlb ) .AND. oTipAlb:nAt == 2
      lAlquiler      := .T.
   end






   nOrdAnt           := ( dbfPedCliT )->( ordSetFocus( "cCodCli" ) )

   if ( dbfPedCliT )->( dbSeek( cCodCli ) )

      while ( dbfPedCliT )->cCodCli == cCodCli .AND. ( dbfPedCliT )->( !eof() )





         if ( dbfPedCliT )->lAlquiler == lAlquiler                                              .AND. ( dbfPedCliT )->nEstado <> 3                                                        .AND. ( dbfPedCliT )->lIvaInc == aTmp[ 59 ]                                         .AND. if( empty( aTmp[ 27 ] ), .T., ( dbfPedCliT )->cCodObr == aTmp[ 27 ] )   .AND. aScan( aNumPed, ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) == 0










            aAdd( aPedidos,    {  .F. , ( if( ( dbfPedCliT )->nEstado == 1, 3, ( dbfPedCliT )->nEstado ) ), ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, ( dbfPedCliT )->dFecPed , ( dbfPedCliT )->cCodCli , ( dbfPedCliT )->cNomCli , ( dbfPedCliT )->cCodObr , RetObras( ( dbfPedCliT )->cCodCli, ( dbfPedCliT )->cCodObr, dbfObrasT ), ( dbfPedCliT )->cCodAge , ( dbfPedCliT )->cSuPed  } )

         endif

         ( dbfPedCliT )->( dbSkip( 1 ) )

      end

   end

   ( dbfPedCliT )->( ordSetFocus( nOrdAnt ) )





   if Len( aPedidos ) == 0
      msgStop( "No existen pedidos pendientes de albaranar de este cliente" )
      return .T.
   end








   oDlg = TDialog():New(,,,, "Agrupando pedidos", "SET_ALBARAN",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



      TSay():ReDefine( 501, {|| cCliente}, oDlg,,,, .F.,, .F., .F., )



      TSay():ReDefine( 502, {|| cObra}, oDlg,,,, .F.,, .F., .F., )



      TSay():ReDefine( 503, {|| cIva}, oDlg,,,, .F.,, .F., .F., )

      oBrwLin                       := IXBrowse():New( oDlg )

      oBrwLin:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLin:SetArray( aPedidos, , , .F. )
      oBrwLin:lHscroll              := .F.

      oBrwLin:nMarqueeStyle         := 5
      oBrwLin:lRecordSelector       := .F.

      oBrwLin:CreateFromResource( 130 )

      oBrwLin:bLDblClick            := {|| aPedidos[ oBrwLin:nArrayAt, 1 ] := !aPedidos[ oBrwLin:nArrayAt, 1 ], oBrwLin:refresh() }

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Seleccionado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| aPedidos[ oBrwLin:nArrayAt, 1 ] }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Estado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( aPedidos[ oBrwLin:nArrayAt, 2 ] == 2 ) }
         :nWidth           := 20
         :SetCheck( { "gc_shape_square_12", "gc_delete_12" } )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Número"
         :bEditValue       := {|| aPedidos[ oBrwLin:nArrayAt, 3 ] }
         :cEditPicture     := "@R A/XXXXXXXXX/XX"
         :nWidth           := 80
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Fecha"
         :bEditValue       := {|| Dtoc( aPedidos[ oBrwLin:nArrayAt, 4 ] ) }
         :nWidth           := 80
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Cliente"
         :bEditValue       := {|| Rtrim( aPedidos[ oBrwLin:nArrayAt, 5 ] ) + Space(1) + aPedidos[ oBrwLin:nArrayAt, 6 ] }
         :nWidth           := 250
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Dirección"
         :bEditValue       := {|| Rtrim( aPedidos[ oBrwLin:nArrayAt, 7 ] ) + Space(1) + aPedidos[ oBrwLin:nArrayAt, 8 ] }
         :nWidth           := 220
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Agente"
         :bEditValue       := {|| aPedidos[ oBrwLin:nArrayAt, 9 ] }
         :lHide            := .T.
         :nWidth           := 60
      end






      TButton():ReDefine( 514, {||(  aPedidos[ oBrwLin:nArrayAt, 1 ] := !aPedidos[ oBrwLin:nArrayAt, 1 ], oBrwLin:refresh(), oBrwLin:setFocus() )}, oDlg,,, .F.,,,, .F. )






      TButton():ReDefine( 516, {||(  aEval( aPedidos, { |aItem| aItem[1] := .T. } ), oBrwLin:refresh(), oBrwLin:setFocus() )}, oDlg,,, .F.,,,, .F. )






      TButton():ReDefine( 517, {||(  aEval( aPedidos, { |aItem| aItem[1] := .F. } ), oBrwLin:Refresh(), oBrwLin:SetFocus() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult <> 1
      aPedidos  := {}
   end





   if oDlg:nResult == 1 .AND. Len( aPedidos ) >= 1

      CursorWait()

      HideImportacion( aGet )





      for nItem := 1 to Len( aPedidos )

         if ( aPedidos[ nItem, 1 ] )

            aAdd( aNumPed, aPedidos[ nItem, 3 ] )

            if empty( cCodAge )
               cCodAge  := aPedidos[ nItem, 9 ]
            end

            if cCodAge <> aPedidos[ nItem, 9 ]
               lCodAge  := .T.
            end

         end

      next

      if lCodAge
         MsgInfo( "Existen conflictos de agentes" )
      end

      for nItem := 1 to Len( aPedidos )





         if !lCodAge .AND. cCodAge <> nil
            aGet[ 26 ]:cText( cCodAge )
            aGet[ 26 ]:lValid()
         end

         if ( dbfPedCliT )->( dbSeek( aPedidos[ nItem, 3 ] ) ) .AND. aPedidos[ nItem, 1 ]

            if ( dbfPedCliT )->lRecargo
               aTmp[ 50 ] := .T.
               aGet[ 50 ]:Refresh()
            end

            if ( dbfPedCliT )->lOperPv
               aTmp[ 94 ] := .T.
               aGet[ 94 ]:Refresh()
            end

         end





         if ( dbfPedCliL )->( dbSeek( aPedidos[ nItem, 3] ) ) .AND. aPedidos[ nItem, 1]





            nNumLin                    := nil
            nPosPrint                  := nil

            if lNumPed()
               (dbfTmpLin)->( dbAppend() )
               cDesAlb                 := Rtrim( cNumPed() )
               cDesAlb                 += " PEDIDO " + Alltrim( StrTran( Trans( aPedidos[ nItem, 3 ], "@R A/XXXXXXXXX/XX" ), " ", "" ) )
               cDesAlb                 += " - FECHA " + Dtoc( aPedidos[ nItem, 4] )
               cDesAlb                 += " - SU PEDIDO  " + AllTrim( aPedidos[ nItem, 10] )
               (dbfTmpLin)->mLngDes    := cDesAlb
               (dbfTmpLin)->lControl   := .T.
               (dbfTmpLin)->nNumLin    := ++nOffSet
               (dbfTmpLin)->nPosPrint  := nOffSet
            end





            while ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == aPedidos[ nItem, 3]

               if ( !ConfiguracionesEmpresaModel():getLogic( "lPasPrepare", .F. ) .OR. ( dbfPedCliL )->lPreparado )

                  if aPedidos[ nItem, 2 ] == 2

                     nTotPed              := nTotNPedCli( dbfPedCliL )
                     nTotRec              := AlbaranesClientesLineasModel():nUnidadesEntregadas( aPedidos[ nItem, 3 ], ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cValPr1, ( dbfPedCliL )->cValPr2, ( dbfPedCliL )->cLote )
                     nTotRec              += FacturasClientesLineasModel():nUnidadesEntregadas( aPedidos[ nItem, 3 ], ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cValPr1, ( dbfPedCliL )->cValPr2, ( dbfPedCliL )->cLote )

                     nTotPdt              := nTotPed - nTotRec

                     if nTotPdt > 0

                        if nNumLin <> (dbfPedCliL)->nNumLin
                           ++nOffSet
                           nNumLin        := (dbfPedCliL)->nNumLin
                        end

                        ( dbfTmpLin )->( dbAppend() )

                        ( dbfTmpLin )->cNumPed  := aPedidos[ nItem, 3]

                        (dbfTmpLin)->nNumAlb    := 0
                        (dbfTmpLin)->nNumLin    := nOffSet
                        (dbfTmpLin)->nPosPrint  := nOffSet
                        (dbfTmpLin)->cRef       := (dbfPedCliL)->cRef
                        (dbfTmpLin)->cDetalle   := (dbfPedCliL)->cDetalle
                        (dbfTmpLin)->mLngDes    := (dbfPedCliL)->mLngDes
                        (dbfTmpLin)->nPreUnit   := (dbfPedCliL)->nPreDiv
                        (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad
                        (dbfTmpLin)->nPesoKg    := (dbfPedCliL)->nPesoKg
                        (dbfTmpLin)->cPesoKg    := (dbfPedCliL)->cPesoKg
                        (dbfTmpLin)->nVolumen   := (dbfPedCliL)->nVolumen
                        (dbfTmpLin)->cVolumen   := (dbfPedCliL)->cVolumen
                        (dbfTmpLin)->lIvaLin    := (dbfPedCliL)->lIvaLin
                        (dbfTmpLin)->nIva       := (dbfPedClil)->nIva
                        (dbfTmpLin)->nReq       := (dbfPedClil)->nReq
                        (dbfTmpLin)->nDto       := (dbfPedClil)->nDto
                        (dbfTmpLin)->nPntVer    := (dbfPedCliL)->nPntVer
                        (dbfTmpLin)->nImpTrn    := (dbfPedCliL)->nImpTrn
                        (dbfTmpLin)->nDtoPrm    := (dbfPedCliL)->nDtoPrm
                        (dbfTmpLin)->nComAge    := (dbfPedCliL)->nComAge
                        (dbfTmpLin)->dFecHa     := (dbfPedCliL)->dFecha
                        (dbfTmpLin)->id_tipo_v  := (dbfPedCliL)->id_tipo_v
                        (dbfTmpLin)->nDtoDiv    := (dbfPedCliL)->nDtoDiv
                        (dbfTmpLin)->nUndKit    := (dbfPedCliL)->nUndKit
                        (dbfTmpLin)->lKitArt    := (dbfPedCliL)->lKitArt
                        (dbfTmpLin)->lKitChl    := (dbfPedCliL)->lKitChl
                        (dbfTmpLin)->lKitPrc    := (dbfPedCliL)->lKitPrc
                        (dbfTmpLin)->cCodPr1    := (dbfPedCliL)->cCodPr1
                        (dbfTmpLin)->cCodPr2    := (dbfPedCliL)->cCodPr2
                        (dbfTmpLin)->cValPr1    := (dbfPedCliL)->cValPr1
                        (dbfTmpLin)->cValPr2    := (dbfPedCliL)->cValPr2
                        (dbfTmpLin)->nCosDiv    := (dbfPedCliL)->nCosDiv
                        (dbfTmpLin)->lMsgVta    := (dbfPedCliL)->lMsgVta
                        (dbfTmpLin)->lNotVta    := (dbfPedCliL)->lNotVta
                        (dbfTmpLin)->lLote      := (dbfPedCliL)->lLote
                        (dbfTmpLin)->nLote      := (dbfPedCliL)->nLote
                        (dbfTmpLin)->cLote      := (dbfPedCliL)->cLote
                        (dbfTmpLin)->mObsLin    := (dbfPedCliL)->mObsLin
                        (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip
                        (dbfTmpLin)->cCodPrv    := (dbfPedCliL)->cCodPrv
                        (dbfTmpLin)->cCodFam    := (dbfPedCliL)->cCodFam
                        (dbfTmpLin)->cGrpFam    := (dbfPedCliL)->cGrpFam
                        (dbfTmpLin)->cAlmLin    := (dbfPedCliL)->cAlmLin
                        (dbfTmpLin)->cRefPrv    := (dbfPedCliL)->cRefPrv
                        (dbfTmpLin)->dFecEnt    := (dbfPedCliL)->dFecEnt
                        (dbfTmpLin)->dFecSal    := (dbfPedCliL)->dFecSal
                        (dbfTmpLin)->lAlquiler  := (dbfPedCliL)->lAlquiler
                        (dbfTmpLin)->nPreAlq    := (dbfPedCliL)->nPreAlq
                        (dbfTmpLin)->nPuntos    := (dbfPedCliL)->nPuntos
                        (dbfTmpLin)->nValPnt    := (dbfPedCliL)->nValPnt
                        (dbfTmpLin)->nDtoPnt    := (dbfPedCliL)->nDtoPnt
                        (dbfTmpLin)->nIncPnt    := (dbfPedCliL)->nIncPnt
                        (dbfTmpLin)->lImpLin    := (dbfPedCliL)->lImpLin
                        (dbfTmpLin)->lLinOfe    := (dbfPedCliL)->lLinOfe
                        (dbfTmpLin)->cObrLin    := (dbfPedCliL)->cObrLin
                        (dbfTmpLin)->cRefAux    := (dbfPedCliL)->cRefAux
                        (dbfTmpLin)->cRefAux2   := (dbfPedCliL)->cRefAux2
                        (dbfTmpLin)->cCtrCoste  := (dbfPedCliL)->cCtrCoste
                        (dbfTmpLin)->cTipCtr    := (dbfPedCliL)->cTipCtr
                        (dbfTmpLin)->cTerCtr    := (dbfPedCliL)->cTerCtr

                        (dbfTmpLin)->cCodTip    := (dbfPedCliL)->cCodTip

                        if lCalCaj()
                           if nTotRec <> 0
                              nDiv                       := DecimalMod( nTotPdt, ( dbfPedCliL )->nCanPed )
                              if nDiv == 0 .AND. ( dbfPedCliL )->nCanPed <> 0
                                 ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed
                                 ( dbfTmpLin )->nUniCaja := nTotPdt / ( dbfPedCliL )->nCanPed
                              else
                                 ( dbfTmpLin )->nCanEnt  := 0
                                 ( dbfTmpLin )->nUniCaja := nTotPdt
                              end
                           else
                              ( dbfTmpLin )->nCanEnt     := ( dbfPedCliL )->nCanPed
                              ( dbfTmpLin )->nUniCaja    := ( dbfPedCliL )->nUniCaja
                           end
                        else
                           ( dbfTmpLin )->nUniCaja       := nTotPdt
                        end

                     end

                  else

                     if nNumLin <> (dbfPedCliL)->nNumLin
                        ++nOffSet
                        nNumLin                 := (dbfPedCliL)->nNumLin
                     end

                     ( dbfTmpLin )->( dbAppend() )

                     ( dbfTmpLin )->cNumPed     := aPedidos[ nItem, 3]
                     ( dbfTmpLin )->nNumAlb     := 0
                     ( dbfTmpLin )->nNumLin     := nOffSet
                     ( dbfTmpLin )->nPosPrint   := nOffSet
                     ( dbfTmpLin )->cRef        := ( dbfPedCliL )->cRef
                     ( dbfTmpLin )->cDetalle    := ( dbfPedCliL )->cDetalle
                     ( dbfTmpLin )->mLngDes     := ( dbfPedCliL )->mLngDes
                     ( dbfTmpLin )->nPreUnit    := ( dbfPedCliL )->nPreDiv
                     ( dbfTmpLin )->cUnidad     := ( dbfPedCliL )->cUnidad
                     ( dbfTmpLin )->nPesoKg     := ( dbfPedCliL )->nPesoKg
                     ( dbfTmpLin )->cPesoKg     := ( dbfPedCliL )->cPesoKg
                     ( dbfTmpLin )->nVolumen    := ( dbfPedCliL )->nVolumen
                     ( dbfTmpLin )->cVolumen    := ( dbfPedCliL )->cVolumen
                     ( dbfTmpLin )->nIva        := ( dbfpedclil )->nIva
                     ( dbfTmpLin )->nReq        := ( dbfpedclil )->nReq
                     ( dbfTmpLin )->nDto        := ( dbfpedclil )->nDto
                     ( dbfTmpLin )->nPntVer     := ( dbfPedCliL )->nPntVer
                     ( dbfTmpLin )->nImpTrn     := ( dbfPedCliL )->nImpTrn
                     ( dbfTmpLin )->nDtoPrm     := ( dbfPedCliL )->nDtoPrm
                     ( dbfTmpLin )->nComAge     := ( dbfPedCliL )->nComAge
                     ( dbfTmpLin )->dFecHa      := ( dbfPedCliL )->dFecha
                     ( dbfTmpLin )->id_tipo_v   := ( dbfPedCliL )->id_tipo_v
                     ( dbfTmpLin )->nDtoDiv     := ( dbfPedCliL )->nDtoDiv
                     ( dbfTmpLin )->nUniCaja    := ( dbfPedCliL )->nUniCaja - ( dbfPedCliL )->nUniEnt
                     ( dbfTmpLin )->nCanEnt     := ( dbfPedCliL )->nCanPed  - ( dbfPedCliL )->nCanEnt
                     ( dbfTmpLin )->nUndKit     := ( dbfPedCliL )->nUndKit
                     ( dbfTmpLin )->lKitArt     := ( dbfPedCliL )->lKitArt
                     ( dbfTmpLin )->lKitChl     := ( dbfPedCliL )->lKitChl
                     ( dbfTmpLin )->lKitPrc     := ( dbfPedCliL )->lKitPrc
                     ( dbfTmpLin )->cCodPr1     := ( dbfPedCliL )->cCodPr1
                     ( dbfTmpLin )->cCodPr2     := ( dbfPedCliL )->cCodPr2
                     ( dbfTmpLin )->cValPr1     := ( dbfPedCliL )->cValPr1
                     ( dbfTmpLin )->cValPr2     := ( dbfPedCliL )->cValPr2
                     ( dbfTmpLin )->nCosDiv     := ( dbfPedCliL )->nCosDiv
                     ( dbfTmpLin )->lMsgVta     := ( dbfPedCliL )->lMsgVta
                     ( dbfTmpLin )->lNotVta     := ( dbfPedCliL )->lNotVta
                     ( dbfTmpLin )->lLote       := ( dbfPedCliL )->lLote
                     ( dbfTmpLin )->nLote       := ( dbfPedCliL )->nLote
                     ( dbfTmpLin )->cLote       := ( dbfPedCliL )->cLote
                     ( dbfTmpLin )->mObsLin     := ( dbfPedCliL )->mObsLin
                     ( dbfTmpLin )->Descrip     := ( dbfPedCliL )->Descrip
                     ( dbfTmpLin )->cCodPrv     := ( dbfPedCliL )->cCodPrv
                     ( dbfTmpLin )->cCodFam     := ( dbfPedCliL )->cCodFam
                     ( dbfTmpLin )->cGrpFam     := ( dbfPedCliL )->cGrpFam
                     ( dbfTmpLin )->cAlmLin     := ( dbfPedCliL )->cAlmLin
                     ( dbfTmpLin )->cRefPrv     := ( dbfPedCliL )->cRefPrv
                     ( dbfTmpLin )->dFecEnt     := ( dbfPedCliL )->dFecEnt
                     ( dbfTmpLin )->dFecSal     := ( dbfPedCliL )->dFecSal
                     ( dbfTmpLin )->lAlquiler   := ( dbfPedCliL )->lAlquiler
                     ( dbfTmpLin )->nPreAlq     := ( dbfPedCliL )->nPreAlq
                     ( dbfTmpLin )->cUnidad     := ( dbfPedCliL )->cUnidad
                     ( dbfTmpLin )->nNumMed     := ( dbfPedCliL )->nNumMed
                     ( dbfTmpLin )->nMedUno     := ( dbfPedCliL )->nMedUno
                     ( dbfTmpLin )->nMedDos     := ( dbfPedCliL )->nMedDos
                     ( dbfTmpLin )->nMedTre     := ( dbfPedCliL )->nMedTre
                     ( dbfTmpLin )->nPuntos     := ( dbfPedCliL )->nPuntos
                     ( dbfTmpLin )->nValPnt     := ( dbfPedCliL )->nValPnt
                     ( dbfTmpLin )->nDtoPnt     := ( dbfPedCliL )->nDtoPnt
                     ( dbfTmpLin )->nIncPnt     := ( dbfPedCliL )->nIncPnt
                     ( dbfTmpLin )->lLinOfe     := ( dbfPedCliL )->lLinOfe
                     ( dbfTmpLin )->cObrLin     := ( dbfPedCliL )->cObrLin
                     ( dbfTmpLin )->cRefAux     := ( dbfPedCliL )->cRefAux
                     ( dbfTmpLin )->cRefAux2    := ( dbfPedCliL )->cRefAux2
                     ( dbfTmpLin )->cCtrCoste   := ( dbfPedCliL )->cCtrCoste
                     ( dbfTmpLin )->cTipCtr     := ( dbfPedCliL )->cTipCtr
                     ( dbfTmpLin )->cTerCtr     := ( dbfPedCliL )->cTerCtr

                     ( dbfTmpLin )->nBultos     := ( dbfPedCliL )->nBultos
                     (dbfTmpLin)->cCodTip    := (dbfPedCliL)->cCodTip

                  end

               end

               ( dbfPedCliL )->( dbSkip( 1 ) )

            end

            ( dbfTmpLin )->( dbGoTop() )

            oBrw:Refresh()

         end

      next





      aGet[ 30 ]:bWhen           := {|| .F. }
      aGet[ 30 ]:Disable()





      RecalculaTotal( aTmp )

      CursorWE()

   end

return .T.



Static Function RecAlbCli( aTmpAlb, oDlg )

   local nDtoAge
   local nRecno
   local cCodFam
   local nImpAtp  := 0
   local nImpOfe  := 0
   local hAtipica




   if !ApoloMsgNoYes( "¡Atención!,"                                      + Chr(13)+Chr(10) +  "todos los precios se recalcularán en función de"  + Chr(13)+Chr(10) +  "los valores en las bases de datos.", "¿ Desea proceder ?" )
      return nil
   end

   oDlg:aEvalWhen()

   ( D():Articulos( nView ) )->( ordSetFocus( "Codigo" ) )

   nRecno         := ( dbfTmpLin )->( RecNo() )

   ( dbfTmpLin )->( dbGotop() )
   while !( dbfTmpLin )->( eof() )





      if ( D():Articulos( nView ) )->( dbSeek( ( dbfTmpLin )->cRef ) )

         do case
            case aTmpAlb[ 60 ] <= 2
               ( dbfTmpLin )->nIva     := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
               ( dbfTmpLin )->nReq     := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
            case aTmpAlb[ 60 ] == 3
               ( dbfTmpLin )->nIva     := 0
               ( dbfTmpLin )->nReq     := 0
         end





         if !empty( ( D():Articulos( nView ) )->cCodImp )
            ( dbfTmpLin )->cCodImp  := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp, aTmpAlb[ 59 ], ( dbfTmpLin )->nIva )
         end





         ( dbfTmpLin )->nPreUnit    := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )





         ( dbfTmpLin )->nCtlStk     := ( D():Articulos( nView ) )->nCtlStock
         ( dbfTmpLin )->nPvpRec     := ( D():Articulos( nView ) )->PvpRec
         ( dbfTmpLin )->nCosDiv     := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpAlb[ 6 ] )





         ( dbfTmpLin )->nPntVer     := ( D():Articulos( nView ) )->nPntVer1





         do case

         case !empty( aTmpAlb[ 28 ] )

            cCodFam  := RetFamArt( ( dbfTmpLin )->cRef, D():Articulos( nView ) )

            nImpOfe  := RetPrcTar( ( dbfTmpLin )->cRef, aTmpAlb[ 28 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL, ( dbfTmpLin )->nTarLin )
            if nImpOfe <> 0
               ( dbfTmpLin )->nPreUnit := nImpOfe
            end

            nImpOfe  := RetPctTar( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ 28 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL )
            if nImpOfe <> 0
               ( dbfTmpLin )->nDto     := nImpOfe
            end

            nImpOfe  := RetComTar( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ 28 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpAlb[ 26 ], dbfTarPreL, dbfTarPreS )

            if nImpOfe <> 0
               ( dbfTmpLin )->nComAge  := nImpOfe
            end






            nImpOfe     := RetDtoPrm( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ 28 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpAlb[ 5 ], dbfTarPreL )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nDtoPrm  := nImpOfe
            end





            nDtoAge     := RetDtoAge( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ 28 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpAlb[ 5 ], aTmpAlb[ 26 ], dbfTarPreL, dbfTarPreS )

            if nDtoAge  <> 0
               ( dbfTmpLin )->nComAge  := nDtoAge
            end

         end





         hAtipica := hAtipica( hValue( dbfTmpLin, aTmpAlb ) )

         if !empty( hAtipica )

            if hhaskey( hAtipica, "nTarifaFamilia" ) .AND. hAtipica[ "nTarifaFamilia" ] > 0
               ( dbfTmpLin )->nPreUnit    := nRetPreArt( hAtipica[ "nTarifaFamilia" ], aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )
            end

            if hhaskey( hAtipica, "nImporte" )
               if hAtipica[ "nImporte" ] <> 0
                  ( dbfTmpLin )->nPreUnit := hAtipica[ "nImporte" ]
               end
            end

            if hhaskey( hAtipica, "nDescuentoPorcentual" )
               if hAtipica[ "nDescuentoPorcentual" ] <> 0
                  ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
               end
            end

            if hhaskey( hAtipica, "nDescuentoPromocional" )
               if hAtipica[ "nDescuentoPromocional" ] <> 0
                  ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
               end
            end

            if hhaskey( hAtipica, "nDescuentoLineal" )
               if hAtipica[ "nDescuentoLineal" ] <> 0
                  ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
               end
            end

            if hhaskey( hAtipica, "nComisionAgente" )
               if hAtipica[ "nComisionAgente" ] <> 0
                  ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
               end
            end

         end





         nImpOfe     := nImpOferta( ( dbfTmpLin )->cRef, aTmpAlb[ 6 ], aTmpAlb[ 74 ], ( dbfTmpLin )->nUniCaja, aTmpAlb[ 5 ], dbfOferta, ( dbfTmpLin )->nTarLin, nil, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )
         if nImpOfe  <> 0
            ( dbfTmpLin )->nPreUnit := nCnv2Div( nImpOfe, cDivEmp(), aTmpAlb[ 53 ] )
         end










      end

      ( dbfTmpLin )->( dbSkip() )

   end

   ( dbfTmpLin )->( dbGoTo( nRecno ) )

return nil



_HB_CLASS TAlbaranesClientesSenderReciver ; function TAlbaranesClientesSenderReciver ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAlbaranesClientesSenderReciver", iif( .T., { @TSenderReciverItem() }, { @HBObject() } ), @TAlbaranesClientesSenderReciver() ) ) ;

   _HB_MEMBER { cFileName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileName"}, .F. )

   _HB_MEMBER CreateData(); oClass:AddMethod( "CreateData", @TAlbaranesClientesSenderReciver_CreateData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RestoreData(); oClass:AddMethod( "RestoreData", @TAlbaranesClientesSenderReciver_RestoreData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SendData(); oClass:AddMethod( "SendData", @TAlbaranesClientesSenderReciver_SendData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReciveData(); oClass:AddMethod( "ReciveData", @TAlbaranesClientesSenderReciver_ReciveData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TAlbaranesClientesSenderReciver_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validateRecepcion(); oClass:AddMethod( "validateRecepcion", @TAlbaranesClientesSenderReciver_validateRecepcion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAlbaranesClientesSenderReciver ;



static FUNCTION TAlbaranesClientesSenderReciver_CreateData( ) ; local Self AS CLASS TAlbaranesClientesSenderReciver := QSelf() AS CLASS TAlbaranesClientesSenderReciver

   local oBlock
   local oError
   local lSnd        := .F.
   local nOrd
   local cAlbCliT
   local cAlbCliL
   local cAlbCliI
   local tmpAlbCliT
   local tmpAlbCliL
   local tmpAlbCliI

   if ::oSender:lServer
      ::cFileName      := "AlbCli" + win_uuidcreatestring() + ".All"
   else
      ::cFileName      := "AlbCli" + win_uuidcreatestring() + "." + RetSufEmp()
   end

   ::oSender:SetText( "Enviando albaranes de clientes" )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCLIT.DBF" ), ( cCheckArea( "AlbCLIT", @cAlbCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCLIL.DBF" ), ( cCheckArea( "AlbCLIL", @cAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliI.DBF" ), ( cCheckArea( "AlbCliI", @cAlbCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   mkAlbCli( cPatSnd() )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbCliT.DBF" ), ( cCheckArea( "AlbCliT", @tmpAlbCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbCliT.CDX" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbCliL.DBF" ), ( cCheckArea( "AlbCliL", @tmpAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbCliL.CDX" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbCliI.DBF" ), ( cCheckArea( "AlbCliI", @tmpAlbCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbCliI.CDX" ) )

   if !empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( cAlbCliT )->( LastRec() )
   end

   nOrd  := ( cAlbCliT )->( OrdSetFocus( "lSndDoc" ) )

   if ( cAlbCliT )->( dbSeek( .T. ) )

      while !( cAlbCliT )->( eof() )

         if ( lEnviarEntregados() .AND. ( cAlbCliT )->lEntregado ) .OR. !lEnviarEntregados()

            lSnd  := .T.

            dbPass( cAlbCliT, tmpAlbCliT, .T. )
            ::oSender:SetText( ( cAlbCliT )->cSerAlb + "/" + AllTrim( Str( ( cAlbCliT )->nNumAlb ) ) + "/" + AllTrim( ( cAlbCliT )->cSufAlb ) + "; " + Dtoc( ( cAlbCliT )->dFecAlb ) + "; " + AllTrim( ( cAlbCliT )->cCodCli ) + "; " + ( cAlbCliT )->cNomCli )

            if ( cAlbCliL )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->NNUMAlb ) + ( cAlbCliT )->CSUFAlb ) )
               while ( ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->NNUMAlb ) + ( cAlbCliL )->CSUFAlb ) == ( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->NNUMAlb ) + ( cAlbCliT )->CSUFAlb ) .AND. !( cAlbCliL )->( eof() )
                  dbPass( cAlbCliL, tmpAlbCliL, .T. )
                  ( cAlbCliL )->( dbSkip() )
               end
            end

            if ( cAlbCliI )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )
               while ( ( cAlbCliI )->cSerAlb + Str( ( cAlbCliI )->nNumAlb ) + ( cAlbCliI )->cSufAlb ) == ( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) .AND. !( cAlbCliI )->( eof() )
                  dbPass( cAlbCliI, tmpAlbCliI, .T. )
                  ( cAlbCliI )->( dbSkip() )
               end
            end

         end

         SysRefresh()

         ( cAlbCliT )->( dbSkip() )

         if !empty( ::oSender:oMtr )
            ::oSender:oMtr:Set( ( cAlbCliT )->( OrdKeyNo() ) )
         end

      end

   end

   ( cAlbCliT )->( OrdSetFocus( nOrd ) )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de albaranes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

   ( cAlbCliT )->( dbCloseArea() )
   ( cAlbCliL )->( dbCloseArea() )
   ( cAlbCliI )->( dbCloseArea() )
   ( tmpAlbCliT )->( dbCloseArea() )
   ( tmpAlbCliL )->( dbCloseArea() )
   ( tmpAlbCliI )->( dbCloseArea() )

   if lSnd

      ::oSender:SetText( "Comprimiendo albaranes de clientes" )

      if ::oSender:lZipData( ::cFileName )
         ::oSender:SetText( "Ficheros comprimidos en " + ::cFileName )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay albaranes de clientes para enviar" )

   end

Return ( Self )



static FUNCTION TAlbaranesClientesSenderReciver_RestoreData( ) ; local Self AS CLASS TAlbaranesClientesSenderReciver := QSelf() AS CLASS TAlbaranesClientesSenderReciver

   local oBlock
   local oError
   local cAlbCliT





   if ::lSuccesfullSend

      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCLIT.DBF" ), ( cCheckArea( "AlbCLIT", @cAlbCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         ( cAlbCliT )->( OrdSetFocus( "lSndDoc" ) )

         while ( cAlbCliT )->( dbSeek( .T. ) ) .AND. !( cAlbCliT )->( eof() )
            if dbLock( cAlbCliT )
               ( cAlbCliT )->lSndDoc := .F.
               ( cAlbCliT )->( dbRUnlock() )
            end
         end

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de albaranes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end
      ErrorBlock( oBlock )

      ( cAlbCliT )->( dbCloseArea() )

   end

Return ( Self )



static FUNCTION TAlbaranesClientesSenderReciver_SendData( ) ; local Self AS CLASS TAlbaranesClientesSenderReciver := QSelf() AS CLASS TAlbaranesClientesSenderReciver





   if !file( cPatOut() + ::cFileName )
      ::oSender:SetText( "El fichero " + cPatOut() + ::cFileName + "no existe" )
      Return ( Self )
   end

   if ::oSender:SendFiles( cPatOut() + ::cFileName, ::cFileName )
      ::lSuccesfullSend := .T.
      ::oSender:SetText( "Fichero enviado " + ::cFileName )
   else
      ::oSender:SetText( "ERROR al enviar fichero" + ::cFileName )
   end

Return ( Self )



static FUNCTION TAlbaranesClientesSenderReciver_ReciveData( ) ; local Self AS CLASS TAlbaranesClientesSenderReciver := QSelf() AS CLASS TAlbaranesClientesSenderReciver

   local n
   local aExt

   aExt     := ::oSender:aExtensions()





   ::oSender:SetText( "Recibiendo albaranes de clientes" )

   for n := 1 to len( aExt )
      ::oSender:GetFiles( "AlbCli*." + aExt[ n ], cPatIn() )
   next

   ::oSender:SetText( "Albaranes de clientes recibidos" )

Return Self



static FUNCTION TAlbaranesClientesSenderReciver_Process( ) ; local Self AS CLASS TAlbaranesClientesSenderReciver := QSelf() AS CLASS TAlbaranesClientesSenderReciver

   local m
   local cAlbCliT
   local cAlbCliL
   local cAlbCliI
   local tmpAlbCliT
   local tmpAlbCliL
   local tmpAlbCliI
   local oBlock
   local oError
   local cNumeroAlbaran
   local aFiles            := directory( cPatIn() + "AlbCli*.*" )
   local lClient           := ::oSender:lServer

   for m := 1 to len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ], .F. )







            if lExistTable( cPatSnd() + "AlbCliT.DBF", cLocalDriver() )   .AND. lExistTable( cPatSnd() + "AlbCliL.DBF", cLocalDriver() )   .AND. lExistTable( cPatSnd() + "AlbCliI.DBF", cLocalDriver() )

               dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbCliT.DBF" ), ( cCheckArea( "AlbCliT", @tmpAlbCliT ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
               if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbCliT.CDX" ) )

               dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbCliL.DBF" ), ( cCheckArea( "AlbCliL", @tmpAlbCliL ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
               if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbCliL.CDX" ) )

               dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbCliI.DBF" ), ( cCheckArea( "AlbCliI", @tmpAlbCliI ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
               if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbCliI.CDX" ) )

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliT.DBF" ), ( cCheckArea( "AlbCliT", @cAlbCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliL.DBF" ), ( cCheckArea( "AlbCliL", @cAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliI.DBF" ), ( cCheckArea( "AlbCliI", @cAlbCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               while ( tmpAlbCliT )->( !eof() )

                  if ::validateRecepcion( tmpAlbCliT, cAlbCliT )

                     cNumeroAlbaran    := ( tmpAlbCliT )->cSerAlb + Str( ( tmpAlbCliT )->nNumAlb ) + ( tmpAlbCliT )->cSufAlb

                     while ( cAlbCliT )->( dbseek( cNumeroAlbaran ) )
                        dbLockDelete( cAlbCliT )
                     end

                     while ( cAlbCliL )->( dbseek( cNumeroAlbaran ) )
                        dbLockDelete( cAlbCliL )
                     end

                     dbPass( tmpAlbCliT, cAlbCliT, .T. )

                     if dbLock( cAlbCliT )

                        ( cAlbCliT )->lSndDoc      := .F.

                        if uFieldempresa( "lRecEnt" )
                           ( cAlbCliT )->lEntregado   := .T.
                        end

                        ( cAlbCliT )->( dbUnLock() )

                     end

                     ::oSender:SetText( "Añadido : " + ( tmpAlbCliT )->cSerAlb + "/" + AllTrim( Str( ( tmpAlbCliT )->nNumAlb ) ) + "/" + AllTrim( ( tmpAlbCliT )->cSufAlb ) + "; " + Dtoc( ( tmpAlbCliT )->dFecAlb ) + "; " + AllTrim( ( tmpAlbCliT )->cCodCli ) + "; " + ( tmpAlbCliT )->cNomCli )

                     if ( tmpAlbCliL )->( dbSeek( cNumeroAlbaran ) )
                        while ( tmpAlbCliL )->cSerAlb + Str( ( tmpAlbCliL )->nNumAlb ) + ( tmpAlbCliL )->cSufAlb == cNumeroAlbaran .AND. !( tmpAlbCliL )->( eof() )
                           dbPass( tmpAlbCliL, cAlbCliL, .T. )
                           ( tmpAlbCliL )->( dbSkip() )
                        end
                     end

                     if ( tmpAlbCliI )->( dbSeek( cNumeroAlbaran ) )
                        while ( tmpAlbCliI )->cSerAlb + Str( ( tmpAlbCliI )->nNumAlb ) + ( tmpAlbCliI )->cSufAlb == cNumeroAlbaran .AND. !( tmpAlbCliI )->( eof() )
                           dbPass( tmpAlbCliI, cAlbCliI, .T. )
                           ( tmpAlbCliI )->( dbSkip() )
                        end
                     end

                  else

                     ::oSender:SetText( ::cErrorRecepcion  )

                  end

                  SysRefresh()

                  ( tmpAlbCliT )->( dbSkip() )

               end

               ( cAlbCliT )->( dbCloseArea() )
               ( cAlbCliL )->( dbCloseArea() )
               ( cAlbCliI )->( dbCloseArea() )
               ( tmpAlbCliT )->( dbCloseArea() )
               ( tmpAlbCliL )->( dbCloseArea() )
               ( tmpAlbCliI )->( dbCloseArea() )

               ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

            else

               ::oSender:SetText( "Faltan ficheros" )

               if !file( cPatSnd() + "AlbCliT.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "AlbCliT.Dbf" )
               end

               if !file( cPatSnd() + "AlbCliL.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "AlbCliL.Dbf" )
               end

               if !file( cPatSnd() + "AlbCliI.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "AlbCliI.Dbf" )
               end

            end

            fErase( cPatSnd() + "AlbCliT.DBF" )
            fErase( cPatSnd() + "AlbCliL.DBF" )
            fErase( cPatSnd() + "AlbCliI.DBF" )

         else

            ::oSender:SetText( "Error al descomprimir los ficheros" )

         end

      RECOVER USING oError

         ( cAlbCliT )->( dbCloseArea() )
         ( cAlbCliL )->( dbCloseArea() )
         ( cAlbCliI )->( dbCloseArea() )
         ( tmpAlbCliT )->( dbCloseArea() )
         ( tmpAlbCliL )->( dbCloseArea() )
         ( tmpAlbCliI )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end
      ErrorBlock( oBlock )

   next

Return Self



static FUNCTION TAlbaranesClientesSenderReciver_validateRecepcion( tmpAlbCliT, dbfAlbCliT ) ; local Self AS CLASS TAlbaranesClientesSenderReciver := QSelf() AS CLASS TAlbaranesClientesSenderReciver

   ::cErrorRecepcion       := "Pocesando albaran de cliente número " + ( dbfAlbCliT )->cSerAlb + "/" + alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + "/" + alltrim( ( dbfAlbCliT )->cSufAlb ) + " "

   if !( lValidaOperacion( ( tmpAlbCliT )->dFecAlb, .F. ) )
      ::cErrorRecepcion    += "la fecha " + dtoc( ( tmpAlbCliT )->dFecAlb ) + " no es valida en esta empresa"
      Return .F.
   end

   if !( ( dbfAlbCliT )->( dbSeek( ( tmpAlbCliT )->cSerAlb + Str( ( tmpAlbCliT )->nNumAlb ) + ( tmpAlbCliT )->cSufAlb ) ) )
      Return .T.
   end

   if dtos( ( dbfAlbCliT )->dFecCre ) + ( dbfAlbCliT )->cTimCre >= dtos( ( tmpAlbCliT )->dFecCre ) + ( tmpAlbCliT )->cTimCre
      ::cErrorRecepcion    += "la fecha en la empresa " + dtoc( ( dbfAlbCliT )->dFecCre ) + " " + ( dbfAlbCliT )->cTimCre + " es más reciente que la recepción " + dtoc( ( tmpAlbCliT )->dFecCre ) + " " + ( tmpAlbCliT )->cTimCre
      Return .F.
   end

Return ( .T. )



STATIC FUNCTION DelSerie( oWndBrw )

   local oDlg
   local oSerIni
   local oSerFin
   local oTxtDel
   local nTxtDel     := 0
   local nRecno      := ( D():Get( "AlbCliT", nView ) )->( Recno() )
   local nOrdAnt     := ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( 1 ) )
   local oDesde      := TDesdeHasta():Init( ( D():Get( "AlbCliT", nView ) )->cSerAlb, ( D():Get( "AlbCliT", nView ) )->nNumAlb, ( D():Get( "AlbCliT", nView ) )->cSufAlb, GetSysDate() )
   local lCancel     := .F.
   local oBtnAceptar
   local oBtnCancel




   oDlg = TDialog():New(,,,, "Eliminar series de albaranes", "DelSerDoc",, .F.,,,,, oWndBrw, .F.,,,,,, .F.,, "oDlg", nil, )



   TRadMenu():Redefine( { | u | If( PCount()==0, oDesde:nRadio, oDesde:nRadio:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, oDesde:cSerieInicio, oDesde:cSerieInicio:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieInicio >= "A" .AND. oDesde:cSerieInicio <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, oDesde:cSerieFin, oDesde:cSerieFin:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieFin >= "A" .AND. oDesde:cSerieFin <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, oDesde:nNumeroInicio, oDesde:nNumeroInicio:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, oDesde:nNumeroFin, oDesde:nNumeroFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, oDesde:cSufijoInicio, oDesde:cSufijoInicio:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, oDesde:cSufijoFin, oDesde:cSufijoFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oDesde:dFechaInicio, oDesde:dFechaInicio:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, oDesde:dFechaFin, oDesde:dFechaFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )




   oBtnAceptar := TButton():ReDefine( 1, {||( DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, @lCancel ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( lCancel := .T., oDlg:end() )}, oDlg,,, .F.,,,, .T. )





   oTxtDel := TApoloMeter():ReDefine( 160, { | u | If( PCount()==0, nTxtDel, nTxtDel:= u ) }, ( D():Get( "AlbCliT", nView ) )->( OrdKeyCount() ), oDlg, .F.,,, .T.,,,, )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( lCancel )},,, oDlg:bRClicked,,, )

   ( D():Get( "AlbCliT", nView ) )->( dbGoTo( nRecNo ) )
   ( D():Get( "AlbCliT", nView ) )->( ordSetFocus( nOrdAnt ) )

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



STATIC FUNCTION DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, lCancel )

   local nOrd
   local nDeleted          := 0
   local nProcesed         := 0

   oBtnAceptar:Hide()
   oBtnCancel:bAction      := {|| lCancel := .T. }

   if oDesde:nRadio == 1

      nOrd                 := ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( "nNumAlb" ) )

      ( D():Get( "AlbCliT", nView ) )->( dbSeek( oDesde:cNumeroInicio(), .T. ) )
      while !lCancel .AND. ( D():Get( "AlbCliT", nView ) )->( !eof() )






         if ( D():Get( "AlbCliT", nView ) )->cSerAlb >= oDesde:cSerieInicio  .AND. ( D():Get( "AlbCliT", nView ) )->cSerAlb <= oDesde:cSerieFin     .AND. ( D():Get( "AlbCliT", nView ) )->nNumAlb >= oDesde:nNumeroInicio .AND. ( D():Get( "AlbCliT", nView ) )->nNumAlb <= oDesde:nNumeroFin    .AND. ( D():Get( "AlbCliT", nView ) )->cSufAlb >= oDesde:cSufijoInicio .AND. ( D():Get( "AlbCliT", nView ) )->cSufAlb <= oDesde:cSufijoFin

            ++nDeleted

            oTxtDel:cText  := "Eliminando : " + ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + Alltrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + ( D():Get( "AlbCliT", nView ) )->cSufAlb



            WinDelRec( nil, D():Get( "AlbCliT", nView ), {|| QuiAlbCli() } )

         else

            ( D():Get( "AlbCliT", nView ) )->( dbSkip() )

         end

         ++nProcesed

         oTxtDel:Set( ( D():Get( "AlbCliT", nView ) )->( OrdKeyNo() ) )

      end

      ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( nOrd ) )

   else

      nOrd                 := ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( "dFecAlb" ) )

      ( D():Get( "AlbCliT", nView ) )->( dbSeek( oDesde:dFechaInicio, .T. ) )
      while !lCancel .AND. ( D():Get( "AlbCliT", nView ) )->( !eof() )


         if ( D():Get( "AlbCliT", nView ) )->dFecAlb >= oDesde:dFechaInicio  .AND. ( D():Get( "AlbCliT", nView ) )->dFecAlb <= oDesde:dFechaFin

            ++nDeleted

            oTxtDel:cText  := "Eliminando : " + ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + Alltrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + ( D():Get( "AlbCliT", nView ) )->cSufAlb



            WinDelRec( nil, D():Get( "AlbCliT", nView ), {|| QuiAlbCli() } )

         else

            ( D():Get( "AlbCliT", nView ) )->( dbSkip() )

         end

         ++nProcesed

         oTxtDel:Set( ( D():Get( "AlbCliT", nView ) )->( OrdKeyNo() ) )

      end

      ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( nOrd ) )

   end

   lCancel                 := .T.

   oBtnAceptar:Show()

   if lCancel
      msgStop( "Total de registros borrados : " + Str( nDeleted ), "Proceso cancelado" )
   else
      msgInfo( "Total de registros borrados : " + Str( nDeleted ), "Proceso finalizado" )
   end

RETURN ( oDlg:End() )



 Static Function nEstadoIncidencia( cNumAlb )

   local nEstado  := 0
   local aBmp     := ""
   local nOrdAnt  := ( D():Get( "AlbCliI", nView ) )->( OrdSetFocus( "nNumAlb" ) )

   if ( D():Get( "AlbCliI", nView ) )->( dbSeek( cNumAlb ) )

      while ( D():Get( "AlbCliI", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliI", nView ) )->nNumAlb ) + ( D():Get( "AlbCliI", nView ) )->cSufAlb == cNumAlb .AND. !( D():Get( "AlbCliI", nView ) )->( Eof() )

         if ( D():Get( "AlbCliI", nView ) )->lListo
            do case
               case nEstado == 0 .OR. nEstado == 3
                    nEstado := 3
               case nEstado == 1
                    nEstado := 2
            end
         else
            do case
               case nEstado == 0
                    nEstado := 1
               case nEstado == 3
                    nEstado := 2
            end
         end

         ( D():Get( "AlbCliI", nView ) )->( dbSkip() )

      end

   end

   ( D():Get( "AlbCliI", nView ) )->( OrdSetFocus( nOrdAnt ) )

Return ( nEstado )



Static Function DesgPnt( cCodArt, aTmp, nTarifa, oPreDiv, oCosDiv, nMode )

   local oDlg
   local oPuntos
   local oValorPunto
   local oDtoPnt
   local oIncPnt
   local oImporte
   local nPuntos     := 0
   local nValorPunto := 0
   local nDtoPnt     := 0
   local nIncPnt     := 0



   if empty( cCodArt )
      MsgInfo( "Debe seleccinar un artículo", "Código vacío" )
      return .F.
   end



   nPuntos           := aTmp[ 61 ]
   nValorPunto       := aTmp[ 62 ]
   nDtoPnt           := aTmp[ 63 ]
   nIncPnt           := aTmp[ 64 ]

   oDlg = TDialog():New(,,,, "Desglose de puntos", "DESGPUNTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







   oPuntos := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, nPuntos, nPuntos:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )







   oValorPunto := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, nValorPunto, nValorPunto:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )









   oDtoPnt := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nDtoPnt, nDtoPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )









   oIncPnt := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, nIncPnt, nIncPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )





   oImporte := TSay():ReDefine( 240, {|| nCalculoPuntos( nPuntos, nValorPunto, nDtoPnt, nIncPnt )}, oDlg, cPouDiv, "N/W*",, .F.,, .F., .F., )





   TButton():ReDefine( 500, {||( EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, D():Articulos( nView ), nDouDiv ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




   TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, D():Articulos( nView ), nDouDiv ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      aTmp[ 61 ]     := nPuntos
      aTmp[ 62 ]     := nValorPunto
      aTmp[ 63 ]     := nDtoPnt
      aTmp[ 64 ]     := nIncPnt
      oCosDiv:cText( oImporte:VarGet() )
      oCosDiv:Refresh()

   end

Return ( .T. )



Static Function AlbCliNotas()

   local cObserv  := ""
   local aData    := {}

   aAdd( aData, "Albaran " + ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + AllTrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + Alltrim( ( D():Get( "AlbCliT", nView ) )->cSufAlb ) + " de " + Rtrim( ( D():Get( "AlbCliT", nView ) )->cNomCli ) )
   aAdd( aData, "10" )
   aAdd( aData, ( D():Get( "AlbCliT", nView ) )->cCodCli )
   aAdd( aData, ( D():Get( "AlbCliT", nView ) )->cNomCli )
   aAdd( aData, ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb )

   if ( D():Get( "Client", nView ) )->( dbSeek( ( D():Get( "AlbCliT", nView ) )->cCodCli ) )

      if !empty( ( D():Get( "Client", nView ) )->cPerCto )
         cObserv  += Rtrim( ( D():Get( "Client", nView ) )->cPerCto ) + Space( 1 )
      end

      if !empty( ( D():Get( "Client", nView ) )->Telefono )
         cObserv  += "Télefono : " + Rtrim( ( D():Get( "Client", nView ) )->Telefono ) + Space( 1 )
      end

      if !empty( ( D():Get( "Client", nView ) )->Movil )
         cObserv  += "Móvil : " + Rtrim( ( D():Get( "Client", nView ) )->Movil ) + Space( 1 )
      end

      if !empty( ( D():Get( "Client", nView ) )->Fax )
         cObserv  += "Fax : " + Rtrim( ( D():Get( "Client", nView ) )->Fax ) + Space( 1 )
      end

   end

   aAdd( aData, cObserv )

   GenerarNotas( aData )

Return ( nil )





STATIC FUNCTION DupSerie( oWndBrw )

   local oDlg
   local oSerIni
   local oSerFin
   local oTxtDup
   local nTxtDup     := 0
   local nRecno      := ( D():Get( "AlbCliT", nView ) )->( Recno() )
   local nOrdAnt     := ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( 1 ) )
   local oDesde      := TDesdeHasta():Init( ( D():Get( "AlbCliT", nView ) )->cSerAlb, ( D():Get( "AlbCliT", nView ) )->nNumAlb, ( D():Get( "AlbCliT", nView ) )->cSufAlb, GetSysDate() )
   local lCancel     := .F.
   local oBtnAceptar
   local oBtnCancel
   local oFecDoc
   local cFecDoc     := GetSysDate()




   oDlg = TDialog():New(,,,, "Duplicar series de albaranes", "DUPSERDOC",, .F.,,,,, oWndBrw, .F.,,,,,, .F.,, "oDlg", nil, )



   TRadMenu():Redefine( { | u | If( PCount()==0, oDesde:nRadio, oDesde:nRadio:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, oDesde:cSerieInicio, oDesde:cSerieInicio:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieInicio >= "A" .AND. oDesde:cSerieInicio <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, oDesde:cSerieFin, oDesde:cSerieFin:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieFin >= "A" .AND. oDesde:cSerieFin <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, oDesde:nNumeroInicio, oDesde:nNumeroInicio:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, oDesde:nNumeroFin, oDesde:nNumeroFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, oDesde:cSufijoInicio, oDesde:cSufijoInicio:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, oDesde:cSufijoFin, oDesde:cSufijoFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oDesde:dFechaInicio, oDesde:dFechaInicio:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, oDesde:dFechaFin, oDesde:dFechaFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )




   oFecDoc := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cFecDoc, cFecDoc:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   oBtnAceptar := TButton():ReDefine( 1, {||( DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( lCancel := .T., oDlg:end() )}, oDlg,,, .F.,,,, .T. )





   oTxtDup := TApoloMeter():ReDefine( 160, { | u | If( PCount()==0, nTxtDup, nTxtDup:= u ) }, ( D():Get( "AlbCliT", nView ) )->( OrdKeyCount() ), oDlg, .F.,,, .T.,,,, )

      oDlg:AddFastKey( 116, {|| DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( lCancel )},,, oDlg:bRClicked,,, )

   ( D():Get( "AlbCliT", nView ) )->( dbGoTo( nRecNo ) )
   ( D():Get( "AlbCliT", nView ) )->( ordSetFocus( nOrdAnt ) )

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



STATIC FUNCTION DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, lCancel, cFecDoc )

   local nOrd
   local nDuplicados    := 0
   local nProcesed      := 0

   oBtnAceptar:Hide()
   oBtnCancel:bAction   := {|| lCancel := .T. }

   if oDesde:nRadio == 1

      nOrd              := ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( "nNumAlb" ) )

      ( D():Get( "AlbCliT", nView ) )->( dbSeek( oDesde:cNumeroInicio(), .T. ) )

      while !lCancel .AND. ( D():Get( "AlbCliT", nView ) )->( !eof() )






         if ( D():Get( "AlbCliT", nView ) )->cSerAlb >= oDesde:cSerieInicio  .AND. ( D():Get( "AlbCliT", nView ) )->cSerAlb <= oDesde:cSerieFin     .AND. ( D():Get( "AlbCliT", nView ) )->nNumAlb >= oDesde:nNumeroInicio .AND. ( D():Get( "AlbCliT", nView ) )->nNumAlb <= oDesde:nNumeroFin    .AND. ( D():Get( "AlbCliT", nView ) )->cSufAlb >= oDesde:cSufijoInicio .AND. ( D():Get( "AlbCliT", nView ) )->cSufAlb <= oDesde:cSufijoFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + Alltrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + ( D():Get( "AlbCliT", nView ) )->cSufAlb

            DupAlbaran( cFecDoc )

         end

         ( D():Get( "AlbCliT", nView ) )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( nOrd ) )

   else

      nOrd              := ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( "dFecAlb" ) )

      ( D():Get( "AlbCliT", nView ) )->( dbSeek( oDesde:dFechaInicio, .T. ) )

      while !lCancel .AND. ( D():Get( "AlbCliT", nView ) )->( !eof() )


         if ( D():Get( "AlbCliT", nView ) )->dFecAlb >= oDesde:dFechaInicio  .AND. ( D():Get( "AlbCliT", nView ) )->dFecAlb <= oDesde:dFechaFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + Alltrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + ( D():Get( "AlbCliT", nView ) )->cSufAlb

            DupAlbaran( cFecDoc )

         end

         ( D():Get( "AlbCliT", nView ) )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( nOrd ) )

   end

   lCancel              := .T.

   oBtnAceptar:Show()

   if lCancel
      msgStop( "Total de registros duplicados : " + Str( nDuplicados ), "Proceso cancelado" )
   else
      msgInfo( "Total de registros duplicados : " + Str( nDuplicados ), "Proceso finalizado" )
   end

RETURN ( oDlg:End() )



STATIC FUNCTION AlbRecDup( cDbf, xField1, xField2, xField3, lCab, cFecDoc )

   local nRec           := ( cDbf )->( Recno() )
   local aTabla         := {}
   local nOrdAnt

   If( lCab == nil, lCab := .F., ) ;

   aTabla               := DBScatter( cDbf )
   aTabla[ 1 ]   := xField1
   aTabla[ 2 ]   := xField2
   aTabla[ 3 ]   := xField3

   if lCab

      aTabla[ 4     ]  := cCurSesion()
      if !empty( cFecDoc )
         aTabla[ 5  ]  := cFecDoc
      end
      aTabla[ 8     ]  := Application():CodigoCaja()
      aTabla[ 17  ]  = .F.
      aTabla[ 18     ]  := Ctod("")
      aTabla[ 30     ]  := Space( 12 )
      aTabla[ 34     ]  := Space( 12 )
      aTabla[ 52     ]  := .T.
      aTabla[ 69     ]  := .F.
      aTabla[ 73     ]  := GetSysDate()
      aTabla[ 70     ]  := Auth():Codigo()
      aTabla[ 71     ]  := GetSysDate()
      aTabla[ 72     ]  := Time()
      aTabla[ 75  ]  := .F.
      aTabla[ 76     ]  := Ctod("")
      aTabla[ 77     ]  := Space( 5 )
      aTabla[ 78     ]  := Application():CodigoDelegacion()
      aTabla[ 16  ]  := .F.
      aTabla[ 103  ]  := 1

      nOrdAnt                 := ( cDbf )->( OrdSetFocus( "NNUMALB" ) )

   end

   if dbDialogLock( cDbf, .T. )
      aEval( aTabla, { | uTmp, n | ( cDbf )->( fieldPut( n, uTmp ) ) } )
      ( cDbf )->( dbUnLock() )
   end

   if lCab
      ( cDbf )->( OrdSetFocus( nOrdAnt ) )
   end

   ( cDbf )->( dbGoTo( nRec ) )

RETURN ( .T. )



STATIC FUNCTION DupAlbaran( cFecDoc )

   local nNewNumAlb  := 0



   nNewNumAlb        := nNewDoc( ( D():Get( "AlbCliT", nView ) )->cSerAlb, D():Get( "AlbCliT", nView ), "NALBCLI", , D():Get( "NCount", nView ) )



   AlbRecDup( D():Get( "AlbCliT", nView ), ( D():Get( "AlbCliT", nView ) )->cSerAlb, nNewNumAlb, ( D():Get( "AlbCliT", nView ) )->cSufAlb, .T., cFecDoc )



   if ( D():Get( "AlbCliL", nView ) )->( dbSeek( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb ) )


      while ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb == ( D():Get( "AlbCliL", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliL", nView ) )->nNumAlb ) + ( D():Get( "AlbCliL", nView ) )->cSufAlb .AND.  !( D():Get( "AlbCliL", nView ) )->( Eof() )

         AlbRecDup( D():Get( "AlbCliL", nView ), ( D():Get( "AlbCliT", nView ) )->cSerAlb, nNewNumAlb, ( D():Get( "AlbCliT", nView ) )->cSufAlb, .F. )

         ( D():Get( "AlbCliL", nView ) )->( dbSkip() )

      end

   end



   if ( D():Get( "AlbCliD", nView ) )->( dbSeek( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb ) )


      while ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb == ( D():Get( "AlbCliD", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliD", nView ) )->nNumAlb ) + ( D():Get( "AlbCliD", nView ) )->cSufAlb .AND.  !( D():Get( "AlbCliD", nView ) )->( Eof() )

         AlbRecDup( D():Get( "AlbCliD", nView ), ( D():Get( "AlbCliT", nView ) )->cSerAlb, nNewNumAlb, ( D():Get( "AlbCliT", nView ) )->cSufAlb, .F. )

         ( D():Get( "AlbCliD", nView ) )->( dbSkip() )

      end

   end

RETURN ( .T. )




STATIC FUNCTION SetDialog( aGet, oSayDias, oSayTxtDias )

   if !empty( oTipAlb )

      if oTipAlb:nAt == 2
         aGet[ 82  ]:Show()
         aGet[ 83   ]:Show()
         aGet[ 19 ]:Hide()
         oSayDias:Show()
         oSayTxtDias:Show()
      else
         aGet[ 82  ]:Hide()
         aGet[ 83   ]:Hide()
         aGet[ 19 ]:Show()
         oSayDias:Hide()
         oSayTxtDias:Hide()
      end

      aGet[ 83   ]:Refresh()
      aGet[ 82  ]:Refresh()
      aGet[ 19 ]:Refresh()
      oSayDias:Refresh()
      oSayTxtDias:Refresh()

   end

   if RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )

      if !empty( oGetRnt )
         oGetRnt:Hide()
      end

   end

Return .T.



Static Function loadComisionAgente( aTmp, aGet, aTmpAlb )

   local nComisionAgenteTarifa   := nComisionAgenteTarifa( aTmpAlb[ 26 ], aTmp[ 76 ], nView )

   if nComisionAgenteTarifa == 0
      nComisionAgenteTarifa      := aTmpAlb[ 51 ]
   end

   aTmp[ 18 ]              := nComisionAgenteTarifa





return .T.



STATIC FUNCTION ValidaMedicion( aTmp, aGet )



  local cNewUndMed

   if !empty( aGet )
      cNewUndMed  := aGet[ 17 ]:VarGet()
   else
      cNewUndMed  := aTmp[ 17 ]
   end





   if ( empty( cOldUndMed ) .OR. cOldUndMed <> cNewUndMed )

      if oUndMedicion:oDbf:Seek( aTmp[ 17 ] )

         if oUndMedicion:oDbf:nDimension >= 1 .AND. !empty( oUndMedicion:oDbf:cTextoDim1 )
            if !empty( aGet )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( ( D():Articulos( nView ) )->nLngArt )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
            else
               aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]  := ( D():Articulos( nView ) )->nLngArt
            end
         else
            if !empty( aGet )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            else
               aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 2 .AND. !empty( oUndMedicion:oDbf:cTextoDim2 )
            if !empty( aGet )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( ( D():Articulos( nView ) )->nAltArt )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
            else
               aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]  := ( D():Articulos( nView ) )->nAltArt
            end

         else
            if !empty( aGet )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            else
               aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 3 .AND. !empty( oUndMedicion:oDbf:cTextoDim3 )
            if !empty( aGet )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( ( D():Articulos( nView ) )->nAncArt )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
            else
               aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]  := ( D():Articulos( nView ) )->nAncArt
            end
         else
            if !empty( aGet )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
               aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            else
               aTmp[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]  := 0
            end
         end

      else

         if !empty( aGet )
            aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
            aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
            aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
         end

      end

      cOldUndMed := cNewUndMed

   end

RETURN .T.



Static Function ChangeTarifa( aTmp, aGet, aTmpAlb )

    local nPrePro  := 0

   nPrePro     := nPrePro( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 30 ], aTmp[ 29 ], aTmp[ 31 ], aTmp[ 76 ], aTmpAlb[ 59 ], dbfArtDiv, aTmpAlb[ 28 ] )

   if nPrePro == 0
      nPrePro  := nRetPreArt( aTmp[ 76 ], aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )
   end

   if !empty( aTmpAlb[ 28 ] )
      nPrePro  := RetPrcTar( aTmp[ 4 ], aTmpAlb[ 28 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], dbfTarPreL, aTmp[ 76 ] )
   end

   if nPrePro <> 0
      aGet[ 6 ]:cText( nPrePro )
   end

Return .T.
#line 7806 ".\.\Prg\Albcli.prg"
Static Function DataReport( oFr )

   local np

   oFr:DeleteCategory(  "Albaranes" )
   oFr:DeleteCategory(  "Lineas de albaranes" )
   oFr:DeleteCategory(  "Clientes" )
   oFr:DeleteCategory(  "Clientes.País" )





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Albaranes", ( D():Get( "AlbCliT", nView ) )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Albaranes", cItemsToReport( aItmAlbCli() ) )

   oFr:SetWorkArea(     "Lineas de albaranes", ( D():Get( "AlbCliL", nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de albaranes", cItemsToReport( aColAlbCli() ) )

   oFr:SetWorkArea(     "Series de lineas de albaranes", ( D():Get( "AlbCliS", nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Series de lineas de albaranes", cItemsToReport( aSerAlbCli() ) )

   oFr:SetWorkArea(     "Incidencias de albaranes", ( D():Get( "AlbCliI", nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de albaranes", cItemsToReport( aIncAlbCli() ) )

   oFr:SetWorkArea(     "Documentos de albaranes", ( D():Get( "AlbCliD", nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de albaranes", cItemsToReport( aAlbCliDoc() ) )

   oFr:SetWorkArea(     "Situaciones de Albaranes", ( D():AlbaranesClientesSituaciones( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Situaciones de Albaranes", cItemsToReport( aAlbCliEst() ) )

   oFr:SetWorkArea(     "Empresa", ( dbfEmp )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Get( "Client", nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Obras", ( dbfObrasT )->( Select() ) )
   oFr:SetFieldAliases( "Obras",  cItemsToReport( aItmObr() ) )

   oFr:SetWorkArea(     "Almacenes", ( dbfAlm )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Rutas", ( dbfRuta )->( Select() ) )
   oFr:SetFieldAliases( "Rutas", cItemsToReport( aItmRut() ) )

   oFr:SetWorkArea(     "Agentes", ( dbfAgent )->( Select() ) )
   oFr:SetFieldAliases( "Agentes", cItemsToReport( aItmAge() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():Get( "FPago", nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Tipo artículo",  oTipArt:Select() )
   oFr:SetFieldAliases( "Tipo artículo",  cObjectsToReport( oTipArt:oDbf ) )

   oFr:SetWorkArea(     "Ofertas", ( dbfOferta )->( Select() ) )
   oFr:SetFieldAliases( "Ofertas", cItemsToReport( aItmOfe() ) )

   oFr:SetWorkArea(     "Unidades de medición",  oUndMedicion:Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( oUndMedicion:oDbf ) )

   oFr:SetWorkArea(     "SAT", ( dbfAlbCliT )->( Select() ) )
   oFr:SetFieldAliases( "SAT", cItemsToReport( aItmAlbCli() ) )

   oFr:SetWorkArea(     "Impuestos especiales",  oNewImp:Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( oNewImp:oDbf ) )

   oFr:SetWorkArea(     "Transportistas", oTrans:Select() )
   oFr:SetFieldAliases( "Transportistas", cObjectsToReport( oTrans:oDbf ) )







   oFr:setUserDataSet( "Impuestos albarán", "porcentajeiva;logrecargo;porcentajere;bruto;neto;impiva;impre;nivmh;ntransporte;npntver", {||np := 1}, {||np := np + 1}, {||np := np - 1}, {||np > Len( aTotIva )}, {|key| hGet( aTotIva[np], key ) } )

   oFr:SetMasterDetail( "Albaranes", "Lineas de albaranes",                      {|| ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb } )
   oFr:SetMasterDetail( "Albaranes", "Incidencias de albaranes",                 {|| ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb } )
   oFr:SetMasterDetail( "Albaranes", "Documentos de albaranes",                  {|| ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb } )
   oFr:SetMasterDetail( "Albaranes", "Clientes",                                 {|| ( D():Get( "AlbCliT", nView ) )->cCodCli } )
   oFr:SetMasterDetail( "Albaranes", "Obras",                                    {|| ( D():Get( "AlbCliT", nView ) )->cCodCli + ( D():Get( "AlbCliT", nView ) )->cCodObr } )
   oFr:SetMasterDetail( "Albaranes", "Almacenes",                                {|| ( D():Get( "AlbCliT", nView ) )->cCodAlm } )
   oFr:SetMasterDetail( "Albaranes", "Rutas",                                    {|| ( D():Get( "AlbCliT", nView ) )->cCodRut } )
   oFr:SetMasterDetail( "Albaranes", "Agentes",                                  {|| ( D():Get( "AlbCliT", nView ) )->cCodAge } )
   oFr:SetMasterDetail( "Albaranes", "Formas de pago",                           {|| ( D():Get( "AlbCliT", nView ) )->cCodPago} )
   oFr:SetMasterDetail( "Albaranes", "Empresa",                                  {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Albaranes", "País",                                     {|| RetFld( ( D():Get( "AlbCliT", nView ) )->cCodCli, D():Clientes( nView ), "cCodPai" ) } )
   oFr:SetMasterDetail( "Albaranes", "Transportistas",                           {|| ( D():Get( "AlbCliT", nView ) )->cCodTrn } )

   oFr:SetMasterDetail( "Lineas de albaranes", "Artículos",                      {|| SynchronizeDetails() } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Ofertas",                        {|| ( D():AlbaranesClientesLineas( nView ) )->cRef } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Unidades de medición",           {|| ( D():AlbaranesClientesLineas( nView ) )->cUnidad } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Impuestos especiales",           {|| ( D():AlbaranesClientesLineas( nView ) )->cCodImp } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Series de lineas de albaranes",  {|| ( D():AlbaranesClientesLineas( nView ) )->cSerAlb + Str( ( D():AlbaranesClientesLineas( nView ) )->nNumAlb ) + ( D():AlbaranesClientesLineas( nView ) )->cSufAlb + Str( ( D():AlbaranesClientesLineas( nView ) )->nNumLin ) } )
   oFr:SetMasterDetail( "Lineas de albaranes", "SAT",                            {|| ( D():AlbaranesClientesLineas( nView ) )->cNumSat } )

   oFr:SetResyncPair(   "Albaranes", "Lineas de albaranes" )
   oFr:SetResyncPair(   "Albaranes", "Incidencias de albaranes" )
   oFr:SetResyncPair(   "Albaranes", "Documentos de albaranes" )
   oFr:SetResyncPair(   "Albaranes", "Empresa" )
   oFr:SetResyncPair(   "Albaranes", "Clientes" )
   oFr:SetResyncPair(   "Albaranes", "Obras" )
   oFr:SetResyncPair(   "Albaranes", "Almacenes" )
   oFr:SetResyncPair(   "Albaranes", "Rutas" )
   oFr:SetResyncPair(   "Albaranes", "Agentes" )
   oFr:SetResyncPair(   "Albaranes", "Formas de pago" )
   oFr:SetResyncPair(   "Albaranes", "Pais" )
   oFr:SetResyncPair(   "Albaranes", "Transportistas" )

   oFr:SetResyncPair(   "Lineas de albaranes", "Artículos" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Tipo artículo" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Tipo de venta" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Ofertas" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Unidades de medición" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Impuestos especiales" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Series de lineas de albaranes" )

   oFr:SetResyncPair(   "Lineas de albaranes", "SAT" )

Return nil



Static Function SynchronizeDetails()

Return ( ( D():AlbaranesClientesLineas( nView ) )->cRef )



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Albaranes" )
   oFr:DeleteCategory(  "Lineas de albaranes" )





   oFr:AddVariable(     "Albaranes",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Albaranes",             "Total albaran",                       "GetHbVar('nTotAlb')" )
   oFr:AddVariable(     "Albaranes",             "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Albaranes",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Albaranes",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Albaranes",             "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Albaranes",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Albaranes",             "Total descuentos",                    "GetHbVar('nTotalDto')" )
   oFr:AddVariable(     "Albaranes",             "Total descuento lineal",              "GetHbVar('nTotalDtoLineal')" )
   oFr:AddVariable(     "Albaranes",             "Total neto",                          "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Albaranes",             "Total primer descuento definible",    "GetHbVar('nTotUno')" )
   oFr:AddVariable(     "Albaranes",             "Total segundo descuento definible",   "GetHbVar('nTotDos')" )
   oFr:AddVariable(     "Albaranes",             "Total " + cImp(),                     "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Albaranes",             "Total RE",                            "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Albaranes",             "Total entregado a cuenta",            "GetHbVar('nTotPag')" )
   oFr:AddVariable(     "Albaranes",             "Total retención",                     "GetHbVar('nTotRet')" )
   oFr:AddVariable(     "Albaranes",             "Total peso",                          "GetHbVar('nTotPes')" )
   oFr:AddVariable(     "Albaranes",             "Total costo",                         "GetHbVar('nTotCos')" )
   oFr:AddVariable(     "Albaranes",             "Total artículos",                     "GetHbVar('nTotArt')" )
   oFr:AddVariable(     "Albaranes",             "Total cajas",                         "GetHbVar('nTotCaj')" )
   oFr:AddVariable(     "Albaranes",             "Total punto verde",                   "GetHbVar('nTotPnt')" )
   oFr:AddVariable(     "Albaranes",             "Cuenta por defecto del cliente",      "GetHbVar('cCtaCli')" )

   oFr:AddVariable(     "Albaranes",             "Total unidades primer tipo de impuestos especiales",            "GetHbArrayVar('aIvmUno',1 )" )
   oFr:AddVariable(     "Albaranes",             "Total unidades segundo tipo de impuestos especiales",           "GetHbArrayVar('aIvmDos',1 )" )
   oFr:AddVariable(     "Albaranes",             "Total unidades tercer tipo de impuestos especiales",            "GetHbArrayVar('aIvmTre',1 )" )
   oFr:AddVariable(     "Albaranes",             "Importe del primer tipo de impuestos especiales",               "GetHbArrayVar('aIvmUno',2 )" )
   oFr:AddVariable(     "Albaranes",             "Importe del segundo tipo de impuestos especiales",              "GetHbArrayVar('aIvmDos',2 )" )
   oFr:AddVariable(     "Albaranes",             "Importe del tercer tipo de impuestos especiales",               "GetHbArrayVar('aIvmTre',2 )" )
   oFr:AddVariable(     "Albaranes",             "Total importe primer tipo de impuestos especiales",             "GetHbArrayVar('aIvmUno',3 )" )
   oFr:AddVariable(     "Albaranes",             "Total importe segundo tipo de impuestos especiales",            "GetHbArrayVar('aIvmDos',3 )" )
   oFr:AddVariable(     "Albaranes",             "Total importe tercer tipo de impuestos especiales",             "GetHbArrayVar('aIvmTre',3 )" )

   oFr:AddVariable(     "Albaranes",             "Saldo anterior envase 4",                                       "CallHbFunc('nSaldoAnteriorAlbCli4')" )
   oFr:AddVariable(     "Albaranes",             "Saldo anterior envase 8",                                       "CallHbFunc('nSaldoAnteriorAlbCli8')" )
   oFr:AddVariable(     "Albaranes",             "Saldo anterior envase 16",                                      "CallHbFunc('nSaldoAnteriorAlbCli16')" )

   oFr:AddVariable(     "Albaranes",             "Saldo documento envase 4",                                      "CallHbFunc('nSaldoDocumentoAlbCli4')" )
   oFr:AddVariable(     "Albaranes",             "Saldo documento envase 8",                                      "CallHbFunc('nSaldoDocumentoAlbCli8')" )
   oFr:AddVariable(     "Albaranes",             "Saldo documento envase 16",                                     "CallHbFunc('nSaldoDocumentoAlbCli16')" )

   oFr:AddVariable(     "Albaranes",             "Total saldo envase 4",                                          "CallHbFunc('nTotalSaldoAlbCli4')" )
   oFr:AddVariable(     "Albaranes",             "Total saldo envase 8",                                          "CallHbFunc('nTotalSaldoAlbCli8')" )
   oFr:AddVariable(     "Albaranes",             "Total saldo envase 16",                                         "CallHbFunc('nTotalSaldoAlbCli16')" )

   oFr:AddVariable(     "Lineas de albaranes",   "Detalle del artículo",                     "CallHbFunc('cDesAlbCli')"  )
   oFr:AddVariable(     "Lineas de albaranes",   "Detalle del artículo otro lenguaje",       "CallHbFunc('cDesAlbCliLeng')"  )
   oFr:AddVariable(     "Lineas de albaranes",   "Total unidades artículo",                  "CallHbFunc('nTotNAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Precio unitario del artículo",             "CallHbFunc('nTotUAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Total línea de albaran",                   "CallHbFunc('nTotLAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Total peso por línea",                     "CallHbFunc('nPesLAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Total línea sin " + cImp(),                "CallHbFunc('nNetLAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Total línea "+ cImp() + " incluido",       "CallHbFunc('nIncLAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Precio unitario "+ cImp() + " incluido",   "CallHbFunc('nIncUAlbCli')" )

   oFr:AddVariable(     "Lineas de albaranes",   "Fecha en juliano 4 meses",                 "CallHbFunc('dJuliano4AlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Fecha en juliano 6 meses",                 "CallHbFunc('dJulianoAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Fecha en juliano 8 meses",                 "CallHbFunc('dJulianoAlbAnio')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Dirección del SAT",                        "CallHbFunc('cDireccionSAT')" )

Return nil



STATIC FUNCTION CreateFiles( cPath )

   if !lExistTable( cPath + "AlbCliT.Dbf", cLocalDriver() )
      dbCreate( cPath + "AlbCliT.Dbf", aSqlStruct( aItmAlbCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "AlbCliL.Dbf", cLocalDriver() )
      dbCreate( cPath + "AlbCliL.Dbf", aSqlStruct( aColAlbCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "AlbCliP.Dbf", cLocalDriver() )
      dbCreate( cPath + "AlbCliP.Dbf", aSqlStruct( aItmAlbPgo() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "AlbCliI.Dbf", cLocalDriver() )
      dbCreate( cPath + "AlbCliI.Dbf", aSqlStruct( aIncAlbCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "AlbCliD.Dbf", cLocalDriver() )
      dbCreate( cPath + "AlbCliD.Dbf", aSqlStruct( aAlbCliDoc() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "AlbCliS.Dbf", cLocalDriver() )
      dbCreate( cPath + "AlbCliS.Dbf", aSqlStruct( aSerAlbCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "AlbCliE.Dbf", cLocalDriver() )
      dbCreate( cPath + "AlbCliE.Dbf", aSqlStruct( aAlbCliEst() ), cLocalDriver() )
   end

RETURN NIL



STATIC FUNCTION KillTrans()





   if !empty( dbfTmpLin ) .AND. ( dbfTmpLin )->( Used() )
      ( dbfTmpLin )->( dbCloseArea() )
   end

   if !empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )
      ( dbfTmpInc )->( dbCloseArea() )
   end

   if !empty( dbfTmpDoc ) .AND. ( dbfTmpDoc )->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end

   if !empty( dbfTmpSer ) .AND. ( dbfTmpSer )->( Used() )
      ( dbfTmpSer )->( dbCloseArea() )
   end

   if !empty( dbfTmpEst ) .AND. ( dbfTmpEst )->( Used() )
      ( dbfTmpEst )->( dbCloseArea() )
   end

   dbfTmpLin      := nil
   dbfTmpInc      := nil
   dbfTmpDoc      := nil
   dbfTmpSer      := nil
   dbfTmpEst      := nil

   dbfErase( cTmpLin )
   dbfErase( cTmpInc )
   dbfErase( cTmpDoc )
   dbfErase( cTmpSer )
   dbfErase( cTmpEst )

   oStock:SetTmpAlbCliL()
   oStock:SetTmpAlbCliS()

RETURN NIL



STATIC FUNCTION BeginTrans( aTmp, nMode )

   local oError
   local oBlock
   local lErrors     := .F.
   local cDbfLin     := "ACliL"
   local cDbfInc     := "ACliI"
   local cDbfDoc     := "ACliD"
   local cDbfPgo     := "ACliP"
   local cDbfSer     := "ACliS"
   local cDbfEst     := "ACliE"
   local cAlbaran
   local lStkMinimo  := .T.

   CursorWait()

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      TComercio:resetProductsToUpdateStocks()

      aNumPed        := {}

      cAlbaran       := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]

      cTmpLin        := cGetNewFileName( cPatTmp() + cDbfLin )
      cTmpInc        := cGetNewFileName( cPatTmp() + cDbfInc )
      cTmpDoc        := cGetNewFileName( cPatTmp() + cDbfDoc )
      cTmpSer        := cGetNewFileName( cPatTmp() + cDbfSer )
      cTmpEst        := cGetNewFileName( cPatTmp() + cDbfEst )

      do case
         case nMode == 1 .OR. nMode == 4

            nTotOld  := 0

         case nMode == 2

            nTotOld  := nTotAlb

      end





      dbCreate( cTmpLin, aSqlStruct( aColAlbCli() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpLin, cCheckArea( cDbfLin, @dbfTmpLin ), .F. )

      if !NetErr() .AND. ( dbfTmpLin )->( Used() )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "nNumLin", "Str( nNumLin, 4 )", {|| Str( Field->nNumLin ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "cRef", "cRef", {|| Field->cRef } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "cDetalle", "Left( cDetalle, 100 )", {|| Left( Field->cDetalle, 100 ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "nNumAlb", "Str( Recno() )", {|| Str( Recno() ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "nUniCaja", "nUniCaja", {|| Field->nUniCaja } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "dFecUltCom", "dFecUltCom", {|| Field->dFecUltCom } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "nUniUltCom", "nUniUltCom", {|| Field->nUniUltCom } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "nPosPrint", "Str( nPosPrint, 4 )", {|| Str( Field->nPosPrint ) } ) )

         oLinDetCamposExtra:initArrayValue()

         if ( D():Get( "AlbCliL", nView ) )->( dbSeek( cAlbaran ) )

            while ( ( D():Get( "AlbCliL", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliL", nView ) )->nNumAlb ) + ( D():Get( "AlbCliL", nView ) )->cSufAlb ) == cAlbaran .AND. !( D():Get( "AlbCliL", nView ) )->( eof() )

               if nMode == 4

                  appendRegisterByHash( D():Get( "AlbCliL", nView ), dbfTmpLin, { "lFacturado" => .F. } )

                  lStkMinimo  := lCompruebaStock( dbfTmpLin, oStock, nTotNAlbCli( dbfTmpLin ), , .F. )

               else

                  dbPass( D():Get( "AlbCliL", nView ), dbfTmpLin, .T. )

               end

               oLinDetCamposExtra:SetTemporalLines( ( dbfTmpLin )->cSerAlb + str( ( dbfTmpLin )->nNumAlb ) + ( dbfTmpLin )->cSufAlb + str( ( dbfTmpLin )->nNumLin ) + str( ( dbfTmpLin )->nNumKit ), ( dbfTmpLin )->( OrdKeyNo() ), nMode )

               ( D():Get( "AlbCliL", nView ) )->( dbSkip() )

            end
         end

         ( dbfTmpLin )->( dbGoTop() )

         oStock:SetTmpAlbCliL( dbfTmpLin )

      else

         lErrors           := .T.

      end





      dbCreate( cTmpInc, aSqlStruct( aIncAlbCli() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpInc, cCheckArea( cDbfInc, @dbfTmpInc ), .F. )

      if !NetErr()
         ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpInc )->( ordCreate( cTmpInc, "nNumAlb", "Recno()", {|| Recno() } ) )

         if ( nMode <> 4 ) .AND. ( D():Get( "AlbCliI", nView ) )->( dbSeek( cAlbaran ) )
            while ( ( D():Get( "AlbCliI", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliI", nView ) )->nNumAlb ) + ( D():Get( "AlbCliI", nView ) )->cSufAlb == cAlbaran ) .AND. ( D():Get( "AlbCliI", nView ) )->( !eof() )
               dbPass( D():Get( "AlbCliI", nView ), dbfTmpInc, .T. )
               ( D():Get( "AlbCliI", nView ) )->( dbSkip() )
            end
         end

         ( dbfTmpInc )->( dbGoTop() )

      else

         lErrors     := .T.

      end



      dbCreate( cTmpEst, aSqlStruct( aAlbCliEst() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpEst, cCheckArea( cDbfEst, @dbfTmpEst ), .F. )
      if !NetErr()

         ( dbfTmpEst )->( ordCreate( cTmpEst, "nNumAlb", "cSerAlb + str( nNumAlb ) + cSufAlb + dtos( dFecSit )  + tFecSit", {|| Field->cSerAlb + str( Field->nNumAlb ) + Field->cSufAlb + dtos( Field->dFecSit )  + Field->tFecSit } ) )
         ( dbfTmpEst )->( ordListAdd( cTmpEst ) )

         if ( nMode <> 4 ) .AND. ( D():AlbaranesClientesSituaciones( nView ) )->( dbSeek( cAlbaran ) )

            while ( ( D():AlbaranesClientesSituaciones( nView ) )->cSerAlb + Str( ( D():AlbaranesClientesSituaciones( nView ) )->nNumAlb ) + ( D():AlbaranesClientesSituaciones( nView ) )->cSufAlb == cAlbaran ) .AND. ( D():AlbaranesClientesSituaciones( nView ) )->( !eof() )
               dbPass( D():AlbaranesClientesSituaciones( nView ), dbfTmpEst, .T. )
               ( D():AlbaranesClientesSituaciones( nView ) )->( dbSkip() )
            end

         end

         ( dbfTmpEst )->( dbGoTop() )

      else

            lErrors     := .T.

      end





      dbCreate( cTmpDoc, aSqlStruct( aAlbCliDoc() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpDoc, cCheckArea( cDbfDoc, @dbfTmpDoc ), .F. )

      if !NetErr()

         ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpDoc )->( ordCreate( cTmpDoc, "nNumAlb", "Recno()", {|| Recno() } ) )

         if ( nMode <> 4 ) .AND. ( D():Get( "AlbCliD", nView ) )->( dbSeek( cAlbaran ) )
            while ( ( D():Get( "AlbCliD", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliD", nView ) )->nNumAlb ) + ( D():Get( "AlbCliD", nView ) )->cSufAlb == cAlbaran ) .AND. ( D():Get( "AlbCliD", nView ) )->( !eof() )
               dbPass( D():Get( "AlbCliD", nView ), dbfTmpDoc, .T. )
               ( D():Get( "AlbCliD", nView ) )->( dbSkip() )
            end
         end

         ( dbfTmpDoc )->( dbGoTop() )

      else

         lErrors     := .T.

      end





      dbCreate( cTmpSer, aSqlStruct( aSerAlbCli() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpSer, cCheckArea( cDbfSer, @dbfTmpSer ), .F. )

      if !( dbfTmpSer )->( NetErr() )

         ( dbfTmpSer )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpSer )->( OrdCreate( cTmpSer, "nNumLin", "Str( nNumLin, 4 ) + cRef", {|| Str( Field->nNumLin, 4 ) + Field->cRef } ) )

         if ( nMode <> 4 ) .AND. ( D():Get( "AlbCliS", nView ) )->( dbSeek( cAlbaran ) )
            while ( ( D():Get( "AlbCliS", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliS", nView ) )->nNumAlb ) + ( D():Get( "AlbCliS", nView ) )->cSufAlb == cAlbaran ) .AND. !( D():Get( "AlbCliS", nView ) )->( eof() )
               dbPass( D():Get( "AlbCliS", nView ), dbfTmpSer, .T. )
               ( D():Get( "AlbCliS", nView ) )->( dbSkip() )
            end
         end

         ( dbfTmpSer )->( dbGoTop() )

         oStock:SetTmpAlbCliS( dbfTmpSer )

      else

         lErrors     := .T.

      end





   oDetCamposExtra:SetTemporal( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "", nMode )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear tablas temporales." )

      KillTrans()

      lErrors        := .T.

   end

   ErrorBlock( oBlock )

   CursorWE()

Return ( lErrors )







Static Function RecalculaTotal( aTmpAlb )

   local nTotAlbCli     := nTotAlbCli( nil, D():Get( "AlbCliT", nView ), dbfTmpLin, D():Get( "TIva", nView ), D():Get( "Divisas", nView ), aTmpAlb )

   if oBrwIva <> nil
      oBrwIva:SetArray( aTotIva, , , .F. )
      oBrwIva:Refresh()
   end

   if oGetNet <> nil
      oGetNet:SetText( Trans( nTotNet, cPorDiv ) )
   end

   if oGetIva <> NIL
      oGetIva:SetText( Trans( nTotIva, cPorDiv ) )
   end

   if oGetReq <> NIL
      oGetReq:SetText( Trans( nTotReq, cPorDiv ) )
   end

   if oGetIvm <> nil
      oGetIvm:SetText( Trans( nTotIvm, cPorDiv ) )
   end

   if oGetRnt <> nil
      oGetRnt:SetText( AllTrim( Trans( nTotRnt, cPorDiv ) + Space( 1 ) + AllTrim( cSimDiv( aTmpAlb[ 53 ], D():Get( "Divisas", nView ) ) ) + " : " + AllTrim( Trans( nPctRnt, "999.99" ) ) + "%" ) )
   end

   if oGetPnt <> nil
      oGetPnt:SetText( Trans( nTotPnt, cPorDiv ) )
   end

   if oGetTrn <> nil
      oGetTrn:SetText( Trans( nTotTrn, cPorDiv ) )
   end

   if oGetTotal <> NIL
      oGetTotal:SetText( Trans( nTotAlb, cPorDiv ) )
   end

   if oTotAlbLin <> NIL
      oTotAlbLin:SetText( Trans( nTotAlb, cPorDiv ) )
   end

   if oGetAlb <> nil
      oGetAlb:SetText( Trans( nTotAlb, cPorDiv ) )
   end

   if oGetEnt <> nil
      oGetEnt:SetText( Trans( nTotPag, cPorDiv ) )
   end

   if oGetPdt <> nil
      oGetPdt:SetText( Trans( nTotAlb - nTotPag, cPorDiv ) )
   end

   if oGetAge <> nil
      oGetAge:SetText( Trans( nTotAge, cPorDiv ) )
   end

   if oGetPes <> nil
      oGetPes:cText( nTotPes )
   end

   if oGetDif <> nil
      oGetDif:cText( nTotDif )
   end

Return .T.



STATIC FUNCTION LoaCli( aGet, aTmp, nMode )

   local lValid      := .T.
   local cNewCodCli  := aGet[ 6 ]:varGet()
   local lChgCodCli  := ( empty( cOldCodCli ) .OR. cOldCodCli <> cNewCodCli )

   if empty( cNewCodCli )
      Return .T.
   elseif At( ".", cNewCodCli ) <> 0
      cNewCodCli     := PntReplace( aGet[ 6 ], "0", RetNumCodCliEmp() )
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodCliEmp() )
   end





   if ( D():Get( "Client", nView ) )->( dbSeek( cNewCodCli ) )

      if !( isAviableClient( nView, nMode ) )
         return .F.
      end





      aGet[ 6 ]:cText( ( D():Get( "Client", nView ) )->Cod )

      if oTlfCli <> nil
         oTlfCli:SetText( ( D():Get( "Client", nView ) )->Telefono )
      end





      if ( D():Get( "Client", nView ) )->nColor <> 0
         aGet[9]:SetColor( , ( D():Get( "Client", nView ) )->nColor )
      end

      if empty( aGet[9]:varGet() ) .OR. lChgCodCli
         aGet[9]:cText( ( D():Get( "Client", nView ) )->Titulo )
      end

      if empty( aGet[10]:varGet() ) .OR. lChgCodCli
         aGet[10]:cText( ( D():Get( "Client", nView ) )->Domicilio )
      end

      if empty( aGet[ 88 ]:varGet() ) .OR. lChgCodCli
         aGet[ 88 ]:cText( ( D():Get( "Client", nView ) )->Telefono )
      end

      if empty( aGet[11]:varGet() ) .OR. lChgCodCli
         aGet[11]:cText( ( D():Get( "Client", nView ) )->Poblacion )
      end

      if !empty( aGet[12] )
         if empty( aGet[12]:varGet() ) .OR. lChgCodCli
            aGet[12]:cText( ( D():Get( "Client", nView ) )->Provincia )
         end
      end

      if !empty( aGet[13] )
         if empty( aGet[13]:varGet() ) .OR. lChgCodCli
            aGet[13]:cText( ( D():Get( "Client", nView ) )->CodPostal )
         end
      end

      if !empty( aGet[14] )
         if empty( aGet[14]:varGet() ) .OR. lChgCodCli
            aGet[14]:cText( ( D():Get( "Client", nView ) )->Nif )
         end
      end

      if empty( aTmp[74] ) .OR. lChgCodCli
         aTmp[74]    := ( D():Get( "Client", nView ) )->cCodGrp
      end

      showClienteRiesgo( ( D():Get( "Client", nView ) )->Cod, ( D():Get( "Client", nView ) )->Riesgo, oRieCli )



      if ( lChgCodCli )







         if !empty( aGet[ 27 ] )

            if dbSeekInOrd( cNewCodCli, "lDefObr", dbfObrasT )
               aGet[ 27 ]:cText( ( dbfObrasT )->cCodObr )
            else
               aGet[ 27 ]:cText( Space( 10 ) )
            end

            aGet[ 27 ]:lValid()

         end

         aTmp[ 15 ]  := ( D():Get( "Client", nView ) )->lModDat

         aTmp[ 94 ]  := ( D():Get( "Client", nView ) )->lPntVer

      end

      if nMode == 1

         aTmp[ 60 ]  := ( D():Get( "Client", nView ) )->nRegIva

         if !empty( aGet[ 60 ] )
            aGet[ 60 ]:Refresh()
         end

         lChangeRegIva( aTmp )





         if empty( aTmp[ 1 ] )

            if !empty( ( D():Get( "Client", nView ) )->Serie )
               aGet[ 1 ]:cText( ( D():Get( "Client", nView ) )->Serie )
            end

         else



            if !empty( ( D():Get( "Client", nView ) )->Serie )                .AND. aTmp[ 1 ] <> ( D():Get( "Client", nView ) )->Serie      .AND. ApoloMsgNoYes( "La serie del cliente seleccionado es distinta a la anterior.", "¿Desea cambiar la serie?" )
               aGet[ 1 ]:cText( ( D():Get( "Client", nView ) )->Serie )
            end

         end

         if !empty( aGet[7] )
            if ( empty( aGet[7]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Get( "Client", nView ) )->cCodAlm )
                aGet[7]:cText( ( D():Get( "Client", nView ) )->cCodAlm )
                aGet[7]:lValid()
            end
         end

         if !empty( aGet[28] )
            if ( empty( aGet[28]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Get( "Client", nView ) )->cCodTar )
               aGet[28]:cText( ( D():Get( "Client", nView ) )->CCODTAR )
               aGet[28]:lValid()
            end
         end

         if ( empty( aGet[23]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Get( "Client", nView ) )->CodPago )
            aGet[23]:cText( (D():Get( "Client", nView ))->CODPAGO )
            aGet[23]:lValid()
         end





         if ( lChgCodCli .AND. lBancoDefecto( ( D():Get( "Client", nView ) )->Cod, dbfCliBnc ) )

            if !empty( aGet[ 95 ] ) .OR. lChgCodCli
               aGet[ 95 ]:cText( ( dbfCliBnc )->cCodBnc )
               aGet[ 95 ]:lValid()
            end

            if !empty( aGet[ 96 ] ) .OR. lChgCodCli
               aGet[ 96 ]:cText( ( dbfCliBnc )->cPaisIBAN )
               aGet[ 96 ]:lValid()
            end

            if !empty( aGet[ 97 ] ) .OR. lChgCodCli
               aGet[ 97 ]:cText( ( dbfCliBnc )->cCtrlIBAN )
               aGet[ 97 ]:lValid()
            end

            if !empty( aGet[ 98 ] ) .OR. lChgCodCli
               aGet[ 98 ]:cText( ( dbfCliBnc )->cEntBnc )
               aGet[ 98 ]:lValid()
            end

            if !empty( aGet[ 99 ] ) .OR. lChgCodCli
               aGet[ 99 ]:cText( ( dbfCliBnc )->cSucBnc )
               aGet[ 99 ]:lValid()
            end

            if !empty( aGet[ 100 ] ) .OR. lChgCodCli
               aGet[ 100 ]:cText( ( dbfCliBnc )->cDigBnc )
               aGet[ 100 ]:lValid()
            end

            if !empty( aGet[ 101 ] ) .OR. lChgCodCli
               aGet[ 101 ]:cText( ( dbfCliBnc )->cCtaBnc )
               aGet[ 101 ]:lValid()
            end

         end

         if !empty( aGet[26] )
            if ( empty( aGet[26]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Get( "Client", nView ) )->cAgente )
                aGet[26]:cText( (D():Get( "Client", nView ) )->CAGENTE )
                aGet[26]:lValid()
            end
         end

         if ( empty( aGet[29]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Get( "Client", nView ) )->cCodRut )
            aGet[29]:cText( ( D():Get( "Client", nView ) )->CCODRUT )
            aGet[29]:lValid()
         end

         if !empty( oGetTarifa )
            if ( empty( oGetTarifa:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Clientes( nView ) )->nTarifa )
               oGetTarifa:setTarifa( ( D():Clientes( nView ) )->nTarifa )
            end
         else
            aTmp[ 36 ]  := ( D():Clientes( nView ) )->nTarifa
         end

         if ( empty( aTmp[ 102 ] ) .OR. lChgCodCli )
             aTmp[ 102 ]    := ( D():Get( "Client", nView ) )->nDtoArt
         end

         if !empty( aGet[ 67 ] ) .AND. ( empty( aGet[ 67 ]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Get( "Client", nView ) )->cCodTrn )
            aGet[ 67 ]:cText( ( D():Get( "Client", nView ) )->cCodTrn )
            aGet[ 67 ]:lValid()
         end

         if lChgCodCli

            aGet[ 50 ]:Click( ( D():Get( "Client", nView ) )->lReq )
            aGet[ 50 ]:Refresh()

            aGet[ 94  ]:Click( ( D():Get( "Client", nView ) )->lPntVer )
            aGet[ 94  ]:Refresh()





            if !uFieldempresa( "lDtoCliLin" )

               if !empty( aGet[ 37 ] )
                  aGet[ 37 ]:cText( ( D():Get( "Client", nView ) )->cDtoEsp )
               else
                  aTmp[ 37 ]  := ( D():Get( "Client", nView ) )->cDtoEsp
               end

               if !empty( aGet[ 38 ] )
                  aGet[ 38 ]:cText( ( D():Get( "Client", nView ) )->nDtoEsp )
               else
                  aTmp[ 38 ]  := ( D():Get( "Client", nView ) )->nDtoEsp
               end

            end

            if !empty( aGet[ 39    ] )
               aGet[ 39    ]:cText( ( D():Get( "Client", nView ) )->cDpp )
            else
               aTmp[ 39    ]  := ( D():Get( "Client", nView ) )->cDpp
            end

            if !empty( aGet[ 40    ] )
               aGet[ 40    ]:cText( ( D():Get( "Client", nView ) )->nDpp )
            else
               aTmp[ 40    ]  := ( D():Get( "Client", nView ) )->nDpp
            end

            if !empty( aGet[ 41 ] )
               aGet[ 41 ]:cText( ( D():Get( "Client", nView ) )->cDtoUno )
            else
               aTmp[ 41 ]  := ( D():Get( "Client", nView ) )->cDtoUno
            end

            if !empty( aGet[ 43 ] )
               aGet[ 43 ]:cText( ( D():Get( "Client", nView ) )->cDtoDos )
            else
               aTmp[ 43 ]  := ( D():Get( "Client", nView ) )->cDtoDos
            end

            if !empty( aGet[ 42 ] )
               aGet[ 42 ]:cText( ( D():Get( "Client", nView ) )->nDtoCnt )
            else
               aTmp[ 42 ]  := ( D():Get( "Client", nView ) )->nDtoCnt
            end

            if !empty( aGet[ 44 ] )
               aGet[ 44 ]:cText( ( D():Get( "Client", nView ) )->nDtoRap )
            else
               aTmp[ 44 ]  := ( D():Get( "Client", nView ) )->nDtoRap
            end

            aTmp[ 80 ]  := ( D():Get( "Client", nView ) )->nSbrAtp

            aTmp[ 79 ]  := ( D():Get( "Client", nView ) )->nDtoAtp

         end

      end

      if lChgCodCli

         if ( D():Get( "Client", nView ) )->lMosCom .AND. !empty( ( D():Get( "Client", nView ) )->mComent )
            MsgStop( Trim( ( D():Get( "Client", nView ) )->mComent ) )
         end

         showIncidenciaCliente( ( D():Get( "Client", nView ) )->Cod, nView )

         if !( D():Get( "Client", nView ) )->lChgPre
            msgStop( "Este cliente no tiene autorización para venta a credito", "Imposible archivar como albarán" )
         end

      end

      cOldCodCli  := ( D():Get( "Client", nView ) )->Cod

      lValid      := .T.

   ELSE

      msgStop( "Cliente no encontrado" )

      lValid      := .F.

   end

RETURN lValid







STATIC FUNCTION SetDlgMode( aTmp, aTmpAlb, nMode, aGet, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, oTotal, oRentLin )

   local cCodArt        := left( aTmp[ 4 ], 18 )



      if !uFieldEmpresa( "lUseBultos" )
         aGet[ 99 ]:Hide()
      else
         if !empty( aGet[ 99 ] )
            aGet[ 99 ]:SetText( uFieldempresa( "cNbrBultos" ) )
         end
      end

      if !lUseCaj()
         aGet[ 12 ]:Hide()
      else
         if !empty( aGet[ 12 ] )
            aGet[ 12 ]:SetText( cNombreCajas() )
         end
      end

      if aGet[ 40 ] <> nil
         if !uFieldEmpresa( "lUseImp" )
            aGet[ 40 ]:Hide()
         else
            if !uFieldEmpresa( "lModImp" )
               aGet[ 40 ]:Disable()
            end
         end
      end

      if aGet[ 8 ] <> nil
         if !uFieldEmpresa( "lUsePor", .F. )
            aGet[ 8 ]:Hide()
         end
      end

      if aGet[ 7 ] <> nil
         if !uFieldEmpresa( "lUsePnt", .F. ) .OR. !aTmpAlb[ 94 ]
            aGet[ 7 ]:Hide()
         end
      end

      if aGet[ 33 ] <> nil
         if !uFieldEmpresa( "lDtoLin", .F. )
            aGet[ 33 ]:Hide()
         end
      end

      if aTmp[ 71 ]
         aGet[ 6 ]:Hide()
         aGet[ 70  ]:Show()
      end



   if oRentLin <> nil .AND. RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )
      oRentLin:Hide()
   end

   do case
   case nMode == 1

      aTmp[ 4     ]       := space( 200 )
      aTmp[ 12  ]       := 1
      aTmp[ 19 ]       := 1
      aTmp[ 39  ]       := aTmpAlb[ 59 ]
      aTmp[ 45  ]       := Ctod( "" )
      aTmp[ 34  ]       := nLastNum( dbfTmpLin )
      aTmp[ 108]       := nLastNum( dbfTmpLin, "nPosPrint" )
      aTmp[ 22  ]       := cDefVta()
      aTmp[ 38  ]       := aTmpAlb[ 7 ]
      aTmp[ 102 ]  := aTmpAlb[ 105 ]

      if aTmpAlb[ 60 ] <= 2
         aTmp[ 11  ]       := nIva( D():Get( "TIva", nView ), cDefIva() )
      end

      if !empty(aGet)

         aGet[ 4     ]:cText( aTmp[ 4 ] )
         aGet[ 12  ]:cText( aTmp[ 12  ] )
         aGet[ 19 ]:cText( aTmp[ 19 ] )
         aGet[ 108]:cText( aTmp[ 108 ] )
         aGet[ 38  ]:cText( aTmp[ 38  ] )
         aGet[ 11     ]:cText( aTmp[ 11] )

         aGet[ 14 ]:Click( .F. )
         aGet[ 5 ]:Show()
         aGet[ 23  ]:Hide()
         aGet[ 44    ]:Hide()
         aGet[ 45  ]:Hide()
         aGet[ 102 ]:cText( aTmp[ 102 ] )
         aGet[ 102 ]:lValid()

         cTipoCtrCoste        := "Centro de coste"
         oTipoCtrCoste:Refresh()
         clearGet( aGet[ 110 ] )

         if !empty( oStkAct )

            if !uFieldEmpresa( "lNStkAct" )
               oStkAct:Show()
               oStkAct:cText( 0 )
            else
               oStkAct:Hide()
            end

         end

      end

   case ( nMode == 4 .OR. nMode == 2 .OR. nMode == 3 )

      if !empty(aGet)

         if aTmp[ 42 ]
            aGet[ 44 ]:Show()
            aGet[ 45 ]:Show()
         else
            aGet[ 44 ]:Hide()
            aGet[ 45 ]:Hide()
         end

         if !empty( cCodArt )
            aGet[ 5 ]:show()
            aGet[ 23  ]:hide()
         else
            aGet[ 5 ]:hide()
            aGet[ 23  ]:show()
         end

         StocksModel():lPutStockActual( cCodArt, aTmp[ 38 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ], oStkAct )

         if uFieldEmpresa( "lNStkAct" )
            oStkAct:Hide()
         end

         aGet[ 102 ]:lValid()

      end

   end

   if !empty(aGet)

      if !empty( aTmp[ 28 ] )

         aGet[ 30 ]:Show()
         aGet[ 30 ]:lValid()

         if !empty( oSayPr1 )
            oSayPr1:Show()
            oSayPr1:SetText( retProp( aTmp[28], dbfPro ) )
         end

         if !empty( oSayVp1 )
            oSayVp1:Show()
         end

      else

         aGet[ 30 ]:hide()

         if !empty( oSayPr1 )
            oSayPr1:hide()
         end

         if !empty( oSayVp1 )
            oSayVp1:hide()
         end

      end

      if !empty( aTmp[ 29 ] )

         aGet[ 31 ]:Show()
         aGet[ 31 ]:lValid()

         if !empty( oSayPr2 )
            oSayPr2:Show()
            oSayPr2:SetText( retProp( aTmp[ 29 ], dbfPro ) )
         end

         if !empty( oSayVp2 )
            oSayVp2:Show()
         end

      else

         aGet[ 31 ]:hide()

         if !empty( oSayPr2 )
            oSayPr2:hide()
         end

         if !empty( oSayVp2 )
            oSayVp2:hide()
         end

      end



      if !lAccArticulo() .AND. RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() )
         aGet[ 36 ]:Hide()
      end



      if ( empty( aTmp[ 6 ] ) .OR. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) ) .AND. ( nMode <> 3 )

         aGet[ 6 ]:HardEnable()
         aGet[ 8  ]:HardEnable()
         aGet[ 7  ]:HardEnable()
         aGet[ 9     ]:HardEnable()
         aGet[ 10  ]:HardEnable()
         aGet[ 33  ]:HardEnable()

      else

         aGet[ 6 ]:HardDisable()
         aGet[ 8  ]:HardDisable()
         aGet[ 7  ]:HardDisable()
         aGet[ 9     ]:HardDisable()
         aGet[ 10  ]:HardDisable()
         aGet[ 33  ]:HardDisable()

      end



      aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
      aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
      aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()

      if oUndMedicion:oDbf:Seek( aTmp[ 17 ] )

         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
         aGet[ ( D():Get( "AlbCliL", nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()

      end

   end



   if empty( aTmp[ 76 ] )

      aTmp[ 76  ]       := oGetTarifa:getTarifa()

      if !empty( aGet )
         aGet[ 76 ]:cText( aTmp[ 76 ] )
      end

   end

   if !empty( aGet )
      if !uFieldEmpresa( "lPreLin" )
         aGet[ 76 ]:Hide()
      else
         aGet[ 76 ]:Show()
      end
   end



   if !empty( oTotal )
      oTotal:cText( 0 )
   end



   if !empty( oFld )
      oFld:SetOption( 1 )
   end



   hidePropertiesTable( oBrwProperties )

   if !Empty( oGetCelda )
      oGetCelda:hide()
   end



   if !empty( aGet )
      aGet[ 38 ]:lValid()
      aGet[ 58 ]:lValid()
      aGet[ 105 ]:lValid()
      aGet[ 4    ]:SetFocus()
   end

Return nil






STATIC FUNCTION lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oMargen, cCodDiv, lTotal )

   local nCalculo
   local nUnidades
   local nCosto
   local nMargen
   local nRentabilidad
   local nBase       := 0
   local nComision   := 0

   If( lTotal == nil, lTotal := .F., ) ;

   if aTmp[ 71 ]
      nCalculo       := aTmp[ 70  ]
   else
      nCalculo       := aTmp[ 6  ]
   end

   if !ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )
      nCalculo       -= aTmp[ 33  ]
   end





   nUnidades         := nTotNAlbCli( aTmp )





   if !aTmp[ 39 ]
      if aTmp[ 92 ]
         nCalculo += aTmp[ 40 ] * NotCero( aTmp[ 66 ] )
      else
         nCalculo += aTmp[ 40 ]
      end
   end

   nCalculo       *= nUnidades





   if aTmp[ 8 ] <> 0
      nCalculo     += aTmp[ 8 ] * nUnidades
   end





   if aTmp[ 9    ] <> 0
      nCalculo    -= nCalculo * aTmp[ 9    ] / 100
   end

   if aTmp[ 10 ] <> 0
      nCalculo    -= nCalculo * aTmp[ 10 ] / 100
   end





   nCosto            := nUnidades * aTmp[ 36 ]

   if aTmp[ 39 ] .AND. aTmp[ 11 ] <> 0
      nBase          := nCalculo - Round( nCalculo / ( 100 / aTmp[ 11 ] + 1 ), nRouDiv )
   else
      nBase          := nCalculo
   end

   nComision         := ( nBase * aTmp[ 18 ] / 100 )

   nMargen           := nBase - nComision - nCosto

   if nCalculo == 0
      nRentabilidad  := 0
   else
      nRentabilidad  := nRentabilidad( nBase - nComision, 0, nCosto )
   end





   if aTmpAlb[ 94 ]
      nCalculo       += nUnidades * aTmp[ 7 ]
   end

   if !empty( oTotal )
      oTotal:cText( Round( nCalculo, nDouDiv ) )
   end

   if oMargen <> nil
      oMargen:cText( AllTrim( Trans( nMargen, cPorDiv ) + AllTrim( cSimDiv( cCodDiv, D():Get( "Divisas", nView ) ) ) + " : " + AllTrim( Trans( nRentabilidad, "999.99" ) ) + "%" ) )
   end

   if !empty( oComisionLinea )
      oComisionLinea:cText( Round( ( nBase * aTmp[ 18 ] / 100 ), nRouDiv ) )
   end

RETURN ( if( !lTotal, .T., nCalculo ) )






STATIC FUNCTION AppDeta( oBrwLin, bEdtDet, aTmpAlb, lTot, nMode, cCodArt )

   If( lTot == nil, lTot := .F., ) ;

   WinAppRec( oBrwLin, bEdtDet, dbfTmpLin, lTot, cCodArt, aTmpAlb )

RETURN ( RecalculaTotal( aTmpAlb ) )



STATIC FUNCTION LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, lFocused )

   local hHas128
   local cLote
   local dFechaCaducidad
   local nDtoAge
   local cCodFam
   local cPrpArt
   local nCosPro
   local cValPr1                 := ""
   local cValPr2                 := ""
   local cProveedor
   local nPrePro                 := 0
   local nImpAtp                 := 0
   local nImpOfe                 := 0
   local nNumDto                 := 0
   local nTarOld                 := aTmp[ 76 ]
   local lChgCodArt              := ( empty( cOldCodArt ) .OR. rtrim( cOldCodArt ) <> rtrim( cCodArt ) )
   local lChgPrpArt              := ( cOldPrpArt <> aTmp[ 28 ] + aTmp[ 29 ] + aTmp[ 30 ] + aTmp[ 31 ] )
   local lChgLotArt              := ( cOldLotArt <> Rtrim( aTmp[ 44 ] ) )
   local hAtipica
   local nUnidades               := 0
   local cArtLotCad
   local hLoteAct

   If( lFocused == nil, lFocused := .T., ) ;

   if empty( aTmp[ 21 ] )
      aTmp[ 21 ]            := GetSysDate()
   end

   if empty( aTmp[ 22 ] )
      aTmp[ 22 ]           := cDefVta()
   end

   if empty( aTmp[ 38 ] )
      aTmp[ 38 ]           := aTmpAlb[ 7 ]
   end

   if empty( aTmp[ 39 ] )
      aTmp[ 39 ]           := aTmpAlb[ 59 ]
   end

   if empty( aTmp[ 27 ] )
      aTmp[ 27 ]          := aTmpAlb[ 30 ]
   end

   if empty( aTmp[ 69 ] )
      aTmp[ 69 ]          := aTmpAlb[ 83 ]
   end

   if empty( aTmp[ 68 ] )
      aTmp[ 68 ]          := aTmpAlb[ 82 ]
   end

   if empty( aTmp[ 105 ] )
      aTmp[ 105 ]           := aTmpAlb[ 27 ]
   end

   if empty( aTmp[ 76 ] ) .AND. !empty( oGetTarifa:getTarifa() )
      aTmp[ 76 ]           := oGetTarifa:getTarifa()
   end

   if empty( aTmp[ 38 ] ) .AND. !empty( oTipAlb )
      aTmp[ 71 ]        :=  ( oTipAlb:nAt == 2 )
   end

   if empty( cCodArt )

      if lRetCodArt()
         if !empty( aGet )
            msgstop( "No se pueden añadir líneas sin codificar" )
         end
         return .F.
      end

      if empty( aTmp[ 11 ] )
         aGet[ 11 ]:bWhen     := {|| .T. }
      end

      if !empty( aGet )
         aGet[ 5 ]:cText( Space( 50 ) )
         aGet[ 5 ]:bWhen    := {|| .T. }
         aGet[ 5 ]:Hide()
         aGet[ 23  ]:Show()
         if lFocused
           aGet[ 23 ]:SetFocus()
         end
      end

      hidePropertiesTable( oBrwProperties )

      if !Empty( oGetCelda )
         oGetCelda:hide()
      end

   else

      if !empty(aGet)
         aGet[ 11 ]:bWhen  := {|| lModIva() }
      end



      if Len( Alltrim( cCodArt ) ) > 18

         if At( ";", cCodArt ) <> 0

            cArtLotCad           := cCodArt
            cCodArt              := Padr( SubStr( cArtLotCad, 1, ( At( ";", cArtLotCad ) - 1 ) ), 18 )
            cArtLotCad           := SubStr( cArtLotCad, At( ";", cArtLotCad ) + 1 )
            cLote                := Padr( SubStr( cArtLotCad, 1, ( At( ";", cArtLotCad ) - 1 ) ), 64 )
            dFechaCaducidad      := ctod( SubStr( cArtLotCad, At( ";", cArtLotCad ) + 1 ) )

         else

            hHas128              := GetHashGs128( cCodArt )

            if !empty( hHas128 )

               cCodArt           := uGetCodigo( hHas128, "00" )

               if Empty( cCodArt )
                  cCodArt        := uGetCodigo( hHas128, "01" )
               end

               cLote             := Upper( uGetCodigo( hHas128, "10" ) )

               dFechaCaducidad   := uGetCodigo( hHas128, "15" )

               if Empty( dFechaCaducidad )
                  dFechaCaducidad   := uGetCodigo( hHas128, "17" )
               end

               if Valtype( dFechaCaducidad ) == "C" .AND. Len( dFechaCaducidad ) == 6
                  dFechaCaducidad   := cTod( SubStr( dFechaCaducidad, 1, 2 ) + "/" + SubStr( dFechaCaducidad, 3, 2 ) + "/" + SubStr( dFechaCaducidad, 5, 2 ) )
               end

               nUnidades         := uGetCodigo( hHas128, "3103" )

            end

         end

      end






      cCodArt                 := cSeekCodebar( cCodArt, dbfCodebar, D():Articulos( nView ) )



      if aSeekProp( @cCodArt, @cValPr1, @cValPr2, D():Articulos( nView ), dbfTblPro )



         if ( D():Articulos( nView ) )->lObs
            if !empty( aGet )
               msgstop( "Artículo catalogado como obsoleto" )
            end
            return .F.
         end

         if ( lChgCodArt )

            cCodArt              := ( D():Articulos( nView ) )->Codigo

            if !empty(aGet)
               aGet[ 4 ]:cText( Padr( cCodArt, 200 ) )
            end
            aTmp[ 4 ]        := cCodArt



            aTmp[ 106  ]    := ( D():Articulos( nView ) )->cRefAux
            aTmp[ 107 ]    := ( D():Articulos( nView ) )->cRefAux2

            if ( D():Articulos( nView ) )->lMosCom .AND. !empty( ( D():Articulos( nView ) )->mComent )
               if !empty( aGet )
                  msgstop( trim( ( D():Articulos( nView ) )->mComent ) )
               end
            end



            aTmp[ 58  ]    := ( D():Articulos( nView ) )->cPrvHab
            aTmp[ 65  ]    := Padr( cRefPrvArt( aTmp[ 4 ], ( D():Articulos( nView ) )->cPrvHab , D():ProveedorArticulo( nView ) ), 18 )
            aTmp[ 5 ]    := ( D():Articulos( nView ) )->Nombre
            aTmp[ 23  ]    := ( D():Articulos( nView ) )->Nombre

            if !empty( aGet )
               aGet[ 58  ]:cText( aTmp[ 58 ] )
               aGet[ 58  ]:lValid()
               aGet[ 5 ]:show()
               aGet[ 23  ]:hide()
               aGet[ 5 ]:cText( aTmp[ 5 ] )
               aGet[ 23  ]:cText( aTmp[ 23  ] )
            end



            aTmp[ 97 ]  := dFechaUltimaVenta( aTmpAlb[ 6 ], aTmp[ 4 ], D():Get( "AlbCliL", nView ), D():Get( "FacCliL", nView ), D():Get( "FacCliT", nView ), D():Get( "FacCliL", nView ), dbfTikL )
            aTmp[ 98 ]  := nUnidadesUltimaVenta( aTmpAlb[ 6 ], aTmp[ 4 ], D():Get( "AlbCliL", nView ), D():Get( "FacCliL", nView ), D():Get( "FacCliT", nView ), D():Get( "FacCliL", nView ), dbfTikL )



            aTmp[ 28 ]     := ( D():Articulos( nView ) )->cCodPrp1
            aTmp[ 29 ]     := ( D():Articulos( nView ) )->cCodPrp2

            aGet[ 30 ]:cText( space( 20 ) )
            aGet[ 31 ]:cText( space( 20 ) )

            if !empty( aTmp[ 28 ] ) .AND. !empty( aGet ) .AND. !empty( aGet[ 30 ] )

               if !empty( cValPr1 )
                  aGet[ 30 ]:cText( cCodPrp( aTmp[ 28 ], cValPr1, D():PropiedadesLineas( nView ) ) )
               end

            end

            if !empty( aTmp[ 29 ] ) .AND. !empty( aGet ) .AND. !empty( aGet[ 31 ] )

               if !empty( cValPr2 )
                  aGet[ 31 ]:cText( cCodPrp( aTmp[ 29 ], cValPr2, D():PropiedadesLineas( nView ) ) )
               end

            end



            if !empty( ( D():Articulos( nView ) )->Descrip )

               aTmp[ 23 ]  := ( D():Articulos( nView ) )->Descrip
               aTmp[ 89 ]  := ( D():Articulos( nView ) )->Descrip

               if !empty(aGet)
                  aGet[ 23 ]:cText( aTmp[ 23 ] )
                  aGet[ 89 ]:cText( aTmp[ 89 ] )
               end

            end



            aTmp[ 15 ]        := ( D():Articulos( nView ) )->nPesoKg
            if !empty(aGet)
               aGet[ 15 ]:cText( aTmp[ 15 ] )
            end

            aTmp[ 16 ]        := ( D():Articulos( nView ) )->cUndDim
            if !empty(aGet)
               aGet[ 16 ]:cText( aTmp[ 16 ] )
            end

            aTmp[ 66 ]       := ( D():Articulos( nView ) )->nVolumen
            if !empty(aGet)
               aGet[ 66 ]:cText( aTmp[ 66 ] )
            end

            aTmp[ 17 ]        := ( D():Articulos( nView ) )->cUnidad
            if !empty(aGet)
               aGet[ 17 ]:cText( aTmp[ 17 ] )
               aGet[ 17 ]:lValid()
            end

            aTmp[ 67 ]       := ( D():Articulos( nView ) )->cVolumen
            if !empty(aGet)
               aGet[ 67 ]:cText( aTmp[ 67 ]  )
            end



            cCodFam              := ( D():Articulos( nView ) )->Familia

            if !empty( cCodFam )

               aTmp[ 54 ]  := cCodFam
               aTmp[ 55 ]  := cGruFam( cCodFam, D():Familias( nView ) )

               if !empty(aGet)
                  aGet[ 54 ]:cText( aTmp[ 54 ] )
                  aGet[ 54 ]:lValid()
                  aGet[ 55 ]:cText( aTmp[ 55 ] )
                  aGet[ 55 ]:lValid()
               end

            else

               if !empty(aGet)
                  aGet[ 54 ]:cText( Space( 8 ) )
                  aGet[ 54 ]:lValid()
                  aGet[ 55 ]:cText( Space( 3 ) )
                  aGet[ 55 ]:lValid()
               end

            end



            if ( D():Articulos( nView ) )->lKitArt

               aTmp[ 46 ]     := ( D():Articulos( nView ) )->lKitArt
               aTmp[ 25 ]     := lImprimirCompuesto( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
               aTmp[ 48 ]     := lPreciosCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )

               if lStockCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )

                  aTmp[ 35 ]  := ( D():Articulos( nView ) )->nCtlStock
                  if !empty(aGet)
                     aGet[ 35 ]:SetOption( aTmp[ 35 ] )
                  end

               else

                  aTmp[ 35 ]  := 3
                  if !empty(aGet)
                     aGet[ 35 ]:SetOption( 3 )
                  end

               end

            else

               aTmp[ 25 ]     := .F.
               aTmp[ 35 ]     := ( D():Articulos( nView ) )->nCtlStock

               if !empty(aGet)
                  aGet[ 35 ]:setOption( aTmp[ 35 ] )
               end

            end



            if aTmpAlb[ 60 ] <= 2

               aTmp[ 11 ]     := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
               aTmp[ 56 ]     := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )

               if !empty( aGet )
                  aGet[ 11 ]:cText( aTmp[ 11 ] )
               end

            end



            aTmp[ 41 ]     := ( D():Articulos( nView ) )->cCodImp

            if !empty(aGet)
               oNewImp:setCodeAndValue( aTmp[ 41 ], aGet[ 40 ] )
               aGet[ 40 ]:cText( aTmp[ 40 ] )
            else
               oNewImp:setCodeAndValue( aTmp[ 41 ] )
               aTmp[ 40 ]  := aTmp[ 40 ]
            end

            if !empty( ( D():Articulos( nView ) )->cCodImp )
               aTmp[ 92 ]  := RetFld( ( D():Articulos( nView ) )->cCodImp, oNewImp:oDbf:cAlias, "lIvaVol" )
            end



            if ( D():Articulos( nView ) )->nBulEnt <> 0
               if !empty( aGet )
                  aGet[ 99 ]:cText( ( D():Articulos( nView ) )->nBulEnt )
               else
                  aTmp[ 99 ]  := ( D():Articulos( nView ) )->nBulEnt
               end
            end

            if ( D():Articulos( nView ) )->nCajEnt <> 0

               aTmp[ 12 ]  := ( D():Articulos( nView ) )->nCajEnt

               if !empty( aGet )
                  aGet[ 12 ]:Refresh()
               end

            end

            if !Empty( nUnidades )
               aTmp[ 19 ] := nUnidades
            end

            if Empty( nUnidades ) .AND. ( D():Articulos( nView ) )->nUniCaja <> 0
               aTmp[ 19 ] := ( D():Articulos( nView ) )->nUniCaja
            end

            if !empty( aGet )
               aGet[ 19 ]:Refresh()
            end



            loadComisionAgente( aTmp, aGet, aTmpAlb )



            aTmp[ 50 ]     := ( D():Articulos( nView ) )->lMsgVta
            aTmp[ 51 ]     := ( D():Articulos( nView ) )->lNotVta

            if ( D():Articulos( nView ) )->lFacCnv
               aTmp[ 32 ]  := ( D():Articulos( nView ) )->nFacCnv
            end



            aTmp[ 53 ]     := ( D():Articulos( nView ) )->cCodTip

            if !empty( aGet )
               aGet[ 53 ]:cText( aTmp[ 53 ] )
            end



            aTmp[ 60 ]     := ( D():Articulos( nView ) )->cImagen

            if !empty(aGet)
               aGet[ 60 ]:cText( aTmp[ 60 ] )
            end

            if !empty( bmpImage )
               if !empty( aTmp[ 60 ] )
                  bmpImage:Show()
                  bmpImage:LoadBmp( cFileBitmap( cPatImg(), aTmp[ 60 ] ) )
               else
                  bmpImage:Hide()
               end
            end

            aTmp[ 28 ]   := ( D():Articulos( nView ) )->cCodPrp1
            aTmp[ 29 ]   := ( D():Articulos( nView ) )->cCodPrp2



            if ( !empty( aTmp[ 28 ] ) .OR. !empty( aTmp[ 29 ] ) ) .AND. uFieldEmpresa( "lUseTbl" ) .AND. nMode == 1

               if !empty( aGet )
                  aGet[ 12  ]:cText( 0 )
                  aGet[ 19 ]:cText( 0 )
               end

               setPropertiesTable( cCodArt, aTmp[ 28 ], aTmp[ 29 ], aGet[ 6 ], aGet[ 19 ], oBrwProperties, nView )

               if !Empty( oGetCelda )
                  oGetCelda:Show()
               end

            else

               hidePropertiesTable( oBrwProperties )

               if !Empty( oGetCelda )
                  oGetCelda:hide()
               end

               if !empty( aTmp[ 28 ] )

                  if !empty(aGet)

                     aGet[ 30 ]:Show()
                     if lFocused
                        aGet[ 30 ]:SetFocus()
                     end

                     if !empty( aTmp[ 30 ] )
                        aGet[ 30 ]:lValid()
                     end

                  end

                  if !empty( oSayPr1 )
                     oSayPr1:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp1, dbfPro ) )
                     oSayPr1:Show()
                  end

                  if !empty( oSayVp1 )
                     oSayVp1:SetText( "" )
                     oSayVp1:Show()
                  end

               else

                  if !empty(aGet)
                     aGet[ 30 ]:hide()
                  end

                  if !empty( oSayPr1 )
                     oSayPr1:hide()
                  end

                  if !empty( oSayVp1 )
                     oSayVp1:hide()
                  end

               end

               if !empty( aTmp[ 29 ] )

                  if !empty(aGet)

                     aGet[ 31 ]:show()

                     if !empty( aTmp[ 31 ] )
                        aGet[ 31 ]:lValid()
                     end

                  end

                  if !empty( oSayPr2 )
                     oSayPr2:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp2, dbfPro ) )
                     oSayPr2:show()
                  end

                  if !empty( oSayVp2 )
                     oSayVp2:SetText( "" )
                     oSayVp2:Show()
                  end

               else

                  if !empty(aGet)
                     aGet[ 31 ]:hide()
                  end

                  if !empty( oSayPr2 )
                     oSayPr2:hide()
                  end

                  if !empty( oSayVp2 )
                     oSayVp2:hide()
                  end

               end

            end

         end




         cPrpArt              := aTmp[ 28 ] + aTmp[ 29 ] + aTmp[ 30 ] + aTmp[ 31 ]

         if ( lChgCodArt ) .OR. ( lChgPrpArt )



            if nMode == 1
               cCodFam        := RetFamArt( cCodArt, D():Articulos( nView ) )
            else
               cCodFam        := aTmp[ 54 ]
            end



            aTmp[ 9 ]     := 0
            if !empty( aGet )
               aGet[ 9 ]:cText( aTmp[ 9 ] )
            end

            aTmp[ 33 ]  := 0
            if !empty( aGet )
               aGet[ 33 ]:cText( aTmp[ 33 ] )
            end

            aTmp[ 10 ]  := 0
            if !empty( aGet )
               aGet[ 10 ]:cText( aTmp[ 10 ] )
            end

            aTmp[ 91  ] := .F.



            aTmp[ 37 ]  := ( D():Articulos( nView ) )->PvpRec

            aTmp[ 7 ]  := ( D():Articulos( nView ) )->nPntVer1
            if !empty(aGet)
               aGet[ 7 ]:cText( aTmp[ 7 ] )
            end





            if uFieldempresa( "lDtoCliLin" )

               if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                  aGet[ 9 ]:cText( retFld( aTmpAlb[ 6 ], D():Clientes( nView ), "nDtoEsp" ) )
                  aTmp[ 9 ]     := retFld( aTmpAlb[ 6 ], D():Clientes( nView ), "nDtoEsp" )
               else
                  aTmp[ 9 ]     := retFld( aTmpAlb[ 6 ], D():Clientes( nView ), "nDtoEsp" )
               end

            end



            nNumDto              := RetFld( aTmpAlb[ 6 ], D():Get( "Client", nView ), "nDtoArt" )

            if nNumDto <> 0
               aTmp[ 9 ]     := ( D():Articulos( nView ) )->( fieldGet( fieldPos( "nDtoArt" + alltrim( str( nNumDto ) ) ) ) )

               if !empty( aGet[ 9 ] )
                  aGet[ 9 ]:cText( aTmp[ 9 ] )
               end

            end



            if aTmp[ 9 ] == 0

               aTmp[ 9 ]     := nDescuentoFamilia( cCodFam, D():Familias( nView ) )

               if !empty( aGet )
                  aGet[ 9 ]:cText( aTmp[ 9 ] )
               end

            end



            aTmp[ 17 ]     := ( D():Articulos( nView ) )->cUnidad
            if !empty( aGet )
               aGet[ 17 ]:cText( aTmp[ 17 ] )
            end



            nPrePro              := nPrePro( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 30 ], aTmp[ 29 ], aTmp[ 31 ], aTmp[ 76 ], aTmpAlb[ 59 ], dbfArtDiv, dbfTarPreL, aTmpAlb[ 28 ] )

            if nPrePro == 0
               nPrePro           := nRetPreArt( aTmp[ 76 ], aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ) , , , oNewImp )
            end

            aTmp[ 6 ] := nPrePro

            if !empty( aGet )
               aGet[ 6 ]:cText( nPrePro )
            end



            if aTmp[ 71 ]

               aTmp[ 6 ] := 0
               if !empty( aGet )
                  aGet[ 6 ]:cText( aTmp[ 6 ] )
               end

               aTmp[ 70  ] := nPreAlq( aTmp[ 4 ], aTmp[ 76 ], aTmpAlb[ 59 ], D():Articulos( nView ) )
               if !empty( aGet )
                  aGet[ 70  ]:cText( aTmp[ 70  ] )
               end

            end

            SysRefresh()

            ValidaMedicion( aTmp, aGet )



            if !empty( aTmpAlb[ 28 ] )

               nImpOfe     := RetPrcTar( aTmp[ 4 ], aTmpAlb[ 28 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], dbfTarPreL, aTmp[ 76 ] )
               if nImpOfe  <> 0
                  aTmp[ 6 ]    := nImpOfe
                  if !empty(aGet)
                     aGet[ 6 ]:cText( nImpOfe )
                  end
               end



               nImpOfe     := RetPctTar( aTmp[ 4 ], aTmp[ 54 ], aTmpAlb[ 28 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], dbfTarPreL )
               if nImpOfe  <> 0
                  aTmp[ 9 ]     := nImpOfe
                  if !empty(aGet)
                     aGet[ 9 ]:cText( aTmp[ 9 ] )
                  end
               end



               nImpOfe     := RetLinTar( aTmp[ 4 ], aTmp[ 54 ], aTmpAlb[28], aTmp[28], aTmp[29], aTmp[30], aTmp[31], dbfTarPreL )
               if nImpOfe  <> 0
                  aTmp[ 33 ]  := nImpOfe
                  if !empty(aGet)
                     aGet[ 33 ]:cText( aTmp[ 33 ] )
                  end
               end



               nImpOfe     := RetComTar( aTmp[ 4 ], aTmp[ 54 ], aTmpAlb[28], aTmp[28], aTmp[29], aTmp[30], aTmp[31], aTmpAlb[26], dbfTarPreL, dbfTarPreS )
               if nImpOfe  <> 0
                  aTmp[ 18 ]  := nImpOfe
                  if !empty(aGet)
                     aGet[ 18 ]:cText( aTmp[ 18 ] )
                  end
               end



               nImpOfe     := RetDtoPrm( aTmp[ 4 ], aTmp[ 54 ], aTmpAlb[28], aTmp[28], aTmp[29], aTmp[30], aTmp[31], aTmpAlb[5], dbfTarPreL )
               if nImpOfe  <> 0
                  aTmp[ 10 ]  := nImpOfe
                  if !empty(aGet)
                     aGet[ 10 ]:cText( aTmp[ 10 ] )
                  end
               end



               nDtoAge     := RetDtoAge( aTmp[ 4 ], aTmp[ 54 ], aTmpAlb[ 28 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmpAlb[ 5 ], aTmpAlb[ 26 ], dbfTarPreL, dbfTarPreS )
               if nDtoAge  <> 0
                  aTmp[ 18 ]  := nDtoAge
                  if !empty(aGet)
                     aGet[ 18 ]:cText( nDtoAge )
                  end
               end

            end





               hAtipica       := hAtipica( hValue( aTmp, aTmpAlb ) )


               if !empty( hAtipica )

                  if hhaskey( hAtipica, "nTarifaFamilia" ) .AND. hAtipica[ "nTarifaFamilia" ] > 0

                     aTmp[ 6 ]    := nRetPreArt( hAtipica[ "nTarifaFamilia" ], aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ) , , , oNewImp )

                     if empty(aGet)
                        aGet[ 6 ]:cText( nRetPreArt( hAtipica[ "nTarifaFamilia" ], aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ) , , , oNewImp ) )
                        aGet[ 6 ]:Refresh()
                     end

                  end

                  if hhaskey( hAtipica, "nImporte" ) .AND. hAtipica[ "nImporte" ] <> 0

                     aTmp[ 6 ]    := hAtipica[ "nImporte" ]
                     if empty(aGet)
                        aGet[ 6 ]:cText( hAtipica[ "nImporte" ] )
                        aGet[ 6 ]:Refresh()
                     end

                  end

                  if hhaskey( hAtipica, "nDescuentoPorcentual" ) .AND. hAtipica[ "nDescuentoPorcentual" ] <> 0
                     aTmp[ 9 ]        := hAtipica[ "nDescuentoPorcentual" ]
                     if empty(aGet)
                        aGet[ 9 ]:cText( hAtipica[ "nDescuentoPorcentual" ] )
                        aGet[ 9 ]:Refresh()
                     end
                  end

                  if hhaskey( hAtipica, "nDescuentoPromocional" ) .AND. hAtipica[ "nDescuentoPromocional" ] <> 0
                     aTmp[ 10 ]     := hAtipica[ "nDescuentoPromocional" ]
                     if empty(aGet)
                        aGet[ 10 ]:cText( hAtipica[ "nDescuentoPromocional" ] )
                        aGet[ 10 ]:Refresh()
                     end
                  end

                  if hhaskey( hAtipica, "nComisionAgente" ) .AND. hAtipica[ "nComisionAgente" ] <> 0
                     aTmp[ 18 ]     := hAtipica[ "nComisionAgente" ]
                     if !empty(aGet)
                        aGet[ 18 ]:cText( hAtipica[ "nComisionAgente" ] )
                        aGet[ 18 ]:Refresh()
                     end
                  end

                  if hhaskey( hAtipica, "nDescuentoLineal" ) .AND. hAtipica[ "nDescuentoLineal" ] <> 0
                     aTmp[ 33 ]     := hAtipica[ "nDescuentoLineal" ]
                     if !empty(aGet)
                        aGet[ 33 ]:cText( hAtipica[ "nDescuentoLineal" ] )
                        aGet[ 33 ]:Refresh()
                     end
                  end

               end



            SysRefresh()

         end



         if ( lChgCodArt ) .OR. ( lChgLotArt )



            if ( D():Articulos( nView ) )->lLote

               aTmp[ 42 ]       := ( D():Articulos( nView ) )->lLote



               if empty( cLote ) .AND. uFieldempresa( "lLoaUltLot" )
                  cLote             := ( D():Articulos( nView ) )->cLote



               end

               if !empty( aGet )

                  aGet[ 44 ]:Show()

                  if empty( aGet[ 44 ]:varGet() )
                     aGet[ 44 ]:cText( cLote )
                  end

               else

                  if empty( aTmp[ 44 ] )
                     aTmp[ 44 ]    := cLote
                  end

               end



               if empty( dFechaCaducidad )
                  dFechaCaducidad      := StocksModel():getFechaCaducidad( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ] )





               end

               if !empty( aGet )
                  aGet[ 45 ]:Show()
                  if empty( aGet[ 45 ]:varget() ) .OR. ( dFechaCaducidad <> dOldFecCad )
                     if aTmp[ 42 ] .AND. !Empty( aGet[ 44 ]:VarGet() )
                     aGet[ 45 ]:cText( dFechaCaducidad )
                     end
                  end
               else
                  if empty( aTmp[ 45 ] ) .AND. uFieldempresa( "lLoaUltLot" )
                     aTmp[ 45 ]  := dFechaCaducidad
                  end
               end

            else

               if !empty( aGet )
                  aTmp[ 44 ]    := Space( 14 )
                  aGet[ 44 ]:cText( Space( 14 ) )
                  aGet[ 44   ]:Hide()
                  aTmp[ 45 ]  := cTod( "" )
                  aGet[ 45 ]:cText( cTod( "" ) )
                  aGet[ 45 ]:Hide()
               end

            end



            do case
               case uFieldEmpresa( "nCosVta" ) < 2

                  nCosPro           := oStock:nCostoMedio( aTmp[ 4 ], aTmp[ 38 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ] )

                  if nCosPro == 0
                     nCosPro        := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpAlb[ 6 ] )
                  end

               case uFieldEmpresa( "nCosVta" ) == 2

                  nCosPro           := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpAlb[ 6 ] )

               case uFieldEmpresa( "nCosVta" ) == 3

                  nCosPro           := MaterialesProducidosLineasModel():getCosto(  aTmp[ 4 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ] )

                  if nCosPro == 0
                     nCosPro        := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpAlb[ 6 ] )
                  end

            end












            if aTmp[ 36 ] == 0

               aTmp[ 36 ]     := nCosPro

               if !empty( aGet )
                  aGet[ 36 ]:cText( nCosPro )
               end

            end

         end



         if ( lChgCodArt ) .OR. ( lChgPrpArt ) .OR. ( lChgLotArt )

            if !uFieldempresa( "lNStkAct") .AND. oStkAct <> nil .AND. aTmp[ 35 ] <= 1
               StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 38 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ], oStkAct )
            end

         end



         lBuscaOferta( aTmp[ 4 ], aGet, aTmp, aTmpAlb, dbfKit )



         cOldPrpArt     := cPrpArt
         cOldCodArt     := cCodArt
         dOldFecCad     := dFechaCaducidad
         cOldLotArt     := aTmp[ 44 ]

         if !empty(aGet)

            if !empty( aGet[ 6 ] )
               aGet[ 6 ]:Refresh()
            end

            if !empty( aGet[ 9 ] )
               aGet[ 9 ]:Refresh()
            end

         end



         if !empty(aGet)

            if ( empty( aTmp[ 6 ] ) .OR. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) ) .AND. ( nMode <> 3 )
               aGet[ 6 ]:HardEnable()
               aGet[ 8  ]:HardEnable()
               aGet[ 7  ]:HardEnable()
               aGet[ 9     ]:HardEnable()
               aGet[ 10  ]:HardEnable()
               aGet[ 33  ]:HardEnable()
            else
               aGet[ 6 ]:HardDisable()
               aGet[ 8  ]:HardDisable()
               aGet[ 7  ]:HardDisable()
               aGet[ 9     ]:HardDisable()
               aGet[ 10  ]:HardDisable()
               aGet[ 33  ]:HardDisable()
            end
         end

      else

         if !empty( aGet )
            msgStop( "Artículo no encontrado." )
         end

         Return ( .F. )

      end

   end

Return ( .T. )



STATIC FUNCTION SaveDeta( aTmp, aTmpAlb, oFld, aGet, oBrw, bmpImage, oDlg, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nStkAct, oTotal, cCodArt, oBtn, oBtnSer )

   local n
   local i
   local aClo
   local nTotUnd
   local hAtipica
   local lBeforeAppendEvent
   local nPrecioPropiedades   := 0

   if !empty(oBtn)
      oBtn:SetFocus()
   end









   if empty( aTmp[ 38 ] )
      msgStop( "Código de almacen no puede estar vacio" )
      if !empty(aGet)
         aGet[ 38 ]:SetFocus()
      end
      return nil
   end

   if !lValidAlmacen( aTmp[ 38 ], dbfAlm )
      return nil
   end



   if lPrecioMinimo( aTmp[ 4 ], aTmp[ 6 ], nMode, D():Articulos( nView ) )
      msgStop( "El precio de venta es inferior al precio mínimo.")
      return nil
   end



   if ( nMode == 1 ) .AND. RetFld( aTmp[ 4 ], D():Articulos( nView ), "lNumSer" ) .AND. !( dbfTmpSer )->( dbSeek( Str( aTmp[ 34 ], 4 ) + aTmp[ 4 ] ) )
      MsgStop( "Tiene que introducir números de serie para este artículo." )
      if !empty(oBtnSer)
         oBtnSer:Click()
      end
      return nil
   end

   if !empty( aTmp[ 4 ] ) .AND. ( aTmp[ 51 ] .OR. aTmp[ 50 ] )

      nTotUnd     := nTotNAlbCli( aTmp )

      if nMode == 2
         nTotUnd  -= nTotNAlbCli( dbfTmpLin )
      end

      if !lCompruebaStock( aTmp, oStock, nTotUnd, nStkAct )
         return nil
      end

   end



   if ( nMode == 1 .OR. nMode == 4 )

      if isfalse( runEventScript( "AlbaranesClientes\Lineas\beforeAppend", aTmp, aTmpAlb, nView, dbfTmpLin ) )
         Return .F.
      end

   end



   CursorWait()

   aTmp[ 109 ]  := cTipoCtrCoste

   aTmp[ 56 ]     := nPReq( D():Get( "TIva", nView ), aTmp[ 11 ] )

   aClo              := aClone( aTmp )



   if nMode == 1

      if aTmp[ 42 ]
         saveLoteActual( aTmp[ 4 ], aTmp[ 44 ], nView )
      end



      if !empty( oBrwProperties ) .AND. !empty( oBrwProperties:Cargo )

         for n := 1 to len( oBrwProperties:Cargo )

            for i := 1 to len( oBrwProperties:Cargo[ n ] )

               if !Empty( oBrwProperties:Cargo[ n, i ] )

                  if isNum( oBrwProperties:Cargo[ n, i ]:Value ) .AND. oBrwProperties:Cargo[ n, i ]:Value <> 0

                     aTmp[ 34 ]     := nLastNum( dbfTmpLin )
                     aTmp[ 108 ]   := nLastNum( dbfTmpLin, "nPosPrint" )
                     aTmp[ 19]     := oBrwProperties:Cargo[ n, i ]:Value
                     aTmp[ 28 ]     := oBrwProperties:Cargo[ n, i ]:cCodigoPropiedad1
                     aTmp[ 30 ]     := oBrwProperties:Cargo[ n, i ]:cValorPropiedad1
                     aTmp[ 29 ]     := oBrwProperties:Cargo[ n, i ]:cCodigoPropiedad2
                     aTmp[ 31 ]     := oBrwProperties:Cargo[ n, i ]:cValorPropiedad2



                     nPrecioPropiedades   := nPrePro( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 30 ], aTmp[ 29 ], aTmp[ 31 ], aTmp[ 76 ], aTmpAlb[ 59 ], dbfArtDiv, dbfTarPreL, aTmpAlb[ 28 ] )
                     if !empty(nPrecioPropiedades)
                        aTmp[ 6 ] := nPrecioPropiedades
                     end



                     saveDetail( aTmp, aClo, aGet, aTmpAlb, dbfTmpLin, oBrw, nMode )

                  end

               end

            next

         next

         aCopy( dbBlankRec( dbfTmpLin ), aTmp )

         if !empty(aGet)
            aeval( aGet, {| o, i | if( "GET" $ o:className(), o:cText( aTmp[ i ] ), ) } )
         end

      else

        saveDetail( aTmp, aClo, aGet, aTmpAlb, dbfTmpLin, oBrw, nMode )

      end

   else



      WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

   end

   if nMode == 1
      oLinDetCamposExtra:SaveTemporalAppend( ( dbfTmpLin )->( OrdKeyNo() ) )
   end



   if !empty( bmpImage )
       bmpImage:Hide()
       PalBmpFree( bmpImage:hBitmap, bmpImage:hPalette )
   end



   cOldCodArt     := ""
   cOldUndMed     := ""

   if nMode == 1 .AND. lEntCon()

      recalculaTotal( aTmpAlb )

      acopy( dbBlankRec( dbfTmpLin ), aTmp )

      if !empty( aGet )
         aeval( aGet, {| o, i | if( "GET" $ o:ClassName(), o:cText( aTmp[ i ] ), ) } )
      end

      setDlgMode( aTmp, aTmpAlb, nMode, aGet, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, oTotal )

      if !empty( aGet ) .AND. !empty( aGet[ 4 ] )
         aGet[ 4 ]:SetFocus()
      end

      sysRefresh()

   else

      if !empty( oDlg )
         oDlg:End( 1 )
      end

   end

   CursorWE()

RETURN NIL



Static Function saveDetail( aTmp, aClo, aGet, aTmpAlb, dbfTmpLin, oBrw, nMode )

   local hAtipica
   local sOfertaArticulo
   local nCajasGratis         := 0
   local nUnidadesGratis      := 0



   hAtipica                   := hAtipica( hValue( aTmp, aTmpAlb ) )

   if !empty( hAtipica )
      if hhaskey( hAtipica, "nCajasGratis" ) .AND. hget( hAtipica, "nCajasGratis" ) <> 0
         nCajasGratis         := hget( hAtipica, "nCajasGratis" )
      end
      if hhaskey( hAtipica, "nUnidadesGratis" ) .AND. hget( hAtipica, "nUnidadesGratis" ) <> 0
         nUnidadesGratis      := hget( hAtipica, "nUnidadesGratis" )
      end
   end



   if empty( nCajasGratis ) .AND. empty( nUnidadesGratis )

      sOfertaArticulo         := structOfertaArticulo( D():getHashArray( aTmpAlb, "AlbCliT", nView ), D():getHashArray( aTmp, "AlbCliL", nView ), nTotLAlbCli( aTmp ), nView )

      if !empty( sOfertaArticulo )
         nCajasGratis         := sOfertaArticulo:nCajasGratis
         nUnidadesGratis      := sOfertaArticulo:nUnidadesGratis
      end

   end



   if nCajasGratis <> 0
      aTmp[ 91 ]        := .T.
      aTmp[ 12 ]        -= nCajasGratis
      commitDetail( aTmp, aClo, nil, aTmpAlb, dbfTmpLin, oBrw, nMode )

      aTmp[ 91 ]        := .T.
      aTmp[ 12 ]        := nCajasGratis
      aTmp[ 6]        := 0
      aTmp[ 9    ]        := 0
      aTmp[ 33 ]        := 0
      aTmp[ 10 ]        := 0
      aTmp[ 18 ]        := 0
   end



   if nUnidadesGratis <> 0
      aTmp[ 91 ]        := .T.
      aTmp[ 19]        -= nUnidadesGratis

      commitDetail( aTmp, aClo, nil, aTmpAlb, dbfTmpLin, oBrw, nMode )

      aTmp[ 91 ]        := .T.
      aTmp[ 19]        := nUnidadesGratis
      aTmp[ 6]        := 0
      aTmp[ 9    ]        := 0
      aTmp[ 33 ]        := 0
      aTmp[ 10 ]        := 0
      aTmp[ 18 ]        := 0
   end

   commitDetail( aTmp, aClo, aGet, aTmpAlb, dbfTmpLin, oBrw, nMode )

Return nil



Static Function commitDetail( aTmp, aClo, aGet, aTmpAlb, dbfTmpLin, oBrw, nMode )

   winGather( aTmp, aGet, dbfTmpLin, oBrw, nMode, nil, .F. )

   appendAsociado( aClo, aTmpAlb )

   if ( nMode == 1 ) .AND. ( aClo[ 46 ] )
      appendKit( aClo, aTmpAlb )
   end

Return nil



STATIC FUNCTION appendAsociado( uTmpLin, aTmpAlb )

   local cCodArt
   local cSerAlb
   local nNumAlb
   local cSufAlb
   local nCanEnt
   local dFecAlb
   local cTipMov
   local cAlmLin
   local nIvaLin
   local lIvaLin
   local nComAge
   local nUniCaj
   local nDtoGrl
   local nDtoPrm
   local nDtoDiv
   local cNumPed
   local nTarLin
   local nRecAct                       := ( ( D():Asociado( nView ) ) )->( RecNo() )
   local nRecLin                       := ( dbfTmpLin )->( RecNo() )
   local nNumLin                       := ( dbfTmpLin )->nNumLin
   local nPosPrint
   local nUnidades                     := 0
   local nStkActual                    := 0
   local nStockMinimo                  := 0
   local nOrdAnt                    := ( D():Asociado( nView ) )->( OrdSetFocus( "cCodArt" ) )

   if isArray( uTmpLin )
      cCodArt                          := uTmpLin[ 4    ]
      cSerAlb                          := uTmpLin[ 1 ]
      nNumAlb                          := uTmpLin[ 2 ]
      cSufAlb                          := uTmpLin[ 3 ]
      nCanEnt                          := uTmpLin[ 12 ]
      dFecAlb                          := uTmpLin[ 21  ]
      cTipMov                          := uTmpLin[ 22 ]
      cAlmLin                          := uTmpLin[ 38 ]
      nIvaLin                          := uTmpLin[ 11    ]
      lIvaLin                          := uTmpLin[ 39 ]
      nComAge                          := uTmpLin[ 18 ]
      nUniCaj                          := uTmpLin[ 19]
      nDtoGrl                          := uTmpLin[ 9    ]
      nDtoPrm                          := uTmpLin[ 10 ]
      nDtoDiv                          := uTmpLin[ 33 ]
      nNumLin                          := uTmpLin[ 34 ]
      nPosPrint                        := uTmpLin[ 108 ]
      nTarLin                          := uTmpLin[ 76 ]
   else
      cCodArt                          := ( uTmpLin )->cRef
      cSerAlb                          := ( uTmpLin )->cSerAlb
      nNumAlb                          := ( uTmpLin )->nNumAlb
      cSufAlb                          := ( uTmpLin )->cSufAlb
      nCanEnt                          := ( uTmpLin )->nCanEnt
      dFecAlb                          := ( uTmpLin )->dFecha
      cTipMov                          := ( uTmpLin )->cTipMov
      cAlmLin                          := ( uTmpLin )->cAlmLin
      nIvaLin                          := ( uTmpLin )->nIva
      lIvaLin                          := ( uTmpLin )->lIvaLin
      nComAge                          := ( uTmpLin )->nComAge
      nUniCaj                          := ( uTmpLin )->nUniCaja
      nDtoGrl                          := ( uTmpLin )->nDto
      nDtoPrm                          := ( uTmpLin )->nDtoPrm
      nDtoDiv                          := ( uTmpLin )->nDtoDiv
      nNumLin                          := ( uTmpLin )->nNumLin
      nPosPrint                        := ( uTmpLin )->nPosPrint
      nTarLin                          := ( uTmpLin )->nTarLin
   end





   if ( D():Asociado( nView ) )->( dbSeek( cCodArt ) )

      while ( D():Asociado( nView ) )->cCodArt == cCodArt .AND. !( D():Asociado( nView ) )->( eof() )

         if ( D():Articulos( nView ) )->( dbSeek( ( D():Asociado( nView ) )->cRefAsc ) )

            ( dbfTmpLin )->( dbAppend() )

            ( dbfTmpLin )->nNumLin     := nNumLin
            ( dbfTmpLin )->nPosPrint   := nPosPrint

            ( dbfTmpLin )->nNumKit     := nLastNum( dbfTmpLin, "nNumKit" )
            ( dbfTmpLin )->cRef        := ( D():Asociado( nView ) )->cRefAsc
            ( dbfTmpLin )->cDetalle    := ( D():Articulos( nView ) )->Nombre
            ( dbfTmpLin )->nPntVer     := ( D():Articulos( nView ) )->nPntVer1
            ( dbfTmpLin )->nPesokg     := ( D():Articulos( nView ) )->nPesoKg
            ( dbfTmpLin )->cPesokg     := ( D():Articulos( nView ) )->cUndDim
            ( dbfTmpLin )->cUnidad     := ( D():Articulos( nView ) )->cUnidad
            ( dbfTmpLin )->nVolumen    := ( D():Articulos( nView ) )->nVolumen
            ( dbfTmpLin )->cVolumen    := ( D():Articulos( nView ) )->cVolumen
            ( dbfTmpLin )->nCtlStk     := ( D():Articulos( nView ) )->nCtlStock
            ( dbfTmpLin )->nPvpRec     := ( D():Articulos( nView ) )->PvpRec
            ( dbfTmpLin )->cCodImp     := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->lLote       := ( D():Articulos( nView ) )->lLote
            ( dbfTmpLin )->cLote       := ( D():Articulos( nView ) )->cLote

            ( dbfTmpLin )->nCosDiv     := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpAlb[ 6 ] )





            ( dbfTmpLin )->cCodFam     := ( D():Articulos( nView ) )->Familia
            ( dbfTmpLin )->cGrpFam     := cGruFam( ( dbfTmpLin )->cCodFam, D():Familias( nView ) )





            ( dbfTmpLin )->cSerAlb     := cSerAlb
            ( dbfTmpLin )->nNumAlb     := nNumAlb
            ( dbfTmpLin )->cSufAlb     := cSufAlb
            ( dbfTmpLin )->nCanEnt     := nCanEnt
            ( dbfTmpLin )->dFecha      := dFecAlb
            ( dbfTmpLin )->cTipMov     := cTipMov
            ( dbfTmpLin )->cAlmLin     := cAlmLin
            ( dbfTmpLin )->lIvaLin     := lIvaLin





            ( dbfTmpLin )->nUniCaja    := nUniCaj * ( D():Asociado( nView ) )->nUndAsc





            ( dbfTmpLin )->nIva     := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
            ( dbfTmpLin )->nReq     := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )





            ( dbfTmpLin )->nPreUnit := nRetPreArt( nTarLin, aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )





            ( dbfTmpLin )->nCtlStk  := ( D():Articulos( nView ) )->nCtlStock

         end

         ( D():Asociado( nView ) )->( dbSkip() )

      end

   end

   ( D():Asociado( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():Asociado( nView ) )->( dbGoTo( nRecAct ) )
   ( dbfTmpLin )->( dbGoTo( nRecLin ) )

RETURN NIL




STATIC FUNCTION AppendKit( uTmpLin, aTmpAlb )

   local cCodArt
   local cSerAlb
   local nNumAlb
   local cSufAlb
   local nCanEnt
   local dFecAlb
   local cTipMov
   local cAlmLin
   local nIvaLin
   local lIvaLin
   local nComAge
   local nUniCaj
   local nDtoGrl
   local nDtoPrm
   local nDtoDiv
   local cNumPed
   local nTarLin
   local nNumLin                       := ( dbfTmpLin )->nNumLin
   local nPosPrint
   local nRecAct                       := ( dbfKit    )->( RecNo() )
   local nRecLin                       := ( dbfTmpLin )->( RecNo() )
   local nUnidades                     := 0
   local nStkActual                    := 0
   local nStockMinimo                  := 0

   if ValType( uTmpLin ) == "A"
      cCodArt                          := uTmpLin[ 4    ]
      cSerAlb                          := uTmpLin[ 1 ]
      nNumAlb                          := uTmpLin[ 2 ]
      cSufAlb                          := uTmpLin[ 3 ]
      nCanEnt                          := uTmpLin[ 12 ]
      dFecAlb                          := uTmpLin[ 21  ]
      cTipMov                          := uTmpLin[ 22 ]
      cAlmLin                          := uTmpLin[ 38 ]
      nIvaLin                          := uTmpLin[ 11    ]
      lIvaLin                          := uTmpLin[ 39 ]
      nComAge                          := uTmpLin[ 18 ]
      nUniCaj                          := uTmpLin[ 19]
      nDtoGrl                          := uTmpLin[ 9    ]
      nDtoPrm                          := uTmpLin[ 10 ]
      nDtoDiv                          := uTmpLin[ 33 ]
      nNumLin                          := uTmpLin[ 34 ]
      nPosPrint                        := uTmpLin[ 108 ]
      cNumPed                          := uTmpLin[ 27]
      nTarLin                          := uTmpLin[ 76 ]
   else
      cCodArt                          := ( uTmpLin )->cRef
      cSerAlb                          := ( uTmpLin )->cSerAlb
      nNumAlb                          := ( uTmpLin )->nNumAlb
      cSufAlb                          := ( uTmpLin )->cSufAlb
      nCanEnt                          := ( uTmpLin )->nCanEnt
      dFecAlb                          := ( uTmpLin )->dFecha
      cTipMov                          := ( uTmpLin )->cTipMov
      cAlmLin                          := ( uTmpLin )->cAlmLin
      nIvaLin                          := ( uTmpLin )->nIva
      lIvaLin                          := ( uTmpLin )->lIvaLin
      nComAge                          := ( uTmpLin )->nComAge
      nUniCaj                          := ( uTmpLin )->nUniCaja
      nDtoGrl                          := ( uTmpLin )->nDto
      nDtoPrm                          := ( uTmpLin )->nDtoPrm
      nDtoDiv                          := ( uTmpLin )->nDtoDiv
      nNumLin                          := ( uTmpLin )->nNumLin
      nPosPrint                        := ( uTmpLin )->nPosPrint
      cNumPed                          := ( uTmpLin )->cNumPed
      nTarLin                          := ( uTmpLin )->nTarLin
   end





   if ( dbfKit )->( dbSeek( cCodArt ) )

      while ( dbfKit )->cCodKit == cCodArt .AND. !( dbfKit )->( eof() )

         if ( D():Articulos( nView ) )->( dbSeek( ( dbfKit )->cRefKit ) )

            ( dbfTmpLin )->( dbAppend() )

            ( dbfTmpLin )->nNumLin     := nNumLin
            ( dbfTmpLin )->nPosPrint   := nPosPrint
            ( dbfTmpLin )->lKitChl     := .T.

            ( dbfTmpLin )->nNumKit     := nLastNum( dbfTmpLin, "nNumKit" )
            ( dbfTmpLin )->cRef        := ( dbfKit )->cRefKit
            ( dbfTmpLin )->cDetalle    := ( D():Articulos( nView ) )->Nombre
            ( dbfTmpLin )->nPntVer     := ( D():Articulos( nView ) )->nPntVer1
            ( dbfTmpLin )->nPesokg     := ( D():Articulos( nView ) )->nPesoKg
            ( dbfTmpLin )->cPesokg     := ( D():Articulos( nView ) )->cUndDim
            ( dbfTmpLin )->cUnidad     := ( D():Articulos( nView ) )->cUnidad
            ( dbfTmpLin )->nVolumen    := ( D():Articulos( nView ) )->nVolumen
            ( dbfTmpLin )->cVolumen    := ( D():Articulos( nView ) )->cVolumen
            ( dbfTmpLin )->nCtlStk     := ( D():Articulos( nView ) )->nCtlStock
            ( dbfTmpLin )->nPvpRec     := ( D():Articulos( nView ) )->PvpRec
            ( dbfTmpLin )->cCodImp     := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->lLote       := ( D():Articulos( nView ) )->lLote
            ( dbfTmpLin )->cLote       := ( D():Articulos( nView ) )->cLote

            ( dbfTmpLin )->nCosDiv     := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpAlb[ 6 ] )
            ( dbfTmpLin )->nValImp     := oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp )

            if ( D():Articulos( nView ) )->lFacCnv
               ( dbfTmpLin )->nFacCnv  := ( D():Articulos( nView ) )->nFacCnv
            end





            ( dbfTmpLin )->cCodFam     := ( D():Articulos( nView ) )->Familia
            ( dbfTmpLin )->cGrpFam     := cGruFam( ( dbfTmpLin )->cCodFam, D():Familias( nView ) )





            ( dbfTmpLin )->cSerAlb     := cSerAlb
            ( dbfTmpLin )->nNumAlb     := nNumAlb
            ( dbfTmpLin )->cSufAlb     := cSufAlb
            ( dbfTmpLin )->nCanEnt     := nCanEnt
            ( dbfTmpLin )->dFecha      := dFecAlb
            ( dbfTmpLin )->cTipMov     := cTipMov
            ( dbfTmpLin )->cNumPed     := cNumPed
            ( dbfTmpLin )->cAlmLin     := cAlmLin
            ( dbfTmpLin )->lIvaLin     := lIvaLin





            ( dbfTmpLin )->lImpLin     := lImprimirComponente( cCodArt, D():Articulos( nView ) )
            ( dbfTmpLin )->lKitPrc     := lPreciosComponentes( cCodArt, D():Articulos( nView ) )

            ( dbfTmpLin )->nComAge     := nComAge
            ( dbfTmpLin )->nUniCaja    := nUniCaj * ( dbfKit )->nUndKit





            if !empty( nIvaLin )
               ( dbfTmpLin )->nIva     := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
               ( dbfTmpLin )->nReq     := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
            else
               ( dbfTmpLin )->nIva     := 0
               ( dbfTmpLin )->nReq     := 0
            end





            if ( dbfTmpLin )->lKitPrc
               ( dbfTmpLin )->nPreUnit := nRetPreArt( nTarLin, aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )
            end





            if lStockComponentes( cCodArt, D():Articulos( nView ) )
               ( dbfTmpLin )->nCtlStk  := ( D():Articulos( nView ) )->nCtlStock
            else
               ( dbfTmpLin )->nCtlstk  := 3
            end





            if ( dbfKit )->lAplDto
               ( dbfTmpLin )->nDto     := nDtoGrl
               ( dbfTmpLin )->nDtoPrm  := nDtoPrm
               ( dbfTmpLin )->nDtoDiv  := nDtoDiv
            end

            if ( D():Articulos( nView ) )->lKitArt
               AppendKit( dbfTmpLin, aTmpAlb )
            end





            nStockMinimo      := nStockMinimo( cCodArt, cAlmLin, nView )

            if ( D():Articulos( nView ) )->lMsgVta .AND. !uFieldEmpresa( "lNStkAct" ) .AND. nStockMinimo <> 0

               nStkActual     := StocksModel():nStockArticulo( ( dbfKit )->cRefKit, cAlmLin )
               nUnidades      := nUniCaj * ( dbfKit )->nUndKit

               do case
                  case nStkActual - nUnidades < 0



                     MsgStop( "No hay stock suficiente para realizar la venta" + Chr(13)+Chr(10) +  "del componente " + AllTrim( ( dbfKit )->cRefKit ) + " - " + AllTrim( ( D():Articulos( nView ) )->Nombre ), "¡Atención!" )

                  case nStkActual - nUnidades < nStockMinimo






                     MsgStop( "El stock del componente " + AllTrim( ( dbfKit )->cRefKit ) + " - " + AllTrim( ( D():Articulos( nView ) )->Nombre )  + Chr(13)+Chr(10) +  "está bajo minimo."                                                                                                  + Chr(13)+Chr(10) +  "Unidades a vender : " + AllTrim( Trans( nUnidades, MasUnd() ) )                                                     + Chr(13)+Chr(10) +  "Stock minimo : " + AllTrim( Trans( nStockMinimo, MasUnd() ) )                                                       + Chr(13)+Chr(10) +  "Stock actual : " + AllTrim( Trans( nStkActual, MasUnd() ) ), "¡Atención!" )

               end

            end

         end

         ( dbfKit )->( dbSkip() )

      end

   end

   ( dbfKit    )->( dbGoTo( nRecAct ) )
   ( dbfTmpLin )->( dbGoTo( nRecLin ) )

RETURN NIL



STATIC FUNCTION lMoreIva( nCodIva )





   IF aTotIva[ 1, 3 ] == nil .OR. aTotIva[ 2, 3 ] == nil .OR. aTotIva[ 3, 3 ] == nil
      RETURN .T.
   end

   IF aTotIva[ 1, 3 ] == nCodIva .OR. aTotIva[ 2, 3 ] == nCodIva .OR. aTotIva[ 3, 3 ] == nCodIva
      RETURN .T.
   end

   MsgStop( "Documento con mas de 3 tipos de " + cImp() )

RETURN .F.







STATIC FUNCTION EdtDeta( oBrwLin, bEdtDet, aTmpAlb, lTot, nMode )

   WinEdtRec( oBrwLin, bEdtDet, dbfTmpLin, lTot, nMode, aTmpAlb )

RETURN ( RecalculaTotal( aTmpAlb ) )







STATIC FUNCTION DelDeta( oBrwLin )

   CursorWait()

   while ( dbfTmpSer )->( dbSeek( Str( ( dbfTmpLin )->nNumLin, 4 ) ) )
      ( dbfTmpSer )->( dbDelete() )
   end

   if ( dbfTmpLin )->lKitArt
      dbDelKit( oBrwLin, dbfTmpLin, ( dbfTmpLin )->nNumLin )
   end

   CursorWE()

RETURN ( .T. )



STATIC FUNCTION EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg )

   local cSat
   local aTabla
   local oError
   local oBlock
   local cSerAlb
   local nNumAlb
   local cSufAlb
   local cNumPed
   local dFecAlb
   local cPedido
   local cCodCli

   if empty( aTmp[ 1 ] )
      aTmp[ 1 ]  := "A"
   end

   cSerAlb              := aTmp[ 1 ]
   nNumAlb              := aTmp[ 2 ]
   cSufAlb              := aTmp[ 3 ]
   cNumPed              := aTmp[ 30 ]
   dFecAlb              := aTmp[ 5 ]
   cSat                 := aTmp[ 32 ]
   cCodCli              := aTmp[ 6 ]

   aPedidos             := {}





   if !lValidaOperacion( aTmp[ 5 ] )
      Return .F.
   end

   if !lValidaSerie( aTmp[ 1 ] )
      Return .F.
   end





   if empty( aTmp[ 6 ] )
      msgStop( "Código de cliente no puede estar vacío." )
      aGet[ 6 ]:SetFocus()
      return .F.
   end

   if lCliBlq( aTmp[ 6 ], D():Get( "Client", nView ) )


      msgStop( "Cliente bloqueado, no se pueden realizar operaciones de venta"  + Chr(13)+Chr(10) +  "Motivo: " + AllTrim( RetFld( aTmp[ 6 ], D():Clientes( nView ), "cMotBlq" ) ), "Imposible archivar como albarán" )
      aGet[ 6 ]:SetFocus()
      return .F.
   end

   if !lCliChg( aTmp[ 6 ], D():Get( "Client", nView ) )
      msgStop( "Este cliente no tiene autorización para venta a credito." )
      aGet[ 6 ]:SetFocus()
      return .F.
   end

   if nTotAlb > 0

      if lClienteAlcanzadoRiesgoPermitido( ( D():Get( "Client", nView ) )->lCreSol, ( D():Get( "Client", nView ) )->Riesgo, nRieCli - nTotOld + nTotAlb )
         aGet[ 6 ]:SetFocus()
         return .F.
      end

   end

   if lLimitDaysPendiente( aTmp[ 6 ] )
      msgStop( "Este cliente supera el limite de días de facturas pendientes." )
      if !empty( aGet[ 6 ] )
           aGet[ 6 ]:SetFocus()
       end
       return .F.
   end

   if empty( aTmp[ 7 ] )
      msgStop( "Almacén no puede estar vacío." )
      aGet[ 7 ]:SetFocus()
      return .F.
   end

   if empty( aTmp[ 8 ] )
      msgStop( "Caja no puede estar vacía." )
      aGet[ 8 ]:SetFocus()
      return .F.
   end

   if empty( aTmp[ 23 ] )
      msgStop( "Forma de pago no puede estar vacía." )
      aGet[ 23 ]:SetFocus()
      return .F.
   end

   if empty( aTmp[ 53 ] )
      MsgStop( "No puede almacenar documento sin código de divisa." )
      aGet[ 53 ]:SetFocus()
      return .F.
   end

   if empty( aTmp[ 26 ] ) .AND. lRecogerAgentes()
      msgStop( "Agente no puede estar vacío." )
      aGet[ 26 ]:SetFocus()
      return .F.
   end

   if empty( aTmp[ 27 ] ) .AND. lObras() .AND. ( ClientesDireccionesModel():nCount( aTmp[ 6 ] ) > 0 )
      MsgStop( "Debe de introducir una obra." )
      aGet[ 27 ]:SetFocus()
      return .F.
   end

   if ( dbfTmpLin )->( eof() )
      MsgStop( "No puede almacenar un documento sin líneas." )
      return .F.
   end

   if nTotDif < 0
      msgInfo( "La carga excede la capacidad del medio de transporte." )
   end



   if isAppendOrDuplicateMode( nMode )
      if isfalse( runEventScript( "AlbaranesClientes\beforeAppend", aTmp, nView, dbfTmpLin ) )
         return .F.
      end
   end

   if isEditMode( nMode )
      if isfalse( runEventScript( "AlbaranesClientes\beforeEdit", aTmp, nView, dbfTmpLin ) )
         return .F.
      end
   end

   CursorWait()

   oDlg:Disable()

   oMsgText( "Archivando" )

   oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE



   ( dbfTmpLin )->( dbClearFilter() )

   oMsgProgress()
   oMsgProgress():SetRange( 0, ( dbfTmpLin )->( LastRec() ) )



   aTmp[ 71 ]        := Date()
   aTmp[ 72 ]        := Time()
   aTmp[ 36 ]        := oGetTarifa:getTarifa()



   if !empty( oTipAlb ) .AND. oTipAlb:nAt == 2
      aTmp[ 84 ]   := .T.
   else
      aTmp[ 84 ]   := .F.
   end



   if isAppendOrDuplicateMode( nMode )
      nNumAlb              := nNewDoc( aTmp[ 1 ], D():Get( "AlbCliT", nView ), "NALBCLI", , D():Get( "NCount", nView ) )
      aTmp[ 2 ]     := nNumAlb
      cSufAlb              := retSufEmp()
      aTmp[ 3 ]     := cSufAlb
      nTotOld              := 0
   end



   BeginTransaction()

   if isEditMode( nMode )

      while ( D():Get( "AlbCliL", nView ) )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .AND. !( D():Get( "AlbCliL", nView ) )->( eof() )

         TComercio:appendProductsToUpadateStocks( (dbfTmpLin)->cRef, nView )

         if dbLock( D():Get( "AlbCliL", nView ) )
            ( D():Get( "AlbCliL", nView ) )->( dbDelete() )
            ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
         end

      end

      while ( D():Get( "AlbCliI", nView ) )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .AND. !( D():Get( "AlbCliI", nView ) )->( eof() )
         if dbLock( D():Get( "AlbCliI", nView ) )
            ( D():Get( "AlbCliI", nView ) )->( dbDelete() )
            ( D():Get( "AlbCliI", nView ) )->( dbUnLock() )
         end
      end

      while ( D():Get( "AlbCliD", nView ) )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .AND. !( D():Get( "AlbCliD", nView ) )->( eof() )
         if dbLock( D():Get( "AlbCliD", nView ) )
            ( D():Get( "AlbCliD", nView ) )->( dbDelete() )
            ( D():Get( "AlbCliD", nView ) )->( dbUnLock() )
         end
      end

      while ( D():Get( "AlbCliS", nView ) )->( dbSeek( cSerAlb + Str( nNumAlb ) + cSufAlb ) ) .AND. !( D():Get( "AlbCliS", nView ) )->( eof() )
         if dbLock( D():Get( "AlbCliS", nView ) )
            ( D():Get( "AlbCliS", nView ) )->( dbDelete() )
            ( D():Get( "AlbCliS", nView ) )->( dbUnLock() )
         end
      end

      while ( D():AlbaranesClientesSituaciones( nView ) )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .AND. !( D():AlbaranesClientesSituaciones( nView ) )->( eof() )
         if dbLock( D():AlbaranesClientesSituaciones( nView ) )
            ( D():AlbaranesClientesSituaciones( nView ) )->( dbDelete() )
            ( D():AlbaranesClientesSituaciones( nView ) )->( dbUnLock() )
         end
      end

   end



   ( dbfTmpLin )->( dbGoTop() )
   while !( dbfTmpLin )->( eof() )

      if !( ( dbfTmpLin )->nUniCaja == 0 .AND. ( dbfTmpLin )->lFromAtp )

         ( dbfTmpLin )->dFecAlb        := aTmp[ 5 ]
         ( dbfTmpLin )->tFecAlb        := aTmp[ 104 ]
         ( dbfTmpLin )->cCodCli        := aTmp[ 6 ]
         ( dbfTmpLin )->nRegIva        := aTmp[ 60 ]

         if empty( ( dbfTmpLin )->cCtrCoste )
            ( dbfTmpLin )->cCtrCoste   := aTmp[ 105 ]
         endif

         dbPass( dbfTmpLin, D():Get( "AlbCliL", nView ), .T., cSerAlb, nNumAlb, cSufAlb )

      end

      if !Empty( ( dbfTmpLin )->cNumPed ) .AND. !( dbfTmpLin )->lKitChl
         aAdd( aPedidos, { .T., nil, ( dbfTmpLin )->cNumPed, nil, nil, nil, nil, nil, nil, nil } )
      end

      TComercio:appendProductsToUpadateStocks( (dbfTmpLin)->cRef, nView )

      oLinDetCamposExtra:saveExtraField( cSerAlb + Str( nNumAlb ) + cSufAlb + Str( ( dbfTmpLin )->nNumLin ) + Str( ( dbfTmpLin )->nNumKit ), ( dbfTmpLin )->( OrdKeyNo() ) )

      if !( dbfTmpLin )->lKitChl








         AtipicasModel():SaveUltimoPrecioVenta( {  "cCodCli" => aTmp[ 6 ] , "cCodArt" => ( dbfTmpLin )->cRef , "cCodPr1" => ( dbfTmpLin )->cCodPr1 , "cCodPr2" => ( dbfTmpLin )->cCodPr2 , "cValPr1" => ( dbfTmpLin )->cValPr1 , "cValPr2" => ( dbfTmpLin )->cValPr2 , "nPrcArt" => ( dbfTmpLin )->nPreUnit, "nTarifa" => aTmp[ 36 ] } )

      end


      ( dbfTmpLin )->( dbSkip() )

      oMsgProgress():deltaPos(1)

   end



   aTmp[ 89 ]     := nTotNet
   aTmp[ 90 ]     := nTotIva
   aTmp[ 91 ]     := nTotReq
   aTmp[ 92 ]     := nTotAlb
   aTmp[ 93 ]     := nTotPag





   oDetCamposExtra:saveExtraField( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "" )

   WinGather( aTmp, , D():Get( "AlbCliT", nView ), , nMode )





   ( dbfTmpInc )->( dbgotop() )
   while ( dbfTmpInc )->( !eof() )
      dbPass( dbfTmpInc, D():Get( "AlbCliI", nView ), .T., cSerAlb, nNumAlb, cSufAlb )
      ( dbfTmpInc )->( dbSkip() )
   end





   if uFieldempresa( "lAddAtp" )

      ( dbfTmpLin )->( dbGoTop() )

      while !( dbfTmpLin )->( Eof() )

         if !Empty( ( dbfTmpLin )->cRef )




            AtipicasModel():AddArticulo( {   "cCodCli"   => cCodCli, "cCodArt"   => ( dbfTmpLin )->cRef, "cNomArt"   => ( dbfTmpLin )->cDetalle, "nPreUnit"  => ( dbfTmpLin )->nPreUnit } )

         end

         ( dbfTmpLin )->( dbSkip() )

      end

      ( dbfTmpLin )->( dbGoTop() )

   end





   ( dbfTmpDoc )->( dbgotop() )
   while ( dbfTmpDoc )->( !eof() )
      dbPass( dbfTmpDoc, D():Get( "AlbCliD", nView ), .T., cSerAlb, nNumAlb, cSufAlb )
      ( dbfTmpDoc )->( dbSkip() )
   end





   ( dbfTmpSer )->( dbgotop() )
   while ( dbfTmpSer )->( !eof() )
      dbPass( dbfTmpSer, D():Get( "AlbCliS", nView ), .T., cSerAlb, nNumAlb, cSufAlb, dFecAlb )
      ( dbfTmpSer )->( dbSkip() )
   end





   ( dbfTmpEst )->( dbgotop() )
   while ( dbfTmpEst )->( !eof() )
      dbPass( dbfTmpEst, D():AlbaranesClientesSituaciones( nView ), .T., cSerAlb, nNumAlb, cSufAlb )
      ( dbfTmpEst )->( dbSkip() )
   end





   if !empty( cNumPed )





      oStock:SetEstadoPedCli( cNumPed, .T., cSerAlb + Str( nNumAlb ) + cSufAlb )

      if ( dbfPedCliP )->( dbSeek( cNumPed ) )

         while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .AND. !( dbfPedCliP )->( Eof() )

            if !( dbfPedCliP )->lPasado

               if dbLock( dbfPedCliP )
                  ( dbfPedCliP )->lPasado := .T.
                  ( dbfPedCliP )->( dbUnLock() )
               end

            end

            ( dbfPedCliP )->( dbSkip() )

         end

      end

   end







   if Empty( cNumPed ) .AND. Len( aPedidos ) <> 0

      for each cPedido in aPedidos

         if ( cPedido[ 1 ] ) .AND. ( dbSeekInOrd( cPedido[ 3 ], "nNumPed", dbfPedCliT ) )

            oStock:SetEstadoPedCli( cPedido[ 3 ], .T., cSerAlb + Str( nNumAlb ) + cSufAlb )

            if dbLock( dbfPedCliT )
               ( dbfPedCliT )->cNumAlb    := cSerAlb + Str( nNumAlb ) + cSufAlb
               ( dbfPedCliT )->( dbUnLock() )
            end

         end

      next

   end

   if !Empty( cSat ) .AND. dbSeekInOrd( cSat, "nNumSat", D():SatClientes( nView ) )
      if dbLock( D():SatClientes( nView ) )
         ( D():SatClientes( nView ) )->cNumAlb    := cSerAlb + Str( nNumAlb ) + cSufAlb
         ( D():SatClientes( nView ) )->( dbUnLock() )
      end
   end



   CommitTransaction()



   if ( nMode == 1 .OR. nMode == 4 )
      runEventScript( "AlbaranesClientes\afterAppend", aTmp, nView )
   end

   CursorWE()

   RECOVER USING oError

      RollBackTransaction()

      msgStop( "Imposible almacenar documento" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

   oMsgText()
   endProgress()



   TComercio:updateWebProductStocks()

   oDlg:Enable()
   oDlg:End( 1 )

RETURN .T.



Static Function YearComboBoxChange()

   if ( oWndBrw:oWndBar:cYearComboBox() <> "[Todos]" )
      oWndBrw:oWndBar:setYearComboBoxExpression( "Year( Field->dFecAlb ) == " + oWndBrw:oWndBar:cYearComboBox() )
   else
      oWndBrw:oWndBar:setYearComboBoxExpression( "" )
   end

   oWndBrw:chgFilter()

Return nil



Static Function lBuscaOferta( cCodArt, aGet, aTmp, aTmpAlb, dbfKit )

   local sOfeArt
   local nTotalLinea    := 0

   if ( D():Articulos( nView ) )->Codigo == cCodArt .OR. ( D():Articulos( nView ) )->( dbSeek( cCodArt ) )





      nTotalLinea := lCalcDeta( aTmp, aTmpAlb, nDouDiv, , , aTmpAlb[ 53 ], .T. )

      sOfeArt     := sOfertaArticulo( cCodArt, aTmpAlb[ 6 ], aTmpAlb[ 74 ], aTmp[ 19 ], aTmpAlb[ 5 ], dbfOferta, aTmp[ 76 ], aTmpAlb[ 59 ], aTmp[28], aTmp[29], aTmp[30], aTmp[31], aTmp[ 53 ], aTmp[ 12 ], nTotalLinea )

      if !empty( sOfeArt )
         if ( sOfeArt:nPrecio <> 0 )
            aGet[ 6 ]:cText( sOfeArt:nPrecio )
         end
         if ( sOfeArt:nDtoPorcentual <> 0 )
            aGet[ 9     ]:cText( sOfeArt:nDtoPorcentual )
         end
         if ( sOfeArt:nDtoLineal <> 0)
            aGet[ 33  ]:cText( sOfeArt:nDtoLineal )
         end
         aTmp[ 91  ] := .T.
      end





      if !aTmp[ 91 ]

         sOfeArt     := sOfertaFamilia( ( D():Articulos( nView ) )->Familia, aTmpAlb[ 6 ], aTmpAlb[ 74 ], aTmpAlb[ 5 ], dbfOferta, aTmp[ 76 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 91 ]  := .T.
         end

      end





      if !aTmp[ 91 ]

         sOfeArt     := sOfertaTipoArticulo( ( D():Articulos( nView ) )->cCodTip, aTmpAlb[ 6 ], aTmpAlb[ 74 ], aTmpAlb[ 5 ], dbfOferta, aTmp[ 76 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 91 ]  := .T.
         end

      end





      if !aTmp[ 91 ]

         sOfeArt     := sOfertaCategoria( ( D():Articulos( nView ) )->cCodCate, aTmpAlb[ 6 ], aTmpAlb[ 74 ], aTmpAlb[ 5 ], dbfOferta, aTmp[ 76 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 91 ]  := .T.
         end

      end





      if !aTmp[ 91 ]

         sOfeArt     := sOfertaTemporada( ( D():Articulos( nView ) )->cCodTemp, aTmpAlb[ 6 ], aTmpAlb[ 74 ], aTmpAlb[ 5 ], dbfOferta, aTmp[ 76 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 91 ]  := .T.
         end

      end





      if !aTmp[ 91 ]

         sOfeArt     := sOfertaFabricante( ( D():Articulos( nView ) )->cCodFab, aTmpAlb[ 6 ], aTmpAlb[ 74 ], aTmpAlb[ 5 ], dbfOferta, aTmp[ 76 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 91 ]  := .T.
         end

      end

   end

return .T.



Static Function lValidLote( aTmp, aGet, oStkAct )

   if !uFieldEmpresa( "lNStkAct" )
      StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 38 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 44 ], oStkAct )
   end

Return ( .T. )



Static Function EditarNumeroSerie( aTmp, oStock, nMode )

   with object ( TNumerosSerie() )

      :nMode            := nMode

      :cCodArt          := aTmp[ 4    ]
      :cCodAlm          := aTmp[ 38 ]
      :nNumLin          := aTmp[ 34 ]

      :nTotalUnidades   := nTotNAlbCli( aTmp )

      :oStock           := oStock

      :uTmpSer          := dbfTmpSer

      :Resource()

   end

Return ( nil )






STATIC FUNCTION cPreCli( aGet, aTmp, oBrw, nMode )

   local cDesAlb
   local cPedido  := aGet[ 31 ]:VarGet()
   local lValid   := .F.

   if nMode <> 1 .OR. empty( cPedido )
      return .T.
   end

   if dbSeekInOrd( cPedido, "nNumPre", dbfPreCliT )

      if ( dbfPreCliT )->lEstado

         MsgStop( "Presupuesto ya aprobado" )
         lValid   := .F.

      else

         CursorWait()

         HideImportacion( aGet )

         aGet[ 6 ]:cText( ( dbfPreCliT )->CCODCLI )
         aGet[ 6 ]:lValid()
         aGet[ 6 ]:Disable()

         aGet[ 9 ]:cText( ( dbfPreCliT )->CNOMCLI )
         aGet[ 10 ]:cText( ( dbfPreCliT )->CDIRCLI )
         aGet[ 11 ]:cText( ( dbfPreCliT )->CPOBCLI )
         aGet[ 12 ]:cText( ( dbfPreCliT )->CPRVCLI )
         aGet[ 13 ]:cText( ( dbfPreCliT )->CPOSCLI )
         aGet[ 14 ]:cText( ( dbfPreCliT )->CDNICLI )
         aGet[ 88 ]:cText( ( dbfPreCliT )->CTLFCLI )

         aGet[ 7 ]:cText( ( dbfPreCliT )->CCODALM )
         aGet[ 7 ]:lValid()

         aGet[ 8 ]:cText( ( dbfPreCliT )->cCodCaj )
         aGet[ 8 ]:lValid()

         aGet[ 23]:cText( ( dbfPreCliT )->CCODPGO )
         aGet[ 23]:lValid()

         aGet[ 26 ]:cText( ( dbfPreCliT )->CCODAGE )
         aGet[ 26 ]:lValid()

         aGet[ 51]:cText( ( dbfPreCliT )->nPctComAge )

         aGet[ 28 ]:cText( ( dbfPreCliT )->CCODTAR )
         aGet[ 28 ]:lValid()

         aGet[ 27 ]:cText( ( dbfPreCliT )->CCODOBR )
         aGet[ 27 ]:lValid()

         oGetTarifa:setTarifa( ( dbfPreCliT )->nTarifa )

         aGet[ 67 ]:cText( ( dbfPreCliT )->cCodTrn )
         aGet[ 67 ]:lValid()

         aGet[ 59 ]:Click( ( dbfPreCliT )->lIvaInc )
         aGet[ 50]:Click( ( dbfPreCliT )->lRecargo )
         aGet[ 94 ]:Click( ( dbfPreCliT )->lOperPv )

         aGet[ 20]:cText( ( dbfPreCliT )->cCondEnt )
         aGet[ 21 ]:cText( ( dbfPreCliT )->mComent )
         aGet[ 22 ]:cText( ( dbfPreCliT )->mObserv )

         aGet[ 37 ]:cText( ( dbfPreCliT )->cDtoEsp )
         aGet[ 39    ]:cText( ( dbfPreCliT )->cDpp    )
         aGet[ 38 ]:cText( ( dbfPreCliT )->nDtoEsp )
         aGet[ 40    ]:cText( ( dbfPreCliT )->nDpp    )
         aGet[ 41 ]:cText( ( dbfPreCliT )->cDtoUno )
         aGet[ 42 ]:cText( ( dbfPreCliT )->nDtoUno )
         aGet[ 43 ]:cText( ( dbfPreCliT )->cDtoDos )
         aGet[ 44 ]:cText( ( dbfPreCliT )->nDtoDos )
         aGet[ 85 ]:cText( ( dbfPreCliT )->cManObr )
         aGet[ 65 ]:cText( ( dbfPreCliT )->nIvaMan )
         aGet[ 66 ]:cText( ( dbfPreCliT )->nManObr )
         aGet[ 24 ]:cText( ( dbfPreCliT )->nBultos )

         aTmp[ 74 ]        := ( dbfPreCliT )->cCodGrp
         aTmp[ 15 ]        := ( dbfPreCliT )->lModCli





         aTmp[ 84 ]      := ( dbfPreCliT )->lAlquiler
         aTmp[ 82  ]      := ( dbfPreCliT )->dFecEntr
         aTmp[ 83   ]      := ( dbfPreCliT )->dFecSal

         if ( dbfPreCliL )->( dbSeek( cPedido ) )

            ( dbfTmpLin )->( dbAppend() )
            cDesAlb                    := ""
            cDesAlb                    += "Presupuesto Nº " + ( dbfPreCliT )->cSerPre + "/" + AllTrim( Str( ( dbfPreCliT )->nNumPre ) ) + "/" + ( dbfPreCliT )->cSufPre
            cDesAlb                    += " - Fecha " + Dtoc( ( dbfPreCliT )->dFecPre )
            ( dbfTmpLin )->MLNGDES     := cDesAlb
            ( dbfTmpLin )->LCONTROL    := .T.

            while ( (dbfPreCliL)->cSerPre + Str( (dbfPreCliL)->nNumPre ) + (dbfPreCliL)->cSufPre == cPedido )

               (dbfTmpLin)->( dbAppend() )

               (dbfTmpLin)->nNumLin    := (dbfPreCliL)->nNumLin
               (dbfTmpLin)->nPosPrint  := (dbfPreCliL)->nPosPrint
               (dbfTmpLin)->cRef       := (dbfPreCliL)->cRef
               (dbfTmpLin)->cDetalle   := (dbfPreCliL)->cDetAlle
               (dbfTmpLin)->mLngDes    := (dbfPreCliL)->mLngDes
               (dbfTmpLin)->mNumSer    := (dbfPreCliL)->mNumSer
               (dbfTmpLin)->nPreUnit   := (dbfPreCliL)->nPreDiv
               (dbfTmpLin)->nPntVer    := (dbfPreCliL)->nPntVer
               (dbfTmpLin)->nImpTrn    := (dbfPreCliL)->nImpTrn
               (dbfTmpLin)->nPESOKG    := (dbfPreCliL)->nPesOkg
               (dbfTmpLin)->cPESOKG    := (dbfPreCliL)->cPesOkg
               (dbfTmpLin)->cUnidad    := (dbfPreCliL)->cUnidad
               (dbfTmpLin)->nVolumen   := (dbfPreCliL)->nVolumen
               (dbfTmpLin)->cVolumen   := (dbfPreCliL)->cVolumen
               (dbfTmpLin)->nIVA       := (dbfPreCliL)->nIva
               (dbfTmpLin)->nReq       := (dbfPreCliL)->nReq
               (dbfTmpLin)->cUNIDAD    := (dbfPreCliL)->cUnidad
               (dbfTmpLin)->nDTO       := (dbfPreCliL)->nDto
               (dbfTmpLin)->nDTOPRM    := (dbfPreCliL)->nDtoPrm
               (dbfTmpLin)->nCOMAGE    := (dbfPreCliL)->nComAge
               (dbfTmpLin)->lTOTLIN    := (dbfPreCliL)->lTotLin
               (dbfTmpLin)->nDtoDiv    := (dbfPreCliL)->nDtoDiv
               (dbfTmpLin)->nCtlStk    := (dbfPreCliL)->nCtlStk
               (dbfTmpLin)->nCosDiv    := (dbfPreCliL)->nCosDiv
               (dbfTmpLin)->nPvpRec    := (dbfPreCliL)->nPvpRec
               (dbfTmpLin)->id_tipo_v  := (dbfPreCliL)->id_tipo_v
               (dbfTmpLin)->cAlmLin    := (dbfPreCliL)->cAlmLin
               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp
               (dbfTmpLin)->nValImp    := (dbfPreCliL)->nValImp
               (dbfTmpLin)->CCODPR1    := (dbfPreCliL)->cCodPr1
               (dbfTmpLin)->CCODPR2    := (dbfPreCliL)->cCodPr2
               (dbfTmpLin)->CVALPR1    := (dbfPreCliL)->cValPr1
               (dbfTmpLin)->CVALPR2    := (dbfPreCliL)->cValPr2
               (dbfTmpLin)->nCanEnt    := (dbfPreCLiL)->nCanPre
               (dbfTmpLin)->nUniCaja   := (dbfPreCLiL)->nUniCaja
               (dbfTmpLin)->nUndKit    := (dbfPreCLiL)->nUndKit
               (dbfTmpLin)->lKitArt    := (dbfPreCLiL)->lKitArt
               (dbfTmpLin)->lKitChl    := (dbfPreCLiL)->lKitChl
               (dbfTmpLin)->lKitPrc    := (dbfPreCliL)->lKitPrc
               (dbfTmpLin)->lLote      := (dbfPreCliL)->lLote
               (dbfTmpLin)->nLote      := (dbfPreCliL)->nLote
               (dbfTmpLin)->cLote      := (dbfPreCliL)->cLote
               (dbfTmpLin)->lMsgVta    := (dbfPreCliL)->lMsgVta
               (dbfTmpLin)->lNotVta    := (dbfPreCliL)->lNotVta
               (dbfTmpLin)->lImpLin    := (dbfPreCliL)->lImpLin
               (dbfTmpLin)->cCodTip    := (dbfPreCliL)->cCodTip
               (dbfTmpLin)->mObsLin    := (dbfPreCliL)->mObsLin
               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip
               (dbfTmpLin)->cCodPrv    := (dbfPreCliL)->cCodPrv
               (dbfTmpLin)->cImagen    := (dbfPreCliL)->cImagen
               (dbfTmpLin)->cCodFam    := (dbfPreCliL)->cCodFam
               (dbfTmpLin)->cGrpFam    := (dbfPreCliL)->cGrpFam
               (dbfTmpLin)->cRefPrv    := (dbfPreCliL)->cRefPrv
               (dbfTmpLin)->dFecEnt    := (dbfPreCliL)->dFecEnt
               (dbfTmpLin)->dFecSal    := (dbfPreCliL)->dFecSal
               (dbfTmpLin)->nPreAlq    := (dbfPreCliL)->nPreAlq
               (dbfTmpLin)->lAlquiler  := (dbfPreCliL)->lAlquiler
               (dbfTmpLin)->nNumMed    := (dbfPreCliL)->nNumMed
               (dbfTmpLin)->nMedUno    := (dbfPreCliL)->nMedUno
               (dbfTmpLin)->nMedDos    := (dbfPreCliL)->nMedDos
               (dbfTmpLin)->nMedTre    := (dbfPreCliL)->nMedTre
               (dbfTmpLin)->nPuntos    := (dbfPreCliL)->nPuntos
               (dbfTmpLin)->nValPnt    := (dbfPreCliL)->nValPnt
               (dbfTmpLin)->nDtoPnt    := (dbfPreCliL)->nDtoPnt
               (dbfTmpLin)->nIncPnt    := (dbfPreCliL)->nIncPnt
               (dbfTmpLin)->lControl   := (dbfPreCliL)->lControl
               (dbfTmpLin)->lLinOfe    := (dbfPreCliL)->lLinOfe
               (dbfTmpLin)->nBultos    := (dbfPreCliL)->nBultos
               (dbfTmpLin)->cFormato   := (dbfPreCliL)->cFormato
               (dbfTmpLin)->cRefAux    := (dbfPreCliL)->cRefAux
               (dbfTmpLin)->cRefAux2   := (dbfPreCliL)->cRefAux2
               (dbfTmpLin)->cCtrCoste  := (dbfPreCliL)->cCtrCoste
               (dbfTmpLin)->cTipCtr    := (dbfPreCliL)->cTipCtr
               (dbfTmpLin)->cTerCtr    := (dbfPreCliL)->cTerCtr

               (dbfPreCliL)->( dbSkip() )

            end

            ( dbfTmpLin )->( dbGoTop() )





            if ( dbfPreCliI )->( dbSeek( cPedido ) )

               while ( dbfPreCliI )->cSerPre + Str( ( dbfPreCliI )->nNumPre ) + ( dbfPreCliI )->cSufPre == cPedido .AND. !( dbfPreCliI )->( Eof() )
                  dbPass( dbfPreCliI, dbfTmpInc, .T. )
                  ( dbfPreCliI )->( dbSkip() )
               end

            end

            ( dbfPreCliI )->( dbGoTop() )





            if ( dbfPreCliD )->( dbSeek( cPedido ) )

               while ( dbfPreCliD )->cSerPre + Str( ( dbfPreCliD )->nNumPre ) + ( dbfPreCliD )->cSufPre == cPedido .AND. !( dbfPreCliD )->( Eof() )
                  dbPass( dbfPreCliD, dbfTmpDoc, .T. )
                  ( dbfPreCliD )->( dbSkip() )
               end

            end

            ( dbfPreCliD )->( dbGoTop() )

            oBrw:refresh()
            oBrw:setFocus()

         end

         lValid   := .T.

         if ( dbfPreCliT )->( dbRLock() )
            ( dbfPreCliT )->lEstado := .T.
            ( dbfPreCliT )->( dbUnlock() )
         end

         CursorWE()

      end

      HideImportacion( aGet, aGet[ 31 ] )

   else

      MsgStop( "Presupuesto no existe" )

   end

RETURN lValid



Static Function HideImportacion( aGet, oShow )

   oBtnPre:Hide()
   oBtnPed:Hide()

   oBtnAgruparPedido:Hide()

   aGet[ 31 ]:Hide()
   aGet[ 30 ]:Hide()
   aGet[ 32 ]:Hide()

   if !empty( oShow )
      oShow:Show()
   end

Return nil



STATIC FUNCTION cSatCli( aGet, aTmp, oBrw, nMode )

   local cDescript
   local cSatCliente    := aGet[ 32 ]:VarGet()
   local lValid         := .F.

   if nMode <> 1 .OR. empty( cSatCliente )
      return .T.
   end

   if dbSeekInOrd( cSatCliente, "nNumSat", D():SatClientes( nView ) )

      if ( D():SatClientes( nView ) )->lEstado

         MsgStop( "S.A.T de cliente pasado" )
         lValid   := .F.

      else

         CursorWait()

         HideImportacion( aGet )

         aGet[ 6 ]:cText( ( D():SatClientes( nView ) )->CCODCLI )
         aGet[ 6 ]:lValid()
         aGet[ 6 ]:Disable()

         aGet[ 9 ]:cText( ( D():SatClientes( nView ) )->CNOMCLI )
         aGet[ 10 ]:cText( ( D():SatClientes( nView ) )->CDIRCLI )
         aGet[ 11 ]:cText( ( D():SatClientes( nView ) )->CPOBCLI )
         aGet[ 12 ]:cText( ( D():SatClientes( nView ) )->CPRVCLI )
         aGet[ 13 ]:cText( ( D():SatClientes( nView ) )->CPOSCLI )
         aGet[ 14 ]:cText( ( D():SatClientes( nView ) )->CDNICLI )
         aGet[ 88 ]:cText( ( D():SatClientes( nView ) )->CTLFCLI )

         aGet[ 7 ]:cText( ( D():SatClientes( nView ) )->CCODALM )
         aGet[ 7 ]:lValid()

         aGet[ 8 ]:cText( ( D():SatClientes( nView ) )->cCodCaj )
         aGet[ 8 ]:lValid()

         aGet[ 23]:cText( ( D():SatClientes( nView ) )->CCODPGO )
         aGet[ 23]:lValid()

         aGet[ 26 ]:cText( ( D():SatClientes( nView ) )->CCODAGE )
         aGet[ 26 ]:lValid()

         aGet[ 51]:cText( ( D():SatClientes( nView ) )->nPctComAge )

         aGet[ 28 ]:cText( ( D():SatClientes( nView ) )->CCODTAR )
         aGet[ 28 ]:lValid()

         aGet[ 27 ]:cText( ( D():SatClientes( nView ) )->CCODOBR )
         aGet[ 27 ]:lValid()

         oGetTarifa:setTarifa( ( D():SatClientes( nView ) )->nTarifa )

         aGet[ 67 ]:cText( ( D():SatClientes( nView ) )->cCodTrn )
         aGet[ 67 ]:lValid()

         aGet[ 59 ]:Click( ( D():SatClientes( nView ) )->lIvaInc )
         aGet[ 50]:Click( ( D():SatClientes( nView ) )->lRecargo )
         aGet[ 94 ]:Click( ( D():SatClientes( nView ) )->lOperPv )

         aGet[ 20]:cText( ( D():SatClientes( nView ) )->cCondEnt )
         aGet[ 21 ]:cText( ( D():SatClientes( nView ) )->mComent )
         aGet[ 22 ]:cText( ( D():SatClientes( nView ) )->mObserv )

         aGet[ 37 ]:cText( ( D():SatClientes( nView ) )->cDtoEsp )
         aGet[ 39    ]:cText( ( D():SatClientes( nView ) )->cDpp    )
         aGet[ 38 ]:cText( ( D():SatClientes( nView ) )->nDtoEsp )
         aGet[ 40    ]:cText( ( D():SatClientes( nView ) )->nDpp    )
         aGet[ 41 ]:cText( ( D():SatClientes( nView ) )->cDtoUno )
         aGet[ 42 ]:cText( ( D():SatClientes( nView ) )->nDtoUno )
         aGet[ 43 ]:cText( ( D():SatClientes( nView ) )->cDtoDos )
         aGet[ 44 ]:cText( ( D():SatClientes( nView ) )->nDtoDos )
         aGet[ 85 ]:cText( ( D():SatClientes( nView ) )->cManObr )
         aGet[ 65 ]:cText( ( D():SatClientes( nView ) )->nIvaMan )
         aGet[ 66 ]:cText( ( D():SatClientes( nView ) )->nManObr )
         aGet[ 24 ]:cText( ( D():SatClientes( nView ) )->nBultos )

         aTmp[ 74 ]        := ( D():SatClientes( nView ) )->cCodGrp
         aTmp[ 15 ]        := ( D():SatClientes( nView ) )->lModCli

         if ( D():SatClientesLineas( nView ) )->( dbSeek( cSatCliente ) )

            ( dbfTmpLin )->( dbAppend() )
            cDescript                    := ""
            cDescript                    += "S.A.T. Nº " + ( D():SatClientes( nView ) )->cSerSat + "/" + AllTrim( Str( ( D():SatClientes( nView ) )->nNumSat ) ) + "/" + ( D():SatClientes( nView ) )->cSufSat
            cDescript                    += " - Fecha " + Dtoc( ( D():SatClientes( nView ) )->dFecSat )
            ( dbfTmpLin )->MLNGDES     := cDescript
            ( dbfTmpLin )->LCONTROL    := .T.

            while ( ( D():SatClientesLineas( nView ) )->cSerSat + Str( ( D():SatClientesLineas( nView ) )->nNumSat ) + ( D():SatClientesLineas( nView ) )->cSufSat == cSatCliente )

               ( dbfTmpLin )->( dbAppend() )

               ( dbfTmpLin )->nNumLin    := ( D():SatClientesLineas( nView ) )->nNumLin
               ( dbfTmpLin )->nPosPrint  := ( D():SatClientesLineas( nView ) )->nPosPrint
               ( dbfTmpLin )->cRef       := ( D():SatClientesLineas( nView ) )->cRef
               ( dbfTmpLin )->cDetalle   := ( D():SatClientesLineas( nView ) )->cDetAlle
               ( dbfTmpLin )->mLngDes    := ( D():SatClientesLineas( nView ) )->mLngDes
               ( dbfTmpLin )->mNumSer    := ( D():SatClientesLineas( nView ) )->mNumSer
               ( dbfTmpLin )->nPreUnit   := ( D():SatClientesLineas( nView ) )->nPreDiv
               ( dbfTmpLin )->nPntVer    := ( D():SatClientesLineas( nView ) )->nPntVer
               ( dbfTmpLin )->nImpTrn    := ( D():SatClientesLineas( nView ) )->nImpTrn
               ( dbfTmpLin )->nPESOKG    := ( D():SatClientesLineas( nView ) )->nPesOkg
               ( dbfTmpLin )->cPESOKG    := ( D():SatClientesLineas( nView ) )->cPesOkg
               ( dbfTmpLin )->cUnidad    := ( D():SatClientesLineas( nView ) )->cUnidad
               ( dbfTmpLin )->nVolumen   := ( D():SatClientesLineas( nView ) )->nVolumen
               ( dbfTmpLin )->cVolumen   := ( D():SatClientesLineas( nView ) )->cVolumen
               ( dbfTmpLin )->nIVA       := ( D():SatClientesLineas( nView ) )->nIva
               ( dbfTmpLin )->nReq       := ( D():SatClientesLineas( nView ) )->nReq
               ( dbfTmpLin )->cUNIDAD    := ( D():SatClientesLineas( nView ) )->cUnidad
               ( dbfTmpLin )->nDTO       := ( D():SatClientesLineas( nView ) )->nDto
               ( dbfTmpLin )->nDTOPRM    := ( D():SatClientesLineas( nView ) )->nDtoPrm
               ( dbfTmpLin )->nCOMAGE    := ( D():SatClientesLineas( nView ) )->nComAge
               ( dbfTmpLin )->lTOTLIN    := ( D():SatClientesLineas( nView ) )->lTotLin
               ( dbfTmpLin )->nDtoDiv    := ( D():SatClientesLineas( nView ) )->nDtoDiv
               ( dbfTmpLin )->nCtlStk    := ( D():SatClientesLineas( nView ) )->nCtlStk
               ( dbfTmpLin )->nCosDiv    := ( D():SatClientesLineas( nView ) )->nCosDiv
               ( dbfTmpLin )->id_tipo_v  := ( D():SatClientesLineas( nView ) )->id_tipo_v
               ( dbfTmpLin )->cAlmLin    := ( D():SatClientesLineas( nView ) )->cAlmLin
               ( dbfTmpLin )->cCodImp    := ( D():SatClientesLineas( nView ) )->cCodImp
               ( dbfTmpLin )->nValImp    := ( D():SatClientesLineas( nView ) )->nValImp
               ( dbfTmpLin )->CCODPR1    := ( D():SatClientesLineas( nView ) )->cCodPr1
               ( dbfTmpLin )->CCODPR2    := ( D():SatClientesLineas( nView ) )->cCodPr2
               ( dbfTmpLin )->CVALPR1    := ( D():SatClientesLineas( nView ) )->cValPr1
               ( dbfTmpLin )->CVALPR2    := ( D():SatClientesLineas( nView ) )->cValPr2
               ( dbfTmpLin )->nCanEnt    := ( D():SatClientesLineas( nView ) )->nCanSat
               ( dbfTmpLin )->nUniCaja   := ( D():SatClientesLineas( nView ) )->nUniCaja
               ( dbfTmpLin )->nUndKit    := ( D():SatClientesLineas( nView ) )->nUndKit
               ( dbfTmpLin )->lKitArt    := ( D():SatClientesLineas( nView ) )->lKitArt
               ( dbfTmpLin )->lKitChl    := ( D():SatClientesLineas( nView ) )->lKitChl
               ( dbfTmpLin )->lKitPrc    := ( D():SatClientesLineas( nView ) )->lKitPrc
               ( dbfTmpLin )->lLote      := ( D():SatClientesLineas( nView ) )->lLote
               ( dbfTmpLin )->nLote      := ( D():SatClientesLineas( nView ) )->nLote
               ( dbfTmpLin )->cLote      := ( D():SatClientesLineas( nView ) )->cLote
               ( dbfTmpLin )->lMsgVta    := ( D():SatClientesLineas( nView ) )->lMsgVta
               ( dbfTmpLin )->lNotVta    := ( D():SatClientesLineas( nView ) )->lNotVta
               ( dbfTmpLin )->lImpLin    := ( D():SatClientesLineas( nView ) )->lImpLin
               ( dbfTmpLin )->cCodTip    := ( D():SatClientesLineas( nView ) )->cCodTip
               ( dbfTmpLin )->mObsLin    := ( D():SatClientesLineas( nView ) )->mObsLin
               ( dbfTmpLin )->Descrip    := ( D():SatClientesLineas( nView ) )->Descrip
               ( dbfTmpLin )->cCodPrv    := ( D():SatClientesLineas( nView ) )->cCodPrv
               ( dbfTmpLin )->cImagen    := ( D():SatClientesLineas( nView ) )->cImagen
               ( dbfTmpLin )->cCodFam    := ( D():SatClientesLineas( nView ) )->cCodFam
               ( dbfTmpLin )->cGrpFam    := ( D():SatClientesLineas( nView ) )->cGrpFam
               ( dbfTmpLin )->cRefPrv    := ( D():SatClientesLineas( nView ) )->cRefPrv
               ( dbfTmpLin )->dFecEnt    := ( D():SatClientesLineas( nView ) )->dFecEnt
               ( dbfTmpLin )->dFecSal    := ( D():SatClientesLineas( nView ) )->dFecSal
               ( dbfTmpLin )->nPreAlq    := ( D():SatClientesLineas( nView ) )->nPreAlq
               ( dbfTmpLin )->lAlquiler  := ( D():SatClientesLineas( nView ) )->lAlquiler
               ( dbfTmpLin )->nNumMed    := ( D():SatClientesLineas( nView ) )->nNumMed
               ( dbfTmpLin )->nMedUno    := ( D():SatClientesLineas( nView ) )->nMedUno
               ( dbfTmpLin )->nMedDos    := ( D():SatClientesLineas( nView ) )->nMedDos
               ( dbfTmpLin )->nMedTre    := ( D():SatClientesLineas( nView ) )->nMedTre
               ( dbfTmpLin )->nPuntos    := ( D():SatClientesLineas( nView ) )->nPuntos
               ( dbfTmpLin )->nValPnt    := ( D():SatClientesLineas( nView ) )->nValPnt
               ( dbfTmpLin )->nDtoPnt    := ( D():SatClientesLineas( nView ) )->nDtoPnt
               ( dbfTmpLin )->nIncPnt    := ( D():SatClientesLineas( nView ) )->nIncPnt
               ( dbfTmpLin )->lControl   := ( D():SatClientesLineas( nView ) )->lControl
               ( dbfTmpLin )->lLinOfe    := ( D():SatClientesLineas( nView ) )->lLinOfe
               ( dbfTmpLin )->nBultos    := ( D():SatClientesLineas( nView ) )->nBultos
               ( dbfTmpLin )->cFormato   := ( D():SatClientesLineas( nView ) )->cFormato
               ( dbfTmpLin )->cRefAux    := ( D():SatClientesLineas( nView ) )->cRefAux
               ( dbfTmpLin )->cRefAux2   := ( D():SatClientesLineas( nView ) )->cRefAux2
               ( dbfTmpLin )->cCtrCoste  := ( D():SatClientesLineas( nView ) )->cCtrCoste
               ( dbfTmpLin )->cTipCtr    := ( D():SatClientesLineas( nView ) )->cTipCtr
               ( dbfTmpLin )->cTerCtr    := ( D():SatClientesLineas( nView ) )->cTerCtr

               ( D():SatClientesLineas( nView ) )->( dbSkip() )

            end

            ( dbfTmpLin )->( dbGoTop() )

         end

         lValid   := .T.

         if ( D():SatClientes( nView ) )->( dbRLock() )
            ( D():SatClientes( nView ) )->lEstado := .T.
            ( D():SatClientes( nView ) )->( dbUnlock() )
         end

         CursorWE()

      end

      HideImportacion( aGet, aGet[ 32 ] )

   else

      MsgStop( "S.A.T. de cliente no existe" )

   end

   HideImportacion( aGet, aGet[ 32 ] )

RETURN lValid



Static Function CargaAtipicasCliente( aTmpAlb, oBrwLin, oDlg )

   local nOrder
   local lSearch     := .F.





   if empty( aTmpAlb[ 6 ] )
      MsgStop( "Código de cliente no puede estar vacío para utilizar el asistente." )
      Return .F.
   end





   nOrder            := ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodCli" ) )

   if ( D():Atipicas( nView ) )->( dbSeek( aTmpAlb[ 6 ] ) )

      AutoMeterDialog( oDlg )

      SetTotalAutoMeterDialog( ( D():Atipicas( nView ) )->( LastRec() ) )

      while ( D():Atipicas( nView ) )->cCodCli == aTmpAlb[ 6 ] .AND. !( D():Atipicas( nView ) )->( Eof() )

         if lConditionAtipica( nil, D():Atipicas( nView ) ) .AND. ( D():Atipicas( nView ) )->lAplAlb

            AppendDatosAtipicas( aTmpAlb )

         end

         SetAutoMeterDialog( ( D():Atipicas( nView ) )->( Recno() ) )

         ( D():Atipicas( nView ) )->( dbSkip() )

      end

      EndAutoMeterDialog( oDlg )

   end





   if !lSearch

      if !empty( aTmpAlb[ 74 ] )

         ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodGrp" ) )

         if ( D():Atipicas( nView ) )->( dbSeek( aTmpAlb[ 74 ] ) )

            AutoMeterDialog( oDlg )

            SetTotalAutoMeterDialog( ( D():Atipicas( nView ) )->( LastRec() ) )

            while ( D():Atipicas( nView ) )->cCodGrp == aTmpAlb[ 74 ] .AND. !( D():Atipicas( nView ) )->( Eof() )

               if lConditionAtipica( nil, D():Atipicas( nView ) ) .AND. ( D():Atipicas( nView ) )->lAplAlb

                  AppendDatosAtipicas( aTmpAlb )

               end

               SetAutoMeterDialog( ( D():Atipicas( nView ) )->( Recno() ) )

               ( D():Atipicas( nView ) )->( dbSkip() )

            end

            EndAutoMeterDialog( oDlg )

         end

         ( D():Atipicas( nView ) )->( OrdSetFocus( nOrder ) )

      end

   end



   RecalculaTotal( aTmpAlb )

   if !empty( oBrwLin )
      oBrwLin:GoTop()
      oBrwLin:Refresh()
   end

Return .T.



Static Function AppendDatosAtipicas( aTmpAlb )

   local nPrecioAtipica
   local hAtipica

   if !dbSeekInOrd( ( D():Atipicas( nView ) )->cCodArt, "cRef", dbfTmpLin )

      if ( D():Articulos( nView ) )->( dbSeek( ( D():Atipicas( nView ) )->cCodArt ) ) .AND. !( D():Articulos( nView ) )->lObs

         ( dbfTmpLin )->( dbAppend() )

         ( dbfTmpLin )->nNumLin        := nLastNum( dbfTmpLin )
         ( dbfTmpLin )->nPosPrint      := nLastNum( dbfTmpLin, "nPosPrint")
         ( dbfTmpLin )->cRef           := ( D():Atipicas( nView ) )->cCodArt
         ( dbfTmpLin )->cCodPr1        := ( D():Atipicas( nView ) )->cCodPr1
         ( dbfTmpLin )->cCodPr2        := ( D():Atipicas( nView ) )->cCodPr2
         ( dbfTmpLin )->cValPr1        := ( D():Atipicas( nView ) )->cValPr1
         ( dbfTmpLin )->cValPr2        := ( D():Atipicas( nView ) )->cValPr2
         ( dbfTmpLin )->nCosDiv        := ( D():Atipicas( nView ) )->nPrcCom
         ( dbfTmpLin )->cAlmLin        := aTmpAlb[ 7 ]
         ( dbfTmpLin )->lIvaLin        := aTmpAlb[ 59 ]
         ( dbfTmpLin )->nTarLin        := oGetTarifa:getTarifa()
         ( dbfTmpLin )->dFecAlb        := aTmpAlb[ 5 ]
         ( dbfTmpLin )->nCanEnt        := 1
         ( dbfTmpLin )->nUniCaja       := 0
         ( dbfTmpLin )->lFromAtp       := .T.



         ( dbfTmpLin )->cDetalle       := ( D():Articulos( nView ) )->Nombre

         if aTmpAlb[ 60 ] <= 2
            ( dbfTmpLin )->nIva        := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
            ( dbfTmpLin )->nReq        := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
         end

         ( dbfTmpLin )->cUnidad        := ( D():Articulos( nView ) )->cUnidad
         ( dbfTmpLin )->nCtlStk        := ( D():Articulos( nView ) )->nCtlStock
         ( dbfTmpLin )->lLote          := ( D():Articulos( nView ) )->lLote
         ( dbfTmpLin )->lMsgVta        := ( D():Articulos( nView ) )->lMsgVta
         ( dbfTmpLin )->lNotVta        := ( D():Articulos( nView ) )->lNotVta
         ( dbfTmpLin )->cCodTip        := ( D():Articulos( nView ) )->cCodTip
         ( dbfTmpLin )->cCodFam        := ( D():Articulos( nView ) )->Familia
         ( dbfTmpLin )->nPesoKg        := ( D():Articulos( nView ) )->nPesoKg

         ( dbfTmpLin )->dFecUltCom     := dFechaUltimaVenta( aTmpAlb[ 6 ], ( D():Atipicas( nView ) )->cCodArt, D():Get( "AlbCliL", nView ), D():Get( "FacCliL", nView ) )
         ( dbfTmpLin )->nUniUltCom     := nUnidadesUltimaVenta( aTmpAlb[ 6 ], ( D():Atipicas( nView ) )->cCodArt, D():Get( "AlbCliL", nView ), D():Get( "FacCliL", nView ) )
         ( dbfTmpLin )->nPrcUltCom     := nPrecioUltimaVenta( aTmpAlb[ 6 ], ( D():Atipicas( nView ) )->cCodArt, D():Get( "AlbCliL", nView ), D():Get( "FacCliL", nView ) )
         ( dbfTmpLin )->nPreUnit       := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )





         hAtipica := hAtipica( hValue( dbfTmpLin, aTmpAlb ) )

         if !empty( hAtipica )

            if hhaskey( hAtipica, "nImporte" ) .AND. hAtipica[ "nImporte" ] <> 0
               ( dbfTmpLin )->nPreUnit    := hAtipica[ "nImporte" ]
            end

            if hhaskey( hAtipica, "nDescuentoPorcentual" )
               ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
            end

            if hhaskey( hAtipica, "nDescuentoPromocional" )
               ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
            end

            if hhaskey( hAtipica, "nDescuentoLineal" )
               ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
            end

            if hhaskey( hAtipica, "nComisionAgente" )
               ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
            end

         end

      end

   else





      hAtipica := hAtipica( hValue( dbfTmpLin, aTmpAlb ) )

      if !empty( hAtipica )

         if hhaskey( hAtipica, "nImporte" )

            if hAtipica[ "nImporte" ] <> 0

               ( dbfTmpLin )->nPreUnit := hAtipica[ "nImporte" ]

            else

               if ( D():Articulos( nView ) )->( dbSeek( ( dbfTmpLin )->cRef ) ) .AND. !( D():Articulos( nView ) )->lObs
                  ( dbfTmpLin )->nPreUnit := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpAlb[ 53 ], aTmpAlb[ 59 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )
               end

            end

         end

         if hhaskey( hAtipica, "nDescuentoPorcentual" )
            ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
         end

         if hhaskey( hAtipica, "nDescuentoPromocional" )
            ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
         end

         if hhaskey( hAtipica, "nDescuentoLineal" )
            ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
         end

         if hhaskey( hAtipica, "nComisionAgente" )
            ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
         end

      end

   end

Return ( nil )



Static Function lCompruebaStock( uTmpLin, oStock, nTotalUnidades, nStockActual, lMsg )

   local cCodigoArticulo
   local cCodigoAlmacen
   local lNotVta
   local lMsgVta
   local nStockAct

   If( lMsg == nil, lMsg := .T., ) ;

   do case
      case ValType( uTmpLin ) == "A"

         cCodigoArticulo   := uTmpLin[ 4 ]
         cCodigoAlmacen    := uTmpLin[ 38 ]
         lNotVta           := uTmpLin[ 51 ]
         lMsgVta           := uTmpLin[ 50 ]

         if empty( nStockActual )
            nStockActual   := StocksModel():nStockArticulo( uTmpLin[ 4 ], uTmpLin[ 38 ], uTmpLin[ 28 ], uTmpLin[ 29 ], uTmpLin[ 30 ], uTmpLin[ 31 ], uTmpLin[ 44 ] )
         end

         nStockAct         := StocksModel():nGlobalStockArticulo( uTmpLin[ 4 ] )

      case ValType( uTmpLin ) == "C"

         cCodigoArticulo   := ( uTmpLin )->cRef
         cCodigoAlmacen    := ( uTmpLin )->cAlmLin
         lNotVta           := ( uTmpLin )->lNotVta
         lMsgVta           := ( uTmpLin )->lMsgVta

         if empty( nStockActual )
            nStockActual   := StocksModel():nStockArticulo( ( uTmpLin )->cRef, ( uTmpLin )->cAlmLin, ( uTmpLin )->cCodPr1, ( uTmpLin )->cCodPr2, ( uTmpLin )->cValPr1, ( uTmpLin )->cValPr2, ( uTmpLin )->cLote )
         end

         nStockAct         := StocksModel():nGlobalStockArticulo( ( uTmpLin )->cRef )

   end

   if nTotalUnidades <> 0

      do case
         case ( nStockActual - nTotalUnidades ) < 0

            if lNotVta
               if lMsg
                  msgStop( "No hay stock suficiente, tenemos " + Alltrim( Trans( nStockActual, MasUnd() ) ) + " unidad(es) disponible(s)," + Chr(13)+Chr(10) + "en almacén " + AllTrim( cCodigoAlmacen ) + " de este lote o propiedades." + Chr(13)+Chr(10) + " Hay " + AllTrim( Trans( nStockAct, MasUnd() ) ) + " unidades totales seleccionando otras opciones." )
               end
               return .F.
            end

            if lMsgVta
               if lMsg
                  Return ApoloMsgNoYes( "No hay stock suficiente, tenemos " + Alltrim( Trans( nStockActual, MasUnd() ) ) + " unidad(es) disponible(s)," + Chr(13)+Chr(10) + " en almacén " + AllTrim( cCodigoAlmacen ) + " de este lote o propiedades." + Chr(13)+Chr(10) + " Hay " + AllTrim( Trans( nStockAct, MasUnd() ) ) + " unidades totales seleccionando otras opciones.", "¿Desea continuar?" )
               else
                  Return .F.
               end
            end

         case ( nStockAct - nTotalUnidades ) < nStockMinimo( cCodigoArticulo, cCodigoAlmacen, nView )

            if lMsgVta
               if lMsg
                  Return ApoloMsgNoYes( "El stock está por debajo del mínimo.", "¿Desea continuar?" )
               else
                  Return .F.
               end
            end

      end

   end

Return .T.



Static Function ChangeUnidades( oCol, uNewValue, nKey, aTmp )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      ( dbfTmpLin )->nUnicaja       := uNewValue

      RecalculaTotal( aTmp )

   end

Return .T.






Static Function SumaUnidadLinea( aTmp )

   ( dbfTmpLin )->nUniCaja++

   RecalculaTotal( aTmp )

Return .T.






Static Function RestaUnidadLinea( aTmp )

   ( dbfTmpLin )->nUniCaja--

   RecalculaTotal( aTmp )

Return .T.



Function mailReportAlbCli( cCodigoDocumento )

Return ( printReportAlbCli( 6, 1, ImpresoraDefectoUsuario(), cCodigoDocumento ) )



Static Function PrintReportAlbCli( nDevice, nCopies, cPrinter, cCodigoDocumento )

   local oFr
   local cFilePdf             := cPatOut() + "AlbaranesCliente" + StrTran( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb, " ", "" ) + ".Pdf"
   local nOrd

   If( nDevice == nil, nDevice := 2, ) ;
   If( nCopies == nil, nCopies := 1, ) ;
   If( cCodigoDocumento == nil, cCodigoDocumento := cFormatoAlbaranesClientes(), ) ;

   if Empty( cPrinter )
      cPrinter           := ImpresoraDefectoUsuario()
   end

   if empty( cCodigoDocumento )
      msgStop( "El código del documento esta vacio" )
      Return ( nil )
   end

   if !lMemoDocumento( cCodigoDocumento, D():Documentos( nView ) )
      msgStop( "El formato " + cCodigoDocumento + " no se encuentra, o no es un formato visual." )
      Return ( nil )
   end

   SysRefresh()

   nOrd                       :=  ( D():Get( "AlbCliL", nView ) )->( ordSetFocus( "nPosPrint" ) )

   oFr                        := frReportManager():New()

   oFr:LoadLangRes( "Spanish.Xml" )
   oFr:SetIcon( 1 )
   oFr:SetTitle( "Diseñador de documentos" )
   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( D():Documentos( nView ) )->( Select() ), "mReport" ) } )



   DataReport( oFr )



   oFr:LoadFromBlob( ( D():Documentos( nView ) )->( Select() ), "mReport")



   VariableReport( oFr )



   oFr:PrepareReport()



   do case
      case nDevice == 2

         oFr:ShowPreparedReport()

      case nDevice == 1

         oFr:PrintOptions:SetCopies( nCopies )
         oFr:PrintOptions:SetPrinter( cPrinter )
         oFr:PrintOptions:SetShowDialog( .F. )
         oFr:Print()

      case nDevice == 3

         oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
         oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
         oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
         oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
         oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
         oFr:SetProperty(  "PDFExport", "Outline",          .T. )
         oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
         oFr:DoExport(     "PDFExport" )

      case nDevice == 6

         oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
         oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
         oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
         oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
         oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
         oFr:SetProperty(  "PDFExport", "Outline",          .T. )
         oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .F. )
         oFr:DoExport(     "PDFExport" )

   end



   oFr:DestroyFr()

   ( D():Get( "AlbCliT", nView ) )->( ordSetFocus( nOrd ) )

Return ( cFilePdf )



Static Function FacturarLineas()

   local lPrint   := .F.

   lPrint         := TFacturarLineasAlbaranes():FacturarLineas( nView )





   if lPrint
      GenAlbCli()
   end

Return .T.



Static Function ImprimirSeriesAlbaranes( nDevice, lExternal )

   local aStatus
   local cFormato
   local oPrinter
   local cPrinterAlbaran   := cPrinterAlbaran( Application():CodigoCaja(), dbfCajT )

   If( nDevice == nil, nDevice := 1, ) ;
   If( lExternal == nil, lExternal := .F., ) ;



   oPrinter                := PrintSeries():New( nView )

   if empty(oPrinter)
      return .F.
   end

   oPrinter:SetVentas()



   oPrinter:Serie(      ( D():AlbaranesClientes( nView ) )->cSerAlb )
   oPrinter:Documento(  ( D():AlbaranesClientes( nView ) )->nNumAlb )
   oPrinter:Sufijo(     ( D():AlbaranesClientes( nView ) )->cSufAlb )

   if lExternal
      oPrinter:oFechaInicio:cText(  ( D():AlbaranesClientes( nView ) )->dFecAlb )
      oPrinter:oFechaFin:cText(     ( D():AlbaranesClientes( nView ) )->dFecAlb )
   end

   oPrinter:oFormatoDocumento:TypeDocumento( "AC" )



   cFormato          := cFormatoDocumento( ( D():AlbaranesClientes( nView ) )->cSerAlb, "nAlbCli", D():Contadores( nView ) )
   if empty( cFormato )
      cFormato       := cFirstDoc( "AC", D():Documentos( nView ) )
   end
   oPrinter:oFormatoDocumento:cText( cFormato )



   aStatus           := D():GetInitStatus( "AlbCliT", nView )

   oPrinter:bInit    := {||   ( D():AlbaranesClientes( nView ) )->( dbSeek( oPrinter:DocumentoInicio(), .T. ) ) }


   oPrinter:bWhile   := {||   oPrinter:InRangeDocumento( D():AlbaranesClientesId( nView ) )                 .AND.  ( D():AlbaranesClientes( nView ) )->( !eof() ) }




   oPrinter:bFor     := {||   oPrinter:InRangeFecha( ( D():AlbaranesClientes( nView ) )->dFecAlb )          .AND.  oPrinter:InRangeCliente( ( D():AlbaranesClientes( nView ) )->cCodCli )        .AND.  oPrinter:InRangeAgente( ( D():AlbaranesClientes( nView ) )->cCodAge )         .AND.  oPrinter:InRangeGrupoCliente( retGrpCli( ( D():AlbaranesClientes( nView ) )->cCodCli, D():Clientes( nView ) ) ) }

   oPrinter:bSkip    := {||   ( D():AlbaranesClientes( nView ) )->( dbSkip() ) }





   oPrinter:bAction  := {||   genAlbCli(  nDevice, "Imprimiendo documento : " + D():AlbaranesClientesId( nView ), oPrinter:oFormatoDocumento:uGetValue, oPrinter:oImpresora:uGetValue, if( !oPrinter:oCopias:lCopiasPredeterminadas, oPrinter:oCopias:uGetValue, ) ) }


   oPrinter:bStart   := {||   if( lExternal, oPrinter:DisableRange(), ), if( !empty( cPrinterAlbaran ), oPrinter:setPrinter( cPrinterAlbaran ), ) }



   oPrinter:Resource():End()



   D():SetStatus( "AlbCliT", nView, aStatus )

   if !empty( oWndBrw )
      oWndBrw:Refresh()
   end

Return .T.



Static Function GenerarEtiquetas()

Return ( nil )







Static Function ChangeBultos( oCol, uNewValue, nKey )

   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      if ( D():Lock( "AlbCliT", nView ) )
         ( D():Get( "AlbCliT", nView ) )->nBultos    := uNewValue
         ( D():UnLock( "AlbCliT", nView ) )
      end

   end

Return .T.



Static Function hValue( aTmp, aTmpAlb )

   local hValue                  := {=>}

   do case
      case ValType( aTmp ) == "A"

         hValue[ "cCodigoArticulo"   ] := aTmp[ 4 ]
         hValue[ "cCodigoPropiedad1" ] := aTmp[ 28 ]
         hValue[ "cCodigoPropiedad2" ] := aTmp[ 29 ]
         hValue[ "cValorPropiedad1"  ] := aTmp[ 30 ]
         hValue[ "cValorPropiedad2"  ] := aTmp[ 31 ]
         hValue[ "cCodigoFamilia"    ] := aTmp[ 54 ]
         hValue[ "nTarifaPrecio"     ] := aTmp[ 76 ]
         hValue[ "nCajas"            ] := aTmp[ 12 ]
         hValue[ "nUnidades"         ] := aTmp[ 19 ]

      case ValType( aTmp ) == "C"

         hValue[ "cCodigoArticulo"   ] := ( aTmp )->cRef
         hValue[ "cCodigoPropiedad1" ] := ( aTmp )->cCodPr1
         hValue[ "cCodigoPropiedad2" ] := ( aTmp )->cCodPr2
         hValue[ "cValorPropiedad1"  ] := ( aTmp )->cValPr1
         hValue[ "cValorPropiedad2"  ] := ( aTmp )->cValPr2
         hValue[ "cCodigoFamilia"    ] := ( aTmp )->cCodFam
         hValue[ "nTarifaPrecio"     ] := ( aTmp )->nTarLin
         hValue[ "nCajas"            ] := ( aTmp )->nCanEnt
         hValue[ "nUnidades"         ] := ( aTmp )->nUniCaja

   end

   do case
      case ValType( aTmpAlb ) == "A"

         hValue[ "cCodigoCliente"    ] := aTmpAlb[ 6 ]
         hValue[ "cCodigoGrupo"      ] := aTmpAlb[ 74 ]
         hValue[ "lIvaIncluido"      ] := aTmpAlb[ 59 ]
         hValue[ "dFecha"            ] := aTmpAlb[ 5 ]
         hValue[ "nDescuentoTarifa"  ] := aTmpAlb[ 102 ]

      case ValType( aTmpAlb ) == "C"

         hValue[ "cCodigoCliente"    ] := ( aTmpAlb )->cCodCli
         hValue[ "cCodigoGrupo"      ] := ( aTmpAlb )->cCodGrp
         hValue[ "lIvaIncluido"      ] := ( aTmpAlb )->lIvaInc
         hValue[ "dFecha"            ] := ( aTmpAlb )->dFecAlb
         hValue[ "nDescuentoTarifa"  ] := ( aTmpAlb )->nDtoTarifa

   end

   hValue[ "nTipoDocumento"         ] := "10"
   hValue[ "nView"                  ] := nView

Return ( hValue )










function nEstadoGenerado( cNumPed, cPedCliL, cPedPrvL )

   local nEstado     := 0
   local nOrdAnt     := ( cPedPrvL )->( OrdSetFocus( "cPedCliRef" ) )

   ( cPedCliL )->( dbSeek( cNumPed ) )

   while ( cPedCliL )->cSerPed + Str( ( cPedCliL )->nNumPed ) + ( cPedCliL )->cSufPed == cNumPed .AND. !( cPedCliL )->( Eof() )

      if( cPedPrvL )->( dbSeek( cNumPed + ( cPedCliL )->cRef ) )
         do case
            case nEstado == 0 .OR. nEstado == 3
               nEstado := 3
            case nEstado == 1
               nEstado := 2
         end
      else
         do case
            case nEstado == 0
               nEstado := 1
            case nEstado == 3
               nEstado := 2
         end
      end

   ( cPedCliL )->( dbSkip() )

   end

   ( cPedPrvL )->( OrdSetFocus( nOrdAnt ) )

return ( Max( nEstado, 1 ) )



Function AppAlbCli( hHash, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if AlbCli( nil, nil, hHash )
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( nil, .T. )
         nTotAlbCli()
         WinAppRec( nil, bEdtRec, D():Get( "AlbCliT", nView ), hHash )
         CloseFiles()
      end

   end

RETURN .T.



Function EdtAlbCli( cNumAlb, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if AlbCli()
         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( nil, .T. )

         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            nTotAlbCli()
            WinEdtRec( nil, bEdtRec, D():Get( "AlbCliT", nView ) )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION ZooAlbCli( cNumAlb, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if AlbCli()
         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( nil, .T. )

         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            nTotAlbCli()
            WinZooRec( nil, bEdtRec, D():Get( "AlbCliT", nView ) )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION DelAlbCli( cNumAlb, lOpenBrowse, lNoConfirm )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;
   If( lNoConfirm == nil, lNoConfirm := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if AlbCli()
         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            WinDelRec( nil, D():Get( "AlbCliT", nView ), {|| QuiAlbCli() }, , lNoConfirm )
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( nil, .T. )

         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            nTotAlbCli()
            WinDelRec( nil, D():Get( "AlbCliT", nView ), {|| QuiAlbCli() }, , lNoConfirm )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION PrnAlbCli( cNumAlb, lOpenBrowse, cCaption, cFormato, cPrinter )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if AlbCli()
         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            GenAlbCli( 1, cCaption, cFormato, cPrinter )
         else
            MsgStop( "No se encuentra albarán" )
         end
      end

   else

      if OpenFiles()

         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            nTotAlbCli()
            GenAlbCli( 1, cCaption, cFormato, cPrinter )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION PrnSerieAlbCli( cNumAlb, lOpenBrowse, cCaption, cFormato, cPrinter )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if AlbCli()
         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            ImprimirSeriesAlbaranes( 1, .T. )
         else
            MsgStop( "No se encuentra albarán" )
         end
      end

   else

      if OpenFiles()

         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            nTotAlbCli()
            ImprimirSeriesAlbaranes( 1, .T. )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION VisAlbCli( cNumAlb, lOpenBrowse, cCaption, cFormato, cPrinter )

   local nLevel         := Auth():Level( "albaranes_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if AlbCli()
         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            ImprimirSeriesAlbaranes( 2, .T. )

         else
            MsgStop( "No se encuentra albarán" )
         end
      end

   else

      if OpenFiles( nil, .T. )

         if dbSeekInOrd( cNumAlb, "nNumAlb", D():Get( "AlbCliT", nView ) )
            nTotAlbCli()
            ImprimirSeriesAlbaranes( 2, .T. )
         end

         CloseFiles()

      end

   end

Return .T.



Function aTotAlbCli( cAlbaran, dbfMaster, dbfLine, cdbfIva, cdbfDiv, cDivRet, lExcCnt )

   nTotAlbCli( cAlbaran, dbfMaster, dbfLine, cdbfIva, cdbfDiv, nil, cDivRet, .F., lExcCnt )

Return ( { nTotNet, nTotIva, nTotReq, nTotAlb, nTotPnt, nTotTrn, nTotAge, aTotIva, nTotCos, nTotIvm, nTotRnt, nTotDto, nTotDpp, nTotUno, nTotDos, nTotBrt } )



Function sTotAlbCli( cAlbaran, dbfMaster, dbfLine, cdbfIva, cdbfDiv, cDivRet, lExcCnt )

   local sTotal

   nTotAlbCli( cAlbaran, dbfMaster, dbfLine, cdbfIva, cdbfDiv, nil, cDivRet, .F., lExcCnt )

   sTotal                                 := sTotal()
   sTotal:nTotalBruto                     := nTotBrt
   sTotal:nTotalNeto                      := nTotNet
   sTotal:nTotalIva                       := nTotIva
   sTotal:aTotalIva                       := aTotIva
   sTotal:nTotalRecargoEquivalencia       := nTotReq
   sTotal:nTotalDocumento                 := nTotAlb
   sTotal:nTotalPuntoVerde                := nTotPnt
   sTotal:nTotalTransporte                := nTotTrn
   sTotal:nTotalAgente                    := nTotAge
   sTotal:nTotalCosto                     := nTotCos
   sTotal:nTotalImpuestoHidrocarburos     := nTotIvm
   sTotal:nTotalRentabilidad              := nTotRnt
   sTotal:nTotalDescuentoGeneral          := nTotDto
   sTotal:nTotalDescuentoProntoPago       := nTotDpp
   sTotal:nTotalDescuentoUno              := nTotUno
   sTotal:nTotalDescuentoDos              := nTotDos

Return ( sTotal )



FUNCTION BrwAlbCli( oGet, oIva )

   local oDlg
   local oBrw
   local oGet1
   local cGet1
   local lIva     := oIva:VarGet()
   local oCbxOrd
   local cCbxOrd
   local nOrd
   local aCbxOrd

   if !OpenFiles()
      Return .F.
   end

   aCbxOrd        := { "N. albarán", "Fecha", "Cliente", "Nombre", "Su albarán" }
   nOrd           := GetBrwOpt( "BrwAlbCli" )
   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]

   ( D():Get( "AlbCliT", nView ) )->( dbSetFilter( {|| Field->nFacturado <> 3 .AND. Field->lIvaInc == lIva }, "nFacturado != 3 .and. lIvaInc == lIva" ) )
   ( D():Get( "AlbCliT", nView ) )->( dbGoTop() )

   oDlg = TDialog():New(,,,, if( lIva, "Albaranes de clientes con " + cImp() + " incluido", "Albaranes de clientes con " + cImp() + " desglosado" ), "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, D():Get( "AlbCliT", nView ) ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, D():Get( "AlbCliT", nView ), .T., nil, .T. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( D():Get( "AlbCliT", nView ) )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := D():Get( "AlbCliT", nView )
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Albaran de cliente.Browse"

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| aTipAlb[ if( ( D():Get( "AlbCliT", nView ) )->lAlquiler, 2, 1  ) ] }
         :nWidth           := 50
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumAlb"
         :bEditValue       := {|| ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + Alltrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + ( D():Get( "AlbCliT", nView ) )->cSufAlb }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecAlb"
         :bEditValue       := {|| dtoc( ( D():Get( "AlbCliT", nView ) )->dFecAlb ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( D():Get( "AlbCliT", nView ) )->cCodCli ) }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| AllTrim( ( D():Get( "AlbCliT", nView ) )->cNomCli ) }
         :nWidth           := 300
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotAlbCli( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb, D():Get( "AlbCliT", nView ), D():Get( "AlbCliL", nView ), D():Get( "TIva", nView ), D():Get( "Divisas", nView ), nil, cDivEmp(), .T. )  }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end




      TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdtRec, D():Get( "AlbCliT", nView ) ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdtRec, D():Get( "AlbCliT", nView ) ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

      oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

      oDlg:bStart    := {|| oBrw:Refresh( .T. ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBrw:Load() )}, oDlg:bRClicked,,, )

   DestroyFastFilter( D():Get( "AlbCliT", nView ) )

   SetBrwOpt( "BrwAlbCli", ( D():Get( "AlbCliT", nView ) )->( OrdNumber() ) )

   ( D():Get( "AlbCliT", nView ) )->( dbClearFilter() )

   if oDlg:nResult == 1
      oGet:cText( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb )
      oGet:lValid()
   end

   CloseFiles()

RETURN ( oDlg:nResult == 1 )



FUNCTION nBrtLAlbCli( uTmpCab, uTmpLin, nDec, nRec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( nDec == nil, nDec := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nImpUAlbCli( uTmpCab, uTmpLin, nDec, nVdv, cPorDiv )
   nCalculo          *= nTotNAlbCli( uTmpLin )

   nCalculo          := Round( nCalculo / nVdv, nRec )

Return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )







FUNCTION nIncUAlbCli( cTmpLin, nDec, nVdv )

   local nCalculo    := 0

   If( cTmpLin == nil, cTmpLin := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUAlbCli( cTmpLin, nDec, nVdv )

   if !( cTmpLin )->lIvaLin
      nCalculo    += nCalculo * ( cTmpLin )->nIva / 100
   end

   IF nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION cDesAlbCli( cAlbCliL, cAlbCliS )

   if !empty( nView )
      If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
      If( cAlbCliS == nil, cAlbCliS := D():Get( "AlbCliS", nView ), ) ;
   end

RETURN ( Descrip( cAlbCliL, cAlbCliS ) )



FUNCTION cDesAlbCliLeng( cAlbCliL, cAlbCliS, cArtLeng )

   if !empty( nView )
      If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
      If( cAlbCliS == nil, cAlbCliS := D():Get( "AlbCliS", nView ), ) ;
      If( cArtLeng == nil, cArtLeng := D():ArticuloLenguaje( nView ), ) ;
   end

RETURN ( DescripLeng( cAlbCliL, cAlbCliS, cArtLeng ) )






FUNCTION nIncLAlbCli( cDbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo    := 0

   If( cDbfLin == nil, cDbfLin := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRouDec == nil, nRouDec := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   nCalculo          := nTotLAlbCli( cDbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   if !( cDbfLin )->lIvaLin
      nCalculo    += nCalculo * ( cDbfLin )->nIva / 100
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nIvaLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo    := 0

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   if ( cAlbCliL )->nRegIva <= 1

      nCalculo          := nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

      if !( cAlbCliL )->lIvaLin
         nCalculo       := nCalculo * ( cAlbCliL )->nIva / 100
      else
         nCalculo       -= nCalculo / ( 1 + ( cAlbCliL )->nIva / 100 )
      end

   end

   nCalculo          := Round( nCalculo, nRou )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nReqLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo    := 0

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   nCalculo          := nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   nCalculo          := nCalculo * ( cAlbCliL )->nReq / 100

   nCalculo          := Round( nCalculo, nRou )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )






FUNCTION nNetLAlbCli( cAlbCliT, cAlbCliL, nDec, nRou, nVdv, lIva, lDto, lImpTrn, lPntVer, cPouDiv )

   local nCalculo

   If( cAlbCliT == nil, cAlbCliT := D():Get( "AlbCliT", nView ), ) ;
   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .T., ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   nCalculo          := nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lImpTrn, lPntVer )

   if ( cAlbCliL )->nIva <> 0
      do case
         case !lIva .AND. ( cAlbCliT )->lIvaInc
            nCalculo -= Round( nCalculo / ( 100 / ( cAlbCliL )->nIva  + 1 ), nRou )
         case lIva .AND. !( cAlbCliT )->lIvaInc
            nCalculo += nCalculo * ( cAlbCliL )->nIva / 100
      end
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nDtoAtpAlbCli( uAlbCliT, uAlbCliL, nDec, nRou, nVdv, lImpTrn, lPntVer )

   local nCalculo
   local nDtoAtp  := 0

   If( nDec == nil, nDec := 0, ) ;
   If( nRou == nil, nRou := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo       := nTotLAlbCli( uAlbCliL, nDec, nRou, nVdv, .T., lImpTrn, lPntVer )

   if ( uAlbCliT )->nSbrAtp <= 1 .AND. ( uAlbCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoEsp / 100, nRou )

   if ( uAlbCliT )->nSbrAtp == 2 .AND. ( uAlbCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDpp    / 100, nRou )

   if ( uAlbCliT )->nSbrAtp == 3 .AND. ( uAlbCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoUno / 100, nRou )

   if ( uAlbCliT )->nSbrAtp == 4 .AND. ( uAlbCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoDos / 100, nRou )

   if ( uAlbCliT )->nSbrAtp == 5 .AND. ( uAlbCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )
   end

RETURN ( nDtoAtp )







FUNCTION Ped2AlbCli( cNumPed, cAlbCliT )

   local oBlock
   local oError
   local nOrdAnt
   local cNumAlb

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      nOrdAnt     := ( cAlbCliT )->( OrdSetFocus( "cNumPed" ) )

      if ( cAlbCliT )->( dbSeek( cNumPed ) )
         cNumAlb  := ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb
      end

      if !empty( cNumAlb )
         EdtAlbCli( cNumAlb )
      else
         msgStop( "No hay albarán asociado" )
      end

      ( cAlbCliT )->( OrdSetFocus( nOrdAnt ) )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de albaranes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN NIL






FUNCTION dFecAlbCli( cAlbCli, uAlbCliT )

   local dFecAlb  := CtoD( "" )

   if ValType( uAlbCliT ) == "C"

      if dbSeekInOrd( cAlbCli, "nNumAlb", uAlbCliT )
         dFecAlb  := ( uAlbCliT )->dFecAlb
      end

   else

      if uAlbCliT:SeekInOrd( cAlbCli, "nNumAlb" )
         dFecAlb  := uAlbCliT:dFecAlb
      end

   end

RETURN ( dFecAlb )






FUNCTION tFecAlbCli( cAlbCli, uAlbCliT )

   local tFecAlb  := Replicate( "0", 6 )

   if ValType( uAlbCliT ) == "C"
      if dbSeekInOrd( cAlbCli, "nNumAlb", uAlbCliT )
         tFecAlb  := ( uAlbCliT )->tFecAlb
      end
   else
      if uAlbCliT:SeekInOrd( cAlbCli, "nNumAlb" )
         tFecAlb  := uAlbCliT:tFecAlb
      end
   end

RETURN ( tFecAlb )



FUNCTION cCliAlbCli( cAlbCli, uAlbCliT )

   local cCodCli  := ""

   do case
      case ValType( uAlbCliT ) == "C"
         if (uAlbCliT)->( dbSeek( cAlbCli ) )
            cCodCli     := ( uAlbCliT )->cCodCli
         end
      case ValType( uAlbCliT ) == "O"
         if uAlbCliT:Seek( cAlbCli )
            cCodCli     := uAlbCliT:cCodCli
         end
   end

RETURN ( cCodCli )



FUNCTION cNbrAlbCli( cAlbCli, uAlbCliT )

   local cCodCli  := ""

   do case
      case ValType( uAlbCliT ) == "C"
         if (uAlbCliT)->( dbSeek( cAlbCli ) )
            cCodCli     := ( uAlbCliT )->cNomCli
         end
      case ValType( uAlbCliT ) == "O"
         if uAlbCliT:Seek( cAlbCli )
            cCodCli     := uAlbCliT:cNomCli
         end
   end

RETURN ( cCodCli )



Static Function lGenAlbCli( oBrw, oBtn, nDevice )

   local bAction

   If( nDevice == nil, nDevice := 1, ) ;

   if empty( oBtn )
      return nil
   end

   IF !( D():Documentos( nView ) )->( dbSeek( "AC" ) )







      oWndBrw:NewAt( "GC_DOCUMENT_WHITE_",,, {||( msgStop( "No hay documentos predefinidos" ) )}, "No hay documentos",,,, 4, oBtn, .F. )

   ELSE

      WHILE ( D():Documentos( nView ) )->CTIPO == "AC" .AND. !( D():Documentos( nView ) )->( eof() )

         bAction  := bGenAlbCli( nDevice, "Imprimiendo albaranes de clientes", ( D():Documentos( nView ) )->Codigo )

         oWndBrw:NewAt( "gc_document_white_", , , bAction, Rtrim( ( D():Documentos( nView ) )->cDescrip ) , , , , , oBtn )

         ( D():Documentos( nView ) )->( dbSkip() )

      end

   end

   SysRefresh()

return nil






function nTotDAlbCli( cCodArt, cAlbCliL, cAlbCliT, cCodAlm )

   local lFacAlb        := .F.
   local nTotVta        := 0
   local nRecno         := ( cAlbCliL )->( Recno() )

   if ( cAlbCliL )->( dbSeek( cCodArt ) )

      while ( cAlbCliL )->cRef == cCodArt .AND. !( cAlbCliL )->( eof() )

         if cAlbCliT <> nil
            lFacAlb     := lFacAlbCli( ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->nNumAlb ) + ( cAlbCliL )->cSufAlb, cAlbCliT )
         end

         if !( cAlbCliL )->lTotLin .AND. !lFacAlb
            if cCodAlm <> nil
               if cCodAlm == ( cAlbCliL )->cAlmLin
                  nTotVta  += nTotNAlbPrv( cAlbCliL ) * NotCero( ( cAlbCliL )->nFacCnv )
               end
            else
               nTotVta     += nTotNAlbCli( cAlbCliL ) * NotCero( ( cAlbCliL )->nFacCnv )
            end
         end

         ( cAlbCliL )->( dbSkip() )

      end

   end

   ( cAlbCliL )->( dbGoTo( nRecno ) )

return ( nTotVta )






function nVtaAlbCli( cCodCli, dDesde, dHasta, cAlbCliT, cAlbCliL, cDbfIva, cDbfDiv, lNotFac, nYear )

   local nCon        := 0
   local nRec        := ( cAlbCliT )->( Recno() )

   If( lNotFac == nil, lNotFac := .F., ) ;





   if ( cAlbCliT )->( dbSeek( cCodCli ) )

      while ( cAlbCliT )->cCodCli == cCodCli .AND. !( cAlbCliT )->( Eof() )




         if ( dDesde == nil .OR. ( cAlbCliT )->dFecAlb >= dDesde )    .AND. ( dHasta == nil .OR. ( cAlbCliT )->dFecAlb <= dHasta )    .AND. ( if( lNotFac, !lFacturado( cAlbCliT ), .T. ) )         .AND. ( nYear == nil .OR. Year( ( cAlbCliT )->dFecAlb ) == nYear )

            nCon  += nTotAlbCli( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb, cAlbCliT, cAlbCliL, cDbfIva, cDbfDiv, nil, cDivEmp(), .F. )

         end

         ( cAlbCliT )->( dbSkip() )

         SysRefresh()

      end

   end

   ( cAlbCliT )->( dbGoTo( nRec ) )

return nCon





















































































FUNCTION EdmAlbCli( cCodRut, cPathTo, oStru, aSucces )

   local n           := 0
   local cSerie
   local cFilEdm
   local oFilEdm
   local dFecAlb
   local cCodCli
   local nNumAlb
   local cNumDoc
   local nCajEnt     := 0
   local cTipDoc
   local aHeadLine   := {}
   local aLotes      := {}

   If( cCodRut == nil, cCodRut := "001", ) ;
   If( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;






   cCodRut           := AllTrim( cCodRut )

   cFilEdm           := cPathTo + "TALBA" + cCodRut + ".PSI"

   if !file( cFilEdm )
      msgWait( "No existe el fichero " + cFilEdm, "Atención", 1 )
      return nil
   end

   oFilEdm           := TTxtFile():New( cFilEdm )





   while ! oFilEdm:lEoF()
      aAdd( aHeadLine, { SubStr( oFilEdm:cLine, 8, 10 ), Ctod( SubStr( oFilEdm:cLine, 127, 10 ) ) } )
      oFilEdm:Skip()
   end

   oFilEdm:Close()





   cFilEdm           := cPathTo + "LALBA" + cCodRut + ".PSI"

   if !file( cFilEdm )

      msgWait( "No existe el fichero " + cFilEdm, "Atención", 1 )

   else

      oFilEdm           := TTxtFile():New( cFilEdm )





      while ! oFilEdm:lEoF()

         cTipDoc        := SubStr( oFilEdm:cLine, 18,  1 )

         if ( cTipDoc == "3" .OR. cTipDoc == "4" )


            aAdd( aLotes, { SubStr( oFilEdm:cLine, 8, 10 ), LTrim( SubStr( oFilEdm:cLine, 19, 13 ) ), RTrim( SubStr( oFilEdm:cLine, 43, 21 ) ) } )
         end

         oFilEdm:Skip()

      end

   oFilEdm:Close()

   end





   cFilEdm           := cPathTo + "EALBA" + cCodRut + ".PSI"





   if !file( cFilEdm )
      msgStop( cFilEdm, "No existe" )
      return nil
   end

   oFilEdm           := TTxtFile():New( cFilEdm )





   OpenFiles()

   oStru:oMetDos:cText   := "Alb. Clientes"
   oStru:oMetDos:SetTotal( oFilEdm:nTLines )





   while !oFilEdm:lEoF()




      cCodCli        := SubStr( oFilEdm:cLine,  1,  7 )
      cNumDoc        := SubStr( oFilEdm:cLine,  8, 10 )
      cTipDoc        := SubStr( oFilEdm:cLine, 18,  1 )

      if ( cTipDoc == "3" .OR. cTipDoc == "4" )

         if dbSeekInOrd( cCodCli, "Cod", D():Get( "Client", nView ) )

            nNumAlb                          := Val( StrTran( cNumDoc, "/", "" ) )

            if empty( ( D():Get( "Client", nView ) )->Serie )
               cSerie                        := "A"
            else
               cSerie                        := ( D():Get( "Client", nView ) )->Serie
            end

            if !( D():Get( "AlbCliT", nView ) )->( dbSeek( cSerie + Str( nNumAlb, 9 ) + RetSufEmp() ) )

               n  := aScan( aHeadLine, {|a| a[1] == cNumDoc } )
               if n <> 0
                  dFecAlb                    := aHeadLine[n,2]

                  ( D():Get( "AlbCliT", nView ) )->( dbAppend() )
                  ( D():Get( "AlbCliT", nView ) )->cSerAlb    := cSerie
                  ( D():Get( "AlbCliT", nView ) )->nNumAlb    := nNumAlb
                  ( D():Get( "AlbCliT", nView ) )->cSufAlb    := RetSufEmp()
                  ( D():Get( "AlbCliT", nView ) )->dFecAlb    := dFecAlb
                  ( D():Get( "AlbCliT", nView ) )->cCodAlm    := Application():codigoAlmacen()
                  ( D():Get( "AlbCliT", nView ) )->cDivAlb    := cDivEmp()
                  ( D():Get( "AlbCliT", nView ) )->nVdvAlb    := nChgDiv( ( D():Get( "AlbCliT", nView ) )->cDivAlb, D():Get( "Divisas", nView ) )
                  ( D():Get( "AlbCliT", nView ) )->lFacturado := .F.
                  ( D():Get( "AlbCliT", nView ) )->nFacturado := 1
                  ( D():Get( "AlbCliT", nView ) )->cCodCli    := ( D():Get( "Client", nView ) )->Cod
                  ( D():Get( "AlbCliT", nView ) )->cNomCli    := ( D():Get( "Client", nView ) )->Titulo
                  ( D():Get( "AlbCliT", nView ) )->cDirCli    := ( D():Get( "Client", nView ) )->Domicilio
                  ( D():Get( "AlbCliT", nView ) )->cPobCli    := ( D():Get( "Client", nView ) )->Poblacion
                  ( D():Get( "AlbCliT", nView ) )->cPrvCli    := ( D():Get( "Client", nView ) )->Provincia
                  ( D():Get( "AlbCliT", nView ) )->cPosCli    := ( D():Get( "Client", nView ) )->CodPostal
                  ( D():Get( "AlbCliT", nView ) )->cDniCli    := ( D():Get( "Client", nView ) )->Nif
                  ( D():Get( "AlbCliT", nView ) )->cCodTar    := ( D():Get( "Client", nView ) )->cCodTar
                  ( D():Get( "AlbCliT", nView ) )->cCodPago   := ( D():Get( "Client", nView ) )->CodPago
                  ( D():Get( "AlbCliT", nView ) )->cCodAge    := ( D():Get( "Client", nView ) )->cAgente
                  ( D():Get( "AlbCliT", nView ) )->cCodRut    := ( D():Get( "Client", nView ) )->cCodRut
                  ( D():Get( "AlbCliT", nView ) )->nTarifa    := ( D():Get( "Client", nView ) )->nTarifa
                  ( D():Get( "AlbCliT", nView ) )->lRecargo   := ( D():Get( "Client", nView ) )->lReq
                  ( D():Get( "AlbCliT", nView ) )->lOperPv    := ( D():Get( "Client", nView ) )->lPntVer
                  ( D():Get( "AlbCliT", nView ) )->cDtoEsp    := ( D():Get( "Client", nView ) )->cDtoEsp
                  ( D():Get( "AlbCliT", nView ) )->cDpp       := ( D():Get( "Client", nView ) )->cDpp
                  ( D():Get( "AlbCliT", nView ) )->nDtoEsp    := ( D():Get( "Client", nView ) )->nDtoEsp
                  ( D():Get( "AlbCliT", nView ) )->nDpp       := ( D():Get( "Client", nView ) )->nDpp
                  ( D():Get( "AlbCliT", nView ) )->nDtoUno    := ( D():Get( "Client", nView ) )->nDtoCnt
                  ( D():Get( "AlbCliT", nView ) )->cDtoUno    := ( D():Get( "Client", nView ) )->cDtoUno
                  ( D():Get( "AlbCliT", nView ) )->nDtoDos    := ( D():Get( "Client", nView ) )->nDtoRap
                  ( D():Get( "AlbCliT", nView ) )->cDtoDos    := ( D():Get( "Client", nView ) )->cDtoDos
                  ( D():Get( "AlbCliT", nView ) )->( dbUnLock() )

                  aAdd( aSucces, { .T., "Nuevo albarán de clientes " + ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + AllTrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + ( D():Get( "AlbCliT", nView ) )->cSufAlb } )





                  while cNumDoc == SubStr( oFilEdm:cLine,  8, 10 ) .AND. ! oFilEdm:lEoF()

                     if cTipDoc == "3" .OR. cTipDoc == "4"

                        if ( D():Get( "AlbCliT", nView ) )->( dbSeek( cSerie + Str( nNumAlb, 9 ) + RetSufEmp() ) )

                           ( D():Get( "AlbCliL", nView ) )->( dbAppend() )
                           ( D():Get( "AlbCliL", nView ) )->cSerAlb       := ( D():Get( "AlbCliT", nView ) )->cSerAlb
                           ( D():Get( "AlbCliL", nView ) )->nNumAlb       := ( D():Get( "AlbCliT", nView ) )->nNumAlb
                           ( D():Get( "AlbCliL", nView ) )->cSufAlb       := ( D():Get( "AlbCliT", nView ) )->cSufAlb
                           ( D():Get( "AlbCliL", nView ) )->cRef          := Ltrim( SubStr( oFilEdm:cLine, 19, 13 ) )
                           ( D():Get( "AlbCliL", nView ) )->cDetalle      := RetFld( ( D():Get( "AlbCliL", nView ) )->cRef, D():Articulos( nView ) )
                           ( D():Get( "AlbCliL", nView ) )->nPreUnit      := Val( SubStr( oFilEdm:cLine, 32,  7 ) )
                           ( D():Get( "AlbCliL", nView ) )->nDtoDiv       := Val( SubStr( oFilEdm:cLine, 39,  5 ) )
                           ( D():Get( "AlbCliL", nView ) )->nDto          := Val( SubStr( oFilEdm:cLine, 44,  5 ) )
                           ( D():Get( "AlbCliL", nView ) )->nIva          := nIvaCodTer( SubStr( oFilEdm:cLine, 61, 1 ), D():Get( "TIva", nView ) )
                           ( D():Get( "AlbCliL", nView ) )->nPntVer       := Val( SubStr( oFilEdm:cLine, 63, 7 ) )
                           ( D():Get( "AlbCliL", nView ) )->nCanEnt       := 1
                           ( D():Get( "AlbCliL", nView ) )->nUniCaja      := Val( SubStr( oFilEdm:cLine, 53,  7 ) )





                           if ( n  := aScan( aLotes, {|a| a[1] == cNumDoc .AND. a[2] == Ltrim( SubStr( oFilEdm:cLine, 19, 13 ) ) } ) ) <> 0
                              ( D():Get( "AlbCliL", nView ) )->lLote      := .T.
                              ( D():Get( "AlbCliL", nView ) )->cLote      := aLotes[ n, 3 ]
                           end

                           ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )

                        end

                     end

                     oFilEdm:Skip()

                  end

               else

                  aAdd( aSucces, { .F., "Líneas de albarán huerfanas, cliente " + cCodCli + " documento : " + cNumDoc } )
                  oFilEdm:Skip()

               end

            else

               aAdd( aSucces, { .F., "Albarán de clientes ya existe " + ( D():Get( "AlbCliT", nView ) )->cSerAlb + "/" + AllTrim( Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) ) + "/" + ( D():Get( "AlbCliT", nView ) )->cSufAlb } )
               oFilEdm:Skip()

            end

         else

            aAdd( aSucces, { .F., "No existe cliente " + cCodCli + " de albarán " + AllTrim( cNumDoc ) } )
            oFilEdm:Skip()

         end

      else

         oFilEdm:Skip()

      end

      oStru:oMetDos:Set( oFilEdm:nLine )

   end

   oStru:oMetDos:SetTotal( oFilEdm:nTLines )

   CloseFiles()

   oFilEdm:Close()

RETURN ( aSucces )



Function aDocAlbCli( lEntregas )

   local aDoc        := {}

   If( lEntregas == nil, lEntregas := .F., ) ;





   aAdd( aDoc, { "Empresa",         "EM" } )
   aAdd( aDoc, { "Albaran",         "AC" } )

   if lEntregas
      aAdd( aDoc, { "Entregas a cuenta",  "EA" } )
   end

   aAdd( aDoc, { "Cliente",         "CL" } )
   aAdd( aDoc, { "Almacen",         "AL" } )
   aAdd( aDoc, { "Obras",           "OB" } )
   aAdd( aDoc, { "Rutas",           "RT" } )
   aAdd( aDoc, { "Agentes",         "AG" } )
   aAdd( aDoc, { "Divisas",         "DV" } )
   aAdd( aDoc, { "Formas de pago",  "PG" } )
   aAdd( aDoc, { "Transportistas",  "TR" } )

RETURN ( aDoc )



Function aCalAlbCli()

   local aCalAlbCli  := {}

   aAdd( aCalAlbCli, { "nTotArt",                                                   "N", 18,  8, "Total artículos",             "cPicUndAlb",  "" } )
   aAdd( aCalAlbCli, { "nTotCaj",                                                   "N", 18,  8, "Total cajas",                 "cPicUndAlb",  "" } )
   aAdd( aCalAlbCli, { "aTotIva[1,1]",                                              "N", 18,  8, "Bruto primer tipo de " + cImp(),    "cPorDivAlb",  "aTotIva[1,1] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[2,1]",                                              "N", 18,  8, "Bruto segundo tipo de " + cImp(),   "cPorDivAlb",  "aTotIva[2,1] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[3,1]",                                              "N", 18,  8, "Bruto tercer tipo de " + cImp(),    "cPorDivAlb",  "aTotIva[3,1] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[1,2]",                                              "N", 18,  8, "Base primer tipo de " + cImp(),     "cPorDivAlb",  "aTotIva[1,2] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[2,2]",                                              "N", 18,  8, "Base segundo tipo de " + cImp(),    "cPorDivAlb",  "aTotIva[2,2] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[3,2]",                                              "N", 18,  8, "Base tercer tipo de " + cImp(),     "cPorDivAlb",  "aTotIva[3,2] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[1,3]",                                              "N",  5,  2, "Porcentaje primer tipo " + cImp(),  "'@R 99.99%'", "aTotIva[1,3] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[2,3]",                                              "N",  5,  2, "Porcentaje segundo tipo " + cImp(), "'@R 99.99%'", "aTotIva[2,3] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[3,3]",                                              "N",  5,  2, "Porcentaje tercer tipo " + cImp(),  "'@R 99.99%'", "aTotIva[3,3] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[1,4]",                                              "N",  5,  2, "Porcentaje primer tipo RE",   "'@R 99.99%'", "aTotIva[1,4] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[2,4]",                                              "N",  5,  2, "Porcentaje segundo tipo RE",  "'@R 99.99%'", "aTotIva[2,4] != 0" } )
   aAdd( aCalAlbCli, { "aTotIva[3,4]",                                              "N",  5,  2, "Porcentaje tercer tipo RE",   "'@R 99.99%'", "aTotIva[3,4] != 0" } )
   aAdd( aCalAlbCli, { "round( aTotIva[1,2] * aTotIva[1,3] / 100, nDouDivAlb )",    "N", 18,  8, "Importe primer tipo " + cImp(),     "cPorDivAlb",  "aTotIva[1,2] != 0" } )
   aAdd( aCalAlbCli, { "round( aTotIva[2,2] * aTotIva[2,3] / 100, nDouDivAlb )",    "N", 18,  8, "Importe segundo tipo " + cImp(),    "cPorDivAlb",  "aTotIva[2,2] != 0" } )
   aAdd( aCalAlbCli, { "round( aTotIva[3,2] * aTotIva[3,3] / 100, nDouDivAlb )",    "N", 18,  8, "Importe tercer tipo " + cImp(),     "cPorDivAlb",  "aTotIva[3,2] != 0" } )
   aAdd( aCalAlbCli, { "round( aTotIva[1,2] * aTotIva[1,4] / 100, nDouDivAlb )",    "N", 18,  8, "Importe primer RE",           "cPorDivAlb",  "aTotIva[1,2] != 0" } )
   aAdd( aCalAlbCli, { "round( aTotIva[2,2] * aTotIva[2,4] / 100, nDouDivAlb )",    "N", 18,  8, "Importe segundo RE",          "cPorDivAlb",  "aTotIva[2,2] != 0" } )
   aAdd( aCalAlbCli, { "round( aTotIva[3,2] * aTotIva[3,4] / 100, nDouDivAlb )",    "N", 18,  8, "Importe tercer RE",           "cPorDivAlb",  "aTotIva[3,2] != 0" } )
   aAdd( aCalAlbCli, { "nTotBrt",                                                   "N", 18,  8, "Total bruto",                 "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotDto",                                                   "N", 18,  8, "Total descuento",             "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotDpp",                                                   "N", 18,  8, "Total descuento pronto pago", "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotUno",                                                   "N", 18,  8, "Total primer descuento personalizable",  "cPorDivAlb",  "lEnd" }   )
   aAdd( aCalAlbCli, { "nTotDos",                                                   "N", 18,  8, "Total segundo descuento personalizable", "cPorDivAlb",  "lEnd" }   )
   aAdd( aCalAlbCli, { "nTotNet",                                                   "N", 18,  8, "Total neto",                  "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotIva",                                                   "N", 18,  8, "Total " + cImp(),                   "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotIvm",                                                   "N", 18,  8, "Total IVMH",                  "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotReq",                                                   "N", 18,  8, "Total RE",                    "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotAlb",                                                   "N", 18,  8, "Total albarán",               "cPorDivAlb",  "lEnd" }              )
   aAdd( aCalAlbCli, { "nTotPage",                                                  "N", 18,  8, "Total página",                "cPorDivAlb",  "!lEnd"}              )
   aAdd( aCalAlbCli, { "nTotPes",                                                   "N", 18,  8, "Total peso",                  "'@E 99,999.99'","lEnd" }            )
   aAdd( aCalAlbCli, { "nTotCos",                                                   "N", 18,  8, "Total costo",                 "cPorDivAlb",  "lEnd" }            )
   aAdd( aCalAlbCli, { "nImpEuros( nTotAlb, (cDbf)->cDivAlb, cDbfDiv )",            "N", 18,  8, "Total albarán (Euros)",       "",            "lEnd" }              )
   aAdd( aCalAlbCli, { "nImpPesetas( nTotAlb, (cDbf)->cDivAlb, cDbfDiv )",          "N", 18,  8, "Total albarán (Pesetas)",     "",            "lEnd" }              )
   aAdd( aCalAlbCli, { "nPagina",                                                   "N",  2,  0, "Número de página",            "'99'",        "" }                  )
   aAdd( aCalAlbCli, { "lEnd",                                                      "L",  1,  0, "Fin del documento",           "",            "" }                  )

Return ( aCalAlbCli )



function aSerAlbCli()

   local aColAlbCli  := {}

   aAdd( aColAlbCli,  { "cSerAlb",     "C",  1,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "nNumAlb",     "N",  9,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "cSufAlb",     "C",  2,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "dFecAlb",     "D",  8,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "nNumLin",     "N",  4,   0, "Número de la línea",               "'9999'",            "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "lFacturado",  "L",  1,   0, "Lógico de facturado",              "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "lUndNeg",     "L",  1,   0, "Lógico de unidades en negativo",   "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "cRef",        "C", 18,   0, "Referencia del artículo",          "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "cAlmLin",     "C", 16,   0, "Almacen del artículo",             "",                  "", "( cDbfCol )" } )
   aAdd( aColAlbCli,  { "cNumSer",     "C", 30,   0, "Número de serie",                  "",                  "", "( cDbfCol )" } )

return ( aColAlbCli )



function SynAlbCli( cPath )

   local aTotAlb
   local cNumAlb
   local nNumLin     := 0
   local cCodImp
   local cNumSer
   local aNumSer
   local cNumPed
   local aNumPed     := {}
   local cCodGrp
   local nOrdRecFac
   local nOrdAntFac
   local hConsolidacion

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if OpenFiles()

      ( D():Get( "AlbCliT", nView ) )->( ordSetFocus( 0 ) )
      ( D():Get( "AlbCliT", nView ) )->( dbGoTop() )

      while !( D():Get( "AlbCliT", nView ) )->( eof() )





         if ( D():Get( "AlbCliT", nView ) )->nFacturado == 0

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->nFacturado := if( ( D():Get( "AlbCliT", nView ) )->lFacturado, 3, 1 )
               D():UnLock( "AlbCliT", nView )
            end

         end

         if empty( ( D():Get( "AlbCliT", nView ) )->cSufAlb )

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cSufAlb := "00"
               D():UnLock( "AlbCliT", nView )
            end

         end

         if !empty( ( D():Get( "AlbCliT", nView ) )->cNumPre ) .AND. Len( AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumPre ) ) <> 12

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cNumPre := AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumPre ) + "00"
               D():UnLock( "AlbCliT", nView )
            end

         end

         if !empty( ( D():Get( "AlbCliT", nView ) )->cNumPed ) .AND. Len( AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumPed ) ) <> 12

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cNumPed := AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumPed ) + "00"
               D():UnLock( "AlbCliT", nView )
            end

         end

         if !empty( ( D():Get( "AlbCliT", nView ) )->cNumSat ) .AND. Len( AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumSat ) ) <> 12

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cNumSat := AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumSat ) + "00"
               D():UnLock( "AlbCliT", nView )
            end

         end

         if !empty( ( D():Get( "AlbCliT", nView ) )->cNumFac ) .AND. Len( AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumFac ) ) <> 12

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cNumFac := AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumFac ) + "00"
               D():UnLock( "AlbCliT", nView )
            end

         end

         if !empty( ( D():Get( "AlbCliT", nView ) )->cNumDoc ) .AND. Len( AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumDoc ) ) <> 12

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cNumDoc := AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumDoc ) + "00"
               D():UnLock( "AlbCliT", nView )
            end

         end

         if !empty( ( D():Get( "AlbCliT", nView ) )->cNumTik ) .AND. Len( AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumTik ) ) <> 13

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cNumTik := AllTrim( ( D():Get( "AlbCliT", nView ) )->cNumTik ) + "00"
               D():UnLock( "AlbCliT", nView )
            end

         end

         if empty( ( D():Get( "AlbCliT", nView ) )->cCodCaj )

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cCodCaj := "000"
               D():UnLock( "AlbCliT", nView )
            end

         end

         cCodGrp        := RetGrpCli( ( D():Get( "AlbCliT", nView ) )->cCodCli, D():Get( "Client", nView ) )

         if ( D():Get( "AlbCliT", nView ) )->cCodGrp <> cCodGrp

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cCodGrp := cCodGrp
               D():UnLock( "AlbCliT", nView )
            end

         end

         if empty( ( D():Get( "AlbCliT", nView ) )->cNomCli ) .AND. !empty ( ( D():Get( "AlbCliT", nView ) )->cCodCli )

            if D():Lock( "AlbCliT", nView )
               ( D():Get( "AlbCliT", nView ) )->cNomCli := RetFld( ( D():Get( "AlbCliT", nView ) )->cCodCli, D():Get( "Client", nView ), "Titulo" )
               D():UnLock( "AlbCliT", nView )
            end

         end





         if ( D():Get( "AlbCliT", nView ) )->nTotAlb == 0

            if D():Lock( "AlbCliT", nView )

               aTotAlb              := aTotAlbCli( ( D():Get( "AlbCliT", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliT", nView ) )->nNumAlb ) + ( D():Get( "AlbCliT", nView ) )->cSufAlb, D():Get( "AlbCliT", nView ), D():Get( "AlbCliL", nView ), D():Get( "TIva", nView ), D():Get( "Divisas", nView ), ( D():Get( "AlbCliT", nView ) )->cDivAlb )

               ( D():Get( "AlbCliT", nView ) )->nTotNet := aTotAlb[1]
               ( D():Get( "AlbCliT", nView ) )->nTotIva := aTotAlb[2]
               ( D():Get( "AlbCliT", nView ) )->nTotReq := aTotAlb[3]
               ( D():Get( "AlbCliT", nView ) )->nTotAlb := aTotAlb[4]

               D():UnLock( "AlbCliT", nView )

            end

         end





         nOrdRecFac  := ( D():FacturasClientesLineas( nView ) )->( Recno() )
         nOrdAntFac  := ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( "cCodAlb" ) )

         if ( D():FacturasClientesLineas( nView ) )->( dbSeek( ( D():AlbaranesClientes( nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( nView ) )->nNumAlb ) + ( D():AlbaranesClientes( nView ) )->cSufAlb ) )

            if dbLock( D():AlbaranesClientes( nView ) )
               ( D():AlbaranesClientes( nView ) )->lFacturado  := .T.
               ( D():AlbaranesClientes( nView ) )->nFacturado  := 3
               ( D():AlbaranesClientes( nView ) )->( dbUnLock() )
            end

         end

         ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( nOrdAntFac ) )
         ( D():FacturasClientesLineas( nView ) )->( dbGoTo( nOrdRecFac ) )






         aAdd( aNumPed, ( D():Get( "AlbCliT", nView ) )->cNumPed )

         ( D():Get( "AlbCliT", nView ) )->( dbSkip() )

      end

      ( D():Get( "AlbCliT", nView ) )->( ordSetFocus( 1 ) )





      ( D():Get( "AlbCliL", nView ) )->( ordSetFocus( 0 ) )
      ( D():Get( "AlbCliL", nView ) )->( dbGoTop() )

      while !( D():Get( "AlbCliL", nView ) )->( eof() )

         if empty( ( D():Get( "AlbCliL", nView ) )->cSufAlb )
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->cSufAlb    := "00"
               ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():Get( "AlbCliL", nView ) )->cNumPed ) .AND. Len( AllTrim( ( D():Get( "AlbCliL", nView ) )->cNumPed ) ) <> 12
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->cNumPed := AllTrim( ( D():Get( "AlbCliL", nView ) )->cNumPed ) + "00"
               ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():Get( "AlbCliL", nView ) )->cNumSat ) .AND. Len( AllTrim( ( D():Get( "AlbCliL", nView ) )->cNumSat ) ) <> 12
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->cNumSat := AllTrim( ( D():Get( "AlbCliL", nView ) )->cNumSat ) + "00"
               ( D():Get( "AlbCliL", nView ) )->( dbUnlock() )
            end
         end

         if empty( ( D():Get( "AlbCliL", nView ) )->cLote ) .AND. !empty( ( D():Get( "AlbCliL", nView ) )->nLote )
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->cLote      := AllTrim( Str( ( D():Get( "AlbCliL", nView ) )->nLote ) )
               ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():Get( "AlbCliL", nView ) )->nVolumen )
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->nVolumen   := RetFld( ( D():Get( "AlbCliL", nView ) )->CREF, D():Articulos( nView ), "nVolumen" )
               ( D():Get( "AlbCliL", nView ) )->( dbUnlock() )
            end
         end

         if ( D():Get( "AlbCliL", nView ) )->lIvaLin <> RetFld( ( D():Get( "AlbCliL", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliL", nView ) )->nNumAlb ) + ( D():Get( "AlbCliL", nView ) )->cSufAlb, D():Get( "AlbCliT", nView ), "lIvaInc" )
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->lIvaLin    := RetFld( ( D():Get( "AlbCliL", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliL", nView ) )->nNumAlb ) + ( D():Get( "AlbCliL", nView ) )->cSufAlb, D():Get( "AlbCliT", nView ), "lIvaInc" )
               ( D():Get( "AlbCliL", nView ) )->( dbUnlock() )
            end
         end

         if !empty( ( D():Get( "AlbCliL", nView ) )->cRef ) .AND. empty( ( D():Get( "AlbCliL", nView ) )->cCodFam )
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->cCodFam    := RetFamArt( ( D():Get( "AlbCliL", nView ) )->cRef, D():Articulos( nView ) )
               ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():Get( "AlbCliL", nView ) )->cRef ) .AND. !empty( ( D():Get( "AlbCliL", nView ) )->cCodFam )
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->cGrpFam    := cGruFam( ( D():Get( "AlbCliL", nView ) )->cCodFam, D():Familias( nView ) )
               ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():Get( "AlbCliL", nView ) )->nReq )
            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->nReq       := nPReq( D():Get( "TIva", nView ), ( D():Get( "AlbCliL", nView ) )->nIva )
               ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
            end
         end

         if ( D():AlbaranesClientesLineas( nView ) )->nRegIva <> RetFld( D():AlbaranesClientesLineasId( nView ), D():AlbaranesClientes( nView ), "nRegIva" )
            if dbLock( D():AlbaranesClientesLineas( nView ) )
               ( D():AlbaranesClientesLineas( nView ) )->nRegIva := RetFld( D():AlbaranesClientesLineasId( nView ), D():AlbaranesClientes( nView ), "nRegIva" )
               ( D():AlbaranesClientesLineas( nView ) )->( dbUnlock() )
            end
         end



         if ( D():AlbaranesClientesLineas( nView ) )->lFacturado <> RetFld( D():AlbaranesClientesLineasId( nView ), D():AlbaranesClientes( nView ), "lFacturado" )
            if dbLock( D():AlbaranesClientesLineas( nView ) )
               ( D():AlbaranesClientesLineas( nView ) )->lFacturado := RetFld( D():AlbaranesClientesLineasId( nView ), D():AlbaranesClientes( nView ), "lFacturado" )
               ( D():AlbaranesClientesLineas( nView ) )->( dbUnlock() )
            end
         end



         if ( D():Get( "AlbCliT", nView ) )->( dbseek( ( D():Get( "AlbCliL", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliL", nView ) )->nNumAlb ) + ( D():Get( "AlbCliL", nView ) )->cSufAlb ) )

            if ( D():Get( "AlbCliL", nView ) )->dFecAlb <> ( D():Get( "AlbCliT", nView ) )->dFecAlb
               if dbLock( D():Get( "AlbCliL", nView ) )
                  ( D():Get( "AlbCliL", nView ) )->dFecAlb    := ( D():Get( "AlbCliT", nView ) )->dFecAlb
                  ( D():Get( "AlbCliL", nView ) )->( dbUnlock() )
               end
            end

            if ( D():Get( "AlbCliL", nView ) )->tFecAlb <> ( D():Get( "AlbCliT", nView ) )->tFecAlb
               if dbLock( D():Get( "AlbCliL", nView ) )
                  ( D():Get( "AlbCliL", nView ) )->tFecAlb    := ( D():Get( "AlbCliT", nView ) )->tFecAlb
                  ( D():Get( "AlbCliL", nView ) )->( dbUnlock() )
               end
            end

            if ( D():Get( "AlbCliL", nView ) )->cCodCli <> ( D():Get( "AlbCliT", nView ) )->cCodCli
               if dbLock( D():Get( "AlbCliL", nView ) )
                  ( D():Get( "AlbCliL", nView ) )->cCodCli    := ( D():Get( "AlbCliT", nView ) )->cCodCli
                  ( D():Get( "AlbCliL", nView ) )->( dbUnlock() )
               end
            end

            if empty( ( D():Get( "AlbCliL", nView ) )->cAlmLin )
               if dbLock( D():Get( "AlbCliL", nView ) )
                  ( D():Get( "AlbCliL", nView ) )->cAlmLin    := ( D():Get( "AlbCliT", nView ) )->cCodAlm
                  ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
               end
            end

            if empty( ( D():Get( "AlbCliL", nView ) )->nPosPrint )
               if dbLock( D():Get( "AlbCliL", nView ) )
                  ( D():Get( "AlbCliL", nView ) )->nPosPrint    := ( D():Get( "AlbCliL", nView ) )->nNumLin
                  ( D():Get( "AlbCliL", nView ) )->( dbUnLock() )
               end
            end

         end

















         if !empty( ( D():Get( "AlbCliL", nView ) )->mNumSer )

            aNumSer                       := hb_aTokens( ( D():Get( "AlbCliL", nView ) )->mNumSer, "," )

            for each cNumSer in aNumSer
               ( D():Get( "AlbCliS", nView ) )->( dbAppend() )
               ( D():Get( "AlbCliS", nView ) )->cSerAlb    := ( D():Get( "AlbCliL", nView ) )->cSerAlb
               ( D():Get( "AlbCliS", nView ) )->nNumAlb    := ( D():Get( "AlbCliL", nView ) )->nNumAlb
               ( D():Get( "AlbCliS", nView ) )->cSufAlb    := ( D():Get( "AlbCliL", nView ) )->cSufAlb
               ( D():Get( "AlbCliS", nView ) )->cRef       := ( D():Get( "AlbCliL", nView ) )->cRef
               ( D():Get( "AlbCliS", nView ) )->cAlmLin    := ( D():Get( "AlbCliL", nView ) )->cAlmLin
               ( D():Get( "AlbCliS", nView ) )->nNumLin    := ( D():Get( "AlbCliL", nView ) )->nNumLin
               ( D():Get( "AlbCliS", nView ) )->lFacturado := ( D():Get( "AlbCliL", nView ) )->lFacturado
               ( D():Get( "AlbCliS", nView ) )->cNumSer    := cNumSer
               ( D():Get( "AlbCliS", nView ) )->( dbUnLock() )
            next

            if dbLock( D():Get( "AlbCliL", nView ) )
               ( D():Get( "AlbCliL", nView ) )->mNumSer    := ""
            end

         end

         ( D():Get( "AlbCliL", nView ) )->( dbSkip() )

         SysRefresh()

      end

      ( D():Get( "AlbCliL", nView ) )->( ordSetFocus( 1 ) )



      ( D():Get( "AlbCliI", nView ) )->( ordSetFocus( 0 ) )
      ( D():Get( "AlbCliI", nView ) )->( dbGoTop() )

      while !( D():Get( "AlbCliI", nView ) )->( eof() )

         if empty( ( D():Get( "AlbCliI", nView ) )->cSufAlb )
            if dbLock( D():Get( "AlbCliI", nView ) )
               ( D():Get( "AlbCliI", nView ) )->cSufAlb    := "00"
               ( D():Get( "AlbCliI", nView ) )->( dbUnLock() )
            end
         end

         ( D():Get( "AlbCliI", nView ) )->( dbSkip() )

         SysRefresh()

      end

      ( D():Get( "AlbCliI", nView ) )->( OrdSetFocus( 1 ) )



      ( D():Get( "AlbCliS", nView ) )->( ordSetFocus( 0 ) )
      ( D():Get( "AlbCliS", nView ) )->( dbGoTop() )

      while !( D():Get( "AlbCliS", nView ) )->( eof() )

         if empty( ( D():Get( "AlbCliS", nView ) )->cSufAlb )
            if dbLock( D():Get( "AlbCliS", nView ) )
               ( D():Get( "AlbCliS", nView ) )->cSufAlb    := "00"
               ( D():Get( "AlbCliS", nView ) )->( dbUnLock() )
            end
         end

         if ( D():Get( "AlbCliS", nView ) )->dFecAlb <> RetFld( ( D():Get( "AlbCliL", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliL", nView ) )->nNumAlb ) + ( D():Get( "AlbCliL", nView ) )->cSufAlb, D():Get( "AlbCliT", nView ), "dFecAlb" )
            if dbLock( D():Get( "AlbCliS", nView ) )
               ( D():Get( "AlbCliS", nView ) )->dFecAlb    := RetFld( ( D():Get( "AlbCliL", nView ) )->cSerAlb + Str( ( D():Get( "AlbCliL", nView ) )->nNumAlb ) + ( D():Get( "AlbCliL", nView ) )->cSufAlb, D():Get( "AlbCliT", nView ), "dFecAlb" )
               ( D():Get( "AlbCliS", nView ) )->( dbUnlock() )
            end
         end

         ( D():Get( "AlbCliS", nView ) )->( dbSkip() )

         SysRefresh()

      end

      ( D():Get( "AlbCliS", nView ) )->( ordSetFocus( 1 ) )





















      CloseFiles()

   end





   oStock               := TStock():Create()
   if oStock:lOpenFiles()

      for each cNumPed in aNumPed
         oStock:SetEstadoPedCli( cNumPed )
      end

   end

   if !empty( oStock )
      oStock:end()
   end

   oStock      := nil

return nil



FUNCTION PrnEntAlb( cNumEnt, lPrint )

Return .T.



Function DesignReportAlbCli( oFr, dbfDoc )

   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag





      DataReport( oFr )





      if !empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "   CallHbFunc('nTotAlbCli');"                              + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "MasterData",  "MainPage", 6 )
         oFr:SetProperty(     "MasterData",  "Top", 200 )
         oFr:SetProperty(     "MasterData",  "Height", 0 )
         oFr:SetProperty(     "MasterData",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "MasterData",  "DataSet", "Albaranes" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de albaranes" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lOpen
         CloseFiles()
      end

   else

      Return .F.

   end

Return .T.



Function DesignReportEntAlbCli( oFr, dbfDoc )

Return .T.



FUNCTION PrnEntAlbCli( cNumDoc, lPrint, dbfTmpEnt )

Return .T.



function nUnidadesRecibidasAlbaranesClientesNoFacturados( cNumPed, cCodArt, cValPr1, cValPr2, cAlbCliL )

   local nTot        := 0
   local aStaLin     := aGetStatus( cAlbCliL, .F. )

   If( cValPr1 == nil, cValPr1 := Space( 20 ), ) ;
   If( cValPr2 == nil, cValPr2 := Space( 20 ), ) ;

   ( cAlbCliL )->( ordsetfocus( "cRefNoFac" ) )
   if ( cAlbCliL )->( dbseek( cNumPed + cCodArt + cValPr1 + cValPr2 ) )

      while ( cAlbCliL )->cNumPed + ( cAlbCliL )->cRef + ( cAlbCliL )->cValPr1 + ( cAlbCliL )->cValPr2 == cNumPed + cCodArt + cValPr1 + cValPr2 .AND. !( cAlbCliL )->( eof() )
         nTot        += nTotNAlbCli( cAlbCliL )
         ( cAlbCliL )->( dbskip() )
      end

   end

   SetStatus( cAlbCliL, aStaLin )

return ( nTot )



function nTotNAlbCli( uDbf )

   local nTotUnd

   If( uDbf == nil, uDbf := D():Get( "AlbCliL", nView ), ) ;

   do case
      case ValType( uDbf ) == "A"

         nTotUnd  := NotBulto( uDbf[ 99 ] )
         nTotUnd  *= NotCaja( uDbf[ 12 ] )
         nTotUnd  *= uDbf[ 19 ]
         nTotUnd  *= NotCero( uDbf[ 20 ] )
         nTotUnd  *= NotCero( uDbf[ 73 ] )
         nTotUnd  *= NotCero( uDbf[ 74 ] )
         nTotUnd  *= NotCero( uDbf[ 75 ] )

      case ValType( uDbf ) == "C"

         nTotUnd  := NotBulto( ( uDbf )->nBultos )
         nTotUnd  *= NotCaja( ( uDbf )->nCanEnt )
         nTotUnd  *= ( uDbf )->nUniCaja
         nTotUnd  *= NotCero( ( uDbf )->nUndKit )
         nTotUnd  *= NotCero( ( uDbf )->nMedUno )
         nTotUnd  *= NotCero( ( uDbf )->nMedDos )
         nTotUnd  *= NotCero( ( uDbf )->nMedTre )

      case ValType( uDbf ) == "H"

         nTotUnd  := NotBulto( hGet( uDbf, "Bultos" ) )
         nTotUnd  *= NotCaja( hGet( uDbf, "Cajas" ) )
         nTotUnd  *= hGet( uDbf, "Unidades" )
         nTotUnd  *= NotCero( hGet( uDbf, "UnidadesKit" ) )
         nTotUnd  *= NotCero( hGet( uDbf, "Medicion1" ) )
         nTotUnd  *= NotCero( hGet( uDbf, "Medicion2" ) )
         nTotUnd  *= NotCero( hGet( uDbf, "Medicion3" ) )

      otherwise

         nTotUnd  := NotBulto( uDbf:nBultos )
         nTotUnd  *= NotCaja( uDbf:nCanEnt )
         nTotUnd  *= uDbf:nUniCaja
         nTotUnd  *= NotCero( uDbf:nUndKit )
         nTotUnd  *= NotCero( uDbf:nMedUno )
         nTotUnd  *= NotCero( uDbf:nMedDos )
         nTotUnd  *= NotCero( uDbf:nMedTre )

   end

return ( nTotUnd )



function nTotVAlbCli( uDbf )

   local nTotUnd

   If( uDbf == nil, uDbf := D():Get( "AlbCliL", nView ), ) ;

   do case
      case ValType( uDbf ) == "A"

         nTotUnd  := nTotNAlbCli( uDbf ) * NotCero( uDbf[ 32 ] )

      case ValType( uDbf ) == "C"

         nTotUnd  := nTotNAlbCli( uDbf ) * NotCero( ( uDbf )->nFacCnv )

      otherwise

         nTotUnd  := nTotNAlbCli( uDbf ) * NotCero( uDbf:nFacCnv )

   end

return ( nTotUnd )



Function isLineaTotalAlbCli( uAlbCliL )

   if isArray( uAlbCliL )
      Return ( uAlbCliL[ 24 ] )
   end

Return ( ( uAlbCliL )->lTotLin )



Function nDescuentoLinealAlbCli( uAlbCliL, nDec, nVdv )

   local nDescuentoLineal

   if isArray( uAlbCliL )
      nDescuentoLineal  := uAlbCliL[ 33 ]
   else
      nDescuentoLineal  := ( uAlbCliL )->nDtoDiv
   end

Return ( Round( nDescuentoLineal / nVdv, nDec ) )



Function nDescuentoPorcentualAlbCli( uAlbCliL )

   local nDescuentoPorcentual

   if isArray( uAlbCliL )
      nDescuentoPorcentual  := uAlbCliL[ 9 ]
   else
      nDescuentoPorcentual  := ( uAlbCliL )->nDto
   end

Return ( nDescuentoPorcentual )



Function nDescuentoPromocionAlbCli( uAlbCliL )

   local nDescuentoPromocion

   if isArray( uAlbCliL )
      nDescuentoPromocion  := uAlbCliL[ 10 ]
   else
      nDescuentoPromocion  := ( uAlbCliL )->nDtoPrm
   end

Return ( nDescuentoPromocion )



Function nPuntoVerdeAlbCli( uAlbCliL )

   local nPuntoVerde

   if isArray( uAlbCliL )
      nPuntoVerde  := uAlbCliL[ 7 ]
   else
      nPuntoVerde  := ( uAlbCliL )->nPntVer
   end

Return ( nPuntoVerde )



Function nTransporteAlbCli( uAlbCliL )

   local nTransporte

   if isArray( uAlbCliL )
      nTransporte  := uAlbCliL[ 8 ]
   else
      nTransporte  := ( uAlbCliL )->nImpTrn
   end

Return ( nTransporte )



FUNCTION nTotLAlbCli( uAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo
   local nUnidades

   If( uAlbCliL == nil, uAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   if isLineaTotalAlbCli( uAlbCliL )

      nCalculo          := nTotUAlbCli( uAlbCliL, nDec, nVdv )

   else

      nUnidades         := nTotNAlbCli( uAlbCliL )
      nCalculo          := nTotUAlbCli( uAlbCliL, nDec, nVdv ) * nUnidades





      if !ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )
         nCalculo       -= nDescuentoLinealAlbCli( uAlbCliL, nDec, nVdv ) * nUnidades
      end

      if lDto .AND. nDescuentoPorcentualAlbCli( uAlbCliL ) <> 0
         nCalculo       -= nCalculo * nDescuentoPorcentualAlbCli( uAlbCliL ) / 100
      end

      if lDto .AND. nDescuentoPromocionAlbCli( uAlbCliL ) <> 0
         nCalculo       -= nCalculo * nDescuentoPromocionAlbCli( uAlbCliL ) / 100
      end





      if lPntVer .AND. nPuntoVerdeAlbCli( uAlbCliL ) <> 0
         nCalculo       += nPuntoVerdeAlbCli( uAlbCliL ) * nUnidades
      end





      if lImpTrn .AND. nTransporteAlbCli( uAlbCliL ) <> 0
         nCalculo       += nTransporteAlbCli( uAlbCliL ) * nUnidades
      end

   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

   if nRou <> nil
      nCalculo          := Round( nCalculo, nRou )
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )







FUNCTION nPntLAlbCli( dbfLin, nDec, nVdv )

   local nPntVer

   If( dbfLin == nil, dbfLin := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;





   nPntVer           := ( dbfLin )->nPntVer * nTotNAlbCli( dbfLin )

RETURN ( Round( nPntVer, nDec ) )






FUNCTION nDtoLAlbCli( cAlbCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cAlbCliL )->nDto <> 0 .AND. !( cAlbCliL )->lTotLin

      nCalculo          := nTotUAlbCli( cAlbCliL, nDec ) * nTotNAlbCli( cAlbCliL )





      nCalculo          -= Round( ( cAlbCliL )->nDtoDiv / nVdv , nDec )

      nCalculo          := nCalculo * ( cAlbCliL )->nDto / 100


      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )



FUNCTION nDtoLinealAlbCli( cAlbCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if !( cAlbCliL )->lTotLin

      nCalculo          := nTotNAlbCli( cAlbCliL ) * Round( ( cAlbCliL )->nDtoDiv / nVdv , nDec )

      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )






FUNCTION nPrmLAlbCli( cAlbCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cAlbCliL )->nDtoPrm <> 0 .AND. !( cAlbCliL )->lTotLin

      nCalculo          := nTotUAlbCli( cAlbCliL, nDec ) * nTotNAlbCli( cAlbCliL )





      nCalculo          -= Round( ( cAlbCliL )->nDtoDiv / nVdv , nDec )

      if ( cAlbCliL )->nDto <> 0
         nCalculo       -= nCalculo * ( cAlbCliL )->nDto / 100
      end

      nCalculo          := nCalculo * ( cAlbCliL )->nDtoPrm / 100

      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )







FUNCTION nTotUAlbCli( uTmpLin, nDec, nVdv )

   local nCalculo    := 0

   If( uTmpLin == nil, uTmpLin := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   do case
      case IsChar( uTmpLin )

         if ( uTmpLin )->lAlquiler
            nCalculo    := ( uTmpLin )->nPreAlq
         else
            nCalculo    := ( uTmpLin )->nPreUnit
         end

      case IsObject( uTmpLin )

         if uTmpLin:lAlquiler
            nCalculo    := uTmpLin:nPreAlq
         else
            nCalculo    := uTmpLin:nPreUnit
         end

      case IsArray( uTmpLin )

         if uTmpLin[ 71 ]
            nCalculo    := uTmpLin[ 70 ]
         else
            nCalculo    := uTmpLin[ 6 ]
         end

      case IsHash( uTmpLin )

         nCalculo       := hGet( uTmpLin, "PrecioVenta" )

   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nNetUAlbCli( cAlbCliL, nDec, nVdv, cPouDiv )

   local nCalculo

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotUAlbCli( cAlbCliL, nDec, nVdv )

   if ( cAlbCliL )->nIva <> 0
      if ( cAlbCliL )->lIvaLin
         nCalculo -= nCalculo / ( 100 / ( cAlbCliL )->nIva  + 1 )
      end
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )






Function nPntUAlbCli( cDbfTmpLin, nDec, nVdv )

   local nCalculo
   local lPntVer  := AlbaranesClientesModel():getField( ( cDbfTmpLin )->cSerAlb, ( cDbfTmpLin )->nNumAlb, ( cDbfTmpLin )->cSufAlb, "lOperPV" )

   if lPntVer
      nCalculo := ( cDbfTmpLin )->nPntVer
   else
      nCalculo := 0
   end

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   IF nVdv <> 0
      nCalculo    := ( cDbfTmpLin )->nPntVer / nVdv
   end

Return ( Round( nCalculo, nDec ) )



FUNCTION IsAlbCli( cPath )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "AlbCliT.Dbf" )
      dbCreate( cPath + "AlbCliT.Dbf", aSqlStruct( aItmAlbCli() ), cDriver() )
   end

   if !lExistTable( cPath + "AlbCliL.Dbf" )
      dbCreate( cPath + "AlbCliL.Dbf", aSqlStruct( aColAlbCli() ), cDriver() )
   end

   if !lExistTable( cPath + "AlbCliP.Dbf" )
      dbCreate( cPath + "AlbCliP.Dbf", aSqlStruct( aItmAlbPgo() ), cDriver() )
   end

   if !lExistTable( cPath + "AlbCliI.Dbf" )
      dbCreate( cPath + "AlbCliI.Dbf", aSqlStruct( aIncAlbCli() ), cDriver() )
   end

   if !lExistTable( cPath + "AlbCliD.Dbf" )
      dbCreate( cPath + "AlbCliD.Dbf", aSqlStruct( aAlbCliDoc() ), cDriver() )
   end

   if !lExistTable( cPath + "AlbCliE.Dbf" )
      dbCreate( cPath + "AlbCliE.Dbf", aSqlStruct( aAlbCliEst() ), cDriver() )
   end






   if !lExistIndex( cPath + "AlbCliT.Cdx" ) .OR.  !lExistIndex( cPath + "AlbCliL.Cdx" ) .OR.  !lExistIndex( cPath + "AlbCliP.Cdx" ) .OR.  !lExistIndex( cPath + "AlbCliI.Cdx" ) .OR.  !lExistTable( cPath + "AlbCliD.Cdx" ) .OR.  !lExistTable( cPath + "AlbCliE.Cdx" )

      rxAlbCli( cPath )

   end

Return ( .T. )



FUNCTION mkAlbCli( cPath, lAppend, cPathOld, oMeter, bFor )

   local oBlock
   local oError
   local cAlbCliT
   local cAlbCliL
   local cAlbCliI
   local cAlbCliD
   local cAlbCliP
   local oldAlbCliT
   local oldAlbCliL
   local oldAlbCliI
   local oldAlbCliD
   local oldAlbCliP

   If( lAppend == nil, lAppend := .F., ) ;
   If( bFor == nil, bFor := {|| .T. }, ) ;

   if oMeter <> nil
      oMeter:cText   := "Generando Bases"
      sysrefresh()
   end

   CreateFiles( cPath )

   rxAlbCli( cPath, cLocalDriver() )

   if lAppend .AND. lIsDir( cPathOld )

      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      dbUseArea( .T., cDriver(), cPath + "ALBCLIT.DBF", cCheckArea( "ALBCLIT", @cAlbCliT ), .F. )
      ( cAlbCliT )->( ordListAdd( cPath + "ALBCLIT.CDX" ) )

      dbUseArea( .T., cDriver(), cPath + "ALBCLIL.DBF", cCheckArea( "ALBCLIL", @cAlbCliL ), .F. )
      ( cAlbCliL )->( ordListAdd( cPath + "ALBCLIL.CDX" ) )

      dbUseArea( .T., cDriver(), cPath + "AlbCliI.Dbf", cCheckArea( "AlbCliI", @cAlbCliI ), .F. )
      ( cAlbCliI )->( ordListAdd( cPath + "AlbCliI.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPath + "AlbCliD.Dbf", cCheckArea( "AlbCliD", @cAlbCliD ), .F. )
      ( cAlbCliD )->( ordListAdd( cPath + "AlbCliD.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPath + "AlbCliP.Dbf", cCheckArea( "AlbCliP", @cAlbCliP ), .F. )
      ( cAlbCliP )->( ordListAdd( cPath + "AlbCliP.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCLIT.DBF", cCheckArea( "AlbCLIT", @oldAlbCliT ), .F. )
      ( oldAlbCliT )->( ordListAdd( cPathOld + "AlbCLIT.CDX"  ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCLIL.DBF", cCheckArea( "AlbCLIL", @oldAlbCliL ), .F. )
      ( oldAlbCliL )->( ordListAdd( cPathOld + "AlbCLIL.CDX"  ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCliI.Dbf", cCheckArea( "AlbCliI", @oldAlbCliI ), .F. )
      ( oldAlbCliI )->( ordListAdd( cPathOld + "AlbCliI.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCliD.Dbf", cCheckArea( "AlbCliD", @oldAlbCliD ), .F. )
      ( oldAlbCliD )->( ordListAdd( cPathOld + "AlbCliD.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCliP.Dbf", cCheckArea( "AlbCliP", @oldAlbCliP ), .F. )
      ( oldAlbCliP )->( ordListAdd( cPathOld + "AlbCliP.Cdx"  ) )

      while !( oldAlbCliT )->( eof() )

         if eval( bFor, oldAlbCliT )
            dbCopy( oldAlbCliT, cAlbCliT, .T. )

            if ( oldAlbCliL )->( dbSeek( (oldAlbCliT)->CSERALB + Str( (oldAlbCliT)->NNUMALB ) + (oldAlbCliT)->CSUFALB ) )
               while ( oldAlbCliL )->CSERALB + Str( ( oldAlbCliL )->NNUMALB ) + ( oldAlbCliL )->CSUFALB == (oldAlbCliT)->CSERALB + Str( (cAlbCliT)->NNUMALB ) + (cAlbCliT)->CSUFALB .AND. !(oldAlbCliL)->( eof() )
                  dbCopy( oldAlbCliL, cAlbCliL, .T. )
                  ( oldAlbCliL )->( dbSkip() )
               end
            end

            if ( oldAlbCliI )->( dbSeek( (oldAlbCliT)->CSERALB + Str( (oldAlbCliT)->NNUMALB ) + (oldAlbCliT)->CSUFALB ) )
               while ( oldAlbCliI )->CSERALB + Str( ( oldAlbCliI )->NNUMALB ) + ( oldAlbCliI )->CSUFALB == ( oldAlbCliT )->CSERALB + Str( ( cAlbCliT )->NNUMALB ) + ( cAlbCliT )->CSUFALB .AND. !( oldAlbCliI )->( eof() )
                  dbCopy( oldAlbCliI, cAlbCliI, .T. )
                  ( oldAlbCliI )->( dbSkip() )
               end
            end

            if ( oldAlbCliD )->( dbSeek( (oldAlbCliT)->CSERALB + Str( (oldAlbCliT)->NNUMALB ) + (oldAlbCliT)->CSUFALB ) )
               while ( oldAlbCliD )->CSERALB + Str( ( oldAlbCliD )->NNUMALB ) + ( oldAlbCliD )->CSUFALB == ( oldAlbCliT )->CSERALB + Str( ( cAlbCliT )->NNUMALB ) + ( cAlbCliT )->CSUFALB .AND. !( oldAlbCliI )->( eof() )
                  dbCopy( oldAlbCliD, cAlbCliD, .T. )
                  ( oldAlbCliD )->( dbSkip() )
               end
            end

         end

         ( oldAlbCliT )->( dbSkip() )

      end





      ( cAlbCliT )->( dbEval( {|| ( cAlbCliT )->cTurAlb := Space( 6 ) },,,,, .F. ) )


      ( cAlbCliT )->( dbCloseArea() )
      ( cAlbCliL )->( dbCloseArea() )
      ( cAlbCliI )->( dbCloseArea() )
      ( cAlbCliD )->( dbCloseArea() )
      ( cAlbCliP )->( dbCloseArea() )

      ( oldAlbCliT )->( dbCloseArea() )
      ( oldAlbCliL )->( dbCloseArea() )
      ( oldAlbCliI )->( dbCloseArea() )
      ( oldAlbCliD )->( dbCloseArea() )
      ( oldAlbCliP )->( dbCloseArea() )

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de albaranes de clientes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end
      ErrorBlock( oBlock )

   end

RETURN .T.



FUNCTION rxAlbCli( cPath, cDriver )

   local cAlbCliT

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cLocalDriver(), ) ;







   if !lExistTable( cPath + "ALBCLIT.DBF", cDriver )   .OR.  !lExistTable( cPath + "ALBCLIL.DBF", cDriver )   .OR.  !lExistTable( cPath + "ALBCLII.DBF", cDriver )   .OR.  !lExistTable( cPath + "ALBCLID.DBF", cDriver )   .OR.  !lExistTable( cPath + "ALBCLIP.DBF", cDriver )   .OR.  !lExistTable( cPath + "ALBCLIS.DBF", cDriver )   .OR.  !lExistTable( cPath + "ALBCLIE.DBF", cDriver )

      CreateFiles( cPath, cDriver )

   end

   fEraseIndex( cPath + "ALBCLIT.CDX", cDriver )
   fEraseIndex( cPath + "ALBCLIL.CDX", cDriver )
   fEraseIndex( cPath + "ALBCLII.CDX", cDriver )
   fEraseIndex( cPath + "ALBCLID.CDX", cDriver )
   fEraseIndex( cPath + "ALBCLIP.CDX", cDriver )
   fEraseIndex( cPath + "ALBCLIS.CDX", cDriver )
   fEraseIndex( cPath + "ALBCLIE.CDX", cDriver )

   dbUseArea( .T., cDriver, cPath + "ALBCLIT.DBF", cCheckArea( "ALBCLIT", @cAlbCliT ), .F. )

   if !( cAlbCliT )->( neterr() )
      ( cAlbCliT )->( __dbPack() )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "NNUMALB", "CSERALB + Str(NNUMALB) + CSUFALB", {|| Field->CSERALB + Str( Field->NNUMALB ) + Field->CSUFALB } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } , , , , , , , , , .T. ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "dFecAlb", "dFecAlb", {|| Field->dFecAlb } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "CCODCLI", "CCODCLI", {|| Field->CCODCLI } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "CNOMCLI", "Upper( CNOMCLI )", {|| Upper( Field->CNOMCLI ) } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "CCODSUALB", "CCODSUALB", {|| Field->CCODSUALB } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "LFACTURADO", "LFACTURADO", {|| Field->LFACTURADO } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "cNumFac", "CNUMFAC", {|| Field->CNUMFAC }, ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "CTURALB", "CTURALB + CSUFALB + CCODCAJ", {|| Field->CTURALB + Field->CSUFALB + Field->CCODCAJ } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "CCODOBR", "CCODCLI + CCODOBR", {|| Field->CCODCLI + Field->CCODOBR } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ))
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "lSndDoc", "lSndDoc", {|| Field->lSndDoc } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "CNUMPED", "CNUMPED", {|| Field->CNUMPED } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliT.Cdx", "iNumAlb", "'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb", {|| "10" + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIT.CDX", "dFecAsc", "dFecAlb", {|| Field->dFecAlb } ) )

      ( cAlbCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "ALBCLIL.DBF", cCheckArea( "ALBCLIL", @cAlbCliT ), .F. )

   if !( cAlbCliT )->( neterr() )
      ( cAlbCliT )->( __dbPack() )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "nNumAlb", "cSerAlb + Str( nNumAlb ) + cSufAlb + str( nNumLin )", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + str( Field->nNumLin ) } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "cRef", "cRef + cCodPr1 + cCodPr2 + cSerAlb + Str( nNumAlb ) + cSufAlb", {|| Field->cRef + Field->cCodPr1 + Field->cCodPr2 + Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "Lote", "cLote", {|| Field->cLote } ) )

      ( cAlbCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCLIL.CDX", "cRefLote", "cRef + cLote", {|| Field->cRef + Field->cLote } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "cNumPed", "cNumPed", {|| Field->cNumPed } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "cNumPedRef", "cNumPed + cRef + cValPr1 + cValPr2", {|| Field->cNumPed + Field->cRef + Field->cValPr1 + Field->cValPr2 } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted() .and. !lFacturado", {|| !Deleted() .AND. !Field->lFacturado } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "cRefNoFac", "cNumPed + cRef + cValPr1 + cValPr2", {|| Field->cNumPed + Field->cRef + Field->cValPr1 + Field->cValPr2 } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "cNumPedDet", "cNumPed + cRef + cCodPr1 + cCodPr2 + cRefPrv", {|| Field->cNumPed + Field->cRef + Field->cCodPr1 + Field->cCodPr2 + Field->cRefPrv } ) )

      ( cAlbCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "cNumRef", "cSerAlb + Str( nNumAlb ) + cSufAlb + cRef", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Field->cRef } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }, , , , , , , , , .T. ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliL.Cdx", "cRefFec", "cRef + cCodCli + dtos( dFecAlb ) + tFecAlb", {|| Field->cRef + Field->cCodCli + dtos( Field->dFecAlb ) + Field->tFecAlb } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIL.CDX", "cPedRef", "cNumPed + cRef", {|| Field->cNumPed + Field->cRef } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliL.Cdx", "iNumAlb", "'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb + Str( nNumLin )", {|| "10" + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb + Str( Field->nNumLin ) } ) )

      ( cAlbCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliL.Cdx", "nPosPrint", "cSerAlb + Str( nNumAlb ) + cSufAlb + Str( nPosPrint )", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Str( Field->nPosPrint ) } ) )



      ( cAlbCliT )->( ordCondSet( "!lValidado .and. !lControl .and. !lFacturado .and. nCtlStk < 2 .and. !Deleted()", {|| !Field->lValidado .AND. !Field->lControl .AND. !Field->lFacturado .AND. Field->nCtlStk < 2 .AND. !Deleted() }, , , , , , , , , .T. ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliL.Cdx", "cStkFast", "cRef + cAlmLin + dtos( dFecAlb )", {|| Field->cRef + Field->cAlmLin + dtos( Field->dFecAlb ) } ) )

      ( cAlbCliT )->( ordCondSet( "!lFacturado .and. !Deleted()", {|| !Field->lFacturado .AND. !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliL.Cdx", "cVtaFast", "cRef + cAlmLin + dtos( dFecAlb )", {|| Field->cRef + Field->cAlmLin + dtos( Field->dFecAlb ) } ) )

      ( cAlbCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de clientes" )

   end



   dbUseArea( .T., cDriver, cPath + "ALBCLIP.DBF", cCheckArea( "ALBCLIP", @cAlbCliT ), .F. )

   if !( cAlbCliT )->( neterr() )
      ( cAlbCliT )->( __dbPack() )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIP.CDX", "NNUMALB", "CSERALB + STR( NNUMALB ) + CSUFALB + STR( NNUMREC )", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB + STR( Field->NNUMREC ) } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIP.CDX", "CTURREC", "cTurRec + cSufAlb + cCodCaj", {|| Field->cTurRec + Field->cSufAlb + Field->cCodCaj } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "ALBCLIP.CDX", "CCODCLI", "cCodCli", {|| Field->cCodCli } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliP.CDX", "DENTREGA", "dEntrega", {|| Field->dEntrega } ) )

      ( cAlbCliT )->( ordCondSet("!Deleted() .and. !Field->lPasado", {|| !Deleted() .AND. !Field->lPasado } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliP.Cdx", "lCtaBnc", "cEPaisIBAN + cECtrlIBAN + cEntEmp + cSucEmp + cDigEmp + cCtaEmp", {|| Field->cEPaisIBAN + Field->cECtrlIBAN + Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliP.Cdx", "iNumAlb", "'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb", {|| "10" + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )

      ( cAlbCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "AlbCliI.DBF", cCheckArea( "AlbCliI", @cAlbCliT ), .F. )

   if !( cAlbCliT )->( neterr() )
      ( cAlbCliT )->( __dbPack() )

      ( cAlbCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliI.CDX", "NNUMALB", "CSERALB + STR( NNUMALB ) + CSUFALB", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliI.Cdx", "iNumAlb", "'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb", {|| "10" + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )

      ( cAlbCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "AlbCliD.DBF", cCheckArea( "AlbCliD", @cAlbCliT ), .F. )

   if !( cAlbCliT )->( neterr() )
      ( cAlbCliT )->( __dbPack() )

      ( cAlbCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliD.CDX", "NNUMALB", "CSERALB + STR( NNUMALB ) + CSUFALB", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliD.Cdx", "iNumAlb", "'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb", {|| "10" + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )

      ( cAlbCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "AlbCliS.Dbf", cCheckArea( "AlbCliS", @cAlbCliT ), .F. )

   if !( cAlbCliT )->( neterr() )
      ( cAlbCliT )->( __dbPack() )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliS.CDX", "nNumAlb", "cSerAlb + Str( nNumAlb ) + cSufAlb + Str( nNumLin )", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Str( Field->nNumLin ) } ) )

      ( cAlbCliT )->( ordCondSet( "!lFacturado .and. !Deleted()", {|| !Field->lFacturado .AND. !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliS.CDX", "cRefSer", "cRef + cAlmLin + cNumSer", {|| Field->cRef + Field->cAlmLin + Field->cNumSer } ) )

      ( cAlbCliT )->( ordCondSet( "!lFacturado .and. !Deleted()", {|| !Field->lFacturado .AND. !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliS.CDX", "cNumSer", "cNumSer", {|| Field->cNumSer } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliS.Cdx", "iNumAlb", "'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb", {|| "10" + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )

      ( cAlbCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de numeros de series de albaranes de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "AlbCliE.DBF", cCheckArea( "AlbCliE", @cAlbCliT ), .F. )

   if !( cAlbCliT )->( neterr() )

      ( cAlbCliT )->( __dbPack() )

      ( cAlbCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliE.CDX", "NNUMALB", "CSERALB + STR( NNUMALB ) + CSUFALB", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliE.Cdx", "cSitua", "cSitua", {|| Field->cSitua } ) )

      ( cAlbCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbCliT )->( ordCreate( cPath + "AlbCliE.Cdx", "idPs", "str( idPs )", {|| str( Field->idPs ) } ) )

      ( cAlbCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )

   end

RETURN NIL



FUNCTION reindexAdsAlbCli( cPath )

   local cStm

   If( cPath == nil, cPath := cPatEmp(), ) ;

   adsDDRemoveIndexFile( cPath + "AlbCliT", "AlbCliT.Cdx", 1 )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "nNumAlb", "cSerAlb + str( nNumAlb ) + cSufAlb", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "dFecAlb", "dFecAlb", "!Deleted()", nAnd( 2, 8 ) )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCodCli", "cCodCli", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cNomCli", "upper( cNomCli )", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cObra", "cCodObr + Dtos( dFecAlb )", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCodAge", "cCodAge + Dtos( dFecAlb )", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCodSuAlb", "cCodSuAlb", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "lFacturado", "lFacturado", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cNumFac", "cNumFac", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cTurAlb", "cTurAlb + cSufAlb + cCodCaj", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "nNumOrd", "Str( nNumOrd ) + cSufOrd", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCodTrn", "cCodTrn", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCodObr", "cCodCli + cCodObr", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cNumPed", "cNumPed", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "lSndDoc", "lSndDoc", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCodUsr", "cCodUsr + Dtos( dFecCre ) + cTimCre", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cNumTik", "cNumTik", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCtrCoste", "cCtrCoste", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "Poblacion", "Upper( cPobCli )", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "Provincia", "Upper( cPrvCli )", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "CodPostal", "cPosCli", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "lCodCli", "cCodCli", "!Deleted() .and. !lFacturado" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "lCliObr", "cCodCli + cCodObr", "!Deleted() .and. !lFacturado" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cSuPed", "cSuPed", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "iNumAlb", '"10" + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb', "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cNumCli", "cSerAlb + Str( nNumAlb ) + cSufAlb + cCodCli", "!Deleted()" )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "cCliFec", "cCodCli + dtos( dFecAlb ) + tFecAlb", "!Deleted()", nAnd( 2, 8 ) )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "dFecDes", "dFecAlb", "!Deleted()", nAnd( 2, 8 ) )

   TDataCenter():SqlCreateIndex( cPath + "AlbCliT", "AlbCliT.Cdx", "nTotAlb", "nTotAlb", "!Deleted()", nAnd( 2, 8 ) )












































































































































































RETURN NIL



function aAlbCliEst()

   local aAlbCliEst  := {}

   aAdd( aAlbCliEst, { "cSerAlb", "C",    1,  0, "Serie de pedido" ,            "",                   "", "( cDbfCol )", nil } )
   aAdd( aAlbCliEst, { "nNumAlb", "N",    9,  0, "Numero de pedido" ,           "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aAlbCliEst, { "cSufAlb", "C",    2,  0, "Sufijo de pedido" ,           "",                   "", "( cDbfCol )", nil } )
   aAdd( aAlbCliEst, { "cSitua",  "C",  140,  0, "Situación" ,             "",                   "", "( cDbfCol )", nil } )
   aAdd( aAlbCliEst, { "dFecSit", "D",    8,  0, "Fecha de la situación" ,      "",                   "", "( cDbfCol )", nil } )
   aAdd( aAlbCliEst, { "tFecSit", "C",    6,  0, "Hora de la situación" ,       "",                   "", "( cDbfCol )", nil } )
   aAdd( aAlbCliEst, { "idPs",    "N",   11,  0, "Id prestashop" ,              "",                   "", "( cDbfCol )", nil } )

return ( aAlbCliEst )



function aAlbCliDoc()

   local aAlbCliDoc  := {}

   aAdd( aAlbCliDoc, { "cSerAlb", "C",    1,  0, "Serie de albarán" ,                "",                   "", "( cDbfCol )" } )
   aAdd( aAlbCliDoc, { "nNumAlb", "N",    9,  0, "Número de albarán" ,               "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aAlbCliDoc, { "cSufAlb", "C",    2,  0, "Sufijo de albarán" ,               "",                   "", "( cDbfCol )" } )
   aAdd( aAlbCliDoc, { "cNombre", "C",  250,  0, "Nombre del documento" ,            "",                   "", "( cDbfCol )" } )
   aAdd( aAlbCliDoc, { "cRuta",   "C",  250,  0, "Ruta del documento" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aAlbCliDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento" ,     "",                   "", "( cDbfCol )" } )

return ( aAlbCliDoc )



function aIncAlbCli()

   local aIncAlbCli  := {}

   aAdd( aIncAlbCli, { "cSerAlb",      "C",    1,  0, "Serie de albarán" ,                "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbCli, { "nNumAlb",      "N",    9,  0, "Número de albarán" ,               "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aIncAlbCli, { "cSufAlb",      "C",    2,  0, "Sufijo de albarán" ,               "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbCli, { "cCodTip",      "C",    3,  0, "Tipo de incidencia" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbCli, { "dFecInc",      "D",    8,  0, "Fecha de la incidencia" ,          "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbCli, { "mDesInc",      "M",   10,  0, "Descripción de la incidencia" ,    "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbCli, { "lListo",       "L",    1,  0, "Lógico de listo" ,                 "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbCli, { "lAviso",       "L",    1,  0, "Lógico de aviso" ,                 "",                   "", "( cDbfCol )" } )

return ( aIncAlbCli )



function aItmAlbPgo()

   local aBasRecCli  := {}

   aAdd( aBasRecCli, {"cSerAlb"     ,"C",  1, 0, "Serie de albarán" ,                  "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"nNumAlb"     ,"N",  9, 0, "Número de albarán" ,                 "'999999999'",       "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cSufAlb"     ,"C",  2, 0, "Sufijo de albarán" ,                 "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"nNumRec"     ,"N",  2, 0, "Número del recibo",                  "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cCodCaj"     ,"C",  3, 0, "Código de caja",                     "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cTurRec"     ,"C",  6, 0, "Sesión del recibo",                  "######",            "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cCodCli"     ,"C", 12, 0, "Código de cliente",                  "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"dEntrega"    ,"D",  8, 0, "Fecha de cobro",                     "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"nImporte"    ,"N", 18, 8, "Importe",                            "cPorDivEnt",        "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cDescrip"    ,"C",100, 0, "Concepto del pago",                  "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cPgdoPor"    ,"C", 50, 0, "Pagado por",                         "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cDocPgo"     ,"C", 50, 0, "Documento de pago",                  "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cDivPgo"     ,"C",  3, 0, "Código de la divisa",                "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"nVdvPgo"     ,"N", 10, 6, "Cambio de la divisa",                "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cCodAge"     ,"C",  3, 0, "Código del agente",                  "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cCodPgo"     ,"C",  2, 0, "Código de la forma de pago",         "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"lCloPgo"     ,"L",  1, 0, "Logico de turno cerrado",            "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cNumAnt"     ,"C", 14, 0, "Número del anticipo en el pedido",   "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cNumRec"     ,"C", 14, 0, "Número del pedido al que pertenece", "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"lPasado"     ,"L",  1, 0, "Lógico de pasado",                   "",                  "", "( cDbfEnt )" } )
   aAdd( aBasRecCli, {"cBncEmp"     ,"C", 50, 0, "Banco de la empresa para el recibo" ,"",                  "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cBncCli"     ,"C", 50, 0, "Banco del cliente para el recibo" ,  "",                  "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cEPaisIBAN"  ,"C",  2, 0, "País IBAN de la cuenta bancaria de la empresa",       "", "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cECtrlIBAN"  ,"C",  2, 0, "Dígito de control IBAN de la cuenta bancaria de la empresa", "", "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cEntEmp"     ,"C",  4, 0, "Entidad de la cuenta de la empresa",  "",                 "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cSucEmp"     ,"C",  4, 0, "Sucursal de la cuenta de la empresa", "",                 "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cDigEmp"     ,"C",  2, 0, "Dígito de control de la cuenta de la empresa", "",        "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cCtaEmp"     ,"C", 10, 0, "Cuenta bancaria de la empresa",       "",                 "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cPaisIBAN"   ,"C",  2, 0, "País IBAN de la cuenta bancaria del cliente",           "", "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cCtrlIBAN"   ,"C",  2, 0, "Dígito de control IBAN de la cuenta bancaria del cliente", "", "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cEntCli"     ,"C",  4, 0, "Entidad de la cuenta del cliente",  "",                   "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cSucCli"     ,"C",  4, 0, "Sucursal de la cuenta del cliente",  "",                  "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cDigCli"     ,"C",  2, 0, "Dígito de control de la cuenta del cliente", "",          "", "( cDbfEnt )", nil } )
   aAdd( aBasRecCli, {"cCtaCli"     ,"C", 10, 0, "Cuenta bancaria del cliente",        "",                  "", "( cDbfEnt )", nil } )

return ( aBasRecCli )



Function aColAlbCli()

   local aColAlbCli  := {}

   aAdd( aColAlbCli, { "cSerAlb",   "C",  1, 0, "Serie del albarán" ,                              "Serie",                         "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nNumAlb",   "N",  9, 0, "Número del albarán" ,                             "Numero",                        "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cSufAlb",   "C",  2, 0, "Sufijo del albarán" ,                             "Sufijo",                        "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cRef",      "C", 18, 0, "Referencia de artículo" ,                         "Articulo",                      "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cDetalle",  "C",250, 0, "Detalle de artículo" ,                            "DescripcionArticulo",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPreUnit",  "N", 18, 8, "Precio artículo" ,                                "PrecioVenta",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPntVer",   "N", 18, 8, "Importe punto verde" ,                            "PuntoVerde",                    "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nImpTrn",   "N", 18, 8, "Importe del porte" ,                              "Portes",                        "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nDto",      "N",  6, 2, "Descuento de artículo" ,                          "DescuentoPorcentual",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nDtoPrm",   "N",  6, 2, "Descuento de promoción" ,                         "DescuentoPromocion",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nIva",      "N",  4, 1, cImp() + " del artículo" ,                         "PorcentajeImpuesto",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nCanEnt",   "N", 18, 8, cNombreCajas(),                                    "Cajas",                         "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nCanFac",   "N", 18, 8, "Cantidad facturada" ,                             "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lControl",  "L",  1, 0, "Control reservado" ,                              "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPesoKg",   "N", 18, 8, "Peso del producto" ,                              "Peso",                          "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cPesoKg",   "C",  2, 0, "Unidad de peso del producto" ,                    "UnidadMedicionPeso",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cUnidad",   "C",  2, 0, "Unidad de venta" ,                                "UnidadMedicion",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nComAge",   "N",  6, 2, "Comisión del agente" ,                            "ComisionAgente",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nUniCaja",  "N", 18, 8, cNombreUnidades(),                                 "Unidades",                      "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nUndKit",   "N", 18, 8, "Unidades del producto kit",                       "UnidadesKit",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "dFecha",    "D",  8, 0, "Fecha de linea" ,                                 "FechaEntrega",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cTipMov",   "C",  2, 0, "Tipo de movimiento" ,                             "Tipo",                          "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "mLngDes",   "M", 10, 0, "Descripción larga" ,                              "DescripcionAmpliada",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lTotLin",   "L",  1, 0, "Línea de total" ,                                 "LineaTotal",                    "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lImpLin",   "L",  1, 0, "Línea no imprimible" ,                            "LineaNoImprimible",             "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lNewLin",   "L",  1, 0, "" ,                                               "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cNumPed",   "C", 12, 0, "Número del pedido" ,                              "NumeroPedido",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodPr1",   "C", 20, 0, "Código de primera propiedad",                     "CodigoPropiedad1",              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodPr2",   "C", 20, 0, "Código de segunda propiedad",                     "CodigoPropiedad2",              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cValPr1",   "C", 20, 0, "Valor de primera propiedad",                      "ValorPropiedad1",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cValPr2",   "C", 20, 0, "Valor de segunda propiedad",                      "ValorPropiedad2",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nFacCnv",   "N", 18, 8, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nDtoDiv",   "N", 18, 8, "Descuento en línea",                              "DescuentoLineal",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nNumLin",   "N",  4, 0, "Número de la línea",                              "NumeroLinea",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nCtlStk",   "N",  1, 0, "Tipo de stock de la linea",                       "TipoStock",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nCosDiv",   "N", 18, 8, "Precio de costo",                                 "PrecioCosto",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPvpRec",   "N", 18, 8, "Precio de venta recomendado",                     "PrecioVentaRecomendado",        "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cAlmLin",   "C", 16, 0, "Código del almacen",                              "Almacen",                       "", "( cDbfCol )", {|| Application():codigoAlmacen() } } )
   aAdd( aColAlbCli, { "lIvaLin",   "L",  1, 0, cImp() + " incluido",                              "LineaImpuestoIncluido",         "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nValImp",   "N", 18, 8, "Importe de impuesto",                             "ImporteImpuestoEspecial",       "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodImp",   "C",  3, 0, "Código del IVMH",                                 "ImpuestoEspecial",              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lLote",     "L",  1, 0, "",                                                "LogicoLote",                    "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nLote",     "N",  9, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cLote",     "C", 64, 0, "Número de lote",                                  "Lote",                          "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "dFecCad",   "D",  8, 0, "Fecha de caducidad",                              "FechaCaducidad",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lKitArt",   "L",  1, 0, "Línea con escandallo",                            "LineaEscandallo",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lKitChl",   "L",  1, 0, "Línea pertenciente a escandallo",                 "LineaPertenecienteEscandallo",  "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lKitPrc",   "L",  1, 0, "Línea de escandallos con precio",                 "LineaEscandalloPrecio",         "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nMesGrt",   "N",  2, 0, "Meses de garantía",                               "MesesGarantia",                 "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lMsgVta",   "L",  1, 0, "Avisar venta sin stocks",                         "AvisarSinStock",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lNotVta",   "L",  1, 0, "No permitir venta sin stocks",                    "NoPermitirSinStock",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "mNumSer",   "M", 10, 0, "" ,                                               "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodTip",   "C",  4, 0, "Código del tipo de artículo",                     "TipoArticulo",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodFam",   "C", 16, 0, "Código de familia",                               "Familia",                       "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cGrpFam",   "C",  3, 0, "Código del grupo de familia",                     "GrupoFamilia",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nReq",      "N", 16, 6, "Recargo de equivalencia",                         "RecargoEquivalencia",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "mObsLin",   "M", 10, 0, "Observación de línea",                            "Observaciones",                 "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodPrv",   "C", 12, 0, "Código del proveedor",                            "Proveedor",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cNomPrv",   "C", 30, 0, "Nombre del proveedor",                            "NombreProveedor",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cImagen",   "C",250, 0, "Fichero de imagen" ,                              "Imagen",                        "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPuntos",   "N", 15, 6, "Puntos del artículo",                             "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nValPnt",   "N", 18, 8, "Valor del punto",                                 "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nDtoPnt",   "N",  5, 2, "Descuento puntos",                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nIncPnt",   "N",  5, 2, "Incremento porcentual",                           "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cRefPrv",   "C", 18, 0, "Referencia proveedor",                            "ReferenciaProveedor",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nVolumen",  "N", 18, 8, "Volumen del producto" ,                           "Volumen",                       "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cVolumen",  "C",  2, 0, "Unidad del volumen" ,                             "UnidadMedicionVolumen",         "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "dFecEnt" ,  "D",  8, 0, "Fecha de entrada del alquiler",                   "FechaEntradaAlquiler",          "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "dFecSal" ,  "D",  8, 0, "Fecha de salida del alquiler",                    "FechaSalidaAlquiler",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPreAlq" ,  "N", 18, 8, "Precio de alquiler",                              "PrecioAlquiler",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lAlquiler", "L",  1, 0, "Lógico de alquiler",                              "Alquiler",                      "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nNumMed",   "N",  1, 0, "Número de mediciones",                            "NumeroMediciones",              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nMedUno",   "N", 18, 8, "Primera unidad de medición",                      "Medicion1",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nMedDos",   "N", 18, 8, "Segunda unidad de medición",                      "Medicion2",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nMedTre",   "N", 18, 8, "Tercera unidad de medición",                      "Medicion3",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nTarLin",   "N", 18, 8, "Tarifa de precio aplicada",                       "NumeroTarifa",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodUbi1",  "C",  5, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodUbi2",  "C",  5, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodUbi3",  "C",  5, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cValUbi1",  "C",  5, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cValUbi2",  "C",  5, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cValUbi3",  "C",  5, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cNomUbi1",  "C", 30, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cNomUbi2",  "C", 30, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cNomUbi3",  "C", 30, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lImpFra",   "L",  1, 0, "Lógico de imprimir frase publicitaria",           "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodFra",   "C",  3, 0, "Código de frase publicitaria",                    "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cTxtFra",   "C",250, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "Descrip",   "M", 10, 0, "Observación de línea",                            "DescripcionTecnica",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lFacturado","L",  1, 0, "Lógico de facturado",                             "lFacturado",                    "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lLinOfe"  , "L",  1, 0, "Línea con oferta",                                "LineaOferta",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lVolImp",   "L",  1, 0, "Lógico aplicar volumen con impuestos especiales", "VolumenImpuestosEspeciales",    "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "dFecAlb",   "D",  8, 0, "Fecha de albaran",                                "Fecha",                         "", "( cDbfCol )", {|| GetSysDate() } } )
   aAdd( aColAlbCli, { "cNumSat",   "C", 12, 0, "Número del SAT" ,                                 "NumeroSat",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lFromAtp",  "L",  1, 0, "",                                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cCodCli",   "C", 12, 0, "Código de cliente",                               "Cliente",                       "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "dFecUltCom","D",  8, 0, "Fecha última compra",                             "FechaUltimaVenta",             "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nUniUltCom","N", 18, 8, "Unidades última compra",                          "UnidadesUltimaVenta",          "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nBultos",   "N", 18, 8, "Numero de bultos",                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cFormato",  "C",100, 0, "Formato de venta",                                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "tFecAlb" ,  "C",  6, 0, "Hora del albarán",                                "Hora",                          "", "( cDbfCol )", {|| GetSysTime() } } )
   aAdd( aColAlbCli, { "cCtrCoste", "C",  9, 0, "Código del centro de coste",                      "CentroCoste",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lLabel",    "L",  1, 0, "Lógico para marca de etiqueta",                   "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nLabel",    "N",  6, 0, "Unidades de etiquetas a imprimir",                "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cObrLin",   "C", 10, 0, "Dirección de la linea",                           "Direccion",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cRefAux",   "C", 18, 0, "Referencia auxiliar",                             "ReferenciaAuxiliar",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cRefAux2",  "C", 18, 0, "Segunda referencia auxiliar",                     "ReferenciaAuxiliar2",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPosPrint", "N",  4, 0, "Posición de impresión",                           "PosicionImpresion",             "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cTipCtr",   "C", 20, 0, "Tipo tercero centro de coste",                    "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "cTerCtr",   "C", 20, 0, "Tercero centro de coste",                         "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nNumKit",   "N",  4, 0, "Número de línea de escandallo",                   "",                              "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "id_tipo_v", "N", 16, 0, "Identificador tipo de venta",                     "IdentificadorTipoVenta",        "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nRegIva",   "N",  1, 0, "Régimen de " + cImp(),                            "TipoImpuesto",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "nPrcUltCom","N", 16, 6, "Precio última compra",                            "PrecioUltimaVenta",             "", "( cDbfCol )", nil } )
   aAdd( aColAlbCli, { "lValidado", "L",  1, 0, "Lógico validado con consolidación" ,              "LogicoValidado",                "", "( cDbfCol )", .F. } )
   aAdd( aColAlbCli, { "lPreparado","L",  1, 0, "Lógico línea preparada" ,                         "LogicoPreparado",               "", "( cDbfCol )", .F. } )
   aAdd( aColAlbCli, { "cidNumCom", "C", 15, 0, "Id Número del doc de compras" ,                   "IDDocumentocompras",            "", "( cDbfCol )", nil } )

Return ( aColAlbCli )



Function aItmAlbCli()

   local aItmAlbCli := {}

   aAdd( aItmAlbCli, { "CSERALB"   ,"C",  1, 0, "Serie del albarán" ,                                       "Serie",                         "", "( cDbf )", {|| "A" } } )
   aAdd( aItmAlbCli, { "NNUMALB"   ,"N",  9, 0, "Número del albarán" ,                                      "Numero",                        "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CSUFALB"   ,"C",  2, 0, "Sufijo del albarán" ,                                      "Sufijo",                        "", "( cDbf )", {|| RetSufEmp() } } )
   aAdd( aItmAlbCli, { "CTURALB"   ,"C",  6, 0, "Sesión del albarán",                                       "Turno",                         "", "( cDbf )", {|| cCurSesion( nil, .F.) } } )
   aAdd( aItmAlbCli, { "DFECALB"   ,"D",  8, 0, "Fecha del albarán" ,                                       "Fecha",                         "", "( cDbf )", {|| GetSysDate() } } )
   aAdd( aItmAlbCli, { "CCODCLI"   ,"C", 12, 0, "Código del cliente" ,                                      "Cliente",                       "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CCODALM"   ,"C", 16, 0, "Código de almacén" ,                                       "Almacen",                       "", "( cDbf )", {|| Application():codigoAlmacen() } } )
   aAdd( aItmAlbCli, { "CCODCAJ"   ,"C",  3, 0, "Código de caja" ,                                          "Caja",                          "", "( cDbf )", {|| Application():CodigoCaja() } } )
   aAdd( aItmAlbCli, { "CNOMCLI"   ,"C", 80, 0, "Nombre del cliente" ,                                      "NombreCliente",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CDIRCLI"   ,"C",200, 0, "Domicilio del cliente" ,                                   "DomicilioCliente",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CPOBCLI"   ,"C",200, 0, "Población del cliente" ,                                   "PoblacionCliente",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CPRVCLI"   ,"C",100, 0, "Provincia del cliente" ,                                   "ProvinciaCliente",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CPOSCLI"   ,"C", 15, 0, "Código postal del cliente" ,                               "CodigoPostalCliente",           "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CDNICLI"   ,"C", 30, 0, "DNI/CIF del cliente" ,                                     "DniCliente",                    "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "LMODCLI"   ,"L",  1, 0, "Lógico de modificar datos del cliente" ,                   "ModificarDatosCliente",         "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "lFacturado","L",  1, 0, "Lógico de facturado" ,                                     "Facturado",                     "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "lEntregado","L",  1, 0, "Lógico albarán enviado" ,                                  "Entregado",                     "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "DFECENT"   ,"D",  8, 0, "Fecha de entrada del albarán" ,                            "FechaSalida",                   "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CCODSUALB" ,"C", 25, 0, "Referencia a su albarán" ,                                 "DocumentoOrigen",               "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CCONDENT"  ,"C",100, 0, "Condición de entrada" ,                                    "Condiciones",                   "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "MCOMENT"   ,"M", 10, 0, "Cometarios del albarán" ,                                  "Comentarios",                   "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "MOBSERV"   ,"M", 10, 0, "Observaciones" ,                                           "Observaciones",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CCODPAGO"  ,"C",  2, 0, "Código de la forma de pago" ,                              "Pago",                          "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NBULTOS"   ,"N",  5, 0, "Número de bultos" ,                                        "Bultos",                        "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NPORTES"   ,"N", 18, 8, "Importe de los portes" ,                                   "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CCODAGE"   ,"C",  3, 0, "Código del agente" ,                                       "Agente",                        "", "( cDbf )", {|| cCodigoAgente() } } )
   aAdd( aItmAlbCli, { "CCODOBR"   ,"C", 10, 0, "Código de dirección" ,                                     "Direccion",                     "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CCODTAR"   ,"C",  5, 0, "Código de tarifa" ,                                        "Tarifa",                        "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CCODRUT"   ,"C",  4, 0, "Código de ruta" ,                                          "Ruta",                          "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CNUMPED"   ,"C", 12, 0, "Número del pedido" ,                                       "NumeroPedido",                  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cNumPre"   ,"C", 12, 0, "Número del presupuesto" ,                                  "NumeroPresupuesto",             "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cNumSat"   ,"C", 12, 0, "Número del SAT" ,                                          "NumeroSat",                     "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NTIPOALB"  ,"N",  1, 0, "Tipo de albarán" ,                                         "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CNUMFAC"   ,"C", 12, 0, "Número del documento facturado" ,                          "NumeroFactura",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "LMAYOR"    ,"L",  1, 0, "" ,                                                        "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NTARIFA"   ,"N",  1, 0, "Tarifa de precio aplicada" ,                               "NumeroTarifa",                  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CDTOESP"   ,"C", 50, 0, "Descripción porcentaje de descuento",                      "DescripcionDescuento1",         "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTOESP"   ,"N",  6, 2, "Porcentaje de descuento",                                  "PorcentajeDescuento1",          "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CDPP"      ,"C", 50, 0, "Descripción pct. de dto. por pronto pago",                 "DescripcionDescuento2",         "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDPP"      ,"N",  6, 2, "Porcentaje de dto. por pronto pago",                       "PorcentajeDescuento2",          "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CDTOUNO"   ,"C", 25, 0, "Descripción del primer descuento personalizado",           "DescripcionDescuento3",         "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTOUNO"   ,"N",  4, 1, "Porcentaje del primer descuento pers.",                    "PorcentajeDescuento3",          "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CDTODOS"   ,"C", 25, 0, "Descripción del segundo descuento pers.",                  "DescripcionDescuento4",         "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTODOS"   ,"N",  4, 1, "Descripción del segundo descuento pers.",                  "PorcentajeDescuento4",          "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTOCNT"   ,"N",  6, 2, "Pct. de dto. por pago contado",                            "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTORAP"   ,"N",  6, 2, "Pct. de dto. por rappel",                                  "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTOPUB"   ,"N",  6, 2, "Pct. de dto. por publicidad",                              "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTOPGO"   ,"N",  6, 2, "Pct. de dto. por pago centralizado",                       "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NDTOPTF"   ,"N",  7, 2, ""                                 ,                        "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "LRECARGO"  ,"L",  1, 0, "Lógico recargo de equivalencia",                           "RecargoEquivalencia",           "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NPCTCOMAGE","N",  6, 2, "Pct. de comisión del agente",                              "ComisionAgente",                "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "LSNDDOC"   ,"L",  1, 0, "Lógico de documento a enviar",                             "Envio",                         "", "( cDbf )", {|| .T. } } )
   aAdd( aItmAlbCli, { "CDIVALB"   ,"C",  3, 0, "Código de divisa",                                         "Divisa",                        "", "( cDbf )", {|| cDivEmp() } } )
   aAdd( aItmAlbCli, { "NVDVALB"   ,"N", 10, 4, "Valor del cambio de la divisa",                            "ValorDivisa",                   "", "( cDbf )", {|| nChgDiv() } } )
   aAdd( aItmAlbCli, { "CRETPOR"   ,"C",100, 0, "Retirado por" ,                                            "RetiradoPor",                   "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CRETMAT"   ,"C", 20, 0, "Matrícula" ,                                               "Matricula",                     "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CNUMDOC"   ,"C", 12, 0, "",                                                         "NumeroDocumento",               "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CSUPED"    ,"C", 50, 0, "Su pedido",                                                "NumeroSuPedido",                "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "LIVAINC"   ,"L",  1, 0, cImp() + " incluido",                                       "ImpuestosIncluidos",            "", "( cDbf )", {|| uFieldEmpresa( "lIvaInc" ) } } )
   aAdd( aItmAlbCli, { "NREGIVA"   ,"N",  1, 0, "Regimen de " + cImp(),                                     "TipoImpuesto",                  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "LGENLQD"   ,"L",  1, 0, "Generado por liquidación",                                 "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NNUMORD"   ,"N",  9, 0, "Número de la orden de carga" ,                             "NumeroOrdenCarga",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "CSUFORD"   ,"C",  2, 0, "Sufijo de la orden de carga" ,                             "SufijoOrdenCarga",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "DFECORD"   ,"D",  8, 0, "Fecha de la orden de carga" ,                              "FechaOrdenCarga",               "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "NIVAMAN"   ,"N",  6, 2, "Porcentaje de " + cImp() + " del gasto" ,                  "ImpuestoGastos",                "", "( cDbf )", {|| nIva( nil, cDefIva() ) } } )
   aAdd( aItmAlbCli, { "NMANOBR"   ,"N", 18, 8, "Gastos" ,                                                  "Gastos",                        "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cCodTrn"   ,"C",  9, 0, "Código del transportista" ,                                "Transportista",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nKgsTrn"   ,"N", 18, 8, "TARA del transportista" ,                                  "TaraTransportista",             "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "lCloAlb"   ,"L",  1, 0, "" ,                                                        "DocumentoCerrado",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cCodUsr"   ,"C",  3, 0, "Código de usuario",                                        "Usuario",                       "", "( cDbf )", {|| Auth():Codigo() } } )
   aAdd( aItmAlbCli, { "dFecCre"   ,"D",  8, 0, "Fecha de creación/modificación del documento",             "FechaCreacion",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cTimCre"   ,"C",  5, 0, "Hora de creación/modificación del documento",              "HoraCreacion",                  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "dFecEnv"   ,"D",  8, 0, "Fecha de envio",                                           "FechaEnvio",                    "", "( cDbf )", {|| cTod( "" ) } } )
   aAdd( aItmAlbCli, { "cCodGrp"   ,"C",  4, 0, "Código de grupo de cliente" ,                              "GrupoCliente",                  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "lImprimido","L",  1, 0, "Lógico de imprimido" ,                                     "Imprimido",                     "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "dFecImp"   ,"D",  8, 0, "Última fecha de impresión" ,                               "FechaImpresion",                "", "( cDbf )", {|| cTod( "" ) } } )
   aAdd( aItmAlbCli, { "cHorImp"   ,"C",  5, 0, "Hora de la última impresión" ,                             "HoraImpresion",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cCodDlg"   ,"C",  2, 0, "Código delegación" ,                                       "Delegacion",                    "", "( cDbf )", {|| Application():CodigoDelegacion() } } )
   aAdd( aItmAlbCli, { "nDtoAtp"   ,"N",  6, 2, "Porcentaje de descuento atípico",                          "DescuentoAtipico",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nSbrAtp"   ,"N",  1, 0, "Lugar donde aplicar dto atípico",                          "LugarAplicarDescuentoAtipico",  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nMontaje"  ,"N",  6, 2, "Horas de montaje",                                         "Montaje",                       "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "dFecEntr",  "D",  8, 0, "Fecha de entrada de alquiler",                             "EntradaAlquiler",               "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "dFecSal",   "D",  8, 0, "Fecha de salida de alquiler",                              "SalidaAlquiler",                "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "lAlquiler", "L",  1, 0, "Lógico de alquiler",                                       "Alquiler",                      "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cManObr",   "C",250, 0, "" ,                                                        "LiteralGastos",                 "", "( cDbf )", {|| padr( getConfigTraslation( "Gastos" ), 250 ) } } )
   aAdd( aItmAlbCli, { "lOrdCar",   "L",  1, 0, "Lógico de pertenecer a un orden de carga" ,                "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cNumTik",   "C", 13, 0, "Número del ticket" ,                                       "NumeroTicket",                  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cTlfCli",   "C", 20, 0, "Teléfono del cliente" ,                                    "TelefonoCliente",               "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nTotNet",   "N", 18, 8, "Total neto" ,                                              "TotalNeto",                     "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nTotIva",   "N", 18, 8, "Total " + cImp() ,                                         "TotalImpuesto",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nTotReq",   "N", 18, 8, "Total recargo" ,                                           "TotalRecargo",                  "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nTotAlb",   "N", 18, 8, "Total albarán" ,                                           "TotalDocumento",                "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nTotPag",   "N", 18, 8, "Total anticipado" ,                                        "",                              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "lOperPV",   "L",  1, 0, "Lógico para operar con punto verde" ,                      "OperarPuntoVerde",              "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cBanco"   , "C", 50, 0, "Nombre del banco del cliente",                             "NombreBanco",                   "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cPaisIBAN", "C",  2, 0, "País IBAN de la cuenta bancaria del cliente",              "CuentaIBAN",                    "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cCtrlIBAN", "C",  2, 0, "Dígito de control IBAN de la cuenta bancaria del cliente", "DigitoControlIBAN",             "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cEntBnc"  , "C",  4, 0, "Entidad de la cuenta bancaria del cliente",                "EntidadCuenta",                 "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cSucBnc"  , "C",  4, 0, "Sucursal de la cuenta bancaria del cliente",               "SucursalCuenta",                "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cDigBnc"  , "C",  2, 0, "Dígito de control de la cuenta bancaria del cliente",      "DigitoControlCuenta",           "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "cCtaBnc"  , "C", 10, 0, "Cuenta bancaria del cliente",                              "CuentaBancaria",                "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nDtoTarifa","N",  6, 2, "Descuento de tarifa de cliente",                           "DescuentoTarifa",               "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "nFacturado","N",  1, 0, "Estado del albaran" ,                                      "Estado",                        "", "( cDbf )", {|| 1 } } )
   aAdd( aItmAlbCli, { "tFecAlb",   "C",  6, 0, "Hora del albarán" ,                                        "Hora",                          "", "( cDbf )", {|| getSysTime() } } )
   aAdd( aItmAlbCli, { "cCtrCoste", "C",  9, 0, "Código del centro de coste" ,                              "CentroCoste",                   "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "mFirma",    "M", 10, 0, "Firma" ,                                                   "Firma",                         "", "( cDbf )", nil } )
   aAdd( aItmAlbCli, { "lFirma",    "L",  1, 0, "Confirmación firma" ,                                      "ConfirmaFirma",                 "", "( cDbf )", nil } )

Return ( aItmAlbCli )



FUNCTION nTotAlbCli( cAlbaran, cAlbCliT, cAlbCliL, cIva, cDiv, aTmp, cDivRet, lPic, lExcCnt, lNeto )

   local nRecno
   local bCondition
   local dFecAlb
   local lRecargo
   local nDtoUno
   local nDtoDos
   local nDtoEsp
   local nDtoPP
   local nDtoCnt
   local nDtoRap
   local nDtoPub
   local nDtoPgo
   local nDtoPtf
   local cCodDiv
   local cCodPgo
   local lIvaInc
   local nDtoAtp
   local nSbrAtp
   local nKgsTrn
   local nIvaMan
   local nManObr           := 0
   local nTotalArt         := 0
   local nTotalUnd         := 0
   local nTotalLin         := 0
   local nTotalTrn         := 0
   local nTotalPnt         := 0
   local nTotalIvm         := 0
   local nImpIva           := { 0, 0, 0 }
   local nImpReq           := { 0, 0, 0 }
   local aTotalDto         := { 0, 0, 0 }
   local aTotalDPP         := { 0, 0, 0 }
   local aTotalUno         := { 0, 0, 0 }
   local aTotalDos         := { 0, 0, 0 }
   local aTotalAtp         := { 0, 0, 0 }
   local nDescuentosLineas := 0
   local lOperarPntVer     := .F.
   local nRegIva
   local nBaseGasto
   local nIvaGasto

   local oTotalDoc         := nTotalDocumento():new( nView )

   If( cAlbCliT == nil, cAlbCliT := D():Get( "AlbCliT", nView ), ) ;
   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( cAlbaran == nil, cAlbaran := ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb, ) ;
   If( cIva == nil, cIva := D():Get( "TIva", nView ), ) ;
   If( cDiv == nil, cDiv := D():Get( "Divisas", nView ), ) ;
   If( lPic == nil, lPic := .F., ) ;
   If( lNeto == nil, lNeto := .F., ) ;

   if empty( Select( cAlbCliT ) )
      Return ( 0 )
   end

   if empty( Select( cAlbCliL ) )
      Return ( 0 )
   end

   if empty( Select( cIva ) )
      Return ( 0 )
   end

   if empty( Select( cDiv ) )
      Return ( 0 )
   end

   public nTotBrt    := 0
   public nTotAlb    := 0
   public nTotDto    := 0
   public nTotDPP    := 0
   public nTotNet    := 0
   public nTotIva    := 0
   public nTotIvm    := 0
   public nTotAge    := 0
   public nTotReq    := 0
   public nTotPnt    := 0
   public nTotUno    := 0
   public nTotDos    := 0
   public nTotCos    := 0
   public nTotPes    := 0
   public nTotDif    := 0
   public nTotAtp    := 0
   public nTotTrn    := 0
   public nPctRnt    := 0
   public nTotRnt    := 0
   public cCtaCli    := cClientCuenta( ( cAlbCliT )->cCodCli )
   public nTotalDtoLineal  := 0










   public aTotIva    := {{    "porcentajeiva"   => nil, "logrecargo"      => .F., "porcentajere"    => nil, "bruto"           => nil, "neto"            => nil, "impiva"          => nil, "impre"           => nil, "nivmh"           => nil, "ntransporte"     => nil, "npntver"         => nil }}

   public aIvaUno    := {}
   public aIvaDos    := {}
   public aIvaTre    := {}

   public aTotIvm    := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }
   public aIvmUno    := aTotIvm[ 1 ]
   public aIvmDos    := aTotIvm[ 2 ]
   public aIvmTre    := aTotIvm[ 3 ]


   public nTotalDto  := 0

   public nTotArt    := 0
   public nTotCaj    := 0

   nImpIva           := { 0,0,0 }
   nImpReq           := { 0,0,0 }

   nRecno            := ( cAlbCliL )->( recno() )

   if aTmp <> nil
      nDtoUno        := aTmp[ 42 ]
      nDtoDos        := aTmp[ 44 ]
      dFecAlb        := aTmp[ 5 ]
      nDtoEsp        := aTmp[ 38 ]
      nDtoPP         := aTmp[ 40    ]
      nDtoCnt        := aTmp[ 45 ]
      nDtoRap        := aTmp[ 46 ]
      nDtoPub        := aTmp[ 47 ]
      nDtoPgo        := aTmp[ 48 ]
      nDtoPtf        := aTmp[ 49 ]
      lRecargo       := aTmp[ 50]
      nIvaMan        := aTmp[ 65 ]
      nManObr        := aTmp[ 66 ]
      cCodDiv        := aTmp[ 53 ]
      nVdvDiv        := aTmp[ 54 ]
      cCodPgo        := aTmp[ 23]
      lIvaInc        := aTmp[ 59 ]
      nDtoAtp        := aTmp[ 79 ]
      nSbrAtp        := aTmp[ 80 ]
      nKgsTrn        := aTmp[ 68 ]
      lOperarPntVer  := aTmp[ 94 ]
      nRegIva        := aTmp[ 60 ]
      bCondition     := {|| ( cAlbCliL )->( !eof() ) }
      ( cAlbCliL )->( dbGoTop() )
   else
      nDtoUno        := ( cAlbCliT )->nDtoUno
      nDtoDos        := ( cAlbCliT )->nDtoDos
      dFecAlb        := ( cAlbCliT )->dFecAlb
      nDtoEsp        := ( cAlbCliT )->nDtoEsp
      nDtoPP         := ( cAlbCliT )->nDpp
      nDtoCnt        := ( cAlbCliT )->nDtoCnt
      nDtoRap        := ( cAlbCliT )->nDtoRap
      nDtoPub        := ( cAlbCliT )->nDtoPub
      nDtoPgo        := ( cAlbCliT )->nDtoPgo
      nDtoPtf        := ( cAlbCliT )->nDtoPtf
      lRecargo       := ( cAlbCliT )->lRecargo
      nIvaMan        := ( cAlbCliT )->nIvaMan
      nManObr        := ( cAlbCliT )->nManObr
      cCodDiv        := ( cAlbCliT )->cDivAlb
      nVdvDiv        := ( cAlbCliT )->nVdvAlb
      cCodPgo        := ( cAlbCliT )->cCodPago
      lIvaInc        := ( cAlbCliT )->lIvaInc
      nDtoAtp        := ( cAlbCliT )->nDtoAtp
      nSbrAtp        := ( cAlbCliT )->nSbrAtp
      nKgsTrn        := ( cAlbCliT )->nKgsTrn
      lOperarPntVer  := ( cAlbCliT )->lOperPV
      nRegIva        := ( cAlbCliT )->nRegIva
      bCondition     := {|| ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->nNumAlb ) + ( cAlbCliL )->cSufAlb == cAlbaran .AND. ( cAlbCliL )->( !eof() ) }
      ( cAlbCliL )->( dbSeek( cAlbaran ) )
   endif





   cPorDiv           := cPorDiv( cCodDiv, cDiv )
   cPouDiv           := cPouDiv( cCodDiv, cDiv )
   nDouDiv           := nDouDiv( cCodDiv, cDiv )
   nRouDiv           := nRouDiv( cCodDiv, cDiv )
   nDpvDiv           := nDpvDiv( cCodDiv, cDiv )

   while Eval( bCondition )

      if lValLine( cAlbCliL )



         if ( lExcCnt == nil                                .OR. ( lExcCnt .AND. ( cAlbCliL )->nCtlStk <> 2 )    .OR. ( !lExcCnt .AND. ( cAlbCliL )->nCtlStk == 2 ) )

            if ( cAlbCliL )->lTotLin



               if ( cAlbCliL )->nPreUnit <> nTotalLin .OR. ( cAlbCliL )->nUniCaja <> nTotalUnd

                  if dbLock( cAlbCliL )
                     ( cAlbCliL )->nPreUnit := nTotalLin
                     ( cAlbCliL )->nUniCaja := nTotalUnd
                     ( cAlbCliL )->( dbUnLock() )
                  end

               end



               nTotalLin         := 0
               nTotalUnd         := 0

            else

               nTotalArt         := nTotLAlbCli( cAlbCliL, nDouDiv, nRouDiv, nil, .T., .F., .F. )
               nTotalTrn         := nTrnLAlbCli( cAlbCliL, nDouDiv )
               nTotalPnt         := if( lOperarPntVer, nPntLAlbCli( cAlbCliL, nDpvDiv ), 0 )
               nTotalIvm         := nTotIAlbCli( cAlbCliL, nDouDiv, nRouDiv )
               nTotCos           += nCosLAlbCli( cAlbCliL, nDouDiv, nDorDiv )
               nTotPes           += nPesLAlbCli( cAlbCliL )
               nDescuentosLineas += nTotDtoLAlbCli( cAlbCliL, nDouDiv )

               nTotalDtoLineal   += nDtoLinealAlbCli( cAlbCliL, nDouDiv )

               if aTmp <> nil
                  nTotAge        += nComLAlbCli( aTmp, cAlbCliL, nDouDiv, nRouDiv )
               else
                  nTotAge        += nComLAlbCli( cAlbCliT, cAlbCliL, nDouDiv, nRouDiv )
               end



               nTotalLin         += nTotalArt
               nTotalUnd         += nTotNAlbCli( cAlbCliL )

               nTotArt           += nTotNAlbCli( cAlbCliL )
               nTotCaj           += ( cAlbCliL )->nCanEnt



               if nTotalArt + nTotalIvm + nTotalTrn + nTotalPnt <> 0































                  oTotalDoc:setArrayImpuesto( ( cAlbCliL )->nIva, lRecargo, ( cAlbCliL )->nReq, nTotalArt, nTotalIvm, nTotalTrn, nTotalPnt )



                  if ( cAlbCliL )->nValImp <> 0

                     do case
                        case aTotIvm[ 1, 2 ] == nil .OR. aTotIvm[ 1, 2 ] == ( cAlbCliL )->nValImp
                           aTotIvm[ 1, 1 ]      += nTotNAlbCli( cAlbCliL ) * if( ( cAlbCliL )->lVolImp, NotCero( ( cAlbCliL )->nVolumen ), 1 )
                           aTotIvm[ 1, 2 ]      := ( cAlbCliL )->nValImp
                           aTotIvm[ 1, 3 ]      := aTotIvm[ 1, 1 ] * aTotIvm[ 1, 2 ]

                        case aTotIvm[ 2, 2 ] == nil .OR. aTotIvm[ 2, 2 ] == ( cAlbCliL )->nValImp
                           aTotIvm[ 2, 1 ]      += nTotNAlbCli( cAlbCliL ) * if( ( cAlbCliL )->lVolImp, NotCero( ( cAlbCliL )->nVolumen ), 1 )
                           aTotIvm[ 2, 2 ]      := ( cAlbCliL )->nValImp
                           aTotIvm[ 2, 3 ]      := aTotIvm[ 2, 1 ] * aTotIvm[ 2, 2 ]

                        case aTotIvm[ 3, 2 ] == nil .OR. aTotIvm[ 3, 2 ] == ( cAlbCliL )->nValImp
                           aTotIvm[ 3, 1 ]      += nTotNAlbCli( cAlbCliL ) * if( ( cAlbCliL )->lVolImp, NotCero( ( cAlbCliL )->nVolumen ), 1 )
                           aTotIvm[ 3, 2 ]      := ( cAlbCliL )->nValImp
                           aTotIvm[ 3, 3 ]      := aTotIvm[ 3, 1 ] * aTotIvm[ 3, 2 ]

                     end

                  end

               end

            end

         else



            nTotalLin   := 0
            nTotalUnd   := 0

         end

      end

      ( cAlbCliL )->( dbSkip() )

   end

   ( cAlbCliL )->( dbGoto( nRecno ) )



   aTotIva           := oTotalDoc:getArrayImpuesto()
   aTotIva           := aSort( aTotIva,,, {|x,y| hGet( x, "porcentajeiva" ) > hGet( y, "porcentajeiva" ) } )









   nTotBrt         := oTotalDoc:getTotalBruto()

   if nDtoEsp <> 0
      nTotDto := oTotalDoc:setDescuentoEspecial( nDtoEsp )
   end
   if nDtoPP <> 0
      nTotDPP := oTotalDoc:setDescuentoProntoPago( nDtoPP )
   end
   if nDtoUno <> 0
      nTotUno := oTotalDoc:setDescuentoUno( nDtoUno )
   end
   if nDtoDos <> 0
      nTotDos := oTotalDoc:setDescuentoDos( nDtoDos )
   end































































































































































































































   oTotalDoc:setImportesImpuesto( lIvaInc, nRegIva, nRouDiv )

   if lRecargo .AND. lIvaInc
      nTotBrt         := oTotalDoc:getTotalBruto()
   end



   if nManObr <> 0

      if lIvaInc
         nIvaGasto   := Round( nManObr / ( 100 / nIvaMan + 1 ), nRouDiv )
         nBaseGasto  := nManObr - nIvaGasto
      else
         nBaseGasto  := nManObr
         nIvaGasto   := Round( nManObr * nIvaMan / 100, nRouDiv )
      end

      oTotalDoc:setGastos( nIvaMan, nBaseGasto, nIvaGasto )



















   end




   nTotNet           := oTotalDoc:getTotalNeto()




   nTotIvm           := oTotalDoc:getTotalIvmh()




   nTotTrn           := oTotalDoc:getTotalTrn()




   nTotPnt           := oTotalDoc:getTotalPntVer()




   nTotIva           := oTotalDoc:getTotalIva()




   nTotReq           := oTotalDoc:getTotalRE()



   nTotImp           := Round( nTotIva + nTotReq + nTotIvm, nRouDiv )





   nTotRnt           := Round(         nTotNet - nManObr - nTotAge - nTotPnt - nTotAtp - nTotCos, nRouDiv )

   nPctRnt           := nRentabilidad( nTotNet - nManObr - nTotAge - nTotPnt,  nTotAtp,  nTotCos )



   if nKgsTrn <> 0
      nTotDif        := nKgsTrn - nTotPes
   else
      nTotDif        := 0
   end



   nTotAlb           := nTotNet + nTotImp

   if ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )
      nTotAlb        -= nTotalDtoLineal
   end

   if nTotNet == 0
      nPctRnt        := 0
   end





   nTotalDto         := nDescuentosLineas + nTotDto + nTotDpp + nTotUno + nTotDos + nTotAtp



   if cDivRet <> nil .AND. cDivRet <> cCodDiv
      nTotNet        := nCnv2Div( nTotNet, cCodDiv, cDivRet )
      nTotIvm        := nCnv2Div( nTotIvm, cCodDiv, cDivRet )
      nTotIva        := nCnv2Div( nTotIva, cCodDiv, cDivRet )
      nTotReq        := nCnv2Div( nTotReq, cCodDiv, cDivRet )
      nTotAlb        := nCnv2Div( nTotAlb, cCodDiv, cDivRet )
      nTotPnt        := nCnv2Div( nTotPnt, cCodDiv, cDivRet )
      nTotTrn        := nCnv2Div( nTotTrn, cCodDiv, cDivRet )
      cPorDiv        := cPorDiv( cDivRet, cDiv )
   end

RETURN ( if( lPic, Trans( if( lNeto, nTotNet, nTotAlb ), cPorDiv ), if( lNeto, nTotNet, nTotAlb ) ) )







FUNCTION nComLAlbCli( cAlbCliT, cAlbCliL, nDecOut, nDerOut )

   local nImp  := nImpLAlbCli( cAlbCliT, cAlbCliL, nDecOut, nDerOut, , .F., .T., .F., .F. )

RETURN ( Round( ( nImp * ( cAlbCliL )->nComAge / 100 ), nDerOut ) )



FUNCTION nImpUAlbCli( uAlbCliT, uAlbCliL, nDec, nVdv, lIva, cPouDiv )

   local nIva
   local lIvaInc
   local nCalculo

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;

   nCalculo          := nTotUAlbCli( uAlbCliL, nDec, nVdv )

   do case
   case ValType( uAlbCliT ) == "A"
      nCalculo       -= Round( nCalculo * uAlbCliT[ 38 ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbCliT[ 40    ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbCliT[ 42 ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbCliT[ 44 ]  / 100, nDec )

      lIvaInc        := uAlbCliT[ 59 ]

   case ValType( uAlbCliT ) == "C"
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoEsp / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDpp    / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoUno / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoDos / 100, nDec )

      lIvaInc        := ( uAlbCliT )->lIvaInc

   case ValType( uAlbCliT ) == "O"
      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoEsp / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbCliT:nDpp    / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoUno / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoDos / 100, nDec )

      lIvaInc        := uAlbCliT:lIvaInc

   end

   do case
   case IsArray( uAlbCliL )
      nIva           := uAlbCliL[ 11    ]

   case IsChar( uAlbCliL )
      nIva           := ( uAlbCliL )->nIva

   case IsObject( uAlbCliL )
      nIva           := uAlbCliL:nIva

   end

   if nIva <> 0
      if lIva
         if !lIvaInc
            nCalculo += Round( nCalculo * nIva / 100, nDec )
         end
      else
         if lIvaInc
            nCalculo -= Round( nCalculo / ( 100 / nIva  + 1 ), nDec )
         end
      end
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nImpLAlbCli( uAlbCliT, uAlbCliL, nDec, nRou, nVdv, lIva, lDto, lImpTrn, lPntVer, cPouDiv )

   local lIvaInc
   local nCalculo

   If( nDec == nil, nDec := 0, ) ;
   If( nRou == nil, nRou := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo          := nTotLAlbCli( uAlbCliL, nDec, nRou, nVdv, .T., lImpTrn, lPntVer )

   do case
   case ValType( uAlbCliT ) == "A"
      nCalculo       -= Round( nCalculo * uAlbCliT[ 38 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbCliT[ 40    ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbCliT[ 42 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbCliT[ 44 ]  / 100, nRou )

      lIvaInc        := uAlbCliT[ 59 ]

   case ValType( uAlbCliT ) == "C"
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoEsp / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDpp    / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoUno / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoDos / 100, nRou )

      lIvaInc        := ( uAlbCliT )->lIvaInc

   case ValType( uAlbCliT ) == "O"
      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoEsp / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbCliT:nDpp    / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoUno / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoDos / 100, nRou )

      lIvaInc        := uAlbCliT:lIvaInc

   end

   if ( uAlbCliL )->nIva <> 0
      if lIva
         if !lIvaInc
            nCalculo += Round( nCalculo * ( uAlbCliL )->nIva / 100, nRou )
         end
      else
         if lIvaInc
            nCalculo -= Round( nCalculo / ( 100 / ( uAlbCliL )->nIva  + 1 ), nRou )
         end
      end
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nPesLAlbCli( cAlbCliL )

   local nCalculo

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;

   if !( cAlbCliL )->lTotLin
      nCalculo       := Abs( nTotNAlbCli( cAlbCliL ) ) * ( cAlbCliL )->nPesoKg
   end

RETURN ( nCalculo )



FUNCTION nCosLAlbCli( dbfLine, nDec, nRec, nVdv, cPouDiv )

   local nCalculo       := 0

   If( nDec == nil, nDec := 0, ) ;
   If( nRec == nil, nRec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if !( dbfLine )->lKitChl
      nCalculo          := nTotNAlbCli( dbfLine )
      nCalculo          *= ( dbfLine )->nCosDiv
   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

   nCalculo             := Round( nCalculo, nRec )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )







FUNCTION nTotIAlbCli( dbfLin, nDec, nRouDec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( dbfLin == nil, dbfLin := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := 0, ) ;
   If( nRouDec == nil, nRouDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if !( dbfLin )->lTotLin





      nCalculo       := Round( ( dbfLin )->nValImp, nDec )





      nCalculo       *= nTotNAlbCli( dbfLin )

         if ( dbfLin )->LVOLIMP
            nCalculo *= NotCero( ( dbfLin )->nVolumen )
         end

      nCalculo       := Round( nCalculo / nVdv, nRouDec )

   end

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nTrnLAlbCli( dbfLin, nDec, nRou, nVdv )

   local nImpTrn

   If( dbfLin == nil, dbfLin := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := 2, ) ;
   If( nRou == nil, nRou := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;





   nImpTrn           := nTrnUAlbCli( dbfLin, nDec ) * nTotNAlbCli( dbfLin )

   IF nVdv <> 0
      nImpTrn        := nImpTrn / nVdv
   end

RETURN ( Round( nImpTrn, nRou ) )



FUNCTION nTrnUAlbCli( dbfLin, nDec, nVdv )

   local nCalculo

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := ( dbfLin )->nImpTrn

   IF nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )







FUNCTION nPagAlbCli( cNumAlb, cAlbCliP, cDiv, cDivRet, lPic )

   public nTotPag       := 0

RETURN ( nTotPag )



function nEntAlbCli( uAlbCliP, cDbfDiv, cDivRet, lPic )

   local nTotRec := 0

RETURN ( nTotRec )



FUNCTION nDtoUAlbCli( dbfLin, nDec, nVdv )

   local nCalculo := ( dbfLin )->nDtoDiv

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   IF nVdv <> 0
      nCalculo    := ( dbfLin )->nDtoDiv / nVdv
   end

RETURN ( round( nCalculo, nDec ) )



function nTotFAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo := 0

   nCalculo       += nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )
   nCalculo       += nIvaLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

return ( nCalculo )



FUNCTION lFacAlbCli( cAlbCli, uAlbCliT )

   local lFacAlb  := .F.

   if ValType( uAlbCliT ) == "C"

      if ( uAlbCliT )->( dbSeek( cAlbCli ) )
         lFacAlb  := lFacturado( uAlbCliT )
      end

   else

      if uAlbCliT:Seek( cAlbCli )
         lFacAlb  := lFacturado( uAlbCliT )
      end

   end

RETURN ( lFacAlb )



FUNCTION SetFacturadoAlbaranCliente( lFacturado, oBrw, cAlbCliT, cAlbCliL, cAlbCliS, cNumFac )

   local nOrd
   local nRec
   local nRecHead             := ( cAlbCliT )->( Recno() )

   If( lFacturado == nil, lFacturado := .F., ) ;
   If( cNumFac == nil, cNumFac := Space( 12 ), ) ;
   If( cAlbCliT == nil, cAlbCliT := D():Get( "AlbCliT", nView ), ) ;
   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;
   If( cAlbCliS == nil, cAlbCliS := D():Get( "AlbCliS", nView ), ) ;

   if oBrw <> nil

      for each nRec in ( oBrw:aSelected )

         nRecHead             := nRec

         ( cAlbCliT )->( dbGoTo( nRec ) )





         if dbLock( cAlbCliT )
            ( cAlbCliT )->lFacturado := lFacturado
            ( cAlbCliT )->nFacturado := if( lFacturado, 3, 1 )
            ( cAlbCliT )->cNumFac    := cNumFac
            ( cAlbCliT )->( dbUnLock() )
         end





         nOrd                 := ( cAlbCliL )->( OrdSetFocus( "nNumAlb" ) )

         if ( cAlbCliL )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )

            while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->nNumAlb ) + ( cAlbCliL )->cSufAlb .AND. !( cAlbCliL )->( Eof() )

               if dbLock( cAlbCliL )
                  ( cAlbCliL )->lFacturado := lFacturado
                  ( cAlbCliL )->( dbUnlock() )
                end

               ( cAlbCliL )->( dbSkip() )

            end

         end

         ( cAlbCliL )->( OrdSetFocus( nOrd ) )





         nOrd                 := ( cAlbCliS )->( OrdSetFocus( "nNumAlb" ) )

         if ( cAlbCliS )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )

            while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliS )->cSerAlb + Str( ( cAlbCliS )->nNumAlb ) + ( cAlbCliS )->cSufAlb .AND. !( cAlbCliS )->( Eof() )

               if dbLock( cAlbCliS )
                  ( cAlbCliS )->lFacturado := lFacturado
                  ( cAlbCliS )->( dbUnlock() )
               end

               ( cAlbCliS )->( dbSkip() )

            end

         end

         ( cAlbCliS )->( OrdSetFocus( nOrd ) )

      next

   else





      if dbLock( cAlbCliT )
         ( cAlbCliT )->lFacturado := lFacturado
         ( cAlbCliT )->nFacturado := if( lFacturado, 3, 1 )
         ( cAlbCliT )->cNumFac    := cNumFac
         ( cAlbCliT )->( dbUnLock() )
      end





      nOrd                    := ( cAlbCliL )->( OrdSetFocus( "nNumAlb" ) )

      if ( cAlbCliL )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )

         while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->nNumAlb ) + ( cAlbCliL )->cSufAlb .AND. !( cAlbCliL )->( Eof() )

            if dbLock( cAlbCliL )
               ( cAlbCliL )->lFacturado := lFacturado
               ( cAlbCliL )->( dbUnlock() )
             end

            ( cAlbCliL )->( dbSkip() )

         end

      end

      ( cAlbCliL )->( OrdSetFocus( nOrd ) )





      nOrd                   := ( cAlbCliS )->( OrdSetFocus( "nNumAlb" ) )

      if ( cAlbCliS )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )

         while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliS )->cSerAlb + Str( ( cAlbCliS )->nNumAlb ) + ( cAlbCliS )->cSufAlb .AND. !( cAlbCliS )->( Eof() )

            if dbLock( cAlbCliS )
               ( cAlbCliS )->lFacturado := lFacturado
               ( cAlbCliS )->( dbUnlock() )
             end

            ( cAlbCliS )->( dbSkip() )

         end

      end

      ( cAlbCliS )->( OrdSetFocus( nOrd ) )

   end





   ( cAlbCliT )->( dbGoTo( nRecHead ) )





   if dbDialogLock( cAlbCliT )
      ( cAlbCliT )->lSndDoc  := .T.
      ( cAlbCliT )->dFecCre  := Date()
      ( cAlbCliT )->cTimCre  := Time()
      ( cAlbCliT )->( dbUnlock() )
   end

   if oBrw <> nil
      oBrw:Refresh()
      oBrw:SetFocus()
   end

RETURN NIL



Function nTotDtoLAlbCli( dbfLin, nDec, nVdv, cPorDiv )

   local nCalculo

   If( dbfLin == nil, dbfLin := D():Get( "AlbCliL", nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nDtoLAlbCli( dbfLin, nDec, nVdv ) * nTotNAlbCli( dbfLin )

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

   nCalculo          := Round( nCalculo, nDec )

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



Function dJuliano4AlbCli( cAlbCliL )

   local cPrefijo
   local cLote

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;

   cLote             := ( cAlbCliL )->cLote

   cPrefijo          := Substr( ( cAlbCliL )->cLote, 1, 1 )

   if Val( cPrefijo ) == 0
      cLote          := Substr( ( cAlbCliL )->cLote, 2 )
   end

RETURN ( AddMonth( JulianoToDate( Year( ( cAlbCliL )->dFecAlb ), Val( cLote ) ), 4 ) )



Function dJulianoAlbCli( cAlbCliL )

   local cPrefijo
   local cLote

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;

   cLote             := ( cAlbCliL )->cLote

   cPrefijo          := Substr( ( cAlbCliL )->cLote, 1, 1 )

   if Val( cPrefijo ) == 0
      cLote          := Substr( ( cAlbCliL )->cLote, 2 )
   end

RETURN ( AddMonth( JulianoToDate( Year( ( cAlbCliL )->dFecAlb ), Val( cLote ) ), 6 ) )



Function dJulianoAlbAnio( cAlbCliL )

   local cPrefijo
   local cLote

   If( cAlbCliL == nil, cAlbCliL := D():Get( "AlbCliL", nView ), ) ;

   cLote             := ( cAlbCliL )->cLote

   cPrefijo          := Substr( ( cAlbCliL )->cLote, 1, 1 )

   if Val( cPrefijo ) == 0
      cLote          := Substr( ( cAlbCliL )->cLote, 2 )
   end

RETURN ( AddMonth( JulianoToDate( Year( ( cAlbCliL )->dFecAlb ), Val( cLote ) ), 8 ) )



Function cDireccionSAT()

   local dbfObras
   local cDireccion  := ""

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ObrasT.Dbf" ), ( cCheckArea( "Obras", @dbfObras ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   if ( dbfObras )->( dbSeek( ( dbfAlbCliT )->cCodCli + ( dbfAlbCliT )->cCodObr ) )
      cDireccion     := ( dbfObras )->cNomObr
   end

   ( dbfObras )->( dbCloseArea() )

Return ( cDireccion )



function lFacturado( cAlbCliT )

   local lReturn  := .F.

   do case
      case ValType( cAlbCliT ) == "A"

         lReturn  := cAlbCliT[ 103 ] == 3

      case ValType( cAlbCliT ) == "C"

         lReturn  := ( cAlbCliT )->nFacturado == 3

      case ValType( cAlbCliT ) == "O"

         lReturn  := cAlbCliT:nFacturado == 3

   end

Return ( lReturn )



FUNCTION nTotalLineaAlbaranCliente( hHash, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   if hGet( hHash, "LineaTotal" )

      nCalculo       := nTotUAlbCli( hHash )

   else





      nCalculo       := nTotUAlbCli( hHash )





      if lDto

         nCalculo    -= Round( hGet( hHash, "DescuentoLineal" ) , nDec )

         if hGet( hHash, "DescuentoPorcentual" ) <> 0
            nCalculo -= nCalculo * hGet( hHash, "DescuentoPorcentual" ) / 100
         end

         if hGet( hHash, "DescuentoPromocion" ) <> 0
            nCalculo -= nCalculo * hGet( hHash, "DescuentoPromocion" ) / 100
         end

      end





      if lPntVer
         nCalculo    += hGet( hHash, "PuntoVerde" )
      end





      if lImpTrn
         nCalculo    += hGet( hHash, "Portes" )
      end





      nCalculo       *= nTotNAlbCli( hHash )





      if nRou <> nil
         nCalculo    := Round( nCalculo, nRou )
      end

   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



Static Function cFormatoAlbaranesClientes( cSerie )

   local cFormato

   If( cSerie == nil, cSerie := ( D():AlbaranesClientes( nView ) )->cSerAlb, ) ;

   cFormato          := cFormatoDocumento( cSerie, "nAlbCli", D():Contadores( nView ) )

   if empty( cFormato )
      cFormato       := cFirstDoc( "AC", D():Documentos( nView ) )
   end

Return ( cFormato )



Static Function changeFieldLine( oCol, uNewValue, nKey, aTmp, cFieldToChange )

   If( cFieldToChange == nil, cFieldToChange := "nPreUnit", ) ;

   if isNum( nKey ) .AND. ( nKey <> 27 ) .AND. !isNil( uNewValue )

      ( dbfTmpLin )->( fieldput( fieldpos( cFieldToChange ), uNewValue ) )

      recalculaTotal( aTmp )

   end

Return .T.



Function nSaldoAnteriorAlbCli4( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():AlbaranesClientes( nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( nView ) )->nNumAlb ) + ( D():AlbaranesClientes( nView ) )->cSufAlb, ) ;

Return oStock:nSaldoAntAlb( Padr( "4", 18 ), cNumDoc )



Function nSaldoAnteriorAlbCli8( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():AlbaranesClientes( nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( nView ) )->nNumAlb ) + ( D():AlbaranesClientes( nView ) )->cSufAlb, ) ;

Return oStock:nSaldoAntAlb( Padr( "8", 18 ), cNumDoc )



Function nSaldoAnteriorAlbCli16( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():AlbaranesClientes( nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( nView ) )->nNumAlb ) + ( D():AlbaranesClientes( nView ) )->cSufAlb, ) ;

Return oStock:nSaldoAntAlb( Padr( "16", 18 ), cNumDoc )



Function nSaldoDocumentoAlbCli4( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():AlbaranesClientes( nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( nView ) )->nNumAlb ) + ( D():AlbaranesClientes( nView ) )->cSufAlb, ) ;

Return oStock:nSaldoDocAlb( Padr("4", 18 ), cNumDoc)



Function nSaldoDocumentoAlbCli8( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():AlbaranesClientes( nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( nView ) )->nNumAlb ) + ( D():AlbaranesClientes( nView ) )->cSufAlb, ) ;

Return oStock:nSaldoDocAlb( Padr("8", 18 ), cNumDoc)



Function nSaldoDocumentoAlbCli16( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():AlbaranesClientes( nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( nView ) )->nNumAlb ) + ( D():AlbaranesClientes( nView ) )->cSufAlb, ) ;

Return oStock:nSaldoDocAlb( Padr("16", 18 ), cNumDoc )



Function nTotalSaldoAlbCli4( cCodCli, dFecAlb )

   If( cCodCli == nil, cCodCli := ( D():AlbaranesClientes( nView ) )->cCodCli, ) ;
   If( dFecAlb == nil, dFecAlb := ( D():AlbaranesClientes( nView ) )->dFecAlb, ) ;

Return oStock:nTotalSaldo( Padr("4", 18 ), cCodCli, dFecAlb )



Function nTotalSaldoAlbCli8( cCodCli, dFecAlb )

   If( cCodCli == nil, cCodCli := ( D():AlbaranesClientes( nView ) )->cCodCli, ) ;
   If( dFecAlb == nil, dFecAlb := ( D():AlbaranesClientes( nView ) )->dFecAlb, ) ;

Return oStock:nTotalSaldo( Padr("8", 18 ), cCodCli, dFecAlb )



Function nTotalSaldoAlbCli16( cCodCli, dFecAlb )

   If( cCodCli == nil, cCodCli := ( D():AlbaranesClientes( nView ) )->cCodCli, ) ;
   If( dFecAlb == nil, dFecAlb := ( D():AlbaranesClientes( nView ) )->dFecAlb, ) ;

Return oStock:nTotalSaldo( Padr("16", 18 ), cCodCli, dFecAlb )



Function DesignLabelAlbaranClientes( oFr, cDoc )

   local oLabel
   local lOpenFiles  := empty( nView )

   if lOpenFiles .AND. !Openfiles()
      Return .F.
   endif

   oLabel            := TLabelGeneratorAlbaranClientes():New( nView )



   oLabel:createTempLabelReport()
   oLabel:loadTempLabelReport()
   oLabel:dataLabel( oFr )



   if !empty( ( cDoc )->mReport )
      oFr:LoadFromBlob( ( cDoc )->( Select() ), "mReport")
   else
      oFr:AddPage(         "MainPage" )
      oFr:AddBand(         "MasterData",  "MainPage",       6 )
      oFr:SetProperty(     "MasterData",  "Top",            200 )
      oFr:SetProperty(     "MasterData",  "Height",         100 )
      oFr:SetObjProperty(  "MasterData",  "DataSet",        "Lineas de albaranes" )
   end

   oFr:DesignReport()
   oFr:DestroyFr()

   oLabel:DestroyTempReport()
   oLabel:End()

   if lOpenFiles
      closeFiles()
   end

Return .T.



Function getExtraFieldAlbaranCliente( cFieldName )

Return ( getExtraField( cFieldName, oDetCamposExtra, D():AlbaranesClientesId( nView ) ) )



Static Function lChangeRegIva( aTmp )

   lImpuestos     := ( aTmp[ 60 ] <= 1 )

   if !empty( oImpuestos )
      oImpuestos:Refresh()
   end

return ( .T. )



Function nombrePrimeraPropiedadAlbaranesClientesLineas()

Return ( nombrePropiedad( ( D():AlbaranesClientesLineas( nView ) )->cCodPr1, ( D():AlbaranesClientesLineas( nView ) )->cValPr1, nView ) )



Function nombreSegundaPropiedadAlbaranesClientesLineas()

Return ( nombrePropiedad( ( D():AlbaranesClientesLineas( nView ) )->cCodPr2, ( D():AlbaranesClientesLineas( nView ) )->cValPr2, nView ) )



Function EnvaseArticuloAlbaranesClientesLineas( cCodCli, cCodArt )

   local nRec     := ( D():Atipicas( nView ) )->( Recno() )
   local nOrdAnt  := ( D():Atipicas( nView ) )->( OrdSetFocus( "cCliArt" ) )
   local cCodEnv  := ""

   if ( D():Atipicas( nView ) )->( dbSeek( Padr( cCodCli, 12 ) + Padr( cCodArt, 18 ) + Space( 80 ) ) ) .AND. !Empty( ( D():Atipicas( nView ) )->cCodEnv )
      cCodEnv  := ( D():Atipicas( nView ) )->cCodEnv
   else
      cCodEnv  := RetFld( Padr( cCodArt, 18 ), D():Articulos( nView ), "cCodFra", "Codigo" )
   end

   ( D():Atipicas( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():Atipicas( nView ) )->( dbGoTo( nRec ) )

Return ( cCodEnv )



Static Function importarLineasPedidosClientes( aTmp, aGet, oBrwLin )

   local oLine
   local cCodigoCliente
   local cNombreCliente
   local oConversionPedidosClientes

   cCodigoCliente                 := aGet[ 6 ]:varGet()
   cNombreCliente                 := aGet[ 9 ]:varGet()

   if empty( cCodigoCliente )
      msgStop( "Es necesario codificar un cliente.", "Importar pedidos" )
      return .T.
   end

   oConversionPedidosClientes    := TConversionPedidosClientes():New( nView, oStock )

   if empty( oConversionPedidosClientes )
      Return .F.
   end

   oConversionPedidosClientes:setCodigoCliente( cCodigoCliente )

   oConversionPedidosClientes:setTitle( "Importando pedidos de " + alltrim( cCodigoCliente ) + " - " + alltrim( cNombreCliente ) )

   if oConversionPedidosClientes:Dialog()

      appendLineasPedidosCliente( oConversionPedidosClientes:oDocumentLines:aLines, oBrwLin )

   end

   recalculaTotal( aTmp )

   oBrwLin:refresh()

Return .T.



Static Function appendLineasPedidosCliente( aLines )

   local oLine

   for each oLine in aLines

      if oLine:isSelectLine()

         oLine:setValue( "NumeroLinea",         nLastNum( dbfTmpLin ) )
         oLine:setValue( "PosicionImpresion",   nLastNum( dbfTmpLin, "nPosPrint" ) )

         D():appendHashRecordInWorkarea( oLine:hDictionary, "AlbCliL", dbfTmpLin )

         if aScan( aNumPed, oLine:getvalue( "NumeroPedido" ) ) == 0
            aAdd( aNumPed, oLine:getvalue( "NumeroPedido" ) )
         end

      end

   next

Return .T.



Static Function importarArticulosScaner()

   local memoArticulos

   memoArticulos  := dialogArticulosScaner()

   if memoArticulos <> nil
      msgstop( memoArticulos, "procesar")
   end

Return nil



static Function menuEdtDet( oCodArt, oDlg, lOferta, nIdLin )

   If( lOferta == nil, lOferta := .F., ) ;

   oDetMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )


      MenuAddItem( "&1. Rotor  ",, .F.,,,, "Rotor16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra", .F.,, {|oMenuItem|( oLinDetCamposExtra:Play( nIdLin ) )},, "GC_FORM_PLUS2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&2. Modificar artículo", "Modificar la ficha del artículo", .F.,, {|oMenuItem|( EdtArticulo( oCodArt:VarGet() ) )},, "gc_object_cube_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&3. Informe de artículo", "Abrir el informe del artículo", .F.,, {|oMenuItem|( if( RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() ), msgStop( "No tiene permiso para ver los precios de costo" ), InfArticulo( oCodArt:VarGet() ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&4. Informe de stock", "Abrir el informe del stock", .F.,, {|oMenuItem|( InfStock( oCodArt:VarGet() ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oDetMenu )

Return ( oDetMenu )



Static Function stringExport( dbfTmpLin )

   local stringExport   := alltrim( ( dbfTmpLin )->cRef ) + ","
   stringExport         += alltrim( strtran( trans( nTotNAlbCli( dbfTmpLin ), cPicUnd ), ",", "." ) ) + ","
   stringExport         += alltrim( ( dbfTmpLin )->cCodPr1 ) + ","
   stringExport         += alltrim( ( dbfTmpLin )->cValPr1 ) + ","
   stringExport         += alltrim( ( dbfTmpLin )->cCodPr2 ) + ","
   stringExport         += alltrim( ( dbfTmpLin )->cValPr2 ) + Chr(13)+Chr(10)

Return ( stringExport )



FUNCTION hStockBufferAlbCli( aTmp )

   local hBuffer := {=>}

   do case
      case hb_isArray( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
         hset( hBuffer, "lote", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "clote" ) ) ] ) )
         hset( hBuffer, "bultos_articulo", aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "nBultos" ) ) ] )
         hset( hBuffer, "cajas_articulo", aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "nCanEnt" ) ) ] )
         hset( hBuffer, "unidades_articulo", nTotNAlbCli( aTmp ) )
         hset( hBuffer, "fecha", aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "dFecAlb" ) ) ] )
         hset( hBuffer, "hora", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "tFecAlb" ) ) ] ) )

      case hb_isChar( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmLin ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
         hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )
         hset( hBuffer, "bultos_articulo", ( aTmp )->nBultos )
         hset( hBuffer, "cajas_articulo", ( aTmp )->nCanEnt )
         hset( hBuffer, "unidades_articulo", nTotNAlbCli( aTmp ) )
         hset( hBuffer, "fecha", ( aTmp )->dFecAlb )
         hset( hBuffer, "hora", AllTrim( ( aTmp )->tFecAlb ) )

      case hb_isObject( aTmp )

         if aTmp:ClassName == "DICTIONARYDOCUMENTLINE"

            hset( hBuffer, "codigo_articulo", AllTrim( aTmp:getValue( "Articulo" ) ) )
            hset( hBuffer, "codigo_almacen_entrada", "" )
            hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp:getValue( "Almacen" ) ) )
            hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp:getValue( "CodigoPropiedad1" ) ) )
            hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp:getValue( "ValorPropiedad1" ) ) )
            hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp:getValue( "CodigoPropiedad2" ) ) )
            hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp:getValue( "ValorPropiedad2" ) ) )
            hset( hBuffer, "lote", AllTrim( aTmp:getValue( "Lote" ) ) )
            if !Empty( aTmp:getValue( "Bultos" ) )
               hset( hBuffer, "bultos_articulo", aTmp:getValue( "Bultos" ) )
            else
               hset( hBuffer, "bultos_articulo", 1 )
            end
            hset( hBuffer, "cajas_articulo", aTmp:getValue( "Cajas" ) )
            hset( hBuffer, "unidades_articulo", NotCaja( aTmp:getValue( "Cajas" ) ) * aTmp:getValue( "Unidades" ) )
            hset( hBuffer, "fecha", aTmp:getValue( "Fecha" ) )
            hset( hBuffer, "hora", AllTrim( aTmp:getValue( "Hora" ) ) )

         end


   end

RETURN ( hBuffer )



FUNCTION hStockBufferAlbCliEntregado( aTmp )

   local hBuffer := {=>}

   do case
      case hb_isArray( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
         hset( hBuffer, "lote", AllTrim( aTmp[ ( D():AlbaranesClientesLineas( nView ) )->( fieldpos( "cLote" ) ) ] ) )
         hset( hBuffer, "pendiente_entregar", nTotNAlbCli( aTmp ) )

      case hb_isChar( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmLin ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
         hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )
         hset( hBuffer, "pendiente_entregar", nTotNAlbCli( aTmp ) )

   end

RETURN ( hBuffer )



Static Function LoadTrans( aTmp, oGetCod, oGetKgs, oSayTrn )

   local uValor   := oGetCod:VarGet()

   if empty( uValor )

      oSayTrn:cText( "" )
      oGetKgs:cText( 0 )

   else

      if oTrans:oDbf:SeekInOrd( uValor, "cCodTrn" )
         oGetCod:cText( uValor )
         oSayTrn:cText( oTrans:oDbf:cNomTrn )
         oGetKgs:cText( oTrans:oDbf:nKgsTrn )
      else
         msgStop( "Código de transportista no encontrado." )
         Return .F.
      end

   end

   RecalculaTotal( aTmp )

Return .T.
