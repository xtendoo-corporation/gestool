#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 218 ".\.\Prg\Albprov.prg"
memvar cDbf
memvar cDbfCol
memvar cDbfPrv
memvar cDbfPgo
memvar cDbfIva
memvar cDbfDiv
memvar cDbfAlm
memvar cDbfArt
memvar cDbfKit
memvar cDbfPro
memvar cDbfTblPro
memvar aTotIva
memvar aIvaUno
memvar aIvaDos
memvar aIvaTre
memvar nTotBrt
memvar nTotDto
memvar nTotDpp
memvar nTotNet
memvar nTotIva
memvar nTotIvm
memvar nTotReq
memvar nTotAlb
memvar nTotImp
memvar nTotUno
memvar nTotDos

memvar aImpVto
memvar aDatVto
memvar cPicUndAlb
memvar cPinDivAlb
memvar cPirDivAlb
memvar nDinDivAlb
memvar nDirDivAlb
memvar nVdvDivAlb
memvar nPagina
memvar lEnd

static oWndBrw
static oInf
static nView
static oGetTot
static dbfTmp
static dbfTmpInc
static dbfTmpDoc
static dbfTmpSer
static tmpAlbPrvL
static tmpAlbPrvS
static filAlbPrvL
static oBandera
static cNewFile
static cTmpInc
static cTmpDoc
static cTmpSer
static cPinDiv
static cPirDiv
static cPicUnd
static nDinDiv
static nDirDiv
static oGetNet
static oGetIva
static oGetReq
static oGetIvm
static oUsr
static cUsr
static nOldEst
static oBrwIva

static oStock
static TComercio

static oDetMenu

static oNewImp
static oFont
static oMenu
static oDetCamposExtra
static oLinDetCamposExtra
static oCentroCoste
static nNumAlb
static aNumAlb          := {}
static nGetNeto         := 0
static nGetIva          := 0
static nGetReq          := 0
static nLabels          := 1
static aAlbaranes       := {}

static cOldCodCli       := ""
static cOldCodArt       := ""
static cOldPrpArt       := ""
static cOldUndMed       := ""

static lOpenFiles       := .F.
static lExternal        := .F.

static oMailing

static bEdtRec          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodPed | EdtRec( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodPed ) }
static bEdtDet          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlbaranProveedor | EdtDet( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlbaranProveedor ) }
static bEdtInc          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin | EdtInc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtDoc          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin | EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin ) }

static cFiltroUsuario   := ""
static cInforme

static oNumerosSerie
static oBtnNumerosSerie

static lIncidencia      := .F.

static Counter

static oTipoCtrCoste
static cTipoCtrCoste
static aTipoCtrCoste   := { "Centro de coste", "Proveedor", "Agente", "Cliente" }

static oGetCelda
static cGetCelda



Static FUNCTION initPublics()

   public nTotAlb       := 0
   public nTotBrt       := 0
   public nTotDto       := 0
   public nTotDPP       := 0
   public nTotUno       := 0
   public nTotDos       := 0
   public nTotNet       := 0
   public nTotIva       := 0
   public nTotReq       := 0
   public nTotImp       := 0
   public nTotIvm       := 0
   public aTotIva       := { { 0,0,nil,0,0,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0,0,0 } }
   public aIvaUno       := aTotIva[ 1 ]
   public aIvaDos       := aTotIva[ 2 ]
   public aIvaTre       := aTotIva[ 3 ]
   public aImpVto       := {}
   public aDatVto       := {}

RETURN nil



FUNCTION AlbPrv( oMenuItem, oWnd, cCodPrv, cCodArt, cCodPed )

   local oSnd
   local oRpl
   local oPrv
   local oImp
   local oDel
   local oPdf
   local oMail
   local oRotor
   local oScript
   local nLevel
   local oBtnEur
   local lEuro          := .F.

   If( oMenuItem == nil, oMenuItem := "albaranes_de_proveedores", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;
   If( cCodPrv == nil, cCodPrv := "", ) ;
   If( cCodArt == nil, cCodArt := "", ) ;
   If( cCodPed == nil, cCodPed := "", ) ;





   nLevel            := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .F.
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      RETURN .F.
   end





   DisableAcceso()


















   oWndBrw := TShell():New( 0, 0, 22, 80, "Albaranes de proveedores",, oWnd,,, .F.,,, ( D():AlbaranesProveedores( nView ) ),,,,, {"Número", "Fecha", "Código", "Nombre proveedor", "Su albarán"}, {||( WinAppRec( oWndBrw:oBrw, bEdtRec, D():AlbaranesProveedores( nView ), cCodPrv, cCodArt, cCodPed ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdtRec, D():AlbaranesProveedores( nView ), cCodPrv, cCodArt, cCodPed ) )}, {||( WinDelRec( oWndBrw:oBrw, D():AlbaranesProveedores( nView ), {|| QuiAlbPrv() } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdtRec, D():AlbaranesProveedores( nView ), cCodPrv, cCodArt, cCodPed ) )}, nil, nLevel, "gc_document_empty_businessman_16", ( 0 + ( 114 * 256 ) + ( 198 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEdtRec, D():AlbaranesProveedores( nView ) ) )}, .T. )

     oWndBrw:lFechado     := .T.

     oWndBrw:bChgIndex    := {|| if( RolesModel():getRolFiltrarVentas( Auth():rolUuid() ), CreateFastFilter( cFiltroUsuario, D():AlbaranesProveedores( nView ), .F., , cFiltroUsuario ), CreateFastFilter( "", D():AlbaranesProveedores( nView ), .F. ) ) }

     oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->lCloAlb }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_lock2_12", "Nil16" } )
         :AddResource( "gc_lock2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "gc_mail2_12", "Nil16" } )
         :AddResource( "gc_mail2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Facturado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| ( D():AlbaranesProveedores( nView ) )->nFacturado }
         :nWidth           := 20
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_trafficlight_on_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Incidencia"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| nEstadoIncidencia( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_document_information_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Impreso"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->lImprimido }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_printer2_12", "Nil16" } )
         :AddResource( "gc_printer2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumAlb"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cSerAlb + "/" + Alltrim( Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Su albarán"
         :cSortOrder       := "cSuAlb"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cSuAlb }
         :nWidth           := 60
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cSufAlb }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| Trans( ( D():AlbaranesProveedores( nView ) )->cTurAlb, "######" ) }
         :nWidth           := 60
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dDesFec"
         :bEditValue       := {|| Dtoc( ( D():AlbaranesProveedores( nView ) )->dFecAlb ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Hora"
         :bEditValue       := {|| trans( ( D():AlbaranesProveedores( nView ) )->tFecAlb, "@R 99:99:99") }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cCodCaj }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Usuario"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cCodUsr }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Entrada"
         :cSortOrder       := "dFecEnt"
         :bEditValue       := {|| Dtoc( ( D():AlbaranesProveedores( nView ) )->dFecEnt ) }
         :nWidth           := 80
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodPrv"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cCodPrv }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre proveedor"
         :cSortOrder       := "cNomPrv"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cNomPrv }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| AllTrim( ( D():AlbaranesProveedores( nView ) )->cCodAlm )  + " - " + AlmacenesModel():getNombre( ( D():AlbaranesProveedores( nView ) )->cCodAlm ) }
         :nWidth           := 180
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->nTotNet }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->nTotIva }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "R.E."
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->nTotReq }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->nTotAlb }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( D():AlbaranesProveedores( nView ) )->cDivAlb ), D():Divisas( nView ) ) }
         :nWidth           := 30
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total unidades"
         :bEditValue       := {|| nTotalUnd( D():AlbaranesProveedoresId( nView ), cPicUnd ) }
         :nWidth           := 80
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Centro de coste"
         :bEditValue       := {|| ( D():AlbaranesProveedores( nView ) )->cCtrCoste }
         :nWidth           := 50
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Creación/Modificación"
         :bEditValue       := {|| dtoc( ( D():AlbaranesProveedores( nView ) )->dFecCre ) + space( 1 ) + ( D():AlbaranesProveedores( nView ) )->cTimCre }
         :nWidth           := 120
         :lHide            := .T.
      end

      oDetCamposExtra:addCamposExtra( oWndBrw )

      oWndBrw:cHtmlHelp    := "Albaran de proveedor"

      oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()








   oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







   oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






   oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






   oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,, 4,, .F. )







   oDel := oWndBrw:NewAt( "Del",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )







   oPrv := oWndBrw:NewAt( "Imp",,, {||( GenAlbPrv( 1 ), oWndBrw:Refresh() )}, "(I)mprimir", "I",, {|This|This:Toggle()}, 32,, .F. )

      if !Empty( oPrv )
         lGenAlb( oWndBrw:oBrw, oPrv, 1 )
      end






   oWndBrw:NewAt( "GC_PRINTER2_",,, {||( PrnSerie( oWndBrw ), oWndBrw:Refresh() )}, "Imp(r)imir series", "R",,, 32,, .F. )







   oImp := oWndBrw:NewAt( "Prev1",,, {||( GenAlbPrv( 2 ), oWndBrw:Refresh() )}, "(P)revisualizar", "P",, {|This|This:Toggle()}, 32,, .F. )

      if !Empty( oImp )
         lGenAlb( oWndBrw:oBrw, oImp, 2 )
      end







   oPdf := oWndBrw:NewAt( "DocLock",,, {||( GenAlbPrv( 3 ) )}, "Pd(f)", "F",, {|This|This:Toggle()}, 32,, .F. )

      if !Empty( oPdf )
         lGenAlb( oWndBrw:oBrw, oPdf, 3 )
      end






   oMail := oWndBrw:NewAt( "GC_MAIL_EARTH_",,, {||( oMailing:documentsDialog( oWndBrw:oBrw:aSelected ) )}, "Correo electrónico",,, {|This|This:Toggle()}, 32,, .F. )






   oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TLabelGeneratorAlbaranProveedores():New( nView, oNewImp ):Dialog() )}, "Eti(q)uetas", "Q",,, 32,, .F. )

   if RolesModel():getRolCambiarEstado( Auth():rolUuid() )






      oWndBrw:NewAt( "ChgState",,, {||( SetFacturadoAlbaranProveedores( nView ) )}, "Cambiar es(t)ado", "T",,, 4,, .F. )

   end








   oSnd := oWndBrw:NewAt( "Lbl",, "Seleccionar albaranes para ser enviados", {||lSnd( oWndBrw, D():AlbaranesProveedores( nView ) )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )






   oBtnEur := oWndBrw:NewAt( "gc_currency_euro_",,, {||( lEuro := !lEuro, oWndBrw:Refresh() )}, "M(o)neda", "O",,,,, .F. )
   if RolesModel():getRolCambiarCampos( Auth():rolUuid() )






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():AlbaranesProveedores( nView ), aItmAlbPrv(), "02" ) )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():AlbaranesProveedoresLineas( nView ), aColAlbPrv() ) )}, "Lineas",,,, 4, oRpl, .F. )

   end






   oWndBrw:NewAt( "INFO",,, {||( TTrazaDocumento():Activate( "02", ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) )}, "I(n)forme documento", "N",,, 4,, .F. )




   oWndBrw:NewAt( "gc_document_text_pencil_",,, {||( Counter:OpenDialog() )}, "Establecer contadores",,,,,, .F. )





   oScript := oWndBrw:NewAt( "gc_folder_document_",,, {||( oScript:Expand() )}, "Scripts",,,,,, .F. )
      ImportScript( oWndBrw, oScript, "AlbaranesProveedores", nView, oWndBrw:oBrw )





   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,, 4,, .F. )






      oWndBrw:NewAt( "GC_BUSINESSMAN_",,, {||( EdtPrv( ( D():AlbaranesProveedores( nView ) )->cCodPrv ) )}, "Modificar proveedor",,,, 4, oRotor, .F. )






      oWndBrw:NewAt( "INFO",,, {||( InfProveedor( ( D():AlbaranesProveedores( nView ) )->cCodPrv ) )}, "Informe proveedor",,,, 4, oRotor, .F. )






      oWndBrw:NewAt( "gc_cash_register_user_",,, {||( if( !Empty( ( D():AlbaranesProveedores( nView ) )->cNumPed ), ZooPedPrv( ( D():AlbaranesProveedores( nView ) )->cNumPed ), msgStop( "No hay pedido asociado" ) ) )}, "Visualizar pedido",,,, 4, oRotor, .F. )






      oWndBrw:NewAt( "gc_document_text_businessman_",,, {||( if( lFacturado( D():AlbaranesProveedores( nView ) ), MsgStop( "Albarán facturado" ), FacPrv( nil, oWnd, nil, nil, ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) ) )}, "Generar factura",,,, 4, oRotor, .T. )





      oWndBrw:NewAt( "gc_document_text_businessman_",,, {||( if( !Empty( ( D():AlbaranesProveedores( nView ) )->cNumFac ), EdtFacPrv( ( D():AlbaranesProveedores( nView ) )->cNumFac ), msgStop( "No hay factura asociada" ) ) )}, "Modificar factura",,,, 4, oRotor, .F. )





      oWndBrw:NewAt( "gc_document_text_businessman_",,, {||( TFacturarLineasAlbaranesProveedor():New( nView ) )}, "Facturas parciales",,,,, oRotor, .T. )

   if ( "ICG" $ appParamsMain() )





   oWndBrw:NewAt( "GC_DOCUMENT_EMPTY_",,, {||( IcgMotor() )}, "ICG",,,,,, .F. )
   end





   oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .T. )

   oWndBrw:oActiveFilter:SetFields( aItmAlbPrv() )
   oWndBrw:oActiveFilter:SetFilterType( "02" )

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

   enableAcceso()

   if !Empty( oWndBrw )

      if uFieldempresa( "lFltYea" )
         oWndBrw:setYearCombobox()
      end

      if !Empty( cCodPrv ) .OR. !Empty( cCodArt ) .OR. !Empty( cCodPed )
         oWndBrw:RecAdd()
      end

      cCodPrv  := nil
      cCodArt  := nil
      cCodPed  := nil

   end

RETURN .T.



STATIC FUNCTION OpenFiles( lExt )

   local oBlock

   if lOpenFiles
      MsgStop( "Ficheros de albaranes de proveedores ya abiertos" )
      RETURN ( .F. )
   end

   If( lExt == nil, lExt := .F., ) ;

   lExternal            := lExt

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      DisableAcceso()

      lOpenFiles        := .T.

      nView             := D():CreateView()





      D():AlbaranesProveedores( nView )
      D():AlbaranesProveedoresLineas( nView )
      D():AlbaranesProveedoresIncidencias( nView )
      D():AlbaranesProveedoresDocumentos( nView )
      D():AlbaranesProveedoresSeries( nView )

      D():Proveedores( nView )

      D():PedidosProveedores( nView )
      D():PedidosProveedoresLineas( nView )

      D():FacturasProveedores( nView )
      D():FacturasProveedoresLineas( nView )
      D():FacturasProveedoresPagos( nView )

      D():PartesProduccionMaterialProducido( nView )





      D():Articulos( nView )
      D():ArticulosCodigosBarras( nView )

      D():ProveedorArticulo( nView )
      ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( "cCodPrv" ) )

      D():Familias( nView )

      D():Kit( nView )

      D():ArticuloPrecioPropiedades( nView )

      D():Propiedades( nView )

      D():PropiedadesLineas( nView )





      D():Empresa( nView )

      D():Contadores( nView )

      D():Delegaciones( nView )

      D():Cajas( nView )

      D():FormasPago( nView )

      D():TiposIva( nView )

      D():Divisas( nView )

      D():Documentos( nView )
      ( D():Documentos( nView ) )->( OrdSetFocus( "cTipo" ) )

      D():GetObject( "UnidadMedicion", nView )

      D():ArticuloLenguaje( nView )

      D():ImpuestosEspeciales( nView )





      D():Almacen( nView )

      D():UbicacionLineas( nView )





      D():PedidosClientes( nView )

      oMailing          := TGenmailingDatabaseAlbaranesProveedor():New( nView )





      oStock               := TStock():Create( cPatEmp() )
      if !oStock:lOpenFiles()
         lOpenFiles        := .F.
      end




      oCentroCoste      := TCentroCoste():Create( cPatDat() )
      if !oCentroCoste:OpenFiles()
         lOpenFiles     := .F.
      end

      oNewImp           := TNewImp():Create( cPatEmp() )
      if !oNewImp:OpenFiles()
         lOpenFiles     := .F.
      end

      CodigosPostales():GetInstance():OpenFiles()

      oBandera          := TBandera():New()

      TComercio         := TComercio():New( nView, oStock )

      cPicUnd           := MasUnd()

      Counter           := TCounter():New( nView, "nAlbPrv" )

      public nTotAlb       := 0
      public nTotBrt       := 0
      public nTotDto       := 0
      public nTotDPP       := 0
      public nTotUno       := 0
      public nTotDos       := 0
      public nTotNet       := 0
      public nTotIva       := 0
      public nTotReq       := 0
      public nTotImp       := 0
      public nTotIvm       := 0









      public aTotIva       := { {   "porcentajeiva" => 0, "logrecargo"   => .F., "porcentajere" => 0, "bruto"        => 0, "neto"         => 0, "impiva"       => 0, "impre"        => 0, "nivmh"        => 0, "ntransporte"  => 0, "npntver"      => 0 } }
      public aIvaUno       := {}
      public aIvaDos       := {}
      public aIvaTre       := {}
      public aImpVto       := {}
      public aDatVto       := {}





      oNumerosSerie           := TNumerosSerie()
      oNumerosSerie:lCompras  := .T.
      oNumerosSerie:oStock    := oStock

      EnableAcceso()





      oDetCamposExtra         := TDetCamposExtra():New()
      oDetCamposExtra:OpenFiles()
      oDetCamposExtra:SetTipoDocumento( "Albaranes a proveedores" )
      oDetCamposExtra:setbId( {|| D():AlbaranesProveedoresId( nView ) } )

      oLinDetCamposExtra               := TDetCamposExtra():New()
      oLinDetCamposExtra:OpenFiles()
      oLinDetCamposExtra:setTipoDocumento( "Lineas albaranes a proveedores" )
      oLinDetCamposExtra:setbId( {|| D():AlbaranesProveedoresLineasNumero( nView ) } )

   RECOVER

      lOpenFiles              := .F.

      EnableAcceso()

      MsgStop( "Imposible abrir ficheros de albaranes de proveedores" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles()

   DisableAcceso()

   DestroyFastFilter( D():AlbaranesProveedores( nView ), .T., .T. )

   if !Empty( oFont )
      oFont:end()
   end

   if oStock <> nil
      oStock:end()
   end

   if !Empty( oDetCamposExtra )
      oDetCamposExtra:CloseFiles()
   end

   if !empty( oLinDetCamposExtra )
      oLinDetCamposExtra:CloseFiles()
      oLinDetCamposExtra:End()
   end

   if !Empty( oCentroCoste )
      oCentroCoste:end()
   end

   if !empty( oNewImp )
      oNewImp:end()
   end

   if !empty(oMailing)
      oMailing:end()
   end

   D():DeleteView( nView )

   CodigosPostales():GetInstance():CloseFiles()

   TComercio:end()

   oBandera    := nil
   oStock      := nil

   lOpenFiles  := .F.

   oWndBrw     := nil

   oNewImp     := nil

   nView       := nil

   EnableAcceso()

RETURN .T.



STATIC FUNCTION EdtRec( aTmp, aGet, dbf, oBrw, cCodPrv, cCodArt, nMode, cCodPed )

   local nOrd
   local oDlg
   local oFld
   local oBrwLin
   local oBrwInc
   local oBrwDoc
   local oBmpDiv
   local oSay           := Array( 7 )
   local cSay           := Array( 7 )
   local oSayLabels     := Array( 7 )
   local oGetMasDiv
   local cGetMasDiv     := ""
   local oBmpEmp
   local cEstado        := if( aTmp[ 62 ] == 3, "Facturado", "No facturado" )
   local cTlfPrv
   local oTlfPrv
   local oBmpGeneral

   cTlfPrv              := RetFld( aTmp[ 6 ], D():Proveedores( nView ), "Telefono" )

    DO CASE
   CASE nMode == 1

      if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
         msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
         RETURN .F.
      end

      aTmp[ 1 ]     := cNewSer( "NALBPRV", D():Contadores( nView ) )
      aTmp[ 4 ]     := cCurSesion()
      aTmp[ 7 ]     := Application():codigoAlmacen()
      aTmp[ 8 ]     := Application():CodigoCaja()
      aTmp[ 32 ]     := cDivEmp()
      aTmp[ 33 ]     := nChgDiv( aTmp[ 32 ], D():Divisas( nView ) )
      aTmp[ 3 ]     := RetSufEmp()
      aTmp[ 34 ]     := .T.
      aTmp[ 40 ]     := Auth():Codigo()
      aTmp[ 55 ]     := Application():CodigoDelegacion()
      aTmp[ 51 ]     := Ctod( "" )
      aTmp[ 17  ]     := Ctod( "" )
      aTmp[ 62 ]  := 1
      aTmp[ 63 ]     := getSysTime()

      if !Empty( cCodPrv )
         aTmp[ 6 ]  := cCodPrv
      end

      if !Empty( cCodPed )
         aTmp[ 29 ]  := cCodPed
      end

   CASE nMode == 4

      if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
         msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
         RETURN .F.
      end

      aTmp[ 4 ]     := cCurSesion()
      aTmp[ 8 ]     := Application():CodigoCaja()
      aTmp[ 34 ]     := .T.
      aTmp[ 51 ]     := Ctod( "" )
      aTmp[ 39 ]     := .F.
      aTmp[ 62 ]  := 1
      aTmp[ 40 ]     := Auth():Codigo()

   CASE nMode == 2

      if aTmp[ 62 ] == 3
         msgStop( "Albarán ya fue facturado." )
         RETURN .T.
      end

      if aTmp[ 39 ] .AND. !oUser():lAdministrador()
         msgStop( "Solo puede modificar los albaranes cerrados los administradores." )
         RETURN .F.
      end

   end

   if Empty( aTmp[ 21 ] )
      aTmp[ 21 ]  := Padr( "General", 50 )
   end

   if Empty( aTmp[ 23 ] )
      aTmp[ 23 ]     := Padr( "Pronto pago", 50 )
   end

   if BeginTrans( aTmp, nMode )
      RETURN .F.
   end





   cOldCodCli           := aTmp[ 6 ]





   nOrd                 := ( D():AlbaranesProveedores( nView ) )->( ordSetFocus( 1 ) )

   cPicUnd              := MasUnd()
   cPinDiv              := cPinDiv( aTmp[ 32 ], D():Divisas( nView ) )
   cPirDiv              := cPirDiv( aTmp[ 32 ], D():Divisas( nView ) )
   nDinDiv              := nDinDiv( aTmp[ 32 ], D():Divisas( nView ) )
   nDirDiv              := nRouDiv( aTmp[ 32 ], D():Divisas( nView ) )

   oFont                := TFont():New( "Arial", 8, 26, .F., .T. )





   cSay[ 2 ]            := RetFld( aTmp[ 7 ], D():Almacen( nView ) )
   cSay[ 3 ]            := RetFld( aTmp[ 18 ], D():FormasPago( nView ) )
   cSay[ 4 ]            := RetFld( aTmp[ 8 ], D():Cajas( nView ) )
   cSay[ 5 ]            := RetFld( aTmp[ 6 ], D():Proveedores( nView ) )
   cSay[ 6 ]            := RetFld( cCodEmp() + aTmp[ 55 ], D():Delegaciones( nView ), "cNomDlg" )
   cSay[ 7 ]            := RetFld( aTmp[ 61 ], D():Almacen( nView ) )

   cUsr                 := UsuariosModel():getNombreWhereCodigo( aTmp[ 40 ] )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "albaranes de proveedores", "PEDPRV",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )











      oFld := TFolder():ReDefine( 400, {"&Albarán", "Da&tos", "&Incidencias", "D&ocumentos"}, { "ALBPRV_1","ALBPRV_2","PEDCLI_3","PEDCLI_4" }, oDlg,,,,, .F., )







      oBmpGeneral := TBitmap():ReDefine( 990, "gc_document_empty_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_folders2_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_information_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_folders_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )





      aGet[ 40 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oUsr:cText( UsuariosModel():getNombreWhereCodigo( aTmp[ 40 ] ) ), .T.  )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oUsr := TGetHlp():ReDefine( 221, { | u | If( PCount()==0, cUsr, cUsr:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )














      aGet[6] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[6], aTmp[6]:= u ) }, oFld:aDialogs[1],, ( RetPicCodPrvEmp() ), {||    ( LoaPrv( aGet, aTmp, nMode, oSay[ 5 ], oTlfPrv ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwProvee( aGet[6], oSay[ 5 ] ) )}, nil, "LUPA",, )





      aGet[9] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[14] := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, aTmp[14], aTmp[14]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oTlfPrv := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, cTlfPrv, cTlfPrv:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 10 ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 10 ], Rtrim( aTmp[ 11 ] ) + Space( 1 ) + Rtrim( aTmp[ 12 ] ) )}, nil, "gc_earth_lupa_16",, )





      aGet[ 13 ] := TGetHlp():ReDefine( 102, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[1],,, {||    ( CodigosPostales():GetInstance():validCodigoPostal() )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 11 ] := TGetHlp():ReDefine( 103, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 12 ] := TGetHlp():ReDefine( 107, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









        aGet[ 18 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    cFPago( aGet[ 18 ], D():FormasPago( nView ), oSay[ 3 ] )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwFPago( aGet[18 ], oSay[ 3 ] )}, nil, "LUPA",, )





      oSay[ 3 ] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )












      aGet[ 8 ] := TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],,, {||    cCajas( aGet[ 8 ], D():Cajas( nView ), oSay[ 4 ] )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 8 ], oSay[ 4 ] ) )}, nil, "LUPA",, )





      oSay[ 4 ] := TGetHlp():ReDefine( 166, { | u | If( PCount()==0, cSay[ 4 ], cSay[ 4 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )













        aGet[ 32 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDivIn( aGet[ 32 ], oBmpDiv, aGet[ 33 ], @cPinDiv, @nDinDiv, @cPirDiv, @nDirDiv, oGetMasDiv, D():Divisas( nView ), oBandera ) )}, "N/W*",,,,, .F., {||     ( nMode == 1 .AND. ( dbfTmp )->( LastRec() ) == 0 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 32 ], oBmpDiv, aGet[ 33 ], D():Divisas( nView ), oBandera )}, nil, "LUPA",, )




      oBmpDiv := TBitmap():ReDefine( 171, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )






        aGet[ 33 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.9999",, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 61 ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 61 ], , oSay[ 7 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 61 ], oSay[ 7 ] ) )}, nil, "LUPA", 342, )






      oSay[ 7 ] := TGetHlp():ReDefine( 341, { | u | If( PCount()==0, cSay[ 7 ], cSay[ 7 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ExpAlmacen( aTmp[ 61 ], dbfTmp, oBrwLin ) )}, nil, "Bot",, )








      aGet[ 7 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,, {||       ( cAlmacen( aGet[ 7 ], , oSay[ 2 ] ) )},,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( Self, oSay[ 2 ] ) )}, nil, "Lupa",, )







      oSay[ 2 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ExpAlmacen( aTmp[ 7 ], dbfTmp, oBrwLin ) )}, nil, "Bot",, )









      oBmpEmp := TBitmap():ReDefine( 500,, "Bmp\ImgAlbPrv.bmp", oDlg,,, .F., .F.,,, .F.,,, .F. )
      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )

      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLin:cAlias          := dbfTmp

      oBrwLin:nMarqueeStyle   := 6
      oBrwLin:lFooter         := .T.
      oBrwLin:cName           := "Albaran_proveedor.Detalle"

         with object ( oBrwLin:AddCol() )
            :cHeader             := "Facturado"
            :bStrData            := {|| "" }
            :bEditValue          := {|| ( dbfTmp )->lFacturado }
            :nWidth              := 20
            :SetCheck( { "gc_check_12", "gc_delete_12" } )
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Número"
            :bEditValue       := {|| if( ( dbfTmp )->lKitChl, "", Trans( ( dbfTmp )->nNumLin, "9999" ) ) }
            :nWidth           := 65
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader             := "Posición"
            :cSortOrder          := "nPosPrint"
            :bEditValue          := {|| ( dbfTmp )->nPosPrint }
            :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
            :cEditPicture        := "9999"
            :nWidth              := 60
            :nDataStrAlign       := 1
            :nHeadStrAlign       := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Código"
            :bEditValue       := {|| ( dbfTmp )->cRef }
            :nWidth           := 80
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "C. Barras"
            :bEditValue       := {|| cCodigoBarrasDefecto( ( dbfTmp )->cRef, D():ArticulosCodigosBarras( nView ) ) }
            :nWidth           := 100
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Código proveedor"
            :bEditValue       := {|| ( dbfTmp )->cRefPrv }
            :nWidth           := 80
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| if( Empty( ( dbfTmp )->cRef ) .AND. !Empty( ( dbfTmp )->mLngDes ), ( dbfTmp )->mLngDes, ( dbfTmp )->cDetalle ) }
            :nWidth           := 305
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Prop. 1"
            :bEditValue       := {|| ( dbfTmp )->cValPr1 }
            :nWidth           := 60
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Valor prop. 1"
            :bEditValue       := {|| nombrePropiedad( ( dbfTmp )->cCodPr1, ( dbfTmp )->cValPr1, nView ) }
            :nWidth           := 40
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Prop. 2"
            :bEditValue       := {|| ( dbfTmp )->cValPr2 }
            :nWidth           := 60
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Valor prop. 2"
            :bEditValue       := {|| nombrePropiedad( ( dbfTmp )->cCodPr2, ( dbfTmp )->cValPr2, nView ) }
            :nWidth           := 40
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Lote"
            :bEditValue       := {|| ( dbfTmp )->cLote }
            :nWidth           := 80
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Caducidad"
            :bEditValue       := {|| ( dbfTmp )->dFecCad }
            :nWidth           := 80
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Pedido cliente"
            :bEditValue       := {|| if( !Empty( ( dbfTmp )->cNumPed ), Trans( ( dbfTmp )->cNumPed, "@R #/#########/##" ), "" ) }
            :nWidth           := 80
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Cliente"
            :bEditValue       := {|| if( !Empty( (dbfTmp)->cNumPed ), GetCliente( (dbfTmp)->cNumPed ), "" ) }
            :nWidth           := 180
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Bultos"
            :bEditValue       := {|| ( dbfTmp )->nBultos }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := cNombreCajas()
            :bEditValue       := {|| ( dbfTmp )->nCanPed }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :lHide            := .T.
            :nEditType        := 1
            :bOnPostEdit      := {|o,x,n| ChangeCajas( o, x, n, aTmp ) }
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := cNombreUnidades()
            :bEditValue       := {|| ( dbfTmp )->nUniCaja }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nFooterType      := 1
            :lHide            := .T.
            :nEditType        := 1
            :bOnPostEdit      := {|o,x,n| ChangeUnidades( o, x, n, aTmp ) }
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Tot. " + cNombreUnidades()
            :bEditValue       := {|| nTotNAlbPrv( dbfTmp ) }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nFooterType      := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "UM. Unidad de medición"
            :bEditValue       := {|| ( dbfTmp )->cUnidad }
            :nWidth           := 25
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Almacen"
            :bEditValue       := {|| ( dbfTmp )->cAlmLin }
            :nWidth           := 60
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Importe"
            :bEditValue       := {|| nTotUAlbPrv( dbfTmp, nDinDiv ) }
            :cEditPicture     := cPinDiv
            :nWidth           := 90
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nEditType        := 1
            :bOnPostEdit      := {|o,x,n| ChangePrecio( o, x, n, aTmp ) }
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "% Dto."
            :bEditValue       := {|| ( dbfTmp )->nDtoLin }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 50
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "% Prm."
            :bEditValue       := {|| ( dbfTmp )->nDtoPrm }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 40
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "% " + cImp()
            :bEditValue       := {|| ( dbfTmp )->nIva }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 50
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Total"
            :bEditValue       := {|| nTotLAlbPrv( dbfTmp, nDinDiv, nDirDiv ) }
            :cEditPicture     := cPirDiv
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nFooterType      := 1
         end

         with object ( oBrwLin:addCol() )
            :cHeader       := "P. Venta 1"
            :bEditValue    := {|| ArticulosModel():getField( "pVenta1", "Codigo", ( dbfTmp )->cRef ) }
            :cEditPicture  := cPirDiv
            :nWidth        := 100
            :nDataStrAlign := 1
            :nHeadStrAlign := 1
            :lHide         := .T.
         end

         with object ( oBrwLin:addCol() )
            :cHeader       := "Total venta"
            :bEditValue    := {|| ( nTotNAlbPrv( dbfTmp ) * ArticulosModel():getField( "pVenta1", "Codigo", ( dbfTmp )->cRef ) ) }
            :cEditPicture  := cPirDiv
            :nWidth        := 100
            :nDataStrAlign := 1
            :nHeadStrAlign := 1
            :nFooterType   := 1
            :lHide         := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Centro de coste"
            :bEditValue       := {|| ( dbfTmp )->cCtrCoste }
            :nWidth           := 40
            :lHide            := .T.
         end

         if nMode <> 3
            oBrwLin:bLDblClick   := {|| EditDetail( oBrwLin, bEdtDet, aTmp ) }
         end

         oBrwLin:CreateFromResource( 190 )





        TButton():ReDefine( 500, {||( AppendDetail( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 501, {||( EditDetail( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 502, {||( WinDelRec( oBrwLin, dbfTmp, {|| delDeta() }, {|| RecalculaTotal( aTmp ) } ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( ZoomDetail( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )





        TButton():ReDefine( 524, {||( LineUp( dbfTmp, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 525, {||( LineDown( dbfTmp, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )









      aGet[ 21 ] := TGetHlp():ReDefine( 199, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .F.,,,,,, nil,,, )







        aGet[ 22 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      aGet[ 23 ] := TGetHlp():ReDefine( 209, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .F.,,,,,, nil,,, )








        aGet[ 24 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )






      aGet[ 35 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[1],, "@!",, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 36 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )






      aGet[ 37 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[1],, "@!",, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 38 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oBrwIva                        := IXBrowse():New( oFld:aDialogs[ 1 ] )

      oBrwIva:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwIva:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwIva:SetArray( aTotIva, , , .F. )

      oBrwIva:lHScroll               := .F.
      oBrwIva:lVScroll               := .F.
      oBrwIva:lRecordSelector        := .F.
      oBrwIva:nMarqueeStyle          := 5

      oBrwIva:CreateFromResource( 490 )

      with object ( oBrwIva:AddCol() )
         :cHeader          := "Base"
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ) <> 0 .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ) <> 0 ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ), cPirDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "%" + cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), "@E 999.99" ), "" ), "" ) }
         :bEditValue       := {|| hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) }
         :nWidth           := 44
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
         :nEditType        := 1
         :bEditWhen        := {|| !IsNil( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) ) }
         :bOnPostEdit      := {|o,x| EdtIva( o, x, hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), dbfTmp, D():TiposIva( nView ), oBrwLin ), RecalculaTotal( aTmp ) }
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ), cPirDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "% R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) <> nil .AND. aTmp[ 25 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ), cPicReq() ), "" ), "" ) }
         :nWidth           := 44
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impre" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ) <> nil .AND. aTmp[ 25 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ), cPirDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end
































































        oGetNet := TSay():ReDefine( 370, {|| nGetNeto}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



        oGetIva := TSay():ReDefine( 380, {|| nGetIva}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



        oGetReq := TSay():ReDefine( 390, {|| nGetReq}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetIvm := TSay():ReDefine( 403, {|| nTotIvm}, oFld:aDialogs[1],,,, .F.,, .F., .F., )





      aGet[ 25 ] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 25 ], aTmp[ 25 ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ) )},,,,, .F., {||         ( nMode <> 3 )}, .F. )




      oGetTot := TSay():ReDefine( 410, {|| nTotAlb}, oFld:aDialogs[1],,,, .F., oFont, .F., .F., )




      oGetMasDiv := TSay():ReDefine( 420, {|| cGetMasDiv}, oFld:aDialogs[1],,,, .F., oFont, .F., .F., )










      aGet[ 1 ] := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( aTmp[ 1 ] >= "A" .AND. aTmp[ 1 ] <= "Z"  )}, "N/W*",,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .T., {||    ( UpSerie( aGet[ 1 ] ) )}, {||  ( DwSerie( aGet[ 1 ] ) )},,,, nil,,, )





      aGet[ 2 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oFld:aDialogs[1],, "999999999",,,,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 3 ] := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      aGet[ 63 ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 63 ], aTmp[ 63 ]:= u ) }, oFld:aDialogs[1],, "@R 99:99:99", {||    ( iif(   !validTime( aTmp[ 63 ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 557, {||( importarLineasPedidosProveedor( aTmp, aGet, oBrwLin )  )}, oFld:aDialogs[1],,, .F.,,,, .F. )





      TButton():ReDefine( 558, {||( GrpPed( aGet, aTmp, oBrwLin, nMode ) )}, oFld:aDialogs[1],,, .F., {||     ( nMode == 1 .AND. Empty( aTmp[ 29 ] ) )},,, .F. )











      aGet[ 29 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[1],, "@R #/#########/##", {||    ( cPedPrv( aGet, aTmp, oBrwLin, nMode ) )}, "N/W*",,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,, {|Self|(  brwPedPrv( aGet[ 29 ], D():PedidosProveedores( nView ), D():PedidosProveedoresLineas( nView ), D():TiposIva( nView ), D():Divisas( nView ), D():FormasPago( nView ) ), ::lValid(), oFld:aDialogs[1]:GoNextCtrl( oFld:aDialogs[1]:hWnd ) )}, nil, "LUPA",, )




      aGet[ 30 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      aGet[ 16 ] := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 17 ] := TGetHlp():ReDefine( 136, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      oSayLabels[ 1 ] := TGroup():ReDefine( 700,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 2 ] := TSay():ReDefine( 701,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 3 ] := TSay():ReDefine( 702,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 4 ] := TSay():ReDefine( 703,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 5 ] := TSay():ReDefine( 704,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 6 ] := TSay():ReDefine( 705,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 7 ] := TSay():ReDefine( 706,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )










      aGet[ 64 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 64 ], aTmp[ 64 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oCentroCoste:Existe( aGet[ 64 ], aGet[ 64 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 64 ] ) )}, nil, "LUPA",, 311 )






      aGet[ 55 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 6 ] := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSay[ 6 ], cSay[ 6 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 56 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 56 ], aTmp[ 56 ]:= u ) }, oFld:aDialogs[2],, { 270, 271, 272, 273 },,,,, .F., {||     ( .F. )}, )








        aGet[15] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[15], aTmp[15]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[19] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[19], aTmp[19]:= u ) }, oFld:aDialogs[2],, "@E 999,999",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





        aGet[27] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[27], aTmp[27]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






        aGet[28] := TMultiGet():ReDefine( 200, { | u | If( PCount()==0, aTmp[28], aTmp[28]:= u ) }, oFld:aDialogs[2],, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, .F.,, )






      aGet[ 50 ] := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 51 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 52 ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 52 ], aTmp[ 52 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oBrwInc                 := IXBrowse():New( oFld:aDialogs[ 3 ] )

      oBrwInc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwInc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwInc:cAlias          := dbfTmpInc

      oBrwInc:nMarqueeStyle   := 5
      oBrwInc:cName           := "Incidencias de albaranes a proveedor"

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Resuelta"
            :bStrData         := {|| "" }
            :bEditValue       := {|| ( dbfTmpInc )->lListo }
            :nWidth           := 65
            :SetCheck( { "Sel16", "Cnt16" } )
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }
            :nWidth           := 90
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }
            :nWidth           := 420
         end

         if nMode <> 3
            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }
         end

         oBrwInc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 502, {||( DbDelRec( oBrwInc, dbfTmpInc, nil, nil, .T. ) )}, oFld:aDialogs[ 3 ],,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) )}, oFld:aDialogs[ 3 ],,, .F.,,,, .F. )





      oBrwDoc                 := IXBrowse():New( oFld:aDialogs[ 4 ] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc

      oBrwDoc:nMarqueeStyle   := 5
      oBrwDoc:nRowHeight      := 40
      oBrwDoc:nDataLines      := 2

         with object ( oBrwDoc:AddCol() )
            :cHeader          := "Documento"
            :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }
            :nWidth           := 885
         end

         if nMode <> 3
            oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) }
         end

         oBrwDoc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 502, {||( DbDelRec( oBrwDoc, dbfTmpDoc, nil, nil, .F. ) )}, oFld:aDialogs[ 4 ],,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )




      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", rTrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )









      TButton():ReDefine( 4, {||( RecalculaAlbaranProveedores( aTmp, oDlg ), ( oBrwLin:Refresh() ), RecalculaTotal( aTmp ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, nDinDiv, nDirDiv, oBrw, nMode, oDlg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 3, {||( if( EndTrans( aTmp, aGet, nDinDiv, nDirDiv, oBrw, nMode, oDlg ), GenAlbPrv( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( If( ExitNoSave( nMode, dbfTmp ), oDlg:end(), ) )}, oDlg,,, .F.,,,, .T. )

   CodigosPostales():GetInstance():setBinding( { "CodigoPostal" => aGet[ 13 ], "Poblacion" => aGet[ 11 ], "Provincia" => aGet[ 12 ] } )

   if nMode <> 3
      oFld:aDialogs[1]:AddFastKey( 113, {|| AppendDetail( oBrwLin, bEdtDet, aTmp ) } )
      oFld:aDialogs[1]:AddFastKey( 114, {|| EditDetail( oBrwLin, bEdtDet, aTmp ) } )
      oFld:aDialogs[1]:AddFastKey( 115, {|| WinDelRec( oBrwLin, dbfTmp, {|| delDeta() }, {|| RecalculaTotal( aTmp ) } ) } )

      oFld:aDialogs[3]:AddFastKey( 113, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 114, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 115, {|| DbDelRec( oBrwInc, dbfTmpInc, nil, nil, .T. ) } )

      oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 115, {|| DbDelRec( oBrwDoc, dbfTmpDoc, nil, nil, .F. ) } )

      oDlg:AddFastKey( 118, {|| ExcelImport( aTmp, dbfTmp, D():Articulos( nView ), D():ArticuloPrecioPropiedades( nView ), D():Familias( nView ), D():Divisas( nView ), oBrwLin, , D():Kit( nView ) ) } )
      oDlg:AddFastKey( 116, {|| EndTrans( aTmp, aGet, nDinDiv, nDirDiv, oBrw, nMode, oDlg ) } )
      oDlg:AddFastKey( 117, {|| if( EndTrans( aTmp, aGet, nDinDiv, nDirDiv, oBrw, nMode, oDlg ), GenAlbPrv( 1 ), ) } )
      oDlg:AddFastKey( 120,{|| oDetCamposExtra:Play( space(1) ) } )
      oDlg:AddFastKey( 65,    {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )
   end

   oDlg:AddFastKey ( 112, {|| GoHelp() } )

   do case
      case nMode == 1 .AND. lRecogerUsuario() .AND. Empty( cCodArt )


         oDlg:bStart := {|| if( lGetUsuario( aGet[ 40 ] ), ( ShowKitCom( D():AlbaranesProveedores( nView ), dbfTmp, oBrwLin, cCodPrv, dbfTmpInc, aGet ), StartEdtRecAlbProv( aGet, oSay, nMode ) ), oDlg:end() ) }

      case nMode == 1 .AND. lRecogerUsuario() .AND. !Empty( cCodArt )


         oDlg:bStart := {|| if( lGetUsuario( aGet[ 40 ] ), ( AppendDetail( oBrwLin, bEdtDet, aTmp, cCodArt ), ShowKitCom( D():AlbaranesProveedores( nView ), dbfTmp, oBrwLin, cCodPrv, dbfTmpInc, aGet ), StartEdtRecAlbProv( aGet, oSay, nMode ) ), oDlg:end() ) }

      case nMode == 1 .AND. !lRecogerUsuario() .AND. !Empty( cCodArt )
         oDlg:bStart := {|| AppendDetail( oBrwLin, bEdtDet, aTmp, cCodArt ), ShowKitCom( D():AlbaranesProveedores( nView ), dbfTmp, oBrwLin, cCodPrv, dbfTmpInc, aGet ), StartEdtRecAlbProv( aGet, oSay, nMode ) }

      otherwise
         oDlg:bStart := {|| ShowKitCom( D():AlbaranesProveedores( nView ), dbfTmp, oBrwLin, cCodPrv, dbfTmpInc, aGet ), StartEdtRecAlbProv( aGet, oSay, nMode ) }

   end




    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( RecalculaTotal( aTmp ) )}, .T.,,, {|Self|(  initEdtRec( cCodPed, aTmp, oDlg, oBrwLin, aGet) )}, oDlg:bRClicked,,, )

   EndEdtRecMenu()

   oBmpEmp:end()
   oBmpDiv:end()
   oFont:end()
   oBmpGeneral:End()





   if oBrwLin <> nil
      oBrwLin:CloseData()
   end

   if oBrwInc <> nil
      oBrwInc:CloseData()
   end

   ( D():AlbaranesProveedores( nView ) )->( OrdSetFocus( nOrd ) )





   if !Empty( aTmp[29] ) .AND. nOldEst <> nil
      if dbLock( D():PedidosProveedores( nView ) )
         ( D():PedidosProveedores( nView ) )->nEstado := nOldEst
         ( D():PedidosProveedores( nView ) )->( dbUnLock() )
      end
   end

   nOldEst           := nil





   KillTrans()





   dbCommitAll()

RETURN ( oDlg:nResult == 1 )



Static FUNCTION initEdtRec( cCodPed, aTmp, oDlg, oBrwLin, aGet )

   if !Empty( cCodPed )
      aGet[ 29 ]:lValid()
   endif

   EdtRecMenu( aTmp, aGet, oBrwLin, oDlg )

   oBrwLin:MakeTotals()

   oBrwLin:Load()

return( .T. )



Static FUNCTION ChangePrecio( oCol, uNewValue, nKey, aTmp )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      ( dbfTmp )->nPreDiv       := uNewValue

      RecalculaTotal( aTmp )

   end

RETURN .T.



Static FUNCTION ChangeCajas( oCol, uNewValue, nKey, aTmp )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      ( dbfTmp )->nCanPed       := uNewValue

      RecalculaTotal( aTmp )

   end

RETURN .T.



Static FUNCTION ChangeUnidades( oCol, uNewValue, nKey, aTmp )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      ( dbfTmp )->nUniCaja       := uNewValue

      RecalculaTotal( aTmp )

   end

RETURN .T.



Static FUNCTION StartEdtRecAlbProv( aGet, oSay, nMode )

   if uFieldEmpresa( "lShowOrg" )
      aGet[ 61 ]:Show()
      oSay[7]:Show()
   else
      aGet[ 61 ]:Hide()
      oSay[7]:Hide()
   end

   if nMode <> 1

      if !empty( aGet[ 64 ] )
         aGet[ 64 ]:lValid()
      endif

   endif



RETURN ( .T. )



Static FUNCTION edtRecMenu( aTmp, aGet, oBrwLin, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

            if !lExternal




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra para la familia", .F.,, {|oMenuItem|( oDetCamposExtra:Play( space(1) ) )},, "GC_FORM_PLUS2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&2. Visualizar pedido", "Visualiza el pedido del que proviene", .F.,, {|oMenuItem|( if(!Empty( aTmp[ 29 ] ), ZooPedPrv( aTmp[ 29 ] ), msgStop( "No hay pedido asociado" ) ) )},, "gc_clipboard_empty_businessman_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)




            MenuAddItem( "&3. Modificar proveedor", "Modificar la ficha del proveedor", .F.,, {|oMenuItem|( EdtPrv( aTmp[ 6 ] ) )},, "gc_businessman_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&4. Informe de proveedor", "Abrir el informe del proveedor", .F.,, {|oMenuItem|( InfProveedor( aTmp[ 6 ] ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)

            end




            MenuAddItem( "&5. Informe del documento", "Abrir el informe del documento", .F.,, {|oMenuItem|( TTrazaDocumento():Activate( "02", ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

RETURN ( oMenu )



Static FUNCTION EndEdtRecMenu()

RETURN ( oMenu:End() )



Static FUNCTION RecalculaAlbaranProveedores( aTmp, oDlg )

   local nRecNum
   local nPreCom
   local cCodPrv                    := aTmp[ 6 ]




   if !ApoloMsgNoYes( "¡Atención!,"                                      + Chr(13)+Chr(10) +  "todos los precios se recalcularán en función de"  + Chr(13)+Chr(10) +  "los valores en las bases de datos.", "¿ Desea proceder ?" )
      RETURN nil
   end

   oDlg:Disable()

   ( D():Articulos( nView ) )->( ordSetFocus( "Codigo" ) )

   nRecNum                          := ( dbfTmp )->( RecNo() )

   ( dbfTmp )->( dbGotop() )
   while !( dbfTmp )->( eof() )





      nPreCom                       := nComPro( ( dbfTmp )->cRef, ( dbfTmp )->cCodPr1, ( dbfTmp )->cValPr1, ( dbfTmp )->cCodPr2, ( dbfTmp )->cValPr2, D():ArticuloPrecioPropiedades( nView ) )

      if nPrecom  <> 0

         ( dbfTmp )->nPreDiv        := nPreCom

      else

         if uFieldEmpresa( "lCosPrv", .F. )
            nPreCom                 := nPrecioReferenciaProveedor( cCodPrv, ( dbfTmp )->cRef, D():ProveedorArticulo( nView ) )
         end

         if nPreCom <> 0
            ( dbfTmp )->nPreDiv     := nPreCom
         else
            ( dbfTmp )->nPreDiv     := nCosto( ( dbfTmp )->cRef, D():Articulos( nView ), D():Kit( nView ), .F., aTmp[ 32 ], D():Divisas( nView ) )
         end





         if uFieldEmpresa( "lCosPrv", .F. )

            nPreCom                 := nDescuentoReferenciaProveedor( cCodPrv, ( dbfTmp )->cRef, D():ProveedorArticulo( nView ) )

            if nPreCom <> 0
               ( dbfTmp )->nPreDiv  := nPreCom
            end





            nPreCom                 := nPromocionReferenciaProveedor( cCodPrv, ( dbfTmp )->cRef, D():ProveedorArticulo( nView ) )

            if nPreCom <> 0
               ( dbfTmp )->nDtoPrm  := nPreCom
            end

         end

      end

      ( dbfTmp )->( dbSkip() )

   end

   ( dbfTmp )->( dbGoTo( nRecNum ) )

   oDlg:Enable()

RETURN nil







STATIC FUNCTION LoaPrv( aGet, aTmp, nMode, oSay, oTlfPrv )

   local lValid      := .F.
   local cNewCodCli  := aGet[ 6 ]:VarGet()
   local lChgCodCli  := ( Empty( cOldCodCli ) .OR. cOldCodCli <> cNewCodCli )

   if Empty( cNewCodCli )
      RETURN .T.
   elseif At( ".", cNewCodCli ) <> 0
      cNewCodCli     := PntReplace( aGet[ 6 ], "0", RetNumCodPrvEmp() )
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodPrvEmp() )
   end

   if ( D():Proveedores( nView ) )->( dbSeek( cNewCodCli ) )

      if ( D():Proveedores( nView ) )->lBlqPrv
         msgStop( "Proveedor bloqueado, no se pueden realizar operaciones de compra" )
         RETURN .F.
      end

      aGet[ 6 ]:cText( ( D():Proveedores( nView ) )->Cod )

      if Empty( aGet[ 9 ]:varGet() ) .OR. lChgCodCli
         aGet[ 9 ]:cText( ( D():Proveedores( nView ) )->Titulo )
      end

      if oTlfPrv <> nil
         oTlfPrv:cText( ( D():Proveedores( nView ) )->Telefono )
      end

      if Empty( aGet[ 10 ]:varGet() ) .OR. lChgCodCli
         aGet[ 10 ]:cText( ( D():Proveedores( nView ) )->Domicilio )
      endif

      if Empty( aGet[ 11 ]:varGet() ) .OR. lChgCodCli
         aGet[ 11 ]:cText( ( D():Proveedores( nView ) )->Poblacion )
      endif

      if Empty( aGet[ 12 ]:varGet() ) .OR. lChgCodCli
         aGet[ 12 ]:cText( ( D():Proveedores( nView ) )->Provincia )
      endif

      if Empty( aGet[ 13 ]:varGet() ) .OR. lChgCodCli
         aGet[ 13 ]:cText( ( D():Proveedores( nView ) )->CodPostal )
      endif

      if Empty( aGet[ 14 ]:varGet() ) .OR. lChgCodCli
         aGet[ 14 ]:cText( ( D():Proveedores( nView ) )->Nif )
      endif





      if lChgCodCli
         aGet[ 21 ]:cText( ( D():Proveedores( nView ) )->cDtoEsp )
         aGet[ 22 ]:cText( ( D():Proveedores( nView ) )->nDtoEsp )
         aGet[ 23    ]:cText( ( D():Proveedores( nView ) )->cDtoPp )
         aGet[ 24    ]:cText( ( D():Proveedores( nView ) )->DtoPp )
      end

      if Empty( aGet[ 18 ]:VarGet() )
         aGet[ 18 ]:cText( ( D():Proveedores( nView ) )->fPago )
         aGet[ 18 ]:lValid()
      end

      if nMode == 1

         aGet[ 56 ]:nOption( Max( ( D():Proveedores( nView ) )->nRegIva, 1 ) )
         aGet[ 56 ]:Refresh()

         if Empty( aTmp[ 1 ] )

            if !Empty( ( D():Proveedores( nView ) )->Serie )
               aGet[ 1 ]:cText( ( D():Proveedores( nView ) )->Serie )
            end

         else

            if !Empty( ( D():Proveedores( nView ) )->Serie ) .AND. aTmp[ 1 ] <> ( D():Proveedores( nView ) )->Serie .AND. ApoloMsgNoYes( "La serie del proveedor seleccionado es distinta a la anterior.", "¿Desea cambiar la serie?" )
               aGet[ 1 ]:cText( ( D():Proveedores( nView ) )->Serie )
            end

         end

      end

      if lChgCodCli
         aTmp[ 25 ] := ( D():Proveedores( nView ) )->lReq
         aGet[ 25 ]:Refresh()
      end

      if ( D():Proveedores( nView ) )->lMosCom .AND. !Empty( ( D():Proveedores( nView ) )->mComent ) .AND. lChgCodCli
         MsgStop( AllTrim( ( D():Proveedores( nView ) )->mComent ) )
      end

      cOldCodCli  := ( D():Proveedores( nView ) )->Cod

      lValid      := .T.

   else

      msgStop( "Proveedor no encontrado" )

   end

RETURN lValid







STATIC FUNCTION AppendDetail( oBrwLin, bEdtDet, aTmp, cCodArt )

   WinAppRec( oBrwLin, bEdtDet, dbfTmp, aTmp, cCodArt )

RETURN ( RecalculaTotal( aTmp ) )







STATIC FUNCTION EditDetail( oBrwLin, bEdtDet, aTmp )

   WinEdtRec( oBrwLin, bEdtDet, dbfTmp, aTmp )

RETURN ( RecalculaTotal( aTmp ) )







STATIC FUNCTION ZoomDetail( oBrwLin, bEdtDet, aTmp )

   WinZooRec( oBrwLin, bEdtDet, dbfTmp, aTmp )

RETURN NIL







STATIC FUNCTION DelDeta()

   CursorWait()

   while ( dbfTmpSer )->( dbSeek( Str( ( dbfTmp )->nNumLin, 4 ) ) )
      ( dbfTmpSer )->( dbDelete() )
   end

   if ( dbfTmp )->lKitArt
      dbDelKit( , dbfTmp, ( dbfTmp )->nNumLin )
   end

   CursorWE()

RETURN ( .T. )






STATIC FUNCTION EdtDet( aTmp, aGet, dbf, oBrw, aTmpAlb, cCodArtEnt, nMode )

    local oDlg
   local oFld
   local oBmp
   local oBtn
   local oGet1
   local oSayFam
   local cSayFam           := ""
   local oTotal
    local nTotal
   local oBrwPrp
   local oSayPr1
   local oSayPr2
   local oSayVp1
   local oSayVp2
   local cSayVp1           := ""
   local cSayVp2           := ""
   local cSayPr1           := ""
   local cSayPr2           := ""
   local oBeneficioSobre   := Array( 6 )
   local cBeneficioSobre   := Afill( Array( 6 ), "" )
   local aBeneficioSobre   := { "Costo", "Venta" }
   local oSayLote
   local cCodArt           := Padr( aTmp[ 4 ], 200 )

   cGetCelda               := Space(20)





   cTipoCtrCoste           := AllTrim( aTmp[ 125 ] )

   do case
   case nMode == 1

      aTmp[ 8 ]    := 1
      aTmp[ 109 ] := aTmpAlb[ 61 ]
      aTmp[ 58  ]    := aTmpAlb[ 7 ]
      aTmp[ 57  ]    := aTmpAlb[ 29 ]
      aTmp[ 51  ]    := lActCos()
      aTmp[ 101  ]    := ctod( "" )
      aTmp[ 115]    := ctod( "" )
      aTmp[ 117  ]    := ctod( "" )
      aTmp[ 63  ]    := nLastNum( dbfTmp )
      aTmp[ 124  ]  := nLastNum( dbfTmp, "nPosPrint" )

      if !Empty( cCodArtEnt )
         cCodArt           := cCodArtEnt
      end

      cTipoCtrCoste        := "Centro de coste"

      oLinDetCamposExtra:setTemporalAppend()

   case nMode == 2

      if aTmp[ 100 ]
         MsgStop( "No puede modificar una línea facturada", "¡Atención!" )
         Return .F.
      end

      if !Empty( aTmp[ 4 ] )
         ( D():Articulos( nView ) )->( dbSeek( Alltrim( aTmp[ 4 ] ) ) )
      end

   end

   cOldCodArt              := aTmp[ 4    ]
   cOldPrpArt              := aTmp[ 52 ] + aTmp[ 53 ] + aTmp[ 54 ] + aTmp[ 55 ]
   cOldUndMed              := aTmp[ 13 ]

   cBeneficioSobre[ 1 ]    := aBeneficioSobre[ Max( aTmp[ 31 ], 1 ) ]
   cBeneficioSobre[ 2 ]    := aBeneficioSobre[ Max( aTmp[ 32 ], 1 ) ]
   cBeneficioSobre[ 3 ]    := aBeneficioSobre[ Max( aTmp[ 33 ], 1 ) ]
   cBeneficioSobre[ 4 ]    := aBeneficioSobre[ Max( aTmp[ 34 ], 1 ) ]
   cBeneficioSobre[ 5 ]    := aBeneficioSobre[ Max( aTmp[ 35 ], 1 ) ]
   cBeneficioSobre[ 6 ]    := aBeneficioSobre[ Max( aTmp[ 36 ], 1 ) ]

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "líneas a albaranes de proveedores", "LAlbPrv",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )











      oFld := TFolder():ReDefine( 400, {"&General", "&Precios", "&Observaciones", "&Centro coste"}, { "LALBPRV_1","LALBPRV_2","LALBPRV_4","LCTRCOSTE" }, oDlg,,,,, .F., )

      oFld:aEnable         := { .T., !Empty( aTmp[ 4 ] ), .T., .T. }







      aGet[ 4 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cCodArt, cCodArt:= u ) }, oFld:aDialogs[1],,, {||    ( loaArt( cCodArt, aGet, aTmp, aTmpAlb, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBmp, oBrwPrp, oDlg, oSayLote, oBeneficioSobre, oTotal, nMode ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[ 4 ], aGet[ 6 ], .F., .T., oBtn, aGet[ 62 ], , , , , aGet[ 101 ], if( uFieldEmpresa( "lStockAlm" ), aTmp[ 58 ], nil ) ) )}, nil, "LUPA",, )








      oSayLote := TSay():ReDefine( 111,, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      aGet[ 62 ] := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, aTmp[ 62 ], aTmp[ 62 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 101 ] := TGetHlp():ReDefine( 113, { | u | If( PCount()==0, aTmp[ 101 ], aTmp[ 101 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 114, )




      aGet[ 6 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( ( lModDes() .OR. Empty( aTmp[ 6 ] ) ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 14 ] := TMultiGet():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||         ( nMode <> 3 )}, .F.,, )









      aGet[ 7 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( if( lTiva( D():TiposIva( nView ), aTmp[ 7 ], @aTmp[ 92 ] ), ( aGet[ 49 ]:cText( aTmp[ 7 ] ), .T. ), .F. ) )},,,,,, .F., {||     ( lModIva() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .F.,,,,, {|Self|( BrwIva( Self, D():TiposIva( nView ), , .T. ) )}, nil, "LUPA",, )










      aGet[ 114 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 114 ], aTmp[ 114 ]:= u ) }, oFld:aDialogs[1],, cPinDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,, 126, )














      aGet[ 54 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 54 ], aTmp[ 54 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aGet[ 54 ], oSayVp1, aTmp[ 52 ], D():PropiedadesLineas( nView ) ), loaArt( cCodArt, aGet, aTmp, aTmpAlb, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBmp, oBrwPrp, oDlg, oSayLote, oBeneficioSobre, oTotal, nMode ), .F. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 54 ], oSayVp1, aTmp[ 52 ] ) )}, nil, "LUPA",, )

         aGet[ 54 ]:bChange   := {|| aGet[ 54 ]:Assign() }



      oSayPr1 := TSay():ReDefine( 221, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp1 := TGetHlp():ReDefine( 222, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 55 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aGet[ 55 ], oSayVp2, aTmp[ 53 ], D():PropiedadesLineas( nView ) ), loaArt( cCodArt, aGet, aTmp, aTmpAlb, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBmp, oBrwPrp, oDlg, oSayLote, oBeneficioSobre, oTotal, nMode ), .F. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 55 ], oSayVp2, aTmp[ 53 ] ) )}, nil, "LUPA",, )

         aGet[ 55 ]:bChange   := {|| aGet[ 55 ]:Assign() }



      oSayPr2 := TSay():ReDefine( 231, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp2 := TGetHlp():ReDefine( 232, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ 90 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 90 ], aTmp[ 90 ]:= u ) }, oFld:aDialogs[ 1 ],,, {||       ( oSayFam:cText( RetFld( aTmp[ 90  ], D():Familias( nView ) ) ), .T. )},,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwFamilia( aGet[ 90 ], oSayFam ) )}, nil, "LUPA",, )





      oSayFam := TGetHlp():ReDefine( 271, { | u | If( PCount()==0, cSayFam, cSayFam:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )



      oBrwPrp                       := IXBrowse():New( oFld:aDialogs[1] )

      oBrwPrp:nDataType             := 2

      oBrwPrp:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp:lHScroll              := .T.
      oBrwPrp:lVScroll              := .T.

      oBrwPrp:nMarqueeStyle         := 3
      oBrwPrp:lRecordSelector       := .F.
      oBrwPrp:lFastEdit             := .T.
      oBrwPrp:nFreeze               := 1
      oBrwPrp:lFooter               := .T.

      oBrwPrp:SetArray( {}, .F., 0, .F. )

      oBrwPrp:MakeTotals()

      oBrwPrp:CreateFromResource( 100 )





      oGetCelda := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, cGetCelda, cGetCelda:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 184, )

      oGetCelda:bValid              := {|| SearchProperty( oGetCelda, oBrwPrp ), .T. }













      aGet[ 110 ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 110 ], aTmp[ 110 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     ( uFieldEmpresa( "lUseBultos" ) .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,, 451, )










      aGet[ 9 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) )}, "N/W*",,,,, .F., {||     ( lUseCaj() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,, 141, )










      aGet[ 8 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,, 151, )








      aGet[ 13 ] := TGetHlp():ReDefine( 152, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[1],,, {||    ( D():GetObject( "UnidadMedicion", nView ):Existe( aGet[ 13 ], aGet[ 13 ]:oHelpText, "cNombre" ), ValidaMedicion( aTmp, aGet) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( D():GetObject( "UnidadMedicion", nView ):Buscar( aGet[ 13 ] ), ValidaMedicion( aTmp, aGet ) )}, nil, "LUPA",, 153 )











      aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ], aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,, 421, )

      aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ], aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,, 431, )

      aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ], aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,, 441, )

      aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetColor( 8388608 )








      aGet[ 108 ] := TGetHlp():ReDefine( 171, { | u | If( PCount()==0, aTmp[ 108 ], aTmp[ 108 ]:= u ) }, oFld:aDialogs[1],, cPirDiv, {||    ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal  ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 172, )








      aGet[ 10 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],, cPinDiv, {||    ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,,, )









        aGet[15] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[15], aTmp[15]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,,, )









      aGet[16] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[16], aTmp[16]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpAlb, aGet, oTotal ) ) }, .F., .T.,,,,,, nil,,, )







      aGet[17] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[17], aTmp[17]:= u ) }, oFld:aDialogs[1],, "@E 99.99",, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[ 5 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )















      aGet[ 111 ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ 111 ], aTmp[ 111 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      aGet[ 109 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 109 ], aTmp[ 109 ]:= u ) }, oFld:aDialogs[1],,, {||    (  cAlmacen( aGet[ 109 ], , aGet[ 109 ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 109 ], aGet[ 109 ]:oHelpText ) )}, nil, "LUPA", 332, 331 )








      aGet[ 58 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[1],,, {||    (  cAlmacen( aGet[ 58 ], , aGet[ 58 ]:oHelpText ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( Self, aGet[ 58 ]:oHelpText ) )}, nil, "LUPA",, 241 )





      oTotal := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, nTotal, nTotal:= u ) }, oFld:aDialogs[1],, cPirDiv,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 49 ] := TGetHlp():ReDefine( 80, { | u | If( PCount()==0, aTmp[ 49 ], aTmp[ 49 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )




        aGet[ 50 ] := TCheckBox():ReDefine( 90, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     .F.}, .F. )





      aGet[ 18 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[2],, cPinDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 19 ] := TCheckBox():ReDefine( 500, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )







      aGet[ 25 ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ 25 ], aTmp[ 25 ]:= u ) }, oFld:aDialogs[ 2 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 19 ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ 25 ]:bChange     := {|| aGet[ 25 ]:lValid() }
      aGet[ 25 ]:bValid      := {|| lCalPre( oBeneficioSobre[ 1 ]:nAt <= 1, aTmp[ 18 ], aTmp[ 19 ], aTmp[ 25 ], aTmp[ 7 ], aGet[ 37 ], aGet[ 43 ], nDinDiv ) }






      oBeneficioSobre[ 1 ] := TComboBox():ReDefine( 520, { | u | If( PCount()==0, cBeneficioSobre[ 1 ], cBeneficioSobre[ 1 ]:= u ) }, aBeneficioSobre, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oBeneficioSobre[ 1 ]",,,,,,, )

      oBeneficioSobre[ 1 ]:bChange  := {|| if( aTmp[ 19 ], aGet[ 25 ]:lValid(), aGet[ 37 ]:lValid() ) }






      aGet[ 37 ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||        ( !aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 37 ]:bChange  := {|| aGet[ 37 ]:lValid() }
      aGet[ 37 ]:bValid   := {|| CalBnfPts( oBeneficioSobre[ 1 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 37 ], aGet[ 25 ], aTmp[ 7 ], aGet[ 43 ], nDinDiv ) }






      aGet[ 43 ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ 43 ], aTmp[ 43 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||        ( aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 43 ]:bChange  := {|| aGet[ 43 ]:lValid() }
      aGet[ 43 ]:bValid   := {|| CalBnfIva( oBeneficioSobre[ 1 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 43 ], aGet[ 25 ], aTmp[ 7 ], aGet[ 37 ], nDinDiv ) }





      aGet[ 20 ] := TCheckBox():ReDefine( 550, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )







      aGet[ 26 ] := TGetHlp():ReDefine( 560, { | u | If( PCount()==0, aTmp[ 26 ], aTmp[ 26 ]:= u ) }, oFld:aDialogs[ 2 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 20 ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ 26 ]:bChange  := {|| aGet[ 26 ]:lValid() }
      aGet[ 26 ]:bValid   := {|| lCalPre( oBeneficioSobre[ 2 ]:nAt <= 1, aTmp[ 18 ], aTmp[ 20 ], aTmp[ 26 ], aTmp[ 7 ], aGet[ 38 ], aGet[ 44 ], nDinDiv ) }






      oBeneficioSobre[ 2 ] := TComboBox():ReDefine( 570, { | u | If( PCount()==0, cBeneficioSobre[ 2 ], cBeneficioSobre[ 2 ]:= u ) }, aBeneficioSobre, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oBeneficioSobre[ 2 ]",,,,,,, )

      oBeneficioSobre[ 2 ]:bChange  := {|| if( aTmp[ 20 ], aGet[ 26 ]:lValid(), aGet[ 38 ]:lValid() ) }






      aGet[ 38 ] := TGetHlp():ReDefine( 580, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( !aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 38 ]:bChange  := {|| aGet[ 38 ]:lValid() }
      aGet[ 38 ]:bValid   := {|| CalBnfPts( oBeneficioSobre[ 2 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 38 ], aGet[ 26 ], aTmp[ 7 ], aGet[ 44 ], nDinDiv ) }







      aGet[ 44 ] := TGetHlp():ReDefine( 590, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( aTmp[ 50 ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )

      aGet[ 44 ]:bChange     := {|| aGet[ 44 ]:lValid() }
      aGet[ 44 ]:bValid      := {|| CalBnfIva( oBeneficioSobre[ 2 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 44 ], aGet[ 26 ], aTmp[ 7 ], aGet[ 38 ], nDinDiv ) }





      aGet[ 21 ] := TCheckBox():ReDefine( 600, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )







      aGet[ 27 ] := TGetHlp():ReDefine( 610, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[ 2 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 21 ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ 27 ]:bChange  := {|| aGet[ 27 ]:lValid() }
      aGet[ 27 ]:bValid   := {|| lCalPre( oBeneficioSobre[ 3 ]:nAt <= 1, aTmp[ 18 ], aTmp[ 21 ], aTmp[ 27 ], aTmp[ 7 ], aGet[ 39 ], aGet[ 45 ], nDinDiv ) }






      oBeneficioSobre[ 3 ] := TComboBox():ReDefine( 620, { | u | If( PCount()==0, cBeneficioSobre[ 3 ], cBeneficioSobre[ 3 ]:= u ) }, aBeneficioSobre, oFld:aDialogs[ 2 ],,, {|Self|( if( aTmp[ 21 ], aGet[ 27 ]:lValid(), aGet[ 39 ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oBeneficioSobre[ 3 ]",,,,,,, )






      aGet[ 39 ] := TGetHlp():ReDefine( 630, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( !aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 39 ]:bChange  := {|| aGet[ 39 ]:lValid() }
      aGet[ 39 ]:bValid   := {|| CalBnfPts( oBeneficioSobre[ 3 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 39 ], aGet[ 27 ], aTmp[ 7 ], aGet[ 45 ], nDinDiv ) }






      aGet[ 45 ] := TGetHlp():ReDefine( 640, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 45 ]:bChange  := {|| aGet[ 45 ]:lValid()  }
      aGet[ 45 ]:bValid   := {|| CalBnfIva( oBeneficioSobre[ 3 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 45 ], aGet[ 27 ], aTmp[ 7 ], aGet[ 39 ], nDinDiv ) }





      aGet[ 22 ] := TCheckBox():ReDefine( 650, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )







      aGet[ 28 ] := TGetHlp():ReDefine( 660, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[ 2 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 22 ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ 28 ]:bChange  := {|| aGet[ 28 ]:lValid() }
      aGet[ 28 ]:bValid   := {|| lCalPre( oBeneficioSobre[ 4 ]:nAt <= 1, aTmp[ 18 ], aTmp[ 22 ], aTmp[ 28 ], aTmp[ 7 ], aGet[ 40 ], aGet[ 46 ], nDinDiv ) }






      oBeneficioSobre[ 4 ] := TComboBox():ReDefine( 670, { | u | If( PCount()==0, cBeneficioSobre[ 4 ], cBeneficioSobre[ 4 ]:= u ) }, aBeneficioSobre, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oBeneficioSobre[ 4 ]",,,,,,, )

      oBeneficioSobre[ 4 ]:bChange  := {|| if( aTmp[ 22 ], aGet[ 28 ]:lValid(), aGet[ 40 ]:lValid() ) }






      aGet[ 40 ] := TGetHlp():ReDefine( 680, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( !aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 40 ]:bChange  := {|| aGet[ 40 ]:lValid()  }
      aGet[ 40 ]:bValid   := {|| CalBnfPts( oBeneficioSobre[ 4 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 40 ], aGet[ 28 ], aTmp[ 7 ], aGet[ 46 ], nDinDiv ) }






      aGet[ 46 ] := TGetHlp():ReDefine( 690, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 46 ]:bChange  := {|| aGet[ 46 ]:lValid() }
      aGet[ 46 ]:bValid   := {|| CalBnfIva( oBeneficioSobre[ 4 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 46 ], aGet[ 28 ], aTmp[ 7 ], aGet[ 40 ], nDinDiv ) }





      aGet[ 23 ] := TCheckBox():ReDefine( 700, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )







      aGet[ 29 ] := TGetHlp():ReDefine( 710, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[ 2 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 23 ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ 29 ]:bChange  := {|| aGet[ 29 ]:lValid() }
      aGet[ 29 ]:bValid   := {|| lCalPre( oBeneficioSobre[ 5 ]:nAt <= 1, aTmp[ 18 ], aTmp[ 23 ], aTmp[ 29 ], aTmp[ 7 ], aGet[ 41 ], aGet[ 47 ], nDinDiv ) }






      oBeneficioSobre[ 5 ] := TComboBox():ReDefine( 720, { | u | If( PCount()==0, cBeneficioSobre[ 5 ], cBeneficioSobre[ 5 ]:= u ) }, aBeneficioSobre, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oBeneficioSobre[ 5 ]",,,,,,, )

      oBeneficioSobre[ 5 ]:bChange  := {|| if( aTmp[ 23 ], aGet[ 29 ]:lValid(), aGet[ 41 ]:lValid() ) }






      aGet[ 41 ] := TGetHlp():ReDefine( 730, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( !aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 41 ]:bChange  := {|| aGet[ 41 ]:lValid() }
      aGet[ 41 ]:bValid   := {|| CalBnfPts( oBeneficioSobre[ 5 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 41 ], aGet[ 29 ], aTmp[ 7 ], aGet[ 47 ], nDinDiv ) }






      aGet[ 47 ] := TGetHlp():ReDefine( 740, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 47 ]:bChange  := {|| aGet[ 47 ]:lValid() }
      aGet[ 47 ]:bValid   := {|| CalBnfIva( oBeneficioSobre[ 5 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 47 ], aGet[ 29 ], aTmp[ 7 ], aGet[ 41 ], nDinDiv ) }





      aGet[ 24 ] := TCheckBox():ReDefine( 750, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )








      aGet[ 30 ] := TGetHlp():ReDefine( 760, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[ 2 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 24 ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

      aGet[ 30 ]:bChange  := {|| aGet[ 30 ]:lValid() }
      aGet[ 30 ]:bValid   := {|| lCalPre( oBeneficioSobre[ 6 ]:nAt <= 1, aTmp[ 18 ], aTmp[ 24 ], aTmp[ 30 ], aTmp[ 7 ], aGet[ 42 ], aGet[ 48 ], nDinDiv ) }






      oBeneficioSobre[ 6 ] := TComboBox():ReDefine( 770, { | u | If( PCount()==0, cBeneficioSobre[ 6 ], cBeneficioSobre[ 6 ]:= u ) }, aBeneficioSobre, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oBeneficioSobre[ 6 ]",,,,,,, )

      oBeneficioSobre[ 6 ]:bChange  := {|| if( aTmp[ 24 ], aGet[ 30 ]:lValid(), aGet[ 42 ]:lValid() ) }






      aGet[ 42 ] := TGetHlp():ReDefine( 780, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( !aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 42 ]:bChange  := {|| aGet[ 42 ]:lValid() }
      aGet[ 42 ]:bValid   := {|| CalBnfPts( oBeneficioSobre[ 6 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 42 ], aGet[ 30 ], aTmp[ 7 ], aGet[ 48 ], nDinDiv ) }






      aGet[ 48 ] := TGetHlp():ReDefine( 790, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[ 2 ],, cPinDiv,,,,,,, .F., {||     ( aTmp[ 50 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      aGet[ 48 ]:bChange  := {|| aGet[ 48 ]:lValid() }
      aGet[ 48 ]:bValid   := {|| CalBnfIva( oBeneficioSobre[ 6 ]:nAt <= 1, aTmp[ 50 ], aTmp[ 18 ], aTmp[ 48 ], aGet[ 30 ], aTmp[ 7 ], aGet[ 42 ], nDinDiv ) }










      aGet[ 59 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[ 2 ],, { 350, 351, 352 },,,,, .F., {||     ( nMode <> 3 )}, )





      aGet[ 51 ] := TCheckBox():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 .AND. lActCos() )}, .F. )





      aGet[ 100 ] := TCheckBox():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 100 ], aTmp[ 100 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||        ( nMode <> 3 )}, .F. )






      aGet[ 112 ] := TGetHlp():ReDefine( 361, { | u | If( PCount()==0, aTmp[ 112 ], aTmp[ 112 ]:= u ) }, oFld:aDialogs[2],, "@R #/#########/##",,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 105 ], aTmp[ 105 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 119 ] := TGetHlp():ReDefine( 371, { | u | If( PCount()==0, aTmp[ 119 ], aTmp[ 119 ]:= u ) }, oFld:aDialogs[2],, "@R 99:99:99", {||    ( if( !validTime( aTmp[ 119 ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 115 ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 115 ], aTmp[ 115 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 116 ] := TGetHlp():ReDefine( 371, { | u | If( PCount()==0, aTmp[ 116 ], aTmp[ 116 ]:= u ) }, oFld:aDialogs[3],, "@R 99:99:99", {||    ( validTime( aTmp[ 116 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 117 ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ 117 ], aTmp[ 117 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 118 ] := TGetHlp():ReDefine( 381, { | u | If( PCount()==0, aTmp[ 118 ], aTmp[ 118 ]:= u ) }, oFld:aDialogs[3],, "@R 99:99:99", {||    ( validTime( aTmp[ 118 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 93 ] := TMultiGet():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )












      aGet[ 120 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 120 ], aTmp[ 120 ]:= u ) }, oFld:aDialogs[4],,, {||    ( oCentroCoste:Existe( aGet[ 120 ], aGet[ 120 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 120 ] ) )}, nil, "LUPA",, 411 )






      oTipoCtrCoste := TComboBox():ReDefine( 140, { | u | If( PCount()==0, cTipoCtrCoste, cTipoCtrCoste:= u ) }, aTipoCtrCoste, oFld:aDialogs[4],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oTipoCtrCoste",,,,,,, )

         oTipoCtrCoste:bChange   := {|| clearGet( aGet[ 126 ] ), loadGet( aGet[ 126 ], cTipoCtrCoste ) }







      aGet[ 126 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 126 ], aTmp[ 126 ]:= u ) }, oFld:aDialogs[4],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 160 )





      oBtn := TButton():ReDefine( 1, {||( SaveDeta( aTmp, aGet, oDlg, oFld, oBrw, nMode, oTotal, oGet1, aTmpAlb, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBrwPrp, oBmp, oSayLote, oBtn ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 9, {||( GoHelp() )}, oDlg,,, .F.,,,, .F. )




      oBtnNumerosSerie := TButton():ReDefine( 552, {||( EditarNumerosSerie( aTmp, nMode ) )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3
         oDlg:AddFastKey( 117, {|| oBtnNumerosSerie:Click() } )
         oDlg:AddFastKey( 116, {|| oBtn:SetFocus(), oBtn:Click() } )
         oDlg:AddFastKey( 120, {|| oLinDetCamposExtra:Play( if( nMode == 1, "", Str( ( dbfTmp )->( OrdKeyNo() ) ) ) ) } )
      end

      oDlg:AddFastKey ( 112, {|| GoHelp() } )



      oDlg:bStart := {|| SetDlgMode( aGet, aTmp, aTmpAlb, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBrwPrp, oBmp, oDlg, oSayLote, oTotal ), loadGet( aGet[ 126 ], cTipoCtrCoste ), aGet[ 126 ]:lValid(), if( !Empty( cCodArtEnt ), aGet[ 4 ]:lValid(), ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( menuEdtDet( aGet[ 4 ], oDlg, if( nMode == 1, "", Str( ( dbfTmp )->( OrdKeyNo() ) ) ) ) )}, oDlg:bRClicked,,, )

   if !Empty( oDetMenu )
      oDetMenu:End()
   end

RETURN ( oDlg:nResult == 1 )



Static FUNCTION SetDlgMode( aGet, aTmp, aTmpAlb, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBrwPrp, oBmp, oDlg, oSayLote, oTotal )

   local cCodArt        := Left( aGet[ 4 ]:VarGet(), 18 )

   if !uFieldEmpresa( "lUseBultos" )
      aGet[ 110 ]:Hide()
   else
      if !Empty( aGet[ 110 ] )
         aGet[ 110 ]:SetText( uFieldempresa( "cNbrBultos" ) )
      end
   end

   if !lUseCaj()
      aGet[ 9 ]:Hide()
   else
      aGet[ 9 ]:SetText( cNombreCajas() )
   end

   aGet[ 8 ]:SetText( cNombreUnidades() )

   if Empty( aTmp[58 ] )
      aTmp[ 58 ]  := aTmpAlb[ 7 ]
   end

   if Empty( aTmp[ 109 ] )
      aTmp[ 109 ]  := aTmpAlb[ 61 ]
   end

   if uFieldEmpresa( "lShowOrg" )
      aGet[ 109 ]:Show()
   else
      aGet[ 109 ]:Hide()
   end

   if aGet[ 108 ] <> nil
      if !uFieldEmpresa( "lUsePnt", .F. )
         aGet[ 108 ]:Hide()
      end
   end

   aGet[ 100 ]:Show()
   aGet[ 112    ]:Show()

   oBrwPrp:Hide()
   oGetCelda:Hide()

   oSayPr1:SetText( "" )
   oSayVp1:SetText( "" )

   oSayPr2:SetText( "" )
   oSayVp2:SetText( "" )

   do case
   case nMode == 1

      aGet[ 4    ]:show()
      aGet[ 4    ]:cText( Space( 200 ) )

      aGet[ 6]:show()
      aGet[ 14 ]:Hide()
      aGet[ 62   ]:Hide()
      aGet[ 101 ]:Hide()
      aGet[ 9 ]:cText( 1 )
      aGet[ 8]:cText( 1 )
      aGet[ 109 ]:cText( aTmpAlb[ 61 ] )
      aGet[ 58 ]:cText( aTmpAlb[ 7 ] )

      aGet[ 7    ]:cText( nIva( D():TiposIva( nView ), cDefIva() ) )
      aGet[ 49 ]:cText( nIva( D():TiposIva( nView ), cDefIva() ) )

      aTmp[ 92    ]  := nReq( D():TiposIva( nView ), cDefIva() )
      aTmp[ 63 ]  := nLastNum( dbfTmp )
      aTmp[ 124 ]:= nLastNum( dbfTmp, "nPosPrint" )
      aTmp[ 62   ]  := Space( 64 )

      oSayLote:Hide()

      aGet[ 120 ]:cText( aTmpAlb[ 64 ] )

      if !empty( aGet[ 120 ] )
         aGet[ 120 ]:lValid()
      endif

      cTipoCtrCoste        := "Centro de coste"
      oTipoCtrCoste:Refresh()
      clearGet( aGet[ 126 ] )

   case nMode <> 1 .AND. empty( cCodArt )

      aGet[ 4    ]:Hide()
      aGet[ 6]:Hide()
      aGet[ 14 ]:show()
      aGet[ 62   ]:Hide()
      aGet[ 101 ]:Hide()

      oSayLote:Hide()

      if !empty( aGet[ 120 ] )
         aGet[ 120 ]:lValid()
      endif

   case nMode <> 1 .AND. !empty( cCodArt )

      aGet[ 4    ]:show()
      aGet[ 6]:show()
      aGet[ 14 ]:Hide()

      if aTmp[ 60   ]
         aGet[ 62   ]:Show()
         aGet[ 101 ]:Show()
         oSayLote:Show()
      else
         aGet[ 62   ]:Hide()
         aGet[ 101 ]:Hide()
         oSayLote:Hide()
      end

      if !empty( aGet[ 120 ] )
         aGet[ 120 ]:lValid()
      endif

   end

   lCalcDeta( aTmp, aTmpAlb, aGet, oTotal )

   IF !empty( aTmp[ 52 ] )
      aGet[ 54 ]:Show()
      aGet[ 54 ]:lValid()
      oSayPr1:Show()
      oSayPr1:SetText( retProp( aTmp[52], D():Propiedades( nView ) ) )
      oSayVp1:Show()
   ELSE
      aGet[ 54 ]:Hide()
      oSayPr1:Hide()
      oSayVp1:Hide()
   end

   IF !empty( aTmp[ 53 ] )
      aGet[ 55 ]:Show()
      aGet[ 55 ]:lValid()
      oSayPr2:Show()
      oSayPr2:SetText( retProp( aTmp[ 53 ], D():Propiedades( nView ) ) )
      oSayVp2:Show()
   ELSE
      aGet[ 55 ]:Hide()
      oSayPr2:Hide()
      oSayVp2:Hide()
   end



   aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
   aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
   aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()

   if D():GetObject( "UnidadMedicion", nView ):oDbf:Seek( aTmp[ 13 ] )

      if D():GetObject( "UnidadMedicion", nView ):oDbf:nDimension >= 1 .AND. !Empty( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim1 )
         aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim1 )
         aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
      end

      if D():GetObject( "UnidadMedicion", nView ):oDbf:nDimension >= 2 .AND. !Empty( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim2 )
         aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim2 )
         aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
      end

      if D():GetObject( "UnidadMedicion", nView ):oDbf:nDimension >= 3 .AND. !Empty( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim3 )
         aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim3 )
         aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
      end

   end

   aGet[ 109  ]:lValid()
   aGet[ 58  ]:lValid()
   aGet[ 13  ]:lValid()
   aGet[ 90  ]:lValid()
   aGet[ 4     ]:SetFocus()








RETURN .T.



STATIC FUNCTION SaveDeta( aTmp, aGet, oDlg, oFld, oBrw, nMode, oTotal, oGet, aTmpAlb, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBrwPrp, oBmp, oSayLote, oBtn, oBtnSer )

   local n, i

   oBtn:SetFocus()

   if !aGet[ 4 ]:lValid()
      RETURN nil
   end





   if Empty( aTmp[ 58 ] )
      MsgStop( "Código de almacén no puede estar vacio" )
      aGet[ 58 ]:SetFocus()
      RETURN nil
   end

   if ( aTmp[ 58 ] == aTmp[ 109 ] )
      MsgStop( "El almacén de origen debe ser distinto al almacén de destino" )
      aGet[ 109 ]:SetFocus()
      RETURN nil
   end

   if !cAlmacen( aGet[ 58 ] )
      MsgStop( "Código de almacén no encontrado" )
      RETURN nil
   end

   aTmp[ 121 ]  := aTmpAlb[ 16 ]
   aTmp[ 125 ]  := cTipoCtrCoste





   if ( nMode == 1 ) .AND. ( aTmp[ 106 ] )

      if ( aTmp[ 107 ] )

         AutoNumerosSerie( aTmp, nMode )

      elseif !( dbfTmpSer )->( dbSeek( Str( aTmp[ 63 ], 4 ) + aTmp[ 4 ] ) )

         msgStop( "Tiene que introducir números de serie para este artículo." )

         EditarNumerosSerie( aTmp, nMode )

         RETURN .F.

      end

   end



   if aTmp[ 60 ] .AND. nMode == 1
      saveLoteActual( aTmp[ 4 ], aTmp[ 62 ], nView )
   end

   if nMode == 1

      if !Empty( oBrwPrp:Cargo )

         for n := 1 to len( oBrwPrp:Cargo )

            for i := 1 to len( oBrwPrp:Cargo[ n ] )

               if !Empty( oBrwPrp:Cargo[ n, i ] )

                  if IsNum( oBrwPrp:Cargo[ n, i ]:Value ) .AND. oBrwPrp:Cargo[ n, i ]:Value <> 0

                     aTmp[ 63 ]     := nLastNum( dbfTmp )
                     aTmp[ 124 ]   := nLastNum( dbfTmp, "nPosPrint" )
                     aTmp[ 8]     := oBrwPrp:Cargo[ n, i ]:Value
                     aTmp[ 52 ]     := oBrwPrp:Cargo[ n, i ]:cCodigoPropiedad1
                     aTmp[ 54 ]     := oBrwPrp:Cargo[ n, i ]:cValorPropiedad1
                     aTmp[ 53 ]     := oBrwPrp:Cargo[ n, i ]:cCodigoPropiedad2
                     aTmp[ 55 ]     := oBrwPrp:Cargo[ n, i ]:cValorPropiedad2

                     if oBrwPrp:Cargo[ n, i ]:nPrecioCompra <> 0
                        aTmp[ 10 ]  := oBrwPrp:Cargo[ n, i ]:nPrecioCompra
                     end

                     WinGather( aTmp, aGet, dbfTmp, oBrw, nMode, nil, .F. )

                  end

               end

            next

         next

         aCopy( dbBlankRec( dbfTmp ), aTmp )

         aEval( aGet, {| o, i | if( "GET" $ o:ClassName(), o:cText( aTmp[ i ] ), ) } )

      else

         WinGather( aTmp, aGet, dbfTmp, oBrw, nMode )

      end

      if lEntCon()

         SetDlgMode( aGet, aTmp, aTmpalb, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBrwPrp, oBmp, oDlg, oSayLote, oTotal )

         nTotAlbPrv( nil, D():AlbaranesProveedores( nView ), dbfTmp, D():TiposIva( nView ), D():Divisas( nView ), aTmpAlb )

      else

         oDlg:End( 1 )

      end

   else

      WinGather( aTmp, aGet, dbfTmp, oBrw, nMode )

      oDlg:end( 1 )

   end

   if nMode == 1
      oLinDetCamposExtra:SaveTemporalAppend( ( dbfTmp )->( OrdKeyNo() ) )
   end

   cOldCodArt        := ""
   cOldPrpArt        := ""
   cOldUndMed        := ""

   if !Empty( aGet[ 13 ] )
      aGet[ 13 ]:lValid()
   end

   if !Empty( oBrwPrp )
      oBrwPrp:Cargo  := nil
   end

   if oGet <> nil
      oGet:cText( Space( 18 ) )
      oGet:SetFocus()
   end

RETURN NIL



Static FUNCTION EdtInc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpAlb )

   local oDlg

   if nMode == 1
      aTmp[ 1  ] := aTmpAlb[ 1 ]
      aTmp[ 2  ] := aTmpAlb[ 2 ]
      aTmp[ 3  ] := aTmpAlb[ 3 ]
      if IsMuebles()
         aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]  := .T.
      end
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "incidencias de albaranes a proveedores", "INCIDENCIA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static FUNCTION EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de albarán a proveedor", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | *.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION PrnSerie( oBrw )

    local oDlg
   local oFmtDoc
   local cFmtDoc     := cFormatoDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) )
   local oSayFmt
   local cSayFmt
   local oSerIni
   local oSerFin
   local cSerIni     := ( D():AlbaranesProveedores( nView ) )->cSerAlb
   local cSerFin     := ( D():AlbaranesProveedores( nView ) )->cSerAlb
   local nDocIni     := ( D():AlbaranesProveedores( nView ) )->nNumAlb
   local nDocFin     := ( D():AlbaranesProveedores( nView ) )->nNumAlb
   local cSufIni     := ( D():AlbaranesProveedores( nView ) )->CSUFALB
   local cSufFin     := ( D():AlbaranesProveedores( nView ) )->CSUFALB
   local oPrinter
   local cPrinter    := ImpresoraDefectoUsuario()
   local lCopiasPre  := .T.
   local lInvOrden   := .F.
   local oNumCop
   local nNumCop     := if( nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():AlbaranesProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) )
   local oRango
   local nRango      := 1
   local dFecDesde   := CtoD( "01/01/" + Str( Year( Date() ) ) )
   local dFecHasta   := Date()

   if Empty( cFmtDoc )
      cFmtDoc        := cSelPrimerDoc( "AP" )
   end

   cSayFmt           := cNombreDoc( cFmtDoc )

   oDlg = TDialog():New(,,,, "Imprimir series de albaranes", "IMPSERIES",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



   oRango := TRadMenu():Redefine( { | u | If( PCount()==0, nRango, nRango:= u ) }, oDlg,, { 201, 202 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, dFecDesde, dFecDesde:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, dFecHasta, dFecHasta:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )



   TCheckBox():ReDefine( 500, { | u | If( PCount()==0, lInvOrden, lInvOrden:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 170, { | u | If( PCount()==0, lCopiasPre, lCopiasPre:= u ) }, oDlg,,,,,,, .F.,, .F. )









   oNumCop := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, nNumCop, nNumCop:= u ) }, oDlg,, "999999999", {||    nNumCop > 0},,,,,, .F., {||     !lCopiasPre},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )







   oFmtDoc := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cFmtDoc, cFmtDoc:= u ) }, oDlg,,, {||    ( cDocumento( oFmtDoc, oSayFmt, D():Documentos( nView ) ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oFmtDoc, oSayFmt, "AP" ) )}, nil, "LUPA",, )





   oSayFmt := TGetHlp():ReDefine( 91, { | u | If( PCount()==0, cSayFmt, cSayFmt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 92, "gc_document_text_pencil_12",,,,,{|| EdtDocumento( cFmtDoc ) }, oDlg, .F., , .F.,  )




   oPrinter := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cPrinter, cPrinter:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 161, "gc_printer2_check_16",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .F., , .F.,  )





   TButton():ReDefine( 1, {||(  StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) } )

   oDlg:bStart := { || oSerIni:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

    oBrw:refresh()

RETURN NIL



STATIC FUNCTION StartPrint( cFmtDoc, cDocIni, cDocFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta )

   local nCopyProvee
   local nRecno
   local nOrdAnt

   oDlg:disable()

   if nRango == 1

      nRecno      := ( D():AlbaranesProveedores( nView ) )->( Recno() )
      nOrdAnt     := ( D():AlbaranesProveedores( nView ) )->( OrdSetFocus( "NNUMALB" ) )

      if !lInvOrden

         ( D():AlbaranesProveedores( nView ) )->( dbSeek( cDocIni, .T. ) )


         while ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb >= cDocIni .AND.  ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb <= cDocFin

               lChgImpDoc( D():AlbaranesProveedores( nView ) )

            if lCopiasPre

               nCopyProvee := if( nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():AlbaranesProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) )

               GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nCopyProvee )

            else

               GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nNumCop )

            end

         ( D():AlbaranesProveedores( nView ) )->( dbSkip() )

         end

      else

         ( D():AlbaranesProveedores( nView ) )->( dbSeek( cDocFin ) )



         while ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb >= cDocIni .AND. ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb <= cDocFin .AND. !( D():AlbaranesProveedores( nView ) )->( Bof() )

               lChgImpDoc( D():AlbaranesProveedores( nView ) )

            if lCopiasPre

               nCopyProvee := if( nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():AlbaranesProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) )

               GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nCopyProvee )

            else

               GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nNumCop )

            end

         ( D():AlbaranesProveedores( nView ) )->( dbSkip( -1 ) )

         end

      end

   else

      nRecno      := ( D():AlbaranesProveedores( nView ) )->( Recno() )
      nOrdAnt     := ( D():AlbaranesProveedores( nView ) )->( OrdSetFocus( "DFECALB" ) )

      if !lInvOrden

         ( D():AlbaranesProveedores( nView ) )->( dbGoTop() )

         while !( D():AlbaranesProveedores( nView ) )->( Eof() )

            if ( D():AlbaranesProveedores( nView ) )->dFecAlb >= dFecDesde .AND. ( D():AlbaranesProveedores( nView ) )->dFecAlb <= dFecHasta

               lChgImpDoc( D():AlbaranesProveedores( nView ) )

               if lCopiasPre

                  nCopyProvee := if( nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():AlbaranesProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) )

                  GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nCopyProvee )

               else

                  GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nNumCop )

               end

            end

         ( D():AlbaranesProveedores( nView ) )->( dbSkip() )

         end

      else

         ( D():AlbaranesProveedores( nView ) )->( dbGoBottom() )

         while !( D():AlbaranesProveedores( nView ) )->( Bof() )

            if ( D():AlbaranesProveedores( nView ) )->dFecAlb >= dFecDesde .AND. ( D():AlbaranesProveedores( nView ) )->dFecAlb <= dFecHasta

               lChgImpDoc( D():AlbaranesProveedores( nView ) )

               if lCopiasPre

                  nCopyProvee := if( nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():AlbaranesProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) )

                  GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nCopyProvee )

               else

                  GenAlbPrv( 1, "Imprimiendo documento : " + ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb, cFmtDoc, cPrinter, nNumCop )

               end

            end

         ( D():AlbaranesProveedores( nView ) )->( dbSkip( -1 ) )

         end

      end

   end

   ( D():AlbaranesProveedores( nView ) )->( ordSetFocus( nOrdAnt ) )
   ( D():AlbaranesProveedores( nView ) )->( dbGoTo( nRecNo ) )

   oDlg:enable()

RETURN NIL



STATIC FUNCTION GenAlbPrv( nDevice, cCaption, cCodDoc, cPrinter, nCopies )

   local oDevice
   local nAlbaran

   if ( D():AlbaranesProveedores( nView ) )->( Lastrec() ) == 0
      RETURN nil
   end

   nAlbaran             := ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->CSUFALB

   If( nDevice == nil, nDevice := 1, ) ;
   If( cCaption == nil, cCaption := "Imprimiendo albarán", ) ;
   If( cCodDoc == nil, cCodDoc := cFormatoDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ), ) ;
   If( nCopies == nil, nCopies := if( nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():AlbaranesProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) ), ) ;

   if Empty( cCodDoc )
      cCodDoc           := cFirstDoc( "AP", D():Documentos( nView ) )
   end

   if !lExisteDocumento( cCodDoc, D():Documentos( nView ) )
      RETURN nil
   end





   if lVisualDocumento( cCodDoc, D():Documentos( nView ) )
      PrintReportAlbPrv( nDevice, nCopies, cPrinter )
   else
      msgStop( "El formato ya no es soportado" )
   end

   lChgImpDoc( D():AlbaranesProveedores( nView ) )

RETURN NIL



static FUNCTION nGenAlbPrv( nDevice, cTitle, cCodDoc, cPrinter, nCopy )

   local nImpYet     := 1
   local nCopyClient := Retfld( ( D():AlbaranesProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" )

   If( nDevice == nil, nDevice := 1, ) ;
   If( nCopy == nil, nCopy := Max( nCopyClient, nCopiasDocumento( ( D():AlbaranesProveedores( nView ) )->cSerAlb, "nAlbPrv", D():Contadores( nView ) ) ), ) ;

   nCopy             := Max( nCopy, 1 )

   while nImpYet <= nCopy
      GenAlbPrv( nDevice, cTitle, cCodDoc, cPrinter )
      nImpYet++
   end


   lChgImpDoc( D():AlbaranesProveedores( nView ) )

RETURN nil



STATIC FUNCTION EPage( oInf, cCodDoc )

   private nPagina      := oInf:nPage
    private lEnd            := oInf:lFinish

   PrintItems( cCodDoc, oInf )

RETURN NIL






static FUNCTION nTotalUnd( nAlbaran, cPicUnd )

   local nTotUnd  := 0

   if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( nAlbaran ) )
      while  ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresLineas( nView ) )->CSUFALB == nAlbaran .AND. ( D():AlbaranesProveedoresLineas( nView ) )->( !eof() )
         nTotUnd  += nTotNAlbPrv( D():AlbaranesProveedoresLineas( nView ) )
         ( D():AlbaranesProveedoresLineas( nView ) )->( dbSkip() )
      end
   end

RETURN ( Trans( nTotUnd, cPicUnd ) )



Static FUNCTION RecalculaTotal( aTmp )

   nTotAlbPrv( nil, D():AlbaranesProveedores( nView ), dbfTmp, D():TiposIva( nView ), D():Divisas( nView ), aTmp )

   if oBrwIva <> nil
        oBrwIva:SetArray( aTotIva, , , .F. )
      oBrwIva:Refresh()
   end

   oGetNet:SetText( Trans( nTotNet, cPirDiv ) )

   oGetIva:SetText( Trans( nTotIva, cPirDiv ) )

   oGetReq:SetText( Trans( nTotReq, cPirDiv ) )

   oGetTot:SetText( Trans( nTotAlb, cPirDiv ) )

   oGetIvm:SetText( Trans( nTotIvm, cPirDiv ) )

RETURN .T.



Static FUNCTION GetArtPrv( cRefPrv, cCodPrv, aGet )

   local nOrdAnt  := ( D():ProveedorArticulo( nView ) )->( ordSetFocus( "cRefPrv" ) )

   if Empty( cRefPrv )

      RETURN .T.

   else

      if ( D():ProveedorArticulo( nView ) )->( dbSeek( cCodPrv + cRefPrv ) )

         aGet[ 4 ]:cText( ( D():ProveedorArticulo( nView ) )->cCodArt )
            aGet[ 4 ]:lValid()

      else

         msgStop( "Referencia de proveedor no encontrada" )

      end

        ( D():ProveedorArticulo( nView ) )->( ordSetFocus( nOrdAnt ) )

   end

RETURN .T.



Static FUNCTION LoaArt( cCodArt, aGet, aTmp, aTmpAlb, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oBmp, oBrwPrp, oDlg, oSayLote, oBeneficioSobre, oTotal, nMode )

   local hHas128
   local cLote       := Space( 64 )
   local dFechaCaducidad
   local nIva
   local nOrdAnt
   local cCodFam
   local nPreCos
   local cCodPrv
   local cPrpArt
   local nPreCom
   local lChgCodArt
   local lSeek       := .F.

   nIva              := 0
   nPreCom           := 0
   cCodPrv           := aTmpAlb[ 6 ]
   cPrpArt           := aTmp[ 52 ] + aTmp[ 53 ] + aTmp[ 54 ] + aTmp[ 55 ]
   lChgCodArt        := ( Rtrim( cOldCodArt ) <> Rtrim( cCodArt ) .OR. Rtrim( cOldPrpArt ) <> Rtrim( cPrpArt ) )

   if Empty( cCodArt )

      if lRetCodArt()
         MsgStop( "No se pueden añadir lineas sin codificar" )
         RETURN .F.
      end

      aGet[ 7    ]:bWhen  := {|| .T. }

      aGet[ 6]:Hide()

      aGet[ 14 ]:Show()
      aGet[ 14 ]:SetFocus()

      if !Empty( oBrwPrp )
         oBrwPrp:Hide()
      end

      if !Empty( oGetCelda )
         oGetCelda:Hide()
      end

   else

      if lModIva()
         aGet[ 7 ]:bWhen  := {|| .T. }
      else
         aGet[ 7 ]:bWhen  := {|| .F. }
      end

      aGet[ 4     ]:show()
      aGet[ 6 ]:show()
      aGet[ 14  ]:Hide()





      if Len( Alltrim( cCodArt ) ) > 18

         hHas128              := GetHashGs128( cCodArt )
         if !Empty( hHas128 )
            cCodArt           := uGetCodigo( hHas128, "01" )
            cLote             := Upper( uGetCodigo( hHas128, "10" ) )
            dFechaCaducidad   := uGetCodigo( hHas128, "15" )
            if Empty( dFechaCaducidad )
               dFechaCaducidad   := uGetCodigo( hHas128, "17" )
            end
         end

      end

      if lIntelliArtciculoSearch( cCodArt, cCodPrv, D():Articulos( nView ), D():ProveedorArticulo( nView ), D():ArticulosCodigosBarras( nView ) )

         if ( lChgCodArt )

            if ( D():Articulos( nView ) )->lObs
               MsgStop( "Artículo catalogado como obsoleto" )
               RETURN .F.
            end

            oFld:aEnable         := { .T., .T., .T., .T. }
            oFld:Refresh()

            EliminarNumeroSerie( aTmp )

            cCodArt              := ( D():Articulos( nView ) )->Codigo

            aGet[ 4 ]:cText( Padr( cCodArt, 200 ) )
            aTmp[ 4 ]        := cCodArt



            aTmp[ 122 ]     := ( D():Articulos( nView ) )->cRefAux
            aTmp[ 123 ]    := ( D():Articulos( nView ) )->cRefAux2





            if aTmpAlb[ 56 ] <= 1

               nIva                 := nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )

               aGet[ 7    ]:cText( nIva )
               aGet[ 49 ]:cText( nIva )
               aGet[ 50 ]:Click( ( D():Articulos( nView ) )->lIvaInc )

               aTmp[ 92    ]  := nReq( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )

            end

            aGet[ 6 ]:cText( ( D():Articulos( nView ) )->Nombre )



            aTmp[ 113 ]     := ( D():Articulos( nView ) )->cCodImp

            oNewImp:setCodeAndValue( aTmp[ 113 ], aGet[ 114 ] )

            if ( D():Articulos( nView ) )->nCajEnt <> 0
               aGet[ 9 ]:cText( ( D():Articulos( nView ) )->nCajEnt )
            end

            if ( D():Articulos( nView ) )->nUniCaja <> 0
               aGet[ 8 ]:cText( ( D():Articulos( nView ) )->nUniCaja )
            end



            aTmp[ 60 ]       := ( D():Articulos( nView ) )->lLote

            if ( D():Articulos( nView ) )->lLote





               if empty( cLote ) .AND. uFieldempresa( "lLoaUltLot" )
                  if !Empty( ( D():Articulos( nView ) )->cLote )
                     cLote       := ( D():Articulos( nView ) )->cLote
                  else
                     cLote       := Space( 64 )
                  end
               end

               oSayLote:Show()
               aGet[ 62   ]:Show()
               aGet[ 62   ]:cText( cLote )





               if Empty( dFechaCaducidad )
                  dFechaCaducidad      := StocksModel():getFechaCaducidad( aTmp[ 4 ], aTmp[ 52 ], aTmp[ 53 ], aTmp[ 54 ], aTmp[ 55 ], aTmp[ 62 ] )
               end

               aGet[ 101 ]:Show()
               if Empty( aTmp[ 101 ] )
                  aGet[ 101 ]:cText( dFechaCaducidad )
               end

            else

               oSayLote:Hide()
               aGet[ 62   ]:Hide()
               aGet[ 101 ]:Hide()

            end



            if ( D():Articulos( nView ) )->lMosCom .AND. !Empty( ( D():Articulos( nView ) )->mComent )
               MsgStop( Trim( ( D():Articulos( nView ) )->mComent ) )
            end






            aTmp[ 106 ]     := ( D():Articulos( nView ) )->lNumSer
            aTmp[ 107 ]     := ( D():Articulos( nView ) )->lAutSer





            cCodFam              := ( D():Articulos( nView ) )->Familia
            if !Empty( cCodFam )
               aTmp[ 90 ]  := cCodFam
               aTmp[ 91 ]  := cGruFam( cCodFam, D():Familias( nView ) )
            end





            aTmp[ 59 ]     := ( D():Articulos( nView ) )->nCtlStock





            if ( D():Articulos( nView ) )->lKitArt

               aTmp[ 65 ]     := ( D():Articulos( nView ) )->lKitArt
               aTmp[ 68 ]     := lImprimirCompuesto( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
               aTmp[ 67 ]     := lPreciosCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )

               if lStockCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
                  aTmp[ 59 ]  := ( D():Articulos( nView ) )->nCtlStock
               else
                  aTmp[ 59 ]  := 3
               end

            else

               aTmp[ 68 ]     := .F.
               aTmp[ 59 ]     := ( D():Articulos( nView ) )->nCtlStock

            end





            nOrdAnt                 := ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( "cCodPrv" ) )

            if ( D():ProveedorArticulo( nView ) )->( dbSeek( cCodPrv + cCodArt ) )

               if !Empty( aGet[ 5 ] )
                  aGet[ 5 ]:cText( ( D():ProveedorArticulo( nView ) )->cRefPrv )
               end

            else

               if !Empty( aGet[ 5 ] )
                  aGet[ 5 ]:cText( Space( 20 ) )
               end

            end

            ( D():ProveedorArticulo( nView ) )->( ordSetFocus( nOrdAnt ) )





            aTmp[52 ]         := ( D():Articulos( nView ) )->cCodPrp1
            aTmp[53 ]         := ( D():Articulos( nView ) )->cCodPrp2



            if ( !Empty( aTmp[ 52 ] ) .OR. !Empty( aTmp[ 53 ] ) ) .AND.  ( uFieldEmpresa( "lUseTbl" )                                   .AND.  ( nMode == 1 ) )

               nPreCom              := nCosto( nil, D():Articulos( nView ), D():Kit( nView ), .F., aTmpAlb[ 32 ], D():Divisas( nView ) )

               setPropertiesTable( cCodArt, aTmp[ 52 ], aTmp[ 53 ], nPreCom, aGet[ 8 ], oBrwPrp, nView )

               if !Empty( oGetCelda )
                  oGetCelda:Show()
               end

            else

               hidePropertiesTable( oBrwPrp )
               oGetCelda:Hide()

               if !Empty( aTmp[ 52 ] )

                  if aGet[ 54 ] <> nil
                     aGet[ 54 ]:Show()
                     aGet[ 54 ]:SetFocus()
                  end

                  if oSayPr1 <> nil
                     oSayPr1:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp1, D():Propiedades( nView ) ) )
                     oSayPr1:Show()
                  end

                  if oSayVp1 <> nil
                     oSayVp1:Show()
                  end

               else

                  if aGet[ 54 ] <>  nil
                     aGet[ 54 ]:Hide()
                  end

                  if oSayPr1 <> nil
                     oSayPr1:Hide()
                  end

                  if oSayVp1 <> nil
                     oSayVp1:Hide()
                  end

               end

               if !Empty( aTmp[ 53 ] )

                  if aGet[ 55 ] <> nil
                     aGet[ 55 ]:Show()
                  end

                  if oSayPr2 <> nil
                     oSayPr2:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp2, D():Propiedades( nView ) ) )
                     oSayPr2:Show()
                  end

                  if oSayVp2 <> nil
                     oSayVp2:Show()
                  end

               else

                  if aGet[ 55 ] <> nil
                     aGet[ 55 ]:Hide()
                  end

                  if oSayPr2 <> nil
                     oSayPr2:Hide()
                  end

                  if oSayVp2 <> nil
                     oSayVp2:Hide()
                  end

               end

            end





            if !Empty( aGet[ 13 ] )
               aGet[ 13 ]:cText( ( D():Articulos( nView ) )->cUnidad )
               aGet[ 13 ]:lValid()
            else
               aTmp[ 13 ]  := ( D():Articulos( nView ) )->cUnidad
            end

            ValidaMedicion( aTmp, aGet )

         end

         cPrpArt                 := aTmp[ 52 ] + aTmp[ 53 ] + aTmp[ 54 ] + aTmp[ 55 ]

         if ( lChgCodArt ) .OR. ( cPrpArt <> cOldPrpArt )

            nPreCom              := nComPro( aTmp[ 4 ], aTmp[ 52 ], aTmp[ 54 ], aTmp[ 53 ], aTmp[ 55 ], D():ArticuloPrecioPropiedades( nView ) )

            if nPrecom  <> 0

               aGet[ 10 ]:cText( nPreCom )

            else

               if uFieldEmpresa( "lCosPrv" )
                  nPreCom        := nPrecioReferenciaProveedor( cCodPrv, cCodArt, D():ProveedorArticulo( nView ) )
               end

               if nPreCom <> 0
                  aGet[ 10 ]:cText( nPreCom )
               else
                  aGet[ 10 ]:cText( nCosto( nil, D():Articulos( nView ), D():Kit( nView ), .F., aTmpAlb[ 32 ], D():Divisas( nView ) ) )
               end





               if uFieldEmpresa( "lCosPrv", .F. )

                  nPreCom           := nDescuentoReferenciaProveedor( cCodPrv, cCodArt, D():ProveedorArticulo( nView ) )

                  if nPreCom <> 0
                     aGet[ 15 ]:cText( nPreCom )
                  end





                  nPreCom           := nPromocionReferenciaProveedor( cCodPrv, cCodArt, D():ProveedorArticulo( nView ) )

                  if nPreCom <> 0
                     aGet[ 16 ]:cText( nPreCom )
                  end

               end

            end





            if aGet[ 18 ] <> nil
               aGet[ 18 ]:cText( nNetUAlbPrv( aTmp, aTmpAlb, nDinDiv, nDirDiv, aTmpAlb[ 33 ] ) )
            end





            if !Empty( aGet[ 108 ] )
               aGet[ 108 ]:cText( ( D():Articulos( nView ) )->nPntVer1 )
            end





            aTmp[ 95 ]        := nCnv2Div( ( D():Articulos( nView ) )->PvpRec, cDivEmp(), aTmpAlb[ 32 ] )



            aGet[ 25 ]:cText( ( D():Articulos( nView ) )->Benef1 )
            aGet[ 26 ]:cText( ( D():Articulos( nView ) )->Benef2 )
            aGet[ 27 ]:cText( ( D():Articulos( nView ) )->Benef3 )
            aGet[ 28 ]:cText( ( D():Articulos( nView ) )->Benef4 )
            aGet[ 29 ]:cText( ( D():Articulos( nView ) )->Benef5 )
            aGet[ 30 ]:cText( ( D():Articulos( nView ) )->Benef6 )

            aGet[ 19 ]:Click( ( D():Articulos( nView ) )->lBnf1 )
            aGet[ 20 ]:Click( ( D():Articulos( nView ) )->lBnf2 )
            aGet[ 21 ]:Click( ( D():Articulos( nView ) )->lBnf3 )
            aGet[ 22 ]:Click( ( D():Articulos( nView ) )->lBnf4 )
            aGet[ 23 ]:Click( ( D():Articulos( nView ) )->lBnf5 )
            aGet[ 24 ]:Click( ( D():Articulos( nView ) )->lBnf6 )

            aGet[ 37 ]:cText( ( D():Articulos( nView ) )->pVenta1  )
            aGet[ 38 ]:cText( ( D():Articulos( nView ) )->pVenta2  )
            aGet[ 39 ]:cText( ( D():Articulos( nView ) )->pVenta3  )
            aGet[ 40 ]:cText( ( D():Articulos( nView ) )->pVenta4  )
            aGet[ 41 ]:cText( ( D():Articulos( nView ) )->pVenta5  )
            aGet[ 42 ]:cText( ( D():Articulos( nView ) )->pVenta6  )

            aGet[ 43 ]:cText( ( D():Articulos( nView ) )->pVtaIva1 )
            aGet[ 44 ]:cText( ( D():Articulos( nView ) )->pVtaIva2 )
            aGet[ 45 ]:cText( ( D():Articulos( nView ) )->pVtaIva3 )
            aGet[ 46 ]:cText( ( D():Articulos( nView ) )->pVtaIva4 )
            aGet[ 47 ]:cText( ( D():Articulos( nView ) )->pVtaIva5 )
            aGet[ 48 ]:cText( ( D():Articulos( nView ) )->pVtaIva6 )

            oBeneficioSobre[ 1 ]:Select( Max( ( D():Articulos( nView ) )->nBnfSbr1, 1 ) )
            oBeneficioSobre[ 2 ]:Select( Max( ( D():Articulos( nView ) )->nBnfSbr2, 1 ) )
            oBeneficioSobre[ 3 ]:Select( Max( ( D():Articulos( nView ) )->nBnfSbr3, 1 ) )
            oBeneficioSobre[ 4 ]:Select( Max( ( D():Articulos( nView ) )->nBnfSbr4, 1 ) )
            oBeneficioSobre[ 5 ]:Select( Max( ( D():Articulos( nView ) )->nBnfSbr5, 1 ) )
            oBeneficioSobre[ 6 ]:Select( Max( ( D():Articulos( nView ) )->nBnfSbr6, 1 ) )



            nPreCos  := nCnv2Div( ( D():Articulos( nView ) )->pCosto, cDivEmp(), aTmpAlb[ 32 ] )

         end





         lCalcDeta( aTmp, aTmpAlb, aGet, oTotal )

      else

         msgStop( "Artículo no encontrado" )

         RETURN .F.

      end

   end

   cOldCodArt        := cCodArt
   cOldPrpArt        := cPrpArt

RETURN .T.



Static FUNCTION cPedPrv( aGet, aTmp, oBrw, nMode )

   local nDiv
   local cOldEst
   local cPedCli
   local nTotPed     := 0
   local nTotRec     := 0
   local nTotPdt     := 0
   local lValid      := .F.
   local cPedido     := aGet[ 29 ]:varGet()
   local nAlbaran    := aGet[ 2 ]:varGet()

   if ( nMode <> 1 ) .OR. Empty( cPedido )
      RETURN .T.
   end

   if ( D():PedidosProveedores( nView ) )->( dbSeek( cPedido ) )

      if ( D():PedidosProveedores( nView ) )->nEstado == 3

         MsgStop( "Pedido recibido", "Opción cancelada" )
         lValid      := .F.

      else





         cOldEst  := ( D():PedidosProveedores( nView ) )->nEstado

         aGet[ 29 ]:cText( ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed )
         aGet[ 29 ]:bWhen := {|| .F. }

         aGet[ 6 ]:cText( ( D():PedidosProveedores( nView ) )->cCodPrv )
         aGet[ 6 ]:lValid()

         aGet[ 8 ]:cText( ( D():PedidosProveedores( nView ) )->cCodCaj )
         aGet[ 8 ]:lValid()

         aGet[ 7 ]:cText( ( D():PedidosProveedores( nView ) )->cCodAlm )
         aGet[ 7 ]:lValid()

         aGet[ 25]:Click( ( D():PedidosProveedores( nView ) )->lRecargo )

         aGet[ 18 ]:cText( ( D():PedidosProveedores( nView ) )->cCodPgo )
         aGet[ 18 ]:lValid()

         aGet[ 21 ]:cText( ( D():PedidosProveedores( nView ) )->cDtoEsp )
         aGet[ 22 ]:cText( ( D():PedidosProveedores( nView ) )->nDtoEsp )

         aGet[ 23    ]:cText( ( D():PedidosProveedores( nView ) )->cDpp )
         aGet[ 24    ]:cText( ( D():PedidosProveedores( nView ) )->nDpp )

         aGet[ 35 ]:cText( ( D():PedidosProveedores( nView ) )->cDtoUno )
         aGet[ 36 ]:cText( ( D():PedidosProveedores( nView ) )->nDtoUno )

         aGet[ 37 ]:cText( ( D():PedidosProveedores( nView ) )->cDtoDos )
         aGet[ 38 ]:cText( ( D():PedidosProveedores( nView ) )->nDtoDos )

         aGet[ 56 ]:nOption( Max( ( D():Proveedores( nView ) )->nRegIva, 1 ) )
         aGet[ 56 ]:Refresh()

         aGet[ 28 ]:cText( ( D():PedidosProveedores( nView ) )->cObserv )

         cPedCli           := ( D():PedidosProveedores( nView ) )->cNumPedCli





         if ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( cPedido ) )

            while ( ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed == cPedido )





               nTotPed                 := nTotNPedPrv( D():PedidosProveedoresLineas( nView ) )






               nTotRec                 := AlbaranesProveedoresLineasModel():nUnidadesRecibidas( ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed, ( D():PedidosProveedoresLineas( nView ) )->cRef, ( D():PedidosProveedoresLineas( nView ) )->cCodPr1, ( D():PedidosProveedoresLineas( nView ) )->cCodPr2, ( D():PedidosProveedoresLineas( nView ) )->cValPr1, ( D():PedidosProveedoresLineas( nView ) )->cValPr2, ( D():PedidosProveedoresLineas( nView ) )->cLote )
               nTotPdt                 := nTotPed - nTotRec





               if nTotPdt <> 0

                  (dbfTmp)->( dbAppend() )

                  (dbfTmp)->nNumAlb    := nAlbaran
                  (dbfTmp)->cCodPed    := cPedido
                  (dbfTmp)->cNumPed    := cPedCli
                  (dbfTmp)->cRef       := ( D():PedidosProveedoresLineas( nView ) )->cRef
                  (dbfTmp)->nIva       := ( D():PedidosProveedoresLineas( nView ) )->nIva
                  (dbfTmp)->nIvaLin    := ( D():PedidosProveedoresLineas( nView ) )->nIva
                  (dbfTmp)->nReq       := ( D():PedidosProveedoresLineas( nView ) )->nReq
                  (dbfTmp)->cDetalle   := ( D():PedidosProveedoresLineas( nView ) )->cDetalle
                  (dbfTmp)->mLngDes    := ( D():PedidosProveedoresLineas( nView ) )->mLngDes
                  (dbfTmp)->mNumSer    := ( D():PedidosProveedoresLineas( nView ) )->mNumSer
                  (dbfTmp)->nPreDiv    := ( D():PedidosProveedoresLineas( nView ) )->nPreDiv
                  (dbfTmp)->nPreCom    := ( D():PedidosProveedoresLineas( nView ) )->nPreDiv
                  (dbfTmp)->nCanPed    := ( D():PedidosProveedoresLineas( nView ) )->nCanPed
                  (dbfTmp)->nUniPed    := ( D():PedidosProveedoresLineas( nView ) )->nUniCaja
                  (dbfTmp)->cCodPr1    := ( D():PedidosProveedoresLineas( nView ) )->cCodPr1
                  (dbfTmp)->cCodPr2    := ( D():PedidosProveedoresLineas( nView ) )->cCodPr2
                  (dbfTmp)->cValPr1    := ( D():PedidosProveedoresLineas( nView ) )->cValPr1
                  (dbfTmp)->cValPr2    := ( D():PedidosProveedoresLineas( nView ) )->cValPr2
                  (dbfTmp)->nFacCnv    := ( D():PedidosProveedoresLineas( nView ) )->nFacCnv
                  (dbfTmp)->cAlmLin    := ( D():PedidosProveedoresLineas( nView ) )->cAlmLin
                  (dbfTmp)->nCtlStk    := ( D():PedidosProveedoresLineas( nView ) )->nCtlStk
                  (dbfTmp)->nNumLin    := ( D():PedidosProveedoresLineas( nView ) )->nNumLin
                  (dbfTmp)->nUndKit    := ( D():PedidosProveedoresLineas( nView ) )->nUndKit
                  (dbfTmp)->lKitChl    := ( D():PedidosProveedoresLineas( nView ) )->lKitChl
                  (dbfTmp)->lKitArt    := ( D():PedidosProveedoresLineas( nView ) )->lKitArt
                  (dbfTmp)->lKitPrc    := ( D():PedidosProveedoresLineas( nView ) )->lKitPrc
                  (dbfTmp)->nDtoLin    := ( D():PedidosProveedoresLineas( nView ) )->nDtoLin
                  (dbfTmp)->nDtoPrm    := ( D():PedidosProveedoresLineas( nView ) )->nDtoPrm
                  (dbfTmp)->nDtoRap    := ( D():PedidosProveedoresLineas( nView ) )->nDtoRap
                  (dbfTmp)->lImpLin    := ( D():PedidosProveedoresLineas( nView ) )->lImpLin
                  (dbfTmp)->lLote      := ( D():PedidosProveedoresLineas( nView ) )->lLote
                  (dbfTmp)->nLote      := ( D():PedidosProveedoresLineas( nView ) )->nLote
                  (dbfTmp)->cLote      := ( D():PedidosProveedoresLineas( nView ) )->cLote
                  (dbfTmp)->mObsLin    := ( D():PedidosProveedoresLineas( nView ) )->mObsLin
                  (dbfTmp)->cRefPrv    := ( D():PedidosProveedoresLineas( nView ) )->cRefPrv
                  (dbfTmp)->cUnidad    := ( D():PedidosProveedoresLineas( nView ) )->cUnidad
                  (dbfTmp)->nNumMed    := ( D():PedidosProveedoresLineas( nView ) )->nNumMed
                  (dbfTmp)->nMedUno    := ( D():PedidosProveedoresLineas( nView ) )->nMedUno
                  (dbfTmp)->nMedDos    := ( D():PedidosProveedoresLineas( nView ) )->nMedDos
                  (dbfTmp)->nMedTre    := ( D():PedidosProveedoresLineas( nView ) )->nMedTre
                  (dbfTmp)->nBultos    := ( D():PedidosProveedoresLineas( nView ) )->nBultos
                  (dbfTmp)->cFormato   := ( D():PedidosProveedoresLineas( nView ) )->cFormato
                  (dbfTmp)->cCodImp    := ( D():PedidosProveedoresLineas( nView ) )->cCodImp
                  (dbfTmp)->nValImp    := ( D():PedidosProveedoresLineas( nView ) )->nValImp
                  (dbfTmp)->cCodFam    := ( D():PedidosProveedoresLineas( nView ) )->cCodFam
                  (dbfTmp)->cRefAux    := ( D():PedidosProveedoresLineas( nView ) )->cRefAux
                  (dbfTmp)->cRefAux2   := ( D():PedidosProveedoresLineas( nView ) )->cRefAux2
                  (dbfTmp)->nPosPrint  := ( D():PedidosProveedoresLineas( nView ) )->nPosPrint
                  (dbfTmp)->cCtrCoste  := ( D():PedidosProveedoresLineas( nView ) )->cCtrCoste
                  (dbfTmp)->cTipCtr    := ( D():PedidosProveedoresLineas( nView ) )->cTipCtr
                  (dbfTmp)->cTerCtr    := ( D():PedidosProveedoresLineas( nView ) )->cTerCtr





                  if lCalCaj()

                     if nTotRec <> 0

                        nDiv  := Mod( nTotPdt, ( D():PedidosProveedoresLineas( nView ) )->nUniCaja )
                        if nDiv == 0 .AND. ( D():PedidosProveedoresLineas( nView ) )->nCanPed <> 0
                           ( dbfTmp )->nCanEnt  := Div( nTotPdt, ( D():PedidosProveedoresLineas( nView ) )->nUniCaja )
                           ( dbfTmp )->nUniCaja := ( D():PedidosProveedoresLineas( nView ) )->nUniCaja
                        else
                           ( dbfTmp )->nCanEnt  := 0
                           ( dbfTmp )->nUniCaja := nTotPdt
                        end

                     else

                        ( dbfTmp )->nCanEnt     := ( D():PedidosProveedoresLineas( nView ) )->nCanPed
                        ( dbfTmp )->nUniCaja    := ( D():PedidosProveedoresLineas( nView ) )->nUniCaja

                     end

                  else

                     ( dbfTmp )->nUniCaja       := nTotPdt

                  end





                  if ( D():Articulos( nView ) )->( dbSeek( ( D():PedidosProveedoresLineas( nView ) )->cRef ) )

                     ( dbfTmp )->lIvaLin  := ( D():Articulos( nView ) )->lIvaInc

                     ( dbfTmp )->nBnfLin1 := ( D():Articulos( nView ) )->Benef1
                     ( dbfTmp )->nBnfLin2 := ( D():Articulos( nView ) )->Benef2
                     ( dbfTmp )->nBnfLin3 := ( D():Articulos( nView ) )->Benef3
                     ( dbfTmp )->nBnfLin4 := ( D():Articulos( nView ) )->Benef4
                     ( dbfTmp )->nBnfLin5 := ( D():Articulos( nView ) )->Benef5
                     ( dbfTmp )->nBnfLin6 := ( D():Articulos( nView ) )->Benef6

                     ( dbfTmp )->lBnfLin1 := ( D():Articulos( nView ) )->lBnf1
                     ( dbfTmp )->lBnfLin2 := ( D():Articulos( nView ) )->lBnf2
                     ( dbfTmp )->lBnfLin3 := ( D():Articulos( nView ) )->lBnf3
                     ( dbfTmp )->lBnfLin4 := ( D():Articulos( nView ) )->lBnf4
                     ( dbfTmp )->lBnfLin5 := ( D():Articulos( nView ) )->lBnf5
                     ( dbfTmp )->lBnfLin6 := ( D():Articulos( nView ) )->lBnf6

                     ( dbfTmp )->nBnfSbr1 := ( D():Articulos( nView ) )->nBnfSbr1
                     ( dbfTmp )->nBnfSbr2 := ( D():Articulos( nView ) )->nBnfSbr2
                     ( dbfTmp )->nBnfSbr3 := ( D():Articulos( nView ) )->nBnfSbr3
                     ( dbfTmp )->nBnfSbr4 := ( D():Articulos( nView ) )->nBnfSbr4
                     ( dbfTmp )->nBnfSbr5 := ( D():Articulos( nView ) )->nBnfSbr5
                     ( dbfTmp )->nBnfSbr6 := ( D():Articulos( nView ) )->nBnfSbr6

                     ( dbfTmp )->nPvpLin1 := ( D():Articulos( nView ) )->pVenta1
                     ( dbfTmp )->nPvpLin2 := ( D():Articulos( nView ) )->pVenta2
                     ( dbfTmp )->nPvpLin3 := ( D():Articulos( nView ) )->pVenta3
                     ( dbfTmp )->nPvpLin4 := ( D():Articulos( nView ) )->pVenta4
                     ( dbfTmp )->nPvpLin5 := ( D():Articulos( nView ) )->pVenta5
                     ( dbfTmp )->nPvpLin6 := ( D():Articulos( nView ) )->pVenta6

                     ( dbfTmp )->nIvaLin1 := ( D():Articulos( nView ) )->pVtaIva1
                     ( dbfTmp )->nIvaLin2 := ( D():Articulos( nView ) )->pVtaIva2
                     ( dbfTmp )->nIvaLin3 := ( D():Articulos( nView ) )->pVtaIva3
                     ( dbfTmp )->nIvaLin4 := ( D():Articulos( nView ) )->pVtaIva4
                     ( dbfTmp )->nIvaLin5 := ( D():Articulos( nView ) )->pVtaIva5
                     ( dbfTmp )->nIvaLin6 := ( D():Articulos( nView ) )->pVtaIva6

                     ( dbfTmp )->lNumSer  := ( D():Articulos( nView ) )->lNumSer
                     ( dbfTmp )->lAutSer  := ( D():Articulos( nView ) )->lAutSer

                     if ( ( dbfTmp )->lNumSer )

                        if ( ( dbfTmp )->lAutSer )

                              AutoNumerosSerie( dbfTmp, nMode )

                        elseif !( dbfTmpSer )->( dbSeek( Str( ( dbfTmp )->nNumLin, 4 ) + ( dbfTmp )->cRef ) )

                           msgStop( "Tiene que introducir números de serie para el artículo: " + (dbfTmp)->cDetalle )

                           EditarNumerosSerie( dbfTmp, nMode )

                        end

                     end

                  end

                  if lActCos()
                     ( dbfTmp )->lChgLin     := .T.
                  end

               end

               ( D():PedidosProveedoresLineas( nView ) )->( dbSkip() )

            end

            ( dbfTmp )->( dbGoTop() )

            oBrw:Refresh()

         end

         aGet[ 29 ]:bWhen     := {|| .F. }
         aGet[ 29 ]:bValid    := {|| .T. }
         lValid                     := .T.

      end

   else

      msgStop( "Pedido no existe" )

   end





   nTotAlbPrv( nil, D():AlbaranesProveedores( nView ), dbfTmp, D():TiposIva( nView ), D():Divisas( nView ), aTmp )

RETURN lValid







Static FUNCTION lCalcDeta( aTmp, aTmpAlb, aGet, oTotal )

   oTotal:cText( nTotLAlbPrv( aTmp, nDinDiv, nDirDiv ) )





   aGet[ 18 ]:cText( nNetUAlbPrv( aTmp, aTmpAlb, nDinDiv, nDirDiv ) )

   if aTmp[ 19 ]
      aGet[ 25 ]:lValid()
   else
      aGet[ 43 ]:lValid()
      aGet[ 37 ]:lValid()
   end

   if aTmp[ 20 ]
      aGet[ 26 ]:lValid()
   else
      aGet[ 44 ]:lValid()
      aGet[ 38 ]:lValid()
   end

   if aTmp[ 21 ]
      aGet[ 27 ]:lValid()
   else
      aGet[ 45 ]:lValid()
      aGet[ 39 ]:lValid()
   end

   if aTmp[ 22 ]
      aGet[ 28 ]:lValid()
   else
      aGet[ 46 ]:lValid()
      aGet[ 40 ]:lValid()
   end

   if aTmp[ 23 ]
      aGet[ 29 ]:lValid()
   else
      aGet[ 47 ]:lValid()
      aGet[ 41 ]:lValid()
   end

   if aTmp[ 24 ]
      aGet[ 30 ]:lValid()
   else
      aGet[ 48 ]:lValid()
      aGet[ 42 ]:lValid()
   end

   if lActCos()
      aGet[ 51 ]:Click( aTmp[ 10 ] <> 0 )
   end

RETURN .T.



STATIC FUNCTION BeginTrans( aTmp, nMode )

   local oBlock
   local lErrors     := .F.
   local cDbf        := "AProL"
   local cDbfInc     := "AProI"
   local cDbfDoc     := "AProD"
   local cDbfSer     := "AProS"
   local hDuplicate  := {=>}
   local nAlbaran    := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      TComercio:resetProductsToUpdateStocks()

      CursorWait()

      if nMode == 4
         hDuplicate  := { "cSerAlb" => Space(1), "nNumAlb" => 0, "lFacturado" => .F., "cNumFac" => "" }
      end

      cNewFile       := cGetNewFileName( cPatTmp() + cDbf )
      cTmpInc        := cGetNewFileName( cPatTmp() + cDbfInc )
      cTmpDoc        := cGetNewFileName( cPatTmp() + cDbfDoc )
      cTmpSer        := cGetNewFileName( cPatTmp() + cDbfSer )





      dbCreate( cNewFile, aSqlStruct( aColAlbPrv() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFile, cCheckArea( cDbf, @dbfTmp ), .F. )

      if !( dbfTmp )->( neterr() )
         ( dbfTmp )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmp )->( OrdCreate( cNewFile, "nNumLin", "Str( nNumLin, 4 )", {|| Str( Field->nNumLin ) } ) )

         ( dbfTmp )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
         ( dbfTmp )->( OrdCreate( cNewFile, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

         ( dbfTmp )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmp )->( OrdCreate( cNewFile, "nPosPrint", "Str( nPosPrint, 4 )", {|| Str( Field->nPosPrint ) } ) )

      end





      oLinDetCamposExtra:initArrayValue()

      if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( nAlbaran ) )
         while ( ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb == nAlbaran .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( eof() ) )
            appendRegisterByHash( D():AlbaranesProveedoresLineas( nView ), dbfTmp, hDuplicate )
            oLinDetCamposExtra:SetTemporalLines( ( dbfTmp )->cSerAlb + str( ( dbfTmp )->nNumAlb ) + ( dbfTmp )->cSufAlb + str( ( dbfTmp )->nNumLin ), ( dbfTmp )->( OrdKeyNo() ), nMode )
            ( D():AlbaranesProveedoresLineas( nView ) )->( DbSkip() )
         end
      end

      ( dbfTmp )->( dbGoTop() )





      dbCreate( cTmpInc, aSqlStruct( aIncAlbPrv() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpInc, cCheckArea( cDbfInc, @dbfTmpInc ), .F. )

      if !( dbfTmpInc )->( neterr() )
         ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpInc )->( ordCreate( cTmpInc, "Recno", "Recno()", {|| Recno() } ) )
      end





      if ( nMode <> 4 ) .AND. ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbSeek( nAlbaran ) )
         while ( ( D():AlbaranesProveedoresIncidencias( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresIncidencias( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresIncidencias( nView ) )->cSufAlb == nAlbaran ) .AND. ( D():AlbaranesProveedoresIncidencias( nView ) )->( !eof() )
            dbPass( D():AlbaranesProveedoresIncidencias( nView ), dbfTmpInc, .T. )
            ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbSkip() )
         end
      end

      ( dbfTmpInc )->( dbGoTop() )





      dbCreate( cTmpDoc, aSqlStruct( aAlbPrvDoc() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpDoc, cCheckArea( cDbfDoc, @dbfTmpDoc ), .F. )

      if !( dbfTmpDoc )->( neterr() )
         ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpDoc )->( ordCreate( cTmpDoc, "Recno", "Recno()", {|| Recno() } ) )
      end





      if ( nMode <> 4 ) .AND. ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbSeek( nAlbaran ) )
         while ( ( D():AlbaranesProveedoresDocumentos( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresDocumentos( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresDocumentos( nView ) )->cSufAlb == nAlbaran ) .AND. ( D():AlbaranesProveedoresDocumentos( nView ) )->( !eof() )
            dbPass( D():AlbaranesProveedoresDocumentos( nView ), dbfTmpDoc, .T. )
            ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbSkip() )
         end
      end

      ( dbfTmpDoc )->( dbGoTop() )





      dbCreate( cTmpSer, aSqlStruct( aSerAlbPrv() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpSer, cCheckArea( cDbf, @dbfTmpSer ), .F. )

      if !( dbfTmpSer )->( neterr() )
         ( dbfTmpSer )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpSer )->( OrdCreate( cTmpSer, "nNumLin", "Str( nNumLin, 4 ) + cRef", {|| Str( Field->nNumLin, 4 ) + Field->cRef } ) )
      end





      if ( nMode <> 4 ) .AND. ( D():AlbaranesProveedoresSeries( nView ) )->( dbSeek( nAlbaran ) )
         while ( ( D():AlbaranesProveedoresSeries( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresSeries( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresSeries( nView ) )->cSufAlb == nAlbaran )
            dbPass( D():AlbaranesProveedoresSeries( nView ), dbfTmpSer, .T. )
            ( D():AlbaranesProveedoresSeries( nView ) )->( dbSkip() )
         end
      end

      ( dbfTmpSer )->( dbGoTop() )





      oDetCamposExtra:SetTemporal( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "", nMode )

      CursorWE()

   RECOVER

      msgStop( "Imposible crear tablas temporales." )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

RETURN ( lErrors )



STATIC FUNCTION EndTrans( aTmp, aGet, nDec, nRec, oBrw, nMode, oDlg )

   local aTbl
   local oError
   local oBlock
   local cNumPed
   local cSerAlb
   local nNumAlb
   local cSufAlb
   local dFecAlb
   local aNumPedCli
   local cNumPedPrv
   local aNumPed
   local i

   if Empty( aTmp[ 1 ] )
      aTmp[ 1 ]  := "A"
   end

   cSerAlb              := aTmp[ 1 ]
   nNumAlb              := aTmp[ 2 ]
   cSufAlb              := aTmp[ 3 ]
   dFecAlb              := aTmp[ 5 ]
   cNumPedPrv           := aTmp[ 29 ]
   aNumPedCli           := {}





   if !lValidaOperacion( aTmp[ 5 ] )
      RETURN .F.
   end





   if Empty( aTmp[ 6 ] )
      msgStop( "Código de proveedor no puede estar vacío." )
      aGet[ 6 ]:SetFocus()
      RETURN .F.
   end

   if Empty( aTmp[ 8 ] )
      msgStop( "Caja no puede estar vacía." )
      aGet[ 8 ]:SetFocus()
      RETURN .F.
   end

   if Empty( aTmp[ 7 ] )
      msgStop( "Almacén no puede estar vacío." )
      aGet[ 7 ]:SetFocus()
      RETURN .F.
   end

   if ( aTmp[ 7 ] == aTmp[ 61 ] )
      msgStop( "Almacén origen debe ser distinto al almacén destino" )
      aGet[ 61 ]:SetFocus()
      RETURN .F.
   end

   if ( dbfTmp )->( eof() )
      MsgStop( "No puede almacenar un documento sin líneas." )
      RETURN .F.
   end



   CursorWait()

   oDlg:Disable()

   oMsgText( "Archivando" )

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      BeginTransaction()





      aTmp[ 53 ]     := GetSysDate()
      aTmp[ 54 ]     := Time()

      do case
      case isAppendOrDuplicateMode( nMode )

         nNumAlb           := nNewDoc( cSerAlb, D():AlbaranesProveedores( nView ), "nAlbPrv", , D():Contadores( nView ) )
         aTmp[ 2 ]  := nNumAlb
         cSufAlb           := retSufEmp()
         aTmp[ 3 ]  := cSufAlb

      case isEditMode( nMode )





         while ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( cSerAlb + Str( nNumAlb ) + cSufAlb ) ) .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( eof() )

            TComercio:appendProductsToUpadateStocks( ( D():AlbaranesProveedoresLineas( nView ) )->cRef, nView )

            if dbLock( D():AlbaranesProveedoresLineas( nView ) )
               ( D():AlbaranesProveedoresLineas( nView ) )->( dbDelete() )
               ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnLock() )
            end

         end

         while ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbSeek( cSerAlb + Str( nNumAlb ) + cSufAlb ) ) .AND. !( D():AlbaranesProveedoresIncidencias( nView ) )->( eof() )
            if dbLock( D():AlbaranesProveedoresIncidencias( nView ) )
               ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbDelete() )
               ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbUnLock() )
            end
         end

         while ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbSeek( cSerAlb + Str( nNumAlb ) + cSufAlb ) ) .AND. !( D():AlbaranesProveedoresDocumentos( nView ) )->( eof() )
            if dbLock( D():AlbaranesProveedoresDocumentos( nView ) )
               ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbDelete() )
               ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbUnLock() )
            end
         end

         while ( D():AlbaranesProveedoresSeries( nView ) )->( dbSeek( cSerAlb + Str( nNumAlb ) + cSufAlb ) ) .AND. !( D():AlbaranesProveedoresSeries( nView ) )->( eof() )
            if dbLock( D():AlbaranesProveedoresSeries( nView ) )
               ( D():AlbaranesProveedoresSeries( nView ) )->( dbDelete() )
               ( D():AlbaranesProveedoresSeries( nView ) )->( dbUnLock() )
            end
         end

      end





      ( dbfTmp )->( dbClearFilter() )

      oMsgProgress()
      oMsgProgress():SetRange( 0, ( dbfTmp )->( LastRec() ) )





      ( dbfTmp )->( dbGoTop() )
      while !( dbfTmp )->( eof() )

         aTbl                 := dbScatter( dbfTmp )
         aTbl[ 1 ]     := cSerAlb
         aTbl[ 2 ]     := nNumAlb
         aTbl[ 3 ]     := cSufAlb
         aTbl[ 51 ]     := .F.
         aTbl[ 18 ]     := nNetUAlbPrv( aTbl, aTmp, nDinDiv, nDirDiv, aTmp[ 33 ] )
         aTbl[ 105]     := aTmp[ 5 ]
         aTbl[ 119]     := aTmp[ 63 ]

         AppendReferenciaProveedor( aTbl[ 5 ], aTmp[ 6 ], aTbl[ 4 ], aTbl[ 15 ], aTbl[ 16 ], aTmp[ 32 ], aTbl[ 10 ], D():ProveedorArticulo( nView ), nMode )

         AppendPropiedadesArticulos( aTbl, aTmp )





         if ( D():Articulos( nView ) )->( dbSeek( ( dbfTmp )->cRef ) ) .AND. ( dbfTmp )->lChgLin
            CambioPrecio( aTmp[ 5 ], D():Articulos( nView ), dbfTmp )
         end





         dbGather( aTbl, D():AlbaranesProveedoresLineas( nView ), .T. )





         oLinDetCamposExtra:saveExtraField( cSerAlb + Str( nNumAlb ) + cSufAlb + Str( ( dbfTmp )->nNumLin ), ( dbfTmp )->( OrdKeyNo() ) )

         TComercio:appendProductsToUpadateStocks( (dbfTmp)->cRef, nView )

         ( dbfTmp )->( dbSkip() )

         oMsgProgress():Deltapos( 1 )

      end





      aTmp[ 57 ]     := nTotNet
      aTmp[ 58 ]     := nTotIva
      aTmp[ 59 ]     := nTotReq
      aTmp[ 60 ]     := nTotAlb





      oDetCamposExtra:saveExtraField( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "" )





      WinGather( aTmp, , D():AlbaranesProveedores( nView ), , nMode )





      if !Empty( cNumPedPrv )
         SetEstadoLinePedProv( cNumPedPrv, nView )
         oStock:SetPedPrv( cNumPedPrv )
      end





      ( dbfTmpInc )->( dbGoTop() )
      while ( dbfTmpInc )->( !eof() )
         dbPass( dbfTmpInc, D():AlbaranesProveedoresIncidencias( nView ), .T., cSerAlb, nNumAlb, cSufAlb )
         ( dbfTmpInc )->( dbSkip() )
      end





      ( dbfTmpDoc )->( dbGoTop() )
      while ( dbfTmpDoc )->( !eof() )
         dbPass( dbfTmpDoc, D():AlbaranesProveedoresDocumentos( nView ), .T., cSerAlb, nNumAlb, cSufAlb )
         ( dbfTmpDoc )->( dbSkip() )
      end





      ( dbfTmpSer )->( dbGoTop() )
      while ( dbfTmpSer )->( !eof() )
         dbPass( dbfTmpSer, D():AlbaranesProveedoresSeries( nView ), .T., cSerAlb, nNumAlb, cSufAlb, dFecAlb )
         ( dbfTmpSer )->( dbSkip() )
      end





      ( dbfTmp )->( dbGoTop() )
      while !( dbfTmp )->( Eof() )
         if aScan( aNumPedCli, ( dbfTmp )->cNumPed ) == 0
            aAdd( aNumPedCli, ( dbfTmp )->cNumPed )
         end
         ( dbfTmp )->( dbSkip() )
      end

      for each cNumPed in aNumPedCli
         oStock:SetRecibidoPedCli( cNumPed )
      next





      if Len( aAlbaranes ) <> 0

         for each aNumPed in aAlbaranes

            oStock:SetPedPrv( aNumPed[ 3 ] )
            SetEstadoLinePedProv( aNumPed[ 3 ], nView )

            if dbSeekInOrd( aNumPed[ 3 ], "nNumPed", D():PedidosProveedores( nView ) )

               if dbLock( D():PedidosProveedores( nView ) )
                  ( D():PedidosProveedores( nView ) )->cNumAlb    := cSerAlb + Str( nNumAlb ) + cSufAlb
                  ( D():PedidosProveedores( nView ) )->( dbUnLock() )
               end

            end

         next

      end



      CommitTransaction()

   RECOVER USING oError

      RollBackTransaction()

      msgStop( "Imposible guardar el documento" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   oMsgText()
   endProgress()



   TComercio:updateWebProductStocks()

   oDlg:Enable()
   oDlg:End( 1 )

   CursorWE()

RETURN .T.



STATIC FUNCTION KillTrans( oBrwLin, oBrwInc )

   if !Empty( dbfTmp ) .AND. ( dbfTmp )->( Used() )
      ( dbfTmp )->( dbCloseArea() )
   end

   if !Empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )
      ( dbfTmpInc )->( dbCloseArea() )
   end

   if !Empty( dbfTmpDoc ) .AND. ( dbfTmpDoc )->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end

   if !Empty( dbfTmpSer ) .AND. ( dbfTmpSer )->( Used() )
      ( dbfTmpSer )->( dbCloseArea() )
   end

   dbfErase( cNewFile )
   dbfErase( cTmpInc  )
   dbfErase( cTmpDoc  )
   dbfErase( cTmpSer  )

RETURN NIL



STATIC FUNCTION CreateFiles( cPath )

   if !lExistTable( cPath + "ALBPROVT.DBF", cLocalDriver() )
      dbCreate( cPath + "ALBPROVT.DBF", aSqlStruct( aItmAlbPrv() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ALBPROVL.DBF", cLocalDriver() )
      dbCreate( cPath + "ALBPROVL.DBF", aSqlStruct( aColAlbPrv() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ALBPRVI.DBF", cLocalDriver() )
      dbCreate( cPath + "ALBPRVI.DBF", aSqlStruct( aIncAlbPrv() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ALBPRVD.DBF", cLocalDriver() )
      dbCreate( cPath + "ALBPRVD.DBF", aSqlStruct( aAlbPrvDoc() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ALBPRVS.DBF", cLocalDriver() )
      dbCreate( cPath + "ALBPRVS.DBF", aSqlStruct( aSerAlbPrv() ), cLocalDriver() )
   end

RETURN NIL






STATIC FUNCTION ChgState( oBrw )

   if dbDialogLock( D():AlbaranesProveedores( nView ) )

      ( D():AlbaranesProveedores( nView ) )->lFacturado := !( D():AlbaranesProveedores( nView ) )->lFacturado
      ( D():AlbaranesProveedores( nView ) )->cNumFac    := Space( 12 )
      ( D():AlbaranesProveedores( nView ) )->( dbUnlock() )

   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL




STATIC FUNCTION lMoreIva( nCodIva )





    IF aTotIva[ 1, 3 ] == NIL .OR. aTotIva[ 2, 3 ] == NIL .OR. aTotIva[ 3, 3 ] == NIL
        RETURN .T.
    end

    IF aTotIva[ 1, 3 ] == nCodIva .OR. aTotIva[ 2, 3 ] == nCodIva .OR. aTotIva[ 3, 3 ] == nCodIva
        RETURN .T.
    end

   MsgStop( "Albarán con mas de 3 tipos de " + cImp(), "Imposible añadir" )

RETURN .F.



static FUNCTION lNotOpen()

   if NetErr()
      MsgStop( "Imposible abrir ficheros de albaranes de proveedores" )
      CloseFiles()
      RETURN .T.
   end

RETURN .F.



static FUNCTION lGenAlb( oBrw, oBtn, nDevice )

   local bAction

   If( nDevice == nil, nDevice := 1, ) ;

   if Empty( oBtn )
      RETURN nil
   end

   if !( D():Documentos( nView ) )->( dbSeek( "AP" ) )








         oWndBrw:NewAt( "gc_document_white_",,, {||( msgStop( "No hay albaranes de proveedores predefinidos" ) )}, "No hay documentos", "N",,, 4, oBtn, .F. )

   else

      while ( D():Documentos( nView ) )->cTipo == "AP" .AND. !( D():Documentos( nView ) )->( eof() )

         bAction  := bGenAlb( nDevice, "Imprimiendo albaranes de proveedores", ( D():Documentos( nView ) )->Codigo )

         oWndBrw:NewAt( "gc_document_white_", , , bAction, Rtrim( ( D():Documentos( nView ) )->cDescrip ) , , , , , oBtn )

         ( D():Documentos( nView ) )->( dbSkip() )

      end

   end

   SysRefresh()

RETURN nil



static FUNCTION nCanEnt()

RETURN ( If( ( D():AlbaranesProveedoresLineas( nView ) )->NCANENT <> 0, ( D():AlbaranesProveedoresLineas( nView ) )->NCANENT, 1 ) * ( D():AlbaranesProveedoresLineas( nView ) )->NUNICAJA )



static FUNCTION nTotUnd( uDbf )

   local nTotUnd

   if ValType( uDbf ) == "A"
      nTotUnd  := NotBulto( uDbf[ 110 ] ) * NotCaja( uDbf[ 9 ] ) * uDbf[ 8 ]
   else
      nTotUnd  := NotBulto( ( uDbf )->NBULTOS ) * NotCaja( ( uDbf )->NCANENT ) * ( uDbf )->NUNICAJA
   end

RETURN ( nTotUnd )






Static FUNCTION QuiAlbPrv( lDetail )

   local cNumPed
   local nRecAnt
   local nOrdAnt
   local nRecPed
   local nOrdPed
   local aNumPedCli  := {}
   local cNumPedPrv  := ( D():AlbaranesProveedores( nView ) )->cNumPed
   local aNumPedPrv  := {}

   If( lDetail == nil, lDetail := .T., ) ;

   if ( D():AlbaranesProveedores( nView ) )->lCloAlb .AND. !oUser():lAdministrador()
      msgStop( "Solo puede eliminar albaranes cerrados los administradores." )
      RETURN .F.
   end

   CursorWait()

   nRecAnt           := ( D():AlbaranesProveedoresLineas( nView ) )->( Recno() )
   nOrdAnt           := ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( "nNumAlb" ) )

   if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) )


      while ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb == ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb .AND.  !( D():AlbaranesProveedoresLineas( nView ) )->( Eof() )

         if aScan( aNumPedCli, ( D():AlbaranesProveedoresLineas( nView ) )->cNumPed ) == 0
            aAdd( aNumPedCli, ( D():AlbaranesProveedoresLineas( nView ) )->cNumPed )
         end

         ( D():AlbaranesProveedoresLineas( nView ) )->( dbSkip() )

      end

   end

   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():AlbaranesProveedoresLineas( nView ) )->( dbGoTo( nRecAnt ) )





   TComercio:resetProductsToUpdateStocks()

   while ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) ) .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( eof() )

      TComercio:appendProductsToUpadateStocks( ( D():AlbaranesProveedoresLineas( nView ) )->cRef, nView )

      if !Empty( ( D():AlbaranesProveedoresLineas( nView ) )->cCodPed )







         if PedidosProveedoresLineasModel():ExisteLinea( ( D():AlbaranesProveedoresLineas( nView ) )->cCodPed, ( D():AlbaranesProveedoresLineas( nView ) )->cRef, ( D():AlbaranesProveedoresLineas( nView ) )->cCodPr1, ( D():AlbaranesProveedoresLineas( nView ) )->cCodPr2, ( D():AlbaranesProveedoresLineas( nView ) )->cValPr1, ( D():AlbaranesProveedoresLineas( nView ) )->cValPr2, ( D():AlbaranesProveedoresLineas( nView ) )->cLote )

            if aScan( aNumPedPrv, ( D():AlbaranesProveedoresLineas( nView ) )->cCodPed ) == 0
               aAdd( aNumPedPrv, ( D():AlbaranesProveedoresLineas( nView ) )->cCodPed )
            end

         end

      end

      if dbLock( D():AlbaranesProveedoresLineas( nView ) )
         ( D():AlbaranesProveedoresLineas( nView ) )->( dbDelete() )
         ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnLock() )
      end

   end





   while ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbSeek( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) ) .AND. !( D():AlbaranesProveedoresIncidencias( nView ) )->( eof() )

      if dbLock( D():AlbaranesProveedoresIncidencias( nView ) )
         ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbDelete() )
         ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbUnLock() )
      end

   end





   while ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbSeek( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) ) .AND. !( D():AlbaranesProveedoresDocumentos( nView ) )->( eof() )

      if dbLock( D():AlbaranesProveedoresDocumentos( nView ) )
         ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbDelete() )
         ( D():AlbaranesProveedoresDocumentos( nView ) )->( dbUnLock() )
      end

   end





   while ( D():AlbaranesProveedoresSeries( nView ) )->( dbSeek( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) ) .AND. !( D():AlbaranesProveedoresSeries( nView ) )->( eof() )

      if dbLock( D():AlbaranesProveedoresSeries( nView ) )
         ( D():AlbaranesProveedoresSeries( nView ) )->( dbDelete() )
         ( D():AlbaranesProveedoresSeries( nView ) )->( dbUnLock() )
      end

   end





   for each cNumPed in aNumPedCli
      oStock:SetRecibidoPedCli( cNumPed )
   next





   if !Empty( cNumPedPrv )
      oStock:SetPedPrv( cNumPedPrv )
      SetEstadoLinePedProv( cNumPedPrv, nView )
   end





   nRecPed  := ( D():PedidosProveedores( nView ) )->( RecNo() )
   nOrdPed  := ( D():PedidosProveedores( nView ) )->( OrdSetFocus( "cNumAlb" ) )

   if ( D():PedidosProveedores( nView ) )->( dbSeek( ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb ) )

      while ( D():PedidosProveedores( nView ) )->cNumAlb == ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb .AND. !( D():PedidosProveedores( nView ) )->( Eof() )

         if dbLock( D():PedidosProveedores( nView ) )
            ( D():PedidosProveedores( nView ) )->cNumAlb    := ""
            ( D():PedidosProveedores( nView ) )->nEstado    := 1
            ( D():PedidosProveedores( nView ) )->( dbUnLock() )
         end

         SetEstadoLinePedProv( ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed, nView )

         aAdd( aNumPedPrv, ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed )

         ( D():PedidosProveedores( nView ) )->( dbSkip() )

      end

   end

   ( D():PedidosProveedores( nView ) )->( OrdSetFocus( nOrdPed ) )
   ( D():PedidosProveedores( nView ) )->( dbGoTo( nRecPed ) )

   if len( aNumPedPrv ) > 0
      aEval( aNumPedPrv,{|cNumPed| oStock:SetPedPrv( cNumPed ), SetEstadoLinePedProv( cNumPed, nView ) } )
   end



   TComercio:updateWebProductStocks()

   CursorWE()

   WQout( { "justo antes de salir" } )

RETURN .T.



STATIC FUNCTION nClrText( dbfTmp )

   local cClr

   if ( dbfTmp )->lKitChl
      cClr     := 8421504
   else
      cClr     := 0
   end

RETURN cClr



STATIC FUNCTION GrpPed( aGet, aTmp, oBrw, nMode )

   local a
   local oDlg
   local nDiv
   local nOrdAnt
   local oBrwLin
   local nNumLin
   local nPosPrint
   local nTotPed
   local nTotRec
   local nTotPdt
   local nItem       := 1
   local nOffSet     := 0
   local cDesAlb     := ""
   local cCodPrv     := aGet[ 6 ]:varGet()

   aNumAlb           := {}
   aAlbaranes        := {}



   if Empty( cCodPrv )
      msgStop( "Es necesario codificar un proveedor", "Agrupar pedidos" )
      RETURN .T.
   end




   nOrdAnt           := ( D():PedidosProveedores( nView ) )->( ordSetFocus( "CCODPRV" ) )



   if !( D():PedidosProveedores( nView ) )->( dbSeek( cCodPrv ) )
       msgStop( "No existen pedidos de este proveedor" )
      RETURN .T.
   else

      while ( D():PedidosProveedores( nView ) )->cCodPrv == cCodPrv .AND. ( D():PedidosProveedores( nView ) )->( !eof() )

         if ( D():PedidosProveedores( nView ) )->nEstado <> 3







            aAdd( aAlbaranes, {  .F. , ( if( ( D():PedidosProveedores( nView ) )->nEstado <= 1, 3, ( D():PedidosProveedores( nView ) )->nEstado ) ), ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed, ( D():PedidosProveedores( nView ) )->dFecPed , ( D():PedidosProveedores( nView ) )->cCodPrv , ( D():PedidosProveedores( nView ) )->cNomPrv , ( D():PedidosProveedores( nView ) )->cNumPedCli } )

         endif

         ( D():PedidosProveedores( nView ) )->( dbSkip( 1 ) )

      end

   end

   if Len( aAlbaranes ) == 0
      msgStop( "No existen pedidos de este proveedor" )
      RETURN .T.
   end



   ( D():PedidosProveedores( nView ) )->( ordSetFocus( nOrdAnt ) )




   oDlg = TDialog():New(,,,, "Seleccionando pedidos de : " + Rtrim( cCodPrv ) + "-" + Rtrim( RetProvee( cCodPrv ) ), "SET_ALBARAN",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

      oBrwLin                        := IXBrowse():New( oDlg )

      oBrwLin:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLin:SetArray( aAlbaranes, , , .F. )

      oBrwLin:nMarqueeStyle          := 5
      oBrwLin:lRecordSelector        := .F.
      oBrwLin:lHScroll               := .F.
      oBrwLin:cName                  := "Agrupar pedidos proveedor"

      oBrwLin:bLDblClick             := {|| aAlbaranes[ oBrwLin:nArrayAt, 1 ] := !aAlbaranes[ oBrwLin:nArrayAt, 1 ], oBrwLin:refresh() }

      oBrwLin:CreateFromResource( 130 )

      with object ( oBrwLin:AddCol() )
         :cHeader                   := "Se. seleccionado"
         :bStrData                  := {|| "" }
         :bEditValue                := {|| aAlbaranes[ oBrwLin:nArrayAt, 1 ] }
         :nWidth                    := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader                   := "Es. estado"
         :bStrData                  := {|| "" }
         :bBmpData                  := {|| aAlbaranes[ oBrwLin:nArrayAt, 2 ] }
         :nWidth                    := 20
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader                   := "Número"
         :bStrData                  := {|| Trans( aAlbaranes[ oBrwLin:nArrayAt, 3 ], "@R #/999999999/##" ) }
         :nWidth                    := 75
      end

      with object ( oBrwLin:AddCol() )
         :cHeader                   := "Fecha"
         :bStrData                  := {|| Dtoc( aAlbaranes[ oBrwLin:nArrayAt, 4 ] ) }
         :nWidth                    := 75
      end

      with object ( oBrwLin:AddCol() )
         :cHeader                   := "Proveedor"
         :bStrData                  := {|| aAlbaranes[ oBrwLin:nArrayAt, 5 ] + Space(1) + aAlbaranes[ oBrwLin:nArrayAt, 6 ] }
         :nWidth                    := 400
      end

      with object ( oBrwLin:AddCol() )
         :cHeader                   := "Ped. cliente"
         :bStrData                  := {|| Trans( aAlbaranes[ oBrwLin:nArrayAt, 7 ], "@R #/999999999/##" ) }
         :nWidth                    := 75
         :lHide                     := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader                   := "Cliente"
         :bStrData                  := {|| GetCliente( aAlbaranes[ oBrwLin:nArrayAt, 7 ] ) }
         :nWidth                    := 150
         :lHide                     := .T.
      end






      TButton():ReDefine( 514, {||(  aAlbaranes[ oBrwLin:nArrayAt, 1 ] := !aAlbaranes[ oBrwLin:nArrayAt, 1 ], oBrwLin:refresh(), oBrwLin:setFocus() )}, oDlg,,, .F.,,,, .F. )






      TButton():ReDefine( 516, {||(  aEval( aAlbaranes, { |aItem| aItem[1] := .T. } ), oBrwLin:refresh(), oBrwLin:setFocus() )}, oDlg,,, .F.,,,, .F. )






      TButton():ReDefine( 517, {||(  aEval( aAlbaranes, { |aItem| aItem[1] := .F. } ), oBrwLin:Refresh(), oBrwLin:SetFocus() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

   oDlg:bStart       := {|| oBrwLin:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult <> 1
      aAlbaranes  := {}
   end



   IF oDlg:nResult == 1 .AND. Len( aAlbaranes ) >= 1



      for nItem := 1 to Len( aAlbaranes )
         if ( aAlbaranes[ nItem, 1 ] )
            aAdd( aNumAlb, aAlbaranes[ nItem, 3 ] )
         end
      next

      for nItem := 1 TO Len( aAlbaranes )



         IF ( D():PedidosProveedores( nView ) )->( dbSeek( aAlbaranes[ nItem, 3] ) ) .AND. aAlbaranes[ nItem, 1]

            if ( D():PedidosProveedores( nView ) )->lRecargo
               aTmp[ 25 ] := .T.
               aGet[ 25 ]:Refresh()
            end

         end



         IF ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( aAlbaranes[ nItem, 3] ) ) .AND. aAlbaranes[ nItem, 1]



            ++nOffSet
            nNumLin              := nil
            nPosPrint            := nil

            if lNumPed()
            (dbfTmp)->( dbAppend() )
            cDesAlb              := "Pedido Nº " + Alltrim( Trans( aAlbaranes[ nItem, 3 ], "@R #/999999999/##" ) )
            cDesAlb              += " - Fecha " + Dtoc( aAlbaranes[ nItem, 4] )
            (dbfTmp)->mLngDes    := cDesAlb
            (dbfTmp)->lControl   := .T.
            (dbfTmp)->nNumLin    := nOffSet
            (dbfTmp)->nPosPrint  := nOffSet
            end

            while ( ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed == aAlbaranes[ nItem, 3 ] )

               if aAlbaranes[ nItem, 2 ] == 2

                  nTotPed              := nTotNPedPrv( D():PedidosProveedoresLineas( nView ) )






                  nTotRec              := AlbaranesProveedoresLineasModel():nUnidadesRecibidas( aAlbaranes[ nItem, 3 ], ( D():PedidosProveedoresLineas( nView ) )->cRef, ( D():PedidosProveedoresLineas( nView ) )->cCodPr1, ( D():PedidosProveedoresLineas( nView ) )->cCodPr2, ( D():PedidosProveedoresLineas( nView ) )->cValPr1, ( D():PedidosProveedoresLineas( nView ) )->cValPr2, ( D():PedidosProveedoresLineas( nView ) )->cLote )
                  nTotPdt              := nTotPed - nTotRec

                  if nTotPdt > 0

                     if nNumLin <> (D():PedidosProveedoresLineas( nView ))->nNumLin
                        ++nOffSet
                        nNumLin           := (D():PedidosProveedoresLineas( nView ))->nNumLin
                     end

                     (dbfTmp)->( dbAppend() )
                     (dbfTmp)->nNumAlb    := 0
                     (dbfTmp)->nNumLin    := nOffSet
                     (dbfTmp)->nPosPrint  := nOffSet
                     (dbfTmp)->cRef       := ( D():PedidosProveedoresLineas( nView ) )->cRef
                     (dbfTmp)->cRefPrv    := ( D():PedidosProveedoresLineas( nView ) )->cRefPrv
                     (dbfTmp)->cDetalle   := ( D():PedidosProveedoresLineas( nView ) )->cDetalle
                     (dbfTmp)->mLngDes    := ( D():PedidosProveedoresLineas( nView ) )->mLngDes
                     (dbfTmp)->nPreDiv    := ( D():PedidosProveedoresLineas( nView ) )->nPreDiv
                     (dbfTmp)->cUnidad    := ( D():PedidosProveedoresLineas( nView ) )->cUnidad
                     (dbfTmp)->nIva       := ( D():PedidosProveedoresLineas( nView ) )->nIva
                     (dbfTmp)->nReq       := ( D():PedidosProveedoresLineas( nView ) )->nReq
                     (dbfTmp)->nDtoLin    := ( D():PedidosProveedoresLineas( nView ) )->nDtoLin
                     (dbfTmp)->nDtoPrm    := ( D():PedidosProveedoresLineas( nView ) )->nDtoPrm
                     (dbfTmp)->nUndKit    := ( D():PedidosProveedoresLineas( nView ) )->nUndKit
                     (dbfTmp)->lKitArt    := ( D():PedidosProveedoresLineas( nView ) )->lKitArt
                     (dbfTmp)->lKitChl    := ( D():PedidosProveedoresLineas( nView ) )->lKitChl
                     (dbfTmp)->lKitPrc    := ( D():PedidosProveedoresLineas( nView ) )->lKitPrc
                     (dbfTmp)->lImpLin    := ( D():PedidosProveedoresLineas( nView ) )->lImpLin
                     (dbfTmp)->cCodPr1    := ( D():PedidosProveedoresLineas( nView ) )->cCodPr1
                     (dbfTmp)->cCodPr2    := ( D():PedidosProveedoresLineas( nView ) )->cCodPr2
                     (dbfTmp)->cValPr1    := ( D():PedidosProveedoresLineas( nView ) )->cValPr1
                     (dbfTmp)->cValPr2    := ( D():PedidosProveedoresLineas( nView ) )->cValPr2
                     (dbfTmp)->nCanPed    := ( D():PedidosProveedoresLineas( nView ) )->nCanPed
                     (dbfTmp)->nDtoRap    := ( D():PedidosProveedoresLineas( nView ) )->nDtoRap
                     (dbfTmp)->mNumSer    := ( D():PedidosProveedoresLineas( nView ) )->mNumSer
                     (dbfTmp)->lLote      := ( D():PedidosProveedoresLineas( nView ) )->lLote
                     (dbfTmp)->nLote      := ( D():PedidosProveedoresLineas( nView ) )->nLote
                     (dbfTmp)->cLote      := ( D():PedidosProveedoresLineas( nView ) )->cLote
                     (dbfTmp)->nFacCnv    := ( D():PedidosProveedoresLineas( nView ) )->nFacCnv
                     (dbfTmp)->cAlmLin    := ( D():PedidosProveedoresLineas( nView ) )->cAlmLin
                     (dbfTmp)->nCtlStk    := ( D():PedidosProveedoresLineas( nView ) )->nCtlStk
                     (dbfTmp)->lControl   := ( D():PedidosProveedoresLineas( nView ) )->lControl
                     (dbfTmp)->cUnidad    := ( D():PedidosProveedoresLineas( nView ) )->cUnidad
                     (dbfTmp)->nNumMed    := ( D():PedidosProveedoresLineas( nView ) )->nNumMed
                     (dbfTmp)->nMedUno    := ( D():PedidosProveedoresLineas( nView ) )->nMedUno
                     (dbfTmp)->nMedDos    := ( D():PedidosProveedoresLineas( nView ) )->nMedDos
                     (dbfTmp)->nMedTre    := ( D():PedidosProveedoresLineas( nView ) )->nMedTre
                     (dbfTmp)->cCodImp    := ( D():PedidosProveedoresLineas( nView ) )->cCodImp
                     (dbfTmp)->nValImp    := ( D():PedidosProveedoresLineas( nView ) )->nValImp
                     (dbfTmp)->cRefAux    := ( D():PedidosProveedoresLineas( nView ) )->cRefAux
                     (dbfTmp)->cRefAux2   := ( D():PedidosProveedoresLineas( nView ) )->cRefAux2
                     (dbfTmp)->cCtrCoste  := ( D():PedidosProveedoresLineas( nView ) )->cCtrCoste
                     (dbfTmp)->cTipCtr    := ( D():PedidosProveedoresLineas( nView ) )->cTipCtr
                     (dbfTmp)->cTerCtr    := ( D():PedidosProveedoresLineas( nView ) )->cTerCtr

                     (dbfTmp)->cCodPed    := aAlbaranes[ nItem, 3 ]
                     (dbfTmp)->cNumPed    := aAlbaranes[ nItem, 7 ]

                     if dbSeekInOrd( ( D():PedidosProveedoresLineas( nView ) )->cRef, "Codigo", D():Articulos( nView ) )

                        ( dbfTmp )->lIvaLin  := ( D():Articulos( nView ) )->lIvaInc

                        ( dbfTmp )->nBnfLin1 := ( D():Articulos( nView ) )->Benef1
                        ( dbfTmp )->nBnfLin2 := ( D():Articulos( nView ) )->Benef2
                        ( dbfTmp )->nBnfLin3 := ( D():Articulos( nView ) )->Benef3
                        ( dbfTmp )->nBnfLin4 := ( D():Articulos( nView ) )->Benef4
                        ( dbfTmp )->nBnfLin5 := ( D():Articulos( nView ) )->Benef5
                        ( dbfTmp )->nBnfLin6 := ( D():Articulos( nView ) )->Benef6

                        ( dbfTmp )->lBnfLin1 := ( D():Articulos( nView ) )->lBnf1
                        ( dbfTmp )->lBnfLin2 := ( D():Articulos( nView ) )->lBnf2
                        ( dbfTmp )->lBnfLin3 := ( D():Articulos( nView ) )->lBnf3
                        ( dbfTmp )->lBnfLin4 := ( D():Articulos( nView ) )->lBnf4
                        ( dbfTmp )->lBnfLin5 := ( D():Articulos( nView ) )->lBnf5
                        ( dbfTmp )->lBnfLin6 := ( D():Articulos( nView ) )->lBnf6

                        ( dbfTmp )->nBnfSbr1 := ( D():Articulos( nView ) )->nBnfSbr1
                        ( dbfTmp )->nBnfSbr2 := ( D():Articulos( nView ) )->nBnfSbr2
                        ( dbfTmp )->nBnfSbr3 := ( D():Articulos( nView ) )->nBnfSbr3
                        ( dbfTmp )->nBnfSbr4 := ( D():Articulos( nView ) )->nBnfSbr4
                        ( dbfTmp )->nBnfSbr5 := ( D():Articulos( nView ) )->nBnfSbr5
                        ( dbfTmp )->nBnfSbr6 := ( D():Articulos( nView ) )->nBnfSbr6

                        ( dbfTmp )->nPvpLin1 := ( D():Articulos( nView ) )->pVenta1
                        ( dbfTmp )->nPvpLin2 := ( D():Articulos( nView ) )->pVenta2
                        ( dbfTmp )->nPvpLin3 := ( D():Articulos( nView ) )->pVenta3
                        ( dbfTmp )->nPvpLin4 := ( D():Articulos( nView ) )->pVenta4
                        ( dbfTmp )->nPvpLin5 := ( D():Articulos( nView ) )->pVenta5
                        ( dbfTmp )->nPvpLin6 := ( D():Articulos( nView ) )->pVenta6

                        ( dbfTmp )->nIvaLin1 := ( D():Articulos( nView ) )->pVtaIva1
                        ( dbfTmp )->nIvaLin2 := ( D():Articulos( nView ) )->pVtaIva2
                        ( dbfTmp )->nIvaLin3 := ( D():Articulos( nView ) )->pVtaIva3
                        ( dbfTmp )->nIvaLin4 := ( D():Articulos( nView ) )->pVtaIva4
                        ( dbfTmp )->nIvaLin5 := ( D():Articulos( nView ) )->pVtaIva5
                        ( dbfTmp )->nIvaLin6 := ( D():Articulos( nView ) )->pVtaIva6

                        ( dbfTmp )->lNumSer  := ( D():Articulos( nView ) )->lNumSer
                        ( dbfTmp )->lAutSer  := ( D():Articulos( nView ) )->lAutSer

                        if ( ( dbfTmp )->lNumSer )

                           if ( ( dbfTmp )->lAutSer )

                              AutoNumerosSerie( dbfTmp, nMode )

                           elseif !( dbfTmpSer )->( dbSeek( Str( ( dbfTmp )->nNumLin, 4 ) + ( dbfTmp )->cRef ) )

                              msgStop( "Tiene que introducir números de serie para el artículo: " + (dbfTmp)->cDetalle )

                              EditarNumerosSerie( dbfTmp, nMode )

                           end

                        end

                     end

                     if lCalCaj()

                        if nTotRec <> 0

                           nDiv  := Mod( nTotPdt, ( D():PedidosProveedoresLineas( nView ) )->nUniCaja )
                           if nDiv == 0 .AND. ( D():PedidosProveedoresLineas( nView ) )->nCanPed <> 0
                              ( dbfTmp )->nCanEnt  := Div( nTotPdt, ( D():PedidosProveedoresLineas( nView ) )->nUniCaja )
                              ( dbfTmp )->nUniCaja := ( D():PedidosProveedoresLineas( nView ) )->nUniCaja
                           else
                              ( dbfTmp )->nCanEnt  := 0
                              ( dbfTmp )->nUniCaja := nTotPdt
                           end

                        else

                           ( dbfTmp )->nCanEnt     := ( D():PedidosProveedoresLineas( nView ) )->nCanPed
                           ( dbfTmp )->nUniCaja    := ( D():PedidosProveedoresLineas( nView ) )->nUniCaja

                        end

                     else

                        ( dbfTmp )->nUniCaja       := nTotPdt

                     end

                  end

               else

                  if nNumLin <> ( D():PedidosProveedoresLineas( nView ) )->nNumLin
                     ++nOffSet
                     nNumLin           := ( D():PedidosProveedoresLineas( nView ) )->nNumLin
                  end

                  (dbfTmp)->( dbAppend() )
                  (dbfTmp)->nNumAlb    := 0
                  (dbfTmp)->nNumLin    := nOffSet
                  (dbfTmp)->nPosPrint  := nOffSet
                  (dbfTmp)->cRef       := ( D():PedidosProveedoresLineas( nView ) )->cRef
                  (dbfTmp)->cRefPrv    := ( D():PedidosProveedoresLineas( nView ) )->cRefPrv
                  (dbfTmp)->cDetalle   := ( D():PedidosProveedoresLineas( nView ) )->cDetalle
                  (dbfTmp)->mLngDes    := ( D():PedidosProveedoresLineas( nView ) )->mLngDes
                  (dbfTmp)->nPreDiv    := ( D():PedidosProveedoresLineas( nView ) )->nPreDiv
                  (dbfTmp)->cUnidad    := ( D():PedidosProveedoresLineas( nView ) )->cUnidad
                  (dbfTmp)->nIva       := ( D():PedidosProveedoresLineas( nView ) )->nIva
                  (dbfTmp)->nReq       := ( D():PedidosProveedoresLineas( nView ) )->nReq
                  (dbfTmp)->nDtoLin    := ( D():PedidosProveedoresLineas( nView ) )->nDtoLin
                  (dbfTmp)->nDtoPrm    := ( D():PedidosProveedoresLineas( nView ) )->nDtoPrm
                  (dbfTmp)->nUniCaja   := ( D():PedidosProveedoresLineas( nView ) )->nUniCaja
                  (dbfTmp)->nCanEnt    := ( D():PedidosProveedoresLineas( nView ) )->nCanEnt
                  (dbfTmp)->nUndKit    := ( D():PedidosProveedoresLineas( nView ) )->nUndKit
                  (dbfTmp)->lKitArt    := ( D():PedidosProveedoresLineas( nView ) )->lKitArt
                  (dbfTmp)->lKitChl    := ( D():PedidosProveedoresLineas( nView ) )->lKitChl
                  (dbfTmp)->lKitPrc    := ( D():PedidosProveedoresLineas( nView ) )->lKitPrc
                  (dbfTmp)->lImpLin    := ( D():PedidosProveedoresLineas( nView ) )->lImpLin
                  (dbfTmp)->cCodPr1    := ( D():PedidosProveedoresLineas( nView ) )->cCodPr1
                  (dbfTmp)->cCodPr2    := ( D():PedidosProveedoresLineas( nView ) )->cCodPr2
                  (dbfTmp)->cValPr1    := ( D():PedidosProveedoresLineas( nView ) )->cValPr1
                  (dbfTmp)->cValPr2    := ( D():PedidosProveedoresLineas( nView ) )->cValPr2
                  (dbfTmp)->nCanPed    := ( D():PedidosProveedoresLineas( nView ) )->nCanPed
                  (dbfTmp)->nDtoRap    := ( D():PedidosProveedoresLineas( nView ) )->nDtoRap
                  (dbfTmp)->mNumSer    := ( D():PedidosProveedoresLineas( nView ) )->mNumSer
                  (dbfTmp)->lLote      := ( D():PedidosProveedoresLineas( nView ) )->lLote
                  (dbfTmp)->nLote      := ( D():PedidosProveedoresLineas( nView ) )->nLote
                  (dbfTmp)->cLote      := ( D():PedidosProveedoresLineas( nView ) )->cLote
                  (dbfTmp)->nFacCnv    := ( D():PedidosProveedoresLineas( nView ) )->nFacCnv
                  (dbfTmp)->cAlmLin    := ( D():PedidosProveedoresLineas( nView ) )->cAlmLin
                  (dbfTmp)->nCtlStk    := ( D():PedidosProveedoresLineas( nView ) )->nCtlStk
                  (dbfTmp)->lControl   := ( D():PedidosProveedoresLineas( nView ) )->lControl
                  (dbfTmp)->mObsLin    := ( D():PedidosProveedoresLineas( nView ) )->mObsLin
                  (dbfTmp)->cUnidad    := ( D():PedidosProveedoresLineas( nView ) )->cUnidad
                  (dbfTmp)->nNumMed    := ( D():PedidosProveedoresLineas( nView ) )->nNumMed
                  (dbfTmp)->nMedUno    := ( D():PedidosProveedoresLineas( nView ) )->nMedUno
                  (dbfTmp)->nMedDos    := ( D():PedidosProveedoresLineas( nView ) )->nMedDos
                  (dbfTmp)->nMedTre    := ( D():PedidosProveedoresLineas( nView ) )->nMedTre
                  (dbfTmp)->cCodImp    := ( D():PedidosProveedoresLineas( nView ) )->cCodImp
                  (dbfTmp)->nValImp    := ( D():PedidosProveedoresLineas( nView ) )->nValImp
                  (dbfTmp)->cRefAux    := ( D():PedidosProveedoresLineas( nView ) )->cRefAux
                  (dbfTmp)->cRefAux2   := ( D():PedidosProveedoresLineas( nView ) )->cRefAux2
                  (dbfTmp)->cCtrCoste  := ( D():PedidosProveedoresLineas( nView ) )->cCtrCoste
                  (dbfTmp)->cTipCtr    := ( D():PedidosProveedoresLineas( nView ) )->cTipCtr
                  (dbfTmp)->cTerCtr    := ( D():PedidosProveedoresLineas( nView ) )->cTerCtr

                  (dbfTmp)->cCodPed    := aAlbaranes[ nItem, 3 ]
                  (dbfTmp)->cNumPed    := aAlbaranes[ nItem, 7 ]

                  if dbSeekInOrd( ( D():PedidosProveedoresLineas( nView ) )->cRef, "Codigo", D():Articulos( nView ) )

                     ( dbfTmp )->lIvaLin  := ( D():Articulos( nView ) )->lIvaInc

                     ( dbfTmp )->nBnfLin1 := ( D():Articulos( nView ) )->Benef1
                     ( dbfTmp )->nBnfLin2 := ( D():Articulos( nView ) )->Benef2
                     ( dbfTmp )->nBnfLin3 := ( D():Articulos( nView ) )->Benef3
                     ( dbfTmp )->nBnfLin4 := ( D():Articulos( nView ) )->Benef4
                     ( dbfTmp )->nBnfLin5 := ( D():Articulos( nView ) )->Benef5
                     ( dbfTmp )->nBnfLin6 := ( D():Articulos( nView ) )->Benef6

                     ( dbfTmp )->lBnfLin1 := ( D():Articulos( nView ) )->lBnf1
                     ( dbfTmp )->lBnfLin2 := ( D():Articulos( nView ) )->lBnf2
                     ( dbfTmp )->lBnfLin3 := ( D():Articulos( nView ) )->lBnf3
                     ( dbfTmp )->lBnfLin4 := ( D():Articulos( nView ) )->lBnf4
                     ( dbfTmp )->lBnfLin5 := ( D():Articulos( nView ) )->lBnf5
                     ( dbfTmp )->lBnfLin6 := ( D():Articulos( nView ) )->lBnf6

                     ( dbfTmp )->nBnfSbr1 := ( D():Articulos( nView ) )->nBnfSbr1
                     ( dbfTmp )->nBnfSbr2 := ( D():Articulos( nView ) )->nBnfSbr2
                     ( dbfTmp )->nBnfSbr3 := ( D():Articulos( nView ) )->nBnfSbr3
                     ( dbfTmp )->nBnfSbr4 := ( D():Articulos( nView ) )->nBnfSbr4
                     ( dbfTmp )->nBnfSbr5 := ( D():Articulos( nView ) )->nBnfSbr5
                     ( dbfTmp )->nBnfSbr6 := ( D():Articulos( nView ) )->nBnfSbr6

                     ( dbfTmp )->nPvpLin1 := ( D():Articulos( nView ) )->pVenta1
                     ( dbfTmp )->nPvpLin2 := ( D():Articulos( nView ) )->pVenta2
                     ( dbfTmp )->nPvpLin3 := ( D():Articulos( nView ) )->pVenta3
                     ( dbfTmp )->nPvpLin4 := ( D():Articulos( nView ) )->pVenta4
                     ( dbfTmp )->nPvpLin5 := ( D():Articulos( nView ) )->pVenta5
                     ( dbfTmp )->nPvpLin6 := ( D():Articulos( nView ) )->pVenta6

                     ( dbfTmp )->nIvaLin1 := ( D():Articulos( nView ) )->pVtaIva1
                     ( dbfTmp )->nIvaLin2 := ( D():Articulos( nView ) )->pVtaIva2
                     ( dbfTmp )->nIvaLin3 := ( D():Articulos( nView ) )->pVtaIva3
                     ( dbfTmp )->nIvaLin4 := ( D():Articulos( nView ) )->pVtaIva4
                     ( dbfTmp )->nIvaLin5 := ( D():Articulos( nView ) )->pVtaIva5
                     ( dbfTmp )->nIvaLin6 := ( D():Articulos( nView ) )->pVtaIva6

                     ( dbfTmp )->lNumSer  := ( D():Articulos( nView ) )->lNumSer
                     ( dbfTmp )->lAutSer  := ( D():Articulos( nView ) )->lAutSer

                     if ( ( dbfTmp )->lNumSer )

                        if ( ( dbfTmp )->lAutSer )

                           AutoNumerosSerie( dbfTmp, nMode )

                        elseif !( dbfTmpSer )->( dbSeek( Str( ( dbfTmp )->nNumLin, 4 ) + ( dbfTmp )->cRef ) )

                           msgStop( "Tiene que introducir números de serie para el artículo: " + (dbfTmp)->cDetalle )

                           EditarNumerosSerie( dbfTmp, nMode )

                        end

                     end

                  end

               end

               ( D():PedidosProveedoresLineas( nView ) )->( dbSkip( 1 ) )

            end

            ( dbfTmp )->( dbGoTop() )


            oBrw:refresh()

         end

      NEXT



      aGet[29]:Disable()



      nTotAlbPrv( nil, D():AlbaranesProveedores( nView ), dbfTmp, D():TiposIva( nView ), D():Divisas( nView ), aTmp )

  end

RETURN .T.



Static FUNCTION nEstadoIncidencia( cNumAlb )

   local nEstado  := 0

   if ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbSeek( cNumAlb ) )

      while ( D():AlbaranesProveedoresIncidencias( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresIncidencias( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresIncidencias( nView ) )->cSufAlb == cNumAlb .AND. !( D():AlbaranesProveedoresIncidencias( nView ) )->( Eof() )

         if ( D():AlbaranesProveedoresIncidencias( nView ) )->lListo
            do case
               case nEstado == 0 .OR. nEstado == 3
                    nEstado := 3
               case nEstado == 1
                    nEstado := 2
            end
         else
            do case
               case nEstado == 0
                    nEstado := 1
               case nEstado == 3
                    nEstado := 2
            end
         end

         ( D():AlbaranesProveedoresIncidencias( nView ) )->( dbSkip() )

      end

   end

RETURN ( nEstado )



Static FUNCTION GetCliente( cNumPed )

   local nRec     := ( D():PedidosClientes( nView ) )->( Recno() )
   local nOrdAnt  := ( D():PedidosClientes( nView ) )->( OrdSetFocus( "NNUMPED" ) )
   local cCliente := ""

   if ( D():PedidosClientes( nView ) )->( dbSeek( cNumPed ) )
      cCliente    := AllTrim( ( D():PedidosClientes( nView ) )->cCodCli ) + " - " + AllTrim( ( D():PedidosClientes( nView ) )->cNomCli )
   end

   ( D():PedidosClientes( nView ) )->( nOrdAnt )
   ( D():PedidosClientes( nView ) )->( dbGoTo( nRec ) )

RETURN cCliente



STATIC FUNCTION ValidaMedicion( aTmp, aGet )

   local cNewUndMed  := aGet[ 13 ]:VarGet





   if ( Empty( cOldUndMed ) .OR. cOldUndMed <> cNewUndMed )

      if D():GetObject( "UnidadMedicion", nView ):oDbf:Seek( aTmp[ 13 ] )

         if D():GetObject( "UnidadMedicion", nView ):oDbf:nDimension >= 1 .AND. !Empty( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim1 )
            if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim1 )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( ( D():Articulos( nView ) )->nLngArt )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
            else
               aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := ( D():Articulos( nView ) )->nLngArt
            end
         else
            if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            else
               aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := 0
            end
         end

         if D():GetObject( "UnidadMedicion", nView ):oDbf:nDimension >= 2 .AND. !Empty( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim2 )
            if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim2 )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( ( D():Articulos( nView ) )->nAltArt )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
            else
               aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := ( D():Articulos( nView ) )->nAltArt
            end

         else
            if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            else
                 aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := 0
            end
         end

         if D():GetObject( "UnidadMedicion", nView ):oDbf:nDimension >= 3 .AND. !Empty( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim3 )
            if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( D():GetObject( "UnidadMedicion", nView ):oDbf:cTextoDim3 )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( ( D():Articulos( nView ) ) ->nAncArt )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
            else
               aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := ( D():Articulos( nView ) )->nAncArt
            end
         else
            if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
               aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            else
               aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := 0
            end
         end

      else

         if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
            aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
         end

         if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
            aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
         end

         if !Empty( aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
            aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            aGet[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
         end

      end

      cOldUndMed := cNewUndMed

   end

RETURN .T.



Static FUNCTION DataReport( oFr )

   local np





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Albaranes", ( D():AlbaranesProveedores( nView ) )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Albaranes", cItemsToReport( aItmAlbPrv() ) )

   oFr:SetWorkArea(     "Lineas de albaranes", ( D():AlbaranesProveedoresLineas( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de albaranes", cItemsToReport( aColAlbPrv() ) )

   oFr:SetWorkArea(     "Series de lineas de albaranes", ( D():AlbaranesProveedoresSeries( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Series de lineas de albaranes", cItemsToReport( aSerAlbPrv() ) )

   oFr:SetWorkArea(     "Incidencias de albaranes", ( D():AlbaranesProveedoresIncidencias( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de albaranes", cItemsToReport( aIncAlbPrv() ) )

   oFr:SetWorkArea(     "Documentos de albaranes", ( D():AlbaranesProveedoresDocumentos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de albaranes", cItemsToReport( aAlbPrvDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Proveedor", ( D():Proveedores( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Proveedor", cItemsToReport( aItmPrv() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", nView ):oDbf ) )

   oFr:SetWorkArea(     "Centro de coste",  D():CentroCoste( nView ):Select() )
   oFr:SetFieldAliases( "Centro de coste",  cObjectsToReport( D():CentroCoste( nView ):oDbf ) )







   oFr:setUserDataSet( "Impuestos albarán", "porcentajeiva;logrecargo;porcentajere;bruto;neto;impiva;impre;nivmh;ntransporte;npntver", {||np := 1}, {||np := np + 1}, {||np := np - 1}, {||np > Len( aTotIva )}, {|key| hGet( aTotIva[np], key ) } )

   oFr:SetMasterDetail( "Albaranes", "Lineas de albaranes",             {|| ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb } )
   oFr:SetMasterDetail( "Albaranes", "Series de lineas de albaranes",   {|| ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb } )
   oFr:SetMasterDetail( "Albaranes", "Incidencias de albaranes",        {|| ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb } )
   oFr:SetMasterDetail( "Albaranes", "Documentos de albaranes",         {|| ( D():AlbaranesProveedores( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) + ( D():AlbaranesProveedores( nView ) )->cSufAlb } )
   oFr:SetMasterDetail( "Albaranes", "Empresa",                         {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Albaranes", "Proveedor",                       {|| ( D():AlbaranesProveedores( nView ) )->cCodPrv } )
   oFr:SetMasterDetail( "Albaranes", "Almacenes",                       {|| ( D():AlbaranesProveedores( nView ) )->cCodAlm } )
   oFr:SetMasterDetail( "Albaranes", "Formas de pago",                  {|| ( D():AlbaranesProveedores( nView ) )->cCodPgo } )
   oFr:SetMasterDetail( "Albaranes", "Centro de coste",                 {|| ( D():AlbaranesProveedores( nView ) )->cCtrCoste } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Artículos",             {|| ( D():AlbaranesProveedoresLineas( nView ) )->cRef } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Código de proveedores", {|| ( D():AlbaranesProveedores( nView ) )->cCodPrv + ( D():AlbaranesProveedoresLineas( nView ) )->cRef } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Unidades de medición",  {|| ( D():AlbaranesProveedoresLineas( nView ) )->cUnidad } )

   oFr:SetResyncPair(   "Albaranes", "Lineas de albaranes" )
   oFr:SetResyncPair(   "Albaranes", "Series de lineas de albaranes" )
   oFr:SetResyncPair(   "Albaranes", "Incidencias de albaranes" )
   oFr:SetResyncPair(   "Albaranes", "Documentos de albaranes" )
   oFr:SetResyncPair(   "Albaranes", "Empresa" )
   oFr:SetResyncPair(   "Albaranes", "Proveedor" )
   oFr:SetResyncPair(   "Albaranes", "Almacenes" )
   oFr:SetResyncPair(   "Albaranes", "Formas de pago" )
   oFr:SetResyncPair(   "Albaranes", "Centro de coste" )

   oFr:SetResyncPair(   "Lineas de albaranes", "Artículos" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Código de proveedores" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Unidades de medición" )

RETURN nil



Static FUNCTION VariableReport( oFr )

   oFr:DeleteCategory(  "Albaranes" )
   oFr:DeleteCategory(  "Lineas de albaranes" )





   oFr:AddVariable(     "Albaranes",             "Total albaran",                            "GetHbVar('nTotAlb')" )
   oFr:AddVariable(     "Albaranes",             "Total bruto",                              "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Albaranes",             "Total descuento",                          "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Albaranes",             "Total descuento pronto pago",              "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Albaranes",             "Total bruto",                              "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Albaranes",             "Total neto",                               "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Albaranes",             "Total primer descuento definible",         "GetHbVar('nTotUno')" )
   oFr:AddVariable(     "Albaranes",             "Total segundo descuento definible",        "GetHbVar('nTotDos')" )
   oFr:AddVariable(     "Albaranes",             "Total " + cImp(),                          "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Albaranes",             "Total RE",                                 "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Albaranes",             "Total retención",                          "GetHbVar('nTotRet')" )
   oFr:AddVariable(     "Albaranes",             "Total impuestos especiales",               "GetHbVar('nTotIvm')" )



















   oFr:AddVariable(     "Lineas de albaranes",   "Código del artículo con propiedades",      "CallHbFunc('cCodAlbPrv')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Detalle del artículo",                     "CallHbFunc('cDesAlbPrv')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Detalle del artículo otro lenguaje",       "CallHbFunc('cDesAlbPrvLeng')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Total unidades artículo",                  "CallHbFunc('nTotNAlbPrv')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Precio unitario del artículo",             "CallHbFunc('nTotUAlbPrv')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Total línea de albaran",                   "CallHbFunc('nTotLAlbPrv')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Código de barras para primera propiedad",  "CallHbFunc('cBarPrp1')" )
   oFr:AddVariable(     "Lineas de albaranes",   "Código de barras para segunda propiedad",  "CallHbFunc('cBarPrp2')" )

   oFr:AddVariable(     "Lineas de albaranes",   "Stock actual en almacén",                  "CallHbFunc('nStockLineaAlbPrv')" )

RETURN nil



Static FUNCTION YearComboBoxChange()

   if ( oWndBrw:oWndBar:cYearComboBox() <> "[Todos]" )
      oWndBrw:oWndBar:setYearComboBoxExpression( "Year( Field->dFecAlb ) == " + oWndBrw:oWndBar:cYearComboBox() )
   else
      oWndBrw:oWndBar:setYearComboBoxExpression( "" )
   end

   oWndBrw:chgFilter()

RETURN nil












Static FUNCTION AddFicheroICG( aFichero, oBrwFichero )

   local i
   local cFile
   local aFile
   local nFlag    := nOr( 0x00000800, 0x00000008, 0x00000200, 0x00080000, 0x00200000 )

   cFile          := cGetFile( "All | *.*", "Seleccione los ficheros a importar", "*.*" , , .F., .T., nFlag )
   cFile          := Left( cFile, At( Chr( 0 ) + Chr( 0 ), cFile ) - 1 )

   if !Empty( cFile )

      cFile       := StrTran( cFile, Chr( 0 ), "," )
      aFile       := hb_aTokens( cFile, "," )

      if Len( aFile ) > 1

         for i := 2 to Len( aFile )
            aFile[ i ] := aFile[ 1 ] + "\" + aFile[ i ]
         next

         hb_ADel( aFile, 1, .T. )

      endif

      if IsArray( aFile )

         for i := 1 to Len( aFile )
            aAdd( aFichero, aFile[ i ] )
         next

      else

         aAdd( aFichero, aFile )

      endif

   end

   oBrwFichero:Refresh()

RETURN ( aFichero )



Static FUNCTION DelFicheroICG( aFichero, oBrwFichero )

   hb_ADel( aFichero, oBrwFichero:nArrayAt, .T. )

   oBrwFichero:Refresh()

RETURN ( nil )



Static FUNCTION IcgCabAlbPrv( cSerDoc, nNumDoc, cSufDoc, dFecDoc )

   local lApp
   local cCodPrv                 := Replicate( "0", RetNumCodPrvEmp() )

   if dbSeekInOrd( cSerDoc + nNumDoc + cSufDoc, "cSuAlb", D():AlbaranesProveedores( nView ) )

      lApp                       := .F.
      cSerDoc                    := ( D():AlbaranesProveedores( nView ) )->cSerAlb
      nNumAlb                    := ( D():AlbaranesProveedores( nView ) )->nNumAlb
      cSufDoc                    := ( D():AlbaranesProveedores( nView ) )->cSufAlb

      while ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( cSerDoc + Str( nNumAlb ) + cSufDoc ) )
         if dbLock( D():AlbaranesProveedoresLineas( nView ) )
            ( D():AlbaranesProveedoresLineas( nView ) )->( dbDelete() )
            ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnLock() )
         end
      end

   else

      lApp                       := .T.
      nNumAlb                    := nNewDoc( cSerDoc, D():AlbaranesProveedores( nView ), "nAlbPrv", , D():Contadores( nView ) )

   end

   if lApp
      dbAppe( D():AlbaranesProveedores( nView ) )
   else
      dbLock( D():AlbaranesProveedores( nView ) )
   end

      ( D():AlbaranesProveedores( nView ) )->cSerAlb    := cSerDoc
      ( D():AlbaranesProveedores( nView ) )->nNumAlb    := nNumAlb
      ( D():AlbaranesProveedores( nView ) )->cSufAlb    := cSufDoc
      ( D():AlbaranesProveedores( nView ) )->dFecAlb    := Stod( dFecDoc )
      ( D():AlbaranesProveedores( nView ) )->cCodAlm    := Application():codigoAlmacen()
      ( D():AlbaranesProveedores( nView ) )->cDivAlb    := cDivEmp()
      ( D():AlbaranesProveedores( nView ) )->nVdvAlb    := nChgDiv( cDivEmp(), D():Divisas( nView ) )
      ( D():AlbaranesProveedores( nView ) )->cSuAlb     := cSerDoc + nNumDoc + cSufDoc
      ( D():AlbaranesProveedores( nView ) )->cCodUsr    := Auth():Codigo()
      ( D():AlbaranesProveedores( nView ) )->cCodDlg    := Application():CodigoDelegacion()
      ( D():AlbaranesProveedores( nView ) )->cCodCaj    := Application():CodigoCaja()
      ( D():AlbaranesProveedores( nView ) )->cTurAlb    := cCurSesion()

      ( D():AlbaranesProveedores( nView ) )->cCodPrv    := cCodPrv

      if ( D():Proveedores( nView ) )->( dbSeek( cCodPrv ) )
         ( D():AlbaranesProveedores( nView ) )->cNomPrv := ( D():Proveedores( nView ) )->Titulo
         ( D():AlbaranesProveedores( nView ) )->cDirPrv := ( D():Proveedores( nView ) )->Domicilio
         ( D():AlbaranesProveedores( nView ) )->cPobPrv := ( D():Proveedores( nView ) )->Poblacion
         ( D():AlbaranesProveedores( nView ) )->cProPrv := ( D():Proveedores( nView ) )->Provincia
         ( D():AlbaranesProveedores( nView ) )->cPosPrv := ( D():Proveedores( nView ) )->CodPostal
         ( D():AlbaranesProveedores( nView ) )->cDniPrv := ( D():Proveedores( nView ) )->Nif
      end

   ( D():AlbaranesProveedores( nView ) )->( dbUnlock() )

RETURN ( nil )



Static FUNCTION IcgDetAlbPrv( cSerDoc, cSufDoc, cDesLin, nUntLin, nPvpLin, nDtoLin, cRefLin )

   if !dbSeekInOrd( cRefLin, "Codigo", D():Articulos( nView ) )
      cInforme                += "Articulo " + cRefLin + " no existe en la base de datos, albaran número " + cSerDoc + "/" + Alltrim( Str( nNumAlb ) ) + "/" + RetSufEmp() + Chr(13)+Chr(10)
      lIncidencia             := .T.
   else
      if ( Round( ( D():Articulos( nView ) )->pCosto, 2 ) <> ( Round( ( nPvpLin ) - ( nPvpLin * nDtoLin / 100 ), 2 ) ) )
         cInforme             += "Articulo " + cRefLin + " ha variado su precio de costo, percio nuevo " + Alltrim( Str( Round( ( nPvpLin ) - ( nPvpLin * nDtoLin / 100 ), 2 ) ) ) + Chr(13)+Chr(10)
         lIncidencia          := .T.
      end
   end

   ( D():AlbaranesProveedoresLineas( nView ) )->( dbAppend() )
   ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb    := cSerDoc
   ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb    := nNumAlb
   ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb    := cSufDoc
   ( D():AlbaranesProveedoresLineas( nView ) )->cAlmLin    := Application():codigoAlmacen()
   ( D():AlbaranesProveedoresLineas( nView ) )->cRef       := cRefLin
   ( D():AlbaranesProveedoresLineas( nView ) )->cDetalle   := cDesLin
   ( D():AlbaranesProveedoresLineas( nView ) )->mLngDes    := cDesLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nUniCaja   := nUntLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nPreDiv    := nPvpLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nDtoLin    := nDtoLin
   ( D():AlbaranesProveedoresLineas( nView ) )->nIva       := nIva( D():TiposIva( nView ), "G" )
   ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnlock() )

RETURN ( nil )



Static FUNCTION EditarNumerosSerie( aTmp, nMode )

   oNumerosSerie:nMode              := nMode

   if IsArray( aTmp )

      oNumerosSerie:cCodArt            := aTmp[ 4    ]
      oNumerosSerie:cCodAlm            := aTmp[ 58 ]
      oNumerosSerie:nNumLin            := aTmp[ 63 ]
      oNumerosSerie:lAutoSerializacion := aTmp[ 107 ]

   else

      oNumerosSerie:cCodArt            := ( aTmp )->cRef
      oNumerosSerie:cCodAlm            := ( aTmp )->cAlmLin
      oNumerosSerie:nNumLin            := ( aTmp )->nNumLin
      oNumerosSerie:lAutoSerializacion := ( aTmp )->lAutSer

   end

   oNumerosSerie:nTotalUnidades     := nTotNAlbPrv( aTmp )

   oNumerosSerie:uTmpSer            := dbfTmpSer

   if oNumerosSerie:lAutoSerializacion
       oNumerosSerie:AutoSerializa()
   end

   oNumerosSerie:Resource()

RETURN ( nil )



Static FUNCTION AutoNumerosSerie( aTmp, nMode )

   oNumerosSerie:nMode              := nMode

   oNumerosSerie:cCodArt            := aTmp[ 4    ]
   oNumerosSerie:cCodAlm            := aTmp[ 58 ]
   oNumerosSerie:nNumLin            := aTmp[ 63 ]
   oNumerosSerie:lAutoSerializacion := aTmp[ 107 ]

   oNumerosSerie:nTotalUnidades     := nTotNAlbPrv( aTmp )

   oNumerosSerie:uTmpSer            := dbfTmpSer

   if oNumerosSerie:lAutoSerializacion
       oNumerosSerie:AutoSerializa()
   end

RETURN ( nil )



Static FUNCTION EliminarNumeroSerie( aTmp )

   while ( ( dbfTmpSer )->( dbSeek( Str( aTmp[ 63 ], 4 ) + aTmp[ 4 ] ) ) ) .AND. !( dbfTmpSer )->( Eof() )
      ( dbfTmpSer )->( dbDelete() )
   end

RETURN ( nil )


FUNCTION mailReportAlbPrv( cCodigoDocumento )

RETURN ( printReportAlbPrv( 6, 1, ImpresoraDefectoUsuario(), cCodigoDocumento ) )



static FUNCTION PrintReportAlbPrv( nDevice, nCopies, cPrinter, cDoc )

   local oFr
   local cFilePdf       := cPatOut() + "AlbaranProveedor" +  ( D():AlbaranesProveedores( nView ) )->cSerAlb + Alltrim( Str( ( D():AlbaranesProveedores( nView ) )->nNumAlb ) ) + ".Pdf"
   local nOrd

   If( nCopies == nil, nCopies := 1, ) ;
   If( nDevice == nil, nDevice := 2, ) ;

   if Empty( cPrinter )
      cPrinter                := ImpresoraDefectoUsuario()
   end

   SysRefresh()

   nOrd                 := ( D():AlbaranesProveedoresLineas( nView ) )->( ordSetFocus( "nPosPrint" ) )

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( D():Documentos( nView ) )->( Select() ), "mReport" ) } )





   DataReport( oFr )





   if !Empty( ( D():Documentos( nView ) )->mReport )

      oFr:LoadFromBlob( ( D():Documentos( nView ) )->( Select() ), "mReport")





      VariableReport( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2
            oFr:ShowPreparedReport()

         case nDevice == 1
            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
            oFr:DoExport(     "PDFExport" )

         case nDevice == 6

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .F. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

   ( D():AlbaranesProveedoresLineas( nView ) )->( ordSetFocus( nOrd ) )

RETURN cFilePdf



Static FUNCTION IcgMotor()

   local oDlg
   local aFichero
   local oInforme
   local oBrwFichero
   local oTreeImportacion
   local oImageImportacion

   aFichero                         := {}
   cInforme                         := ""
   lIncidencia                      := .F.

   oDlg = TDialog():New(,,,,, "ImportarICG",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBrwFichero                   := IXBrowse():New( oDlg )

      oBrwFichero:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFichero:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFichero:SetArray( aFichero, , , .F. )

      oBrwFichero:nMarqueeStyle     := 5

      oBrwFichero:lHScroll          := .F.

      oBrwFichero:CreateFromResource( 220 )

      oBrwFichero:bLDblClick        := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( aFichero[ oBrwFichero:nArrayAt ] ) ) }

      with object ( oBrwFichero:AddCol() )
         :cHeader          := "Fichero"
         :bEditValue       := {|| aFichero[ oBrwFichero:nArrayAt ] }
         :nWidth           := 460
      end




      TButton():ReDefine( 200, {||( AddFicheroICG( aFichero, oBrwFichero ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 210, {||( DelFicheroICG( aFichero, oBrwFichero ) )}, oDlg,,, .F.,,,, .F. )








      oInforme := TMultiGet():ReDefine( 230, { | u | If( PCount()==0, cInforme, cInforme:= u ) }, oDlg,,,,,,, .F.,, .F.,, )




      TButton():ReDefine( 1, {||( IcgAlbPrv( aFichero, oDlg, oInforme ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| IcgAlbPrv( aFichero, oDlg, oInforme ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION IcgAlbPrv( aFichero, oDlg, oInforme )

   hb_freadline()

RETURN ( nil )

















FUNCTION ExcelImport( aTmpAlb, dbfTmp, cArticulo, cArtCom, cFamilia, cDiv, oBrw, lPedido, cKit )

   local n
   local m
   local nComPro
   local nUnidad
   local nCajas
   local cCodigo
   local cProp1
   local cProp2
   local oOleExcel
   local cFileExcel  := cGetFile( "Excel ( *.Xls ) | " + "*.Xls", "Seleccione la hoja de calculo" )

   If( lPedido == nil, lPedido := .F., ) ;

   if File( cFileExcel )

      oOleExcel                        := TOleExcel():New( "Importando hoja de excel", "Conectando...", .F. )

      oOleExcel:oExcel:Visible         := .T.
      oOleExcel:oExcel:DisplayAlerts   := .F.
      oOleExcel:oExcel:WorkBooks:Open( cFileExcel )

      for m := 1 to 3

         oOleExcel:oExcel:WorkSheets( m ):Activate()

         for n := 9 to 33

            nUnidad  := oOleExcel:oExcel:ActiveSheet:Range( "C" + lTrim( Str( n ) ) ):Value
            nCajas   := oOleExcel:oExcel:ActiveSheet:Range( "E" + lTrim( Str( n ) ) ):Value
            cCodigo  := oOleExcel:oExcel:ActiveSheet:Range( "D" + lTrim( Str( n ) ) ):Value

            if !Empty( nUnidad ) .AND. !Empty( nCajas ) .AND. !Empty( cCodigo )
               cProp1   := Str( nCajas, 3 )
               cProp2   := StrTran( cCodigo, "V", "T" )
               cCodigo  := "2044" + StrTran( Str( nCajas, 3 ), Space( 1 ), "0" )





               if ( cArticulo )->( dbSeek( cCodigo ) )

                  ( dbfTmp )->( dbAppend() )

                  ( dbfTmp )->nNumLin     := nLastNum( dbfTmp )
                  ( dbfTmp )->nPosPrint   := nLastNum( dbfTmp, "nPosPrint" )
                  ( dbfTmp )->cRef        := ( cArticulo )->Codigo
                  ( dbfTmp )->cDetalle    := ( cArticulo )->Nombre
                  ( dbfTmp )->cCodPr1     := "1"
                  ( dbfTmp )->cValPr1     := cProp1
                  ( dbfTmp )->cCodPr2     := "2"
                  ( dbfTmp )->cValPr2     := cProp2
                  ( dbfTmp )->nIva        := nIva( D():TiposIva( nView ), ( cArticulo )->TipoIva )
                  ( dbfTmp )->nUniCaja    := nUnidad
                  ( dbfTmp )->cCodFam     := ( cArticulo )->Familia
                  ( dbfTmp )->cGrpFam     := cGruFam( ( cArticulo )->Familia, cFamilia )

                  if lPedido

                     ( dbfTmp )->nCanPed  := nCajas / 100
                     ( dbfTmp )->nPreDiv  := nRetPreArt( 1, cDivEmp(), .F., cArticulo, cDiv, cKit, D():TiposIva( nView ) )

                  else

                     ( dbfTmp )->nCanEnt     := nCajas / 100

                     nComPro                 := nComPro( ( dbfTmp )->cRef, ( dbfTmp )->cCodPr1, ( dbfTmp )->cValPr1, ( dbfTmp )->cCodPr2, ( dbfTmp )->cValPr2, cArtCom )
                     if nComPro <> 0
                        ( dbfTmp )->nPreDiv  := nComPro
                     else
                        ( dbfTmp )->nPreDiv  := ( cArticulo )->pCosto
                     end

                  end





                  ( dbfTmp )->( dbUnLock() )

               end

            end

         next

      next

      oOleExcel:oExcel:Quit()

      oOleExcel:oExcel:DisplayAlerts := .T.

      oOleExcel:End()

      ( dbfTmp )->( dbGoTop() )

      oBrw:Refresh()

   end

RETURN nil







FUNCTION nTotAlbPrv( nAlbaran, cAlbPrvT, cAlbPrvL, cIva, cDiv, aTmp, cDivRet, lPic )

   local bCondition
   local nTotArt
   local dFecFac
   local lRecargo
   local nDtoEsp
   local nDtoPP
   local nDtoUno
   local nDtoDos
   local nPorte
   local nRecno
   local cCodDiv
   local cPinDiv
   local nDinDiv
   local nRegIva
   local nImpuestoEspecial
   local aTotalDto      := { 0, 0, 0 }
   local aTotalDPP      := { 0, 0, 0 }
   local aTotalUno      := { 0, 0, 0 }
   local aTotalDos      := { 0, 0, 0 }
   local lIvaInc        := .F.
   local nRouDiv

   local oTotalDoc      := nTotalDocumento():new( nView )

   if !Empty( nView )
      If( cAlbPrvT == nil, cAlbPrvT := D():AlbaranesProveedores( nView ), ) ;
      If( cAlbPrvL == nil, cAlbPrvL := D():AlbaranesProveedoresLineas( nView ), ) ;
   end

   If( cIva == nil, cIva := cIva, ) ;
   If( cDiv == nil, cDiv := cDiv, ) ;
   If( nAlbaran == nil, nAlbaran := ( cAlbPrvT )->cSerAlb + Str( ( cAlbPrvT )->nNumAlb ) + ( cAlbPrvT )->cSufAlb, ) ;
   If( lPic == nil, lPic := .F., ) ;

   public nTotAlb       := 0
   public nTotBrt       := 0
   public nTotDto       := 0
   public nTotDPP       := 0
   public nTotUno       := 0
   public nTotDos       := 0
   public nTotNet       := 0
   public nTotIva       := 0
   public nTotReq       := 0
   public nTotImp       := 0
   public nTotIvm       := 0









   public aTotIva       := {{    "porcentajeiva" => nil, "logrecargo"   => .F., "porcentajere" => nil, "bruto"        => nil, "neto"         => nil, "impiva"       => nil, "impre"        => nil, "nivmh"        => nil, "ntransporte"  => nil, "npntver"      => nil }}
   public aIvaUno       := {}
   public aIvaDos       := {}
   public aIvaTre       := {}
   public aImpVto       := {}
   public aDatVto       := {}

   nRecno            := ( cAlbPrvL )->( Recno() )

   IF aTmp <> NIL
      dFecFac        := aTmp[ 5 ]
      lRecargo       := aTmp[ 25]
      nDtoEsp        := aTmp[ 22 ]
      nDtoPP         := aTmp[ 24    ]
      nDtoUno        := aTmp[ 36 ]
      nDtoDos        := aTmp[ 38 ]
      nPorte         := aTmp[ 20 ]
      cCodDiv        := aTmp[ 32 ]
      nRegIva        := aTmp[ 56 ]
      nRouDiv        := nRouDiv( aTmp[ 32 ], cDiv )
      bCondition     := {|| !( cAlbPrvL )->( Eof() ) }
      (cAlbPrvL)->( dbGoTop() )
   ELSE
      dFecFac        := ( cAlbPrvT )->dFecAlb
      lRecargo       := ( cAlbPrvT )->lRecargo
      nDtoEsp        := ( cAlbPrvT )->nDtoEsp
      nDtoPP         := ( cAlbPrvT )->nDpp
      nDtoUno        := ( cAlbPrvT )->nDtoUno
      nDtoDos        := ( cAlbPrvT )->nDtoDos
      nPorte         := ( cAlbPrvT )->nPortes
      cCodDiv        := ( cAlbPrvT )->cDivAlb
      nRegIva        := ( cAlbPrvT )->nRegIva
      nRouDiv        := nRouDiv( ( cAlbPrvT )->cDivAlb, cDiv )
      bCondition     := {|| ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb == nAlbaran .AND. (cAlbPrvL)->( !eof() ) }
      ( cAlbPrvL )->( dbSeek( nAlbaran ) )
   end

   cPinDiv           := cPinDiv( cCodDiv, cDiv )
   cPirDiv           := cPirDiv( cCodDiv, cDiv )
   nDinDiv           := nDinDiv( cCodDiv, cDiv )
   nDirDiv           := nRinDiv( cCodDiv, cDiv )

   while Eval( bCondition )

      if lValLine( cAlbPrvL )

         nTotArt           := nTotLAlbPrv( cAlbPrvL, nDinDiv, nDirDiv )
         nImpuestoEspecial := nTotIAlbPrv( cAlbPrvL, nDinDiv, nDirDiv )






























         oTotalDoc:setArrayImpuesto( ( cAlbPrvL )->nIva, lRecargo, ( cAlbPrvL )->nReq, nTotArt, nImpuestoEspecial, 0, 0 )

      end

      ( cAlbPrvL )->( dbSkip() )

   end

   ( cAlbPrvL )->( dbGoTo( nRecno) )





   aTotIva      := oTotalDoc:getArrayImpuesto()
   aTotIva          := aSort( aTotIva,,, {|x,y| hGet( x, "porcentajeiva" ) > hGet( y, "porcentajeiva" ) } )

   nTotBrt         := oTotalDoc:getTotalBruto()





   nTotBrt           += nPorte





   if nDtoEsp <> 0
      nTotDto := oTotalDoc:setDescuentoEspecial( nDtoEsp )
   end
   if nDtoPP <> 0
      nTotDPP := oTotalDoc:setDescuentoProntoPago( nDtoPP )
   end
   if nDtoUno <> 0
      nTotUno := oTotalDoc:setDescuentoUno( nDtoUno )
   end
   if nDtoDos <> 0
      nTotDos := oTotalDoc:setDescuentoDos( nDtoDos )
   end

























































   oTotalDoc:setImportesImpuesto( lIvaInc, nRegIva, nRouDiv )





















   nTotNet           := oTotalDoc:getTotalNeto()






   nTotIva           := oTotalDoc:getTotalIva()






   nTotReq           := oTotalDoc:getTotalRE()




   nTotIvm           := oTotalDoc:getTotalIvmh()



   nTotImp           := Round( nTotIva + nTotReq , nDirDiv )
   if !uFieldEmpresa( "lIvaImpEsp" )
      nTotImp        += Round( nTotIvm , nDirDiv )
   end





   nTotAlb        := nTotNet + nTotImp





   if cDivRet <> nil .AND. cDivRet <> cCodDiv
      nTotNet     := nCnv2Div( nTotNet, cCodDiv, cDivRet )
      nTotIva     := nCnv2Div( nTotIva, cCodDiv, cDivRet )
      nTotReq     := nCnv2Div( nTotReq, cCodDiv, cDivRet )
      nTotAlb     := nCnv2Div( nTotAlb, cCodDiv, cDivRet )
      cPirDiv     := cPirDiv( cDivRet, cDiv )
   end

RETURN ( if( lPic, Trans( nTotAlb, cPirDiv ), nTotAlb ) )



FUNCTION aTotAlbPrv( cAlbaran, cAlbPrvT, cAlbPrvL, cIva, cDiv, cDivRet )

   nTotAlbPrv( cAlbaran, cAlbPrvT, cAlbPrvL, cIva, cDiv, nil, cDivRet, .F. )

RETURN ( { nTotNet, nTotIva, nTotReq, nTotAlb, aTotIva } )



FUNCTION sTotAlbPrv( cAlbaran, dbfMaster, dbfLine, cIva, cDiv, cDivRet )

   local sTotal

   nTotAlbPrv( cAlbaran, dbfMaster, dbfLine, cIva, cDiv, nil, cDivRet, .F. )

   sTotal                                 := sTotal()
   sTotal:nTotalBruto                     := nTotBrt
   sTotal:nTotalNeto                      := nTotNet
   sTotal:nTotalIva                       := nTotIva
   sTotal:aTotalIva                       := aTotIva
   sTotal:nTotalRecargoEquivalencia       := nTotReq
   sTotal:nTotalDocumento                 := nTotAlb
   sTotal:nTotalDescuentoGeneral          := nTotDto
   sTotal:nTotalDescuentoProntoPago       := nTotDpp
   sTotal:nTotalDescuentoUno              := nTotUno
   sTotal:nTotalDescuentoDos              := nTotDos

RETURN ( sTotal )





FUNCTION nTotFAlbPrv( uAlbPrvL, nDec, nRec, nVdv, cPirDiv )

   local nCalculo := 0

   nCalculo       += nTotLAlbPrv( uAlbPrvL, nDec, nRec, nVdv, cPirDiv )
   nCalculo       += nIvaLAlbPrv( uAlbPrvL, nDec, nRec, nVdv, cPirDiv )

RETURN ( if( cPirDiv <> nil, Trans( nCalculo, cPirDiv ), nCalculo ) )




FUNCTION nTotUAlbPrv( uAlbPrvL, nDec, nVdv, cPinDiv )

   local nCalculo

   If( uAlbPrvL == nil, uAlbPrvL := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   do case
      case ValType( uAlbPrvL ) == "A"
         nCalculo    := uAlbPrvL[ 10 ]

      case ValType( uAlbPrvL ) == "C"
         nCalculo    := ( uAlbPrvL )->nPreDiv

      case ValType( uAlbPrvL ) == "O"
         nCalculo    := uAlbPrvL:nPreDiv

   end

   nCalculo          := Round( nCalculo / nVdv, nDec )

RETURN ( ( if( cPinDiv <> nil, Trans( nCalculo, cPinDiv ), nCalculo ) )  )



FUNCTION nNetUAlbPrv( uAlbPrvL, uAlbPrvT, nDec, nRec, nVdv, cPinDiv )

   local nDtoEsp
   local nDtoPP
   local nDtoUno
   local nDtoDos
   local nCalculo
   local nDtoLin
   local nDtoPrm
   local nPorte

   If( nDec == nil, nDec := 0, ) ;
   If( nRec == nil, nRec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUAlbPrv( uAlbPrvL, nDec, nVdv )

   if ValType( uAlbPrvL ) == "A"
      nDtoLin     := uAlbPrvL[ 15 ]
      nDtoPrm     := uAlbPrvL[ 16 ]
   else
      nDtoLin     := ( uAlbPrvL )->nDtoLin
      nDtoPrm     := ( uAlbPrvL )->nDtoPrm
   end

   if nDtoLin <> 0
      nCalculo    -= nCalculo * nDtoLin / 100
   end

   if nDtoPrm <> 0
      nCalculo    -= nCalculo * nDtoPrm / 100
   end





   if ValType( uAlbPrvT ) == "A"
      nDtoEsp     := uAlbPrvT[ 22 ]
      nDtoPP      := uAlbPrvT[ 24    ]
      nDtoUno     := uAlbPrvT[ 36 ]
      nDtoDos     := uAlbPrvT[ 38 ]
      nPorte      := uAlbPrvT[ 20 ]
   else
      nDtoEsp     := (uAlbPrvT)->nDtoEsp
      nDtoPP      := (uAlbPrvT)->nDpp
      nDtoUno     := (uAlbPrvT)->nDtoUno
      nDtoDos     := (uAlbPrvT)->nDtoDos
      nPorte      := (uAlbPrvT)->nPorTes
   end

   if nDtoEsp <> 0
      nCalculo    -= Round( nCalculo * nDtoEsp / 100, nDec )
   end

   if nDtoPP <> 0
      nCalculo    -= Round( nCalculo * nDtoPP  / 100, nDec )
   end

   if nDtoUno <> 0
      nCalculo    -= Round( nCalculo * nDtoUno / 100, nDec )
   end

   if nDtoDos <> 0
      nCalculo    -= Round( nCalculo * nDtoDos / 100, nDec )
   end

   nCalculo       := Round( nCalculo, nDec )

RETURN ( if( cPinDiv <> NIL, Trans( nCalculo, cPinDiv ), nCalculo ) )







FUNCTION nDtoLAlbPrv( cAlbPrvL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cAlbPrvL == nil, cAlbPrvL := D():AlbaranesProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cAlbPrvL )->nDtoLin <> 0

      nCalculo          := nTotUAlbPrv( cAlbPrvL, nDec ) * nTotNAlbPrv( cAlbPrvL )





      nCalculo          := nCalculo * ( cAlbPrvL )->nDtoLin / 100


      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )






FUNCTION nPrmLAlbPrv( cAlbPrvL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cAlbPrvL == nil, cAlbPrvL := D():AlbaranesProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cAlbPrvL )->nDtoPrm <> 0

      nCalculo          := nTotUAlbPrv( cAlbPrvL, nDec ) * nTotNAlbPrv( cAlbPrvL )





      if ( cAlbPrvL )->nDtoLin <> 0
         nCalculo       -= nCalculo * ( cAlbPrvL )->nDtoLin / 100
      end

      nCalculo          := nCalculo * ( cAlbPrvL )->nDtoPrm / 100

      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )




FUNCTION nTotLAlbPrv( uAlbPrvL, nDec, nRec, nVdv, cPirDiv )

   local nCalculo
   local nDtoLin
   local nDtoPrm
   local nTotDto     := 0

   If( uAlbPrvL == nil, uAlbPrvL := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nRec == nil, nRec := nRinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;





   nCalculo          := nTotNAlbPrv( uAlbPrvL )

   do case
      case ValType( uAlbPrvL ) == "A"
         nDtoLin     := uAlbPrvL[ 15 ]
         nDtoPrm     := uAlbPrvL[ 16 ]

      case ValType( uAlbPrvL ) == "C"
         nDtoLin     := ( uAlbPrvL )->nDtoLin
         nDtoPrm     := ( uAlbPrvL )->nDtoPrm

      case ValType( uAlbPrvL ) == "O"
         nDtoLin     := uAlbPrvL:nDtoLin
         nDtoPrm     := uAlbPrvL:nDtoPrm

   end

   if nDtoLin <> 0
      nCalculo       -= nCalculo * nDtoLin / 100
   end

   if nDtoPrm <> 0
      nCalculo       -= nCalculo * nDtoPrm / 100
   end

   nCalculo          -= nTotDto

   nCalculo          *= nTotUAlbPrv( uAlbPrvL, nDec, nVdv )

   if nRec <> nil
      nCalculo       := Round( nCalculo, nRec )
   end

RETURN ( if( cPirDiv <> nil, Trans( nCalculo, cPirDiv ), nCalculo ) )






FUNCTION nImpUAlbPrv( uAlbPrvT, uAlbPrvL, nDec, nVdv, lIva, cPouDiv )

   local nCalculo

   if !Empty( nView )
      If( uAlbPrvT == nil, uAlbPrvT := D():AlbaranesProveedores( nView ), ) ;
   end

   If( uAlbPrvL == nil, uAlbPrvL := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;

   nCalculo          := nTotUAlbPrv( uAlbPrvL, nDec, nVdv )

   if ValType( uAlbPrvT ) == "A"
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 22 ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 24    ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 36 ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 38 ]  / 100, nDec )
   else
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDtoEsp / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDpp    / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDtoUno / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDtoDos / 100, nDec )
   end

   if lIva .AND. ( uAlbPrvL )->nIva <> 0
      nCalculo       += nCalculo * ( uAlbPrvL )->nIva / 100
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )






FUNCTION nImpLAlbPrv( uAlbPrvT, uAlbPrvL, nDec, nRou, nVdv, lIva, cPouDiv )

   local nCalculo

   if !Empty( nView )
      If( uAlbPrvT == nil, uAlbPrvT := D():AlbaranesProveedores( nView ), ) ;
   end

   If( uAlbPrvL == nil, uAlbPrvL := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nRou == nil, nRou := nRinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;

   nCalculo          := nTotLAlbPrv( uAlbPrvL, nDec, nRou, nVdv )

   if ValType( uAlbPrvT ) == "A"
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 22 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 24    ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 36 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uAlbPrvT[ 38 ]  / 100, nRou )
   else
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDtoEsp / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDpp    / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDtoUno / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uAlbPrvT )->nDtoDos / 100, nRou )
   end

   if lIva .AND. ( uAlbPrvL )->nIva <> 0
      nCalculo       += nCalculo * ( uAlbPrvL )->nIva / 100
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nTotIAlbPrv( dbfLin, nDec, nRouDec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( dbfLin == nil, dbfLin := D():Get( "AlbPrvL", nView ), ) ;
   If( nDec == nil, nDec := 0, ) ;
   If( nRouDec == nil, nRouDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := Round( ( dbfLin )->nValImp, nDec )
   nCalculo          *= nTotNAlbPrv( dbfLin )
   nCalculo          := Round( nCalculo / nVdv, nRouDec )

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nStockLineaAlbPrv()

RETURN ( StocksModel():nStockArticulo( ( D():AlbaranesProveedoresLineas( nView ) )->cRef, ( D():AlbaranesProveedoresLineas( nView ) )->cAlmLin, ( D():AlbaranesProveedoresLineas( nView ) )->cCodPr1, ( D():AlbaranesProveedoresLineas( nView ) )->cCodPr2, ( D():AlbaranesProveedoresLineas( nView ) )->cValPr1, ( D():AlbaranesProveedoresLineas( nView ) )->cValPr2, ( D():AlbaranesProveedoresLineas( nView ) )->cLote ) )



FUNCTION BrwAlbPrv( oGetNum, cAlbPrvT, cAlbPrvL, cIva, cDiv )

   local oDlg
   local oBrw
   local oGet1
   local cGet1
   local nOrd     := GetBrwOpt( "BrwAlbPrv" )
   local oCbxOrd
   local aCbxOrd  := { "N. albarán", "Fecha", "Cod. proveedor", "Nom. proveedor" }
   local cCbxOrd

   local aBmp     := {  LoadBitmap( GetResources(), "BGREEN" ), LoadBitmap( GetResources(), "BRED" ) }

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]
   nOrd           := ( cAlbPrvT )->( OrdSetFocus( nOrd ) )

   ( cAlbPrvT )->( dbSetFilter( {|| Field->nFacturado < 3 }, "nFacturado < 3" ) )
   ( cAlbPrvT )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Albaranes de proveedores", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, cAlbPrvT ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cAlbPrvT ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( cAlbPrvT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := cAlbPrvT
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Albaran de proveedor.Browse"

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Es. Estado"
         :bStrData         := {|| "" }
         :bBmpData         := {|| ( cAlbPrvT )->nFacturado }
         :nWidth           := 20
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "N. albarán"
         :cSortOrder       := "nNumAlb"
         :bEditValue       := {|| ( cAlbPrvT )->cSerAlb + "/" + AllTrim( Str( ( cAlbPrvT )->nNumAlb ) ) + "/" + ( cAlbPrvT )->cSufAlb }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecAlb"
         :bEditValue       := {|| dToc( ( cAlbPrvT )->dFecAlb ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cod. proveedor"
         :cSortOrder       := "cCodPrv"
         :bEditValue       := {|| Rtrim( ( cAlbPrvT )->cCodPrv ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nom. proveedor"
         :cSortOrder       := "cNomPrv"
         :bEditValue       := {|| Rtrim( ( cAlbPrvT )->cNomPrv ) }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotAlbPrv( ( cAlbPrvT )->cSerAlb + Str( ( cAlbPrvT)->nNumAlb ) + ( cAlbPrvT)->cSufAlb, cAlbPrvT, cAlbPrvL, cIva, cDiv, nil, cDivEmp(), .T. ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 500,, oDlg,,, .F., {||     .F.},,, .F. )




      TButton():ReDefine( 501,, oDlg,,, .F., {||     .F.},,, .F. )

   oDlg:AddFastKey( 13, {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

   oDlg:bStart    := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      oGetNum:cText( ( cAlbPrvT )->cSerAlb + Str( ( cAlbPrvT )->nNumAlb ) + ( cAlbPrvT )->cSufAlb )
      oGetNum:disable()
   end

   DestroyFastFilter( cAlbPrvT )

   SetBrwOpt( "BrwAlbPrv", ( cAlbPrvT )->( OrdNumber() ) )

   ( cAlbPrvT )->( dbSetFilter() )
   ( cAlbPrvT )->( OrdSetFocus( nOrd ) )

   aEval( aBmp, { | hBmp | DeleteObject( hBmp ) } )

   oBrw:CloseData()

RETURN ( oDlg:nResult == 1 )







FUNCTION mkAlbPrv( cPath, lAppend, cPathOld, oMeter, bFor, dbfMov )

   local oBlock
   local oError
   local oldAlbPrvT
   local oldAlbPrvL
   local oldAlbPrvI
   local oldAlbPrvD
   local cAlbPrvT
   local cAlbPrvL
   local cAlbPrvI
   local cAlbPrvD

   If( lAppend == nil, lAppend := .F., ) ;
   If( bFor == nil, bFor := {|| .T. }, ) ;

   IF oMeter <> NIL
      oMeter:cText   := "Generando bases"
      sysrefresh()
   end

   createFiles( cPath )

   rxAlbPrv( cPath, cLocalDriver() )

   if lAppend .AND. lIsDir( cPathOld )

      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      dbUseArea( .T., cDriver(), cPath + "ALBPROVT.DBF", cCheckArea( "ALBPROVT", @cAlbPrvT ), .F. )
      ordListAdd( cPath + "AlbProvT.Cdx"  )

      dbUseArea( .T., cDriver(), cPath + "ALBPROVL.DBF", cCheckArea( "ALBPROVL", @cAlbPrvL ), .F. )
      ordListAdd( cPath + "AlbProvL.Cdx"  )

      dbUseArea( .T., cDriver(), cPath + "AlbPrvI.Dbf", cCheckArea( "AlbPrvI", @cAlbPrvI ), .F. )
      ( cAlbPrvI )->( ordListAdd( cPath + "AlbPrvI.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPath + "AlbPrvD.Dbf", cCheckArea( "AlbPrvD", @cAlbPrvD ), .F. )
      ( cAlbPrvD )->( ordListAdd( cPath + "AlbPrvD.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPathOld + "ALBPROVT.DBF", cCheckArea( "ALBPROVT", @oldAlbPrvT ), .F. )
      ordListAdd( cPathOld + "AlbProvT.Cdx"  )

      dbUseArea( .T., cDriver(), cPathOld + "ALBPROVL.DBF", cCheckArea( "ALBPROVL", @oldAlbPrvL ), .F. )
      ordListAdd( cPathOld + "AlbProvL.Cdx"  )

      dbUseArea( .T., cDriver(), cPathOld + "ALBPRVI.Dbf", cCheckArea( "ALBPRVI", @oldAlbPrvI ), .F. )
      ( oldAlbPrvI )->( ordListAdd( cPathOld + "AlbPrvI.Cdx"  ) )

      dbUseArea( .T., cDriver(), cPathOld + "ALBPRVD.Dbf", cCheckArea( "ALBPRVD", @oldAlbPrvD ), .F. )
      ( oldAlbPrvD )->( ordListAdd( cPathOld + "AlbPrvD.Cdx"  ) )





      while !( oldAlbPrvT )->( eof() )

         if eval( bFor, oldAlbPrvT )

            dbCopy( oldAlbPrvT, cAlbPrvT, .T. )

            if ( oldAlbPrvL )->( dbSeek( (oldAlbPrvT)->CSERALB + Str( (oldAlbPrvT)->NNUMALB ) + (oldAlbPrvT)->CSUFALB ) )
               while ( oldAlbPrvL )->CSERALB + Str( ( oldAlbPrvL )->NNUMALB ) + ( oldAlbPrvL )->CSUFALB == (oldAlbPrvT)->CSERALB + Str( (cAlbPrvT)->NNUMALB ) + (cAlbPrvT)->CSUFALB .AND. !(oldAlbPrvL)->( eof() )
                  dbCopy( oldAlbPrvL, cAlbPrvL, .T. )
                  ( oldAlbPrvL )->( dbSkip() )
               end
            end

            if ( oldAlbPrvI )->( dbSeek( (oldAlbPrvT)->CSERALB + Str( (oldAlbPrvT)->NNUMALB ) + (oldAlbPrvT)->CSUFALB ) )
               while ( oldAlbPrvI )->CSERALB + Str( ( oldAlbPrvI )->NNUMALB ) + ( oldAlbPrvI )->CSUFALB == ( oldAlbPrvT )->CSERALB + Str( ( cAlbPrvT )->NNUMALB ) + ( cAlbPrvT )->CSUFALB .AND. !( oldAlbPrvI )->( eof() )
                  dbCopy( oldAlbPrvI, cAlbPrvI, .T. )
                  ( oldAlbPrvI )->( dbSkip() )
               end
            end

            if ( oldAlbPrvD )->( dbSeek( (oldAlbPrvT)->CSERALB + Str( (oldAlbPrvT)->NNUMALB ) + (oldAlbPrvT)->CSUFALB ) )
               while ( oldAlbPrvD )->CSERALB + Str( ( oldAlbPrvD )->NNUMALB ) + ( oldAlbPrvD )->CSUFALB == ( oldAlbPrvT )->CSERALB + Str( ( cAlbPrvT )->NNUMALB ) + ( cAlbPrvT )->CSUFALB .AND. !( oldAlbPrvI )->( eof() )
                  dbCopy( oldAlbPrvD, cAlbPrvD, .T. )
                  ( oldAlbPrvD )->( dbSkip() )
               end
            end

         end

         ( oldAlbPrvT )->( dbSkip() )

      end





      ( cAlbPrvT )->( dbCloseArea() )
      ( cAlbPrvL )->( dbCloseArea() )
      ( cAlbPrvI )->( dbCloseArea() )
      ( cAlbPrvD )->( dbCloseArea() )

      ( oldAlbPrvT )->( dbCloseArea() )
      ( oldAlbPrvL )->( dbCloseArea() )
      ( oldAlbPrvI )->( dbCloseArea() )
      ( oldAlbPrvD )->( dbCloseArea() )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   end

RETURN nil



FUNCTION rxAlbPrv( cPath, cDriver )

   local cAlbPrvT

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;





   if !lExistTable( cPath + "ALBPROVT.DBF", cDriver ) .OR.  !lExistTable( cPath + "ALBPROVL.DBF", cDriver ) .OR.  !lExistTable( cPath + "ALBPRVI.DBF", cDriver )  .OR.  !lExistTable( cPath + "ALBPRVD.DBF", cDriver )  .OR.  !lExistTable( cPath + "AlbPrvS.DBF", cDriver )
      createFiles( cPath )
   end





   fEraseIndex( cPath + "AlbProvT.Cdx", cDriver )
   fEraseIndex( cPath + "AlbProvL.Cdx", cDriver )
   fEraseIndex( cPath + "AlbPrvI.Cdx", cDriver )
   fEraseIndex( cPath + "AlbPrvD.Cdx", cDriver )
   fEraseIndex( cPath + "AlbPrvS.Cdx", cDriver )

   dbUseArea( .T., cDriver, cPath + "ALBPROVT.DBF", cCheckArea( "ALBPROVT", @cAlbPrvT ), .F. )

   if !( cAlbPrvT )->( neterr() )
      ( cAlbPrvT)->( __dbPack() )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "NNUMALB", "CSERALB + STR( NNUMALB ) + CSUFALB", {|| Field->cSerAlb + STR( Field->nNumAlb ) + Field->CSUFALB } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "DFECALB", "DFECALB", {|| Field->DFECALB } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "CCODPRV", "CCODPRV", {|| Field->CCODPRV } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "CNOMPRV", "Upper( CNOMPRV )", {|| Upper( Field->CNOMPRV ) } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "CSUALB", "CSUALB", {|| Field->CSUALB } ) )

      ( cAlbPrvT)->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "CNUMFAC", "CNUMFAC", {|| Field->CNUMFAC }, ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "CTURALB", "CTURALB + CSUFALB + cCodCaj", {|| Field->CTURALB + Field->CSUFALB + Field->cCodCaj } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "CNUMPED", "CNUMPED", {|| Field->CNUMPED } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "cCodUsr", "Field->cCodUsr + Dtos( Field->dFecChg ) + Field->cTimChg", {|| Field->cCodUsr + Dtos( Field->dFecChg ) + Field->cTimChg } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "iNumAlb", "'02' + CSERALB + STR( NNUMALB ) + Space( 1 ) + CSUFALB", {|| "02" + Field->cSerAlb + STR( Field->nNumAlb ) + Space( 1 ) + Field->CSUFALB } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "cCtrCoste", "cCtrCoste", {|| Field->cCtrCoste } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}, , , , , , , , , .T.  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvT.Cdx", "DDESFEC", "DFECALB", {|| Field->DFECALB } ) )

      ( cAlbPrvT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de proveedores" )

   end

   dbUseArea( .T., cDriver, cPath + "ALBPROVL.DBF", cCheckArea( "ALBPROVL", @cAlbPrvT ), .F. )

   if !( cAlbPrvT )->( neterr() )
      ( cAlbPrvT)->( __dbPack() )

      ( cAlbPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "nNumAlb", "cSerAlb + Str( nNumAlb ) + cSufAlb", {|| Field->cSerAlb + STR( Field->nNumAlb ) + Field->cSufAlb } ) )

      ( cAlbPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "nNumLin", "cSerAlb + Str( nNumAlb ) + cSufAlb + Str( nNumLin )", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Str( Field->nNumLin ) } ) )

      ( cAlbPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "cRef", "cRef + cValPr1 + cValPr2", {|| Field->cRef + Field->cValPr1 + Field->cValPr2 } ) )

      ( cAlbPrvT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "Lote", "cLote", {|| Field->cLote } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cNumPed", "cNumPed", {|| Field->cNumPed } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cPedCliRef", "cNumPed + cRef + cCodPr1 + cCodPr2 + cValPr1 + cValPr2", {|| Field->cNumPed + Field->cRef + Field->cCodPr1 + Field->cCodPr2  + Field->cValPr1 + Field->cValPr2 } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cCodPed", "cCodPed", {|| Field->cCodPed } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cPedPrvRef", "cCodPed + cRef + cValPr1 + cValPr2 + cLote", {|| Field->cCodPed + Field->cRef + Field->cValPr1 + Field->cValPr2 + Field->cLote } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cPedPrvDet", "cCodPed + cRef + cValPr1 + cValPr2 + cRefPrv ", {|| Field->cCodPed + Field->cRef + Field->cValPr1 + Field->cValPr2 + Field->cRefPrv } ) )

      ( cAlbPrvT )->( ordCondSet( "!lFacturado .and. !Deleted()", {|| !Field->lFacturado .AND. !Deleted()}, , , , , , , , , .F. ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "cStkRef", "cRef + cValPr1 + cValPr2 + cLote", {|| Field->cRef + Field->cValPr1 + Field->cValPr2 + Field->cLote } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cPCliDet", "cNumPed + cRef + cValPr1 + cValPr2 + cLote ", {|| Field->cNumPed + Field->cRef + Field->cValPr1 + Field->cValPr2 + Field->cLote } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cPedRef", "cCodPed + cRef", {|| Field->cCodPed + Field->cRef } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted() .and. !lFacturado", {||!Deleted() .AND. !Field->lFacturado }, , , , , , , , , .T.  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "cRefFec", "cRef + dtos( dFecAlb )", {|| Field->cRef + dtos( Field->dFecAlb ) } ) )

      ( cAlbPrvT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT)->( ordCreate( cPath + "AlbProvL.Cdx", "iNumAlb", "'02' + CSERALB + STR( NNUMALB ) + CSUFALB", {|| "02" + Field->cSerAlb + STR( Field->nNumAlb ) + Field->cSufAlb } ) )

      ( cAlbPrvT )->( ordCondSet( "!lFacturado .and. !Deleted()", {|| !Field->lFacturado .AND. !Deleted() } ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "cArtLote", "cRef + cLote", {|| Field->cRef + Field->cLote } ) )

      ( cAlbPrvT )->( ordCondSet( "!lValidado .and. !lControl .and. !lFacturado .and. nCtlStk < 2 .and. !Deleted()", {|| !Field->lValidado .AND. !Field->lControl .AND. !Field->lFacturado .AND. Field->nCtlStk < 2 .AND. !Deleted()}, , , , , , , , , .T. ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "cStkFastIn", "cRef + cAlmLin + dtos( dFecAlb ) + tFecAlb", {|| Field->cRef + Field->cAlmLin + dtos( Field->dFecAlb ) + Field->tFecAlb } ) )

      ( cAlbPrvT )->( ordCondSet( "!lValidado .and. !lControl .and. !lFacturado .and. nCtlStk < 2 .and. !Deleted()", {|| !Field->lValidado .AND. !Field->lControl .AND. !Field->lFacturado .AND. Field->nCtlStk < 2 .AND. !Deleted()}, , , , , , , , , .T. ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "cStkFastOu", "cRef + cAlmOrigen + dtos( dFecAlb ) + tFecAlb", {|| Field->cRef + Field->cAlmOrigen + dtos( Field->dFecAlb ) + Field->tFecAlb } ) )

      ( cAlbPrvT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "cRefFec", "cRef + cLote + dTos( dFecAlb )", {|| Field->cRef + Field->cLote + dTos( Field->dFecAlb ) } ) )

      ( cAlbPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbProvL.Cdx", "nPosPrint", "cSerAlb + Str( nNumAlb ) + cSufAlb + Str( nPosPrint )", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Str( Field->nPosPrint ) } ) )

      ( cAlbPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de proveedores" )
   end

   dbUseArea( .T., cDriver, cPath + "AlbPrvI.DBF", cCheckArea( "AlbPrvI", @cAlbPrvT ), .F. )

   if !( cAlbPrvT )->( neterr() )
      ( cAlbPrvT )->( __dbPack() )

      ( cAlbPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbPrvI.Cdx", "NNUMALB", "CSERALB + STR( NNUMALB ) + CSUFALB", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb } ) )

      ( cAlbPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de proveedores" )
   end

   dbUseArea( .T., cDriver, cPath + "AlbPrvD.DBF", cCheckArea( "AlbPrvD", @cAlbPrvT ), .F. )

   if !( cAlbPrvT )->( neterr() )
      ( cAlbPrvT )->( __dbPack() )

      ( cAlbPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbPrvD.Cdx", "NNUMALB", "CSERALB + STR( NNUMALB ) + CSUFALB", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb } ) )

      ( cAlbPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de albaranes de proveedores" )
   end

   dbUseArea( .T., cDriver, cPath + "AlbPrvS.DBF", cCheckArea( "AlbPrvS", @cAlbPrvT ), .F. )
   if !( cAlbPrvT )->( neterr() )
      ( cAlbPrvT )->( __dbPack() )

      ( cAlbPrvT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbPrvS.CDX", "nNumAlb", "cSerAlb + Str( nNumAlb ) + cSufAlb + Str( nNumLin )", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Str( Field->nNumLin ) } ) )

      ( cAlbPrvT )->( ordCondSet( "!lFacturado .and. !Deleted()", {|| !Field->lFacturado .AND. !Deleted() }  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbPrvS.CDX", "cRefSer", "cRef + cAlmLin + cNumSer", {|| Field->cRef + Field->cAlmLin + Field->cNumSer } ) )

      ( cAlbPrvT )->( ordCondSet( "!Deleted()", {|| !Field->lFacturado .AND. !Deleted() }  ) )
      ( cAlbPrvT )->( ordCreate( cPath + "AlbPrvS.CDX", "cNumSer", "cNumSer", {|| Field->cNumSer } ) )

      ( cAlbPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de numeros de series de albaranes de proveedores" )
   end

RETURN NIL



FUNCTION aIncAlbPrv()

   local aIncAlbPrv  := {}

   aAdd( aIncAlbPrv, { "cSerAlb", "C",    1,  0, "Serie de albarán" ,                "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbPrv, { "nNumAlb", "N",    9,  0, "Número de albarán" ,               "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aIncAlbPrv, { "cSufAlb", "C",    2,  0, "Sufijo de albarán" ,               "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbPrv, { "cCodTip", "C",    3,  0, "Tipo de incidencia" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbPrv, { "dFecInc", "D",    8,  0, "Fecha de la incidencia" ,          "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbPrv, { "mDesInc", "M",   10,  0, "Descripción de la incidencia" ,    "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbPrv, { "lListo",  "L",    1,  0, "Lógico de listo" ,                 "",                   "", "( cDbfCol )" } )
   aAdd( aIncAlbPrv, { "lAviso",  "L",    1,  0, "Lógico de aviso" ,                 "",                   "", "( cDbfCol )" } )

RETURN ( aIncAlbPrv )



FUNCTION aAlbPrvDoc()

   local aAlbPrvDoc  := {}

   aAdd( aAlbPrvDoc, { "cSerAlb", "C",    1,  0, "Serie del albarán" ,               "",                   "", "( cDbfCol )" } )
   aAdd( aAlbPrvDoc, { "nNumAlb", "N",    9,  0, "Número del albarán" ,              "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aAlbPrvDoc, { "cSufAlb", "C",    2,  0, "Sufijo del albarán" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aAlbPrvDoc, { "cNombre", "C",  240,  0, "Nombre del documento" ,            "",                   "", "( cDbfCol )" } )
   aAdd( aAlbPrvDoc, { "cRuta",   "C",  240,  0, "Ruta del documento" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aAlbPrvDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento" ,     "",                   "", "( cDbfCol )" } )

RETURN ( aAlbPrvDoc )







FUNCTION dFecAlbPrv( cAlbPrv, cAlbPrvT )

   local dFecFac  := CtoD("")

   if ( cAlbPrvT )->( dbSeek( cAlbPrv ) )
      dFecFac     := ( cAlbPrvT )->dFecAlb
   end

RETURN ( dFecFac )







FUNCTION tFecAlbPrv( cAlbPrv, cAlbPrvT )

   local tFecFac  := Replicate( "0", 6 )

   if ( cAlbPrvT )->( dbSeek( cAlbPrv ) )
      tFecFac     := ( cAlbPrvT )->tFecAlb
   end

RETURN ( tFecFac )







FUNCTION cNbrAlbPrv( cAlbPrv, cAlbPrvT )

   local cNomPrv  := ""

   if ( cAlbPrvT )->( dbSeek( cAlbPrv ) )
      cNomPrv     := ( cAlbPrvT )->cNomPrv
   end

RETURN ( cNomPrv )







FUNCTION lFacAlbPrv( cAlbPrv, cAlbPrvT )

   local lFacAlb  := .F.

   if ( cAlbPrvT )->( dbSeek( cAlbPrv ) )
      lFacAlb     := ( ( cAlbPrvT )->nFacturado == 3 )
   end

RETURN ( lFacAlb )






FUNCTION nTotVAlbPrv( cCodArt, cAlbPrvL )

   local nTotVta  := 0
   local nRecno   := ( cAlbPrvL )->( Recno() )

   if ( cAlbPrvL )->( dbSeek( cCodArt ) )

      while ( cAlbPrvL )->CREF == cCodArt .AND. !( cAlbPrvL )->( eof() )

         nTotVta += nTotLAlbPrv( cAlbPrvL, 0 )
         ( cAlbPrvL )->( dbSkip() )

      end

   end

   ( cAlbPrvL )->( dbGoTo( nRecno ) )

RETURN ( nTotVta )






FUNCTION nTotDAlbPrv( cCodArt, cAlbPrvL, cAlbPrvT, cCodAlm )

   local lFacAlb  := .F.
   local nTotVta  := 0
   local nRecno   := ( cAlbPrvL )->( Recno() )

   if ( cAlbPrvL )->( dbSeek( cCodArt ) )

      while ( cAlbPrvL )->cRef == cCodArt .AND. !( cAlbPrvL )->( eof() )

         if cAlbPrvT <> nil
            lFacAlb     := lFacAlbPrv( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->CSUFALB, cAlbPrvT )
         end

         if !lFacAlb
            if cCodAlm <> nil
               if cCodAlm == ( cAlbPrvL )->cAlmLin
                  nTotVta  += nTotNAlbPrv( cAlbPrvL )
               end
            else
               nTotVta     += nTotNAlbPrv( cAlbPrvL )
            end
         end

         ( cAlbPrvL )->( dbSkip() )

      end

   end

   ( cAlbPrvL )->( dbGoTo( nRecno ) )

RETURN ( nTotVta )






FUNCTION nPreAlbPrv( cAlbPrvL, uTmp, nDec, nRec )

   local cDivAlb
   local nDtoEsp
   local nDtoPp
   local nCalculo := 0

   do case
   case Valtype( uTmp ) == "A"
      cDivAlb     := uTmp[ 32 ]
      nDtoEsp     := uTmp[ 22 ]
      nDtoPp      := uTmp[ 24    ]
   case Valtype( uTmp ) == "C"
      cDivAlb     := (uTmp)->CDIVALB
      nDtoEsp     := (uTmp)->NDTOESP
      nDtoPp      := (uTmp)->NDPP
   end

   if !Empty( nView )
   If( nDec == nil, nDec := nDinDiv( cDivAlb, D():Divisas( nView ) ), ) ;
   If( nRec == nil, nRec := nRinDiv( cDivAlb, D():Divisas( nView ) ), ) ;
   end

   nCalculo       := nTotLAlbPrv( cAlbPrvL, nDec, nRec )

   If nDtoEsp <> 0
      nCalculo    -= nCalculo * nDtoEsp / 100
   end

   If nDtoPp <> 0
      nCalculo    -= nCalculo * nDtoPp / 100
   end

RETURN ( round( nCalculo, nDec ) )



static FUNCTION bGenAlb( nDevice, cTitle, cCodDoc )

   local bGen
   local nDev  := by( nDevice )
   local cTit  := by( cTitle  )
   local cCod  := by( cCodDoc )

   if nDev == 1
      bGen     := {|| nGenAlbPrv( nDevice, cTit, cCod ) }
   else
      bGen     := {|| GenAlbPrv( nDevice, cTit, cCod ) }
   end

RETURN bGen



FUNCTION Ped2Alb( cNumPed, lZoom )

   local oBlock
   local oError
   local cNumAlb
   local cAlbPrvT

   If( lZoom == nil, lZoom := .F., ) ;

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.DBF" ), ( cCheckArea( "ALBPROVT", @cAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( cAlbPrvT )->( OrdSetFocus( "cNumPed" ) )

   if ( cAlbPrvT )->( dbSeek( cNumPed ) )
      cNumAlb     := ( cAlbPrvT )->cSerAlb + Str( ( cAlbPrvT )->nNumAlb ) + ( cAlbPrvT )->cSufAlb
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de albaranes de proveedores" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( cAlbPrvT )->( dbCloseArea() )

   if !Empty( cNumAlb )
      if lZoom
         ZooAlbPrv( cNumAlb )
      else
         EdtAlbPrv( cNumAlb )
      end
   else
      msgStop( "No hay albarán asociado" )
   end

RETURN NIL



FUNCTION nVtaAlbPrv( cCodPrv, dDesde, dHasta, cAlbPrvT, cAlbPrvL, cIva, cDiv )

   local nCon     := 0
   local nRec     := ( cAlbPrvT )->( Recno() )





   if ( cAlbPrvT )->( dbSeek( cCodPrv ) )

      while ( cAlbPrvT )->cCodPrv == cCodPrv .AND. !( cAlbPrvT )->( Eof() )


         if ( dDesde == nil .OR. ( cAlbPrvT )->dFecAlb >= dDesde )    .AND. ( dHasta == nil .OR. ( cAlbPrvT )->dFecAlb <= dHasta )

            nCon  += nTotAlbPrv( ( cAlbPrvT )->cSerAlb + Str( ( cAlbPrvT )->nNumAlb ) + ( cAlbPrvT )->cSufAlb, cAlbPrvT, cAlbPrvL, cIva, cDiv, nil, cDivEmp(), .F. )

         end

         ( cAlbPrvT )->( dbSkip() )

      end

   end

   ( cAlbPrvT )->( dbGoTo( nRec ) )

RETURN nCon







FUNCTION CambioPrecio( dFecha, cArticulo, dbfTmp )

   if dbDialogLock( cArticulo )

      if ( dbfTmp )->nPreCom > 0
         ( cArticulo )->pCosto    := ( dbfTmp )->nPreCom
      end

      ( cArticulo )->lBnf1        := ( dbfTmp )->lBnfLin1
      ( cArticulo )->lBnf2        := ( dbfTmp )->lBnfLin2
      ( cArticulo )->lBnf3        := ( dbfTmp )->lBnfLin3
      ( cArticulo )->lBnf4        := ( dbfTmp )->lBnfLin4
      ( cArticulo )->lBnf5        := ( dbfTmp )->lBnfLin5
      ( cArticulo )->lBnf6        := ( dbfTmp )->lBnfLin6

      ( cArticulo )->Benef1       := ( dbfTmp )->nBnfLin1
      ( cArticulo )->Benef2       := ( dbfTmp )->nBnfLin2
      ( cArticulo )->Benef3       := ( dbfTmp )->nBnfLin3
      ( cArticulo )->Benef4       := ( dbfTmp )->nBnfLin4
      ( cArticulo )->Benef5       := ( dbfTmp )->nBnfLin5
      ( cArticulo )->Benef6       := ( dbfTmp )->nBnfLin6

      ( cArticulo )->lIvaInc      := ( dbfTmp )->lIvaLin

      ( cArticulo )->pVenta1      := ( dbfTmp )->nPvpLin1
      ( cArticulo )->pVtaIva1     := ( dbfTmp )->nIvaLin1
      ( cArticulo )->pVenta2      := ( dbfTmp )->nPvpLin2
      ( cArticulo )->pVtaIva2     := ( dbfTmp )->nIvaLin2
      ( cArticulo )->pVenta3      := ( dbfTmp )->nPvpLin3
      ( cArticulo )->pVtaIva3     := ( dbfTmp )->nIvaLin3
      ( cArticulo )->pVenta4      := ( dbfTmp )->nPvpLin4
      ( cArticulo )->pVtaIva4     := ( dbfTmp )->nIvaLin4
      ( cArticulo )->pVenta5      := ( dbfTmp )->nPvpLin5
      ( cArticulo )->pVtaIva5     := ( dbfTmp )->nIvaLin5
      ( cArticulo )->pVenta6      := ( dbfTmp )->nPvpLin6
      ( cArticulo )->pVtaIva6     := ( dbfTmp )->nIvaLin6





      ( cArticulo )->lLabel       := .T.
      ( cArticulo )->nLabel       := Max( ( cArticulo )->nLabel, 1 )





      ( cArticulo )->dFecChg      := date()

      if dFecha >= ( cArticulo )->LastIn
         ( cArticulo )->LastIn    := dFecha
      end

      ( cArticulo )->lSndDoc      := .T.
      ( cArticulo )->LastChg      := GetSysDate()





      ( cArticulo )->cUnidad      := ( dbfTmp )->cUnidad





      ( cArticulo )->( dbRUnLock() )

   end

RETURN NIL



FUNCTION nTotNAlbPrv( uDbf )

   local nTotUnd

   If( uDbf == nil, uDbf := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;

   do case
      case ValType( uDbf ) == "A"
         nTotUnd  := NotBulto( uDbf[ 110] )
         nTotUnd  *= NotCaja( uDbf[ 9 ] )
         nTotUnd  *= uDbf[ 8 ]
         nTotUnd  *= NotCero( uDbf[ 64 ] )
         nTotUnd  *= NotCero( uDbf[ 97 ] )
         nTotUnd  *= NotCero( uDbf[ 98 ] )
         nTotUnd  *= NotCero( uDbf[ 99 ] )

      case ValType( uDbf ) == "O"
         nTotUnd  := NotBulto( uDbf:nBultos )
         nTotUnd  *= NotCaja( uDbf:nCanEnt )
         nTotUnd  *= uDbf:nUniCaja
         nTotUnd  *= NotCero( uDbf:nUndKit )
         nTotUnd  *= NotCero( uDbf:nMedUno )
         nTotUnd  *= NotCero( uDbf:nMedDos )
         nTotUnd  *= NotCero( uDbf:nMedTre )

      otherwise
         nTotUnd  := NotBulto( ( uDbf )->nBultos )
         nTotUnd  *= NotCaja( ( uDbf )->nCanEnt )
         nTotUnd  *= ( uDbf )->nUniCaja
         nTotUnd  *= NotCero( ( uDbf )->nUndKit )
         nTotUnd  *= NotCero( ( uDbf )->nMedUno )
         nTotUnd  *= NotCero( ( uDbf )->nMedDos )
         nTotUnd  *= NotCero( ( uDbf )->nMedTre )

   end

RETURN ( nTotUnd )



FUNCTION nBrtLAlbPrv( uTmpLin, nDec, nRec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( nDec == nil, nDec := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotUAlbPrv( uTmpLin, nDec, nVdv, cPorDiv )
   nCalculo          *= nTotNAlbPrv( uTmpLin )

   nCalculo          := Round( nCalculo / nVdv, nRec )

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nIvaUAlbPrv( dbfTmp, nDec, nVdv )

   local nCalculo

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUAlbPrv( dbfTmp, nDec, nVdv )

   if !( dbfTmp )->lIvaLin
      nCalculo    += nCalculo * ( dbfTmp )->nIva / 100
   end

   if nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nIvaLAlbPrv( uAlbPrvL, nDec, nRou, nVdv, cPorDiv )

   local nCalculo

   If( uAlbPrvL == nil, uAlbPrvL := D():AlbaranesProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nRou == nil, nRou := nRinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotLAlbPrv( uAlbPrvL, nDec, nRou, nVdv )

   nCalculo          := Round( nCalculo * ( uAlbPrvL )->nIva / 100, nRou )

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION aItmAlbPrv()

   local aItmAlbPrv  := {}

   aAdd( aItmAlbPrv, { "CSERALB",      "C",  1,  0, "Serie del albarán",           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NNUMALB",      "N",  9,  0, "Número del albarán",          "'999999999'",        "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CSUFALB",      "C",  2,  0, "Sufijo de albarán",           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CTURALB",      "C",  6,  0, "Sesión del albarán",          "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "DFECALB",      "D",  8,  0, "Fecha del albarán",           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODPRV",      "C", 12,  0, "Código del proveedor",        "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODALM",      "C", 16,  0, "Código de almacén",           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODCAJ",      "C",  3,  0, "Código de caja",              "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CNOMPRV",      "C",150,  0, "Nombre del proveedor",        "'@!'",               "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CDIRPRV",      "C",200,  0, "Domicilio del proveedor",     "'@!'",               "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CPOBPRV",      "C",200,  0, "Población del proveedor",     "'@!'",               "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CPROPRV",      "C",100,  0, "Provincia del proveedor",     "'@!'",               "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CPOSPRV",      "C",  5,  0, "Código postal del proveedor", "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CDNIPRV",      "C", 30,  0, "D.N.I. del proveedor",        "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "DFECENT",      "D",  8,  0, "Fecha de entrada",            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CSUALB",       "C", 12,  0, "Número de su albarán",        "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "DSUALB",       "D",  8,  0, "Fecha de su albarán",         "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODPGO",      "C",  2,  0, "Código de la forma de pago",  "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NBULTOS",      "N",  3,  0, "Número de bultos",            "'999'",              "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NPORTES",      "N",  6,  0, "Precio de los portes",        "'@EZ 999,999'",      "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CDTOESP",      "C", 50,  0, "Descripción de descuento factura","",               "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NDTOESP",      "N",  6,  2, "Descuento factura",           "'@EZ 99.99'",        "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CDPP",         "C", 50,  0, "Descripción de descuento pronto pago","",           "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NDPP",         "N",  6,  2, "Descuento pronto pago",       "'@EZ 99.99'",        "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "LRECARGO",     "L",  1,  0, "Recargo de equivalencia",     "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCONDENT",     "C", 20,  0, "Comentarios del albarán",     "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CEXPED",       "C", 20,  0, "Expedición",                  "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "COBSERV",      "M", 10,  0, "Observaciones",               "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CNUMPED",      "C", 12,  0, "Número del pedido",           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "LFACTURADO",   "L",  1,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CNUMFAC",      "C", 12,  0, "Número de la factura",        "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CDIVALB",      "C",  3,  0, "Divisa del albarán",          "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NVDVALB",      "N", 10,  4, "Valor de la divisa",          "'@EZ 999,999.9999'", "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "LSNDDOC",      "L",  1,  0, "Enviar documento",            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CDTOUNO",      "C", 25,  0, "Descripción de primer descuento personalizado", "", "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NDTOUNO",      "N",  5,  2, "Porcentaje de primer descuento personalizado",  "", "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CDTODOS",      "C", 25,  0, "Descripción de segundo descuento personalizado","", "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "NDTODOS",      "N",  5,  2, "Porcentaje de segundo descuento personalizado", "", "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "LCLOALB",      "L",  1,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODUSR",      "C",  3,  0, "Código de usuario",           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODUBIT1",    "C",  5,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODUBIT2",    "C",  5,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODUBIT3",    "C",  5,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CVALUBIT1",    "C",  5,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CVALUBIT2",    "C",  5,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CVALUBIT3",    "C",  5,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CNOMUBIT1",    "C", 30,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CNOMUBIT2",    "C", 30,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CNOMUBIT3",    "C", 30,  0, "",                            "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "LIMPRIMIDO",   "L",  1,  0, "Lógico de impreso del documento", "",               "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "DFECIMP",      "D",  8,  0, "Última fecha de impresión del documento", "",       "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CHORIMP",      "C",  5,  0, "Hora de la última impresión del documento", "",     "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "DFECCHG",      "D",  8,  0, "Fecha de modificación del documento", "",           "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CTIMCHG",      "C",  5,  0, "Hora de modificación del documento", "",            "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "CCODDLG",      "C",  2,  0, "Código delegación",           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "nRegIva",      "N",  1,  0, "Regimen de " + cImp(),        "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "nTotNet",      "N", 16,  6, "Total neto",                  "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "nTotIva",      "N", 16,  6, "Total " + cImp(),             "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "nTotReq",      "N", 16,  6, "Total R.E.",                  "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "nTotAlb",      "N", 16,  6, "Total albarán",               "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "cAlmOrigen",   "C", 16,  0, "Almacén de origen de la mercancía","",              "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "nFacturado",   "N",  1,  0, "Estado del albarán",          "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "tFecAlb",      "C",  6,  0, "Hora del albarán" ,           "",                   "", "( cDbf )"} )
   aAdd( aItmAlbPrv, { "cCtrCoste",    "C",  9,  0, "Código del centro de coste" , "",                   "", "( cDbf )"} )

RETURN ( aItmAlbPrv )



FUNCTION aColAlbPrv()

   local aColAlbPrv  := {}

   aAdd( aColAlbPrv, { "cSerAlb",      "C",  1,  0, "Serie del albarán",                     "Serie",                      "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nNumAlb",      "N",  9,  0, "Número de albarán",                     "Numero",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cSufAlb",      "C",  2,  0, "Sufijo de albarán",                     "Sufijo",                     "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cRef",         "c", 18,  0, "Código de artículo",                    "Articulo",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cRefPrv",      "C", 18,  0, "Referencia del proveedor",              "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cDetAlle",     "C",240,  0, "Nombre del artículo",                   "DescripcionArticulo",        "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIva",         "n",  6,  2, cImp() + " del artículo",                "PorcentajeImpuesto",         "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nUniCaja",     "N", 16,  6, "Unidades por caja",                     "Unidades",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nCanEnt",      "N", 16,  6, "Cantidad recibida",                     "Cajas",                      "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPreDiv",      "N", 16,  6, "Precio",                                "PrecioVenta",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nCanPed",      "N", 16,  6, "Cajas pedidas",                         "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nUniPed",      "N", 16,  6, "Unidades pedidas",                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cUniDad",      "C",  2,  0, cNombreUnidades(),                       "UnidadMedicion",             "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "mLngDes",      "M", 10,  0, "Descripción de artículo sin codificar", "DescripcionAmpliada",        "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nDtoLin",      "N",  6,  2, "Descuento en líneas",                   "DescuentoPorcentual",        "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nDtoPrm",      "N",  6,  2, "Descuento por promociones",             "DescuentoPromocion",         "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nDtoRap",      "N",  6,  2, "Descuento por rappels",                 "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPreCom",      "N", 16,  6, "Precio real de la compra",              "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lBnfLin1",     "L",  1,  0, "",                                      "lBnfLin1",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lBnfLin2",     "L",  1,  0, "",                                      "lBnfLin2",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lBnfLin3",     "L",  1,  0, "",                                      "lBnfLin3",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lBnfLin4",     "L",  1,  0, "",                                      "lBnfLin4",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lBnfLin5",     "L",  1,  0, "",                                      "lBnfLin5",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lBnfLin6",     "L",  1,  0, "",                                      "lBnfLin6",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfLin1",     "N",  6,  2, "",                                      "nBnfLin1",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfLin2",     "N",  6,  2, "",                                      "nBnfLin2",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfLin3",     "N",  6,  2, "",                                      "nBnfLin3",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfLin4",     "N",  6,  2, "",                                      "nBnfLin4",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfLin5",     "N",  6,  2, "",                                      "nBnfLin5",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfLin6",     "N",  6,  2, "",                                      "nBnfLin6",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfSbr1",     "N",  1,  0, "",                                      "nBnfSbr1",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfSbr2",     "N",  1,  0, "",                                      "nBnfSbr2",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfSbr3",     "N",  1,  0, "",                                      "nBnfSbr3",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfSbr4",     "N",  1,  0, "",                                      "nBnfSbr4",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfSbr5",     "N",  1,  0, "",                                      "nBnfSbr5",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBnfSbr6",     "N",  1,  0, "",                                      "nBnfSbr6",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPvpLin1",     "N", 16,  6, "",                                      "nPvpLin1",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPvpLin2",     "N", 16,  6, "",                                      "nPvpLin2",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPvpLin3",     "N", 16,  6, "",                                      "nPvpLin3",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPvpLin4",     "N", 16,  6, "",                                      "nPvpLin4",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPvpLin5",     "N", 16,  6, "",                                      "nPvpLin5",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPvpLin6",     "N", 16,  6, "",                                      "nPvpLin6",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIvaLin1",     "N", 16,  6, "",                                      "nIvaLin1",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIvaLin2",     "N", 16,  6, "",                                      "nIvaLin2",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIvaLin3",     "N", 16,  6, "",                                      "nIvaLin3",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIvaLin4",     "N", 16,  6, "",                                      "nIvaLin4",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIvaLin5",     "N", 16,  6, "",                                      "nIvaLin5",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIvaLin6",     "N", 16,  6, "",                                      "nIvaLin6",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nIvaLin",      "N",  6,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lIvaLin",      "L",  1,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lChgLin",      "L",  1,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodPr1",      "C", 20,  0, "Código de primera propiedad",           "CodigoPropiedad1",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodPr2",      "C", 20,  0, "Código de segunda propiedad",           "CodigoPropiedad2",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cValPr1",      "C", 20,  0, "Valor de primera propiedad",            "ValorPropiedad1",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cValPr2",      "C", 20,  0, "Valor de segunda propiedad",            "ValorPropiedad2",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nFacCnv",      "N", 13,  4, "Factor de conversión de la compra",     "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodPed",      "C", 12,  0, "Número del pedido",                     "NumeroPedidoProveedor",      "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cAlmLin",      "C", 16,  0, "Código del almacén",                    "Almacen",                    "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nCtlStk",      "N",  1,  0, "Control de stock (1,2,3)",              "ControlStock",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "llote",        "L",  1,  0, "",                                      "LogicoLote",                 "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nlote",        "N",  9,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "clote",        "C", 64,  0, "Número de lote",                        "Lote",                       "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nNumLin",      "N",  4,  0, "Número de la línea",                    "NumeroLinea",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nUndKit",      "N", 16,  6, "Unidades del producto kit",             "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lKitArt",      "L",  1,  0, "Línea con escandallo",                  "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lKitChl",      "L",  1,  0, "Línea pertenciente a escandallo",       "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lKitPrc",      "L",  1,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lImpLin",      "L",  1,  0, "Imprimir línea",                        "Imprimir",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lConTrol",     "L",  1,  0, "" ,                                     "Control",                    "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "mNumSer",      "M", 10,  0, "" ,                                     "NumerosSerie",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "ndto1",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "ndto2",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "ndto3",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "ndto4",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "ndto5",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nrap1",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nrap2",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nrap3",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nrap4",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nrap5",        "N",  5,  2, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodUbi1",     "C",  5,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodUbi2",     "C",  5,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodUbi3",     "C",  5,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cValUbi1",     "C",  5,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cValUbi2",     "C",  5,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cValUbi3",     "C",  5,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cNomUbi1",     "C", 30,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cNomUbi2",     "C", 30,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cNomUbi3",     "C", 30,  0, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodFam",      "C", 16,  0, "Código de familia",                     "Familia",                    "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cGrpFam",      "C",  3,  0, "Código del grupo de familia",           "GrupoFamilia",               "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nReq",         "N", 16,  6, "Recargo de equivalencia",               "PorcentajeRecargo",          "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "mObsLin",      "M", 10,  0, "Observación de la línea",               "Observaciones",              "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cNumPed",      "C", 12,  0, "Número del pedido de cliente" ,         "NumeroPedidoCliente",        "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPvpRec",      "N", 16,  6, "Precio de venta recomendado",           "PrecioVentaRecomendado",     "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nNumMed",      "N",  1,  0, "Número de mediciones",                  "NumeroMediciones",           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nMedUno",      "N", 16,  6, "Primera unidad de medición",            "Medicion1",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nMedDos",      "N", 16,  6, "Segunda unidad de medición",            "Medicion2",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nMedTre",      "N", 16,  6, "Tercera unidad de medición",            "Medicion3",                  "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lFacturado",   "L",  1,  0, "Estado del albarán",                    "Facturda",                   "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "dFecCad",      "D",  8,  0, "Fecha de caducidad",                    "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nUndLin",      "N", 16,  6, "",                                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lLabel",       "L",  1,  0, "Lógico para marca de etiqueta",         "LogicoEtiqueta",             "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nLabel",       "N",  6,  0, "Unidades de etiquetas a imprimir",      "NumeroEtiqueta",             "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "dFecAlb",      "D",  8,  0, "Fecha de albaran",                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lNumSer",      "L",  1,  0, "Lógico solicitar numero de serie",      "LogicoNumeroSerie",          "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lAutSer",      "L",  1,  0, "Lógico de autoserializar",              "LogicoAutoserializar",       "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPntVer",      "N", 16,  6, "Importe punto verde" ,                  "PuntoVerde",                 "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cAlmOrigen",   "C", 16,  0, "Almacén de origen de la mercancía" ,    "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nBultos",      "N", 16,  6, "Numero de bultos en líneas",            "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cFormato",     "C",100,  0, "Formato de compra",                     "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cNumFac",      "C", 12,  0, "Número de la factura de cliente" ,      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCodImp",      "C",  3,  0, "Código de impuesto especial",           "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nValImp",      "N", 16,  6, "Importe de impuesto especial",          "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "dApertura",    "D",  8,  0, "Fecha apertura de lote",                "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "tApertura",    "C",  6,  0, "Hora apertura de lote",                 "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "dCierre",      "D",  8,  0, "Fecha cierre de lote",                  "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "tCierre",      "C",  6,  0, "Hora cierre de lote",                   "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "tFecAlb",      "C",  6,  0, "Hora del albarán" ,                     "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cCtrCoste",    "C",  9,  0, "Código del centro de coste" ,           "CentroCoste",                "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cSuAlb",       "C", 12,  0, "Número de su albarán",                  "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cRefAux",      "C", 18,  0, "Referencia auxiliar",                   "CodigoAuxiliar1",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cRefAux2",     "C", 18,  0, "Segunda referencia auxiliar",           "CodigoAuxiliar2",            "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "nPosPrint",    "N",  4,  0, "Posición de impresión",                 "PosicionImpresion",          "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cTipCtr",      "C", 20,  0, "Tipo tercero centro de coste",          "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "cTerCtr",      "C", 20,  0, "Tercero centro de coste" ,              "",                           "", "( cDbfCol )", nil } )
   aAdd( aColAlbPrv, { "lValidado",    "L",  1,  0, "Lógico validado con consolidación",     "LogicoValidado",             "", "( cDbfCol )", .F. } )

RETURN ( aColAlbPrv )



FUNCTION aSerAlbPrv()

   local aColAlbPrv  := {}

   aAdd( aColAlbPrv,  { "cSerAlb",     "C",  1,   0, "",                                 "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "nNumAlb",     "N",  9,   0, "",                                 "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "cSufAlb",     "C",  2,   0, "",                                 "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "dFecAlb",     "D",  8,   0, "",                                 "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "nNumLin",     "N",  4,   0, "Número de la línea",               "'9999'",            "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "cRef",        "C", 18,   0, "Referencia del artículo",          "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "cAlmLin",     "C", 16,   0, "Código de almacen",                "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "lFacturado",  "L",  1,   0, "Lógico de facturado",              "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "lUndNeg",     "L",  1,   0, "Lógico de unidades en negativo",   "",                  "", "(cDbfCol)" } )
   aAdd( aColAlbPrv,  { "cNumSer",     "C", 30,   0, "Numero de serie",                  "",                  "", "(cDbfCol)" } )

RETURN ( aColAlbPrv )







FUNCTION nUnidadesRecibidasPedCli( cPedCli, cCodArt, cValPr1, cValPr2, cRefPrv, cDetalle, cAlbPrvL )

   local nRec
   local nOrd
   local nTot        := 0

   If( cValPr1 == nil, cValPr1 := Space( 20 ), ) ;
   If( cValPr2 == nil, cValPr2 := Space( 20 ), ) ;

   nRec              := ( cAlbPrvL )->( Recno() )
   nOrd              := ( cAlbPrvL )->( OrdSetFocus( "cPedCliRef" ) )

   if ( cAlbPrvL )->( dbSeek( cPedCli + cCodArt + cValPr1 + cValPr2 ) )

      while ( cAlbPrvL )->cNumPed + ( cAlbPrvL )->cRef + ( cAlbPrvL )->cValPr1 + ( cAlbPrvL )->cValPr2 == cPedCli + cCodArt + cValPr1 + cValPr2 .AND. !( cAlbPrvL )->( eof() )

         nTot        += nTotNAlbPrv( cAlbPrvL )

         ( cAlbPrvL )->( dbSkip() )

      end

   end

   ( cAlbPrvL )->( OrdSetFocus( nOrd ) )
   ( cAlbPrvL )->( dbGoTo( nRec ) )

RETURN ( nTot )



FUNCTION nUnidadesRecibidasPedPrv( cPedPrv, cCodArt, cValPr1, cValPr2, cRefPrv, cAlbPrvL )

   local nRec
   local nOrd
   local nTot        := 0

   If( cValPr1 == nil, cValPr1 := Space( 40 ), ) ;
   If( cValPr2 == nil, cValPr2 := Space( 40 ), ) ;

   nRec              := ( cAlbPrvL )->( Recno() )
   nOrd              := ( cAlbPrvL )->( OrdSetFocus( "cPedPrvRef" ) )

   if ( cAlbPrvL )->( dbSeek( cPedPrv + cCodArt + cValPr1 + cValPr2 ) )

      while ( cAlbPrvL )->cCodPed + ( cAlbPrvL )->cRef + ( cAlbPrvL )->cValPr1 + ( cAlbPrvL )->cValPr2 == cPedPrv + cCodArt + cValPr1 + cValPr2 .AND. !( cAlbPrvL )->( eof() )

         nTot     += nTotNAlbPrv( cAlbPrvL )

         ( cAlbPrvL )->( dbSkip() )

      end

   end

   ( cAlbPrvL )->( OrdSetFocus( nOrd ) )
   ( cAlbPrvL )->( dbGoTo( nRec ) )

RETURN ( nTot )



FUNCTION SynAlbPrv( cPath )

   local oError
   local oBlock
   local aTotAlb
   local cCodPrv
   local cNumSer
   local aNumSer
   local nRecPed
   local nOrdPed
   local cPedPrv
   local aPedPrv     := {}
   local cAlbPrvT
   local cAlbPrvL
   local cAlbPrvI
   local cAlbPrvS
   local cFamilia
   local cArticulo
   local cArtPrv
   local cIva
   local cDiv
   local cPedPrvT
   local cPedPrvL
   local cArtDiv
   local hConsolidacion
   local nNumLin

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.Dbf" ), ( cCheckArea( "ALBPROVT", @cAlbPrvT ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.Dbf" ), ( cCheckArea( "ALBPROVL", @cAlbPrvL ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPRVS.Dbf" ), ( cCheckArea( "ALBPRVS", @cAlbPrvS ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPRVS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPRVI.Dbf" ), ( cCheckArea( "ALBPRVI", @cAlbPrvI ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPRVI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FAMILIAS.Dbf" ), ( cCheckArea( "FAMILIAS", @cFamilia ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @cArticulo ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROVART.Dbf" ), ( cCheckArea( "PROVART", @cArtPrv ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.Dbf" ), ( cCheckArea( "TIVA", @cIva ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.Dbf" ), ( cCheckArea( "DIVISAS", @cDiv ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVT.Dbf" ), ( cCheckArea( "PEDPROVT", @cPedPrvT ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.Dbf" ), ( cCheckArea( "PEDPROVL", @cPedPrvL ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtDiv.Dbf" ), ( cCheckArea( "ArtDiv", @cArtDiv ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtDiv.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   ( cAlbPrvT )->( ordSetFocus( 0 ) )
   ( cAlbPrvT )->( dbGoTop() )

   while !( cAlbPrvT )->( eof() )

      if Empty( ( cAlbPrvT )->cSufAlb )
         ( cAlbPrvT )->cSufAlb := "00"
      end

      if Empty( ( cAlbPrvT )->cCodCaj )
         ( cAlbPrvT )->cCodCaj := "000"
      end

      if !Empty( ( cAlbPrvT )->cNumPed ) .AND. Len( AllTrim( ( cAlbPrvT )->cNumPed ) ) <> 12
         ( cAlbPrvT )->cNumPed := AllTrim( ( cAlbPrvT )->cNumPed ) + "00"
      end

      if !Empty( ( cAlbPrvT )->cNumFac ) .AND. Len( AllTrim( ( cAlbPrvT )->cNumFac ) ) <> 12
         ( cAlbPrvT )->cNumFac := AllTrim( ( cAlbPrvT )->cNumFac ) + "00"
      end



      if ( cAlbPrvT )->nFacturado <> 0
         if ( cAlbPrvT )->nFacturado == 1
            ( cAlbPrvT )->lFacturado   := .F.
         end
         if ( cAlbPrvT )->nFacturado == 3
            ( cAlbPrvT )->lFacturado   := .T.
         end
      else
         if ( cAlbPrvT )->lFacturado
            ( cAlbPrvT )->nFacturado   := 3
         else
            ( cAlbPrvT )->nFacturado   := 1
         end
      end





      if ( cAlbPrvT )->nTotAlb == 0 .AND. dbLock( cAlbPrvT )

         aTotAlb                 := aTotAlbPrv( ( cAlbPrvT )->cSerAlb + Str( ( cAlbPrvT )->nNumAlb ) + ( cAlbPrvT )->cSufAlb, cAlbPrvT, cAlbPrvL, cIva, cDiv, ( cAlbPrvT )->cDivAlb )

         ( cAlbPrvT )->nTotNet := aTotAlb[ 1 ]
         ( cAlbPrvT )->nTotIva := aTotAlb[ 2 ]
         ( cAlbPrvT )->nTotReq := aTotAlb[ 3 ]
         ( cAlbPrvT )->nTotAlb := aTotAlb[ 4 ]

      end























      ( cAlbPrvT )->( dbSkip() )

   end

   ( cAlbPrvT )->( ordSetFocus( 1 ) )





   ( cAlbPrvL )->( ordSetFocus( 0 ) )
   ( cAlbPrvL )->( dbGoTop() )

   while !( cAlbPrvL )->( eof() )

      if Empty( ( cAlbPrvL )->cSufAlb )
         ( cAlbPrvL )->cSufAlb    := "00"
      end

      if !Empty( ( cAlbPrvL )->cCodPed ) .AND. Len( AllTrim( ( cAlbPrvL )->cCodPed ) ) <> 12
         ( cAlbPrvL )->cCodPed    := AllTrim( ( cAlbPrvL )->cCodPed ) + "00"
      end

      if !Empty( ( cAlbPrvL )->cNumPed ) .AND. Len( AllTrim( ( cAlbPrvL )->cNumPed ) ) <> 12
         ( cAlbPrvL )->cNumPed    := AllTrim( ( cAlbPrvL )->cNumPed ) + "00"
      end

      if Empty( ( cAlbPrvL )->cLote ) .AND. !Empty( ( cAlbPrvL )->nLote )
         ( cAlbPrvL )->cLote      := AllTrim( Str( ( cAlbPrvL )->nLote ) )
      end

      if !Empty( ( cAlbPrvL )->cRef ) .AND. Empty( ( cAlbPrvL )->cCodFam )
         ( cAlbPrvL )->cCodFam    := RetFamArt( ( cAlbPrvL )->cRef, cArticulo )
      end

      if !Empty( ( cAlbPrvL )->cRef ) .AND. !Empty( ( cAlbPrvL )->cCodFam )
         ( cAlbPrvL )->cGrpFam    := cGruFam( ( cAlbPrvL )->cCodFam, cFamilia )
      end

      if Empty( ( cAlbPrvL )->nReq )
         ( cAlbPrvL )->nReq       := nPReq( cIva, ( cAlbPrvL )->nIva )
      end

      if Empty( ( cAlbPrvL )->cAlmLin )
         ( cAlbPrvL )->cAlmLin    := RetFld( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb, cAlbPrvT, "cCodAlm" )
      end







      if ( cAlbPrvL )->dFecAlb <> RetFld( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb, cAlbPrvT, "dFecAlb" )
         ( cAlbPrvL )->dFecAlb   := RetFld( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb, cAlbPrvT, "dFecAlb" )
      end

      if ( cAlbPrvL )->tFecAlb <> RetFld( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb, cAlbPrvT, "tFecAlb" )
         ( cAlbPrvL )->tFecAlb   := RetFld( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb, cAlbPrvT, "tFecAlb" )
      end

      if empty( ( cAlbPrvL )->cNumFac )
         ( cAlbPrvL )->cNumFac   := RetFld( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb, cAlbPrvT, "cNumFac" )
      end

      if ( cAlbPrvL )->nNumLin == 0

         nNumLin                 := AlbaranesProveedoresLineasModel():nLastNumLin( ( cAlbPrvL )->cSerAlb, ( cAlbPrvL )->nNumAlb, ( cAlbPrvL )->cSufAlb )

         MsgWait( ( cAlbPrvL )->cSerAlb + Str( ( cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb, Str( nNumLin ), 0.005 )

         if dbLock( cAlbPrvL )
            ( cAlbPrvL )->nNumLin   := nNumLin
            ( cAlbPrvL )->( dbUnLock() )
         end

      end






























































      ( cAlbPrvL )->( dbSkip() )

      SysRefresh()

   end

   ( cAlbPrvL )->( ordSetFocus( 1 ) )



   ( cAlbPrvI )->( ordSetFocus( 0 ) )
   ( cAlbPrvI )->( dbGoTop() )

   while !( cAlbPrvI )->( eof() )

      if Empty( ( cAlbPrvI )->cSufAlb )
         ( cAlbPrvI )->cSufAlb       := "00"
      end

      ( cAlbPrvI )->( dbSkip() )

      SysRefresh()

   end

   ( cAlbPrvI )->( ordSetFocus( 1 ) )



   ( cAlbPrvS )->( ordSetFocus( 0 ) )
   ( cAlbPrvS )->( dbGoTop() )

   while !( cAlbPrvS )->( eof() )

      if Empty( ( cAlbPrvS )->cSufAlb )
         ( cAlbPrvS )->cSufAlb := "00"
      end

      if ( cAlbPrvS )->dFecAlb <> RetFld( ( cAlbPrvS )->cSerAlb + Str( ( cAlbPrvS )->nNumAlb ) + ( cAlbPrvS )->cSufAlb, cAlbPrvT, "dFecAlb" )
         ( cAlbPrvS )->dFecAlb := RetFld( ( cAlbPrvS )->cSerAlb + Str( ( cAlbPrvS )->nNumAlb ) + ( cAlbPrvS )->cSufAlb, cAlbPrvT, "dFecAlb" )
      end

      ( cAlbPrvS )->( dbSkip() )

      SysRefresh()

   end

   ( cAlbPrvS )->( ordSetFocus( 1 ) )



   ( cAlbPrvT )->( ordSetFocus( 1 ) )



   ( cAlbPrvL )->( ordSetFocus( 1 ) )
   ( cAlbPrvL )->( dbGoTop() )

   while !( cAlbPrvL )->( eof() )

      if !( cAlbPrvT )->( dbSeek( ( cAlbPrvL )->cSerAlb + Str( (cAlbPrvL )->nNumAlb ) + ( cAlbPrvL )->cSufAlb ) )
         ( cAlbPrvL )->( dbDelete() )
      end
      ( cAlbPrvL )->( dbSkip( 1 ) )

      SysRefresh()

   end



   ( cAlbPrvS )->( ordSetFocus( 1 ) )
   ( cAlbPrvS )->( dbGoTop() )

   while !( cAlbPrvS )->( eof() )

      if !( cAlbPrvT )->( dbSeek( ( cAlbPrvS )->cSerAlb + Str( ( cAlbPrvS )->nNumAlb ) + ( cAlbPrvS )->cSufAlb ) )
         ( cAlbPrvS )->( dbDelete() )
      end
      ( cAlbPrvS )->( dbSkip( 1 ) )

      SysRefresh()

   end



   ( cAlbPrvI )->( ordSetFocus( 1 ) )
   ( cAlbPrvI )->( dbGoTop() )

   while !( cAlbPrvI )->( eof() )

      if !( cAlbPrvT )->( dbSeek( ( cAlbPrvI )->cSerAlb + Str( ( cAlbPrvI )->nNumAlb ) + ( cAlbPrvI )->cSufAlb ) )
         ( cAlbPrvI )->( dbDelete() )
      end
      ( cAlbPrvI )->( dbSkip( 1 ) )

      SysRefresh()

   end



   RECOVER USING oError

      msgStop( "Imposible sincronizar albaranes de proveedores" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !Empty( cAlbPrvT ) .AND. ( cAlbPrvT )->( Used() )
      ( cAlbPrvT )->( dbCloseArea() )
   end

   if !Empty( cAlbPrvL ) .AND. ( cAlbPrvL )->( Used() )
      ( cAlbPrvL )->( dbCloseArea() )
   end

   if !Empty( cAlbPrvI ) .AND. ( cAlbPrvI )->( Used() )
      ( cAlbPrvI )->( dbCloseArea() )
   end

   if !Empty( cAlbPrvS ) .AND. ( cAlbPrvS )->( Used() )
      ( cAlbPrvS )->( dbCloseArea() )
   end

   if !Empty( cArticulo ) .AND. ( cArticulo )->( Used() )
      ( cArticulo )->( dbCloseArea() )
   end

   if !Empty( cFamilia ) .AND. ( cFamilia )->( Used() )
      ( cFamilia )->( dbCloseArea() )
   end

   if !Empty( cArtPrv ) .AND. ( cArtPrv )->( Used() )
      ( cArtPrv )->( dbCloseArea() )
   end

   if !Empty( cIva ) .AND. ( cIva )->( Used() )
      ( cIva )->( dbCloseArea() )
   end

   if !Empty( cDiv ) .AND. ( cDiv )->( Used() )
      ( cDiv )->( dbCloseArea() )
   end

   if !Empty( cPedPrvT ) .AND. ( cPedPrvT )->( Used() )
      ( cPedPrvT )->( dbCloseArea() )
   end

   if !Empty( cPedPrvL ) .AND. ( cPedPrvL )->( Used() )
      ( cPedPrvL )->( dbCloseArea() )
   end

   if !Empty( cArtDiv ) .AND. ( cArtDiv )->( Used() )
      ( cArtDiv )->( dbCloseArea() )
   end





   if !Empty( aPedPrv )

      oStock      := TStock():Create()
      if oStock:lOpenFiles()

         for each cPedPrv in aPedPrv
            oStock:SetPedPrv( cPedPrv )
         next

      end

      if !Empty( oStock )
         oStock:end()
      end

      oStock      := nil

   end

RETURN nil



FUNCTION AppAlbPrv( cCodPrv, cCodArt, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if AlbPrv( nil, nil, cCodPrv, cCodArt )
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( .T. )
         WinAppRec( nil, bEdtRec, D():AlbaranesProveedores( nView ), cCodPrv, cCodArt )
         CloseFiles()
      end

   end

RETURN .T.



FUNCTION EdtAlbPrv( nNumAlb, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if AlbPrv()
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            WinEdtRec( nil, bEdtRec, D():AlbaranesProveedores( nView ) )
         else
            MsgStop( "No se encuentra albaran" )
         end
         CloseFiles()
      end

   end

RETURN NIL



FUNCTION ZooAlbPrv( nNumAlb, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if AlbPrv()
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            WinZooRec( nil, bEdtRec, D():AlbaranesProveedores( nView ) )
         else
            MsgStop( "No se encuentra albaran" )
         end
         CloseFiles()
      end

   end

RETURN NIL



FUNCTION DelAlbPrv( nNumAlb, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if AlbPrv()
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            WinDelRec( nil, D():AlbaranesProveedores( nView ), {|| QuiAlbPrv() } )
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            WinDelRec( nil, D():AlbaranesProveedores( nView ), {|| QuiAlbPrv() } )
         else
            MsgStop( "No se encuentra albaran" )
         end
         CloseFiles()
      end

   end

RETURN nil



FUNCTION PrnAlbPrv( nNumAlb, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if AlbPrv()
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            GenAlbPrv( 1 )
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            GenAlbPrv( 1 )
         else
            MsgStop( "No se encuentra albaran" )
         end
         CloseFiles()
      end

   end

RETURN NIL



FUNCTION VisAlbPrv( nNumAlb, lOpenBrowse )

   local nLevel         := Auth():Level( "albaranes_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if AlbPrv()
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            GenAlbPrv( 2 )
         else
            MsgStop( "No se encuentra albaran" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumAlb, "nNumAlb", D():AlbaranesProveedores( nView ) )
            GenAlbPrv( 2 )
         else
            MsgStop( "No se encuentra albaran" )
         end
         CloseFiles()
      end

   end

RETURN nil



FUNCTION setNoFacturadoAlbaranProveedorLinea( nView )

   local id := ( D():FacturasProveedoresLineas( nView ) )->iNumAlb

RETURN ( setEstadoFacturadoAlbaranProveedorLinea( .F., id, nView ) )



FUNCTION setFacturadoAlbaranProveedorLinea( cSerFac, nNumFac, cSufFac, nView )

   local id := ( D():FacturasProveedoresLineas( nView ) )->iNumAlb

RETURN ( setEstadoFacturadoAlbaranProveedorLinea( .T., id, nView, cSerFac, nNumFac, cSufFac ) )



FUNCTION setEstadoFacturadoAlbaranProveedorLinea( lFacturado, id, nView, cSerFac, nNumFac, cSufFac )

   If( lFacturado == nil, lFacturado := .F., ) ;

   D():getStatusAlbaranesProveedoresLineas( nView )
   D():setFocusAlbaranesProveedoresLineas( "nNumLin", nView )

   if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( id ) )

      if dbDialogLock( D():AlbaranesProveedoresLineas( nView ) )

         ( D():AlbaranesProveedoresLineas( nView ) )->lFacturado  := lFacturado

         if lFacturado
            ( D():AlbaranesProveedoresLineas( nView ) )->cNumFac  := cSerFac + str( nNumFac ) + cSufFac
         else
            ( D():AlbaranesProveedoresLineas( nView ) )->cNumFac  := ""
         end

         ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnlock() )

      end

   end

   D():restoreFocusAlbaranesProveedoresLineas( nView )
   D():setStatusAlbaranesProveedoresLineas( nView )

RETURN ( nil )



FUNCTION setFacturadoAlbaranProveedorCabecera( lFacturado, nView, cNumFac )

   local nRec
   local nOrd

   If( lFacturado == nil, lFacturado := .F., ) ;
   If( cNumFac == nil, cNumFac := Space( 12 ), ) ;





   if dbDialogLock( D():AlbaranesProveedores( nView ) )
      ( D():AlbaranesProveedores( nView ) )->lFacturado := lFacturado
      ( D():AlbaranesProveedores( nView ) )->cNumFac    := cNumFac
      ( D():AlbaranesProveedores( nView ) )->nFacturado := if( lFacturado, 3, 1 )
      ( D():AlbaranesProveedores( nView ) )->( dbUnlock() )
   end

RETURN NIL



FUNCTION setFacturadoAlbaranProveedores( nView )

   local nRec
   local cTxt
   local nSelected
   local nRecHead

   cTxt                 := "¿Desea cambiar el estado del documento?"

   if isNil( oWndBrw )
      RETURN .F.
   end

   nSelected            := len( oWndBrw:oBrw:aSelected  )
   if nSelected > 1
      cTxt              := "¿Desea cambiar el estado de " + alltrim( str( nSelected, 3 ) ) + " documentos ?"
   end

   if !apoloMsgNoYes( cTxt, "Elija una opción" )
      RETURN .F.
   end

   nRecHead                := ( D():AlbaranesProveedores( nView ) )->( recNo() )

   for each nRec in ( oWndBrw:oBrw:aSelected )

      ( D():AlbaranesProveedores( nView ) )->( dbGoTo( nRec ) )

      setFacturadoAlbaranProveedor( !( D():AlbaranesProveedores( nView ) )->lFacturado, nView )

   next

   ( D():AlbaranesProveedores( nView ) )->( dbGoTo( nRecHead ) )

   oWndBrw:Refresh()

RETURN .T.



FUNCTION setFacturadoAlbaranProveedor( lFacturado, nView, cNumFac )

   local nRec
   local nOrd

   If( lFacturado == nil, lFacturado := .F., ) ;
   If( cNumFac == nil, cNumFac := Space( 12 ), ) ;

   CursorWait()





   setFacturadoAlbaranProveedorCabecera( lFacturado, nView, cNumFac )





   D():getStatusAlbaranesProveedoresLineas( nView )
   D():setFocusAlbaranesProveedoresLineas( "nNumAlb", nView )

   if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( D():AlbaranesProveedoresId( nView ) ) )

      while D():AlbaranesProveedoresLineasId( nView ) == D():AlbaranesProveedoresId( nView ) .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( eof() )

         if dbDialogLock( D():AlbaranesProveedoresLineas( nView ) )
            ( D():AlbaranesProveedoresLineas( nView ) )->lFacturado := lFacturado
            ( D():AlbaranesProveedoresLineas( nView ) )->cNumFac    := cNumFac
            ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnlock() )
          end

         ( D():AlbaranesProveedoresLineas( nView ) )->( dbSkip() )

      end

   end

   D():restoreFocusAlbaranesProveedoresLineas( nView )
   D():setStatusAlbaranesProveedoresLineas( nView )





   D():getStatusAlbaranesProveedoresSeries( nView )
   D():setFocusAlbaranesProveedoresSeries( "nNumAlb", nView )

   if ( D():AlbaranesProveedoresSeries( nView ) )->( dbSeek( D():AlbaranesProveedoresId( nView ) ) )

      while D():AlbaranesProveedoresSeriesId( nView ) == D():AlbaranesProveedoresId( nView ) .AND. !( D():AlbaranesProveedoresSeries( nView ) )->( eof() )

         if dbDialogLock( D():AlbaranesProveedoresSeries( nView ) )
            ( D():AlbaranesProveedoresSeries( nView ) )->lFacturado := lFacturado
            ( D():AlbaranesProveedoresSeries( nView ) )->( dbUnlock() )
          end

         ( D():AlbaranesProveedoresSeries( nView ) )->( dbSkip() )

      end

   end

   D():restoreFocusAlbaranesProveedoresSeries( nView )
   D():setStatusAlbaranesProveedoresSeries( nView )

   CursorWE()

RETURN NIL



FUNCTION getEstadoAlbaranProveedor( id, nView )

   local nOrd
   local nLineasProcesadas := 0
   local nLineasFacturadas := 0
   local nEstadoAlbaran    := 0

   CursorWait()



   nOrd                    := ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( "nNumAlb" ) )

   if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( id ) )

      while ( D():AlbaranesProveedoresLineasId( nView ) == id ) .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( eof() )

         nLineasProcesadas++

         if ( D():AlbaranesProveedoresLineas( nView ) )->lFacturado
            nLineasFacturadas++
         end

         (  D():AlbaranesProveedoresLineas( nView ) )->( dbSkip() )

      end

   end

   (  D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( nOrd ) )



   do case
      case nLineasFacturadas == 0
         nEstadoAlbaran    := 1
      case nLineasFacturadas > 0 .AND. nLineasFacturadas < nLineasProcesadas
         nEstadoAlbaran    := 2
      otherwise
         nEstadoAlbaran    := 3
   end

   CursorWE()

RETURN ( nEstadoAlbaran )



FUNCTION setEstadoAlbaranProveedor( id, nView )

   local nOrd
   local nFacturado     := 0

   if empty( id )
      RETURN ( nFacturado )
   end

   nOrd                 := ( D():AlbaranesProveedores( nView ) )->( OrdSetFocus( "nNumAlb" ) )

   if ( D():AlbaranesProveedores( nView ) )->( dbSeek( id ) )
      nFacturado        := getEstadoAlbaranProveedor( id, nView )
      if ( D():AlbaranesProveedores( nView ) )->nFacturado <> nFacturado
         if ( D():AlbaranesProveedores( nView ) )->( dbrlock() )
            ( D():AlbaranesProveedores( nView ) )->nFacturado  := nFacturado
            ( D():AlbaranesProveedores( nView ) )->( dbrunlock() )
         end
      end
   end

   (  D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( nOrd ) )

RETURN ( nFacturado )



FUNCTION IsAlbPrv( cPath )

RETURN ( .T. )



FUNCTION cCodAlbPrv( cAlbPrvL )

   local cRETURN     := ""

   If( cAlbPrvL == nil, cAlbPrvL := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;

   cRETURN           += Alltrim( ( cAlbPrvL )->cRef )

   if !Empty( ( cAlbPrvL )->cValPr1 )
      cRETURN        += "."
      cRETURN        += Alltrim( ( cAlbPrvL )->cValPr1 )
   end

   if !Empty( ( cAlbPrvL )->cValPr2 )
      cRETURN        += "."
      cRETURN        += Alltrim( ( cAlbPrvL )->cValPr2 )
   end

RETURN ( cRETURN )



FUNCTION cDesAlbPrv( cAlbPrvL, cAlbPrvS )

   If( cAlbPrvL == nil, cAlbPrvL := D():AlbaranesProveedoresLineas( nView ), ) ;
   If( cAlbPrvS == nil, cAlbPrvS := D():AlbaranesProveedoresSeries( nView ), ) ;

RETURN ( Descrip( cAlbPrvL, cAlbPrvS ) )



FUNCTION cDesAlbPrvLeng( cAlbPrvL, cAlbPrvS, cArtLeng )

   If( cAlbPrvL == nil, cAlbPrvL := D():AlbaranesProveedoresLineas( nView ), ) ;
   If( cAlbPrvS == nil, cAlbPrvS := D():AlbaranesProveedoresSeries( nView ), ) ;
   If( cArtLeng == nil, cArtLeng := D():ArticuloLenguaje( nView ), ) ;

RETURN ( DescripLeng( cAlbPrvL, cAlbPrvS, cArtLeng ) )



FUNCTION DesignLabelAlbaranProveedor( oFr, cDbfDoc )

   local oLabel
   local lOpenFiles  := empty( nView )

   if lOpenFiles .AND. !Openfiles()
      RETURN .F.
   endif

   oLabel            := TLabelGeneratorAlbaranProveedores():New( nView, oNewImp )



   oLabel:createTempLabelReport()
   oLabel:loadTempLabelReport()

   oLabel:dataLabel( oFr )



   if !empty( ( cDbfDoc )->mReport )
      oFr:LoadFromBlob( ( cDbfDoc )->( Select() ), "mReport")
   else
      oFr:AddPage(         "MainPage" )
      oFr:AddBand(         "MasterData",  "MainPage",       6 )
      oFr:SetProperty(     "MasterData",  "Top",            200 )
      oFr:SetProperty(     "MasterData",  "Height",         100 )
      oFr:SetObjProperty(  "MasterData",  "DataSet",        "Lineas de albaranes" )
   end



   VariableReport( oFr )



   oFr:DesignReport()



   oFr:DestroyFr()

   oLabel:DestroyTempReport()
   oLabel:End()

   if lOpenFiles
      closeFiles()
   end

RETURN .T.



FUNCTION DesignReportAlbPrv( oFr, dbfDoc )

   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag





      DataReport( oFr )





      if !Empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "CallHbFunc('nTotAlbPrv');"                                 + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "MasterData",  "MainPage", 6 )
         oFr:SetProperty(     "MasterData",  "Top", 200 )
         oFr:SetProperty(     "MasterData",  "Height", 0 )
         oFr:SetProperty(     "MasterData",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "MasterData",  "DataSet", "Albaranes" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de albaranes" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lOpen
         CloseFiles()
      end

   else

      RETURN .F.

   end

RETURN .T.



FUNCTION nIncUAlbPrv( dbfTmpLin, nDec, nVdv )

   local nCalculo

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUAlbPrv( dbfTmpLin, nDec, nVdv )

   if !( dbfTmpLin )->lIvaLin
      nCalculo    += nCalculo * ( dbfTmpLin )->nIva / 100
   end

   IF nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nIncLAlbPrv( dbfLin, nDec, nRouDec, nVdv )

   local nCalculo := nTotLAlbPrv( dbfLin, nDec, nRouDec, nVdv )

   if !( dbfLin )->lIvaLin
      nCalculo    += nCalculo * ( dbfLin )->nIva / 100
   end

RETURN ( nCalculo )



FUNCTION cBarPrp1( uAlbPrvL, uTblPro )

   local cBarPrp1    := ""

   If( uAlbPrvL == nil, uAlbPrvL := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;
   If( uTblPro == nil, uTblPro := D():PropiedadesLineas( nView ), ) ;

   if dbSeekInOrd( ( uAlbPrvL )->cCodPr1 + ( uAlbPrvL )->cValPr1, "cCodPro", uTblPro )
      cBarPrp1       := ( uTblPro )->nBarTbl
   end

RETURN ( cBarPrp1 )



FUNCTION cBarPrp2( uAlbPrvL, uTblPro )

   local cBarPrp2    := ""

   If( uAlbPrvL == nil, uAlbPrvL := if( !Empty( tmpAlbPrvL ), tmpAlbPrvL, D():AlbaranesProveedoresLineas( nView ) ), ) ;
   If( uTblPro == nil, uTblPro := D():PropiedadesLineas( nView ), ) ;

   if dbSeekInOrd( ( uAlbPrvL )->cCodPr2 + ( uAlbPrvL )->cValPr2, "cCodPro", uTblPro )
      cBarPrp2       := ( uTblPro )->nBarTbl
   end

RETURN ( cBarPrp2 )



Static FUNCTION AppendPropiedadesArticulos( aTbl, aTmp )

   if !( D():ArticuloPrecioPropiedades( nView ) )->( dbSeek( aTbl[ 4 ] +  aTbl[ 52 ] + aTbl[ 53 ] + aTbl[ 54 ] + aTbl[ 55 ] ) )

      ( D():ArticuloPrecioPropiedades( nView ) )->( dbAppend() )
      ( D():ArticuloPrecioPropiedades( nView ) )->cCodDiv    := aTmp[ 32 ]
      ( D():ArticuloPrecioPropiedades( nView ) )->cCodArt    := aTbl[ 4    ]
      ( D():ArticuloPrecioPropiedades( nView ) )->cCodPr1    := aTbl[ 52 ]
      ( D():ArticuloPrecioPropiedades( nView ) )->cCodPr2    := aTbl[ 53 ]
      ( D():ArticuloPrecioPropiedades( nView ) )->cValPr1    := aTbl[ 54 ]
      ( D():ArticuloPrecioPropiedades( nView ) )->cValPr2    := aTbl[ 55 ]
      ( D():ArticuloPrecioPropiedades( nView ) )->nPreCom    := aTbl[ 10 ]
      ( D():ArticuloPrecioPropiedades( nView ) )->( dbUnlock() )

   end

RETURN ( nil )













_HB_CLASS TAlbaranesProveedorSenderReciver ; function TAlbaranesProveedorSenderReciver ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAlbaranesProveedorSenderReciver", iif( .T., { @TSenderReciverItem() }, { @HBObject() } ), @TAlbaranesProveedorSenderReciver() ) ) ;

   _HB_MEMBER { cFileName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileName"}, .F. )

   _HB_MEMBER CreateData(); oClass:AddMethod( "CreateData", @TAlbaranesProveedorSenderReciver_CreateData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RestoreData(); oClass:AddMethod( "RestoreData", @TAlbaranesProveedorSenderReciver_RestoreData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SendData(); oClass:AddMethod( "SendData", @TAlbaranesProveedorSenderReciver_SendData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReciveData(); oClass:AddMethod( "ReciveData", @TAlbaranesProveedorSenderReciver_ReciveData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TAlbaranesProveedorSenderReciver_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validateRecepcion(); oClass:AddMethod( "validateRecepcion", @TAlbaranesProveedorSenderReciver_validateRecepcion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAlbaranesProveedorSenderReciver ;



static FUNCTION TAlbaranesProveedorSenderReciver_CreateData( ) ; local Self AS CLASS TAlbaranesProveedorSenderReciver := QSelf() AS CLASS TAlbaranesProveedorSenderReciver

   local oBlock
   local oError
   local lSnd        := .F.
   local dbfAlbPrvT
   local dbfAlbPrvL
   local tmpAlbPrvT
   local tmpAlbPrvL

   if ::oSender:lServer
      ::cFileName    := "AlbPrv" + win_uuidcreatestring() + ".All"
   else
      ::cFileName    := "AlbPrv" + win_uuidcreatestring() + "." + RetSufEmp()
   end

   ::oSender:SetText( "Enviando albaranes a proveedores" )

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbProvT.Dbf" ), ( cCheckArea( "AlbProvT", @dbfAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbProvL.Dbf" ), ( cCheckArea( "AlbProvL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbProvL.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





   mkAlbPrv( cPatSnd() )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbProvT.Dbf" ), ( cCheckArea( "AlbProvT", @tmpAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbProvT.Cdx" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AlbProvL.Dbf" ), ( cCheckArea( "AlbProvL", @tmpAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AlbProvL.Cdx" ) )

   if !Empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( dbfAlbPrvT )->( lastrec() )
   end

   while !( dbfAlbPrvT )->( eof() )

      if ( dbfAlbPrvT )->lSndDoc

         lSnd  := .T.

         dbPass( dbfAlbPrvT, tmpAlbPrvT, .T. )

         ::oSender:SetText( ( dbfAlbPrvT )->cSerAlb + "/" + AllTrim( Str( ( dbfAlbPrvT )->nNumAlb ) ) + "/" + AllTrim( ( dbfAlbPrvT )->cSufAlb ) + "; " + Dtoc( ( dbfAlbPrvT )->dFecAlb ) + "; " + AllTrim( ( dbfAlbPrvT )->cCodPrv ) + "; " + ( dbfAlbPrvT )->cNomPrv )

         if ( dbfAlbPrvL )->( dbSeek( ( dbfAlbPrvT )->cSerAlb + Str( ( dbfAlbPrvT )->nNumAlb ) + ( dbfAlbPrvT )->cSufAlb ) )
            while ( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->CSUFAlb ) == ( ( dbfAlbPrvT )->cSerAlb + Str( ( dbfAlbPrvT )->nNumAlb ) + ( dbfAlbPrvT )->CSUFAlb ) .AND. !( dbfAlbPrvL )->( eof() )
               dbPass( dbfAlbPrvL, tmpAlbPrvL, .T. )
               ( dbfAlbPrvL )->( dbSkip() )
            end
         end

      end

      ( dbfAlbPrvT )->( dbSkip() )

      if !Empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( dbfAlbPrvT )->( OrdKeyNo() ) )
      end

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de albaranes de proveedores" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfAlbPrvT )->( dbCloseArea() )
   ( dbfAlbPrvL )->( dbCloseArea() )
   ( tmpAlbPrvT )->( dbCloseArea() )
   ( tmpAlbPrvL )->( dbCloseArea() )

   dbfAlbPrvT  := nil
   dbfAlbPrvL  := nil
   tmpAlbPrvT  := nil
   tmpAlbPrvL  := nil





   if lSnd

      ::oSender:SetText( "Comprimiendo albaranes de proveedores" )

      if ::oSender:lZipData( ::cFileName )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay albaranes de proveedores para enviar" )

   end

RETURN ( Self )






static FUNCTION TAlbaranesProveedorSenderReciver_RestoreData( ) ; local Self AS CLASS TAlbaranesProveedorSenderReciver := QSelf() AS CLASS TAlbaranesProveedorSenderReciver

   local oBlock
   local oError
   local cAlbPrvT

   if ::lSuccesfullSend

      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbProvT.Dbf" ), ( cCheckArea( "AlbProvT", @cAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         lSelectAll( nil, cAlbPrvT, "lSndDoc", .F., .T., .F. )

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

      ( cAlbPrvT )->( dbCloseArea() )

   end

RETURN ( Self )






static FUNCTION TAlbaranesProveedorSenderReciver_SendData( ) ; local Self AS CLASS TAlbaranesProveedorSenderReciver := QSelf() AS CLASS TAlbaranesProveedorSenderReciver

   if file( cPatOut() + ::cFileName )

      if ::oSender:SendFiles( cPatOut() + ::cFileName, ::cFileName )
         ::lSuccesfullSend := .T.
         ::oSender:SetText( "Fichero enviado " + ::cFileName  )
      else
         ::oSender:SetText( "ERROR al enviar fichero" )
      end

   else

      ::oSender:SetText( "No existe el fichero " + ( cPatOut() + ::cFileName ) )

   end

RETURN ( Self )



static FUNCTION TAlbaranesProveedorSenderReciver_ReciveData( ) ; local Self AS CLASS TAlbaranesProveedorSenderReciver := QSelf() AS CLASS TAlbaranesProveedorSenderReciver

   local n
   local aExt

   aExt     := ::oSender:aExtensions()





   ::oSender:SetText( "Recibiendo albaranes de proveedores" )

   for n := 1 to len( aExt )
      ::oSender:GetFiles( "AlbPrv*." + aExt[ n ], cPatIn() )
   next

   ::oSender:SetText( "Albaranes de proveedores recibidos" )

RETURN Self



static FUNCTION TAlbaranesProveedorSenderReciver_Process( ) ; local Self AS CLASS TAlbaranesProveedorSenderReciver := QSelf() AS CLASS TAlbaranesProveedorSenderReciver

   local m
   local dbfAlbPrvT
   local dbfAlbPrvL
   local tmpAlbPrvT
   local tmpAlbPrvL
   local aFiles      := Directory( cPatIn() + "AlbPrv*.*" )
   local oBlock
   local oError

   for m := 1 to len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )

         dbUseArea(.T., cLocalDriver(), cPatSnd() + "AlbProvT.Dbf", cCheckArea( "AlbProvT", @tmpAlbPrvT ), .F., .T. )
         ( tmpAlbPrvT )->( ordListAdd( cPatSnd() + "AlbProvT.Cdx" ) )

         dbUseArea(.T., cLocalDriver(), cPatSnd() + "AlbProvL.Dbf", cCheckArea( "AlbProvL", @tmpAlbPrvL ), .F., .T. )
         ( tmpAlbPrvL )->( ordListAdd( cPatSnd() + "AlbProvL.Cdx" ) )

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbProvT.Dbf" ), ( cCheckArea( "AlbProvT", @dbfAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbProvL.Dbf" ), ( cCheckArea( "AlbProvL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbProvL.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         while ( tmpAlbPrvT )->( !eof() )



            if ::validateRecepcion( tmpAlbPrvT, dbfAlbPrvT )

               while ( dbfAlbPrvT )->( dbseek( ( tmpAlbPrvT )->cSerAlb + Str( ( tmpAlbPrvT )->nNumAlb ) + ( tmpAlbPrvT )->cSufAlb ) )
                  dbLockDelete( dbfAlbPrvT )
               end

               while ( dbfAlbPrvL )->( dbseek( ( tmpAlbPrvT )->cSerAlb + Str( ( tmpAlbPrvT )->nNumAlb ) + ( tmpAlbPrvT )->cSufAlb ) )
                  dbLockDelete( dbfAlbPrvL )
               end

               dbPass( tmpAlbPrvT, dbfAlbPrvT, .T. )

               if dbLock( dbfAlbPrvT )
                  ( dbfAlbPrvT )->lSndDoc := .F.
                  ( dbfAlbPrvT )->( dbUnLock() )
               end

               ::oSender:SetText( "Añadido : " + ( tmpAlbPrvT )->cSerAlb + "/" + AllTrim( Str( ( tmpAlbPrvT )->nNumAlb ) ) + "/" + AllTrim( ( tmpAlbPrvT )->cSufAlb ) + "; " + Dtoc( ( tmpAlbPrvT )->dFecAlb ) + "; " + AllTrim( ( dbfAlbPrvT )->cCodPrv ) + "; " + ( dbfAlbPrvT )->cNomPrv )

               if ( tmpAlbPrvL )->( dbSeek( ( tmpAlbPrvT )->cSerAlb + Str( ( tmpAlbPrvT )->nNumAlb ) + ( tmpAlbPrvT )->CSUFAlb ) )

                  while ( ( tmpAlbPrvL )->cSerAlb + Str( ( tmpAlbPrvL )->nNumAlb ) + ( tmpAlbPrvL )->CSUFAlb ) == ( ( tmpAlbPrvT )->cSerAlb + Str( ( tmpAlbPrvT )->nNumAlb ) + ( tmpAlbPrvT )->CSUFAlb ) .AND. !( tmpAlbPrvL )->( eof() )
                     dbPass( tmpAlbPrvL, dbfAlbPrvL, .T. )
                     ( tmpAlbPrvL )->( dbSkip() )
                  end

               end

            end

            ( tmpAlbPrvT )->( dbSkip() )

         end

         ( dbfAlbPrvT )->( dbCloseArea() )
         ( dbfAlbPrvL )->( dbCloseArea() )
         ( tmpAlbPrvT )->( dbCloseArea() )
         ( tmpAlbPrvL )->( dbCloseArea() )

      end

      ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

      RECOVER USING oError

         ( dbfAlbPrvT )->( dbCloseArea() )
         ( dbfAlbPrvL )->( dbCloseArea() )
         ( tmpAlbPrvT )->( dbCloseArea() )
         ( tmpAlbPrvL )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next

RETURN Self



static FUNCTION TAlbaranesProveedorSenderReciver_validateRecepcion( tmpAlbPrvT, dbfAlbPrvT ) ; local Self AS CLASS TAlbaranesProveedorSenderReciver := QSelf() AS CLASS TAlbaranesProveedorSenderReciver

   ::cErrorRecepcion       := "Pocesando albaran de proveedor número " + ( dbfAlbPrvT )->cSerAlb + "/" + alltrim( Str( ( dbfAlbPrvT )->nNumAlb ) ) + "/" + alltrim( ( dbfAlbPrvT )->cSufAlb ) + " "

   if !( lValidaOperacion( ( tmpAlbPrvT )->dFecAlb, .F. ) )
      ::cErrorRecepcion    += "la fecha " + dtoc( ( tmpAlbPrvT )->dFecAlb ) + " no es valida en esta empresa"
      RETURN .F.
   end

   if !( ( dbfAlbPrvT )->( dbSeek( ( tmpAlbPrvT )->cSerAlb + Str( ( tmpAlbPrvT )->nNumAlb ) + ( tmpAlbPrvT )->cSufAlb ) ) )
      RETURN .T.
   end

   if dtos( ( dbfAlbPrvT )->dFecChg ) + ( dbfAlbPrvT )->cTimChg >= dtos( ( tmpAlbPrvT )->dFecChg ) + ( tmpAlbPrvT )->cTimChg
      ::cErrorRecepcion    += "la fecha en la empresa " + dtoc( ( dbfAlbPrvT )->dFecChg ) + " " + ( dbfAlbPrvT )->cTimChg + " es más reciente que la recepción " + dtoc( ( tmpAlbPrvT )->dFecChg ) + " " + ( tmpAlbPrvT )->cTimChg
      RETURN .F.
   end

RETURN ( .T. )



FUNCTION getNumeroAlbaranProveedorLinea( nView )

RETURN ( substr( ( D():FacturasProveedoresLineas( nView ) )->iNumAlb, 1, 12 ) )



FUNCTION getExtraFieldAlbaranProveedor( cFieldName )

RETURN ( getExtraField( cFieldName, oDetCamposExtra, D():AlbaranesProveedoresId( nView ) ) )



Static FUNCTION ImportarLineasPedidosProveedor( aTmp, aGet, oBrwLin )

   local oLine
   local cCodigoProveedor
   local cNombreProveedor
   local oConversionPedidosProveedores

   cCodigoProveedor                 := aGet[ 6 ]:varGet()
   cNombreProveedor                 := aGet[ 9 ]:varGet()

   if empty( cCodigoProveedor )
      msgStop( "Es necesario codificar un proveedor.", "Importar pedidos" )
      RETURN .T.
   end

   oConversionPedidosProveedores    := TConversionPedidosProveedores():New( nView, oStock )

   if empty( oConversionPedidosProveedores )
      RETURN .F.
   end

   oConversionPedidosProveedores:setCodigoProveedor( cCodigoProveedor )
   oConversionPedidosProveedores:setTitle( "Importando pedidos de " + alltrim( cCodigoProveedor ) + " - " + alltrim( cNombreProveedor ) )

   if oConversionPedidosProveedores:Dialog()
      appendLineasPedidosProveedor( oConversionPedidosProveedores:oDocumentLines:aLines, oBrwLin )
   end

   recalculaTotal( aTmp )

   oBrwLin:refresh()

RETURN .T.



Static FUNCTION appendLineasPedidosProveedor( aLines )

   local oLine

   for each oLine in aLines

      if oLine:isSelectLine()



         aAdd( aAlbaranes, { nil, nil, oLine:getDocumentId(), nil, nil, nil, nil } )

         oLine:setValue( "NumeroPedidoProveedor",  oLine:getDocumentId() )
         oLine:setValue( "NumeroLinea",            nLastNum( dbfTmp ) )
         oLine:setValue( "PosicionImpresion",      nLastNum( dbfTmp, "nPosPrint" ) )

         if dbSeekInOrd( oLine:getValue( "Articulo" ), "Codigo", D():Articulos( nView ) )

            oLine:setValue( "nBnfLin1",      ( D():Articulos( nView ) )->Benef1 )
            oLine:setValue( "nBnfLin2",      ( D():Articulos( nView ) )->Benef2 )
            oLine:setValue( "nBnfLin3",      ( D():Articulos( nView ) )->Benef3 )
            oLine:setValue( "nBnfLin4",      ( D():Articulos( nView ) )->Benef4 )
            oLine:setValue( "nBnfLin5",      ( D():Articulos( nView ) )->Benef5 )
            oLine:setValue( "nBnfLin6",      ( D():Articulos( nView ) )->Benef6 )

            oLine:setValue( "lBnfLin1",      ( D():Articulos( nView ) )->lBnf1 )
            oLine:setValue( "lBnfLin2",      ( D():Articulos( nView ) )->lBnf2 )
            oLine:setValue( "lBnfLin3",      ( D():Articulos( nView ) )->lBnf3 )
            oLine:setValue( "lBnfLin4",      ( D():Articulos( nView ) )->lBnf4 )
            oLine:setValue( "lBnfLin5",      ( D():Articulos( nView ) )->lBnf5 )
            oLine:setValue( "lBnfLin6",      ( D():Articulos( nView ) )->lBnf6 )

            oLine:setValue( "nBnfSbr1",      ( D():Articulos( nView ) )->nBnfSbr1 )
            oLine:setValue( "nBnfSbr2",      ( D():Articulos( nView ) )->nBnfSbr2 )
            oLine:setValue( "nBnfSbr3",      ( D():Articulos( nView ) )->nBnfSbr3 )
            oLine:setValue( "nBnfSbr4",      ( D():Articulos( nView ) )->nBnfSbr4 )
            oLine:setValue( "nBnfSbr5",      ( D():Articulos( nView ) )->nBnfSbr5 )
            oLine:setValue( "nBnfSbr6",      ( D():Articulos( nView ) )->nBnfSbr6 )

            oLine:setValue( "nPvpLin1",      ( D():Articulos( nView ) )->pVenta1 )
            oLine:setValue( "nPvpLin2",      ( D():Articulos( nView ) )->pVenta2 )
            oLine:setValue( "nPvpLin3",      ( D():Articulos( nView ) )->pVenta3 )
            oLine:setValue( "nPvpLin4",      ( D():Articulos( nView ) )->pVenta4 )
            oLine:setValue( "nPvpLin5",      ( D():Articulos( nView ) )->pVenta5 )
            oLine:setValue( "nPvpLin6",      ( D():Articulos( nView ) )->pVenta6 )

            oLine:setValue( "nIvaLin1",      ( D():Articulos( nView ) )->pVtaIva1 )
            oLine:setValue( "nIvaLin2",      ( D():Articulos( nView ) )->pVtaIva2 )
            oLine:setValue( "nIvaLin3",      ( D():Articulos( nView ) )->pVtaIva3 )
            oLine:setValue( "nIvaLin4",      ( D():Articulos( nView ) )->pVtaIva4 )
            oLine:setValue( "nIvaLin5",      ( D():Articulos( nView ) )->pVtaIva5 )
            oLine:setValue( "nIvaLin6",      ( D():Articulos( nView ) )->pVtaIva6 )

         end

         D():appendHashRecordInWorkarea( oLine:hDictionary, "AlbProvL", dbfTmp )

      end

   next

RETURN .T.



Static FUNCTION calculateUnidadesPendientesRecepcion( oLine )

   local nMod
   local nUnidadesRecibidas
   local nUnidadesPendientes

   nUnidadesRecibidas   := oLine:getUnitsReceived()
   nUnidadesPendientes  := oLine:getTotalUnits() - nUnidadesRecibidas

   if lCalCaj() .AND. nUnidadesRecibidas <> 0

      nMod              := mod( nUnidadesPendientes, oLine:getUnits() )
      if nMod == 0 .AND. oLine:getBoxes() <> 0
         oLine:setBoxes( div( nUnidadesPendientes, oLine:getBoxes() ) )
      else
         oLine:setBoxes( 0 )
         oLine:setUnits( nUnidadesPendientes )
      end

   end

RETURN ( oLine )



FUNCTION nombrePrimeraPropiedadAlbaranProveedoresLineas( view )

   If( view == nil, view := nView, ) ;

RETURN ( nombrePropiedad( ( D():AlbaranesProveedoresLineas( view ) )->cCodPr1, ( D():AlbaranesProveedoresLineas( view ) )->cValPr1, view ) )



FUNCTION nombreSegundaPropiedadAlbaranProveedoresLineas( view )

   If( view == nil, view := nView, ) ;

RETURN ( nombrePropiedad( ( D():AlbaranesProveedoresLineas( view ) )->cCodPr2, ( D():AlbaranesProveedoresLineas( view ) )->cValPr2, view ) )



static FUNCTION menuEdtDet( oCodArt, oDlg, nIdLin )

   oDetMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )


      MenuAddItem( "&1. Rotor  ",, .F.,,,, "Rotor16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra", .F.,, {|oMenuItem|( oLinDetCamposExtra:Play( nIdLin ) )},, "GC_FORM_PLUS2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&2. Modificar artículo", "Modificar la ficha del artículo", .F.,, {|oMenuItem|( EdtArticulo( oCodArt:VarGet() ) )},, "gc_object_cube_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&3. Informe de artículo", "Abrir el informe del artículo", .F.,, {|oMenuItem|( if( RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() ), msgStop( "No tiene permiso para ver los precios de costo" ), InfArticulo( oCodArt:VarGet() ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&4. Informe de stock", "Abrir el informe del stock", .F.,, {|oMenuItem|( InfStock( oCodArt:VarGet() ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oDetMenu )

RETURN ( oDetMenu )



FUNCTION hStockBufferAlbPrv( aTmp )

   local hBuffer := {=>}

   do case
      case hb_isArray( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_entrada", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cAlmOrigen" ) ) ] ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
         hset( hBuffer, "lote", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "clote" ) ) ] ) )
         hset( hBuffer, "bultos_articulo", aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nBultos" ) ) ] )
         hset( hBuffer, "cajas_articulo", aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "nCanEnt" ) ) ] )
         hset( hBuffer, "unidades_articulo", nTotNAlbPrv( aTmp ) )
         hset( hBuffer, "fecha", aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "dFecAlb" ) ) ] )
         hset( hBuffer, "hora", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "tFecAlb" ) ) ] ) )

      case hb_isChar( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
         hset( hBuffer, "codigo_almacen_entrada", AllTrim( ( aTmp )->cAlmLin ) )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmOrigen ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
         hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )
         hset( hBuffer, "bultos_articulo", ( aTmp )->nBultos )
         hset( hBuffer, "cajas_articulo", ( aTmp )->nCanEnt )
         hset( hBuffer, "unidades_articulo", nTotNAlbPrv( aTmp ) )
         hset( hBuffer, "fecha", ( aTmp )->dFecAlb )
         hset( hBuffer, "hora",AllTrim( ( aTmp )->tFecAlb ) )

   end

RETURN ( hBuffer )



FUNCTION RollBackAlbPrvFromFacPrv( cNumAlb, nView )

   local nRec     := ( D():AlbaranesProveedoresLineas( nView ) )->( Recno() )
   local nOrdAnt  := ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( "nNumAlb" ) )

   if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( cNumAlb ) )


      while ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb == cNumAlb .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( Eof() )

         ( D():AlbaranesProveedoresLineas( nView ) )->( dbSkip() )

      end

   end

   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():AlbaranesProveedoresLineas( nView ) )->( dbGoTo( nRec ) )

RETURN ( .T. )



FUNCTION RecalculaStockAlbPrvFromFacPrv( cNumAlb, nView )

   local nRec     := ( D():AlbaranesProveedoresLineas( nView ) )->( Recno() )
   local nOrdAnt  := ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( "nNumAlb" ) )

   if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( cNumAlb ) )


      while ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb == cNumAlb .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( Eof() )

         ( D():AlbaranesProveedoresLineas( nView ) )->( dbSkip() )

      end

   end

   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():AlbaranesProveedoresLineas( nView ) )->( dbGoTo( nRec ) )

RETURN ( .T. )



FUNCTION hStockBufferAlbPrvRecibido( aTmp )

   local hBuffer := {=>}

   do case
      case hb_isArray( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
         hset( hBuffer, "lote", AllTrim( aTmp[ ( D():AlbaranesProveedoresLineas( nView ) )->( fieldpos( "clote" ) ) ] ) )
         hset( hBuffer, "pendiente_recibir", nTotNAlbPrv( aTmp ) )

      case hb_isChar( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmLin ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
         hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )
         hset( hBuffer, "pendiente_recibir", nTotNAlbPrv( aTmp ) )

   end

RETURN ( hBuffer )



Function CreateAlbPrvQrCode( cText, cFileName )

   local cFile

   if Empty( cFileName )
      cFile    := AllTrim( ( D():AlbaranesProveedoresLineas( nView ) )->cRef )
   else
      cFile    := AllTrim( cFileName )
   end



   CreateQrCode( hb_strtoutf8( cText ), cFile, 3.5 )

Return .T.



Function cNameAlbPrvQrCode( cFileName )

   local cFile

   if Empty( cFileName )
      cFile    := AllTrim( ( D():AlbaranesProveedoresLineas( nView ) )->cRef )
   else
      cFile    := AllTrim( cFileName )
   end

Return ( FullQrDir() + cFile + ".bmp" )
