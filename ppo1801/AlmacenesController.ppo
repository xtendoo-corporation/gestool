#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\AlmacenesController.prg"
_HB_CLASS AlmacenesController ; function AlmacenesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlmacenesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @AlmacenesController() ) ) ;

   _HB_MEMBER { oDireccionesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDireccionesController"}, .F. )

   _HB_MEMBER { oPaisesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPaisesController"}, .F. )

   _HB_MEMBER { oZonasController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oZonasController"}, .F. )

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @AlmacenesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @AlmacenesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER gettingSelectSentence(); oClass:AddMethod( "gettingSelectSentence", @AlmacenesController_gettingSelectSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlmacenesController ;



static FUNCTION AlmacenesController_New( oSenderController ) ; local Self AS CLASS AlmacenesController := QSelf() AS CLASS AlmacenesController

   ::Super:New( oSenderController )

   ::cTitle                         := "Almacenes"

   ::cName                          := "almacenes"



   ::hImage                         := {  "16" => "gc_warehouse_16", "32" => "gc_warehouse_32", "48" => "gc_warehouse_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLAlmacenesModel():New( self )

   ::oBrowseView                    := AlmacenesBrowseView():New( self )

   ::oDialogView                    := AlmacenesView():New( self )

   ::oValidator                     := AlmacenesValidator():New( self, ::oDialogView )

   ::oDireccionesController         := DireccionesController():New( self )

   ::oZonasController               := ZonasController():New( self )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oRepository                    := AlmacenesRepository():New( self )

   ::oPaisesController              := PaisesController():New( self )

   ::oGetSelector                   := GetSelector():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

   ::oModel:setEvent( "loadedBlankBuffer",            {|| ::oDireccionesController:loadPrincipalBlankBuffer() } )
   ::oModel:setEvent( "insertedBuffer",               {|| ::oDireccionesController:insertBuffer() } )

   ::oModel:setEvent( "loadedCurrentBuffer",          {|| ::oDireccionesController:loadedCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "updatedBuffer",                {|| ::oDireccionesController:updateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "loadedDuplicateCurrentBuffer", {|| ::oDireccionesController:loadedDuplicateCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "loadedDuplicateBuffer",        {|| ::oDireccionesController:loadedDuplicateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "deletedSelection",             {|| ::oDireccionesController:deleteBuffer( ::getUuidFromRecno( ::oBrowseView:getBrowse():aSelected ) ) } )

   ::oModel:setEvent( "gettingSelectSentence",        {|| ::gettingSelectSentence() } )

RETURN ( Self )



static FUNCTION AlmacenesController_End( ) ; local Self AS CLASS AlmacenesController := QSelf() AS CLASS AlmacenesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oDireccionesController:End()

   ::oZonasController:End()

   ::oRepository:End()

   ::oPaisesController:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION AlmacenesController_gettingSelectSentence( ) ; local Self AS CLASS AlmacenesController := QSelf() AS CLASS AlmacenesController

   ::oModel:setGeneralWhere( "almacen_uuid = ''" )

RETURN ( Self )








_HB_CLASS AlmacenesBrowseView ; function AlmacenesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlmacenesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @AlmacenesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @AlmacenesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlmacenesBrowseView ;



static FUNCTION AlmacenesBrowseView_addColumns( ) ; local Self AS CLASS AlmacenesBrowseView := QSelf() AS CLASS AlmacenesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 60
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS AlmacenesView ; function AlmacenesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlmacenesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @AlmacenesView() ) ) ;

   _HB_MEMBER { oGetPais } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetPais"}, .F. )
   _HB_MEMBER { oGetProvincia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetProvincia"}, .F. )
   _HB_MEMBER { oGetPoblacion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetPoblacion"}, .F. )
   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @AlmacenesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activating(); oClass:AddMethod( "Activating", @AlmacenesView_Activating(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDireccionesController(); oClass:AddInline( "getDireccionesController", {|Self | ( ( Self ) ), ( ::oController:oDireccionesController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlmacenesView ;



static FUNCTION AlmacenesView_Activating( ) ; local Self AS CLASS AlmacenesView := QSelf() AS CLASS AlmacenesView

   if ::oController:isAppendOrDuplicateMode()
      ::oController:oModel:hBuffer()
   end

RETURN ( self )







static FUNCTION AlmacenesView_Activate( ) ; local Self AS CLASS AlmacenesView := QSelf() AS CLASS AlmacenesView

   local oBtnEdit
   local oBtnAppend
   local oBtnDelete
   local oSayCamposExtra



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "almacén", "ALMACEN_SQL",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )







   ::oSayCamposExtra := TSay():ReDefine( 160, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }

   ::oController:oDireccionesController:oDialogView:ExternalRedefine( ::oDialog )







   oBtnAppend := TButton():ReDefine( 120,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnAppend:bAction   := {|| ::oController:oZonasController:Append() }





   oBtnEdit := TButton():ReDefine( 130,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnEdit:bAction   := {|| ::oController:oZonasController:Edit() }





   oBtnDelete := TButton():ReDefine( 140,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnDelete:bAction   := {|| ::oController:oZonasController:Delete() }

   ::oController:oZonasController:Activate( 150, ::oDialog )







   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::oController:oDireccionesController:oDialogView:StartDialog() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )








_HB_CLASS AlmacenesValidator ; function AlmacenesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlmacenesValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @AlmacenesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @AlmacenesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUniqueSenctence( uValue); oClass:AddMethod( "getUniqueSenctence", @AlmacenesValidator_getUniqueSenctence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlmacenesValidator ;



static FUNCTION AlmacenesValidator_getValidators( ) ; local Self AS CLASS AlmacenesValidator := QSelf() AS CLASS AlmacenesValidator




   ::hValidators  := {  "nombre" =>    {  "required"     => "El nombre es un dato requerido", "unique"       => "El nombre introducido ya existe" }, "codigo" =>    {  "required"     => "El código es un dato requerido" , "unique"       => "EL código introducido ya existe" } }
RETURN ( ::hValidators )



static FUNCTION AlmacenesValidator_getUniqueSenctence( uValue ) ; local Self AS CLASS AlmacenesValidator := QSelf() AS CLASS AlmacenesValidator

   local cSQLSentence   := ::Super:getUniqueSenctence( uValue )

   if empty( ::oController ) .OR. empty( ::oController:getSenderController() )
      cSQLSentence      +=    " AND almacen_uuid = ''"
   else
      cSQLSentence      +=    " AND almacen_uuid = " + quoted( ::oController:getSenderController():getUuid() )
   end

RETURN ( cSQLSentence )









_HB_CLASS SQLAlmacenesModel ; function SQLAlmacenesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLAlmacenesModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLAlmacenesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "almacenes", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLAlmacenesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAlmacenUuidAttribute( value); oClass:AddMethod( "getAlmacenUuidAttribute", @SQLAlmacenesModel_getAlmacenUuidAttribute(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLAlmacenesModel ;



static FUNCTION SQLAlmacenesModel_getColumns( ) ; local Self AS CLASS SQLAlmacenesModel := QSelf() AS CLASS SQLAlmacenesModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )

   ::getEmpresaColumns()


   hset( ::hColumns, "almacen_uuid",      {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 )"                            , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )

RETURN ( ::hColumns )



static FUNCTION SQLAlmacenesModel_getAlmacenUuidAttribute( value ) ; local Self AS CLASS SQLAlmacenesModel := QSelf() AS CLASS SQLAlmacenesModel

   if empty( ::oController )
      RETURN ( value )
   end

   if empty( ::oController:getSenderController() )
      RETURN ( value )
   end

RETURN ( ::oController:getSenderController():getUuid() )







_HB_CLASS AlmacenesRepository ; function AlmacenesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlmacenesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @AlmacenesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLAlmacenesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombres(); oClass:AddMethod( "getNombres", @AlmacenesRepository_getNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, Uuid | ( ( Self ) ), ( ::getColumnWhereUuid( Uuid, "nombre" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidWhereNombre(); oClass:AddInline( "getUuidWhereNombre", {|Self, cNombre | ( ( Self ) ), ( ::getUuidWhereColumn( cNombre, "nombre", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlmacenesRepository ;



static FUNCTION AlmacenesRepository_getNombres( ) ; local Self AS CLASS AlmacenesRepository := QSelf() AS CLASS AlmacenesRepository

   local aResult
   local aNombres

   aResult           := {}
   aNombres          := ::getDatabase():selectFetchHash( "SELECT nombre FROM " + ::getTableName() )

   if !empty( aNombres )
      aeval( aNombres, {| h | aadd( aResult, alltrim( hGet( h, "nombre" ) ) ) } )
   end

RETURN ( aResult )
