#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\AlmacenesModel.prg"
_HB_CLASS AlmacenesModel ; function AlmacenesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AlmacenesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @AlmacenesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Almacen" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER exist(); oClass:AddMethod( "exist", @AlmacenesModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aAlmacenes(); oClass:AddMethod( "aAlmacenes", @AlmacenesModel_aAlmacenes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, idAlmacen | ( ( Self ) ), ( ::getField( "cNomAlm", "cCodAlm", idAlmacen ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aNombres(); oClass:AddMethod( "aNombres", @AlmacenesModel_aNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER aNombresSeleccionables(); oClass:AddInline( "aNombresSeleccionables", {|Self | ( ( Self ) ), ( hb_AIns(::aNombres(),1,"", .T.) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidFromNombre(); oClass:AddInline( "getUuidFromNombre", {|Self, cNombre | ( ( Self ) ), ( ::getField( "Uuid", "cNomAlm", cNombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromUuid(); oClass:AddInline( "getNombreFromUuid", {|Self, cUuid | ( ( Self ) ), ( ::getField( "cNomAlm", "Uuid", cUuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidFromNombreAndEmpresa( cNombre, cCodEmpresa); oClass:AddMethod( "getUuidFromNombreAndEmpresa", @AlmacenesModel_getUuidFromNombreAndEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromUuidAndEmpresa( cUuid, cCodEmpresa); oClass:AddMethod( "getNombreFromUuidAndEmpresa", @AlmacenesModel_getNombreFromUuidAndEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoFromNombre(); oClass:AddInline( "getCodigoFromNombre", {|Self, cNombre | ( ( Self ) ), ( ::getField( "cCodAlm", "cNomAlm", cNombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromCodigo(); oClass:AddInline( "getNombreFromCodigo", {|Self, cCodigo | ( ( Self ) ), ( ::getField( "cNomAlm", "cCodAlm", cCodigo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aNombresFromEmpresa( cCodEmpresa); oClass:AddMethod( "aNombresFromEmpresa", @AlmacenesModel_aNombresFromEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AlmacenesModel ;



static FUNCTION AlmacenesModel_exist( cCodigoAlmacen ) ; local Self AS CLASS AlmacenesModel := QSelf() AS CLASS AlmacenesModel

   local cStm


   local cSql  := "SELECT cNomAlm "                               +  "FROM " + ::getTableName() + " "             +  "WHERE cCodAlm = " + quoted( cCodigoAlmacen )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION AlmacenesModel_aNombres( ) ; local Self AS CLASS AlmacenesModel := QSelf() AS CLASS AlmacenesModel

   local cStm
   local aAlm  := {}
   local cSql  := "SELECT * FROM " + ::getTableName()

   if !::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( aAlm )
   endif

   while !( cStm )->( eof() )
      aadd( aAlm, alltrim( ( cStm )->cNomAlm ) )
      ( cStm )->( dbskip() )
   end

RETURN ( aAlm )



static FUNCTION AlmacenesModel_aAlmacenes( ) ; local Self AS CLASS AlmacenesModel := QSelf() AS CLASS AlmacenesModel

   local cStm
   local aAlm  := {}
   local cSql  := "SELECT * FROM " + ::getTableName()

   if !::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( aAlm )
   endif

   while !( cStm )->( eof() )
      aadd( aAlm, { "cCodAlm" => ( cStm )->cCodAlm, "cNomAlm" => ( cStm )->cNomAlm } )
      ( cStm )->( dbskip() )
   end

RETURN ( aAlm )



static FUNCTION AlmacenesModel_aNombresFromEmpresa( cCodEmpresa ) ; local Self AS CLASS AlmacenesModel := QSelf() AS CLASS AlmacenesModel

   local cStm
   local aAlm           := {}
   local cSql

   If( cCodEmpresa == nil, cCodEmpresa := cCodEmp(), ) ;

   cSql                 := "SELECT * FROM " + ::getEmpresaTableNameFromEmpresa( "Almacen", cCodEmpresa )

   if !::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( aAlm )
   endif

   while !( cStm )->( eof() )
      aadd( aAlm, alltrim( ( cStm )->cNomAlm ) )
      ( cStm )->( dbskip() )
   end

RETURN ( aAlm )



static FUNCTION AlmacenesModel_getUuidFromNombreAndEmpresa( cNombre, cCodEmpresa ) ; local Self AS CLASS AlmacenesModel := QSelf() AS CLASS AlmacenesModel

   local cSql
   local cStm

   cSql                 := "SELECT Uuid FROM "
   cSql                 += ::getEmpresaTableNameFromEmpresa( "Almacen", cCodEmpresa ) + space( 1 )
   cSql                 += "WHERE cNomAlm=" + quoted( cNombre )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( fieldpos( "Uuid" ) ) ) )
   endif

RETURN ( space( 1 ) )



static FUNCTION AlmacenesModel_getNombreFromUuidAndEmpresa( cUuid, cCodEmpresa ) ; local Self AS CLASS AlmacenesModel := QSelf() AS CLASS AlmacenesModel

   local cSql
   local cStm

   cSql                 := "SELECT cNomAlm FROM "
   cSql                 += ::getEmpresaTableNameFromEmpresa( "Almacen", cCodEmpresa ) + space( 1 )
   cSql                 += "WHERE Uuid=" + quoted( cUuid )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( fieldpos( "cNomAlm" ) ) ) )
   endif

RETURN ( space( 1 ) )
