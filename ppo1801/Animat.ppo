#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\.\Prg\Animat.prg"
_HB_CLASS TAnimat ; function TAnimat ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAnimat", iif( .T., { @TControl() }, { @HBObject() } ), @TAnimat() ) ) ;

      _HB_MEMBER { acBitmaps } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"acBitmaps"}, .F. )
      _HB_MEMBER { aBitmaps } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBitmaps"}, .F. )
      _HB_MEMBER { lGo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lGo"}, .F. )
      _HB_MEMBER { oTimer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTimer"}, .F. )
      _HB_MEMBER { nSpeed } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nSpeed"}, .F. )
      _HB_MEMBER { nActual } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nActual"}, .F. )
      _HB_MEMBER { nHBmp, nWBmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHBmp", "nWBmp"}, .F. )

      _HB_MEMBER { lWorking } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lWorking"}, .F. )
      _HB_MEMBER { lPainted } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lPainted"}, .F. )
      _HB_MEMBER { lFromTimer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFromTimer"}, .F. )

      _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

      _HB_MEMBER Redefine( oWnd, nId, acBitmaps, nSpeed) AS CLASS TAnimat; oClass:AddMethod( "Redefine", @TAnimat_Redefine(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Go(); oClass:AddInline( "Go", {|Self | ( ( Self ) ), ::oTimer:Activate() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Stop(); oClass:AddInline( "Stop", {|Self | ( ( Self ) ), ::oTimer:End() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



      _HB_MEMBER Destroy(); oClass:AddInline( "Destroy", {|Self | ( ( Self ) ), aeval( ::aBitmaps, {|x| DeleteObject( x ) } ) , ::oTimer:End()                          , ::Super:Destroy() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Initiate(); oClass:AddInline( "Initiate", {|Self, hDlg | ( ( Self ) ), ::Super:Initiate( hDlg ), ::Default() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Init(); oClass:AddInline( "Init", {|Self, hDlg | ( ( Self ) ), ::Super:Init    ( hDlg ), ::Default() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Display(); oClass:AddInline( "Display", {|Self | ( ( Self ) ), ::BeginPaint(),::Paint(),::EndPaint() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Paint( lFromTimer); oClass:AddMethod( "Paint", @TAnimat_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER LoadBmps( acBitmaps); oClass:AddMethod( "LoadBmps", @TAnimat_LoadBmps(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Default(); oClass:AddMethod( "Default", @TAnimat_Default(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAnimat ;


 static FUNCTION TAnimat_Redefine( oWnd, nId, acBitmaps, nSpeed ) ; local Self AS CLASS TAnimat := QSelf() AS CLASS TAnimat


 If( nSpeed == nil, nSpeed := 4, ) ;

 ::oWnd       := oWnd
 ::nId        := nId
 ::acBitmaps  := acBitmaps
 ::aBitmaps   := {}
 ::nSpeed     := nSpeed
 ::lWorking   := .F.
 ::lPainted   := .F.
 ::lFromTimer := .F.
 ::nActual    := 0

 ::Register( nOR( 1, 2 ) )

 if oWnd <> nil
    oWnd:DefControl( Self )
 endif

 if ::oBrush <> nil
    ::oBrush:End()
 endif

 ::oBrush := TBrush():New("NUL")

return ( Self )


 static FUNCTION TAnimat_Default( ) ; local Self AS CLASS TAnimat := QSelf() AS CLASS TAnimat


::oTimer := TTimer():New( ::nSpeed * 100, {||( ::lFromTimer := .T.,::Refresh())}, Self )

::LoadBmps( ::acBitmaps )

::SetSize( ::nWBmp, ::nHBmp, .T. )

return ( Self )


 static FUNCTION TAnimat_Paint( ) ; local Self AS CLASS TAnimat := QSelf() AS CLASS TAnimat


local nLeft
local nW1
local nW2
local hDCMem
local hOldBmp

if !::lPainted
   ::lPainted := .T.
   ::oTimer:Activate()
   return nil
endif

::GetDC()

if  ::lFromTimer  .AND. !::lWorking

   ::lWorking := .T.

   if ::nActual > 10
      ::nActual := 0
   endif

   nLeft := ( ::nWBmp / 10 ) * ::nActual

   nW1   := nLeft
   nW2   := ::nWBmp - nLeft

   ::nActual++

endif

   hDCMem   = CompatDC( ::hDC )
   hOldBmp  = SelectObject( hDCMem, ::aBitMaps[1] )

   StretchBlt( ::hDC,   nLeft,  0, nW2, ::nHBmp, hDCMem, 0,   0, nW2, ::nHBmp, 13369376 )
   StretchBlt( ::hDC,       0,  0, nW1, ::nHBmp, hDCMem, nW2, 0, nW1, ::nHBmp, 13369376 )

   SelectObject( hDCMem, hOldBmp )
   DeleteDC( hDCMem )



   ::ReleaseDC()

   ::lFromTimer := .F.
   ::lWorking   := .F.

   SysRefresh()

   if ::bPainted <> nil
      eval( ::bPainted, self )
   endif

return ( Self )


  static FUNCTION TAnimat_LoadBmps( acBitmaps ) ; local Self AS CLASS TAnimat := QSelf() AS CLASS TAnimat

local n

::GetDC()

for n := 1 to len( ::acBitmaps )

    if "." $ ::acBitmaps[ n ]
       aadd( ::aBitmaps, ReadBitmap( ::hDC, ::acBitmaps[ n ] ) )
    else
       aadd( ::aBitmaps, LoadBitmap( GetResources(), ::acBitmaps[ n ] ) )
    endif

next

::nHBmp := nBmpHeight( ::aBitmaps[ 1 ] )
::nWBmp := nBmpWidth ( ::aBitmaps[ 1 ] )

::ReleaseDC()

return ( Self )
