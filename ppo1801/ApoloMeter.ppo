#line 91 "\fwh1801\include\Fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\.\Prg\ApoloMeter.prg"
_HB_CLASS TApoloMeter ; function TApoloMeter ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TApoloMeter", iif( .T., { @TMeter() }, { @HBObject() } ), @TApoloMeter() ) ) ;

   _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

   _HB_MEMBER { nCurrent } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCurrent"}, .F. )



   _HB_MEMBER AutoInc(); oClass:AddInline( "AutoInc", {|Self | ( ( Self ) ), ::nCurrent++, if( ( ::nTotal < 100 ) .OR. ( Mod( ::nCurrent, Int( ::nTotal / 100 ) ) == 0 ), ::Set( ::nCurrent ), nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER SetTotal(); oClass:AddInline( "SetTotal", {|Self, nTotal | ( ( Self ) ), ::nTotal      := nTotal , ::nCurrent    := 0 , ::Refresh() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TApoloMeter ;