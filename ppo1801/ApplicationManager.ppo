#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\Services\ApplicationManager.prg"
static oApplication



_HB_CLASS ApplicationManager ; function ApplicationManager ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ApplicationManager", iif( .F., { }, { @HBObject() } ), @ApplicationManager() ) ) ;

   _HB_MEMBER { uuidDelegacion } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uuidDelegacion"}, .F. )
   _HB_MEMBER { codigoDelegacion } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"codigoDelegacion"}, .F. )

   _HB_MEMBER { uuidCaja } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uuidCaja"}, .F. )
   _HB_MEMBER { codigoCaja } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"codigoCaja"}, .F. )

   _HB_MEMBER { uuidAlmacen } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uuidAlmacen"}, .F. )
   _HB_MEMBER { codigoAlmacen } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"codigoAlmacen"}, .F. )

   _HB_MEMBER { oCajon } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCajon"}, .F. )
   _HB_MEMBER { cCajon } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCajon"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ApplicationManager_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setDelegacion( uuidDelegacion, codigoDelegacion); oClass:AddMethod( "setDelegacion", @ApplicationManager_setDelegacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDelegacion(); oClass:AddMethod( "getDelegacion", @ApplicationManager_getDelegacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCaja( uuidCaja, codigoCaja); oClass:AddMethod( "setCaja", @ApplicationManager_setCaja(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCaja(); oClass:AddMethod( "getCaja", @ApplicationManager_getCaja(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setAlmacen( uuidAlmacen, codigoAlmacen); oClass:AddMethod( "setAlmacen", @ApplicationManager_setAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getAlmacen(); oClass:AddMethod( "getAlmacen", @ApplicationManager_getAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCajon(); oClass:AddMethod( "setCajon", @ApplicationManager_setCajon(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER openDirectCajon(); oClass:AddInline( "openDirectCajon", {|Self | ( ( Self ) ), ( if( !Empty( ::oCajon ), ::oCajon:open(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ApplicationManager ;



static FUNCTION ApplicationManager_New( ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   ::getDelegacion()

   ::getCaja()

   ::getAlmacen()

   ::setCajon()

RETURN ( self )



static FUNCTION ApplicationManager_setCajon( ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   ::cCajon      := CajasModel():getCajonUuidFromCodigo( ::codigoCaja )

   if !Empty( ::cCajon )


      ::oCajon       := TCajon():New(  CajonesModel():getField( "cCodAper", "cCodCaj", ::cCajon ), CajonesModel():getField( "cPrinter", "cCodCaj", ::cCajon ) )
   end

RETURN ( self )



static FUNCTION ApplicationManager_setDelegacion( uuidDelegacion, codigoDelegacion ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   ::uuidDelegacion        := if( hb_isnil( uuidDelegacion ), "", uuidDelegacion )
   ::codigoDelegacion      := if( hb_isnil( codigoDelegacion ), "", codigoDelegacion )

RETURN ( self )



static FUNCTION ApplicationManager_getDelegacion( ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   local delegacion

   ::setDelegacion()

   delegacion              := UsuariosModel():getUsuarioDelegacionExclusiva( Auth():Uuid() )

   if !empty( delegacion )
      ::setDelegacion( DelegacionesModel():getField( "cCodDlg", "Uuid", delegacion ), delegacion )
      RETURN ( self )
   end

   delegacion              := uFieldEmpresa( "cSufDoc" )

   if !empty( delegacion )
      ::setDelegacion( DelegacionesModel():getField( "Uuid", "cCodDlg", delegacion ), delegacion )
      RETURN ( self )
   end

   if empty( delegacion )
      ::setDelegacion( DelegacionesModel():getField( "Uuid", "cCodDlg", "00" ), "00" )
      RETURN ( self )
   end

RETURN ( self )



static FUNCTION ApplicationManager_setCaja( uuidCaja, codigoCaja ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   ::uuidCaja              := if( hb_isnil( uuidCaja ), "", uuidCaja )
   ::codigoCaja            := if( hb_isnil( codigoCaja ), "", codigoCaja )

RETURN ( self )



static FUNCTION ApplicationManager_getCaja( ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   local caja

   ::setCaja()

   caja                    := UsuariosModel():getUsuarioCajaExclusiva( Auth():Uuid() )

   if !empty( caja )
      ::setCaja( CajasModel():getField( "cCodCaj", "Uuid", caja ), caja )
      RETURN ( self )
   end

   caja                    := uFieldEmpresa( "cDefCaj" )

   if !empty( caja )
      ::setCaja( CajasModel():getField( "Uuid", "cCodCaj", caja ), caja )
      RETURN ( self )
   end

   if empty( caja )
      ::setCaja( CajasModel():getField( "Uuid", "cCodCaj", "000" ), "000" )
      RETURN ( self )
   end

RETURN ( self )



static FUNCTION ApplicationManager_setAlmacen( uuidAlmacen, codigoAlmacen ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   ::uuidAlmacen           := if( hb_isnil( uuidAlmacen ), "", uuidAlmacen )
   ::codigoAlmacen         := if( hb_isnil( codigoAlmacen ), "", codigoAlmacen )

RETURN ( self )



static FUNCTION ApplicationManager_getAlmacen( ) ; local Self AS CLASS ApplicationManager := QSelf() AS CLASS ApplicationManager

   local almacen

   ::setAlmacen()

   almacen                 := UsuariosModel():getUsuarioAlmacenExclusivo( Auth():Uuid() )

   if !empty( almacen )
      ::setAlmacen( AlmacenesModel():getField( "cCodAlm", "Uuid", almacen ), almacen )
      RETURN ( self )
   end

   almacen                 := uFieldEmpresa( "cDefAlm" )

   if !empty( almacen )
      ::setAlmacen( AlmacenesModel():getField( "cCodAlm", "Uuid", almacen ), almacen )
      RETURN ( self )
   end

   if empty( almacen )
      ::setAlmacen( AlmacenesModel():getField( "cCodAlm", "Uuid", "000" ), "000" )
      RETURN ( self )
   end

RETURN ( self )








FUNCTION Application()

   if empty( oApplication )
      oApplication   := ApplicationManager():New()
   end

RETURN ( oApplication )



FUNCTION ApplicationLoad()

   if !empty( oApplication )
      oApplication   := nil
   end

RETURN ( Application() )
