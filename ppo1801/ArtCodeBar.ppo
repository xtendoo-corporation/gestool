#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 13 ".\.\Prg\ArtCodeBar.prg"
static oWndBrw
static dbfArticulo
static dbfCodebar

static filTmpCodebar
static dbfTmpCodebar

static lOpenFiles := .F.

static bEdit      := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode          | EdtRec( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode ) }
static bEdtCod    := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtCodebar( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }








STATIC FUNCTION OpenFiles()

   local oError
   local oBlock

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de artículos" )
      Return ( .F. )
   end

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   lOpenFiles  := .T.

   RECOVER USING oError

   msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )
   CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles( lDestroy )

    If( lDestroy == nil, lDestroy := .F., ) ;

   if lDestroy
      oWndBrw        := nil
   end

   if dbfArticulo <> nil
      ( dbfArticulo )->( dbCloseArea() )
   end

   if dbfCodebar <> nil
      ( dbfCodebar )->( dbCloseArea() )
   end

   dbfArticulo       := nil
   dbfCodebar        := nil

   lOpenFiles  := .F.

RETURN ( .T. )



FUNCTION ArtCodebar( oMenuItem, oWnd )

   local nLevel

   If( oMenuItem == nil, oMenuItem := "01024", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

   if oWndBrw == NIL





      nLevel            := Auth():Level( oMenuItem )

      if nAnd( nLevel, 1 ) == 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      if !OpenFiles()
         return nil
      end





      AddMnuNext( "Codigos de barras", ProcName() )










      oWndBrw := TShell():New( 0, 0, 22, 80, "Codigos de barras",, oWnd,,, .F.,,, ( dbfArticulo ),,,,, {"Código", "Nombre"},, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfArticulo ) )},,, nil, nLevel, "gc_portable_barcode_scanner_16",,,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Codigo"
         :bEditValue       := {|| ( dbfArticulo )->Codigo }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Nombre"
         :bEditValue       := {|| ( dbfArticulo )->Nombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      oWndBrw:CreateXFromCode()

      oWndBrw:cHtmlHelp    := "Articulos"





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()





      oWndBrw:NewAt( "BUS",,, {||( SearchArtCodeBar( oWndBrw ) )}, "Busca(r)...", "R",,,,, .F. )






        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )








      oWndBrw:NewAt( "IMP",,, {||( TInfChgCbr():New( "Listado de últimos códigos de barra modificados" ):Play() )}, "Lis(t)ado", "T",,, 32,, .F. )







      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles(.T.) )},, oWndBrw:bLButtonUp, .F. )

    ELSE

        oWndBrw:setFocus()

    end

RETURN ( oWndBrw )



STATIC FUNCTION EdtRec( aTmp, aGet, dbfArticulo, oWndBrw, bWhen, bValid, nMode )

    local oDlg
   local oFnt
   local oSay
   local oBrw
   local aBar        := { "Ean13", "Code39", "Code128" }
   local aBtn        := Array( 3 )
   local aNom        := Array( 3 )
   local cSay        := ""


   BeginTrans( aTmp, nMode )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "códigos de barras", "ArtCodebar",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






   aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





   aGet[( dbfArticulo )->( fieldpos( "NOMBRE" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NOMBRE" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NOMBRE" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )



   aNom[1] := TSay():ReDefine( 410,, oDlg,,,, .F.,, .F., .F., )





   aGet[( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ] := TGetHlp():ReDefine( 411, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ]:= u ) }, oDlg,,, {||    ( drwBar( aGet[ ( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ], aGet[( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ]:nAt, oSay, oFnt ) )},,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



   aNom[2] := TSay():ReDefine( 420,, oDlg,,,, .F.,, .F., .F., )






   aGet[( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ] := TComboBox():ReDefine( 421, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ]:= u ) }, aBar, oDlg,, {||    ( drwBar( aGet[( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ], aGet[( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ]:nAt, oSay ) )}, {|Self|( drwBar( aGet[( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ], aGet[( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ]:nAt, oSay ) )},,,, .F.,,,,,,, 'aGet[( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ]',,,,,,, )



   aNom[3] := TSay():ReDefine( 430,, oDlg,,,, .F.,, .F., .F., )




   oSay := TSay():ReDefine( 431, {|| cSay}, oDlg,,,, .F., oFnt, .F., .F., )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfTmpCodebar
      oBrw:nMarqueeStyle   := 5
      oBrw:lHScroll        := .F.

      with object ( oBrw:AddCol() )
         :cHeader          := ""
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTmpCodebar )->lDefBar }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código de barras"
         :bEditValue       := {|| ( dbfTmpCodebar )->cCodBar }
         :nWidth           := 240
      end

      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }
      oBrw:bLDblClick      := {|| WinEdtRec( oBrw, bEdtCod, dbfTmpCodebar, , , aTmp ) }

      oBrw:CreateFromResource( 330 )





   aBtn[ 1 ] := TButton():ReDefine( 300, {||( WinAppRec( oBrw, bEdtCod, dbfTmpCodebar, , , aTmp ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtn[ 2 ] := TButton():ReDefine( 310, {||( WinEdtRec( oBrw, bEdtCod, dbfTmpCodebar, , , aTmp ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtn[ 3 ] := TButton():ReDefine( 320, {||( dbDelRec( oBrw, dbfTmpCodebar ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )









   TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oDlg, nMode ) )}, oDlg,,, .F.,,,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 113, {|| WinAppRec( oBrw, bEdtCod, dbfTmpCodebar, , , aTmp ) } )
      oDlg:AddFastKey( 114, {|| WinEdtRec( oBrw, bEdtCod, dbfTmpCodebar, , , aTmp ) } )
      oDlg:AddFastKey( 115, {|| dbDelRec( oBrw, dbfTmpCodebar ) } )
      oDlg:AddFastKey( 116, {|| EndTrans( aTmp, aGet, oDlg, nMode ) } )
   end

   oDlg:bStart := {|| StartDlg( aGet, oSay, aNom, aBtn, oBrw ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   KillTrans()

Return ( oDlg:nResult == 1 )



Static Function StartDlg( aGet, oSay, aNom, aBtn, oBrw )

   if lMultipleCodeBar()

      aBtn[1]:Show()
      aBtn[2]:Show()
      aBtn[3]:Show()
      aGet[ ( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ]:Hide()
      aNom[1]:Hide()
      aNom[2]:Hide()
      aNom[3]:Hide()

      oBrw:Show()
      oSay:Hide()

   else

      aBtn[1]:Hide()
      aBtn[2]:Hide()
      aBtn[3]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "CODEBAR" ) ) ]:Show()
      aGet[ ( dbfArticulo )->( fieldpos( "NTIPBAR" ) ) ]:Show()
      aNom[1]:Show()
      aNom[2]:Show()
      aNom[3]:Show()

      oBrw:Hide()
      oSay:Show()

   end

   oBrw:SetFocus()

Return ( .T. )



Static Function BeginTrans( aTmp, nMode )

   local oBlock
   local oError
   local cCodArt     := aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]

   filTmpCodebar     := cGetNewFileName( cPatTmp() + "ArtCodebar" )





   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbCreate( filTmpCodebar, aItmBar(), cLocalDriver() )

   dbUseArea( .T., cLocalDriver(), filTmpCodebar, cCheckArea( "CodBar", @dbfTmpCodebar ), .F. )

   ( dbfTmpCodebar )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
   ( dbfTmpCodebar )->( OrdCreate( filTmpCodebar, "cCodBar", "cCodBar", {|| Field->cCodBar } ) )

   if ( dbfCodebar )->( dbSeek( cCodArt ) )

      while ( dbfCodebar )->cCodArt == cCodArt .AND. !( dbfCodebar )->( eof() )
         dbPass( dbfCodebar, dbfTmpCodebar, .T. )
         ( dbfCodebar )->( dbSkip() )
      end

      ( dbfTmpCodebar )->( dbGoTop() )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return Nil



Static Function EndTrans( aTmp, aGet, oDlg, nMode )

   local cCod     := aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]
   local cCodArt





   while ( dbfCodebar )->( dbSeek( cCod ) ) .AND. !( dbfCodebar )->( eof() )
      if dbLock( dbfCodebar )
         ( dbfCodebar )->( dbDelete() )
         ( dbfCodebar )->( dbUnLock() )
      end
   end





   ( dbfTmpCodebar )->( OrdSetFocus( 0 ) )
   ( dbfTmpCodebar )->( dbGoTop() )
   cCodArt        := ( dbfTmpCodebar )->cCodBar
   while !( dbfTmpCodebar )->( eof() )
      ( dbfTmpCodebar )->cCodArt := cCod
      if ( dbfTmpCodebar )->lDefBar
         cCodArt                 := ( dbfTmpCodebar )->cCodBar
      end
       dbPass( dbfTmpCodebar, dbfCodebar, .T. )
      ( dbfTmpCodebar )->( dbSkip() )
   end





   aTmp[ ( dbfArticulo )->( fieldpos( "dFecChg" ) ) ]    := GetSysDate()
   aTmp[ ( dbfArticulo )->( fieldpos( "LastChg" ) ) ]    := GetSysDate()

   WinGather( aTmp, aGet, dbfArticulo, nil, nMode )

Return ( oDlg:end( 1 ) )



Static Function KillTrans()

   if !Empty( dbfTmpCodebar ) .AND. ( dbfTmpCodebar )->( Used() )
      ( dbfTmpCodebar )->( dbCloseArea() )
   end

   dbfTmpCodebar  := nil

   dbfErase( filTmpCodebar )

Return Nil






STATIC FUNCTION EdtCodebar( aTmp, aGet, dbfTmpCodebar, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oFnt
   local oSayCodebar
   local cSayCodebar    := ""
   local cOldCodebar    := aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "codigos de barras", "ArtCode",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




   aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



   TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ], aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]:= u ) }, oDlg,,,,,,, .F.,, .F. )




   TButton():ReDefine( 1, {||( SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode ) )}, oDlg,,, .F.,,,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( EvalGet( aGet ) )}, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode )

   local nRec

   if dbSeekCodebar( aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], dbfTmpCodebar, cOldCodebar, .T. )
      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SetFocus()
      return nil
   end

   if aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]

      nRec     := ( dbfTmpCodebar )->( Recno() )

      ( dbfTmpCodebar )->( dbGoTop() )
      while !( dbfTmpCodebar )->( eof() )
         ( dbfTmpCodebar )->lDefBar  := .F.
         ( dbfTmpCodebar )->( dbSkip() )
      end

      ( dbfTmpCodebar )->( dbGoTo( nRec ) )

   end

   WinGather( aTmp, aGet, dbfTmpCodebar, oBrw, nMode )

   oDlg:end( 1 )

Return nil




Static Function SearchArtCodeBar( oWndBrw )

    local oDlg
   local oGetBar
   local cGetBar  := Space( 18 )

   oDlg = TDialog():New(,,,,, "SeaCodebar",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



      oGetBar := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cGetBar, cGetBar:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 500, {||( SeekArtCodeBar( cGetBar, dbfCodeBar, oWndBrw ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN NIL



Static Function SeekArtCodeBar( cGetBar, dbfCodeBar, oWndBrw )

   local nOrd
   local nCod  := ( dbfCodeBar )->( OrdSetFocus( "cCodBar" ) )

   if ( dbfCodeBar )->( dbSeek( cGetBar ) )
      nOrd  := ( dbfArticulo )->( OrdSetFocus( "Codigo" ) )
      if !( dbfArticulo )->( dbSeek( ( dbfCodeBar )->cCodArt ) )
         msgStop( "Artículo " + Rtrim( ( dbfCodeBar )->cCodArt ) + " no encontrado." )
      else
         oWndBrw:Refresh()
      end
      ( dbfArticulo )->( OrdSetFocus( nOrd ) )
   else
      msgStop( "Código de barras " + Rtrim( cGetBar ) + " no encontrado." )
   end
   ( dbfCodeBar )->( OrdSetFocus( nCod ) )

RETURN NIL



Function EdtArtCodeBar( cCodArt, oBrw )

   local nLevel   := Auth():Level( "01024" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if !OpenFiles()
      CloseFiles()
      return nil
   end

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      WinEdtRec( nil, bEdit, dbfArticulo )
   else
      MsgStop( "No se encuentra artículo" )
   end

   if oBrw <> nil
      oBrw:Refresh()
   end

   CloseFiles()

Return .T.









Function aItmBar()

   local aBase := {}

   aAdd( aBase, { "cCodArt",  "C", 18, 0, "Código de artículo"                   , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodBar",  "C", 20, 0, "Código de barras"                     , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nTipBar",  "N",  2, 0, "Tipo de código de barras"             , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lDefBar",  "L",  1, 0, "Código de barras por defecto"         , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr1",  "C", 20, 0, "Código de primera propiedad"          , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr2",  "C", 20, 0, "Código de segunda propiedad"          , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr1",  "C", 20, 0, "Valor de primera propiedad"           , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr2",  "C", 20, 0, "Valor de segunda propiedad"           , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cPrvHab",  "C", 12, 0, "Proveedor habitual"                   , "", "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefPrv",  "C", 18, 0, "Referencia del proveedor al artículo" , "", "", "( cDbfArt )", nil } )

Return ( aBase )



function cCodigoBarrasDefecto( cCodArt, dbfCodeBar )

   local cCodigoBarras     := ""
   local nRec              := ( dbfCodeBar )->( Recno() )
   local nOrdAnt           := ( dbfCodeBar )->( OrdSetFocus( "cCodArt" ) )

   if ( dbfCodeBar )->( dbSeek( cCodArt ) )

      while ( dbfCodeBar )->cCodArt == cCodArt .AND. !( dbfCodeBar )->( Eof() )


         if ( dbfCodeBar )->lDefBar

            cCodigoBarras  := ( dbfCodeBar )->cCodBar

         end

         ( dbfCodeBar )->( dbSkip() )

      end

   end

   ( dbfCodeBar )->( OrdSetFocus( nOrdAnt ) )

   ( dbfCodeBar )->( dbGoTo( nRec ) )

return cCodigoBarras
