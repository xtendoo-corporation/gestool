#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 51 ".\.\Prg\Articulo.prg"
memvar cDbfArt
memvar cDbfDiv
memvar cDbfOfe
memvar cDbfBar

static pThread

static oWndBrw

static oTagsEver

static dbfProv
static dbfCatalogo
static dbfTemporada
static dbfFamPrv
static dbfTarPreT
static dbfTarPreL
static dbfTarPreS
static dbfOfe
static dbfAlmT
static dbfPro
static dbfTblPro
static dbfDoc
static cAliasStock

static filTmpPrv
static dbfTmpPrv
static filTmpLeng
static dbfTmpLeng
static filTmpVta
static dbfTmpVta
static filTmpKit
static dbfTmpKit
static filTmpParKit
static dbfTmpParKit
static filTmpAsc
static dbfTmpAsc
static filTmpOfe
static dbfTmpOfe
static filTmpImg
static dbfTmpImg
static filTmpCodebar
static dbfTmpCodebar
static filTmpSubCta
static dbfTmpSubCta
static filTmpSubCom
static dbfTmpSubCom
static filTmpAlm
static dbfTmpAlm
static filTmpAtp
static dbfTmpAtp
static filTmpDoc
static dbfTmpDoc

static oStock
static oTipArt
static oGrpFam
static oCatalogo
static oNewImp
static oBandera
static oCosto
static oUndMedicion
static oFraPub
static oOrdenComanda
static oTpvMenu
static oFabricantes

static oCamposExtra
static oDetCamposExtra
static oGetTarWeb

static oActiveX

static cCatOld
static cPrvOld
static oMenu

static aBenefSobre         := { "Costo", "Venta" }
static aImgsArticulo       := {}

static cCodigoFamilia

static lOpenFiles          := .F.
static lExternal           := .F.

static nLabels             := 1

static lEuro               := .F.

static lChangeImage        := .F.
static cImageOld           := ""

static bEdit               := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode          | EdtRec( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode ) }
static bEdtDet             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtDet( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtAlm             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtAlm( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtVta             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtVta( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtLeng            := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpArt | EdtLeng( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpArt ) }
static bEdtKit             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtKit( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtImg             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode          | EdtImg( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode ) }
static bEdtCod             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtCodebar( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtAtp             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpArt | EdtAtipica( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpArt ) }
static bEdtDoc             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtAsc             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtAsc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtParKit          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtParKit( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }

static nView

static filArticulo
static tmpArticulo

static dbfCodebar
static dbfArtVta
static dbfArtKit
static dbfParKit
static dbfArtAsc
static dbfArtLbl
static dbfDiv

static dbfAlbPrvT
static dbfAlbPrvL
static dbfFacPrvT
static dbfFacPrvL
static dbfRctPrvL

static dbfAlbCliT
static dbfAlbCliL
static dbfFacCliL
static dbfFacRecL
static dbfTikCliL
static dbfProLin
static dbfProMat
static dbfPedPrvL
static dbfPedCliL
static dbfUbicaT
static dbfUbicaL

static oLenguajes

static oSeccion

static aTiposImpresoras

static cPouDiv
static cPorDiv
static cPouChg
static cPinDiv
static cPirDiv
static nDecDiv
static cPpvDiv
static nDpvDiv
static nDwbDiv
static cPicEsc
static cPicUnd
static cPwbDiv
static cPwrDiv

static oTimerBrw

static cOldCodeBar      := ""
static aOldCodeBar      := {}

static oBtnStockAlmacenes

static oBtnAceptarActualizarWeb

static hStockArticulo   := {=>}



STATIC FUNCTION OpenFiles( lExt, cPath )

   local oError
   local oBlock
   local nSeconds
   local nStockArticulo

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de artículos" )
      Return ( .F. )
   end

   CursorWait()

   If( lExt == nil, lExt := .F., ) ;
   If( cPath == nil, cPath := cPatEmp(), ) ;

   lExternal      := lExt

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      lOpenFiles  := .T.

      oMsgText( "Abriendo ficheros artículos" )

      nView       := D():CreateView()

      D():Articulos( nView )

      D():ArticuloLenguaje( nView )

      D():EstadoArticulo( nView )

      D():Familias( nView )

      D():ArticuloImagenes( nView )

      D():TiposIva( nView )

      D():ProveedorArticulo( nView )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROVEE.Dbf" ), ( cCheckArea( "PROVEE", @dbfProv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROVEE.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CATALOGO.Dbf" ), ( cCheckArea( "CATALOGO", @dbfCatalogo ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "CATALOGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Temporadas.Dbf" ), ( cCheckArea( "TEMPORADA", @dbfTemporada ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "Temporadas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FamPrv.Dbf" ), ( cCheckArea( "FAMPRV", @dbfFamPrv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FamPrv.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPRET.Dbf" ), ( cCheckArea( "TARPRET", @dbfTarPreT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPRET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPREL.Dbf" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPRES.Dbf" ), ( cCheckArea( "TARPRES", @dbfTarPreS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPRES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "OFERTA.Dbf" ), ( cCheckArea( "OFERTA", @dbfOfe ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTDIV.Dbf" ), ( cCheckArea( "ARTDIV", @dbfArtVta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtLbl.Dbf" ), ( cCheckArea( "ArtLbl", @dbfArtLbl ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtLbl.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.Dbf" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALMACEN.Dbf" ), ( cCheckArea( "ALMACEN", @dbfAlmT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALMACEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTKIT.Dbf" ), ( cCheckArea( "ARTTIK", @dbfArtKit ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PARKIT.Dbf" ), ( cCheckArea( "PARTIK", @dbfParKit ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PARKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTASC.Dbf" ), ( cCheckArea( "ARTASC", @dbfArtAsc ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTASC.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRO.Dbf" ), ( cCheckArea( "PRO", @dbfPro ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TBLPRO.Dbf" ), ( cCheckArea( "TBLPRO", @dbfTblPro ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RDOCUMEN.Dbf" ), ( cCheckArea( "RDOCUMEN", @dbfDoc ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RDOCUMEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CTIPO" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.Dbf" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cStkFast" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.Dbf" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.Dbf" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.Dbf" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cStkFast" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIL.Dbf" ), ( cCheckArea( "FACCLIL", @dbfFacCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacRecL.Dbf" ), ( cCheckArea( "FacRecL", @dbfFacRecL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacRecL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.Dbf" ), ( cCheckArea( "TIKEL", @dbfTikCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CSTKFAST" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.Dbf" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.Dbf" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.Dbf" ), ( cCheckArea( "AlbPrvT", @dbfAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if !TDataCenter():OpenAlbCliT( @dbfAlbCliT )
         lOpenFiles     := .F.
      end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.Dbf" ), ( cCheckArea( "PedPrvL", @dbfPedPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.Dbf" ), ( cCheckArea( "PedCliL", @dbfPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "UBICAT.Dbf" ), ( cCheckArea( "UBICAT", @dbfUbicaT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "UBICAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "UBICAL.Dbf" ), ( cCheckArea( "UBICAL", @dbfUbicaL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "UBICAL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      D():ArticuloStockAlmacenes( nView )

      oBandera             := TBandera():New()

      oStock               := TStock():Create( cPatEmp() )
      if !oStock:lOpenFiles()
         lOpenFiles        := .F.
      end

      oTipArt              := TTipArt():Create( cPatEmp() )
      if !oTipArt:OpenFiles()
         lOpenFiles        := .F.
      end

      oGrpFam              := TGrpFam():Create( cPatEmp() )
      if !oGrpFam:OpenFiles()
         lOpenFiles        := .F.
      end

      oCatalogo            := TCatalogo():Create()
      if !oCatalogo:OpenFiles()
         lOpenFiles        := .F.
      end

      oNewImp              := TNewImp():Create( cPath )
      if !oNewImp:OpenFiles()
         lOpenFiles        := .F.
      end

      oUndMedicion         := UniMedicion():Create( cPatEmp() )
      if !oUndMedicion:OpenFiles()
         lOpenFiles        := .F.
      end

      oFraPub              := TFrasesPublicitarias():Create( cPatEmp() )
      if !oFraPub:OpenFiles()
         lOpenFiles        := .F.
      end

      oSeccion             := TSeccion():Create( cPath )
      if !oSeccion:OpenFiles()
         lOpenFiles        := .F.
      end

      oOrdenComanda        := TOrdenComanda():Create( cPatEmp() )
      if !oOrdenComanda:OpenFiles()
         lOpenfiles        := .F.
      end

      oLenguajes           := TLenguaje():Create( cPatDat() )
      if !oLenguajes:OpenFiles()
         lOpenFiles        := .F.
      end

      oTpvMenu             := TpvMenu():Create( cPath )
      oTpvMenu:OpenService( .F., cPath )
      oTpvMenu:SetFilter( "Field->lAcomp == .t." )
      oTpvMenu:lAppendBuscar     := .F.
      oTpvMenu:lModificarBuscar  := .F.

      oDetCamposExtra      := TDetCamposExtra():New()
      if !oDetCamposExtra:OpenFiles()
         lOpenFiles        := .F.
      end

      oDetCamposExtra:setTipoDocumento( "Artículos" )
      oDetCamposExtra:setbId( {|| D():ArticulosId( nView ) } )

      oCamposExtra      := TCamposExtra():New()
      if !oCamposExtra:OpenFiles()
         lOpenFiles        := .F.
      end

      if !IsReport()
         TComercioConfig():getInstance():loadJSON()
      end

      oFabricantes          := TFabricantes():Create( cPatEmp() )
      if !oFabricantes:OpenFiles()
         lOpenFiles        := .F.
      end

      aTiposImpresoras  := aTiposImpresoras()





      cPouDiv              := cPouDiv( cDivEmp(), dbfDiv )
      cPorDiv              := cPorDiv( cDivEmp(), dbfDiv )
      cPwbDiv              := cPwbDiv( cDivEmp(), dbfDiv )
      cPwrDiv              := cPwrDiv( cDivEmp(), dbfDiv )
      cPouChg              := cPouDiv( cDivChg(), dbfDiv )
      cPinDiv              := cPinDiv( cDivEmp(), dbfDiv )
      cPirDiv              := cPirDiv( cDivEmp(), dbfDiv )
      nDecDiv              := nDouDiv( cDivEmp(), dbfDiv )
      nDwbDiv              := nDwbDiv( cDivEmp(), dbfDiv )
      cPpvDiv              := cPpvDiv( cDivEmp(), dbfDiv )
      nDpvDiv              := nDpvDiv( cDivEmp(), dbfDiv )
      cPicEsc              := MasEsc()
      cPicUnd              := MasUnd()

      oMsgText( "Ficheros de artículos abiertos" )

   RECOVER USING oError

      lOpenFiles           := .F.

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de artículos" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

   CursorWE()

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles( lDestroy )

    If( lDestroy == nil, lDestroy := .F., ) ;

   if oWndBrw <> nil

      if !empty( oWndBrw:oBrw )
         oWndBrw:oBrw:End()
      end

      if lDestroy
         oWndBrw     := nil
      end

   end

   D():DeleteView( nView )

   if dbfProv <> nil
      ( dbfProv )->( dbCloseArea() )
   end

   if dbfCatalogo <> nil
      ( dbfCatalogo )->( dbCloseArea() )
   end

   if dbfTemporada <> nil
      ( dbfTemporada )->( dbCloseArea() )
   end

   if dbfFamPrv <> nil
      ( dbfFamPrv )->( dbCloseArea() )
   end

   if dbfArtLbl <> nil
      ( dbfArtLbl )->( dbCloseArea() )
   end

   if dbfTarPreT <> nil
      ( dbfTarPreT )->( dbCloseArea() )
   end

   if dbfTarPreL <> nil
      ( dbfTarPreL )->( dbCloseArea() )
   end

   if dbfTarPreS <> nil
      ( dbfTarPreS )->( dbCloseArea() )
   end

   if dbfOfe <> nil
      ( dbfOfe )->( dbCloseArea() )
   end

   if dbfDiv <> nil
      ( dbfDiv )->( dbCloseArea() )
   end

   if dbfArtVta <> nil
      ( dbfArtVta )->( dbCloseArea() )
   end

   if dbfAlmT <> nil
      ( dbfAlmT )->( dbCloseArea() )
   end

   if dbfArtKit <> nil
      ( dbfArtKit )->( dbCloseArea() )
   end

   if dbfParKit <> nil
      ( dbfParKit )->( dbCloseArea() )
   end

   if dbfArtAsc <> nil
      ( dbfArtAsc )->( dbCloseArea() )
   end

   if dbfTblPro <> nil
      ( dbfTblPro )->( dbCloseArea() )
   end

   if dbfPro <> nil
      ( dbfPro )->( dbCloseArea() )
   end

   if dbfCodebar <> nil
      ( dbfCodebar )->( dbCloseArea() )
   end

   if dbfAlbPrvL <> nil
      ( dbfAlbPrvL )->( dbCloseArea() )
   end

   if dbfFacPrvL <> nil
      ( dbfFacPrvL )->( dbCloseArea() )
   end

   if dbfRctPrvL <> nil
      ( dbfRctPrvL )->( dbCloseArea() )
   end

   if dbfAlbCliL <> nil
      ( dbfAlbCliL )->( dbCloseArea() )
   end

   if dbfFacCliL <> nil
      ( dbfFacCliL )->( dbCloseArea() )
   end

   if dbfFacRecL <> nil
      ( dbfFacRecL )->( dbCloseArea() )
   end

   if dbfTikCliL <> nil
      ( dbfTikCliL )->( dbCloseArea() )
   end

   if dbfProLin <> nil
      ( dbfProLin )->( dbCloseArea() )
   end

   if dbfProMat <> nil
      ( dbfProMat )->( dbCloseArea() )
   end

   if dbfAlbPrvT <> nil
      ( dbfAlbPrvT )->( dbCloseArea() )
   end

   if dbfAlbCliT <> nil
      ( dbfAlbCliT )->( dbCloseArea() )
   end

   if dbfPedPrvL <> nil
      ( dbfPedPrvL )->( dbCloseArea() )
   end

   if dbfPedCliL <> nil
      ( dbfPedCliL )->( dbCloseArea() )
   end

   if dbfUbicaT <> nil
      ( dbfUbicaT )->( dbCloseArea() )
   end

   if dbfUbicaL <> nil
      ( dbfUbicaL )->( dbCloseArea() )
   end

   if !empty( dbfDoc )
      ( dbfDoc )->( dbCloseArea() )
   end

   if !empty( oStock )
      oStock:end()
   end

   if !empty( oGrpFam )
      oGrpFam:end()
   end

   if !empty( oTipArt )
      oTipArt:end()
   end

   if !empty( oCatalogo )
      oCatalogo:end()
   end

   if !empty( oNewImp )
      oNewImp:end()
   end

   if !empty( oUndMedicion )
      oUndMedicion:end()
   end

   if !empty( oFraPub )
      oFraPub:end()
   end

   if !empty( oSeccion )
      oSeccion:End()
   end

   if !empty( oOrdenComanda )
      oOrdenComanda:End()
   end

   if !empty( oTpvMenu )
      oTpvMenu:CloseService()
   end

   if !empty( oDetCamposExtra )
      oDetCamposExtra:CloseFiles()
   end

   if !empty( oCamposExtra )
      oCamposExtra:CloseFiles()
   end

   if !empty( oLenguajes )
      oLenguajes:End()
   end

   if !IsReport()
      TComercioConfig():DestroyInstance()
   end

   if !Empty( oFabricantes )
      oFabricantes:End()
   end

   dbfProv           := nil
   dbfCatalogo       := nil
   dbfFamPrv         := nil
   oStock            := nil
   dbfTarPreT        := nil
   dbfTarPreL        := nil
   dbfTarPreS        := nil
   dbfOfe            := nil
   dbfDiv            := nil
   dbfArtVta         := nil
   oBandera          := nil
   dbfAlmT           := nil
   dbfArtKit         := nil
   dbfParKit         := nil
   dbfArtAsc         := nil
   dbfArtLbl         := nil
   dbfTblPro         := nil
   dbfPro            := nil
   dbfCodebar        := nil
   oTipArt           := nil
   oCatalogo         := nil
   oOrdenComanda     := nil
   oNewImp           := nil
   oFraPub           := nil
   dbfDoc            := nil
   dbfTemporada      := nil
   dbfAlbPrvL        := nil
   dbfFacPrvL        := nil
   dbfAlbCliL        := nil
   dbfFacCliL        := nil
   dbfFacRecL        := nil
   dbfTikCliL        := nil
   dbfProLin         := nil
   dbfProMat         := nil
   dbfAlbPrvT        := nil
   dbfAlbCliT        := nil
   dbfPedPrvL        := nil
   dbfPedCliL        := nil
   dbfUbicaT         := nil
   dbfUbicaL         := nil
   oTpvMenu          := nil
   oDetCamposExtra   := nil
   oCamposExtra      := nil
   oFabricantes      := nil
   oLenguajes        := nil

   lOpenFiles        := .F.

RETURN ( .T. )



Function Articulo( oMenuItem, oWnd, bOnInit )

   local oSnd
   local oRpl
   local oTct
   local oDel
   local oLbl
   local nLevel
   local oBtnEur
   local oRotor
   local oScript

   If( oMenuItem == nil, oMenuItem := "01014", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;
   If( bOnInit == nil, bOnInit := nil, ) ;

   if !empty( oWndBrw )
      oWndBrw:putFocus()
      Return .T.
   end





   nLevel            := Auth():Level( oMenuItem )

   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return .F.
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end





   if !OpenFiles( .F. )
      return .F.
   end

   CursorWait()





   AddMnuNext( "Artículos", ProcName() )



















   oWndBrw := TShell():New( 0, 0, 22, 80, "Artículos",, oWnd,,, .F.,,, ( D():Articulos( nView ) ),,,,, {"Código",    "Nombre", "Familia", "No obsoletos + Código", "No obsoletos + Nombre", "Posición táctil", "Ubicación"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, D():Articulos( nView ) ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, D():Articulos( nView ) ) )}, {||( WinDelRec( oWndBrw:oBrw, D():Articulos( nView ), {|| DelDetalle( ( D():Articulos( nView ) )->Codigo ) } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, D():Articulos( nView ) ) )}, nil, nLevel, "gc_object_cube_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Escandallos"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| ( D():Articulos( nView ) )->lKitArt }
      :nWidth           := 20
      :SetCheck( { "gc_piece_12", "Nil16" } )
      :AddResource( "BMPKIT" )
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Envio"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| ( D():Articulos( nView ) )->lSndDoc }
      :nWidth           := 20
      :SetCheck( { "gc_mail2_12", "Nil16" } )
      :AddResource( "gc_mail2_16" )
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Tarifas atipicas"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| dbSeekInOrd( ( D():Articulos( nView ) )->Codigo, "cCodArt", D():Atipicas( nView ) ) }
      :nWidth           := 20
      :lHide            := .T.
      :SetCheck( { "gc_symbol_percent_12", "Nil16" } )
      :AddResource( "gc_symbol_percent_16" )
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Descripciones"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| !Empty( ( D():Articulos( nView ) )->Descrip ) }
      :nWidth           := 20
      :lHide            := .T.
      :SetCheck( { "gc_symbol_percent_12", "Nil16" } )
      :AddResource( "gc_symbol_percent_16" )
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Código de barras"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| dbSeekInOrd( ( D():Articulos( nView ) )->Codigo, "cCodArt", dbfCodebar ) }
      :nWidth           := 20
      :SetCheck( { "Sel16", "Nil16" } )
      :AddResource( "gc_portable_barcode_scanner_16" )
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Táctil"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| ( D():Articulos( nView ) )->lIncTcl }
      :nWidth           := 18
      :lHide            := .T.
      :SetCheck( { "Sel16", "Nil16" } )
      :AddResource( "Tactil16" )
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Posición táctil"
      :cSortOrder       := "nPosTpv"
      :bEditValue       := {|| if( ( D():Articulos( nView ) )->lIncTcl, Trans( ( D():Articulos( nView ) )->nPosTpv, "999" ), "" ) }
      :nWidth           := 80
      :lHide            := .T.
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Obsoleto"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| ( D():Articulos( nView ) )->lObs }
      :nWidth           := 18
      :SetCheck( { "Cnt16", "Nil16" } )
      :AddResource( "DEL16" )
      :bLDClickData     := {|| lChangeObsoleto() }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Publicar"
      :nHeadBmpNo       := 3
      :bStrData         := {|| "" }
      :bEditValue       := {|| ( D():Articulos( nView ) )->lPubInt }
      :nWidth           := 20
      :SetCheck( { "gc_earth_12", "Nil16" } )
      :AddResource( "gc_earth_16" )
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Código"
      :cSortOrder       := "Codigo"
      :bEditValue       := {|| ( D():Articulos( nView ) )->Codigo }
      :nWidth           := 100
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Nombre"
      :cSortOrder       := "Nombre"
      :bEditValue       := {|| ( D():Articulos( nView ) )->Nombre }
      :nWidth           := 300
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Familia"
      :cSortOrder       := "cFamCod"
      :bEditValue       := {|| ( D():Articulos( nView ) )->Familia }
      :nWidth           := 80
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Nombre familia"
      :bEditValue       := {|| RetFamilia( ( D():Articulos( nView ) )->Familia, D():Familias( nView ) ) }
      :nWidth           := 140
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Tipo"
      :bStrData         := {|| AllTrim( ( D():Articulos( nView ) )->cCodTip ) + if( !empty( ( D():Articulos( nView ) )->cCodTip ), " - ", "" ) + oRetFld( ( D():Articulos( nView ) )->cCodTip, oTipArt:oDbf, "cNomTip" ) }
      :nWidth           := 140
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Categoría"
      :bStrData         := {|| AllTrim( ( D():Articulos( nView ) )->cCodCate ) + if( !empty( ( D():Articulos( nView ) )->cCodCate ), " - ", "" ) + CategoriasModel():getField( "cNombre", "cCodigo", ( D():Articulos( nView ) )->cCodCate ) }
      :nWidth           := 140
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Temporada"
      :bStrData         := {|| AllTrim( ( D():Articulos( nView ) )->cCodTemp ) + if( !empty( ( D():Articulos( nView ) )->cCodTemp ), " - ", "" ) + RetFld( ( D():Articulos( nView ) )->cCodTemp, dbfTemporada, "cNombre" ) }
      :bBmpData         := {|| nBitmapTipoTemporada( RetFld( ( D():Articulos( nView ) )->cCodTemp, dbfTemporada, "cTipo" ) ) }
      :nWidth           := 140
      :lHide            := .T.
      AddResourceTipoTemporada( hb_QWith() )
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Fabricante"
      :bStrData         := {|| AllTrim( ( D():Articulos( nView ) )->cCodFab ) + if( !empty( ( D():Articulos( nView ) )->cCodFab ), " - ", "" ) + oRetFld( ( D():Articulos( nView ) )->cCodFab, oFabricantes:oDbf, "cNomFab" ) }
      :nWidth           := 140
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Estado"
      :bStrData         := {|| AllTrim( ( D():Articulos( nView ) )->cCodEst ) + if( !empty( ( D():Articulos( nView ) )->cCodEst ), " - ", "" ) + RetFld( ( D():Articulos( nView ) )->cCodEst, D():EstadoArticulo( nView ), "cNombre" ) }
      :nWidth           := 140
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Web"
      :bEditValue       := {|| ( D():Articulos( nView ) )->cWebShop }
      :nWidth           := 140
   end












   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVenta1 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteBase( o, x, n, { "Base" => "pVenta1", "Iva" => "pVtaIva1", "Beneficio" => "Benef1", "BeneficioSobre" => "nBnfSbr1" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVtaIva1 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta1", "Iva" => "pVtaIva1", "Beneficio" => "Benef1", "BeneficioSobre" => "nBnfSbr1" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVenta2 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteBase( o, x, n, { "Base" => "pVenta2", "Iva" => "pVtaIva2", "Beneficio" => "Benef2", "BeneficioSobre" => "nBnfSbr2" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVtaIva2 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta2", "Iva" => "pVtaIva2", "Beneficio" => "Benef2", "BeneficioSobre" => "nBnfSbr2" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVenta3 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteBase( o, x, n, { "Base" => "pVenta3", "Iva" => "pVtaIva3", "Beneficio" => "Benef3", "BeneficioSobre" => "nBnfSbr3" } ) }
   end


   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVtaIva3 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta3", "Iva" => "pVtaIva3", "Beneficio" => "Benef3", "BeneficioSobre" => "nBnfSbr3" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVenta4 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteBase( o, x, n, { "Base" => "pVenta4", "Iva" => "pVtaIva4", "Beneficio" => "Benef4", "BeneficioSobre" => "nBnfSbr4" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVtaIva4 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta4", "Iva" => "pVtaIva4", "Beneficio" => "Benef4", "BeneficioSobre" => "nBnfSbr4" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVenta5 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteBase( o, x, n, { "Base" => "pVenta5", "Iva" => "pVtaIva5", "Beneficio" => "Benef5", "BeneficioSobre" => "nBnfSbr5" } ) }
   end


   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVtaIva5 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta5", "Iva" => "pVtaIva5", "Beneficio" => "Benef5", "BeneficioSobre" => "nBnfSbr5" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVenta6 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteBase( o, x, n, { "Base" => "pVenta6", "Iva" => "pVtaIva6", "Beneficio" => "Benef6", "BeneficioSobre" => "nBnfSbr6" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| ( D():Articulos( nView ) )->pVtaIva6 }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta6", "Iva" => "pVtaIva6", "Beneficio" => "Benef6", "BeneficioSobre" => "nBnfSbr6" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Impuesto especial"
      :bEditValue       := {|| oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp ) }
      :cEditPicture     := cPouDiv
      :nWidth           := 90
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar7", "Precio IVA con Imp. Esp. 1" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| totalArticuloConImpuestoEspecialUno( nView ) }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta1", "Iva" => "pVtaIva1", "Beneficio" => "Benef1", "BeneficioSobre" => "nBnfSbr1" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar8", "Precio IVA con Imp. Esp. 2" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| totalArticuloConImpuestoEspecialDos( nView ) }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta2", "Iva" => "pVtaIva2", "Beneficio" => "Benef2", "BeneficioSobre" => "nBnfSbr2" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar9", "Precio IVA con Imp. Esp. 3" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| totalArticuloConImpuestoEspecialTres( nView ) }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta3", "Iva" => "pVtaIva3", "Beneficio" => "Benef3", "BeneficioSobre" => "nBnfSbr3" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar10", "Precio IVA con Imp. Esp. 4" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| totalArticuloConImpuestoEspecialCuatro( nView ) }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta4", "Iva" => "pVtaIva4", "Beneficio" => "Benef4", "BeneficioSobre" => "nBnfSbr4" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar11", "Precio IVA con Imp. Esp. 5" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| totalArticuloConImpuestoEspecialCinco( nView ) }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta5", "Iva" => "pVtaIva5", "Beneficio" => "Benef5", "BeneficioSobre" => "nBnfSbr5" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar12", "Precio IVA con Imp. Esp. 6" ) + Space( 1 ) +  cImp()
      :bEditValue       := {|| totalArticuloConImpuestoEspecialSeis( nView ) }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
      :bEditWhen        := {|| nAnd( nLevel, 4 ) <> 0 }
      :bOnPostEdit      := {|o,x,n| lValidImporteIva( o, x, n, { "Base" => "pVenta6", "Iva" => "pVtaIva6", "Beneficio" => "Benef6", "BeneficioSobre" => "nBnfSbr6" } ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Proveedor"
      :bStrData         := {|| if( !empty( ( D():Articulos( nView ) )->cPrvHab ), AllTrim( ( D():Articulos( nView ) )->cPrvHab ) + " - " + RetProvee( ( D():Articulos( nView ) )->cPrvHab, dbfProv ), "" ) }
      :nWidth           := 200
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Referencia de proveedor"
      :bStrData         := {|| cRefArtPrv( ( D():Articulos( nView ) )->Codigo, ( D():Articulos( nView ) )->cPrvHab, D():ProveedorArticulo( nView ) ) }
      :nWidth           := 100
      :lHide            := .T.
   end

   if ( RolesModel():getRolVerPreciosCosto( Auth():rolUuid() ) )

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Costo"
      :bStrData         := {|| nCosto( nil, D():Articulos( nView ), dbfArtKit, .T., if( lEuro, cDivChg(), cDivEmp() ), dbfDiv ) }
      :nWidth           := 100
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :lHide            := .T.
   end

   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Precio mínimo"
      :bEditValue       := {|| ( D():Articulos( nView ) )->PvpRec }
      :cEditPicture     := cPouDiv
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nEditType        := 1
      :lHide            := .T.
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Ubicación"
      :cSortOrder       := "cDesUbi"
      :bEditValue       := {|| ( D():Articulos( nView ) )->cDesUbi }
      :nWidth           := 150
      :lHide            := .T.
      :nEditType        := 1
      :bOnPostEdit      := {|oCol, uNewValue, nKey| if( dbDialogLock( D():Articulos( nView ) ), ( ( D():Articulos( nView ) )->cDesUbi := uNewValue, ( D():Articulos( nView ) )->( dbUnlock() ) ), ) }
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
   end

   with object ( oWndBrw:AddXCol() )
      :cHeader          := "Imagen TPV"
      :bEditValue       := {|| ( D():Articulos( nView ) )->cImagen }
      :nWidth           := 200
      :lHide            := .T.
      :nEditType        := 1
      :bOnPostEdit      := {|oCol, uNewValue, nKey| if( dbDialogLock( D():Articulos( nView ) ), ( ( D():Articulos( nView ) )->cImagen := uNewValue, ( D():Articulos( nView ) )->( dbUnlock() ) ), ) }
   end

   oDetCamposExtra:addCamposExtra( oWndBrw )

   oWndBrw:cHtmlHelp    := "Articulos"

   oWndBrw:bToolTip     := {|| BrwStkArt( nView ) }




      oWndBrw:oBrw:bChange    := {|| oWndBrw:DestroyTooltip() }
      aAdd( oWndBrw:aFastKey, { 32, {|| if( !empty( oWndBrw ), oWndBrw:ShowExtendInfo(), ) } } )


   oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()





   oWndBrw:NewAt( "BUS",,, {||( buscarExtendido() )}, "Buscar e(x)tendido", "X",,,,, .F. )







   oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






    oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






    oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






    oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, D():Articulos( nView ) ) )}, "(Z)oom", "Z",,, 8,, .F. )







   oDel := oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )







      oWndBrw:NewAt( "DEL",,, {||( TDeleleteObsoletos():New(), oWndBrw:Refresh() )}, "Sin movimientos",,,, 16, oDel, .F. )






   oWndBrw:NewAt( "INFO",,, {||( BrwVtaComArt( ( D():Articulos( nView ) )->Codigo, ( D():Articulos( nView ) )->Nombre ) )}, "(I)nforme artículo", "I",,, 8,, .F. )






   oWndBrw:NewAt( "gc_package_",,, {||( BrwStkArt( nView ) )}, "Informe stoc(k)", "K",,, 8,, .F. )

   if getPvProfString( "Gamma", "ViewGamma", ".F.", cIniAplication() ) == ".T."






      oWndBrw:NewAt( "gamma_",,, {||( ImportGamma():New():getStockProduct( AllTrim( ( D():Articulos( nView ) )->Codigo ) ) )}, "Gamma", "G",,, 8,, .F. )

   end






   oWndBrw:NewAt( "IMP",,, {||( TInfArtFam():New( "Listado de artículos" ):Play( .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ), D():Familias( nView ), oWndBrw ) )}, "Lis(t)ado", "T",,, 32,, .F. )






   oWndBrw:NewAt( "gc_document_empty_chart_",,, {||( runFastGallery( "Articulos" ) )}, "Rep(o)rting", "O",,, 32,, .F. )






   oLbl := oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TArticuloLabelGenerator():New():Dialog() )}, "Eti(q)uetas", "Q",,, 32,, .F. )







      oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TArticuloLabelGenerator():New( oWndBrw:aSelected ):Dialog() )}, "Etiquetas rápidas",,,, 32, oLbl, .F. )

   if RolesModel():getRolCambiarPrecios( Auth():rolUuid() )






      oWndBrw:NewAt( "gc_money2_",,, {||( ChgPrc( oWndBrw ) )}, "(C)ambiar precios", "C",,, 4,, .F. )

   end

   if RolesModel():getRolCambiarCampos( Auth():rolUuid() )






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():Articulos( nView ), aItmArt(), "20" ) )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, dbfArtKit, aItmKit() ) )}, "Lineas escandallos",,,, 4, oRpl, .F. )







         oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, dbfArtVta, aItmVta() ) )}, "Ventas por propiedades",,,, 4, oRpl, .F. )

   end








   oSnd := oWndBrw:NewAt( "Lbl",, "Seleccionar registros para ser enviados", {||ChangelSndDoc()}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "Lbl",,, {||( lSelectAll( oWndBrw ) )}, "Todos",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "Lbl",,, {||( lSelectAll( oWndBrw, .F. ) )}, "Ninguno",,,, 4, oSnd, .F. )






   oWndBrw:NewAt( "SNDINT",,, {||( changePublicar() )}, "P(u)blicar", "U",,, 4,, .F. )






   oWndBrw:NewAt( "WordPress_",,, {||( msgRun( "Subiendo artículo", "Espere por favor...", {|| ImportLatress():New():addOneArticulo( dbHash( D():Articulos( nView ) ) ) } ) )}, "Subir (w)eb", "W",,, 4,, .F. )






   oTct := oWndBrw:NewAt( "TACTIL",,, {||( changeTactil() )}, "Táctil",,, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "Up",,, {||( ChangePosition( .F. ), oWndBrw:Select() )}, "S(u)bir posición",,,, 32, oTct, .F. )






      oWndBrw:NewAt( "Down",,, {||( ChangePosition( .T. ), oWndBrw:Select() )}, "Ba(j)ar posición",,,, 32, oTct, .F. )

   if ( "VI" $ appParamsMain() )





   oWndBrw:NewAt( "BMPEXPTAR",,, {||( GetDisk() )}, "Infortisa",,,, 4,, .F. )

   end





   oScript := oWndBrw:NewAt( "gc_folder_document_",,, {||( oScript:Expand() )}, "Scripts",,,,,, .F. )
      ImportScript( oWndBrw, oScript, "Articulos", nView, oStock )





   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,, 4,, .F. )















      oWndBrw:NewAt( "gc_clipboard_empty_businessman_",,, {||( PedPrv( nil, oWnd, nil, ( D():Articulos( nView ) )->Codigo ) )}, "Añadir pedido a proveedor",,,, 4, oRotor, .T. )







      oWndBrw:NewAt( "gc_document_empty_businessman_",,, {||( AlbPrv( nil, oWnd, nil, ( D():Articulos( nView ) )->Codigo ) )}, "Añadir albarán de proveedor",,,, 4, oRotor, .T. )







      oWndBrw:NewAt( "gc_document_text_businessman_",,, {||( FacPrv( nil, oWnd, nil, ( D():Articulos( nView ) )->Codigo ) )}, "Añadir factura de proveedor",,,, 4, oRotor, .T. )







      oWndBrw:NewAt( "gc_power_drill_sat_user_",,, {||( SatCli( nil, oWnd, nil, ( D():Articulos( nView ) )->Codigo ) )}, "Añadir SAT de cliente",,,, 4, oRotor, .T. )







      oWndBrw:NewAt( "gc_notebook_user_",,, {||( PreCli( nil, oWnd, nil, ( D():Articulos( nView ) )->Codigo ) )}, "Añadir presupuesto de cliente",,,, 4, oRotor, .T. )






      oWndBrw:NewAt( "GC_CLIPBOARD_EMPTY_USER_",,, {||( PedCli( nil, oWnd, nil, ( D():Articulos( nView ) )->Codigo ) )}, "Añadir pedido de cliente",,,, 4, oRotor, .T. )






      oWndBrw:NewAt( "GC_DOCUMENT_EMPTY_",,, {||( AlbCli( nil, oWnd, { "Artículo" => ( D():Articulos( nView ) )->Codigo } ) )}, "Añadir albarán de cliente",,,, 4, oRotor, .T. )






      oWndBrw:NewAt( "GC_DOCUMENT_TEXT_USER_",,, {||( FactCli( nil, oWnd, { "Artículo" => ( D():Articulos( nView ) )->Codigo } ) )}, "Añadir factura de cliente",,,, 4, oRotor, .T. )






      oWndBrw:NewAt( "GC_CASH_REGISTER_USER_",,, {||( FrontTpv( nil, oWnd, nil, ( D():Articulos( nView ) )->Codigo ) )}, "Añadir tiket de cliente",,,, 4, oRotor, .T. )

      if Auth():isSuperAdmin()






         oWndBrw:NewAt( "WORDPRESS_",,, {||( if( !Empty( ( D():Articulos( nView ) )->cIdWP ), ImportLatress():New():desactivateArticulo( ( D():Articulos( nView ) )->cIdWP ), ) )}, "Desactivar en WP",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "WORDPRESS_",,, {||( if( !Empty( ( D():Articulos( nView ) )->cIdWP ), ImportLatress():New():activateArticulo( ( D():Articulos( nView ) )->cIdWP ), ) )}, "Activar en WP",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "WORDPRESS_",,, {||( if( !Empty( ( D():Articulos( nView ) )->cIdWP ), ImportLatress():New():ActStockArticulo( ( D():Articulos( nView ) )->Codigo, ( D():Articulos( nView ) )->cIdWP ), ) )}, "Actualiza stock",,,, 4, oRotor, .T. )

      end





   oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .T. )

   oWndBrw:oActiveFilter:SetFields( aItmArt() )
   oWndBrw:oActiveFilter:SetFilterType( "20" )

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles( .T. ) )},, oWndBrw:bLButtonUp, .F. )

   if !empty( bOnInit )
      Eval( bOnInit )
   end

   bOnInit     := nil

   CursorWE()

RETURN ( .T. )



STATIC FUNCTION EdtRec( aTmp, aGet, cArticulo, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oFld
   local oBlock
   local oError
   local oBrwDiv
   local oBrwLeng
   local oBrwCodebar
   local aBtnDiv              := Array( 9 )
   local oBrwOfe
   local oBrwImg
   local oBrwAtp
   local oBrwStk
   local oBrwPrv
   local oBrwKit
   local oBrwAsc
   local oBrwEsc
   local oBrwDoc
   local bmpImage
   local oSayWeb              := Array(  6 )
   local oSay                 := Array( 23 )
   local cSay                 := Array( 23 )
   local oFnt
   local aBar                 := { "Ean13", "Code39", "Code128" }
   local aBnfSobre            := { "Costo", "Venta" }
   local cDivUse              := cDivEmp()
   local oGetSubCta
   local cGetSubCta           := ""
   local oGetSaldo
   local nGetSaldo            := 0
   local nGetDebe             := 0
   local nGetHaber            := 0
   local oGetCtaCom
   local cGetCtaCom           := ""
   local nDebCom              := 0
   local nHabCom              := 0
   local oGetSalCom
   local nGetSalCom           := 0
   local oGetCtaTrn
   local cGetCtaTrn           := ""
   local oGetSalTrn
   local nGetSalTrn           := 0
   local cSubCtaAnt
   local cSubCtaAntCom
   local oNombre
   local oBtnMoneda
   local oBtnInforme
   local oValorPunto
   local oValorTot
   local oValorDto
   local oNom1
   local oNom2
   local oNom3
   local aBtn                 := Array( 16 )
   local oBmpTemporada
   local oBmpCategoria
   local oBmpEstado
   local cCbxPrecio           := "Ventas"
   local nTotStkAct           := 0
   local nTotStkPdr           := 0
   local nTotStkPde           := 0
   local oBmpGeneral
   local oBmpPrecios
   local oBmpDescripciones
   local oBmpPropiedades
   local oBmpLogistica
   local oBmpStocks
   local oBmpContabilidad
   local oBmpOfertas
   local oBmpEscandallos
   local oBmpAsociados
   local oBmpWeb
   local oBmpUbicaciones
   local oBmpImagenes
   local oBmpAtipicas
   local oBmpTactil
   local oBmpAdicionales
   local oBtnEditAtp
   local oBmpDocumentos
   local oImpComanda1
   local oImpComanda2
   local cImpComanda1
   local cImpComanda2
   local aNombreTarifas                      := aNombreTarifas()
   local cNombreTarifaWeb                    := aNombreTarifas[1]
   local oGetValNewImp
   local nGetValNewImp                       := 0
   local oGetSubcuentaVentaDevolucion
   local cGetSubcuentaVentaDevolucion
   local oGetSaldoSubcuentaVentaDevolucion
   local nGetSaldoSubcuentaVentaDevolucion   := 0
   local oGetSubcuentaCompraDevolucion
   local cGetSubcuentaCompraDevolucion
   local oGetSaldoSubcuentaCompraDevolucion
   local nGetSaldoSubcuentaCompraDevolucion  := 0

   CursorWait()

   getSQLDatabase():beginTransaction()

   if BeginTrans( aTmp, nMode )
      Return .F.
   end

   oBlock                     := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   do case
   case nMode == 1

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nLabel"    ) ) ]     := 1
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nCtlStock" ) ) ]     := 1
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lLote"     ) ) ]     := .F.
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo"    ) ) ]     := Space( 18 )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva"   ) ) ]     := cDefIva()

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc"   ) ) ]     := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc2"  ) ) ]     := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc3"  ) ) ]     := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc4"  ) ) ]     := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc5"  ) ) ]     := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc6"  ) ) ]     := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaPVer"  ) ) ]     := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaWeb"   ) ) ]     := uFieldEmpresa( "lIvaInc" )

      if !empty( uFieldEmpresa( "cDefTem" ) )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp"  ) ) ]  := uFieldEmpresa( "cDefTem" )
      end

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpCom1"  ) ) ]     := 1
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpCom2"  ) ) ]     := 1

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nFacCnv"   ) ) ]     := 1

      if nDefBnf( 1 ) <> 0
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef1"    ) ) ]  := nDefBnf( 1 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1"     ) ) ]  := .T.
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr1"  ) ) ]  := nDefSbr( 1 )
      end

      if nDefBnf( 2 ) <> 0
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef2"    ) ) ]  := nDefBnf( 2 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf2"     ) ) ]  := .T.
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr2"  ) ) ]  := nDefSbr( 2 )
      end

      if nDefBnf( 3 ) <> 0
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef3"    ) ) ]  := nDefBnf( 3 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf3"     ) ) ]  := .T.
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr3"  ) ) ]  := nDefSbr( 3 )
      end

      if nDefBnf( 4 ) <> 0
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef4"    ) ) ]  := nDefBnf( 4 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf4"     ) ) ]  := .T.
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr4"  ) ) ]  := nDefSbr( 4 )
      end

      if nDefBnf( 5 ) <> 0
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef5"    ) ) ]  := nDefBnf( 5 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf5"     ) ) ]  := .T.
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr5"  ) ) ]  := nDefSbr( 5 )
      end

      if nDefBnf( 6 ) <> 0
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef6"    ) ) ]  := nDefBnf( 6 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf6"     ) ) ]  := .T.
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr6"  ) ) ]  := nDefSbr( 6 )
      end

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDuracion" ) ) ]     := 0
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipDur" ) ) ]       := 1

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]      := Padr( GetPvProfString( "PROPIEDADES", "Propiedad1", "", cIniAplication() ), 20 )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]      := Padr( GetPvProfString( "PROPIEDADES", "Propiedad2", "", cIniAplication() ), 20 )

   case nMode == 4

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo"   ) ) ]      := NextKey( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], D():Articulos( nView ) )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CodeBar"  ) ) ]      := ""

   end

   cCatOld                                                     := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodCat" ) ) ]
   cPrvOld                                                     := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cPrvHab" ) ) ]
   cImageOld                                                   := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ]
   nGetValNewImp                                               := oNewImp:nValImp( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ] )

   if empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ] )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ]       := ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) )
   end

   if empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipBar" ) ) ] )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipBar" ) ) ]       := 1
   else
      if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipBar" ) ) ] > 3
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipBar" ) ) ]    := 3
      end
   end

   cImpComanda1    := if( empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTipImp1" ) ) ] ), "No imprimir", AllTrim( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTipImp1" ) ) ] ) )
   cImpComanda2    := if( empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTipImp2" ) ) ] ), "No imprimir", AllTrim( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTipImp2" ) ) ] ) )

   cSay[7]         := aBar[ aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipBar" ) ) ] ]
   cSay[6]         := ""

   cSay[11]        := aBnfSobre[ Max( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr1" ) ) ], 1 ) ]
   cSay[12]        := aBnfSobre[ Max( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr2" ) ) ], 1 ) ]
   cSay[13]        := aBnfSobre[ Max( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr3" ) ) ], 1 ) ]
   cSay[14]        := aBnfSobre[ Max( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr4" ) ) ], 1 ) ]
   cSay[15]        := aBnfSobre[ Max( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr5" ) ) ], 1 ) ]
   cSay[16]        := aBnfSobre[ Max( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr6" ) ) ], 1 ) ]

   cSubCtaAnt        := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVta" ) ) ]
   cSubCtaAntCom     := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaCom" ) ) ]
   cCodigoFamilia    := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Familia" ) ) ]





   CursorWE()







   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "artículo : " + Rtrim( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Nombre" ) ) ] ), "Articulo",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







































      oFld := TFolder():ReDefine( 300, {"&General", "&Precios", "Tarifas", "&Táctil", "Observaciones", "&Adicionales", "Imagenes", "P&ropiedades", "&Logística", "&Stocks", "Co&ntabilidad", "&Ofertas", "&Escandallos", "&Web", "Lenguajes", "&Documentos", "Asociados", "Escandallos"}, { "ART_1","ART_5","ART_ATIPICAS","ART_Tactil","ART_OBSER","ART_Adicional","ART_12","ART_20","ART_Logistica","ART_3","ART_15","ART_4","ART_6","ART_Web","ART_2","CLIENT_10","ART_16","ART_17" }, oDlg,,,,, .F., )










   oBmpGeneral := TBitmap():ReDefine( 500, "gc_object_cube_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )









   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( CheckValid( aGet[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], D():Articulos( nView ), 1, nMode ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,, {|Self|( aGet[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ]:cText( NextKey( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], D():Articulos( nView ) ) ) )}, nil, "Bot",, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Nombre" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Nombre" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Nombre" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ActTitle( nKey, nFlags, Self, nMode, oDlg ) ) }, .F., .F.,,,,,, nil,,, )














   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Matriz" ) ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Matriz" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Matriz" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( validMatrizCodigoBarras( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Matriz" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( generateMatrizCodigoBarras( aGet[ ( D():Articulos( nView ) )->( fieldpos( "Matriz" ) ) ] ) )}, nil, "gc_recycle_16",, )

   oBrwCodebar                   := IXBrowse():New( oFld:aDialogs[1] )

   oBrwCodebar:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwCodebar:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
   oBrwCodebar:lRecordSelector   := .F.
   oBrwCodebar:cAlias            := dbfTmpCodebar
   oBrwCodebar:nMarqueeStyle     := 6

   oBrwCodebar:CreateFromResource( 330 )
   oBrwCodebar:lHScroll          := .F.

      with object ( oBrwCodebar:AddCol() )
         :cHeader                := "Df. Defecto"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ( dbfTmpCodebar )->lDefBar }
         :nWidth                 := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwCodebar:AddCol() )
         :cHeader                := "Código barras"
         :bEditValue             := {|| ( dbfTmpCodebar )->cCodBar }
         :nWidth                 := 250
      end

      with object ( oBrwCodebar:AddCol() )
         :cHeader                := "Val. propiedad 1"
         :bEditValue             := {|| ( dbfTmpCodebar )->cValPr1 }
         :nWidth                 := 150
      end

      with object ( oBrwCodebar:AddCol() )
         :cHeader                := "Val. propiedad 2"
         :bEditValue             := {|| ( dbfTmpCodebar )->cValPr2 }
         :nWidth                 := 150
      end

      if nMode <> 3
         oBrwCodebar:bLDblClick  := {|| WinEdtRec( oBrwCodebar, bEdtCod, dbfTmpCodebar, , , aTmp ) }
      end





   aBtn[2] := TButton():ReDefine( 300, {||( WinAppRec( oBrwCodebar, bEdtCod, dbfTmpCodebar, , , aTmp ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )





   aBtn[3] := TButton():ReDefine( 310, {||( WinEdtRec( oBrwCodebar, bEdtCod, dbfTmpCodebar, , , aTmp ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )





   aBtn[4] := TButton():ReDefine( 320, {||( WinDelRec( oBrwCodebar, dbfTmpCodebar ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( ExpFamilia( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ], oSay[ 3 ], aGet ) )},,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

   if uFieldEmpresa( "lBRFAMTRE" )
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ]:bHelp  := {|| browseHashFamilia( aGet[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ] ) }
   else
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ]:bHelp  := {|| BrwFamilia( aGet[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ], oSay[ 3 ] ) }
   end

   if ( "RISI" $ appParamsMain() )
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ]:bWhen    := {|| nMode == 1 .OR. nMode == 4 }
   else
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "FAMILIA" ) ) ]:bWhen    := {|| nMode <> 3 }
   end





   oSay[3] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSay[3], cSay[3]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )



   oNombre := TSay():ReDefine( 888, {|| "Tipo artículo"}, oFld:aDialogs[1],,,, .F.,, .F., .F., )








   aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCODTIP" ) ) ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "CCODTIP" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "CCODTIP" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( oTipArt:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCODTIP" ) ) ], oSay[9] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oTipArt:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCODTIP" ) ) ] ) )}, nil, "LUPA",, )






   oSay[9] := TGetHlp():ReDefine( 271, { | u | If( PCount()==0, cSay[9], cSay[9]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( .F. )},, .F., .T.,,,,,, nil,,, )













   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFab" ) ) ] := TGetHlp():ReDefine( ( 235 ), { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodFab" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodFab" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( oFabricantes:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFab" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFab" ) ) ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oFabricantes:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFab" ) ) ] ) )}, nil, "LUPA",, ( 236 ) )




   TSay():ReDefine( 900, {||   "Familia"}, oFld:aDialogs[1],,,, .F.,, .F., .F., )









   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodCate" ) ) ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodCate" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodCate" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( cCategoria( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodCate" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodCate" ) ) ]:oHelpText, oBmpCategoria ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCategoria( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodCate" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodCate" ) ) ]:oHelpText, oBmpCategoria ) )}, nil, "LUPA",, 231 )




   oBmpCategoria := TBitmap():ReDefine( 232,,, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )




   TSay():ReDefine( 800, {||   getConfigTraslation( "Temporada" )}, oFld:aDialogs[1],,,, .F.,, .F., .F., )









   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp" ) ) ] := TGetHlp():ReDefine( 355, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( cTemporada( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp" ) ) ], dbfTemporada, aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp" ) ) ]:oHelpText, oBmpTemporada ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwTemporada( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodTemp" ) ) ]:oHelpText, oBmpTemporada ) )}, nil, "LUPA",, 356 )




   oBmpTemporada := TBitmap():ReDefine( 357,,, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )








   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodEst" ) ) ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodEst" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodEst" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( cEstadoArticulo( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodEst" ) ) ], D():EstadoArticulo( nView ), aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodEst" ) ) ]:oHelpText, oBmpEstado ) )},,,,,, .F., {||     ( nMode == 1 .OR. oUser():lAdministrador() )},, .F., .F.,,,,, {|Self|( BrwEstadoArticulo( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodEst" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodEst" ) ) ]:oHelpText, oBmpEstado ) )}, nil, "LUPA",, 401 )




   oBmpEstado := TBitmap():ReDefine( 402,,, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )




   TSay():ReDefine( 221, {||   getConfigTraslation( "Ubicación" )}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cDesUbi" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cDesUbi" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

   bmpImage             := TImage():ReDefine( 500,, cFileBmpName( cImgArticulo( aTmp ) ), oDlg, , , .F., .T., , , .F. )

   bmpImage:SetColor( , GetSysColor( 15 ) )
   bmpImage:bLClicked   := {|| ShowImage( bmpImage ) }
   bmpImage:bRClicked   := {|| ShowImage( bmpImage ) }









   oBmpAdicionales := TBitmap():ReDefine( 500, "gc_information_48",, oFld:aDialogs[6],,, .F., .F.,,, .F.,,, .T. )




   TCheckBox():ReDefine( 600, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lLote" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lLote" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TGetHlp():ReDefine( 610, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cLote" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cLote" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lLote" ) ) ] )},, .F., .F.,,,,,, nil,,, )




   aGet[ ( D():Articulos( nView ) )->( fieldpos( "lObs" ) ) ] := TCheckBox():ReDefine( 139, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lObs" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lObs" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,, .F.,, .F. )








   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cExtFld" ) ) ] := TGetHlp():ReDefine( 235, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cExtFld" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cExtFld" ) ) ]:= u ) }, oFld:aDialogs[6],,, {||    ( oCamposExtra:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cExtFld" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cExtFld" ) ) ]:oHelpText, "cNombre" ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( oCamposExtra:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cExtFld" ) ) ], "Clientes" ) )}, nil, "LUPA",, 236 )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "lNumSer" ) ) ] := TCheckBox():ReDefine( 136, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lNumSer" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lNumSer" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 138, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lAutSer" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lAutSer" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lDonativ" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lDonativ" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )








   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDuracion" ) ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDuracion" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDuracion" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nTipDur" ) ) ] := TComboBox():ReDefine( 251, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipDur" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTipDur" ) ) ]:= u ) }, { "Dia (s)", "Mes (es)", "Año (s)" }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldpos( "nTipDur" ) ) ]',,,,,,, )




   TCheckBox():ReDefine( 280, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lTipAcc" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lTipAcc" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lFacCnv" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lFacCnv" ) ) ]:= u ) }, oFld:aDialogs[6],, {||( ChangeFactorConversion( aTmp, aGet ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nFacCnv" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nFacCnv" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nFacCnv" ) ) ]:= u ) }, oFld:aDialogs[6],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lFacCnv" ) ) ] )},, .F., .F.,,,,,, nil,,, )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodEdi" ) ) ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodEdi" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodEdi" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cRefAux" ) ) ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cRefAux" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cRefAux" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cRefAux2" ) ) ] := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cRefAux2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cRefAux2" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc1" ) ) ] := TGetHlp():ReDefine( 292, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc1" ) ) ]:= u ) }, oFld:aDialogs[6],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc2" ) ) ] := TGetHlp():ReDefine( 293, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc2" ) ) ]:= u ) }, oFld:aDialogs[6],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc3" ) ) ] := TGetHlp():ReDefine( 294, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc3" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nIncPrc3" ) ) ]:= u ) }, oFld:aDialogs[6],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









   oBmpImagenes := TBitmap():ReDefine( 500, "gc_hand_touch_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )




   TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LINCTCL" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LINCTCL" ) ) ]:= u ) }, oFld:aDialogs[4],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )










   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nPosTpv" ) ) ] := TGetHlp():ReDefine( 225, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nPosTpv" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nPosTpv" ) ) ]:= u ) }, oFld:aDialogs[4],, "999", {||    ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nPosTpv" ) ) ] >= 0 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nPosTpv" ) ) ] <= 999 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      ( 0 )}, {||      ( 99 )},, nil,,, )




   TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CDESTCL" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CDESTCL" ) ) ]:= u ) }, oFld:aDialogs[4],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ]:= u ) }, oFld:aDialogs[4],,,, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ],,,, .F.,,, .F., .F.,,,,, {|Self|( ColorFam( aGet[ ( D():Articulos( nView ) )->( fieldpos( "nColBtn" ) ) ] ) )}, nil, "gc_photographic_filters_16",, )









   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ]:= u ) }, oFld:aDialogs[4],,, {||    ( ChgBmp( cImgArticulo ( aTmp ), bmpImage ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( cImgArticulo ( aTmp ), bmpImage ) ) }, .F., .F.,,,,, {|Self|( GetBmp( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ], bmpImage ) )}, nil, "Lupa",, )





   oImpComanda1 := TComboBox():ReDefine( 450, { | u | If( PCount()==0, cImpComanda1, cImpComanda1:= u ) }, aTiposImpresoras, oFld:aDialogs[4],,,,,,, .F., {||        ( nMode <> 3 )},,,,,, "oImpComanda1",,,,,,, )





   oImpComanda2 := TComboBox():ReDefine( 460, { | u | If( PCount()==0, cImpComanda2, cImpComanda2:= u ) }, aTiposImpresoras, oFld:aDialogs[4],,,,,,, .F., {||        ( nMode <> 3 )},,,,,, "oImpComanda2",,,,,,, )









   aGet[ ( D():Articulos( nView ) )->( fieldPos( "cOrdOrd" ) ) ] := TGetHlp():ReDefine( 470, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cOrdOrd" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cOrdOrd" ) ) ]:= u ) }, oFld:aDialogs[4],,, {||       ( oOrdenComanda:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cOrdOrd" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldPos( "cOrdOrd" ) ) ]:oHelpText ) )},,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oOrdenComanda:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cOrdOrd" ) ) ] ) )}, nil, "Lupa",, 471 )




   TCheckBox():ReDefine( 480, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPeso" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPeso" ) ) ]:= u ) }, oFld:aDialogs[4],,,,,,, .F., {||        ( nMode <> 3 )}, .F. )









   aGet[ ( D():Articulos( nView ) )->( fieldPos( "cMenu" ) ) ] := TGetHlp():ReDefine( 490, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cMenu" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cMenu" ) ) ]:= u ) }, oFld:aDialogs[4],,, {||       ( oTpvMenu:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cMenu" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldPos( "cMenu" ) ) ]:oHelpText ) )},,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oTpvMenu:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cMenu" ) ) ] ) )}, nil, "Lupa",, 491 )










   oBmpPrecios := TBitmap():ReDefine( 500, "gc_symbol_euro_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )















   aGet[( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ] := TGetHlp():ReDefine( 800, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ]:= u ) }, oFld:aDialogs[2],, "@!", {||    (  cTiva(   aGet[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], D():TiposIva( nView ), oSay[2] ), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta1" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta2" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta3" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta4" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta5" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta6" ) ) ]:lValid(), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwIva( aGet[( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], nil , oSay[2] ) )}, nil, "LUPA",, )




   oSay[2] := TGetHlp():ReDefine( 801, { | u | If( PCount()==0, cSay[2], cSay[2]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









   aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ] := TGetHlp():ReDefine( 810, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( oNewImp:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ], oSay[ 10 ], "cNomImp", .T., .T., "0" ), changeImpuestoEspecial( oGetValNewImp, aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( changeImpuestoEspecial( oGetValNewImp, aTmp ) ) }, .F., .F.,,,,, {|Self|( oNewImp:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ], "cCodImp" ) )}, nil, "LUPA",, )




   oSay[10] := TGetHlp():ReDefine( 811, { | u | If( PCount()==0, cSay[10], cSay[10]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





   oGetValNewImp := TGetHlp():ReDefine( 812, { | u | If( PCount()==0, nGetValNewImp, nGetValNewImp:= u ) }, oFld:aDialogs[2],, cPouDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









   aGet[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ]:= u ) }, oFld:aDialogs[2],, cPinDiv, {||       ( ValidPrecioCosto( aGet, oSayWeb ) )},,,,,, .F., {||        ( !lEscandallo( aTmp ) .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   oCosto := TSay():ReDefine( 111, {||   nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit )}, oFld:aDialogs[2], cPinDiv,,, .F.,, .F., .F., )








   aBtnDiv[ 5 ] := TButton():ReDefine( 510, {||( CodificacionProveedor( aTmp, aGet, nMode ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )








   oSay[ 18 ] := TSay():ReDefine( 171, {|| cSay[ 18 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F., )



   oSay[ 19 ] := TSay():ReDefine( 211, {|| cSay[ 19 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F., )



   oSay[ 20 ] := TSay():ReDefine( 251, {|| cSay[ 20 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F., )



   oSay[ 21 ] := TSay():ReDefine( 291, {|| cSay[ 21 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F., )



   oSay[ 22 ] := TSay():ReDefine( 331, {|| cSay[ 22 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F., )



   oSay[ 23 ] := TSay():ReDefine( 371, {|| cSay[ 23 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F., )







   TCheckBox():ReDefine( 821, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1" ) ) ] := TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )

















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef1" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef1" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 11 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef1"  ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta1" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva1") ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], oSayWeb[ 1 ] ) )},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )











   oSay[ 11 ] := TComboBox():ReDefine( 165, { | u | If( PCount()==0, cSay[ 11 ], cSay[ 11 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef1" ) ) ]:lValid(), ), if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva1") ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta1" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 11 ]",,,,,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 11 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC" ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF1"  ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA1") ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ], oSayWeb[ 1 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA1" ) ) ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 11 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA1") ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF1"  ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ], oSayWeb[ 1 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )








   TCheckBox():ReDefine( 822, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC2" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "LBNF2" ) ) ] := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF2" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 12 ] := TComboBox():ReDefine( 205, { | u | If( PCount()==0, cSay[ 12 ], cSay[ 12 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf2"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef2" ) ) ]:lValid(), ), if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc2" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva2") ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta2" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 12 ]",,,,,,, )

















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2" ) ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 12 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF2"    ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 2 ] ) )},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF2" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 12 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC2"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 2 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC2" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 12 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC2"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2"  ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 2 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC2" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )








   TCheckBox():ReDefine( 823, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC3" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC3" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "LBNF3" ) ) ] := TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF3" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF3" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 13 ] := TComboBox():ReDefine( 245, { | u | If( PCount()==0, cSay[ 13 ], cSay[ 13 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf3"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef3" ) ) ]:lValid(), ), if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc3" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva3") ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta3" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 13 ]",,,,,,, )

















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3" ) ) ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 13 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF3"    ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 3 ] ) )},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF3" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3" ) ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 13 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC3"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 3 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC3" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 13 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC3"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3"  ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 3 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC3" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )








   TCheckBox():ReDefine( 824, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC4" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC4" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "LBNF4" ) ) ] := TCheckBox():ReDefine( 270, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF4" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF4" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 14 ] := TComboBox():ReDefine( 285, { | u | If( PCount()==0, cSay[ 14 ], cSay[ 14 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf4"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef4" ) ) ]:lValid(), ), if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc4" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva4") ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta4" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 14 ]",,,,,,, )

















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4" ) ) ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 14 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF4"    ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 4 ] ) )},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF4" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4" ) ) ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 14 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC4"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 4 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC4" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 14 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC4"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4"  ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 4 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC4" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )








   TCheckBox():ReDefine( 825, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC5" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC5" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "LBNF5" ) ) ] := TCheckBox():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF5" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF5" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 15 ] := TComboBox():ReDefine( 325, { | u | If( PCount()==0, cSay[ 15 ], cSay[ 15 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf5"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef5" ) ) ]:lValid(), ), if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc5" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva5") ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta5" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 15 ]",,,,,,, )

















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 15 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF5"    ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 5 ] ) )},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF5" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5" ) ) ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 15 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC5"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 5 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC5" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 15 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC5"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ], oSayWeb[ 5 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC5" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )









   TCheckBox():ReDefine( 826, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC6" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC6" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "LBNF6" ) ) ] := TCheckBox():ReDefine( 350, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF6" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF6" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||        ( nMode <> 3 )}, .F. )











   oSay[ 16 ] := TComboBox():ReDefine( 365, { | u | If( PCount()==0, cSay[ 16 ], cSay[ 16 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lBnf6"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef6" ) ) ]:lValid(), ), if (  aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc6" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva6") ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta6" ) ) ]:lValid() ) )},,,, .F., {||        ( nMode <> 3 )},,,,,, "oSay[ 16 ]",,,,,,, )

















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef6" ) ) ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef6" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Benef6" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 16 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF6"    ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF6"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 6 ] ) )},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF6" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6" ) ) ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 16 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC6"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF6"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 6 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC6" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )
















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 16 ]:nAt <= 1, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC6"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"  ) ) ], nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit ) ) , aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF6"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6"  ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 6 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAINC6" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )








   TCheckBox():ReDefine( 827, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAPVER" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAPVER" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )







   aGet[ ( D():Articulos( nView ) )->( fieldpos( "NPNTVER1" ) ) ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPNTVER1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPNTVER1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPpvDiv, {||    ( aGet[ ( D():Articulos( nView ) )->( fieldpos( "NPNVIVA1" ) ) ]:cText( ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPNTVER1" ) ) ] * nIva( D():TiposIva( nView ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA" ) )] ) / 100 ) + aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPNTVER1" ) ) ] ), .T. )},,,,,, .F., {||     ( stdCol( !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAPVER" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )







   aGet[ ( D():Articulos( nView ) )->( fieldpos( "NPNVIVA1" ) ) ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPNVIVA1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPNVIVA1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPpvDiv, {||    ( aGet[ ( D():Articulos( nView ) )->( fieldpos( "NPNTVER1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPNVIVA1" ) ) ] / ( 1 + nIva( D():TiposIva( nView ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TIPOIVA" ) )] ) / 100 ) ), .T. )},,,,,, .F., {||     ( stdCol( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LIVAPVER" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVPREC" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVPREC" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVPREC" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







   aGet[ ( D():Articulos( nView ) )->( fieldpos( "NRENMIN" ) ) ] := TGetHlp():ReDefine( 600, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NRENMIN" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NRENMIN" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,, {|| 0}, {|| 100},, nil,,, )













      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt1" ) ) ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt1" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt2" ) ) ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt2" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt3" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt3" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt3" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt4" ) ) ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt4" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt4" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt5" ) ) ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt5" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt5" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt6" ) ) ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt6" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoArt6" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )


















































      oBmpDescripciones := TBitmap():ReDefine( 500, "gc_user_message_48",, oFld:aDialogs[15],,, .F., .F.,,, .F.,,, .T. )





      TButton():ReDefine( 510, {||( WinAppRec( oBrwLeng, bEdtLeng, dbfTmpLeng, , , aTmp ) )}, oFld:aDialogs[15],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 511, {||( WinEdtRec( oBrwLeng, bEdtLeng, dbfTmpLeng, , , aTmp ) )}, oFld:aDialogs[15],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 512, {||( dbDelRec( oBrwLeng, dbfTmpLeng ) )}, oFld:aDialogs[15],,, .F., {||     ( nMode <> 3 )},,, .F. )

      oBrwLeng                   := IXBrowse():New( oFld:aDialogs[15] )

      oBrwLeng:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLeng:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLeng:lHScroll          := .F.
      oBrwLeng:cAlias            := dbfTmpLeng
      oBrwLeng:nMarqueeStyle     := 6
      oBrwLeng:cName             := "Articulos.Lenguajes"

      oBrwLeng:CreateFromResource( 100 )

      with object ( oBrwLeng:AddCol() )
         :cHeader                := "Lenguaje"
         :bEditValue             := {|| AllTrim( ( dbfTmpLeng )->cCodLen ) }
         :nWidth                 := 200
      end

      with object ( oBrwLeng:AddCol() )
         :cHeader                := "Descripción"
         :bEditValue             := {|| ( dbfTmpLeng )->cDesTik }
         :nWidth                 := 400
      end

      with object ( oBrwLeng:AddCol() )
         :cHeader                := "Descripción larga"
         :bEditValue             := {|| ( dbfTmpLeng )->cDesArt }
         :nWidth                 := 400
         :lHide                  := .T.
      end

      if nMode <> 3
         oBrwLeng:bLDblClick  := {|| WinEdtRec( oBrwLeng, bEdtLeng, dbfTmpLeng, , , aTmp ) }
      end














      TMultiGet():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Descrip" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Descrip" ) ) ]:= u ) }, oFld:aDialogs[5],,,,,,, .F., {||         ( nMode <> 3 )}, .F.,, )






      aGet[ ( D():Articulos( nView ) )->( fieldpos( "mComent" ) ) ] := TMultiGet():ReDefine( 370, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "mComent" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "mComent" ) ) ]:= u ) }, oFld:aDialogs[5],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 380, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lMosCom" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lMosCom" ) ) ]:= u ) }, oFld:aDialogs[5],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )









      aGet[ ( D():Articulos( nView ) )->( fieldpos( "LastChg" ) ) ] := TGetHlp():ReDefine( 195, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LastChg" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LastChg" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( D():Articulos( nView ) )->( fieldpos( "dFecChg" ) ) ] := TGetHlp():ReDefine( 196, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "dFecChg" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "dFecChg" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cTimChg" ) ) ] := TGetHlp():ReDefine( 198, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTimChg" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTimChg" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( D():Articulos( nView ) )->( fieldpos( "dFecLgt" ) ) ] := TGetHlp():ReDefine( 197, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "dFecLgt" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "dFecLgt" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      oBmpPropiedades := TBitmap():ReDefine( 510, "gc_bookmarks_48",, oFld:aDialogs[8],,, .F., .F.,,, .F.,,, .T. )












      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:= u ) }, oFld:aDialogs[8],, "@!",,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil, "Lupa",, 361 )

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:bValid  := {|| cProp( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:oHelpText ) }
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:bHelp   := {|| brwProp( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:oHelpText ) }











      TBtnBmp():ReDefine( 362, "gc_document_text_pencil_12",,,,,{|| brwSelectPropiedad( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ], @aTmp[ ( D():Articulos( nView ) )->( fieldpos( "mValPrp1" ) ) ] ) }, oFld:aDialogs[8], .F., , .F., "Seleccionar propiedades" )








      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:= u ) }, oFld:aDialogs[8],, "@!",,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil, "Lupa",, 371 )

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:bValid  := {|| cProp( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:oHelpText ) }
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:bHelp   := {|| brwProp( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:oHelpText ) }

      TBtnBmp():ReDefine( 372, "gc_document_text_pencil_12",,,,,{|| brwSelectPropiedad( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ], @aTmp[ ( D():Articulos( nView ) )->( fieldpos( "mValPrp2" ) ) ] ) }, oFld:aDialogs[8], .F., , .F., "Seleccionar propiedades" )



      oBrwDiv                 := IXBrowse():New( oFld:aDialogs[8] )

      oBrwDiv:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDiv:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDiv:cAlias          := dbfTmpVta
      oBrwDiv:nMarqueeStyle   := 6
      oBrwDiv:cName           := "Articulos.Propiedades"

      with object ( oBrwDiv:AddCol() )
         :cHeader          := "Prop. 1"
         :cSortOrder       := "cValPr1"
         :bEditValue       := {|| ( dbfTmpVta )->cValPr1 }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := "Nombre propiedad 1"
         :bEditValue       := {|| nombrePropiedad( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ], ( dbfTmpVta )->cValPr1, nView ) }
         :nWidth           := 100
         :lHide            := .T.
      end

      if retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp1" ) ) ], dbfPro, "lColor" )

         with object ( oBrwDiv:AddCol() )
            :cHeader       := "C. Prp 1"
            :bStrData      := {|| "" }
            :nWidth        := 16
            :bClrStd       := {|| { nRGB( 0, 0, 0), retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp1" ) ) ] + ( dbfTmpVta )->cValPr1, dbfTblPro, "nColor" ) } }
            :bClrSel       := {|| { nRGB( 0, 0, 0), retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp1" ) ) ] + ( dbfTmpVta )->cValPr1, dbfTblPro, "nColor" ) } }
            :bClrSelFocus  := {|| { nRGB( 0, 0, 0), retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp1" ) ) ] + ( dbfTmpVta )->cValPr1, dbfTblPro, "nColor" ) } }
         end

      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := "Prop. 2"
         :cSortOrder       := "cValPr2"
         :bEditValue       := {|| ( dbfTmpVta )->cValPr2 }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := "Nombre propiedad 2"
         :bEditValue       := {|| nombrePropiedad( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ], ( dbfTmpVta )->cValPr2, nView ) }
         :nWidth           := 100
         :lHide            := .T.
      end

      if retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp2" ) ) ], dbfPro, "lColor" )

         with object ( oBrwDiv:AddCol() )
            :cHeader       := "C. Prp2"
            :bStrData      := {|| "" }
            :nWidth        := 16
            :bClrStd       := {|| { nRGB( 0, 0, 0), retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp2" ) ) ] + ( dbfTmpVta )->cValPr2, dbfTblPro, "nColor" ) } }
            :bClrSel       := {|| { nRGB( 0, 0, 0), retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp2" ) ) ] + ( dbfTmpVta )->cValPr2, dbfTblPro, "nColor" ) } }
            :bClrSelFocus  := {|| { nRGB( 0, 0, 0), retFld( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "cCodPrp2" ) ) ] + ( dbfTmpVta )->cValPr2, dbfTblPro, "nColor" ) } }
         end

      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := "Costo"
         :bEditValue       := {|| ( dbfTmpVta )->nPreCom }
         :nWidth           := 100
         :cEditPicture     := cPinDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bEditValue       := {|| ( dbfTmpVta )->nPreVta1 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + Space( 1 ) + cImp()
         :bEditValue       := {|| ( dbfTmpVta )->nPreIva1 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bEditValue       := {|| ( dbfTmpVta )->nPreVta2 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + Space( 1 ) + cImp()
         :bEditValue       := {|| ( dbfTmpVta )->nPreIva2 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bEditValue       := {|| ( dbfTmpVta )->nPreVta3 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + Space( 1 ) + cImp()
         :bEditValue       := {|| ( dbfTmpVta )->nPreIva3 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bEditValue       := {|| ( dbfTmpVta )->nPreVta4 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + Space( 1 ) + cImp()
         :bEditValue       := {|| ( dbfTmpVta )->nPreIva4 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bEditValue       := {|| ( dbfTmpVta )->nPreVta5 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + Space( 1 ) + cImp()
         :bEditValue       := {|| ( dbfTmpVta )->nPreIva5 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bEditValue       := {|| ( dbfTmpVta )->nPreVta6 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwDiv:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + Space( 1 ) + cImp()
         :bEditValue       := {|| ( dbfTmpVta )->nPreIva6 }
         :nWidth           := 100
         :cEditPicture     := cPouDiv
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      if nMode <> 3
         oBrwDiv:bLDblClick   := {|| WinEdtRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) }
      end

      oBrwDiv:CreateFromResource( 430 )





   aBtnDiv[ 1 ] := TButton():ReDefine( 500, {||( WinAppRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) )}, oFld:aDialogs[8],,, .F., {||     ( !empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ] ) .AND. nMode <> 3 )},,, .F. )





   aBtnDiv[ 2 ] := TButton():ReDefine( 501, {||( WinEdtRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) )}, oFld:aDialogs[8],,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtnDiv[ 3 ] := TButton():ReDefine( 502, {||( WinDelRec( oBrwDiv, dbfTmpVta ) )}, oFld:aDialogs[8],,, .F., {||     ( nMode <> 3 )},,, .F. )









   oBmpLogistica := TBitmap():ReDefine( 500, "gc_small_truck_48",, oFld:aDialogs[9],,, .F., .F.,,, .F.,,, .T. )







   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 425 )

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ]:bValid := {|| ( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ]:oHelpText:cText( RetFld( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ], oFraPub:GetAlias() ) ), .T. ) }
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ]:bHelp  := {|| oFraPub:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ] ) }











   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 431 )

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ]:bValid   := {|| oSeccion:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ]:oHelpText, "cDesSec", .T., .T., "0" ) }
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ]:bHelp    := {|| oSeccion:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodSec" ) ) ] ) }






   TGetHlp():ReDefine( 181, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NBULENT" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NBULENT" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NCAJENT" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NCAJENT" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NUNICAJA" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NUNICAJA" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )










   aGet[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ]:= u ) }, oFld:aDialogs[9],, "@!", {||    ( oUndMedicion:Existe( aGet[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ]:oHelpText, "cNombre" ), lValidUndMedicion( aTmp, aGet ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oUndMedicion:Buscar( aGet[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ] ) )}, nil, "LUPA",, 254 )








   aGet[ ( D():Articulos( nView ) )->( fieldpos( "NLNGART" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NLNGART" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NLNGART" ) ) ]:= u ) }, oFld:aDialogs[9],, MasUnd(),,,,,,, .F., {||        ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 141, )








   aGet[( D():Articulos( nView ) )->( fieldpos( "NALTART" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NALTART" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NALTART" ) ) ]:= u ) }, oFld:aDialogs[9],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 151, )








   aGet[( D():Articulos( nView ) )->( fieldpos( "NANCART" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NANCART" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NANCART" ) ) ]:= u ) }, oFld:aDialogs[9],, MasUnd(),,,,,,, .F., {||    ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 161, )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NPESOKG" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NPESOKG" ) ) ]:= u ) }, oFld:aDialogs[9],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "CUNDDIM" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "CUNDDIM" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NVOLUMEN" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NVOLUMEN" ) ) ]:= u ) }, oFld:aDialogs[9],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "CVOLUMEN" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "CVOLUMEN" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )














   TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NLNGCAJ" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NLNGCAJ" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "CUNDCAJ" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "CUNDCAJ" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NALTCAJ" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NALTCAJ" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NANCCAJ" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NANCCAJ" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NPESCAJ" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NPESCAJ" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "CCAJPES" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "CCAJPES" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NVOLCAJ" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NVOLCAJ" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "CCAJVOL" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "CCAJVOL" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







   TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NCAJPLT" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NCAJPLT" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NBASPLT" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NBASPLT" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "NALTPLT" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "NALTPLT" ) ) ]:= u ) }, oFld:aDialogs[9],, cPicUnd,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nUndPal" ) ) ] := TGetHlp():ReDefine( 401, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nUndPal" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nUndPal" ) ) ]:= u ) }, oFld:aDialogs[9],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[( D():Articulos( nView ) )->( fieldpos( "CUNDPLT" ) ) ], aTmp[( D():Articulos( nView ) )->( fieldpos( "CUNDPLT" ) ) ]:= u ) }, oFld:aDialogs[9],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "M2Palet" ) ) ] := TGetHlp():ReDefine( 402, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "M2Palet" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "M2Palet" ) ) ]:= u ) }, oFld:aDialogs[9],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "M2Pieza" ) ) ] := TGetHlp():ReDefine( 403, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "M2Pieza" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "M2Pieza" ) ) ]:= u ) }, oFld:aDialogs[9],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










   oBmpStocks := TBitmap():ReDefine( 500, "gc_package_48",, oFld:aDialogs[10],,, .F., .F.,,, .F.,,, .T. )





   TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NCTLSTOCK" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NCTLSTOCK" ) ) ]:= u ) }, oFld:aDialogs[10],, { 101, 102, 103 }, {||( if( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NCTLSTOCK" ) ) ] <> 1, oBrwStk:Hide(), oBrwStk:Show() ) )},,,, .F., {||     ( nMode <> 3 )}, )









   aGet[ ( D():Articulos( nView ) )->( fieldpos( "NMINIMO" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NMINIMO" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NMINIMO" ) ) ]:= u ) }, oFld:aDialogs[10],, cPicUnd, {||    aTmp[( D():Articulos( nView ) )->( fieldpos( "NMINIMO" ) ) ] >= 0},,,,,, .F., {||     ( aTmp[( D():Articulos( nView ) )->( fieldpos( "NCTLSTOCK" ) ) ] <= 1 .AND. nMode <> 3 )},, .F., .T.,,, {|| 0},,, nil,, 111, )










   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nMaximo" ) ) ] := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nMaximo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nMaximo" ) ) ]:= u ) }, oFld:aDialogs[10],, cPicUnd, {||    aTmp[( D():Articulos( nView ) )->( fieldpos( "nMaximo" ) ) ] >= 0}, "N/W*",,,,, .F., {||     ( aTmp[( D():Articulos( nView ) )->( fieldpos( "NCTLSTOCK" ) ) ] <= 1 .AND. nMode <> 3 )},, .F., .T.,,, {|| 0},,, nil,, 116, )




   oBtnStockAlmacenes := TButton():ReDefine( 300, {||( StockAlmacenes( aTmp, aGet, nMode ) )}, oFld:aDialogs[10],,, .F.,,,, .F. )








   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NCNTACT" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NCNTACT" ) ) ]:= u ) }, oFld:aDialogs[10],, "@E 999,999,999,999", {||    aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NCNTACT" ) ) ] >= 0}, "N/W*",,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NCTLSTOCK" ) ) ] == 2 .AND. nMode <> 3 )},, .F., .T.,,, {|| 1},,, nil,,, )




   TCheckBox():ReDefine( 127, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LMSGMOV" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LMSGMOV" ) ) ]:= u ) }, oFld:aDialogs[10],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 126, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LMSGVTA" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LMSGVTA" ) ) ]:= u ) }, oFld:aDialogs[10],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 128, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LMSGSER" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LMSGSER" ) ) ]:= u ) }, oFld:aDialogs[10],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 125, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LNOTVTA" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LNOTVTA" ) ) ]:= u ) }, oFld:aDialogs[10],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   oBrwStk                 := IXBrowse():New( oFld:aDialogs[10] )

   oBrwStk:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwStk:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwStk:lFooter         := .T.
   oBrwStk:lHScroll        := .F.
   oBrwStk:lRecordSelector := .F.
   oBrwStk:nMarqueeStyle   := 6
   oBrwStk:cName           := "Artículo.Stocks"

   oBrwStk:bRClicked       := {| nRow, nCol, nFlags | oBrwStk:RButtonDown( nRow, nCol, nFlags ) }


   oBrwStk:SetArray( {}, , , .F. )

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Código"
         :nWidth              := 40
         :bStrData            := {|| if( !empty( oBrwStk:aArrayData ), hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "almacen" ), "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Almacén"
         :nWidth              := 120
         :bStrData            := {|| if( !empty( oBrwStk:aArrayData ), RetAlmacen( hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "almacen" ), dbfAlmT ), "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Prop. 1"
         :nWidth              := 120
         :bStrData            := {|| if( !empty( oBrwStk:aArrayData ), hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "valor1" ), "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Nom. Prop. 1"
         :nWidth              := 120
         :bStrData            := {|| if( !empty( oBrwStk:aArrayData ), PropiedadesLineasModel():getNombre( hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "propiedad1" ), hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "valor1" ) ), "" ) }
         :lHide               := .T.
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Prop. 2"
         :nWidth              := 120
         :bStrData            := {|| if( !empty( oBrwStk:aArrayData ), hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "valor2" ), "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Nom. Prop. 2"
         :nWidth              := 120
         :bStrData            := {|| if( !empty( oBrwStk:aArrayData ), PropiedadesLineasModel():getNombre( hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "propiedad2" ), hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "valor2" ) ), "" ) }
         :lHide               := .T.
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Lote"
         :nWidth              := 60
         :bStrData            := {|| if( !empty( oBrwStk:aArrayData ), hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "lote" ), "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Unidades"
         :nWidth              := 80
         :bEditValue          := {|| if( !empty( oBrwStk:aArrayData ), hGet( oBrwStk:aArrayData[ oBrwStk:nArrayAt ], "unidades" ), 0 ) }
         :cEditPicture        := MasUnd()
         :nFooterType         := 1
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

   oBrwStk:CreateFromResource( 130 )




   TCheckBox():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LCOMBUS" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LCOMBUS" ) ) ]:= u ) }, oFld:aDialogs[10],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )









   oBmpContabilidad := TBitmap():ReDefine( 500, "gc_folders2_48",, oFld:aDialogs[11],,, .F., .F.,,, .F.,,, .T. )













   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVta" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVta" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVta" ) ) ]:= u ) }, oFld:aDialogs[11],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( lValidaSubcuenta(  aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVta" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Nombre"  ) ) ], oGetSubCta, oGetSaldo ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwChkSubcuenta(   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVta" ) ) ], oGetSubCta ) )}, nil, "LUPA",, )





   oGetSubCta := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cGetSubCta, cGetSubCta:= u ) }, oFld:aDialogs[11],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oGetSaldo := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, nGetSaldo, nGetSaldo:= u ) }, oFld:aDialogs[11],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )













   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVtaDev" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVtaDev" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVtaDev" ) ) ]:= u ) }, oFld:aDialogs[11],, ( replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( lValidaSubcuenta(  aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVtaDev" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Nombre" ) )     ], oGetSubcuentaVentaDevolucion, oGetSaldoSubcuentaVentaDevolucion ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwChkSubcuenta(   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVtaDev" ) ) ], oGetSubcuentaVentaDevolucion ) )}, nil, "LUPA",, )





   oGetSubcuentaVentaDevolucion := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cGetSubcuentaVentaDevolucion, cGetSubcuentaVentaDevolucion:= u ) }, oFld:aDialogs[11],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oGetSaldoSubcuentaVentaDevolucion := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, nGetSaldoSubcuentaVentaDevolucion, nGetSaldoSubcuentaVentaDevolucion:= u ) }, oFld:aDialogs[11],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )













   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaCom" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaCom" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaCom" ) ) ]:= u ) }, oFld:aDialogs[11],, ( replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( lValidaSubcuenta(  aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaCom" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Nombre"  ) ) ], oGetCtaCom, oGetSalCom ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwChkSubcuenta(   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaCom" ) ) ], oGetCtaCom ) )}, nil, "LUPA",, )





   oGetCtaCom := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cGetCtaCom, cGetCtaCom:= u ) }, oFld:aDialogs[11],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oGetSalCom := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, nGetSalCom, nGetSalCom:= u ) }, oFld:aDialogs[11],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )













   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaComDev" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaComDev" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaComDev" ) ) ]:= u ) }, oFld:aDialogs[11],, ( replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( lValidaSubcuenta(  aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaComDev" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "Nombre" ) )     ], oGetSubcuentaCompraDevolucion, oGetSaldoSubcuentaCompraDevolucion ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwChkSubcuenta(   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCtaComDev" ) ) ], oGetSubcuentaCompraDevolucion ) )}, nil, "LUPA",, )





   oGetSubcuentaCompraDevolucion := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cGetSubcuentaCompraDevolucion, cGetSubcuentaCompraDevolucion:= u ) }, oFld:aDialogs[11],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oGetSaldoSubcuentaCompraDevolucion := TGetHlp():ReDefine( 142, { | u | If( PCount()==0, nGetSaldoSubcuentaCompraDevolucion, nGetSaldoSubcuentaCompraDevolucion:= u ) }, oFld:aDialogs[11],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







































































































   aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCTATRN" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCTATRN" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCTATRN" ) ) ]:= u ) }, oFld:aDialogs[11],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( lValidaSubcuenta(  aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCTATRN" ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "NOMBRE"  ) ) ], oGetCtaTrn, oGetSalTrn ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwChkSubcuenta(   aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCTATRN" ) ) ], oGetCtaTrn ) )}, nil, "LUPA",, )




   oGetCtaTrn := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cGetCtaTrn, cGetCtaTrn:= u ) }, oFld:aDialogs[11],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   oGetSalTrn := TGetHlp():ReDefine( 152, { | u | If( PCount()==0, nGetSalTrn, nGetSalTrn:= u ) }, oFld:aDialogs[11],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










   oBmpOfertas := TBitmap():ReDefine( 510, "gc_star2_48",, oFld:aDialogs[12],,, .F., .F.,,, .F.,,, .T. )

   oBrwOfe                 := IXBrowse():New( oFld:aDialogs[12] )

   oBrwOfe:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwOfe:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwOfe:cAlias          := dbfTmpOfe
   oBrwOfe:nMarqueeStyle   := 5
   oBrwOfe:cName           := "Artículo.Ofertas"

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Oferta"
      :bEditValue       := {|| ( dbfTmpOfe )->cDesOfe }
      :nWidth           := 140
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Inicio"
      :bEditValue       := {|| Dtoc( ( dbfTmpOfe )->dIniOfe ) }
      :nWidth           := 80
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Fin"
      :bEditValue       := {|| Dtoc( ( dbfTmpOfe )->dFinOfe ) }
      :nWidth           := 80
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1 " )
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe1 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1 " ) + cImp()
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva1 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2 " )
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe2 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2 " ) + cImp()
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva2 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3 " )
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe3 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3 " ) + cImp()
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva3 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4 " )
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe4 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4 " ) + cImp()
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva4 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5 " )
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe5 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5 " ) + cImp()
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva5 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6 " )
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe6 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6 " ) + cImp()
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva6 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Unidades"
      :bEditValue       := {|| ( dbfTmpOfe )->nMaxOfe }
      :nWidth           := 60
      :cEditPicture     := "@E 999,999"
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Tipo"
      :bEditValue       := {|| Trans( ( dbfTmpOfe )->nUnvOfe, "@E 999" ) + " x " + Trans( ( dbfTmpOfe )->nUncOfe, "@E 999" ) }
      :nWidth           := 40
   end

   if nMode <> 3
      oBrwOfe:bLDblClick  := {|| EdtOfeArt( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) }
   end

   oBrwOfe:bRClicked    := {| nRow, nCol, nFlags | oBrwOfe:RButtonDown( nRow, nCol, nFlags ) }

   oBrwOfe:CreateFromResource( 100 )





   aBtn[8] := TButton():ReDefine( 500, {||( AppOfeArt( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) )}, oFld:aDialogs[12],,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtn[9] := TButton():ReDefine( 501, {||( EdtOfeArt( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) )}, oFld:aDialogs[12],,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtn[10] := TButton():ReDefine( 502, {||( DelOfeArt( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) )}, oFld:aDialogs[12],,, .F., {||     ( nMode <> 3 )},,, .F. )










   oBmpEscandallos := TBitmap():ReDefine( 510, "gc_pieces_48",, oFld:aDialogs[13],,, .F., .F.,,, .F.,,, .T. )





   TCheckBox():ReDefine( 136, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ]:= u ) }, oFld:aDialogs[13],, {||( ChgKit( aTmp, aGet, oCosto ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ] := TComboBox():ReDefine( 137, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[13],,,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ] .AND. nMode <> 3 )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ]',,,,,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ] := TComboBox():ReDefine( 138, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[13],,,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ] .AND. nMode <> 3 )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ]',,,,,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ] := TComboBox():ReDefine( 139, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[13],,,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ] .AND. nMode <> 3 )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ]',,,,,,, )





   aBtn[11] := TButton():ReDefine( 500, {||( WinAppRec( oBrwKit, bEdtKit, dbfTmpKit, , , aTmp ),  Eval( oBrwKit:bValid ) )}, oFld:aDialogs[13],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   aBtn[12] := TButton():ReDefine( 501, {||( WinEdtRec( oBrwKit, bEdtKit, dbfTmpKit, , , aTmp ),  Eval( oBrwKit:bValid ) )}, oFld:aDialogs[13],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   aBtn[13] := TButton():ReDefine( 502, {||( dbDelRec( oBrwKit, dbfTmpKit ), Eval( oBrwKit:bValid ) )}, oFld:aDialogs[13],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   oBtnMoneda := TButton():ReDefine( 503, {||(  if( cDivUse == cDivEmp(), cDivUse := cDivChg(), cDivUse := cDivEmp() ), oBrwKit:Refresh() )}, oFld:aDialogs[13],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   TButton():ReDefine( 506, {||( informeEscandallo() )}, oFld:aDialogs[13],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   TButton():ReDefine( 504, {||( dbSwapUp( dbfTmpKit, oBrwKit ) )}, oFld:aDialogs[13],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   TButton():ReDefine( 505, {||( dbSwapDown( dbfTmpKit, oBrwKit ) )}, oFld:aDialogs[13],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )

   oBrwKit                 := IXBrowse():New( oFld:aDialogs[13] )

   oBrwKit:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwKit:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwKit:lFooter         := .T.
   oBrwKit:cAlias          := dbfTmpKit
   oBrwKit:nMarqueeStyle   := 5
   oBrwKit:cName           := "Artículo.Kits"

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Código"
      :bEditValue       := {|| ( dbfTmpKit )->cRefKit }
      :nWidth           := 80
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Artículo"
      :bEditValue       := {|| ( dbfTmpKit )->cDesKit }
      :nWidth           := 160
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Unidades"
      :bEditValue       := {|| ( dbfTmpKit )->nUndKit }
      :nWidth           := 70
      :cEditPicture     := "@E 999,999.999999"
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Ud"
      :bEditValue       := {|| Upper( ( dbfTmpKit )->cUnidad ) }
      :nWidth           := 30
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Factor"
      :bEditValue       := {|| nFactorConversion( ( dbfTmpKit )->cRefKit ) }
      :nWidth           := 70
      :cEditPicture     := "@E 999,999.999999"
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Costo"
      :bEditValue       := {|| nCosto( ( dbfTmpKit )->cRefKit, D():Articulos( nView ), dbfArtKit, .F., cDivUse, dbfDiv ) }
      :cEditPicture     := cPinDiv( cDivEmp(), dbfDiv )
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Total"
      :bEditValue       := {|| nCosto( ( dbfTmpKit )->cRefKit, D():Articulos( nView ), dbfArtKit, .F., cDivUse, dbfDiv ) * ( dbfTmpKit )->nUndKit * nFactorConversion( ( dbfTmpKit )->cRefKit ) }
      :bFooter          := {|| nCostoEscandallo( aTmp, dbfTmpKit, D():Articulos( nView ), dbfArtKit, .T., cDivUse, dbfDiv ) }
      :cEditPicture     := cPinDiv( cDivEmp(), dbfDiv )
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Div"
      :bEditValue       := {|| cSimDiv( cDivUse, dbfDiv ) }
      :nWidth           := 30
   end

   if nMode <> 3
      oBrwKit:bLDblClick  := {|| WinEdtRec( oBrwKit, bEdtKit, dbfTmpKit, , , aTmp ),  Eval( oBrwKit:bValid ) }
   end







      oBrwKit:bValid      := {|| oCosto:Refresh(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef1" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef2" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef3" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef4" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef5" ) ) ]:lValid(), aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef6" ) ) ]:lValid() }

   oBrwKit:bRClicked       := {| nRow, nCol, nFlags | oBrwKit:RButtonDown( nRow, nCol, nFlags ) }

   oBrwKit:CreateFromResource( 180 )










   oBmpWeb := TBitmap():ReDefine( 500, "gc_earth_48",, oFld:aDialogs[14],,, .F., .F.,,, .F.,,, .T. )







   TCheckBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LPUBINT" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LPUBINT" ) ) ]:= u ) }, oFld:aDialogs[14],, {||( ChangePublicarTemporal( aTmp ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )






   aGet[ ( D():Articulos( nView ) )->( fieldPos( "cWebShop" ) ) ] := TComboBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cWebShop" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cWebShop" ) ) ]:= u ) }, TComercioConfig():getInstance():getWebsNames(), oFld:aDialogs[14],,,,,,, .F., {||        ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPubInt" ) ) ] )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldPos( "cWebShop" ) ) ]',,,,,,, )









   TCheckBox():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lSbrInt" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lSbrInt" ) ) ]:= u ) }, oFld:aDialogs[14],, {||( ChangeTarifaPrecioWeb( aGet, aTmp ), CalculaDescuentoWeb( aGet, aTmp ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )



   oGetTarWeb     := comboTarifa():Build( { "idCombo" => 150, "uValue" => aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTarWeb" ) ) ] } )
   oGetTarWeb:Resource( oFld:aDialogs[14] )
   oGetTarWeb:setWhen(     {|| nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lSbrInt" ) ) ] } )
   oGetTarWeb:setChange(   {|| ChangeTarifaPrecioWeb( aGet, aTmp ), CalculaDescuentoWeb( aGet, aTmp ) } )




   TCheckBox():ReDefine( 124, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaWeb" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaWeb" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ]:= u ) }, oFld:aDialogs[14],, cPouDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoInt1" ) ) ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoInt1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoInt1" ) ) ]:= u ) }, oFld:aDialogs[14],, "@E 999.999999",,,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPubInt" ) ) ] .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lSbrInt" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalculaDescuentoWeb( aGet, aTmp ) ) }, .F., .T.,,, {|| 0}, {|| 100},, nil,,, )


















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:= u ) }, oFld:aDialogs[14],, cPwbDiv, {||    CalBnfPts(  .T., aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaWeb"  ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ], , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp"  ) ) ])},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPubInt" ) ) ] .AND. !aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaWeb" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( calculaPorcentajeDescuento( aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoInt1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb"  ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ] ) ) }, .F., .F.,,,,,, nil,,, )


















   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ] := TGetHlp():ReDefine( 123, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:= u ) }, oFld:aDialogs[14],, cPwbDiv, {||    ( CalBnfIva(   .T., aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaWeb"  ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto"   ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ], , aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva"  ) ) ], aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ], nDecDiv, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp"  ) ) ] ), calculaPorcentajeDescuento(   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nDtoInt1" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb"  ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPubInt" ) ) ] .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lIvaWeb" ) ) ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodWeb" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodWeb" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 211, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cIdWP" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cIdWP" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 162, "WordPress_16",,,,,{|| msgRun( "Subiendo artículo", "Espere por favor...", {|| ImportLatress():New():addOneArticulo( dbHash( D():Articulos( nView ) ) ) } ) }, oFld:aDialogs[14], .F., , .F.,  )




   TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPubPor" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPubPor" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   TMultiGet():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "MDESTEC" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "MDESTEC" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cTitSeo" ) ) ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTitSeo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTitSeo" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cDesSeo" ) ) ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cDesSeo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cDesSeo" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   aGet[ ( D():Articulos( nView ) )->( fieldpos( "cKeySeo" ) ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cKeySeo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cKeySeo" ) ) ]:= u ) }, oFld:aDialogs[14],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










   oBmpImagenes := TBitmap():ReDefine( 510, "gc_photo_landscape_48",, oFld:aDialogs[7],,, .F., .F.,,, .F.,,, .T. )





   TButton():ReDefine( 500, {||( WinAppRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode <> 3 )},,, .F. )





   TButton():ReDefine( 501, {||( WinEdtRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode <> 3 )},,, .F. )





   TButton():ReDefine( 502, {||( WinDelRec( oBrwImg, dbfTmpImg ), lChangeImage := .T. )}, oFld:aDialogs[7],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( dbSwapUp( dbfTmpImg, oBrwImg ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 504, {||( dbSwapDown( dbfTmpImg, oBrwImg ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 505, {||( ImportaImagenes( aTmp, oBrwImg ), lCargaImagenes() )}, oFld:aDialogs[7],,, .F., {||     ( nMode <> 3 )},,, .F. )

   oBrwImg                 := IXBrowse():New( oFld:aDialogs[7] )

   oBrwImg:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwImg:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwImg:cAlias          := dbfTmpImg
   oBrwImg:nMarqueeStyle   := 6
   oBrwImg:cName           := "Artículo.Imagenes"
   oBrwImg:nRowHeight      := 100
   oBrwImg:nDataLines      := 2

   with object ( oBrwImg:AddCol() )
      :cHeader             := "Seleccionada"
      :bStrData            := {|| "" }
      :bEditValue          := {|| ( dbfTmpImg )->lDefImg }
      :nWidth              := 20
      :SetCheck( { "Sel16", "Nil16" } )
   end

   with object ( oBrwImg:AddCol() )
      :cHeader             := "Imagen"
      :bEditValue          := {|| AllTrim( ( dbfTmpImg )->cNbrArt ) + Chr(13)+Chr(10) + AllTrim( ( dbfTmpImg )->cImgArt ) }
      :nWidth              := 400
   end











   with object ( oBrwImg:AddCol() )
      :cHeader             := "id"
      :bEditValue          := {|| transform( ( dbfTmpImg )->id, "9999999999" ) }
      :lHide               := .T.
      :nWidth              := 50
   end

   if nMode <> 3
      oBrwImg:bLDblClick   := {|| WinEdtRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) }
   end

   oBrwImg:bRClicked       := {| nRow, nCol, nFlags | oBrwImg:RButtonDown( nRow, nCol, nFlags ) }

   oBrwImg:CreateFromResource( 100 )









   oBmpAtipicas := TBitmap():ReDefine( 500, "gc_symbol_euro_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )





   oBtnEditAtp := TButton():ReDefine( 510, {||( if( nMode <> 3, WinEdtRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp, nMode ), ) )}, oFld:aDialogs[3],,, .F., {||     ( nMode <> 3 )},,, .F. )

   oBrwAtp                    := IXBrowse():New( oFld:aDialogs[3] )

   oBrwAtp:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwAtp:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwAtp:cAlias             := dbfTmpAtp
   oBrwAtp:nMarqueeStyle      := 6
   oBrwAtp:cName              := "Artículo.Atipicas"

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Cod. Cli."
      :bEditValue             := {|| AllTrim( ( dbfTmpAtp )->cCodCli ) }
      :nWidth                 := 60
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Cliente"
      :bEditValue             := {|| AllTrim( RetClient( ( dbfTmpAtp )->cCodCli ) ) }
      :nWidth                 := 200
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Costo"
      :bEditValue             := {|| ( dbfTmpAtp )->nPrcCom }
      :cEditPicture           := cPouDiv
      :nWidth                 := 80
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio 1"
      :bEditValue             := {|| ( dbfTmpAtp )->nPrcArt }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio IVA 1"
      :bEditValue             := {|| ( dbfTmpAtp )->nPreIva1 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio 2"
      :bEditValue             := {|| ( dbfTmpAtp )->nPrcArt2 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio IVA 2"
      :bEditValue             := {|| ( dbfTmpAtp )->nPreIva2 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio 3"
      :bEditValue             := {|| ( dbfTmpAtp )->nPrcArt3 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio IVA 3"
      :bEditValue             := {|| ( dbfTmpAtp )->nPreIva3 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio 4"
      :bEditValue             := {|| ( dbfTmpAtp )->nPrcArt4 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio IVA 4"
      :bEditValue             := {|| ( dbfTmpAtp )->nPreIva4 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio 5"
      :bEditValue             := {|| ( dbfTmpAtp )->nPrcArt5 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio IVA 5"
      :bEditValue             := {|| ( dbfTmpAtp )->nPreIva5 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio 6"
      :bEditValue             := {|| ( dbfTmpAtp )->nPrcArt6 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Precio IVA 6"
      :bEditValue             := {|| ( dbfTmpAtp )->nPreIva6 }
      :cEditPicture           := cPouDiv
      :nWidth                 := 90
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
      :lHide                  := .T.
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "% Dto"
      :bEditValue             := {|| ( dbfTmpAtp )->nDtoArt }
      :cEditPicture           := "@E 999.99"
      :nWidth                 := 75
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Inicio"
      :bEditValue             := {|| ( dbfTmpAtp )->dFecIni }
      :nWidth                 := 80
   end

   with object ( oBrwAtp:AddCol() )
      :cHeader                := "Fin"
      :bEditValue             := {|| ( dbfTmpAtp )->dFecFin }
      :nWidth                 := 80
   end

   if nMode <> 3
      oBrwAtp:bLDblClick   := {|| WinEdtRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp ) }
   end

   oBrwAtp:CreateFromResource( 100 )









   oBmpDocumentos := TBitmap():ReDefine( 600, "gc_folders_48",, oFld:aDialogs[16],,, .F., .F.,,, .F.,,, .T. )

      oBrwDoc                 := IXBrowse():New( oFld:aDialogs[16] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc
      oBrwDoc:nMarqueeStyle   := 5
      oBrwDoc:cName           := "Articulos.Documentos"
      oBrwDoc:nRowHeight      := 38
      oBrwDoc:nDataLines      := 2

      with object ( oBrwDoc:AddCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + lTrim( ( dbfTmpDoc )->cRuta ) }
         :nWidth           := 480
      end

      if ( nMode <> 3 )
         oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", rTrim( ( dbfTmpDoc )->cRuta ) ) }
      end
      oBrwDoc:bRClicked       := {| nRow, nCol, nFlags | oBrwDoc:RButtonDown( nRow, nCol, nFlags ) }

      oBrwDoc:CreateFromResource( 400 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[16],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[16],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( DbDelRec( oBrwDoc, dbfTmpDoc, nil, nil, .T. ) )}, oFld:aDialogs[16],,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[16],,, .F.,,,, .F. )





      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", rTrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[16],,, .F., {||     ( nMode <> 3 )},,, .F. )










   oBmpAsociados := TBitmap():ReDefine( 510, "gc_pieces_48",, oFld:aDialogs[17],,, .F., .F.,,, .F.,,, .T. )





   aBtn[15] := TButton():ReDefine( 500, {||( WinAppRec( oBrwAsc, bEdtAsc, dbfTmpAsc, , , aTmp ) )}, oFld:aDialogs[17],,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtn[16] := TButton():ReDefine( 502, {||( dbDelRec( oBrwAsc, dbfTmpAsc ) )}, oFld:aDialogs[17],,, .F., {||     ( nMode <> 3 )},,, .F. )

   oBrwAsc                 := IXBrowse():New( oFld:aDialogs[17] )

   oBrwAsc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwAsc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwAsc:lFooter         := .T.
   oBrwAsc:cAlias          := dbfTmpAsc
   oBrwAsc:nMarqueeStyle   := 5
   oBrwAsc:cName           := "Artículo.Asociados"

   with object ( oBrwAsc:AddCol() )
      :cHeader          := "Código"
      :bEditValue       := {|| ( dbfTmpAsc )->cRefAsc }
      :nWidth           := 80
   end

   with object ( oBrwAsc:AddCol() )
      :cHeader          := "Artículo"
      :bEditValue       := {|| ( dbfTmpAsc )->cDesAsc }
      :nWidth           := 160
   end

   with object ( oBrwAsc:AddCol() )
      :cHeader          := "Unidades"
      :bEditValue       := {|| ( dbfTmpAsc )->nUndAsc }
      :cEditPicture     := MasUnd()
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nWidth           := 160
   end

   if nMode <> 3
      oBrwAsc:bLDblClick  := {|| WinEdtRec( oBrwAsc, bEdtAsc, dbfTmpAsc, , , aTmp ) }
   end

   oBrwAsc:CreateFromResource( 180 )









   oBmpEscandallos := TBitmap():ReDefine( 510, "gc_pieces_48",, oFld:aDialogs[18],,, .F., .F.,,, .F.,,, .T. )





   TCheckBox():ReDefine( 136, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ]:= u ) }, oFld:aDialogs[18],, {||( ChgKit( aTmp, aGet, oCosto ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ] := TComboBox():ReDefine( 137, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[18],,,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ] .AND. nMode <> 3 )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitImp" ) ) ]',,,,,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ] := TComboBox():ReDefine( 138, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[18],,,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ] .AND. nMode <> 3 )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitStk" ) ) ]',,,,,,, )






   aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ] := TComboBox():ReDefine( 139, { | u | If( PCount()==0, aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[18],,,,,,, .F., {||     ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ] .AND. nMode <> 3 )},,,,,, 'aGet[ ( D():Articulos( nView ) )->( fieldpos( "nKitPrc" ) ) ]',,,,,,, )





   aBtn[11] := TButton():ReDefine( 500, {||( WinAppRec( oBrwEsc, bEdtParKit, dbfTmpParKit, , , aTmp ),  Eval( oBrwEsc:bValid ) )}, oFld:aDialogs[18],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   TButton():ReDefine( 503, {||( WinDupRec( oBrwEsc, bEdtParKit, dbfTmpParKit, , , aTmp ),  Eval( oBrwEsc:bValid ) )}, oFld:aDialogs[18],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   aBtn[12] := TButton():ReDefine( 501, {||( WinEdtRec( oBrwEsc, bEdtParKit, dbfTmpParKit, , , aTmp ),  Eval( oBrwEsc:bValid ) )}, oFld:aDialogs[18],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   aBtn[13] := TButton():ReDefine( 502, {||( dbDelRec( oBrwEsc, dbfTmpParKit ), Eval( oBrwEsc:bValid ) )}, oFld:aDialogs[18],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LKITART" ) ) ] )},,, .F. )

   oBrwEsc                 := IXBrowse():New( oFld:aDialogs[18] )

   oBrwEsc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwEsc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwEsc:lFooter         := .T.
   oBrwEsc:cAlias          := dbfTmpParKit
   oBrwEsc:nMarqueeStyle   := 5
   oBrwEsc:cName           := "Artículo.Kits"

   with object ( oBrwEsc:AddCol() )
      :cHeader             := "Uuid"
      :bEditValue          := {|| ( dbfTmpParKit )->cUuid }
      :nWidth              := 250
   end

   with object ( oBrwEsc:AddCol() )
      :cHeader             := "Nombre"
      :bEditValue          := {|| ( dbfTmpParKit )->cNomKit }
      :nWidth              := 250
   end

   if nMode <> 3
      oBrwEsc:bLDblClick   := {|| WinEdtRec( oBrwEsc, bEdtParKit, dbfTmpParKit, , , aTmp ),  Eval( oBrwEsc:bValid ) }
   end

      oBrwEsc:bValid       := {|| .T. }










   oBrwEsc:CreateFromResource( 180 )










   TButton():ReDefine( 3, {||( if( oFld:nOption > 1, oFld:SetOption( oFld:nOption - 1 ), ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 4, {||( if( oFld:nOption < Len( oFld:aDialogs ), oFld:SetOption( oFld:nOption + 1 ), ) )}, oDlg,,, .F.,,,, .F. )




   oBtnAceptarActualizarWeb := TButton():ReDefine( 5, {||( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode, oImpComanda1, oImpComanda2, .T. ) )}, oDlg,,, .F.,,,, .F. )





   aBtn[ 1 ] := TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode, oImpComanda1, oImpComanda2 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3

      oFld:aDialogs[1]:AddFastKey( 113, {|| aBtn[ 2 ]:Click() } )
      oFld:aDialogs[1]:AddFastKey( 114, {|| aBtn[ 3 ]:Click() } )
      oFld:aDialogs[1]:AddFastKey( 115, {|| aBtn[ 4 ]:Click() } )

      oFld:aDialogs[12]:AddFastKey( 113, {|| aBtn[ 8 ]:Click() } )
      oFld:aDialogs[12]:AddFastKey( 114, {|| aBtn[ 9 ]:Click() } )
      oFld:aDialogs[12]:AddFastKey( 115, {|| aBtn[ 10]:Click() } )

      oFld:aDialogs[13]:AddFastKey( 113, {|| if( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ], aBtn[ 11 ]:Click(), ) } )
      oFld:aDialogs[13]:AddFastKey( 114, {|| if( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ], aBtn[ 12 ]:Click(), ) } )
      oFld:aDialogs[13]:AddFastKey( 115, {|| if( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt" ) ) ], aBtn[ 13 ]:Click(), ) } )

      oFld:aDialogs[7]:AddFastKey( 113, {|| WinAppRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) } )
      oFld:aDialogs[7]:AddFastKey( 114, {|| WinEdtRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) } )
      oFld:aDialogs[7]:AddFastKey( 115, {|| WinDelRec( oBrwImg, dbfTmpImg ) } )

      oFld:aDialogs[8]:AddFastKey( 113, {|| WinAppRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) } )
      oFld:aDialogs[8]:AddFastKey( 114, {|| WinEdtRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) } )
      oFld:aDialogs[8]:AddFastKey( 115, {|| WinDelRec( oBrwDiv, dbfTmpVta ) } )

      oFld:aDialogs[3]:AddFastKey( 114, {|| oBtnEditAtp:Click() } )

      oFld:aDialogs[16]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[16]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[16]:AddFastKey( 115, {|| WinDelRec( oBrwDoc, dbfTmpDoc ) } )

      oDlg:AddFastKey( 116, {|| endTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode, oImpComanda1, oImpComanda2 ) } )
      oDlg:AddFastKey( 118, {|| if( oFld:nOption > 1, oFld:SetOption( oFld:nOption - 1 ), ) } )
      oDlg:AddFastKey( 119, {|| if( oFld:nOption < Len( oFld:aDialogs ), oFld:SetOption( oFld:nOption + 1 ), ) } )
      oDlg:AddFastKey( 120, {|| oDetCamposExtra:Play( Space(1) ) } )

      if ( TComercioConfig():getInstance():isRealTimeConexion() )
         oDlg:AddFastKey( 117, {|| oBtnAceptarActualizarWeb:Click() } )
      end

   end

   oDlg:bStart    := {|| ShowComentario( aTmp, nMode ), StartDlg( aGet, aTmp, nMode, oSay, oDlg, oCosto, aBtnDiv, oFnt, oBtnMoneda, aBtn, bmpImage, oBrwPrv, oBrwDiv, oBrwStk, oBrwKit, oBrwOfe, oBrwCodeBar, oBrwImg, oBrwLeng, oBrwAtp ) }




   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|(  KillTrans( oMenu, oBmpTemporada, oBmpEstado, oBmpGeneral, oBmpPrecios, oBmpDescripciones, oBmpPropiedades, oBmpLogistica, oBmpStocks, oBmpContabilidad, oBmpOfertas, oBmpEscandallos, oBmpWeb, oBmpUbicaciones, oBmpImagenes, oBmpTactil, oBmpAdicionales, oBmpAtipicas, oBmpDocumentos, oBmpAsociados ) )},, {|Self|(  EdtRecMenu( aTmp, aGet, oSay, oDlg, oFld, aBar, cSay, nMode ) )}, oDlg:bRClicked,,, )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir el dialogo de artículos" )

   end
   ErrorBlock( oBlock )

   if oDlg:nResult == 1
      getSQLDatabase():Commit()
   else
      getSQLDatabase():rollBack()
   end

   if !empty( oBrwStk )
      oBrwStk:CloseData()
   end

Return ( oDlg:nResult == 1 )



static function CodificacionProveedor( aTmp, aGet, nMode )

   local oDlg
   local oBrwPrv

   oDlg = TDialog():New(,,,,, "ART_PROVEEDOR",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

   oBrwPrv                 := IXBrowse():New( oDlg )

   oBrwPrv:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwPrv:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwPrv:cAlias          := dbfTmpPrv

   oBrwPrv:nMarqueeStyle   := 5
   oBrwPrv:cName           := "Precios de compras de articulos"

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Df. Defecto"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTmpPrv )->lDefPrv }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( dbfTmpPrv )->cCodPrv }
         :nWidth           := 60
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Proveedor"
         :bEditValue       := {|| RetProvee( ( dbfTmpPrv )->cCodPrv, dbfProv ) }
         :nWidth           := 145
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Referencia"
         :bEditValue       := {|| ( dbfTmpPrv )->cRefPrv }
         :nWidth           := 80
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( ( dbfTmpPrv )->cDivPrv, dbfDiv ) }
         :nWidth           := 30
      end

      if !RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() )

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| ( dbfTmpPrv )->nImpPrv }
         :nWidth           := 80
         :cEditPicture     := cPirDiv( cDivEmp(), dbfDiv )
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "% Dto."
         :bEditValue       := {|| ( dbfTmpPrv )->nDtoPrv }
         :nWidth           := 40
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "% Prm."
         :bEditValue       := {|| ( dbfTmpPrv )->nDtoPrm }
         :nWidth           := 40
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      if !RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() )

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| nTotImpPrv( dbfTmpPrv, dbfDiv, .T. )}
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      end

      if nMode <> 3
         oBrwPrv:bLDblClick   := {|| WinEdtRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ) }
      end

      oBrwPrv:CreateFromResource( 100 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 502, {||( DelPrv( aTmp, oBrwPrv, dbfTmpPrv ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 504, {||( ActualizaCostoProveedor( aTmp, aGet, dbfTmpPrv ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





   TButton():ReDefine( 550, {||( oDlg:End( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





    TButton():ReDefine( 560, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 113, {|| WinAppRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ) } )
      oDlg:AddFastKey( 114, {|| WinEdtRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ) } )
      oDlg:AddFastKey( 115, {|| DelPrv( aTmp, oBrwPrv, dbfTmpPrv ) } )

      oDlg:AddFastKey(  116, {|| oDlg:End( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

return ( nil )



Static Function ActualizaCostoProveedor( aTmp, aGet, dbfTmpPrv )

   if ApoloMsgNoYes( "¿Desea actualizar el costo del producto?", "Seleccione una opción" )

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ]   := nTotImpPrv( dbfTmpPrv, dbfDiv )

      if !empty( aGet[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ] )
         aGet[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ]:Refresh()
      end

   end

return ( .T. )



static function ImportaImagenes( aTmp, oBrwImg )

   local aImg
   local aImagenes
   local cImage
   local lDefault       := .F.
   local cDirectorio    := cDirectorioImagenes()
   local cPrefix        := cDirectorio + AllTrim( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "codigo" ) ) ] )





   aImagenes            := directory( cPrefix + "*.*" )

   for each aImg in aImagenes

      cImage            := alltrim( upper( cDirectorio + aImg[ 1 ] ) )





      ( dbfTmpImg )->( __dbLocate( { || alltrim( upper( ( D():ArticuloImagenes( nView ) )->cImgArt ) == cImage ) } ) )
      if !( dbfTmpImg )->( found() )

         ( dbfTmpImg )->( dbAppend() )

         ( dbfTmpImg )->cCodArt  := alltrim( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "codigo" ) ) ] )
         ( dbfTmpImg )->cNbrArt  := alltrim( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nombre" ) ) ] )
         ( dbfTmpImg )->cImgArt  := cImage

         ( dbfTmpImg )->( dbUnLock() )

      end

   next





   ( dbfTmpImg )->( dbgotop() )
   while !( dbfTmpImg )->( eof() )

      if ( dbfTmpImg )->lDefImg
         lDefault    := .T.
      end

      ( dbfTmpImg )->( dbskip() )

   end

   if !lDefault

      ( dbfTmpImg )->( dbgotop() )

      if dbLock( dbfTmpImg )
         ( dbfTmpImg )->lDefImg  := .T.
         ( dbfTmpImg )->( dbunlock() )
      end

   end

   ( dbfTmpImg )->( dbgotop() )





   if !empty( oBrwImg )
      oBrwImg:Refresh()
   end

Return .T.



Static function lValidaSubcuenta( getCuenta, getArticulo, getNombreCuenta, getSaldo )

   local valueCuenta    := alltrim( getCuenta:varget() )
   local nombreArticulo := alltrim( getArticulo:varget() )








   mkSubcuenta(   getCuenta, { valueCuenta, nombreArticulo }, getNombreCuenta, nil, nil, nil, nil, getSaldo )

Return .T.



Static function lValidaSubcuentaCompras( aGet, aTmp, nGetDebe, nGetHaber, oGetSaldo, oGetSubCom, cSubCtaAntCom, oBrwCom, dbfTmpSubCom )








   if mkSubcuenta( aGet[ ( D():Articulos( nView ) )->( fieldpos( "CCTACOM" ) ) ], { aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCTACOM" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NOMBRE"  ) ) ] }, oGetSubCom, nil, nil, @nGetDebe, @nGetHaber, oGetSaldo )

      if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCTACOM" ) ) ] <> cSubCtaAntCom

         oBrwCom:Refresh()
      end

      Return .T.

   end

Return .F.



Static Function StartDlg( aGet, aTmp, nMode, oSay, oDlg, oCosto, aBtnDiv, oFnt, oBtnMoneda, aBtn, bmpImage, oBrwPrv, oBrwDiv, oBrwStk, oBrwKit, oBrwOfe, oBrwCodeBar, oBrwImg, oBrwLeng, oBrwAtp )

   CursorWait()

   oDlg:Disable()

   evalGet( aGet, nMode )

   ChgKit( aTmp, aGet, oCosto )

   oSay[ 18 ]:SetText( uFieldEmpresa( "cTxtTar1", "Precio 1" ) )

   if uFieldEmpresa( "lShwTar2" )
      oSay[ 19 ]:SetText( uFieldEmpresa( "cTxtTar2", "Precio 2" ) )
   else
      oSay[ 12 ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf2" ) )    ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef2" ) )   ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta2" ) )  ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva2" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar3" )
      oSay[ 20 ]:SetText( uFieldEmpresa( "cTxtTar3", "Precio 3" ) )
   else
      oSay[ 13 ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf3" ) )    ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef3" ) )   ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta3" ) )  ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva3" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar4" )
      oSay[ 21 ]:SetText( uFieldEmpresa( "cTxtTar4", "Precio 4" ) )
   else
      oSay[ 14 ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf4" ) )    ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef4" ) )   ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta4" ) )  ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva4" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar5" )
      oSay[ 22 ]:SetText( uFieldEmpresa( "cTxtTar5", "Precio 5" ) )
   else
      oSay[ 15 ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf5" ) )    ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef5" ) )   ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta5" ) )  ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva5" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar6" )
      oSay[ 23 ]:SetText( uFieldEmpresa( "cTxtTar6", "Precio 6" ) )
   else
      oSay[ 16 ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf6" ) )    ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef6" ) )   ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVenta6" ) )  ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaIva6" ) ) ]:Hide()
   end

   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ]:SetFocus()

   if uFieldEmpresa( "lStkAlm" )
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nMinimo" ) ) ]:Hide()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nMaximo" ) ) ]:Hide()
      oBtnStockAlmacenes:Show()
   end

   oBtnMoneda:Show()

   IXBrowse():OpenData()

   if !empty( oBrwPrv )
      oBrwPrv:Load()
   end

   if !empty( oBrwDiv )
      oBrwDiv:Load()
   end

   if !empty( oBrwKit )
      oBrwKit:Load()
   end

   if !empty( oBrwOfe )
      oBrwOfe:Load()
   end

   if !empty( oBrwImg )
      oBrwImg:Load()
   end

   if !empty( oBrwLeng )
      oBrwLeng:Load()
   end

   if !empty( oBrwAtp )
      oBrwAtp:Load()
   end

   IXBrowse():CloseData()



   if nMode <> 1

      if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nCtlStock" ) ) ] <= 1

         cAliasStock                      := StocksModel():getSqlBrwStock( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ] )

         if !empty( oBrwStk )
            oBrwStk:SetArray( DBHScatter( cAliasStock ) )
            oBrwStk:Load()
            oBrwStk:MakeTotals()
            oBrwStk:GoTop()
            oBrwStk:Refresh()
         end

      end

      if nMode <> 3



         if ( RolesModel():getRolNoCambiarPrecios( Auth():rolUuid() ) )

            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVenta1" ) ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVtaIva1") ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVenta2" ) ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVtaIva2") ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVenta3" ) ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVtaIva3") ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVenta4" ) ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVtaIva4") ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVenta5" ) ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVtaIva5") ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVenta6" ) ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( FieldPos( "pVtaIva6") ) ]:HardDisable()

            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nPntVer1") ) ]:HardDisable()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nPnvIva1") ) ]:HardDisable()

            aGet[ ( D():Articulos( nView ) )->( fieldpos( "PvpRec"  ) ) ]:HardDisable()

         end

         if ( RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() ) )

            aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef1"  ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef2"  ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef3"  ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef4"  ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef5"  ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef6"  ) ) ]:Hide()

            aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf1"   ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf2"   ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf3"   ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf4"   ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf5"   ) ) ]:Hide()
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "lBnf6"   ) ) ]:Hide()

            oSay[ 11 ]:Hide()
            oSay[ 12 ]:Hide()
            oSay[ 13 ]:Hide()
            oSay[ 14 ]:Hide()
            oSay[ 15 ]:Hide()
            oSay[ 16 ]:Hide()

         end

      end

   end

   if ( RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() ) )
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ]:Hide()
      oCosto:Hide()
   end

   if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nCtlStock" ) ) ] <> 1
      oBrwStk:Hide()
   else
      oBrwStk:Show()
   end



   if TComercioConfig():getInstance():isRealTimeConexion()
      oBtnAceptarActualizarWeb:Show()
   else
      oBtnAceptarActualizarWeb:Hide()
   end



   oDlg:Enable()

   CursorWE()

Return ( .T. )



Static Function BeginTrans( aTmp, nMode )

   local lErrors     := .F.
   local cCodArt
   local cCodSubCta
   local cCodSubCom
   local aItmSubCta
   local oError
   local oBlock
   local oTemporal
   local nOrdAnt

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   aItmSubCta        := {}

   cCodArt           := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo"  ) ) ]
   cCodSubCta        := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaVta" ) ) ]
   cCodSubCom        := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCtaCom" ) ) ]

   aAdd( aItmSubCta, { "nAsiento",  "N",  6, 0, "Asiento"    } )
   aAdd( aItmSubCta, { "dFecha",    "D",  8, 0, "Fecha"      } )
   aAdd( aItmSubCta, { "cConcepto", "C", 25, 0, "Concepto"   } )
   aAdd( aItmSubCta, { "nDebe",     "N", 16, 2, "Debe"       } )
   aAdd( aItmSubCta, { "nHaber",    "N", 16, 2, "Haber"      } )
   aAdd( aItmSubCta, { "cDeparta",  "C",  6, 0, "Departa"    } )
   aAdd( aItmSubCta, { "nFactura",  "N",  8, 0, "Factura"    } )
   aAdd( aItmSubCta, { "nBase",     "N", 16, 2, "Base"       } )
   aAdd( aItmSubCta, { "nIva",      "N",  5, 2, "I.V.A"      } )

   filTmpPrv         := cGetNewFileName( cPatTmp() + "PrvArt" )
   filTmpLeng        := cGetNewFileName( cPatTmp() + "ArtLeng" )
   filTmpAlm         := cGetNewFileName( cPatTmp() + "ArtAlm" )
   filTmpVta         := cGetNewFileName( cPatTmp() + "VtaArt" )
   filTmpKit         := cGetNewFileName( cPatTmp() + "KitArt" )
   filTmpParKit      := cGetNewFileName( cPatTmp() + "ParKit" )
   filTmpOfe         := cGetNewFileName( cPatTmp() + "OfeArt" )
   filTmpImg         := cGetNewFileName( cPatTmp() + "ArtImg" )
   filTmpCodebar     := cGetNewFileName( cPatTmp() + "ArtCodebar" )
   filTmpSubCta      := cGetNewFileName( cPatTmp() + "TmpSubCta" )
   filTmpSubCom      := cGetNewFileName( cPatTmp() + "TmpSubCom" )
   filTmpAtp         := cGetNewFileName( cPatTmp() + "CliAtp" )
   filTmpDoc         := cGetNewFileName( cPatTmp() + "ArtDoc" )
   filTmpAsc         := cGetNewFileName( cPatTmp() + "ArtAsc" )





   dbCreate( filTmpPrv, aSqlStruct( aItmArtPrv() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpPrv, cCheckArea( "PrvArt", @dbfTmpPrv ), .F. )

   if !NetErr()

      ( dbfTmpPrv )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpPrv )->( OrdCreate( filTmpPrv, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfTmpPrv )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpPrv )->( OrdCreate( filTmpPrv, "cRefPrv", "cCodPrv + cRefPrv", {|| Field->cCodPrv + Field->cRefPrv } ) )

      if nMode <> 1 .AND. ( D():ProveedorArticulo( nView ) )->( dbSeek( cCodArt ) )
         while ( D():ProveedorArticulo( nView ) )->cCodArt == cCodArt .AND. !( D():ProveedorArticulo( nView ) )->( eof() )
            dbPass( D():ProveedorArticulo( nView ), dbfTmpPrv, .T. )
            ( D():ProveedorArticulo( nView ) )->( dbSkip() )
         end
         ( dbfTmpPrv )->( dbGoTop() )
      end

   end





   dbCreate( filTmpLeng, aSqlStruct( aItmArtLeng() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpLeng, cCheckArea( "ArtLeng", @dbfTmpLeng ), .F. )

   if !NetErr()

      ( dbfTmpPrv )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpPrv )->( OrdCreate( filTmpPrv, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      if nMode <> 1 .AND. ( D():ArticuloLenguaje( nView ) )->( dbSeek( cCodArt ) )
         while ( D():ArticuloLenguaje( nView ) )->cCodArt == cCodArt .AND. !( D():ArticuloLenguaje( nView ) )->( eof() )
            dbPass( D():ArticuloLenguaje( nView ), dbfTmpLeng, .T. )
            ( D():ArticuloLenguaje( nView ) )->( dbSkip() )
         end
         ( dbfTmpLeng )->( dbGoTop() )
      end

   end



   dbCreate( filTmpAlm, aSqlStruct( aItmStockaAlmacenes() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpAlm, cCheckArea( "ArtAlm", @dbfTmpAlm ), .F. )

   if !NetErr()

      ( dbfTmpAlm )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpAlm )->( OrdCreate( filTmpAlm, "cCodArt + cCodAlm", "cCodArt + cCodAlm", {|| Field->cCodArt + Field->cCodAlm } ) )

      ( dbfTmpAlm )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpAlm )->( OrdCreate( filTmpAlm, "cCodAlm", "cCodAlm", {|| Field->cCodAlm } ) )

      if nMode <> 1 .AND. ( D():ArticuloStockAlmacenes( nView ) )->( dbSeek( cCodArt ) )
         while ( D():ArticuloStockAlmacenesId( nView ) ) == cCodArt .AND. !( D():ArticuloStockAlmacenes( nView ) )->( eof() )
            dbPass( D():ArticuloStockAlmacenes( nView ), dbfTmpAlm, .T. )
            ( D():ArticuloStockAlmacenes( nView ) )->( dbSkip() )
         end
         ( dbfTmpAlm )->( dbGoTop() )
      end

   end



   dbCreate( filTmpVta, aSqlStruct( aItmVta() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpVta, cCheckArea( "VtaArt", @dbfTmpVta ), .F. )

   ( dbfTmpVta )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpVta )->( OrdCreate( filTmpVta, "cCodArt", "cCodArt + cCodPr1 + cCodPr2 + cValpr1 + cValPr2", {|| Field->cCodArt + Field->cCodPr1 + Field->cCodPr2 + Field->cValpr1 + Field->cValPr2 } ) )

   ( dbfTmpVta )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
   ( dbfTmpVta )->( ordCreate( filTmpVta, "cValPr1", "cCodArt + cValPr1", {|| Field->cCodArt + Field->cValPr1 } ) )

   ( dbfTmpVta )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
   ( dbfTmpVta )->( ordCreate( filTmpVta, "cValPr2", "cCodArt + cValPr2", {|| Field->cCodArt + Field->cValPr2 } ) )

   if nMode <> 1 .AND. ( dbfArtVta )->( dbSeek( cCodArt ) )
      while ( dbfArtVta )->cCodArt == cCodArt .AND. !( dbfArtVta )->( eof() )
         dbPass( dbfArtVta, dbfTmpVta, .T. )
         ( dbfArtVta )->( dbSkip() )
      end
      ( dbfTmpVta )->( dbGoTop() )
   end

   dbCreate( filTmpKit, aSqlStruct( aItmKit() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpKit, cCheckArea( "KitArt", @dbfTmpKit ), .F. )

   ( dbfTmpKit )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpKit )->( OrdCreate( filTmpKit, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

   ( dbfTmpKit )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpKit )->( OrdCreate( filTmpKit, "cCodKit", "cCodKit", {|| Field->cCodKit } ) )

   ( dbfTmpKit )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpKit )->( OrdCreate( filTmpKit, "cRefKit", "cRefKit", {|| Field->cRefKit } ) )

   ( dbfTmpKit )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpKit )->( OrdCreate( filTmpKit, "cParUuid", "cParUuid", {|| Field->cParUuid } ) )

   ( dbfTmpKit )->( OrdSetFocus( "Recno" ) )

   if nMode <> 1 .AND. ( dbfArtKit )->( dbSeek( cCodArt ) )
      while ( dbfArtKit )->cCodKit == cCodArt .AND. !( dbfArtKit )->( eof() )
         dbPass( dbfArtKit, dbfTmpKit, .T. )
         ( dbfArtKit )->( dbSkip() )
      end
      ( dbfTmpKit )->( dbGoTop() )
   end





   dbCreate( filTmpParKit, aSqlStruct( aItmParKit() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpParKit, cCheckArea( "ParKitArt", @dbfTmpParKit ), .F. )

   ( dbfTmpParKit )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpParKit )->( OrdCreate( filTmpParKit, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

   ( dbfTmpParKit )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpParKit )->( OrdCreate( filTmpParKit, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

   ( dbfTmpParKit )->( OrdSetFocus( "Recno" ) )

   if nMode <> 1 .AND. ( dbfParKit )->( dbSeek( cCodArt ) )
      while ( dbfParKit )->cCodArt == cCodArt .AND. !( dbfParKit )->( eof() )
         dbPass( dbfParKit, dbfTmpParKit, .T. )
         ( dbfParKit )->( dbSkip() )
      end
      ( dbfTmpParKit )->( dbGoTop() )
   end





   dbCreate( filTmpAsc, aSqlStruct( aItmAsc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpAsc, cCheckArea( "ArtAsc", @dbfTmpAsc ), .F. )

   ( dbfTmpAsc )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpAsc )->( OrdCreate( filTmpAsc, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

   ( dbfTmpAsc )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpAsc )->( OrdCreate( filTmpAsc, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

   ( dbfTmpAsc )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpAsc )->( OrdCreate( filTmpAsc, "cRefAsc", "cRefAsc", {|| Field->cRefAsc } ) )

   ( dbfTmpAsc )->( OrdSetFocus( "Recno" ) )

   if nMode <> 1 .AND. ( dbfArtAsc )->( dbSeek( cCodArt ) )
      while ( dbfArtAsc )->cCodArt == cCodArt .AND. !( dbfArtAsc )->( eof() )
         dbPass( dbfArtAsc, dbfTmpAsc, .T. )
         ( dbfArtAsc )->( dbSkip() )
      end
      ( dbfTmpAsc )->( dbGoTop() )
   end





   dbCreate( filTmpOfe, aSqlStruct( aItmOfe() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpOfe, cCheckArea( "OfeArt", @dbfTmpOfe ), .F. )

   ( dbfTmpOfe )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpOfe )->( OrdCreate( filTmpOfe, "cArtOfe", "cArtOfe", {|| Field->cArtOfe } ) )

   if nMode <> 1 .AND. ( dbfOfe )->( dbSeek( cCodArt ) )
      while ( dbfOfe )->cArtOfe == cCodArt .AND. ( dbfOfe )->nTblOfe < 2 .AND. !( dbfOfe )->( eof() )
         dbPass( dbfOfe, dbfTmpOfe, .T. )
         ( dbfOfe )->( dbSkip() )
      end
      ( dbfTmpOfe )->( dbGoTop() )
   end





   dbCreate( filTmpImg, aSqlStruct( aItmImg() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpImg, cCheckArea( "ImgArt", @dbfTmpImg ), .F. )

   ( dbfTmpImg )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpImg )->( OrdCreate( filTmpImg, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

   aImgsArticulo  := {}

   if nMode <> 1 .AND. ( D():ArticuloImagenes( nView ) )->( dbSeek( cCodArt ) )

      while ( D():ArticuloImagenes( nView ) )->cCodArt == cCodArt .AND. !( D():ArticuloImagenes( nView ) )->( eof() )





         oTemporal                     := SImagenes()
         oTemporal:lSelect             := .F.
         oTemporal:Ruta                := ( D():ArticuloImagenes( nView ) )->cImgArt
         oTemporal:ToolTip             := ( D():ArticuloImagenes( nView ) )->cNbrArt

         aAdd( aImgsArticulo, oTemporal )

         dbPass( D():ArticuloImagenes( nView ), dbfTmpImg, .T. )

         ( D():ArticuloImagenes( nView ) )->( dbSkip() )

      end

      ( dbfTmpImg )->( dbGoTop() )

   end





   dbCreate( filTmpDoc, aSqlStruct( aArtDoc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpDoc, cCheckArea( "ArtDoc", @dbfTmpDoc ), .F. )

   ( dbfTmpDoc )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpDoc )->( OrdCreate( filTmpDoc, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

   if nMode <> 1 .AND. ( D():ArticuloDocumentos( nView ) )->( dbSeek( cCodArt ) )
      while ( D():ArticuloDocumentos( nView ) )->cCodArt == cCodArt .AND. !( D():ArticuloDocumentos( nView ) )->( eof() )
         dbPass( D():ArticuloDocumentos( nView ), dbfTmpDoc, .T. )
         ( D():ArticuloDocumentos( nView ) )->( dbSkip() )
      end
      ( dbfTmpDoc )->( dbGoTop() )
   end





   dbCreate( filTmpCodebar, aSqlStruct( aItmBar() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpCodebar, cCheckArea( "CodBar", @dbfTmpCodebar ), .F. )

   ( dbfTmpCodebar )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpCodebar )->( OrdCreate( filTmpCodebar, "cCodBar", "cCodBar", {|| Field->cCodBar } ) )

   if nMode <> 1 .AND. ( dbfCodebar )->( dbSeek( cCodArt ) )
      while ( dbfCodebar )->cCodArt == cCodArt .AND. !( dbfCodebar )->( eof() )
         dbPass( dbfCodebar, dbfTmpCodebar, .T. )
         ( dbfCodebar )->( dbSkip() )
      end
      ( dbfTmpCodebar )->( dbGoTop() )
   end


























   aOldCodeBar    := aDbfToArr( dbfTmpCodebar, 2 )





   dbCreate( filTmpAtp, aSqlStruct( aItmAtp() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpAtp, cCheckArea( "CliAtp", @dbfTmpAtp ), .F. )

   ( dbfTmpAtp )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpAtp )->( OrdCreate( filTmpAtp, "cCodArt", "cCodArt + cCodCli", {|| Field->cCodArt + Field->cCodCli } ) )

   nOrdAnt     := ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodArt" ) )

   if nMode <> 1 .AND. nMode <> 4 .AND. ( D():Atipicas( nView ) )->( dbSeek( cCodArt ) )

      while ( D():Atipicas( nView ) )->cCodArt == cCodArt .AND. !( D():Atipicas( nView ) )->( eof() )


         if ( ( Empty( ( D():Atipicas( nView ) )->dFecIni ) .AND. Empty( ( D():Atipicas( nView ) )->dFecFin ) ) .OR. ( ( D():Atipicas( nView ) )->dFecIni <= GetSysDate() .AND. ( D():Atipicas( nView ) )->dFecFin >= GetSysDate() ) )

            dbPass( D():Atipicas( nView ), dbfTmpAtp, .T. )

         end

         ( D():Atipicas( nView ) )->( dbSkip() )

      end

   end

   ( D():Atipicas( nView ) )->( OrdSetFocus( nOrdAnt ) )

   ( dbfTmpAtp )->( dbGoTop() )





   oDetCamposExtra:SetTemporal( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], "", nMode )

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

Return ( lErrors )



Static Function EndTrans( aTmp, aGet, oSay, oDlg, aTipBar, cTipBar, nMode, oImpComanda1, oImpComanda2, lActualizaWeb )

   local i
   local cImage
   local nIdImagen         := 0
   local cCod
   local cWebShop
   local oError
   local oBlock
   local cCodArt
   local nTipBar
   local aCodeBar          := {}
   local lChange           := .F.
   local nRec
   local lDefault          := .F.
   local cProvHab          := ""
   local lResultBeforeAppendEvent
   local nOrdAnt

   If( lActualizaWeb == nil, lActualizaWeb := .F., ) ;

   if !empty( oGetTarWeb )
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nTarWeb" ) ) ]  := oGetTarWeb:getTarifa()
   end

   if empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ] ) .AND. ( nMode == 1 .OR. nMode == 4 )
      msgStop( "Código no puede estar vacio" )
      return nil
   end

   if dbSeekInOrd( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], "Codigo", D():Articulos( nView ) ) .AND. ( nMode == 1 .OR. nMode == 4 )
      msgStop( "Código ya existe" )
      return nil
   end

   disableAcceso()



   if ( nMode == 1 .OR. nMode == 4 )
      lResultBeforeAppendEvent   := runEventScript( "Articulos\beforeAppend", aGet, aTmp, nView )
      if IsLogic( lResultBeforeAppendEvent ) .AND. !lResultBeforeAppendEvent
         return nil
      end
   end

   if ( nMode == 1 .OR. nMode == 4 )

      if empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "uuid" ) ) ] )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "uuid" ) ) ]  := win_uuidcreatestring()
      end

      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LastChg" ) ) ]     := GetSysDate()

   end



   cCod                    := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ]
   cWebShop                := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cWebShop" ) ) ]



   oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      beginTransaction()





      cImage               := alltrim( upper( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ] ) )

      if !empty( cImage )

         ( dbfTmpImg )->( __dbLocate( {|| cImage == alltrim( upper( ( dbfTmpImg )->cImgArt ) ) } ) )
         if !( dbfTmpImg )->( found() )

            lDefault       := ( dbfTmpImg )->( lastrec() ) == 0

            ( dbfTmpImg )->( dbappend() )
            ( dbfTmpImg )->cCodArt  := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ]
            ( dbfTmpImg )->cImgArt  := cImage
            ( dbfTmpImg )->lDefImg  := lDefault
            ( dbfTmpImg )->( dbunlock() )

         end

      end





      nRec        := ( dbfTmpVta )->( Recno() )

      ( dbfTmpVta )->( dbGoTop() )
      while !( dbfTmpVta )->( Eof() )

         cImage   := alltrim( upper( ( dbfTmpVta )->cImgWeb ) )

         if !empty( cImage )

            ( dbfTmpImg )->( __dbLocate( {|| cImage == alltrim( upper( ( dbfTmpImg )->cImgArt ) ) } ) )
            if !( dbfTmpImg )->( found() )

               lDefault                 := ( dbfTmpImg )->( lastrec() ) == 0

               ( dbfTmpImg )->( dbappend() )
               ( dbfTmpImg )->cCodArt   := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ]
               ( dbfTmpImg )->cImgArt   := cImage
               ( dbfTmpImg )->lDefImg   := lDefault

               ( dbfTmpImg )->( dbunlock() )

            end

         end

         ( dbfTmpVta )->( dbSkip() )

      end

      ( dbfTmpVta )->( dbGoTo( nRec ) )





      lDefault       := .F.

      ( dbfTmpImg )->( dbGoTop() )
      while !( dbfTmpImg )->( eof() )

         if ( dbfTmpImg )->lDefImg
            lDefault := .T.
         end

         ( dbfTmpImg )->( dbSkip() )

      end

      if !lDefault

         ( dbfTmpImg )->( dbGoTop() )

         if dbLock( dbfTmpImg )
            ( dbfTmpImg )->lDefImg  := .T.
            ( dbfTmpImg )->( dbUnLock() )
         end

      end





      if nMode == 2

         while ( D():ProveedorArticulo( nView ) )->( dbSeek( cCod ) ) .AND. !( D():ProveedorArticulo( nView ) )->( eof() )
            if dbLock( D():ProveedorArticulo( nView ) )
               ( D():ProveedorArticulo( nView ) )->( dbDelete() )
               ( D():ProveedorArticulo( nView ) )->( dbUnLock() )
            end
         end

         while ( D():ArticuloLenguaje( nView ) )->( dbSeek( cCod ) ) .AND. !( D():ArticuloLenguaje( nView ) )->( eof() )
            if dbLock( D():ArticuloLenguaje( nView ) )
               ( D():ArticuloLenguaje( nView ) )->( dbDelete() )
               ( D():ArticuloLenguaje( nView ) )->( dbUnLock() )
            end
         end

         while ( D():ArticuloStockAlmacenes( nView ) )->( dbSeek( cCod ) ) .AND. !( D():ArticuloStockAlmacenes( nView ) )->( eof() )
            if dbLock( D():ArticuloStockAlmacenes( nView ) )
               ( D():ArticuloStockAlmacenes( nView ) )->( dbDelete() )
               ( D():ArticuloStockAlmacenes( nView ) )->( dbUnLock() )
            end
         end

         while ( dbfArtVta )->( dbSeek( cCod ) ) .AND. !( dbfArtVta )->( eof() )
            if dbLock( dbfArtVta )
               ( dbfArtVta )->( dbDelete() )
               ( dbfArtVta )->( dbUnLock() )
            end
         end

         while ( dbfArtKit )->( dbSeek( cCod ) ) .AND. !( dbfArtKit )->( eof() )
            if dbLock( dbfArtKit )
               ( dbfArtKit )->( dbDelete() )
               ( dbfArtKit )->( dbUnLock() )
            end
         end

         while ( dbfParKit )->( dbSeek( cCod ) ) .AND. !( dbfParKit )->( eof() )
            if dbLock( dbfParKit )
               ( dbfParKit )->( dbDelete() )
               ( dbfParKit )->( dbUnLock() )
            end
         end

         while ( dbfArtAsc )->( dbSeek( cCod ) ) .AND. !( dbfArtAsc )->( eof() )
            if dbLock( dbfArtAsc )
               ( dbfArtAsc )->( dbDelete() )
               ( dbfArtAsc )->( dbUnLock() )
            end
         end

         while ( dbfOfe )->( dbSeek( cCod ) ) .AND. !( dbfOfe )->( eof() )
            if dbLock( dbfOfe )
               ( dbfOfe )->( dbDelete() )
               ( dbfOfe )->( dbUnLock() )
            end
         end

         while ( D():ArticuloImagenes( nView ) )->( dbSeek( cCod ) ) .AND. !( D():ArticuloImagenes( nView ) )->( eof() )
            if dbLock( D():ArticuloImagenes( nView ) )
               ( D():ArticuloImagenes( nView ) )->( dbDelete() )
               ( D():ArticuloImagenes( nView ) )->( dbUnLock() )
            end
         end





         ( dbfTmpCodebar )->( dbGoTop() )

         aCodeBar       := aDbfToArr( dbfTmpCodebar, 2 )

         while ( dbfCodebar )->( dbSeek( cCod ) ) .AND. !( dbfCodebar )->( eof() )
            if dbLock( dbfCodebar )
               ( dbfCodebar )->( dbDelete() )
               ( dbfCodebar )->( dbUnLock() )
            end
         end





         nOrdAnt     := ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodArt" ) )

         while ( D():Atipicas( nView ) )->( dbSeek( cCod ) ) .AND. !( D():Atipicas( nView ) )->( eof() )
            if dbLock( D():Atipicas( nView ) )
               ( D():Atipicas( nView ) )->( dbDelete() )
               ( D():Atipicas( nView ) )->( dbUnLock() )
            end
         end

         ( D():Atipicas( nView ) )->( OrdSetFocus( nOrdAnt ) )

      end





      ( dbfTmpPrv )->( OrdSetFocus( 0 ) )
      ( dbfTmpPrv )->( dbGoTop() )
      while !( dbfTmpPrv )->( eof() )
         ( dbfTmpPrv )->cCodArt  := cCod
         if ( dbfTmpPrv )->lDefPrv
            cProvHab             := ( dbfTmpPrv )->cCodPrv
         end
         dbPass( dbfTmpPrv, D():ProveedorArticulo( nView ), .T. )
         ( dbfTmpPrv )->( dbSkip() )
      end

      ( dbfTmpLeng )->( OrdSetFocus( 0 ) )
      ( dbfTmpLeng )->( dbGoTop() )
      while !( dbfTmpLeng )->( eof() )
         dbPass( dbfTmpLeng, D():ArticuloLenguaje( nView ), .T. )
         ( dbfTmpLeng )->( dbSkip() )
      end

      ( dbfTmpAlm )->( OrdSetFocus( 0 ) )
      ( dbfTmpAlm )->( dbGoTop() )
      while !( dbfTmpAlm )->( eof() )
         ( dbfTmpAlm )->cCodArt  := cCod
         dbPass( dbfTmpAlm, D():ArticuloStockAlmacenes( nView ), .T. )
         ( dbfTmpAlm )->( dbSkip() )
      end

      ( dbfTmpVta )->( OrdSetFocus( 0 ) )
      ( dbfTmpVta )->( dbGoTop() )
      while !( dbfTmpVta )->( eof() )
         ( dbfTmpVta )->cCodArt  := cCod
         dbPass( dbfTmpVta, dbfArtVta, .T. )
         ( dbfTmpVta )->( dbSkip() )
      end

      ( dbfTmpKit )->( OrdSetFocus( 0 ) )
      ( dbfTmpKit )->( dbGoTop() )
      while !( dbfTmpKit )->( eof() )
         ( dbfTmpKit )->cCodKit := cCod
         dbPass( dbfTmpKit, dbfArtKit, .T. )
         ( dbfTmpKit )->( dbSkip() )
      end

      ( dbfTmpParKit )->( OrdSetFocus( 0 ) )
      ( dbfTmpParKit )->( dbGoTop() )
      while !( dbfTmpParKit )->( eof() )
         ( dbfTmpParKit )->cCodArt := cCod
         dbPass( dbfTmpParKit, dbfParKit, .T. )
         ( dbfTmpParKit )->( dbSkip() )
      end

      ( dbfTmpAsc )->( OrdSetFocus( 0 ) )
      ( dbfTmpAsc )->( dbGoTop() )
      while !( dbfTmpAsc )->( eof() )
         ( dbfTmpAsc )->cCodArt := cCod
         dbPass( dbfTmpAsc, dbfArtAsc, .T. )
         ( dbfTmpAsc )->( dbSkip() )
      end

      ( dbfTmpOfe )->( OrdSetFocus( 0 ) )
      ( dbfTmpOfe )->( dbGoTop() )
      while !( dbfTmpOfe )->( eof() )
         ( dbfTmpOfe )->cArtOfe := cCod
         dbPass( dbfTmpOfe, dbfOfe, .T. )
         ( dbfTmpOfe )->( dbSkip() )
      end

      ( dbfTmpDoc )->( OrdSetFocus( 0 ) )
      ( dbfTmpDoc )->( dbGoTop() )
      while !( dbfTmpDoc )->( eof() )
         ( dbfTmpDoc )->cCodArt := cCod
         dbPass( dbfTmpDoc, D():ArticuloDocumentos( nView ), .T. )
         ( dbfTmpDoc )->( dbSkip() )
      end



      ( dbfTmpImg )->( OrdSetFocus( 0 ) )
      ( dbfTmpImg )->( dbGoTop() )
      while !( dbfTmpImg )->( eof() )
         ( dbfTmpImg )->cCodArt  := cCod
         ( dbfTmpImg )->nId      := ++nIdImagen
         dbPass( dbfTmpImg, D():ArticuloImagenes( nView ), .T. )
         ( dbfTmpImg )->( dbSkip() )
      end

      ( dbfTmpCodebar )->( OrdSetFocus( 0 ) )
      ( dbfTmpCodebar )->( dbGoTop() )

      while !( dbfTmpCodebar )->( eof() )

         ( dbfTmpCodebar )->cCodArt := cCod

         if ( dbfTmpCodebar )->lDefBar
            cCodArt                                                           := ( dbfTmpCodebar )->cCodBar
            nTipBar                                                           := ( dbfTmpCodebar )->nTipBar
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CodeBar"  ) ) ]    := ( dbfTmpCodebar )->cCodBar
         end

         if !empty( ( dbfTmpCodebar )->cValPr1 ) .AND. At( Alltrim( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "mValPrp1" ) ) ] ), Alltrim( ( dbfTmpCodebar )->cValPr1 ) ) == 0
            aTmp[ ( D():Articulos( nView ) )->( FieldPos( "mValPrp1" ) ) ]    := Alltrim( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "mValPrp1" ) ) ] ) + Alltrim( ( dbfTmpCodebar )->cValPr1 ) + ","
         end

         if !empty( ( dbfTmpCodebar )->cValPr2 ) .AND. At( Alltrim( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "mValPrp2" ) ) ] ), Alltrim( ( dbfTmpCodebar )->cValPr2 ) ) == 0
            aTmp[ ( D():Articulos( nView ) )->( FieldPos( "mValPrp2" ) ) ]    := Alltrim( aTmp[ ( D():Articulos( nView ) )->( FieldPos( "mValPrp2" ) ) ] ) + Alltrim( ( dbfTmpCodebar )->cValPr2 ) + ","
         end

         dbPass( dbfTmpCodebar, dbfCodebar, .T. )

         ( dbfTmpCodebar )->( dbSkip() )

      end





      if nMode <> 3

         ( dbfTmpAtp )->( OrdSetFocus( 0 ) )
         ( dbfTmpAtp )->( dbGoTop() )
         while !( dbfTmpAtp )->( eof() )
            dbPass( dbfTmpAtp, D():Atipicas( nView ), .T. )
            ( dbfTmpAtp )->( dbSkip() )
         end

      end





      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cPrvHab" ) ) ]       := cProvHab
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lLabel"  ) ) ]       := .T.
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lSndDoc" ) ) ]       := .T.
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodUsr" ) ) ]       := Auth():Codigo()
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "dFecChg" ) ) ]       := GetSysDate()
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTimChg" ) ) ]       := Time()
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr1") ) ]       := oSay[ 11 ]:nAt
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr2") ) ]       := oSay[ 12 ]:nAt
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr3") ) ]       := oSay[ 13 ]:nAt
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr4") ) ]       := oSay[ 14 ]:nAt
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr5") ) ]       := oSay[ 15 ]:nAt
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nBnfSbr6") ) ]       := oSay[ 16 ]:nAt
      aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nPosTpv" ) ) ]       -= 0.5

      if !empty( oImpComanda1 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTipImp1" ) ) ] := oImpComanda1:varGet()
      end

      if !empty( oImpComanda2 )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cTipImp2" ) ) ] := oImpComanda2:varGet()
      end

      if !empty( oActiveX )
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "mDesTec" ) ) ]     := oActiveX:DocumentHTML
      end





      if Len( aCodeBar ) <> Len( aOldCodeBar )
         lChange     := .T.
      end

      for i := 1 to Len( aCodeBar )
         if aScan( aOldCodeBar, aCodeBar[ i ] ) == 0
            lChange  := .T.
         end
      next

      if lChange
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "dChgBar" ) ) ] := GetSysDate()
      end





      ChangePublicarTemporal( aTmp )

      if ( dbfTmpImg )->( Lastrec() ) == 0
         lChangeImage  := ( cImageOld == aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ] )
      end





      if !Empty( oDetCamposExtra )
         oDetCamposExtra:saveExtraField( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], "" )
      end





      WinGather( aTmp, aGet, D():Articulos( nView ), nil, nMode )





      CommitTransaction()

   RECOVER USING oError
      RollBackTransaction()
      msgStop( "Imposible actualizar bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )
   end
   ErrorBlock( oBlock )





   if lActualizaWeb
      BuildWeb( cCod, cWebShop )
   end



   if ( nMode == 1 .OR. nMode == 4 )
      runEventScript( "Articulos\afterAppend", aTmp, nView )
   end





   oMsgText()

   oDlg:End( 1 )

   EnableAcceso()

Return ( .T. )



Static Function KillTrans( oMenu, oBmpCategoria, oBmpTemporada, oBmpEstado, oBmpGeneral, oBmpPrecios, oBmpDescripciones, oBmpPropiedades, oBmpLogistica, oBmpStocks, oBmpContabilidad, oBmpOfertas, oBmpEscandallos, oBmpWeb, oBmpUbicaciones, oBmpImagenes, oBmpTactil, oBmpAdicionales, oBmpAtipicas, oBmpDocumentos, oBmpAsociados )





   if !empty( dbfTmpPrv ) .AND. ( dbfTmpPrv )->( Used() )
      ( dbfTmpPrv )->( dbCloseArea() )
   end

   if !empty( dbfTmpLeng ) .AND. ( dbfTmpLeng )->( Used() )
      ( dbfTmpLeng )->( dbCloseArea() )
   end

   if !empty( dbfTmpAlm ) .AND. ( dbfTmpAlm )->( Used() )
      ( dbfTmpAlm )->( dbCloseArea() )
   end

   if !empty( dbfTmpVta ) .AND. ( dbfTmpVta )->( Used() )
      ( dbfTmpVta )->( dbCloseArea() )
   end

   if !empty( dbfTmpKit ) .AND. ( dbfTmpKit )->( Used() )
      ( dbfTmpKit )->( dbCloseArea() )
   end

   if !empty( dbfTmpParKit ) .AND. ( dbfTmpParKit )->( Used() )
      ( dbfTmpParKit )->( dbCloseArea() )
   end

   if !empty( dbfTmpAsc ) .AND. ( dbfTmpAsc )->( Used() )
      ( dbfTmpAsc )->( dbCloseArea() )
   end

   if !empty( dbfTmpOfe ) .AND. ( dbfTmpOfe )->( Used() )
      ( dbfTmpOfe )->( dbCloseArea() )
   end

   if !empty( dbfTmpImg ) .AND. ( dbfTmpImg )->( Used() )
      ( dbfTmpImg )->( dbCloseArea() )
   end

   if !empty( dbfTmpDoc ) .AND. ( dbfTmpDoc)->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end

   if !empty( dbfTmpCodebar ) .AND. ( dbfTmpCodebar )->( Used() )
      ( dbfTmpCodebar )->( dbCloseArea() )
   end

   if !empty( dbfTmpAtp ) .AND. ( dbfTmpAtp )->( Used() )
      ( dbfTmpAtp )->( dbCloseArea() )
   end













   dbfTmpSubCom   := nil
   dbfTmpPrv      := nil
   dbfTmpVta      := nil
   dbfTmpKit      := nil
   dbfTmpParKit   := nil
   dbfTmpAsc      := nil
   dbfTmpOfe      := nil
   dbfTmpImg      := nil
   dbfTmpAlm      := nil
   dbfTmpLeng     := nil
   dbfTmpAtp      := nil
   dbfTmpDoc      := nil

   dbfErase( filTmpPrv     )
   dbfErase( filTmpLeng    )
   dbfErase( filTmpAlm     )
   dbfErase( filTmpVta     )
   dbfErase( filTmpKit     )
   dbfErase( filTmpParKit  )
   dbfErase( filTmpAsc     )
   dbfErase( filTmpOfe     )
   dbfErase( filTmpImg     )
   dbfErase( filTmpCodebar )
   dbfErase( filTmpSubCta  )
   dbfErase( filTmpSubCom  )
   dbfErase( filTmpAtp     )
   dbfErase( filTmpDoc     )

   if !empty( oMenu )
      oMenu:End()
   end

   if !empty( oBmpTemporada )
      oBmpTemporada:End()
   end

   if !empty( oBmpCategoria )
      oBmpCategoria:End()
   end

   if !empty( oBmpEstado )
      oBmpEstado:End()
   end

   if !empty( oBmpGeneral )
      oBmpGeneral:End()
   end

   if !empty( oBmpPrecios )
      oBmpPrecios:End()
   end

   if !empty( oBmpDescripciones )
      oBmpDescripciones:End()
   end

   if !empty( oBmpPropiedades )
      oBmpPropiedades:End()
   end

   if !empty( oBmpLogistica )
      oBmpLogistica:End()
   end

   if !empty( oBmpStocks )
      oBmpStocks:End()
   end

   if !empty( oBmpContabilidad )
      oBmpContabilidad:End()
   end

   if !empty( oBmpOfertas )
      oBmpOfertas:End()
   end

   if !empty( oBmpEscandallos )
      oBmpEscandallos:End()
   end

   if !empty( oBmpAsociados )
      oBmpAsociados:End()
   end

   if !empty( oBmpWeb )
      oBmpWeb:End()
   end

   if !empty( oBmpUbicaciones )
      oBmpUbicaciones:End()
   end

   if !empty( oBmpImagenes )
      oBmpImagenes:End()
   end

   if !empty( oBmpTactil )
      oBmpTactil:End()
   end

   if !empty(oBmpAdicionales)
      oBmpAdicionales:End()
   end

   if !empty( oBmpAtipicas )
      oBmpAtipicas:End()
   end

   if !Empty( oBmpDocumentos )
      oBmpDocumentos:End()
   end

Return .T.



static function ChgKit( aTmp, aGet, oCosto )

   if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lKitArt") ) ]
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ]:Hide()
      oCosto:Show()
      oCosto:Disable()
   else
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "pCosto" ) ) ]:Show()
      oCosto:Hide()
   end

RETURN ( .T. )



STATIC FUNCTION StdCol( lIvaInc, nMode )



RETURN ( lIvaInc .AND. nMode <> 3 )



STATIC FUNCTION ActTitle( nKey, nFlags, aGet, nMode, oDlg )

   oDlg:cTitle( LblTitle( nMode ) + " artículo : " + rtrim( aGet:varget() ) )

RETURN NIL







STATIC FUNCTION EdtDet( aTmp, aGet, dbfArtPrv, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oSay1
   local cSay1
   local oBmpDiv
   local oTotal
   local lOldPrvDef                                      := aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]
   local lOldRefPrv                                      := aTmp[ ( dbfTmpPrv )->( fieldPos( "cRefPrv" ) ) ]

   if nMode == 1





      ( dbfTmpPrv )->( dbGoTop() )

      if ( dbfTmpPrv )->( Eof() )
         aTmp[ ( dbfTmpPrv )->( FieldPos( "lDefPrv" ) ) ]   := .T.
      end

      aTmp[ ( dbfTmpPrv )->( fieldpos( "cDivPrv" ) ) ]      := cDivEmp()

   end

    oDlg = TDialog():New(,,,, LblTitle( nMode ) + "codificaciones de proveedores", "ARTPRV",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









   aGet[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ]:= u ) }, oDlg,, ( Replicate( "X", RetNumCodPrvEmp() ) ), {||    ( cProvee( aGet[ ( dbfTmpPrv )->( fieldpos( "CCODPRV" ) ) ], dbfProv, oSay1 ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,, {|Self|( BrwProvee( aGet[ ( dbfTmpPrv )->( fieldpos( "CCODPRV" ) ) ], oSay1 ) )}, nil, "LUPA",, )




    oSay1 := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cSay1, cSay1:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 121, "gc_cabinet_open_16",,,,,{|| if( nMode <> 1 .AND. nMode <> 4, InfoCompras():run( aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "cCodArt" ) ) ] ), MsgInfo( "Función desactivada añadiendo" ) ) }, oDlg, .F., , .F.,  )





   aGet[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








   aGet[ ( dbfTmpPrv )->( fieldPos( "NDTOPRV" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRV" ) ) ]:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oTotal:Refresh() ) }, .F., .T.,,,,,, nil,,, )








   aGet[ ( dbfTmpPrv )->( fieldPos( "NDTOPRM" ) ) ] := TGetHlp():ReDefine( 145, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRM" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRM" ) ) ]:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oTotal:Refresh() ) }, .F., .T.,,,,,, nil,,, )













   aGet[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ]:= u ) }, oDlg,, "@!", {||    cDiv( aGet[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], oBmpDiv, nil, nil, nil, dbfDiv, oBandera )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], oBmpDiv, nil, dbfDiv, oBandera )}, nil, "LUPA",, )





    oBmpDiv := TBitmap():ReDefine( 151, ( cBmpDiv( aTmp[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], dbfDiv ) ),, oDlg,,, .F., .F.,,, .F., {||     ( nMode <> 3 )},, .F. )








   aGet[ ( dbfTmpPrv )->( fieldPos( "NIMPPRV" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NIMPPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NIMPPRV" ) ) ]:= u ) }, oDlg,, cPinDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oTotal:Refresh() ) }, .F., .T.,,,,,, nil,,, )



   oTotal := TSay():ReDefine( 170, {|| nTmpImpPrv( aTmp, dbfTmpPrv, dbfDiv, .T. )}, oDlg,,,, .F.,, .F., .F., )







   aGet[ ( dbfTmpPrv )->( fieldPos( "NSBRCOS" ) ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NSBRCOS" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NSBRCOS" ) ) ]:= u ) }, oDlg,, cPinDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   aGet[ ( dbfTmpPrv )->( fieldPos( "NBANDEJ" ) ) ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NBANDEJ" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NBANDEJ" ) ) ]:= u ) }, oDlg,, cPinDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   aGet[ ( dbfTmpPrv )->( fieldPos( "NUNDBAN" ) ) ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NUNDBAN" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NUNDBAN" ) ) ]:= u ) }, oDlg,, cPinDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





   aGet[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ] := TCheckBox():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





    TButton():ReDefine( 1, {||( EndDetalle( aTmp, aGet, dbfTmpPrv, oBrw, nMode, oDlg, lOldPrvDef, bWhen, lOldRefPrv ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| EndDetalle( aTmp, aGet, dbfTmpPrv, oBrw, nMode, oDlg, lOldPrvDef, bWhen, lOldRefPrv ) } )

   oDlg:bStart := {|| StartEdtDet( aTmp, aGet, oTotal, oBmpDiv ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( EvalGet( aGet ) )}, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function StartEdtDet( aTmp, aGet, oTotal, oBmpDiv )

   if aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]
      aGet[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]:Disable()
      aGet[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]:Enable()
   end

   if RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() )
      oTotal:hide()
      oBmpDiv:hide()
      aGet[ ( dbfTmpPrv )->( fieldPos( "NDTOPRV" ) ) ]:hide()
      aGet[ ( dbfTmpPrv )->( fieldPos( "NDTOPRM" ) ) ]:hide()
      aGet[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ]:hide()
      aGet[ ( dbfTmpPrv )->( fieldPos( "NIMPPRV" ) ) ]:hide()
   end

RETURN ( .T. )



STATIC FUNCTION EdtVta( aTmp, aGet, dbfTmpVta, oBrw, bWhen, bValid, nMode, aArt )

    local oDlg
   local oFld
   local oBtnOk
   local oBtnCancel
   local oSayPr1
   local oSayPr2
   local oSayVp1
   local oSayVp2
   local cSayPr1           := ""
   local cSayPr2           := ""
   local cSayVp1           := ""
   local cSayVp2           := ""
   local cSay              := Array( 12 )
   local oSay              := Array( 12 )
   local aBnfSobre         := aBenefSobre
   local oTotPnt
   local oImgArt
   local oBrwPrp1
   local oBrwPrp2
   local aValPrp1          := {}
   local aValPrp2          := {}
   local lColorPrp1        := .F.
   local lColorPrp2        := .F.
   local oTodasPrp1
   local oNingunaPrp1
   local oTodasPrp2
   local oNingunaPrp2
   local oBrwImg
   local oPrp1
   local cPrp1
   local oPrp2
   local cPrp2





   if nMode == 1
      aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ]   := aArt[ ( D():Articulos( nView ) )->( fieldpos( "Codigo") ) ]
      aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ]   := aArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1") ) ]
      aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ]   := aArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2") ) ]
   end

   if empty( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] )
      msgstop( "No hay propiedades seleccionadas.")
      Return .F.
   end





   aValPrp1                := aLlenaPropiedades( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ], aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ], nMode, oBrw, dbfTmpVta )
   aValPrp2                := aLlenaPropiedades( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ], aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ], nMode, oBrw, dbfTmpVta )





   lColorPrp1              := retFld( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ], dbfPro, "lColor" )
   lColorPrp2              := retFld( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ], dbfPro, "lColor" )





   if Len( oBrw:aSelected ) > 1 .AND. nMode <> 1

      aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ]   := ""
      aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ]   := ""
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreCom" ) ) ]   := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "lBnf1" ) ) ]     := .F.
      aTmp[ ( dbfTmpVta )->( FieldPos( "lBnf2" ) ) ]     := .F.
      aTmp[ ( dbfTmpVta )->( FieldPos( "lBnf3" ) ) ]     := .F.
      aTmp[ ( dbfTmpVta )->( FieldPos( "lBnf4" ) ) ]     := .F.
      aTmp[ ( dbfTmpVta )->( FieldPos( "lBnf5" ) ) ]     := .F.
      aTmp[ ( dbfTmpVta )->( FieldPos( "lBnf6" ) ) ]     := .F.
      aTmp[ ( dbfTmpVta )->( FieldPos( "Benef1" ) ) ]    := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "Benef2" ) ) ]    := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "Benef3" ) ) ]    := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "Benef4" ) ) ]    := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "Benef5" ) ) ]    := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "Benef6" ) ) ]    := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nBnfSbr1" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nBnfSbr2" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nBnfSbr3" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nBnfSbr4" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nBnfSbr5" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nBnfSbr6" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreVta1" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreVta2" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreVta3" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreVta4" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreVta5" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreVta6" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreIva1" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreIva2" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreIva3" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreIva4" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreIva5" ) ) ]  := 0
      aTmp[ ( dbfTmpVta )->( FieldPos( "nPreIva6" ) ) ]  := 0

   end





   cSay[1]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr1" ) ) ], 1 ) ]
   cSay[2]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr2" ) ) ], 1 ) ]
   cSay[3]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr3" ) ) ], 1 ) ]
   cSay[4]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr4" ) ) ], 1 ) ]
   cSay[5]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr5" ) ) ], 1 ) ]
   cSay[6]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr6" ) ) ], 1 ) ]
   cSay[7]                 := uFieldEmpresa( "cTxtTar1", "Precio 1" )
   cSay[8]                 := uFieldEmpresa( "cTxtTar2", "Precio 2" )
   cSay[9]                 := uFieldEmpresa( "cTxtTar3", "Precio 3" )
   cSay[10]                := uFieldEmpresa( "cTxtTar4", "Precio 4" )
   cSay[11]                := uFieldEmpresa( "cTxtTar5", "Precio 5" )
   cSay[12]                := uFieldEmpresa( "cTxtTar6", "Precio 6" )





   lCargaImagenes()

   if len( oBrw:aSelected ) == 1
      selectImagen( aTmp )
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "precios por propiedades", "PREDIV",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )












      oFld := TFolder():ReDefine( 200, {"Precios", "Imágenes"}, { "PREDIV01","PREDIV02" }, oDlg,,,,, .F., )





      oBrwPrp1                   := IXBrowse():New( oDlg )

      oBrwPrp1:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp1:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp1:nMarqueeStyle     := 5
      oBrwPrp1:lRecordSelector   := .F.
      oBrwPrp1:lHScroll          := .F.
      oBrwPrp1:cName             := "Articulo.Propiedad1"

      oBrwPrp1:setArray( aValPrp1, .T., , .F. )

      oBrwPrp1:bLDblClick        := {|| seleccionPropiedad( aValPrp1, oBrwPrp1, oBrwPrp1:nArrayAt ) }
      oBrwPrp1:bSeek             := {|c,n| cSeekBrwPropiedades( c, oBrwPrp1 ) }




      oBrwPrp1:oSeek := TSay():ReDefine( 115, {||               oBrwPrp1:cSeek}, oDlg,,,, .F.,, .F., .F., )

      oBrwPrp1:CreateFromResource( 100 )

      with object ( oBrwPrp1:AddCol() )
         :cHeader          := "S"
         :bStrData         := {|| "" }
         :bEditValue       := {|| if( !empty( aValPrp1 ), aValPrp1[ oBrwPrp1:nArrayAt ]:lSel, .F. ) }
         :nWidth           := 16
         :SetCheck( { "bSel", "Nil16" } )
      end

      with object ( oBrwPrp1:AddCol() )
         :cHeader          := "Código"
         :bStrData         := {|| if( !empty( aValPrp1 ), aValPrp1[ oBrwPrp1:nArrayAt ]:cValPrp, "" ) }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | cOrdenBrwPropiedades( oCol, oBrwPrp1 ) }
      end

      with object ( oBrwPrp1:AddCol() )
         :cHeader          := if( !empty( aValPrp1 ), retFld( aValPrp1[ oBrwPrp1:nArrayAt ]:cCodPrp, dbfPro ), "" )
         :bStrData         := {|| if( !empty( aValPrp1 ), aValPrp1[ oBrwPrp1:nArrayAt ]:cDesPrp, "" ) }
         :nWidth           := if( lColorPrp1, 103, 119 )
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | cOrdenBrwPropiedades( oCol, oBrwPrp1, alltrim( retFld( aValPrp1[ oBrwPrp1:nArrayAt ]:cCodPrp, dbfPro ) ) ) }
      end

      if lColorPrp1

      with object ( oBrwPrp1:AddCol() )
         :cHeader          := "C"
         :bStrData         := {|| "" }
         :nWidth           := 16
         :bClrStd          := {|| { nRGB( 0, 0, 0), if( !empty( aValPrp1 ), aValPrp1[ oBrwPrp1:nArrayAt ]:nColor, 0 ) } }
         :bClrSel          := {|| { nRGB( 0, 0, 0), if( !empty( aValPrp1 ), aValPrp1[ oBrwPrp1:nArrayAt ]:nColor, 0 ) } }
         :bClrSelFocus     := {|| { nRGB( 0, 0, 0), if( !empty( aValPrp1 ), aValPrp1[ oBrwPrp1:nArrayAt ]:nColor, 0 ) } }
      end

      end




      oTodasPrp1 := TButton():ReDefine( 111, {||( lSelAllPrp( aValPrp1, oBrwPrp1, .T. ) )}, oDlg,,, .F.,,,, .F. )




      oNingunaPrp1 := TButton():ReDefine( 112, {||( lSelAllPrp( aValPrp1, oBrwPrp1, .F. ) )}, oDlg,,, .F.,,,, .F. )





      oBrwPrp2                   := IXBrowse():New( oDlg )

      oBrwPrp2:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp2:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp2:SetArray( aValPrp2, .T., , .F. )

      oBrwPrp2:nMarqueeStyle     := 5
      oBrwPrp2:lRecordSelector   := .F.
      oBrwPrp2:lHScroll          := .F.
      oBrwPrp2:cName             := "Articulo.Propiedad2"

      oBrwPrp2:CreateFromResource( 110 )

      oBrwPrp2:bLDblClick        := {|| SeleccionPropiedad( aValPrp2, oBrwPrp2, oBrwPrp2:nArrayAt ) }

      oBrwPrp2:bLDblClick        := {|| seleccionPropiedad( aValPrp2, oBrwPrp2, oBrwPrp2:nArrayAt ) }
      oBrwPrp2:bSeek             := {|c,n| cSeekBrwPropiedades( c, oBrwPrp2 ) }




      oBrwPrp2:oSeek := TSay():ReDefine( 116, {||               oBrwPrp2:cSeek}, oDlg,,,, .F.,, .F., .F., )

      with object ( oBrwPrp2:AddCol() )
         :cHeader          := "S"
         :bStrData         := {|| "" }
         :bEditValue       := {|| if( !empty( aValPrp2 ), aValPrp2[ oBrwPrp2:nArrayAt ]:lSel, .F. ) }
         :nWidth           := 16
         :SetCheck( { "bSel", "Nil16" } )
      end

      with object ( oBrwPrp2:AddCol() )
         :cHeader          := "Código"
         :bStrData         := {|| if( !empty( aValPrp2 ), aValPrp2[ oBrwPrp2:nArrayAt ]:cValPrp, "" ) }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | cOrdenBrwPropiedades( oCol, oBrwPrp2 ) }
      end

      with object ( oBrwPrp2:AddCol() )
         :cHeader          := if( !empty( aValPrp2 ), retFld( aValPrp2[ oBrwPrp2:nArrayAt ]:cCodPrp, dbfPro ), "" )
         :bStrData         := {|| if( !empty( aValPrp2 ), aValPrp2[ oBrwPrp2:nArrayAt ]:cDesPrp, "" ) }
         :nWidth           := if( lColorPrp2, 103, 119 )
         :cOrder           := "A"
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | cOrdenBrwPropiedades( oCol, oBrwPrp2, AllTrim( retFld( aValPrp2[ oBrwPrp2:nArrayAt ]:cCodPrp, dbfPro ) ) ) }
      end

      if lColorPrp2

      with object ( oBrwPrp2:AddCol() )
         :cHeader          := "C"
         :bStrData         := {|| "" }
         :nWidth           := 16
         :bClrStd          := {|| { nRGB( 0, 0, 0), if( !empty( aValPrp1 ), aValPrp2[ oBrwPrp2:nArrayAt ]:nColor, 0 ) } }
         :bClrSel          := {|| { nRGB( 0, 0, 0), if( !empty( aValPrp1 ), aValPrp2[ oBrwPrp2:nArrayAt ]:nColor, 0 ) } }
         :bClrSelFocus     := {|| { nRGB( 0, 0, 0), if( !empty( aValPrp1 ), aValPrp2[ oBrwPrp2:nArrayAt ]:nColor, 0 ) } }
      end

      end




      oTodasPrp2 := TButton():ReDefine( 113, {||( lSelAllPrp( aValPrp2, oBrwPrp2, .T. ) )}, oDlg,,, .F.,,,, .F. )




      oNingunaPrp2 := TButton():ReDefine( 114, {||( lSelAllPrp( aValPrp2, oBrwPrp2, .F. ) )}, oDlg,,, .F.,,,, .F. )









      oPrp1 := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ], aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ]:= u ) }, oDlg,,, {||    ( lPrpAct( aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ], oSayVp1, aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ], dbfTblPro ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPropiedadActual( oPrp1, oSayVp1, aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] ) )}, nil, "LUPA",, )




      oSayPr1 := TSay():ReDefine( 211, {||      cSayPr1}, oDlg,,,, .F.,, .F., .F., )





      oSayVp1 := TGetHlp():ReDefine( 212, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      oPrp2 := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ], aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ]:= u ) }, oDlg,,, {||    ( lPrpAct( aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ], oSayVp2, aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ], dbfTblPro ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPropiedadActual( oPrp2, oSayVp2, aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] ) )}, nil, "LUPA",, )




      oSayPr2 := TSay():ReDefine( 221, {||      cSayPr2}, oDlg,,,, .F.,, .F., .F., )





      oSayVp2 := TGetHlp():ReDefine( 222, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ] := TGetHlp():ReDefine( 600, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ]:= u ) }, oFld:aDialogs[1],, cPinDiv(), {||    (  aGet[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ]:lValid(), .T. )},,,,,, .F., {||     ( !aArt[ ( D():Articulos( nView ) )->( fieldPos( "lKitArt") ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,, 401, )







      oSay[ 7 ] := TSay():ReDefine( 610, {|| cSay[ 7 ]}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSay[ 8 ] := TSay():ReDefine( 620, {|| cSay[ 8 ]}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSay[ 9 ] := TSay():ReDefine( 630, {|| cSay[ 9 ]}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSay[ 10 ] := TSay():ReDefine( 640, {|| cSay[ 10 ]}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSay[ 11 ] := TSay():ReDefine( 650, {|| cSay[ 11 ]}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSay[ 12 ] := TSay():ReDefine( 660, {|| cSay[ 12 ]}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )
















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    (  lCalPre( oSay[ 1 ]:nAt <= 1, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef1"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva1") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      oSay[ 1 ] := TComboBox():ReDefine( 320, { | u | If( PCount()==0, cSay[ 1 ], cSay[ 1 ]:= u ) }, aBnfSobre, oFld:aDialogs[1],,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1") )]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 1 ]",,,,,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1" ) ) ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta1" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfPts(   oSay[ 1 ]:nAt <= 1, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta1") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef1"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva1") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva1" ) ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva1" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfIva(   oSay[ 1 ]:nAt <= 1, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva1") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef1"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ] := TCheckBox():ReDefine( 350, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )
















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalPre(   oSay[ 2 ]:nAt <= 2, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef2"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva2") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      oSay[ 2 ] := TComboBox():ReDefine( 370, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, aBnfSobre, oFld:aDialogs[1],,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2")) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 2 ]",,,,,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2" ) ) ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta2" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfPts(   oSay[ 2 ]:nAt <= 2, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta2") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef2"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva2") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva2" ) ) ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva2" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfIva(   oSay[ 2 ]:nAt <= 2, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva2") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef2"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )
















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalPre(  oSay[ 3 ]:nAt <= 3, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef3"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva3") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      oSay[ 3 ] := TComboBox():ReDefine( 420, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, aBnfSobre, oFld:aDialogs[1],,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3")) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 3 ]",,,,,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta3" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfPts(   oSay[ 3 ]:nAt <= 3, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta3") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef3"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva3") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva3" ) ) ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva3" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfIva(   oSay[ 3 ]:nAt <= 3, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva3") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef3"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ] := TCheckBox():ReDefine( 450, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )
















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalPre(   oSay[ 4 ]:nAt <= 4, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef4"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva4") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      oSay[ 4 ] := TComboBox():ReDefine( 470, { | u | If( PCount()==0, cSay[ 4 ], cSay[ 4 ]:= u ) }, aBnfSobre, oFld:aDialogs[1],,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4")) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 4 ]",,,,,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4" ) ) ] := TGetHlp():ReDefine( 480, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta4" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfPts(   oSay[ 4 ]:nAt <= 4, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta4") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef4"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva4") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva4" ) ) ] := TGetHlp():ReDefine( 490, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva4" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfIva(   oSay[ 4 ]:nAt <= 4, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva4") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef4"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ] := TCheckBox():ReDefine( 500, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )
















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalPre(   oSay[ 5 ]:nAt <= 5, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef5"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva5") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      oSay[ 5 ] := TComboBox():ReDefine( 520, { | u | If( PCount()==0, cSay[ 5 ], cSay[ 5 ]:= u ) }, aBnfSobre, oFld:aDialogs[1],,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5") )]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 5 ]",,,,,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5" ) ) ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta5" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfPts(   oSay[ 5 ]:nAt <= 5, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta5") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef5"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva5") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva5" ) ) ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva5" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfIva(   oSay[ 5 ]:nAt <= 5, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva5") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef5"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ] := TCheckBox():ReDefine( 550, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )
















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ] := TGetHlp():ReDefine( 560, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalPre(   oSay[ 6 ]:nAt <= 6, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef6"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva6") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      oSay[ 6 ] := TComboBox():ReDefine( 570, { | u | If( PCount()==0, cSay[ 6 ], cSay[ 6 ]:= u ) }, aBnfSobre, oFld:aDialogs[1],,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6") )]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oSay[ 6 ]",,,,,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6" ) ) ] := TGetHlp():ReDefine( 580, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta6" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfPts(   oSay[ 6 ]:nAt <= 6, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta6") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef6"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva6") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )
















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva6" ) ) ] := TGetHlp():ReDefine( 590, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva6" ) ) ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBnfIva(   oSay[ 6 ]:nAt <= 6, aArt[ (D():Articulos( nView ))->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva6") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef6"  ) ) ], aArt[ (D():Articulos( nView ))->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6") ) ], nDecDiv, aArt[ (D():Articulos( nView ))->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], nMode ) )},, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpVta )->( fieldpos( "cCodWp" ) ) ] := TGetHlp():ReDefine( 700, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "cCodWp" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "cCodWp" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oBrwImg                 := IXBrowse():New( oFld:aDialogs[2] )

      oBrwImg:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwImg:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwImg:SetArray( aImgsArticulo, , , .F. )
      oBrwImg:nMarqueeStyle   := 6
      oBrwImg:cName           := "Artículo.Imagenes.Propiedades"
      oBrwImg:nRowHeight      := 100
      oBrwImg:nDataLines      := 2

      with object ( oBrwImg:AddCol() )
         :cHeader             := "Seleccionada"
         :bStrData            := {|| "" }
         :bEditValue          := {|| aImgsArticulo[ oBrwImg:nArrayAt ]:lselect }
         :nWidth              := 20
         :SetCheck( { "BSEL", "Nil16" } )
      end

      with object ( oBrwImg:AddCol() )
         :cHeader             := "Imagen"
         :nEditType           := -1
         :lBmpStretch         := .F.
         :lBmpTransparent     := .T.
         :bStrImage           := {|| aImgsArticulo[ oBrwImg:nArrayAt ]:ruta }
         :nDataBmpAlign       := 2
         :nWidth              := 100
      end

      with object ( oBrwImg:AddCol() )
         :cHeader             := "Imagen"
         :bEditValue          := {|| AllTrim( aImgsArticulo[ oBrwImg:nArrayAt ]:tooltip ) + Chr(13)+Chr(10) + AllTrim( aImgsArticulo[ oBrwImg:nArrayAt ]:ruta ) }
         :nWidth              := 350
      end

      if nMode <> 3
         oBrwImg:bLDblClick   := {|| SeleccionaImagen( oBrwImg ) }
      end

      oBrwImg:CreateFromResource( 110 )









      oBtnOk := TButton():ReDefine( 1, {||( EndEdtVta( aValPrp1, aValPrp2, aTmp, aGet, oSay, cSay, oBrw, oDlg, dbfTmpVta, nMode, oBrwPrp1, oBrwPrp2 ) )}, oDlg,,, .F.,,,, .F. )





      oBtnCancel := TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart := {|| StartEdtVta( aTmp, aGet, nMode, oBrwPrp1, oBrwPrp2, oTodasPrp1, oNingunaPrp1, oTodasPrp2, oNingunaPrp2, oBtnOk, oBtnCancel, oSay, oPrp1, oSayPr1, oSayVp1, oPrp2, oSayPr2, oSayVp2 ) }

      if nMode <> 1
         oDlg:AddFastKey( 116, {|| EndEdtVta( aValPrp1, aValPrp2, aTmp, aGet, oSay, cSay, oBrw, oDlg, dbfTmpVta, nMode, oBrwPrp1, oBrwPrp2 ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static function cOrdenBrwPropiedades( oCol, oBrw, cOrden )

   local oColumn

   if empty( oBrw )
      Return .T.
   end

   do case
      case alltrim( oCol:cHeader ) == cOrden

         aSort( oBrw:aArrayData, , , {|x,y| x:cDesPrp < y:cDesPrp } )

         for each oColumn in oBrw:aCols
            oColumn:cOrder := ""
         next

         oCol:cOrder       := cOrden

      case alltrim( oCol:cHeader ) == "Código"

         aSort( oBrw:aArrayData, , , {|x,y| val( x:cValPrp ) < val( y:cValPrp ) } )

         for each oColumn in oBrw:aCols
            oColumn:cOrder := ""
         next

         oCol:cOrder       := "Código"

   end

   oBrw:Refresh()

return .T.



static function cSeekBrwPropiedades( cSeek, oBrw )

   local nAt
   local uVal
   local nRow
   local cHeader
   local nColumnOrder

   if empty( cSeek )
      Return .T.
   end

   if empty( oBrw )
      Return .T.
   end

   nColumnOrder            := ascan( oBrw:aCols, { |o| !empty( o:cOrder ) } )
   if !empty( nColumnOrder )
      cHeader              := oBrw:aCols[ nColumnOrder ]:cHeader
   end

   cSeek                   := Upper( cSeek )

   for nRow := 1 to oBrw:nLen

      if cHeader <> "Código"
         uVal              := oBrw:aArrayData[ nRow ]:cDesPrp
      else
         uVal              := oBrw:aArrayData[ nRow ]:cValPrp
      end

      if valtype( uVal ) == "C"
         uVal              := Upper( uVal )

         if ( cSeek $ uVal )
            nAt            := nRow
         end

         if !empty( nAt )
            oBrw:nArrayAt  := nAt
            Return .T.
         end

      end

   next

Return .T.



STATIC FUNCTION EdtLeng( aTmp, aGet, dbfTmpLeng, oBrw, bWhen, bValid, nMode, aTmpArt )

   local oDlg
   local oBmp

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "descripciones por lenguaje", "ARTICULO_LENGUAJE",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





   oBmp := TBitmap():ReDefine( 600, "gc_user_message_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )









   aGet[ ( dbfTmpLeng )->( fieldpos( "cCodLen" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpLeng )->( fieldpos( "cCodLen" ) ) ], aTmp[ ( dbfTmpLeng )->( fieldpos( "cCodLen" ) ) ]:= u ) }, oDlg,,, {||    ( oLenguajes:Existe( aGet[ ( dbfTmpLeng )->( fieldpos( "cCodLen" ) ) ], aGet[ ( dbfTmpLeng )->( fieldpos( "cCodLen" ) ) ]:oHelpText, "cNomLen" ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( oLenguajes:Buscar( aGet[ ( dbfTmpLeng )->( fieldpos( "cCodLen" ) ) ] ) )}, nil, "LUPA",, 111 )




   aGet[ ( dbfTmpLeng )->( fieldpos( "cDesTik" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpLeng )->( fieldpos( "cDesTik" ) ) ], aTmp[ ( dbfTmpLeng )->( fieldpos( "cDesTik" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





   aGet[ ( dbfTmpLeng )->( fieldpos( "cDesArt" ) ) ] := TMultiGet():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpLeng )->( fieldpos( "cDesArt" ) ) ], aTmp[ ( dbfTmpLeng )->( fieldpos( "cDesArt" ) ) ]:= u ) }, oDlg,,,,,,, .F.,, .F.,, )




   TButton():ReDefine( 1, {||( EndEdtLeng( aGet, aTmp, aTmpArt, dbfTmpLeng, oBrw, nMode, oDlg ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 1
      oDlg:AddFastKey( 116, {|| EndEdtLeng( aGet, aTmp, aTmpArt, dbfTmpLeng, oBrw, nMode, oDlg ) } )
   end

   oDlg:bStart    := {|| aGet[ ( dbfTmpLeng )->( fieldpos( "cCodLen" ) ) ]:lValid() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !empty( oBmp )
      oBmp:End()
   end

RETURN ( oDlg:nResult == 1 )



static function EndEdtLeng( aGet, aTmp, aTmpArt, dbfTmpLeng, oBrw, nMode, oDlg )

   if empty( aTmp[ ( dbfTmpLeng )->( FieldPos( "cCodLen" ) ) ] )
      MsgStop( "Código de lenguaje no puede estar vacío." )
      aGet[ ( dbfTmpLeng )->( FieldPos( "cCodLen" ) ) ]:SetFocus()
      Return .F.
   end

   if empty( aTmp[ ( dbfTmpLeng )->( FieldPos( "cDesTik" ) ) ] ) .AND. empty( aTmp[ ( dbfTmpLeng )->( FieldPos( "cDesArt" ) ) ] )
      MsgStop( "Tiene que introducir al menos una descripción." )
      aGet[ ( dbfTmpLeng )->( FieldPos( "cDesTik" ) ) ]:SetFocus()
      Return .F.
   end





   aTmp[ ( dbfTmpLeng )->( FieldPos( "cCodArt" ) ) ]  := aTmpArt[ ( D():Articulos( nView ) )->( FieldPos( "Codigo" ) ) ]





   WinGather( aTmp, aGet, dbfTmpLeng, oBrw, nMode )

   oDlg:End( 1 )

Return ( .T. )



static function aLlenaPropiedades( cCodigoPropiedad, nValPrp, nMode, oBrw )

   local a
   local nRec
   local nOrdAnt
   local aValores       := {}
   local oTemporal

   if len( oBrw:aSelected ) >= 1 .AND. nMode <> 1

      nRec              := ( dbfTblPro )->( Recno() )
      nOrdAnt           := ( dbfTblPro )->( OrdSetFocus( "cCodPro" ) )

      for each a in oBrw:aSelected

         ( dbfTmpVta )->( dbGoTo( a ) )

         if ( dbfTmpVta )->cCodPr1 == cCodigoPropiedad

            if aScan( aValores, {|a| a:cCodPrp == cCodigoPropiedad .AND. a:cValPrp == ( dbfTmpVta )->cValPr1 } ) == 0

               if ( dbfTblPro )->( dbSeek( ( dbfTmpVta )->cCodPr1 + ( dbfTmpVta )->cValPr1 ) )

                  oTemporal                     := SValorPropiedades()
                  oTemporal:cCodPrp             := cCodigoPropiedad
                  oTemporal:cValPrp             := ( dbfTmpVta )->cValPr1
                  oTemporal:cDesPrp             := ( dbfTblPro )->cDesTbl
                  oTemporal:nColor              := ( dbfTblPro )->nColor
                  oTemporal:lSel                := .T.

                  aAdd( aValores, oTemporal )

               end

            end

         end

         if ( dbfTmpVta )->cCodPr2 == cCodigoPropiedad

            if aScan( aValores, {|a| a:cCodPrp == cCodigoPropiedad .AND. a:cValPrp == ( dbfTmpVta )->cValPr2 } ) == 0

               if ( dbfTblPro )->( dbSeek( ( dbfTmpVta )->cCodPr2 + ( dbfTmpVta )->cValPr2 ) )

                  oTemporal                     := SValorPropiedades()
                  oTemporal:cCodPrp             := cCodigoPropiedad
                  oTemporal:cValPrp             := ( dbfTmpVta )->cValPr2
                  oTemporal:cDesPrp             := ( dbfTblPro )->cDesTbl
                  oTemporal:nColor              := ( dbfTblPro )->nColor
                  oTemporal:lSel                := .T.

                  aAdd( aValores, oTemporal )

               end

            end

         end

      next

      ( dbfTblPro )->( OrdSetFocus( nOrdAnt ) )
      ( dbfTblPro )->( dbGoTo( nRec ) )

   else

      nRec              := ( dbfTblPro )->( Recno() )
      nOrdAnt           := ( dbfTblPro )->( OrdSetFocus( "cPro" ) )

      if ( dbfTblPro )->( dbSeek( cCodigoPropiedad ) )

         while ( dbfTblPro )->cCodPro == cCodigoPropiedad .AND. !( dbfTblPro )->( Eof() )

            if ( nMode <> 2 ) .OR. ( ( nMode == 2 ) .AND. ( ( dbfTblPro )->cCodTbl == nValPrp ) )

               oTemporal                     := SValorPropiedades()
               oTemporal:cCodPrp             := cCodigoPropiedad
               oTemporal:cValPrp             := ( dbfTblPro )->cCodTbl
               oTemporal:cDesPrp             := ( dbfTblPro )->cDesTbl
               oTemporal:nColor              := ( dbfTblPro )->nColor
               oTemporal:lSel                := ( ( dbfTblPro )->cCodTbl == nValPrp )

               aAdd( aValores, oTemporal )

            end

            ( dbfTblPro )->( dbSkip() )

         end

      end

      ( dbfTblPro )->( OrdSetFocus( nOrdAnt ) )
      ( dbfTblPro )->( dbGoTo( nRec ) )

   end

return aValores



static function SeleccionPropiedad( aValPrp, oBrwPrp, nPos )

   aValPrp[ nPos ]:lSel   := !aValPrp[ nPos ]:lSel

   if !empty( oBrwPrp )
      oBrwPrp:Refresh()
   end

Return .T.



static function lSelAllPrp( aValPrp, oBrwPrp, lVal )

   local n := 0

   for n:= 1 to Len( aValPrp )
      aValPrp[ n ]:lSel    := lVal
   next

   if !empty( oBrwPrp )
      oBrwPrp:Refresh()
   end

return .T.



Static Function EndEdtVta( aValPrp1, aValPrp2, aTmp, aGet, oSay, cSay, oBrw, oDlg, dbfTmpVta, nMode, oBrwPrp1, oBrwPrp2 )

   local aVal1
   local aVal2
   local nContAdd    := 0
   local nContEdt    := 0
   local lSelPr1     := .F.
   local lSelPr2     := .F.
   local nOrdAnt     := ( dbfTmpVta )->( OrdSetFocus( "cCodArt" ) )

   if nMode == 1 .OR. Len( oBrw:aSelected ) > 1

      do case
         case Len( aValPrp1 ) <> 0 .AND. Len( aValPrp2 ) == 0





            for each aVal1 in aValPrp1
               if aVal1:lsel
                  lSelPr1     := .T.
               end
            next

            if lSelPr1

               for each aVal1 in aValPrp1

                  if aVal1:lsel

                     if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ] + aVal1:cCodPrp + Space( 40 ) + aVal1:cValPrp + Space( 40 ) ) )

                        aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aVal1:cCodPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aVal1:cValPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                        WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                        nContEdt++

                     else

                        aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aVal1:cCodPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aVal1:cValPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ] := mSer2Mem()

                        WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                        nContAdd++

                     end

                  end

               next

            else

               if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ] + aValPrp1[ oBrwPrp1:nArrayAt ]:cCodPrp + Space( 20 ) + aValPrp1[oBrwPrp1:nArrayAt]:cValPrp + Space( 20 ) ) )

                  aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp
                  aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cValPrp
                  aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                  WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                  nContEdt++

               else

                  aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp
                  aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cValPrp
                  aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                  WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                  nContAdd++

               end

            end

            msgWait( "He añadido " + AllTrim( Str( nContAdd ) ) + " registros y he modificado " + AllTrim( Str( nContEdt ) ) + " registros", "Proceso terminado con éxito", 2 )

            lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

         case Len( aValPrp1 ) <> 0 .AND. Len( aValPrp2 ) <> 0





            for each aVal1 in aValPrp1
               if aVal1:lsel
                  lSelPr1     := .T.
               end
            next

            for each aVal2 in aValPrp2
               if aVal2:lsel
                  lSelPr2     := .T.
               end
            next

            do case
               case lSelPr1 .AND. lSelPr2

                  for each aVal1 in aValPrp1

                     for each aVal2 in aValPrp2

                        if aVal1:lSel .AND. aVal2:lSel

                           if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ] + aVal1:cCodPrp + aVal2:cCodPrp + aVal1:cValPrp + aVal2:cValPrp ) )

                              aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aVal1:cCodPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aVal1:cValPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aVal2:cCodPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aVal2:cValPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                              WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                              nContEdt++

                           else

                              aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aVal1:cCodPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aVal1:cValPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aVal2:cCodPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aVal2:cValPrp
                              aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                              WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                              nContAdd++

                           end

                        end

                     next

                  next

                  msgWait( "He añadido " + AllTrim( Str( nContAdd ) ) + " registros y he modificado " + AllTrim( Str( nContEdt ) ) + " registros", "Proceso terminado con éxito", 2 )

                  lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

               case !lSelPr1 .AND. lSelPr2

                  for each aVal2 in aValPrp2

                     if aVal2:lSel

                        if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ] + aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp + aVal2:cCodPrp + aValPrp1[oBrwPrp1:nArrayAt]:cValPrp + aVal2:cValPrp ) )

                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aVal2:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aVal2:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                           WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                           nContEdt++

                        else

                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aVal2:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aVal2:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                           WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                           nContAdd++

                        end

                     end

                  next

                  msgWait( "He añadido " + AllTrim( Str( nContAdd ) ) + " registros y he modificado " + AllTrim( Str( nContEdt ) ) + " registros", "Proceso terminado con éxito", 2 )

                  lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

               case lSelPr1 .AND. !lSelPr2

                  for each aVal1 in aValPrp1

                     if aVal1:lSel

                        if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ] + aVal1:cCodPrp + aValPrp2[oBrwPrp2:nArrayAt]:cCodPrp + aVal1:cValPrp + aValPrp2[oBrwPrp2:nArrayAt]:cValPrp ) )

                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aVal1:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aVal1:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                           WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                           nContEdt++

                        else

                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aVal1:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aVal1:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cCodPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cValPrp
                           aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                           WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                           nContAdd++

                        end

                     end

                  next

                  msgWait( "He añadido " + AllTrim( Str( nContAdd ) ) + " registros y he modificado " + AllTrim( Str( nContEdt ) ) + " registros", "Proceso terminado con éxito", 2 )

                  lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

               case !lSelPr1 .AND. !lSelPr2

                  if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ] + aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp + aValPrp2[oBrwPrp2:nArrayAt]:cCodPrp + aValPrp1[oBrwPrp1:nArrayAt]:cValPrp + aValPrp2[oBrwPrp2:nArrayAt]:cValPrp ) )

                     aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cValPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cCodPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cValPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                     WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                     nContEdt++

                  else

                     aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cCodPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr1" ) ) ] := aValPrp1[oBrwPrp1:nArrayAt]:cValPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cCodPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "cValPr2" ) ) ] := aValPrp2[oBrwPrp2:nArrayAt]:cValPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

                     WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                     nContAdd++

                  end

                  msgWait( "He añadido " + AllTrim( Str( nContAdd ) ) + " registros y he modificado " + AllTrim( Str( nContEdt ) ) + " registros", "Proceso terminado con éxito", 2 )

                  lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

            end

      end

   else

      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr1") ) ]   := oSay[ 1 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr2") ) ]   := oSay[ 2 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr3") ) ]   := oSay[ 3 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr4") ) ]   := oSay[ 4 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr5") ) ]   := oSay[ 5 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr6") ) ]   := oSay[ 6 ]:nAt
      aTmp[ ( dbfTmpVta )->( FieldPos( "MIMGWEB" ) ) ]   := mSer2Mem()

      WinGather( aTmp, aGet, dbfTmpVta, oBrw, nMode )

   end

   if nMode <> 1
      oDlg:End( 1 )
   end

   ( dbfTmpVta )->( OrdSetFocus( nOrdAnt ) )

   if !empty( oBrw )
      oBrw:Refresh()
   end

RETURN ( nil )



static function lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

   local aValPrp
   local cCodArt           := aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ]
   local cCodPrp1          := aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ]
   local cCodPrp2          := aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ]





   for each aValPrp in aValPrp1
      aValPrp:lSel         := .F.
   next

   if !empty( oBrwPrp1 )
      oBrwPrp1:Refresh()
   end

   for each aValPrp in aValPrp2
      aValPrp:lSel         := .F.
   next

   if !empty( oBrwPrp2 )
      oBrwPrp2:Refresh()
   end





   aCopy( dbBlankRec( dbfTmpVta ), aTmp )

   aTmp[ ( dbfTmpVta )->( FieldPos( "cCodArt" ) ) ]   := cCodArt
   aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ]   := cCodPrp1
   aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ]   := cCodPrp2

   cSay[1]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr1" ) ) ], 1 ) ]
   cSay[2]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr2" ) ) ], 1 ) ]
   cSay[3]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr3" ) ) ], 1 ) ]
   cSay[4]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr4" ) ) ], 1 ) ]
   cSay[5]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr5" ) ) ], 1 ) ]
   cSay[6]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr6" ) ) ], 1 ) ]

   if !empty( aGet )
      aEval( aGet, {| o | if( !empty( o ), o:Refresh(), ) } )
   end

   if !empty( oSay )
      aEval( oSay, {| o | if( !empty( o ), o:Refresh(), ) } )
   end

return ( .T. )






STATIC FUNCTION EdtCodebar( aTmp, aGet, dbfTmpCodebar, oBrw, bWhen, bValid, nMode, aArt )

    local oDlg
   local cOldCodebar                                     := aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]

   aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr1" ) ) ]  := aArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]
   aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr2" ) ) ]  := aArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "codigos de barras", "ArtCode",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( lCalEan13( aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ] ) )}, nil, "gc_calculator_16",, )





      aGet[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ], aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )














      aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ], aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:= u ) }, oDlg,, "@!", {||    ( lPrpAct( aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr1" ) ) ], dbfTblPro ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr1" ) ) ] ) )}, nil, "LUPA", 122, 121 )










      aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ], aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:= u ) }, oDlg,, "@!", {||    ( lPrpAct( aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr2" ) ) ], dbfTblPro ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr2" ) ) ] ) )}, nil, "LUPA", 132, 131 )




      TButton():ReDefine( 1, {||( SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode ) } )


      oDlg:bStart          := {||   aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:lValid(), aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:lValid() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode )

   local nRec
   local lDef  := .F.





   if dbSeekCodebar( aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], dbfTmpCodebar, cOldCodebar, .T. )
      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SetFocus()
      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SelectAll()
      return .F.
   end





   if dbSeekInOrd( aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], "cCodBar", dbfCodebar )



      if ( dbfCodebar )->cCodArt <> aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodArt" ) ) ] .AND. !ApoloMsgNoYes( "El código de barras se ha introducido para el artículo: "  + AllTrim( ( dbfCodebar )->cCodArt ) + " - " + AllTrim( RetFld( ( dbfCodebar )->cCodArt, D():Articulos( nView ) ) ) ,"¿Desea introducirlo en éste artículo?" )

         aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SetFocus()
         aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SelectAll()

         return .F.

      end

   end

   if aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]

      nRec     := ( dbfTmpCodebar )->( Recno() )

      ( dbfTmpCodebar )->( dbGoTop() )
      while !( dbfTmpCodebar )->( eof() )
         ( dbfTmpCodebar )->lDefBar  := .F.
         ( dbfTmpCodebar )->( dbSkip() )
      end

      ( dbfTmpCodebar )->( dbGoTo( nRec ) )

      lDef     := .T.

   end

   WinGather( aTmp, aGet, dbfTmpCodebar, oBrw, nMode )

   if lEntCon() .AND. nMode == 1
      MsgWait( "Código de barras aceptado", , 0.1 )

      if lDef
         aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ] := .F.
         aGet[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]:Refresh()
      end

      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SetFocus()
      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SelectAll()
   else
      oDlg:end( 1 )
   end

Return .T.



Function dbSeekCodebar( cCodBar, dbfCodebar, cCodExc, lMessage )

   local lSeek
   local nOrdenAnterior
   local nRegistroAnterior

   If( cCodExc == nil, cCodExc := "", ) ;
   If( lMessage == nil, lMessage := .T., ) ;

   if empty( cCodBar )
      if lMessage
         MsgBeepWait( "Código de barras no puede estar vacío", "Atención", 1 )
      end
      return .T.
   end

   nRegistroAnterior       := ( dbfCodebar )->( Recno() )
   nOrdenAnterior          := ( dbfCodebar )->( OrdSetFocus( "cCodBar" ) )

   lSeek                   := !( dbfCodebar )->( dbSeek( cCodBar ) ) .OR. cCodBar == cCodExc
   lSeek                   := !lSeek

   ( dbfCodebar )->( OrdSetFocus( nOrdenAnterior ) )
   ( dbfCodebar )->( dbGoTo( nRegistroAnterior ) )

   if lMessage .AND. lSeek
      MsgBeepWait( "Código de barras ya existe", "Atención", 1 )
   end

Return ( lSeek )



STATIC FUNCTION EdtAtipica( aTmp, aGet, dbfTmpAtp, oBrw, aTmpArt, nModeArt, nMode )

   local oDlg
   local oBmp
   local oGetNomCli
   local cGetNomCli

   cGetNomCli           := RetClient( aTmp[ ( dbfTmpAtp )->( fieldPos( "cCodCli" ) ) ] )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "tarifas de clientes", "ARTATIPICAS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmp := TBitmap():ReDefine( 500, "gc_symbol_euro_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )





      aGet[ ( dbfTmpAtp )->( fieldPos( "cCodCli" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "cCodCli" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "cCodCli" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oGetNomCli := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cGetNomCli, cGetNomCli:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nDtoArt" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDtoArt" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDtoArt" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDtoArt" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDtoArt" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      aGet[ ( dbfTmpAtp )->( fieldPos( "nDtoDiv" ) ) ] := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDtoDiv" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDtoDiv" ) ) ]:= u ) }, oDlg,, cPouDiv(),,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nDprArt" ) ) ] := TGetHlp():ReDefine( 601, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDprArt" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDprArt" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDprArt" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDprArt" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



      TCheckBox():ReDefine( 151, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "lComAge" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "lComAge" ) ) ]:= u ) }, oDlg,,,,,,, .F.,, .F. )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nComAge" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nComAge" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nComAge" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nComAge" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nComAge" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcCom" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcCom" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcCom" ) ) ]:= u ) }, oDlg,, cPinDiv(),,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )












      aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt" ) ) ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], , aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva1" ) ) ] ) )},,,,,, .F., {||     ( !aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], , aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva1" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt2" ) ) ] := TGetHlp():ReDefine( 124, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt2" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt2" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt2" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva2" ) ) ] ) )},,,,,, .F., {||     ( !aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt2" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva2" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt3" ) ) ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt3" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt3" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt3" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva3" ) ) ] ) )},,,,,, .F., {||     ( !aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt3" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva3" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt4" ) ) ] := TGetHlp():ReDefine( 126, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt4" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt4" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt4" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva4" ) ) ] ) )},,,,,, .F., {||     ( !aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt4" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva4" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt5" ) ) ] := TGetHlp():ReDefine( 127, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt5" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt5" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt5" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva5" ) ) ] ) )},,,,,, .F., {||     ( !aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt5" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva5" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt6" ) ) ] := TGetHlp():ReDefine( 128, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt6" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt6" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt6" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva6" ) ) ] ) )},,,,,, .F., {||     ( !aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalIvaAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPrcArt6" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva6" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )












      aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva1" ) ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva1" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva1" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva1" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], , aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt" ) )] ) )},,,,,, .F., {||     ( aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva1" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], , aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt" ) )] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva2" ) ) ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva2" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva2" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva2" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt2" ) ) ] ) )},,,,,, .F., {||     ( aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva2" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt2" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva3" ) ) ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva3" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva3" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva3" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt3" ) ) ] ) )},,,,,, .F., {||     ( aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva3" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt3" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva4" ) ) ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva4" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva4" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva4" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt4" ) ) ] ) )},,,,,, .F., {||     ( aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva4" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt4" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva5" ) ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva5" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva5" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva5" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt5" ) ) ] ) )},,,,,, .F., {||     ( aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva5" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt5" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ ( dbfTmpAtp )->( fieldPos( "nPreIva6" ) ) ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva6" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva6" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva6" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt6" ) ) ] ) )},,,,,, .F., {||     ( aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ] )}, {|nKey,nFlags,Self| ( CalBasAtp( aTmp[ ( dbfTmpAtp )->( fieldPos( "nPreIva6" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "lIvaInc" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva" ) ) ], aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "cCodImp" ) ) ], aGet[ ( dbfTmpAtp )->( fieldPos( "nPrcArt6" ) ) ] ) ) }, .F., .T.,,,,,, nil,,, )










      aGet[ ( dbfTmpAtp )->( fieldPos( "nDto1" ) ) ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto1" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto1" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto1" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto1" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nDto2" ) ) ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto2" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto2" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto2" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto2" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nDto3" ) ) ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto3" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto3" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto3" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto3" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nDto4" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto4" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto4" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto4" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto4" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nDto5" ) ) ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto5" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto5" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto5" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto5" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[ ( dbfTmpAtp )->( fieldPos( "nDto6" ) ) ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto6" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto6" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( ( aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto6" ) ) ] >= 0 .AND. aTmp[ ( dbfTmpAtp )->( fieldPos( "nDto6" ) ) ] <= 100 ) )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      aGet[ ( dbfTmpAtp )->( fieldPos( "dFecIni" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "dFecIni" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "dFecIni" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      aGet[ ( dbfTmpAtp )->( fieldPos( "dFecFin" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfTmpAtp )->( fieldPos( "dFecFin" ) ) ], aTmp[ ( dbfTmpAtp )->( fieldPos( "dFecFin" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      TButton():ReDefine( 1, {||( EndEdtAtipicas( aGet, aTmp, dbfTmpAtp, oBrw, nMode, oDlg ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:End()
   end

RETURN ( .T. )



static function EndEdtAtipicas( aGet, aTmp, dbfTmpAtp, oBrw, nMode, oDlg )

   WinGather( aTmp, aGet, dbfTmpAtp, oBrw, nMode )

   oDlg:End( 1 )

Return ( .T. )



Static Function CalIvaAtp( nPrecio, lIvaInc, cTipIva, cCodImp, oGetIva )

   local nIvaPct  := nIva( D():TiposIva( nView ), cTipIva )





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nPrecio     += oNewImp:nValImp( cCodImp, .T., nIvaPct )
   end





   nPrecio        += ( nPrecio * nIvaPct / 100 )

   if oGetIva <> NIL
      oGetIva:cText( nPrecio )
   end

Return .T.



Static Function CalBasAtp( nPrecio, lIvaInc, cTipIva, cCodImp, oGetBas )

   local nNewPre
   local nIvaPct  := nIva( D():TiposIva( nView ), cTipIva )





   nNewPre        := Div( nPrecio, ( 1 + nIvaPct / 100 ) )





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nNewPre     -= oNewImp:nValImp( cCodImp, lIvaInc , nIvaPct )
   end





   oGetBas:cText( nNewPre )

Return .T.



Static Function StartEdtVta( aTmp, aGet, nMode, oBrwPrp1, oBrwPrp2, oTodasPrp1, oNingunaPrp1, oTodasPrp2, oNingunaPrp2, oBtnOk, oBtnCancel, oSay, oPrp1, oSayPr1, oSayVp1, oPrp2, oSayPr2, oSayVp2 )

   if nMode == 1

      if !empty( oBtnOk )
         SetWindowText( oBtnOk:hWnd, "Añadir [F5]" )
      end

      if !empty( oBtnCancel )
         SetWindowText( oBtnCancel:hWnd, "Salir" )
      end

      if !empty( oBrwPrp1 )
         oBrwPrp1:Load()
      end

      if !empty( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] )

         if !empty( oBrwPrp2 )
            oBrwPrp2:Load()
            oBrwPrp2:Show()
         end

         if !empty( oTodasPrp2 )
            oTodasPrp2:Show()
         end

         if !empty( oNingunaPrp2 )
            oNingunaPrp2:Show()
         end

      end

      if !Empty( oPrp1 )
         oPrp1:Hide()
      end

      if !Empty( oSayPr1 )
         oSayPr1:Hide()
      end

      if !Empty( oPrp2 )
         oPrp2:Hide()
      end

      if !Empty( oSayPr2 )
         oSayPr2:Hide()
      end

      if !Empty( oSayVp1 )
         oSayVp1:Hide()
      end

      if !Empty( oSayVp2 )
         oSayVp2:Hide()
      end

   else

      if !empty( oBtnOk )
         SetWindowText( oBtnOk:hWnd, "Aceptar [F5]" )
      end

      if !empty( oBtnCancel )
         SetWindowText( oBtnCancel:hWnd, "Cancelar" )
      end

      if !empty( oBrwPrp1 )
         oBrwPrp1:Hide()
      end

      if !empty( oBrwPrp2 )
         oBrwPrp2:Hide()
      end

      if !empty( oTodasPrp1 )
         oTodasPrp1:Hide()
      end

      if !empty( oNingunaPrp1 )
         oNingunaPrp1:Hide()
      end

      if !empty( oTodasPrp2 )
         oTodasPrp2:Hide()
      end

      if !empty( oNingunaPrp2 )
         oNingunaPrp2:Hide()
      end



      oPrp1:show()
      oPrp1:lValid()

      oSayPr1:show()
      oSayPr1:setText( retProp( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr1" ) ) ], dbfPro ) )
      oSayVp1:show()

      if !empty( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ] )
         oPrp2:show()
         oPrp2:lValid()

         oSayPr2:show()
         oSayPr2:setText( retProp( aTmp[ ( dbfTmpVta )->( FieldPos( "cCodPr2" ) ) ], dbfPro ) )
         oSayVp2:show()
      end

   end



   oSay[ 7 ]:SetText( uFieldEmpresa( "cTxtTar1", "Precio 1" ) )

   if uFieldEmpresa( "lShwTar2" )
      oSay[ 8 ]:SetText( uFieldEmpresa( "cTxtTar2", "Precio 2" ) )
   else
      oSay[ 8 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ]:Hide()
      oSay[ 2 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva2" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar3" )
      oSay[ 9 ]:SetText( uFieldEmpresa( "cTxtTar3", "Precio 3" ) )
   else
      oSay[ 9 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ]:Hide()
      oSay[ 3 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva3" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar4" )
      oSay[ 10 ]:SetText( uFieldEmpresa( "cTxtTar4", "Precio 4" ) )
   else
      oSay[ 10 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ]:Hide()
      oSay[ 4 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva4" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar5" )
      oSay[ 11 ]:SetText( uFieldEmpresa( "cTxtTar5", "Precio 5" ) )
   else
      oSay[ 11 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ]:Hide()
      oSay[ 5 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva5" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar6" )
      oSay[ 12 ]:SetText( uFieldEmpresa( "cTxtTar6", "Precio 6" ) )
   else
      oSay[ 12 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ]:Hide()
      oSay[ 6 ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6" ) ) ]:Hide()
      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva6" ) ) ]:Hide()
   end

Return nil



STATIC FUNCTION EdtKit( aTmp, aGet, dbfTmpKit, oBrw, bWhen, bValid, nMode, aTmpArt )

    local oDlg
   local oCos
   local nCos     := 0
   local oValorTot
   local oBtnOk

   if nMode <> 1
      nCos        := nCosto( aTmp[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ], D():Articulos( nView ), dbfArtKit, )
   end

   if nMode == 1

      if ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) <> 0
         aTmp[ ( dbfTmpKit )->( fieldpos( "cParUuid" ) ) ] := aTmpArt[ ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) ]
      end

      if ( dbfTmpParKit )->( fieldpos( "cCodArt" ) ) <> 0
         aTmp[ ( dbfTmpKit )->( fieldpos( "cCodKit" ) ) ] := aTmpArt[ ( dbfTmpParKit )->( fieldpos( "cCodArt" ) ) ]
      end

   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "escandallos", "ARTKIT",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )










      aGet[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ]:= u ) }, oDlg,, "@!", {||    ( ChkCodKit( aGet, oCos, dbfTmpKit ) )}, "N/W*",,,,, .F., {||         ( nMode == 1 )},, .F., .F.,,,,, {|Self|BrwSelArticulo( aGet[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ], nil, .F., .F., .F. )}, nil, "LUPA",, )






      aGet[ ( dbfTmpKit )->( fieldpos( "CDESKIT" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "CDESKIT" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "CDESKIT" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ ( dbfTmpKit )->( fieldpos( "NUNDKIT" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "NUNDKIT" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "NUNDKIT" ) ) ]:= u ) }, oDlg,, "@E 999,999.999999",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ ( dbfTmpKit )->( fieldpos( "nUndKit" ) ) ]:bHelp   := {|| Calculadora( 0, aGet[ ( dbfTmpKit )->( fieldpos( "nUndKit" ) ) ], .F. ) }






      aGet[ ( dbfTmpKit )->( fieldpos( "CUNIDAD" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "CUNIDAD" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "CUNIDAD" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oCos := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nCos, nCos:= u ) }, oDlg,, cPinDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "lAplDto" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "lAplDto" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "lExcPro" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "lExcPro" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      oBtnOk := TButton():ReDefine( 1, {||( lPreSaveKit( aGet, aTmp, dbfTmpKit, D():Articulos( nView ), oBrw, nMode, oDlg, aTmpArt ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Function lPreSaveKit( aGet, aTmp, dbfTmpKit, dbfArt, oBrw, nMode, oDlg, aTmpArt, nCos )

   if empty( aTmp[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ] )
      msgstop( "El código no puede estar vacío" )
      aGet[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ]:SetFocus()
      Return .F.
   end

   if aTmp[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ] == aTmpArt[ ( dbfArt )->( FieldPos( "Codigo" ) ) ]
      MsgStop( "El código es el mismo que el del escandallo", "No se puede introducir" )
      aGet[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ]:SetFocus()
      Return .F.
   end

   WinGather( aTmp, aGet, dbfTmpKit, oBrw, nMode )

return ( oDlg:end( 1 ) )



Static Function ChkCodKit( aGet, oCos, dbfTmpKit )

    local lRet        := .F.
   local cRefKit  := aGet[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ]:varGet()
   local nRecKit  := ( dbfTmpKit   )->( recno() )
    local nRecArt    := ( D():Articulos( nView ) )->( recno() )

   cRefKit        := cSeekCodebar( cRefKit, dbfCodebar, D():Articulos( nView ) )

   if dbSeekInOrd( cRefKit, "Codigo", D():Articulos( nView ) )

      if dbSeekInOrd( cRefKit, "cRefKit", dbfTmpKit )

         msgStop( "Código duplicado" )

      else

         aGet[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ]:cText( ( D():Articulos( nView ) )->Codigo  )
         aGet[ ( dbfTmpKit )->( fieldpos( "cDesKit" ) ) ]:cText( ( D():Articulos( nView ) )->Nombre  )
         aGet[ ( dbfTmpKit )->( fieldpos( "cUnidad" ) ) ]:cText( ( D():Articulos( nView ) )->cUnidad )

         oCos:cText( ( D():Articulos( nView ) )->pCosto )

         lRet     := .T.

      end

   else

      msgStop( "Código no existe" )

   end

    ( D():Articulos( nView ) )->( dbGoTo( nRecArt ) )
   ( dbfTmpKit   )->( dbGoTo( nRecKit ) )

Return ( lRet )



STATIC FUNCTION EdtParKit( aTmp, aGet, dbfTmpParKit, oBrw, bWhen, bValid, nMode, aTmpArt )

   local oDlg
   local oBtnOk
   local oBrwEsc
   local nParAnt
   local aTabla
   local nOrdAnt
   local nOrdAntKit

   if nMode == 1
      aTmp[ ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) ]     := win_uuidcreatestring()
      aTmp[ ( dbfTmpParKit )->( fieldpos( "cCodArt" ) ) ]   := aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "Codigo"   ) ) ]
   end

   if nMode == 4
      nParAnt                                               := aTmp[ ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) ]

      aTmp[ ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) ]     := win_uuidcreatestring()
      aTmp[ ( dbfTmpParKit )->( fieldpos( "cCodArt" ) ) ]   := aTmpArt[ ( D():Articulos( nView ) )->( fieldpos( "Codigo"   ) ) ]

      nOrdAnt     := ( dbfArtKit )->( OrdSetFocus( "cParUuid" ) )

      if ( dbfArtKit )->( dbSeek( nParAnt ) )

         while ( dbfArtKit )->cParUuid == nParAnt .AND. !( dbfArtKit )->( eof() )
            dbPass( dbfArtKit, dbfTmpKit, .T., aTmp[ ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) ] )
            ( dbfArtKit )->( dbSkip() )
         end

      end

      ( dbfArtKit )->( OrdSetFocus( nOrdAnt ) )

      ( dbfTmpKit )->( dbGoTop() )

   end

   nOrdAntKit     := ( dbfTmpKit )->( OrdSetFocus( "cParUuid" ) )

   ( dbfTmpKit )->( OrdScope( 0, aTmp[ ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) ] ) )
   ( dbfTmpKit )->( OrdScope( 1, aTmp[ ( dbfTmpParKit )->( fieldpos( "cUuid" ) ) ] ) )
   ( dbfTmpKit )->( dbGoTop() )



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "escandallos", "ARTPARKIT",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      aGet[ ( dbfTmpParKit )->( fieldpos( "cNomKit" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpParKit )->( fieldpos( "cNomKit" ) ) ], aTmp[ ( dbfTmpParKit )->( fieldpos( "cNomKit" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 500, {||( WinAppRec( oBrwEsc, bEdtKit, dbfTmpKit, , , aTmp ), oBrwEsc:Select(0), oBrwEsc:Select(1), oBrwEsc:Refresh() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 501, {||( WinEdtRec( oBrwEsc, bEdtKit, dbfTmpKit, , , aTmp ), oBrwEsc:Select(0), oBrwEsc:Select(1), oBrwEsc:Refresh() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 502, {||( dbDelRec( oBrwEsc, dbfTmpKit ), oBrwEsc:Select(0), oBrwEsc:Select(1), oBrwEsc:Refresh() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 506, {||( informeEscandallo() )}, oDlg,,, .F.,,,, .F. )

      oBrwEsc                 := IXBrowse():New( oDlg )

      oBrwEsc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwEsc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwEsc:lFooter         := .T.
      oBrwEsc:cAlias          := dbfTmpKit
      oBrwEsc:nMarqueeStyle   := 6
      oBrwEsc:cName           := "Articulos.Escandallos"

      with object ( oBrwEsc:AddCol() )
         :cHeader          := "cParUuid"
         :bEditValue       := {|| ( dbfTmpKit )->cParUuid }
         :nWidth           := 250
         :lHide            := .T.
      end

      with object ( oBrwEsc:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( dbfTmpKit )->cRefKit }
         :nWidth           := 80
      end

      with object ( oBrwEsc:AddCol() )
         :cHeader          := "Artículo"
         :bEditValue       := {|| ( dbfTmpKit )->cDesKit }
         :nWidth           := 250
      end

      with object ( oBrwEsc:AddCol() )
         :cHeader          := "Unidades"
         :bEditValue       := {|| ( dbfTmpKit )->nUndKit }
         :nWidth           := 70
         :cEditPicture     := "@E 999,999.999999"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwEsc:AddCol() )
         :cHeader          := "Costo"
         :bEditValue       := {|| nCosto( ( dbfTmpKit )->cRefKit, D():Articulos( nView ), D():Kit( nView ), .F., cDivEmp(), D():Divisas( nView ) ) }
         :cEditPicture     := cPinDiv( cDivEmp(), dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwEsc:AddCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| nCosto( ( dbfTmpKit )->cRefKit, D():Articulos( nView ), D():Kit( nView ), .F., cDivEmp(), D():Divisas( nView ) ) * ( dbfTmpKit )->nUndKit * nFactorConversion( ( dbfTmpKit )->cRefKit ) }
         :cEditPicture     := cPinDiv( cDivEmp(), dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
         :nFooterType      := 1
      end

      if nMode <> 3
         oBrwEsc:bLDblClick  := {|| WinEdtRec( oBrwEsc, bEdtKit, dbfTmpKit, , , aTmp ), oBrwEsc:Select(0), oBrwEsc:Select(1), oBrwEsc:Refresh() }
      end

      oBrwEsc:CreateFromResource( 200 )




      oBtnOk := TButton():ReDefine( 1, {||( lPreSaveParKit( aGet, aTmp, dbfTmpParKit, oBrw, nMode, oDlg ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBrwEsc:MakeTotals(), oBrwEsc:Load() )}, oDlg:bRClicked,,, )

   OrdClearScope( , dbfTmpKit )

   ( dbfTmpKit )->( OrdSetFocus( nOrdAntKit ) )

RETURN ( oDlg:nResult == 1 )



Static Function lPreSaveParKit( aGet, aTmp, dbfTmpParKit, oBrw, nMode, oDlg )

   if empty( aTmp[ ( dbfTmpParKit )->( fieldpos( "cNomKit" ) ) ] )
      msgstop( "El Nombre no puede estar vacío" )
      aGet[ ( dbfTmpParKit )->( fieldpos( "cNomKit" ) ) ]:SetFocus()
      Return .F.
   end

   WinGather( aTmp, aGet, dbfTmpParKit, oBrw, nMode )

   ( dbfTmpKit )->( dbClearFilter() )

return ( oDlg:end( 1 ) )



STATIC FUNCTION GetDisk()

    local oDlg
    local oFileName
    local cFileName
    local oProvee
   local cProvee     := Space( 12 )
    local oProvName
   local cProvName   := ""
    local oTipIva
    local cTipIva
    local oIvaName
    local cIvaName
   local nPrc        := 0
    local oPrc
   local oPctBnf1
   local oPctBnf2
   local oPctBnf3
   local oPctBnf4
   local oPctBnf5
   local oPctBnf6
   local nPctBnf1    := 0
    local nPctBnf2        := 0
   local nPctBnf3    := 0
   local nPctBnf4    := 0
   local nPctBnf5    := 0
   local nPctBnf6    := 0
   local lEnd        := .T.

   oDlg = TDialog():New(,,,,, "Infortisa",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oFileName := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFileName, cFileName:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( oFileName:cText( cGetFile( "*.dbf", "Selección de fichero" ) ) )}, nil, "FOLDER",, )




      oPctBnf1 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, nPctBnf1, nPctBnf1:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




        oPctBnf2 := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, nPctBnf2, nPctBnf2:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf3 := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, nPctBnf3, nPctBnf3:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf4 := TGetHlp():ReDefine( 113, { | u | If( PCount()==0, nPctBnf4, nPctBnf4:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf5 := TGetHlp():ReDefine( 114, { | u | If( PCount()==0, nPctBnf5, nPctBnf5:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf6 := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, nPctBnf6, nPctBnf6:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )







      oTipIva := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cTipIva, cTipIva:= u ) }, oDlg,, "@!", {||    ( cTiva( oTipIva, D():TiposIva( nView ), oIvaName ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIva( oTipIva, nil , oIvaName ) )}, nil, "LUPA",, )




        oIvaName := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cIvaName, cIvaName:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )







      oProvee := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cProvee, cProvee:= u ) }, oDlg,, ( Replicate( "X", RetNumCodPrvEmp() ) ), {||    ( cProvee( oProvee, , oProvName ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwProvee( oProvee, oProvName, .F. ) )}, nil, "LUPA",, )




        oProvName := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cProvName, cProvName:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )






      oPrc := TMeter():ReDefine( 140, { | u | If( PCount()==0, nPrc, nPrc:= u ) }, ( D():Articulos( nView ) )->( lastrec() ), oDlg, .F.,, "Procesando", .F.,,,, )





        TButton():ReDefine( 500, {||(If( ImpTarifa( cFileName, nPctBnf1, nPctBnf2, nPctBnf3, nPctBnf4, nPctBnf5, nPctBnf6, cTipIva, cProvee, oPrc, @lEnd  ), ( oDlg:end( 1 ) ), ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|lEnd},,, oDlg:bRClicked,,, )

   oWndBrw:Refresh()

RETURN NIL



Static Function ImpTarifa( cFileName, nPctBnf1, nPctBnf2, nPctBnf3, nPctBnf4, nPctBnf5, nPctBnf6, cTipIva, cProvee, oPrc, lEnd )

   local oBlock
   local oError
   local dbfExt
   local nPctIva  := 0
   local cCodFam  := ""
   local cCodArt  := ""
   local cNomArt  := ""
   local aStaArt  := aGetStatus( D():Articulos( nView ), .T. )
   local aStaPrv  := aGetStatus( D():ProveedorArticulo( nView ) )

   ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( "cRefPrv" ) )

    CursorWait()

   lEnd              := .F.

   if File ( cFileName )

      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      dbUseArea( .T., ( cLocalDriver() ), ( cFileName ), ( cCheckArea( "EXTFIL", @dbfExt ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )

      nPctIva        := nIva( D():TiposIva( nView ), cTipIva )
      oPrc:nTotal    := ( dbfExt )->( LastRec() + 1 )

      while !( dbfExt )->( Eof() )





         cCodFam     := cCodFamPrv( cProvee, ( dbfExt )->CodSubFami, dbfFamPrv )
         cCodArt     := Rtrim( cCodFam ) + "." + ( dbfExt )->Codigo

         if !( D():Articulos( nView ) )->( dbSeek( cCodArt ) )
            ( D():Articulos( nView )  )->( dbAppend() )
            cNomArt  := OemToAnsi( ( dbfExt )->Titulo )
         else
            ( D():Articulos( nView ) )->( dbRLock() )
            cNomArt  := ( D():Articulos( nView ) )->Nombre
         end





         ( D():Articulos( nView ) )->Codigo  := cCodArt
         ( D():Articulos( nView ) )->Nombre  := cNomArt
         ( D():Articulos( nView ) )->Familia := cCodFam
         ( D():Articulos( nView ) )->pCosto  := ( dbfExt )->Precio

         ( D():Articulos( nView ) )->Benef1  := nPctBnf1
         ( D():Articulos( nView ) )->Benef2  := nPctBnf2
         ( D():Articulos( nView ) )->Benef3  := nPctBnf3
         ( D():Articulos( nView ) )->Benef4  := nPctBnf4
         ( D():Articulos( nView ) )->Benef5  := nPctBnf5
         ( D():Articulos( nView ) )->Benef6  := nPctBnf6

         ( D():Articulos( nView ) )->pVenta1 := ( ( D():Articulos( nView ) )->PCOSTO * nPctBnf1 / 100 ) + ( D():Articulos( nView ) )->PCOSTO
         ( D():Articulos( nView ) )->pVenta2 := ( ( D():Articulos( nView ) )->PCOSTO * nPctBnf2 / 100 ) + ( D():Articulos( nView ) )->PCOSTO
         ( D():Articulos( nView ) )->pVenta3 := ( ( D():Articulos( nView ) )->PCOSTO * nPctBnf3 / 100 ) + ( D():Articulos( nView ) )->PCOSTO
         ( D():Articulos( nView ) )->pVenta4 := ( ( D():Articulos( nView ) )->PCOSTO * nPctBnf4 / 100 ) + ( D():Articulos( nView ) )->PCOSTO
         ( D():Articulos( nView ) )->pVenta5 := ( ( D():Articulos( nView ) )->PCOSTO * nPctBnf5 / 100 ) + ( D():Articulos( nView ) )->PCOSTO
         ( D():Articulos( nView ) )->pVenta6 := ( ( D():Articulos( nView ) )->PCOSTO * nPctBnf6 / 100 ) + ( D():Articulos( nView ) )->PCOSTO

         ( D():Articulos( nView ) )->pVtaIva1:= Round( ( ( D():Articulos( nView ) )->PVENTA1 * nPctIva / 100 ) + ( D():Articulos( nView ) )->PVENTA1, nDecDiv )
         ( D():Articulos( nView ) )->pVtaIva2:= Round( ( ( D():Articulos( nView ) )->PVENTA2 * nPctIva / 100 ) + ( D():Articulos( nView ) )->PVENTA2, nDecDiv )
         ( D():Articulos( nView ) )->pVtaIva3:= Round( ( ( D():Articulos( nView ) )->PVENTA3 * nPctIva / 100 ) + ( D():Articulos( nView ) )->PVENTA3, nDecDiv )
         ( D():Articulos( nView ) )->pVtaIva4:= Round( ( ( D():Articulos( nView ) )->PVENTA4 * nPctIva / 100 ) + ( D():Articulos( nView ) )->PVENTA4, nDecDiv )
         ( D():Articulos( nView ) )->pVtaIva5:= Round( ( ( D():Articulos( nView ) )->PVENTA5 * nPctIva / 100 ) + ( D():Articulos( nView ) )->PVENTA5, nDecDiv )
         ( D():Articulos( nView ) )->pVtaIva6:= Round( ( ( D():Articulos( nView ) )->PVENTA6 * nPctIva / 100 ) + ( D():Articulos( nView ) )->PVENTA6, nDecDiv )

         ( D():Articulos( nView ) )->TipoIva := cTipIva
         ( D():Articulos( nView ) )->lObs    := .F.

         ( D():Articulos( nView ) )->( dbUnLock() )

         oPrc:Set( ( dbfExt )->( RecNo() ) )





         if !( D():ProveedorArticulo( nView ) )->( dbSeek( cProvee + ( dbfExt )->Codigo ) )
            ( D():ProveedorArticulo( nView ) )->( dbAppend() )
         else
            ( D():ProveedorArticulo( nView ) )->( dbRLock() )
         end

         ( D():ProveedorArticulo( nView ) )->cCodArt  := cCodArt
         ( D():ProveedorArticulo( nView ) )->cCodPrv  := cProvee
         ( D():ProveedorArticulo( nView ) )->cRefPrv  := ( dbfExt )->Codigo
         ( D():ProveedorArticulo( nView ) )->cDivPrv  := cDivEmp()

         ( D():ProveedorArticulo( nView ) )->( dbUnLock() )

         ( dbfExt )->( dbSkip() )

         oPrc:Set( ( dbfExt )->( RecNo() ) )

         SysRefresh()

      end

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de articulos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

      ( dbfExt )->( dbClosearea() )

   else

      MsgStop( "El fichero no existe" )

   end

   SetStatus( D():Articulos( nView ), aStaArt )
   SetStatus( D():ProveedorArticulo( nView ),   aStaPrv )

   CursorWE()

   lEnd           := .T.

Return .T.







Function CalPre( lSobreCoste, nCosto, lBnf, nBnf, uTipIva, oGetPrePts, oGetIvaPts, nDecDiv, cCodImp, oSay )

    local nIvaPct
   local nNewPre  := 0
   local nNewIva  := 0





   if !lSobreCoste .AND. nBnf >= 100
      Return nNewPre
   end

   if lBnf .AND. nCosto <> 0

      if ValType( uTipIva ) == "C"
         nIvaPct  := nIva( , uTipIva )
      else
         nIvaPct  := uTipIva
      end

      if lSobreCoste
         nNewPre  := Round( ( nCosto * nBnf / 100 ) + nCosto, nDecDiv )
      else
         nNewPre  := Round( Div( nCosto, ( 1 - ( nBnf / 100 ) ) ), nDecDiv )
      end

      if oGetPrePts <> nil
         oGetPrePts:cText( nNewPre )
      end





      nNewIva     := nNewPre





      if !empty( cCodImp ) .AND. !empty( oNewImp )
         nNewIva  += oNewImp:nValImp( cCodImp, .T., nIvaPct )
      end

      nNewIva     += Round( ( nNewIva * nIvaPct / 100 ), nDecDiv )

      if oGetIvaPts <> nil
         oGetIvaPts:cText( nNewIva )
      end

   end

   if oSay <> nil
      oSay:Refresh()
   end

Return nNewPre



Function lCalPre( lSobreCoste, nCosto, lBnf, nBnf, uTipIva, oGetPrePts, oGetIvaPts, nDecDiv, cCodImp, oSay )

   CalPre( lSobreCoste, nCosto, lBnf, nBnf, uTipIva, oGetPrePts, oGetIvaPts, nDecDiv, cCodImp, oSay )

return .T.



Function cImgArticulo( aTmp )

   local cImagenArt

   if !Empty ( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ] )
      cImagenArt  := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cImagen" ) ) ]
   else
      cImagenArt  := cFirstImage( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ], D():ArticuloImagenes( nView ) )
   end

   if empty( GetPath( cImagenArt ) )
      cImagenArt  := uFieldEmpresa( "cDirImg" ) + "\" + cImagenArt
   end

return cImagenArt







Function CalBnfPts( lSobreCoste, lIvaInc, nCosto, nPrePts, oBnf, uTipIva, oGetIvaPts, nDecDiv, cCodImp, oSay, lMargenAjuste, cMargenAjuste )

   local nIvm     := 0
    local nNewBnf
   local nIvaPct
   local nNewIva  := nPrePts

   if lIvaInc
      return .T.
   end

   if nCosto <> 0

      nPrePts     := Round( nPrePts, nDecDiv )

      nNewBnf     := nPorcentajeBeneficio( lSobreCoste, nPrePts, nCosto )





      if oBnf <> nil

         if nNewBnf > 0 .AND. nNewBnf < 999
               oBnf:cText( nNewBnf )
         else
               oBnf:cText( 0 )
         end

      end

   end





   if ValType( uTipIva ) == "C"
      nIvaPct     := nIva( D():TiposIva( nView ), uTipIva )
   else
      nIvaPct     := uTipIva
   end

















   nNewIva        += ( nNewIva * nIvaPct / 100 )











   if oGetIvaPts <> nil
        oGetIvaPts:cText( nNewIva )
   end

   if oSay <> nil
      oSay:Refresh()
   end

Return .T.







Function CalBnfIva( lSobreCoste, lIvaInc, nCosto, uPrecioIva, oBnf, uTipIva, oGetBas, nDecDiv, cCodImp, oSay, lMargenAjuste, cMargenAjuste )

   local nIvm     := 0
    local nNewBnf
    local nNewPre
    local nIvaPct
   local nPreIva

   if !lIvaInc
      Return .T.
   end

   if IsChar( uTipIva )
      nIvaPct     := nIva( D():TiposIva( nView ), uTipIva )
   else
      nIvaPct     := uTipIva
   end

   if IsObject( uPrecioIva )
      nPreIva     := Round( uPrecioIva:VarGet(), nDecDiv )
   else
      nPreIva     := Round( uPrecioIva, nDecDiv )
   end

   if ( nPreIva <= 0 )
      Return .T.
   end



   if IsTrue( lMargenAjuste )

      nPreIva     := nAjuste( nPreIva, cMargenAjuste )

      if IsObject( uPrecioIva )
         uPrecioIva:cText( Round( nPreIva, nDecDiv ) )
      end

   end













   nNewPre        := Round( nPreIva / ( 1 + nIvaPct / 100 ), nDecDiv )







   oGetBas:cText( nNewPre )



   if nCosto <> 0

      nNewBnf     := nPorcentajeBeneficio( lSobreCoste, nNewPre, nCosto )

      if oBnf <> nil

         if nNewBnf > 0 .AND. nNewBnf < 999
               oBnf:cText( nNewBnf )
         else
               oBnf:cText( 0 )
         end

      end

   end

   if oSay <> nil
      oSay:Refresh()
   end

Return .T.



Static Function nPorcentajeBeneficio( lSobreCoste, nPrecioVenta, nPrecioCosto )

   local nPorcentajeBeneficio := 0

   if lSobreCoste
      nPorcentajeBeneficio    := ( Div( nPrecioVenta, nPrecioCosto ) - 1 ) * 100
   else
      nPorcentajeBeneficio    := ( 1 - Div( nPrecioCosto, nPrecioVenta ) ) * 100
   end

Return ( nPorcentajeBeneficio )



Static Function CalculaDescuentoWeb( aGet, aTmp )

   local nImpWeb

   if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lSbrInt" ) ) ]

      if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoInt1" ) ) ] <> 0

         nImpWeb     := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb"  ) ) ]
         nImpWeb     -= aTmp[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb"  ) ) ] * aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nDtoInt1" ) ) ] / 100

         aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:cText( nImpWeb )
         aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:cText( ( nImpWeb * nIva( D():TiposIva( nView ), aTmp[ ( D():Articulos( nView ) )->( fieldpos( "TipoIva"  ) ) ] ) / 100 ) + nImpWeb )

      else

         ChangeTarifaPrecioWeb( aGet, aTmp )

      end

   end

return .T.



FUNCTION BrwFamiliaArticulo( oGet, oGet2, lCodeBar, lAppend )

   local oDlg
   local oBrw
   local oBrwFam
   local cPouDiv
   local oGetArticulo
   local cGetArticulo:= Space( 100 )
   local oGetFamilia
   local cGetFamilia := Space( 100 )
   local oCbxFamilia
   local cCbxFamilia := "Nombre"
   local aCbxFamilia := { "Código", "Nombre" }
   local oCbxOrd
   local cCbxOrd     := "Familia + Código"
   local aCbxOrd     := { "Código", "Nombre", "Familia + Código", "Familia + Nombre" }
   local nLevel      := Auth():Level( "01014" )

   If( lCodeBar == nil, lCodeBar := .F., ) ;

   if !OpenFiles( .T. )
      return nil
   end

   ( D():Familias( nView )  )->( OrdSetFocus( "cNomFam" ) )
   ( D():Articulos( nView ) )->( OrdSetFocus( "cFamCod" ) )

   cPouDiv           := cPouDiv( cDivEmp(), dbfDiv )

   oDlg = TDialog():New(,,,, "Artículos", "HELPARTFAM",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGetFamilia := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, cGetFamilia, cGetFamilia:= u ) }, oDlg,, "@!",,,,,,, .F.,, {|nKey,nFlags,Self| ( if( AutoSeek( nKey, nFlags, Self, oBrwFam, D():Familias( nView ), .T. ), SeekFamilia( oCbxOrd, oBrw ), ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxFamilia := TComboBox():ReDefine( 107, { | u | If( PCount()==0, cCbxFamilia, cCbxFamilia:= u ) }, aCbxFamilia, oDlg,,, {|Self|( ( D():Familias( nView ) )->( ordSetFocus( oCbxFamilia:nAt ) ), ( D():Familias( nView ) )->( dbGoTop() ), oBrwFam:Refresh() )},,,, .F.,,,,,,, "oCbxFamilia",,,,,,, )

      oBrwFam                 := IXBrowse():New( oDlg )

      oBrwFam:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFam:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFam:cAlias          := D():Familias( nView )
      oBrwFam:nMarqueeStyle   := 5
      oBrwFam:cName           := "Browse.Familias en artículos"

      with object ( oBrwFam:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodFam"
         :bEditValue       := {|| ( D():Familias( nView ) )->cCodFam }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxFamilia:Set( oCol:cHeader ) }
      end

      with object ( oBrwFam:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomFam"
         :bEditValue       := {|| ( D():Familias( nView ) )->cNomFam }
         :nWidth           := 120
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxFamilia:Set( oCol:cHeader ) }
      end

      oBrwFam:bChange      := {|| SeekFamilia( oCbxOrd, oBrw ) }

      oBrwFam:CreateFromResource( 103 )






      oGetArticulo := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGetArticulo, cGetArticulo:= u ) }, oDlg,, "@!",,,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, D():Articulos( nView ), .T., if( ( D():Articulos( nView ) )->( OrdSetFocus() ) $ "CFAMCOD CFAMNOM", ( D():Familias( nView ) )->cCodFam, ) ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( D():Articulos( nView ) )->( ordSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGetArticulo:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := D():Articulos( nView )
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Artículos"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Codigo"
         :bEditValue       := {|| ( D():Articulos( nView ) )->Codigo }
         :nWidth           := 90
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Nombre"
         :bEditValue       := {|| ( D():Articulos( nView ) )->Nombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      if RolesModel():getRolVerPreciosCosto( Auth():rolUuid() )

      with object ( oBrw:AddCol() )
         :cHeader          := "Costo"
         :bStrData         := {|| nCosto( nil, D():Articulos( nView ), dbfArtKit, .T., if( lEuro, cDivChg(), cDivEmp() ), dbfDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, D():Articulos( nView ) ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, D():Articulos( nView ) ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 )},,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 113,       {|| if( nAnd( nLevel, 2 ) <> 0, WinAppRec( oBrw, bEdit, D():Articulos( nView ) ), ) } )
      oDlg:AddFastKey( 114,       {|| if( nAnd( nLevel, 4 ) <> 0, WinEdtRec( oBrw, bEdit, D():Articulos( nView ) ), ) } )
      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

      oDlg:bStart := {|| oBrwFam:Load(), oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if lCodeBar
         oGet:cText( ( D():Articulos( nView ) )->CodeBar )
      else
         oGet:cText( ( D():Articulos( nView ) )->Codigo )
      end

      if oGet2 <> nil
         oGet2:cText( ( D():Articulos( nView ) )->Nombre )
      end

   end

   CloseFiles()





   oBrw:CloseData()

RETURN oDlg:nResult == 1



Static Function SeekFamilia( oCbxOrd, oBrw )

   ( D():Articulos( nView ) )->( OrdScope( 0, nil ) )
   ( D():Articulos( nView ) )->( OrdScope( 1, nil ) )

   if !empty( ( D():Familias( nView ) )->cCodFam ) .AND. ( D():Articulos( nView ) )->( dbSeek( ( D():Familias( nView ) )->cCodFam ) )

      ( D():Articulos( nView ) )->( OrdScope( 0, ( D():Familias( nView ) )->cCodFam ) )
      ( D():Articulos( nView ) )->( OrdScope( 1, ( D():Familias( nView ) )->cCodFam ) )

   end

   ( D():Articulos( nView ) )->( dbGoTop() )

   oCbxOrd:Set( "Familia + Código" )

   oBrw:Refresh()

Return .T.




STATIC FUNCTION CheckValid( aGet, dbf, nTag, nMode )

    Local nOldTag
   Local xClave   := aGet:VarGet()
   Local lReturn  := .T.

    If( nTag == nil, nTag := 1, ) ;
   If( dbf == nil, dbf := Alias(), ) ;

   if ( nMode == 1 ) .OR. ( nMode == 4 )

      if empty( xClave )
         Return .F.
      end





      nOldTag     := ( dbf )->( OrdSetFocus( nTag ) )

      if Existe( xClave, dbf )
         MsgStop( "Clave existente" )
         lReturn  := .F.
      else
         aGet:cText( xClave )
      end

      ( dbf )->( OrdSetFocus( nOldTag ) )

   end

RETURN lReturn



STATIC FUNCTION DelDetalle( cCodArt )

   local nOrdAnt  := ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( 1 ) )

   InitWait()





   if ( D():ProveedorArticulo( nView ) )->( dbSeek( cCodArt ) )

      while ( ( D():ProveedorArticulo( nView ) )->cCodArt == cCodArt )

         if dbLock( D():ProveedorArticulo( nView ) )
            ( D():ProveedorArticulo( nView ) )->( dbDelete() )
            ( D():ProveedorArticulo( nView ) )->( dbUnLock() )
         end

         ( D():ProveedorArticulo( nView ) )->( dbSkip( 1 ) )

      end

   end

   ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( nOrdAnt ) )






   if ( dbfCodebar )->( dbSeek( cCodArt ) )

      while ( dbfCodebar )->cCodArt == cCodArt .AND. !( dbfCodebar )->( eof() )

         if dbLock( dbfCodebar )
            ( dbfCodebar )->( dbDelete() )
            ( dbfCodebar )->( dbUnLock() )
         end

         ( dbfCodebar )->( dbSkip() )

      end

   end




















   while ( dbfOfe )->( dbSeek( cCodArt ) )
      if dbLock( dbfOfe )
         ( dbfOfe )->( dbDelete() )
         ( dbfOfe )->( dbUnLock() )
      end
   end





   while ( D():ArticuloImagenes( nView ) )->( dbSeek( cCodArt ) )
      if dbLock( D():ArticuloImagenes( nView ) )
         ( D():ArticuloImagenes( nView ) )->( dbDelete() )
         ( D():ArticuloImagenes( nView ) )->( dbUnLock() )
      end
   end





   if ( dbfArtKit )->( dbSeek( cCodArt ) )

      while ( dbfArtKit )->cCodKit == cCodArt .AND. !( dbfArtKit )->( eof() )

         if dbLock( dbfArtKit )
            ( dbfArtKit )->( dbDelete() )
            ( dbfArtKit )->( dbUnLock() )
         end

         ( dbfArtKit )->( dbSkip() )

      end

   end





   if ( dbfArtVta )->( dbSeek( cCodArt ) )

      while ( dbfArtVta )->cCodArt == cCodArt .AND. !( dbfArtVta )->( eof() )

         if dbLock( dbfArtVta )
            ( dbfArtVta )->( dbDelete() )
            ( dbfArtVta )->( dbUnLock() )
         end

         ( dbfArtVta )->( dbSkip() )

      end

   end

   if ( D():ArticuloLenguaje( nView ) )->( dbSeek( cCodArt ) )

      while ( D():ArticuloLenguaje( nView ) )->cCodArt == cCodArt .AND. !( D():ArticuloLenguaje( nView ) )->( eof() )

         if dbLock( D():ArticuloLenguaje( nView ) )
            ( D():ArticuloLenguaje( nView ) )->( dbDelete() )
            ( D():ArticuloLenguaje( nView ) )->( dbUnLock() )
         end

         ( D():ArticuloLenguaje( nView ) )->( dbSkip() )

      end

   end

   EndWait()

RETURN NIL



FUNCTION AppendReferenciaProveedor( cRefPrv, cCodPrv, cCodArt, nDtoPrv, nDtoPrm, cDivPrv, nImpPrv, dbfArtPrv, nMode )

   local nOrdAnt
   local lSetDefault

   if nImpPrv <= 0
      Return nil
   end

   if empty( cCodPrv )
      Return nil
   end

   if empty( cCodArt )
      Return nil
   end



   if !IsNil( nMode )
      lSetDefault       := ( nMode == 1 .OR. nMode == 4 )
   end

   nOrdAnt              := ( dbfArtPrv )->( OrdSetFocus( "cRefArt" ) )





   if !( dbfArtPrv )->( dbSeek( cCodArt + cCodPrv + cRefPrv ) )

      if dbAppe( dbfArtPrv )
         ( dbfArtPrv )->cCodArt  := cCodArt
         ( dbfArtPrv )->cCodPrv  := cCodPrv
         ( dbfArtPrv )->cRefPrv  := cRefPrv
         ( dbfArtPrv )->nDtoPrv  := nDtoPrv
         ( dbfArtPrv )->nDtoPrm  := nDtoPrm
         ( dbfArtPrv )->cDivPrv  := cDivPrv
         ( dbfArtPrv )->nImpPrv  := nImpPrv
         ( dbfArtPrv )->( dbUnLock() )
      end

   else

      if dbLock( dbfArtPrv )
         ( dbfArtPrv )->nDtoPrv  := nDtoPrv
         ( dbfArtPrv )->nDtoPrm  := nDtoPrm
         ( dbfArtPrv )->cDivPrv  := cDivPrv
         ( dbfArtPrv )->nImpPrv  := nImpPrv
         ( dbfArtPrv )->( dbUnLock() )
      end

   end

   ( dbfArtPrv )->( OrdSetFocus( nOrdAnt ) )

Return nil



Function nPrecioReferenciaProveedor( cCodPrv, cCodArt, dbfPrvArt )

   local nPreCom  := 0
   local nRec     := ( dbfPrvArt )->( Recno() )

   if dbSeekInOrd( cCodPrv + cCodArt, "cCodPrv", dbfPrvArt )
      nPreCom     := ( dbfPrvArt )->nImpPrv
   end

   ( dbfPrvArt )->( dbGoTo( nRec ) )

Return nPreCom



Function nDescuentoReferenciaProveedor( cCodPrv, cCodArt, dbfPrvArt )

   local nPreCom  := 0
   local nRec     := ( dbfPrvArt )->( Recno() )

   if dbSeekInOrd( cCodPrv + cCodArt, "cCodPrv", dbfPrvArt )
      nPreCom     := ( dbfPrvArt )->nDtoPrv
   end

   ( dbfPrvArt )->( dbGoTo( nRec ) )

Return nPreCom



Function nPromocionReferenciaProveedor( cCodPrv, cCodArt, dbfPrvArt )

   local nPreCom  := 0
   local nRec     := ( dbfPrvArt )->( Recno() )

   if dbSeekInOrd( cCodPrv + cCodArt, "cCodPrv", dbfPrvArt )
      nPreCom     := ( dbfPrvArt )->nDtoPrm
   end

   ( dbfPrvArt )->( dbGoTo( nRec ) )

Return nPreCom



Function nRetPreCosto( cArticulo, cCodArt )

    local nPrecioCosto  := 0
    local nOrdAnt          := ( cArticulo )->( ordsetfocus( 1 ) )
    local nRecno        := ( cArticulo )->( recno() )

   if ( cArticulo )->( dbseek( cCodArt ) )
      nPrecioCosto     := ( cArticulo )->pCosto
   end

    ( cArticulo )->( dbgoto( nRecno ) )
    ( cArticulo )->( ordsetfocus( nOrdAnt ) )

Return ( nPrecioCosto )



FUNCTION nUnitEnt( dbfLine )

    local nUnits
   local nCajas   := ( dbfLine )->nCanEnt

   if nCajas == 0
      nCajas      := 1
   end

   if lCalCaj()
      nUnits      := nCajas * ( dbfLine )->nUniCaja
   else
      nUnits      := ( dbfLine )->nUniCaja
   end

RETURN ( nUnits )






Static Function SetPtsEur( oWndBrw, oBtnEur )

   lEuro          := !lEuro

   oWndBrw:Refresh()
   oWndBrw:SetFocus()

Return nil







FUNCTION retPvd( cCodArt, cCodDiv, nChgDiv, dbfArt, dbfDiv )

    local nPvp            := 0

    If( nChgDiv == nil, nChgDiv := 0, ) ;

    if ( dbfArt )->( dbSeek( cCodArt ) )

      nPvp           := ( dbfArt )->pVtaIva1





        if ( dbfDiv )->( dbSeek( ( dbfArt )->Codigo + cCodDiv ) )

         nPvp        := ( dbfDiv )->nPvdDiv

        else





            if nChgDiv <> 0
            nPvp     := Div( nPvp, nChgDiv )
         end

      end

   end

RETURN ( nPvp )



FUNCTION RetImg( cCodArt, dbfArt )

   local cImg        := ""
   local nOrd        := ( dbfArt )->( OrdSetFocus( 1 ) )

   if ( dbfArt )->( dbSeek( cCodArt ) )
      cImg           := ( dbfArt )->cImagen
   end

   ( dbfArt )->( OrdSetFocus( nOrd ) )

RETURN ( cImg )



STATIC FUNCTION ChgPrc( oWndBrw )

    local oDlg
   local nOrd           := ( D():Articulos( nView ) )->( OrdSetFocus( "Codigo" ) )
   local nRec           := ( D():Articulos( nView ) )->( Recno() )
   local oMtr
   local nMtr           := 0
   local cFam           := Space( 8 )
    local oFam
   local cTxtFam        := "Todas"
    local oTxtFam
   local cTipIva        := Space( 1 )
    local oTipIva
   local cTxtIva        := "Todos"
    local oTxtIva
   local lCosto         := .F.
   local lTarifa1       := .F.
   local lTarifa2       := .F.
   local lTarifa3       := .F.
   local lTarifa4       := .F.
   local lTarifa5       := .F.
   local lTarifa6       := .F.
   local lPesVol        := .F.
   local lPrcMin        := .F.
   local oRad
   local nRad           := 1
   local nPctInc        := 0
   local nUndInc        := 0
   local lRnd           := .F.
   local oMargenAjuste
   local lMargenAjuste  := .F.
   local cMargenAjuste  := ""
   local nDec           := nRouDiv( cDivEmp(), dbfDiv )
   local aComBox        :=  { "Precio actual", "Precio costo", "Precio 1", "Precio 2", "Precio 3", "Precio 4", "Precio 5", "Precio 6", "Precio mínimo" }
   local oComBox
   local cComBox        := "Precio actual"
   local cArtOrg
   local cArtDes
   local oArtOrg
   local oArtDes
   local oSayArtOrg
   local oSayArtDes
   local cSayArtOrg
   local cSayArtDes
   local oGetTip
   local cGetTip        := Space( 3 )
   local oTxtTip
   local cTxtTip        := "Todos"





    oDlg = TDialog():New(,,,,, "CHGPRE",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

   cArtOrg              := dbFirst( D():Articulos( nView ), 1 )
   cArtDes              := dbLast ( D():Articulos( nView ), 1 )
   cSayArtOrg           := dbFirst( D():Articulos( nView ), 2 )
   cSayArtDes           := dbLast ( D():Articulos( nView ), 2 )






   oArtOrg := TGetHlp():ReDefine( 60, { | u | If( PCount()==0, cArtOrg, cArtOrg:= u ) }, oDlg,,, {||    cArticulo( oArtOrg, D():Articulos( nView ), oSayArtOrg )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwSelArticulo( oArtOrg, oSayArtOrg, .F., .F., .F. )}, nil, "LUPA",, )




   oSayArtOrg := TGetHlp():ReDefine( 70, { | u | If( PCount()==0, cSayArtOrg, cSayArtOrg:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oArtDes := TGetHlp():ReDefine( 80, { | u | If( PCount()==0, cArtDes, cArtDes:= u ) }, oDlg,,, {||    cArticulo( oArtDes, D():Articulos( nView ), oSayArtDes )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwSelArticulo( oArtDes, oSayArtDes, .F., .F., .F. )}, nil, "LUPA",, )




   oSayArtDes := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cSayArtDes, cSayArtDes:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oFam := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFam, cFam:= u ) }, oDlg,,, {||     ( cFamilia( oFam, , oTxtFam ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFamilia( oFam, oTxtFam ) )}, nil, "LUPA",, )




    oTxtFam := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cTxtFam, cTxtFam:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oGetTip := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, cGetTip, cGetTip:= u ) }, oDlg,,, {||    ( oTipArt:Existe( oGetTip, oTxtTip, "cNomTip", .T., .T., "0" ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( oTipArt:Buscar( oGetTip, oTxtTip ) )}, nil, "LUPA",, )





   oTxtTip := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cTxtTip, cTxtTip:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )







    oTipIva := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cTipIva, cTipIva:= u ) }, oDlg,, "@!", {||    ( cTiva( oTipIva, D():TiposIva( nView ), oTxtIva ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIva( oTipIva, nil, oTxtIva ) )}, nil, "LUPA",, )





    oTxtIva := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cTxtIva, cTxtIva:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )



   TCheckBox():ReDefine( 160, { | u | If( PCount()==0, lCosto, lCosto:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 161, { | u | If( PCount()==0, lTarifa1, lTarifa1:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 162, { | u | If( PCount()==0, lTarifa2, lTarifa2:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 163, { | u | If( PCount()==0, lTarifa3, lTarifa3:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 164, { | u | If( PCount()==0, lTarifa4, lTarifa4:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 165, { | u | If( PCount()==0, lTarifa5, lTarifa5:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 166, { | u | If( PCount()==0, lTarifa6, lTarifa6:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 168, { | u | If( PCount()==0, lPesVol, lPesVol:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 169, { | u | If( PCount()==0, lPrcMin, lPrcMin:= u ) }, oDlg,,,,,,, .F.,, .F. )



   oRad := TRadMenu():Redefine( { | u | If( PCount()==0, nRad, nRad:= u ) }, oDlg,, { 170, 172 },,,,, .F.,, )






    TGetHlp():ReDefine( 171, { | u | If( PCount()==0, nPctInc, nPctInc:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||        ( nRad == 1 )},, .F., .T.,,,,,, nil,,, )





    TGetHlp():ReDefine( 173, { | u | If( PCount()==0, nUndInc, nUndInc:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||        ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )



    TCheckBox():ReDefine( 180, { | u | If( PCount()==0, lRnd, lRnd:= u ) }, oDlg,,,,,,, .F.,, .F. )






    TGetHlp():ReDefine( 190, { | u | If( PCount()==0, nDec, nDec:= u ) }, oDlg,, "@E 9",,,,,,, .F., {||     lRnd},, .F., .T.,,,,,, nil,,, )



   TCheckBox():ReDefine( 200, { | u | If( PCount()==0, lMargenAjuste, lMargenAjuste:= u ) }, oDlg,,,,,,, .F.,, .F. )





















   oMargenAjuste := TComboBox():ReDefine( 210, { | u | If( PCount()==0, cMargenAjuste, cMargenAjuste:= u ) }, {  "#,#0", "#,#5", "#,10", "#,20", "#,50", "#,90", "#,95", "#,99", "#,00", "1,00", "5,00", "9,00", "10,00", "20,00", "50,00", "100,00" }, oDlg,,,,,,, .F., {||     lMargenAjuste},,,,,, "oMargenAjuste",,,,,,, )





   oComBox := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cComBox, cComBox:= u ) }, aComBox, oDlg,,,,,,, .F.,,,,,,, "oComBox",,,,,,, )

   oMtr        := TApoloMeter():ReDefine( 220, { | u | if( pCount() == 0, nMtr, nMtr := u ) }, ( D():Articulos( nView ) )->( lastrec() ), oDlg, .F., , "Procesando", .F., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )




   TButton():ReDefine( 1, {||( mkChgPrc( cFam, cGetTip, cTipIva, lCosto, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, lPesVol, nRad, nPctInc, nUndInc, lRnd, nDec, lMargenAjuste, cMargenAjuste, oComBox, cArtOrg, cArtDes, oMtr, oDlg, oWndBrw, lPrcMin ))}, oDlg,,, .F.,,,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| mkChgPrc( cFam, cGetTip, cTipIva, lCosto, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, lPesVol, nRad, nPctInc, nUndInc, lRnd, nDec, lMargenAjuste, cMargenAjuste, oComBox, cArtOrg, cArtDes, oMtr, oDlg, oWndBrw, lPrcMin ) } )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( D():Articulos( nView ) )->( OrdSetFocus( nOrd ) )
   ( D():Articulos( nView ) )->( dbGoTo( nRec ) )

   oWndBrw:Refresh()

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION mkChgPrc( cFam, cGetTip, cIva, lCosto, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, lPesVol, nRad, nPctInc, nUndInc, lRnd, nDec, lMargenAjuste, cMargenAjuste, oComBox, cArtOrg, cArtDes, oMtr, oDlg, oWndBrw, lPrcMin )

   local nIva
   local cExpFlt
   local nCounter := 0
   local nPrecio  := oComBox:nAt
   local nRecAct  := ( D():Articulos( nView ) )->( RecNo() )

   if !lCosto .AND. !lTarifa1 .AND. !lTarifa2 .AND. !lTarifa3 .AND. !lTarifa4 .AND. !lTarifa5 .AND. !lTarifa6 .AND. !lPesVol
      msgStop( "No ha elegido ningúna tarifa a cambiar." )
      Return .F.
   end

   oDlg:Disable()

   cExpFlt        := "!Deleted() "
   cExpFlt        += '.and. Codigo >= "' + cArtOrg + '"'
   cExpFlt        += '.and. Codigo <= "' + cArtDes + '"'

   if !empty( cFam )
      cExpFlt     += '.and. Familia == "' + cFam + '"'
   end

   if !empty( cGetTip )
      cExpFlt     += '.and. cCodTip == "' + cGetTip + '"'
   end

   if !empty( cIva )
      cExpFlt     += '.and. TipoIva == "' + cIva + '"'
   end

   if CreateFastFilter( cExpFlt, D():Articulos( nView ), .F., oMtr )

      if ApoloMsgNoYes( "Se van a reemplazar los registros.", "¿Desea continuar?" )

         oMtr:SetTotal( ( D():Articulos( nView ) )->( OrdKeyCount() ) )

         ( D():Articulos( nView ) )->( dbGoTop() )
         while !( D():Articulos( nView ) )->( eof() )





            nIva                                      := nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) / 100





            if dbLock( D():Articulos( nView ) )

               if lCosto





                  if nRad == 1

                     ( D():Articulos( nView ) )->pCosto          := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pCosto )
                     ( D():Articulos( nView ) )->pCosto          += ( D():Articulos( nView ) )->pCosto * nPctInc / 100

                  else

                     ( D():Articulos( nView ) )->pCosto          := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pCosto )
                     ( D():Articulos( nView ) )->pCosto          += nUndInc

                  end





                  if lRnd
                     ( D():Articulos( nView ) )->pCosto          := Round( ( D():Articulos( nView ) )->pCosto, nDec )
                  end









































               end





               if lTarifa1

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( D():Articulos( nView ) )->lBnf1     := .T.
                           ( D():Articulos( nView ) )->Benef1    := nPctInc
                        end





                        ( D():Articulos( nView ) )->nBnfSbr1     := 1
                        ( D():Articulos( nView ) )->pVenta1      := ( D():Articulos( nView ) )->pCosto + ( ( D():Articulos( nView ) )->pCosto * nPctInc / 100 )
                        ( D():Articulos( nView ) )->pVtaIva1     := ( D():Articulos( nView ) )->pVenta1 + ( ( D():Articulos( nView ) )->pVenta1 * nIva )

                     else





                        ( D():Articulos( nView ) )->pVenta1      := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta1 )

                        if !( D():Articulos( nView ) )->lIvaInc





                           ( D():Articulos( nView ) )->nBnfSbr1  := 1
                           ( D():Articulos( nView ) )->pVenta1   += ( D():Articulos( nView ) )->pVenta1 * nPctInc / 100

                        else





                           ( D():Articulos( nView ) )->nBnfSbr1  := 2
                           ( D():Articulos( nView ) )->pVenta1   += ( D():Articulos( nView ) )->pVenta1 * nPctInc / 100

                        end

                     end

                  else

                     ( D():Articulos( nView ) )->lBnf1           := .F.
                     ( D():Articulos( nView ) )->pVenta1         := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta1 ) + nUndInc

                  end





                  if !( D():Articulos( nView ) )->lIvaInc

                     if lRnd
                        ( D():Articulos( nView ) )->pVenta1      := Round( ( D():Articulos( nView ) )->pVenta1, nDec )
                     end







                     ( D():Articulos( nView ) )->pVtaIva1        := ( ( D():Articulos( nView ) )->pVenta1 * nIva ) + ( D():Articulos( nView ) )->pVenta1

                  end





                  if ( D():Articulos( nView ) )->lIvaInc

                     ( D():Articulos( nView ) )->pVtaIva1        := ( ( D():Articulos( nView ) )->pVenta1 * nIva ) + ( D():Articulos( nView ) )->pVenta1

                     if lRnd
                        ( D():Articulos( nView ) )->pVtaIva1     := Round( ( D():Articulos( nView ) )->pVtaIva1, nDec )
                     end







                     ( D():Articulos( nView ) )->pVenta1         := Round( ( D():Articulos( nView ) )->pVtaIva1 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( D():Articulos( nView ) )->lBnf1 .AND. nPctInc == 0

                     if ( D():Articulos( nView ) )->nBnfSbr1 <= 1
                        ( D():Articulos( nView ) )->pVenta1      := Round( ( ( D():Articulos( nView ) )->pCosto * ( D():Articulos( nView ) )->Benef1 / 100 ) + ( D():Articulos( nView ) )->pCosto, nDec )
                     else
                        ( D():Articulos( nView ) )->pVenta1      := Round( ( ( D():Articulos( nView ) )->pCosto / ( 1 - ( ( D():Articulos( nView ) )->Benef1 / 100 ) ) ), nDec )
                     end

                     ( D():Articulos( nView ) )->pVtaIva1        := ( ( D():Articulos( nView ) )->pVenta1 * nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) / 100 ) + ( D():Articulos( nView ) )->pVenta1

                     ( D():Articulos( nView ) )->lBnf1           := .F.

                  end

               end





               if lTarifa2

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( D():Articulos( nView ) )->lBnf2  := .T.
                           ( D():Articulos( nView ) )->Benef2 := nPctInc
                        end





                        ( D():Articulos( nView ) )->nBnfSbr2  := 1
                        ( D():Articulos( nView ) )->pVenta2   := ( D():Articulos( nView ) )->pCosto + ( ( D():Articulos( nView ) )->pCosto * nPctInc / 100 )
                        ( D():Articulos( nView ) )->pVtaIva2  := ( D():Articulos( nView ) )->pVenta2 + ( ( D():Articulos( nView ) )->pVenta2 * nIva )

                     else





                        ( D():Articulos( nView ) )->pVenta2      := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta2 )

                        if !( D():Articulos( nView ) )->lIvaInc





                           ( D():Articulos( nView ) )->nBnfSbr2  := 1
                           ( D():Articulos( nView ) )->pVenta2   += ( D():Articulos( nView ) )->pVenta2 * nPctInc / 100

                        else





                           ( D():Articulos( nView ) )->nBnfSbr2  := 2
                           ( D():Articulos( nView ) )->pVenta2   += ( D():Articulos( nView ) )->pVenta2 * nPctInc / 100

                        end

                     end

                  else

                     ( D():Articulos( nView ) )->lBnf2           := .F.
                     ( D():Articulos( nView ) )->pVenta2         := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta2 ) + nUndInc

                  end





                  if !( D():Articulos( nView ) )->lIvaInc

                     if lRnd
                        ( D():Articulos( nView ) )->pVenta2      := Round( ( D():Articulos( nView ) )->pVenta2, nDec )
                     end







                     ( D():Articulos( nView ) )->pVtaIva2        := ( ( D():Articulos( nView ) )->pVenta2 * nIva ) + ( D():Articulos( nView ) )->pVenta2

                  end





                  if ( D():Articulos( nView ) )->lIvaInc

                     ( D():Articulos( nView ) )->pVtaIva2        := ( ( D():Articulos( nView ) )->pVenta2 * nIva ) + ( D():Articulos( nView ) )->pVenta2

                     if lRnd
                        ( D():Articulos( nView ) )->pVtaIva2     := Round( ( D():Articulos( nView ) )->pVtaIva2, nDec )
                     end







                     ( D():Articulos( nView ) )->pVenta2         := Round( ( D():Articulos( nView ) )->pVtaIva2 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( D():Articulos( nView ) )->lBnf2 .AND. nPctInc == 0

                     if ( D():Articulos( nView ) )->nBnfSbr2 <= 1
                        ( D():Articulos( nView ) )->pVenta2      := Round( ( ( D():Articulos( nView ) )->pCosto * ( D():Articulos( nView ) )->Benef2 / 100 ) + ( D():Articulos( nView ) )->pCosto, nDec )
                     else
                        ( D():Articulos( nView ) )->pVenta2      := Round( ( ( D():Articulos( nView ) )->pCosto / ( 1 - ( ( D():Articulos( nView ) )->Benef2 / 100 ) ) ), nDec )
                     end

                     ( D():Articulos( nView ) )->pVtaIva2        := ( ( D():Articulos( nView ) )->pVenta2 * nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) / 100 ) + ( D():Articulos( nView ) )->pVenta2

                     ( D():Articulos( nView ) )->lBnf2           := .F.

                  end

               end





               if lTarifa3

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( D():Articulos( nView ) )->lBnf3  := .T.
                           ( D():Articulos( nView ) )->Benef3 := nPctInc
                        end





                        ( D():Articulos( nView ) )->nBnfSbr3  := 1
                        ( D():Articulos( nView ) )->pVenta3   := ( D():Articulos( nView ) )->pCosto + ( ( D():Articulos( nView ) )->pCosto * nPctInc / 100 )
                        ( D():Articulos( nView ) )->pVtaIva3  := ( D():Articulos( nView ) )->pVenta3 + ( ( D():Articulos( nView ) )->pVenta3 * nIva )

                     else





                        ( D():Articulos( nView ) )->pVenta3      := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta3 )

                        if !( D():Articulos( nView ) )->lIvaInc





                           ( D():Articulos( nView ) )->nBnfSbr3  := 1
                           ( D():Articulos( nView ) )->pVenta3   += ( D():Articulos( nView ) )->pVenta3 * nPctInc / 100

                        else





                           ( D():Articulos( nView ) )->nBnfSbr3  := 2
                           ( D():Articulos( nView ) )->pVenta3   += ( D():Articulos( nView ) )->pVenta3 * nPctInc / 100

                        end

                     end

                  else

                     ( D():Articulos( nView ) )->lBnf3           := .F.
                     ( D():Articulos( nView ) )->pVenta3         := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta3 ) + nUndInc

                  end





                  if !( D():Articulos( nView ) )->lIvaInc

                     if lRnd
                        ( D():Articulos( nView ) )->pVenta3      := Round( ( D():Articulos( nView ) )->pVenta3, nDec )
                     end







                     ( D():Articulos( nView ) )->pVtaIva3        := ( ( D():Articulos( nView ) )->pVenta3 * nIva ) + ( D():Articulos( nView ) )->pVenta3

                  end





                  if ( D():Articulos( nView ) )->lIvaInc

                     ( D():Articulos( nView ) )->pVtaIva3        := ( ( D():Articulos( nView ) )->pVenta3 * nIva ) + ( D():Articulos( nView ) )->pVenta3

                     if lRnd
                        ( D():Articulos( nView ) )->pVtaIva3     := Round( ( D():Articulos( nView ) )->pVtaIva3, nDec )
                     end







                     ( D():Articulos( nView ) )->pVenta3         := Round( ( D():Articulos( nView ) )->pVtaIva3 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( D():Articulos( nView ) )->lBnf3 .AND. nPctInc == 0

                     if ( D():Articulos( nView ) )->nBnfSbr3 <= 1
                        ( D():Articulos( nView ) )->pVenta3      := Round( ( ( D():Articulos( nView ) )->pCosto * ( D():Articulos( nView ) )->Benef3 / 100 ) + ( D():Articulos( nView ) )->pCosto, nDec )
                     else
                        ( D():Articulos( nView ) )->pVenta3      := Round( ( ( D():Articulos( nView ) )->pCosto / ( 1 - ( ( D():Articulos( nView ) )->Benef3 / 100 ) ) ), nDec )
                     end

                     ( D():Articulos( nView ) )->pVtaIva3        := ( ( D():Articulos( nView ) )->pVenta3 * nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) / 100 ) + ( D():Articulos( nView ) )->pVenta3

                     ( D():Articulos( nView ) )->lBnf3           := .F.

                  end

               end

               if lTarifa4

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( D():Articulos( nView ) )->lBnf4  := .T.
                           ( D():Articulos( nView ) )->Benef4 := nPctInc
                        end





                        ( D():Articulos( nView ) )->nBnfSbr4  := 1
                        ( D():Articulos( nView ) )->pVenta4   := ( D():Articulos( nView ) )->pCosto + ( ( D():Articulos( nView ) )->pCosto * nPctInc / 100 )
                        ( D():Articulos( nView ) )->pVtaIva4  := ( D():Articulos( nView ) )->pVenta4 + ( ( D():Articulos( nView ) )->pVenta4 * nIva )

                     else





                        ( D():Articulos( nView ) )->pVenta4      := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta4 )

                        if !( D():Articulos( nView ) )->lIvaInc





                           ( D():Articulos( nView ) )->nBnfSbr4  := 1
                           ( D():Articulos( nView ) )->pVenta4   += ( D():Articulos( nView ) )->pVenta4 * nPctInc / 100

                        else





                           ( D():Articulos( nView ) )->nBnfSbr4  := 2
                           ( D():Articulos( nView ) )->pVenta4   += ( D():Articulos( nView ) )->pVenta4 * nPctInc / 100

                        end

                     end

                  else

                     ( D():Articulos( nView ) )->lBnf4           := .F.
                     ( D():Articulos( nView ) )->pVenta4         := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta4 ) + nUndInc

                  end





                  if !( D():Articulos( nView ) )->lIvaInc

                     if lRnd
                        ( D():Articulos( nView ) )->pVenta4      := Round( ( D():Articulos( nView ) )->pVenta4, nDec )
                     end







                     ( D():Articulos( nView ) )->pVtaIva4        := ( ( D():Articulos( nView ) )->pVenta4 * nIva ) + ( D():Articulos( nView ) )->pVenta4

                  end





                  if ( D():Articulos( nView ) )->lIvaInc

                     ( D():Articulos( nView ) )->pVtaIva4        := ( ( D():Articulos( nView ) )->pVenta4 * nIva ) + ( D():Articulos( nView ) )->pVenta4

                     if lRnd
                        ( D():Articulos( nView ) )->pVtaIva4     := Round( ( D():Articulos( nView ) )->pVtaIva4, nDec )
                     end







                     ( D():Articulos( nView ) )->pVenta4         := Round( ( D():Articulos( nView ) )->pVtaIva4 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( D():Articulos( nView ) )->lBnf4 .AND. nPctInc == 0

                     if ( D():Articulos( nView ) )->nBnfSbr4 <= 1
                        ( D():Articulos( nView ) )->pVenta4      := Round( ( ( D():Articulos( nView ) )->pCosto * ( D():Articulos( nView ) )->Benef4 / 100 ) + ( D():Articulos( nView ) )->pCosto, nDec )
                     else
                        ( D():Articulos( nView ) )->pVenta4      := Round( ( ( D():Articulos( nView ) )->pCosto / ( 1 - ( ( D():Articulos( nView ) )->Benef4 / 100 ) ) ), nDec )
                     end

                     ( D():Articulos( nView ) )->pVtaIva4        := ( ( D():Articulos( nView ) )->pVenta4 * nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) / 100 ) + ( D():Articulos( nView ) )->pVenta4

                     ( D():Articulos( nView ) )->lBnf4           := .F.

                  end

               end





               if lTarifa5

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( D():Articulos( nView ) )->lBnf5  := .T.
                           ( D():Articulos( nView ) )->Benef5 := nPctInc
                        end





                        ( D():Articulos( nView ) )->nBnfSbr5  := 1
                        ( D():Articulos( nView ) )->pVenta5   := ( D():Articulos( nView ) )->pCosto + ( ( D():Articulos( nView ) )->pCosto * nPctInc / 100 )
                        ( D():Articulos( nView ) )->pVtaIva5  := ( D():Articulos( nView ) )->pVenta5 + ( ( D():Articulos( nView ) )->pVenta5 * nIva )

                     else





                        ( D():Articulos( nView ) )->pVenta5      := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta5 )

                        if !( D():Articulos( nView ) )->lIvaInc





                           ( D():Articulos( nView ) )->nBnfSbr5  := 1
                           ( D():Articulos( nView ) )->pVenta5   += ( D():Articulos( nView ) )->pVenta5 * nPctInc / 100

                        else





                           ( D():Articulos( nView ) )->nBnfSbr5  := 2
                           ( D():Articulos( nView ) )->pVenta5   += ( D():Articulos( nView ) )->pVenta5 * nPctInc / 100

                        end

                     end

                  else

                     ( D():Articulos( nView ) )->lBnf5           := .F.
                     ( D():Articulos( nView ) )->pVenta5         := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta5 ) + nUndInc

                  end





                  if !( D():Articulos( nView ) )->lIvaInc

                     if lRnd
                        ( D():Articulos( nView ) )->pVenta5      := Round( ( D():Articulos( nView ) )->pVenta5, nDec )
                     end







                     ( D():Articulos( nView ) )->pVtaIva5        := ( ( D():Articulos( nView ) )->pVenta5 * nIva ) + ( D():Articulos( nView ) )->pVenta5

                  end





                  if ( D():Articulos( nView ) )->lIvaInc

                     ( D():Articulos( nView ) )->pVtaIva5        := ( ( D():Articulos( nView ) )->pVenta5 * nIva ) + ( D():Articulos( nView ) )->pVenta5

                     if lRnd
                        ( D():Articulos( nView ) )->pVtaIva5     := Round( ( D():Articulos( nView ) )->pVtaIva5, nDec )
                     end







                     ( D():Articulos( nView ) )->pVenta5         := Round( ( D():Articulos( nView ) )->pVtaIva5 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( D():Articulos( nView ) )->lBnf5 .AND. nPctInc == 0

                     if ( D():Articulos( nView ) )->nBnfSbr5 <= 1
                        ( D():Articulos( nView ) )->pVenta5      := Round( ( ( D():Articulos( nView ) )->pCosto * ( D():Articulos( nView ) )->Benef5 / 100 ) + ( D():Articulos( nView ) )->pCosto, nDec )
                     else
                        ( D():Articulos( nView ) )->pVenta5      := Round( ( ( D():Articulos( nView ) )->pCosto / ( 1 - ( ( D():Articulos( nView ) )->Benef5 / 100 ) ) ), nDec )
                     end

                     ( D():Articulos( nView ) )->pVtaIva5        := ( ( D():Articulos( nView ) )->pVenta5 * nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) / 100 ) + ( D():Articulos( nView ) )->pVenta5

                     ( D():Articulos( nView ) )->lBnf5           := .F.

                  end

               end





               if lTarifa6

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( D():Articulos( nView ) )->lBnf6  := .T.
                           ( D():Articulos( nView ) )->Benef6 := nPctInc
                        end





                        ( D():Articulos( nView ) )->nBnfSbr6  := 1
                        ( D():Articulos( nView ) )->pVenta6   := ( D():Articulos( nView ) )->pCosto + ( ( D():Articulos( nView ) )->pCosto * nPctInc / 100 )
                        ( D():Articulos( nView ) )->pVtaIva6  := ( D():Articulos( nView ) )->pVenta6 + ( ( D():Articulos( nView ) )->pVenta6 * nIva )

                     else





                        ( D():Articulos( nView ) )->pVenta6      := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta6 )

                        if !( D():Articulos( nView ) )->lIvaInc





                           ( D():Articulos( nView ) )->nBnfSbr6  := 1
                           ( D():Articulos( nView ) )->pVenta6   += ( D():Articulos( nView ) )->pVenta6 * nPctInc / 100

                        else





                           ( D():Articulos( nView ) )->nBnfSbr6  := 2
                           ( D():Articulos( nView ) )->pVenta6   += ( D():Articulos( nView ) )->pVenta6 * nPctInc / 100

                        end

                     end

                  else

                     ( D():Articulos( nView ) )->lBnf6           := .F.
                     ( D():Articulos( nView ) )->pVenta6         := nVal2Change( nPrecio, ( D():Articulos( nView ) )->pVenta6 ) + nUndInc

                  end





                  if !( D():Articulos( nView ) )->lIvaInc

                     if lRnd
                        ( D():Articulos( nView ) )->pVenta6      := Round( ( D():Articulos( nView ) )->pVenta6, nDec )
                     end







                     ( D():Articulos( nView ) )->pVtaIva6        := ( ( D():Articulos( nView ) )->pVenta6 * nIva ) + ( D():Articulos( nView ) )->pVenta6

                  end





                  if ( D():Articulos( nView ) )->lIvaInc

                     ( D():Articulos( nView ) )->pVtaIva6        := ( ( D():Articulos( nView ) )->pVenta6 * nIva ) + ( D():Articulos( nView ) )->pVenta6

                     if lRnd
                        ( D():Articulos( nView ) )->pVtaIva6     := Round( ( D():Articulos( nView ) )->pVtaIva6, nDec )
                     end







                     ( D():Articulos( nView ) )->pVenta6         := Round( ( D():Articulos( nView ) )->pVtaIva6 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( D():Articulos( nView ) )->lBnf6 .AND. nPctInc == 0

                     if ( D():Articulos( nView ) )->nBnfSbr6 <= 1
                        ( D():Articulos( nView ) )->pVenta6      := Round( ( ( D():Articulos( nView ) )->pCosto * ( D():Articulos( nView ) )->Benef6 / 100 ) + ( D():Articulos( nView ) )->pCosto, nDec )
                     else
                        ( D():Articulos( nView ) )->pVenta6      := Round( ( ( D():Articulos( nView ) )->pCosto / ( 1 - ( ( D():Articulos( nView ) )->Benef6 / 100 ) ) ), nDec )
                     end

                     ( D():Articulos( nView ) )->pVtaIva6        := ( ( D():Articulos( nView ) )->pVenta6 * nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) / 100 ) + ( D():Articulos( nView ) )->pVenta6

                     ( D():Articulos( nView ) )->lBnf6           := .F.

                  end

               end





               if lPrcMin

                  if nRad == 1





                     if nPrecio == 2





                        ( D():Articulos( nView ) )->PvpRec   := ( D():Articulos( nView ) )->pCosto + ( ( D():Articulos( nView ) )->pCosto * nPctInc / 100 )

                     else





                        ( D():Articulos( nView ) )->PvpRec   := nVal2Change( nPrecio, ( D():Articulos( nView ) )->PvpRec )

                     end

                  else

                     ( D():Articulos( nView ) )->PvpRec         := nVal2Change( nPrecio, ( D():Articulos( nView ) )->PvpRec ) + nUndInc

                  end





                  if lRnd
                     ( D():Articulos( nView ) )->PvpRec        := Round( ( D():Articulos( nView ) )->PvpRec, nDec )
                  end

               end





               if lPesVol

                  if nRad == 1
                     ( D():Articulos( nView ) )->nImpPes      += nVal2Change( nPrecio, ( D():Articulos( nView ) )->nImpPes ) * nPctInc / 100
                  else
                     ( D():Articulos( nView ) )->nImpPes      += nVal2Change( nPrecio, ( D():Articulos( nView ) )->nImpPes ) + nUndInc
                  end

                  if lRnd
                     ( D():Articulos( nView ) )->nImpPes      := Round( ( D():Articulos( nView ) )->nImpPes, nDec )
                  end

               end

               ( D():Articulos( nView ) )->lSndDoc            := .T.

               nCounter++

               ( D():Articulos( nView ) )->( dbUnLock() )

            end

            ( D():Articulos( nView ) )->( dbSkip() )

            oMtr:Set( ( D():Articulos( nView ) )->( OrdKeyNo() ) )

         end

         oMtr:Set( ( D():Articulos( nView ) )->( LastRec() ) )

      end

      DestroyFastFilter( D():Articulos( nView ) )

      MsgInfo( "Total de registros cambiados " + Trans( nCounter, "999999999" ) )

   end

    ( D():Articulos( nView ) )->( dbGoto( nRecAct ) )

   if !empty( oWndBrw )
      oWndBrw:Refresh()
   end

   oDlg:Enable()

Return .T.



Static Function nVal2Change( nPrecio, nImporte )

   local nVal2Change := 0

   do case
      case nPrecio == 1
         nVal2Change := nImporte
      case nPrecio == 2
         nVal2Change := ( D():Articulos( nView ) )->pCosto
      case nPrecio == 3
         nVal2Change := ( D():Articulos( nView ) )->pVenta1
      case nPrecio == 4
         nVal2Change := ( D():Articulos( nView ) )->pVenta2
      case nPrecio == 5
         nVal2Change := ( D():Articulos( nView ) )->pVenta3
      case nPrecio == 6
         nVal2Change := ( D():Articulos( nView ) )->pVenta4
      case nPrecio == 7
         nVal2Change := ( D():Articulos( nView ) )->pVenta5
      case nPrecio == 8
         nVal2Change := ( D():Articulos( nView ) )->pVenta6
      case nPrecio == 9
         nVal2Change := ( D():Articulos( nView ) )->PvpRec
   end

RETURN nVal2Change



FUNCTION retCode( cCbaArt, cArticulo )

   local lFound
   local cRet  := ""
   local nOrd  := ( cArticulo )->( ordSetFocus( "Codigo" ) )

   lFound      := ( cArticulo )->( dbSeek( cCbaArt ) )
   if lFound
      cRet     := ( cArticulo )->CODIGO
   end

   ( cArticulo )->( OrdSetFocus( nOrd ) )





   if !lFound
      nOrd     := ( cArticulo )->( ordSetFocus( "CodeBar" ) )

      if ( cArticulo )->( dbSeek( cCbaArt ) )
         cRet  := ( cArticulo )->CODIGO
      end

      ( cArticulo )->( OrdSetFocus( nOrd ) )
   end

RETURN ( cRet )



STATIC FUNCTION lSelArt( lSel, oBrw )

   If( lSel == nil, lSel := !( D():Articulos( nView ) )->lSndDoc, ) ;

   if dbLock( D():Articulos( nView ) )
      ( D():Articulos( nView ) )->lSndDoc  := lSel
      ( D():Articulos( nView ) )->( dbUnlock() )
   end

   if lSel .AND. ( D():Familias( nView ) )->( dbSeek( ( D():Articulos( nView ) )->Familia ) )
      if dbLock( D():Familias( nView ) )
         ( D():Familias( nView ) )->lSelDoc := lSel
         ( D():Articulos( nView ) )->( dbUnlock() )
      end
   end

   if oBrw <> nil
      oBrw:Refresh()
      oBrw:SetFocus()
   end

RETURN NIL







STATIC FUNCTION lSelectAll( oBrw, lSel, lTop )

   local nRecAct  := ( D():Articulos( nView ) )->( Recno() )

   If( lSel == nil, lSel := .T., ) ;
   If( lTop == nil, lTop := .T., ) ;

   createWaitMeter( nil, nil, ( D():Articulos( nView ) )->( OrdKeyCount() ) )

   if lTop
      ( D():Articulos( nView ) )->( dbGoTop() )
   end

   while !( D():Articulos( nView ) )->( eof() )
      lSelArt( lSel )
      incWaitMeter()
      ( D():Articulos( nView ) )->( dbSkip() )
   end

   ( D():Articulos( nView ) )->( dbGoTo( nRecAct ) )

   endWaitMeter()

   if oBrw <> nil
      oBrw:Refresh()
      oBrw:SetFocus()
   end

RETURN NIL






static function lTstFacCnv( aGet, aTmp, oSay )

   if aTmp[( D():Articulos( nView ) )->( fieldpos( "LFACCNV" ) ) ]
      return .T.
   else
      aGet[( D():Articulos( nView ) )->( fieldpos( "CFACCNV" ) ) ]:cText( Space( 2 ) )
      aGet[( D():Articulos( nView ) )->( fieldpos( "CFACCNV" ) ) ]:lValid()
      oSay[5]:cText( "" )
   end

return .F.



FUNCTION EdmArt( cCodRut, cPathTo, oStru, oTipArt )

   local oBlock
   local oError
   local n           := 0
   local cChr
   local fTar
   local cFilEdm
   local cFilOdb
   local nWrote
   local nRead
   local dbf
   local dbfTIva

   If( cCodRut == nil, cCodRut := "001", ) ;
   If( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;

   cCodRut           := SubStr( cCodRut, -3 )

   cFilEdm           := cPathTo + "EARTI" + cCodRut + ".TXT"
   cFilOdb           := cPathTo + "EARTI" + cCodRut + ".ODB"





   IF file( cFilEdm )
      fErase( cFilEdm )
   end

   fTar              := fCreate( cFilEdm )





   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.Dbf" ), ( cCheckArea( "TIVA", @dbfTIva ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oStru:oMetUno:cText   := "Artículos"
   oStru:oMetUno:SetTotal( ( dbf )->( LastRec() ) )

   while !( dbf )->( eof() )

      if oTipArt:oDbf:Seek( ( dbf )->cCodTip ) .AND. oTipArt:oDbf:lSelect

         cChr  := "+"
         cChr  += EdmRjust( (dbf)->CODIGO, Space( 1 ), 13 )
         cChr  += EdmSubStr( (dbf)->NOMBRE, 1, 30 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA1, "@ 9999.99" ), 1, 7 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA2, "@ 9999.99" ), 1, 7 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA3, "@ 9999.99" ), 1, 7 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA4, "@ 9999.99" ), 1, 7 )
         cChr  += cCodTerIva( (dbf)->TipoIva, dbfTIva ) + ","
         cChr  += EdmSubStr( Trans( (dbf)->NUNICAJA, "@ 99999" ), 1, 5 )
         cChr  += EdmSubStr( Trans( (dbf)->NPNTVER1, "@ 9999.99" ), 1, 7, .F. )
         cChr  += Chr(13)+Chr(10)

         nWrote:= fwrite( fTar, cChr, nRead )

         oStru:oMetUno:Set( ( dbf )->( ++n ) )







      end

      (dbf)->( dbSkip() )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbf     )->( dbCloseArea() )
   ( dbfTIva )->( dbCloseArea() )

   fClose( fTar    )

   if file( FullCurDir() + "CONVER.EXE" )
      WinExec( FullCurDir() + "CONVER.EXE " + cFilEdm + " " + cFilOdb + " 44 -x", 6 )
   end

RETURN NIL



Function cRetPreArt( cCodArt, nTarifa, cCodDiv, lIvaInc, cArticulo, dbfDiv, dbfArtKit, dbfIva, lBuscaImportes )

   local nPreArt           := 0
   local aDbfSta           := aGetStatus( cArticulo )

   If( lBuscaImportes == nil, lBuscaImportes := uFieldEmpresa( "lBusImp" ), ) ;





   ( cArticulo )->( ordSetFocus( "CodeBar" ) )

   if ( cArticulo )->( dbSeek( cCodArt ) )
      cCodArt              := ( cArticulo )->Codigo
   end

   ( cArticulo )->( ordSetFocus( "Codigo" ) )

   if ( cArticulo )->( dbSeek( cCodArt ) )
      nPreArt              := nRetPreArt( nTarifa, cCodDiv, lIvaInc, cArticulo, dbfDiv, dbfArtKit, dbfIva, lBuscaImportes )
   end

   SetStatus( cArticulo, aDbfSta )

Return ( nPreArt )



FUNCTION nRetPreIva( nTarifa, cCodDiv, cArticulo, dbfDiv )

   local nPre        := 0

   If( nTarifa == nil, nTarifa := 1, ) ;

   while .T.

      do case
         case nTarifa == 1
            nPre  := ( cArticulo )->pVtaIva1
         case nTarifa == 2
            nPre  := ( cArticulo )->pVtaIva2
         case nTarifa == 3
            nPre  := ( cArticulo )->pVtaIva3
         case nTarifa == 4
            nPre  := ( cArticulo )->pVtaIva4
         case nTarifa == 5
            nPre  := ( cArticulo )->pVtaIva5
         case nTarifa == 6
            nPre  := ( cArticulo )->pVtaIva6
      end

      if nPre == 0 .AND. nTarifa > 1 .AND. lBuscaImportes()
         nTarifa--
         loop
      else
         exit
      end

   end

return ( nPre )



Function nCostoEscandallo( aTmp, dbfTmpKit, cArticulo, dbfArtKit, lPic, cDivRet, dbfDiv )

   local nCosto   := 0
   local nOrdArt  := ( cArticulo )->( OrdSetFocus( 1 ) )
   local nRecArt  := ( cArticulo )->( Recno() )
   local nRecKit  := ( dbfTmpKit )->( Recno() )

   If( lPic == nil, lPic := .F., ) ;

   if aTmp[ ( cArticulo )->( fieldpos( "lKitArt" ) ) ]

      ( dbfTmpKit )->( dbGoTop() )
      while !( dbfTmpKit )->( eof() )
         nCosto   += nCosto( ( dbfTmpKit )->cRefKit, cArticulo, dbfArtKit ) * ( dbfTmpKit )->nUndKit * nFactorConversion( ( dbfTmpKit )->cRefKit )
         ( dbfTmpKit )->( dbSkip() )
      end

   end

   ( cArticulo )->( OrdSetFocus( nOrdArt ) )
   ( cArticulo )->( dbGoTo( nRecArt ) )
   ( dbfTmpKit   )->( dbGoTo( nRecKit ) )

   if dbfDiv <> nil
      if cDivRet <> nil .AND. cDivRet <> cDivEmp()
         nCosto   := nCnv2Div( nCosto, cDivEmp(), cDivRet )
         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end
      else
         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end
      end
   end

Return ( nCosto )



Function nCostoLin( cCodArt, cArticulo, dbfArtKit, lPic, cDivRet, dbfDiv )

   local nCosto

   If( lPic == nil, lPic := .F., ) ;

   nCosto         := nCosto( cCodArt, cArticulo, dbfArtKit, .F., cDivRet, dbfDiv, lPic )
   nCosto         *= ( dbfArtKit )->nUndKit

   if dbfDiv <> nil

      if cDivRet <> nil .AND. cDivRet <> cDivEmp()

         nCosto   := nCnv2Div( nCosto, cDivEmp(), cDivRet )
         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end

      else

         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end

      end

   end

return ( nCosto )



function CalPosTactil( oMeter, lMessage )

   local oBlock
   local oError
   local nDouDiv
   local nRouDiv
   local cArticulo
   local dbfTikL
   local dbfDiv

   If( lMessage == nil, lMessage := .T., ) ;

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @cArticulo ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.Dbf" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.Dbf" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   if oMeter <> nil .AND. lMessage
      oMeter:nTotal  := ( dbfTikL )->( LastRec() )
   end

   nDouDiv           := nDouDiv( cDivEmp(), dbfDiv )
   nRouDiv           := nRouDiv( cDivEmp(), dbfDiv )

   ( cArticulo )->( dbGoTop() )
   while !( cArticulo )->( eof() )

      if dbLock( cArticulo )
         ( cArticulo )->nPosTcl   := 0
         ( cArticulo )->( dbUnLock() )
      end

      ( cArticulo )->( dbSkip() )
   end

   ( dbfTikL )->( dbGoTop() )
   while !( dbfTikL )->( eof() )

      if ( cArticulo )->( dbSeek( ( dbfTikL )->cCbaTil ) )
         if dbLock( cArticulo )
            ( cArticulo )->nPosTcl   +=  nTotNTpv( dbfTikL )
            ( cArticulo )->( dbUnLock() )
         end
      end





      if oMeter <> nil .AND. lMessage
         oMeter:Set( ( dbfTikL )->( OrdKeyNo() ) )
      end

      sysrefresh()

      ( dbfTikL )->( dbSkip() )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( cArticulo)->( dbCloseArea() )
   ( dbfTikL    )->( dbCloseArea() )
   ( dbfDiv     )->( dbCloseArea() )

   dbfDiv      := NIL
   dbfTikL     := NIL
   cArticulo := NIL

return nil



Static Function buscarExtendido()

   local nSea     := 1
    local oDlg
   local nOrd     := ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( "cRefPrv" ) )
   local oGetPrv
   local cGetPrv  := dbFirst( dbfProv )
   local oSayPrv
   local cSayPrv  := dbFirst( dbfProv, 2 )
   local oGetArt
   local cGetArt  := Space( 18 )
   local oGetBar
   local cGetBar  := Space( 18 )

   oDlg = TDialog():New(,,,,, "Search",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



      TRadMenu():Redefine( { | u | If( PCount()==0, nSea, nSea:= u ) }, oDlg,, { 120, 121 },,,,, .F.,, )




      oGetBar := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cGetBar, cGetBar:= u ) }, oDlg,,,,,,,,, .F., {||     ( nSea == 1 )},, .F., .F.,,,,,, nil,,, )







      oGetPrv := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetPrv, cGetPrv:= u ) }, oDlg,,, {||    ( cProvee( oGetPrv, dbfProv, oSayPrv ) )},,,,,, .F., {||     ( nSea == 2 )},, .F., .F.,,,,, {|Self|( BrwProvee( oGetPrv, oSayPrv ) )}, nil, "LUPA",, )




      oSayPrv := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSayPrv, cSayPrv:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      oGetArt := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cGetArt, cGetArt:= u ) }, oDlg,,,,,,,,, .F., {||     ( nSea == 2 )},, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 500, {||( PosProveedor( nSea, cGetPrv, cGetArt, cGetBar ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:bStart    := {|| oGetBar:SetFocus() }

   oDlg:AddFastKey( 116, {|| PosProveedor( nSea, cGetPrv, cGetArt, cGetBar ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( nOrd ) )

RETURN NIL



Static Function PosProveedor( nSea, cGetPrv, cGetArt, cGetBar )

   local nCod
   local nOrd
   local cCodigoArticulo

   if nSea == 1



















      oWndBrw:setFilter()
      oWndBrw:oWndBar:CleanGet()

      cCodigoArticulo         := ArticulosCodigosBarraModel():getCodigo( cGetBar )

      dbSeekInOrd( cCodigoArticulo, "codigo", D():Articulos( nView ) )

      oWndBrw:SetFocus()
      oWndBrw:Refresh()

   else

      if ( D():ProveedorArticulo( nView ) )->( dbSeek( cGetPrv + cGetArt ) )
         if dbSeekInOrd( ( D():ProveedorArticulo( nView ) )->cCodArt, "Codigo", D():Articulos( nView ) )
            oWndBrw:SetFocus()
         else
            msgStop( "Artículo " + Rtrim( ( D():ProveedorArticulo( nView ) )->cCodArt ) + " no encontrado." )
         end
      end

   end

RETURN NIL



Static Function cfilter( uDataSource, cData, Self )

   local aList       := {}

   aEval( uDataSource, {|x| iif( lower( cData ) $ lower( x[1] ), aadd( aList, x ), ) } )

RETURN aList



Static Function aCodigosArticulo()

   local nRec        := ( D():Articulos( nView ) )->( Recno() )
   local aCodigos    := {}

   ( D():Articulos( nView ) )->( dbGoTop() )

   while !( D():Articulos( nView ) )->( Eof() )

      aAdd( aCodigos, { ( D():Articulos( nView ) )->Codigo, ( D():Articulos( nView ) )->Codigo } )

      ( D():Articulos( nView ) )->( dbSkip() )

   end

   ( D():Articulos( nView ) )->( dbGoTo( nRec ) )

Return aCodigos



Static Function aNombresArticulo()

   local nRec        := ( D():Articulos( nView ) )->( Recno() )
   local aCodigos    := {}

   ( D():Articulos( nView ) )->( dbGoTop() )

   while !( D():Articulos( nView ) )->( Eof() )

      aAdd( aCodigos, { ( D():Articulos( nView ) )->Nombre, ( D():Articulos( nView ) )->Codigo } )

      ( D():Articulos( nView ) )->( dbSkip() )

   end

   ( D():Articulos( nView ) )->( dbGoTo( nRec ) )

Return aCodigos



Static Function aNombresFamilias()

   local nRec        := ( D():Familias( nView ) )->( Recno() )
   local aCodigos    := {}

   ( D():Familias( nView ) )->( dbGoTop() )

   while !( D():Familias( nView ) )->( Eof() )

      aAdd( aCodigos, { ( D():Familias( nView ) )->cNomFam, ( D():Familias( nView ) )->cCodFam } )

      ( D():Familias( nView ) )->( dbSkip() )

   end

   ( D():Familias( nView ) )->( dbGoTo( nRec ) )

Return aCodigos



Static Function aNombresTipoArticulo()

   local nRec        := oTipart:oDbf:Recno()
   local aCodigos    := {}

   oTipart:oDbf:GoTop()

   while !oTipart:oDbf:Eof()

      aAdd( aCodigos, { oTipart:oDbf:cNomTip, oTipart:oDbf:cCodTip } )

      oTipart:oDbf:Skip()

   end

   oTipart:oDbf:GoTo( nRec )

Return aCodigos



Static Function aNombresTemporada()

   local nRec        := ( dbfTemporada )->( Recno() )
   local aCodigos    := {}

   ( dbfTemporada )->( dbGoTop() )

   while !( dbfTemporada )->( Eof() )

      aAdd( aCodigos, { ( dbfTemporada )->cNombre, ( dbfTemporada )->cCodigo } )

      ( dbfTemporada )->( dbSkip() )

   end

   ( dbfTemporada )->( dbGoTo( nRec ) )

Return aCodigos



Static Function aNombresEstadoArticulo()

   local nRec        := ( D():EstadoArticulo( nView ) )->( Recno() )
   local aCodigos    := {}

   ( D():EstadoArticulo( nView ) )->( dbGoTop() )

   while !( D():EstadoArticulo( nView ) )->( Eof() )

      aAdd( aCodigos, { ( D():EstadoArticulo( nView ) )->cNombre, ( D():EstadoArticulo( nView ) )->cCodigo } )

      ( D():EstadoArticulo( nView ) )->( dbSkip() )

   end

   ( D():EstadoArticulo( nView ) )->( dbGoTo( nRec ) )

Return aCodigos






Function cCodeBar( cCodArticulo, dbfCodebar )

   local cCodeBar          := ""
   local nOrdenAnterior    := ( dbfCodebar )->( OrdSetFocus( "cCodArt" ) )

   if ( dbfCodebar )->( dbSeek( cCodArticulo ) )
      cCodeBar             := ( dbfCodebar )->cCodBar
   end

   ( dbfCodebar )->( OrdSetFocus( nOrdenAnterior ) )

Return ( cCodeBar )



Function bGenEdtArticulo( cCodArt )

   local bGen
   local cDoc           := by( cCodArt )

   bGen                 := {|| EdtArticulo( cDoc ) }

return ( bGen )



Function EdtArticulo( cCodArt, lOpenBrowse )

   local oBlock
   local oError
   local nLevel         := Auth():Level( "01014" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if lOpenBrowse

      if Articulo()
         if dbSeekInOrd( cCodArt, "Codigo", D():Articulos( nView ) )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra artículo" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( cCodArt, "Codigo", D():Articulos( nView ) )
            WinEdtRec( oWndBrw, bEdit, D():Articulos( nView ) )
         else
            MsgStop( "No se encuentra artículo con código " + Rtrim( cCodArt ) )
         end
         CloseFiles()
      end

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error editando artículo" )

   end

   ErrorBlock( oBlock )

RETURN .T.



Function DupArticulo( cCodArt, lOpenBrowse )

   local oBlock
   local oError
   local nLevel         := Auth():Level( "01014" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if lOpenBrowse

      if Articulo()
         if dbSeekInOrd( cCodArt, "Codigo", D():Articulos( nView ) )
            oWndBrw:RecDup()
         else
            MsgStop( "No se encuentra artículo" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( cCodArt, "Codigo", D():Articulos( nView ) )
            WinDupRec( oWndBrw, bEdit, D():Articulos( nView ) )
         else
            MsgStop( "No se encuentra artículo con código " + Rtrim( cCodArt ) )
         end
         CloseFiles()
      end

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error editando artículo" )

   end

   ErrorBlock( oBlock )

RETURN .T.



Function AppArticulo( lOpenBrowse )

   local oBlock
   local oError
   local nLevel         := Auth():Level( "01014" )
   local cCodArt        := cCodArt

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if lOpenBrowse

         if Articulo()
            oWndBrw:RecAdd()
         end

      else

         if OpenFiles( .T. )
            WinAppRec( oWndBrw, bEdit, D():Articulos( nView ) )
            cCodArt :=  ( D():Articulos( nView ) )->Codigo
            CloseFiles()
         end

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error añadiendo artículo" )

   end

   ErrorBlock( oBlock )

RETURN cCodArt



FUNCTION InfArticulo( cCodArt, oBrw )

   local nLevel   := Auth():Level( "01014" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if !OpenFiles( .T. )
      CloseFiles()
      return nil
   end

   if ( D():Articulos( nView ) )->( dbSeek( cCodArt ) )
      BrwVtaComArt( ( D():Articulos( nView ) )->Codigo, ( D():Articulos( nView ) )->Nombre )
   else
      MsgStop( "No se encuentra artículo" )
   end

   if oBrw <> nil
      oBrw:Refresh()
   end

   CloseFiles()

RETURN .T.



FUNCTION InfStock( cCodArt, oBrw )

   local nLevel   := Auth():Level( "01014" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if !OpenFiles( .T. )
      CloseFiles()
      return nil
   end

   if ( D():Articulos( nView ) )->( dbSeek( cCodArt ) )
      BrwStkArt( nView )
   else
      MsgStop( "No se encuentra artículo" )
   end

   if oBrw <> nil
      oBrw:Refresh()
   end

   CloseFiles()

RETURN .T.



FUNCTION CargaValorCat( aTmp, aGet, oSay, oValorPunto, oValorDto, oValorTot, nMode, lFastMode )

   local nOrdAnt

   If( lFastMode == nil, lFastMode := .F., ) ;

   if !lFastMode



      if cCatOld <> aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODCAT" ) ) ]                       .AND. ( dbfCatalogo )->( dbSeek( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODCAT" ) ) ] ) )   .AND. !( dbfCatalogo )->lObsCat

         if ApoloMsgNoYes(  "¿ Desea actualizar los datos del artículo con los datos del catálogo ?", "Elija una opción" )

            nOrdAnt     := ( dbfTmpPrv )->( OrdSetFocus( "CREFPRV" ) )

            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPUNTOS" ) ) ]  := ( dbfCatalogo )->nValPunt
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NDTOPNT" ) ) ]  := ( dbfCatalogo )->nDtoPunt

            if ( dbfTmpPrv )->( dbSeek( ( dbfCatalogo )->cCodProv + Space( 18 ) ) )

               ( dbfTmpPrv )->( dbGoTop() )
               while !( dbfTmpPrv )->( eof () )
                  ( dbfTmpPrv )->lDefPrv     := ( dbfTmpPrv )->cCodPrv + ( dbfTmpPrv )->cRefPrv == ( dbfCatalogo )->cCodProv + Space( 18 )
               ( dbfTmpPrv )->( dbSkip() )
               end

            else

               ( dbfTmpPrv )->( dbGoTop() )
               while !( dbfTmpPrv )->( eof () )
                  ( dbfTmpPrv )->lDefPrv     := .F.
               ( dbfTmpPrv )->( dbSkip() )
               end

               ( dbfTmpPrv )->( dbAppend() )
               ( dbfTmpPrv )->cCodPrv        := ( dbfCatalogo )->cCodProv
               ( dbfTmpPrv )->lDefPrv        := .T.

            end

            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CPRVHAB" ) ) ]  := ( dbfCatalogo )->cCodProv



            if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF1"    ) ) ]
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF1"   ) ) ] := ( dbfCatalogo )->Benef1
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR1" ) ) ] := ( dbfCatalogo )->nBnfSbr1
               oSay[ 11 ]:Select( Max( ( dbfCatalogo )->nBnfSbr1, 1 ) )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF1" ) ) ]:lValid()
            end



            if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF2" ) ) ]
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2" ) ) ]   := ( dbfCatalogo )->Benef2
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR2" ) ) ] := ( dbfCatalogo )->nBnfSbr2
               oSay[ 12 ]:Select( Max( ( dbfCatalogo )->nBnfSbr2, 1 ) )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2" ) ) ]:lValid()
            end



            if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF3" ) ) ]
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3" ) ) ]   := ( dbfCatalogo)->Benef3
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR3" ) ) ] := ( dbfCatalogo )->nBnfSbr3
               oSay[ 13 ]:Select( Max( ( dbfCatalogo )->nBnfSbr3, 1 ) )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3" ) ) ]:lValid()
            end



            if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF4" ) ) ]
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4" ) ) ]   := ( dbfCatalogo )->Benef4
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR4" ) ) ] := ( dbfCatalogo )->nBnfSbr4
               oSay[ 14 ]:Select( Max( ( dbfCatalogo )->nBnfSbr4, 1 ) )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4" ) ) ]:lValid()
            end



            if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF5" ) ) ]
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ]   := ( dbfCatalogo )->Benef5
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR5" ) ) ] := ( dbfCatalogo )->nBnfSbr5
               oSay[ 15 ]:Select( Max( ( dbfCatalogo )->nBnfSbr5, 1 ) )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ]:lValid()
            end



            if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF6" ) ) ]
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF6" ) ) ]   := ( dbfCatalogo )->Benef6
               aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR6" ) ) ] := ( dbfCatalogo )->nBnfSbr6
               oSay[ 16 ]:Select( Max( ( dbfCatalogo )->nBnfSbr6, 1 ) )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF6" ) ) ]:lValid()
            end

         end

      end



      oValorPunto:Refresh()

      oValorDto:Refresh()

      oValorTot:Refresh()

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF1" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "BENEF6" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA1" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ]:Refresh()
      aGet[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ]:Refresh()

      ( dbfTmpPrv )->( OrdSetFocus( nOrdAnt ) )

   else


      if cCatOld <> aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODCAT" ) ) ]                     .AND. ( dbfCatalogo )->( dbSeek( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODCAT" ) ) ] ) )

         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NPUNTOS" ) ) ]  := ( dbfCatalogo )->nValPunt
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NDTOPNT" ) ) ]  := ( dbfCatalogo )->nDtoPunt
         aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CPRVHAB" ) ) ]  := ( dbfCatalogo )->cCodProv
         oSay[4]:cText( RetProvee( ( dbfCatalogo )->cCodProv ) )



         if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF1" ) ) ]
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF1" ) ) ]   := ( dbfCatalogo )->Benef1
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR1" ) ) ] := ( dbfCatalogo )->nBnfSbr1
         end



         if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF2" ) ) ]
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF2" ) ) ]   := ( dbfCatalogo )->Benef2
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR2" ) ) ] := ( dbfCatalogo )->nBnfSbr2
         end



         if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF3" ) ) ]
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF3" ) ) ]   := ( dbfCatalogo)->Benef3
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR3" ) ) ] := ( dbfCatalogo )->nBnfSbr3
         end



         if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF4" ) ) ]
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF4" ) ) ]   := ( dbfCatalogo )->Benef4
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR4" ) ) ] := ( dbfCatalogo )->nBnfSbr4
         end



         if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF5" ) ) ]
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF5" ) ) ]   := ( dbfCatalogo )->Benef5
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR5" ) ) ] := ( dbfCatalogo )->nBnfSbr5
         end



         if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LBNF6" ) ) ]
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "BENEF6" ) ) ]   := ( dbfCatalogo )->Benef6
            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "NBNFSBR6" ) ) ] := ( dbfCatalogo )->nBnfSbr6
         end

      end

      oValorPunto:Refresh()

      oValorDto:Refresh()

      oValorTot:Refresh()

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "CPRVHAB" ) )]:Refresh()

      oSay[4]:Refresh()

   end

   cCatOld  := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODCAT" ) ) ]

RETURN .T.



function SynArt( cPath )

   local oBlock
   local oError
   local cCod           := ""
   local nCosto         := 0
   local idImagen
   local nOrdAnt
   local dbfArt
   local dbfImg
   local dbfIva
   local dbfArtPrv
   local dbfFamilia
   local cUuid

   If( cPath == nil, cPath := cPatEmp(), ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @dbfArt ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTKIT.Dbf" ), ( cCheckArea( "ARTTIK", @dbfArtKit ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PARKIT.Dbf" ), ( cCheckArea( "PARTIK", @dbfParKit ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PARKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROVART.Dbf" ), ( cCheckArea( "PROVART", @dbfArtPrv ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FAMILIAS.Dbf" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtImg.Dbf" ), ( cCheckArea( "ArtImg", @dbfImg ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtImg.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "OFERTA.Dbf" ), ( cCheckArea( "OFERTA", @dbfOfe ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.Dbf" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cRefFec" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.Dbf" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cRefFec" )

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oNewImp              := TNewImp():Create( cPatEmp() )
   if oNewImp:OpenFiles()

      ( dbfArt )->( dbGoTop() )

      while !( dbfArt )->( eof() )

         if !( dbfArt )->lKitArt
            while ( dbfArtKit )->( dbSeek( ( dbfArt )->Codigo ) )
               ( dbfArtKit )->( dbDelete() )
            end
         end

         ( dbfArtKit )->( dbGoTop() )

         if ( dbfArt )->lKitArt

            ( dbfParKit )->( dbAppend() )
            cUuid                            := win_uuidcreatestring()
            ( dbfParKit )->cUuid             := cUuid
            ( dbfParKit )->cCodArt           := ( dbfArt )->Codigo
            ( dbfParKit )->cNomKit           := "Compuesto " + AllTrim( ( dbfArt )->Nombre )
            ( dbfParKit )->lDefKit           := .T.
            ( dbfParKit )->( dbUnLock() )

            if ( dbfArtKit )->( dbSeek( ( dbfArt )->Codigo ) )
               while ( dbfArtKit )->cCodKit == ( dbfArt )->Codigo

                  if dbLock( dbfArtKit )
                     ( dbfArtKit )->cParUuid := cUuid
                     ( dbfArtKit )->( dbUnLock() )
                  end

                  ( dbfArtKit )->( dbSkip() )
               end
            end

         end





         nOrdAnt        := ( dbfArtPrv )->( OrdSetFocus( "lDefPrv" ) )

         if !( dbfArtPrv )->( dbSeek( ( dbfArt )->Codigo ) )

            if !empty( ( dbfArt )->cPrvHab )

               if !( dbfArtPrv )->( dbSeek( ( dbfArt )->Codigo + ( dbfArt )->cPrvHab ) )

                  if ( dbfArtPrv )->( dbSeek( ( dbfArt )->Codigo ) )

                     while ( dbfArtPrv )->cCodArt == ( dbfArt )->Codigo .AND. !( dbfArtPrv )->( eof() )
                        ( dbfArtPrv )->lDefPrv        := .F.
                        ( dbfArtPrv )->( dbSkip() )
                     end

                     ( dbfArtPrv )->( dbAppend() )
                     ( dbfArtPrv )->cCodArt           := ( dbfArt )->Codigo
                     ( dbfArtPrv )->cCodPrv           := ( dbfArt )->cPrvHab
                     ( dbfArtPrv )->cDivPrv           := cDivEmp()
                     ( dbfArtPrv )->lDefPrv           := .T.
                     ( dbfArtPrv )->( dbUnLock() )

                  end

               end

            end

         else

            if ( dbfArtPrv )->cCodArt  <> ( dbfArt )->cPrvHab
               ( dbfArt )->cPrvHab                    := ( dbfArtPrv )->cCodPrv
            end

         end

         ( dbfArtPrv )->( OrdSetFocus( nOrdAnt ) )






















         if empty( ( dbfArt )->Uuid )
            ( dbfArt )->Uuid        := win_uuidcreatestring()
         end






         if uFieldEmpresa( "lActCos" )






         end





         nCosto                        := ( dbfArt )->pCosto

         if ( dbfArt )->lBnf1 .AND. nCosto <> 0
            ( dbfArt )->pVenta1   := CalPre( if( ( dbfArt )->nBnfSbr1 <= 1, .T., .F. ), nCosto, .T., ( dbfArt )->Benef1, ( dbfArt )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArt )->cCodImp, nil )
            ( dbfArt )->pVtaIva1  := ( dbfArt )->pVenta1 + Round( ( ( dbfArt )->pVenta1 * nIva( dbfIva, ( dbfArt )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArt )->lBnf2 .AND. nCosto <> 0
            ( dbfArt )->pVenta2   := CalPre( if( ( dbfArt )->nBnfSbr2 <= 1, .T., .F. ), nCosto, .T., ( dbfArt )->Benef2, ( dbfArt )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArt )->cCodImp, nil )
            ( dbfArt )->pVtaIva2  := ( dbfArt )->pVenta2 + Round( ( ( dbfArt )->pVenta2 * nIva( dbfIva, ( dbfArt )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArt )->lBnf3 .AND. nCosto <> 0
            ( dbfArt )->pVenta3   := CalPre( if( ( dbfArt )->nBnfSbr3 <= 1, .T., .F. ), nCosto, .T., ( dbfArt )->Benef3, ( dbfArt )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArt )->cCodImp, nil )
            ( dbfArt )->pVtaIva3  := ( dbfArt )->pVenta3 + Round( ( ( dbfArt )->pVenta3 * nIva( dbfIva, ( dbfArt )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArt )->lBnf4 .AND. nCosto <> 0
            ( dbfArt )->pVenta4   := CalPre( if( ( dbfArt )->nBnfSbr4 <= 1, .T., .F. ), nCosto, .T., ( dbfArt )->Benef4, ( dbfArt )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArt )->cCodImp, nil )
            ( dbfArt )->pVtaIva4  := ( dbfArt )->pVenta4 + Round( ( ( dbfArt )->pVenta4 * nIva( dbfIva, ( dbfArt )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArt )->lBnf5 .AND. nCosto <> 0
            ( dbfArt )->pVenta5   := CalPre( if( ( dbfArt )->nBnfSbr5 <= 1, .T., .F. ), nCosto, .T., ( dbfArt )->Benef5, ( dbfArt )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArt )->cCodImp, nil )
            ( dbfArt )->pVtaIva5  := ( dbfArt )->pVenta5 + Round( ( ( dbfArt )->pVenta5 * nIva( dbfIva, ( dbfArt )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArt )->lBnf6 .AND. nCosto <> 0
            ( dbfArt )->pVenta6   := CalPre( if( ( dbfArt )->nBnfSbr6 <= 1, .T., .F. ), nCosto, .T., ( dbfArt )->Benef6, ( dbfArt )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArt )->cCodImp, nil )
            ( dbfArt )->pVtaIva6  := ( dbfArt )->pVenta6 + Round( ( ( dbfArt )->pVenta6 * nIva( dbfIva, ( dbfArt )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end





         if !( dbfArt )->lCodPrp

            if ( dbfFamilia )->( dbSeek( ( dbfArt )->Familia ) )

               if empty( ( dbfArt )->cCodPrp1 ) .AND. !empty( ( dbfFamilia )->cCodPrp1 )
                  ( dbfArt )->cCodPrp1  := ( dbfFamilia )->cCodPrp1
               end

               if empty( ( dbfArt )->cCodPrp2 ) .AND. !empty( ( dbfFamilia )->cCodPrp2 )
                  ( dbfArt )->cCodPrp2  := ( dbfFamilia )->cCodPrp2
               end

            end

            ( dbfArt )->lCodPrp         := .T.

         end





         if empty( ( dbfArt )->Codebar )

            nOrdAnt                     := ( dbfCodebar )->( OrdSetFocus( "cCodArt" ) )

            if ( dbfCodebar )->( dbSeek( ( dbfArt )->Codigo ) )
               ( dbfArt )->CodeBar      := ( dbfCodebar )->cCodBar
            end

             ( dbfCodebar )->( OrdSetFocus( nOrdAnt ) )

         end





         if ( dbfArt )->nFacCnv == 0
            ( dbfArt )->nFacCnv := 1
         end





         if !empty( ( dbfArt )->cImagenWeb )

            ( dbfImg )->( __dbLocate( {|| alltrim( upper( ( dbfArt )->cImagenWeb ) ) == alltrim( upper( ( dbfImg )->cImgArt ) ) } ) )
            if !( dbfImg )->( found() )

               ( dbfImg )->( dbAppend() )
               ( dbfImg )->cCodArt   := ( dbfArt )->Codigo
               ( dbfImg )->cImgArt   := ( dbfArt )->cImagenWeb
               ( dbfImg )->( dbUnLock() )

            end

         end





         if !dbSeekInOrd( ( dbfArt )->Codigo, "lDefImg", dbfImg )

            if dbSeekInOrd( ( dbfArt )->Codigo, "cCodArt", dbfImg )
               ( dbfImg )->lDefImg     := .T.
            end

         end





         if ( dbfArt )->nTarWeb   < 1
            ( dbfArt )->nTarWeb   := 1
         end



         if ( dbfImg )->( dbSeek( ( dbfArt )->Codigo ) ) .AND. empty( ( dbfImg )->nId )

            idImagen             := 0

            while ( dbfImg )->cCodArt == ( dbfArt )->Codigo .AND. !( dbfImg )->( eof() )

               ( dbfImg )->nId   := ++idImagen

               ( dbfImg )->( dbSkip() )

            end

         end

         ( dbfArt )->( dbSkip() )

         SysRefresh()

      end






      ( dbfCodebar )->( dbGoTop() )
      while !( dbfCodebar )->( eof() )

         if !( dbfArt )->( dbSeek( ( dbfCodebar )->cCodArt ) )
            ( dbfCodebar )->( dbDelete() )
         end

         ( dbfCodebar )->( dbSkip() )

         SysRefresh()

      end






      ( dbfCodebar )->( dbGoTop() )
      while !( dbfCodebar )->( eof() )

         if empty( ( dbfCodebar )->cCodBar )
            ( dbfCodebar )->( dbDelete() )
         end

         ( dbfCodebar )->( dbSkip() )

         SysRefresh()

      end






      ( dbfCodebar )->( OrdSetFocus( "cArtBar" ) )

      ( dbfCodebar )->( dbGoTop() )
      while !( dbfCodebar )->( eof() )

         cCod  := ( dbfCodebar )->cCodArt + ( dbfCodebar )->cCodBar

         ( dbfCodebar )->( dbSkip() )

         if ( dbfCodebar )->cCodArt + ( dbfCodebar )->cCodBar == cCod
            ( dbfCodebar )->( dbDelete() )
         end

         SysRefresh()

      end






      ( dbfOfe )->( dbGoTop() )

      while !( dbfOfe )->( eof() )

         if ( dbfOfe )->nTblOfe < 1

            if dbLock( dbfOfe )
               ( dbfOfe )->nTblOfe     := 1
               ( dbfOfe )->( dbUnLock() )
            end

         end

         ( dbfOfe )->( dbSkip() )

         SysRefresh()

      end

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de articulos." )

   end

   ErrorBlock( oBlock )





   ( dbfArt     )->( dbCloseArea() )
   ( dbfArtKit  )->( dbCloseArea() )
   ( dbfParKit  )->( dbCloseArea() )
   ( dbfArtPrv  )->( dbCloseArea() )
   ( dbfFamilia )->( dbCloseArea() )
   ( dbfCodebar )->( dbCloseArea() )
   ( dbfImg     )->( dbCloseArea() )
   ( dbfOfe     )->( dbCloseArea() )
   ( dbfAlbPrvL )->( dbCloseArea() )
   ( dbfFacPrvL )->( dbCloseArea() )
   ( dbfIva     )->( dbCloseArea() )

   if !empty( oNewImp )
      oNewImp:End()
   end

Return nil



Static Function EndDetalle( aTmp, aGet, dbfTmpPrv, oBrw, nMode, oDlg, lOldPrvDef, aTmpArt, lOldRefPrv )

   if empty( aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ] )
      msgStop( "El código de proveedor no puede estar vacío" )
      return nil
   end

   if lExixteDetalle( aTmp, dbfTmpPrv, lOldRefPrv )
      msgStop( "La referencia de proveedor ya existe" )
      aGet[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ]:SetFocus()
      return nil
   end





   if lOldPrvDef <> aTmp[ ( dbfTmpPrv )->( FieldPos( "lDefPrv" ) ) ]
      lSelPrvDef( aTmp, dbfTmpPrv, oBrw, aTmpArt )
   end

   WinGather( aTmp, aGet, dbfTmpPrv, oBrw, nMode )

Return ( oDlg:end( 1 ) )



Static Function lExixteDetalle( aTmp, dbfTmpPrv, lOldRefPrv )

   local nRecno   := ( dbfTmpPrv )->( RecNo() )
   local nOrdTmp  := ( dbfTmpPrv )->( ordSetFocus( "CREFPRV" ) )
   local lExiste  := .F.

   if lOldRefPrv <> aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ]

      ( dbfTmpPrv )->( dbGoTop() )

      if !( dbfTmpPrv )->( dbSeek( aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ] + aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ] ) )
         lExiste := .F.
      else
         lExiste := .T.
      end

   end

   ( dbfTmpPrv )->( ordSetFocus( nOrdTmp ) )
   ( dbfTmpPrv )->( dbGoto( nRecno ) )

Return ( lExiste )



_HB_CLASS TArticuloSenderReciver ; function TArticuloSenderReciver ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TArticuloSenderReciver", iif( .T., { @TSenderReciverItem() }, { @HBObject() } ), @TArticuloSenderReciver() ) ) ;

   _HB_MEMBER { cFileName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileName"}, .F. )

   _HB_MEMBER CreateData(); oClass:AddMethod( "CreateData", @TArticuloSenderReciver_CreateData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RestoreData(); oClass:AddMethod( "RestoreData", @TArticuloSenderReciver_RestoreData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SendData(); oClass:AddMethod( "SendData", @TArticuloSenderReciver_SendData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReciveData(); oClass:AddMethod( "ReciveData", @TArticuloSenderReciver_ReciveData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TArticuloSenderReciver_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CleanRelation( cCodArt); oClass:AddMethod( "CleanRelation", @TArticuloSenderReciver_CleanRelation(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TArticuloSenderReciver ;



static FUNCTION TArticuloSenderReciver_CreateData( ) ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local oBlock
   local oError
   local tmpKit
   local tmpOfe
   local tmpImg
   local tmpArtVta
   local tmpArtPrv
   local tmpArticulo
   local tmpCodebar
   local tmpTipart
   local lSnd           := .F.

   if ::oSender:lServer
      ::cFileName       := "Art" + win_uuidcreatestring() + ".All"
   else
      ::cFileName       := "Art" + win_uuidcreatestring() + "." + RetSufEmp()
   end

   if !OpenFiles( .F. )
      return nil
   end

   ::oSender:SetText( "Seleccionando artículos" )





   mkArticulo( cPatSnd() )
   mkOferta( cPatSnd() )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @tmpArticulo ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PROVART.Dbf" ), ( cCheckArea( "PROVART", @tmpArtPrv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ARTDIV.Dbf" ), ( cCheckArea( "ARTDIV", @tmpArtVta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ARTKIT.Dbf" ), ( cCheckArea( "ARTTIK", @tmpKit ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ArtImg.Dbf" ), ( cCheckArea( "ArtImg", @tmpImg ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ArtImg.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "OFERTA.Dbf" ), ( cCheckArea( "OFERTA", @tmpOfe ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @tmpCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   if !empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( D():Articulos( nView ) )->( lastrec() )
   end

   ( D():Articulos( nView ) )->( dbGoTop() )
   while !( D():Articulos( nView ) )->( eof() )

      if ( D():Articulos( nView ) )->lSndDoc

         ::oSender:SetText( AllTrim( ( D():Articulos( nView ) )->Codigo ) + "; " + AllTrim( ( D():Articulos( nView ) )->Nombre ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVtaIva1, PicOut() ) ) )

         lSnd     := .T.

         dbPass( D():Articulos( nView ), tmpArticulo, .T. )





         if ( dbfCodebar )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )
            while ( dbfCodebar )->cCodArt == ( D():Articulos( nView ) )->Codigo .AND. !( dbfCodebar )->( eof() )
               dbPass( dbfCodebar, tmpCodebar, .T. )
               ( dbfCodebar )->( dbSkip( 1 ) )
            end
         end





         if ( D():ProveedorArticulo( nView ) )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )
            while ( D():ProveedorArticulo( nView ) )->cCodArt == ( D():Articulos( nView ) )->Codigo .AND. !( D():ProveedorArticulo( nView ) )->( eof() )
               dbPass( D():ProveedorArticulo( nView ), tmpArtPrv, .T. )
               ( D():ProveedorArticulo( nView ) )->( dbSkip( 1 ) )
            end
         end





         if ( dbfArtVta )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )
            while ( dbfArtVta )->cCodArt == ( D():Articulos( nView ) )->Codigo .AND. !( dbfArtVta )->( eof() )
               dbPass( dbfArtVta, tmpArtVta, .T. )
               ( dbfArtVta )->( dbSkip( 1 ) )
            end
         end





         if ( dbfArtKit )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )
            while ( dbfArtKit )->cCodKit == ( D():Articulos( nView ) )->Codigo .AND. !( dbfArtKit )->( eof() )
               dbPass( dbfArtKit, tmpKit, .T. )
               ( dbfArtKit )->( dbSkip( 1 ) )
            end
         end





         if ( dbfOfe )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )
            while ( dbfOfe )->cArtOfe == ( D():Articulos( nView ) )->Codigo .AND. !( dbfOfe )->( eof() )
               dbPass( dbfOfe, tmpOfe, .T. )
               ( dbfOfe )->( dbSkip( 1 ) )
            end
         end





         if ( D():ArticuloImagenes( nView ) )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )
            while ( D():ArticuloImagenes( nView ) )->cCodArt == ( D():Articulos( nView ) )->Codigo .AND. !( D():ArticuloImagenes( nView ) )->( eof() )
               dbPass( D():ArticuloImagenes( nView ), tmpImg, .T. )
               ( D():ArticuloImagenes( nView ) )->( dbSkip( 1 ) )
            end
         end

      end

      ( D():Articulos( nView ) )->( dbSkip() )

      if !empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( D():Articulos( nView ) )->( OrdKeyNo() ) )
      end

      SysRefresh()

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( tmpArticulo )->( dbCloseArea() )
   ( tmpArtPrv   )->( dbCloseArea() )
   ( tmpArtVta   )->( dbCloseArea() )
   ( tmpKit      )->( dbCloseArea() )
   ( tmpOfe      )->( dbCloseArea() )
   ( tmpImg      )->( dbCloseArea() )
   ( tmpCodebar  )->( dbCloseArea() )

   CloseFiles()





   if lSnd

      ::oSender:SetText( "Comprimiendo artículos : " + ::cFileName )

      if ::oSender:lZipData( ::cFileName )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay artículos para enviar" )

   end

Return ( Self )



static FUNCTION TArticuloSenderReciver_RestoreData( ) ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local oBlock
   local oError
   local dbfArt

   if ::lSuccesfullSend





      oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Articulo.Dbf" ), ( cCheckArea( "ARTICULO", @dbfArt ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "Articulo.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         while !( dbfArt )->( Eof() )

            if ( dbfArt )->lSndDoc .AND. ( dbfArt )->( dbRLock() )
               ( dbfArt )->lSndDoc   := .F.
               ( dbfArt )->( dbRUnlock() )
            end

            ( dbfArt )->( dbSkip() )

         end

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

      ( dbfArt )->( dbCloseArea() )

   end

Return ( Self )



static FUNCTION TArticuloSenderReciver_SendData( ) ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   if File( cPatOut() + ::cFileName )

      if ::oSender:SendFiles( cPatOut() + ::cFileName, ::cFileName )
         ::lSuccesfullSend := .T.
         ::oSender:SetText( "Ficheros de artículos enviados " + ::cFileName )
      else
         ::oSender:SetText( "ERROR fichero de artículos no enviado" )
      end

   end

Return ( Self )



static FUNCTION TArticuloSenderReciver_ReciveData( ) ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local n
   local aExt

   if ::oSender:lServer
      aExt              := aRetDlgEmp()
   else
      aExt              := { "All" }
   end

   ::oSender:SetText( "Recibiendo artículos" )

   for n := 1 to len( aExt )
      ::oSender:GetFiles( "Art*." + aExt[ n ], cPatIn() )
   next

   ::oSender:SetText( "Artículos recibidos" )

Return ( Self )



static FUNCTION TArticuloSenderReciver_Process( ) ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local m
   local aFiles
   local tmpMov
   local tmpKit
   local tmpOfe
   local tmpCodebar
   local tmpArtPrv
   local tmpArtDiv
   local tmpArticulo
   local oBlock
   local oError
   local nOrdAnt





   aFiles                     := Directory( cPatIn() + "Art*.*" )

   for m := 1 to len( aFiles )

      oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )

      BEGIN SEQUENCE





      if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )







         if lExistTable( cPatSnd() + "Articulo.Dbf", cLocalDriver() )      .AND. lExistTable( cPatSnd() + "ProvArt.Dbf", cLocalDriver() )       .AND. lExistTable( cPatSnd() + "ArtDiv.Dbf", cLocalDriver() )        .AND. lExistTable( cPatSnd() + "ArtKit.Dbf", cLocalDriver() )        .AND. lExistTable( cPatSnd() + "Oferta.Dbf", cLocalDriver() )        .AND. lExistTable( cPatSnd() + "ArtCodebar.Dbf", cLocalDriver() )    .AND. OpenFiles( .F. )

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @tmpArticulo ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PROVART.Dbf" ), ( cCheckArea( "PROVART", @tmpArtPrv ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ARTDIV.Dbf" ), ( cCheckArea( "ARTDIV", @tmpArtDiv ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ARTKIT.Dbf" ), ( cCheckArea( "ARTTIK", @tmpKit ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "OFERTA.Dbf" ), ( cCheckArea( "OFERTA", @tmpOfe ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @tmpCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

            ::oSender:SetText( "Ficheros de articulos descomprimimos correctamente" )
            ::oSender:SetText( "Total de registros recibidos " + alltrim( str( ( tmpArticulo )->( lastrec() ) ) ) )

            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpArticulo )->( lastrec() )
            end

            ( tmpArticulo )->( ordsetfocus( 0 ) )
            ( tmpArticulo )->( dbgotop() )

            while !( tmpArticulo )->( eof() )

               if ( D():Articulos( nView ) )->( dbSeek( ( tmpArticulo )->Codigo ) )

                  if !::oSender:lServer

                     ::CleanRelation( ( tmpArticulo )->Codigo )

                     dbPass( tmpArticulo, D():Articulos( nView ) )

                     if dbLock( D():Articulos( nView ) )
                        ( D():Articulos( nView ) )->lSndDoc := .F.
                        ( D():Articulos( nView ) )->( dbUnLock() )
                     end

                     ::oSender:SetText( "Reemplazado : " + AllTrim( ( D():Articulos( nView ) )->Codigo ) + "; " + AllTrim( ( D():Articulos( nView ) )->Nombre ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVtaIva1, PicOut() ) ) )

                  else

                     ::oSender:SetText( "Desestimado : " + AllTrim( ( D():Articulos( nView ) )->Codigo ) + "; " + AllTrim( ( D():Articulos( nView ) )->Nombre ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVtaIva1, PicOut() ) ) )

                  end

               else

                  ::CleanRelation( ( tmpArticulo )->Codigo )

                  dbPass( tmpArticulo, D():Articulos( nView ), .T. )

                  if dbLock( D():Articulos( nView ) )
                     ( D():Articulos( nView ) )->lSndDoc := .F.
                     ( D():Articulos( nView ) )->( dbUnLock() )
                  end

                  ::oSender:SetText( "Añadido : " + AllTrim( ( D():Articulos( nView ) )->Codigo ) + "; " + AllTrim( ( D():Articulos( nView ) )->Nombre ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( D():Articulos( nView ) )->pVtaIva1, PicOut() ) ) )

               end

               ( tmpArticulo )->( dbSkip() )

               if !empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpArticulo )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpArtPrv )->( LastRec() )
            end

            ( tmpArtPrv )->( ordsetfocus( 0 ) )
            ( tmpArtPrv )->( dbgotop() )
            while !( tmpArtPrv )->( eof() )

               if ( D():ProveedorArticulo( nView ) )->( dbSeek( ( tmpArtPrv )->cCodArt ) )
                  if !::oSender:lServer
                     dbPass( tmpArtPrv, D():ProveedorArticulo( nView ) )
                  end
               else
                  dbPass( tmpArtPrv, D():ProveedorArticulo( nView ), .T. )
               end

               ( tmpArtPrv )->( dbSkip() )

               if !empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( (tmpArtPrv)->( recno() ) )
               end

               SysRefresh()

            end

            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpArtDiv )->( lastrec() )
            end

            ( tmpArtDiv )->( ordsetfocus( 0 ) )
            ( tmpArtDiv )->( dbgotop() )
            while !( tmpArtDiv )->( eof() )

               if ( dbfArtVta )->( dbSeek( ( tmpArtDiv )->cCodArt + ( tmpArtDiv )->cCodPr1 + ( tmpArtDiv )->cCodPr2 + ( tmpArtDiv )->cVAlpR1 + ( tmpArtDiv )->cValPr2 ) )
                  if !::oSender:lServer
                     dbPass( tmpArtDiv, dbfArtVta )
                  end
               else
                  dbPass( tmpArtDiv, dbfArtVta, .T. )
               end

               ( tmpArtDiv )->( dbSkip() )

               if !empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpArtDiv )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:Set( ( tmpArtDiv )->( lastrec() ) )
            end





            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := (tmpKit)->( lastrec() )
            end

            ( tmpKit )->( ordsetfocus( 0 ) )
            ( tmpKit )->( dbgotop() )

            nOrdAnt  := ( dbfArtKit )->( OrdSetFocus( "cCodRef" ) )

            while !( tmpKit )->( eof() )

               if ( dbfArtKit )->( dbSeek( ( tmpKit )->CCODKIT + ( tmpKit )->cRefKit ) )
                  if !::oSender:lServer
                     dbPass( tmpKit, dbfArtKit )
                  end
               else

                  dbPass( tmpKit, dbfArtKit, .T. )

               end

               ( tmpKit )->( dbSkip() )

               if !empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpKit )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            ( dbfArtKit )->( OrdSetFocus( nOrdAnt ) )





            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpOfe )->( lastrec() )
            end

            ( tmpOfe )->( ordsetfocus( 0 ) )
            ( tmpOfe )->( dbgotop() )
            while !( tmpOfe )->( eof() )

               if ( dbfOfe )->( dbSeek( ( tmpOfe )->cArtOfe ) )
                  if !::oSender:lServer
                     dbPass( tmpOfe, dbfOfe )
                  end
               else
                  dbPass( tmpOfe, dbfOfe, .T. )
               end

               ( tmpOfe )->( dbSkip() )

               if !empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpOfe )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:Set( ( tmpOfe )->( lastrec() ) )
            end





            ( dbfCodebar )->( OrdSetFocus( "cArtBar" ) )

            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpCodebar )->( lastrec() )
            end

            ( tmpCodebar )->( ordsetfocus( 0 ) )
            ( tmpCodebar )->( dbgotop() )
            while !( tmpCodebar )->( eof() )

               if ( dbfCodebar )->( dbSeek( ( tmpCodebar )->cCodArt + ( tmpCodebar )->cCodBar ) ) .AND. !::oSender:lServer
                  dbPass( tmpCodebar, dbfCodebar )
               else
                  dbPass( tmpCodebar, dbfCodebar, .T. )
               end

               ( tmpCodebar )->( dbSkip() )

               if !empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpCodebar )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            ( dbfCodebar )->( OrdSetFocus( "cCodArt" ) )

            if !empty( ::oSender:oMtr )
               ::oSender:oMtr:Set( ( tmpCodebar )->( lastrec() ) )
            end

            ( tmpArticulo )->( dbCloseArea() )
            ( tmpCodebar  )->( dbCloseArea() )
            ( tmpArtPrv   )->( dbCloseArea() )
            ( tmpMov      )->( dbCloseArea() )
            ( tmpArtDiv   )->( dbCloseArea() )
            ( tmpKit      )->( dbCloseArea() )
            ( tmpOfe      )->( dbCloseArea() )

            CloseFiles()

            ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

         else

            ::oSender:SetText( "Faltan ficheros" )

            if !lExistTable( cPatSnd() + "Articulo.Dbf"   )
               ::oSender:SetText( "Falta" + cPatSnd() + "Articulo.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ProvArt.Dbf"    )
               ::oSender:SetText( "Falta" + cPatSnd() + "ProvArt.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ArtDiv.Dbf"     )
               ::oSender:SetText( "Falta" + cPatSnd() + "ArtDiv.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ArtKit.Dbf"     )
               ::oSender:SetText( "Falta" + cPatSnd() + "ArtKit.Dbf" )
            end

            if !lExistTable( cPatSnd() + "Oferta.Dbf"     )
               ::oSender:SetText( "Falta" + cPatSnd() + "Oferta.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ArtCodebar.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "ArtCodebar.Dbf" )
            end

         end

      else

         ::oSender:SetText( "Error en el fichero comprimido" )

      end

      RECOVER USING oError

         ( tmpArticulo )->( dbCloseArea() )
         ( tmpCodebar  )->( dbCloseArea() )
         ( tmpArtPrv   )->( dbCloseArea() )
         ( tmpMov      )->( dbCloseArea() )
         ( tmpArtDiv   )->( dbCloseArea() )
         ( tmpKit      )->( dbCloseArea() )
         ( tmpOfe      )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next

Return ( Self )



static FUNCTION TArticuloSenderReciver_CleanRelation( cCodArt ) ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   while ( D():ProveedorArticulo( nView ) )->( dbSeek( cCodArt ) )
      dbDel( D():ProveedorArticulo( nView ) )
   end

   SysRefresh()

   while ( dbfArtVta )->( dbSeek( cCodArt ) )
      dbDel( dbfArtVta )
   end

   SysRefresh()

   while ( dbfArtKit )->( dbSeek( cCodArt ) )
      dbDel( dbfArtKit )
   end

   SysRefresh()

   while ( dbfOfe )->( dbSeek( cCodArt ) )
      dbDel( dbfOfe )
   end

   SysRefresh()

   while ( dbfCodeBar )->( dbSeek( cCodArt ) )
      dbDel( dbfCodeBar )
   end

   SysRefresh()

Return ( Self )



Static Function EdtRecMenu( aTmp, aGet, oSay, oDlg, oFld, aBar, cSay, nMode )

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra para el artículo", .F.,, {|oMenuItem|( oDetCamposExtra:Play( Space(1) ) )},, "gc_form_plus2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&2. Informe de artículo en escandallo", "Muestra el informe del artículo en escandallo", .F.,, {|oMenuItem|( BrwVtaComArt( ( dbfTmpKit )->cRefKit, ( dbfTmpKit )->cDesKit, dbfDiv, D():TiposIva( nView ), dbfAlmT, D():Articulos( nView ) ) )},, "info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&3. Ver comando", "Muestra el informe del artículo en escandallo", .F.,, {|oMenuItem|( debugWeb( aTmp ) )},, "info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&4. Información enlace web", "Muestra el informe del artículo en la web", .F.,, {|oMenuItem|( infoWeb( aTmp ) )},, "info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

   if !empty( oActiveX )
      oActiveX:DocumentHTML      := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "MDESTEC" ) ) ]
      oActivex:LocalizationFile  := FullCurDir() + "Spanish.xml"
      oActivex:BorderStyle       := 0
   end

Return ( oMenu )






Static Function lSelPrvDef( aTmp, dbfTmpPrv, oBrw, aTmpArt )

   local nRec                 := ( dbfTmpPrv )->( RecNo() )

   ( dbfTmpPrv )->( dbGoTop() )

   while !( dbfTmpPrv )->( eof() )
      ( dbfTmpPrv )->lDefPrv  := .F.
      ( dbfTmpPrv )->( dbSkip() )
   end

   ( dbfTmpPrv )->( dbGoto( nRec ) )

   aTmpArt[ ( D():Articulos( nView ) )->( fieldPos( "CPRVHAB" ) ) ]  := aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ]

   oBrw:Refresh()

Return .T.




Static Function DelPrv( aTmp, oBrwPrv, dbfTmpPrv )



   if !( dbfTmpPrv )->lDefPrv

      dbDelRec( oBrwPrv, dbfTmpPrv )

   else

      if dbDelRec( oBrwPrv, dbfTmpPrv )




         ( dbfTmpPrv )->( dbGoTop() )

         if !( dbfTmpPrv )->( Eof() )

            ( dbfTmpPrv )->lDefPrv  := .T.

            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cPrvHab" ) ) ]       := ( dbfTmpPrv )->cCodPrv

         else

            aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cPrvHab" ) ) ]       := Space( 12 )

         end

      end

   end

   oBrwPrv:Refresh()

Return ( .T. )



Function lEscandallo( uTmpArticulo )

   if Valtype( uTmpArticulo ) == "C"
      Return ( ( uTmpArticulo )->lKitArt )
   else
      Return ( uTmpArticulo[ ( D():Articulos( nView ) )->( Fieldpos( "lKitArt" ) ) ] )
   end

Return ( .F. )



Static Function lValidUndMedicion( aTmp, aGet )

   if oUndMedicion:oDbf:SeekInOrd( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ], "CCODMED" )

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "CUNIDAD" ) ) ]:oHelpText:cText( oUndMedicion:oDbf:cNombre )



      if oUndMedicion:oDbf:nDimension >= 1

         aGet[ ( D():Articulos( nView ) )->( fieldpos( "NLNGART" ) ) ]:Show()
         aGet[ ( D():Articulos( nView ) )->( fieldpos( "NLNGART" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )

      end



      if oUndMedicion:oDbf:nDimension >= 2

         aGet[ ( D():Articulos( nView ) )->( fieldpos( "NALTART" ) ) ]:Show()
         aGet[ ( D():Articulos( nView ) )->( fieldpos( "NALTART" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )

      end



      if oUndMedicion:oDbf:nDimension >= 3

         aGet[ ( D():Articulos( nView ) )->( fieldpos( "NANCART" ) ) ]:Show()
         aGet[ ( D():Articulos( nView ) )->( fieldpos( "NANCART" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )

      end

   end

Return .T.



Static Function CargaProveedor( oGet, oSay, oValorPunto, dbfPrv )

   local lCarga   := .T.

   if cProvee( oGet, dbfProv, oSay[ 4 ] )
      oValorPunto:cText( ( dbfPrv )->nValPunt )
   else
      lCarga      := .F.
   end

Return ( lCarga )



Static Function ExpFamilia( cCodFam, oSayFamilia, aGet )

   if empty( cCodFam )
      Return .T.
   end

   if dbSeekInOrd( cCodFam, "cCodFam", D():Familias( nView ) )

      oSayFamilia:cText( ( D():Familias( nView ) )->cNomFam )

      if cCodFam <> cCodigoFamilia



         if ( !empty( ( D():Familias( nView ) )->cCodPrp1 ) .AND. aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:VarGet() <> ( D():Familias( nView ) )->cCodPrp1 ) .OR. ( !empty( ( D():Familias( nView ) )->cCodPrp2 ) .AND. aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:VarGet() <> ( D():Familias( nView ) )->cCodPrp2 ) .OR. ( !empty( ( D():Familias( nView ) )->cCodFra  ) .AND. aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra"  ) ) ]:VarGet() <> ( D():Familias( nView ) )->cCodFra  )

            if ApoloMsgNoYes( "¿ Desea importar las propiedades y frases publicitarias de la familia ?" )

               aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:cText( ( D():Familias( nView ) )->cCodPrp1 )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ]:lValid()

               aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:cText( ( D():Familias( nView ) )->cCodPrp2 )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ]:lValid()

               aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ]:cText( ( D():Familias( nView ) )->cCodFra )
               aGet[ ( D():Articulos( nView ) )->( fieldpos( "cCodFra" ) ) ]:lValid()

            end

         end

      else

         cCodigoFamilia := cCodFam

      end

   else

      msgStop( "Familia no encontrada" )

      Return .F.

   end

Return .T.




_HB_CLASS TArticuloLabelGenerator ; function TArticuloLabelGenerator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TArticuloLabelGenerator", iif( .F., { }, { @HBObject() } ), @TArticuloLabelGenerator() ) ) ;

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )
   _HB_MEMBER { oFld } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFld"}, .F. )

   _HB_MEMBER { oCriterio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCriterio"}, .F. )
   _HB_MEMBER { cCriterio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCriterio"}, .F. )
   _HB_MEMBER { aCriterio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCriterio"}, .F. )

   _HB_MEMBER { oFamiliaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFamiliaInicio"}, .F. )
   _HB_MEMBER { cFamiliaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFamiliaInicio"}, .F. )

   _HB_MEMBER { oFamiliaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFamiliaFin"}, .F. )
   _HB_MEMBER { cFamiliaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFamiliaFin"}, .F. )

   _HB_MEMBER { oFechaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFechaInicio"}, .F. )
   _HB_MEMBER { dFechaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFechaInicio"}, .F. )

   _HB_MEMBER { oFechaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFechaFin"}, .F. )
   _HB_MEMBER { dFechaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFechaFin"}, .F. )

   _HB_MEMBER { oInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInicio"}, .F. )
   _HB_MEMBER { oFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFin"}, .F. )

   _HB_MEMBER { oFormatoLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFormatoLabel"}, .F. )
   _HB_MEMBER { cFormatoLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFormatoLabel"}, .F. )

   _HB_MEMBER { nFilaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFilaInicio"}, .F. )
   _HB_MEMBER { nColumnaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nColumnaInicio"}, .F. )

   _HB_MEMBER { cFileTmpLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileTmpLabel"}, .F. )
   _HB_MEMBER { cAreaTmpLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAreaTmpLabel"}, .F. )

   _HB_MEMBER { oBrwLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwLabel"}, .F. )

   _HB_MEMBER { nCantidadLabels } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCantidadLabels"}, .F. )
   _HB_MEMBER { nUnidadesLabels } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nUnidadesLabels"}, .F. )

   _HB_MEMBER { oAlmacen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlmacen"}, .F. )
   _HB_MEMBER { cAlmacen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAlmacen"}, .F. )

   _HB_MEMBER { oMtrLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMtrLabel"}, .F. )
   _HB_MEMBER { nMtrLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMtrLabel"}, .F. )

   _HB_MEMBER { oFilter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFilter"}, .F. )

   _HB_MEMBER { hBmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hBmp"}, .F. )

   _HB_MEMBER { oBtnListado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnListado"}, .F. )
   _HB_MEMBER { oBtnFilter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnFilter"}, .F. )
   _HB_MEMBER { oBtnSiguiente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnSiguiente"}, .F. )
   _HB_MEMBER { oBtnAnterior } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnAnterior"}, .F. )
   _HB_MEMBER { oBtnCancel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnCancel"}, .F. )

   _HB_MEMBER { aSearch } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSearch"}, .F. )

   _HB_MEMBER { nRecno } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRecno"}, .F. )

   _HB_MEMBER { aSelected } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSelected"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TArticuloLabelGenerator_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Dialog(); oClass:AddMethod( "Dialog", @TArticuloLabelGenerator_Dialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER StartSelectPropertiesLabels(); oClass:AddMethod( "StartSelectPropertiesLabels", @TArticuloLabelGenerator_StartSelectPropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @TArticuloLabelGenerator_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER BotonAnterior(); oClass:AddMethod( "BotonAnterior", @TArticuloLabelGenerator_BotonAnterior(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER BotonSiguiente(); oClass:AddMethod( "BotonSiguiente", @TArticuloLabelGenerator_BotonSiguiente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PutLabel(); oClass:AddMethod( "PutLabel", @TArticuloLabelGenerator_PutLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectAllLabels(); oClass:AddMethod( "SelectAllLabels", @TArticuloLabelGenerator_SelectAllLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SelectAllLabelsDbf(); oClass:AddMethod( "SelectAllLabelsDbf", @TArticuloLabelGenerator_SelectAllLabelsDbf(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SelectAllLabelsADS(); oClass:AddMethod( "SelectAllLabelsADS", @TArticuloLabelGenerator_SelectAllLabelsADS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectPropertiesLabels(); oClass:AddMethod( "SelectPropertiesLabels", @TArticuloLabelGenerator_SelectPropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadPropertiesLabels(); oClass:AddMethod( "LoadPropertiesLabels", @TArticuloLabelGenerator_LoadPropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SavePropertiesLabels(); oClass:AddMethod( "SavePropertiesLabels", @TArticuloLabelGenerator_SavePropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectCriterioLabels(); oClass:AddMethod( "SelectCriterioLabels", @TArticuloLabelGenerator_SelectCriterioLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER putStockLabels(); oClass:AddMethod( "putStockLabels", @TArticuloLabelGenerator_putStockLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER selectLabelSelecction(); oClass:AddMethod( "selectLabelSelecction", @TArticuloLabelGenerator_selectLabelSelecction(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cleanPropertiesLabels(); oClass:AddMethod( "cleanPropertiesLabels", @TArticuloLabelGenerator_cleanPropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddLabel(); oClass:AddMethod( "AddLabel", @TArticuloLabelGenerator_AddLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER DelLabel(); oClass:AddMethod( "DelLabel", @TArticuloLabelGenerator_DelLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER EditLabel(); oClass:AddMethod( "EditLabel", @TArticuloLabelGenerator_EditLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ChangeCriterio(); oClass:AddMethod( "ChangeCriterio", @TArticuloLabelGenerator_ChangeCriterio(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPrintLabels(); oClass:AddMethod( "lPrintLabels", @TArticuloLabelGenerator_lPrintLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InitLabel( oLabel); oClass:AddMethod( "InitLabel", @TArticuloLabelGenerator_InitLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lCreateTemporal(); oClass:AddMethod( "lCreateTemporal", @TArticuloLabelGenerator_lCreateTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER PrepareTemporal(); oClass:AddMethod( "PrepareTemporal", @TArticuloLabelGenerator_PrepareTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER DestroyTemporal(); oClass:AddMethod( "DestroyTemporal", @TArticuloLabelGenerator_DestroyTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectColumn( oCombo); oClass:AddMethod( "SelectColumn", @TArticuloLabelGenerator_SelectColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TArticuloLabelGenerator ;



static FUNCTION TArticuloLabelGenerator_New( aSelected ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   ::aSelected          := aSelected

   ::cCriterio          := "Ningún criterio"
   ::aCriterio          := { "Ningún criterio", "Todos los registros", "Familia", "Fecha modificación" }

   ::nRecno             := ( D():Articulos( nView ) )->( recno() )
   ::cFamiliaInicio     := ( D():Articulos( nView ) )->Familia
   ::cFamiliaFin        := ( D():Articulos( nView ) )->Familia

   ::dFechaInicio       := Ctod( "01/" + Str( Month( Date() ), 2 ) + "/" + Str( Year( Date() ), 4 ) )
   ::dFechaFin          := GetSysDate()

   ::nMtrLabel          := 0

   ::nFilaInicio        := 1
   ::nColumnaInicio     := 1

   ::nCantidadLabels    := 1
   ::nUnidadesLabels    := 1

   ::aSearch            := { "Código", "Nombre" }

   ::cFormatoLabel      := GetPvProfString( "Etiquetas", "Articulo", Space( 3 ), cIniEmpresa() )
   if len( ::cFormatoLabel ) < 3
      ::cFormatoLabel   := Space( 3 )
   end

Return ( Self )



static FUNCTION TArticuloLabelGenerator_Dialog( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local oGetOrd
   local cGetOrd     := Space( 100 )
    local oCbxOrd
   local cCbxOrd     := "Código"
   local aCbxOrd     := { "Código", "Nombre" }

   ::oDlg = TDialog():New(,,,,, "SelectLabels_0",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )





      ::oFld := TPages():Redefine( 10, ::oDlg, {"SelectLabels_3", "SelectLabels_2"},,,, )








      TBitmap():ReDefine( 500, "gc_portable_barcode_scanner_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )



      ::oCriterio := TComboBox():ReDefine( 90, { | u | If( PCount()==0, ::cCriterio, ::cCriterio:= u ) }, ::aCriterio, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oCriterio",,,,,,, )

      ::oCriterio:bChange        := {|| ::ChangeCriterio() }





      ::oFamiliaInicio := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cFamiliaInicio, ::cFamiliaInicio:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 101 )

      ::oFamiliaInicio:bValid    := {|| cFamilia( ::oFamiliaInicio, D():Familias( nView ), ::oFamiliaInicio:oHelpText ), .T. }
      ::oFamiliaInicio:bHelp     := {|| BrwFamilia( ::oFamiliaInicio, ::oFamiliaInicio:oHelpText ) }



      ::oInicio := TSay():ReDefine( 102,, ::oFld:aDialogs[1],,,, .F.,, .F., .F., )





      ::oFamiliaFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cFamiliaFin, ::cFamiliaFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 111 )

      ::oFamiliaFin:bValid       := {|| cFamilia( ::oFamiliaFin, D():Familias( nView ), ::oFamiliaFin:oHelpText ), .T. }
      ::oFamiliaFin:bHelp        := {|| BrwFamilia( ::oFamiliaFin, ::oFamiliaFin:oHelpText ) }



      ::oFin := TSay():ReDefine( 112,, ::oFld:aDialogs[1],,,, .F.,, .F., .F., )




      ::oFechaInicio := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::dFechaInicio, ::dFechaInicio:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      ::oFechaFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::dFechaFin, ::dFechaFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      ::oFormatoLabel := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cFormatoLabel, ::cFormatoLabel:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 161 )

         ::oFormatoLabel:bValid  := {|| cDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, dbfDoc, "AR" ) }
         ::oFormatoLabel:bHelp   := {|| BrwDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, "AR" ) }

      TBtnBmp():ReDefine( 220, "gc_document_text_pencil_12",,,,,{|| EdtDocumento( ::cFormatoLabel ) }, ::oFld:aDialogs[1], .F., , .F., "Modificar formato de etiquetas" )





      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::nFilaInicio, ::nFilaInicio:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::nColumnaInicio, ::nColumnaInicio:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      TRadMenu():Redefine( { | u | If( PCount()==0, ::nCantidadLabels, ::nCantidadLabels:= u ) }, ::oFld:aDialogs[1],, { 200, 201 },,,,, .F., {||     ( empty( ::aSelected ) )}, )








      TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::nUnidadesLabels, ::nUnidadesLabels:= u ) }, ::oFld:aDialogs[1],, "99999",,,,,,, .F., {||     ( ::nCantidadLabels == 1 )},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )







      ::oAlmacen := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, ::cAlmacen, ::cAlmacen:= u ) }, ::oFld:aDialogs[1],, "@!",,,,,,, .F., {||     ( ::nCantidadLabels == 2 )},, .F., .F.,,,,,, nil, "LUPA",, 231 )

         ::oAlmacen:bValid    := { || cAlmacen( ::oAlmacen, , ::oAlmacen:oHelpText ) }
         ::oAlmacen:bHelp     := { || BrwAlmacen( ::oAlmacen, ::oAlmacen:oHelpText ) }







      oGetOrd := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cGetOrd, cGetOrd:= u ) }, ::oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "FIND",, )

      oGetOrd:bChange   := {| nKey, nFlags, oGet | AutoSeek( nKey, nFlags, oGet, ::oBrwLabel, D():Articulos( nView ) ) }
      oGetOrd:bValid    := {|| ( D():Articulos( nView ) )->( OrdScope( 0, nil ) ), ( D():Articulos( nView ) )->( OrdScope( 1, nil ) ), ::oBrwLabel:Refresh(), .T. }





      oCbxOrd := TComboBox():ReDefine( 210, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, ::oFld:aDialogs[2],,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oCbxOrd:bChange   := {|| ::SelectColumn( oCbxOrd ) }




      TButton():ReDefine( 100, {||( ::PutLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 110, {||( ::SelectAllLabels( .T. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 120, {||( ::SelectAllLabels( .F. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 220, {||( ::SelectPropertiesLabels( .F. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 130, {||( ::AddLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 140, {||( ::DelLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 150, {||( ::EditLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 160, {||( WinEdtRec( ::oBrwLabel, bEdit, D():Articulos( nView ) ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 165, {||( WinZooRec( ::oBrwLabel, bEdit, D():Articulos( nView ) ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )

      ::oBrwLabel                 := IXBrowse():New( ::oFld:aDialogs[2] )

      ::oBrwLabel:nMarqueeStyle   := 5
      ::oBrwLabel:nColSel         := 2

      ::oBrwLabel:lHScroll        := .F.
      ::oBrwLabel:cAlias          := D():Articulos( nView )

      ::oBrwLabel:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwLabel:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
      ::oBrwLabel:bLDblClick      := {|| ::PutLabel() }

      ::oBrwLabel:CreateFromResource( 180 )

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "Sl. Seleccionada"
         :bEditValue       := {|| ( D():Articulos( nView ) )->lLabel }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( D():Articulos( nView ) )->Codigo }
         :nWidth           := 80
         :cSortOrder       := "Codigo"
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "Nombre"
         :bEditValue       := {|| ( D():Articulos( nView ) )->Nombre }
         :nWidth           := 280
         :cSortOrder       := "Nombre"
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "N. etiquetas"
         :bEditValue       := {|| ( D():Articulos( nView ) )->nLabel }
         :cEditPicture     := "@E 99,999"
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nEditType        := 1
         :bOnPostEdit      := {|o,x| if( dbDialogLock( D():Articulos( nView ) ), ( ( D():Articulos( nView ) )->nLabel := x, ( D():Articulos( nView ) )->( dbUnlock() ) ), ) }
      end






      ::oMtrLabel := TMeter():ReDefine( 190, { | u | If( PCount()==0, ::nMtrLabel, ::nMtrLabel:= u ) }, ( D():Articulos( nView ) )->( lastrec() ), ::oFld:aDialogs[2], .F.,, "", .F.,,,, )

      ::oMtrLabel:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      ::oMtrLabel:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      ::oMtrLabel:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )








      ::oBtnListado := TButton():ReDefine( 40, {||( nil )}, ::oDlg,,, .F.,,,, .F. )




      ::oBtnAnterior := TButton():ReDefine( 20, {||( ::BotonAnterior() )}, ::oDlg,,, .F.,,,, .F. )




      ::oBtnSiguiente := TButton():ReDefine( 30, {||( ::BotonSiguiente() )}, ::oDlg,,, .F.,,,, .F. )




      ::oBtnCancel := TButton():ReDefine( 2, {||( ::oDlg:End() )}, ::oDlg,,, .F.,,,, .F. )

   ::oDlg:bStart  := {|| ::oBtnAnterior:Hide(), ::ChangeCriterio(), ::oFormatoLabel:lValid() }

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   ::End()

Return ( Self )



static FUNCTION TArticuloLabelGenerator_BotonAnterior( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   ::oFld:GoPrev()

   ::oBtnAnterior:Hide()

   SetWindowText( ::oBtnSiguiente:hWnd, "Siguien&te >" )

Return ( Self )



static FUNCTION TArticuloLabelGenerator_BotonSiguiente( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   do case
      case ::oFld:nOption == 1

         if empty( ::cFormatoLabel )

            MsgStop( "Debe cumplimentar un formato de etiquetas" )

            Return ( Self )

         endif

         if !empty( ::aSelected )

            ::lPrintLabels()

            RETURN ( Self )

         end

         ::oFld:GoNext()

         ::oBtnAnterior:Show()

         ::SelectCriterioLabels()

         SetWindowText( ::oBtnSiguiente:hWnd, "&Terminar" )

      case ::oFld:nOption == 2

         if ::lPrintLabels()

            SetWindowText( ::oBtnCancel:hWnd, "&Cerrar" )

         end

   end

Return ( Self )



static FUNCTION TArticuloLabelGenerator_End( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   WritePProString( "Etiquetas", "Articulo", ::cFormatoLabel, cIniEmpresa() )

   ( D():Articulos( nView ) )->( dbgoto( ::nRecno ) )

Return ( Self )



static FUNCTION TArticuloLabelGenerator_PutLabel( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if dbLock( D():Articulos( nView ) )
      ( D():Articulos( nView ) )->lLabel := !( D():Articulos( nView ) )->lLabel
      ( D():Articulos( nView ) )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TArticuloLabelGenerator_SelectAllLabels( lSelect ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

    CursorWait()

   ::oDlg:Disable()

   if lAIS()
      ::SelectAllLabelsADS( lSelect )
   else
      ::SelectAllLabelsDbf( lSelect )
   end

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

   ::oDlg:Enable()

   CursorArrow()

Return ( Self )



static FUNCTION TArticuloLabelGenerator_SelectAllLabelsDbf( lSelect ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local n        := 0
   local nRecno   := ( D():Articulos( nView ) )->( Recno() )

   ( D():Articulos( nView ) )->( dbGoTop() )
   while !( D():Articulos( nView ) )->( eof() )

      if ( D():Articulos( nView ) )->lLabel <> lSelect

         if dbLock( D():Articulos( nView ) )
            ( D():Articulos( nView ) )->lLabel := lSelect
            ( D():Articulos( nView ) )->( dbUnLock() )
         end

      end

      ( D():Articulos( nView ) )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ( D():Articulos( nView ) )->( dbGoTo( nRecno ) )

Return ( Self )



static FUNCTION TArticuloLabelGenerator_SelectAllLabelsADS( lSelect ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator


   TDataCenter():ExecuteSqlStatement(  "UPDATE " + cPatEmp() + "Articulo " +  "SET lLabel = " + if( lSelect, "True", "False" ) )

Return ( Self )



static FUNCTION TArticuloLabelGenerator_SelectCriterioLabels( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

    local n            := 0

    CursorWait()

   ::oDlg:Disable()

   ( D():Articulos( nView ) )->( dbGoTop() )
   while !( D():Articulos( nView ) )->( eof() )

      ::cleanPropertiesLabels()

      ::putStockLabels()

      ::selectLabelSelecction()

      ( D():Articulos( nView ) )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

   ( D():Articulos( nView ) )->( dbGoTop() )

   ::oDlg:Enable()

    CursorArrow()

Return ( Self )






static FUNCTION TArticuloLabelGenerator_cleanPropertiesLabels( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   while ( dbfArtLbl )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) ) .AND. !( dbfArtLbl )->( eof() )
      if dbLock( dbfArtLbl )
         ( dbfArtLbl )->( dbDelete() )
         ( dbfArtLbl )->( dbUnLock() )
      end
   end

Return ( Self )



static FUNCTION TArticuloLabelGenerator_putStockLabels( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local h
   local aStock
   local nStock                              := 0

   if ::nCantidadLabels == 1


      if ( ( D():Articulos( nView ) )->nLabel <> ::nUnidadesLabels ) .AND.  ( D():Articulos( nView ) )->( dbrlock() )
         ( D():Articulos( nView ) )->nLabel  := ::nUnidadesLabels
         ( D():Articulos( nView ) )->( dbunlock() )
      end

      Return ( Self )

   end





   if !empty( ( D():Articulos( nView ) )->cCodPrp1 ) .OR. !empty( ( D():Articulos( nView ) )->cCodPrp2 )

      aStock                        := StocksModel():aStockArticulo( ( D():Articulos( nView ) )->Codigo, ::cAlmacen )

      if len( aStock ) > 0

         for each h in aStock

            if dbAppe( dbfArtLbl )
               ( dbfArtLbl )->cCodArt     := hGet( h, "articulo" )
               ( dbfArtLbl )->cCodPr1     := hGet( h, "propiedad1" )
               ( dbfArtLbl )->cCodPr2     := hGet( h, "propiedad2" )
               ( dbfArtLbl )->cValPr1     := hGet( h, "valor1" )
               ( dbfArtLbl )->cValPr2     := hGet( h, "valor2" )
               ( dbfArtLbl )->nUndLbl     := hGet( h, "unidades" )
               ( dbfArtLbl )->( dbUnLock() )
            end

            nStock                        += hGet( h, "unidades" )

         next

      end

   else

      nStock                           := StocksModel():nGlobalStockArticulo( ( D():Articulos( nView ) )->Codigo )

   end

   nStock                              := max( nStock, 0 )


   if ( D():Articulos( nView ) )->nLabel <> nStock .AND.  ( D():Articulos( nView ) )->( dbRLock() )
      ( D():Articulos( nView ) )->nLabel  := nStock
      ( D():Articulos( nView ) )->( dbUnLock() )
   end

Return ( Self )



static FUNCTION TArticuloLabelGenerator_selectLabelSelecction( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local lLabel   := .F.

   do case
      case ::oCriterio:nAt == 1

         lLabel   := .F.

      case ::oCriterio:nAt == 2

         lLabel   := .T.

      case ::oCriterio:nAt == 3 .AND. ( D():Articulos( nView ) )->Familia >= ::cFamiliaInicio .AND. ( D():Articulos( nView ) )->Familia <= ::cFamiliaFin

         lLabel   := .T.

      case ::oCriterio:nAt == 4 .AND. ( D():Articulos( nView ) )->LastChg >= ::dFechaInicio .AND. ( D():Articulos( nView ) )->LastChg <= ::dFechaFin

         lLabel   := .T.

      otherwise
   end


   if ( D():Articulos( nView ) )->lLabel <> lLabel .AND.  ( D():Articulos( nView ) )->( dbRLock() )
      ( D():Articulos( nView ) )->lLabel    := lLabel
      ( D():Articulos( nView ) )->( dbUnLock() )
   end

Return ( Self )



static FUNCTION TArticuloLabelGenerator_SelectPropertiesLabels( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local n
   local oDlg
   local oGetUnidades
   local nGetUnidades   := 0

   if empty( ( D():Articulos( nView ) )->cCodPrp1 ) .AND. empty( ( D():Articulos( nView ) )->cCodPrp2 )
      msgStop( "Este artículo no tiene propiedades." )
      Return .F.
   end

   oDlg = TDialog():New(,,,,, "Propiedades",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

      BrowseProperties():newInstance( 100, oDlg, nView )






      oGetUnidades := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, nGetUnidades, nGetUnidades:= u ) }, oDlg,, masUnd(),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      BrowseProperties():getInstance():setBindingUnidades( oGetUnidades )




      TButton():ReDefine( 500, {||( BrowseProperties():getInstance():cleanPropertiesUnits() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 1, {||( ::SavePropertiesLabels( oDlg ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart := {|| ::StartSelectPropertiesLabels() }

      oDlg:AddFastKey( 116, {|| ::SavePropertiesLabels( oDlg ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( Self )



static FUNCTION TArticuloLabelGenerator_StartSelectPropertiesLabels( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   BrowseProperties():getInstance():buildPropertiesTable( ( D():Articulos( nView ) )->Codigo, ( D():Articulos( nView ) )->cCodPrp1, ( D():Articulos( nView ) )->cCodPrp2 )

   ::LoadPropertiesLabels()

   BrowseProperties():getInstance():nTotalProperties()

Return ( Self )



static FUNCTION TArticuloLabelGenerator_SavePropertiesLabels( oDlg ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local o
   local a
   local n  := 0

   while ( dbfArtLbl )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) ) .AND. !( dbfArtLbl )->( eof() )
      if dbLock( dbfArtLbl )
         ( dbfArtLbl )->( dbDelete() )
         ( dbfArtLbl )->( dbUnLock() )
      end
   end

   for each a in ( BrowseProperties():getInstance():aPropertiesTable )

      for each o in ( a )

         if IsNum( o:Value ) .AND. ( o:Value <> 0 )

            if dbAppe( dbfArtLbl )
               ( dbfArtLbl )->cCodArt  := o:cCodigo
               ( dbfArtLbl )->cCodPr1  := o:cCodigoPropiedad1
               ( dbfArtLbl )->cCodPr2  := o:cCodigoPropiedad2
               ( dbfArtLbl )->cValPr1  := o:cValorPropiedad1
               ( dbfArtLbl )->cValPr2  := o:cValorPropiedad2
               ( dbfArtLbl )->nUndLbl  := o:Value
               ( dbfArtLbl )->( dbUnLock() )
            end

            n  += o:Value

         end

      next

   next

   if dbLock( D():Articulos( nView ) )
      ( D():Articulos( nView ) )->lLabel := .T.
      ( D():Articulos( nView ) )->nLabel := n
      ( D():Articulos( nView ) )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

   oDlg:end( 1 )

Return ( .T. )



static FUNCTION TArticuloLabelGenerator_LoadPropertiesLabels( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if ( dbfArtLbl )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )

      while ( dbfArtLbl )->cCodArt == ( D():Articulos( nView ) )->Codigo .AND. !( dbfArtLbl )->( eof() )

         BrowseProperties():getInstance():setPropertiesUnits( ( dbfArtLbl )->cCodArt, ( dbfArtLbl )->cCodPr1, ( dbfArtLbl )->cCodPr2, ( dbfArtLbl )->cValPr1, ( dbfArtLbl )->cValPr2, ( dbfArtLbl )->nUndLbl )

         ( dbfArtLbl )->( dbSkip() )

      end

   end

Return ( nil )



Static Function bGenEditText( aTblPrp, oBrwPrp, n )

Return ( {|| aTblPrp[ oBrwPrp:nArrayAt, n ]:cText } )



Static Function bGenEditValue( aTblPrp, oBrwPrp, n )

Return ( {|| aTblPrp[ oBrwPrp:nArrayAt, n ]:Value } )



static FUNCTION TArticuloLabelGenerator_AddLabel( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if dbLock( D():Articulos( nView ) )
      ( D():Articulos( nView ) )->nLabel++
      ( D():Articulos( nView ) )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TArticuloLabelGenerator_DelLabel( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if ( D():Articulos( nView ) )->nLabel > 1
      if dbLock( D():Articulos( nView ) )
         ( D():Articulos( nView ) )->nLabel--
         ( D():Articulos( nView ) )->( dbUnLock() )
      end
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TArticuloLabelGenerator_EditLabel( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   ::oBrwLabel:aCols[ 4 ]:Edit()

Return ( Self )



static FUNCTION TArticuloLabelGenerator_ChangeCriterio( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   ::oFamiliaInicio:Hide()
   ::oFamiliaFin:Hide()

   ::oInicio:Hide()
   ::oFin:Hide()

   ::oFechaInicio:Hide()
   ::oFechaFin:Hide()

   do case
      case ::oCriterio:nAt == 3

         ::oFamiliaInicio:Show()
         ::oFamiliaFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

      case ::oCriterio:nAt == 4

         ::oFechaInicio:Show()
         ::oFechaFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

   end

Return ( Self )



static FUNCTION TArticuloLabelGenerator_lCreateTemporal( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local n
   local nRec
   local nRecno
   local oBlock
   local oError
   local nBlancos
   local lCreateTemporal   := .T.
   local lCloseArticulo    := .F.
   local lCloseLabel       := .F.
   local dbfArt

   oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      tmpArticulo          := "LblArt"
      filArticulo          := cGetNewFileName( cPatTmp() + "LblAlb" )

      dbCreate( filArticulo, aSqlStruct( aItmArt() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), filArticulo, tmpArticulo, .F. )

      ( tmpArticulo )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpArticulo )->( OrdCreate( filArticulo, "Codigo", "Codigo", {|| Field->Codigo } ) )

      if empty( dbfArt )
         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @dbfArt ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
         lCloseArticulo    := .T.
      end

      if empty( dbfArtLbl )
         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtLbl.Dbf" ), ( cCheckArea( "ArtLbl", @dbfArtLbl ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtLbl.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
         lCloseLabel       := .T.
      end





      nRec                 := ( dbfArt )->( Recno() )

      if empty( ::aSelected )

         ( dbfArt )->( dbGoTop() )
         while !( dbfArt )->( eof() )

            if ( dbfArt )->lLabel

               if ( dbfArtLbl )->( dbSeek( ( dbfArt )->Codigo ) )

                  while ( dbfArtLbl )->cCodArt == ( dbfArt )->Codigo .AND. !( dbfArtLbl )->( eof() )

                     for n := 1 to ( ( dbfArtLbl )->nUndLbl )

                        dbPass( dbfArt, tmpArticulo, .T. )

                        ( tmpArticulo )->cCodPrp1  := ( dbfArtLbl )->cCodPr1
                        ( tmpArticulo )->cCodPrp2  := ( dbfArtLbl )->cCodPr2
                        ( tmpArticulo )->cValPrp1  := ( dbfArtLbl )->cValPr1
                        ( tmpArticulo )->cValPrp2  := ( dbfArtLbl )->cValPr2

                     next

                     ( dbfArtLbl )->( dbSkip() )

                  end

               else

                  for n := 1 to ( dbfArt )->nLabel
                     dbPass( dbfArt, tmpArticulo, .T. )
                  next

               end

            end

            ( dbfArt )->( dbSkip() )

         end

      else

         for each nRecno in ::aSelected

            ( dbfArt )->( dbgoto( nRecno ) )

            for n := 1 to ::nUnidadesLabels
               dbPass( dbfArt, tmpArticulo, .T. )
            next

         next

      end

      ( dbfArt )->( dbGoTo( nRec ) )

      ( tmpArticulo )->( dbGoTop() )





      if lCloseArticulo
         ( dbfArt )->( dbCloseArea() )
         dbfArt       := nil
      end

      if lCloseLabel
         ( dbfArtLbl )->( dbCloseArea() )
         dbfArtLbl         := nil
      end

   RECOVER USING oError

      lCreateTemporal      := .F.

      MsgStop( "Imposible abrir ficheros de artículos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lCreateTemporal )



static FUNCTION TArticuloLabelGenerator_PrepareTemporal( oFr ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local n
   local nBlancos       := 0
   local nPaperHeight   := oFr:GetProperty( "MainPage", "PaperHeight" ) * 3.77953
   local nColumns       := oFr:GetProperty( "MainPage", "Columns" )
   local nHeight        := oFr:GetProperty( "MasterData", "Height" )
   local nItemsInColumn := 0

   if !empty( nPaperHeight ) .AND. !empty( nHeight ) .AND. !empty( nColumns )

      nItemsInColumn    := int( nPaperHeight / nHeight )

      nBlancos          := ( ::nColumnaInicio - 1 ) * nItemsInColumn
      nBlancos          += ( ::nFilaInicio - 1 )

      for n := 1 to nBlancos
         dbPass( dbBlankRec( D():Articulos( nView ) ), tmpArticulo, .T. )
      next

   end

   ( tmpArticulo )->( dbGoTop() )

Return ( .T. )



static FUNCTION TArticuloLabelGenerator_DestroyTemporal( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if ( tmpArticulo )->( Used() )
      ( tmpArticulo )->( dbCloseArea() )
   end

   dbfErase( filArticulo )

Return ( .T. )



static FUNCTION TArticuloLabelGenerator_lPrintLabels( ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local oFr

   if !::lCreateTemporal()
      Return .F.
   end

   SysRefresh()

   oFr                  := frReportManager():New()
   oFr:LoadLangRes(     "Spanish.Xml" )
   oFr:SetIcon( 1 )
   oFr:SetTitle(        "Diseñador de documentos" )



   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      ::PrepareTemporal( oFr )





      oFr:PrepareReport()





      oFr:ShowPreparedReport()

   end





   oFr:DestroyFr()





   ::DestroyTemporal()

Return .T.



static FUNCTION TArticuloLabelGenerator_InitLabel( oLabel ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local nStartRow

   if ::nFilaInicio > 1
      nStartRow            := oLabel:nStartRow
      nStartRow            += ( ::nFilaInicio - 1 ) * ( oLabel:nLblHeight + oLabel:nVSeparator )

      if nStartRow < oLabel:nBottomRow
         oLabel:nStartRow  := nStartRow
      end
   end

   if ::nColumnaInicio > 1 .AND. ::nColumnaInicio <= oLabel:nLblOnLine
      oLabel:nLblCurrent   := ::nColumnaInicio
   end

Return ( Self )



static FUNCTION TArticuloLabelGenerator_SelectColumn( oCombo ) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local oCol
   local cOrd                    := oCombo:VarGet()

   if ::oBrwLabel <> nil

      with object ::oBrwLabel

         for each oCol in :aCols

            if Equal( cOrd, oCol:cHeader )
               oCol:cOrder       := "A"
               oCol:SetOrder()
            else
               oCol:cOrder       := " "
            end

         next

      end

      ::oBrwLabel:Refresh()

   end

Return ( Self )



Static Function lLabel( dbfTmpLbl )

   oMsgProgress():Deltapos( 1 )

Return ( ( dbfTmpLbl )->lLabel )



Function IsArticulo( cPath )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "Articulo.Dbf" )
      dbCreate( cPath + "Articulo.Dbf",   aSqlStruct( aItmArt() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtDiv.Dbf" )
      dbCreate( cPath + "ArtDiv.Dbf",     aSqlStruct( aItmVta() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtKit.Dbf" )
      dbCreate( cPath + "ArtKit.Dbf",     aSqlStruct( aItmKit() ), cDriver() )
   end

   if !lExistTable( cPath + "ParKit.Dbf" )
      dbCreate( cPath + "ParKit.Dbf",     aSqlStruct( aItmParKit() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtAsc.Dbf" )
      dbCreate( cPath + "ArtAsc.Dbf",     aSqlStruct( aItmAsc() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtCodebar.Dbf" )
      dbCreate( cPath + "ArtCodebar.Dbf", aSqlStruct( aItmBar() ), cDriver() )
   end

   if !lExistTable( cPath + "ProvArt.Dbf" )
      dbCreate( cPath + "ProvArt.Dbf",    aSqlStruct( aItmArtPrv() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtLeng.Dbf" )
      dbCreate( cPath + "ArtLeng.Dbf",    aSqlStruct( aItmArtLeng() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtLbl.Dbf" )
      dbCreate( cPath + "ArtLbl.Dbf",     aSqlStruct( aItmLbl() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtImg.Dbf" )
      dbCreate( cPath + "ArtImg.Dbf",     aSqlStruct( aItmImg() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtDoc.Dbf" )
      dbCreate( cPath + "ArtDoc.Dbf",     aSqlStruct( aArtDoc() ), cDriver() )
   end









   if !lExistIndex( cPath + "Articulo.Cdx"   )  .OR.  !lExistIndex( cPath + "ArtDiv.Cdx"     )  .OR.  !lExistIndex( cPath + "ArtKit.Cdx"     )  .OR.  !lExistIndex( cPath + "ArtCodebar.Cdx" )  .OR.  !lExistIndex( cPath + "ProvArt.Cdx"    )  .OR.  !lExistIndex( cPath + "ArtLeng.Cdx"    )  .OR.  !lExistIndex( cPath + "ArtLbl.Cdx"     )  .OR.  !lExistIndex( cPath + "ArtImg.Cdx"     )  .OR.  !lExistIndex( cPath + "ArtDoc.Cdx"     )

      rxArticulo( cPath )

   end

Return ( .T. )



FUNCTION mkArticulo( cPath, lAppend, cPathOld, oMeter, lMovAlm )

    If( lAppend == nil, lAppend := .F., ) ;
    If( lMovAlm == nil, lMovAlm := .T., ) ;
   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !empty( oMeter )
        oMeter:cText    := "Generando Bases"
        sysrefresh()
   end

   if !lExistTable( cPath + "Articulo.Dbf", cLocalDriver() )
      dbCreate( cPath + "Articulo.Dbf", aSqlStruct( aItmArt() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtDiv.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtDiv.Dbf", aSqlStruct( aItmVta() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtKit.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtKit.Dbf", aSqlStruct( aItmKit() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ParKit.Dbf", cLocalDriver() )
      dbCreate( cPath + "ParKit.Dbf", aSqlStruct( aItmParKit() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtAsc.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtAsc.Dbf", aSqlStruct( aItmAsc() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtCodebar.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtCodebar.Dbf", aSqlStruct( aItmBar() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ProvArt.Dbf", cLocalDriver() )
      dbCreate( cPath + "ProvArt.Dbf", aSqlStruct( aItmArtPrv() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtLeng.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtLeng.Dbf", aSqlStruct( aItmArtLeng() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtLbl.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtLbl.Dbf", aSqlStruct( aItmLbl() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtImg.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtImg.Dbf", aSqlStruct( aItmImg() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtAlm.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtAlm.Dbf", aSqlStruct( aItmStockaAlmacenes() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "ArtDoc.Dbf", cLocalDriver() )
      dbCreate( cPath + "ArtDoc.Dbf", aSqlStruct( aArtDoc() ), cLocalDriver() )
   end





   if lAppend .AND. lIsDir( cPathOld )

      AppDbf( cPathOld, cPath, "Articulo"    )
      AppDbf( cPathOld, cPath, "ArtDiv"      )
      AppDbf( cPathOld, cPath, "ProvArt"     )
      AppDbf( cPathOld, cPath, "ArtLeng"     )
      AppDbf( cPathOld, cPath, "ArtCodebar"  )
      AppDbf( cPathOld, cPath, "ArtKit"      )
      AppDbf( cPathOld, cPath, "ArtLbl"      )
      AppDbf( cPathOld, cPath, "ArtImg"      )
      AppDbf( cPathOld, cPath, "ArtAlm"      )
      AppDbf( cPathOld, cPath, "ArtDoc"      )

      if lMovAlm
         AppDbf( cPathOld, cPath, "MovAlm"   )
      end

   end

   rxArticulo( cPath, cLocalDriver() )

RETURN .T.



FUNCTION rxArticulo( cPath, cDriver )

   local oError
   local oBlock
   local dbfArt
   local dbfCodebar




   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;












   if !lExistTable( cPath + "Articulo.Dbf"   ) .OR.  !lExistTable( cPath + "ProvArt.Dbf"    ) .OR.  !lExistTable( cPath + "ArtLeng.Dbf"    ) .OR.  !lExistTable( cPath + "ArtDiv.Dbf"     ) .OR.  !lExistTable( cPath + "ArtKit.Dbf"     ) .OR.  !lExistTable( cPath + "ParKit.Dbf"     ) .OR.  !lExistTable( cPath + "ArtAsc.Dbf"     ) .OR.  !lExistTable( cPath + "ArtCodebar.Dbf" ) .OR.  !lExistTable( cPath + "ArtLbl.Dbf"     ) .OR.  !lExistTable( cPath + "ArtImg.Dbf"     ) .OR.  !lExistTable( cPath + "ArtAlm.Dbf"     ) .OR.  !lExistTable( cPath + "ArtDoc.Dbf"     )

      mkArticulo( cPath )

   end

   fErase( cPath + "Articulo.Cdx"   )
   fErase( cPath + "ProvArt.Cdx"    )
   fErase( cPath + "ArtLeng.Cdx"    )
   fErase( cPath + "ArtDiv.Cdx"     )
   fErase( cPath + "ArtKit.Cdx"     )
   fErase( cPath + "ParKit.Cdx"     )
   fErase( cPath + "ArtAsc.Cdx"     )
   fErase( cPath + "ArtCodebar.Cdx" )
   fErase( cPath + "ArtLbl.Cdx"     )
   fErase( cPath + "ArtImg.Cdx"     )
   fErase( cPath + "ArtAlm.Cdx"     )
   fErase( cPath + "ArtDoc.Cdx"     )

   dbUseArea( .T., cDriver, cPath + "ARTICULO.Dbf", cCheckArea( "ARTICULO", @dbfArt ), .F. )

   if !( dbfArt )->( neterr() )

      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "Articulo.Cdx", "Codigo", "Codigo", {|| Field->Codigo } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ARTICULO.CDX", "Nombre", "UPPER( NOMBRE )", {|| UPPER( Field->NOMBRE ) } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ARTICULO.CDX", "CFAMCOD", "FAMILIA + CODIGO", {|| Field->FAMILIA + Field->CODIGO }, ) )

      ( dbfArt )->( ordCondSet("!Deleted() .and. lIncTcl", {|| !Deleted() .AND. Field->lIncTcl }  ) )
      ( dbfArt )->( ordCreate( cPath + "Articulo.Cdx", "nPosTpv", "Field->Familia + Str( Field->nPosTpv )", {|| Field->Familia + Str( Field->nPosTpv ) } ) )

      ( dbfArt )->( ordCondSet("!Deleted() .and. lIncTcl", {|| !Deleted() .AND. Field->lIncTcl }  ) )
      ( dbfArt )->( ordCreate( cPath + "Articulo.Cdx", "nNomTpv", "Field->Familia + Field->NOMBRE ", {|| Field->Familia + Field->NOMBRE } ) )

      ( dbfArt )->( ordCondSet("!Deleted() .and. lIncTcl .and. nPosTpv != 0", {|| !Deleted() .AND. Field->lIncTcl .AND. Field->nPosTpv <> 0 }, , , , , , , , , .T. ) )
      ( dbfArt )->( ordCreate( cPath + "ARTICULO.CDX", "NPOSTCL", "NPOSTCL", {|| Field->nPosTcl }, ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ARTICULO.CDX", "CodeBar", "Field->CodeBar", {|| Field->CodeBar } ) )

      ( dbfArt )->( ordCondSet( "!Deleted() .and. lPubInt", {|| !Deleted() .AND. Field->lPubInt }  ) )
      ( dbfArt )->( ordCreate( cPath + "Articulo.Cdx", "lWebShop", "Field->cWebShop + Field->Codigo", {|| Field->cWebShop + Field->Codigo } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "Articulo.Cdx", "Matriz", "Matriz", {|| Field->Matriz } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "Articulo.Cdx", "nCtlStock", "nCtlStock", {|| Field->nCtlStock } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "Articulo.Cdx", "cDesUbi", "cDesUbi", {|| Field->cDesUbi } ) )

      ( dbfArt )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )

   end





   dbUseArea( .T., cDriver, cPath + "PROVART.Dbf", cCheckArea( "PROVART", @dbfArt ), .F. )

   if !( dbfArt )->( neterr() )

      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "PROVART.CDX", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "PROVART.CDX", "cCodPrv", "cCodPrv + cCodArt", {|| Field->CCODPRV + Field->cCodArt } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "PROVART.CDX", "cRefPrv", "cCodPrv + cRefPrv", {|| Field->CCODPRV + Field->CREFPRV } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "PROVART.CDX", "cRefArt", "cCodArt + cCodPrv + cRefPrv", {|| Field->cCodArt + Field->cCodPrv + Field->cRefPrv } ) )

      ( dbfArt )->( ordCondSet("!Deleted() .and. lDefPrv", {|| !Deleted() .AND. Field->lDefPrv } ) )
      ( dbfArt )->( ordCreate( cPath + "PROVART.CDX", "lDefPrv", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )

   end





   dbUseArea( .T., cDriver, cPath + "ARTLENG.Dbf", cCheckArea( "ARTLENG", @dbfArt ), .F. )

   if !( dbfArt )->( neterr() )

      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ARTLENG.CDX", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ARTLENG.CDX", "CARTLEN", "cCodArt + CCODLEN", {|| Field->cCodArt + Field->CCODLEN } ) )

      ( dbfArt )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )

   end





   dbUseArea( .T., cDriver, cPath + "ARTDIV.Dbf", cCheckArea( "ARTDIV", @dbfArt ), .F. )

   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ArtDiv.Cdx", "cCodArt", "cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2", {|| Field->cCodArt + Field->cCodPr1 + Field->cCodPr2 + Field->cValPr1 + Field->cValPr2 } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ArtDiv.Cdx", "cValPrp", "cCodArt + cValPr1 + cValPr2", {|| Field->cCodArt + Field->cValPr1 + Field->cValPr2 } ) )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ArtDiv.Cdx", "cCodigo", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver, cPath + "ARTKIT.Dbf", cCheckArea( "ARTKIT", @dbfArt ), .F. )
   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ARTKIT.CDX", "CCODKIT", "CCODKIT", {|| Field->CCODKIT } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ARTKIT.CDX", "CCODREF", "CCODKIT + cRefKit", {|| Field->CCODKIT + Field->cRefKit } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ARTKIT.CDX", "cRefKit", "cRefKit", {|| Field->cRefKit } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ARTKIT.CDX", "cParUuid", "cParUuid", {|| Field->cParUuid } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ARTKIT.CDX", "cUuidRef", "cParUuid + cRefKit", {|| Field->cParUuid + Field->cRefKit } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver, cPath + "PARKIT.Dbf", cCheckArea( "PARKIT", @dbfArt ), .F. )
   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "PARKIT.CDX", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver, cPath + "ARTASC.Dbf", cCheckArea( "ARTASC", @dbfArt ), .F. )
   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ARTASC.CDX", "CCODART", "CCODART", {|| Field->CCODART } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ARTASC.CDX", "CCODREF", "CCODART + cRefAsc", {|| Field->CCODART + Field->cRefAsc } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ARTASC.CDX", "cRefAsc", "cRefAsc", {|| Field->cRefAsc } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver, cPath + "ArtCodebar.Dbf", cCheckArea( "ARTICULO", @dbfArt ), .F. )

   if !( dbfArt )->( neterr() )

      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ArtCodebar.Cdx", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ArtCodebar.Cdx", "cCodBar", "cCodBar", {|| Field->cCodBar } ) )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ArtCodebar.Cdx", "cArtBar", "cCodArt + cCodBar", {|| Field->cCodArt + Field->cCodBar } ) )

      ( dbfArt )->( ordCondSet( "!Deleted() .and. lDefBar", {|| !Deleted() .AND. Field->lDefBar }  ) )
      ( dbfArt )->( ordCreate( cPath + "ArtCodebar.Cdx", "cDefArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de codigos de barras" )

   end





   dbUseArea( .T., cDriver, cPath + "ArtLbl.Dbf", cCheckArea( "ArtLbl", @dbfArt ), .F. )

   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ArtLbl.Cdx", "cCodArt", "cCodArt + cCodPr1 + cCodPr2 + cValpr1 + cValPr2", {|| Field->cCodArt + Field->cCodPr1 + Field->cCodPr2 + Field->cValpr1 + Field->cValPr2 } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver, cPath + "ArtImg.Dbf", cCheckArea( "ArtImg", @dbfArt ), .F. )

   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArt )->( ordCreate( cPath + "ArtImg.Cdx", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( ordCondSet( "!Deleted() .and. lDefImg", {|| !Deleted() .AND. Field->lDefImg } ) )
      ( dbfArt )->( ordCreate( cPath + "ArtImg.Cdx", "lDefImg", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver, cPath + "ArtAlm.Dbf", cCheckArea( "ArtAlm", @dbfArt ), .F. )
   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArt )->( ordCreate( cPath + "ArtAlm.Cdx", "cCodArt + cCodAlm", "cCodArt + cCodAlm", {|| Field->cCodArt + Field->cCodAlm } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver, cPath + "ArtDoc.DBF", cCheckArea( "ArtDoc", @dbfArt ), .F. )
   if !( dbfArt )->( neterr() )
      ( dbfArt )->( __dbPack() )

      ( dbfArt )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfArt )->( ordCreate( cPath + "ArtDoc.CDX", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArt )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de documentos" )
   end











RETURN NIL






function aItmArt()

   local aBase  := {}

   aAdd( aBase, { "Codigo",    "C", 18, 0, "Código del artículo" ,                    "'@!'",               "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Nombre",    "C",100, 0, "Nombre del artículo",                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesTik",   "C", 20, 0, "Descripción para el tiket" ,              "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pCosto",    "N", 18, 8, "Precio de costo" ,                        "PicIn()",            "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PvpRec",    "N", 18, 8, "Precio venta recomendado" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf1",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 1","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf2",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 2","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf3",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 3","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf4",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 4","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf5",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 5","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf6",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 6","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef1",    "N",  6, 2, "Porcentaje de beneficio precio 1" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef2",    "N",  6, 2, "Porcentaje de beneficio precio 2" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef3",    "N",  6, 2, "Porcentaje de beneficio precio 3" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef4",    "N",  6, 2, "Porcentaje de beneficio precio 4" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef5",    "N",  6, 2, "Porcentaje de beneficio precio 5" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef6",    "N",  6, 2, "Porcentaje de beneficio precio 6" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr1",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 1","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr2",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 2","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr3",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 3","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr4",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 4","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr5",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 5","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr6",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 6","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVenta1",   "N", 18, 8, "Precio de venta precio 1" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVenta2",   "N", 18, 8, "Precio de venta precio 2" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVenta3",   "N", 18, 8, "Precio de venta precio 3" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVenta4",   "N", 18, 8, "Precio de venta precio 4" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVenta5",   "N", 18, 8, "Precio de venta precio 5" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVenta6",   "N", 18, 8, "Precio de venta precio 6" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaIva1",  "N", 18, 8, "Precio de venta precio 1 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaIva2",  "N", 18, 8, "Precio de venta precio 2 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaIva3",  "N", 18, 8, "Precio de venta precio 3 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaIva4",  "N", 18, 8, "Precio de venta precio 4 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaIva5",  "N", 18, 8, "Precio de venta precio 5 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaIva6",  "N", 18, 8, "Precio de venta precio 6 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ1",     "N", 18, 8, "Precio de alquiler precio 1" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ2",     "N", 18, 8, "Precio de alquiler precio 2" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ3",     "N", 18, 8, "Precio de alquiler precio 3" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ4",     "N", 18, 8, "Precio de alquiler precio 4" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ5",     "N", 18, 8, "Precio de alquiler precio 5" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ6",     "N", 18, 8, "Precio de alquiler precio 6" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA1",  "N", 18, 8, "Precio de alquiler precio 1 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA2",  "N", 18, 8, "Precio de alquiler precio 2 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA3",  "N", 18, 8, "Precio de alquiler precio 3 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA4",  "N", 18, 8, "Precio de alquiler precio 4 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA5",  "N", 18, 8, "Precio de alquiler precio 5 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA6",  "N", 18, 8, "Precio de alquiler precio 6 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPNTVER1",  "N", 18, 8, "Contribución punto verde" ,                               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPNVIVA1",  "N", 18, 8, "Contribución punto verde " + cImp() + " inc.",            "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NACTUAL",   "N", 18, 8, "Número de artículos" ,                    "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCAJENT",   "N", 18, 8, "Número de cajas por defecto" ,            "MasUnd()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NUNICAJA",  "N", 18, 8, "Número de unidades por defecto" ,         "MasUnd()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NMINIMO",   "N", 18, 8, "Número de stock mínimo" ,                 "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NMAXIMO",   "N", 18, 8, "Número de stock maximo" ,                 "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCNTACT",   "N", 18, 8, "Número del contador" ,                    "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LASTIN",    "D",  8, 0, "Fecha ultima entrada" ,                   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LASTCHG",   "D",  8, 0, "Fecha de creación" ,                      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LASTOUT",   "D",  8, 0, "Fecha ultima salida" ,                    "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "TIPOIVA",   "C",  1, 0, "Código tipo de " + cImp(),                "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LIVAINC",   "L",  1, 0, "Lógico " + cImp() + " incluido (S/N)" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "FAMILIA",   "C", 16, 0, "Código de la familia del artículo" ,      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CSUBFAM",   "C",  8, 0, "Código de la subfamilia del artículo" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "GRPVENT",   "C",  9, 0, "" ,                                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTAVTA",   "C", 12, 0, "Código de la cuenta de ventas" ,          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTACOM",   "C", 12, 0, "Código de la cuenta de compras" ,         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTAVTADEV","C", 12, 0, "Código de la cuenta de ventas en devoluciones" ,    "",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTACOMDEV","C", 12, 0, "Código de la cuenta de compras en devoluciones" ,   "",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTATRN",   "C", 12, 0, "Código de la cuenta de portes" ,          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CODEBAR",   "C", 20, 0, "Código de barras" ,                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NTIPBAR",   "N",  2, 0, "Tipo de código de barras" ,               "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "DESCRIP",   "M", 10, 0, "Descripción larga" ,                      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LLABEL",    "L",  1, 0, "Lógico de selección de etiqueta",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLABEL",    "N",  5, 0, "Número de etiquetas a imprimir",          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCTLSTOCK", "N",  1, 0, "Control de stock (1/2/3)",                "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LSELPRE",   "L",  1, 0, "",                                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NSELPRE",   "N",  5, 0, "",                                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NTIPPRE",   "N",  1, 0, "",                                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPESOKG",   "N", 18, 8, "Peso del artículo" ,                      "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNIDAD",   "C",  2, 0, "Unidad de medición del peso" ,            "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NVOLUMEN",  "N", 18, 8, "Volumen del artículo" ,                   "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CVOLUMEN",  "C",  2, 0, "Unidad de medición del volumen" ,         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLNGART",   "N", 18, 8, "Largo del artículo" ,                     "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NALTART",   "N", 18, 8, "Alto del artículo" ,                      "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NANCART",   "N", 18, 8, "Ancho del artículo" ,                     "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNDDIM",   "C",  2, 0, "Unidad de medición de las longitudes" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPPES",   "N", 18, 8, "Importe de peso/volumen del articulo" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cImagen",   "C",250, 0, "Fichero de imagen" ,                      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lSndDoc",   "L",  1, 0, "Lógico para envios" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodUsr",   "C",  3, 0, "Código de usuario que realiza el cambio" ,"",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dFecChg",   "D",  8, 0, "Fecha de cambio" ,                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cTimChg",   "C",  5, 0, "Hora de cambio" ,                         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dFecLgt",   "D",  8, 0, "Fecha de logística" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lKitArt",   "L",  1, 0, "Lógico de escandallos" ,                  "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lKitAsc",   "L",  1, 0, "Lógico de asociado" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nKitImp",   "N",  1, 0, "" ,                                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nKitStk",   "N",  1, 0, "" ,                                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nKitPrc",   "N",  1, 0, "" ,                                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lAutSer",   "L",  1, 0, "Lógico de autoserializar" ,               "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lObs",      "L",  1, 0, "Lógico de obsoleto" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LNUMSER",   "L",  1, 0, "Lógico solicitar numero de serie" ,       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CPRVHAB",   "C", 12, 0, "Proveedor habitual" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LFACCNV",   "L",  1, 0, "Usar factor de conversión" ,              "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CFACCNV",   "C",  2, 0, "Código del factor de conversión" ,        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODTNK",   "C",  3, 0, "Código del tanque de combustible" ,       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODTIP",   "C",  4, 0, "Código del tipo de artículo" ,            "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LTIPACC",   "L",  1, 0, "Lógico de acceso por unidades o importe", "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LCOMBUS",   "L",  1, 0, "Lógico si el artículo es del tipo combustible", "",             "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODIMP",   "C",  3, 0, "Código del impuesto especiales",          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LMSGVTA",   "L",  1, 0, "Lógico para avisar en venta sin stock",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LNOTVTA",   "L",  1, 0, "Lógico para no permitir venta sin stock", "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLOTE",     "N",  9, 0, "",                                        "'999999999'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cLote",     "C", 64, 0, "Número de lote",                          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LLOTE",     "L",  1, 0, "Lote (S/N)",                              "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUBINT",   "L",  1, 0, "Lógico para publicar en internet (S/N)",  "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUBOFE",   "L",  1, 0, "Lógico para publicar como oferta (S/N)",  "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUBPOR",   "L",  1, 0, "Lógico para publicar como artículo destacado (S/N)",  "",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT1",  "N", 10, 6, "Descuento de oferta para tienda web 1",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT1",  "N", 18, 8, "Precio del producto en oferta 1",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA1",  "N", 18, 8, "Precio del producto en oferta con " + cImp() + " 1", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT2",  "N", 10, 6, "Descuento de oferta para tienda web 2",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT2",  "N", 18, 8, "Precio del producto en oferta 2",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA2",  "N", 18, 8, "Precio del producto en oferta con " + cImp() + " 2", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT3",  "N", 10, 6, "Descuento de oferta para tienda web 3",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT3",  "N", 18, 8, "Precio del producto en oferta 3",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA3",  "N", 18, 8, "Precio del producto en oferta con " + cImp() + " 3", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT4",  "N", 10, 6, "Descuento de oferta para tienda web 4",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT4",  "N", 18, 8, "Precio del producto en oferta 4",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA4",  "N", 18, 8, "Precio del producto en oferta con " + cImp() + " 4", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT5",  "N", 10, 6, "Descuento de oferta para tienda web 5",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT5",  "N", 18, 8, "Precio del producto en oferta 5",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA5",  "N", 18, 8, "Precio del producto en oferta con " + cImp() + " 5", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT6",  "N", 10, 6, "Descuento de oferta para tienda web 6",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT6",  "N", 18, 8, "Precio del producto en oferta 6",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA6",  "N", 18, 8, "Precio del producto en oferta con " + cImp() + " 6", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "MDESTEC",   "M", 10, 0, "Descripción técnica del artículo",        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLNGCAJ",   "N", 18, 8, "Largo de la caja" ,                       "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NALTCAJ",   "N", 18, 8, "Alto de la caja" ,                        "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NANCCAJ",   "N", 18, 8, "Ancho de la caja" ,                       "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNDCAJ",   "C",  2, 0, "Unidad de medición de la caja" ,          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPESCAJ",   "N", 18, 8, "Peso de la caja" ,                        "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCAJPES",   "C",  2, 0, "Unidad de medición del peso de la caja" , "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NVOLCAJ",   "N", 18, 8, "Volumen de la caja" ,                     "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCAJVOL",   "C",  2, 0, "Unidad de medición del volumen de la caja","",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCAJPLT",   "N", 18, 8, "Número de cajas por palets" ,             "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBASPLT",   "N", 18, 8, "Base del palet" ,                         "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NALTPLT",   "N", 18, 8, "Altura del palet" ,                       "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNDPLT",   "C",  2, 0, "Unidad de medición de la altura del palet","",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LINCTCL",   "L",  1, 0, "Incluir en pantalla táctil",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CDESTCL",   "C", 20, 0, "Descripción en pantalla táctil",           "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CDESCMD",   "M", 10, 0, "Descripción para comanda",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPOSTCL",   "N", 18, 8, "Posición en pantalla táctil",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODCAT",   "C",  4, 0, "Código del catálogo del artículo" ,        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPUNTOS",   "N", 18, 8, "Puntos del catalogo" ,                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOPNT",   "N",  6, 2, "Dto. del catalogo" ,                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NRENMIN",   "N",  6, 2, "Rentabilidad mínima" ,                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODCATE",  "C", 10, 0, "Código de categoría",                      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODTEMP",  "C", 10, 0, "Código de la temporada",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LECOTASA",  "L",  1, 0, "Lógico para usar ECOTASA",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LMOSCOM",   "L",  1, 0, "Lógico mostrar comentario" ,               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "MCOMENT",   "M", 10, 0, "Comentario a mostrar" ,                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUNTO",    "L",  1, 0, "Lógico para trabajar con puntos" ,         "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODPRP1",  "C", 20, 0, "Código de la primera propiedad" ,          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODPRP2",  "C", 20, 0, "Código de la segunda propiedad" ,          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lCodPrp",   "L",  1, 0, "" ,                                        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodFra",   "C",  3, 0, "Código de frases publiciarias",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodWeb",   "N", 11, 0, "Código del producto en la web",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPosTpv",   "N", 10, 2, "Posición para mostrar en TPV táctil",      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDuracion", "N",  3, 0, "Duración del producto",                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nTipDur",   "N",  1, 0, "Tipo duración (dia, mes, año)",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodFab",   "C",  3, 0, "Código del fabricante",                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nImpCom1",  "N",  1, 0, "Impresora de comanda 1",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nImpCom2",  "N",  1, 0, "Impresora de comanda 2",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lMsgMov",   "L",  1, 0, "Lógico para avisar en movimientos sin stock","",                "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cImagenWeb","C",250, 0, "Imagen para la web",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cChgBar",   "D",  8, 0, "Fecha de cambio de código de barras",      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesUbi",   "C",200, 0, "Ubicación",                                "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dFecVta",   "D",  8, 0, "Fecha de puesta a la venta",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dFinVta",   "D",  8, 0, "Fecha de fin de la venta",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lMsgSer",   "L",  1, 0, "Avisar en ventas por series sin stock",    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPrp1",  "C", 20, 0, "Valor de la primera propiedad",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPrp2",  "C", 20, 0, "Valor de la segunda propiedad",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "mValPrp1",  "M", 10, 0, "Valores seleccionables de la primera propiedad", "",            "", "( cDbfArt )", nil } )
   aAdd( aBase, { "mValPrp2",  "M", 10, 0, "Valores seleccionables de la segunda propiedad", "",            "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dChgBar",   "D",  8, 0, "Fecha de cambio de codigos de barras",     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodSus",   "C", 18, 0, "Código del artículo al que se sustituye" , "'@!'",              "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPor",   "C", 18, 0, "Código del artículo por el que es sustituido" , "'@!'",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt1",  "N",  6, 2, "Primer descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt2",  "N",  6, 2, "Segundo descuento de artículo",            "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt3",  "N",  6, 2, "Tercer descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt4",  "N",  6, 2, "Cuarto descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt5",  "N",  6, 2, "Quinto descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt6",  "N",  6, 2, "Sexto descuento de artículo",              "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lMarAju",   "L",  1, 0, "Lógico para utilizar el margen de ajuste", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cMarAju",   "C",  5, 0, "Cadena descriptiva del margen de ajuste",  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nTarWeb",   "N",  1, 0, "Tarifa a aplicar en la Web" ,              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaWeb",   "N", 18, 8, "Precio venta en la Web",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cTipImp1",  "C", 50, 0, "Tipo impresora comanda 1",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cTipImp2",  "C", 50, 0, "Tipo impresora comanda 2",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefPrv",   "C", 18, 0, "Referencia del proveedor al artículo" ,    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodSec",   "C",  3, 0, "Código de la sección para producción" ,    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nFacCnv",   "N", 18, 8, "Factor de conversión" ,                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lSbrInt",   "L",  1, 0, "Lógico precio libre internet" ,            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nColBtn",   "N", 10, 0, "Color para táctil" ,                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cOrdOrd",   "C",  2, 0, "Orden de comanda" ,                        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lTerminado","L",  1, 0, "Lógico de producto terminado (producción)" , "",                "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lPeso",     "L",  1, 0, "Lógico de producto por peso",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cMenu",     "C",  3, 0, "Código del menú de acompañamiento",        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cTitSeo",   "C", 70, 0, "Meta-título",                              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesSeo",   "C",160, 0, "Meta-descripcion",                         "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cKeySeo",   "C",160, 0, "Meta-keywords",                            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodEst",   "C",  3, 0, "Estado del artículo",                      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodEdi",   "C", 20, 0, "Código normalizado del artículo",          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefAux",   "C", 18, 0, "Referencia auxiliar",                      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefAux2",  "C", 18, 0, "Referencia auxiliar 2",                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Matriz",    "C", 18, 0, "Matriz para código de barras" ,            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nStkCal",   "N", 18, 8, "Stock calculado" ,                         "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lIvaInc2",  "L",  1, 0, "Iva incluido para el precio 2" ,           "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lIvaInc3",  "L",  1, 0, "Iva incluido para el precio 3" ,           "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lIvaInc4",  "L",  1, 0, "Iva incluido para el precio 4" ,           "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lIvaInc5",  "L",  1, 0, "Iva incluido para el precio 5" ,           "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lIvaInc6",  "L",  1, 0, "Iva incluido para el precio 6" ,           "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lIvaPver",  "L",  1, 0, "Iva incluido para el punto verde" ,        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cWebShop",  "C",100, 0, "Tienda web donde se publica el producto",  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lIvaWeb",   "L",  1, 0, "Iva incluido para precio web" ,            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cEtiqueta", "M", 10, 0, "Relación de etiquetas" ,                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "uuid",      "C", 40, 0, "Uuid" ,                                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "fab_uuid",  "C", 40, 0, "Fabricante uuid",                          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cExtFld",   "C",  3, 0, "Campo extra condicionante",                "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBULENT",   "N", 18, 8, "Número de bultos por defecto" ,            "MasUnd()",          "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cIdWP",     "C", 40, 0, "Id relación con WordPress" ,               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nIncPrc1",  "N", 16, 6, "Incremento de precio 1" ,                  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nIncPrc2",  "N", 16, 6, "Incremento de precio 2" ,                  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nIncPrc3",  "N", 16, 6, "Incremento de precio 3" ,                  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nUndPal",   "N", 16, 6, "Unidades por palet" ,                      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "M2Palet",   "N", 16, 6, "Metros cuadrados por palet" ,              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "M2Pieza",   "N", 16, 6, "Metros cuadrados por piezas" ,             "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LDONATIV",  "L",  1, 0, "Lógico donativo" ,                         "",                  "", "( cDbfArt )", .F. } )

return ( aBase )





Function aItmKit()

   local aBase := {}

   aAdd( aBase, { "cParUuid",  "C", 40, 0, "Uuid padre"                          , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodKit",   "C", 18, 0, "Código del contenedor"               , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefKit",   "C", 18, 0, "Código de artículo escandallo"       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nUndKit",   "N", 18, 8, "Unidades de escandallo"              , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreKit",   "N", 18, 8, "Precio de escandallo"                , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesKit",   "C", 50, 0, "Descripción del escandallo"          , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cUnidad",   "C",  2, 0, "Unidad de medición"                  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nValPnt",   "N", 18, 8, ""                                    , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPnt",   "N",  6, 2, "Descuento del punto"                 , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lAplDto",   "L",  1, 0, "Lógico aplicar descuentos"           , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lExcPro",   "L",  1, 0, "Lógico para excluir de producción"   , "",                  "", "( cDbfArt )", nil } )

return ( aBase )



Function aItmParKit()

   local aBase := {}

   aAdd( aBase, { "cUuid",     "C", 40, 0, "Uuid"                                , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código del artículo"                 , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cNomKit",   "C", 80, 0, "Nombre del escandallo"               , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lDefKit",   "L",  1, 0, "Lógico kit por defecto"              , "",                  "", "( cDbfArt )", nil } )

return ( aBase )



Function aItmAsc()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código del artículo"                 , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefAsc",   "C", 18, 0, "Código del asociado"                 , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesAsc",   "C", 50, 0, "Descripción del asociado"            , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nUndAsc",   "N", 18, 8, "Unidades del asociado"               , "",                  "", "( cDbfArt )", nil } )

return ( aBase )






Function aItmVta()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código de artículo",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodDiv",   "C",  3, 0, "Código de divisa",                         "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr1",   "C", 20, 0, "Código de primera propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr2",   "C", 20, 0, "Código de segunda propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr1",   "C", 20, 0, "Valor de primera propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr2",   "C", 20, 0, "Valor de segunda propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreCom",   "N", 18, 8, "Precio de compras",                        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nValPnt",   "N", 18, 8, "Valor del punto",                          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPnt",   "N",  6, 2, "Descuento del punto",                      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf1",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 1", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf2",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 2", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf3",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 3", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf4",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 4", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf5",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 5", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf6",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 6", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef1",    "N",  6, 2, "Porcentaje de beneficio precio 1" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef2",    "N",  6, 2, "Porcentaje de beneficio precio 2" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef3",    "N",  6, 2, "Porcentaje de beneficio precio 3" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef4",    "N",  6, 2, "Porcentaje de beneficio precio 4" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef5",    "N",  6, 2, "Porcentaje de beneficio precio 5" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef6",    "N",  6, 2, "Porcentaje de beneficio precio 6" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr1",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 1", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr2",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 2", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr3",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 3", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr4",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 4", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr5",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 5", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr6",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 6", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta1",  "N", 18, 8, "Precio de venta 1"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta2",  "N", 18, 8, "Precio de venta 2"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta3",  "N", 18, 8, "Precio de venta 3"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta4",  "N", 18, 8, "Precio de venta 4"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta5",  "N", 18, 8, "Precio de venta 5"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta6",  "N", 18, 8, "Precio de venta 6"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva1",  "N", 18, 8, "Precio de venta " + cImp() + " incl. 1"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva2",  "N", 18, 8, "Precio de venta " + cImp() + " incl. 2"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva3",  "N", 18, 8, "Precio de venta " + cImp() + " incl. 3"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva4",  "N", 18, 8, "Precio de venta " + cImp() + " incl. 4"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva5",  "N", 18, 8, "Precio de venta " + cImp() + " incl. 5"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva6",  "N", 18, 8, "Precio de venta " + cImp() + " incl. 6"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cImgWeb",   "C",250, 0, "Imagen para la web de estas propiedades" , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cToolTip",  "C",250, 0, "Tooltip para las imagenes de la web"     , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodImgWeb","N", 11, 0, "Código de la imagen para la web"         , "",                  "", "( cDbfArt )", 0 } )
   aAdd( aBase, { "mImgWeb",   "M", 10, 0, "Imágenes por propiedad"                  , "",                  "", "( cDbfArt )", 0 } )
   aAdd( aBase, { "cCodWP",    "C", 50, 0, "Código relacionado WordPress"            , "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



Function aItmArtPrv()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código del artículo referenciado"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPrv",   "C", 12, 0, "Código del proveedor"              , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefPrv",   "C", 60, 0, "Referencia del proveedor al artículo" , "",               "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPrv",   "N",  6, 2, "Descuento del proveedor"           , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPrm",   "N",  6, 2, "Descuento por promoción"           , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDivPrv",   "C",  3, 0, "Código de la divisa"               , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nImpPrv",   "N", 19, 6, "Importe de compra"                 , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lDefPrv",   "L",  1, 0, "Lógico de proveedor por defecto"   , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nSbrCos",   "N", 19, 6, "Importe de sobrecoste"             , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBandej",   "N", 19, 6, "Número de bandejas"                , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nUndBan",   "N", 19, 6, "Unidades por bandeja"              , "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



Function aItmArtLeng()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código del artículo", "",   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodLen",   "C",  4, 0, "Código del lenguaje", "",   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesTik",   "C",200, 0, "Descripción corta",   "",   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesArt",   "M", 10, 0, "Descripción larga",   "",   "", "( cDbfArt )", nil } )

Return ( aBase )



Function aItmLbl()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código de artículo",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr1",   "C", 20, 0, "Código de primera propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr2",   "C", 20, 0, "Código de segunda propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr1",   "C", 20, 0, "Valor de primera propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr2",   "C", 20, 0, "Valor de segunda propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nUndLbl",   "N", 18, 8, "Precio de compras",                        "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



Function aItmImg()

   local aBase := {}

   aAdd( aBase, { "cCodArt",  "C",  18, 0, "Código del artículo",                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nId",      "N",  10, 0, "Identificador de la imagen",              "",                  "", "( cDbfArt )", 0 } )
   aAdd( aBase, { "cImgArt",  "C", 230, 0, "Imagen del artículo en local",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cNbrArt",  "C", 230, 0, "Nombre de la imagen",                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cHtmArt",  "M",  10, 0, "HTML de la imagen",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodWeb",  "N",  11, 0, "Código de artículo para la web",          "",                  "", "( cDbfArt )", 0 } )
   aAdd( aBase, { "lDefImg",  "L",   1, 0, "Lógico para imágen por defecto",          "",                  "", "( cDbfArt )", .F. } )
   aAdd( aBase, { "cRmtArt",  "M",  10, 0, "Memo imagen del artículo en remoto",      "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



Static Function aItmCom()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código de artículo"            , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodDiv",   "C",  3, 0, "Código de divisa"              , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr1",   "C", 20, 0, "Código de primera propiedad"   , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr2",   "C", 20, 0, "Código de segunda propiedad"   , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr1",   "C", 20, 0, "Valor de primera propiedad"    , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr2",   "C", 20, 0, "Valor de segunda propiedad"    , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreCom",   "N", 18, 8, "Precio de compras"             , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nValPnt",   "N", 18, 8, "Valor del punto"               , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPnt",   "N",  6, 2, "Descuento del punto"           , "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



Function aItmStockaAlmacenes()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código de artículo"            , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodAlm",   "C", 16, 0, "Código de almacen"             , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nStkMin",   "N", 18, 8, "Stock mínimo por almacen"      , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nStkMax",   "N", 18, 8, "Stock maximo por almacen"      , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cUbica",    "C", 60, 0, "Ubicación de almacén"          , "",                  "", "( cDbfArt )", nil } )

Return ( aBase )






FUNCTION lStockComponentes( cCodArt, uArticulo )

   local aSta
   local lTmp     := .F.

   do case
   case IsChar( uArticulo )

      aSta        := aGetStatus( uArticulo, .T. )

      if ( uArticulo )->( dbSeek( cCodArt ) )
         lTmp     := ( uArticulo )->lKitArt .AND. ( ( uArticulo )->nKitStk <= 1 .OR. ( uArticulo )->nKitStk == 3 )
      end

      SetStatus( uArticulo, aSta )

   case IsObject( uArticulo )

      uArticulo:GetStatus( .T. )

      if uArticulo:Seek( cCodArt )
         lTmp     := uArticulo:lKitArt .AND. ( uArticulo:nKitStk <= 1 .OR. uArticulo:nKitStk == 3 )
      end

      uArticulo:SetStatus()

   end

RETURN ( lTmp )



Static Function ShowComentario( aTmp, nMode )

   if nMode <> 1 .AND. aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lMosCom" ) ) ] .AND. !Empty( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "mComent" ) ) ] )
      MsgInfo( AllTrim( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "mComent" ) ) ] ), "Comentario" )
   end

Return ( .T. )






FUNCTION lPreciosComponentes( cCodArt, uArticulo )

   local aSta
   local lTmp     := .F.

   do case
   case IsChar( uArticulo )

      aSta        := aGetStatus( uArticulo, .T. )

      if ( uArticulo )->( dbSeek( cCodArt ) )
         lTmp     := ( ( uArticulo )->nKitPrc <= 1 .OR. ( uArticulo )->nKitPrc == 3 )
      end

      SetStatus( uArticulo, aSta )

   case IsObject( uArticulo )

      uArticulo:GetStatus( .T. )

      if uArticulo:Seek( cCodArt )
         lTmp     := ( uArticulo:nKitPrc <= 1 .OR. uArticulo:nKitPrc == 3 )
      end

      uArticulo:SetStatus()

   end

RETURN ( lTmp )







FUNCTION lImprimirComponente( cCodArt, uArticulo )

   local aSta
   local lTmp     := .F.

   do case
   case IsChar( uArticulo )

      aSta        := aGetStatus( uArticulo, .T. )

      if ( uArticulo )->( dbSeek( cCodArt ) )
         lTmp     := !( ( uArticulo )->lKitArt .AND. ( ( uArticulo )->nKitImp <= 1 .OR. ( uArticulo )->nKitImp == 3 ) )
      end

      SetStatus( uArticulo, aSta )

   case IsObject( uArticulo )

      uArticulo:GetStatus( .T. )

      if uArticulo:Seek( cCodArt )
         lTmp     := !( uArticulo:lKitArt .AND. ( uArticulo:nKitImp <= 1 .OR. uArticulo:nKitImp == 3 ) )
      end

      uArticulo:SetStatus()

   end

RETURN ( lTmp )



Function nRetPreArt( nTarifa, cCodDiv, lIvaInc, dbfArt, dbfDiv, dbfArtKit, dbfIva, lBuscaImportes, oTarifa, oNewImp )

   local nIva
   local oError
   local oBlock
   local nPrecioBase          := 0
   local nPrecioIvaIncluido   := 0
   local nPrecioCosto         := nil

   If( nTarifa == nil, nTarifa := 1, ) ;
   If( lIvaInc == nil, lIvaInc := .F., ) ;
   If( lBuscaImportes == nil, lBuscaImportes := lBuscaImportes(), ) ;

   oBlock                     := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if nTarifa == 0
      nTarifa                 := 1
   end

   while .T.

      if ( dbfArt )->lKitArt

         nIva                 := nIva( dbfIva, ( dbfArt )->TipoIva )

         do case
            case nTarifa == 1
               if ( dbfArt )->lBnf1
                  if empty( nPrecioCosto)
                  nPrecioCosto         := nCosto( nil, dbfArt, dbfArtKit )
                  end
                  nPrecioBase          := ( nPrecioCosto * ( dbfArt )->Benef1 / 100 ) + nPrecioCosto
                  nPrecioIvaIncluido   := ( nPrecioBase * nIva / 100 ) + nPrecioBase
               else
                  nPrecioIvaIncluido   := ( dbfArt )->pVtaIva1
                  nPrecioBase          := ( dbfArt )->pVenta1
               end

            case nTarifa == 2
               if ( dbfArt )->lBnf2
                  if empty( nPrecioCosto)
                  nPrecioCosto         := nCosto( nil, dbfArt, dbfArtKit )
                  end
                  nPrecioBase          := ( nPrecioCosto * ( dbfArt )->Benef2 / 100 ) + nPrecioCosto
                  nPrecioIvaIncluido   := ( nPrecioBase * nIva / 100 ) + nPrecioBase
               else
                  nPrecioIvaIncluido   := ( dbfArt )->pVtaIva2
                  nPrecioBase          := ( dbfArt )->Pventa2
               end

            case nTarifa == 3
               if ( dbfArt )->lBnf3
                  if empty( nPrecioCosto)
                  nPrecioCosto         := nCosto( nil, dbfArt, dbfArtKit )
                  end
                  nPrecioBase          := ( nPrecioCosto * ( dbfArt )->Benef3 / 100 ) + nPrecioCosto
                  nPrecioIvaIncluido   := ( nPrecioBase * nIva / 100 ) + nPrecioBase
               else
                  nPrecioIvaIncluido   := ( dbfArt )->pVtaIva3
                  nPrecioBase          := ( dbfArt )->Pventa3
               end

            case nTarifa == 4
               if ( dbfArt )->lBnf4
                  if empty( nPrecioCosto)
                  nPrecioCosto         := nCosto( nil, dbfArt, dbfArtKit )
                  end
                  nPrecioBase          := ( nPrecioCosto * ( dbfArt )->Benef4 / 100 ) + nPrecioCosto
                  nPrecioIvaIncluido   := ( nPrecioBase * nIva / 100 ) + nPrecioBase
               else
                  nPrecioIvaIncluido   := ( dbfArt )->pVtaIva4
                  nPrecioBase          := ( dbfArt )->Pventa4
               end

            case nTarifa == 5
               if ( dbfArt )->lBnf5
                  if empty( nPrecioCosto)
                  nPrecioCosto         := nCosto( nil, dbfArt, dbfArtKit )
                  end
                  nPrecioBase          := ( nPrecioCosto * ( dbfArt )->Benef5 / 100 ) + nPrecioCosto
                  nPrecioIvaIncluido   := ( nPrecioBase * nIva / 100 ) + nPrecioBase
               else
                  nPrecioIvaIncluido   := ( dbfArt )->pVtaIva5
                  nPrecioBase          := ( dbfArt )->Pventa5
               end

            case nTarifa == 6
               if ( dbfArt )->lBnf6
                  if empty( nPrecioCosto)
                  nPrecioCosto         := nCosto( nil, dbfArt, dbfArtKit )
                  end
                  nPrecioBase          := ( nPrecioCosto * ( dbfArt )->Benef6 / 100 ) + nPrecioCosto
                  nPrecioIvaIncluido   := ( nPrecioBase * nIva / 100 ) + nPrecioBase
               else
                  nPrecioIvaIncluido   := ( dbfArt )->pVtaIva6
                  nPrecioBase          := ( dbfArt )->Pventa6
               end

         end

      else

         do case
            case nTarifa == 1
               nPrecioBase          := ( dbfArt )->pVenta1
               nPrecioIvaIncluido   := ( dbfArt )->pVtaIva1
            case nTarifa == 2
               nPrecioBase          := ( dbfArt )->pVenta2
               nPrecioIvaIncluido   := ( dbfArt )->pVtaIva2
            case nTarifa == 3
               nPrecioBase          := ( dbfArt )->pVenta3
               nPrecioIvaIncluido   := ( dbfArt )->pVtaIva3
            case nTarifa == 4
               nPrecioBase          := ( dbfArt )->pVenta4
               nPrecioIvaIncluido   := ( dbfArt )->pVtaIva4
            case nTarifa == 5
               nPrecioBase          := ( dbfArt )->pVenta5
               nPrecioIvaIncluido   := ( dbfArt )->pVtaIva5
            case nTarifa == 6
               nPrecioBase          := ( dbfArt )->pVenta6
               nPrecioIvaIncluido   := ( dbfArt )->pVtaIva6
         end

      end

      if ( nPrecioBase== 0 .OR. nPrecioIvaIncluido == 0 ) .AND. nTarifa > 1 .AND. lBuscaImportes
         nTarifa--
         loop
      else
         exit
      end

   end




   if oTarifa <> nil
      oTarifa:cText( nTarifa )
   end

   nPrecioIvaIncluido   := Round( nPrecioIvaIncluido, nDouDiv() )
   nPrecioBase          := Round( nPrecioBase, nDouDiv() )

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

Return ( if( lIvaInc, nPrecioIvaIncluido, nPrecioBase) )



Function nCosto( uTmp, dbfArt, dbfArtKit, lPic, cDivRet, dbfDiv, cCodCli )

   local oError
   local oBlock
   local nCosto      := 0
   local cCodArt     := ""
   local lKitArt     := .F.
   local nOrdArt
   local nOrdKit
   local nRecArt
   local nRecKit

   If( lPic == nil, lPic := .F., ) ;
   If( cCodCli == nil, cCodCli := "", ) ;

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   nOrdArt           := ( dbfArt )->( OrdSetFocus( "Codigo" ) )
   nRecArt           := ( dbfArt )->( Recno() )
   nOrdKit           := ( dbfArtKit   )->( OrdSetFocus( "cCodKit" ) )
   nRecKit           := ( dbfArtKit   )->( Recno() )

   do case
      case IsArray( uTmp )
         cCodArt     := uTmp[ ( dbfArt )->( fieldpos( "Codigo"  ) ) ]
         lKitArt     := uTmp[ ( dbfArt )->( fieldpos( "lKitArt" ) ) ]
      case IsChar( uTmp ) .AND. ( dbfArt )->( dbSeek( uTmp ) )
         cCodArt     := ( dbfArt )->Codigo
         lKitArt     := ( dbfArt )->lKitArt
      case empty( uTmp )
         cCodArt     := ( dbfArt )->Codigo
         lKitArt     := ( dbfArt )->lKitArt
   end

   if lKitArt

      if ( dbfArtKit )->( dbSeek( cCodArt ) )

         while ( dbfArtKit )->cCodKit == cCodArt .AND. !( dbfArtKit )->( eof() )



            if Empty( cCodCli )                    .OR. ( Empty( ArticulosModel():getField( "cExtFld", "Codigo", ( dbfArtKit )->cRefKit ) )  .OR.  ( Empty( AllTrim( getCustomExtraField( ArticulosModel():getField( "cExtFld", "Codigo", ( dbfArtKit )->cRefKit ), "Clientes", cCodCli ) ) ) .OR. AllTrim( getCustomExtraField( ArticulosModel():getField( "cExtFld", "Codigo", ( dbfArtKit )->cRefKit ), "Clientes", cCodCli ) ) == "si" ) )

               nCosto   += nCosto( ( dbfArtKit )->cRefKit, dbfArt, dbfArtKit ) * ( dbfArtKit )->nUndKit

            end

            ( dbfArtKit )->( dbSkip() )

         end

      end

   else

      nCosto         += pCosto( dbfArt )

   end

   ( dbfArt )->( OrdSetFocus( nOrdArt ) )
   ( dbfArt )->( dbGoTo( nRecArt ) )
   ( dbfArtKit   )->( OrdSetFocus( nOrdKit ) )
   ( dbfArtKit   )->( dbGoTo( nRecKit ) )

   if dbfDiv <> nil

      if cDivRet <> nil .AND. cDivRet <> cDivEmp()
         nCosto      := nCnv2Div( nCosto, cDivEmp(), cDivRet, dbfDiv )
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end
      else
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end
      end

   end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

return ( nCosto )



Function pCosto( dbfArt, lPic, cDivRet, dbfDiv, lFacCnv )

   local nCosto      := 0

   If( lPic == nil, lPic := .F., ) ;
   If( lFacCnv == nil, lFacCnv := .T., ) ;

   nCosto            := ( dbfArt )->pCosto





   if dbfDiv <> nil
      if cDivRet <> nil .AND. cDivRet <> cDivEmp()
         nCosto      := nCnv2Div( nCosto, cDivEmp(), cDivRet )
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end
      else
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end
      end
   end

return ( nCosto )



Static Function nFactorConversion( cCodArt )

Return ( NotCero( RetFld( cCodArt, D():Articulos( nView ), "nFacCnv" ) ) )



function saveLoteActual( cCodArt, cLote, nView )

   local nOrdSetFocus   := ( D():Articulos( nView ) )->( ordSetFocus( "Codigo" ) )






   if ( D():Articulos( nView ) )->( dbSeek( cCodArt ) )
      if ( D():Articulos( nView ) )->( dbRLock() )
         ( D():Articulos( nView ) )->cLote  := cLote
         ( D():Articulos( nView ) )->( dbRUnLock() )
      end
   end

   ( D():Articulos( nView ) )->( ordSetFocus( nOrdSetFocus ) )

RETURN NIL


function saveContadorActual( cCodArt, nCntAct, nView )

   local nOrdSetFocus   := ( D():Articulos( nView ) )->( ordSetFocus( "Codigo" ) )






   if ( D():Articulos( nView ) )->( dbSeek( cCodArt ) )
      if ( D():Articulos( nView ) )->( dbRLock() )
         ( D():Articulos( nView ) )->nCntAct  := nCntAct
         ( D():Articulos( nView ) )->( dbRUnLock() )
      end
   end

   ( D():Articulos( nView ) )->( ordSetFocus( nOrdSetFocus ) )

Return nil



Function lAccArticulo()

Return ( nAnd( Auth():Level( "01014" ), 1 ) == 0 )



Function BrwArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend, oBtn, oGetLote, oGetCodPrp1, oGetCodPrp2, oGetValPrp1, oGetValPrp2, oGetFecCad, cCodAlm )

   if ConfiguracionesEmpresaModel():getLogic( "lBrowseSql", .F. )
      return FastBrwArt( oGetCodigo, oGetNombre )
   end

   if !IsPda() .AND. !IsReport()
      if IsObject( oUser() ) .AND. oUser():lSelectorFamilia()
         Return ( BrwFamiliaArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend ) )
      end
   end

Return ( BrwSelArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend, nil, oBtn, oGetLote, oGetCodPrp1, oGetCodPrp2, oGetValPrp1, oGetValPrp2, oGetFecCad, cCodAlm ) )



Function BrwSelArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend, lEdit, oBtnSaveLine, oGetLote, oGetCodPrp1, oGetCodPrp2, oGetValPrp1, oGetValPrp2, oGetFecCad, cCodAlm )

   local oDlg
   local oBmp
   local oBtn
    local oBrw
   local oFont
    local aGet1
    local cGet1
   local nOrd           := GetBrwOpt( "BrwArticulo" )
   local nLevel         := Auth():Level( "01014" )
   local oCbxOrd
   local cCbxOrd
   local aCbxOrd        := { "Código", "Nombre" }
   local Ordenes        := { "Codigo", "Nombre" }
   local oSayText
   local cSayText       := "Listado de artículos"
   local oBmpImage
   local oBrwStock
   local cTxtOrigen     := ""
   local lCloseFiles    := .F.
   local oTreeInfo
   local oImageListInfo
   local nRecAnt
   local cReturn        := Space( 18 )
   local lPropiedades   := .F.
   local oBtnAceptarPropiedades

   nOrd                 := Min( Max( nOrd, 1 ), len( aCbxOrd ) )

   cCbxOrd              := aCbxOrd[ nOrd ]

   If( lCodeBar == nil, lCodeBar := .F., ) ;
   If( lAppend == nil, lAppend := .T., ) ;
   If( lEdit == nil, lEdit := .T., ) ;

   if !lOpenFiles

      lCloseFiles       := .T.

      if !OpenFiles( .T. )
         return nil
      end

   else

      nRecAnt           := ( D():Articulos( nView ) )->( Recno() )

   end

   if !empty( oGetCodigo )
      cTxtOrigen        := oGetCodigo:VarGet()
   end





   ( D():Articulos( nView ) )->( dbSetFilter( {|| !Field->lObs }, "!lObs" ) )





   if !empty( cTxtOrigen ) .AND. !( D():Articulos( nView ) )->( dbSeek( cTxtOrigen ) )
      ( D():Articulos( nView ) )->( OrdSetFocus( Ordenes[ nOrd ] ) )
      ( D():Articulos( nView ) )->( dbGoTop() )
   else
      ( D():Articulos( nView ) )->( OrdSetFocus( Ordenes[ nOrd ] ) )
   end





   if IsReport()
      oDlg = TDialog():New(,,,, "Seleccionar artículos", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )
   else
      if !uFieldEmpresa( "lNStkAct" )
         if getPvProfString( "Gamma", "ViewGamma", ".F.", cIniAplication() ) == ".T."
            oDlg = TDialog():New(,,,, "Seleccionar artículos", "HELPENTRYDUPSTKGAMMA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )
         else
            oDlg = TDialog():New(,,,, "Seleccionar artículos", "HELPENTRYDUPSTK",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )
         end
      else
         oDlg = TDialog():New(,,,, "Seleccionar artículos", "HELPENTRYDUP",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )
      end





      oBmp := TBitmap():ReDefine( 600, "gc_object_cube_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )

   end






        aGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,, "@!", {||       ( OrdClearScope( oBrw, D():Articulos( nView ) ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( SpecialSeek( nKey, nFlags, aGet1, oBrw, oCbxOrd, dbfCodebar ) ) }, .F., .F.,,,,,, nil,,, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( D():Articulos( nView ))->( OrdSetFocus( Ordenes[ oCbxOrd:nAt ] ) ), ( D():Articulos( nView ) )->( dbGoTop() ), oBrw:refresh(), aGet1:SetFocus(), oCbxOrd:refresh() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := D():Articulos( nView )
      oBrw:nMarqueeStyle   := 6
      oBrw:cName           := "Browse.Artículos selección"
      oBrw:Cargo           := {}

      with object ( oBrw:AddCol() )
         :cHeader          := "Seleccionando"
         :bEditValue       := {|| aScan( oBrw:Cargo, Eval( oBrw:bBookMark ) ) > 0 }
         :nWidth           := 20
         :SetCheck( { "Send", "Nil16" }, {|| SelectArticulo( oBrw ) } )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Codigo"
         :bEditValue       := {|| if( lCodeBar, ( D():Articulos( nView ) )->CodeBar, ( D():Articulos( nView ) )->Codigo ) }
         :nWidth           := 90
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Nombre"
         :bEditValue       := {|| ( D():Articulos( nView ) )->Nombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| AllTrim( oRetFld( ( D():Articulos( nView ) )->cCodTip, oTipart:oDbf ) ) }
         :nWidth           := 150
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Proveedor"
         :bEditValue       := {|| if( !empty( ( D():Articulos( nView ) )->cPrvHab ), AllTrim( ( D():Articulos( nView ) )->cPrvHab ) + " - " + RetProvee( ( D():Articulos( nView ) )->cPrvHab, dbfProv ), "" ) }
         :nWidth           := 220
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .F., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .T., D():Articulos( nView ), dbfDiv, dbfArtKit, D():TiposIva( nView ) ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      if !IsReport()

         if ( RolesModel():getRolVerPreciosCosto( Auth():rolUuid() ) )

            with object ( oBrw:AddCol() )
               :cHeader          := "Costo"
               :bStrData         := {|| nCosto( nil, D():Articulos( nView ), dbfArtKit, .T., if( lEuro, cDivChg(), cDivEmp() ), dbfDiv ) }
               :nWidth           := 80
               :nDataStrAlign    := 1
               :nHeadStrAlign    := 1
               :lHide            := .T.
            end

         end

      end

      oDetCamposExtra:addCamposExtra( oBrw )

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )

      if !IsReport() .AND. !uFieldEmpresa( "lNStkAct" )
         oBrw:bChange      := {|| ChangeBrwArt( oBrwStock, oBmpImage, oBrw, cCodAlm ) }
      end

      if !IsReport()







         oBmpImage := TImage():ReDefine( 300,,, oDlg,,, .F., .F.,,, .F.,, )

         oBmpImage:SetColor( , GetSysColor( 15 ) )

         oBmpImage:bLClicked  := {|| ShowImage( oBmpImage ) }
         oBmpImage:bRClicked  := {|| ShowImage( oBmpImage ) }





         if !uFieldEmpresa( "lNStkAct" )

            oBrwStock                        := IXBrowse():New( oDlg )

            oBrwStock:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
            oBrwStock:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

            oBrwStock:lFooter                := .T.
            oBrwStock:lHScroll               := .F.
            oBrwStock:nMarqueeStyle          := 5
            oBrwStock:cName                  := "Browse.Artículos.Stock"
            oBrwStock:lRecordSelector        := .F.

            oBrwStock:SetArray( {}, .T., , .F. )

            oBrwStock:CreateFromResource( 320 )

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Código"
               :cOrder              := "Código"
               :nWidth              := 80
               :bStrData            := {|| if( !empty( oBrwStock:aArrayData ), hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "almacen" ), "" ) }
               :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | cOrdenColumnaBrw( oCol, oBrwStock ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Almacén"
               :nWidth              := 180
               :bStrData            := {|| if( !empty( oBrwStock:aArrayData ), RetAlmacen( hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "almacen" ), dbfAlmT ), "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Prop. 1"
               :nWidth              := 60
               :bStrData            := {|| if( !empty( oBrwStock:aArrayData ), hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "valor1" ), "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Prop. 2"
               :nWidth              := 60
               :bStrData            := {|| if( !empty( oBrwStock:aArrayData ), hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "valor2" ), "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Lote"
               :nWidth              := 80
               :bStrData            := {|| if( !empty( oBrwStock:aArrayData ), hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "lote" ), "" ) }
               :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | cOrdenColumnaBrw( oCol, oBrwStock ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Unidades"
               :nWidth              := 80
               :bEditValue          := {|| if( !empty( oBrwStock:aArrayData ), hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "unidades" ), 0 ) }
               :cEditPicture        := MasUnd()
               :nFooterType         := 1
               :nDataStrAlign       := 1
               :nHeadStrAlign       := 1
               :nFootStrAlign       := 1
               :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | cOrdenColumnaBrw( oCol, oBrwStock ) }
            end

         end

      end

   if !isReport() .AND. !uFieldEmpresa( "lNStkAct" )




      oBtnAceptarPropiedades := TButton():ReDefine( 550, {||( lPropiedades := .T., if( lPresaveBrwSelArticulo( oBrwStock, ( D():Articulos( nView ) )->lMsgVta ), oDlg:end( 1 ), ) )}, oDlg,,, .F.,,,, .F. )

   end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





      TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, D():Articulos( nView ) ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. lAppend .AND. !IsReport() )},,, .F. )

   if !IsReport()

      if getPvProfString( "Gamma", "ViewGamma", ".F.", cIniAplication() ) == ".T."
         TBtnBmp():ReDefine( 141, "gamma_16",,,,,{|| ImportGamma():New():getStockProduct( AllTrim( ( D():Articulos( nView ) )->Codigo ) ) }, oDlg, .F., , .F.,  )
      end





      TButton():ReDefine( 502, {||( WinDupRec( oBrw, bEdit, D():Articulos( nView ) ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. lAppend .AND. !IsReport() )},,, .F. )

         if lAppend
            oDlg:AddFastKey( 113, {|| if( nAnd( nLevel, 2 ) <> 0, WinAppRec( oBrw, bEdit, D():Articulos( nView ) ), ) } )
         end

   end





      TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, D():Articulos( nView ) ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 .AND. lEdit .AND. !IsReport() )},,, .F. )

         if lEdit .AND. !IsReport()
            oDlg:AddFastKey( 114, {|| if( nAnd( nLevel, 4 ) <> 0, WinEdtRec( oBrw, bEdit, D():Articulos( nView ) ), ) } )
         end

      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 117,       {|| lPropiedades   := .T., if( lPresaveBrwSelArticulo( oBrwStock, ( D():Articulos( nView ) )->lMsgVta ), oDlg:end( 1 ), ) } )
      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

      oDlg:bStart       := {|| StartBrwSelArticulo( oGetLote, oBrw, oBrwStock, oBtnAceptarpropiedades, oBmpImage, cCodAlm ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if lCodeBar
         cReturn        := ( D():Articulos( nView ) )->CodeBar
      else
         cReturn        := ( D():Articulos( nView ) )->Codigo
      end

      if !empty( oGetCodigo )
         oGetCodigo:cText( Padr( cReturn, 200 ) )
      end

      if !empty( oGetNombre )
         oGetNombre:cText( ( D():Articulos( nView ) )->Nombre )
      end



      if !empty( oBrwStock )              .AND. lPropiedades                     .AND. Len(oBrwStock:aArrayData) <> 0

         if !empty( oGetLote )
            oGetLote:cText( hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "lote" ) )
            oGetLote:lValid()
            oGetLote:Refresh()
         end

         if !empty( oGetCodPrp1 )
            oGetCodPrp1 := hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "propiedad1" )
         end

         if !empty( oGetCodPrp2 )
            oGetCodPrp2 := hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "propiedad2" )
         end

         if !empty( oGetValPrp1 )
            oGetValPrp1:cText( hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "valor1" ) )
            oGetValPrp1:lValid()
            oGetValPrp1:SetFocus()
         end

         if !empty( oGetValPrp2 )
            oGetValPrp2:cText( hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "valor2" ) )
            oGetValPrp2:lValid()
            oGetValPrp2:SetFocus()
         end

      end

   end

   DestroyFastFilter( D():Articulos( nView ) )



   SetBrwOpt( "BrwArticulo", if( aCbxOrd[ oCbxOrd:nAt ] == "Código", 1, 2 ) )

   ( D():Articulos( nView ) )->( dbClearFilter() )

   if !empty( oBrw )
      oBrw:CloseData()
   end

   if !empty( oBrwStock )
      oBrwStock:CloseData()
   end

   if lCloseFiles
      CloseFiles()
   else
      ( D():Articulos( nView ) )->( dbGoTo( nRecAnt ) )
   end

   if oBmpImage <> nil
      oBmpImage:End()
   end

   if !empty( oGetCodigo )
      oGetCodigo:SetFocus()
   end

   if !empty( oBmp )
      oBmp:End()
   end

RETURN ( cReturn )



static function lPresaveBrwSelArticulo( oBrwStock, lMsgVta )

   if lMsgVta .AND. ( oBrwStock:nArrayAt > 0 ) .AND. ( len( oBrwStock:aArrayData ) > oBrwStock:nArrayAt ) .AND. hGet( oBrwStock:aArrayData[ oBrwStock:nArrayAt ], "unidades" ) < 0
      msginfo( "No hay stock suficiente para realizar la venta" )
      return .F.
   end

return .T.



Static Function StartBrwSelArticulo( oGetLote, oBrw, oBrwStock, oBtnAceptarpropiedades, oBmpImage, cCodAlm )

   if !IsReport()

      if !empty( oBrw )
         oBrw:Load()
      end

      if !empty( oBrwStock )
         oBrwStock:Load()
      end

      LoadBrwArt( oBrwStock, oBmpImage, cCodAlm )

   end

   if !empty( oBtnAceptarpropiedades )
      if empty( oGetLote )
         oBtnAceptarpropiedades:Hide()
      else
         oBtnAceptarpropiedades:Show()
      end
   end

RETURN ( nil )



static function cOrdenColumnaBrw( oCol, oBrwStock )

   local oColumn

   if !empty( oBrwStock )

      do case
         case AllTrim( oCol:cHeader ) == "Código"

            aSort( oBrwStock:aArrayData, , , {|x,y| hGet( x, "codigo_almacen" ) < hGet( y, "codigo_almacen" ) } )

            for each oColumn in oBrwStock:aCols
               oColumn:cOrder := ""
            next

            oCol:cOrder := "Código"

         case AllTrim( oCol:cHeader ) == "Lote"

            aSort( oBrwStock:aArrayData, , , {|x,y| hGet( x, "lote" ) < hGet( y, "lote" ) } )

            for each oColumn in oBrwStock:aCols
               oColumn:cOrder := ""
            next

            oCol:cOrder := "Lote"

         case AllTrim( oCol:cHeader ) == "Unidades"

            aSort( oBrwStock:aArrayData, , , {|x,y| hGet( x, "unidades_articulo" ) < hGet( y, "unidades_articulo" ) } )

            for each oColumn in oBrwStock:aCols
               oColumn:cOrder := ""
            next

            oCol:cOrder := "Unidades"

      end

      oBrwStock:Refresh()

   end

return .T.



Static Function InsertBrwSelArticulo( oGet, lCodeBar, oBtn )

   local lOk
   local cReturn

   lOk            := .T.

   if lCodeBar
      cReturn     := ( D():Articulos( nView ) )->CodeBar
   else
      cReturn     := ( D():Articulos( nView ) )->Codigo
   end

   if !empty( oGet )
      oGet:cText( cReturn )
      lOk         := oGet:lOldValid()
   end

   if lOk .AND. !empty( oBtn )
      oBtn:Click()
   end

RETURN ( cReturn )



Static Function ChangeBrwArt( oBrwStock, oBmpImage, oBrw, cCodAlm )

   if !empty( oTimerBrw )
      oTimerBrw:End()
      oTimerBrw    := nil
   endif

   oTimerBrw             := TTimer():New( 300, {|| LoadBrwArt( oBrwStock, oBmpImage, cCodAlm ) }, )
   oTimerBrw:hWndOwner   := oBrw:hWnd
   oTimerBrw:Activate()

Return .T.



Static Function LoadBrwArt( oBrwStock, oBmpImage, cCodAlm )

   local oBlock
   local oError

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !uFieldEmpresa( "lNStkAct" )
         if !empty( oTimerBrw )
            oTimerBrw:End()
            oTimerBrw    := nil
         endif
      end

      CursorWait()





      if oBmpImage <> nil
         oBmpImage:LoadBMP( cFileBmpName( ( D():Articulos( nView ) )->cImagen, .T. ) )
         oBmpImage:Refresh()
      end





      if !uFieldEmpresa( "lNStkAct" ) .AND. ( ( D():Articulos( nView ) )->nCtlStock <= 1 )

         cAliasStock                      := StocksModel():getSqlBrwArtStock( ( D():Articulos( nView ) )->Codigo, cCodAlm )

         if !Empty( oBrwStock )
            oBrwStock:SetArray( DBHScatter( cAliasStock ) )
            oBrwStock:MakeTotals()
            oBrwStock:GoTop()
            oBrwStock:Refresh()
         end

      end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

   CursorWE()

Return .T.



STATIC FUNCTION TransPrecio( nImporte, lChg )

   If( lChg == nil, lChg := .F., ) ;

   IF lChg
      nImporte    := nCnv2Div( nImporte, cDivEmp(), cDivChg() )
    end

RETURN ( Trans( nImporte, if( lChg, cPouChg, cPouDiv ) ) )



Static Function SpecialSeek( nKey, nFlags, oGet, oBrw, oCbx, dbfCodebar )

   local nRecno
   local xCadena     := ""
   local lResult     := AutoSeek( nKey, nFlags, oGet, oBrw, D():Articulos( nView ), .T. )

   if !lResult

      nRecno         := ( D():Articulos( nView ) )->( Recno() )




      xCadena        := Rtrim( oGet:cText() )


      if dbSeekInOrd( xCadena, "CodeBar", D():Articulos( nView ) )

         lResult     := .T.

      else


         if dbSeekInOrd( xCadena, "cCodBar", dbfCodeBar )                  .AND. dbSeekInOrd( ( dbfCodeBar )->cCodArt, "Codigo", D():Articulos( nView ) )

            lResult  := .T.

         end

      end

      if !lResult
         nRecno      := ( D():Articulos( nView ) )->( dbGoTo( nRecno ) )
      end

   end

   if lResult
      if !empty( oBrw:bChange )
         Eval( oBrw:bChange )
      end
   end

   oBrw:Refresh()

Return ( lResult )



FUNCTION RetFamArt( cCodArt, uArt )

   local oBlock
   local oError
   local lClose   := .F.
   local cTemp    := Space( 8 )

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if ( uArt ) == NIL
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @uArt ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if Valtype( uArt ) == "O"
      if uArt:Seek( cCodArt )
         cTemp    := uArt:Familia
      end
   else
      if ( uArt )->( DbSeek( cCodArt ) )
         cTemp    := ( uArt )->Familia
      end
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( uArt )->( dbCloseArea() )
   end

RETURN cTemp







FUNCTION lStockCompuestos( cCodArt, dbfArt )

   local lTmp     := .F.
   local aSta     := aGetStatus( dbfArt, .T. )

   if ( dbfArt )->( DbSeek( cCodArt ) )
      lTmp        := ( dbfArt )->lKitArt .AND. ( dbfArt )->nKitStk <= 2
   end

   SetStatus( dbfArt, aSta )

RETURN ( lTmp )







FUNCTION lPreciosCompuestos( cCodArt, dbfArt )

   local lTmp     := .F.
   local aSta     := aGetStatus( dbfArt, .T. )

   if ( dbfArt )->( dbSeek( cCodArt ) )
      lTmp        := ( dbfArt )->lKitArt .AND. ( dbfArt )->nKitPrc <= 2
   end

   SetStatus( dbfArt, aSta )

RETURN ( lTmp )






FUNCTION lImprimirCompuesto( cCodArt, dbfArt )

   local lTmp     := .F.
   local aSta     := aGetStatus( dbfArt, .T. )

   if ( dbfArt )->( DbSeek( cCodArt ) )
      lTmp        := !( ( dbfArt )->lKitArt .AND. ( dbfArt )->nKitImp <= 2 )
   end

   SetStatus( dbfArt, aSta )

RETURN ( lTmp )






Function cSeekCodebarView( cCodBar, nView )

Return ( alltrim( cSeekCodebar( cCodBar, D():ArticulosCodigosBarras( nView ), D():Articulos( nView ) ) ) )



Function cSeekCodebar( cCodBar, dbfCodebar, dbfArt )

   local cSeekCodeBar

   if IsObject( dbfCodebar )
      dbfCodebar              := dbfCodebar:cAlias
   end

   if IsObject( dbfArt )
      dbfArt                  := dbfArt:cAlias
   end

   cSeekCodebar               := cSeekInternalCodebar( cCodBar, dbfArt )

   if empty( cSeekCodebar )
      cSeekCodebar            := cSeekExternalCodebar( cCodBar, dbfCodebar, dbfArt )
   end

Return ( cSeekCodebar )



Function cSeekInternalCodebar( cCodigoBarra, dbfArt )

   local cCodigo
   local cPropiedad1
   local cPropiedad2

   cCodigo                    := left( cCodigoBarra, 6 )

   if dbSeekInOrd( cCodigo, "Matriz", dbfArt ) .OR. dbSeekInOrd( Upper( cCodigo ), "Matriz", dbfArt )

      cCodigo                 := alltrim( ( dbfArt )->Codigo )
      cPropiedad1             := alltrim( str( val( substr( cCodigoBarra, 7, 3 ) ) ) )
      cPropiedad2             := alltrim( str( val( substr( cCodigoBarra, 10, 3 ) ) ) )

      if !empty(cPropiedad1)
         cCodigo              += "." + cPropiedad1
      end

      if !empty(cPropiedad2)
         cCodigo              += "." + cPropiedad2
      end

      Return ( cCodigo )

   end

Return ( nil )



Function cSeekExternalCodebar( cCodBar, dbfCodebar, dbfArt )

   local n
   local cCodigo
   local cPropiedades         := ""
   local nOrdenAnterior



   n                          := At( ".", cCodBar )
   if n <> 0
      cCodigo                 := SubStr( cCodBar, 1, n - 1 )
      cPropiedades            := SubStr( cCodBar, n )
   else
      cCodigo                 := cCodBar
   end



   cCodigo                    := Alltrim( cCodigo )

   if dbSeekInOrd( cCodigo, "Codigo", dbfArt ) .OR. dbSeekInOrd( Upper( cCodigo ), "Codigo", dbfArt )
      Return ( cCodBar )
   end



   nOrdenAnterior          := ( dbfCodebar )->( OrdSetFocus( "cCodBar" ) )

   if ( dbfCodebar )->( dbSeek( cCodigo ) ) .OR. ( dbfCodebar )->( dbSeek( Upper( cCodigo ) ) )

      cCodigo              := ( dbfCodebar )->cCodArt

      if empty( cPropiedades )

         if !empty( ( dbfCodebar )->cValPr1 )
            cPropiedades   += "." + Rtrim( ( dbfCodebar )->cValPr1 )
         end

         if !empty( ( dbfCodebar )->cValPr2 )
            cPropiedades   += "." + Rtrim( ( dbfCodebar )->cValPr2 )
         end

      end

   end

   ( dbfCodebar )->( OrdSetFocus( nOrdenAnterior ) )

   if !empty( cPropiedades )
      cCodBar                 := Rtrim( cCodigo ) + cPropiedades
   else
      cCodBar                 := cCodigo
   end

Return ( cCodBar )



FUNCTION retArticulo( cCodArt, dbfArt )

   local oBlock
   local oError
   local nRecno
   local lClose   := .F.
    local cTemp        := Space( 30 )

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if empty( dbfArt )
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @dbfArt ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if IsObject( dbfArt )
      nRecno      := dbfArt:Recno()
      if dbfArt:Seek( cCodArt )
         cTemp    := Rtrim( dbfArt:Nombre )
      end
      dbfArt:GoTo( nRecno )
   else
      nRecno      := ( dbfArt )->( Recno() )
      if ( dbfArt )->( dbSeek( cCodArt ) )
         cTemp    := Rtrim( ( dbfArt )->Nombre )
      end
      ( dbfArt )->( dbGoTo( nRecno ) )
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de articulos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( dbfArt )->( dbCloseArea() )
   end

RETURN ( cTemp )
#line 18291 ".\.\Prg\Articulo.prg"
Static Function DataReport( oFr, lTemporal )

   local oError
   local oBlock

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   oFr:ClearDataSets()

   if lTemporal
      oFr:SetWorkArea(  "Artículos", ( tmpArticulo )->( Select() ), .F., { 0, 0, 0 } )
   else
      oFr:SetWorkArea(  "Artículos", ( D():Articulos( nView ) )->( Select() ), .F., { 0, 0, 0 } )
   end
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Familias", ( D():Familias( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Familias", cItemsToReport( aItmFam() ) )

   oFr:SetWorkArea(     "Ofertas", ( dbfOfe )->( Select() ) )
   oFr:SetFieldAliases( "Ofertas", cItemsToReport( aItmOfe() ) )

   oFr:SetWorkArea(     "Temporada", ( dbfTemporada )->( Select() ) )
   oFr:SetFieldAliases( "Temporada", cItemsToReport( aItmTemporada() ) )

   oFr:SetWorkArea(     "Códigos de barras", ( dbfCodebar )->( Select() ) )
   oFr:SetFieldAliases( "Códigos de barras", cItemsToReport( aItmBar() ) )

   oFr:SetWorkArea(     "Tipo artículo",  oTipArt:Select() )
   oFr:SetFieldAliases( "Tipo artículo",  cObjectsToReport( oTipArt:oDbf ) )

   oFr:SetWorkArea(     "Unidad de medición",  oUndMedicion:Select() )
   oFr:SetFieldAliases( "Unidad de medición",  cObjectsToReport( oUndMedicion:oDbf ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( dbfArtVta )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   if lTemporal
      oFr:SetMasterDetail( "Artículos",   "Precios por propiedades", {|| ( tmpArticulo )->Codigo + ( tmpArticulo )->cCodPrp1 + ( tmpArticulo )->cCodPrp2 + ( tmpArticulo )->cValPrp1 + ( tmpArticulo )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Ofertas",                 {|| ( tmpArticulo )->Codigo + ( tmpArticulo )->cCodPrp1 + ( tmpArticulo )->cCodPrp2 + ( tmpArticulo )->cValPrp1 + ( tmpArticulo )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Familias",                {|| ( tmpArticulo )->Familia } )
      oFr:SetMasterDetail( "Artículos",   "Categoria",               {|| ( tmpArticulo )->cCodCate } )
      oFr:SetMasterDetail( "Artículos",   "Temporada",               {|| ( tmpArticulo )->cCodTemp } )
      oFr:SetMasterDetail( "Artículos",   "Tipo artículo",           {|| ( tmpArticulo )->cCodTip } )
      oFr:SetMasterDetail( "Artículos",   "Fabricante",              {|| ( tmpArticulo )->cCodFab } )
      oFr:SetMasterDetail( "Artículos",   "Unidad de medición",      {|| ( tmpArticulo )->cUnidad } )
      oFr:SetMasterDetail( "Artículos",   "Códigos de barras",       {|| ( tmpArticulo )->Codigo } )
   else
      oFr:SetMasterDetail( "Artículos",   "Precios por propiedades", {|| ( D():Articulos( nView ) )->Codigo + ( D():Articulos( nView ) )->cCodPrp1 + ( D():Articulos( nView ) )->cCodPrp2 + ( D():Articulos( nView ) )->cValPrp1 + ( D():Articulos( nView ) )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Ofertas",                 {|| ( D():Articulos( nView ) )->Codigo + ( D():Articulos( nView ) )->cCodPrp1 + ( D():Articulos( nView ) )->cCodPrp2 + ( D():Articulos( nView ) )->cValPrp1 + ( D():Articulos( nView ) )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Familias",                {|| ( D():Articulos( nView ) )->Familia } )
      oFr:SetMasterDetail( "Artículos",   "Categoria",               {|| ( D():Articulos( nView ) )->cCodCate } )
      oFr:SetMasterDetail( "Artículos",   "Temporada",               {|| ( D():Articulos( nView ) )->cCodTemp } )
      oFr:SetMasterDetail( "Artículos",   "Tipo artículo",           {|| ( D():Articulos( nView ) )->cCodTip } )
      oFr:SetMasterDetail( "Artículos",   "Fabricante",              {|| ( D():Articulos( nView ) )->cCodFab } )
      oFr:SetMasterDetail( "Artículos",   "Unidad de medición",      {|| ( D():Articulos( nView ) )->cUnidad } )
      oFr:SetMasterDetail( "Artículos",   "Códigos de barras",       {|| ( D():Articulos( nView ) )->Codigo } )
   end

   oFr:SetResyncPair(      "Artículos",   "Precios por propiedades" )
   oFr:SetResyncPair(      "Artículos",   "Ofertas" )
   oFr:SetResyncPair(      "Artículos",   "Familias" )
   oFr:SetResyncPair(      "Artículos",   "Categoria" )
   oFr:SetResyncPair(      "Artículos",   "Temporada" )
   oFr:SetResyncPair(      "Artículos",   "Tipo artículo" )
   oFr:SetResyncPair(      "Artículos",   "Fabricante" )
   oFr:SetResyncPair(      "Artículos",   "Unidad de medición" )
   oFr:SetResyncPair(      "Artículos",   "Códigos de barras" )

   RECOVER USING oError

      msgStop( "Imposible crear data report" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

Return nil



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Artículos" )





   oFr:AddVariable(     "Artículos",            "Código de barras para primera propiedad",   "CallHbFunc('cArtBarPrp1')" )
   oFr:AddVariable(     "Artículos",            "Código de barras para segunda propiedad",   "CallHbFunc('cArtBarPrp2')" )
   oFr:AddVariable(     "Artículos",            "Nombre primera propiedad",                  "CallHbFunc('cNomValPrp1Art')" )
   oFr:AddVariable(     "Artículos",            "Nombre segunda propiedad",                  "CallHbFunc('cNomValPrp2Art')" )

Return nil



Function DesignReportArticulo( oFr, dbfDoc )

   local oLabel
   local nOrdAnt
   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   nOrdAnt        := ( D():Articulos( nView ) )->( OrdSetFocus( "Cod" ) )

   if lFlag

      oLabel      := TArticuloLabelGenerator()

      if oLabel:lCreateTemporal()





         DataReport( oFr, .T. )





         if !empty( ( dbfDoc )->mReport )

            oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

         else

            oFr:AddPage(         "MainPage" )

            oFr:AddBand(         "MasterData",  "MainPage",       6 )
            oFr:SetProperty(     "MasterData",  "Top",            200 )
            oFr:SetProperty(     "MasterData",  "Height",         100 )
            oFr:SetObjProperty(  "MasterData",  "DataSet",        "Artículos" )

         end





         VariableReport( oFr )





         oFr:DesignReport()





         oFr:DestroyFr()





         oLabel:DestroyTemporal()

      else

         lFlag    := .F.

      end

   end

   if lOpen
      CloseFiles()
   end

Return ( lFlag )



Function PrintReportArticulo( nDevice, nCopies, cPrinter, dbfDoc )

   local oFr

   If( nDevice == nil, nDevice := 2, ) ;
   If( nCopies == nil, nCopies := 1, ) ;
   If( cPrinter == nil, cPrinter := ImpresoraDefectoUsuario(), ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

Return .T.



Static Function dlgToolTip( cCodArt, oBrw )

   local oBmpImage
   local oBrwStock
   local oTreeInfo
   local oImageListInfo
   local oDlgToolTip
   local aStock         := {}
   local cAlias

   if ( ( D():Articulos( nView ) )->nCtlStock <= 1 )
      cAlias            := StocksModel():getSqlBrwStock( cCodArt )
   end





   oDlgToolTip = TDialog():New(,,,,, "ArtToolTip",, .F.,,,,, oBrw, .F.,,,,,, .F.,, "oDlgToolTip", nil, )








      oBmpImage := TImage():ReDefine( 110,, cFileBmpName( ( D():Articulos( nView ) )->cImagen, .T. ), oDlgToolTip,,, .F., .F.,,, .F.,, )

      oBmpImage:SetColor( , GetSysColor( 15 ) )

      oBmpImage:bLClicked              := {|| ShowImage( oBmpImage ) }
      oBmpImage:bRClicked              := {|| ShowImage( oBmpImage ) }





      oTreeInfo                        := TTreeView():Redefine( 120, oDlgToolTip )

      oImageListInfo                   := TImageList():New( 16, 16 )

      oImageListInfo:AddMasked( TBitmap():Define( "gc_object_cube_16" ),   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
      oImageListInfo:AddMasked( TBitmap():Define( "gc_star2_16" ),      ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
      oImageListInfo:AddMasked( TBitmap():Define( "gc_calendar_16" ),      ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )





      oBrwStock                        := IXBrowse():New( oDlgToolTip )

      oBrwStock:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwStock:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwStock:cAlias                 := cAlias
      oBrwStock:lFooter                := .T.
      oBrwStock:lHScroll               := .T.
      oBrwStock:nMarqueeStyle          := 5
      oBrwStock:cName                  := "Tooltip artículos"
      oBrwStock:lRecordSelector        := .F.

      oBrwStock:CreateFromResource( 100 )

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Código"
         :nWidth              := 40
         :bStrData            := {|| ( cAlias )->almacen }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Almacén"
         :nWidth              := 150
         :bStrData            := {|| RetAlmacen( ( cAlias )->almacen, dbfAlmT ) }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Prop. 1"
         :nWidth              := 40
         :bStrData            := {|| ( cAlias )->valor1 }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Prop. 2"
         :nWidth              := 40
         :bStrData            := {|| ( cAlias )->valor2 }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Lote"
         :nWidth              := 60
         :bStrData            := {|| ( cAlias )->lote }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Bultos"
         :nWidth              := 60
         :bEditValue          := {|| ( cAlias )->bultos }
         :cEditPicture        := MasUnd()
         :nFooterType         := 1
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Cajas"
         :nWidth              := 60
         :bEditValue          := {|| ( cAlias )->cajas }
         :cEditPicture        := MasUnd()
         :nFooterType         := 1
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Unidades"
         :nWidth              := 60
         :bEditValue          := {|| ( cAlias )->unidades }
         :cEditPicture        := MasUnd()
         :nFooterType         := 1
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

   oDlgToolTip:bStart   := {|| startToolTip( cCodArt, oBrwStock, oTreeInfo, oImageListInfo ) }

Return ( oDlgToolTip )



Static Function startToolTip( cCodArt, oBrwStock, oTreeInfo, oImageListInfo )

   local sStock
   local nStockMinimo
   local nStockUnidades

   CursorWait()

   oTreeInfo:SetImageList( oImageListInfo )

   switch ( nTipoOferta() )
      case 1
         oTreeInfo:Add( "Artículo actualmente en oferta por importes.", 1 )
      case 2
         oTreeInfo:Add( "Artículo actualmente en oferta de tipo X*Y.", 1 )
   end

   oTreeInfo:Add( "Fecha de creación " + Dtoc( ( D():Articulos( nView ) )->LastChg ), 2 )

   if !empty( ( D():Articulos( nView ) )->dFecChg )
      oTreeInfo:Add( "Última modificación " + Dtoc( ( D():Articulos( nView ) )->dFecChg ), 2 )
   end

   if !empty( oBrwStock )
      oBrwStock:MakeTotals()
      oBrwStock:Load()
      oBrwStock:GoTop()
      oBrwStock:Refresh()
   end

   CursorWE()

Return nil



Static Function nTipoOferta()

   local nOferta     := 0

   if ( dbfOfe )->( dbSeek( ( D():Articulos( nView ) )->Codigo ) )

      while ( dbfOfe )->cArtOfe == ( D():Articulos( nView ) )->Codigo .AND. !( dbfOfe )->( eof() )






         if ( GetSysDate() >= ( dbfOfe )->dIniOfe .OR. empty( ( dbfOfe )->dIniOfe ) ) .AND.  ( GetSysDate() <= ( dbfOfe )->dFinOfe .OR. empty( ( dbfOfe )->dFinOfe ) )

            nOferta  := ( dbfOfe )->nTipOfe

            exit

         end

         ( dbfOfe )->( dbSkip() )

      end

   end

Return ( nOferta )



Static Function ChangePosition( lInc )

   local aPos
   local nPos     := 1
   local aRec     := {}
   local nRec     := ( D():Articulos( nView ) )->( Recno() )
   local nOrd     := ( D():Articulos( nView ) )->( OrdSetFocus( "nPosTpv" ) )
   local cFam     := ( D():Articulos( nView ) )->Familia

   CursorWait()

   do case
      case IsTrue( lInc )

         if ( D():Articulos( nView ) )->( dbRLock() )
            ( D():Articulos( nView ) )->nPosTpv   := ( D():Articulos( nView ) )->nPosTpv + 1.5
         end
         ( D():Articulos( nView ) )->( dbUnLock() )

      case IsFalse( lInc )

         if ( D():Articulos( nView ) )->( dbRLock() )
            ( D():Articulos( nView ) )->nPosTpv   := ( D():Articulos( nView ) )->nPosTpv - 1.5
         end
         ( D():Articulos( nView ) )->( dbUnLock() )

   end



   ( D():Articulos( nView ) )->( dbGoTop() )
   while !( D():Articulos( nView ) )->( eof() )

      if cFam == ( D():Articulos( nView ) )->Familia .AND. ( D():Articulos( nView ) )->lIncTcl
         aAdd( aRec, { ( D():Articulos( nView ) )->( Recno() ), nPos++ } )
      end

      ( D():Articulos( nView ) )->( dbSkip() )

   end



   for each aPos in aRec

      ( D():Articulos( nView ) )->( dbGoTo( aPos[ 1 ] ) )

      if ( D():Articulos( nView ) )->( dbRLock() )
         ( D():Articulos( nView ) )->nPosTpv      := aPos[ 2 ]
         ( D():Articulos( nView ) )->( dbUnLock() )
      end

   next



   CursorWE()

   ( D():Articulos( nView ) )->( dbGoTo( nRec ) )
   ( D():Articulos( nView ) )->( OrdSetFocus( nOrd ) )

Return ( nil )



Static Function changeTactil()

   local nRec

   for each nRec in ( oWndBrw:oBrw:aSelected )

      ( D():Articulos( nView ) )->( dbGoTo( nRec ) )

      if ( D():Articulos( nView ) )->( dbRLock() )
         ( D():Articulos( nView ) )->lIncTcl   := !( D():Articulos( nView ) )->lIncTcl
         ( D():Articulos( nView ) )->( dbCommit() )
         ( D():Articulos( nView ) )->( dbUnLock() )
      end

   next

Return ( nil )



Function ChangePublicar()

   local nRec

   for each nRec in ( oWndBrw:oBrw:aSelected )

      ( D():Articulos( nView ) )->( dbGoTo( nRec ) )

      if ( D():Articulos( nView ) )->( dbRLock() )
         ( D():Articulos( nView ) )->lPubInt   := !( D():Articulos( nView ) )->lPubInt
         ( D():Articulos( nView ) )->lSndDoc   := ( D():Articulos( nView ) )->lPubInt
         ( D():Articulos( nView ) )->( dbCommit() )
         ( D():Articulos( nView ) )->( dbUnLock() )
      end

      if ( D():Articulos( nView ) )->lPubInt
         ChangeFamiliaInt(       ( D():Articulos( nView ) )->Familia   )
         ChangePropiedadesInt(   ( D():Articulos( nView ) )->cCodPrp1  )
         ChangePropiedadesInt(   ( D():Articulos( nView ) )->cCodPrp2  )
         ChangeTipArtInt(        ( D():Articulos( nView ) )->cCodTip   )

      end

   next

   oWndBrw:Refresh( .T. )

Return nil



static function ChangePublicarTemporal( aTmp )

   if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lPubInt" ) ) ]
      ChangeFamiliaInt(       aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Familia"  ) ) ] )
      ChangePropiedadesInt(   aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp1" ) ) ] )
      ChangePropiedadesInt(   aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodPrp2" ) ) ] )
      ChangeTipArtInt(        aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cCodTip"  ) ) ] )



   end

   if !empty( oWndBrw )
      oWndBrw:Refresh( .T. )
   end

Return nil



static function ChangeFamiliaInt( cCodFam )

   local nRec

   if !empty( cCodFam )

      nRec  := ( D():Familias( nView ) )->( Recno() )

      if dbSeekInOrd( cCodFam, "CCODFAM", D():Familias( nView ) )

         if ( D():Familias( nView ) )->( dbRLock() )
            ( D():Familias( nView ) )->lPubInt   := .T.
            ( D():Familias( nView ) )->lSelDoc   := .T.
            ( D():Familias( nView ) )->( dbCommit() )
            ( D():Familias( nView ) )->( dbUnLock() )
         end

         if !empty( ( D():Familias( nView ) )->cCodGrp )
            ChangeGrpFamInt( ( D():Familias( nView ) )->cCodGrp )
         end

      end

      ( D():Familias( nView ) )->( dbGoto( nRec ) )

   end

return nil



static function ChangePropiedadesInt( cCodPro )

   local nRec

   if !empty( cCodPro )

      nRec  := ( dbfPro )->( Recno() )

      if dbSeekInOrd( cCodPro, "CCODPRO", dbfPro )

         if ( dbfPro )->( dbRLock() )
            ( dbfPro )->lPubInt   := .T.
            ( dbfPro )->lSndDoc   := .T.
            ( dbfPro )->( dbCommit() )
            ( dbfPro )->( dbUnLock() )
         end

      end

      ( dbfPro )->( dbGoto( nRec ) )

   end

return nil



static function ChangeTipArtInt( cCodTip )

   local nRec

   if !empty( cCodTip )

      nRec  := oTipart:oDbf:Recno()

      if oTipart:oDbf:SeekInOrd( cCodTip, "CCODTIP" )

         oTipart:oDbf:Load()
         oTipart:oDbf:lPubInt   := .T.
         oTipart:oDbf:lSelect   := .T.
         oTipart:oDbf:Save()

      end

      oTipart:oDbf:GoTo( nRec )

   end

return nil



static function ChangeGrpFamInt( cCodGrp )

   local nRec

   if !empty( cCodGrp )

      nRec  := oGrpFam:oDbf:Recno()

      if oGrpFam:oDbf:SeekInOrd( cCodGrp, "CCODGRP" )

         oGrpFam:oDbf:Load()
         oGrpFam:oDbf:lPubInt   := .T.
         oGrpFam:oDbf:lSndDoc   := .T.
         oGrpFam:oDbf:Save()

      end

      oGrpFam:oDbf:GoTo( nRec )

   end

return nil



Function ChangelSndDoc( aTmp )

   local nRec

   for each nRec in ( oWndBrw:oBrw:aSelected )

      ( D():Articulos( nView ) )->( dbGoTo( nRec ) )

      if ( D():Articulos( nView ) )->( dbRLock() )
         ( D():Articulos( nView ) )->lSndDoc   := !( D():Articulos( nView ) )->lSndDoc
         ( D():Articulos( nView ) )->( dbCommit() )
         ( D():Articulos( nView ) )->( dbUnLock() )
      end

   next

   oWndBrw:Refresh()

Return nil



function dFechaCaducidad( dFechaDocumento, nDiasCaducidad, nTipoPeriodo )

   local dFecCad

   do case

      case  nTipoPeriodo <= 1

         dFecCad  := dFechaDocumento + nDiasCaducidad

      case  nTipoPeriodo == 2

         dFecCad  := dFechaDocumento + ( nDiasCaducidad * 30 )

      case  nTipoPeriodo == 3

         dFecCad  := dFechaDocumento + ( nDiasCaducidad * 365 )

   end

return ( dFecCad )



Function nStockBrowse( oBrwStock, nPos )

   local nStock   := 0

   If( nPos == nil, nPos := 6, ) ;

   if !empty( oBrwStock ) .AND. !empty( oBrwStock:aArrayData )
      aEval( oBrwStock:aArrayData, {|a| nStock += a[ nPos ] } )
   end

Return ( nStock )



Function nStockUnidades( oBrwStock, cCodigoAlmacen )

   local nStock   := 0

   if !empty( oBrwStock ) .AND. !empty( oBrwStock:aArrayData )
      if empty( cCodigoAlmacen )
         aEval( oBrwStock:aArrayData, {|a| nStock += a:nUnidades } )
      else
         aEval( oBrwStock:aArrayData, {|a| if( cCodigoAlmacen == oBrwStock:cCodigoAlmacen, nStock += a:nUnidades, ) } )
      end
   end

Return ( nStock )



FUNCTION cArtBarPrp1( uArt, uTblPro )

   local cBarPrp1    := ""

   If( uArt == nil, uArt := if( !empty( tmpArticulo ), tmpArticulo, D():Articulos( nView ) ), ) ;
   If( uTblPro == nil, uTblPro := dbfTblPro, ) ;

   if dbSeekInOrd( ( uArt )->cCodPrp1 + ( uArt )->cValPrp1, "cCodPro", uTblPro )
      cBarPrp1       := ( uTblPro )->nBarTbl
   end

RETURN ( cBarPrp1 )



FUNCTION cArtBarPrp2( uArt, uTblPro )

   local cBarPrp2    := ""

   If( uArt == nil, uArt := if( !empty( tmpArticulo ), tmpArticulo, D():Articulos( nView ) ), ) ;
   If( uTblPro == nil, uTblPro := dbfTblPro, ) ;

   if dbSeekInOrd( ( uArt )->cCodPrp2 + ( uArt )->cValPrp2, "cCodPro", uTblPro )
      cBarPrp2       := ( uTblPro )->nBarTbl
   end

RETURN ( cBarPrp2 )



Static Function SelectArticulo( oBrw )

   local nScan
   local uBook := Eval( oBrw:bBookMark )

   nScan       := aScan( oBrw:Cargo, uBook )
   if nScan == 0
      aAdd( oBrw:Cargo, uBook )
   else
      hb_ADel( oBrw:Cargo, nScan, .T. )
   end

Return nil



Static Function EdtImg( aTmp, aGet, dbfTmpImg, oBrw, aArt, bValid, nMode )

   local oDlg
   local oFld
   local oImgArt
   local oImgRmt
   local oImgBmp





   if nMode == 1

      ( dbfTmpImg )->( dbGoTop() )
      if ( dbfTmpImg )->( Eof() )
         aTmp[ ( dbfTmpImg )->( FieldPos( "lDefImg" ) ) ]   := .T.
      end

   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "imagenes de artículos", "Imagenes",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







      oFld := TFolder():ReDefine( 100, {"&Principal", "&HTML"}, { "Imagenes_1","Imagenes_2" }, oDlg,,,,, .F., )








      oImgArt := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ], aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( oImgArt, oImgBmp ) ) }, .F., .F.,,,,, {|Self|( GetBmp( oImgArt, oImgBmp ) )}, nil, "Lupa",, )





      oImgRmt := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( FieldPos( "cRmtArt" ) ) ], aTmp[ ( dbfTmpImg )->( FieldPos( "cRmtArt" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( FieldPos( "cNbrArt" ) ) ], aTmp[ ( dbfTmpImg )->( FieldPos( "cNbrArt" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( fieldpos( "lDefImg" ) ) ], aTmp[ ( dbfTmpImg )->( fieldpos( "lDefImg" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||        ( nMode <> 3 .AND. !aTmp[ ( dbfTmpImg )->( FieldPos( "lDefImg" ) ) ] )}, .F. )




      oImgBmp := TImage():ReDefine( 110,, cFileBmpName( aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ] ), oFld:aDialogs[1],,, .F., .T.,,, .F.,, )

      oImgBmp:SetColor( , GetSysColor( 15 ) )
      oImgBmp:bLClicked := {|| ShowImage( oImgBmp ) }
      oImgBmp:bRClicked := {|| ShowImage( oImgBmp ) }




      TButton():ReDefine( 3, {||( ShowImage( oImgBmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )




      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( FieldPos( "cHtmArt" ) ) ], aTmp[ ( dbfTmpImg )->( FieldPos( "cHtmArt" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( EndEdtImg( aTmp, dbfTmpImg, oBrw, nMode, oDlg ) )}, oDlg,,, .F., {||        ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart    := {|| oImgArt:SetFocus() }


   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndEdtImg( aTmp, dbfTmpImg, oBrw, nMode, oDlg ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



static function EndEdtImg( aTmp, dbfTmpImg, oBrw, nMode, oDlg )

   local nRec
   local aTemporal   := aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ]
   local lTemporal   := aTmp[ ( dbfTmpImg )->( FieldPos( "lDefImg" ) ) ]

   WinGather( aTmp, nil, dbfTmpImg, oBrw, nMode )

   if lTemporal

      nRec              := ( dbfTmpImg )->( RecNo() )

      ( dbfTmpImg )->( dbGoTop() )
      while !( dbfTmpImg )->( Eof() )

         if AllTrim( ( dbfTmpImg )->cImgArt ) <> AllTrim( aTemporal )
            ( dbfTmpImg )->lDefImg := .F.
         else
            ( dbfTmpImg )->lDefImg := .T.
      end

         ( dbfTmpImg )->( dbSkip() )

      end

      ( dbfTmpImg )->( dbGoto( nRec ) )

   end

   lCargaImagenes()

   if !empty( oBrw )
      oBrw:Refresh()
   end

   oDlg:end( 1 )

   lChangeImage   := .T.

Return ( .T. )



Static Function EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de artículo", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | " + "*.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116,       {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Function cFirstImage( cCodigoArticulo, dbfImage )

   local cFirstImage   := ""

   if dbSeekInOrd( cCodigoArticulo, "cCodArt", dbfImage )
      cFirstImage      := ( dbfImage )->cImgArt
   end

Return ( cFirstImage )



Function ChangeTarifaPrecioWeb( aGet, aTmp )

   if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "LSBRINT" ) ) ]

      if empty( oGetTarWeb )
         Return .F.
      end

      do case
         case oGetTarWeb:getTarifa() == 1
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA1" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA1" ) ) ] )

         case oGetTarWeb:getTarifa() == 2
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA2" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA2" ) ) ] )

         case oGetTarWeb:getTarifa() == 3
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA3" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA3" ) ) ] )

         case oGetTarWeb:getTarifa() == 4
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA4" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA4" ) ) ] )

         case oGetTarWeb:getTarifa() == 5
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA5" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA5" ) ) ] )

         case oGetTarWeb:getTarifa() == 6
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpInt1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVENTA6" ) ) ] )
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nImpIva1" ) ) ]:cText( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "PVTAIVA6" ) ) ] )

      end

   end

Return ( .T. )



Function nCostoUltimaCompra( cCodArt, dbfAlbPrvL, dbfFacPrvL )

   local nCosto   := 0

   do case
      case  ( dbfAlbPrvL )->( dbSeek( cCodArt ) ) .AND. ( dbfFacPrvL )->( dbSeek( cCodArt ) )

         if ( dbfAlbPrvL )->dFecAlb > ( dbfFacPrvL )->dFecFac
            nCosto   := ( dbfAlbPrvL )->nPreCom
         else
            nCosto   := ( dbfFacPrvL )->nPreCom
         end

      case  !( dbfAlbPrvL )->( dbSeek( cCodArt ) ) .AND. ( dbfFacPrvL )->( dbSeek( cCodArt ) )

         nCosto   := ( dbfFacPrvL )->nPreCom

      case  ( dbfAlbPrvL )->( dbSeek( cCodArt ) ) .AND. !( dbfFacPrvL )->( dbSeek( cCodArt ) )

         nCosto   := ( dbfAlbPrvL )->nPreCom

   end

return( nCosto )



_HB_CLASS SValorPropiedades ; function SValorPropiedades ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SValorPropiedades", iif( .F., { }, { @HBObject() } ), @SValorPropiedades() ) ) ;

   _HB_MEMBER { cCodPrp } ; oClass:AddMultiData(, Space( 20 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodPrp"}, .F. )
   _HB_MEMBER { cValPrp } ; oClass:AddMultiData(, Space( 40 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cValPrp"}, .F. )
   _HB_MEMBER { cDesPrp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDesPrp"}, .F. )
   _HB_MEMBER { nColor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nColor"}, .F. )
   _HB_MEMBER { lSel } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSel"}, .F. )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SValorPropiedades ;



Static Function ChangeFactorConversion( aTmp, aGet )

   if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "lFacCnv" ) ) ]

      if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nPesoKg" ) ) ] <> 0

         aGet[ ( D():Articulos( nView ) )->( fieldpos( "nFacCnv" ) ) ]:cText( 1 / aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nPesoKg" ) ) ] )

      else

         if aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nVolumen" ) ) ] <> 0
            aGet[ ( D():Articulos( nView ) )->( fieldpos( "nFacCnv" ) ) ]:cText( 1 / aTmp[ ( D():Articulos( nView ) )->( fieldpos( "nVolumen" ) ) ] )
         end

      end

   else

      aGet[ ( D():Articulos( nView ) )->( fieldpos( "nFacCnv" ) ) ]:cText( 1 )

   end

Return ( .T. )



Static Function buildWeb( idProduct, idShop )

   local TComercio   := TComercio():New( nView, oStock )

   if lPublishProductInPrestashop()
      TComercio:setWebToExport( idShop )
      TComercio:TPrestashopWebService:setDefaultValuesWeb( idShop )
      TComercio:controllerExportOneProductToPrestashop( idProduct )
   end

   if lDeleteProductInPrestashop()
      TComercio:setWebToExport( idShop )
      TComercio:controllerDeleteOneProductToPrestashop( idProduct )
   end

Return .T.



Static Function debugWeb( aTmp )

   local idShop      := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "cWebShop" ) ) ]
   local idProduct   := aTmp[ ( D():Articulos( nView ) )->( fieldpos( "Codigo" ) ) ]
   local TComercio   := TComercio():New( nView, oStock )

   TComercio:setDebugMode()
   TComercio:resetMegaCommand()

   if lPublishProductInPrestashop()
      TComercio:setWebToExport( idShop )
      TComercio:controllerExportOneProductToPrestashop( idProduct )
   end

   if lDeleteProductInPrestashop()
      TComercio:setWebToExport( idShop )
      TComercio:controllerDeleteOneProductToPrestashop( idProduct )
   end

Return .T.



Static Function lPublishProductInPrestashop()

Return ( ( D():Articulos( nView ) )->lPubInt .AND. !empty( ( D():Articulos( nView ) )->cWebShop ) )



Static Function lDeleteProductInPrestashop()

Return ( !( D():Articulos( nView ) )->lPubInt .AND. !empty( ( D():Articulos( nView ) )->cWebShop ) )



Static Function lValidImporteBase( oGet, uValue, nKey, hFields )

   local nPrecioBase             := 0
   local nPrecioIva              := 0
   local nPorcentajeIva          := 0
   local nPorcentajeBeneficio    := 0
   local lBeneficioSobreCosto    := .T.

   if nKey == 27
      Return .F.
   end

   nPorcentajeIva                := nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )

   nPrecioBase                   := uValue





   nPrecioIva                    := nPrecioBase + Round( ( nPrecioBase * nPorcentajeIva / 100 ), nDecDiv )





   if ( D():Articulos( nView ) )->pCosto <> 0

      lBeneficioSobreCosto       := ( D():Articulos( nView ) )->( fieldget( fieldpos( hFields[ "BeneficioSobre" ] ) ) ) <= 1

      nPorcentajeBeneficio       := nPorcentajeBeneficio( lBeneficioSobreCosto, nPrecioBase, ( D():Articulos( nView ) )->pCosto )

      if !( nPorcentajeBeneficio > 0 .AND. nPorcentajeBeneficio < 999 )
         nPorcentajeBeneficio    := 0
      end

   end





   if dbDialogLock( D():Articulos( nView ) )
      ( D():Articulos( nView ) )->( fieldput( fieldpos( hFields[ "Iva"       ] ), nPrecioIva ) )
      ( D():Articulos( nView ) )->( fieldput( fieldpos( hFields[ "Base"      ] ), nPrecioBase ) )
      ( D():Articulos( nView ) )->( fieldput( fieldpos( hFields[ "Beneficio" ] ), nPorcentajeBeneficio ) )
      ( D():Articulos( nView ) )->( dbUnlock() )
   end

Return .T.



Static Function lValidImporteIva( oGet, uValue, nKey, hFields )

   local nPrecioBase             := 0
   local nPrecioIva              := 0
   local nPorcentajeIva          := 0
   local nPorcentajeBeneficio    := 0
   local lBeneficioSobreCosto    := .T.

   if nKey == 27
      Return .F.
   end

   nPorcentajeIva                := nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )








      nPrecioIva                 := uValue






   nPrecioBase                   := Round( nPrecioIva / ( 1 + nPorcentajeIva / 100 ), nDecDiv )





   if ( D():Articulos( nView ) )->pCosto <> 0

      lBeneficioSobreCosto       := ( D():Articulos( nView ) )->( fieldget( fieldpos( hFields[ "BeneficioSobre" ] ) ) ) <= 1

      nPorcentajeBeneficio       := nPorcentajeBeneficio( lBeneficioSobreCosto, nPrecioBase, ( D():Articulos( nView ) )->pCosto )

      if !( nPorcentajeBeneficio > 0 .AND. nPorcentajeBeneficio < 999 )
         nPorcentajeBeneficio    := 0
      end

   end





   if dbDialogLock( D():Articulos( nView ) )
      ( D():Articulos( nView ) )->( fieldput( fieldpos( hFields[ "Iva"       ] ), nPrecioIva ) )
      ( D():Articulos( nView ) )->( fieldput( fieldpos( hFields[ "Base"      ] ), nPrecioBase ) )
      ( D():Articulos( nView ) )->( fieldput( fieldpos( hFields[ "Beneficio" ] ), nPorcentajeBeneficio ) )
      ( D():Articulos( nView ) )->( dbUnlock() )
   end

Return .T.



Static Function ValidPrecioCosto( aGet, oSayWeb )

   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef1" ) ) ]:lValid()
   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef2" ) ) ]:lValid()
   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef3" ) ) ]:lValid()
   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef4" ) ) ]:lValid()
   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef5" ) ) ]:lValid()
   aGet[ ( D():Articulos( nView ) )->( fieldpos( "Benef6" ) ) ]:lValid()

   aeval( oSayWeb, {|o| if( !empty(o), o:refresh(), ) } )

Return ( .T. )



FUNCTION cNomValPrp1Art( uArticulo, uTblPro )

   local cBarPrp1     := ""

   If( uArticulo == nil, uArticulo := if( !empty( tmpArticulo ), tmpArticulo, D():Articulos( nView ) ), ) ;
   If( uTblPro == nil, uTblPro := dbfTblPro, ) ;

   if dbSeekInOrd( ( uArticulo )->cCodPrp1 + ( uArticulo )->cValPrp1, "cCodPro", uTblPro )
      cBarPrp1        := ( uTblPro )->cDesTbl
   end

RETURN ( cBarPrp1 )



FUNCTION cNomValPrp2Art( uArticulo, uTblPro )

   local cBarPrp2     := ""

   If( uArticulo == nil, uArticulo := if( !empty( tmpArticulo ), tmpArticulo, D():Articulos( nView ) ), ) ;
   If( uTblPro == nil, uTblPro := dbfTblPro, ) ;

   if dbSeekInOrd( ( uArticulo )->cCodPrp2 + ( uArticulo )->cValPrp2, "cCodPro", uTblPro )
      cBarPrp2        := ( uTblPro )->cDesTbl
   end

RETURN ( cBarPrp2 )



Function ScriptArticulo()

   local aArticulos
   local dbfArt

   aArticulos           := {}

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Articulo.Dbf" ), ( cCheckArea( "ARTICULO", @dbfArt ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "Articulo.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   ( dbfArt )->( dbGoTop() )
   while !( dbfArt )->( eof() )

      if ( dbfArt )->lSndDoc
         aAdd( aArticulos, hashRecord( dbfArt ) )
      end

      ( dbfArt )->( dbSkip() )

   end

   ( dbfArt )->( dbCloseArea() )

   hb_MemoWrit( "c:\ads\art" + dtos( date() ) + strtran( time(), ":", "" ) , hb_serialize( aArticulos ) )

RETURN ( nil )



Function lPrecioMinimo( cCodigoArticulo, nPrecioVenta, nMode, dbfArt )

   if !uFieldEmpresa( "lPreMin")
      return .F.
   end

   if dbSeekInOrd( cCodigoArticulo, "Codigo", dbfArt ) .AND. ( nMode == 1 .OR. nMode == 4 )
      if !empty( ( dbfArt )->PvpRec ) .AND. ( dbfArt )->PvpRec > nPrecioVenta
         return .T.
      end
   end

return .F.



Static Function StockAlmacenes( aTmp, aGet, nMode )

   local oDlg
   local oBrwAlm

   oDlg = TDialog():New(,,,,, "ART_ALMACEN",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

   oBrwAlm                 := IXBrowse():New( oDlg )

   oBrwAlm:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwAlm:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwAlm:cAlias          := dbfTmpAlm

   oBrwAlm:nMarqueeStyle   := 6
   oBrwAlm:cName           := "Stock por almacenes"

      with object ( oBrwAlm:AddCol() )
         :cHeader          := "Código almacén"
         :bEditValue       := {|| ( dbfTmpAlm )->cCodAlm }
         :nWidth           := 100
      end

      with object ( oBrwAlm:AddCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| RetAlmacen( ( dbfTmpAlm )->cCodAlm, dbfAlmT ) }
         :nWidth           := 150
      end

      with object ( oBrwAlm:AddCol() )
         :cHeader          := "Stock mínimo"
         :bEditValue       := {|| ( dbfTmpAlm )->nStkMin }
         :nWidth           := 80
         :cEditPicture     := MasUnd()
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAlm:AddCol() )
         :cHeader          := "Stock máximo"
         :bEditValue       := {|| ( dbfTmpAlm )->nStkMax }
         :nWidth           := 80
         :cEditPicture     := MasUnd()
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAlm:AddCol() )
         :cHeader          := "Ubicación"
         :bEditValue       := {|| AllTrim( ( dbfTmpAlm )->cUbica ) }
         :nWidth           := 150
      end

      if nMode <> 3
         oBrwAlm:bLDblClick:= {|| WinEdtRec( oBrwAlm, bEdtAlm, dbfTmpAlm, aTmp ) }
      end

      oBrwAlm:CreateFromResource( 100 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwAlm, bEdtAlm, dbfTmpAlm, aTmp ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwAlm, bEdtAlm, dbfTmpAlm, aTmp ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwAlm, dbfTmpAlm ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 113, {|| WinAppRec( oBrwAlm, bEdtAlm, dbfTmpAlm, aTmp ) } )
         oDlg:AddFastKey( 114, {|| WinEdtRec( oBrwAlm, bEdtAlm, dbfTmpAlm, aTmp ) } )
         oDlg:AddFastKey( 115, {|| WinDelRec( oBrwAlm, dbfTmpAlm ) } )
         oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return nil



STATIC FUNCTION EdtAlm( aTmp, aGet, dbfTmpAlm, oBrw, bWhen, bValid, nMode )

   local oDlg



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "stock por almacenes", "ART_ALMACEN_EDICION",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      aGet[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ], aTmp[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ]:= u ) }, oDlg,,, {||       ( cAlmacen( aGet[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ], nil, aGet[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ]:oHelpText ) )},,,,,, .F., {||        ( nMode == 1 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ], aGet[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ]:oHelpText ) )}, nil, "Lupa",, 101 )







      aGet[ ( dbfTmpAlm )->( fieldPos( "nStkMin" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpAlm )->( fieldPos( "nStkMin" ) ) ], aTmp[ ( dbfTmpAlm )->( fieldPos( "nStkMin" ) ) ]:= u ) }, oDlg,, ( cPicUnd ),,,,,,, .F., {||        ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ ( dbfTmpAlm )->( fieldPos( "nStkMax" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpAlm )->( fieldPos( "nStkMax" ) ) ], aTmp[ ( dbfTmpAlm )->( fieldPos( "nStkMax" ) ) ]:= u ) }, oDlg,, ( cPicUnd ),,,,,,, .F., {||        ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ ( dbfTmpAlm )->( fieldPos( "cUbica" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpAlm )->( fieldPos( "cUbica" ) ) ], aTmp[ ( dbfTmpAlm )->( fieldPos( "cUbica" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( EndEdtAlm( aTmp, aGet, oBrw, oDlg, nMode ) )}, oDlg,,, .F., {||        ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| EndEdtAlm( aTmp, aGet, oBrw, oDlg, nMode ) } )

      oDlg:bStart    := {|| StartEdtAlm( aGet ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function StartEdtAlm( aGet )

   EvalGet( aGet )

Return nil



Static Function EndEdtAlm( aTmp, aGet, oBrw, oDlg, nMode )

   local lExiste  := .F.

   if nMode == 1

      if dbSeekInOrd( aTmp[ ( dbfTmpAlm )->( fieldPos( "cCodAlm" ) ) ], "cCodAlm", dbfTmpAlm )
         msgStop( "El código de almacén ya existe." )
         return nil
      end

   end

   if aTmp[ ( dbfTmpAlm )->( fieldPos( "nStkMax" ) ) ] <> 0 .AND. aTmp[ ( dbfTmpAlm )->( fieldPos( "nStkMax" ) ) ] < aTmp[ ( dbfTmpAlm )->( fieldPos( "nStkMin" ) ) ]
      msgStop( "El stock máximo debe ser mayor q el stock mínimo." )
      return nil
   end

   WinGather( aTmp, aGet, dbfTmpAlm, oBrw, nMode )

   oDlg:End( 1 )

Return nil



Function nStockMinimo( cCodigoArticulo, cCodigoAlmacen, nView )

   local nStockMinimo   := 0

   if uFieldEmpresa( "lStkAlm" )
      if ( D():ArticuloStockAlmacenes( nView ) )->( dbSeek( cCodigoArticulo + cCodigoAlmacen ) )
         nStockMinimo   := ( D():ArticuloStockAlmacenes( nView ) )->nStkMin
      end
   else
      nStockMinimo      := ( D():Articulos( nView ) )->nMinimo
   end

Return nStockMinimo



Function nStockMaximo( cCodigoArticulo, cCodigoAlmacen, nView )

   local nStockMaximo   := 0

   if uFieldEmpresa( "lStkAlm" )
      if ( D():ArticuloStockAlmacenes( nView ) )->( dbSeek( cCodigoArticulo + cCodigoAlmacen ) )
         nStockMaximo   := ( D():ArticuloStockAlmacenes( nView ) )->nStkMax
      end
   else
      nStockMaximo      := ( D():Articulos( nView ) )->nMaximo
   end

Return nStockMaximo



Function cArticulo( aGet, dbfArt, aGet2, lCodeBar )

   local oBlock
   local oError
   local nOrdAnt
   local lClose      := .F.
   local lValid      := .F.
   local cCodArt     := aGet:varGet()

   If( lCodeBar == nil, lCodeBar := .F., ) ;

   if empty( cCodArt ) .OR. ( cCodArt == Replicate( "Z", 18 ) )
      Return .T.
   end

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if empty( dbfArt )
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.Dbf" ), ( cCheckArea( "ARTICULO", @dbfArt ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose         := .T.
   end

   if lCodeBar
      nOrdAnt        := ( dbfArt )->( ordSetFocus( "CODEBAR" ) )
   else
      nOrdAnt        := ( dbfArt )->( ordSetFocus( "CODIGO" ) )
   end

   if ( dbfArt )->( dbSeek( cCodArt ) )

      if lCodeBar
         aGet:cText( (dbfArt)->CODEBAR )
      else
         aGet:cText( (dbfArt)->CODIGO )
      end

      if aGet2 <> nil
         aGet2:cText( (dbfArt)->NOMBRE )
      end

      lValid         := .T.

   else

      msgStop( "Artículo no encontrado", "Cadena buscada : " + cCodArt )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( dbfArt )->( dbCloseArea() )
   end

   if lCodeBar
      ( dbfArt )->( ordSetFocus( nOrdAnt ) )
   end

RETURN lValid






static function lCargaImagenes()

   local oTemporal

   aImgsArticulo              := {}

   ( dbfTmpImg )->( dbGoTop() )

   while !( dbfTmpImg )->( Eof() )

         oTemporal            := SImagenes()
         oTemporal:lSelect    := .F.
         oTemporal:Ruta       := ( dbfTmpImg )->cImgArt
         oTemporal:ToolTip    := ( dbfTmpImg )->cNbrArt

         aAdd( aImgsArticulo, oTemporal )

      ( dbfTmpImg )->( dbSkip() )

   end

   ( dbfTmpImg )->( dbGoTop() )

return .T.



Static function SeleccionaImagen( oBrwImg )

   aImgsArticulo[ oBrwImg:nArrayAt ]:lSelect    := !aImgsArticulo[ oBrwImg:nArrayAt ]:lSelect
   oBrwImg:Refresh()

return .T.



Static Function mSer2Mem()

   local sImage
   local mNumSer     := ""

   for each sImage in aImgsArticulo
      if sImage:lSelect
         mNumSer        += AllTrim( sImage:ruta ) + ","
      end
   next

Return ( mNumSer )



Static Function SelectImagen( aTmp )

   local cImagen
   local aNumSer
   local nPos

   aNumSer        := hb_aTokens( aTmp[ ( dbfTmpVta )->( fieldpos( "mImgWeb" ) ) ], "," )

   for each cImagen in aNumSer

      nPos        := aScan( aImgsArticulo, {|x| AllTrim( x:ruta ) == AllTrim( cImagen ) }  )

      if nPos <> 0
         aImgsArticulo[ nPos ]:lSelect    := .T.
      end

   next

Return ( nil )



FUNCTION PutLabel( dbfArt, oBrw )

   if dbDialogLock( dbfArt )
      ( dbfArt )->lLabel := !( dbfArt )->lLabel
      ( dbfArt )->( dbUnlock() )
   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL



FUNCTION AddLabel( dbfArt, oBrw )

   IF ( dbDialogLock( dbfArt ) )
      ( dbfArt )->nLabel++
      ( dbfArt )->( dbUnlock() )
   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL



FUNCTION DelLabel( dbfArt, oBrw )

   if ( dbDialogLock( dbfArt ) ) .AND. ( dbfArt )->nLabel > 1
      ( dbfArt )->nLabel--
      ( dbfArt )->( dbUnlock() )
   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL



FUNCTION ResLabel( dbfArt, oBrw, oMtr )

   local n        := 0
   local nRecno   := (dbfArt)->( RecNo() )

   CursorWait()

   ( dbfArt )->( dbGoTop() )

   while !( dbfArt )->( eof() )

      if ( ( dbfArt )->lLabel .OR. ( dbfArt )->nLabel <> 2 ) .AND. dbDialogLock( dbfArt )
         ( dbfArt )->lLabel := .F.
         ( dbfArt )->nLabel := 1
         ( dbfArt )->( dbUnlock() )
      end

      ( dbfArt )->( dbSkip() )

      if oMtr <> nil
         oMtr:Set( ++n )
      end

   end

   ( dbfArt )->( dbGoTo( nRecno ) )

   oBrw:refresh()

   if oMtr <> NIL
      oMtr:Set( 0 )
      oMtr:refresh()
   end

   CursorArrow()

RETURN NIL



FUNCTION EdtLabel( dbfArt, oLbx )

   local cPic     := "999"
   local uVar     := ( dbfArt )->nLabel
   local bValid   := { || .T. }

   if oLbx:lEditCol( 4, @uVar, cPic, bValid )

      if dbDialogLock( dbfArt )
         ( dbfArt )->nLabel := uVar
         ( dbfArt )->( dbUnlock() )
      end

      oLbx:DrawSelect()

   end

RETURN NIL



Function nDescuentoArticulo( cCodArt, cCodCli, nView )

   local nDescuento  := 0
   local nNumDto     := retFld( cCodCli, D():Clientes( nView ), "nDtoArt" )

   if empty( nNumDto )
      Return 0
   end

   if !dbSeekInOrd( cCodArt, "Codigo", D():Articulos( nView ) )
      Return 0
   end

   do case
      case nNumDto == 1
         nDescuento  := ( D():Articulos( nView ) )->nDtoArt1

      case nNumDto == 2
         nDescuento  := ( D():Articulos( nView ) )->nDtoArt2

      case nNumDto == 3
         nDescuento  := ( D():Articulos( nView ) )->nDtoArt3

      case nNumDto == 4
         nDescuento  := ( D():Articulos( nView ) )->nDtoArt4

      case nNumDto == 5
         nDescuento  := ( D():Articulos( nView ) )->nDtoArt5

      case nNumDto == 6
         nDescuento  := ( D():Articulos( nView ) )->nDtoArt6
   end

Return nDescuento



Static Function validMatrizCodigoBarras( codigoMatriz )

   local lValid   := .T.
   local aStatus

   if empty(codigoMatriz)
      Return ( .T. )
   end

   aStatus        := aGetStatus( D():Articulos( nView ), .T. )

   ( D():Articulos( nView ) )->( ordSetFocus( "Matriz" ) )

   if ( D():Articulos( nView ) )->( dbseek( codigoMatriz ) )
      lValid      := .F.
   end

   setStatus( D():Articulos( nView ), aStatus )

Return ( lValid )



Static Function generateMatrizCodigoBarras( getCodigoMatriz )

   local nValue
   local aStatus  := aGetStatus( D():Articulos( nView ), .T. )

   ( D():Articulos( nView ) )->( ordsetfocus( "Matriz" ) )
   ( D():Articulos( nView ) )->( dbgobottom() )

   nValue         := val( ( D():Articulos( nView ) )->( ordkeyval() ) ) + 1
   nValue         := strzero( nValue, 6 )

   getCodigoMatriz:cText( nValue )

   setStatus( D():Articulos( nView ), aStatus )

Return ( .T. )



Static Function calculaPorcentajeDescuento( oPorcentajeDescuento, nPrecioVenta, nPrecioInternet )

   if nPrecioVenta <> 0
      oPorcentajeDescuento:cText( ( 1 - ( nPrecioInternet / nPrecioVenta ) ) * 100 )
   end

Return ( .T. )



_HB_CLASS SImagenes ; function SImagenes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SImagenes", iif( .F., { }, { @HBObject() } ), @SImagenes() ) ) ;

   _HB_MEMBER { lSelect } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSelect"}, .F. )
   _HB_MEMBER { ruta } ; oClass:AddMultiData(, Space( 250 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"ruta"}, .F. )
   _HB_MEMBER { tooltip } ; oClass:AddMultiData(, Space( 250 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"tooltip"}, .F. )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SImagenes ;



Function getExtraFieldArticulo( cFieldName )

Return ( getExtraField( cFieldName, oDetCamposExtra, ( D():Articulos( nView ) )->Codigo ) )



Function nombrePrimeraPropiedadArticulo( view )

   If( view == nil, view := nView, ) ;

Return ( nombrePropiedad( ( tmpArticulo )->cCodPrp1, ( tmpArticulo )->cValPrp1, view ) )



Function nombreSegundaPropiedadArticulo( view )

   If( view == nil, view := nView, ) ;

Return ( nombrePropiedad( ( tmpArticulo )->cCodPrp2, ( tmpArticulo )->cValPrp2, view ) )



Static Function changeImpuestoEspecial( oGetValNewImp, aTmp )

   if !empty( oGetValNewImp )
      oGetValNewImp:cText( oNewImp:nValImp( aTmp[ ( D():Articulos( nView ) )->( fieldpos( "CCODIMP" ) ) ] ) )
      oGetValNewImp:Refresh()
   end

Return .T.



Static Function totalArticuloConImpuestoEspecialUno( nView )

Return ( oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp ) + ( D():Articulos( nView ) )->pVtaIva1 )



Static Function totalArticuloConImpuestoEspecialDos( nView )

Return ( oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp ) + ( D():Articulos( nView ) )->pVtaIva2 )



Static Function totalArticuloConImpuestoEspecialTres( nView )

Return ( oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp ) + ( D():Articulos( nView ) )->pVtaIva3 )



Static Function totalArticuloConImpuestoEspecialCuatro( nView )

Return ( oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp ) + ( D():Articulos( nView ) )->pVtaIva4 )



Static Function totalArticuloConImpuestoEspecialCinco( nView )

Return ( oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp ) + ( D():Articulos( nView ) )->pVtaIva5 )



Static Function totalArticuloConImpuestoEspecialSeis( nView )

Return ( oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp ) + ( D():Articulos( nView ) )->pVtaIva6 )



Function getProveedorPorDefectoArticulo( cCodigoArticulo, dbfProveedorArticulo )

   local proveedorPorDefectoArticulo   := ""

   if dbSeekInOrd( cCodigoArticulo, "lDefPrv", dbfProveedorArticulo )
      proveedorPorDefectoArticulo      := ( dbfProveedorArticulo )->cCodPrv
   end

Return ( proveedorPorDefectoArticulo )



Static Function infoWeb( aTmp )

   local aInfo

   if !( aTmp[ ( D():Articulos( nView ) )->( fieldPos( "lPubInt" ) ) ] )
      msgStop( "Este artículo no esta seleccionado para web" )
      Return nil
   end

   if empty( aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cWebShop" ) ) ] )
      msgStop( "Este artículo no tiene seleccionada web" )
      Return nil
   end

   aInfo          := TPrestashopId():getProductInformation( aTmp[ ( D():Articulos( nView ) )->( fieldPos( "Codigo" ) ) ], aTmp[ ( D():Articulos( nView ) )->( fieldPos( "cWebShop" ) ) ] )

   if empty( aInfo )
      msgStop( "No hay información de prestashop en este artículo.")
   else
      dialogInfoWeb( aInfo )
   end

Return ( nil )



Static Function dialogInfoWeb( aInfo )

   local oDlg
   local oTree

   oDlg = TDialog():New(,,,,, "ARTICULO_PRESTASHOP_ID",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

   oTree          := TTreeView():Redefine( 100, oDlg )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





   oDlg:bStart    := {|| aeval( aInfo, {|hash| oTree:add(   "[" + alltrim( hget( hash, "Web" ) ) + "] : "                  + if( hget( hash, "Documento" ) == "01", "Artículo", "Imagen" )  + " > " + alltrim( str( hget( hash, "Id" ) ) ) ) } ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static function lChangeObsoleto()

   if dbLock( D():Articulos( nView ) )
      ( D():Articulos( nView ) )->lObs    := !( D():Articulos( nView ) )->lObs
      ( D():Articulos( nView ) )->( dbUnlock() )
   end

   oWndBrw:oBrw:Refresh()

RETURN ( nil )



function aArtDoc()

   local aArtDoc  := {}

   aAdd( aArtDoc, { "cCodArt", "C",   18,  0, "Código del artículo" ,            "",                   "", "( cDbfCol )" } )
   aAdd( aArtDoc, { "cNombre", "C",  250,  0, "Nombre del documento" ,           "",                   "", "( cDbfCol )" } )
   aAdd( aArtDoc, { "cRuta",   "C",  250,  0, "Ruta del documento" ,             "",                   "", "( cDbfCol )" } )
   aAdd( aArtDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento" ,    "",                   "", "( cDbfCol )" } )

return ( aArtDoc )



STATIC FUNCTION EdtAsc( aTmp, aGet, dbfTmpAsc, oBrw, bWhen, bValid, nMode, aTmpArt )

   local oDlg

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "asociado", "ARTASC",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      aGet[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ], aTmp[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ]:= u ) }, oDlg,, "@!", {||    cArticulo( aGet[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ], nil, aGet[ ( dbfTmpAsc )->( fieldpos( "cDesAsc" ) ) ] )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|BrwSelArticulo( aGet[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ], nil, .F., .F., .F. )}, nil, "LUPA",, )






      aGet[ ( dbfTmpAsc )->( fieldpos( "cDesAsc" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpAsc )->( fieldpos( "cDesAsc" ) ) ], aTmp[ ( dbfTmpAsc )->( fieldpos( "cDesAsc" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ ( dbfTmpAsc )->( fieldpos( "nUndAsc" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpAsc )->( fieldpos( "nUndAsc" ) ) ], aTmp[ ( dbfTmpAsc )->( fieldpos( "nUndAsc" ) ) ]:= u ) }, oDlg,, MasUnd(),,,,,,, .F.,,, .F., .T.,,, {||      1}, {||   9999},, nil,,, )




      TButton():ReDefine( 1, {||( lPreSaveAsc( aGet, aTmp, dbfTmpAsc, D():Articulos( nView ), oBrw, nMode, oDlg, aTmpArt ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| lPreSaveAsc( aGet, aTmp, dbfTmpAsc, D():Articulos( nView ), oBrw, nMode, oDlg, aTmpArt ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Function lPreSaveAsc( aGet, aTmp, dbfTmpAsc, dbfArt, oBrw, nMode, oDlg, aTmpArt )

   if empty( aTmp[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ] )
      msgstop( "El código no puede estar vacío" )
      aGet[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ]:SetFocus()
      Return .F.
   end

   if aTmp[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ] == aTmpArt[ ( dbfArt )->( FieldPos( "Codigo" ) ) ]
      MsgStop( "El código es el mismo que el del asociado", "No se puede introducir" )
      aGet[ ( dbfTmpAsc )->( fieldpos( "cRefAsc" ) ) ]:SetFocus()
      Return .F.
   end

   WinGather( aTmp, aGet, dbfTmpAsc, oBrw, nMode )

return ( oDlg:end( 1 ) )



Static function informeEscandallo()

   local oDlg
   local oBmp
   local oBrw
   local oSay
   local aEscandallos               := {}
   local nRecAnt                    := ( dbfTmpKit )->( Recno() )

   if !getValueArticulo( ( dbfTmpKit )->cRefKit, "lKitArt" )
      Return .T.
   end

   aEscandallos                     := LoadInfoEscandallo()

   oDlg = TDialog():New(,,,,, "ART_INFO_KIT",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmp := TBitmap():ReDefine( 600, "gc_pieces_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )



      oSay := TSay():ReDefine( 150, {|| "Informe escandallo: " + AllTrim( ( dbfTmpKit )->cRefKit ) + " - " + AllTrim( ArticulosModel():getField( "Nombre", "Codigo", ( dbfTmpKit )->cRefKit ) )}, oDlg,,,, .F.,, .F., .F., )

      oBrw                          := IXBrowse():New( oDlg )

      oBrw:bClrSel                  := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus             := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:SetArray( aEscandallos, , , .F. )

      oBrw:nMarqueeStyle            := 6
      oBrw:lRecordSelector          := .F.
      oBrw:lHScroll                 := .F.
      oBrw:lFooter                  := .T.
      oBrw:cName                    := "Informe.Escandallo"

      oBrw:CreateFromResource( 100 )

      with object ( oBrw:AddCol() )
         :cHeader                   := "Código"
         :bStrData                  := {|| if( len( aEscandallos ) <> 0, hGet( aEscandallos[ oBrw:nArrayAt ], "Codigo" ) , "" ) }
         :nWidth                    := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader                   := "Nombre"
         :bStrData                  := {|| if( len( aEscandallos ) <> 0, getValueArticulo( hGet( aEscandallos[ oBrw:nArrayAt ], "Codigo" ), "Nombre" ) , "" ) }
         :nWidth                    := 190
      end

      with object ( oBrw:AddCol() )
         :cHeader                   := "Unidades"
         :bEditValue                := {|| if( len( aEscandallos ) <> 0, hGet( aEscandallos[ oBrw:nArrayAt ], "Unidades" ), "" ) }
         :nWidth                    := 100
         :cEditPicture              := "@E 999,999.999999"
         :nDataStrAlign             := 1
         :nHeadStrAlign             := 1
         :nFootStrAlign             := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader                   := "Costo"
         :bEditValue                := {|| if( len( aEscandallos ) <> 0, hGet( aEscandallos[ oBrw:nArrayAt ], "Costo" ), "" ) }
         :nWidth                    := 100
         :cEditPicture              := "@E 999,999.999999"
         :nDataStrAlign             := 1
         :nHeadStrAlign             := 1
         :nFootStrAlign             := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader                   := "Total"
         :bEditValue                := {|| if( len( aEscandallos ) <> 0, ( hGet( aEscandallos[ oBrw:nArrayAt ], "Unidades" ) * hGet( aEscandallos[ oBrw:nArrayAt ], "Costo" ) ), "" ) }
         :nWidth                    := 100
         :cEditPicture              := "@E 999,999.999999"
         :nDataStrAlign             := 1
         :nHeadStrAlign             := 1
         :nFooterType               := 1
         :nFootStrAlign             := 1
      end





      TButton():ReDefine( 560, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBrw:MakeTotals() )}, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:End()
   end

   aEscandallos               := {}
   ( dbfTmpKit )->( dbGoTo( nRecAnt ) )

return ( .T. )



Static Function LoadInfoEscandallo()

   local a
   local hKit
   local aKit  := {}

   hKit     := EscandallosArticuloModel():getList( ( dbfTmpKit )->cRefKit )

   for each a in hKit
      aAdd( aKit, { "Codigo" => hGet( a, "CREFKIT" ), "Unidades" => ( hGet( a, "NUNDKIT" ) * ( dbfTmpKit )->nUndKit ), "Costo" => nCosto( hGet( a, "CREFKIT" ), D():Articulos( nView ), D():Kit( nView ), .F., , D():Divisas( nView ) ) } )
   next

return ( aKit )



Function CreateArtQrCode( cText, cFileName )

   local cFile

   if Empty( cFileName )
      cFile    := AllTrim( ( D():Articulos( nView ) )->Codigo )
   else
      cFile    := AllTrim( cFileName )
   end

   CreateQrCode( AllTrim( cText ), AllTrim( cFile ), 3 )

Return .T.



Function cNameArtQrCode( cFileName )

   local cFile

   if Empty( cFileName )
      cFile    := AllTrim( ( D():Articulos( nView ) )->Codigo )
   else
      cFile    := AllTrim( cFileName )
   end

Return ( FullQrDir() + AllTrim( cFile ) + ".bmp" )
