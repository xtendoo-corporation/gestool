#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ArticulosCategoriasController.prg"
_HB_CLASS ArticulosCategoriasController ; function ArticulosCategoriasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosCategoriasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ArticulosCategoriasController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ArticulosCategoriasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ArticulosCategoriasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosCategoriasController ;



static FUNCTION ArticulosCategoriasController_New( oSenderController ) ; local Self AS CLASS ArticulosCategoriasController := QSelf() AS CLASS ArticulosCategoriasController

   ::Super:New( oSenderController )

   ::cTitle                      := "Articulos categorias"

   ::cName                       := "articulos_categorias"



   ::hImage                      := {  "16" => "gc_photographic_filters_16", "32" => "gc_photographic_filters_32", "48" => "gc_photographic_filters_48" }

   ::nLevel                      := Auth():Level( ::cName )

   ::oModel                      := SQLArticulosCategoriasModel():New( self )

   ::oBrowseView                 := ArticulosCategoriasBrowseView():New( self )

   ::oDialogView                 := ArticulosCategoriasView():New( self )

   ::oValidator                  := ArticulosCategoriasValidator():New( self, ::oDialogView )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oRepository                 := ArticulosCategoriasRepository():New( self )

   ::oGetSelector                := GetSelector():New( self )

RETURN ( Self )


static FUNCTION ArticulosCategoriasController_End( ) ; local Self AS CLASS ArticulosCategoriasController := QSelf() AS CLASS ArticulosCategoriasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oCamposExtraValoresController:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )











_HB_CLASS ArticulosCategoriasBrowseView ; function ArticulosCategoriasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosCategoriasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ArticulosCategoriasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ArticulosCategoriasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosCategoriasBrowseView ;



static FUNCTION ArticulosCategoriasBrowseView_addColumns( ) ; local Self AS CLASS ArticulosCategoriasBrowseView := QSelf() AS CLASS ArticulosCategoriasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "icono"
      :cHeader             := "Icono"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "icono" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS ArticulosCategoriasView ; function ArticulosCategoriasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosCategoriasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ArticulosCategoriasView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER { oTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTipo"}, .F. )

   _HB_MEMBER { hTipos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hTipos"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ArticulosCategoriasView_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ArticulosCategoriasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosCategoriasView ;



static FUNCTION ArticulosCategoriasView_New( oController ) ; local Self AS CLASS ArticulosCategoriasView := QSelf() AS CLASS ArticulosCategoriasView

   ::Super:New( oController )












   ::hTipos          := {  "Círculo azul"          => "bullet_ball_glass_blue_16", "Círculo verde"         => "bullet_ball_glass_green_16", "Cículo rojo"           => "bullet_ball_glass_red_16", "Cículo amarillo"       => "bullet_ball_glass_yellow_16", "Cuadrado azul"         => "bullet_square_blue_16", "Cuadrado verde"        => "bullet_square_green_16", "Cuadrado rojo"         => "bullet_square_red_16", "Cuadrado amarillo"     => "bullet_square_yellow_16", "Triángulo azul"        => "bullet_triangle_blue_16", "Triángulo verde"       => "bullet_triangle_green_16", "Triángulo rojo"        => "bullet_triangle_red_16", "Triángulo amarillo"    => "bullet_triangle_yellow_16" }

RETURN ( self )



static FUNCTION ArticulosCategoriasView_Activate( ) ; local Self AS CLASS ArticulosCategoriasView := QSelf() AS CLASS ArticulosCategoriasView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "categoria de articulos", "ARTICULO_CATEGORIA",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )







   ::oTipo := TComboBox():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "icono" ], ::oController:oModel:hBuffer[ "icono" ]:= u ) }, ( hgetkeys( ::hTipos ) ), ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )}, ( hgetvalues( ::hTipos ) ),,,,, "::oTipo",,,,,,, )






   ::oSayCamposExtra := TSay():ReDefine( 130, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()

RETURN ( ::oDialog:nResult )








_HB_CLASS ArticulosCategoriasValidator ; function ArticulosCategoriasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosCategoriasValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @ArticulosCategoriasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ArticulosCategoriasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosCategoriasValidator ;



static FUNCTION ArticulosCategoriasValidator_getValidators( ) ; local Self AS CLASS ArticulosCategoriasValidator := QSelf() AS CLASS ArticulosCategoriasValidator





   ::hValidators  := {  "nombre " =>               {  "required"           => "El nombre es un dato requerido", "unique"             => "El nombre introducido ya existe" }, "codigo" =>                {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe"  , "onlyAlphanumeric"   => "EL código no puede contener caracteres especiales" } }
RETURN ( ::hValidators )







_HB_CLASS SQLArticulosCategoriasModel ; function SQLArticulosCategoriasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLArticulosCategoriasModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLArticulosCategoriasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_categorias", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLArticulosCategoriasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLArticulosCategoriasModel ;



static FUNCTION SQLArticulosCategoriasModel_getColumns( ) ; local Self AS CLASS SQLArticulosCategoriasModel := QSelf() AS CLASS SQLArticulosCategoriasModel


   hset( ::hColumns, "id",       {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",     {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )
   ::getEmpresaColumns()


   hset( ::hColumns, "codigo",   {  "create"    => "VARCHAR( 20 )"                            , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "nombre",   {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "icono",    {  "create"    => "VARCHAR( 40 )"                           , "default"   => {|| space( 40 ) } }                       )

   ::getTimeStampColumns()

RETURN ( ::hColumns )







_HB_CLASS ArticulosCategoriasRepository ; function ArticulosCategoriasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosCategoriasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ArticulosCategoriasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLArticulosCategoriasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosCategoriasRepository ;