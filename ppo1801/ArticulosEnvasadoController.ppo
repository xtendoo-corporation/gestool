#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ArticulosEnvasadoController.prg"
_HB_CLASS ArticulosEnvasadoController ; function ArticulosEnvasadoController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosEnvasadoController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ArticulosEnvasadoController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER { oGetSelector } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetSelector"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ArticulosEnvasadoController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ArticulosEnvasadoController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosEnvasadoController ;



static FUNCTION ArticulosEnvasadoController_New( oSenderController ) ; local Self AS CLASS ArticulosEnvasadoController := QSelf() AS CLASS ArticulosEnvasadoController

   ::Super:New( oSenderController )

   ::cTitle                      := "Envasado"

   ::cName                       := "envasado"



   ::hImage                      := {  "16" => "gc_box_closed_16", "32" => "gc_box_closed_32", "48" => "gc_box_closed_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLArticulosEnvasadoModel():New( self )

   ::oBrowseView                    := ArticulosEnvasadoBrowseView():New( self )

   ::oDialogView                    := ArticulosEnvasadoView():New( self )

   ::oValidator                     := ArticulosEnvasadoValidator():New( self, ::oDialogView )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, "envases_articulos" )

   ::oRepository                    := ArticulosEnvasadoRepository():New( self )

   ::oGetSelector                   := GetSelector():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )


RETURN ( Self )



static FUNCTION ArticulosEnvasadoController_End( ) ; local Self AS CLASS ArticulosEnvasadoController := QSelf() AS CLASS ArticulosEnvasadoController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oCamposExtraValoresController:End()

   ::oRepository:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )







_HB_CLASS ArticulosEnvasadoBrowseView ; function ArticulosEnvasadoBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosEnvasadoBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ArticulosEnvasadoBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ArticulosEnvasadoBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosEnvasadoBrowseView ;



static FUNCTION ArticulosEnvasadoBrowseView_addColumns( ) ; local Self AS CLASS ArticulosEnvasadoBrowseView := QSelf() AS CLASS ArticulosEnvasadoBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS ArticulosEnvasadoView ; function ArticulosEnvasadoView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosEnvasadoView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ArticulosEnvasadoView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ArticulosEnvasadoView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activating(); oClass:AddMethod( "Activating", @ArticulosEnvasadoView_Activating(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosEnvasadoView ;



static FUNCTION ArticulosEnvasadoView_Activating( ) ; local Self AS CLASS ArticulosEnvasadoView := QSelf() AS CLASS ArticulosEnvasadoView

   if ::oController:isAppendOrDuplicateMode()
      ::oController:oModel:hBuffer()
   end

RETURN ( self )


static FUNCTION ArticulosEnvasadoView_Activate( ) ; local Self AS CLASS ArticulosEnvasadoView := QSelf() AS CLASS ArticulosEnvasadoView

   local oSayCamposExtra



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "envasado", "ARTICULO_ENVASADO",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode()  )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode()  )},, .F., .F.,,,,,, nil,,, )






   ::oSayCamposExtra := TSay():ReDefine( 120, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )

   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:End( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:End() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:End( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:End()

RETURN ( ::oDialog:nResult )








_HB_CLASS ArticulosEnvasadoValidator ; function ArticulosEnvasadoValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosEnvasadoValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ArticulosEnvasadoValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ArticulosEnvasadoValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosEnvasadoValidator ;



static FUNCTION ArticulosEnvasadoValidator_getValidators( ) ; local Self AS CLASS ArticulosEnvasadoValidator := QSelf() AS CLASS ArticulosEnvasadoValidator




   ::hValidators  := {  "codigo" =>    {  "required"           => "El código es un dato requerido", "unique"             => "El código introducido ya existe" } , "nombre" =>    {  "required"           => "El nombre es un dato requerido", "unique"             => "El nombre introducido ya existe" } }

RETURN ( ::hValidators )










_HB_CLASS SQLArticulosEnvasadoModel ; function SQLArticulosEnvasadoModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLArticulosEnvasadoModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLArticulosEnvasadoModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_envasado", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLArticulosEnvasadoModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLArticulosEnvasadoModel ;



static FUNCTION SQLArticulosEnvasadoModel_getColumns( ) ; local Self AS CLASS SQLArticulosEnvasadoModel := QSelf() AS CLASS SQLArticulosEnvasadoModel



   hset( ::hColumns, "id",          {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",        {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "codigo",      {  "create"    => "VARCHAR( 20 )"                            , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "nombre",      {  "create"    => "VARCHAR( 100 )"                          , "default"   => {|| space( 100 ) } }                       )

RETURN ( ::hColumns )












_HB_CLASS ArticulosEnvasadoRepository ; function ArticulosEnvasadoRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosEnvasadoRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ArticulosEnvasadoRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLArticulosEnvasadoModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosEnvasadoRepository ;