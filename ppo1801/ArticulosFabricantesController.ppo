#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ArticulosFabricantesController.prg"
_HB_CLASS ArticulosFabricantesController ; function ArticulosFabricantesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosFabricantesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ArticulosFabricantesController() ) ) ;

   _HB_MEMBER { oImagenesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oImagenesController"}, .F. )

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER { oGetSelector } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetSelector"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ArticulosFabricantesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ArticulosFabricantesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosFabricantesController ;



static FUNCTION ArticulosFabricantesController_New( oSenderController ) ; local Self AS CLASS ArticulosFabricantesController := QSelf() AS CLASS ArticulosFabricantesController

   ::Super:New( oSenderController )

   ::cTitle                         := "Fabricantes"

   ::cName                          := "fabricantes"



   ::hImage                         := {  "16" => "gc_bolt_16", "32" => "gc_bolt_32", "48" => "gc_bolt_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLArticulosFabricantesModel():New( self )

   ::oBrowseView                    := ArticulosFabricantesBrowseView():New( self )

   ::oDialogView                    := ArticulosFabricantesView():New( self )

   ::oValidator                     := ArticulosFabricantesValidator():New( self, ::oDialogView )

   ::oImagenesController            := ImagenesController():New( self )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oRepository                    := ArticulosFabricantesRepository():New( self )

   ::oGetSelector                   := GetSelector():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

   ::oModel:setEvent( "loadedBlankBuffer",            {|| ::oImagenesController:loadPrincipalBlankBuffer() } )
   ::oModel:setEvent( "insertedBuffer",               {|| ::oImagenesController:insertBuffer() } )

   ::oModel:setEvent( "loadedCurrentBuffer",          {|| ::oImagenesController:loadedCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "updatedBuffer",                {|| ::oImagenesController:updateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "loadedDuplicateCurrentBuffer", {|| ::oImagenesController:loadedDuplicateCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "loadedDuplicateBuffer",        {|| ::oImagenesController:loadedDuplicateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "deletedSelection",             {|| ::oImagenesController:deleteBuffer( ::getUuidFromRecno( ::oBrowseView:getBrowse():aSelected ) ) } )

RETURN ( Self )



static FUNCTION ArticulosFabricantesController_End( ) ; local Self AS CLASS ArticulosFabricantesController := QSelf() AS CLASS ArticulosFabricantesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oImagenesController:End()

   ::oCamposExtraValoresController:End()

   ::oRepository:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )







_HB_CLASS ArticulosFabricantesBrowseView ; function ArticulosFabricantesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosFabricantesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ArticulosFabricantesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ArticulosFabricantesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosFabricantesBrowseView ;



static FUNCTION ArticulosFabricantesBrowseView_addColumns( ) ; local Self AS CLASS ArticulosFabricantesBrowseView := QSelf() AS CLASS ArticulosFabricantesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "pagina_web"
      :cHeader             := "Página web"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "pagina_web" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS ArticulosFabricantesView ; function ArticulosFabricantesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosFabricantesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ArticulosFabricantesView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ArticulosFabricantesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activating(); oClass:AddMethod( "Activating", @ArticulosFabricantesView_Activating(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER getImagenesController(); oClass:AddInline( "getImagenesController", {|Self | ( ( Self ) ), ( ::oController:oImagenesController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosFabricantesView ;



static FUNCTION ArticulosFabricantesView_Activating( ) ; local Self AS CLASS ArticulosFabricantesView := QSelf() AS CLASS ArticulosFabricantesView

   if ::oController:isAppendOrDuplicateMode()
      ::oController:oModel:hBuffer()
   end

RETURN ( self )


static FUNCTION ArticulosFabricantesView_Activate( ) ; local Self AS CLASS ArticulosFabricantesView := QSelf() AS CLASS ArticulosFabricantesView

   local oGetImagen
   local oBmpImagen
   local oSayCamposExtra



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "fabricante", "FABRICANTES",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode()  )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode()  )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "pagina_web" ], ::oController:oModel:hBuffer[ "pagina_web" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )








   oGetImagen := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::getImagenesController():oModel:hBuffer[ "imagen" ], ::getImagenesController():oModel:hBuffer[ "imagen" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::getImagenesController():isNotZoomMode() )}, {|nKey,nFlags,Self| ( ChgBmp( oGetImagen, oBmpImagen ) ) }, .F., .F.,,,,, {|Self|( GetBmp( oGetImagen, oBmpImagen ) )}, nil, "Folder",, )




   oBmpImagen := TImage():ReDefine( 140,, cFileBmpName( ::getImagenesController():oModel:hBuffer[ "imagen" ] ), ::oDialog,,, .F., .F.,,, .F.,,, .F. )

      oBmpImagen:SetColor( , getsyscolor( 15 ) )
      oBmpImagen:bLClicked   := {|| ShowImage( oBmpImagen ) }
      oBmpImagen:bRClicked   := {|| ShowImage( oBmpImagen ) }






   ::oSayCamposExtra := TSay():ReDefine( 150, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )

   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:End( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:End() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:End( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:End()

  oBmpImagen:End()

RETURN ( ::oDialog:nResult )








_HB_CLASS ArticulosFabricantesValidator ; function ArticulosFabricantesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosFabricantesValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @ArticulosFabricantesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ArticulosFabricantesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosFabricantesValidator ;



static FUNCTION ArticulosFabricantesValidator_getValidators( ) ; local Self AS CLASS ArticulosFabricantesValidator := QSelf() AS CLASS ArticulosFabricantesValidator




   ::hValidators  := {  "codigo" =>    {  "required"           => "El código es un dato requerido", "unique"             => "El código introducido ya existe" } , "nombre" =>    {  "required"           => "El nombre es un dato requerido", "unique"             => "El nombre introducido ya existe" } }

RETURN ( ::hValidators )










_HB_CLASS SQLArticulosFabricantesModel ; function SQLArticulosFabricantesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLArticulosFabricantesModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLArticulosFabricantesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_fabricantes", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLArticulosFabricantesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, uuid | ( ( Self ) ), ( ::getField( "nombre", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLArticulosFabricantesModel ;



static FUNCTION SQLArticulosFabricantesModel_getColumns( ) ; local Self AS CLASS SQLArticulosFabricantesModel := QSelf() AS CLASS SQLArticulosFabricantesModel



   hset( ::hColumns, "id",          {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",        {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )

   ::getEmpresaColumns()


   hset( ::hColumns, "codigo",      {  "create"    => "VARCHAR( 20 )"                            , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "nombre",      {  "create"    => "VARCHAR( 100 )"                          , "default"   => {|| space( 100 ) } }                       )


   hset( ::hColumns, "pagina_web",  {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )

   ::getTimeStampColumns()

RETURN ( ::hColumns )












_HB_CLASS ArticulosFabricantesRepository ; function ArticulosFabricantesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosFabricantesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ArticulosFabricantesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLArticulosFabricantesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombres(); oClass:AddMethod( "getNombres", @ArticulosFabricantesRepository_getNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, Uuid | ( ( Self ) ), ( ::getColumnWhereUuid( Uuid, "nombre" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidWhereNombre(); oClass:AddInline( "getUuidWhereNombre", {|Self, cNombre | ( ( Self ) ), ( ::getUuidWhereColumn( cNombre, "nombre", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosFabricantesRepository ;








static FUNCTION ArticulosFabricantesRepository_getNombres( ) ; local Self AS CLASS ArticulosFabricantesRepository := QSelf() AS CLASS ArticulosFabricantesRepository

   local cSQL
   local aNombres

   cSQL                 := "SELECT nombre FROM " + ::getTableName() + " "
   cSQL                 +=    "ORDER BY nombre ASC"

   aNombres             := ::getDatabase():selectFetchArrayOneColumn( cSQL )

   hb_AIns(aNombres,1,"", .T.)

RETURN ( aNombres )
