#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\ArticulosModel.prg"
_HB_CLASS ArticulosModel ; function ArticulosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ArticulosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Articulo" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER exist(); oClass:AddMethod( "exist", @ArticulosModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existName( cNombreArticulo); oClass:AddMethod( "existName", @ArticulosModel_existName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER get(); oClass:AddMethod( "get", @ArticulosModel_get(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuid(); oClass:AddInline( "getUuid", {|Self, cCodigoArticulo | ( ( Self ) ), ( ::getField( "Uuid", "Codigo", cCodigoArticulo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, cCodigoArticulo | ( ( Self ) ), ( ::getField( "Nombre", "Codigo", cCodigoArticulo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getHash(); oClass:AddMethod( "getHash", @ArticulosModel_getHash(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getArticulosToJson(); oClass:AddMethod( "getArticulosToJson", @ArticulosModel_getArticulosToJson(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getArticulosToImport( cArea, hRange); oClass:AddMethod( "getArticulosToImport", @ArticulosModel_getArticulosToImport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValoresPropiedades( cCodPro); oClass:AddMethod( "getValoresPropiedades", @ArticulosModel_getValoresPropiedades(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPrimerValorPropiedad( cCodPro, cArea); oClass:AddMethod( "getPrimerValorPropiedad", @ArticulosModel_getPrimerValorPropiedad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getArticulosToPrestaShopInFamilia( idFamilia, cWebShop, cArea); oClass:AddMethod( "getArticulosToPrestaShopInFamilia", @ArticulosModel_getArticulosToPrestaShopInFamilia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getListArticulos(); oClass:AddMethod( "getListArticulos", @ArticulosModel_getListArticulos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER aListArticulo(); oClass:AddInline( "aListArticulo", {|Self | ( ( Self ) ), ( DBHScatter( ::getListArticulos() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aListWebArticulos(); oClass:AddMethod( "aListWebArticulos", @ArticulosModel_aListWebArticulos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @ArticulosModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateCosto( cCodArt, nCosto); oClass:AddMethod( "updateCosto", @ArticulosModel_updateCosto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lExistContadores(); oClass:AddMethod( "lExistContadores", @ArticulosModel_lExistContadores(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNamesFromIdLanguagesPS( cCodArt, aIdsLanguages); oClass:AddMethod( "getNamesFromIdLanguagesPS", @ArticulosModel_getNamesFromIdLanguagesPS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getListToWP(); oClass:AddMethod( "getListToWP", @ArticulosModel_getListToWP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateWpId( cIdWP, cCodArt); oClass:AddMethod( "updateWpId", @ArticulosModel_updateWpId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosModel ;



static FUNCTION ArticulosModel_exist( cCodigoArticulo ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cStm


   local cSql  := "SELECT Nombre "                                      +  "FROM " + ::getTableName() + " "                   +  "WHERE Codigo = " + quoted( cCodigoArticulo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION ArticulosModel_existName( cNombreArticulo ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cStm


   local cSql  := "SELECT Nombre "                                      +  "FROM " + ::getTableName() + " "                   +  "WHERE Nombre = " + quoted( cNombreArticulo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION ArticulosModel_get( cCodigoArticulo ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cStm


   local cSql  := "SELECT * "                                           +  "FROM " + ::getTableName() + " "                   +  "WHERE Codigo = " + quoted( cCodigoArticulo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION ArticulosModel_getHash( cCodigoArticulo ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cStm
   local hRecord

   cStm           := ::get( cCodigoArticulo )

   if !empty( cStm ) .AND. ( ( cStm )->( lastrec() ) > 0 )
      hRecord     := getHashFromWorkArea( cStm )
   end

RETURN ( hRecord )



static FUNCTION ArticulosModel_getValoresPropiedades( cCodPro, cArea ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel


   local cSql  := "SELECT * FROM " + ::getEmpresaTableName( "TblPro" )     +  " WHERE cCodPro = " + quoted( cCodPro )

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_getPrimerValorPropiedad( cCodPro, cArea ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel


   local cSql  := "SELECT TOP 1 * FROM " + ::getEmpresaTableName( "TblPro" ) +  " WHERE cCodPro = " + quoted( cCodPro ) + ""

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_getArticulosToPrestaShopInFamilia( idFamilia, cWebShop, cArea ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel




   local cSql  := "SELECT Codigo, cWebShop FROM " + ::getTableName()       +  " WHERE Familia = " + quoted( idFamilia ) + " AND "   +  "cWebShop = " + quoted( cWebShop ) + " AND "       +  "lPubInt"

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_getArticulosToJson( cArea ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel











   local cSql  := "SELECT Articulos.Codigo, "                  +  "Articulos.Nombre, "                      +  "Articulos.pVenta1, "                     +  "Articulos.pVtaIva1, "                    +  "Articulos.uuid, "                        +  "CodigosBarras.cCodBar, "                 +  "TipoIva.TpIva "                          +  "FROM " + ::getTableName() + " Articulos "   +  "LEFT JOIN " + ArticulosCodigosBarraModel():getTableName() + " CodigosBarras ON Articulos.Codigo = CodigosBarras.cCodArt " +  "INNER JOIN DATOSTIva TipoIva ON Articulos.tipoIva = TipoIva.Tipo " +  "WHERE NOT Articulos.lObs"

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_getArticulosToImport( cArea, hRange ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel








   local cSql  := "SELECT Codigo, Nombre, pCosto"                                      + " " +  "FROM " + ::getTableName()                                           + " " +  "WHERE Familia >= "  + quoted( hRange[ "FamiliaInicio" ] )        + " " +  "AND Familia <= " + quoted( hRange[ "FamiliaFin" ] )           + " " +  "AND cCodTip >= " + quoted( hRange[ "TipoArticuloInicio" ] )   + " " +  "AND cCodTip <= " + quoted( hRange[ "TipoArticuloFin" ] )      + " " +  "AND Codigo >= "  + quoted( hRange[ "ArticuloInicio" ] )       + " " +  "AND Codigo <= "  + quoted( hRange[ "ArticuloFin" ] )

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_getListArticulos( cArea ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_aListWebArticulos( ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cArea := "aListWebArticulos"
   local cSql  := ""

   cSql        += "SELECT Codigo FROM " + ::getTableName()
   cSql        += " WHERE lPubInt"

   if ::ExecuteSqlStatement( cSql, @cArea )
      Return ( DBHScatter( cArea ) )
   end

RETURN ( {} )



static FUNCTION ArticulosModel_getListToWP( ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cArea := "getListToWP"
   local cSql  := ""

   cSql        += "SELECT * FROM " + ::getTableName()
   cSql        += " WHERE lPubInt"

   if ::ExecuteSqlStatement( cSql, @cArea )
      Return ( DBHScatter( cArea ) )
   end

RETURN ( {} )



static FUNCTION ArticulosModel_updateWpId( cIdWP, cCodArt ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cStm     := "updateWpId"
   local cSql     := ""
   local aList    := {}

   cSql           := "UPDATE " + ::getTableName()
   cSql           += " SET cIdWP = " + quoted( cIdWP )
   cSql           += " WHERE Codigo = " + quoted( cCodArt )

   ::ExecuteSqlStatement( cSql, @cStm )

RETURN ( self )



static FUNCTION ArticulosModel_lExistContadores( ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cArea := "getListContadores"
   local cSql  := "SELECT * FROM " + ::getTableName() + " WHERE NCTLSTOCK = 2"

   if ::ExecuteSqlStatement( cSql, @cArea )
      Return ( ( cArea )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION ArticulosModel_getToOdoo( cArea ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cSql  := "SELECT * FROM " + ::getTableName()

   cSql        += " WHERE lSndDoc AND NOT lObs"

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_updateCosto( cCodArt, nCosto ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cArea
   local cSql

   cSql        := "UPDATE " + ::getTableName() + Space( 1 )
   cSql        += "SET pCosto=" + toSQLString( nCosto ) + Space( 1 )
   cSql        += "WHERE Codigo = " + toSQLString( cCodArt )

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ArticulosModel_getNamesFromIdLanguagesPS( cCodArt, aIdsLanguages ) ; local Self AS CLASS ArticulosModel := QSelf() AS CLASS ArticulosModel

   local cName
   local hNames   := {=>}

   if Len( aIdsLanguages ) == 0
      Return ( hNames )
   end

   cName    := ::getNombre( cCodArt )

   if Empty( cName )
      Return ( hNames )
   end

   aEval( aIdsLanguages, {|id| hSet( hNames, AllTrim( Str( id ) ), AllTrim( cName ) ) } )

RETURN ( hNames )










_HB_CLASS ArticulosPrecios ; function ArticulosPrecios ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosPrecios", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ArticulosPrecios() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ArtDiv" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getHashProperties( cCodArt); oClass:AddMethod( "getHashProperties", @ArticulosPrecios_getHashProperties(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWpCode( cCodArt, cCodPr1, cValPr1, cCodPr2, cValPr2); oClass:AddMethod( "getWpCode", @ArticulosPrecios_getWpCode(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER listWpCode(); oClass:AddMethod( "listWpCode", @ArticulosPrecios_listWpCode(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateWpId( cIdWP, cCodArt, cCodPrp1, cCodPrp2, cValPrp1, cValPrp2); oClass:AddMethod( "updateWpId", @ArticulosPrecios_updateWpId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosPrecios ;



static FUNCTION ArticulosPrecios_updateWpId( cIdWP, cCodArt, cCodPrp1, cCodPrp2, cValPrp1, cValPrp2 ) ; local Self AS CLASS ArticulosPrecios := QSelf() AS CLASS ArticulosPrecios

   local cStm     := "updateWpId"
   local cSql     := ""
   local aList    := {}

   cSql           := "UPDATE " + ::getTableName()
   cSql           += " SET cIdWP = " + quoted( cIdWP )
   cSql           += " WHERE cCodArt = " + quoted( cCodArt )
   cSql           += " AND cCodPr1 = " + quoted( cCodPrp1 )
   cSql           += " AND cCodPr2 = " + quoted( cCodPrp2 )
   cSql           += " AND cValPr1 = " + quoted( cValPrp1 )
   cSql           += " AND cValPr2 = " + quoted( cValPrp2 )

   ::ExecuteSqlStatement( cSql, @cStm )

RETURN ( self )



static FUNCTION ArticulosPrecios_listWpCode( ) ; local Self AS CLASS ArticulosPrecios := QSelf() AS CLASS ArticulosPrecios

   local cArea := "listWpCode"
   local cSql  := ""

   cSql        += "SELECT * FROM " + ::getTableName()
   cSql        += " WHERE cCodWp is not null"

   if ::ExecuteSqlStatement( cSql, @cArea )
      Return ( DBHScatter( cArea ) )
   end

RETURN ( {} )



static FUNCTION ArticulosPrecios_getWpCode( cCodArt, cCodPr1, cValPr1, cCodPr2, cValPr2 ) ; local Self AS CLASS ArticulosPrecios := QSelf() AS CLASS ArticulosPrecios

   local cCode := ""
   local cArea := "getWpCode"
   local cSql  := ""

   cSql        += "SELECT cCodWp FROM " + ::getTableName()
   cSql        += " WHERE cCodArt = " + quoted( cCodArt )
   cSql        += " AND cCodPr1 = " + quoted( cCodPr1 )
   cSql        += " AND cValPr1 = " + quoted( cValPr1 )
   cSql        += " AND cCodPr2 = " + quoted( cCodPr2 )
   cSql        += " AND cValPr2 = " + quoted( cValPr2 )

   if ::ExecuteSqlStatement( cSql, @cArea )
      if ( ( cArea )->( lastrec() ) > 0 )
         Return ( ( cArea )->cCodWp )
      end
   end

Return cCode



static FUNCTION ArticulosPrecios_getHashProperties( cCodArt ) ; local Self AS CLASS ArticulosPrecios := QSelf() AS CLASS ArticulosPrecios

   local cCodPr1        := ""
   local cCodPr2        := ""
   local hProperties    := {=>}
   local aProperties    := {}
   local aValores       := {}
   local cListValores   := "ListValores"
   local cSql           := ""





   cCodPr1              := ArticulosModel():getField( "cCodPrp1", "Codigo", cCodArt )
   cCodPr2              := ArticulosModel():getField( "cCodPrp2", "Codigo", cCodArt )



   aAdd( aProperties, {    "Codigo" => cCodPr1, "Nombre" => PropiedadesModel():getField( "cDesPro", "cCodPro", cCodPr1 ), "lColor" => PropiedadesModel():getField( "lColor", "cCodPro", cCodPr1 ) } )



   aAdd( aProperties, {    "Codigo" => cCodPr2, "Nombre" => PropiedadesModel():getField( "cDesPro", "cCodPro", cCodPr2 ), "lColor" => PropiedadesModel():getField( "lColor", "cCodPro", cCodPr2 ) } )

   hSet( hProperties, "aProperties", aProperties )





   cSql     := "SELECT * FROM " + ::getTableName() + " WHERE cCodArt = " + quoted( cCodArt )


   if ::ExecuteSqlStatement( cSql, @cListValores )

      if ( cListValores )->( lastrec() ) > 0
         hSet( hProperties, "aValuesCombinations", DBHScatter( cListValores ) )
      end

      ( cListValores )->( dbGoTop() )

      while !( cListValores )->( Eof() )

         if len( aValores ) == 0




            aAdd( aValores, { "codigo" => ( cListValores )->cCodPr1, "valor" => ( cListValores )->cValPr1, "nombre" => allTrim( PropiedadesLineasModel():getNombre( ( cListValores )->cCodPr1, ( cListValores )->cValPr1 ) ), "color" => alltrim( RgbToRgbHex( PropiedadesLineasModel():getColor( ( cListValores )->cCodPr1, ( cListValores )->cValPr1 ) ) ) } )

         end

         if AScan( aValores, { |h| hGet( h, "codigo" ) == ( cListValores )->cCodPr1 .AND. hGet( h, "valor" ) == ( cListValores )->cValPr1 } ) == 0




            aAdd( aValores, { "codigo" => ( cListValores )->cCodPr1, "valor" => ( cListValores )->cValPr1, "nombre" => allTrim( PropiedadesLineasModel():getNombre( ( cListValores )->cCodPr1, ( cListValores )->cValPr1 ) ), "color" => alltrim( RgbToRgbHex( PropiedadesLineasModel():getColor( ( cListValores )->cCodPr1, ( cListValores )->cValPr1 ) ) ) } )

         end

         if AScan( aValores, { |h| hGet( h, "codigo" ) == ( cListValores )->cCodPr2 .AND. hGet( h, "valor" ) == ( cListValores )->cValPr2 } ) == 0




            aAdd( aValores, { "codigo" => ( cListValores )->cCodPr2, "valor" => ( cListValores )->cValPr2, "nombre" => allTrim( PropiedadesLineasModel():getNombre( ( cListValores )->cCodPr2, ( cListValores )->cValPr2 ) ), "color" => alltrim( RgbToRgbHex( PropiedadesLineasModel():getColor( ( cListValores )->cCodPr1, ( cListValores )->cValPr2 ) ) ) } )

         end

         ( cListValores )->( dbSkip() )

      end

      hSet( hProperties, "aValues", aValores )

   end

RETURN ( hProperties )










_HB_CLASS ArticulosCodigosBarraModel ; function ArticulosCodigosBarraModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosCodigosBarraModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ArticulosCodigosBarraModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ArtCodeBar" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigo(); oClass:AddInline( "getCodigo", {|Self, cId | ( ( Self ) ), ( ::getField( "cCodArt", "cCodBar", cId ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDefaultCodigo(); oClass:AddInline( "getDefaultCodigo", {|Self, cId | ( ( Self ) ), ( ::getField( "cCodBar", "lDefBar AND cCodArt", cId ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosCodigosBarraModel ;











_HB_CLASS CategoriasModel ; function CategoriasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CategoriasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @CategoriasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Categorias" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSelectFromCategoria( dbfSql, cCodigoCategoria); oClass:AddMethod( "getSelectFromCategoria", @CategoriasModel_getSelectFromCategoria(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CategoriasModel ;



static FUNCTION CategoriasModel_getSelectFromCategoria( dbfSql, cCodigoCategoria ) ; local Self AS CLASS CategoriasModel := QSelf() AS CLASS CategoriasModel


   local cSql  := "SELECT * FROM " + ADSBaseModel():getEmpresaTableName( "Categorias" )     +  " WHERE cCodigo = " + quoted( cCodigoCategoria )

   ADSBaseModel():ExecuteSqlStatement( cSql, @dbfSql )

return ( dbfSql )







_HB_CLASS ArticulosImagenesModel ; function ArticulosImagenesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosImagenesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ArticulosImagenesModel() ) ) ;

   _HB_MEMBER exist(); oClass:AddMethod( "exist", @ArticulosImagenesModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ArtImg" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER idImagenArticulo( cCodigoArticulo, cNombreImagen); oClass:AddMethod( "idImagenArticulo", @ArticulosImagenesModel_idImagenArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getList( cCodigoArticulo); oClass:AddMethod( "getList", @ArticulosImagenesModel_getList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setDirImage( cCodigoArticulo, nIdImagen, cDirImage); oClass:AddMethod( "setDirImage", @ArticulosImagenesModel_setDirImage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosImagenesModel ;



static FUNCTION ArticulosImagenesModel_exist( cCodigoArticulo, cNombreImagen ) ; local Self AS CLASS ArticulosImagenesModel := QSelf() AS CLASS ArticulosImagenesModel

   local cStm



   local cSql  := "SELECT cNbrArt "                                           +  "FROM " + ::getTableName() + " "                         +  "WHERE cCodArt = " + quoted( cCodigoArticulo ) + " AND " +  "cImgArt = " + quoted( cNombreImagen )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION ArticulosImagenesModel_idImagenArticulo( cCodigoArticulo, cNombreImagen ) ; local Self AS CLASS ArticulosImagenesModel := QSelf() AS CLASS ArticulosImagenesModel

   local cStm  := "idArtImg"



   local cSql  := "SELECT nId "                                           +  "FROM " + ::getTableName() + " "                         +  "WHERE cCodArt = " + quoted( cCodigoArticulo ) + " AND " +  "cImgArt = " + quoted( cNombreImagen )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->nId )
   end

RETURN ( 0 )



static FUNCTION ArticulosImagenesModel_getList( cCodigoArticulo ) ; local Self AS CLASS ArticulosImagenesModel := QSelf() AS CLASS ArticulosImagenesModel

   local cArea := "getListImages"
   local cSql  := ""

   cSql        += "SELECT * FROM " + ::getTableName()
   cSql        += " WHERE cCodArt = " + quoted( cCodigoArticulo )

   if ::ExecuteSqlStatement( cSql, @cArea )
      Return ( DBHScatter( cArea ) )
   end

RETURN ( {} )



static FUNCTION ArticulosImagenesModel_setDirImage( cCodigoArticulo, nIdImagen, cDirImage ) ; local Self AS CLASS ArticulosImagenesModel := QSelf() AS CLASS ArticulosImagenesModel

   local cArea
   local cSql

   cSql        := "UPDATE " + ::getTableName() + Space( 1 )
   cSql        += "SET cRmtArt =" + quoted( cDirImage ) + Space( 1 )
   cSql        += "WHERE cCodArt = " + quoted( cCodigoArticulo ) + Space( 1 )
   cSql        += "AND nId = " + toSQLString( nIdImagen )

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )







_HB_CLASS ArticulosDocumentosModel ; function ArticulosDocumentosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosDocumentosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ArticulosDocumentosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ArtDoc" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosDocumentosModel ;







_HB_CLASS ProveedorArticuloModel ; function ProveedorArticuloModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ProveedorArticuloModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ProveedorArticuloModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ProvArt" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ProveedorArticuloModel ;







_HB_CLASS EscandallosArticuloModel ; function EscandallosArticuloModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EscandallosArticuloModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @EscandallosArticuloModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ArtKit" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER get( cCodigoArticulo); oClass:AddMethod( "get", @EscandallosArticuloModel_get(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getList( cCodigoArticulo); oClass:AddMethod( "getList", @EscandallosArticuloModel_getList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getListByUuid( cUuid); oClass:AddMethod( "getListByUuid", @EscandallosArticuloModel_getListByUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @EscandallosArticuloModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EscandallosArticuloModel ;



static FUNCTION EscandallosArticuloModel_get( cCodigoArticulo ) ; local Self AS CLASS EscandallosArticuloModel := QSelf() AS CLASS EscandallosArticuloModel

   local cStm


   local cSql  := "SELECT * "                                           +  "FROM " + ::getTableName() + " "                   +  "WHERE cCodKit = " + quoted( cCodigoArticulo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION EscandallosArticuloModel_getList( cCodigoArticulo ) ; local Self AS CLASS EscandallosArticuloModel := QSelf() AS CLASS EscandallosArticuloModel

   local cStm
   local aList

   cStm           := ::get( cCodigoArticulo )

   if !empty( cStm ) .AND. ( ( cStm )->( lastrec() ) > 0 )
      aList     := DBHScatter( cStm )
   end

RETURN ( aList )



static FUNCTION EscandallosArticuloModel_getListByUuid( cUuid ) ; local Self AS CLASS EscandallosArticuloModel := QSelf() AS CLASS EscandallosArticuloModel

   local hList
   local cStm


   local cSql  := "SELECT * "                                     +  "FROM " + ::getTableName() + " "             +  "WHERE cParUuid = " + quoted( cUuid )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if !empty( cStm ) .AND. ( ( cStm )->( lastrec() ) > 0 )

         hList     := DBHScatter( cStm )

      end

   end

RETURN ( hList )



static FUNCTION EscandallosArticuloModel_getToOdoo( cArea ) ; local Self AS CLASS EscandallosArticuloModel := QSelf() AS CLASS EscandallosArticuloModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )







_HB_CLASS ListaEscandallosModel ; function ListaEscandallosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ListaEscandallosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ListaEscandallosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ParKit" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidFromName(); oClass:AddInline( "getUuidFromName", {|Self, cName | ( ( Self ) ), ( ::getField( "cUuid", "cNomKit", cName ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER get( cCodigoArticulo); oClass:AddMethod( "get", @ListaEscandallosModel_get(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getList( cCodigoArticulo); oClass:AddMethod( "getList", @ListaEscandallosModel_getList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getListNames( cCodigoArticulo); oClass:AddMethod( "getListNames", @ListaEscandallosModel_getListNames(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ListaEscandallosModel ;



static FUNCTION ListaEscandallosModel_get( cCodigoArticulo ) ; local Self AS CLASS ListaEscandallosModel := QSelf() AS CLASS ListaEscandallosModel

   local cStm


   local cSql  := "SELECT * "                                           +  "FROM " + ::getTableName() + " "                   +  "WHERE cCodArt = " + quoted( cCodigoArticulo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION ListaEscandallosModel_getList( cCodigoArticulo ) ; local Self AS CLASS ListaEscandallosModel := QSelf() AS CLASS ListaEscandallosModel

   local cStm
   local aList

   cStm           := ::get( cCodigoArticulo )

   if !empty( cStm ) .AND. ( ( cStm )->( lastrec() ) > 0 )
      aList     := DBHScatter( cStm )
   end

RETURN ( aList )



static FUNCTION ListaEscandallosModel_getListNames( cCodigoArticulo ) ; local Self AS CLASS ListaEscandallosModel := QSelf() AS CLASS ListaEscandallosModel

   local alist := {}
   local hList
   local cStm


   local cSql  := "SELECT cNomKit "                                     +  "FROM " + ::getTableName() + " "                   +  "WHERE cCodArt = " + quoted( cCodigoArticulo )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if !empty( cStm ) .AND. ( ( cStm )->( lastrec() ) > 0 )

         hList     := DBHScatter( cStm )

         aeval( hList, {|a| aAdd( aList, hGet( a, "cNomKit" ) ) } )

      end

   end

RETURN ( aList )







FUNCTION getValueArticulo( cCodigoArticulo, cCampo )

RETURN ( ArticulosModel():getField( AllTrim( cCampo ), "Codigo", AllTrim( cCodigoArticulo ) ) )



FUNCTION getDefCodigoBarra( cCodigoArticulo )

RETURN ( ArticulosCodigosBarraModel():getDefaultCodigo( Padr( cCodigoArticulo, 18 ) ) )
