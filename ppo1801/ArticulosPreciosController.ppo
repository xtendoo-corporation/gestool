#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ArticulosPreciosController.prg"
_HB_CLASS ArticulosPreciosController ; function ArticulosPreciosController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosPreciosController", iif( .T., { @SQLBrowseController() }, { @HBObject() } ), @ArticulosPreciosController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @ArticulosPreciosController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ArticulosPreciosController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setMargen( oCol, nMargen); oClass:AddMethod( "setMargen", @ArticulosPreciosController_setMargen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setPrecioBase( oCol, nPrecioBase); oClass:AddMethod( "setPrecioBase", @ArticulosPreciosController_setPrecioBase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setPrecioIVAIncluido( oCol, nPrecioIVAIncluido); oClass:AddMethod( "setPrecioIVAIncluido", @ArticulosPreciosController_setPrecioIVAIncluido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosPreciosController ;



static FUNCTION ArticulosPreciosController_New( oController ) ; local Self AS CLASS ArticulosPreciosController := QSelf() AS CLASS ArticulosPreciosController

   ::Super:New( oController )

   ::lTransactional                 := .T.

   ::cTitle                         := "Precios de artículos"

   ::cName                          := "articulos_precios"

   ::oModel                         := SQLArticulosPreciosModel():New( self )

   ::oBrowseView                    := ArticulosPreciosBrowseView():New( self )

   ::oValidator                     := ArticulosPreciosValidator():New( self )

   ::oRepository                    := ArticulosPreciosRepository():New( self )

RETURN ( Self )



static FUNCTION ArticulosPreciosController_End( ) ; local Self AS CLASS ArticulosPreciosController := QSelf() AS CLASS ArticulosPreciosController

   ::oModel:End()

   ::oBrowseView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION ArticulosPreciosController_setMargen( oCol, nMargen ) ; local Self AS CLASS ArticulosPreciosController := QSelf() AS CLASS ArticulosPreciosController

   local oCommand

   if ::oValidator:validate( "margen", nMargen )



      oCommand    := CalculaPrecioCommand():Build( {  "Costo"           => ::oSenderController:getPrecioCosto(), "PorcentajeIVA"   => ::oSenderController:getPorcentajeIVA(), "Margen"          => nMargen } )

      oCommand:caclculaPreciosUsandoMargen()

      ::oModel:updateFieldsCommandWhereUuid( oCommand, ::getRowSet():fieldGet( "uuid" ) )



      ::getRowSet():Refresh()

   end

RETURN ( self )



static FUNCTION ArticulosPreciosController_setPrecioBase( oCol, nPrecioBase ) ; local Self AS CLASS ArticulosPreciosController := QSelf() AS CLASS ArticulosPreciosController



   local oCommand := CalculaPrecioCommand():Build( {  "Costo"           => ::oSenderController:getPrecioCosto(), "PorcentajeIVA"   => ::oSenderController:getPorcentajeIVA(), "PrecioBase"      => nPrecioBase } )
   oCommand:caclculaPreciosUsandoBase()

   ::oModel:updateFieldsCommandWhereUuid( oCommand, ::getRowSet():fieldGet( "uuid" ) )

   ::getRowSet():Refresh()

RETURN ( self )



static FUNCTION ArticulosPreciosController_setPrecioIVAIncluido( oCol, nPrecioIVAIncluido ) ; local Self AS CLASS ArticulosPreciosController := QSelf() AS CLASS ArticulosPreciosController



   local oCommand := CalculaPrecioCommand():Build( {  "Costo"              => ::oSenderController:getPrecioCosto(), "PorcentajeIVA"      => ::oSenderController:getPorcentajeIVA(), "PrecioIVAIncluido"  => nPrecioIVAIncluido } )

   oCommand:caclculaPreciosUsandoIVAIncluido()

   ::oModel:updateFieldsCommandWhereUuid( oCommand, ::getRowSet():fieldGet( "uuid" ) )

   ::getRowSet():Refresh()

RETURN ( self )







_HB_CLASS ArticulosPreciosBrowseView ; function ArticulosPreciosBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosPreciosBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ArticulosPreciosBrowseView() ) ) ;

   _HB_MEMBER { lFastEdit } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFastEdit"}, .F. )

   _HB_MEMBER { lMultiSelect } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lMultiSelect"}, .F. )

   _HB_MEMBER { nMarqueeStyle } ; oClass:AddMultiData(, 3, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMarqueeStyle"}, .F. )

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ArticulosPreciosBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosPreciosBrowseView ;



static FUNCTION ArticulosPreciosBrowseView_addColumns( ) ; local Self AS CLASS ArticulosPreciosBrowseView := QSelf() AS CLASS ArticulosPreciosBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "uuid"
      :cHeader             := "Uuid"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Tarifa"
      :nWidth              := 160
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Costo"
      :nWidth              := 80
      :bEditValue          := {|| ::oController:oSenderController:getPrecioCosto() }
      :cEditPicture        := "@E 9999.9999"
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "margen"
      :cHeader             := "Margen %"
      :nWidth              := 75
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :nHeadBmpNo          := 1
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
      :AddResource( "gc_pencil_16" )

      :nEditType           := 1
      :bEditValue          := {|| ::getRowSet():fieldGet( "margen" ) }
      :bEditBlock          := {|| ::getRowSet():fieldGet( "margen" ) }
      :cEditPicture        := "@E 9999.9999"
      :bOnPostEdit         := {|oCol, nMargen| ::oController:setMargen( oCol, nMargen ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "margen_real"
      :cHeader             := "Markup %"
      :nWidth              := 75
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
      :bEditValue          := {|| ::getRowSet():fieldGet( "margen_real" ) }
      :cEditPicture        := "@E 9999.9999"
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "precio_base"
      :cHeader             := "Precio"
      :nWidth              := 100
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :nHeadBmpNo          := 1
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
      :AddResource( "gc_pencil_16" )

      :nEditType           := 1
      :bEditValue          := {|| ::getRowSet():fieldGet( "precio_base" ) }
      :bEditBlock          := {|| ::getRowSet():fieldGet( "precio_base" ) }
      :cEditPicture        := "@E 9999.9999"
      :bOnPostEdit         := {|oCol, nPrecioBase| ::oController:setPrecioBase( oCol, nPrecioBase ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "precio_iva_incluido"
      :cHeader             := "Precio IVA inc."
      :nWidth              := 100
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :nHeadBmpNo          := 1
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
      :AddResource( "gc_pencil_16" )

      :nEditType           := 1
      :bEditValue          := {|| ::getRowSet():fieldGet( "precio_iva_incluido" ) }
      :bEditBlock          := {|| ::getRowSet():fieldGet( "precio_iva_incluido" ) }
      :cEditPicture        := "@E 9999.9999"
      :bOnPostEdit         := {|oCol, nPrecioIVAIncluido| ::oController:setPrecioIVAIncluido( oCol, nPrecioIVAIncluido ) }
   end

RETURN ( self )







_HB_CLASS ArticulosPreciosValidator ; function ArticulosPreciosValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosPreciosValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ArticulosPreciosValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ArticulosPreciosValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosPreciosValidator ;



static FUNCTION ArticulosPreciosValidator_getValidators( ) ; local Self AS CLASS ArticulosPreciosValidator := QSelf() AS CLASS ArticulosPreciosValidator

   ::hValidators  := {  "margen" =>    {  "Positive"  => "El valor debe ser mayor o igual a cero" } }

RETURN ( ::hValidators )







_HB_CLASS SQLArticulosPreciosModel ; function SQLArticulosPreciosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLArticulosPreciosModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLArticulosPreciosModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_precios", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY ( id ), UNIQUE KEY ( parent_uuid, tarifa_codigo )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLArticulosPreciosModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLArticulosPreciosModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLInsertPreciosWhereTarifa( codigoTarifa); oClass:AddMethod( "getSQLInsertPreciosWhereTarifa", @SQLArticulosPreciosModel_getSQLInsertPreciosWhereTarifa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertPreciosWhereTarifa(); oClass:AddInline( "insertPreciosWhereTarifa", {|Self, codigoTarifa | ( ( Self ) ), ( ::getDatabase():Execs( ::getSQLInsertPreciosWhereTarifa( codigoTarifa ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLInsertPreciosWhereArticulo( uuidArticulo); oClass:AddMethod( "getSQLInsertPreciosWhereArticulo", @SQLArticulosPreciosModel_getSQLInsertPreciosWhereArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertPreciosWhereArticulo(); oClass:AddInline( "insertPreciosWhereArticulo", {|Self, uuidArticulo | ( ( Self ) ), ( ::getDatabase():Execs( ::getSQLInsertPreciosWhereArticulo( uuidArticulo ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER updateFieldsCommandWhereUuid(); oClass:AddInline( "updateFieldsCommandWhereUuid", {|Self, oCommand, uuid | ( ( Self ) ), ( ::updateFieldsWhereUuid( uuid,   {  "margen"                => oCommand:Margen(), "margen_real"           => oCommand:MargenReal(), "precio_base"           => oCommand:PrecioBase(), "precio_iva_incluido"   => oCommand:PrecioIVAIncluido() } ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLArticulosPreciosModel ;



static FUNCTION SQLArticulosPreciosModel_getInitialSelect( ) ; local Self AS CLASS SQLArticulosPreciosModel := QSelf() AS CLASS SQLArticulosPreciosModel












   local cSelect  := "SELECT articulos_precios.id, "                                +  "articulos_precios.uuid, "                                  +  "articulos_precios.parent_uuid, "                           +  "articulos_precios.tarifa_codigo, "                         +  "articulos_precios.margen, "                                +  "articulos_precios.margen_real, "                           +  "articulos_precios.precio_base, "                           +  "articulos_precios.precio_iva_incluido, "                   +  "articulos_tarifas.nombre, "                                +  "articulos_tarifas.margen_predefinido "                     +  "FROM articulos_precios "                                      +  "INNER JOIN articulos_tarifas ON articulos_tarifas.codigo = articulos_precios.tarifa_codigo"

RETURN ( cSelect )



static FUNCTION SQLArticulosPreciosModel_getColumns( ) ; local Self AS CLASS SQLArticulosPreciosModel := QSelf() AS CLASS SQLArticulosPreciosModel


   hset( ::hColumns, "id",                         {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                       {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",                {  "create"    => "VARCHAR( 40 )"                           , "default"   => {|| ::getSenderControllerParentUuid() } } )


   hset( ::hColumns, "tarifa_codigo",              {  "create"    => "VARCHAR( 20 )"                           , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "margen",                     {  "create"    => "FLOAT( 8, 4 )"                           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "margen_real",                {  "create"    => "FLOAT( 8, 4 )"                           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "precio_base",                {  "create"    => "FLOAT( 16, 6 )"                          , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "precio_iva_incluido",        {  "create"    => "FLOAT( 16, 6 )"                          , "default"   => {|| 0 } }                                 )

RETURN ( ::hColumns )



static FUNCTION SQLArticulosPreciosModel_getSQLInsertPreciosWhereTarifa( codigoTarifa ) ; local Self AS CLASS SQLArticulosPreciosModel := QSelf() AS CLASS SQLArticulosPreciosModel

   local cSQL

   cSQL           := "INSERT IGNORE INTO articulos_precios"                                                                   + " "
   cSQL           +=    "( uuid, parent_uuid, tarifa_codigo, margen, precio_base, precio_iva_incluido )"                      + " "
   cSQL           += "SELECT UUID(), articulos.uuid, articulos_tarifas.codigo, articulos_tarifas.margen_predefinido, 0, 0"    + " "
   cSQL           +=    "FROM articulos"                                                                                      + " "
   cSQL           += "INNER JOIN articulos_tarifas ON articulos_tarifas.empresa_codigo = articulos.empresa_codigo"            + " "
   cSQL           += "WHERE articulos.empresa_codigo = " + quoted( cCodEmp() )                                       + " "
   cSQL           +=    "AND articulos_tarifas.codigo = " + quoted( codigoTarifa )

RETURN ( cSQL )



static FUNCTION SQLArticulosPreciosModel_getSQLInsertPreciosWhereArticulo( uuidArticulo ) ; local Self AS CLASS SQLArticulosPreciosModel := QSelf() AS CLASS SQLArticulosPreciosModel

   local cSQL

   cSQL           := "INSERT IGNORE INTO articulos_precios"                                                                + " "
   cSQL           +=    "( uuid, tarifa_codigo, parent_uuid, margen, precio_base, precio_iva_incluido )"                   + " "
   cSQL           += "SELECT uuid(), articulos_tarifas.codigo, " + quoted( uuidArticulo ) + ", articulos_tarifas.margen_predefinido, 0, 0"   + " "
   cSQL           +=    "FROM articulos_tarifas"                                                                           + " "
   cSQL           += "WHERE articulos_tarifas.empresa_codigo = " + quoted( cCodEmp() )

RETURN ( cSQL )







_HB_CLASS ArticulosPreciosRepository ; function ArticulosPreciosRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosPreciosRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ArticulosPreciosRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLArticulosPreciosModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER getSQLFunctions(); oClass:AddInline( "getSQLFunctions", {|Self | ( ( Self ) ), ( {  ::dropFunctionPriceUsingMargin(), ::createFunctionPriceUsingMargin(), ::dropFunctionTest(), ::createFunctionTest() } ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectFunctionPriceUsingMargin(); oClass:AddMethod( "selectFunctionPriceUsingMargin", @ArticulosPreciosRepository_selectFunctionPriceUsingMargin(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dropFunctionPriceUsingMargin(); oClass:AddInline( "dropFunctionPriceUsingMargin", {|Self | ( ( Self ) ), ( "DROP FUNCTION IF EXISTS CalculatePriceUsingMargin;" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createFunctionPriceUsingMargin(); oClass:AddMethod( "createFunctionPriceUsingMargin", @ArticulosPreciosRepository_createFunctionPriceUsingMargin(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dropFunctionTest(); oClass:AddInline( "dropFunctionTest", {|Self | ( ( Self ) ), ( "DROP FUNCTION IF EXISTS Test;" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createFunctionTest(); oClass:AddMethod( "createFunctionTest", @ArticulosPreciosRepository_createFunctionTest(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosPreciosRepository ;



static FUNCTION ArticulosPreciosRepository_selectFunctionPriceUsingMargin( precioCosto, porcentajeIVA, Margen, uuid ) ; local Self AS CLASS ArticulosPreciosRepository := QSelf() AS CLASS ArticulosPreciosRepository

   local cSQL  := "SELECT CalculatePriceUsingMargin( "
   cSQL        +=    toSQLString( precioCosto ) + ", "
   cSQL        +=    toSQLString( porcentajeIVA ) + ", "
   cSQL        +=    toSQLString( Margen ) + ", "
   cSQL        +=    toSQLString( uuid ) + " )"

RETURN ( getSQLDatabase():Exec( cSQL ) )



static FUNCTION ArticulosPreciosRepository_createFunctionPriceUsingMargin( ) ; local Self AS CLASS ArticulosPreciosRepository := QSelf() AS CLASS ArticulosPreciosRepository

   local cSQL  := "CREATE FUNCTION CalculatePriceUsingMargin( PrecioCosto FLOAT, PorcentajeIVA FLOAT, Margen FLOAT, PrecioUuid CHAR ) RETURNS FLOAT" + space( 1 )

   cSQL        += "BEGIN"                                                                                + space( 1 )
   cSQL        +=    "DECLARE PrecioBase FLOAT;"                                                           + space( 1 )
   cSQL        +=    "DECLARE PrecioIVAIncluido FLOAT;"                                                    + space( 1 )
   cSQL        +=    "DECLARE MargenReal FLOAT;"                                                           + space( 1 )

   cSQL        +=    "SET PrecioBase = PrecioCosto + ( PrecioCosto * Margen / 100 );"                    + space( 1 )
   cSQL        +=    "SET PrecioIVAIncluido = PrecioBase + ( PrecioBase * PorcentajeIVA / 100 );"        + space( 1 )
   cSQL        +=    "SET MargenReal = ( PrecioBase - PrecioCosto ) / PrecioCosto * 100;"                + space( 1 )

   cSql        +=    "UPDATE " + ::getTableName() + " SET"                                               + space( 1 )
   cSql        +=       "precio_base = PrecioBase,"                                                      + space( 1 )
   cSql        +=       "precio_iva_incluido = PrecioIVAIncluido,"                                       + space( 1 )
   cSql        +=       "margen_real = MargenReal"                                                       + space( 1 )
   cSql        +=    "WHERE uuid = PrecioUuid;"                                                          + space( 1 )

   cSQL        +=    "RETURN PrecioBase;"                                                                + space( 1 )
   cSQL        += "END;"                                                                                 + space( 1 )

   logwrite( cSQL )

RETURN ( cSQL )



static FUNCTION ArticulosPreciosRepository_createFunctionTest( ) ; local Self AS CLASS ArticulosPreciosRepository := QSelf() AS CLASS ArticulosPreciosRepository

   local cSQL  := "CREATE FUNCTION Test( idPrecio INT ) RETURNS INT DETERMINISTIC" + space( 1 )

   cSQL        += "BEGIN"                                                                                + space( 1 )
   cSql        +=    "UPDATE " + ::getTableName() + " SET"                                               + space( 1 )
   cSql        +=       "precio_base = 1234"                                                             + space( 1 )
   cSql        +=    "WHERE id = @idPrecio;"                                                             + space( 1 )
   cSQL        +=    "RETURN 1;"                                                                         + space( 1 )
   cSQL        += "END;"                                                                                 + space( 1 )

   logwrite( cSQL )

RETURN ( cSQL )
