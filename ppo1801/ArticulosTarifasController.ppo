#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ArticulosTarifasController.prg"
_HB_CLASS ArticulosTarifasController ; function ArticulosTarifasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosTarifasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ArticulosTarifasController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ArticulosTarifasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ArticulosTarifasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Delete( aSelectedRecno); oClass:AddMethod( "Delete", @ArticulosTarifasController_Delete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertPreciosWhereTarifa(); oClass:AddMethod( "insertPreciosWhereTarifa", @ArticulosTarifasController_insertPreciosWhereTarifa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosTarifasController ;



static FUNCTION ArticulosTarifasController_New( ) ; local Self AS CLASS ArticulosTarifasController := QSelf() AS CLASS ArticulosTarifasController

   ::Super:New()

   ::cTitle                         := "Tarifas"

   ::cName                          := "tarifas"



   ::hImage                         := {  "16" => "gc_money_interest_16", "32" => "gc_money_interest_32", "48" => "gc_money_interest_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLArticulosTarifasModel():New( self )

   ::oBrowseView                    := ArticulosTarifasBrowseView():New( self )

   ::oDialogView                    := ArticulosTarifasView():New( self )

   ::oValidator                     := ArticulosTarifasValidator():New( self, ::oDialogView )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oRepository                    := ArticulosTarifasRepository():New( self )

   ::setEvent( "appended", {|| ::insertPreciosWhereTarifa() } )

RETURN ( Self )



static FUNCTION ArticulosTarifasController_End( ) ; local Self AS CLASS ArticulosTarifasController := QSelf() AS CLASS ArticulosTarifasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oCamposExtraValoresController:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION ArticulosTarifasController_Delete( aSelectedRecno ) ; local Self AS CLASS ArticulosTarifasController := QSelf() AS CLASS ArticulosTarifasController

   if len( aSelectedRecno ) > 1
      msgStop( "No se pueden realizar eliminaciones multiples en tarifas." )
      RETURN .F.
   end

   if ( ::getRowSet():fieldGet( "uuid" ) == Company():Uuid() )
      msgStop( "No se puede eliminar la tarifa General." )
      RETURN .F.
   end

RETURN ( ::Super:Delete( aSelectedRecno ) )



static FUNCTION ArticulosTarifasController_insertPreciosWhereTarifa( ) ; local Self AS CLASS ArticulosTarifasController := QSelf() AS CLASS ArticulosTarifasController

   local codigoTarifa  := hget( ::oModel:hBuffer, "codigo" )

   if empty( codigoTarifa )
      RETURN ( Self )
   end

   SQLArticulosPreciosModel():insertPreciosWhereTarifa( codigoTarifa )

RETURN ( Self )







_HB_CLASS ArticulosTarifasBrowseView ; function ArticulosTarifasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosTarifasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ArticulosTarifasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ArticulosTarifasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosTarifasBrowseView ;



static FUNCTION ArticulosTarifasBrowseView_addColumns( ) ; local Self AS CLASS ArticulosTarifasBrowseView := QSelf() AS CLASS ArticulosTarifasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "margen_predefinido"
      :cHeader             := "Margen predefinido %"
      :nWidth              := 130
      :bEditValue          := {|| transform( ::getRowSet():fieldGet( "margen_predefinido" ), "@E 9999.9999" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
   end

RETURN ( self )







_HB_CLASS ArticulosTarifasView ; function ArticulosTarifasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosTarifasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ArticulosTarifasView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ArticulosTarifasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosTarifasView ;



static FUNCTION ArticulosTarifasView_Activate( ) ; local Self AS CLASS ArticulosTarifasView := QSelf() AS CLASS ArticulosTarifasView

   local oSayCamposExtra



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "tarifa", "TARIFA",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isAppendOrDuplicateMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "margen_predefinido" ], ::oController:oModel:hBuffer[ "margen_predefinido" ]:= u ) }, ::oDialog,, "@E 9999.9999",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )






   ::oSayCamposExtra := TSay():ReDefine( 140, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()

RETURN ( ::oDialog:nResult )







_HB_CLASS ArticulosTarifasValidator ; function ArticulosTarifasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosTarifasValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @ArticulosTarifasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ArticulosTarifasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosTarifasValidator ;



static FUNCTION ArticulosTarifasValidator_getValidators( ) ; local Self AS CLASS ArticulosTarifasValidator := QSelf() AS CLASS ArticulosTarifasValidator




   ::hValidators  := {  "nombre" =>    {  "required"  => "El nombre es un dato requerido", "unique"    => "El nombre introducido ya existe" }, "codigo" =>    {  "required"  => "El código es un dato requerido" , "unique"    => "EL código introducido ya existe"  } }

RETURN ( ::hValidators )







_HB_CLASS SQLArticulosTarifasModel ; function SQLArticulosTarifasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLArticulosTarifasModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLArticulosTarifasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_tarifas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY ( id ), UNIQUE KEY ( empresa_codigo, codigo )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLArticulosTarifasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInsertArticulosTarifasSentence(); oClass:AddMethod( "getInsertArticulosTarifasSentence", @SQLArticulosTarifasModel_getInsertArticulosTarifasSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLArticulosTarifasModel ;



static FUNCTION SQLArticulosTarifasModel_getColumns( ) ; local Self AS CLASS SQLArticulosTarifasModel := QSelf() AS CLASS SQLArticulosTarifasModel


   hset( ::hColumns, "id",                   {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                 {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )

   ::getEmpresaColumns()


   hset( ::hColumns, "codigo",               {  "create"    => "VARCHAR( 20 )"                           , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "nombre",               {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "margen_predefinido",   {  "create"    => "FLOAT( 8,4 )"                            , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "sistema",              {  "create"    => "TINYINT ( 1 )"                           , "default"   => {|| "0" } }                               )

   ::getTimeStampColumns()

RETURN ( ::hColumns )



static FUNCTION SQLArticulosTarifasModel_getInsertArticulosTarifasSentence( ) ; local Self AS CLASS SQLArticulosTarifasModel := QSelf() AS CLASS SQLArticulosTarifasModel

   local cSentence

   cSentence  := "INSERT IGNORE INTO " + ::cTableName + " "
   cSentence  +=    "( empresa_codigo, usuario_codigo, uuid, codigo, nombre, sistema ) "
   cSentence  += "SELECT empresas.codigo, '999', UUID(), '1', 'General', '1' "
   cSentence  +=    "FROM empresas"

RETURN ( cSentence )







_HB_CLASS ArticulosTarifasRepository ; function ArticulosTarifasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosTarifasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ArticulosTarifasRepository() ) ) ;

   _HB_MEMBER getTableNameSQL(); oClass:AddInline( "getTableNameSQL", {|Self | ( ( Self ) ), ( SQLArticulosTarifasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosTarifasRepository ;