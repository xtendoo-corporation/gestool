#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ArticulosUnidadesMedicionController.prg"
_HB_CLASS ArticulosUnidadesMedicionController ; function ArticulosUnidadesMedicionController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosUnidadesMedicionController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ArticulosUnidadesMedicionController() ) ) ;

   _HB_MEMBER { oUnidadesMedicionController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oUnidadesMedicionController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ArticulosUnidadesMedicionController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ArticulosUnidadesMedicionController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosUnidadesMedicionController ;



static FUNCTION ArticulosUnidadesMedicionController_New( oController ) ; local Self AS CLASS ArticulosUnidadesMedicionController := QSelf() AS CLASS ArticulosUnidadesMedicionController

   ::Super:New( oController )

   ::lTransactional                 := .T.

   ::cTitle                         := "Unidades de medicion de artículos"

   ::cName                          := "articulos_unidades_medicion"



   ::hImage                         := {  "16" => "gc_tape_measure2_16", "32" => "gc_tape_measure2_32", "48" => "gc_tape_measure2_48" }

   ::oModel                         := SQLArticulosUnidadesMedicionModel():New( self )

   ::oDialogView                    := ArticulosUnidadesMedicionView():New( self )

   ::oBrowseView                    := ArticulosUnidadesMedicionBrowseView():New( self )

   ::oValidator                     := ArticulosUnidadesMedicionValidator():New( self )

   ::oRepository                    := ArticulosUnidadesMedicionRepository():New( self )

   ::oUnidadesMedicionController    := UnidadesMedicionController():New( self )

RETURN ( Self )



static FUNCTION ArticulosUnidadesMedicionController_End( ) ; local Self AS CLASS ArticulosUnidadesMedicionController := QSelf() AS CLASS ArticulosUnidadesMedicionController

   ::oModel:End()

   ::oDialogView:End()

   ::oBrowseView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oUnidadesMedicionController:End()

   ::Super:End()

RETURN ( Self )







_HB_CLASS ArticulosUnidadesMedicionBrowseView ; function ArticulosUnidadesMedicionBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosUnidadesMedicionBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ArticulosUnidadesMedicionBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ArticulosUnidadesMedicionBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosUnidadesMedicionBrowseView ;



static FUNCTION ArticulosUnidadesMedicionBrowseView_addColumns( ) ; local Self AS CLASS ArticulosUnidadesMedicionBrowseView := QSelf() AS CLASS ArticulosUnidadesMedicionBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "uuid"
      :cHeader             := "Uuid"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "unidades_medicion_codigo"
      :cHeader             := "Código"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "unidades_medicion_codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "unidades_medicion_nombre"
      :cHeader             := "Nombre"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "unidades_medicion_nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "cantidad"
      :cHeader             := "Cantidad"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "cantidad" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "operar"
      :cHeader             := "Operar"
      :nWidth              := 60
      :bEditValue          := {|| ::getRowSet():fieldGet( "operar" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :SetCheck( { "Sel16", "Nil16" } )
      :AddResource( "Tactil16" )
   end

RETURN ( self )









_HB_CLASS ArticulosUnidadesMedicionView ; function ArticulosUnidadesMedicionView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosUnidadesMedicionView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ArticulosUnidadesMedicionView() ) ) ;

   _HB_MEMBER { oGetCantidad } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetCantidad"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ArticulosUnidadesMedicionView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER StartDialog(); oClass:AddMethod( "StartDialog", @ArticulosUnidadesMedicionView_StartDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosUnidadesMedicionView ;



static FUNCTION ArticulosUnidadesMedicionView_Activate( ) ; local Self AS CLASS ArticulosUnidadesMedicionView := QSelf() AS CLASS ArticulosUnidadesMedicionView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "unidades de medición", "ARTICULOS_UNIDADES_MEDICION",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )

   ::oController:oUnidadesMedicionController:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "unidad_medicion_uuid" ], ::oController:oModel:hBuffer[ "unidad_medicion_uuid" ]:= u ) } )
   ::oController:oUnidadesMedicionController:oGetSelector:Activate( 100, 101, ::oDialog )
   ::oController:oUnidadesMedicionController:oGetSelector:setView( ::oDialogView )








   ::oGetCantidad := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cantidad" ], ::oController:oModel:hBuffer[ "cantidad" ]:= u ) }, ::oDialog,, "@E 99999999.999999",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )





   TSayCheck():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "operar" ], ::oController:oModel:hBuffer[ "operar" ]:= u ) }, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, 121 )





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart     := {|| ::StartDialog() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )



static FUNCTION ArticulosUnidadesMedicionView_StartDialog( ) ; local Self AS CLASS ArticulosUnidadesMedicionView := QSelf() AS CLASS ArticulosUnidadesMedicionView

   ::oController:oUnidadesMedicionController:oGetSelector:Start()

RETURN ( Self )







_HB_CLASS ArticulosUnidadesMedicionValidator ; function ArticulosUnidadesMedicionValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosUnidadesMedicionValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ArticulosUnidadesMedicionValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ArticulosUnidadesMedicionValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosUnidadesMedicionValidator ;



static FUNCTION ArticulosUnidadesMedicionValidator_getValidators( ) ; local Self AS CLASS ArticulosUnidadesMedicionValidator := QSelf() AS CLASS ArticulosUnidadesMedicionValidator


   ::hValidators  := {  "unidad_medicion_uuid" =>  {  "required"  => "El código es un dato requerido", "unique"    => "El código introducido ya existe" } }

RETURN ( ::hValidators )







_HB_CLASS SQLArticulosUnidadesMedicionModel ; function SQLArticulosUnidadesMedicionModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLArticulosUnidadesMedicionModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLArticulosUnidadesMedicionModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_unidades_medicion", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY ( id )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLArticulosUnidadesMedicionModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLArticulosUnidadesMedicionModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getUnidadMedicionUuidAttribute(); oClass:AddInline( "getUnidadMedicionUuidAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), space( 8 ), SQLUnidadesMedicionModel():getCodigoWhereUuid( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setUnidadMedicionUuidAttribute(); oClass:AddInline( "setUnidadMedicionUuidAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), "", SQLUnidadesMedicionModel():getUuidWhereCodigo( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLArticulosUnidadesMedicionModel ;



static FUNCTION SQLArticulosUnidadesMedicionModel_getInitialSelect( ) ; local Self AS CLASS SQLArticulosUnidadesMedicionModel := QSelf() AS CLASS SQLArticulosUnidadesMedicionModel









   local cSelect  := "SELECT articulos_unidades_medicion.id,"                                            + " " +  "articulos_unidades_medicion.uuid,"                                              + " " +  "articulos_unidades_medicion.operar,"                                            + " " +  "articulos_unidades_medicion.cantidad,"                                          + " " +  "unidades_medicion.codigo as unidades_medicion_codigo,"                          + " " +  "unidades_medicion.nombre as unidades_medicion_nombre,"                          + " " +  "unidades_medicion.uuid as unidades_medicion_uuid"                               + " " +  "FROM articulos_unidades_medicion"                                                  + " " +  "INNER JOIN unidades_medicion ON articulos_unidades_medicion.unidad_medicion_uuid = unidades_medicion.uuid"

RETURN ( cSelect )



static FUNCTION SQLArticulosUnidadesMedicionModel_getColumns( ) ; local Self AS CLASS SQLArticulosUnidadesMedicionModel := QSelf() AS CLASS SQLArticulosUnidadesMedicionModel


   hset( ::hColumns, "id",                         {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                       {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",                {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| ::getSenderControllerParentUuid() } } )


   hset( ::hColumns, "unidad_medicion_uuid",       {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "operar",                     {  "create"    => "BIT"                                     , "default"   => {|| .T. } }                               )


   hset( ::hColumns, "cantidad",                   {  "create"    => "FLOAT( 16, 6 )"                          , "default"   => {|| 0 } }                                 )

RETURN ( ::hColumns )







_HB_CLASS ArticulosUnidadesMedicionRepository ; function ArticulosUnidadesMedicionRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ArticulosUnidadesMedicionRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ArticulosUnidadesMedicionRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLArticulosUnidadesMedicionModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ArticulosUnidadesMedicionRepository ;