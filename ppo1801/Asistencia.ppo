#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\Asistencia.prg"
_HB_CLASS TAsistencias ; function TAsistencias ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAsistencias", iif( .T., { @TMant() }, { @HBObject() } ), @TAsistencias() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "server_id_card_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )
   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 33 + ( 115 * 256 ) + ( 70 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TAsistencias_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem); oClass:AddMethod( "New", @TAsistencias_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create( cPath); oClass:AddMethod( "Create", @TAsistencias_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TAsistencias_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAsistencias ;



static FUNCTION TAsistencias_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TAsistencias := QSelf() AS CLASS TAsistencias

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "ASISTENCIA.DBF", "ASISTENCIA" ):New( "ASISTENCIA.DBF",, ( cDriver ), "Registo de usuarios", ( cPath ) )

      ::oDbf:AddField( "uuid", "C", 40, 0,,,,, "Identificador", .F.,, .T., {} )
      ::oDbf:AddField( "cCodUsr", "C", 3, 0,,,,, "Código", .F., 50, .F., {} )
      ::oDbf:AddField( "cNomUsr", "B", 100, 0,,,, {|| ( UsuariosModel():getNombre( ::oDbf:cCodUsr ) )}, "Usuario", .F., 250, .F., {} )
      ::oDbf:AddField( "cMailUsr", "B", 100, 0,,,, {|| ( UsuariosModel():getMail( ::oDbf:cCodUsr ) )}, "Email", .F., 250, .F., {} )
      ::oDbf:AddField( "dFecEnt", "D", 8, 0,,,,, "Fecha entrada", .F., 80, .F., {} )
      ::oDbf:AddField( "cHorEnt", "C", 8, 0,,,,, "Hora entrada", .F.,, .T., {} )
      ::oDbf:AddField( "cHorEntF", "B", 8, 0,,,, {|| ( Trans( ::oDbf:cHorEnt, "@R 99:99:99" ) )}, "Hora entrada", .F., 80, .F., {} )
      ::oDbf:AddField( "dFecSal", "D", 8, 0,,,,, "Fecha salida", .F., 80, .F., {} )
      ::oDbf:AddField( "cHorSal", "C", 8, 0,,,,, "Hora salida", .F.,, .T., {} )
      ::oDbf:AddField( "cHorSalF", "B", 8, 0,,,, {|| ( Trans( ::oDbf:cHorSal, "@R 99:99:99" ) )}, "Hora salida", .F., 80, .F., {} )

      ::oDbf:AddIndex( "dFecEnt", "ASISTENCIA.CDX", "Dtoc( dFecEnt )",,, .F., .F., "Fecha entrada",,, .T., .F. )
      ::oDbf:AddIndex( "dFecSal", "ASISTENCIA.CDX", "Dtoc( dFecSal )",,, .F., .F., "Fecha salida",,, .T., .F. )
      ::oDbf:AddIndex( "cCodUsr", "ASISTENCIA.CDX", "cCodUsr",,, .F., .F., "Usuario",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TAsistencias_New( cPath, oWndParent, oMenuItem ) ; local Self AS CLASS TAsistencias := QSelf() AS CLASS TAsistencias

   If( cPath == nil, cPath := cPatDat(), ) ;
   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;
   If( oMenuItem == nil, oMenuItem := "asistencia", ) ;

   if Empty( ::nLevel )
      ::nLevel          := Auth():Level( oMenuItem )
   end





   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::cHtmlHelp          := "asistencia"

RETURN ( Self )



static FUNCTION TAsistencias_Create( cPath ) ; local Self AS CLASS TAsistencias := QSelf() AS CLASS TAsistencias

   If( cPath == nil, cPath := cPatDat(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



static FUNCTION TAsistencias_Activate( ) ; local Self AS CLASS TAsistencias := QSelf() AS CLASS TAsistencias

   if nAnd( ::nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end





   if ::oWndParent <> nil
      ::oWndParent:CloseAll()
   end

   if Empty( ::oDbf ) .OR. !::oDbf:Used()
      ::lOpenFiles      := ::OpenFiles()
   end





   if ::lOpenFiles

      ::CreateShell( ::nLevel )

      ::oWndBrw:EndButtons( Self )

      if ::cHtmlHelp <> nil
         ::oWndBrw:cHtmlHelp  := ::cHtmlHelp
      end

      ::oWndBrw:Activate( nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, {|| ::CloseFiles() } )

   end

RETURN ( Self )







_HB_CLASS AsistenciasModel ; function AsistenciasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AsistenciasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @AsistenciasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "asistencia" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RegEntrada(); oClass:AddMethod( "RegEntrada", @AsistenciasModel_RegEntrada(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RegSalida(); oClass:AddMethod( "RegSalida", @AsistenciasModel_RegSalida(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AsistenciasModel ;



static FUNCTION AsistenciasModel_RegEntrada( ) ; local Self AS CLASS AsistenciasModel := QSelf() AS CLASS AsistenciasModel

   local cAreaCount
   local cSqlCount

   cSqlCount         := "INSERT INTO " + ::getTableName()
   cSqlCount         += " ( uuid, cCodUsr, dFecEnt, cHorEnt ) VALUES "

   cSqlCount         += " ( " + quoted( win_uuidcreatestring() )
   cSqlCount         += ", " + quoted( Auth():Codigo() )
   cSqlCount         += ", " + quoted( dToc( GetSysDate() ) )
   cSqlCount         += ", " + quoted( GetSysTime() ) + " )"

   ::ExecuteSqlStatement( cSqlCount, @cAreaCount )

RETURN ( Self )



static FUNCTION AsistenciasModel_RegSalida( ) ; local Self AS CLASS AsistenciasModel := QSelf() AS CLASS AsistenciasModel

   local cAreaCount  := "RegSal2"
   local cSqlCount
   local cStm        := "RegSal1"
   local cSql
   local uuid        := ""

   cSQL              := "SELECT * FROM " + ::getTableName()
   cSQL              += " WHERE cCodUsr = " + quoted( Auth():Codigo() )
   cSQL              += " AND cHorSal = ''"
   cSQL              += " ORDER BY dFecEnt DESC"

   if ::ExecuteSqlStatement( cSql, @cStm )
      uuid           := ( cStm )->uuid
   end

   if !Empty( uuid )

      cSqlCount      := "UPDATE " + ::getTableName()
      cSqlCount      += " SET dFecSal = " + quoted( dToc( GetSysDate() ) )
      cSqlCount      += ", cHorSal = " + quoted( GetSysTime() )
      cSqlCount      += " WHERE uuid = " + quoted( uuid )
      cSqlCount      += " AND cCodUsr = " + quoted( Auth():Codigo() )

      ::ExecuteSqlStatement( cSqlCount, @cAreaCount )

   end

RETURN ( Self )
