#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Auditoria.prg"
_HB_CLASS TAuditoria ; function TAuditoria ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAuditoria", iif( .T., { @TMant() }, { @HBObject() } ), @TAuditoria() ) ) ;

   _HB_MEMBER { oDialog } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDialog"}, .F. )
   _HB_MEMBER { oOfficeBar } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOfficeBar"}, .F. )

   _HB_MEMBER { aInforme } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aInforme"}, .F. )

   _HB_MEMBER { uuidDoc } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uuidDoc"}, .F. )
   _HB_MEMBER { cTipDoc } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipDoc"}, .F. )

   _HB_MEMBER { cNumeroDocumento } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNumeroDocumento"}, .F. )
   _HB_MEMBER { cTerceroDocumento } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTerceroDocumento"}, .F. )
   _HB_MEMBER { cFechaHoraDocumento } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFechaHoraDocumento"}, .F. )

   _HB_MEMBER { oBrwInforme } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwInforme"}, .F. )

   _HB_MEMBER { aTemporal } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTemporal"}, .F. )

   _HB_MEMBER Create( cPath) AS CLASS TAuditoria; oClass:AddMethod( "Create", @TAuditoria_Create(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS TAuditoria; oClass:AddMethod( "New", @TAuditoria_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TAuditoria_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InformeAuditoria( uuid, cTipDoc); oClass:AddMethod( "InformeAuditoria", @TAuditoria_InformeAuditoria(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cNumeroFromDocument(); oClass:AddMethod( "cNumeroFromDocument", @TAuditoria_cNumeroFromDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cTerceroFromDocument(); oClass:AddMethod( "cTerceroFromDocument", @TAuditoria_cTerceroFromDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFechaHoraFromDocumento(); oClass:AddMethod( "cFechaHoraFromDocumento", @TAuditoria_cFechaHoraFromDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource(); oClass:AddMethod( "lResource", @TAuditoria_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER StartResource(); oClass:AddMethod( "StartResource", @TAuditoria_StartResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER initTemporal(); oClass:AddMethod( "initTemporal", @TAuditoria_initTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddTemporal( hHash); oClass:AddMethod( "AddTemporal", @TAuditoria_AddTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SaveTemporal(); oClass:AddMethod( "SaveTemporal", @TAuditoria_SaveTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAuditoria ;



static FUNCTION TAuditoria_Create( cPath ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath           := cPath
   ::oDbf            := nil

RETURN ( Self )



static FUNCTION TAuditoria_New( cPath, oWndParent, oMenuItem ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil
      ::nLevel          := Auth():Level( oMenuItem )
   else
      ::nLevel          := Auth():Level( "auditoria" )
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent

   ::oDbf               := nil

RETURN ( Self )



static FUNCTION TAuditoria_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "auditor.dbf", "auditor" ):New( "auditor.dbf", "auditor", ( cDriver ), "Auditoria", ( cPath ) )

      ::oDbf:AddField( "uuid", "C", 40, 0,,,,, "uuid", .F.,, .F., {} )
      ::oDbf:AddField( "cUuidDoc", "C", 40, 0,,,,, "Identificador documento", .F.,, .F., {} )
      ::oDbf:AddField( "dFecha", "D", 8, 0,,,,, "Fecha", .F.,, .F., {} )
      ::oDbf:AddField( "cHora", "C", 10, 0,,,,, "Hora", .F.,, .F., {} )
      ::oDbf:AddField( "cUsuario", "C", 3, 0,,,,, "Usuario", .F.,, .F., {} )
      ::oDbf:AddField( "cDescrip", "C", 200, 0,,,,, "Descipción acción realizada", .F.,, .F., {} )

      ::oDbf:AddIndex( "uuid", "auditor.cdx", "uuid",,, .F., .F., "uuid",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TAuditoria_InformeAuditoria( uuid, cTipDoc ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   if Empty( uuid )
      Return nil
   end

   ::uuidDoc         := uuid
   ::cTipDoc         := cTipDoc

   ::aInforme        := AuditoriaModel():getInfoFromUuid( ::uuidDoc )

   if !hb_isArray( ::aInforme ) .OR. len( ::aInforme ) == 0
      MsgStop( "No existe ningun dato para esta clave" )
      Return nil
   end

   ::cNumeroFromDocument()
   ::cTerceroFromDocument()
   ::cFechaHoraFromDocumento()

   ::lResource()

RETURN ( .T. )



static FUNCTION TAuditoria_lResource( ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   ::oDialog = TDialog():New(,,,, ( "Informe de auditoría" ), ( "auditoria" ),, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )

      ::oBrwInforme                       := IXBrowse():New( ::oDialog )

      ::oBrwInforme:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwInforme:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrwInforme:SetArray( ::aInforme, , , .F. )

      ::oBrwInforme:nMarqueeStyle         := 6
      ::oBrwInforme:cName                 := "Informeauditoria"
      ::oBrwInforme:lHScroll              := .F.

      ::oBrwInforme:CreateFromResource( 100 )

      with object ( ::oBrwInforme:AddCol() )
         :cHeader                         := "Fecha"
         :bStrData                        := {|| if( hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "DFECHA" ) <> nil, hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "DFECHA" ), "" ) }
         :nWidth                          := 80
      end

      with object ( ::oBrwInforme:AddCol() )
         :cHeader                         := "Hora"
         :bStrData                        := {|| if( hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "CHORA" ) <> nil, Trans( hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "CHORA" ), "@R 99:99:99" ), "" ) }
         :nWidth                          := 60
      end

      with object ( ::oBrwInforme:AddCol() )
         :cHeader                         := "Descripción"
         :bStrData                        := {|| if( hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "CDESCRIP" ) <> nil, hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "CDESCRIP" ), "" ) }
         :nWidth                          := 550
      end

      with object ( ::oBrwInforme:AddCol() )
         :cHeader                         := "Usuario"
         :bStrData                        := {|| if( hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "CUSUARIO" ) <> nil, ( hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "CUSUARIO" ) + " - " + UsuariosModel():getNombre( hGet( ::aInforme[ ::oBrwInforme:nArrayAt ], "CUSUARIO" ) ) ), "" ) }
         :nWidth                          := 250
      end

      ::oDialog:bStart                    := {|| ::StartResource() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

Return .T.



static FUNCTION TAuditoria_StartResource( ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   local oBoton
   local oGrupo
   local oCarpeta

   if Empty( ::oOfficeBar )

      ::oOfficeBar            := TDotNetBar():New( 0, 0, 1020, 120, ::oDialog, 1 )

      ::oOfficeBar:lPaintAll  := .F.
      ::oOfficeBar:lDisenio   := .F.

      ::oOfficeBar:SetStyle( 1 )

      ::oDialog:oTop             := ::oOfficeBar

      oCarpeta                   := TCarpeta():New( ::oOfficeBar, "Inicio" )

      oGrupo                     := TDotNetGroup():New( oCarpeta, 366, "", .F., , "gc_user_32" )
         oBoton                  := TDotNetButton():New( 320, oGrupo, "gc_document_white_16",         ::cNumeroDocumento,      1, {|| nil }, , , .F., .F., .F. )
         oBoton                  := TDotNetButton():New( 320, oGrupo, "gc_user_16",                   ::cTerceroDocumento,     1, {|| nil }, , , .F., .F., .F. )
         oBoton                  := TDotNetButton():New( 320, oGrupo, "gc_calendar_16",               ::cFechaHoraDocumento,   1, {|| nil }, , , .F., .F., .F. )

      oGrupo                     := TDotNetGroup():New( oCarpeta, 66,  "", .F. )
         oBoton                  := TDotNetButton():New( 60, oGrupo,    "End32",                      "Salida",   1, {|| ::oDialog:End() }, , , .F., .F., .F. )

   end

Return ( nil )



static FUNCTION TAuditoria_cNumeroFromDocument( ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   do case
      case ::cTipDoc == "12"
         ::cNumeroDocumento := "Simplificada: " + TicketsClientesModel():getNumeroFromUuid( ::uuidDoc )

   end


Return ( nil )



static FUNCTION TAuditoria_cTerceroFromDocument( ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   do case
      case ::cTipDoc == "12"
         ::cTerceroDocumento := "Cliente: " + TicketsClientesModel():getClienteFromUuid( ::uuidDoc )

   end

Return ( nil )



static FUNCTION TAuditoria_cFechaHoraFromDocumento( ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   do case
      case ::cTipDoc == "12"
         ::cFechaHoraDocumento := "Fecha/hora : " + TicketsClientesModel():getFechaHoraFromUuid( ::uuidDoc )

   end

Return ( nil )



static FUNCTION TAuditoria_initTemporal( ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   ::aTemporal := {}

Return ( nil )



static FUNCTION TAuditoria_AddTemporal( hHash ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   if !Empty( hHash )
      aAdd( ::aTemporal, hHash )
   end

Return ( nil )



static FUNCTION TAuditoria_SaveTemporal( ) ; local Self AS CLASS TAuditoria := QSelf() AS CLASS TAuditoria

   if len( ::aTemporal ) == 0
      Return ( nil )
   end



   aEval( ::aTemporal, {|h| AuditoriaModel():addRegister(   hGet( h, "parent_uuid" ), hGet( h, "description" ), hGet( h, "tipodocumento" ) ) } )

Return ( nil )







Function InformeAuditoria( uuid, cTipDoc )

   TAuditoria():InformeAuditoria( uuid, cTipDoc )

Return nil







_HB_CLASS AuditoriaModel ; function AuditoriaModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AuditoriaModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @AuditoriaModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "auditor" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addRegister(); oClass:AddMethod( "addRegister", @AuditoriaModel_addRegister(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInfoFromUuid( uuid); oClass:AddMethod( "getInfoFromUuid", @AuditoriaModel_getInfoFromUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AuditoriaModel ;



static FUNCTION AuditoriaModel_addRegister( uuidDoc, cDescripcion, cTipDoc ) ; local Self AS CLASS AuditoriaModel := QSelf() AS CLASS AuditoriaModel

   local cStm     := "addRegisterAuditoriaModel"
   local cSql     := ""

   cSql         := "INSERT INTO " + ::getTableName()
   cSql         += " ( uuid, cUuidDoc, dFecha, cHora, cUsuario, cDescrip ) VALUES "
   cSql         += " ( " + quoted( win_uuidcreatestring() )
   cSql         += ", " + quoted( uuidDoc )
   cSql         += ", " + quoted( Dtoc( GetSysDate() ) )
   cSql         += ", " + quoted( GetSysTime() )
   cSql         += ", " + quoted( Auth():Codigo() )
   cSql         += ", " + quoted( cDescripcion ) + " )"

   ::ExecuteSqlStatement( cSql, @cStm )

Return nil



static FUNCTION AuditoriaModel_getInfoFromUuid( uuid ) ; local Self AS CLASS AuditoriaModel := QSelf() AS CLASS AuditoriaModel

   local cStm        := "getInfoFromUuid"
   local cSql        := ""
   local aInforme    := {}

   cSql              := "SELECT * FROM " + ::getTableName() + " WHERE cUuidDoc = " + quoted( uuid )

   if ::ExecuteSqlStatement( cSql, @cStm )
      aInforme       := DBHScatter( cStm )

      aSort( aInforme, , , {|x, y| ( dtos( hGet( x, "DFECHA" ) ) + hGet( x, "CHORA" ) ) > ( dtos( hGet( y, "DFECHA" ) ) + hGet( y, "CHORA" ) ) }  )

   end

Return ( aInforme )
