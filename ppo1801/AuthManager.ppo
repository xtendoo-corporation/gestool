#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\Services\AuthManager.prg"
static oAuth



_HB_CLASS AuthManager ; function AuthManager ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AuthManager", iif( .F., { }, { @HBObject() } ), @AuthManager() ) ) ;

   _HB_MEMBER { id } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"id"}, .F. )
   _HB_MEMBER { uuid } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uuid"}, .F. )
   _HB_MEMBER { nombre } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nombre"}, .F. )
   _HB_MEMBER { codigo } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"codigo"}, .F. )
   _HB_MEMBER { email } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"email"}, .F. )
   _HB_MEMBER { password } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"password"}, .F. )
   _HB_MEMBER { rolUuid } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"rolUuid"}, .F. )
   _HB_MEMBER { superUser } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"superUser"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @AuthManager_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Set(); oClass:AddInline( "Set", {|Self, hUser | ( ( Self ) ), ( ::guard( hUser ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Guard( hUser); oClass:AddMethod( "Guard", @AuthManager_Guard(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Level( nOption); oClass:AddMethod( "Level", @AuthManager_Level(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER guardWhereUuid( uuid); oClass:AddMethod( "guardWhereUuid", @AuthManager_guardWhereUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER guardWhereCodigo( cCodigo); oClass:AddMethod( "guardWhereCodigo", @AuthManager_guardWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isSuperAdmin(); oClass:AddInline( "isSuperAdmin", {|Self | ( ( Self ) ), ( ::superUser ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AuthManager ;



static FUNCTION AuthManager_New( hUser ) ; local Self AS CLASS AuthManager := QSelf() AS CLASS AuthManager

   if !empty( hUser )
      ::guard( hUser )
   end

RETURN ( self )



static FUNCTION AuthManager_Guard( hUser ) ; local Self AS CLASS AuthManager := QSelf() AS CLASS AuthManager

   if !hb_ishash( hUser )
      RETURN ( self )
   end

   if hhaskey( hUser, "id" )
      ::id        := hget( hUser, "id" )
   end

   if hhaskey( hUser, "uuid" )
      ::uuid      := hget( hUser, "uuid" )
   end

   if hhaskey( hUser, "UUID" )
      ::uuid      := hget( hUser, "UUID" )
   end

   if hhaskey( hUser, "nombre" )
      ::nombre    := hget( hUser, "nombre" )
   end

   if hhaskey( hUser, "NOMBRE" )
      ::nombre    := hget( hUser, "NOMBRE" )
   end

   if hhaskey( hUser, "codigo" )
      ::codigo    := hget( hUser, "codigo" )
   end

   if hhaskey( hUser, "CODIGO" )
      ::codigo    := hget( hUser, "CODIGO" )
   end

   if hhaskey( hUser, "email" )
      ::email     := hget( hUser, "email" )
   end

   if hhaskey( hUser, "EMAIL" )
      ::email     := hget( hUser, "EMAIL" )
   end

   if hhaskey( hUser, "password" )
      ::password  := hget( hUser, "password" )
   end

   if hhaskey( hUser, "PASSWORD" )
      ::password  := hget( hUser, "PASSWORD" )
   end

   if hhaskey( hUser, "rol_uuid" )
      ::rolUuid   := hget( hUser, "rol_uuid" )
   end

   if hhaskey( hUser, "ROLUUID" )
      ::rolUuid   := hget( hUser, "ROLUUID" )
   end

   if hhaskey( hUser, "super_user" )
      ::superUser := ( hget( hUser, "super_user" ) == 1 )
   end

   if hhaskey( hUser, "LSUPER" )
      ::superUser := hget( hUser, "LSUPER" )
   end

RETURN ( self )



static FUNCTION AuthManager_Level( cOption ) ; local Self AS CLASS AuthManager := QSelf() AS CLASS AuthManager

   local nLevel

   if empty( cOption )
      RETURN ( 63 )
   end

   if empty( ::rolUuid )
      RETURN ( 63 )
   end

   nLevel         := DetPermisosModel():getNivelRol( ::rolUuid, cOption )

   if !empty( nLevel )
      RETURN ( nLevel )
   end

RETURN ( 63 )



static FUNCTION AuthManager_guardWhereUuid( uuid ) ; local Self AS CLASS AuthManager := QSelf() AS CLASS AuthManager

   local hUser    := UsuariosModel():getWhereUuid( Uuid )

   if hb_ishash( hUser )
      ::guard( hUser )
   endif

RETURN ( self )



static FUNCTION AuthManager_guardWhereCodigo( cNombre ) ; local Self AS CLASS AuthManager := QSelf() AS CLASS AuthManager

   local hUser    := UsuariosModel():getWhereNombre( cNombre )

   if hb_ishash( hUser )
      ::guard( hUser )
   endif

RETURN ( self )







FUNCTION Auth( hUser )

   if empty( oAuth )
      oAuth       := AuthManager():New()
   end

   if !empty( hUser )
      oAuth:Guard( hUser )
   end

RETURN ( oAuth )
