#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\BalanzasController.prg"
_HB_CLASS BalanzasController ; function BalanzasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "BalanzasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @BalanzasController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @BalanzasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @BalanzasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS BalanzasController ;



static FUNCTION BalanzasController_New( ) ; local Self AS CLASS BalanzasController := QSelf() AS CLASS BalanzasController

   ::Super:New()

   ::cTitle                      := "Balanzas"

   ::cName                       := "balanzas"



   ::hImage                      := {  "16" => "gc_balance_16", "32" => "gc_balance_32", "48" => "gc_balance_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLBalanzasModel():New( self )

   ::oBrowseView                    := BalanzasBrowseView():New( self )

   ::oDialogView                    := BalanzasView():New( self )

   ::oValidator                     := BalanzasValidator():New( self, ::oDialogView )

   ::oRepository                    := BalanzasRepository():New( self )

   ::oGetSelector                   := GetSelector():New( self )

RETURN ( Self )



static FUNCTION BalanzasController_End( ) ; local Self AS CLASS BalanzasController := QSelf() AS CLASS BalanzasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::Super:End()

RETURN ( Self )











_HB_CLASS BalanzasBrowseView ; function BalanzasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "BalanzasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @BalanzasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @BalanzasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS BalanzasBrowseView ;



static FUNCTION BalanzasBrowseView_addColumns( ) ; local Self AS CLASS BalanzasBrowseView := QSelf() AS CLASS BalanzasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS BalanzasView ; function BalanzasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "BalanzasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @BalanzasView() ) ) ;

   _HB_MEMBER { oPuerto } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPuerto"}, .F. )


   _HB_MEMBER { aPuerto } ; oClass:AddMultiData(, { "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "COM10", "COM11", "COM12", "COM13", "COM14", "COM15", "COM16", "COM17", "COM18" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aPuerto"}, .F. )

   _HB_MEMBER { oBPS } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBPS"}, .F. )

   _HB_MEMBER { aBPS } ; oClass:AddMultiData(, { "2400", "4800", "9600", "19200", "38400", "57600", "115200", "203400", "460800", "921600" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBPS"}, .F. )

   _HB_MEMBER { oParada } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oParada"}, .F. )

   _HB_MEMBER { aParada } ; oClass:AddMultiData(, { "0", "1", "2" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aParada"}, .F. )

   _HB_MEMBER { oDatos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDatos"}, .F. )

   _HB_MEMBER { aDatos } ; oClass:AddMultiData(, { "7", "8" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDatos"}, .F. )

   _HB_MEMBER { oParidad } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oParidad"}, .F. )

   _HB_MEMBER { aParidad } ; oClass:AddMultiData(, { "Sin paridad", "Paridad par", "Paridad impar" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aParidad"}, .F. )

   _HB_MEMBER { oInicializacion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInicializacion"}, .F. )

   _HB_MEMBER SetDefault(); oClass:AddMethod( "SetDefault", @BalanzasView_SetDefault(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @BalanzasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS BalanzasView ;



static FUNCTION BalanzasView_Activate( ) ; local Self AS CLASS BalanzasView := QSelf() AS CLASS BalanzasView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "balanzas", "BALANZA_SQL",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )





   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






    ::oPuerto := TComboBox():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "puerto" ], ::oController:oModel:hBuffer[ "puerto" ]:= u ) }, ::aPuerto, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},,,,,, "::oPuerto",,,,,,, )






   ::oBPS := TComboBox():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "bits_segundo" ], ::oController:oModel:hBuffer[ "bits_segundo" ]:= u ) }, ::aBPS, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},,,,,, "::oBPS",,,,,,, )






   ::oParada := TComboBox():ReDefine( 140, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "bits_parada" ], ::oController:oModel:hBuffer[ "bits_parada" ]:= u ) }, ::aParada, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},,,,,, "::oParada",,,,,,, )






   ::oDatos := TComboBox():ReDefine( 150, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "bits_datos" ], ::oController:oModel:hBuffer[ "bits_datos" ]:= u ) }, ::aDatos, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},,,,,, "::oDatos",,,,,,, )






   ::oParidad := TComboBox():ReDefine( 160, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "paridad" ], ::oController:oModel:hBuffer[ "paridad" ]:= u ) }, ::aParidad, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},,,,,, "::oParidad",,,,,,, )





   ::oInicializacion := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "inicializacion" ], ::oController:oModel:hBuffer[ "inicializacion" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "retardo" ], ::oController:oModel:hBuffer[ "retardo" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,, {||  0},,, nil,,, )




   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "entubamiento" ], ::oController:oModel:hBuffer[ "entubamiento" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TSayCheck():ReDefine( 200, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "abrir_puerto" ], ::oController:oModel:hBuffer[ "abrir_puerto" ]:= u ) }, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, 202 )






   TButton():ReDefine( 210, {||( msgalert("test") )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 220, {||( ::SetDefault() )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )






   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )


   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )


RETURN ( ::oDialog:nResult )



static FUNCTION BalanzasView_SetDefault( ) ; local Self AS CLASS BalanzasView := QSelf() AS CLASS BalanzasView

   ::oController:oModel:hBuffer[ "inicializacion" ] := 98000001
   ::oInicializacion:refresh()

RETURN( self )







_HB_CLASS BalanzasValidator ; function BalanzasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "BalanzasValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @BalanzasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @BalanzasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS BalanzasValidator ;



static FUNCTION BalanzasValidator_getValidators( ) ; local Self AS CLASS BalanzasValidator := QSelf() AS CLASS BalanzasValidator




   ::hValidators  := {  "codigo" =>                {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe" }, "nombre" =>                {  "required"           => "El nombre es un dato requerido"    , "unique"             => "El nombre introducido ya existe"   }  }
RETURN ( ::hValidators )










_HB_CLASS SQLBalanzasModel ; function SQLBalanzasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLBalanzasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLBalanzasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "balanzas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLBalanzasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLBalanzasModel ;



static FUNCTION SQLBalanzasModel_getColumns( ) ; local Self AS CLASS SQLBalanzasModel := QSelf() AS CLASS SQLBalanzasModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 )"                           , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "puerto",            {  "create"   => "VARCHAR( 200 )"                           , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "bits_segundo",      {  "create"    => "VARCHAR( 200 )"                          , "default"   => {||  space( 200 ) } }                      )


   hset( ::hColumns, "bits_parada",       {  "create"    => "VARCHAR( 200 )"                           , "default"   => {||  space( 200 )  } }                     )


   hset( ::hColumns, "bits_datos",        {  "create"    => "VARCHAR( 200 )"                           , "default"   => {|| space( 200 )  } }                      )


   hset( ::hColumns, "paridad",           {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "inicializacion",    {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "retardo",           {  "create"    => "INTEGER"                                 , "default"   => {||  0  } }                                )


   hset( ::hColumns, "entubamiento",      {  "create"    => "VARCHAR( 1 )"                          , "default"   => {|| space( 1 ) } }                       )


   hset( ::hColumns, "abrir_puerto",      {  "create"    => "BIT"                                     , "default"   => {|| .F. } }                               )



RETURN ( ::hColumns )











_HB_CLASS BalanzasRepository ; function BalanzasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "BalanzasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @BalanzasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLBalanzasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS BalanzasRepository ;