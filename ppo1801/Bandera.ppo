#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\.\Prg\Bandera.prg"
_HB_CLASS TBandera ; function TBandera ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TBandera", iif( .F., { }, { @HBObject() } ), @TBandera() ) ) ;

   _HB_MEMBER { AS ARRAY aResBan } ; oClass:AddMultiClsData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aResBan"}, .F. )
   _HB_MEMBER { AS ARRAY aNomBan } ; oClass:AddMultiClsData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aNomBan"}, .F. )
   _HB_MEMBER { AS ARRAY aBmpBan } ; oClass:AddMultiClsData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBmpBan"}, .F. )

   _HB_MEMBER { cName } ; oClass:AddMultiData(, "Banderas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TBandera_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End() ; oClass:AddVirtual( "End" )

   _HB_MEMBER Destroy(); oClass:AddMethod( "Destroy", @TBandera_Destroy(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER hBandera( cRes); oClass:AddMethod( "hBandera", @TBandera_hBandera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cBandera( cRes); oClass:AddMethod( "cBandera", @TBandera_cBandera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenService(); oClass:AddInline( "OpenService", {|Self | ( ( Self ) ), ( .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseService(); oClass:AddInline( "CloseService", {|Self | ( ( Self ) ), ( .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TBandera ;



static FUNCTION TBandera_New( ) ; local Self AS CLASS TBandera := QSelf() AS CLASS TBandera

   local cRes

   if Empty( ::aResBan )


















































































      ::aResBan   := {  "BAN_ALB" , "BAN_ALEM", "BAN_AND" , "BAN_ANGO", "BAN_ARGE", "BAN_ARM" , "BAN_AUST", "BAN_AUT" , "BAN_AZB" , "BAN_BOLI", "BAN_BOS" , "BAN_BRAS", "BAN_BULG", "BAN_BELG", "BAN_CABO", "BAN_CANA", "BAN_CHIL", "BAN_CHIN", "BAN_CHIP", "BAN_COLO", "BAN_RICA", "BAN_CRO" , "BAN_CUBA", "BAN_DINA", "BAN_ECUA", "BAN_SALV", "BAN_EMIR", "BAN_ESPA", "BAN_EST" , "BAN_EURO", "BAN_FINL", "BAN_FRAN", "BAN_GEOR", "BAN_GRBR", "BAN_GREC", "BAN_GUAT", "BAN_GUIN", "BAN_HOLA", "BAN_HOND", "BAN_HUNG", "BAN_INDI", "BAN_IRLA", "BAN_ISLA", "BAN_ISRA", "BAN_ITAL", "BAN_JAPO", "BAN_LIEC", "BAN_LIT" , "BAN_LUXE", "BAN_MALT", "BAN_MARR", "BAN_MOLD", "BAN_MONG", "BAN_MOZA", "BAN_MEJI", "BAN_MONC", "BAN_NIC" , "BAN_NORM", "BAN_NORU", "BAN_REST", "BAN_PANA", "BAN_PARG", "BAN_PERU", "BAN_POLO", "BAN_PORT", "BAN_RPDO", "BAN_RUM" , "BAN_RUS" , "BAN_SMAR", "BAN_SING", "BAN_SLK" , "BAN_SLN" , "BAN_SUEC", "BAN_SUIZ", "BAN_SURA", "BAN_TURK", "BAN_TURQ", "BAN_USA" , "BAN_URUG", "BAN_UZB" , "BAN_VAT" , "BAN_VENE", "BAN_YUG"  }
   end

   if Empty( ::aNomBan )


















































































      ::aNomBan   := {  "Albania"             , "Alemania"            , "Andorra"             , "Angola"              , "Argentina"           , "Armenia"             , "Australia"           , "Austria"             , "Azerbaijan"          , "Bolivia"             , "Bosnia-Herzegovina"  , "Brasil"              , "Bulgaria"            , "Bélgica"             , "Cabo Verde"          , "Canadá"              , "Chile"               , "China"               , "Chipre"              , "Colombia"            , "Costa Rica"          , "Croacia"             , "Cuba"                , "Dinamarca"           , "Ecuador"             , "El Salvador"         , "Emiratos Arabes"     , "España"              , "Estonia"             , "Europa"              , "Finlandia"           , "Francia"             , "Georgia"             , "Gran Bretaña"        , "Grecia"              , "Guatemala"           , "Guinea"              , "Holanda"             , "Honduras"            , "Hungría"             , "India"               , "Irlanda"             , "Islandia"            , "Israel"              , "Italia"              , "Japón"               , "Liechtenstein"       , "Lituania"            , "Luxemburgo"          , "Malta"               , "Marruecos"           , "Moldavia"            , "Mongolia"            , "Mozambique"          , "Méjico"              , "Mónaco"              , "Nicaragua"           , "Normandía"           , "Noruega"             , "Otros"               , "Panamá"              , "Paragüay"            , "Perú"                , "Polonia"             , "Portugal"            , "República Dominicana", "Rumanía"             , "Rusia"               , "San Marino"          , "Singapur"            , "Slovakia"            , "Slovenia"            , "Suecia"              , "Suiza"               , "Suráfrica"           , "Turkmenistan"        , "Turquía"             , "USA"                 , "Urugüay"             , "Uzbekistan"          , "Vaticano"            , "Venezuela"           , "Yugoslavia"           }
   end

   if Empty( ::aBmpBan )
      ::aBmpBan   := {}
      for each cRes in ::aResBan
         aAdd( ::aBmpBan, LoadBitMap( GetResources(), cRes ) )
      next
   end

return ( Self )



static FUNCTION TBandera_Destroy( ) ; local Self AS CLASS TBandera := QSelf() AS CLASS TBandera

   local hBmp

   if !Empty( ::aBmpBan )
      for each hBmp in ::aBmpBan
         DeleteObject( hBmp )
      next
   end

return ( Self )







static FUNCTION TBandera_hBandera( cRes ) ; local Self AS CLASS TBandera := QSelf() AS CLASS TBandera

   local n
   local h  := 0

   if IsChar( cRes )

      n     := aScan( ::aResBan, AllTrim( cRes ) )
      if n  <> 0
         h  := ::aBmpBan[ n ]
      end

   end

return ( h )






static FUNCTION TBandera_cBandera( cRes ) ; local Self AS CLASS TBandera := QSelf() AS CLASS TBandera

   local n
   local c  := ""

   if IsChar( cRes )

      n     := aScan( ::aResBan, AllTrim( cRes ) )
      if n  <> 0
         c  := ::aNomBan[ n ]
      end

   end

return ( c )
