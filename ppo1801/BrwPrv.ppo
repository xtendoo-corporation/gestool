#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\BrwPrv.prg"
static dbfPedPrvT
static dbfPedPrvL
static dbfAlbPrvT
static dbfAlbPrvL
static dbfFacPrvT
static dbfFacPrvL
static dbfRctPrvT
static dbfRctPrvL
static dbfFacPrvP
static dbfFPago
static oDbfTmp

static oBtnFiltro

static oMenu
static oTreeImageList
static oTreeDocument
static oTreePedidos
static aCom
static aTotCom
static oCom
static oTotCom
static oBrwTmp
static nComFac       := 0
static nCobFac       := 0
static oTotFac
static oTotCob
static oTotal
static oGraph

static oMeter
static nMeter

static oText
static cText         := ""

static cPouDiv
static cPinDiv
static cPirDiv
static cPorDiv
static nDouDiv
static nDorDiv
static nDinDiv
static nDirDiv
static cPicUnd
static nVdvDiv



Static Function OpenFiles()

   local lOpen       := .F.
   local oError
   local oBlock

   CursorWait()

   oTotCom           := Array( 3 )
   oCom              := Array( 12, 3 )
   aTotCom           := Afill( Array( 3 ), 0 )
   aCom              := Array( 12, 3 )

   aEval( aCom, {|a| Afill( a, 0 ) } )

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVT.DBF" ), ( cCheckArea( "PEDPROVT", @dbfPedPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodPrv" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.DBF" ), ( cCheckArea( "PEDPROVL", @dbfPedPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.DBF" ), ( cCheckArea( "ALBPROVT", @dbfAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodPrv" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVT.DBF" ), ( cCheckArea( "FACPRVT", @dbfFacPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodPrv" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvT.DBF" ), ( cCheckArea( "RctPrvT", @dbfRctPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodPrv" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacPrvP.DBF" ), ( cCheckArea( "FacPrvP", @dbfFacPrvP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacPrvP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodPrv" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      oDbfTmp        := DefineTemporal()
      oDbfTmp:Activate( .F., .F. )

      lOpen          := .T.

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos" )
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

   CursorWE()

Return ( lOpen )



Static Function CloseFiles()

   ( dbfPedPrvT )->( dbCloseArea() )
   ( dbfPedPrvL )->( dbCloseArea() )
   ( dbfAlbPrvT )->( dbCloseArea() )
   ( dbfAlbPrvL )->( dbCloseArea() )
   ( dbfFacPrvT )->( dbCloseArea() )
   ( dbfFacPrvL )->( dbCloseArea() )
   ( dbfFacPrvP )->( dbCloseArea() )
   ( dbfFPago   )->( dbCloseArea() )
   ( dbfRctPrvT )->( dbCloseArea() )
   ( dbfRctPrvL )->( dbCloseArea() )

   oDbfTmp:Close()

   dbfErase( oDbfTmp:cPath + oDbfTmp:cName )

Return ( .T. )



function BrwComPrv( cCodPrv, cNomPrv, dbfDiv, dbfIva )

   local oDlg
   local oFld
   local oTree
   local oBrwCom
   local aDbfBmp
   local oCmbAnio
   local cCmbAnio          := "Todos"
   local oBmpGeneral
   local oBmpDocumentos
   local oBmpGraficos

   if !OpenFiles()
      Return nil
   end














   aDbfBmp           := {  LoadBitmap( GetResources(), "bRed"   ), LoadBitmap( GetResources(), "bYelow" ), LoadBitmap( GetResources(), "bGreen" ), LoadBitmap( GetResources(), "bmpLock"), LoadBitmap( GetResources(), "gc_clipboard_empty_businessman_16" ), LoadBitmap( GetResources(), "gc_document_empty_businessman_16" ), LoadBitmap( GetResources(), "gc_document_text_businessman_16" ), LoadBitmap( GetResources(), "MovAlm" ), LoadBitmap( GetResources(), "PreCli" ), LoadBitmap( GetResources(), "PedCli" ), LoadBitmap( GetResources(), "AlbCli" ), LoadBitmap( GetResources(), "FacCli" ), LoadBitmap( GetResources(), "TikCli" ), LoadBitmap( GetResources(), "gc_document_text_delete2_16" ) }

   cPicUnd           := MasUnd()
   cPouDiv           := cPouDiv( cDivEmp(), dbfDiv )
   cPinDiv           := cPinDiv( cDivEmp(), dbfDiv )
   cPirDiv           := cPirDiv( cDivEmp(), dbfDiv )
   cPorDiv           := cPorDiv( cDivEmp(), dbfDiv )
   nDouDiv           := nDouDiv( cDivEmp(), dbfDiv )
   nDorDiv           := nRouDiv( cDivEmp(), dbfDiv )
   nDinDiv           := nDinDiv( cDivEmp(), dbfDiv )
   nDirDiv           := nRinDiv( cDivEmp(), dbfDiv )
   nVdvDiv           := nChgDiv( cDivEmp(), dbfDiv )

   CursorWait()

   oDbfTmp:Cargo     := cCodPrv





   oDlg = TDialog():New(,,,, "Información del proveedor : " + Rtrim( cNomPrv ), "ARTINFO",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









   oFld := TFolder():ReDefine( 300, {"E&stadisticas"      , "Documentos"         , "Gráfico"}, { "PROVEE_9","INFO_1","INFO_2" }, oDlg,,,,, .F., )

   oBmpGeneral := TBitmap():ReDefine( 500, "gc_businessman_48",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .T. )

   oBrwCom                       := IXBrowse():New( oFld:aDialogs[ 1 ] )

   oBrwCom:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwCom:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwCom:SetArray( aCom, , , .F. )

   oBrwCom:lFooter            := .T.
   oBrwCom:lVScroll           := .F.
   oBrwCom:lHScroll           := .F.
   oBrwCom:nMarqueeStyle      := 5
   oBrwCom:cName              := "Cmp info proveedor"
   oBrwCom:CreateFromResource( 400 )

   with object ( oBrwCom:AddCol() )
      :cHeader                   := "Mes"
      :nWidth                    := 420
      :bStrData                  := {|| cNombreMes( oBrwCom:nArrayAt ) }
      :bFooter                   := {|| "Totales" }
   end

   with object ( oBrwCom:AddCol() )
      :cHeader                   := cNombreCajas()
      :nWidth                    := 135
      :bEditValue                := {|| aCom[ oBrwCom:nArrayAt, 1] }
      :cEditPicture              := cPicUnd
      :bFooter                   := {|| aTotCom[1] }
      :nDataStrAlign             := 1
      :nHeadStrAlign             := 1
      :nFootStrAlign             := 1
   end

   with object ( oBrwCom:AddCol() )
      :cHeader                   := cNombreUnidades()
      :nWidth                    := 135
      :bEditValue                := {|| aCom[ oBrwCom:nArrayAt, 2] }
      :cEditPicture              := cPicUnd
      :bFooter                   := {|| aTotCom[2] }
      :nDataStrAlign             := 1
      :nHeadStrAlign             := 1
      :nFootStrAlign             := 1
   end

   with object ( oBrwCom:AddCol() )
      :cHeader                   := "Total " + cNombreUnidades()
      :nWidth                    := 135
      :bEditValue                := {|| NotCero( aCom[ oBrwCom:nArrayAt, 1] ) + NotCero( aCom[ oBrwCom:nArrayAt, 2] ) }
      :cEditPicture              := cPicUnd
      :bFooter                   := {|| aTotCom[2] }
      :nDataStrAlign             := 1
      :nHeadStrAlign             := 1
      :nFootStrAlign             := 1
      :lHide                     := .T.
   end

   with object ( oBrwCom:AddCol() )
      :cHeader                   := "Importe"
      :nWidth                    := 155
      :bEditValue                := {|| aCom[ oBrwCom:nArrayAt, 3] }
      :cEditPicture              := cPirDiv
      :bFooter                   := {|| aTotCom[3] }
      :nDataStrAlign             := 1
      :nHeadStrAlign             := 1
      :nFootStrAlign             := 1
   end





   oTotFac := TSay():ReDefine( 170, {|| nComFac}, oFld:aDialogs[1], cPirDiv,,, .F.,, .F., .F., )
   oTotCob := TSay():ReDefine( 171, {|| nCobFac}, oFld:aDialogs[1], cPirDiv,,, .F.,, .F., .F., )
   oTotal := TSay():ReDefine( 172, {|| nComFac - nCobFac}, oFld:aDialogs[1], cPirDiv,,, .F.,, .F., .F., )





   oBmpDocumentos := TBitmap():ReDefine( 500, "gc_document_text_pencil_48",, oFld:aDialogs[ 2 ],,, .F., .F.,,, .F.,,, .T. )

   oTree             := TTreeView():Redefine( 310, oFld:aDialogs[2]  )
   oTree:bChanged    := {|| TreeChanged( oTree, oBrwTmp ) }








   TButton():ReDefine( 301, {||( EditDocument( oBrwTmp ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




   TButton():ReDefine( 302, {||( ZoomDocument( oBrwTmp ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




   TButton():ReDefine( 304, {||( VisualizaDocument( oBrwTmp ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




   TButton():ReDefine( 305, {||( PrintDocument( oBrwTmp ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




  oBtnFiltro := TButton():ReDefine( 306, {||( Filtro( oBrwTmp ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




   TButton():ReDefine( 307, {||( TInfLPrv():New( "Informe detallado de documentos de proveedores", , , , , , { oDbfTmp, cCmbAnio } ):Play() )}, oFld:aDialogs[2],,, .F.,,,, .F. )





   oBrwTmp                       := IXBrowse():New( oFld:aDialogs[ 2 ] )

   oBrwTmp:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwTmp:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
   oBrwTmp:bLDblClick            := {|| ZoomDocument( oBrwTmp ) }

   oBrwTmp:nMarqueeStyle         := 5
   oBrwTmp:lFooter               := .T.
   oBrwTmp:cName                 := "Docs info proveedor"

   oBrwTmp:CreateFromResource( 300 )

   oDbfTmp:SetBrowse( oBrwTmp )

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Dc. Documento"
      :bStrData      := {|| cTextoDocument() }
      :bBmpData      := {|| nImagenDocument() }
      :nWidth        := 20
      :AddResource( "gc_clipboard_empty_businessman_16" )
      :AddResource( "gc_document_empty_businessman_16" )
      :AddResource( "gc_document_text_businessman_16" )
      :AddResource( "gc_document_text_delete2_16" )
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Estado"
      :bEditValue    := {|| oDbfTmp:cEstado }
      :nWidth        := 70
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Número"
      :bEditValue    := {|| cMaskNumDoc( oDbfTmp ) }
      :nWidth        := 80
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Fecha"
      :bEditValue    := {|| Dtoc( oDbfTmp:dFecDoc ) }
      :nWidth        := 70
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Entrada"
      :bEditValue    := {|| Dtoc( oDbfTmp:dFecEnt ) }
      :nWidth        := 75
      :lHide         := .T.
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Código"
      :bEditValue    := {|| oDbfTmp:cCodPrv }
      :nWidth        := 50
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Nombre"
      :bEditValue    := {|| oDbfTmp:cNomPrv }
      :nWidth        := 310
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Almacén"
      :bEditValue    := {|| oDbfTmp:cAlmDoc }
      :nWidth        := 30
      :lHide         := .T.
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Total"
      :bEditValue    := {|| oDbfTmp:nImpDoc }
      :bFooter       := {|| nTotImp( oDbfTmp ) }
      :cEditPicture  := cPorDiv
      :nWidth        := 80
      :nDataStrAlign := 1
      :nHeadStrAlign := 1
      :nFootStrAlign := 1
   end

   with object ( oBrwTmp:addCol() )
      :cHeader       := "Cliente"
      :bEditValue    := {|| oDbfTmp:cClient }
      :nWidth        := 80
      :lHide         := .T.
   end





   oBmpGraficos := TBitmap():ReDefine( 500, "gc_chart_column_48",, oFld:aDialogs[ 3 ],,, .F., .F.,,, .F.,,, .T. )







   TBtnBmp():ReDefine( 101, "gc_chart_column_16",,,,, {|Self|( oGraph:SetType( 1 ) )}, oFld:aDialogs[ 3 ], .F.,, .F., "Gráfico de barras",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 102, "gc_chart_line_16",,,,, {|Self|( oGraph:SetType( 2 ) )}, oFld:aDialogs[ 3 ], .F.,, .F., "Gráfico de lineas",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 103, "gc_chart_dot_16",,,,, {|Self|( oGraph:SetType( 3 ) )}, oFld:aDialogs[ 3 ], .F.,, .F., "Gráfico de puntos",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 104, "gc_chart_area_16",,,,, {|Self|( oGraph:SetType( 4 ) )}, oFld:aDialogs[ 3 ], .F.,, .F., "Gráfico combinado",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 105, "gc_chart_pie_16",,,,, {|Self|( oGraph:SetType( 5 ) )}, oFld:aDialogs[ 3 ], .F.,, .F., "Gráfico combinado",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 106, "gc_3d_glasses_16",,,,, {|Self|( oGraph:l3D := !oGraph:l3D, oGraph:Refresh() )}, oFld:aDialogs[ 3 ], .F.,, .F., "Gráficos en tres dimensiones",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 107, "gc_copy_16",,,,, {|Self|( oGraph:Copy2ClipBoard() )}, oFld:aDialogs[ 3 ], .F.,, .F., "Copiar el gráfico en el portapapeles",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 108, "gc_printer2_16",,,,, {|Self|( GetPrtCoors( oGraph ) )}, oFld:aDialogs[ 3 ], .F.,, .F., "Imprimir el gráfico",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







   TBtnBmp():ReDefine( 109, "gc_clipboard_checks_16",,,,, {|Self|( GraphPropierties( oGraph ) )}, oFld:aDialogs[ 3 ], .F.,, .F., "Propiedades del gráfico",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )

   oGraph                  := TGraph():ReDefine( 300, oFld:aDialogs[3] )








   oCmbAnio := TComboBox():ReDefine( 310, { | u | If( PCount()==0, cCmbAnio, cCmbAnio:= u ) }, { "Todos", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }, oDlg,,, {|Self|( LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, cCmbAnio, oBrwCom ), oBrwTmp:Refresh(), oGraph:Refresh(), oGraph:Refresh() )}, "N/W*",,, .F.,,,,,,, "oCmbAnio",,,,,,, )







   oText := TSay():ReDefine( 400, {|| cText}, oDlg,,,, .F.,, .F., .F., )

   oMeter      := TApoloMeter():ReDefine( 200, { | u | if( pCount() == 0, nMeter, nMeter := u ) }, 10, oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )




   TButton():ReDefine( 306, {||( LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, cCmbAnio, oBrwCom ), oBrwTmp:Refresh(), oGraph:Refresh() )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 501, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )

   oFld:aDialogs[2]:AddFastKey( 114, {|| EditDocument(), LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, cCmbAnio, oBrwCom ), oBrwTmp:Refresh(), oGraph:Refresh() } )

   oDlg:bStart                      := {|| LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, cCmbAnio, oBrwCom ), oGraph:Refresh() }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( CloseFiles() )},, {|Self|( InitBrwPrv( cCodPrv, dbfDiv, dbfIva, oTree, oDlg, oGraph, cCmbAnio, oBrwCom ), SysRefresh() )}, oDlg:bRClicked,,, )

   aEval( aDbfBmp, { | hBmp | DeleteObject( hBmp ) } )

   if !Empty( oBmpGeneral )
      oBmpGeneral:End()
   end

   if !Empty( oBmpDocumentos )
      oBmpDocumentos:End()
   end

   if !Empty( oBmpGraficos )
      oBmpGraficos:End()
   end

   oMenu:End()

return nil



Static Function InitBrwPrv( cCodPrv, dbfDiv, dbfIva, oTree, oDlg, oGraph, nYear, oBrwCom )

   oBrwTmp:Load()

   oTreeImageList := TImageList():New( 16, 16 )

   oTreeImageList:AddMasked( TBitmap():Define( "gc_businessman_16" ),                  ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "gc_clipboard_empty_businessman_16" ),  ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "gc_document_empty_businessman_16" ),   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "gc_document_text_businessman_16" ),    ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "gc_delete_12" ),                       ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "gc_shape_square_12" ),                 ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "gc_check_12" ),                        ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "gc_document_text_delete2_16" ),        ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )

   oTree:SetImageList( oTreeImageList )

   oTreeDocument  := oTree:Add( "Todos los documentos", 0 )
   oTreePedidos   := oTreeDocument:Add( cTextoDocument( "01" ), 1 )
   oTreePedidos:Add( "Pendientes", 4 )
   oTreePedidos:Add( "Parcialmente", 5 )
   oTreePedidos:Add( "Recibidos", 6 )
   oTreeDocument:Add( cTextoDocument( "02" ), 2 )
   oTreeDocument:Add( cTextoDocument( "03" ), 3 )
   oTreeDocument:Add( cTextoDocument( "04" ), 7 )

   oTreeDocument:Expand()

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Añadir pedido a proveedor", "Añade un pedido a proveedor", .F.,, {|oMenuItem|( AppPedPrv( cCodPrv, "", .F. ), LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, nYear, oBrwCom ), oBrwTmp:Refresh(), oGraph:Refresh() )},, "gc_clipboard_empty_businessman_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&2. Añadir albarán de proveedor", "Añade un albarán de proveedor", .F.,, {|oMenuItem|( AppAlbPrv( cCodPrv, "", .F. ), LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, nYear, oBrwCom ), oBrwTmp:Refresh(), oGraph:Refresh() )},, "gc_document_empty_businessman_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&3. Añadir factura de proveedor", "Añade una factura de proveedor", .F.,, {|oMenuItem|( AppFacPrv( cCodPrv, "", .F. ), LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, nYear, oBrwCom ), oBrwTmp:Refresh(), oGraph:Refresh() )},, "gc_document_text_businessman_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return nil



Static Function LoadDatos( cCodPrv, dbfDiv, dbfIva, oDlg, nYear, oBrwCom )

   local n

   oDlg:Disable()

   CursorWait()

   oMeter:Show()
   oMeter:SetTotal( 6 )





   oText:SetText( "Calculando compras mensuales" )

   aTotCom[1]        := 0
   aTotCom[2]        := 0
   aTotCom[3]        := 0

   for n := 1 to 12

      if ( RolesModel():getRolVerPreciosCosto( Auth():rolUuid() ) )
         aCom[n,1]   := nTotCajCom( cCodPrv, dbfAlbPrvT, dbfAlbPrvL, dbfFacPrvT, dbfFacPrvL, dbfRctPrvT, dbfRctPrvL, if( nYear == "Todos", nil, Val( nYear ) ) )
         aCom[n,2]   := nTotUndCom( cCodPrv, dbfAlbPrvT, dbfAlbPrvL, dbfFacPrvT, dbfFacPrvL, dbfRctPrvT, dbfRctPrvL, n, if( nYear == "Todos", nil, Val( nYear ) ) )
         aCom[n,3]   := nTotImpCom( cCodPrv, dbfAlbPrvT, dbfAlbPrvL, dbfFacPrvT, dbfFacPrvL, dbfRctPrvT, dbfRctPrvL, dbfIva, dbfDiv, n, if( nYear == "Todos", nil, Val( nYear ) ) )
      else
         aCom[n,1]   := 0
         aCom[n,2]   := 0
         aCom[n,3]   := 0
      end

      aTotCom[1]     += aCom[n,1]
      aTotCom[2]     += aCom[n,2]
      aTotCom[3]     += aCom[n,3]

      oMeter:AutoInc()

   next

   oText:SetText( "Calculando de totales" )

   nComFac           := nTotComFac( cCodPrv, dbfFacPrvT, dbfFacPrvL, dbfFacPrvP, dbfIva, dbfDiv, if( nYear == "Todos", nil, Val( nYear ) ) )
   nCobFac           := nTotCobFac( cCodPrv, dbfFacPrvT, dbfFacPrvP, dbfIva, dbfDiv, if( nYear == "Todos", nil, Val( nYear ) ) )



   if ( RolesModel():getRolVerPreciosCosto( Auth():rolUuid() ) )
      oTotFac:SetText( nComFac )
      oTotCob:SetText( nCobFac )
      oTotal:SetText( nComFac - nCobFac )
   else
      oTotFac:SetText( 0 )
      oTotCob:SetText( 0 )
      oTotal:SetText( 0 )
   end

   oMeter:AutoInc()





   oDbfTmp:Zap()

   oText:SetText( "Cargando los documentos" )

   LoadPedidoProveedor( cCodPrv, dbfIva, dbfDiv, dbfFPago, if( nYear == "Todos", nil, Val( nYear ) ) )
   oMeter:AutoInc()

   LoadAlbaranProveedor( cCodPrv, dbfIva, dbfDiv, if( nYear == "Todos", nil, Val( nYear ) ) )
   oMeter:AutoInc()

   LoadFacturaProveedor( cCodPrv, dbfIva, dbfDiv, if( nYear == "Todos", nil, Val( nYear ) ) )
   oMeter:AutoInc()

   LoadRectificativaProveedor( cCodPrv, dbfIva, dbfDiv, if( nYear == "Todos", nil, Val( nYear ) ) )
   oMeter:AutoInc()

   oDbfTmp:GoTop()

   oBrwTmp:Refresh( .T. )

   oBrwCom:Refresh()
   oBrwCom:RefreshFooters()





   oText:SetText( "Calculando de gráficos" )

   oGraph:aSeries    := {}
   oGraph:aData      := {}
   oGraph:aSTemp     := {}
   oGraph:aDTemp     := {}

   oGraph:AddSerie( { aCom[ 1, 3 ], aCom[ 2, 3 ], aCom[ 3, 3 ], aCom[ 4, 3 ], aCom[ 5, 3 ], aCom[ 6, 3 ], aCom[ 7, 3 ], aCom[ 8, 3 ], aCom[ 9, 3 ], aCom[ 10, 3 ], aCom[ 11, 3 ], aCom[ 12, 3 ] }, "Compras", ( 253 + ( 186 * 256 ) + ( 40 * 65536 ) ) )
   oGraph:SetYVals( { "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic" } )

   oGraph:cTitle           := "Evolución anual de compras"
   oGraph:lcTitle          := .F.
   oGraph:nClrT            := ( 55 + ( 55 * 256 ) + ( 55 * 65536 ) )
   oGraph:nClrX            := 8388608
   oGraph:nClrY            := 128
   oGraph:cPicture         := cPirDiv

   oText:SetText()

   oMeter:Hide()

   CursorWE()

   oDlg:Enable()

return nil



Static Function TreeChanged( oTree )

   local cText    := oTree:GetSelText()

   do case

      case cText == cTextoDocument( "01" )
         oDbfTmp:OrdSetFocus( "cTypDoc" )
         oDbfTmp:OrdScope( "01" )

      case cText == "Pendientes"
         oDbfTmp:OrdSetFocus( "cTypPed" )
         oDbfTmp:OrdScope( "01" + Padr( "Pendiente", 20 ) )

      case cText == "Parcialmente"
         oDbfTmp:OrdSetFocus( "cTypPed" )
         oDbfTmp:OrdScope( "01" + Padr( "Parcialmente", 20 ) )

      case cText == "Recibidos"
         oDbfTmp:OrdSetFocus( "cTypPed" )
         oDbfTmp:OrdScope( "01" + Padr( "Recibido", 20 ) )

      case cText == cTextoDocument( "02" )
         oDbfTmp:OrdSetFocus( "cTypDoc" )
         oDbfTmp:OrdScope( "02" )

      case cText == cTextoDocument( "03" )
         oDbfTmp:OrdSetFocus( "cTypDoc" )
         oDbfTmp:OrdScope( "03" )

      case cText == cTextoDocument( "04" )
         oDbfTmp:OrdSetFocus( "cTypDoc" )
         oDbfTmp:OrdScope( "04" )

      otherwise
         oDbfTmp:OrdSetFocus( "cAllDoc" )
         oDbfTmp:OrdClearScope()

   end

   oBrwTmp:Refresh(.T.)

Return nil



Static Function nImagenDocument()

   do case
      case oDbfTmp:nTypDoc == "01"
         Return ( 1 )

      case oDbfTmp:nTypDoc == "02"
         Return ( 2 )

      case oDbfTmp:nTypDoc == "03"
         Return ( 3 )

      case oDbfTmp:nTypDoc == "04"
         Return ( 4 )

   end

Return ( 1 )



Static Function EditDocument()

   do case
      case oDbfTmp:nTypDoc == "01"
         EdtPedPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "02"
         EdtAlbPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "03"
         EdtFacPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "04"
         EdtRctPrv( oDbfTmp:cNumDoc )

   end

Return nil



Static Function ZoomDocument()

   do case
      case oDbfTmp:nTypDoc == "01"
         ZooPedPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "02"
         ZooAlbPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "03"
         ZooFacPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "04"
         ZooRctPrv( oDbfTmp:cNumDoc )

   end

Return nil



Static Function DeleteDocument()

   MsgStop( "No se puede eliminar el documento" )
















Return nil



Static Function VisualizaDocument()

   do case
      case oDbfTmp:nTypDoc == "01"
         VisPedPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "02"
         VisAlbPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "03"
         VisFacPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "04"
         VisRctPrv( oDbfTmp:cNumDoc )

   end

Return nil



Static Function PrintDocument()

   do case
      case oDbfTmp:nTypDoc == "01"
         PrnPedPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "02"
         PrnAlbPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "03"
         PrnFacPrv( oDbfTmp:cNumDoc )

      case oDbfTmp:nTypDoc == "04"
         PrnRctPrv( oDbfTmp:cNumDoc )

   end

Return nil



Static Function DefineTemporal( cPath, lUniqueName, cFileName )

   local oDbf

   If( cPath == nil, cPath := cPatTmp(), ) ;
   If( lUniqueName == nil, lUniqueName := .T., ) ;
   If( cFileName == nil, cFileName := "InfPrv", ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPatTmp() )
   end

   oDbf := DbfServer( ( cFileName ), "InfPrv" ):New( ( cFileName ), ( cFileName ), ( cLocalDriver() ),, ( cPath ) )

      oDbf:AddField( "nTypDoc", "C", 2, 0,,,,, "Tipo de documento", .F.,, .F., {} )
      oDbf:AddField( "cEstado", "C", 20, 0,,,,, "Estado del documento", .F.,, .F., {} )
      oDbf:AddField( "dFecDoc", "D", 8, 0,,,,, "Fecha del documento", .F.,, .F., {} )
      oDbf:AddField( "cNumDoc", "C", 13, 0,,,,, "Número del documento", .F.,, .F., {} )
      oDbf:AddField( "cCodPrv", "C", 12, 0,,,,, "Código del proveedor", .F.,, .F., {} )
      oDbf:AddField( "cNomPrv", "C", 50, 0,,,,, "Nombre del proveedor", .F.,, .F., {} )
      oDbf:AddField( "cAlmDoc", "C", 3, 0,,,,, "Almacén", .F.,, .F., {} )
      oDbf:AddField( "nImpDoc", "N", 16, 6,,,,, "Importe del documento", .F.,, .F., {} )
      oDbf:AddField( "cDivisa", "C", 3, 0,,,,, "Divisa del documento", .F.,, .F., {} )
      oDbf:AddField( "dFecEnt", "D", 8, 0,,,,, "Fecha de entrada", .F.,, .F., {} )
      oDbf:AddField( "cSituac", "C", 20, 0,,,,, "Situación del documento", .F.,, .F., {} )
      oDbf:AddField( "cClient", "C", 50, 0,,,,, "Cliente del que procede", .F.,, .F., {} )

      oDbf:AddIndex( "cAllDoc", ( cFileName ), "Dtos( dFecDoc )",,, .F., .F.,,,, .F., .F. )
      oDbf:AddIndex( "cTypPed", ( cFileName ), "nTypDoc + cEstado + Dtos( dFecDoc )",,, .F., .F.,,,, .F., .F. )
      oDbf:AddIndex( "cTypDoc", ( cFileName ), "nTypDoc + Dtos( dFecDoc )",,, .F., .F.,,,, .F., .F. )



Return ( oDbf )



Function cTextoDocument( nTypDoc )

   local cTextDocument  := ""

   If( nTypDoc == nil, nTypDoc := oDbfTmp:nTypDoc, ) ;

   do case
      case nTypDoc == "01"
         cTextDocument  := "Pedidos"
      case nTypDoc == "02"
         cTextDocument  := "Albaranes"
      case nTypDoc == "03"
         cTextDocument  := "Facturas"
      case nTypDoc == "04"
         cTextDocument  := "Rectificativas"

   end

Return ( cTextDocument )



Static Function LoadPedidoProveedor( cCodPrv, dbfDiv, dbfIva, dbfFPago, nYear )

   if ( dbfPedPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfPedPrvT )->cCodPrv == cCodPrv .AND. !( dbfPedPrvT )->( eof() )

         if Empty( nYear ) .OR. nYear == Year( ( dbfPedPrvT )->dFecPed )

            oDbfTmp:Append()
            oDbfTmp:nTypDoc         := "01"
            do case
               case ( dbfPedPrvT )->nEstado == 1
                  oDbfTmp:cEstado   := "Pendiente"
               case ( dbfPedPrvT )->nEstado == 2
                  oDbfTmp:cEstado   := "Parcialmente"
               case ( dbfPedPrvT )->nEstado == 3
                  oDbfTmp:cEstado   := "Recibido"
            end
            oDbfTmp:dFecDoc         := ( dbfPedPrvT )->dFecPed
            oDbfTmp:cNumDoc         := ( dbfPedPrvT )->cSerPed + Str( ( dbfPedPrvT )->nNumPed ) + ( dbfPedPrvT )->cSufPed
            oDbfTmp:cCodPrv         := ( dbfPedPrvT )->cCodPrv
            oDbfTmp:cNomPrv         := ( dbfPedPrvT )->cNomPrv
            oDbfTmp:cAlmDoc         := ( dbfPedPrvT )->cCodAlm

            if RolesModel():getRolVerPreciosCosto( Auth():rolUuid() )
               oDbfTmp:nImpDoc      := nTotPedPrv( ( dbfPedPrvT )->cSerPed + Str( ( dbfPedPrvT )->nNumPed ) + ( dbfPedPrvT )->cSufPed, dbfPedPrvT, dbfPedPrvL, dbfIva, dbfDiv, nil, nil, .F. )
            else
               oDbfTmp:nImpDoc      := 0
            end

            oDbfTmp:cDivisa         := ( dbfPedPrvT )->cDivPed
            oDbfTmp:dFecEnt         := ( dbfPedPrvT )->dFecEnt
            oDbfTmp:cSituac         := ( dbfPedPrvT )->cSituac
            oDbfTmp:cClient         := if( !Empty( ( dbfPedPrvT )->cNumPedCli ), AllTrim( GetCodCli( ( dbfPedPrvT )->cNumPedCli ) ) + " - " + AllTrim( GetNomCli( ( dbfPedPrvT )->cNumPedCli ) ), Space(95) )

            oDbfTmp:Save()

         end

         ( dbfPedPrvT )->( dbSkip() )

      end

   end

Return nil



Static Function LoadAlbaranProveedor( cCodPrv, dbfIva, dbfDiv, nYear )

   if ( dbfAlbPrvT )->( dbSeek( cCodPrv ) )
      while ( dbfAlbPrvT )->cCodPrv == cCodPrv .AND. !( dbfAlbPrvT )->( eof() )

         if nYear == nil .OR. nYear == Year( ( dbfAlbPrvT )->dFecAlb )

            oDbfTmp:Append()
            oDbfTmp:nTypDoc      := "02"
            if( dbfAlbPrvT )->lFacturado
               oDbfTmp:cEstado   := "Facturado"
            else
               oDbfTmp:cEstado   := "No facturado"
            end
            oDbfTmp:dFecDoc      := ( dbfAlbPrvT )->dFecAlb
            oDbfTmp:cNumDoc      := ( dbfAlbPrvT )->cSerAlb + Str( ( dbfAlbPrvT )->nNumAlb ) + ( dbfAlbPrvT )->cSufAlb
            oDbfTmp:cCodPrv      := ( dbfAlbPrvT )->cCodPrv
            oDbfTmp:cNomPrv      := ( dbfAlbPrvT )->cNomPrv
            oDbfTmp:cAlmDoc      := ( dbfAlbPrvT )->cCodAlm

            if RolesModel():getRolVerPreciosCosto( Auth():rolUuid() )
               oDbfTmp:nImpDoc   := nTotAlbPrv( ( dbfAlbPrvT )->cSerAlb + Str( ( dbfAlbPrvT )->nNumAlb ) + ( dbfAlbPrvT )->cSufAlb, dbfAlbPrvT, dbfAlbPrvL, dbfIva, dbfDiv, nil, nil, .F. )
            else
               oDbfTmp:nImpDoc   := 0
            end

            oDbfTmp:cDivisa      := ( dbfAlbPrvT )->cDivAlb
            oDbfTmp:dFecEnt      := ctod("")
            oDbfTmp:cSituac      := Space(20)
            oDbfTmp:cClient      := Space(95)
            oDbfTmp:Save()

         end

         ( dbfAlbPrvT )->( dbSkip() )

      end
   end

Return nil



Static Function LoadFacturaProveedor( cCodPrv, dbfIva, dbfDiv, nYear )

   if ( dbfFacPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfFacPrvT )->cCodPrv == cCodPrv .AND. !( dbfFacPrvT )->( eof() )

         if nYear == nil .OR. nYear == Year( ( dbfFacPrvT )->dFecFac )

            oDbfTmp:Append()
            oDbfTmp:nTypDoc         := "03"
            if( dbfFacPrvT )->lLiquidada
               oDbfTmp:cEstado      := "Pagada"
            else
               oDbfTmp:cEstado      := "Pendiente"
            end
            oDbfTmp:dFecDoc         := ( dbfFacPrvT )->dFecFac
            oDbfTmp:cNumDoc         := ( dbfFacPrvT )->cSerFac + Str( ( dbfFacPrvT )->nNumFac ) + ( dbfFacPrvT )->cSufFac
            oDbfTmp:cCodPrv         := ( dbfFacPrvT )->cCodPrv
            oDbfTmp:cNomPrv         := ( dbfFacPrvT )->cNomPrv
            oDbfTmp:cAlmDoc         := ( dbfFacPrvT )->cCodAlm

            if RolesModel():getRolVerPreciosCosto( Auth():rolUuid() )
               oDbfTmp:nImpDoc      := nTotFacPrv( ( dbfFacPrvT )->cSerFac + Str( ( dbfFacPrvT )->nNumFac ) + ( dbfFacPrvT )->cSufFac, dbfFacPrvT, dbfFacPrvL, dbfIva, dbfDiv, dbfFacPrvP, nil, nil, .F. )
            else
               oDbfTmp:nImpDoc      := 0
            end

            oDbfTmp:cDivisa         := ( dbfFacPrvT )-> cDivFac
            oDbfTmp:dFecEnt         := Ctod("")
            oDbfTmp:cSituac         := Space(20)
            oDbfTmp:cClient         := Space(95)
            oDbfTmp:Save()

         end

         ( dbfFacPrvT )->( dbSkip() )

      end

   end

Return nil


Static Function LoadRectificativaProveedor( cCodPrv, dbfIva, dbfDiv, nYear )

   if ( dbfRctPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfRctPrvT )->cCodPrv == cCodPrv .AND. !( dbfRctPrvT )->( eof() )

         if nYear == nil .OR. nYear == Year( ( dbfRctPrvT )->dFecFac )

            oDbfTmp:Append()
            oDbfTmp:nTypDoc      := "04"
            if( dbfRctPrvT )->lLiquidada
               oDbfTmp:cEstado   := "Pagada"
            else
               oDbfTmp:cEstado   := "Pendiente"
            end
            oDbfTmp:dFecDoc      := ( dbfRctPrvT )->dFecFac
            oDbfTmp:cNumDoc      := ( dbfRctPrvT )->cSerFac + Str( ( dbfRctPrvT )->nNumFac ) + ( dbfRctPrvT )->cSufFac
            oDbfTmp:cCodPrv      := ( dbfRctPrvT )->cCodPrv
            oDbfTmp:cNomPrv      := ( dbfRctPrvT )->cNomPrv
            oDbfTmp:cAlmDoc      := ( dbfRctPrvT )->cCodAlm

            if RolesModel():getRolVerPreciosCosto( Auth():rolUuid() )
               oDbfTmp:nImpDoc   := nTotRctPrv( ( dbfRctPrvT )->cSerFac + Str( ( dbfRctPrvT )->nNumFac ) + ( dbfRctPrvT )->cSufFac, dbfRctPrvT, dbfRctPrvL, dbfIva, dbfDiv, dbfFacPrvP, nil, nil, .F. )
            else
               oDbfTmp:nImpDoc   := 0
            end

            oDbfTmp:cDivisa      := ( dbfRctPrvT )-> cDivFac
            oDbfTmp:dFecEnt      := Ctod("")
            oDbfTmp:cSituac      := Space(20)
            oDbfTmp:cClient      := Space(95)
            oDbfTmp:Save()

         end

         ( dbfRctPrvT )->( dbSkip() )

      end

   end

Return nil




Static Function nTotImp( oDbfTmp )

   local nRec     := oDbfTmp:Recno()
   local nTotImp  := 0

   oDbfTmp:GoTop()
   while !oDbfTmp:Eof()
      nTotImp     += oDbfTmp:nImpDoc
      oDbfTmp:Skip()
   end

   oDbfTmp:GoTo( nRec )

Return ( nTotImp )



Static Function Filtro( oBrwTmp )

   local oFilter  := TFilterCreator():Init()

   oFilter:SetDatabase( oDbfTmp )
   oFilter:Dialog()

   if !Empty( oFilter:cExpresionFilter )
      oDbfTmp:SetFilter( oFilter:cExpresionFilter )
      SetWindowText( oBtnFiltro:hWnd, "Filtro activo" )
   else
      oDbfTmp:SetFilter()
      SetWindowText( oBtnFiltro:hWnd, "Filtrar" )
   end

   oBrwTmp:Refresh()

Return( .T. )



static function nTotCajCom( cCodPrv, dbfAlbPrvT, dbfAlbPrvL, dbfFacPrvT, dbfFacPrvL, dbfRctPrvT, dbfRctPrvL, nMes, nYear )

   local nTotCajCom  := 0

   nTotCajCom        += nCajComAlb( cCodPrv, nMes, dbfAlbPrvT, dbfAlbPrvL, nYear )
   nTotCajCom        += nCajComFac( cCodPrv, nMes, dbfFacPrvT, dbfFacPrvL, nYear )
   nTotCajCom        += nCajComRct( cCodPrv, nMes, dbfRctPrvT, dbfRctPrvL, nYear )

return nTotCajCom



static function nTotUndCom( cCodPrv, dbfAlbPrvT, dbfAlbPrvL, dbfFacPrvT, dbfFacPrvL, dbfRctPrvT, dbfRctPrvL, nMes, nYear )

   local nTotUndCom  := 0

   nTotUndCom        += nUndComAlb( cCodPrv, nMes, dbfAlbPrvT, dbfAlbPrvL, nYear )
   nTotUndCom        += nUndComFac( cCodPrv, nMes, dbfFacPrvT, dbfFacPrvL, nYear )
   nTotUndCom        += nUndComRct( cCodPrv, nMes, dbfRctPrvT, dbfRctPrvL, nYear )

return nTotUndCom



static function nTotImpCom( cCodPrv, dbfAlbPrvT, dbfAlbPrvL, dbfFacPrvT, dbfFacPrvL, dbfRctPrvT, dbfRctPrvL, dbfIva, dbfDiv, nMes, nYear )

   local nTotImpCom  := 0

   nTotImpCom        += nImpComAlb( cCodPrv, nMes, dbfAlbPrvT, dbfAlbPrvL, dbfIva, dbfDiv, nYear )
   nTotImpCom        += nImpComFac( cCodPrv, nMes, dbfFacPrvT, dbfFacPrvL, dbfIva, dbfDiv, nYear )
   nTotImpCom        += nImpComRct( cCodPrv, nMes, dbfRctPrvT, dbfRctPrvL, dbfFacPrvP, dbfIva, dbfDiv, nYear )

return nTotImpCom



static function nImpComAlb( cCodPrv, nMes, dbfAlbPrvT, dbfAlbPrvL, dbfIva, dbfDiv, nYear )

   local nImp     := 0
   local nRec     := ( dbfAlbPrvT )->( Recno() )

   if ( dbfAlbPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfAlbPrvT )->cCodPrv == cCodPrv .AND. !( dbfAlbPrvT )->( Eof() )



         if !( dbfAlbPrvT )->lFacturado         .AND. ( nYear == nil .OR. Year( ( dbfAlbPrvT )->dFecAlb ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfAlbPrvT )->dFecAlb ) == nMes )

            nImp  += nTotAlbPrv( ( dbfAlbPrvT )->CSERALB + Str( (dbfAlbPrvT)->NNUMALB ) + (dbfAlbPrvT)->CSUFALB, dbfAlbPrvT, dbfAlbPrvL, dbfIva, dbfDiv, nil, cDivEmp(), .F. )

         end

         ( dbfAlbPrvT )->( dbSkip() )

      end

   end

   ( dbfAlbPrvT )->( dbGoTo( nRec ) )

return nImp



static function nImpComFac( cCodPrv, nMes, dbfFacPrvT, dbfFacPrvL, dbfIva, dbfDiv, nYear )

   local nCon     := 0
   local nRec     := ( dbfFacPrvT )->( Recno() )

   if ( dbfFacPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfFacPrvT )->cCodPrv == cCodPrv .AND. !( dbfFacPrvT )->( Eof() )


         if ( nYear == nil .OR. Year( ( dbfFacPrvT )->dFecFac ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfFacPrvT )->dFecFac ) == nMes )

            nCon     += nTotFacPrv( ( dbfFacPrvT )->cSerFac + Str( (dbfFacPrvT)->nNumFac ) + (dbfFacPrvT)->cSufFac, dbfFacPrvT, dbfFacPrvL, dbfIva, dbfDiv, dbfFacPrvP, nil, cDivEmp(), .F. )

         end

         ( dbfFacPrvT )->( dbSkip() )

      end

   end

   ( dbfFacPrvT )->( dbGoTo( nRec ) )

return ( nCon )



static function nCajComAlb( cCodPrv, nMes, dbfAlbPrvT, dbfAlbPrvL, nYear )

   local nCon     := 0
   local nRec     := ( dbfAlbPrvT )->( Recno() )

   if ( dbfAlbPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfAlbPrvT )->cCodPrv == cCodPrv .AND. !( dbfAlbPrvT )->( Eof() )



         if !( dbfAlbPrvT )->lFacturado      .AND. ( nYear == nil .OR. Year( ( dbfAlbPrvT )->dFecAlb ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfAlbPrvT )->dFecAlb ) == nMes )

            if ( dbfAlbPrvL )->( dbSeek( ( dbfAlbPrvT )->CSERALB + Str( (dbfAlbPrvT)->NNUMALB ) + (dbfAlbPrvT)->CSUFALB ) )

               while ( dbfAlbPrvT )->CSERALB + Str( (dbfAlbPrvT)->NNUMALB ) + (dbfAlbPrvT)->CSUFALB == ( dbfAlbPrvL )->CSERALB + Str( ( dbfAlbPrvL )->NNUMALB ) + ( dbfAlbPrvL )->CSUFALB .AND. !( dbfAlbPrvL )->( Eof() )

                  nCon  += ( dbfAlbPrvL )->nCanEnt

                  (dbfAlbPrvL)->( dbSkip() )

               end

            end

         end

         ( dbfAlbPrvT )->( dbSkip() )

      end

   end

   ( dbfAlbPrvT )->( dbGoTo( nRec ) )

return nCon



static function nCajComFac( cCodPrv, nMes, dbfFacPrvT, dbfFacPrvL, nYear )

   local nCon     := 0
   local nRec     := 0

   if Empty( dbfFacPrvT )
      return ( nCon )
   end

   nRec           := ( dbfFacPrvT )->( Recno() )

   if ( dbfFacPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfFacPrvT )->cCodPrv == cCodPrv .AND. !( dbfFacPrvT )->( Eof() )


         if ( nYear == nil .OR. Year( ( dbfFacPrvT )->dFecFac ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfFacPrvT )->dFecFac ) == nMes )

            if ( dbfFacPrvL )->( dbSeek( ( dbfFacPrvT )->cSerFac + Str( (dbfFacPrvT)->nNumFac ) + (dbfFacPrvT)->cSufFac ) )

               while ( dbfFacPrvT )->cSerFac + Str( (dbfFacPrvT)->NNUMFac ) + (dbfFacPrvT)->CSUFFac == ( dbfFacPrvL )->cSerFac + Str( ( dbfFacPrvL )->NNUMFac ) + ( dbfFacPrvL )->CSUFFac .AND. !( dbfFacPrvL )->( Eof() )

                  nCon  += ( dbfFacPrvL )->nCanEnt

                  (dbfFacPrvL)->( dbSkip() )

               end

            end

         end

         ( dbfFacPrvT )->( dbSkip() )

      end

   end

   ( dbfFacPrvT )->( dbGoTo( nRec ) )

return ( nCon )



static function nUndComAlb( cCodPrv, nMes, dbfAlbPrvT, dbfAlbPrvL, nYear )

   local nCon     := 0
   local nRec     := ( dbfAlbPrvT )->( Recno() )

   if ( dbfAlbPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfAlbPrvT )->cCodPrv == cCodPrv .AND. !( dbfAlbPrvT )->( Eof() )



         if !( dbfAlbPrvT )->lFacturado      .AND. ( nYear == nil .OR. Year( ( dbfAlbPrvT )->dFecAlb ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfAlbPrvT )->dFecAlb ) == nMes )

            if ( dbfAlbPrvL )->( dbSeek( ( dbfAlbPrvT )->CSERALB + Str( (dbfAlbPrvT)->NNUMALB ) + (dbfAlbPrvT)->CSUFALB ) )

               while ( dbfAlbPrvT )->CSERALB + Str( (dbfAlbPrvT)->NNUMALB ) + (dbfAlbPrvT)->CSUFALB == ( dbfAlbPrvL )->CSERALB + Str( ( dbfAlbPrvL )->NNUMALB ) + ( dbfAlbPrvL )->CSUFALB .AND. !( dbfAlbPrvL )->( Eof() )

                  nCon  += nTotNAlbPrv( dbfAlbPrvL )

                  (dbfAlbPrvL)->( dbSkip() )

               end

            end

         end

         ( dbfAlbPrvT )->( dbSkip() )

      end

   end

   ( dbfAlbPrvT )->( dbGoTo( nRec ) )

return nCon



static function nUndComFac( cCodPrv, nMes, dbfFacPrvT, dbfFacPrvL, nYear )

   local nCon     := 0
   local nRec     := ( dbfFacPrvT )->( Recno() )

   if ( dbfFacPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfFacPrvT )->cCodPrv == cCodPrv .AND. !( dbfFacPrvT )->( Eof() )


         if ( nYear == nil .OR. Year( ( dbfFacPrvT )->dFecFac ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfFacPrvT )->dFecFac ) == nMes )

            if ( dbfFacPrvL )->( dbSeek( ( dbfFacPrvT )->cSerFac + Str( (dbfFacPrvT)->nNumFac ) + (dbfFacPrvT)->cSufFac ) )

               while ( dbfFacPrvT )->cSerFac + Str( (dbfFacPrvT)->NNUMFac ) + (dbfFacPrvT)->CSUFFac == ( dbfFacPrvL )->cSerFac + Str( ( dbfFacPrvL )->NNUMFac ) + ( dbfFacPrvL )->CSUFFac .AND. !( dbfFacPrvL )->( Eof() )

                  nCon  += nTotNFacPrv( dbfFacPrvL )

                  (dbfFacPrvL)->( dbSkip() )

               end

            end

         end

         ( dbfFacPrvT )->( dbSkip() )

      end

   end

   ( dbfFacPrvT )->( dbGoTo( nRec ) )

return ( nCon )



static function nTotComFac( cCodPrv, dbfFacPrvT, dbfFacPrvL, dbfFacPrvP, dbfIva, dbfDiv, nYear )

   local nTotComFac  := 0

   nTotComFac        += nVtaFacPrv( cCodPrv, nil, nil, dbfFacPrvT, dbfFacPrvL, dbfFacPrvP, dbfIva, dbfDiv, nYear )

return nTotComFac



static function nTotCobFac( cCodPrv, dbfFacPrvT, dbfFacPrvP, dbfIva, dbfDiv, nYear )

   local nTotCobFac  := 0

   nTotCobFac        += nCobFacPrv( cCodPrv, nil, nil, dbfFacPrvT, dbfFacPrvP, dbfIva, dbfDiv, .T., nYear )

return nTotCobFac



static function nUndComRct( cCodPrv, nMes, dbfRctPrvT, dbfRctPrvL, nYear )

   local nCon     := 0
   local nRec     := ( dbfRctPrvT )->( Recno() )

   if ( dbfRctPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfRctPrvT )->cCodPrv == cCodPrv .AND. !( dbfRctPrvT )->( Eof() )


         if ( nYear == nil .OR. Year( ( dbfRctPrvT )->dFecFac ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfRctPrvT )->dFecFac ) == nMes )

            if ( dbfRctPrvL )->( dbSeek( ( dbfRctPrvT )->cSerFac + Str( ( dbfRctPrvT )->nNumFac ) + ( dbfRctPrvT )->cSufFac ) )

               while ( dbfRctPrvT )->cSerFac + Str( ( dbfRctPrvT )->nNumFac ) + ( dbfRctPrvT )->cSufFac == ( dbfRctPrvL )->cSerFac + Str( ( dbfRctPrvL )->nNumFac ) + ( dbfRctPrvL )->cSufFac .AND. !( dbfRctPrvL )->( Eof() )

                  nCon  += nTotNRctPrv( dbfRctPrvL )

                  ( dbfRctPrvL )->( dbSkip() )

               end

            end

         end

         ( dbfRctPrvT )->( dbSkip() )

      end

   end

   ( dbfRctPrvT )->( dbGoTo( nRec ) )

return ( nCon )



static function nCajComRct( cCodPrv, nMes, dbfRctPrvT, dbfRctPrvL, nYear )

   local nCon     := 0
   local nRec     := ( dbfRctPrvT )->( Recno() )

   if ( dbfRctPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfRctPrvT )->cCodPrv == cCodPrv .AND. !( dbfRctPrvT )->( Eof() )


         if ( nYear == nil .OR. Year( ( dbfRctPrvT )->dFecFac ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfRctPrvT )->dFecFac ) == nMes )

            if ( dbfRctPrvL )->( dbSeek( ( dbfRctPrvT )->cSerFac + Str( ( dbfRctPrvT )->nNumFac ) + ( dbfRctPrvT )->cSufFac ) )

               while ( dbfRctPrvT )->cSerFac + Str( ( dbfRctPrvT )->nNumFac ) + ( dbfRctPrvT )->cSufFac == ( dbfRctPrvL )->cSerFac + Str( ( dbfRctPrvL )->nNumFac ) + ( dbfRctPrvL )->cSufFac .AND. !( dbfRctPrvL )->( Eof() )

                  nCon  += ( dbfRctPrvL )->nCanEnt

                  ( dbfRctPrvL )->( dbSkip() )

               end

            end

         end

         ( dbfRctPrvT )->( dbSkip() )

      end

   end

   ( dbfRctPrvT )->( dbGoTo( nRec ) )

return ( nCon )



static function nImpComRct( cCodPrv, nMes, dbfRctPrvT, dbfRctPrvL, dbfFacPrvP, dbfIva, dbfDiv, nYear )

   local nCon     := 0
   local nRec     := ( dbfRctPrvT )->( Recno() )

   if ( dbfRctPrvT )->( dbSeek( cCodPrv ) )

      while ( dbfRctPrvT )->cCodPrv == cCodPrv .AND. !( dbfRctPrvT )->( Eof() )

         if ( nYear == nil .OR. Year( ( dbfRctPrvT )->dFecFac ) == nYear ) .AND. ( nMes == 0 .OR. Month( ( dbfRctPrvT )->dFecFac ) == nMes )

            nCon     += nTotRctPrv( ( dbfRctPrvT )->cSerFac + Str( ( dbfRctPrvT )->nNumFac ) + ( dbfRctPrvT )->cSufFac, dbfRctPrvT, dbfRctPrvL, dbfIva, dbfDiv, dbfFacPrvP, nil, cDivEmp(), .F. )

         end

         ( dbfRctPrvT )->( dbSkip() )

      end

   end

   ( dbfRctPrvT )->( dbGoTo( nRec ) )

return ( nCon )
