#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\BrwStkArt.prg"
static oDlg

static oBmpStock
static oBmpImage

static oBrwStk
static oBrwPdt

static oText

static oMeter
static nMeter

static nView

static cTmpStock

static oTreeInfo
static oImageListInfo



function BrwStkArt( nVista )

   nView       := nVista

   if Empty( ( D():Articulos( nView ) )->Codigo )
      Return nil
   end

   CursorWait()





   oDlg = TDialog():New(,,,, "Información stock artículo.", "ArtInfoStock",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






   oBmpStock := TBitmap():ReDefine( 500, "gc_package_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )



   oText := TSay():ReDefine( 400, {|| "Información stock artículo: " + Rtrim( ( D():Articulos( nView ) )->Codigo ) + " - " + Rtrim( ( D():Articulos( nView ) )->Nombre )}, oDlg,,,, .F.,, .F., .F., )








   oBmpImage := TImage():ReDefine( 110,, cFileBmpName( ( D():Articulos( nView ) )->cImagen, .T. ), oDlg,,, .F., .F.,,, .F.,,, .F. )

      oBmpImage:SetColor( , GetSysColor( 15 ) )

      oBmpImage:bLClicked              := {|| ShowImage( oBmpImage ) }
      oBmpImage:bRClicked              := {|| ShowImage( oBmpImage ) }





   oTreeInfo                        := TTreeView():Redefine( 120, oDlg )

   oImageListInfo                   := TImageList():New( 16, 16 )

   oImageListInfo:AddMasked( TBitmap():Define( "gc_object_cube_16" ),   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oImageListInfo:AddMasked( TBitmap():Define( "gc_star2_16" ),         ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oImageListInfo:AddMasked( TBitmap():Define( "gc_calendar_16" ),      ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )





   oBrwStk                       := IXBrowse():New( oDlg )

   oBrwStk:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwStk:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwStk:CreateFromResource( 300 )

   oBrwStk:lFooter               := .T.
   oBrwStk:lVScroll              := .T.
   oBrwStk:lHScroll              := .T.
   oBrwStk:nMarqueeStyle         := 6
   oBrwStk:cName                 := "Stocks en informe de articulos"

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Lote"
      :nWidth                    := 70
      :bEditValue                := {|| getTreeStkValue( oBrwStk, "lote" ) }
   end

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Código propiedad 1"
      :nWidth                    := 50
      :bStrData                  := {|| getTreeStkValue( oBrwStk, "propiedad1" ) }
      :lHide                     := .T.
   end

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Código propiedad 2"
      :nWidth                    := 50
      :bStrData                  := {|| getTreeStkValue( oBrwStk, "propiedad2", .F. ) }
      :lHide                     := .T.
   end

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Valor propiedad 1"
      :nWidth                    := 50
      :bStrData                  := {|| getTreeStkValue( oBrwStk, "valor1", .F. ) }
      :lHide                     := .T.
   end

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Valor propiedad 2"
      :nWidth                    := 50
      :bStrData                  := {|| getTreeStkValue( oBrwStk, "valor2", .F. ) }
      :lHide                     := .T.
   end

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Nombre propiedad 1"
      :bEditValue                := {|| nombrePropiedad( getTreeStkValue( oBrwStk, "propiedad1" ), getTreeStkValue( oBrwStk, "Valor1", .F. ), nView ) }
      :nWidth                    := 60
      :lHide                     := .T.
   end

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Nombre propiedad 2"
      :bEditValue                := {|| nombrePropiedad( getTreeStkValue( oBrwStk, "propiedad2" ), getTreeStkValue( oBrwStk, "Valor2", .F. ), nView ) }
      :nWidth                    := 60
      :lHide                     := .T.
   end

   with object ( oBrwStk:AddCol() )
      :cHeader                   := "Unidades"
      :nWidth                    := 70
      :bEditValue                := {|| getTreeStkValue( oBrwStk, "unidades" ) }
      :cEditPicture              := MasUnd()
      :bFooter                   := {|| nFooterTree( oBrwStk, "unidades" ) }
   end





   oBrwPdt                       := IXBrowse():New( oDlg )

   oBrwPdt:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwPdt:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwPdt:CreateFromResource( 310 )

   oBrwPdt:lFooter               := .T.
   oBrwPdt:lVScroll              := .T.
   oBrwPdt:lHScroll              := .T.
   oBrwPdt:nMarqueeStyle         := 6
   oBrwPdt:cName                 := "Pendiente en informe de articulos"

   with object ( oBrwPdt:AddCol() )
      :cHeader                   := "Recibir"
      :nWidth                    := 70
      :bEditValue                := {|| getTreeStkValue( oBrwPdt, "pdtrecibir", , .T. ) }
      :cEditPicture              := MasUnd()
      :bFooter                   := {|| nFooterTree( oBrwPdt, "pdtrecibir" ) }
   end

   with object ( oBrwPdt:AddCol() )
      :cHeader                   := "Entregar"
      :nWidth                    := 70
      :bEditValue                := {|| getTreeStkValue( oBrwPdt, "pdtentrega", , .T. ) }
      :cEditPicture              := MasUnd()
      :bFooter                   := {|| nFooterTree( oBrwPdt, "pdtentrega" ) }
   end





   oMeter      := TApoloMeter():ReDefine( 200, { | u | if( pCount() == 0, nMeter, nMeter := u ) }, 10, oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )




   TButton():ReDefine( 501, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

   oDlg:bStart := {|| LoadDatos() }


   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )
   if !Empty( oBmpStock )
      oBmpStock:end()
   end

   if !Empty( oBmpImage )
      oBmpImage:end()
   end

return nil



Static Function LoadDatos()

   local oError
   local oBlock
   local oTree
   local oTreePdt

   oDlg:Disable()

   CursorWait()

   oBlock                        := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   oTreeInfo:SetImageList( oImageListInfo )

   oTreeInfo:Add( "Fecha de creación " + Dtoc( ( D():Articulos( nView ) )->LastChg ), 2 )

   if !empty( ( D():Articulos( nView ) )->dFecChg )
      oTreeInfo:Add( "Última modificación " + Dtoc( ( D():Articulos( nView ) )->dFecChg ), 2 )
   end





   oTree                         := StocksModel():oTreeStocks( ( D():Articulos( nView ) )->Codigo, , oMeter )

   if oTree <> nil

      if empty( oBrwStk:oTree )
         oBrwStk:SetTree( oTree, { "gc_navigate_minus_16", "gc_navigate_plus_16", "Nil16" } )
      else
         oBrwStk:oTree           := oTree
         oBrwStk:oTreeItem       := oTree:oFirst
      end

   end

   if Len( oBrwStk:aCols() ) > 0
      oBrwStk:aCols[1]:cHeader   := "Información stock"
      oBrwStk:aCols[1]:nWidth    := 700
   end

   oBrwStk:bLDblClick            := {|| if( oBrwStk:oTreeItem <> nil, ZoomDocument( oBrwStk:oTreeItem:Cargo ), ) }

   oBrwStk:Refresh()





   oTreePdt                      := StocksModel():oTreePendiente( ( D():Articulos( nView ) )->Codigo, , oMeter )

   if oTreePdt <> nil

      if empty( oBrwPdt:oTree )
         oBrwPdt:SetTree( oTreePdt, { "gc_navigate_minus_16", "gc_navigate_plus_16", "Nil16" } )
      else
         oBrwPdt:oTree           := oTreePdt
         oBrwPdt:oTreeItem       := oTreePdt:oFirst
      end

   end

   if Len( oBrwPdt:aCols() ) > 0
      oBrwPdt:aCols[1]:cHeader   := "Pendientes"
      oBrwPdt:aCols[1]:nWidth    := 700
   end

   oBrwPdt:bLDblClick            := {|| if( oBrwStk:oTreeItem <> nil, ZoomDocument( oBrwPdt:oTreeItem:Cargo ), ) }

   oBrwPdt:Refresh()

   RECOVER USING oError
      msgStop( "Imposible cargar datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )
   end
   ErrorBlock( oBlock )

   CursorWE()

   oBrwStk:Load()
   oBrwStk:SetFocus()

   oBrwPdt:Load()

   if !Empty( oMeter )
      oMeter:Set( 0 )
   end

   oDlg:Enable()

return nil



Static Function getTreeStkValue( oBrwStk, cData, lTit, lRec )

   local oItem
   local uValue
   local nUnidades            := 0

   If( cData == nil, cData := "nUnidades", ) ;
   If( lTit == nil, lTit := .T., ) ;
   If( lRec == nil, lRec := .F., ) ;

   if !empty( oBrwStk:oTreeItem )

      if !isnil( oBrwStk:oTreeItem:oTree )

         oItem                := oBrwStk:oTreeItem:oTree:oFirst

         while !isnil( oItem )

            if !empty( oItem:Cargo )

               uValue         := hGet( oItem:Cargo, cData )

               if isNum( uValue )
                  nUnidades   += uValue
               else
                  nUnidades   := if( lTit, uValue, "" )
               end

            end

            if ( oItem:oNext <> nil .AND. oItem:oNext:nLevel == oItem:nLevel )
               oItem          := oItem:oNext
            else
               oItem          := nil
            end

         end

         if isNum( nUnidades )
            if ( nUnidades < 0 ) .AND. lRec
               nUnidades         := 0
            end
         end

      else

         if !Empty( oBrwStk:oTreeItem:Cargo )
            nUnidades         := hGet( oBrwStk:oTreeItem:Cargo, cData )
         end

      end

   end

Return ( nUnidades )



Static Function nFooterTree( oBrwStk, cData )

   local oItem
   local oNode
   local nUnidades            := 0

   If( cData == nil, cData := "nUnidades", ) ;

   if !Empty( oBrwStk:oTree )

      oItem                   := oBrwStk:oTree:oFirst

      while !IsNil( oItem )

         if !IsNil( oItem:oTree )

            oNode             := oItem:oTree:oFirst

            while !IsNil( oNode )

               if !Empty( oNode:Cargo )
                  nUnidades   += hGet( oNode:Cargo, cData )
               end

               if ( oNode:oNext <> nil .AND. oNode:oNext:nLevel == oNode:nLevel )
                  oNode       := oNode:oNext
               else
                  oNode       := nil
               end

            end

         end

         oItem                := oItem:GetNext()

      end

   end





Return ( nUnidades )



static function ZoomDocument( hHash )

   if Empty( hHash )
      Return ( .T. )
   end

   if !isChar( hGet( hHash, "document" ) )
      Return ( .T. )
   end

   do case
      case hGet( hHash, "document" ) == "01"
         ZooPedPrv( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "02"
         ZooAlbPrv( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "03"
         ZooFacPrv( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "04"
         ZooRctPrv( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "09"
         ZooPedCli( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "10"
         ZooAlbCli( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "11"
         ZooFacCli( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "14"
         ZooFacRec( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "12"
         ZooTikCli( hGet( hHash, "serie" ) + Str( hGet( hHash, "numero" ), 10 ) + hGet( hHash, "sufijo" ) )

      case SubStr( hGet( hHash, "document" ), 1, 2 ) == "05"
         ZoomMovimientosAlmacen( Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

      case hGet( hHash, "document" ) == "06" .OR. hGet( hHash, "document" ) == "07"
         ZoomProduccion( hGet( hHash, "serie" ) + Padl( AllTrim( Str( hGet( hHash, "numero" ) ) ), 9 ) + hGet( hHash, "sufijo" ) )

   end

Return ( .T. )
