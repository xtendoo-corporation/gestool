#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\CajasModel.prg"
_HB_CLASS CajasModel ; function CajasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @CajasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "Cajas" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aNombres(); oClass:AddMethod( "aNombres", @CajasModel_aNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER aNombresSeleccionables(); oClass:AddInline( "aNombresSeleccionables", {|Self | ( ( Self ) ), ( hb_AIns(::aNombres(),1,"", .T.) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidFromNombre(); oClass:AddInline( "getUuidFromNombre", {|Self, cNombre | ( ( Self ) ), ( ::getField( "Uuid", "cNomCaj", cNombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromUuid(); oClass:AddInline( "getNombreFromUuid", {|Self, cUuid | ( ( Self ) ), ( ::getField( "cNomCaj", "Uuid", cUuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCajonUuidFromCodigo(); oClass:AddInline( "getCajonUuidFromCodigo", {|Self, cCodigo | ( ( Self ) ), ( ::getField( "cCajon", "cCodCaj", cCodigo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajasModel ;



static FUNCTION CajasModel_aNombres( ) ; local Self AS CLASS CajasModel := QSelf() AS CLASS CajasModel

   local cStm
   local aEmp  := {}
   local cSql  := "SELECT * FROM " + ::getTableName()

   if !::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( aEmp )
   endif

   while !( cStm )->( eof() )
      aadd( aEmp, alltrim( ( cStm )->cNomCaj ) )
      ( cStm )->( dbskip() )
   end

RETURN ( aEmp )







_HB_CLASS CajasLineasModel ; function CajasLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajasLineasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @CajasLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "CajL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getImpresoraComanda(); oClass:AddMethod( "getImpresoraComanda", @CajasLineasModel_getImpresoraComanda(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFormatoComanda(); oClass:AddMethod( "getFormatoComanda", @CajasLineasModel_getFormatoComanda(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFormatoAnulacion(); oClass:AddMethod( "getFormatoAnulacion", @CajasLineasModel_getFormatoAnulacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajasLineasModel ;



static FUNCTION CajasLineasModel_getImpresoraComanda( cUuidSalon, cTipImp ) ; local Self AS CLASS CajasLineasModel := QSelf() AS CLASS CajasLineasModel

   local cImpresora  := ""
   local cSql        := ""
   local dbfSql



   cSql              := "SELECT cNomPrn FROM " + ::getTableName()    +  " WHERE cParUuid = " + quoted( cUuidSalon )  +  " AND cTipImp = " + quoted( cTipImp )

   if ::ExecuteSqlStatement( cSql, @dbfSql )
      cImpresora     := AllTrim( ( dbfSql )->cNomPrn )
   end

Return ( cImpresora )



static FUNCTION CajasLineasModel_getFormatoComanda( cUuidSalon, cTipImp ) ; local Self AS CLASS CajasLineasModel := QSelf() AS CLASS CajasLineasModel

   local cFormato    := ""
   local cSql        := ""
   local dbfSql



   cSql              := "SELECT cPrnCom FROM " + ::getTableName()    +  " WHERE cParUuid = " + quoted( cUuidSalon )  +  " AND cTipImp = " + quoted( cTipImp )

   if ::ExecuteSqlStatement( cSql, @dbfSql )
      cFormato     := AllTrim( ( dbfSql )->cPrnCom )
   end

Return ( cFormato )



static FUNCTION CajasLineasModel_getFormatoAnulacion( cUuidSalon, cTipImp ) ; local Self AS CLASS CajasLineasModel := QSelf() AS CLASS CajasLineasModel

   local cFormato    := ""
   local cSql        := ""
   local dbfSql



   cSql              := "SELECT cPrnAnu FROM " + ::getTableName()    +  " WHERE cParUuid = " + quoted( cUuidSalon )  +  " AND cTipImp = " + quoted( cTipImp )

   if ::ExecuteSqlStatement( cSql, @dbfSql )
      cFormato     := AllTrim( ( dbfSql )->cPrnAnu )
   end

Return ( cFormato )







_HB_CLASS CajonesModel ; function CajonesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajonesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @CajonesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "CajPorta" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajonesModel ;