#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\Prg\Controllers\CajonesPortamonedasController.prg"
_HB_CLASS CajonesPortamonedasController ; function CajonesPortamonedasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajonesPortamonedasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @CajonesPortamonedasController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @CajonesPortamonedasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajonesPortamonedasController ;



static FUNCTION CajonesPortamonedasController_New( ) ; local Self AS CLASS CajonesPortamonedasController := QSelf() AS CLASS CajonesPortamonedasController

   ::Super:New()

   ::cTitle                := "Cajón portamonedas"

   ::cName                 := "cajon_portamonedas"



   ::hImage                := {  "16" => "gc_modem_16", "32" => "gc_modem_32", "48" => "gc_modem_48" }

   ::nLevel                := Auth():Level( ::cName )

   ::oModel                := SQLCajonesPortamonedasModel():New( self )

   ::oBrowseView           := CajonesPortamonedasBrowseView():New( self )

   ::oDialogView           := CajonPortamonedaView():New( self )

   ::oValidator            := CajonPortamonedaValidator():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

RETURN ( Self )










_HB_CLASS CajonesPortamonedasBrowseView ; function CajonesPortamonedasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajonesPortamonedasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @CajonesPortamonedasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @CajonesPortamonedasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajonesPortamonedasBrowseView ;



static FUNCTION CajonesPortamonedasBrowseView_addColumns( ) ; local Self AS CLASS CajonesPortamonedasBrowseView := QSelf() AS CLASS CajonesPortamonedasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "impresora"
      :cHeader             := "Impresora"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "impresora" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo_apertura"
      :cHeader             := "Código apertura"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo_apertura" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

RETURN ( self )









_HB_CLASS CajonPortamonedaView ; function CajonPortamonedaView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajonPortamonedaView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @CajonPortamonedaView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @CajonPortamonedaView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER testCajonPortamoneda(); oClass:AddInline( "testCajonPortamoneda", {|Self | ( ( Self ) ), ( TCajon():New( ::oController:oModel:hBuffer[ "codigo_apertura" ], ::oController:oModel:hBuffer[ "impresora" ] ):openTest() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajonPortamonedaView ;



static FUNCTION CajonPortamonedaView_Activate( ) ; local Self AS CLASS CajonPortamonedaView := QSelf() AS CLASS CajonPortamonedaView

   local oDlg
   local oGetImpresora
   local oGetCodigoApertura



   oDlg = TDialog():New(,,,, ::LblTitle() + "cajón portamoneda", "CAJON_PORTAMONEDA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, oDlg,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )








   oGetImpresora := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "impresora" ], ::oController:oModel:hBuffer[ "impresora" ]:= u ) }, oDlg,,, {||       ( ::oController:validate( "impresora" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,, {|Self|( PrinterPreferences( oGetImpresora ) )}, nil, "gc_printer2_check_16",, )







   oGetCodigoApertura := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo_apertura" ], ::oController:oModel:hBuffer[ "codigo_apertura" ]:= u ) }, oDlg,,, {||       ( ::oController:validate( "codigo_apertura" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil, "gc_modem_16",, )

      oGetCodigoApertura:bHelp   := {|| ::testCajonPortamoneda() }





   TButton():ReDefine( 1, {||( if( validateDialog( oDlg ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      oDlg:AddFastKey( 116, {|| if( validateDialog( oDlg ), oDlg:end( 1 ), ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult )











_HB_CLASS CajonPortamonedaValidator ; function CajonPortamonedaValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajonPortamonedaValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @CajonPortamonedaValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @CajonPortamonedaValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajonPortamonedaValidator ;



static FUNCTION CajonPortamonedaValidator_getValidators( ) ; local Self AS CLASS CajonPortamonedaValidator := QSelf() AS CLASS CajonPortamonedaValidator




   ::hValidators  := {  "nombre" =>          {  "required"     => "El nombre de cajón portamoneda es un dato requerido", "unique"       => "El nombre de cajón portamoneda ya existe" }, "impresora" =>       {  "required"     => "La impresora es un dato requerido" }, "codigo_apertura" => {  "required"     => "El código de apertura es un dato requerido" } }

RETURN ( ::hValidators )










_HB_CLASS SQLCajonesPortamonedasModel ; function SQLCajonesPortamonedasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLCajonesPortamonedasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLCajonesPortamonedasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "cajones_portamonedas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLCajonesPortamonedasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLCajonesPortamonedasModel ;



static FUNCTION SQLCajonesPortamonedasModel_getColumns( ) ; local Self AS CLASS SQLCajonesPortamonedasModel := QSelf() AS CLASS SQLCajonesPortamonedasModel



   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "text"      => "Identificador"                           , "default"   => {|| 0 } }                                 )



   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "text"      => "Uuid"                                    , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 140 )"                          , "default"   => {|| space( 140 ) } }                       )


   hset( ::hColumns, "impresora",         {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "codigo_apertura",   {  "create"    => "VARCHAR( 100 )"                          , "default"   => {|| "27 112 0 60 240" } }                  )

RETURN ( ::hColumns )











_HB_CLASS CajonesPortamonedasRepository ; function CajonesPortamonedasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CajonesPortamonedasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @CajonesPortamonedasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLCajonesPortamonedasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CajonesPortamonedasRepository ;