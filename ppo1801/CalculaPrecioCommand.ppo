#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Commands\CalculaPrecioCommand.prg"
_HB_CLASS CalculaPrecioCommand ; function CalculaPrecioCommand ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CalculaPrecioCommand", iif( .F., { }, { @HBObject() } ), @CalculaPrecioCommand() ) ) ;

   _HB_MEMBER { nCosto } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCosto"}, .F. )

   _HB_MEMBER { nMargen } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMargen"}, .F. )

   _HB_MEMBER { nMargenReal } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMargenReal"}, .F. )

   _HB_MEMBER { nPrecioBase } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPrecioBase"}, .F. )

   _HB_MEMBER { nPorcentajeIVA } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPorcentajeIVA"}, .F. )

   _HB_MEMBER { nPrecioIVAIncluido } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPrecioIVAIncluido"}, .F. )



   _HB_MEMBER New(); oClass:AddMethod( "New", @CalculaPrecioCommand_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Build( hBuilder); oClass:AddMethod( "Build", @CalculaPrecioCommand_Build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER Costo(); oClass:AddInline( "Costo", {|Self, value | ( ( Self ) ), ( iif( hb_isnil( value ), ::nCosto, ::nCosto := value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Margen(); oClass:AddInline( "Margen", {|Self, value | ( ( Self ) ), ( iif( hb_isnil( value ), ::nMargen, ::nMargen := value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER MargenReal(); oClass:AddInline( "MargenReal", {|Self, value | ( ( Self ) ), ( iif( hb_isnil( value ), ::nMargenReal, ::nMargenReal := value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PrecioBase(); oClass:AddInline( "PrecioBase", {|Self, value | ( ( Self ) ), ( iif( hb_isnil( value ), ::nPrecioBase, ::nPrecioBase := value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PorcentajeIVA(); oClass:AddInline( "PorcentajeIVA", {|Self, value | ( ( Self ) ), ( iif( hb_isnil( value ), ::nPorcentajeIVA, ::nPorcentajeIVA := value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PrecioIVAIncluido(); oClass:AddInline( "PrecioIVAIncluido", {|Self, value | ( ( Self ) ), ( iif( hb_isnil( value ), ::nPrecioIVAIncluido, ::nPrecioIVAIncluido := value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER caclculaPreciosUsandoMargen(); oClass:AddMethod( "caclculaPreciosUsandoMargen", @CalculaPrecioCommand_caclculaPreciosUsandoMargen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER caclculaPreciosUsandoBase(); oClass:AddMethod( "caclculaPreciosUsandoBase", @CalculaPrecioCommand_caclculaPreciosUsandoBase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER caclculaPreciosUsandoIVAIncluido(); oClass:AddMethod( "caclculaPreciosUsandoIVAIncluido", @CalculaPrecioCommand_caclculaPreciosUsandoIVAIncluido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER caclculaMargen(); oClass:AddInline( "caclculaMargen", {|Self | ( ( Self ) ), ( ::Margen( ( ::PrecioBase() - ::Costo() ) / ::Costo() * 100 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER caclculaMargenReal(); oClass:AddInline( "caclculaMargenReal", {|Self | ( ( Self ) ), ( ::MargenReal( ( ::PrecioBase() - ::Costo() ) / ::PrecioBase() * 100 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER caclculaPrecioBaseSobreCosto(); oClass:AddInline( "caclculaPrecioBaseSobreCosto", {|Self | ( ( Self ) ), ( ::PrecioBase( ( ::Costo() * ::Margen() / 100 ) + ::Costo() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER caclculaPrecioBaseSobrePrecioIVA(); oClass:AddInline( "caclculaPrecioBaseSobrePrecioIVA", {|Self | ( ( Self ) ), ( ::PrecioBase( ::PrecioIVAIncluido() / ( 1 + ( ::PorcentajeIVA() / 100 ) ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER caclculaPrecioIVAIncluido(); oClass:AddInline( "caclculaPrecioIVAIncluido", {|Self | ( ( Self ) ), ( ::PrecioIVAIncluido( ( ::PrecioBase() * ::PorcentajeIVA() / 100 ) + ::PrecioBase() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CalculaPrecioCommand ;



static FUNCTION CalculaPrecioCommand_New( nCosto, nPrecioBase, nPrecioIVAIncluido, nPorcentajeIVA, nMargen ) ; local Self AS CLASS CalculaPrecioCommand := QSelf() AS CLASS CalculaPrecioCommand

   ::Costo( nCosto )

   ::PrecioBase( nPrecioBase )

   ::PorcentajeIVA( nPorcentajeIVA )

   ::PrecioIVAIncluido( nPrecioIVAIncluido )

   ::Margen( nMargen )

RETURN ( self )



static FUNCTION CalculaPrecioCommand_Build( hBuilder ) ; local Self AS CLASS CalculaPrecioCommand := QSelf() AS CLASS CalculaPrecioCommand

   if hhaskey( hBuilder, "Costo" )
      ::Costo( hBuilder[ "Costo" ] )
   end

   if hhaskey( hBuilder, "PrecioBase" )
      ::PrecioBase( hBuilder[ "PrecioBase" ] )
   end

   if hhaskey( hBuilder, "PorcentajeIVA" )
      ::PorcentajeIVA( hBuilder[ "PorcentajeIVA" ] )
   end

   if hhaskey( hBuilder, "PrecioIVAIncluido" )
      ::PrecioIVAIncluido( hBuilder[ "PrecioIVAIncluido" ] )
   end

   if hhaskey( hBuilder, "Margen" )
      ::Margen( hBuilder[ "Margen" ] )
   end

RETURN ( self )



static FUNCTION CalculaPrecioCommand_caclculaPreciosUsandoMargen( ) ; local Self AS CLASS CalculaPrecioCommand := QSelf() AS CLASS CalculaPrecioCommand

   ::caclculaPrecioBaseSobreCosto()

   ::caclculaPrecioIVAIncluido()

   ::caclculaMargenReal()

RETURN ( self )



static FUNCTION CalculaPrecioCommand_caclculaPreciosUsandoBase( ) ; local Self AS CLASS CalculaPrecioCommand := QSelf() AS CLASS CalculaPrecioCommand

   ::caclculaMargen()

   ::caclculaMargenReal()

   ::caclculaPrecioIVAIncluido()

RETURN ( self )



static FUNCTION CalculaPrecioCommand_caclculaPreciosUsandoIVAIncluido( ) ; local Self AS CLASS CalculaPrecioCommand := QSelf() AS CLASS CalculaPrecioCommand

   ::caclculaPrecioBaseSobrePrecioIVA()

   ::caclculaMargen()

   ::caclculaMargenReal()

RETURN ( self )
