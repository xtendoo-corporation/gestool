#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\CapturadorMovimientosAlmacenLineasController.prg"
_HB_CLASS CapturadorMovimientosAlmacenLineasController ; function CapturadorMovimientosAlmacenLineasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CapturadorMovimientosAlmacenLineasController", iif( .T., { @SQLBaseController() }, { @HBObject() } ), @CapturadorMovimientosAlmacenLineasController() ) ) ;

   _HB_MEMBER { aErrors } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aErrors"}, .F. )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @CapturadorMovimientosAlmacenLineasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddInline( "Activate", {|Self | ( ( Self ) ), ( ::oDialogView:Activate() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getModel(); oClass:AddInline( "getModel", {|Self | ( ( Self ) ), ( ::oSenderController:oLineasController:getModel() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRowSet(); oClass:AddInline( "getRowSet", {|Self | ( ( Self ) ), ( ::oSenderController:oLineasController:getRowSet() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER refreshBrowse(); oClass:AddInline( "refreshBrowse", {|Self | ( ( Self ) ), ( ::oSenderController:oLineasController:refreshBrowse() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER processLines( cLines); oClass:AddMethod( "processLines", @CapturadorMovimientosAlmacenLineasController_processLines(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER processLine( hLine); oClass:AddMethod( "processLine", @CapturadorMovimientosAlmacenLineasController_processLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER showErrors(); oClass:AddMethod( "showErrors", @CapturadorMovimientosAlmacenLineasController_showErrors(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CapturadorMovimientosAlmacenLineasController ;



static FUNCTION CapturadorMovimientosAlmacenLineasController_New( oController ) ; local Self AS CLASS CapturadorMovimientosAlmacenLineasController := QSelf() AS CLASS CapturadorMovimientosAlmacenLineasController

   ::Super:New( oController )

   ::cTitle                   := "Capturador movimientos almacen lineas"

   ::oDialogView              := CapturadorMovimientosAlmacenLineasView():New( self )

RETURN ( Self )



static FUNCTION CapturadorMovimientosAlmacenLineasController_processLines( cLines ) ; local Self AS CLASS CapturadorMovimientosAlmacenLineasController := QSelf() AS CLASS CapturadorMovimientosAlmacenLineasController

   local aLines

   if empty( cLines )
      RETURN ( Self )
   end

   aLines                     := hb_atokens( cLines, Chr(13)+Chr(10) )

   if empty( aLines )
      RETURN ( Self )
   end

   ::aErrors                  := {}

   aeval( aLines, {|elem| ::processLine( elem ) } )

   ::showErrors()

   ::refreshBrowse()

RETURN ( Self )



static FUNCTION CapturadorMovimientosAlmacenLineasController_processLine( cLine ) ; local Self AS CLASS CapturadorMovimientosAlmacenLineasController := QSelf() AS CLASS CapturadorMovimientosAlmacenLineasController

   local nId
   local aLines
   local hBuffer
   local hArticulo

   if empty( cLine )
      RETURN ( Self )
   end

   aLines                     := hb_atokens( cLine, "," )

   if !hb_isarray( aLines )
      aadd( ::aErrors, "No hay líneas que procesar." )
      RETURN ( Self )
   end

   if len( aLines ) < 2
      aadd( ::aErrors, "La linea no contiene los valores mínimos." )
      RETURN ( Self )
   end

   hBuffer                    := ::getModel():loadBlankBuffer()

   hset( hBuffer, "codigo_articulo",     alltrim( aLines[ 1 ] ) )
   hset( hBuffer, "unidades_articulo",   val( strtran( aLines[ 2 ], ".", "," ) ) )

   if len( aLines ) >= 6
      hset( hBuffer, "codigo_primera_propiedad", alltrim( aLines[ 3 ] ) )
      hset( hBuffer, "valor_primera_propiedad",  alltrim( aLines[ 4 ] ) )
      hset( hBuffer, "codigo_segunda_propiedad", alltrim( aLines[ 5 ] ) )
      hset( hBuffer, "valor_segunda_propiedad",  alltrim( aLines[ 6 ] ) )
   end

   hArticulo                  := ArticulosModel():getHash( hget( hBuffer, "codigo_articulo" ) )
   if empty( hArticulo )
      aadd( ::aErrors, "El código del artículo no existe." )
      RETURN ( Self )
   end

   hset( hBuffer, "nombre_articulo", hget( hArticulo, "nombre" ) )
   hset( hBuffer, "precio_articulo", hget( hArticulo, "pcosto" ) )

   nId   := ::getModel():insertBuffer( hBuffer )

   if !empty( nId )
      ::oSenderController:oLineasController:refreshRowSetAndFindId( nId )
      ::oSenderController:oLineasController:refreshBrowse()
   end

RETURN ( Self )



static FUNCTION CapturadorMovimientosAlmacenLineasController_showErrors( ) ; local Self AS CLASS CapturadorMovimientosAlmacenLineasController := QSelf() AS CLASS CapturadorMovimientosAlmacenLineasController

   local cErrorMessage        := ""

   if !empty( ::aErrors )
      aeval( ::aErrors, {|cError| cErrorMessage += cError + Chr(13)+Chr(10) } )
      msgstop( cErrorMessage, "Errores en la importación" )
   end

RETURN ( Self )
