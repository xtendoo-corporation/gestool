#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\CaracteristicasController.prg"
_HB_CLASS CaracteristicasController ; function CaracteristicasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @CaracteristicasController() ) ) ;

   _HB_MEMBER { oCaracteristicasLineasController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCaracteristicasLineasController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @CaracteristicasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @CaracteristicasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasController ;



static FUNCTION CaracteristicasController_New( oSenderController ) ; local Self AS CLASS CaracteristicasController := QSelf() AS CLASS CaracteristicasController

   ::Super:New( oSenderController )

   ::cTitle                            := "Características"

   ::cName                             := "articulos_caracteristicas"



   ::hImage                            := {  "16" => "gc_tags_16", "32" => "gc_tags_32", "48" => "gc_tags_48" }

   ::nLevel                            := Auth():Level( ::cName )

   ::oModel                            := SQLCaracteristicasModel():New( self )

   ::oBrowseView                       := CaracteristicasBrowseView():New( self )

   ::oDialogView                       := CaracteristicasView():New( self )

   ::oValidator                        := CaracteristicasValidator():New( self, ::oDialogView )

   ::oCaracteristicasLineasController  := CaracteristicasLineasController():New( self )



RETURN ( Self )



static FUNCTION CaracteristicasController_End( ) ; local Self AS CLASS CaracteristicasController := QSelf() AS CLASS CaracteristicasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oCaracteristicasLineasController:End()

   ::Super:End()

RETURN ( Self )








_HB_CLASS CaracteristicasBrowseView ; function CaracteristicasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @CaracteristicasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @CaracteristicasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasBrowseView ;



static FUNCTION CaracteristicasBrowseView_addColumns( ) ; local Self AS CLASS CaracteristicasBrowseView := QSelf() AS CLASS CaracteristicasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 60
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS CaracteristicasView ; function CaracteristicasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @CaracteristicasView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER { oGetTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetTipo"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @CaracteristicasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER startActivate(); oClass:AddMethod( "startActivate", @CaracteristicasView_startActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasView ;








static FUNCTION CaracteristicasView_Activate( ) ; local Self AS CLASS CaracteristicasView := QSelf() AS CLASS CaracteristicasView

   local oSayCamposExtra
   local oBtnEdit
   local oBtnAppend
   local oBtnDelete



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "característica", "CARACTERISTICAS_MEDIUM",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, "gc_tags_48",, ::oDialog,,, .F., .F.,,, .F.,,, .T. )





   ::oMessage := TSay():ReDefine( 800, {||      "Característica"}, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )







   oBtnAppend := TButton():ReDefine( 130,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnAppend:bAction   := {|| ::oController:oCaracteristicasLineasController:Append() }





   oBtnEdit := TButton():ReDefine( 140,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnEdit:bAction   := {|| ::oController:oCaracteristicasLineasController:Edit() }





   oBtnDelete := TButton():ReDefine( 150,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnDelete:bAction   := {|| ::oController:oCaracteristicasLineasController:Delete() }

   ::oController:oCaracteristicasLineasController:Activate( 160, ::oDialog )







   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 113, {|| ::oController:oCaracteristicasLineasController:Append() } )
      ::oDialog:AddFastKey( 114, {|| ::oController:oCaracteristicasLineasController:Edit() } )
      ::oDialog:AddFastKey( 115, {|| ::oController:oCaracteristicasLineasController:Delete() } )
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::startActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )



static FUNCTION CaracteristicasView_startActivate( ) ; local Self AS CLASS CaracteristicasView := QSelf() AS CLASS CaracteristicasView

RETURN ( self )







_HB_CLASS CaracteristicasValidator ; function CaracteristicasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @CaracteristicasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @CaracteristicasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasValidator ;



static FUNCTION CaracteristicasValidator_getValidators( ) ; local Self AS CLASS CaracteristicasValidator := QSelf() AS CLASS CaracteristicasValidator




   ::hValidators  := {  "nombre" =>    {  "required"           => "El nombre es un dato requerido", "unique"             => "El nombre introducido ya existe" }, "codigo" =>    {  "required"           => "El código es un dato requerido" , "unique"             => "El código introducido ya existe" } }
RETURN ( ::hValidators )







_HB_CLASS SQLCaracteristicasModel ; function SQLCaracteristicasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLCaracteristicasModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLCaracteristicasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_caracteristicas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLCaracteristicasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, uuid | ( ( Self ) ), ( ::getField( "nombre", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNamesFromIdLanguagesPS( uuidCaracteristica, aIdsLanguages); oClass:AddMethod( "getNamesFromIdLanguagesPS", @SQLCaracteristicasModel_getNamesFromIdLanguagesPS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLCaracteristicasModel ;



static FUNCTION SQLCaracteristicasModel_getColumns( ) ; local Self AS CLASS SQLCaracteristicasModel := QSelf() AS CLASS SQLCaracteristicasModel


   hset( ::hColumns, "id",       {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",     {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )

   ::getEmpresaColumns()


   hset( ::hColumns, "codigo",   {  "create"    => "VARCHAR( 20 )"                           , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "nombre",   {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )

   ::getTimeStampColumns()

RETURN ( ::hColumns )



static FUNCTION SQLCaracteristicasModel_getNamesFromIdLanguagesPS( uuidCaracteristica, aIdsLanguages ) ; local Self AS CLASS SQLCaracteristicasModel := QSelf() AS CLASS SQLCaracteristicasModel

   local cName
   local hNames   := {=>}

   if Len( aIdsLanguages ) == 0
      Return ( hNames )
   end

   cName    := ::getNombreWhereUuid( uuidCaracteristica )

   if Empty( cName )
      Return ( hNames )
   end

   aEval( aIdsLanguages, {|id| hSet( hNames, AllTrim( Str( id ) ), AllTrim( cName ) ) } )

RETURN ( hNames )
