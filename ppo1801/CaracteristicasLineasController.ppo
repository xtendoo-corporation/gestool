#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\CaracteristicasLineasController.prg"
_HB_CLASS CaracteristicasLineasController ; function CaracteristicasLineasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasLineasController", iif( .T., { @SQLBrowseController() }, { @HBObject() } ), @CaracteristicasLineasController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @CaracteristicasLineasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @CaracteristicasLineasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasLineasController ;



static FUNCTION CaracteristicasLineasController_New( oController ) ; local Self AS CLASS CaracteristicasLineasController := QSelf() AS CLASS CaracteristicasLineasController

   ::Super:New( oController )

   ::cTitle                      := "Características lineas"

   ::cName                       := "articulos_caracteristicas_lineas"

   ::oModel                      := SQLCaracteristicasLineasModel():New( self )

   ::oBrowseView                 := CaracteristicasLineasBrowseView():New( self )

   ::oDialogView                 := CaracteristicasLineasView():New( self )

   ::oValidator                  := CaracteristicasLineasValidator():New( self, ::oDialogView )

RETURN ( Self )



static FUNCTION CaracteristicasLineasController_End( ) ; local Self AS CLASS CaracteristicasLineasController := QSelf() AS CLASS CaracteristicasLineasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::Super:End()

RETURN ( Self )









_HB_CLASS CaracteristicasLineasBrowseView ; function CaracteristicasLineasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasLineasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @CaracteristicasLineasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @CaracteristicasLineasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasLineasBrowseView ;



static FUNCTION CaracteristicasLineasBrowseView_addColumns( ) ; local Self AS CLASS CaracteristicasLineasBrowseView := QSelf() AS CLASS CaracteristicasLineasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 60
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )







_HB_CLASS CaracteristicasLineasView ; function CaracteristicasLineasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasLineasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @CaracteristicasLineasView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @CaracteristicasLineasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasLineasView ;







static FUNCTION CaracteristicasLineasView_Activate( ) ; local Self AS CLASS CaracteristicasLineasView := QSelf() AS CLASS CaracteristicasLineasView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "lineas de caracterísicas", "CARACTERISTICAS_LINEAS",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, "gc_tags_48",, ::oDialog,,, .F., .F.,,, .F.,,, .T. )





   ::oMessage := TSay():ReDefine( 800, {||      "Lineas de características"}, ::oDialog,,,, .F., getBoldFont(), .F., .F., )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )







   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )







_HB_CLASS CaracteristicasLineasValidator ; function CaracteristicasLineasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CaracteristicasLineasValidator", iif( .T., { @SQLParentValidator() }, { @HBObject() } ), @CaracteristicasLineasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @CaracteristicasLineasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CaracteristicasLineasValidator ;



static FUNCTION CaracteristicasLineasValidator_getValidators( ) ; local Self AS CLASS CaracteristicasLineasValidator := QSelf() AS CLASS CaracteristicasLineasValidator


   ::hValidators  := {  "nombre" =>    {  "required"  => "El nombre es un dato requerido", "unique"    => "El nombre introducido ya existe" } }
RETURN ( ::hValidators )







_HB_CLASS SQLCaracteristicasLineasModel ; function SQLCaracteristicasLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLCaracteristicasLineasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLCaracteristicasLineasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_caracteristicas_lineas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLCaracteristicasLineasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, uuid | ( ( Self ) ), ( ::getField( "nombre", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getArrayNombreValoresFromUuid( uuid); oClass:AddMethod( "getArrayNombreValoresFromUuid", @SQLCaracteristicasLineasModel_getArrayNombreValoresFromUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNamesFromIdLanguagesPS( uuidCaracteristica, aIdsLanguages); oClass:AddMethod( "getNamesFromIdLanguagesPS", @SQLCaracteristicasLineasModel_getNamesFromIdLanguagesPS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLCaracteristicasLineasModel ;



static FUNCTION SQLCaracteristicasLineasModel_getColumns( ) ; local Self AS CLASS SQLCaracteristicasLineasModel := QSelf() AS CLASS SQLCaracteristicasLineasModel


   hset( ::hColumns, "id",             {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",           {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",    {  "create"    => "VARCHAR( 40 )"                           , "default"   => {|| ::getSenderControllerParentUuid() } } )


   hset( ::hColumns, "nombre",         {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "personalizado",  {  "create"    => "TINYINT ( 1 )"                           , "default"   => {|| 0 } }                                 )

RETURN ( ::hColumns )



static FUNCTION SQLCaracteristicasLineasModel_getArrayNombreValoresFromUuid( uuid ) ; local Self AS CLASS SQLCaracteristicasLineasModel := QSelf() AS CLASS SQLCaracteristicasLineasModel

   local cSentence   := ""

   cSentence         := "SELECT nombre "
   cSentence         += "FROM articulos_caracteristicas_lineas "
   cSentence         += "WHERE parent_uuid = " + quoted( uuid ) + " AND personalizado = 0"

RETURN ( getSQLDatabase():selectFetchArrayOneColumn( cSentence ) )



static FUNCTION SQLCaracteristicasLineasModel_getNamesFromIdLanguagesPS( uuidCaracteristica, aIdsLanguages ) ; local Self AS CLASS SQLCaracteristicasLineasModel := QSelf() AS CLASS SQLCaracteristicasLineasModel

   local cName
   local hNames   := {=>}

   if Len( aIdsLanguages ) == 0
      Return ( hNames )
   end

   cName    := ::getNombreWhereUuid( uuidCaracteristica )

   if Empty( cName )
      Return ( hNames )
   end

   aEval( aIdsLanguages, {|id| hSet( hNames, AllTrim( Str( id ) ), AllTrim( cName ) ) } )

RETURN ( hNames )
