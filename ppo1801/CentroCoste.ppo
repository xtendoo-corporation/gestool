#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\CentroCoste.prg"
_HB_CLASS TCentroCoste ; function TCentroCoste ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TCentroCoste", iif( .T., { @TMant() }, { @HBObject() } ), @TCentroCoste() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_folder_open_money_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )
   _HB_MEMBER { cName } ; oClass:AddMultiData(, "CentroCoste", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )

   _HB_MEMBER { aTipo } ; oClass:AddMultiData(, {   "Clientes", "Artículos", "Proveedores" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTipo"}, .F. )
   _HB_MEMBER { cTipo } ; oClass:AddMultiData(, "Artículos", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipo"}, .F. )
   _HB_MEMBER { oTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTipo"}, .F. )

   _HB_MEMBER { cGetDocument } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetDocument"}, .F. )
   _HB_MEMBER { oGetDocument } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetDocument"}, .F. )

   _HB_MEMBER { hValid } ; oClass:AddMultiData(, {=>}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hValid"}, .F. )
   _HB_MEMBER { hHelp } ; oClass:AddMultiData(, {=>}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hHelp"}, .F. )

   _HB_MEMBER { oCodPrp1 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodPrp1"}, .F. )
   _HB_MEMBER { oCodPrp2 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodPrp2"}, .F. )
   _HB_MEMBER { oValPrp1 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oValPrp1"}, .F. )
   _HB_MEMBER { oValPrp2 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oValPrp2"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TCentroCoste_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TCentroCoste_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Default(); oClass:AddMethod( "Default", @TCentroCoste_Default(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER DefineFiles( cPath, cDriver); oClass:AddMethod( "DefineFiles", @TCentroCoste_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TCentroCoste_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TCentroCoste_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER lPreSave( oGet, oDlg, nMode); oClass:AddMethod( "lPreSave", @TCentroCoste_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadValues(); oClass:AddMethod( "loadValues", @TCentroCoste_loadValues(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER validCodigo( oGet, cCodigo, nMode); oClass:AddMethod( "validCodigo", @TCentroCoste_validCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



    _HB_MEMBER validName(); oClass:AddInline( "validName", {|Self, cNombre | ( ( Self ) ), ( iif( empty( cNombre ),    ( msgStop( "La descripción del centro de coste no puede estar vacía." ), .F. ),    .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadGet(); oClass:AddMethod( "loadGet", @TCentroCoste_loadGet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER clearGet(); oClass:AddMethod( "clearGet", @TCentroCoste_clearGet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SearchToUuid(); oClass:AddMethod( "SearchToUuid", @TCentroCoste_SearchToUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TCentroCoste ;



static FUNCTION TCentroCoste_New( cPath, cDriver, oWndParent, oMenuItem ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   If( cPath == nil, cPath := cPatDat(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;
   If( oWndParent == nil, oWndParent := oWnd(), ) ;

   ::Super:New( cPath, cDriver, oWndParent, oMenuItem )

   ::Default()

Return ( Self )



static FUNCTION TCentroCoste_Create( cPath, cDriver ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   If( cPath == nil, cPath := cPatDat(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::Super:Create( cPath, cDriver )

   ::Default()

Return ( Self )



static FUNCTION TCentroCoste_Default( ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste



   ::hValid             := {  "Clientes"     => {|| cClient( ::oGetDocument, , ::oGetDocument:oHelpText ) } , "Artículos"    => {|| cArticulo( ::oGetDocument, , ::oGetDocument:oHelpText ) } , "Proveedores"  => {|| cProvee( ::oGetDocument, , ::oGetDocument:oHelpText ) } }



   ::hHelp              := {  "Clientes"     => {|| BrwClient( ::oGetDocument, ::oGetDocument:oHelpText ) } , "Artículos"    => {|| BrwArticulo( ::oGetDocument, ::oGetDocument:oHelpText ) } , "Proveedores"  => {|| BrwProvee( ::oGetDocument, ::oGetDocument:oHelpText ) } }

Return ( Self )



static FUNCTION TCentroCoste_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "CCoste.Dbf", "CENTROCOSTE" ):New( "CCoste.Dbf",, ( cDriver ), "Centro de coste", ( cPath ) )

       ::oDbf:AddField( "cCodigo", "C", 9, 0,, Space(  9 ),,, "Código", .F., 80, .F., {} )
       ::oDbf:AddField( "cNombre", "C", 50, 0,, Space( 50 ),,, "Nombre", .F., 200, .F., {} )
       ::oDbf:AddField( "nVentas", "N", 15, 6, cPorDiv(),,,, "Objetivo de Ventas", .T., 150, .F., {} )
       ::oDbf:AddField( "nCompras", "N", 15, 6, cPirDiv(),,,, "Objetivo de compras", .T., 150, .F., {} )
      ::oDbf:AddField( "nTipoDoc", "N", 2, 0,,,,, "Tipo documento asociado", .F.,, .T., {} )
      ::oDbf:AddField( "cCodDoc", "C", 30, 0,,,,, "Documento asociado", .F.,, .T., {} )
      ::oDbf:AddField( "cCodPr1", "C", 20, 0,,,,, "Código de primera propiedad", .F.,, .T., {} )
      ::oDbf:AddField( "cCodPr2", "C", 20, 0,,,,, "Código de segunda propiedad", .F.,, .T., {} )
      ::oDbf:AddField( "cValPr1", "C", 20, 0,,,,, "Valor de primera propiedad", .F.,, .T., {} )
      ::oDbf:AddField( "cValPr2", "C", 20, 0,,,,, "Valor de segunda propiedad", .F.,, .T., {} )
      ::oDbf:AddField( "dFecIni", "D", 8, 0,,,,, "Fecha de inicio", .F.,, .F., {} )
      ::oDbf:AddField( "dFecFin", "D", 8, 0,,,,, "Fecha de fin", .F.,, .F., {} )
      ::oDbf:AddField( "cComent", "C", 200, 0,,,,, "Comentario", .F.,, .F., {} )
      ::oDbf:AddField( "uuid", "C", 40, 0,,,,, "Identificador UUID", .F.,, .T., {} )

       ::oDbf:AddIndex( "cCodigo", "CCoste.CDX", "cCodigo",,, .F., .F., "Código",,, .T., .F. )
       ::oDbf:AddIndex( "cNombre", "CCoste.CDX", "cNombre",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TCentroCoste_Activate( ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   local oScript

   if nAnd( ::nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end





   if ::oWndParent <> nil
      ::oWndParent:CloseAll()
   end

   if Empty( ::oDbf ) .OR. !::oDbf:Used()
      ::lOpenFiles      := ::OpenFiles()
   end





   if ::lOpenFiles

      if !::lCreateShell
         ::CreateShell( ::nLevel )
      end

      if ::lAutoButtons

         ::oWndBrw:GralButtons( Self )





         oScript := ::oWndBrw:NewAt( "gc_folder_document_",,, {||( oScript:Expand() )}, "Scripts",,,,,, .F. )
            ImportScript( ::oWndBrw, oScript, "CentroCoste", Self )

         ::oWndBrw:EndButtons( Self )

      end

      if ::cHtmlHelp <> nil
         ::oWndBrw:cHtmlHelp  := ::cHtmlHelp
      end

      ::oWndBrw:Activate( nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, {|| ::CloseFiles() } )

   end

RETURN ( Self )



static FUNCTION TCentroCoste_Resource( nMode ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

    local oDlg
    local oGetCodigo
   local oBmp
   local oSayPrp1
   local cSayPrp1
   local oSayPrp2
   local cSayPrp2
   local oSayVal1
   local cSayVal1
   local oSayVal2
   local cSayVal2

   ::loadValues()

    oDlg = TDialog():New(,,,, LblTitle( nMode ) + "centro de coste", "CentroCoste",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oBmp := TBitmap():ReDefine( 800, "gc_folder_money_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )





       oGetCodigo := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodigo, ::oDbf:cCodigo:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




       TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNombre, ::oDbf:cNombre:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      ::oCodPrp1 := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, ::oDbf:cCodPr1, ::oDbf:cCodPr1:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

         ::oCodPrp1:bValid    := {|| cProp( ::oCodPrp1, oSayPrp1 ) }
         ::oCodPrp1:bHelp     := {|| brwProp( ::oCodPrp1, oSayPrp1 ) }




      oSayPrp1 := TGetHlp():ReDefine( 271, { | u | If( PCount()==0, cSayPrp1, cSayPrp1:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      ::oValPrp1 := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, ::oDbf:cValPr1, ::oDbf:cValPr1:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( !Empty( ::oDbf:cCodPr1 ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

         ::oValPrp1:bValid    := {|| lPrpAct( ::oValPrp1, oSayVal1, ::oDbf:cCodPr1 ) }
         ::oValPrp1:bhelp     := {|| brwPropiedadActual( ::oValPrp1, oSayVal1, ::oDbf:cCodPr1 ) }




      oSayVal1 := TGetHlp():ReDefine( 281, { | u | If( PCount()==0, cSayVal1, cSayVal1:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )







      ::oCodPrp2 := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, ::oDbf:cCodPr2, ::oDbf:cCodPr2:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|brwProp( ::oCodPrp2, oSayPrp2 )}, nil, "LUPA",, )

         ::oCodPrp2:bValid    := {|| cProp( ::oCodPrp2, oSayPrp2 ) }
         ::oCodPrp2:bhelp     := {|| brwProp( ::oCodPrp2, oSayPrp2 ) }




      oSayPrp2 := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cSayPrp2, cSayPrp2:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      ::oValPrp2 := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, ::oDbf:cValPr2, ::oDbf:cValPr2:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( !Empty( ::oDbf:cCodPr2 ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

         ::oValPrp2:bValid    := {|| lPrpAct( ::oValPrp2, oSayVal2, ::oDbf:cCodPr2 ) }
         ::oValPrp2:bhelp     := {|| brwPropiedadActual( ::oValPrp2, oSayVal2, ::oDbf:cCodPr2 ) }




      oSayVal2 := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSayVal2, cSayVal2:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oDbf:dFecIni, ::oDbf:dFecIni:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::oDbf:dFecFin, ::oDbf:dFecFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      TGetHlp():ReDefine( 310, { | u | If( PCount()==0, ::oDbf:cComent, ::oDbf:cComent:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:nVentas, ::oDbf:nVentas:= u ) }, oDlg,, ( cPorDiv() ),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:nCompras, ::oDbf:nCompras:= u ) }, oDlg,, ( cPirDiv() ),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      ::oTipo := TComboBox():ReDefine( 140, { | u | If( PCount()==0, ::cTipo, ::cTipo:= u ) }, ::aTipo, oDlg,,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "::oTipo",,,,,,, )

         ::oTipo:bChange   := {|| ::clearGet(), ::loadGet() }







      ::oGetDocument := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::cGetDocument, ::cGetDocument:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 160 )





       TButton():ReDefine( 1, {||(  ::lPreSave( oGetCodigo, oDlg, nMode ) )}, oDlg,,, .F., {||     (  nMode <> 3 )},,, .F. )





       TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

       if nMode <> 3
          oDlg:AddFastKey( 116, {|| ::lPreSave( oGetCodigo, oDlg, nMode ) } )
       end

       oDlg:bStart    := {|| ::LoadGet(), ::oGetDocument:lValid(), oGetCodigo:SetFocus(), ::oCodPrp1:lValid(), ::oCodPrp2:lValid(), ::oValPrp1:lValid(), ::oValPrp2:lValid() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:End()
   end

RETURN ( oDlg:nResult == 1 )



static FUNCTION TCentroCoste_lPreSave( oGetCodigo, oDlg, nMode ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

    if !::validCodigo( oGetCodigo, ::oDbf:cCodigo, nMode )
        Return .F.
    endif

    if !::validName( ::oDbf:cNombre )
        Return .F.
    endif

   if !::oGetDocument:lValid()
      Return .F.
   end

   ::oDbf:nTipoDoc   := ::oTipo:nAt
   ::oDbf:cCodDoc    := ::oGetDocument:varGet()

Return ( oDlg:end( 1 ) )



static FUNCTION TCentroCoste_validCodigo( oGet, cCodigo, nMode ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

    if nMode == 1 .OR. nMode == 4

       if ::oDbf:SeekInOrd( cCodigo, "cCodigo" )
          MsgStop( "El código introducido ya existe: " + ::oDbf:cCodigo )
          Return .F.
          oGet:SetFocus()
       end

    end

Return ( .T. )



static FUNCTION TCentroCoste_loadValues( ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   ::cTipo                 := ::aTipo[ Max( ::oDbf:nTipoDoc, 1 ) ]
   ::cGetDocument          := ::oDbf:cCodDoc

Return .T.



static FUNCTION TCentroCoste_loadGet( ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   ::oGetDocument:bValid  := hGet( ::hValid, ::cTipo )
   ::oGetDocument:bHelp   := hGet( ::hHelp, ::cTipo )

Return .T.



static FUNCTION TCentroCoste_clearGet( ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   ::oGetDocument:cText( Space( 30 ) )
   ::oGetDocument:oHelpText:cText( Space( 200 ) )

Return .T.



static FUNCTION TCentroCoste_SearchToUuid( ) ; local Self AS CLASS TCentroCoste := QSelf() AS CLASS TCentroCoste

   local cCodigo  := ::Buscar()

   if Empty( cCodigo )
      Return ( "" )
   end

Return ( oRetFld( cCodigo, ::oDbf, "Uuid", "cCodigo" ) )










Function SynCentroCoste()

   local oBlock
   local oError
   local dbfCentroCoste

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CCoste.DBF" ), ( cCheckArea( "CCoste", @dbfCentroCoste ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "CCoste.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   ( dbfCentroCoste )->( dbGoTop() )

   while !( dbfCentroCoste )->( eof() )

      if empty( ( dbfCentroCoste )->uuid )
         ( dbfCentroCoste )->uuid          := win_uuidcreatestring()
      end

      ( dbfCentroCoste )->( dbSkip() )

   end

   RECOVER USING oError

      msgstop( "Imposible abrir todas las bases de datos de centros de coste" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfCentroCoste )->( dbCloseArea() )

return nil
