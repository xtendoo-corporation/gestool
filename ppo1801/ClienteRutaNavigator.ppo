#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\utils\ClienteRutaNavigator.prg"
_HB_CLASS ClienteRutaNavigator ; function ClienteRutaNavigator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ClienteRutaNavigator", iif( .F., { }, { @HBObject() } ), @ClienteRutaNavigator() ) ) ;

   _HB_MEMBER { cOrder } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOrder"}, .F. )

   _HB_MEMBER { nProcesado } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nProcesado"}, .F. )
   _HB_MEMBER { aClientesRuta } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aClientesRuta"}, .F. )

   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

   _HB_MEMBER { bCondition } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bCondition"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ClienteRutaNavigator_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getClientesRutas(); oClass:AddMethod( "getClientesRutas", @ClienteRutaNavigator_getClientesRutas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCondition(); oClass:AddInline( "setCondition", {|Self, bCondition | ( ( Self ) ), ( ::bCondition := bCondition ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCondition(); oClass:AddInline( "getCondition", {|Self | ( ( Self ) ), ( ::bCondition ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER evalCondition(); oClass:AddInline( "evalCondition", {|Self | ( ( Self ) ), ( iif( !empty( ::bCondition ), eval( ::bCondition ), .T. )  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER goto( n, oSayPosition); oClass:AddMethod( "goto", @ClienteRutaNavigator_goto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER gotoNext(); oClass:AddInline( "gotoNext", {|Self, oSayPosition | ( ( Self ) ), ( ::goto( ::nProcesado + 1, oSayPosition ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER gotoPrior(); oClass:AddInline( "gotoPrior", {|Self, oSayPosition | ( ( Self ) ), ( ::goto( ::nProcesado - 1, oSayPosition ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER gotoLastProcesed(); oClass:AddMethod( "gotoLastProcesed", @ClienteRutaNavigator_gotoLastProcesed(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getSelected(); oClass:AddInline( "getSelected", {|Self | ( ( Self ) ), ( iif( !empty( ::nProcesado ) .AND. ::nProcesado >= 1 .AND. ::nProcesado <= len( ::aClientesRuta ), ::aClientesRuta[ ::nProcesado ], space( 12 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER msgClient(); oClass:AddInline( "msgClient", {|Self | ( ( Self ) ), ( msgInfo( ( D():Clientes( ::nView ) )->Cod + "-" + ( D():Clientes( ::nView ) )->Titulo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER test(); oClass:AddMethod( "test", @ClienteRutaNavigator_test(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ClienteRutaNavigator ;



static FUNCTION ClienteRutaNavigator_New( nView ) ; local Self AS CLASS ClienteRutaNavigator := QSelf() AS CLASS ClienteRutaNavigator

   ::nView  := nView

Return ( Self )



static FUNCTION ClienteRutaNavigator_getClientesRutas( cOrder ) ; local Self AS CLASS ClienteRutaNavigator := QSelf() AS CLASS ClienteRutaNavigator

   local cCodigoAgente              := AccessCode():cAgente
   local cCodigoRuta                := AccessCode():cRuta

   if cOrder == ::cOrder
      return ( ::aClientesRuta )
   end

   ::cOrder                         := cOrder
   ::aClientesRuta                  := {}
   ::nProcesado                     := 1

   D():getStatusClientes( ::nView )
   ( D():Clientes( ::nView ) )->( OrdSetFocus( cOrder ) )

   ( D():Clientes( ::nView ) )->( dbgotop() )
   while !( D():Clientes( ::nView ) )->( eof() )

      if ( empty( cCodigoAgente ) .OR. alltrim( ( D():Clientes( ::nView ) )->cAgente ) == cCodigoAgente ) .AND. ( empty( cCodigoRuta ) .OR. alltrim( ( D():Clientes( ::nView ) )->cCodRut ) == cCodigoRuta )
         aAdd( ::aClientesRuta, D():ClientesId( ::nView ) )
      end
      ( D():Clientes( ::nView ) )->( dbSkip() )
   end

   D():setStatusClientes( ::nView )

Return ( ::aClientesRuta )



static FUNCTION ClienteRutaNavigator_goto( n, oSayPosition ) ; local Self AS CLASS ClienteRutaNavigator := QSelf() AS CLASS ClienteRutaNavigator

   local idCliente

   if !( n >= 1 .AND. n <= len( ::aClientesRuta ) )
      Return .F.
   end

   idCliente      := ::aClientesRuta[ n ]

   if !empty( idCliente )
      D():gotoIdClientes( idCliente, ::nView )
   end

   ::nProcesado   := n

   if !empty( oSayPosition )
      oSayPosition:setText( alltrim( str( n ) ) + "/" + alltrim( str( len( ::aClientesRuta ) ) ) )
   end

Return ( .T. )



static FUNCTION ClienteRutaNavigator_gotoLastProcesed( oSayPosition ) ; local Self AS CLASS ClienteRutaNavigator := QSelf() AS CLASS ClienteRutaNavigator

   if empty( ::aClientesRuta )
      return .F.
   end

   if empty( ::nProcesado )
      ::goto( 1, oSayPosition )
   else
      ::goto( ::nProcesado, oSayPosition )
   end

Return ( Self )



static FUNCTION ClienteRutaNavigator_test( ) ; local Self AS CLASS ClienteRutaNavigator := QSelf() AS CLASS ClienteRutaNavigator

   ::getClientesRutas("lVisMar")

   ::gotoLastProcesed()
   ::msgClient()
   ::gotoNext()
   ::msgClient()
   ::gotoNext()
   ::msgClient()
   ::gotoPrior()
   ::msgClient()

Return ( Self )
