#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\ClientesModel.prg"
_HB_CLASS ClientesModel ; function ClientesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ClientesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ClientesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Client" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Riesgo( idCliente); oClass:AddMethod( "Riesgo", @ClientesModel_Riesgo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, idCliente | ( ( Self ) ), ( ::getField( "Titulo", "Cod", idCliente ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuid(); oClass:AddInline( "getUuid", {|Self, idCliente | ( ( Self ) ), ( ::getField( "Uuid", "Cod", idCliente, .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getClientesPorRuta( cWhere, cOrderBy); oClass:AddMethod( "getClientesPorRuta", @ClientesModel_getClientesPorRuta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getObrasPorCliente( dbfSql, cCodigoCliente); oClass:AddMethod( "getObrasPorCliente", @ClientesModel_getObrasPorCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lClienteSinVentas( idCliente, dFechaInicio, dFechaFin); oClass:AddMethod( "lClienteSinVentas", @ClientesModel_lClienteSinVentas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @ClientesModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER get( cCodigoCliente); oClass:AddMethod( "get", @ClientesModel_get(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getHash( cCodigoCliente); oClass:AddMethod( "getHash", @ClientesModel_getHash(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existEmail( cEmail); oClass:AddMethod( "existEmail", @ClientesModel_existEmail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existInWP( cId); oClass:AddMethod( "existInWP", @ClientesModel_existInWP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ClientesModel ;



static FUNCTION ClientesModel_Riesgo( idCliente ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local nRiesgo  := 0

   nRiesgo        += AlbaranesClientesModel():Riesgo( idCliente )

   nRiesgo        += RecibosClientesModel():Riesgo( idCliente )

   nRiesgo        += TicketsClientesModel():Riesgo( idCliente )

Return ( nRiesgo )



static FUNCTION ClientesModel_getClientesPorRuta( cWhere, cAgente, cOrderBy ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local cStm  := "ADSRutas"




   local cSql  := "SELECT "                                                +  "rownum() AS recno, "                                 +  "Cod, "                                               +  "Titulo "                                             +  "FROM " + ::getTableName() + " "

   if !empty( cWhere )
      cSql     += "WHERE " + cWhere + " "
      if !empty( cAgente )
         cSql  += "AND cAgente = " + quoted( cAgente ) + " "
      end
   else
      if !empty( cAgente )
         cSql  += "WHERE cAgente = " + quoted( cAgente ) + " "
      end
   end

   if !empty( cOrderBy )
         cSql  += "ORDER BY " + cOrderBy + " ASC"
   end

   if ::ExecuteSqlStatement( cSql, @cStm )
      ::clearFocus( cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION ClientesModel_getObrasPorCliente( dbfSql, cCodigoCliente ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel


   local cSql  := "SELECT * FROM " + ADSBaseModel():getEmpresaTableName( "ObrasT" )     +  " WHERE cCodCli = " + quoted( cCodigoCliente )

   ADSBaseModel():ExecuteSqlStatement( cSql, @dbfSql )

return ( dbfSql )



static FUNCTION ClientesModel_lClienteSinVentas( idCliente, dFechaInicio, dFechaFin ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local dbfSql
   local cSql
   local lReturn := .F.


   cSql  := "SELECT * FROM " + ADSBaseModel():getEmpresaTableName( "FacCliT" )     +  " WHERE cCodCli = " + quoted( idCliente ) + " AND dFecFac >= " + quoted( dToc( dFechaInicio ) ) + " AND dFecFac <= " + quoted( dToc( dFechaFin ) )

   if ADSBaseModel():ExecuteSqlStatement( cSql, @dbfSql )
      lReturn  := ( ( dbfSql )->( lastrec() ) > 0 )
   end

   if !lReturn


      cSql  := "SELECT * FROM " + ADSBaseModel():getEmpresaTableName( "AlbCliT" )     +  " WHERE NOT lFacturado AND cCodCli = " + quoted( idCliente ) + " AND dFecAlb >= " + quoted( dToc( dFechaInicio ) ) + " AND dFecAlb <= " + quoted( dToc( dFechaFin ) )

      if ADSBaseModel():ExecuteSqlStatement( cSql, @dbfSql )
         lReturn  := ( ( dbfSql )->( lastrec() ) > 0 )
      end

   end

   if !lReturn


      cSql  := "SELECT * FROM " + ADSBaseModel():getEmpresaTableName( "TikeT" )     +  " WHERE cCliTik = " + quoted( idCliente ) + " AND dFecTik >= " + quoted( dToc( dFechaInicio ) ) + " AND dFecTik <= " + quoted( dToc( dFechaFin ) )

      if ADSBaseModel():ExecuteSqlStatement( cSql, @dbfSql )
         lReturn  := ( ( dbfSql )->( lastrec() ) > 0 )
      end

   end

return ( lReturn )



static FUNCTION ClientesModel_getToOdoo( cArea ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local cSql  := "SELECT * FROM " + ::getTableName()

   cSql        += " WHERE lSndInt"

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ClientesModel_get( cCodigoCliente ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local cStm


   local cSql  := "SELECT * "                                           +  "FROM " + ::getTableName() + " "                   +  "WHERE Cod = " + quoted( cCodigoCliente )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION ClientesModel_getHash( cCodigoCliente ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local cStm
   local hRecord

   cStm           := ::get( cCodigoCliente )

   if !empty( cStm ) .AND. ( ( cStm )->( lastrec() ) > 0 )
      hRecord     := getHashFromWorkArea( cStm )
   end

RETURN ( hRecord )



static FUNCTION ClientesModel_existEmail( cEmail ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local cStm


   local cSql  := "SELECT Cod "                                   +  "FROM " + ::getTableName() + " "             +  "WHERE cMeiInt = " + quoted( cEmail )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION ClientesModel_existInWP( cId ) ; local Self AS CLASS ClientesModel := QSelf() AS CLASS ClientesModel

   local cStm


   local cSql  := "SELECT Cod "                                   +  "FROM " + ::getTableName() + " "             +  "WHERE cIdWP = " + quoted( cId )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )







_HB_CLASS ClientesBancosModel ; function ClientesBancosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ClientesBancosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ClientesBancosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "CliBnc" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @ClientesBancosModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ClientesBancosModel ;



static FUNCTION ClientesBancosModel_getToOdoo( cArea, cCodCli ) ; local Self AS CLASS ClientesBancosModel := QSelf() AS CLASS ClientesBancosModel

   local cSql  := "SELECT * FROM " + ::getTableName()

   cSql        += " WHERE cCodCli = " + quoted( cCodCli )

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )







_HB_CLASS ClientesDireccionesModel ; function ClientesDireccionesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ClientesDireccionesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ClientesDireccionesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ObrasT" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nCount( cCodCli); oClass:AddMethod( "nCount", @ClientesDireccionesModel_nCount(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea, cCodCli); oClass:AddMethod( "getToOdoo", @ClientesDireccionesModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getName( cCodCli, cCodObr); oClass:AddMethod( "getName", @ClientesDireccionesModel_getName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ClientesDireccionesModel ;



static FUNCTION ClientesDireccionesModel_nCount( cCodCli ) ; local Self AS CLASS ClientesDireccionesModel := QSelf() AS CLASS ClientesDireccionesModel

   local cArea
   local cSql  := "SELECT Count(*) AS Counter FROM " + ::getTableName()

   cSql        += " WHERE cCodCli = " + quoted( cCodCli )

   ::ExecuteSqlStatement( cSql, @cArea )

RETURN ( ( cArea )->Counter )



static FUNCTION ClientesDireccionesModel_getToOdoo( cArea, cCodCli ) ; local Self AS CLASS ClientesDireccionesModel := QSelf() AS CLASS ClientesDireccionesModel

   local cSql  := "SELECT * FROM " + ::getTableName()

   cSql        += " WHERE cCodCli = " + quoted( cCodCli )

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION ClientesDireccionesModel_getName( cCodCli, cCodObr ) ; local Self AS CLASS ClientesDireccionesModel := QSelf() AS CLASS ClientesDireccionesModel

   local cArea       := "GetNameDir"
   local cSql        := ""
   local cNameObra   := ""

   if Empty( cCodCli ) .OR. Empty( cCodObr )
      Return cNameObra
   end

   cSql              := "SELECT cNomObr FROM " + ::getTableName()
   cSql              += " WHERE cCodCli = " + quoted( cCodCli )
   cSql              += " AND cCodObr = " + quoted( cCodObr )

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cArea )
      cNameObra      := ( cArea )->cNomObr
   end

RETURN ( cNameObra )







_HB_CLASS RutasModel ; function RutasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RutasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @RutasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Ruta" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @RutasModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, idRuta | ( ( Self ) ), ::getField( "CDESRUT", "CCODRUT", idRuta ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RutasModel ;



static FUNCTION RutasModel_getToOdoo( cArea ) ; local Self AS CLASS RutasModel := QSelf() AS CLASS RutasModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )







_HB_CLASS GrupoClientesModel ; function GrupoClientesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "GrupoClientesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @GrupoClientesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "GrpCli" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @GrupoClientesModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getName(); oClass:AddInline( "getName", {|Self, cCodGrp | ( ( Self ) ), ( ::getField( "cNomGrp", "cCodGrp", cCodGrp ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS GrupoClientesModel ;



static FUNCTION GrupoClientesModel_getToOdoo( cArea ) ; local Self AS CLASS GrupoClientesModel := QSelf() AS CLASS GrupoClientesModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )







_HB_CLASS FormasPagoModel ; function FormasPagoModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "FormasPagoModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @FormasPagoModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "FPago" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @FormasPagoModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getName(); oClass:AddInline( "getName", {|Self, cCodPgo | ( ( Self ) ), ( ::getField( "CDESPAGO", "CCODPAGO", cCodPgo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS FormasPagoModel ;



static FUNCTION FormasPagoModel_getToOdoo( cArea ) ; local Self AS CLASS FormasPagoModel := QSelf() AS CLASS FormasPagoModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )







_HB_CLASS TarifasModel ; function TarifasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TarifasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @TarifasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "TarPreT" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getName(); oClass:AddInline( "getName", {|Self, cCodTar | ( ( Self ) ), ( ::getField( "CNOMTAR", "CCODTAR", cCodTar ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TarifasModel ;







_HB_CLASS TarifasLineasModel ; function TarifasLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TarifasLineasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @TarifasLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "TarPreL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveSelTar( cCodTar, cCodArt, lSel); oClass:AddMethod( "SaveSelTar", @TarifasLineasModel_SaveSelTar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @TarifasLineasModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TarifasLineasModel ;



static FUNCTION TarifasLineasModel_SaveSelTar( cCodTar, cCodArt, lSel ) ; local Self AS CLASS TarifasLineasModel := QSelf() AS CLASS TarifasLineasModel

   local cStm     := "UpdateTarifa"
   local cSql     := ""

   cSql           := "UPDATE " + ::getTableName() + " SET"
   cSql           += " lSel = " + if( lSel, ".T.", ".F." )
   cSql           += " WHERE CCODTAR = " + quoted( cCodTar )
   cSql           += " AND CCODART = " + quoted( cCodArt )

   ::ExecuteSqlStatement( cSql, @cStm )

RETURN ( .T. )



static FUNCTION TarifasLineasModel_getToOdoo( cArea ) ; local Self AS CLASS TarifasLineasModel := QSelf() AS CLASS TarifasLineasModel

      local cSql     := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )
