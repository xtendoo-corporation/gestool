#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\CodigosPostalesController.prg"
_HB_CLASS CodigosPostalesController ; function CodigosPostalesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CodigosPostalesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @CodigosPostalesController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @CodigosPostalesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @CodigosPostalesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CodigosPostalesController ;



static FUNCTION CodigosPostalesController_New( ) ; local Self AS CLASS CodigosPostalesController := QSelf() AS CLASS CodigosPostalesController

   ::Super:New()

   ::cTitle                   := "Código postal"

   ::cName                    := "codigos_postales"



   ::hImage                   := {  "16" => "gc_postage_stamp_16", "32" => "gc_postage_stamp_32", "48" => "gc_postage_stamp_48" }

   ::nLevel                   := Auth():Level( ::cName )

   ::oModel                   := SQLCodigosPostalesModel():New( self )

   ::oBrowseView              := CodigosPostalesBrowseView():New( self )

   ::oDialogView              := CodigosPostalesView():New( self )

   ::oValidator               := CodigosPostalesValidator():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

RETURN ( Self )


static FUNCTION CodigosPostalesController_End( ) ; local Self AS CLASS CodigosPostalesController := QSelf() AS CLASS CodigosPostalesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::Super:End()

RETURN ( Self )











_HB_CLASS CodigosPostalesBrowseView ; function CodigosPostalesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CodigosPostalesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @CodigosPostalesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @CodigosPostalesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CodigosPostalesBrowseView ;



static FUNCTION CodigosPostalesBrowseView_addColumns( ) ; local Self AS CLASS CodigosPostalesBrowseView := QSelf() AS CLASS CodigosPostalesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "poblacion"
      :cHeader             := "Población"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "poblacion" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "provincia"
      :cHeader             := "Provincia"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "provincia" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS CodigosPostalesView ; function CodigosPostalesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CodigosPostalesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @CodigosPostalesView() ) ) ;

   _HB_MEMBER { oSayProvincia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayProvincia"}, .F. )
   _HB_MEMBER { cSayProvincia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSayProvincia"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @CodigosPostalesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validProvincia(); oClass:AddMethod( "validProvincia", @CodigosPostalesView_validProvincia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CodigosPostalesView ;



static FUNCTION CodigosPostalesView_Activate( ) ; local Self AS CLASS CodigosPostalesView := QSelf() AS CLASS CodigosPostalesView

   local oDlg
   local oBmpGeneral
   local oGetProvincia

   ::validProvincia()



   oDlg = TDialog():New(,,,, ::LblTitle() + "Código postal", "CODIGO_POSTAL",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





   oBmpGeneral := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, oDlg,,, .F., .F.,,, .F.,,, .T. )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, oDlg,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "poblacion" ], ::oController:oModel:hBuffer[ "poblacion" ]:= u ) }, oDlg,,, {||       ( ::oController:validate( "poblacion" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   oGetProvincia := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "provincia" ], ::oController:oModel:hBuffer[ "provincia" ]:= u ) }, oDlg,,, {||       ( ::oController:validate( "provincia" ), ::validProvincia() )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil, "LUPA",, )




   ::oSayProvincia := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, ::cSayProvincia, ::cSayProvincia:= u ) }, oDlg,,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )





   TButton():ReDefine( 1, {||( if( validateDialog( oDlg ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      oDlg:AddFastKey( 116, {|| if( validateDialog( oDlg ), oDlg:end( 1 ), ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBmpGeneral:end()

RETURN ( oDlg:nResult )



static FUNCTION CodigosPostalesView_validProvincia( ) ; local Self AS CLASS CodigosPostalesView := QSelf() AS CLASS CodigosPostalesView

RETURN ( .T. )







_HB_CLASS CodigosPostalesValidator ; function CodigosPostalesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CodigosPostalesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @CodigosPostalesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @CodigosPostalesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CodigosPostalesValidator ;



static FUNCTION CodigosPostalesValidator_getValidators( ) ; local Self AS CLASS CodigosPostalesValidator := QSelf() AS CLASS CodigosPostalesValidator



   ::hValidators  := {     "codigo"       =>    {  "required"           => "El código es un dato requerido"  } , "poblacion"    =>    {  "required"           => "La población es un dato requerido" }, "provincia"    =>    {  "required"           => "La provincia es un campo requerido" } }
RETURN ( ::hValidators )










_HB_CLASS SQLCodigosPostalesModel ; function SQLCodigosPostalesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLCodigosPostalesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLCodigosPostalesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "codigos_postales", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLCodigosPostalesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY ( id ), UNIQUE KEY ( codigo, poblacion )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLCodigosPostalesModel ;



static FUNCTION SQLCodigosPostalesModel_getColumns( ) ; local Self AS CLASS SQLCodigosPostalesModel := QSelf() AS CLASS SQLCodigosPostalesModel



   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT"               , "text"      => "Identificador"                        , "default"   => {|| 0 } }                               )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 )"                        , "default"   => {|| space( 20 ) } }                     )


   hset( ::hColumns, "poblacion",         {  "create"    => "VARCHAR( 100 )"                       , "default"   => {|| space( 100 ) } }                    )


   hset( ::hColumns, "provincia",         {  "create"    => "VARCHAR( 5 )"                         , "default"   => {|| space( 5 ) } }                      )

RETURN ( ::hColumns )











_HB_CLASS CodigosPostalesRepository ; function CodigosPostalesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CodigosPostalesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @CodigosPostalesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLCodigosPostalesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CodigosPostalesRepository ;