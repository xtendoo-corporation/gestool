#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\ColumnasUsuariosModel.prg"
_HB_CLASS ColumnasUsuariosModel ; function ColumnasUsuariosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ColumnasUsuariosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ColumnasUsuariosModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "CfgUse", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getHeaderTableName(); oClass:AddInline( "getHeaderTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getStruct(); oClass:AddMethod( "getStruct", @ColumnasUsuariosModel_getStruct(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getIndexes(); oClass:AddMethod( "getIndexes", @ColumnasUsuariosModel_getIndexes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER set(); oClass:AddMethod( "set", @ColumnasUsuariosModel_set(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER get(); oClass:AddMethod( "get", @ColumnasUsuariosModel_get(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getState( cBrowseName); oClass:AddMethod( "getState", @ColumnasUsuariosModel_getState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER exist(); oClass:AddMethod( "exist", @ColumnasUsuariosModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insert(); oClass:AddMethod( "insert", @ColumnasUsuariosModel_insert(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER update(); oClass:AddMethod( "update", @ColumnasUsuariosModel_update(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER delete(); oClass:AddMethod( "delete", @ColumnasUsuariosModel_delete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ColumnasUsuariosModel ;



static FUNCTION ColumnasUsuariosModel_getStruct( ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local aStruct  := {}

   aAdd( aStruct, { "cCodUse",  "C",  3, 0, "Código usuario"           } )
   aAdd( aStruct, { "cNomCfg",  "C", 30, 0, "Nombre ventana"           } )
   aAdd( aStruct, { "nRecCfg",  "N", 10, 0, "Recno de la ventana"      } )
   aAdd( aStruct, { "nTabCfg",  "N", 10, 0, "Orden de la ventana"      } )
   aAdd( aStruct, { "cOrdCfg",  "C", 60, 0, "Tag de la ventana"        } )
   aAdd( aStruct, { "cBrwCfg",  "M", 10, 0, "Configuración del browse" } )

Return ( aStruct )



static FUNCTION ColumnasUsuariosModel_getIndexes( ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local aIndexes    := {}

   aAdd( aIndexes, { "cCodUse",  "cCodUse + cNomCfg", {|| Field->cCodUse + Field->cNomCfg }, .F. } )

Return ( aIndexes )



static FUNCTION ColumnasUsuariosModel_set( cBrowseName, cBrowseState, nBrowseRecno, nBrowseOrder ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   if ::exist( cBrowseName )
      RETURN ( ::update( cBrowseName, cBrowseState, nBrowseRecno, nBrowseOrder ) )
   end

RETURN ( ::insert( cBrowseName, cBrowseState, nBrowseRecno, nBrowseOrder ) )



static FUNCTION ColumnasUsuariosModel_get( cBrowseName ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local cStm



   local cSql  := "SELECT * " +  "FROM " + ::getHeaderTableName() + " "             +  "WHERE cCodUse = " + quoted( Auth():Codigo() ) + " AND " +  "cNomCfg = " + quoted( cBrowseName )

   if ::ExecuteSqlStatement( cSql, @cStm )



      RETURN ( {  "State"  => ( cStm )->cBrwCfg, "Recno"  => ( cStm )->nRecCfg, "Order"  => ( cStm )->nTabCfg } )
   end

RETURN ( nil )



static FUNCTION ColumnasUsuariosModel_getState( cBrowseName ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local cState   := ""
   local hBrowse  := ::get( cBrowseName )

   if empty( hBrowse )
      RETURN ( "" )
   end

   cState         := hget( hBrowse, "State" )
   cState         := strtran( cState, '\"', '"' )

RETURN ( cState )



static FUNCTION ColumnasUsuariosModel_exist( cBrowseName ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local cStm



   local cSql  := "SELECT cBrwCfg " +  "FROM " + ::getHeaderTableName() + " "             +  "WHERE cCodUse = " + quoted( Auth():Codigo() ) + " AND " +  "cNomCfg = " + quoted( cBrowseName )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION ColumnasUsuariosModel_insert( cBrowseName, cBrowseState, nBrowseRecno, nBrowseOrder ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local cStm
   local cSql

   If( nBrowseRecno == nil, nBrowseRecno := 0, ) ;
   If( nBrowseOrder == nil, nBrowseOrder := 0, ) ;

   cSql                    := "INSERT INTO " + ::getHeaderTableName() + " "
   cSql                    +=    "( cCodUse, "
   cSql                    +=       "cNomCfg, "
   if !empty( cBrowseState )
      cSql                 +=       "cBrwCfg, "
   endif
   cSql                    +=       "nRecCfg, "
   cSql                    +=       "nTabCfg ) "
   cSql                    += "VALUES "
   cSql                    +=    "( " + quoted( Auth():Codigo() ) + ", "
   cSql                    +=       quoted( cBrowseName ) + ", "
   if !empty( cBrowseState )
      cSql                 +=       quoted( cBrowseState ) + ", "
   endif
   cSql                    +=       alltrim( str( nBrowseRecno ) ) + ", "
   cSql                    +=       alltrim( str( nBrowseOrder ) ) + " )"

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION ColumnasUsuariosModel_update( cBrowseName, cBrowseState, nBrowseRecno, nBrowseOrder ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local cStm
   local cSql

   If( nBrowseRecno == nil, nBrowseRecno := 0, ) ;
   If( nBrowseOrder == nil, nBrowseOrder := 0, ) ;

   cSql                    := "UPDATE " + ::getHeaderTableName() + " "
   cSql                    +=    "SET "
   if !empty(cBrowseState)
      cSql                 +=       "cBrwCfg = " + quoted( cBrowseState ) + ", "
   end
   cSql                    +=       "nRecCfg = " + alltrim( str( nBrowseRecno ) ) + ", "
   cSql                    +=       "nTabCfg = " + alltrim( str( nBrowseOrder ) ) + " "
   cSql                    +=    "WHERE cCodUse = " + quoted( Auth():Codigo() ) + " AND "
   cSql                    +=        "cNomCfg = " + quoted( cBrowseName )

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION ColumnasUsuariosModel_delete( cBrowseName ) ; local Self AS CLASS ColumnasUsuariosModel := QSelf() AS CLASS ColumnasUsuariosModel

   local cStm


   local cSql  := "DELETE FROM " + ::getHeaderTableName() + " "         +  "WHERE cCodUse = " + quoted( Auth():Codigo() ) + " AND " +  "cNomCfg = " + quoted( cBrowseName )

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )
