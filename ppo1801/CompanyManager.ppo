#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\Services\CompanyManager.prg"
static oCompany



_HB_CLASS CompanyManager ; function CompanyManager ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CompanyManager", iif( .F., { }, { @HBObject() } ), @CompanyManager() ) ) ;

   _HB_MEMBER { id } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"id"}, .F. )
   _HB_MEMBER { uuid } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uuid"}, .F. )
   _HB_MEMBER { nombre } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nombre"}, .F. )
   _HB_MEMBER { codigo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"codigo"}, .F. )
   _HB_MEMBER { delegacionUuid } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"delegacionUuid"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @CompanyManager_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Set(); oClass:AddInline( "Set", {|Self, hCompany | ( ( Self ) ), ( ::guard( hCompany ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Guard( hCompany); oClass:AddMethod( "Guard", @CompanyManager_Guard(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER guardWhereUuid( uuid); oClass:AddMethod( "guardWhereUuid", @CompanyManager_guardWhereUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER guardWhereCodigo( cCodigo); oClass:AddMethod( "guardWhereCodigo", @CompanyManager_guardWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CompanyManager ;



static FUNCTION CompanyManager_New( hCompany ) ; local Self AS CLASS CompanyManager := QSelf() AS CLASS CompanyManager

   if !empty( hCompany )
      ::guard( hCompany )
   end

RETURN ( self )



static FUNCTION CompanyManager_Guard( hCompany ) ; local Self AS CLASS CompanyManager := QSelf() AS CLASS CompanyManager

   if !hb_ishash( hCompany )
      RETURN ( self )
   end

   if hhaskey( hCompany, "id" )
      ::id              := hget( hCompany, "id" )
   end

   if hhaskey( hCompany, "uuid" )
      ::uuid            := hget( hCompany, "uuid" )
   end

   if hhaskey( hCompany, "nombre" )
      ::nombre          := hget( hCompany, "nombre" )
   end

   if hhaskey( hCompany, "codigo" )
      ::codigo          := hget( hCompany, "codigo" )
   end

RETURN ( self )



static FUNCTION CompanyManager_guardWhereUuid( uuid ) ; local Self AS CLASS CompanyManager := QSelf() AS CLASS CompanyManager

   local hCompany

   if hb_ishash( hCompany )
      ::guard( hCompany )
   endif

RETURN ( self )



static FUNCTION CompanyManager_guardWhereCodigo( cCodigo ) ; local Self AS CLASS CompanyManager := QSelf() AS CLASS CompanyManager

   local hCompany

   if hb_ishash( hCompany )
      ::guard( hCompany )
   endif

RETURN ( self )







FUNCTION Company( hCompany )

   if empty( oCompany )
      oCompany       := CompanyManager():New()
   end

   if !empty( hCompany )
      oCompany:Guard( hCompany )
   end

RETURN ( oCompany )
