#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\.\Prg\ConfVisor.prg"
static oWndBrw
static dbfVisor
static bEdit      := { |aTmp, aGet, dbfVisor, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfVisor, oBrw, bWhen, bValid, nMode ) }



STATIC FUNCTION OpenFiles ()

  local lOpen    := .T.
  local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

  BEGIN SEQUENCE

     if !File ( cPatDat() + "VISOR.DBF" )
        mkVisor( cPatDat() )
     end

     dbUseArea( .T., ( cDriver() ), ( cPatDat() + "VISOR.DBF" ), ( cCheckArea ( "VISOR", @dbfVisor ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
     if !lAIS() ; ordListAdd( ( cPatDat() + "VISOR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

  RECOVER

     msgStop( "Imposible abrir todas las bases de datos" )
     CloseFiles  ()
     lOpen       := .F.

  end

  ErrorBlock( oBlock )

RETURN ( lOpen )


STATIC FUNCTION CloseFiles ()

  if dbfVisor <> nil
     ( dbfVisor )-> ( dbCloseArea() )
  end

  dbfVisor    := nil
  oWndBrw     := nil

RETURN .T.



FUNCTION ConfVisor ( oMenuItem, oWnd )

  local nLevel

  If( oMenuItem == nil, oMenuItem := "01092", ) ;
  If( oWnd == nil, oWnd := oWnd(), ) ;

  if oWndBrw == nil





     nLevel            := Auth():Level( oMenuItem )

     if nAnd( nLevel, 1 ) == 0
        msgStop( "Acceso no permitido." )
        return nil
     end





     if oWnd <> nil
        SysRefresh(); oWnd:CloseAll(); SysRefresh()
     end





     if !OpenFiles()
        return Nil
     end





     AddMnuNext( "Configurar visor", ProcName() )














     oWndBrw := TShell():New( 2, 10, 18, 70, "Configurar visor",, oWnd,,, .F.,,, ( dbfVisor ),,,,, {"Código", "Descripción"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfVisor ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfVisor ) )}, {||( WinDelRec( oWndBrw:oBrw, dbfVisor ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfVisor ) )}, nil, nLevel, "gc_odometer_screw_16", ( 164 + ( 55 * 256 ) + ( 58 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodVis"
         :bEditValue       := {|| ( dbfVisor )->cCodVis }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Descripción"
         :cSortOrder       := "cNomVis"
         :bEditValue       := {|| ( dbfVisor )->cNomVis }
         :nWidth           := 280
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      oWndBrw:CreateXFromCode()





     oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

     oWndBrw:AddSeaBar()








     oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







     oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )







     oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )







     oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfVisor ) )}, "(Z)oom", "Z",,, 8,, .F. )







     oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )





     oWndBrw:NewAt( "END",,, {||( oWndBrw:end() )}, "(S)alir", "S",,,,, .F. )

     oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

  else

     oWndBrw:SetFocus()

  end

RETURN nil



STATIC FUNCTION EdtRec( aTmp, aGet, dbfVisor, oBrw, bWhen, bValid, nMode )

  local oDlg
  local oPort
  local cPort
  local oBitsSec
  local cBitsSec
  local oBitsParada
  local cBitsParada
  local oBitsDatos
  local cBitsDatos
  local oBitsParidad
  local cBitsParidad
  local aBitsDatos      := { "7", "8" }
  local aBitsParada     := { "0", "1", "2" }
  local aBitsSec        := { "2400", "4800", "9600", "19200", "38400", "57600", "115200", "203400", "460800", "921600" }
  local aBitsParidad    := { "Sin paridad", "Paridad par", "Paridad impar" }
  local aPort           := { "LPT1", "LPT2", "LPT3", "LPT4", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9" }

  if nMode == 1

     cPort                                           := "LPT1"
     cBitsSec                                        := "9600"
     cBitsParada                                     := "1"
     cBitsDatos                                      := "8"
     cBitsParidad                                    := "Sin paridad"
     aTmp[ (dbfVisor)->( FieldPos( "nLinea"  ) ) ]   := 1
     aTmp[ (dbfVisor)->( FieldPos( "nChaLin" ) ) ]   := 1
     aTmp[ (dbfVisor)->( FieldPos( "nInact"  ) ) ]   := 10

  else

     cPort         := aTmp[ ( dbfVisor )->( FieldPos( "cPort" ) ) ]
     cBitsSec      := Str( aTmp[ ( dbfVisor )->( FieldPos( "nBitSec" ) ) ] )
     cBitsParada   := Str( aTmp[ ( dbfVisor )->( FieldPos( "nBitPar" ) ) ] )
     cBitsDatos    := Str( aTmp[ ( dbfVisor )->( FieldPos( "nBitDat" ) ) ] )
     cBitsParidad  := aTmp[ ( dbfVisor )->( FieldPos( "cBitPari" ) ) ]

  end





  oDlg = TDialog():New(,,,, LblTitle ( nMode ) + "visor", "CNF_VIS_TPV",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )










     aGet[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ] := TGetHlp():ReDefine( 80, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ]:= u ) }, oDlg,, "@!", {||    ( NotValid( aGet[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ], dbfVisor, .T., "0" ) )},,,,,, .T., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cNomVis" ) ) ] := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cNomVis" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cNomVis" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








     oPort := TComboBox():ReDefine( 100, { | u | If( PCount()==0, cPort, cPort:= u ) }, aPort, oDlg,,, {|Self|( oDlg:aEvalWhen() )},,,, .F., {||     ( nMode <> 3 )},,,,,, "oPort",,,,,,, )





     oBitsSec := TComboBox():ReDefine( 110, { | u | If( PCount()==0, cBitsSec, cBitsSec:= u ) }, aBitsSec, oDlg,,,,,,, .F., {||     ( "COM" $ cPort .AND. nMode <> 3 )},,,,,, "oBitsSec",,,,,,, )





    oBitsParada := TComboBox():ReDefine( 120, { | u | If( PCount()==0, cBitsParada, cBitsParada:= u ) }, aBitsParada, oDlg,,,,,,, .F., {||     ( "COM" $ cPort .AND. nMode <> 3 )},,,,,, "oBitsParada",,,,,,, )





    oBitsDatos := TComboBox():ReDefine( 130, { | u | If( PCount()==0, cBitsDatos, cBitsDatos:= u ) }, aBitsDatos, oDlg,,,,,,, .F., {||     ( "COM" $ cPort .AND. nMode <> 3 )},,,,,, "oBitsDatos",,,,,,, )





    oBitsParidad := TComboBox():ReDefine( 145, { | u | If( PCount()==0, cBitsParidad, cBitsParidad:= u ) }, aBitsParidad, oDlg,,,,,,, .F., {||     ( "COM" $ cPort .AND. nMode <> 3 )},,,,,, "oBitsParidad",,,,,,, )





    TButton():ReDefine( 552, {||( TestVisor( aTmp, cPort, cBitsSec, cBitsDatos, cBitsParada, cBitsParidad ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )











     aGet[ ( dbfVisor )->( FieldPos( "nLinea" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "nLinea" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "nLinea" ) ) ]:= u ) }, oDlg,, "99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      1}, {||      20},, nil,,, )








     aGet[ ( dbfVisor )->( FieldPos( "nChaLin" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "nChaLin" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "nChaLin" ) ) ]:= u ) }, oDlg,, "99999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      1},,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cRetro" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cRetro" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cRetro" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cAvCha" ) ) ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cAvCha" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cAvCha" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cAvLin" ) ) ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cAvLin" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cAvLin" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cReset" ) ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cReset" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cReset" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cEscNor" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cEscNor" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cEscNor" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cEscDes" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cEscDes" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cEscDes" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







     aGet[ ( dbfVisor )->( FieldPos( "cPosIni" ) ) ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cPosIni" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cPosIni" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cPosFin" ) ) ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cPosFin" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cPosFin" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cPriFil" ) ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cPriFil" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cPriFil" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cPriCol" ) ) ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cPriCol" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cPriCol" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







     aGet[ ( dbfVisor )->( FieldPos( "cText1" ) ) ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cText1" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cText1" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





     aGet[ ( dbfVisor )->( FieldPos( "cText2" ) ) ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "cText2" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "cText2" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||      ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









     aGet[ ( dbfVisor )->( FieldPos( "nInact" ) ) ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ ( dbfVisor )->( FieldPos( "nInact" ) ) ], aTmp[ ( dbfVisor )->( FieldPos( "nInact" ) ) ]:= u ) }, oDlg,, "999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      999},, nil,,, )







     TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, dbfVisor, oBrw, nMode, oDlg, cPort, cBitsSec, cBitsParada, cBitsDatos, cBitsParidad ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





     TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )



     if nMode <> 3
        oDlg:AddFastKey( 116, {|| EndTrans( aTmp, aGet, dbfVisor, oBrw, nMode, oDlg, cPort, cBitsSec, cBitsParada, cBitsDatos, cBitsParidad ) } )
     end

    oDlg:bStart := {|| aGet[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ]:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )


RETURN ( oDlg:nResult == 1 )


STATIC FUNCTION EndTrans( aTmp, aGet, dbfVisor, oBrw, nMode, oDlg, cPort, cBitsSec, cBitsParada, cBitsDatos, cBitsParidad )



  if nMode == 1 .OR. nMode == 4

     if Empty( aTmp[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ] )
        MsgStop( "El código del visor no puede estar vacío" )
        aGet[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ]:SetFocus()
        return nil
     end

     if dbSeekInOrd( aTmp[ ( dbfVisor )->( FieldPos( "cCodVis" ) ) ], "CCODVIS", dbfVisor )
        msgStop( "Código existente" )
        return nil
     end

  end



  if Empty( aTmp[ ( dbfVisor )->( FieldPos( "cNomVis" ) ) ] )
     MsgStop( "El nombre del visor no puede estar vacío" )
     aGet[ ( dbfVisor )->( FieldPos( "cNomVis" ) ) ]:SetFocus()
     Return nil
  end



  aTmp[ ( dbfVisor )->( FieldPos( "cPort" )   ) ]  := cPort
  aTmp[ ( dbfVisor )->( FieldPos( "nBitSec" ) ) ]  := Val( cBitsSec )
  aTmp[ ( dbfVisor )->( FieldPos( "nBitPar" ) ) ]  := Val( cBitsParada )
  aTmp[ ( dbfVisor )->( FieldPos( "nBitDat" ) ) ]  := Val( cBitsDatos )
  aTmp[ ( dbfVisor )->( FieldPos( "cBitPari" ) )]  := cBitsParidad

  WinGather( aTmp, aGet, dbfVisor, oBrw, nMode )

RETURN ( oDlg:end( 1 ) )






FUNCTION mkVisor(cPath, lAppend, cPathOld, oMeter )

   local oVisor

   If( cPath == nil, cPath := cPatDat(), ) ;
   If( lAppend == nil, lAppend := .F., ) ;

   oVisor := DbfServer( "VISOR.DBF", ):New( "VISOR.DBF", "VISOR", ( cDriver() ), "Visor", ( cPath ) )

         oVisor:AddField( "CCODVIS", "C", 3, 0,,,,, "Código del visor", .F.,, .F., {} )
         oVisor:AddField( "CNOMVIS", "C", 50, 0,,,,, "Nombre del visor", .F.,, .F., {} )
         oVisor:AddField( "CPORT", "C", 5, 0,,,,, "Puerto del visor", .F.,, .F., {} )
         oVisor:AddField( "NBITSEC", "N", 6, 0,,,,, "Bits segundo", .F.,, .F., {} )
         oVisor:AddField( "NBITPAR", "N", 1, 0,,,,, "Bits de parada", .F.,, .F., {} )
         oVisor:AddField( "NBITDAT", "N", 5, 0,,,,, "Bits de datos", .F.,, .F., {} )
         oVisor:AddField( "CBITPARI", "C", 50, 0,,,,, "Bits de paridad", .F.,, .F., {} )
         oVisor:AddField( "NLINEA", "N", 2, 0,,,,, "Número de lineas", .F.,, .F., {} )
         oVisor:AddField( "NCHALIN", "N", 5, 0,,,,, "Caracteres por líneas", .F.,, .F., {} )
         oVisor:AddField( "CRETRO", "C", 20, 0,,,,, "Retroceso del visor", .F.,, .F., {} )
         oVisor:AddField( "CAVCHA", "C", 50, 0,,,,, "Avance caracter del visor", .F.,, .F., {} )
         oVisor:AddField( "CAVLIN", "C", 50, 0,,,,, "Avance linea del visor", .F.,, .F., {} )
         oVisor:AddField( "CRESET", "C", 50, 0,,,,, "Reset del visor", .F.,, .F., {} )
         oVisor:AddField( "CESCNOR", "C", 50, 0,,,,, "Escritura normal", .F.,, .F., {} )
         oVisor:AddField( "CESCDES", "C", 50, 0,,,,, "Escritura desplazada", .F.,, .F., {} )
         oVisor:AddField( "CPOSINI", "C", 50, 0,,,,, "Posición de inicio", .F.,, .F., {} )
         oVisor:AddField( "CPOSFIN", "C", 50, 0,,,,, "Posición de fin", .F.,, .F., {} )
         oVisor:AddField( "CPRIFIL", "C", 50, 0,,,,, "Primera fila", .F.,, .F., {} )
         oVisor:AddField( "CPRICOL", "C", 50, 0,,,,, "Primera columna", .F.,, .F., {} )
         oVisor:AddField( "CTEXT1", "C", 50, 0,,,,, "Texto defec. primera línea", .F.,, .F., {} )
         oVisor:AddField( "CTEXT2", "C", 50, 0,,,,, "Texto defec. segunda línea", .F.,, .F., {} )
         oVisor:AddField( "NINACT", "N", 3, 0,,,,, "Tiempo por defecto de inactividad", .F.,, .F., {} )

         oVisor:AddIndex( "CCODVIS", "VISOR.CDX", "CCODVIS",,, .F., .F.,,,, .T., .F. )
         oVisor:AddIndex( "CNOMVIS", "VISOR.CDX", "Upper ( CNOMVIS )",,, .F., .F.,,,, .T., .F. )



   oVisor:Activate( .F., .F. )

   if lAppend .AND. file( cPathOld + "VISOR.DBF" )
        oVisor:AppendFrom( cPathOld + "VISOR.DBF" )
   end

   oVisor:end()

RETURN .T.



FUNCTION rxVisor( cPath, oMeter )

   local dbfVisor

   If( cPath == nil, cPath := cPatDat(), ) ;

   if !lExistTable( cPath + "VISOR.DBF" )
      mkVisor( cPath )
   end

   if lExistIndex( cPath + "VISOR.CDX" )
      fErase( cPath + "VISOR.CDX" )
   end

   if lExistTable( cPath + "VISOR.DBF" )

      dbUseArea( .T., cDriver(), cPath + "VISOR.DBF", cCheckArea( "VISOR", @dbfVisor ), .F. )

      if !( dbfVisor )->( neterr() )

         ( dbfVisor )->( __dbPack() )

         ( dbfVisor )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
         ( dbfVisor )->( ordCreate( cPath + "VISOR.CDX", "CCODVIS", "Field->cCodVis", {|| Field->cCodVis } ) )

         ( dbfVisor )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
         ( dbfVisor )->( ordCreate( cPath + "VISOR.CDX", "CNOMVIS", "Upper( Field->cNomVis )", {|| Upper( Field->cNomVis ) } ) )

         ( dbfVisor )->( dbCloseArea() )

      else

         msgStop( "Imposible abrir en modo exclusivo el visor" )

      end

   end

RETURN NIL





FUNCTION IsVisor()

   local oBlock
   local oError
   local dbfVisor

   if !lExistTable( cPatDat() + "VISOR.DBF" )
      mkVisor( cPatDat() )
   end

   if !lExistIndex( cPatDat() + "VISOR.CDX" )
      rxVisor( cPatDat() )
   end

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

       dbUseArea( .T., ( cDriver() ), ( cPatDat() + "VISOR.DBF" ), ( cCheckArea( "VISOR", @dbfVisor ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
       if !lAIS() ; ordListAdd( ( cPatDat() + "VISOR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

       ( dbfVisor )->( __dbLocate( { || ( dbfVisor )->cCodVis == "000" } ) )
       if!( dbfVisor )->( Found() )
          ( dbfVisor )->( dbAppend() )
          ( dbfVisor )->cCodVis      := "000"
          ( dbfVisor )->cNomVis      := "Visor por defecto"
          ( dbfVisor )->cPort        := "COM1"
          ( dbfVisor )->nBitSec      := 9600
          ( dbfVisor )->nBitPar      := 1
          ( dbfVisor )->nBitDat      := 8
          ( dbfVisor )->cBitPari     := "Sin paridad"
          ( dbfVisor )->nLinea       := 2
          ( dbfVisor )->nChaLin      := 20
          ( dbfVisor )->cRetro       := ""
          ( dbfVisor )->cAvCha       := ""
          ( dbfVisor )->cAvLin       := ""
          ( dbfVisor )->cReset       := "12"
          ( dbfVisor )->cEscNor      := ""
          ( dbfVisor )->cEscDes      := ""
          ( dbfVisor )->cPosIni      := ""
          ( dbfVisor )->cPosFin      := ""
          ( dbfVisor )->cPriFil      := ""
          ( dbfVisor )->cPriCol      := ""
          ( dbfVisor )->cText1       := ""
          ( dbfVisor )->cText2       := ""
          ( dbfVisor )->nInact       := 15
          ( dbfVisor )->( dbUnLock() )
       end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfVisor )->( dbCloseArea() )

RETURN ( .T. )






STATIC FUNCTION TestVisor( aTmp, cPuerto, cBitsSec, cBitsDatos, cBitsPara, cBitsPari )

  local oVis   := TCommPort():New( cPuerto, cBitsSec, cBitsPara, cBitsDatos, cBitsPari, .F. )



  if oVis:lCreated








     msgInfo( "Puerto  : " + cPuerto               + Chr(13)+Chr(10) + "Bits    : " + cBitsSec              + Chr(13)+Chr(10) + "Parada  : " + cBitsPara             + Chr(13)+Chr(10) + "Datos   : " + cBitsDatos            + Chr(13)+Chr(10) + "Paridad : " + cBitsPari             + Chr(13)+Chr(10) + "Handle  : " + AllTrim( Str( oVis:nHComm ) ) )

     if oVis:nHComm > 0



         oVis:Write( Padr( "Test del visor", 20) )

     end

   end

   oVis:End()

Return .T.




FUNCTION BrwSelVisor( oGet, dbfVisor, oGet2 )

   local oDlg
    local oBrw
    local oGet1
    local cGet1
   local nOrdAnt        := 1
    local oCbxOrd
   local aCbxOrd        := { "Código", "Descripción" }
   local cCbxOrd
   local nRec           := ( dbfVisor )->( RecNo() )
   local nLevel         := Auth():Level( "01091" )

   nOrdAnt              := Min( Max( nOrdAnt, 1 ), len( aCbxOrd ) )
   cCbxOrd              := aCbxOrd[ nOrdAnt ]

   nOrdAnt              := ( dbfVisor )->( OrdSetFocus( nOrdAnt ) )

   ( dbfVisor )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Seleccionar visor", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






   oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfVisor ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfVisor ) ) }, .F., .F.,,,,,, nil, "FIND",, )






   oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfVisor )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

   oBrw                 := IXBrowse():New( oDlg )

   oBrw:nMarqueeStyle   := 5
   oBrw:lHScroll        := .F.
   oBrw:cAlias          := dbfVisor

   oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
   oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

   oBrw:CreateFromResource( 105 )

   with object ( oBrw:AddCol() )
      :cHeader          := "Código"
      :cSortOrder       := "cCodVis"
      :bEditValue       := {|| ( dbfVisor )->cCodVis }
      :nWidth           := 80
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
   end

   with object ( oBrw:AddCol() )
      :cHeader          := "Descripción"
      :cSortOrder       := "cNomVis"
      :bEditValue       := {|| ( dbfVisor )->cNomVis }
      :nWidth           := 280
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
   end





   TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfVisor ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 )},,, .F. )





   TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfVisor ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 )},,, .F. )




   TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 113,       {|| if( nAnd( nLevel, 2 ) <> 0, WinAppRec( oBrw, bEdit, dbfVisor ), ) } )
   oDlg:AddFastKey( 114,       {|| if( nAnd( nLevel, 4 ) <> 0, WinEdtRec( oBrw, bEdit, dbfVisor ), ) } )
   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      oGet:cText( ( dbfVisor )->cCodVis )
      oGet:lValid()

      if ValType( oGet2 ) == "O"
         oGet2:cText( ( dbfVisor )->cNomVis )
      end

   end

   DestroyFastFilter( dbfVisor )

   SetBrwOpt( "BrwVisor", ( dbfVisor )->( OrdNumber() ) )

   ( dbfVisor )->( OrdSetFocus( nOrdAnt ) )
   ( dbfVisor )->( dbGoTo( nRec ) )

   oGet:setFocus()

RETURN oDlg:nResult == 1



FUNCTION cVisor( oGet, dbfVisor, oGet2 )

   local lValid   := .F.
   local xValor   := oGet:VarGet()

   if Empty( xValor )
      if( oGet2 <> nil, oGet2:cText( "" ), )
      return .T.
   else
      xValor   := RJustObj( oGet, "0" )
   end

   do case
      case Valtype( dbfVisor ) == "C"

         if ( dbfVisor )->( dbSeek( xValor ) )
            oGet:cText( ( dbfVisor )->cCodVis )
            if( oGet2 <> nil, oGet2:cText( ( dbfVisor )->cNomVis ), )
            lValid   := .T.
         else
            oGet:Refresh()
            msgStop( "Visor no encontrado" )
         end

      case Valtype( dbfVisor ) == "O"

         if dbfVisor:Seek( xValor )
            oGet:cText( dbfVisor:cCodVis )
            if( oGet2 <> nil, oGet2:cText( dbfVisor:cNomVis ), )
            lValid   := .T.
         else
            oGet:Refresh()
            msgStop( "Visor no encontrado" )
         end

   end

RETURN lValid
