#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Repositories\ConfiguracionEmpresasRepository.prg"
_HB_CLASS ConfiguracionEmpresasRepository ; function ConfiguracionEmpresasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ConfiguracionEmpresasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ConfiguracionEmpresasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( if( !empty( ::getController() ), ::getModelTableName(), SQLConfiguracionEmpresasModel():getTableName() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValue(); oClass:AddMethod( "getValue", @ConfiguracionEmpresasRepository_getValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setValue(); oClass:AddMethod( "setValue", @ConfiguracionEmpresasRepository_setValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNumeric( name, default); oClass:AddMethod( "getNumeric", @ConfiguracionEmpresasRepository_getNumeric(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getChar(); oClass:AddInline( "getChar", {|Self, name, default | ( ( Self ) ), ( ::getValue( name, default ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLogic(); oClass:AddMethod( "getLogic", @ConfiguracionEmpresasRepository_getLogic(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ConfiguracionEmpresasRepository ;



static FUNCTION ConfiguracionEmpresasRepository_getValue( name, default ) ; local Self AS CLASS ConfiguracionEmpresasRepository := QSelf() AS CLASS ConfiguracionEmpresasRepository




   local cSentence   := "SELECT value FROM " + ::getTableName()            + space( 1 ) +  "WHERE empresa = " + toSQLString( cCodEmp() )   + space( 1 ) +  "AND name = " + toSQLString( name )             + space( 1 ) +  "LIMIT 1"
   local aSelect     := getSQLDataBase():selectFetchHash( cSentence )

   if !empty( aSelect )
      RETURN ( hget( atail( aSelect ), "value" ) )
   end

RETURN ( default )



static FUNCTION ConfiguracionEmpresasRepository_getNumeric( name, default ) ; local Self AS CLASS ConfiguracionEmpresasRepository := QSelf() AS CLASS ConfiguracionEmpresasRepository

   local uValue      := ::getValue( name, default )

   if !hb_isnumeric( uValue )
      RETURN ( val( uValue ) )
   end

RETURN ( uValue )



static FUNCTION ConfiguracionEmpresasRepository_getLogic( name, default ) ; local Self AS CLASS ConfiguracionEmpresasRepository := QSelf() AS CLASS ConfiguracionEmpresasRepository

   local cValue

   if !hb_islogical( default )
      default  := .F.
   end

   cValue      := ::getValue( name )

   if !empty( cValue )
      RETURN ( ".T." $ upper( cValue ) )
   end

RETURN ( default )



static FUNCTION ConfiguracionEmpresasRepository_setValue( name, value ) ; local Self AS CLASS ConfiguracionEmpresasRepository := QSelf() AS CLASS ConfiguracionEmpresasRepository

   local id
   local aSelect
   local cSentence

   value          := cValToStr( value )




   cSentence      := "SELECT id FROM " + ::getTableName()               + space( 1 )   +  "WHERE empresa = " + toSQLString( cCodEmp() )   + space( 1 )   +  "AND name = " + toSQLString( name )             + space( 1 )   +  "LIMIT 1"

   aSelect        := getSQLDataBase():selectFetchHash( cSentence )

   if empty( aSelect )








      cSentence   := "INSERT INTO " + ::getTableName()                  + space( 1 )   +  "( empresa,"                                       + space( 1 )   +  "name,"                                         + space( 1 )   +  "value )"                                       + space( 1 )   +  "VALUES"                                           + space( 1 )   +  "( " + toSQLString( cCodEmp() ) + ","              + space( 1 )   +  toSQLString( name ) + ","                       + space( 1 )   +  toSQLString( value ) + " )"

   else

      id          := hget( atail( aSelect ), "id" )

      if empty( id )
         RETURN ( self )
      end




      cSentence   := "UPDATE " + ::getTableName()                       + space( 1 )   +  "SET"                                              + space( 1 )   +  "value = " + toSQLString( value )               + space( 1 )   +  "WHERE id = " + alltrim( str( id ) )

   end

   getSQLDataBase():Exec( cSentence )

RETURN ( Self )
