#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Repositories\ConfiguracionesRepository.prg"
_HB_CLASS ConfiguracionesRepository ; function ConfiguracionesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ConfiguracionesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ConfiguracionesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( if( !empty( ::getController() ), ::getModelTableName(), SQLConfiguracionesModel():getTableName() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getMovimientoAlmacen(); oClass:AddInline( "getMovimientoAlmacen", {|Self | ( ( Self ) ), ( ::getValue( "movimientos_almacen", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setMovimientoAlmacen(); oClass:AddInline( "setMovimientoAlmacen", {|Self, nValue | ( ( Self ) ), ( ::setValue( "movimientos_almacen", "", nValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAndIncMovimientoAlmacen(); oClass:AddInline( "getAndIncMovimientoAlmacen", {|Self | ( ( Self ) ), ( ::getAndIncValue( "movimientos_almacen", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getId( tabla, serie); oClass:AddMethod( "getId", @ConfiguracionesRepository_getId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValue( tabla, serie, default); oClass:AddMethod( "getValue", @ConfiguracionesRepository_getValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setValue( tabla, serie, nValue); oClass:AddMethod( "setValue", @ConfiguracionesRepository_setValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAndIncValue( tabla, serie); oClass:AddMethod( "getAndIncValue", @ConfiguracionesRepository_getAndIncValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ConfiguracionesRepository ;



static FUNCTION ConfiguracionesRepository_getId( tabla, serie ) ; local Self AS CLASS ConfiguracionesRepository := QSelf() AS CLASS ConfiguracionesRepository





   local cSentence   := "SELECT id FROM " + ::getTableName()               + space( 1 ) +  "WHERE empresa = " + toSQLString( cCodEmp() )   + space( 1 ) +  "AND tabla = " + toSQLString( tabla )        + space( 1 ) +  "AND serie = " + toSQLString( serie )        + space( 1 ) +  "LIMIT 1"
   local aSelect     := getSQLDataBase():selectFetchHash( cSentence )

   if !empty( aSelect )
      RETURN ( hget( atail( aSelect ), "id" ) )
   end

RETURN ( 0 )



static FUNCTION ConfiguracionesRepository_getValue( tabla, serie, default ) ; local Self AS CLASS ConfiguracionesRepository := QSelf() AS CLASS ConfiguracionesRepository





   local cSentence   := "SELECT value FROM " + ::getTableName()            + space( 1 ) +  "WHERE empresa = " + toSQLString( cCodEmp() )   + space( 1 ) +  "AND tabla = " + toSQLString( tabla )        + space( 1 ) +  "AND serie = " + toSQLString( serie )        + space( 1 ) +  "LIMIT 1"
   local aSelect     := getSQLDataBase():selectFetchHash( cSentence )

   if !empty( aSelect )
      RETURN ( hget( atail( aSelect ), "value" ) )
   end

RETURN ( default )



static FUNCTION ConfiguracionesRepository_setValue( tabla, serie, value ) ; local Self AS CLASS ConfiguracionesRepository := QSelf() AS CLASS ConfiguracionesRepository

   local id
   local aSelect
   local cSentence





   cSentence         := "SELECT id FROM " + ::getTableName()               + space( 1 ) +  "WHERE empresa = " + toSQLString( cCodEmp() )   + space( 1 ) +  "AND tabla = " + toSQLString( tabla )        + space( 1 ) +  "AND serie = " + toSQLString( serie )        + space( 1 ) +  "LIMIT 1"

   aSelect           := getSQLDataBase():selectFetchHash( cSentence )

   if empty( aSelect )










      cSentence      := "INSERT INTO " + ::getTableName()                  + space( 1 )   +  "( empresa,"                                       + space( 1 )   +  "tabla,"                                        + space( 1 )   +  "serie,"                                        + space( 1 )   +  "value )"                                       + space( 1 )   +  "VALUES"                                           + space( 1 )   +  "( " + toSQLString( cCodEmp() ) + ","              + space( 1 )   +  toSQLString( tabla ) + ","                      + space( 1 )   +  toSQLString( serie ) + ","                      + space( 1 )   +  toSQLString( value ) + " )"

   else

      id             := hget( atail( aSelect ), "id" )

      if empty( id )
         RETURN ( self )
      end




      cSentence      := "UPDATE " + ::getTableName()                       + space( 1 )   +  "SET"                                              + space( 1 )   +  "value = " + toSQLString( value )               + space( 1 )   +  "WHERE id = " + alltrim( str( id ) )

   end

   getSQLDataBase():Exec( cSentence )

RETURN ( Self )



static FUNCTION ConfiguracionesRepository_getAndIncValue( tabla, serie ) ; local Self AS CLASS ConfiguracionesRepository := QSelf() AS CLASS ConfiguracionesRepository

   local value    := ::getValue( tabla, serie )

   if !empty( value )
      ::setValue( tabla, serie, value + 1 )
   end

RETURN ( value )
