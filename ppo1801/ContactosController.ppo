#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ContactosController.prg"
_HB_CLASS ContactosController ; function ContactosController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ContactosController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ContactosController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @ContactosController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ContactosController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER gettingSelectSentence(); oClass:AddMethod( "gettingSelectSentence", @ContactosController_gettingSelectSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadBlankBuffer(); oClass:AddInline( "loadBlankBuffer", {|Self | ( ( Self ) ), ( ::oModel:loadBlankBuffer() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER insertBuffer(); oClass:AddInline( "insertBuffer", {|Self | ( ( Self ) ), ( ::oModel:insertBuffer() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadedCurrentBuffer( uuidEntidad); oClass:AddMethod( "loadedCurrentBuffer", @ContactosController_loadedCurrentBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER updateBuffer( uuidEntidad); oClass:AddMethod( "updateBuffer", @ContactosController_updateBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadedDuplicateCurrentBuffer( uuidEntidad); oClass:AddMethod( "loadedDuplicateCurrentBuffer", @ContactosController_loadedDuplicateCurrentBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadedDuplicateBuffer( uuidEntidad); oClass:AddMethod( "loadedDuplicateBuffer", @ContactosController_loadedDuplicateBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteBuffer( aUuidEntidades); oClass:AddMethod( "deleteBuffer", @ContactosController_deleteBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ContactosController ;



static FUNCTION ContactosController_New( oController ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   ::Super:New( oController )

   ::cTitle                      := "Contactos"

   ::cName                       := "contactos"



   ::hImage                      := {  "16" => "gc_user_telephone_16", "32" => "gc_user_telephone_32", "48" => "gc_user_telephone_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLContactosModel():New( self )

   ::oBrowseView                    := ContactosBrowseView():New( self )

   ::oDialogView                    := ContactosView():New( self )

   ::oValidator                     := ContactosValidator():New( self, ::oDialogView )

   ::oRepository                    := ContactosRepository():New( self )

   ::oGetSelector                := GetSelector():New( self )

   ::setEvent( "appended",                      {|| ::oBrowseView:Refresh() } )
   ::setEvent( "edited",                        {|| ::oBrowseView:Refresh() } )
   ::setEvent( "deletedSelection",              {|| ::oBrowseView:Refresh() } )

   ::oModel:setEvent( "gettingSelectSentence",  {|| ::gettingSelectSentence() } )

RETURN ( Self )



static FUNCTION ContactosController_End( ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION ContactosController_gettingSelectSentence( ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   local uuid        := ::getSenderController():getUuid()

   if !empty( uuid )
      ::oModel:setGeneralWhere( "parent_uuid = " + quoted( uuid ) )
   end

RETURN ( Self )



static FUNCTION ContactosController_loadedCurrentBuffer( uuidEntidad ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   local idContacto

   if empty( uuidEntidad )
      ::oModel:insertBuffer()
   end

   idContacto          := ::oModel:getIdWhereParentUuid( uuidEntidad )
   if empty( idContacto )
      idContacto       := ::oModel:insertBlankBuffer()
   end

   ::oModel:loadCurrentBuffer( idContacto )

RETURN ( self )



static FUNCTION ContactosController_updateBuffer( uuidEntidad ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   local idContacto

   idContacto          := ::oModel:getIdWhereParentUuid( uuidEntidad )
   if empty( idContacto )
      ::oModel:insertBuffer()
      RETURN ( self )
   end

   ::oModel:updateBuffer()

RETURN ( self )



static FUNCTION ContactosController_loadedDuplicateCurrentBuffer( uuidEntidad ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   local idContacto

   idContacto          := ::oModel:getIdWhereParentUuid( uuidEntidad )
   if empty( idContacto )
      ::oModel:insertBuffer()
      RETURN ( self )
   end

   ::oModel:loadDuplicateBuffer( idContacto )

RETURN ( self )



static FUNCTION ContactosController_loadedDuplicateBuffer( uuidEntidad ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   hset( ::oModel:hBuffer, "parent_uuid", uuidEntidad )

RETURN ( self )



static FUNCTION ContactosController_deleteBuffer( aUuidEntidades ) ; local Self AS CLASS ContactosController := QSelf() AS CLASS ContactosController

   if empty( aUuidEntidades )
      RETURN ( self )
   end

   ::oModel:deleteWhereParentUuid( aUuidEntidades )

RETURN ( self )












_HB_CLASS ContactosBrowseView ; function ContactosBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ContactosBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ContactosBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ContactosBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ContactosBrowseView ;



static FUNCTION ContactosBrowseView_addColumns( ) ; local Self AS CLASS ContactosBrowseView := QSelf() AS CLASS ContactosBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "telefono1"
      :cHeader             := "Telefono 1"
      :nWidth              := 150
      :bEditValue          := {|| ::getRowSet():fieldGet( "telefono1" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "telefono2"
      :cHeader             := "Telefono 2"
      :nWidth              := 150
      :bEditValue          := {|| ::getRowSet():fieldGet( "telefono2" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "email"
      :cHeader             := "Email"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "email" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS ContactosView ; function ContactosView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ContactosView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ContactosView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ContactosView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ExternalRedefine( oDialog); oClass:AddMethod( "ExternalRedefine", @ContactosView_ExternalRedefine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ContactosView ;



static FUNCTION ContactosView_Activate( ) ; local Self AS CLASS ContactosView := QSelf() AS CLASS ContactosView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "Contacto", "CONTACTO",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )



    ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )

   ::ExternalRedefine( ::oDialog )





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()

RETURN ( ::oDialog:nResult )




static FUNCTION ContactosView_ExternalRedefine( oDialog ) ; local Self AS CLASS ContactosView := QSelf() AS CLASS ContactosView






   TGetHlp():ReDefine( 2010, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 2020, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "telefono1" ], ::oController:oModel:hBuffer[ "telefono1" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 2030, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "telefono2" ], ::oController:oModel:hBuffer[ "telefono2" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 2040, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "email" ], ::oController:oModel:hBuffer[ "email" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "email" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )
RETURN ( Self )







_HB_CLASS ContactosValidator ; function ContactosValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ContactosValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ContactosValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ContactosValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ContactosValidator ;



static FUNCTION ContactosValidator_getValidators( ) ; local Self AS CLASS ContactosValidator := QSelf() AS CLASS ContactosValidator

   ::hValidators  := { "email" =>                 {  "mail"               => "El email no es valido" } }

RETURN ( ::hValidators )










_HB_CLASS SQLContactosModel ; function SQLContactosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLContactosModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLContactosModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "contactos", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLContactosModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadPrincipalBlankBuffer(); oClass:AddInline( "loadPrincipalBlankBuffer", {|Self | ( ( Self ) ), ( ::loadBlankBuffer(), hset( ::hBuffer, "principal", .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertPrincipalBlankBuffer(); oClass:AddInline( "insertPrincipalBlankBuffer", {|Self | ( ( Self ) ), ( ::loadPrincipalBlankBuffer(), ::insertBuffer() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getIdWhereParentUuid(); oClass:AddInline( "getIdWhereParentUuid", {|Self, uuid | ( ( Self ) ), ( ::getField( "id", "parent_uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getParentUuidAttribute( value); oClass:AddMethod( "getParentUuidAttribute", @SQLContactosModel_getParentUuidAttribute(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLContactosModel ;



static FUNCTION SQLContactosModel_getColumns( ) ; local Self AS CLASS SQLContactosModel := QSelf() AS CLASS SQLContactosModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",       {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "telefono1",         {  "create"    => "VARCHAR( 15 )"                          , "default"   => {|| space( 15 ) } }                       )


   hset( ::hColumns, "telefono2",         {  "create"    => "VARCHAR( 15 )"                          , "default"   => {|| space( 15 ) } }                       )


   hset( ::hColumns, "email",             {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )

RETURN ( ::hColumns )



static FUNCTION SQLContactosModel_getParentUuidAttribute( value ) ; local Self AS CLASS SQLContactosModel := QSelf() AS CLASS SQLContactosModel

   if empty( ::oController )
      RETURN ( value )
   end

   if empty( ::oController:oSenderController )
      RETURN ( value )
   end

RETURN ( ::oController:oSenderController:getUuid() )











_HB_CLASS ContactosRepository ; function ContactosRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ContactosRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ContactosRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLContactosModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, Uuid | ( ( Self ) ), ( ::getColumnWhereUuid( Uuid, "nombre" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidWhereNombre(); oClass:AddInline( "getUuidWhereNombre", {|Self, cNombre | ( ( Self ) ), ( ::getUuidWhereColumn( cNombre, "nombre", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ContactosRepository ;