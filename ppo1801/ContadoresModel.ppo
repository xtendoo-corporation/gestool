#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\ContadoresModel.prg"
_HB_CLASS ContadoresModel ; function ContadoresModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ContadoresModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ContadoresModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "nCount" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFormatoDefecto( cSerie, cTipoDocumento); oClass:AddMethod( "getFormatoDefecto", @ContadoresModel_getFormatoDefecto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFormatoMovimientosAlmacen(); oClass:AddInline( "getFormatoMovimientosAlmacen", {|Self | ( ( Self ) ), ( ::getFormatoDefecto( "A", "nMovAlm" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCopiasDefecto( cSerie, cTipoDocumento); oClass:AddMethod( "getCopiasDefecto", @ContadoresModel_getCopiasDefecto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCopiasMovimientosAlmacen(); oClass:AddInline( "getCopiasMovimientosAlmacen", {|Self | ( ( Self ) ), ( ::getCopiasDefecto( "A", "nMovAlm" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNumero( cSerie, cTipoDocumento); oClass:AddMethod( "getNumero", @ContadoresModel_getNumero(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroTicket(); oClass:AddInline( "getNumeroTicket", {|Self, cSerie | ( ( Self ) ), ( ::getNumero( cSerie, "NTIKCLI" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setNumero( cSerie, cTipoDocumento, nNumero); oClass:AddMethod( "setNumero", @ContadoresModel_setNumero(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setNumeroTicket(); oClass:AddInline( "setNumeroTicket", {|Self, cSerie, nNumero | ( ( Self ) ), ( ::setNumero( cSerie, "NTIKCLI", nNumero ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ContadoresModel ;



static FUNCTION ContadoresModel_getFormatoDefecto( cSerie, cTipoDocumento ) ; local Self AS CLASS ContadoresModel := QSelf() AS CLASS ContadoresModel

   local cStm


   local cSql  := "SELECT Doc" + cSerie + " "                           +  "FROM " + ::getTableName() + " "                   +  "WHERE Doc = " + quoted( upper( cTipoDocumento ) )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( 1 ) ) )
   end

RETURN ( "" )



static FUNCTION ContadoresModel_getCopiasDefecto( cSerie, cTipoDocumento ) ; local Self AS CLASS ContadoresModel := QSelf() AS CLASS ContadoresModel

   local cStm


   local cSql  := "SELECT Copias" + cSerie + " "                        +  "FROM " + ::getTableName() + " "                   +  "WHERE Doc = " + quoted( upper( cTipoDocumento ) )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( max( ( cStm )->( fieldget( 1 ) ), 1 ) )
   end

RETURN ( 1 )



static FUNCTION ContadoresModel_getNumero( cSerie, cTipoDocumento ) ; local Self AS CLASS ContadoresModel := QSelf() AS CLASS ContadoresModel

   local cStm


   local cSql  := "SELECT " + cSerie + " "                              +  "FROM " + ::getTableName() + " "                   +  "WHERE Doc = " + quoted( upper( cTipoDocumento ) )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( max( ( cStm )->( fieldget( 1 ) ), 1 ) )
   end

RETURN ( 1 )



static FUNCTION ContadoresModel_setNumero( cSerie, cTipoDocumento, nNumero ) ; local Self AS CLASS ContadoresModel := QSelf() AS CLASS ContadoresModel

   local cStm


   local cSql  := "UPDATE " + ::getTableName() + " SET "                +  cSerie + " = " + quoted( nNumero ) + " "           +  "WHERE Doc = " + quoted( upper( cTipoDocumento ) )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( .T. )
   end

RETURN ( .F. )
