#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 41 ".\.\Prg\Contaplu.prg"
static cDiario
static cCuenta
static cEmpresa
static cDiarioSii
static cSubCuenta

static aLenSubCuenta             := {}

static cProyecto

static dFechaInicioEmpresa
static dFechaFinEmpresa

static lOpenDiario               := .F.
static lOpenSubCuenta            := .F.

static nAplicacionContable

static aSerie                    := {"A","B","C","D","E","F","G","H","I","J","K","M","N","O","P","O","R","S","T","U","V","W","X","Y","Z"}

static lAsientoIntraComunitario  := .F.



FUNCTION getDiarioDatabaseContaplus()     ; RETURN ( cDiario )
FUNCTION getDiarioSiiDatabaseContaplus()  ; RETURN ( cDiarioSii )
FUNCTION getCuentaDatabaseContaplus()     ; RETURN ( cCuenta )
FUNCTION getSubCuentaDatabaseContaplus()  ; RETURN ( cSubCuenta )
FUNCTION getEmpresaDatabaseContaplus()    ; RETURN ( cEmpresa )



FUNCTION ChkRuta( cRutaConta, lMessage )

   local lReturn     := .F.

   If( lMessage == nil, lMessage := .F., ) ;

   if lAplicacionA3()
      Return .T.
   end

   if lAplicacionSage()
      Return .T.
   end

   if lAplicacionSage50()
      Return .T.
   end

   if lAplicacionMonitor()
      Return .T.
   end

   if empty( cRutaConta )
      Return .F.
   end

   cRutaConta        := cPath( cRutaConta )



   if file( cRutaConta + "\CONTAPLW.EXE" )      .OR.  file( cRutaConta + "\CONTAPLU.EXE" )      .OR.  file( cRutaConta + "\CONTABILIDAD.EXE" )

      lReturn := .T.

   else

      if lMessage
         msgStop( "Ruta invalida, fichero Contaplus no encontrado" + Chr(13)+Chr(10) + "en ruta " + cRutaConta + "." )
      end

      lReturn        := .F.

   end

RETURN lReturn



FUNCTION chkEmpresaAsociada( cCodigoEmpresa )

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return ( .T. )
   end

   if lAplicacionSage50()
      Return ( .T. )
   end

   if lAplicacionMonitor()
      Return ( .T. )
   end

Return ( !empty( cCodigoEmpresa ) )






FUNCTION ChkFecha( cRuta, cCodEmp, dFecha, lMessage, oTree, cText )

   local lClose      := .F.
   local lValidFecha := .T.

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;
   If( cText == nil, cText := Space( 1 ), ) ;

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return ( .T. )
   end

   if lAplicacionSage50()
      Return ( .T. )
   end

   if lAplicacionMonitor()
      Return ( .T. )
   end

   if empty( cRuta )
      Return ( .F. )
   end

   if ( empty( dFecha ) .OR. empty( cRuta ) )
      Return ( .T. )
   end

   if empty( cEmpresa )
      cEmpresa       := OpnEmpresa( cRuta, lMessage )
      if empty( cEmpresa )
         return .F.
      else
         lClose      := .T.
      end
   end

   if ( cEmpresa )->( dbSeek( cCodEmp ) )

      dFechaInicioEmpresa  := ( cEmpresa )->FechaIni
      dFechaFinEmpresa     := ( cEmpresa )->FechaFin

   else

      lValidFecha          := .F.
      cText                += "Empresa no encontrada"

      if lMessage
         msgStop( cText )
      end

   end

   if lClose
      CloEmpresa()
   end

   if lValidFecha

      if ( dFecha >= dFechaInicioEmpresa .AND. dFecha <= dFechaFinEmpresa )

         lValidFecha       := .T.

      else

         cText             += " fecha del documento " + Dtoc( dFecha ) + " fuera de intervalo de empresa " + cCodEmp + " desde " + Dtoc( dFechaInicioEmpresa ) + " hasta " + Dtoc( dFechaFinEmpresa ) + "."

         if lMessage
            msgStop( cText )
         end

         if !empty( oTree )
            oTree:Select( oTree:Add( Alltrim( cText ) ) )
         end

         lValidFecha       := .F.

      end

   end

RETURN ( lValidFecha )







FUNCTION ChkEmpresaContaplus( cRuta, cCodEmp, oGetEmp, lMessage )

   local lClose      := .F.
   local lEmpresa    := .T.

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return ( .T. )
   end

   if lAplicacionSage50()
      Return ( .T. )
   end

   if lAplicacionMonitor()
      Return ( .T. )
   end

   if empty( cRuta )
      Return ( .F. )
   end

   if empty( cCodEmp )
      if !empty( oGetEmp )
         oGetEmp:cText( "" )
      end
      Return ( .F. )
   end

   if empty( cEmpresa )
      cEmpresa       := OpnEmpresa( cRuta, lMessage )
      if empty( cEmpresa )
         Return ( .F. )
      else
         lClose      := .T.
      end
   end

   lEmpresa          := ( cEmpresa )->( dbSeek( cCodEmp ) )
   if lEmpresa
      if !empty( oGetEmp )
         oGetEmp:cText( ( cEmpresa )->Nombre )
      end
   else
      if lMessage
         msgStop( "Empresa no encontrada" )
      end
   end

   if lClose
      CloEmpresa()
   end

Return ( lEmpresa )



FUNCTION cEmpresaContaplus( cRuta, cCodEmp )

   local lClose      := .F.
   local cNbrEmp     := ""

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;

   if !lAplicacionContaplus()
      Return ( cNbrEmp )
   end

   if empty( cRuta )
      Return ( cNbrEmp )
   end

   if empty( cCodEmp )
      Return ( cNbrEmp )
   end

   if empty( cEmpresa )
      cEmpresa       := OpnEmpresa( cRuta, .F. )
      if empty( cEmpresa )
         Return ( cNbrEmp )
      else
         lClose      := .T.
      end
   end

   if ( cEmpresa )->( dbSeek( cCodEmp ) )
      cNbrEmp        := ( cEmpresa )->Nombre
   else
      cNbrEmp        := ""
   end

   if lClose
      CloEmpresa()
   end

RETURN ( cNbrEmp )



FUNCTION BrwEmpresaContaplus( cRuta, oGetEmp )

   local oDlg
    local oBrw
    local oGet1
    local cGet1
   local lClose      := .F.
    local oCbxOrd
   local aCbxOrd     := { "Código", "Empresa" }
   local cCbxOrd     := "Código"

   if lAplicacionA3()
      msgStop( "Opción no disponible para A3CON Â®" )
      Return( nil )
   end

   if lAplicacionSage()
      msgStop( "Opción no disponible para SAGE" )
      Return( nil )
   end

   if lAplicacionSage50()
      msgStop( "Opción no disponible para SAGE 50" )
      Return( nil )
   end

   if lAplicacionMonitor()
      msgStop( "Opción no disponible para MONITOR INFORMÁTICA" )
      Return( nil )
   end

   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      return .F.
   end

   if empty( cEmpresa )
      cEmpresa       := OpnEmpresa( cRuta, .T. )
      if empty( cEmpresa )
         return .F.
      else
         lClose      := .T.
      end
   end

   ( cEmpresa )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Empresas de contaplus", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







   oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||             ( OrdClearScope( oBrw, cEmpresa ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cEmpresa ) ) }, .F., .F.,,,,,, nil, "Find",, )





   oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

   oBrw                 := IXBrowse():New( oDlg )

   oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrw:cAlias          := cEmpresa
   oBrw:nMarqueeStyle   := 5
   oBrw:cName           := "Browse.Empresas contaplus"

      with object ( oBrw:AddCol() )
         :cHeader       := "Código"
         :cSortOrder    := "Cod"
         :bEditValue    := {|| ( cEmpresa )->Cod }
         :nWidth        := 60
         :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader       := "Empresa"
         :cSortOrder    := "Nombre"
         :bEditValue    := {|| ( cEmpresa )->Nombre }
         :nWidth        := 420
         :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

   oBrw:CreateFromResource( 105 )

   oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
   oBrw:bKeyDown        := {|nKey, nFalg| if( nKey == 13, oDlg:end( 1 ), ) }





   TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





   TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )




   TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1 .AND. !empty( oGetEmp )
      oGetEmp:cText( ( cEmpresa )->Cod )
   end

   if lClose
      CloEmpresa()
   end

RETURN ( nil )






FUNCTION nLenSubcuenta( cRuta, cCodEmp, lMensaje )

Return ( nLenCuentaContaplus( cRuta, cCodEmp, lMensaje ) + 3 )



FUNCTION nLenCuentaContaplus( cRuta, cCodEmp, lMensaje )

   local nLenCuentaContaplus  := nLenSubcuentaContaplus( cRuta, cCodEmp, lMensaje )

   if nLenCuentaContaplus <> 0
      nLenCuentaContaplus -= 3
   end

Return ( nLenCuentaContaplus )



FUNCTION nLenSubcuentaContaplus( cRuta, cCodEmp, lMensaje )

   local lClose      := .F.
   local nReturn     := 0
   local nPosition

   if lAplicacionA3()
      Return ( 10 )
   end

   if lAplicacionSage()
      Return ( 10 )
   end

   if lAplicacionSage50()
      Return ( 10 )
   end

   if lAplicacionMonitor()
      Return ( 10 )
   end

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMensaje == nil, lMensaje := .F., ) ;

   nPosition         := aScan( aLenSubCuenta, {|a| a[ 1 ] == cCodEmp } )
   if nPosition <> 0
      Return ( aLenSubCuenta[ nPosition, 2 ] )
   end

   if empty( cRuta )
      if lMensaje
         msgStop( "Ruta vacia" )
      end
      Return ( nReturn )
   end

   if empty( cEmpresa )
      cEmpresa       := OpnEmpresa( cRuta, lMensaje )
      if empty( cEmpresa )
         Return ( nReturn )
      else
         lClose      := .T.
      end
   end

   if ( cEmpresa )->( dbSeek( cCodEmp ) )



      nReturn        := ( cEmpresa )->Nivel



      aAdd( aLenSubCuenta, { cCodEmp, nReturn } )

   else

      if lMensaje
         MsgStop( "Empresa " + cCodEmp + " no encontrada." )
      end

   end

   if lClose
      CloEmpresa()
   end

Return ( nReturn )



FUNCTION nEjercicioContaplus( cRuta, cCodEmp, lMensaje )

   local lClose      := .F.
   local nReturn     := 0

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMensaje == nil, lMensaje := .F., ) ;

   if empty( cRuta )
      if lMensaje
         msgStop( "Ruta vacia" )
      end
      Return ( nReturn )
   end

   if empty( cEmpresa )
      cEmpresa       := OpnEmpresa( cRuta, lMensaje )
      if empty( cEmpresa )
         Return ( nReturn )
      else
         lClose      := .T.
      end
   end

   if ( cEmpresa )->( dbSeek( cCodEmp ) )

      nReturn        := ( cEmpresa )->Ejercicio

   else

      if lMensaje
         MsgStop( "Empresa " + cCodEmp + " no encontrada." )
      end

   end

   if lClose
      CloEmpresa()
   end

Return ( nReturn )







FUNCTION ChkCta( cCodCuenta, oGetCta, lMessage, cRuta, cCodEmp )

    local cArea
   local lOld        := .T.
   local lReturn     := .T.

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return ( .T. )
   end

   if lAplicacionSage50()
      Return ( .T. )
   end

   if lAplicacionMonitor()
      Return ( .T. )
   end

   If( lMessage == nil, lMessage := .F., ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt( "A" ), ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      Return ( .F. )
   end

   cRuta             := cPath( cRuta )

   if empty( cCodCuenta )
      Return .T.
   end

   if OpnCta( cRuta, cCodEmp, @cArea, lMessage )

      if ( cArea )->( dbSeek( cCodCuenta ) )

         if oGetCta <> nil

            do case
               case oGetCta:ClassName() == "TGET" .OR. oGetCta:ClassName() == "TGETHLP"
                  oGetCta:cText( ( cArea )->Descrip )
               case oGetCta:ClassName() == "TSAY"
                  oGetCta:SetText( ( cArea )->Descrip )
            end

         end

      else

         if lMessage
            msgStop( "Cuenta no encontrada" )
         end

            lReturn  := .F.

      end

      ( cArea )->( dbCloseArea() )

   end

RETURN lReturn



FUNCTION ChkSubcuenta( cRuta, cCodEmp, cCodSubcuenta, oGetCta, lMessage, lempty )

   local lClose      := .F.
   local lReturn     := .T.

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return ( .T. )
   end

   if lAplicacionSage50()
      Return ( .T. )
   end

   if lAplicacionMonitor()
      Return ( .T. )
   end

   If( cCodEmp == nil, cCodEmp := cEmpCnt( "A" ), ) ;
   If( lMessage == nil, lMessage := .F., ) ;
   If( lempty == nil, lempty := .T., ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      Return ( .F. )
   end

   cRuta             := cPath( cRuta )
   cCodSubcuenta        := Padr( cCodSubcuenta, 12 )

   if ( empty( cCodSubcuenta ) .OR. empty( cRuta ) ) .AND. lempty
      return .T.
   end

   if empty( cSubCuenta )
      cSubCuenta     := OpnSubCuenta( cRuta, cCodEmp, lMessage )
      if empty( cSubCuenta )
         return .F.
      else
         lClose      := .T.
      end
   end

   if ( cSubCuenta )->( dbSeek( cCodSubcuenta ) )

      if !empty( oGetCta )
         oGetCta:cText( ( cSubCuenta )->Titulo )
      end

   else

      if lMessage
         msgStop( "Subcuenta : " + cCodSubcuenta + Chr(13)+Chr(10) + "no encontrada", "Contaplus" )
      end

      lReturn        := .F.

   end

   if lClose
      CloSubCuenta()
   end

RETURN ( lReturn )



FUNCTION BrwChkCta( oCodCta, oGetCta, cRuta, cCodEmp )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
    local oCbxOrd
    local cArea
   local aCbxOrd     := { "Código", "Cuenta" }
   local cCbxOrd     := "Código"

   if lAplicacionA3()
      msgStop( "Opción no disponible para A3CON" )
      Return( nil )
   end

   if lAplicacionSage()
      msgStop( "Opción no disponible para SAGE" )
      Return( nil )
   end

   if lAplicacionSage50()
      msgStop( "Opción no disponible para SAGE 50" )
      Return( nil )
   end

   if lAplicacionMonitor()
      msgStop( "Opción no disponible para MONITOR INFORMÁTICA" )
      Return( nil )
   end

   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      Return ( nil )
   end

   cRuta             := cPath( cRuta )

   if OpnCta( cRuta, cCodEmp, @cArea, .T. )

      ( cArea )->( dbSetFilter( {|| !empty( Field->Cta ) }, "!empty( Field->Cta )" ) )
      ( cArea )->( dbGoTop() )

      oDlg = TDialog():New(,,,, "Cuentas de contaplus", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, cArea ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cArea ) ) }, .F., .F.,,,,,, nil, "FIND",, )





        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := cArea
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Cuenta contaplus"

         with object ( oBrw:AddCol() )
            :cHeader       := "Código"
            :cSortOrder    := "Cta"
            :bEditValue    := {|| ( cArea )->Cta }
            :nWidth        := 60
            :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( oBrw:AddCol() )
            :cHeader       := "Cuenta"
            :cSortOrder    := "Descrip"
            :bEditValue    := {|| ( cArea )->Descrip }
            :nWidth        := 420
            :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

      oBrw:CreateFromResource( 105 )

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bKeyDown        := {|nKey, nFalg| if( nKey == 13, oDlg:end( 1 ), ) }





      TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

      if oDlg:nResult == 1

         oCodCta:cText( ( cArea )->Cta )

         do case
            case oGetCta:ClassName() == "TGET" .OR. oGetCta:ClassName() == "TGETHLP"
               oGetCta:cText( ( cArea )->Descrip )
            case oGetCta:ClassName() == "TSAY"
               oGetCta:SetText( ( cArea )->Descrip )
         end

      end

        ( cArea )->( dbCloseArea() )

   end

    oCodCta:setFocus()

RETURN ( nil )



FUNCTION BrwChkSubcuenta( oCodCta, oGetCta, cRuta, cCodEmp )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
    local oCbxOrd
   local cArea
   local cCbxOrd     := "Cuenta"

   if lAplicacionA3()
      msgStop( "Opción no disponible para A3CON" )
      Return( nil )
   end

   if lAplicacionSage()
      msgStop( "Opción no disponible para SAGE" )
      Return( nil )
   end

   if lAplicacionSage50()
      msgStop( "Opción no disponible para SAGE 50" )
      Return( nil )
   end

   if lAplicacionMonitor()
      msgStop( "Opción no disponible para MONITOR INFORMÁTICA" )
      Return( nil )
   end

   If( cCodEmp == nil, cCodEmp := cEmpCnt( "A" ), ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      msgStop( "Ruta no definida" )
      Return ( nil )
   end

   cRuta             := cPath( cRuta )

   if OpenSubCuenta( cRuta, cCodEmp, @cArea, .T. )

        ( cArea )->( dbGoTop() )

      oDlg = TDialog():New(,,,, "Subcuentas de contaplus", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





            oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| AutoSeek( nKey, nFlags, Self, oBrw, cArea ) }, .F., .F.,,,,,, nil, "FIND",, )





            oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, { "Cuenta", "Nombre" }, oDlg,,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

         oBrw                 := IXBrowse():New( oDlg )

         oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

         oBrw:cAlias          := cArea
         oBrw:nMarqueeStyle   := 5
         oBrw:cName           := "Browse.Cuentas de contaplus"

         with object ( oBrw:AddCol() )
            :cHeader          := "Cuenta"
            :cSortOrder       := "Cods"
            :bEditValue       := {|| ( cArea )->Cod }
            :nWidth           := 80
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( oBrw:AddCol() )
            :cHeader          := "Nombre"
            :cSortOrder       := "Tits"
            :bEditValue       := {|| ( cArea )->Titulo }
            :nWidth           := 400
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
         oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

         oBrw:CreateFromResource( 105 )





         TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





         TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )




         TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )





            TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

         oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
         oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

         oDlg:bStart := {|| oBrw:Load() }

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

      if oDlg:nResult == 1

         oCodCta:cText( ( cArea )->Cod )

         do case
            case oGetCta:ClassName() == "TGET" .OR. oGetCta:ClassName() == "TGETHLP"
               oGetCta:cText( ( cArea )->Titulo )
            case oGetCta:ClassName() == "TSAY"
               oGetCta:SetText( ( cArea )->Titulo )
         end

      end

        ( cArea )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir ficheros de Contaplus")
      Return .F.

   end

    oCodCta:setFocus()

Return ( nil )







FUNCTION mkSubcuenta( oGetSubcuenta, aTemp, oGet, cRuta, cCodEmp, oGetDebe, oGetHaber, oGetSaldo )

   local n
   local cArea
   local nSumaDB        := 0
   local nSumaHB        := 0
   local cTitCta        := ""
   local aEmpProced     := {}
   local cCodSubcuenta

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return( .T. )
   end

   if lAplicacionSage50()
      Return( .T. )
   end

   if lAplicacionMonitor()
      Return( .T. )
   end

   If( cCodEmp == nil, cCodEmp := cEmpCnt( "A" ), ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      Return ( .F. )
   end

   cRuta                := cPath( cRuta )

   cCodSubcuenta        := pntReplace( oGetSubcuenta, "0", nLenSubcuenta() )
   cCodSubcuenta        := padr( cCodSubcuenta, nLenSubcuenta() )
   cCodSubcuenta        := alltrim( cCodSubcuenta )

   if empty( cCodSubcuenta )
      RETURN .T.
   end

   for n := 1 to len( aSerie )

      cCodEmp           := cCodEmpCnt( aSerie[ n ] )

      if !empty( cCodEmp ) .AND. aScan( aEmpProced, cCodEmp ) == 0

         if OpenSubCuenta( cRuta, cCodEmp, @cArea )

            if !( cArea )->( dbSeek( cCodSubcuenta, .T. ) ) .AND. !empty( aTemp )



               if ApoloMsgNoYes( "Subcuenta : " + rtrim( cCodSubcuenta ) + " no existe en empresa : " + cCodEmp + Chr(13)+Chr(10) +  "¿ Desea crearla ?" , "Contabilidad" )

                  ( cArea )->( dbappend() )

                  ( cArea )->Cod          := cCodSubcuenta

                  if ( cArea )->( fieldpos( "IDNIF" ) ) <> 0
                     ( cArea )->idNif     := 1
                  end

                  if len( aTemp ) > 1
                     ( cArea )->Titulo    := aTemp[ 2 ]
                  end

                  if len( aTemp ) > 2
                     ( cArea )->Nif       := aTemp[ 3 ]
                  end

                  if len( aTemp ) > 3
                     ( cArea )->Domicilio := aTemp[ 4 ]
                  end

                  if len( aTemp ) > 4
                     ( cArea )->Poblacion := aTemp[ 5 ]
                  end

                  if len( aTemp ) > 5
                     ( cArea )->Provincia := aTemp[ 6 ]
                  end

                  if len( aTemp ) > 6
                     ( cArea )->CodPostal := aTemp[ 7 ]
                  end

                  if len( aTemp ) > 7
                     ( cArea )->Telef01   := aTemp[ 8 ]
                  end

                  if len( aTemp ) > 8
                     ( cArea )->Fax01     := aTemp[ 9 ]
                  end

                  if len( aTemp ) > 9
                     ( cArea )->eMail     := aTemp[ 10 ]
                  end

                  ( cArea )->( dbcommit() )

                  if empty( cTitCta )
                     cTitCta              := ( cArea )->Titulo
                  end

               end

            else

               if empty( cTitCta )
                  cTitCta                 := ( cArea )->Titulo
               end

               nSumaDB                    += ( cArea )->SumaDBEU
               nSumaHB                    += ( cArea )->SumaHBEU

            end

            ( cArea )->( dbCloseArea() )

            aAdd( aEmpProced, cCodEmp )

         end

      end

   next

   if isObject( oGet )
      do case
         case oGet:ClassName() == "TGET" .OR. oGet:ClassName() == "TGETHLP"
            oGet:cText( cTitCta )
         case oGet:ClassName() == "TSAY"
            oGet:SetText( cTitCta )
      end
   end

   if isObject( oGetDebe )
      oGetDebe:cText( nSumaDB )
   end

   if isNum( oGetDebe )
      oGetDebe := nSumaDB
   end

   if isObject( oGetHaber )
      oGetHaber:cText( nSumaHB )
   end

   if isNum( oGetHaber )
      oGetHaber := nSumaHB
   end

   if isObject( oGetSaldo )
      oGetSaldo:cText( nSumaDB - nSumaHB )
   end

Return .T.



FUNCTION LoadSubcuenta( cCodSubcuenta, cRuta, dbfTmp )

   local n
   local cCodEmp
   local dbfDiario
   local aEmpProced  := {}

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return ( .T. )
   end

   if lAplicacionSage50()
      Return ( .T. )
   end

   if lAplicacionMonitor()
      Return ( .T. )
   end

   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      Return .F.
   end

   cRuta             := cPath( cRuta )

   ( dbfTmp )->( __dbZap() )

   if empty( AllTrim( cCodSubcuenta ) )
      return .T.
   end

   for n := 1 to len( aSerie )

      cCodEmp        := cCodEmpCnt( aSerie[ n ] )

      if !empty( cCodEmp ) .AND. aScan( aEmpProced, cCodEmp ) == 0

         dbfDiario   := OpnDiario( cRuta, cCodEmp, .F. )
         if dbfDiario <> nil

            ( dbfDiario )->( OrdSetFocus( "SubCd" ) )

            if ( dbfDiario )->( dbSeek( cCodSubcuenta ) )

               while ( dbfDiario )->SubCta == cCodSubcuenta .AND. !( dbfDiario )->( eof() )

                  ( dbfTmp )->( dbAppend() )

                  ( dbfTmp )->nAsiento  := ( dbfDiario )->Asien
                  ( dbfTmp )->dFecha    := ( dbfDiario )->Fecha
                  ( dbfTmp )->cConcepto := ( dbfDiario )->Concepto
                  ( dbfTmp )->nDebe     := ( dbfDiario )->EuroDebe
                  ( dbfTmp )->nHaber    := ( dbfDiario )->EuroHaber
                  ( dbfTmp )->cDeparta  := ( dbfDiario )->Departa + "." + ( dbfDiario )->Clave
                  ( dbfTmp )->nFactura  := ( dbfDiario )->Factura
                  ( dbfTmp )->nBase     := ( dbfDiario )->BaseEuro
                  ( dbfTmp )->nIva      := ( dbfDiario )->Iva

                  ( dbfDiario )->( dbSkip() )

               end

            end

         end

         ( dbfDiario )->( dbCloseArea() )

         aAdd( aEmpProced, cCodEmp )

      end

   next

   ( dbfTmp )->( dbGoTop() )

RETURN .T.




FUNCTION RetCtaEsp( nCuenta, cRuta, cCodEmp, lMessage )

    local cArea
   local oBlock
    local cCtaEsp        := ""

   if lAplicacionA3()
      Return ( cCtaEsp )
   end

   if lAplicacionSage()
      Return ( cCtaEsp )
   end

   if lAplicacionSage50()
      Return ( cCtaEsp )
   end

   if lAplicacionMonitor()
      Return ( cCtaEsp )
   end

    If( nCuenta == nil, nCuenta := 1, ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt( "A" ), ) ;
   If( lMessage == nil, lMessage := .F., ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      RETURN ( cCtaEsp )
   end

   cRuta             := cPath( cRuta )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      do case
      case File( cRuta + "EMP" + cCodEmp + "\TCTA" + cCodEmp + ".DBF" )

         dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\TCTA" + cCodEmp + ".DBF" ), ( cCheckArea( "CUENTA", @cArea ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )

      case File( cRuta + "EMP" + cCodEmp + "\TCTA.DBF" )

         dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\TCTA.DBF" ), ( cCheckArea( "CUENTA", @cArea ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )

      end

      ( cArea )->( dbgoto( nCuenta ) )

      cCtaEsp           := rtrim( ( cArea )->Cuenta )

       ( cArea )->( dbCloseArea() )

   RECOVER

      if lMessage
         MsgStop( "Imposible acceder a fichero de empresas de Contaplus", "Abriendo fichero de cuentas especiales" )
      end

   end

   ErrorBlock( oBlock )

RETURN ( cCtaEsp )



FUNCTION lOpenDiario()

Return ( lOpenDiario )



FUNCTION OpenDiario( cRuta, cCodEmp, lMessage )

   local oError
   local oBlock

   if lAplicacionA3()
      Return ( .T. )
   end

   if lAplicacionSage()
      Return ( .T. )
   end

   if lAplicacionSage50()
      Return ( .T. )
   end

   if lAplicacionMonitor()
      Return ( .T. )
   end

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if lOpenDiario
      Return ( lOpenDiario )
   end

   if empty( cRuta )
      if lMessage
         MsgStop( "Ruta de contaplus no válida" )
      end
      lOpenDiario    := .F.
      Return ( lOpenDiario )
   end

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      lOpenDiario    := .T.
      cRuta          := cPath( cRuta )

      cDiario        := OpnDiario( cRuta, cCodEmp, lMessage )
      if empty( cDiario )
         lOpenDiario := .F.
      end

      cCuenta        := OpnBalance( cRuta, cCodEmp, lMessage )
      if empty( cCuenta )
         lOpenDiario := .F.
      end

      cSubCuenta     := OpnSubCuenta( cRuta, cCodEmp, lMessage )
      if empty( cSubCuenta )
         lOpenDiario := .F.
      end

      cEmpresa       := OpnEmpresa( cRuta, lMessage )
      if empty( cEmpresa )
         lOpenDiario := .F.
      end

      cDiarioSii     := OpnDiarioSii( cRuta, cCodEmp, lMessage )

   RECOVER USING oError

      lOpenDiario    := .F.

      msgStop( "Imposible abrir todas las bases de datos de contaplus" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lOpenDiario )



FUNCTION CloseDiario()

   if !empty( cDiario )
      ( cDiario )->( dbCloseArea() )
   end

   if !empty( cCuenta )
      ( cCuenta )->( dbCloseArea() )
   end

   if !empty( cSubCuenta )
      ( cSubCuenta )->( dbCloseArea() )
   end

   if !empty( cEmpresa )
      ( cEmpresa )->( dbCloseArea() )
   end

   if !empty( cDiarioSii )
      ( cDiarioSii )->( dbCloseArea() )
   end

   cDiario           := nil
   cCuenta           := nil
   cEmpresa          := nil
   cSubCuenta        := nil
   cDiarioSii        := nil

   lOpenDiario       := .F.

Return ( lOpenDiario )




FUNCTION contaplusUltimoAsiento()

   local nRecno
   local contaplusUltimoAsiento    := 0

   if lAplicacionA3()
      Return ( contaplusUltimoAsiento )
   end

   if lAplicacionSage()
      Return ( contaplusUltimoAsiento )
   end

   if lAplicacionSage50()
      Return ( contaplusUltimoAsiento )
   end

   if lAplicacionMonitor()
      Return ( contaplusUltimoAsiento )
   end

   if !empty( cDiario ) .AND. ( cDiario )->( Used() )

      nRecno                        := ( cDiario )->( Recno() )

      ( cDiario )->( dbGoBottom() )

      contaplusUltimoAsiento       := ( cDiario )->Asien + 1

      ( cDiario )->( dbGoTo( nRecno ) )

   end

Return ( contaplusUltimoAsiento )





























FUNCTION MkAsiento(     Asien, cDivisa,    Fecha,    Subcuenta,    Contrapartida, nImporteDebe,    Concepto, nImporteHaber,    Factura,    BaseImponible, IVA,    RecargoEquivalencia,    Documento,    Departamento,    Clave, lRectificativa,    nCasado,    tCasado, lSimula, cNif, cNombre, nEjeCon, cEjeCta, lSII )

   local cSerie            := "A"
   local oError
   local oBlock
   local nImporte
   local aAsiento
   local hAsiento

   if lAplicacionA3()
      return .T.
   end

   if lAplicacionSage()
      return .T.
   end

   if lAplicacionSage50()
      return .T.
   end

   if lAplicacionMonitor()
      return .T.
   end

   If( cDivisa == nil, cDivisa := cDivEmp(), ) ;
   If( lRectificativa == nil, lRectificativa := .F., ) ;
   If( lSimula == nil, lSimula := .T., ) ;
   If( nImporteDebe == nil, nImporteDebe := 0, ) ;
   If( nImporteHaber == nil, nImporteHaber := 0, ) ;
   If( nEjeCon == nil, nEjeCon := 0, ) ;
   If( lSII == nil, lSII := .F., ) ;

   if ischar( Factura )
      cSerie               := substr( Factura, 1, 1 )
      if len( Factura ) <= 12
         Factura           := substr( Factura, 2, 9 )
      else
         Factura           := substr( Factura, 2, 10 )
      end
   end

   if isnum( Factura )
      Factura              := alltrim( str( Factura ) )
   end

   if Factura <> nil
      Factura              := val( substr( Factura, -7 ) )
   end

   if IsChar( nEjeCon )
      nEjeCon              := val( nEjeCon )
   end





   if lBancas() .AND. ( nImporteDebe == 0  ) .AND. ( nImporteHaber == 0 )
      return ( nil )
   end

   oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





      if !uFieldEmpresa( "lAptNeg" ) .AND. ( nImporteDebe < 0 .OR. nImporteHaber < 0 )
         nImporte          := abs( nImporteDebe )
         nImporteDebe      := abs( nImporteHaber )
         nImporteHaber     := nImporte
         if IsNum( BaseImponible )
            BaseImponible  := abs( BaseImponible )
         end
      end





























      aAsiento             :=  MkAsientoContaplus( Asien, cDivisa, Fecha, Subcuenta, Contrapartida, nImporteDebe, Concepto, nImporteHaber, cSerie, Factura, BaseImponible, IVA, RecargoEquivalencia, Documento, Departamento, Clave, lRectificativa, nCasado, tCasado, lSimula, cNif, cNombre, nEjeCon, cEjeCta, lSII )

   RECOVER USING oError

      msgStop( "Error al realizar apunte contable." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

RETURN ( aAsiento )



























Static FUNCTION MkAsientoContaplus( Asien, cDivisa, Fecha, Subcuenta, Contrapartida, nImporteDebe, Concepto, nImporteHaber, cSerie, Factura, BaseImponible, IVA, RecargoEquivalencia, Documento, Departamento, Clave, lRectificativa, nCasado, tCasado, lSimula, cNif, cNombre, nEjeCon, cEjeCta, lSII )

   local aTemp



   aTemp                   := dbBlankRec( cDiario )

   aTemp[ ( cDiario )->( fieldpos( "ASIEN" ) ) ]         := if( Asien    <> nil, Asien,      contaplusUltimoAsiento() )
   aTemp[ ( cDiario )->( fieldpos( "FECHA" ) ) ]         := if( Fecha    <> nil, Fecha,      aTemp[ ( cDiario )->( fieldpos( "FECHA" ) ) ] )

   if ( cDiario )->( fieldpos( "FECHA_OP" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "FECHA_OP" ) ) ]   := if( Fecha    <> nil, Fecha,      aTemp[ ( cDiario )->( fieldpos( "FECHA_OP" ) ) ] )
   end

   if ( cDiario )->( fieldpos( "FECHA_EX" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "FECHA_EX" ) ) ]   := if( Fecha    <> nil, Fecha,      aTemp[ ( cDiario )->( fieldpos( "FECHA_EX" ) ) ] )
   end

   aTemp[ ( cDiario )->( fieldpos( "SERIE" ) ) ]         := if( cSerie   <> nil, cSerie,     aTemp[ ( cDiario )->( fieldpos( "SERIE" ) ) ] )
   aTemp[ ( cDiario )->( fieldpos( "FACTURA" ) ) ]       := if( Factura  <> nil, Factura,    aTemp[ ( cDiario )->( fieldpos( "FACTURA" ) ) ] )

   aTemp[ ( cDiario )->( fieldpos( "BASEEURO" ) ) ]      := if( BaseImponible <> nil, BaseImponible,   aTemp[ ( cDiario )->( fieldpos( "BASEEURO" ) ) ] )
   aTemp[ ( cDiario )->( fieldpos( "EURODEBE" ) ) ]      := if( nImporteDebe  <> nil, nImporteDebe,    aTemp[ ( cDiario )->( fieldpos( "EURODEBE" ) ) ] )
   aTemp[ ( cDiario )->( fieldpos( "EUROHABER" ) ) ]     := if( nImporteHaber <> nil, nImporteHaber,   aTemp[ ( cDiario )->( fieldpos( "EUROHABER" ) ) ] )

   aTemp[ ( cDiario )->( fieldpos( "SUBCTA" ) ) ]        := if( Subcuenta   <> nil, Subcuenta,     aTemp[ ( cDiario )->( fieldpos( "SUBCTA" ) ) ] )
   aTemp[ ( cDiario )->( fieldpos( "CONTRA" ) ) ]        := if( Contrapartida   <> nil, Contrapartida,     aTemp[ ( cDiario )->( fieldpos( "CONTRA" ) ) ] )

   aTemp[ ( cDiario )->( fieldpos( "CONCEPTO" ) ) ]      := if( Concepto <> nil, Concepto,   aTemp[ ( cDiario )->( fieldpos( "CONCEPTO" ) ) ] )

   aTemp[ ( cDiario )->( fieldpos( "IVA" ) )       ]     := if( IVA      <> nil, IVA,        aTemp[ ( cDiario )->( fieldpos( "IVA" ) )        ] )
   aTemp[ ( cDiario )->( fieldpos( "RECEQUIV" ) )  ]     := if( RecargoEquivalencia <> nil, RecargoEquivalencia,   aTemp[ ( cDiario )->( fieldpos( "RECEQUIV" ) )   ] )
   aTemp[ ( cDiario )->( fieldpos( "DOCUMENTO" ) ) ]     := if( Documento<> nil, Documento,  aTemp[ ( cDiario )->( fieldpos( "DOCUMENTO" ) )  ] )
   aTemp[ ( cDiario )->( fieldpos( "DEPARTA" ) )   ]     := if( Departamento <> nil, Departamento,    aTemp[ ( cDiario )->( fieldpos( "DEPARTA" ) )    ] )
   aTemp[ ( cDiario )->( fieldpos( "CLAVE" ) )     ]     := if( Clave    <> nil, Clave,      aTemp[ ( cDiario )->( fieldpos( "CLAVE" ) )      ] )
   aTemp[ ( cDiario )->( fieldpos( "NCASADO" ) )   ]     := if( nCasado  <> nil, nCasado,    aTemp[ ( cDiario )->( fieldpos( "NCASADO" ) )    ] )
   aTemp[ ( cDiario )->( fieldpos( "TCASADO" ) )   ]     := if( tCasado  <> nil, tCasado,    aTemp[ ( cDiario )->( fieldpos( "TCASADO" ) )    ] )

   if ( cDiario )->( fieldpos( "TERNIF" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "TERNIF" ) ) ]     := if( cNif  <> nil, cNif,    aTemp[ ( cDiario )->( fieldpos( "TERNIF" ) ) ] )
   end

   if ( cDiario )->( fieldpos( "TERNOM" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "TERNOM" ) ) ]     := if( cNombre  <> nil, cNombre,    aTemp[ ( cDiario )->( fieldpos( "TERNOM" ) ) ] )
   end

   aTemp[ ( cDiario )->( fieldpos( "RECTIFICA" ) ) ]     := lRectificativa



   aTemp[ ( cDiario )->( fieldpos( "MONEDAUSO" ) ) ]     := "2"



   if !empty( nEjeCon ) .AND. !empty( cEjeCta )

      if ( cDiario )->( fieldpos( "METAL" ) ) <> 0
         aTemp[ ( cDiario )->( fieldpos( "METAL") ) ]       := .T.
      end
      if ( cDiario )->( fieldpos( "METALIMP" ) ) <> 0
         aTemp[ ( cDiario )->( fieldpos( "METALIMP" ) ) ]   := if( nImporteDebe <> nil,  nImporteDebe,  aTemp[ ( cDiario )->( fieldpos( "METALIMP" ) ) ] )
      end
      if ( cDiario )->( fieldpos( "METALEJE" ) ) <> 0
         aTemp[ ( cDiario )->( fieldpos( "METALEJE") ) ]    := nEjeCon
      end

   end



   if ( cDiario )->( fieldpos( "TipoOpe" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "TipoOpe" ) ) ]    := if( getAsientoIntraComunitario(), "P", "" )
   end

   if ( cDiario )->( fieldpos( "TERIDNIF" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "TERIDNIF" ) ) ]   := if( getAsientoIntraComunitario(), 2, 1 )
   end



   if ( cDiario )->( fieldpos( "Guid" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "Guid" ) ) ]       := win_uuidcreatestring()
   end



   if ( cDiario )->( fieldpos( "l340" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "l340" ) ) ]       := .T.
   end



   if ( cDiario )->( fieldpos( "cTimeStamp" ) ) <> 0
      aTemp[ ( cDiario )->( fieldpos( "cTimeStamp" ) ) ] := hb_ttoc( hb_datetime() )
   end













Return ( aTemp )



FUNCTION aWriteAsiento( aAsientos, cDivisa, lMessage )

Return ( aeval( aAsientos, {|aAsiento| WriteAsiento( aAsiento, cDivisa, lMessage ) } ) )



FUNCTION WriteAsiento( aAsiento, cDivisa, lMessage )

   local cMes
   local nFld
   local nVal
   local oBlock
   local oError

   If( lMessage == nil, lMessage := .F., ) ;

   if isFalse( runEventScript( "Contaplus\beforeWriteAsiento", aAsiento ) )
      debug( "isFalse" )
      Return .F.
   end

   if empty( cDiario )
      Return .F.
   end

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if !empty( aAsiento[ ( cDiario )->( fieldpos( "FECHA" ) ) ] )

      WinGather( aAsiento, , cDiario, , 1, , .F. )

      cMes                          := Rjust( Month( aAsiento[ ( cDiario )->( fieldpos( "FECHA" ) ) ] ), "0", 2 )

      if ( cSubCuenta )->( dbSeek( aAsiento[ ( cDiario )->( fieldpos( "SubCta" ) ) ] ) ) .AND. ( cSubCuenta )->( dbRLock() )

         ( cSubCuenta )->SUMADBEU   += aAsiento[ ( cDiario )->( fieldpos( "EURODEBE" ) ) ]
         ( cSubCuenta )->SUMAHBEU   += aAsiento[ ( cDiario )->( fieldpos( "EUROHABER" ) ) ]

         nFld        := ( cSubCuenta )->( fieldpos( "SDB" + cMes + "EU" ) )
         nVal        := ( cSubCuenta )->( fieldget( nFld ) )
         ( cSubCuenta )->( fieldput( nFld, nVal + aAsiento[ ( cDiario )->( fieldpos( "EURODEBE" ) ) ] ) )

         nFld        := ( cSubCuenta )->( fieldpos( "SHB" + cMes + "EU" ) )
         nVal        := ( cSubCuenta )->( fieldget( nFld ) )
         ( cSubCuenta )->( fieldput( nFld, nVal + aAsiento[ ( cDiario )->( fieldpos( "EUROHABER" ) ) ] ) )

         nFld        := ( cSubCuenta )->( fieldpos( "NDB" + cMes + "EU" ) )
         nVal        := ( cSubCuenta )->( fieldget( nFld ) )
         ( cSubCuenta )->( fieldput( nFld, nVal + aAsiento[ ( cDiario )->( fieldpos( "EURODEBE" ) ) ] ) )

         nFld        := ( cSubCuenta )->( fieldpos( "NHB" + cMes + "EU" ) )
         nVal        := ( cSubCuenta )->( fieldget( nFld ) )
         ( cSubCuenta )->( fieldput( nFld, nVal + aAsiento[ ( cDiario )->( fieldpos( "EUROHABER" ) ) ] ) )

         ( cSubCuenta )->( dbUnLock() )

      else

         if lMessage
            MsgStop( "Subcuenta no encontrada " + aAsiento[ ( cDiario )->( fieldpos( "SubCta" ) ) ], "Imposible actualizar saldos" )
         end

      end

   end

   RECOVER USING oError

      msgStop( "Error al escribir apunte contable." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( nil )



FUNCTION mkAsientoSII( aAsiento, nTipoFactura )

   local guid
   local aTemp

   if empty( cDiario )
      Return ( nil )
   end

   if empty( cDiarioSii )
      Return ( nil )
   end

   if ( cDiario )->( fieldpos( "Guid" ) ) == 0
      Return ( nil )
   end

   if ( cDiario )->( fieldpos( "l340" ) ) == 0
      Return ( nil )
   end

   if aAsiento[( cDiario )->( fieldpos( "l340" ) ) ]
      Return ( nil )
   end

   guid                                                  := aAsiento[ ( cDiario )->( fieldpos( "Guid" ) ) ]
   if empty( guid )
      Return ( nil )
   end

   If( nTipoFactura == nil, nTipoFactura := 1, ) ;



   aTemp                                                 := dbBlankRec( cDiarioSii )

   aTemp[ ( cDiarioSii )->( fieldpos( "Guid" ) ) ]       := guid
   aTemp[ ( cDiarioSii )->( fieldpos( "Estado" ) ) ]     := 0
   aTemp[ ( cDiarioSii )->( fieldpos( "TipoClave" ) ) ]  := 1
   aTemp[ ( cDiarioSii )->( fieldpos( "TipoExenci" ) ) ] := 1
   aTemp[ ( cDiarioSii )->( fieldpos( "TipoNoSuje" ) ) ] := 1
   aTemp[ ( cDiarioSii )->( fieldpos( "TipoFact" ) ) ]   := nTipoFactura

Return ( aTemp )



FUNCTION aWriteAsientoSII( aAsientos )

Return ( aeval( aAsientos, {|aAsiento| WriteAsientoSII( aAsiento) } ) )



FUNCTION WriteAsientoSII( aAsiento )

   local oBlock
   local oError

   if empty( cDiarioSii )
      Return .F.
   end

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      WinGather( aAsiento, , cDiarioSii, , 1, , .F. )

   RECOVER USING oError

      msgStop( "Error al escribir apunte contable SII." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( nil )







FUNCTION retCtaVta( cCodArt, lDevolucion, dbfArticulo )

   local cCtaVta        := ""

   If( lDevolucion == nil, lDevolucion := .F., ) ;

   if ( dbfArticulo )->( dbSeek( cCodArt ) )

      if lDevolucion
         cCtaVta        := rtrim( ( dbfArticulo )->cCtaVtaDev )
      end

      if empty( cCtaVta )
         cCtaVta        := rtrim( ( dbfArticulo )->cCtaVta )
      end

   end

RETURN ( cCtaVta )







FUNCTION RetCtaCom( cCodArt, lDevolucion, dbfArticulo )

   local cCtaCom        := ""

   If( lDevolucion == nil, lDevolucion := .F., ) ;

   if ( dbfArticulo )->( dbSeek( cCodArt ) )

      if lDevolucion
         cCtaCom        := rtrim( ( dbfArticulo )->cCtaComDev )
      end

      if empty(cCtaCom)
         cCtaCom        := rtrim( ( dbfArticulo )->cCtaCom )
      end

   end

RETURN ( cCtaCom )



FUNCTION RetCtaTrn( cCodArt, dbfArticulo )

   local cCtaVta  := uFieldEmpresa( "cCtaPor" )

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      cCtaVta     := Rtrim( ( dbfArticulo )->cCtaTrn )
   end

RETURN ( cCtaVta )







FUNCTION RetGrpVta( cCodArt, cRuta, cCodEmp, nIva )

   local cCtaVent := replicate( "0", nLenCuentaContaplus( cRuta, cCodEmp ) )

   if nIva <> nil
      cCtaVent    := retGrpAsc( nIva, , cRuta, cCodEmp )
   end

RETURN ( cCtaVent )



FUNCTION cCtaConta( oGet, dbfCuentas, oGet2 )

    local lClose     := .F.
    local lValid    := .F.
    local xValor    := oGet:varGet()
   local cRuta    := cRutCnt()
   local cCodEmp  := cEmpCnt()

   if empty( xValor )
      Return .T.
   elseif At( ".", xValor ) <> 0
      xValor      := PntReplace( oGet, "0", nLenCuentaContaplus() )
   else
      xValor      := RJustObj( oGet, "0", nLenCuentaContaplus() )
   end

   if dbfCuentas == nil

      if OpenSubCuenta( cRuta, cCodEmp, @dbfCuentas )
         lClose   := .T.
      else
         return .F.
      end

   end

    IF !(dbfCuentas)->( DbSeek( xValor, .T. ) )

      oGet:cText( ( dbfCuentas )->Cod )

        IF oGet2 <> nil
         oGet2:cText( ( dbfCuentas )->Titulo )
        end

        lValid    := .T.

    ELSE

        msgStop( "Subcuentas no encontrada" )

    end

    IF lClose
      ( dbfCuentas )->( dbCloseArea() )
    end

RETURN lValid







STATIC FUNCTION OpnEmpresa( cRuta, lMessage )

   local oBlock

   If( lMessage == nil, lMessage := .F., ) ;
   If( lMessage == nil, lMessage := .F., ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      return ( nil )
   end

   cRuta             := cPath( cRuta )

   if !File( cRuta + "Emp\Empresa.Dbf" ) .OR. !File( cRuta + "Emp\Empresa.Cdx" )
      if lMessage
         MsgStop( "Fichero de empresa de Contaplus " +  cRuta + "Emp\Empresa.Dbf, no encontrado", "Abriendo fichero de empresas" )
      end
      Return ( nil )
   end

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP\EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @cEmpresa ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if ! .F. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP\EMPRESA.CDX" ) )

   RECOVER

      cEmpresa       := nil

   end

   ErrorBlock( oBlock )

Return ( cEmpresa )



FUNCTION CloEmpresa()

   if !empty( cEmpresa )
      ( cEmpresa )->( dbCloseArea() )
   end

   cEmpresa          := nil

Return ( cEmpresa )






STATIC FUNCTION OpnCta( cRuta, cCodEmp, cArea, lMessage )

   local oBlock
   local lOpen       := .T.

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if empty( cRuta )
      return .F.
   end

   cRuta             := cPath( cRuta )
   cCodEmp           := alltrim( cCodEmp )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE


      if File( cRuta + "EMP" + cCodEmp + "\Balan.Dbf" )  .AND. File( cRuta + "EMP" + cCodEmp + "\Balan.Cdx" )

         dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\Balan.Dbf" ), ( cCheckArea( "CUENTA", @cArea ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if ! .F. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\Balan.Cdx" ) )
           ordSetFocus( "CTA" )

      else

         if lMessage
            msgStop( "Ficheros no encontrados en ruta " + cRuta + " empresa " + cCodEmp, "Abriendo subcuentas" )
         end

         lOpen          := .F.

      end

      if ( cArea )->( RddName() ) == nil .OR. NetErr()
         lOpen          := .F.
      end

   RECOVER

      if lMessage
         msgStop( "Imposible acceder a fichero Contaplus", "Abriendo subcuentas" )
      end
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

Return ( lOpen )






FUNCTION OpenSubCuenta( cRuta, cCodEmp, cArea, lMessage )

   local oBlock
   local lOpen       := .T.

   if lAplicacionA3()
      msgStop( "Opción no disponible para A3CON" )
      Return ( .F. )
   end

   if lAplicacionSage()
      msgStop( "Opción no disponible para SAGE" )
      Return ( .F. )
   end

   if lAplicacionSage50()
      msgStop( "Opción no disponible para SAGE 50" )
      Return ( .F. )
   end

   if lAplicacionMonitor()
      msgStop( "Opción no disponible para MONITOR INFORMÁTICA" )
      Return ( .F. )
   end

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if empty( cRuta )
      msgStop( "Ruta de Contaplus esta vacia")
      Return ( .F. )
   end

   cRuta             := cPath( cRuta )
   cCodEmp           := alltrim( cCodEmp )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE


      if File( cRuta + "EMP" + cCodEmp + "\SubCta.Dbf" ) .AND.  File( cRuta + "EMP" + cCodEmp + "\SubCta.Cdx" )

         dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\SubCta.Dbf" ), ( cCheckArea( "CUENTA", @cArea ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if ! .T. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\SubCta.Cdx" ) )

      else

         if lMessage
            msgStop( "Ficheros no encontrados", "Abriendo subcuentas" )
         end

         lOpen       := .F.

      end

      if ( cArea )->( RddName() ) == nil .OR. NetErr()
         if lMessage
            MsgStop( "Imposible acceder a fichero Contaplus", "Abriendo subcuentas" )
         end
         lOpen       := .F.
      end

   RECOVER

      if lMessage
         MsgStop( "Imposible acceder a fichero Contaplus", "Abriendo subcuentas" )
      end
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

Return ( lOpen )



FUNCTION OpenVencimientos( cRuta, cCodEmp, cArea, lMessage )

   local oBlock
   local lOpen       := .T.

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if empty( cRuta )
      msgStop( "Ruta de Contaplus esta vacia")
      Return ( .F. )
   end

   cRuta             := cPath( cRuta )
   cCodEmp           := alltrim( cCodEmp )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE


      if File( cRuta + "EMP" + cCodEmp + "\Venci.Dbf" ) .AND.  File( cRuta + "EMP" + cCodEmp + "\Venci.Cdx" )

         dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\Venci.Dbf" ), ( cCheckArea( "Venci", @cArea ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if ! .T. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\Venci.Cdx" ) )

      else

         if lMessage
            msgStop( "Ficheros no encontrados", "Abriendo vencimientos" )
         end

         lOpen       := .F.

      end

      if ( cArea )->( RddName() ) == nil .OR. NetErr()
         if lMessage
            MsgStop( "Imposible acceder a fichero Contaplus", "Abriendo vencimientos" )
         end
         lOpen       := .F.
      end

   RECOVER

      if lMessage
         MsgStop( "Imposible acceder a fichero de vencimientos Contaplus", "Abriendo vencimientos" )
      end
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

Return ( lOpen )



FUNCTION MsgTblCon( aTable, cDivisa, dbfDiv, lConAsi, cTitle, bConta )

   local oDlg
    local oBrw
   local oBtnCon
   local cPorDiv           := cPorDiv( cDivisa, dbfDiv )

   If( lConAsi == nil, lConAsi := .F., ) ;
   If( cTitle == nil, cTitle := "", ) ;

   if !IsArray( aTable ) .OR. len( aTable ) < 1
      return nil
   end

   oDlg = TDialog():New(,,,, "Simulador de asientos." + Space( 1 ) + cTitle, "CONTA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

   oBrw                    := IXBrowse():New( oDlg )

   oBrw:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrw:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrw:SetArray( aTable, , , .F. )

   oBrw:lFooter            := .T.
   oBrw:nMarqueeStyle      := 5
   oBrw:cName              := "Simulador de asientos"

   oBrw:CreateFromResource( 100 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Asiento"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Asien" ) ) ] }
         :nWidth           := 50
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Fecha" ) ) ] }
         :nWidth           := 70
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Subcuenta"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "SubCta" ) ) ] }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Contapartida"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Contra" ) ) ] }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Debe"
         :bEditValue       := {|| if( .T. , aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "EuroDebe" ) ) ], aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "PtaDebe" ) ) ] ) }
         :bFooter          := {|| nTotDebe( aTable, cDivisa ) }
         :cEditPicture     := cPorDiv
         :nWidth           := 70
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Concepto"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Concepto" ) ) ] }
         :nWidth           := 170
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Haber"
         :bEditValue       := {|| if( .T., aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "EuroHaber" ) ) ], aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "PtaHaber" ) ) ] ) }
         :bFooter          := {|| nTotHaber( aTable, cDivisa ) }
         :cEditPicture     := cPorDiv
         :nWidth           := 70
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Serie"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Serie" ) ) ] }
         :nWidth           := 20
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Factura"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Factura" ) ) ] }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Base imponible"
         :bEditValue       := {|| if( .T. , aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "BaseEuro" ) ) ], aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "BaseImponible" ) ) ] ) }
         :cEditPicture     := cPorDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "IVA" ) ) ] }
         :cEditPicture     := cPorDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "R.E."
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "RecargoEquivalencia" ) ) ] }
         :cEditPicture     := cPorDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Documento" ) ) ] }
         :nWidth           := 100
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Departamento"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Departamento" ) ) ] }
         :nWidth           := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Clave"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Clave" ) ) ] }
         :nWidth           := 60
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Estado"
         :bEditValue       := {|| aTable[ oBrw:nArrayAt, ( cDiario )->( fieldpos( "Estado" ) ) ] }
         :nWidth           := 40
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }




      oBtnCon := TButton():ReDefine( 110, {||( if( !empty( bConta ), Eval( bConta ), ), oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 120, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 1, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| if( !empty( bConta ), Eval( bConta ), ), oDlg:end() } )

      oDlg:bStart          := {|| if( !lConAsi .OR. empty( bConta ), oBtnCon:Hide(), ) }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



FUNCTION nTotDebe( aTable, cDivisa, cPorDiv )

   local nTotal      := 0
   local oError
   local oBlock

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if !empty( aTable )

   if .T.
      aEval( aTable, {|x| nTotal += if( valType( x[ ( cDiario )->( fieldpos( "EURODEBE" ) ) ] ) == "N", x[ ( cDiario )->( fieldpos( "EURODEBE" ) ) ], 0 ) } )
   else
      aEval( aTable, {|x| nTotal += if( valType( x[ ( cDiario )->( fieldpos( "PTADEBE" ) ) ] ) == "N", x[ ( cDiario )->( fieldpos( "PTADEBE" ) ) ], 0 ) } )
   end

   end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

return ( if( empty( cPorDiv ), nTotal, Trans( nTotal, cPorDiv ) ) )



FUNCTION nTotHaber( aTable, cDivisa, cPorDiv )

   local nTotal   := 0
   local oError
   local oBlock

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if .T.
      aEval( aTable, {|x| nTotal += if( valType( x[ ( cDiario )->( fieldpos( "EUROHABER" ) ) ] ) == "N", x[ ( cDiario )->( fieldpos( "EUROHABER" ) ) ], 0 ) } )
   else
      aEval( aTable, {|x| nTotal += if( valType( x[ ( cDiario )->( fieldpos( "PTAHABER" ) ) ] ) == "N", x[ ( cDiario )->( fieldpos( "PTAHABER" ) ) ], 0 ) } )
   end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

return ( if( empty( cPorDiv ), nTotal, Trans( nTotal, cPorDiv ) ) )



FUNCTION BrwProyecto( oCodPro, oGetPro, cRuta, cCodEmp )

    local oDlg
    local oBrw
   local oAdd
   local oEdt
    local oGet1
    local cGet1
    local oCbxOrd
    local cCbxOrd        := "Nombre"
    local cAreaAnt     := Alias()

   if lAplicacionA3()
      msgStop( "Opción no disponible para A3CON" )
      Return( nil )
   end

   if lAplicacionSage()
      msgStop( "Opción no disponible para SAGE" )
      Return ( .F. )
   end

   if lAplicacionSage50()
      msgStop( "Opción no disponible para SAGE 50" )
      Return ( .F. )
   end

   if lAplicacionMonitor()
      msgStop( "Opción no disponible para MONITOR INFORMÁTICA" )
      Return ( .F. )
   end

   If( cCodEmp == nil, cCodEmp := cEmpCnt( "A" ), ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      return .F.
   end

   cRuta             := cPath( cRuta )

   IF OpnProyecto( cRuta, cCodEmp )

      ( cProyecto )->( dbGoTop() )

      oDlg = TDialog():New(,,,, "Proyectos de contaplus®", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| AutoSeek( nKey, nFlags, Self, oBrw, cProyecto ) }, .F., .F.,,,,,, nil, "FIND",, )





        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, { "Código", "Proyecto" }, oDlg,,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := cProyecto
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Proyectos de contaplus"

         with object ( oBrw:AddCol() )
            :cHeader       := "Código"
            :cSortOrder    := "Proye"
            :bEditValue    := {|| ( cProyecto )->Proye }
            :cEditPicture  := "@R ####.######"
            :nWidth        := 80
            :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( oBrw:AddCol() )
            :cHeader       := "Proyecto"
            :cSortOrder    := "Descrip"
            :bEditValue    := {|| ( cProyecto )->Descrip }
            :nWidth        := 260
            :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

      oBrw:CreateFromResource( 105 )

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bKeyDown        := {|nKey, nFalg| if( nKey == 13, oDlg:end( 1 ), ) }




      oAdd := TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F.,,,, .F. )




      oEdt := TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oAdd:Hide(), oEdt:Hide() )}, oDlg:bRClicked,,, )

      IF oDlg:nResult == 1

         oCodPro:cText( ( cProyecto )->Proye )

         IF ValType( oGetPro ) == "O"
            oGetPro:cText( ( cProyecto )->Descrip )
            end

        end

      CloseProyecto()

    end

    IF cAreaAnt <> ""
        dbSelectArea( ( cAreaAnt ) )
    end

   oCodPro:setFocus()

RETURN ( nil )



FUNCTION ChkProyecto( cCodPro, oGetPro, cRuta, cCodEmp, lMessage )

   local cNombreProyecto   := ""

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if empty( cRuta )
      return ( cNombreProyecto )
   end

   cRuta                   := cPath( cRuta )

   if empty( cCodPro ) .OR. empty( cRuta )
      return ( cNombreProyecto )
   end

   if OpnProyecto( cRuta, cCodEmp )

      if ( cProyecto )->( dbSeek( cCodPro ) )

         cNombreProyecto   := ( cProyecto )->Descrip

      else

         if lMessage
            msgStop( "Proyecto : " + cCodPro + Chr(13)+Chr(10) + "no encontrada", "Contaplus" )
         end

      end

      if !empty( oGetPro )
         oGetPro:cText( cNombreProyecto )
      end

      CloseProyecto()

   end

Return ( cNombreProyecto )



FUNCTION OpnProyecto( cRuta, cCodEmp )

   local lRet        := .F.

   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      return .F.
   end

   cRuta             := cPath( cRuta )

   do case
   case File( cRuta + "EMP" + cCodEmp + "\PROYEC" + cCodEmp + ".CDX" )





      dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\PROYEC" + cCodEmp + ".DBF" ), ( cCheckArea( "PROYEC", @cProyecto ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
      if ! .F. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\PROYEC" + cCodEmp + ".CDX" ) )

      IF ( cProyecto )->( RddName() ) == nil .OR. NetErr()
         MsgStop( "Imposible acceder a fichero Contaplus", "Abriendo fichero de proyecto" )
         lRet  := .F.
      ELSE
         lRet  := .T.
      end

   case File( cRuta + "EMP" + cCodEmp + "\PROYEC.CDX" )





      dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\PROYEC.DBF" ), ( cCheckArea( "PROYEC", @cProyecto ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
      if ! .F. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\PROYEC.CDX" ) )

      IF ( cProyecto )->( RddName() ) == nil .OR. NetErr()
         MsgStop( "Imposible acceder a fichero Contaplus", "Abriendo fichero de proyecto" )
         lRet  := .F.
      ELSE
         lRet  := .T.
      end

   end

RETURN lRet



FUNCTION CloseProyecto()

   ( cProyecto  )->( dbCloseArea() )

RETURN nil



FUNCTION cCodEmpCnt( cSer )

   local cCodEmp  := ""

   If( cSer == nil, cSer := "A", ) ;

   cCodEmp        := cEmpCnt( cSer )

RETURN ( cCodEmp )



FUNCTION dbfDiario() ; return ( cDiario )



FUNCTION dbfCuenta() ; return ( cCuenta )



FUNCTION dbfSubcuenta() ; return ( cSubCuenta )



FUNCTION dbfProyecto() ; return ( cProyecto )



FUNCTION OpnDiario( cRuta, cCodEmp, lMessage )

   local oBlock
   local dbfDiario      := nil

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if empty( cRuta )
      if lMessage
         MsgStop( "Ruta de Contaplus Â® no valida" )
      end
      Return nil
   end

   cRuta                := cPath( cRuta )
   cCodEmp              := alltrim( cCodEmp )

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if File( cRuta + "EMP" + cCodEmp + "\DIARIO.CDX" )

         dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\DIARIO.DBF" ), ( cCheckArea( "DIARIO", @dbfDiario ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if ! .T. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\DIARIO.CDX" ) )
         ordSetFocus( "NUASI" )

         if ( dbfDiario )->( RddName() ) == nil .OR. ( dbfDiario )->( NetErr() )

            if lMessage
               msgStop( "Imposible abrir las bases de datos del diario de Contaplus Â®" )
            end

            dbfDiario   := nil

         end

      else

         if lMessage
            msgStop( "Ficheros no encontrados en ruta " + cRuta + " empresa " + cCodEmp, "Abriendo diario" )
         end

         dbfDiario      := nil

      end

   RECOVER

      msgStop( "Imposible abrir las bases de datos del diario de Contaplus Â®" )

      dbfDiario         := nil

   end

   ErrorBlock( oBlock )

Return ( dbfDiario )



FUNCTION OpnDiarioSii( cRuta, cCodEmp, lMessage )

   local oBlock
   local dbfDiarioSii   := nil

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if empty( cRuta )
      if lMessage
         MsgStop( "Ruta de Contaplus Â® no valida" )
      end
      Return nil
   end

   cRuta                := cPath( cRuta )
   cCodEmp              := alltrim( cCodEmp )

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if File( cRuta + "EMP" + cCodEmp + "\DIARIOF.CDX" )

         dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\DIARIOF.DBF" ), ( cCheckArea( "DIARIO", @dbfDiarioSii ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if ! .T. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\DIARIOF.CDX" ) )
         ordSetFocus( "NUASI" )

         if ( dbfDiarioSii )->( RddName() ) == nil .OR. ( dbfDiarioSii )->( NetErr() )

            if lMessage
               msgStop( "Imposible abrir las bases de datos del diario de Contaplus Â®" )
            end

            dbfDiarioSii   := nil

         end

      else

         if lMessage
            msgStop( "Ficheros no encontrados en ruta " + cRuta + " empresa " + cCodEmp, "Abriendo diario" )
         end

         dbfDiarioSii      := nil

      end

   RECOVER

      msgStop( "Imposible abrir las bases de datos del diario de Contaplus Â®" )

      dbfDiarioSii         := nil

   end

   ErrorBlock( oBlock )

Return ( dbfDiarioSii )



FUNCTION OpnBalance( cRuta, cCodEmp, lMessage )

   local dbfBalance

   If( cCodEmp == nil, cCodEmp := cEmpCnt( "A" ), ) ;
   If( lMessage == nil, lMessage := .F., ) ;
   If( cRuta == nil, cRuta := cRutCnt(), ) ;

   if empty( cRuta )
      if lMessage
         MsgStop( "Ruta de Contaplus no valida" )
      end
      Return nil
   end

   cRuta             := cPath( cRuta )
   cCodEmp           := alltrim( cCodEmp )


   if file( cRuta + "EMP" + cCodEmp + "\Balan.Dbf" ) .AND.  file( cRuta + "EMP" + cCodEmp + "\Balan.Cdx" )

      dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\Balan.Dbf" ), ( cCheckArea( "BALAN", @dbfBalance ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if ! .F. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\Balan.Cdx" ) )
        ordSetFocus( "CTA" )

   else

      if lMessage
         msgStop( "Ficheros no encontrados en ruta " + cRuta + " empresa " + cCodEmp, "Abriendo balances" )
      end

      Return nil

   end

   if ( dbfBalance )->( RddName() ) == nil .OR. NetErr()
      if lMessage
         msgStop( "Imposible acceder a fichero Contaplus", "Abriendo balances" )
      end
      Return nil
   end

Return ( dbfBalance )



FUNCTION OpnSubCuenta( cRuta, cCodEmp, lMessage )

   local dbfSubcuenta

   If( cRuta == nil, cRuta := cRutCnt(), ) ;
   If( cCodEmp == nil, cCodEmp := cEmpCnt(), ) ;
   If( lMessage == nil, lMessage := .F., ) ;

   if empty( cRuta )
      if lMessage
         MsgStop( "Ruta de Contaplus Â® no valida" )
      end
      Return nil
   end

   cRuta             := cPath( cRuta )
   cCodEmp           := alltrim( cCodEmp )


   if file( cRuta + "EMP" + cCodEmp + "\SubCta.Dbf" ) .AND.  file( cRuta + "EMP" + cCodEmp + "\SubCta.Cdx" )

      dbUseArea( .T., ( cLocalDriver() ), ( cRuta + "EMP" + cCodEmp + "\SubCta.Dbf" ), ( cCheckArea( "SUBCUENTA", @dbfSubcuenta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if ! .F. ; ordListClear() ; end ; ordListAdd( ( cRuta + "EMP" + cCodEmp + "\SubCta.Cdx" ) )

   else

      if lMessage
         msgStop( "Ficheros no encontrados en ruta " + cRuta + " empresa " + cCodEmp, "Abriendo subcuentas" )
      end

      Return nil

   end

   if ( dbfSubcuenta )->( RddName() ) == nil .OR. NetErr()
      if lMessage
         msgStop( "Imposible acceder a fichero Contaplus", "Abriendo subcuentas" )
      end
      Return nil
   end

Return ( dbfSubcuenta )



FUNCTION CloSubCuenta()

   if !empty( cSubCuenta )
      ( cSubCuenta )->( dbCloseArea() )
   end

   cSubCuenta  := nil

Return ( cSubCuenta )



FUNCTION ODiario()

Return ( nil )



FUNCTION CDiario()

Return ( nil )



FUNCTION SetAplicacionContable( nAplicacion )

   if nAplicacionContable <> nAplicacion
      nAplicacionContable := nAplicacion
   end

Return ( nAplicacion )



FUNCTION lAplicacionContaplus()

Return ( nAplicacionContable <= 1 )



FUNCTION lAplicacionA3()

Return ( nAplicacionContable == 2 )



FUNCTION lAplicacionSage()

Return ( nAplicacionContable == 3 )



FUNCTION lAplicacionMonitor()

Return ( nAplicacionContable == 4 )



FUNCTION lAplicacionSage50()

Return ( nAplicacionContable == 5 )



FUNCTION setAsientoIntraComunitario( lIntracomunitario )

   lAsientoIntraComunitario   := lIntracomunitario

Return ( lAsientoIntraComunitario )



FUNCTION getAsientoIntraComunitario()

Return ( lAsientoIntraComunitario )



_HB_CLASS EnlaceA3 ; function EnlaceA3 ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EnlaceA3", iif( .F., { }, { @HBObject() } ), @EnlaceA3() ) ) ;

   _HB_MEMBER { oInstance } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInstance"}, .F. )

   _HB_MEMBER { hAsiento } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hAsiento"}, .F. )
   _HB_MEMBER { aAsiento } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aAsiento"}, .F. )

   _HB_MEMBER { cDirectory } ; oClass:AddMultiData(, "C:\ENLACEA3", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDirectory"}, .F. )
   _HB_MEMBER { cFile } ; oClass:AddMultiData(, "SUENLACE.DAT", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFile"}, .F. )
   _HB_MEMBER { hFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hFile"}, .F. )
   _HB_MEMBER { cDate } ; oClass:AddMultiData(, DateToString(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDate"}, .F. )

   _HB_MEMBER { cBuffer } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBuffer"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @EnlaceA3_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInstance(); oClass:AddMethod( "getInstance", @EnlaceA3_getInstance(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyInstance(); oClass:AddInline( "destroyInstance", {|Self | ( ( Self ) ), ( ::oInstance := nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Add(); oClass:AddInline( "Add", {|Self, hAsiento | ( ( Self ) ), ( if( hhaskey( hAsiento, "Render" ) .AND. !empty( hGet( hAsiento, "Render" ) ), aAdd( ::aAsiento, hAsiento ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Show(); oClass:AddInline( "Show", {|Self | ( ( Self ) ), ( msgInfo( ::cBuffer ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Directory(); oClass:AddInline( "Directory", {|Self, cValue | ( ( Self ) ), ( if( !empty( cValue ), ::cDirectory        := cValue,                 ::cDirectory ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER File(); oClass:AddInline( "File", {|Self, cValue | ( ( Self ) ), ( if( !empty( cValue ), ::cFile             := cValue,                 ::cFile ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cDate(); oClass:AddInline( "cDate", {|Self, dValue | ( ( Self ) ), ( if( !empty( dValue ), ::cDate             := DateToString( dValue ), ::cDate ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFullFile(); oClass:AddInline( "cFullFile", {|Self | ( ( Self ) ), ( ::cDirectory + "\" + ::cFile ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Render(); oClass:AddMethod( "Render", @EnlaceA3_Render(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AutoRender(); oClass:AddMethod( "AutoRender", @EnlaceA3_AutoRender(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER RenderCabeceraFactura(); oClass:AddMethod( "RenderCabeceraFactura", @EnlaceA3_RenderCabeceraFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER RenderVentaFactura(); oClass:AddMethod( "RenderVentaFactura", @EnlaceA3_RenderVentaFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER RenderReciboFactura(); oClass:AddMethod( "RenderReciboFactura", @EnlaceA3_RenderReciboFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER RenderApuntesSinIVA(); oClass:AddMethod( "RenderApuntesSinIVA", @EnlaceA3_RenderApuntesSinIVA(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GenerateFile(); oClass:AddMethod( "GenerateFile", @EnlaceA3_GenerateFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER WriteASCII(); oClass:AddMethod( "WriteASCII", @EnlaceA3_WriteASCII(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER WriteInfo(); oClass:AddInline( "WriteInfo", {|Self, oTree, cInfo | ( ( Self ) ), ( oTree:Select( oTree:Add( cInfo, 1 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Signo( nImporte); oClass:AddMethod( "Signo", @EnlaceA3_Signo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Porcentaje( nPorcentaje); oClass:AddMethod( "Porcentaje", @EnlaceA3_Porcentaje(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER appendBuffer(); oClass:AddInline( "appendBuffer", {|Self, cValue | ( ( Self ) ), ( ::cBuffer   += cValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TipoFormato(); oClass:AddInline( "TipoFormato", {|Self | ( ( Self ) ), ( ::appendBuffer( "3" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Empresa(); oClass:AddInline( "Empresa", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "Empresa" ], 5 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER FechaApunte(); oClass:AddInline( "FechaApunte", {|Self | ( ( Self ) ), ( ::appendBuffer( dtos( ::hAsiento[ "Fecha"] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER TipoRegistro(); oClass:AddInline( "TipoRegistro", {|Self | ( ( Self ) ), ( ::appendBuffer( if( hhaskey( ::hAsiento, "TipoRegistro" ), ::hAsiento[ "TipoRegistro" ], "0" ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER TipoImporte(); oClass:AddInline( "TipoImporte", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "TipoImporte" ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER FechaFactura(); oClass:AddInline( "FechaFactura", {|Self | ( ( Self ) ), ( ::appendBuffer( dtos( ::hAsiento[ "FechaFactura"] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER NumeroFactura(); oClass:AddInline( "NumeroFactura", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "NumeroFactura" ], 10 ) )  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER DescripcionApunte(); oClass:AddInline( "DescripcionApunte", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "DescripcionApunte" ], 30 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Importe(); oClass:AddInline( "Importe", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Signo( ::hAsiento[ "Importe" ] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Reserva(); oClass:AddInline( "Reserva", {|Self, nSpace | ( ( Self ) ), ( ::appendBuffer( space( nSpace ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER NIF(); oClass:AddInline( "NIF", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( trimNif( ::hAsiento[ "Nif" ] ), 14 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER NombreCliente(); oClass:AddInline( "NombreCliente", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "NombreCliente" ], 40 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CodigoPostal(); oClass:AddInline( "CodigoPostal", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "CodigoPostal" ], 5 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FechaOperacion(); oClass:AddInline( "FechaOperacion", {|Self | ( ( Self ) ), ( ::appendBuffer( dtos( ::hAsiento[ "FechaOperacion"] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER FechaFactura(); oClass:AddInline( "FechaFactura", {|Self | ( ( Self ) ), ( ::appendBuffer( dtos( ::hAsiento[ "FechaFactura"] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Fecha(); oClass:AddInline( "Fecha", {|Self | ( ( Self ) ), ( ::appendBuffer( dtos( ::hAsiento[ "Fecha" ] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Moneda(); oClass:AddInline( "Moneda", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "Moneda" ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Cuenta(); oClass:AddInline( "Cuenta", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "Cuenta" ], 12 ) )  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CuentaTesoreria(); oClass:AddInline( "CuentaTesoreria", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "CuentaTesoreria" ], 12 ) )  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DescripcionCuenta(); oClass:AddInline( "DescripcionCuenta", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "DescripcionCuenta" ], 30 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SubtipoFactura(); oClass:AddInline( "SubtipoFactura", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "SubtipoFactura" ] )  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER BaseImponible(); oClass:AddInline( "BaseImponible", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Signo( ::hAsiento[ "BaseImponible" ] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER PorcentajeIVA(); oClass:AddInline( "PorcentajeIVA", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Porcentaje( ::hAsiento[ "PorcentajeIVA" ], 5, 2 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CuotaIVA(); oClass:AddInline( "CuotaIVA", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Signo( ::hAsiento[ "BaseImponible" ] * ::hAsiento[ "PorcentajeIVA" ] / 100 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PorcentajeRecargo(); oClass:AddInline( "PorcentajeRecargo", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Porcentaje( ::hAsiento[ "PorcentajeRecargo" ], 5, 2 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CuotaRecargo(); oClass:AddInline( "CuotaRecargo", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Signo( ::hAsiento[ "BaseImponible" ] * ::hAsiento[ "PorcentajeRecargo" ] / 100 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PorcentajeRetencion(); oClass:AddInline( "PorcentajeRetencion", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Porcentaje( ::hAsiento[ "PorcentajeRetencion" ], 5, 2 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CuotaRetencion(); oClass:AddInline( "CuotaRetencion", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Signo( ::hAsiento[ "BaseImponible" ] * ::hAsiento[ "PorcentajeRetencion" ] / 100 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Impreso(); oClass:AddInline( "Impreso", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "Impreso" ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SujetaIVA(); oClass:AddInline( "SujetaIVA", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "SujetaIVA" ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Modelo415(); oClass:AddInline( "Modelo415", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "Modelo415" ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Analitico(); oClass:AddInline( "Analitico", {|Self | ( ( Self ) ), ( ::appendBuffer( if( hhaskey( ::hAsiento, "Analitico" ), ::hAsiento[ "Analitico" ], space( 1 ) ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TipoFacturaVenta(); oClass:AddInline( "TipoFacturaVenta", {|Self | ( ( Self ) ), ( ::appendBuffer( "1" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER TipoFacturaCompras(); oClass:AddInline( "TipoFacturaCompras", {|Self | ( ( Self ) ), ( ::appendBuffer( "2" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER TipoFacturaBienes(); oClass:AddInline( "TipoFacturaBienes", {|Self | ( ( Self ) ), ( ::appendBuffer( "3" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Generado(); oClass:AddInline( "Generado", {|Self | ( ( Self ) ), ( ::appendBuffer( "N" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FechaVencimiento(); oClass:AddInline( "FechaVencimiento", {|Self | ( ( Self ) ), ( ::appendBuffer( dtos( ::hAsiento[ "FechaVencimiento"] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER TipoVencimiento(); oClass:AddInline( "TipoVencimiento", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "TipoVencimiento" ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER DescripcionVencimiento(); oClass:AddInline( "DescripcionVencimiento", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "DescripcionVencimiento" ], 30 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ImporteVencimiento(); oClass:AddInline( "ImporteVencimiento", {|Self | ( ( Self ) ), ( ::appendBuffer( ::Signo( ::hAsiento[ "ImporteVencimiento" ] ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER NumeroVencimiento(); oClass:AddInline( "NumeroVencimiento", {|Self | ( ( Self ) ), ( ::appendBuffer( str( ::hAsiento[ "NumeroVencimiento" ], 2 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER FormaPago(); oClass:AddInline( "FormaPago", {|Self | ( ( Self ) ), ( ::appendBuffer( ::hAsiento[ "FormaPago" ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Referencia(); oClass:AddInline( "Referencia", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "Concepto" ], 10 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ReferenciaDocumento(); oClass:AddInline( "ReferenciaDocumento", {|Self | ( ( Self ) ), ( ::appendBuffer( padr( ::hAsiento[ "ReferenciaDocumento" ], 10 ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LineaApunte(); oClass:AddInline( "LineaApunte", {|Self | ( ( Self ) ), ( ::appendBuffer( if( hb_enumindex() == 1, "I", if( hb_enumindex() > 1 .AND. hb_enumindex() < len( ::aAsiento ), "M", "U" ) ) )    ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FinLinea(); oClass:AddInline( "FinLinea", {|Self | ( ( Self ) ), ( ::appendBuffer( Chr(13)+Chr(10) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EnlaceA3 ;



   static FUNCTION EnlaceA3_New( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      if empty( cRutCnt() )
         ::cDirectory                     := "C:\ENLACEA3"
      else
         ::cDirectory                     := cRutCnt()
      end
      ::cFile                             := "SUENLACE.DAT"

      ::aAsiento                          := {}
      ::cDate                             := DateToString()
      ::cBuffer                           := ""

   RETURN ( Self )



   static FUNCTION EnlaceA3_getInstance( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      if empty( ::oInstance )
         ::oInstance                      := ::New()
      end

   RETURN ( ::oInstance )



   static FUNCTION EnlaceA3_Render( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      local hAsiento

      for each hAsiento in ::aAsiento

         ::hAsiento     := hAsiento

         do case
            case hAsiento[ "Render" ] == "CabeceraFactura"
               ::RenderCabeceraFactura()
            case hAsiento[ "Render" ] == "VentaFactura"
               ::RenderVentaFactura()
            case hAsiento[ "Render" ] == "ReciboFactura"
               ::RenderReciboFactura()
            case hAsiento[ "Render" ] == "ApuntesSinIVA"
               ::RenderApuntesSinIVA()
         end

      next

      ::aAsiento        := {}

   RETURN ( Self )



   static FUNCTION EnlaceA3_RenderCabeceraFactura( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      ::TipoFormato()
      ::Empresa()
      ::FechaApunte()
      ::TipoRegistro( 1 )
      ::Cuenta()
      ::DescripcionCuenta()
      ::TipoFacturaVenta()
      ::NumeroFactura()
      ::LineaApunte()
      ::DescripcionApunte()
      ::Importe()
      ::Reserva( 62 )
      ::NIF()
      ::NombreCliente()
      ::CodigoPostal()
      ::Reserva( 2 )
      ::FechaOperacion()
      ::FechaOperacion()
      ::Moneda()
      ::Generado()

      ::FinLinea()

   Return ( Self )



   static FUNCTION EnlaceA3_RenderVentaFactura( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      ::TipoFormato()
      ::Empresa()
      ::FechaApunte()
      ::TipoRegistro()
      ::Cuenta()
      ::DescripcionCuenta()
      ::TipoImporte()
      ::NumeroFactura()
      ::LineaApunte()
      ::DescripcionApunte()
      ::SubtipoFactura()
      ::BaseImponible()
      ::PorcentajeIVA()
      ::CuotaIVA()
      ::PorcentajeRecargo()
      ::CuotaRecargo()
      ::PorcentajeRetencion()
      ::CuotaRetencion()
      ::Impreso()
      ::SujetaIVA()
      ::Modelo415()
      ::Reserva( 75 )
      ::Analitico()
      ::Moneda()
      ::Generado()

      ::FinLinea()

   Return ( Self )



   static FUNCTION EnlaceA3_RenderReciboFactura( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      ::TipoFormato()
      ::Empresa()
      ::FechaVencimiento()
      ::TipoRegistro()
      ::Cuenta()
      ::DescripcionCuenta()
      ::TipoVencimiento()
      ::NumeroFactura()
      ::Reserva( 1 )
      ::DescripcionVencimiento()
      ::ImporteVencimiento()
      ::FechaFactura()
      ::CuentaTesoreria()
      ::FormaPago()
      ::NumeroVencimiento()
      ::Reserva( 115 )
      ::Moneda()
      ::Generado()

      ::FinLinea()

   Return ( Self )



   static FUNCTION EnlaceA3_RenderApuntesSinIVA( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      ::TipoFormato()
      ::Empresa()
      ::Fecha()
      ::TipoRegistro()
      ::Cuenta()
      ::DescripcionCuenta()
      ::TipoImporte()
      ::ReferenciaDocumento()
      ::LineaApunte()
      ::DescripcionApunte()
      ::Importe()
      ::Reserva( 138 )
      ::Analitico()
      ::Moneda()
      ::Generado()

      ::FinLinea()

   Return ( Self )



   static FUNCTION EnlaceA3_Signo( nImporte ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      if nImporte == 0
         Return ( space( 14 ) )
      end

   RETURN ( if( nImporte > 0, "+", "-" ) + strzero( abs( nImporte ), 13, 2 ) )



   static FUNCTION EnlaceA3_Porcentaje( nPorcentaje ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      if nPorcentaje == 0
         Return ( space( 5 ) )
      end

   RETURN ( strzero( ::hAsiento[ "PorcentajeIVA" ], 5, 2 ) )



   static FUNCTION EnlaceA3_GenerateFile( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      ferase( ::cFullFile() )

      ::hFile        := fCreate( ::cFullFile() )

   RETURN ( Self )



   static FUNCTION EnlaceA3_WriteASCII( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

      ferase( ::cFullFile() )

      if !file( ::cFullFile() ) .OR. empty( ::hFile )
         ::hFile     := fCreate( ::cFullFile() )
      end

      if !empty( ::hFile )

         fWrite( ::hFile, ::cBuffer )
         fClose( ::hFile )

         ::cBuffer   := ""




         if apoloMsgNoYes( "Proceso de exportación realizado con éxito" + Chr(13)+Chr(10) +  "en fichero " + ( ::cFullFile() )            + Chr(13)+Chr(10) +  "¿ Desea abrir el fichero resultante ?", "Elija una opción." )
            shellExecute( 0, "open", ( ::cDirectory + "\" + ::cFile ), , , 1 )
         end

         Return .T.

      end

   Return ( .F. )



   static FUNCTION EnlaceA3_AutoRender( ) ; local Self AS CLASS EnlaceA3 := QSelf() AS CLASS EnlaceA3

   Return ( Self )







_HB_CLASS EnlaceSage ; function EnlaceSage ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EnlaceSage", iif( .F., { }, { @HBObject() } ), @EnlaceSage() ) ) ;

   _HB_MEMBER { oInstance } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInstance"}, .F. )

   _HB_MEMBER { cBuffer } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBuffer"}, .F. )
   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )
   _HB_MEMBER { oTree } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTree"}, .F. )

   _HB_MEMBER { cConector } ; oClass:AddMultiData(, ";", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConector"}, .F. )

   _HB_MEMBER { nContadorLinea } ; oClass:AddMultiData(, 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nContadorLinea"}, .F. )
   _HB_MEMBER { nContadorAsiento } ; oClass:AddMultiData(, 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nContadorAsiento"}, .F. )

   _HB_MEMBER { cDirectory } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDirectory"}, .F. )
   _HB_MEMBER { cFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFile"}, .F. )

   _HB_MEMBER { cFullFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFullFile"}, .F. )
   _HB_MEMBER { hFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hFile"}, .F. )

   _HB_MEMBER { aTotales } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotales"}, .F. )
   _HB_MEMBER { aTotalesIva } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotalesIva"}, .F. )

   _HB_MEMBER { SubCtaVtaIva21 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva21"}, .F. )
   _HB_MEMBER { SubCtaVtaIva10 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva10"}, .F. )
   _HB_MEMBER { SubCtaVtaIva4 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva4"}, .F. )
   _HB_MEMBER { SubCtaVtaIva0 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva0"}, .F. )
   _HB_MEMBER { SubCtaVtaIvaRe21 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIvaRe21"}, .F. )
   _HB_MEMBER { SubCtaVtaIvaRe10 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIvaRe10"}, .F. )
   _HB_MEMBER { SubCtaVtaIvaRe4 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIvaRe4"}, .F. )
   _HB_MEMBER { SubCtaVtaIvaRe0 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIvaRe0"}, .F. )
   _HB_MEMBER { SubCtaVtaIva2 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva2"}, .F. )
   _HB_MEMBER { SubCtaVtaIvaRe2 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIvaRe2"}, .F. )
   _HB_MEMBER { SubCtaVtaIva75 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva75"}, .F. )
   _HB_MEMBER { SubCtaVtaIvaRe75 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIvaRe75"}, .F. )
   _HB_MEMBER { SubCtaVtaIva5 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva5"}, .F. )
   _HB_MEMBER { SubCtaVtaIvaRe5 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIvaRe5"}, .F. )
   _HB_MEMBER { SubCtaCaja } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaCaja"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @EnlaceSage_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetInstance(); oClass:AddMethod( "GetInstance", @EnlaceSage_GetInstance(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyInstance(); oClass:AddInline( "destroyInstance", {|Self | ( ( Self ) ), ( ::oInstance := nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ContabilizaFacturaCliente(); oClass:AddMethod( "ContabilizaFacturaCliente", @EnlaceSage_ContabilizaFacturaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addAsientos(); oClass:AddMethod( "addAsientos", @EnlaceSage_addAsientos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addDebe(); oClass:AddMethod( "addDebe", @EnlaceSage_addDebe(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addHaber(); oClass:AddMethod( "addHaber", @EnlaceSage_addHaber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addIva(); oClass:AddMethod( "addIva", @EnlaceSage_addIva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addRe(); oClass:AddMethod( "addRe", @EnlaceSage_addRe(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addCobrosHaber(); oClass:AddMethod( "addCobrosHaber", @EnlaceSage_addCobrosHaber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addCobrosDebe(); oClass:AddMethod( "addCobrosDebe", @EnlaceSage_addCobrosDebe(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CuentaIva( nIva); oClass:AddMethod( "CuentaIva", @EnlaceSage_CuentaIva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CuentaRe( nIva); oClass:AddMethod( "CuentaRe", @EnlaceSage_CuentaRe(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER changeState(); oClass:AddMethod( "changeState", @EnlaceSage_changeState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER WriteASCII(); oClass:AddMethod( "WriteASCII", @EnlaceSage_WriteASCII(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cFullFile(); oClass:AddInline( "cFullFile", {|Self | ( ( Self ) ), ( ::cDirectory + "\" + ::cFile ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeTree(); oClass:AddInline( "writeTree", {|Self, cText, nState | ( ( Self ) ), ( ::oTree:Select( ::oTree:Add( cText, nState ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cNumero(); oClass:AddInline( "cNumero", {|Self | ( ( Self ) ), ( ( D():FacturasClientes( ::nView ) )->cSerie + "/" + AllTrim( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cFormatoImporte(); oClass:AddMethod( "cFormatoImporte", @EnlaceSage_cFormatoImporte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFormatoPorcentaje(); oClass:AddMethod( "cFormatoPorcentaje", @EnlaceSage_cFormatoPorcentaje(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddCabecera(); oClass:AddMethod( "AddCabecera", @EnlaceSage_AddCabecera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EnlaceSage ;



static FUNCTION EnlaceSage_New( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   if empty( cRutCnt() )
      ::cDirectory      := "C:\ENLACESAGE"
   else
      ::cDirectory      := cRutCnt()
   end

   ::cFile              := "FacturasClientes.csv"

   ::SubCtaVtaIva21     := "4770021"
   ::SubCtaVtaIvaRe21   := "4775221"
   ::SubCtaVtaIva10     := "4770010"
   ::SubCtaVtaIvaRe10   := "4771410"
   ::SubCtaVtaIva4      := "4770004"
   ::SubCtaVtaIvaRe4    := "4770504"
   ::SubCtaVtaIva0      := "4770000"
   ::SubCtaVtaIvaRe0    := "4770099"
   ::SubCtaVtaIva2      := "4770002"
   ::SubCtaVtaIvaRe2    := "4770226"
   ::SubCtaVtaIva75     := "4770075"
   ::SubCtaVtaIvaRe75   := "4770750"
   ::SubCtaVtaIva5      := "4770005"
   ::SubCtaVtaIvaRe5    := "4770562"
   ::SubCtaCaja         := "4310000"
   ::cBuffer            := ""

   ::nContadorAsiento  := 1

   ::AddCabecera()

RETURN ( Self )



static FUNCTION EnlaceSage_GetInstance( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   if empty( ::oInstance )
      ::oInstance       := ::New()
   end

RETURN ( ::oInstance )



static FUNCTION EnlaceSage_ContabilizaFacturaCliente( nView, oTree ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   ::nView              := nView
   ::oTree              := oTree

   if ( D():FacturasClientes( ::nView ) )->lContab
      ::writeTree( "Factura anteriormente contabilizada : " + ::cNumero(), 0 )
      Return ( Self )
   end

   ::addAsientos()

   ::changeState()

RETURN ( Self )



static FUNCTION EnlaceSage_addAsientos( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   ::nContadorLinea     := 1







   ::aTotales           := aTotFacCli( ( D():FacturasClientes( ::nView ) )->cSerie + Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) + ( D():FacturasClientes( ::nView ) )->cSufFac, D():FacturasClientes( ::nView ), D():FacturasClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasClientesCobros( ::nView ), D():AnticiposClientes( ::nView ) )

   ::aTotalesIva        := ::aTotales[8]

   ::addDebe()
   ::addHaber()
   ::addIva()

   if ( D():FacturasClientes( ::nView ) )->lRecargo
      ::addRe()
   end

   ::addCobrosHaber()
   ::addCobrosDebe()

   ::nContadorAsiento ++

RETURN ( Self )



static FUNCTION EnlaceSage_addDebe( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   ::cBuffer   += cCodEmpCnt( "A" ) + ::cConector
   ::cBuffer   += AllTrim( Str( Year( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorAsiento ) + ::cConector
   ::cBuffer   += "D" + ::cConector
   ::cBuffer   += if( Empty( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), AllTrim( ( D():FacturasClientes( ::nView ) )->cCodCli ), AllTrim( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ) ) + ::cConector
   ::cBuffer   += Padr( AllTrim( cCliCtaVta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), 7, "0" ) + ::cConector
   ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "N/F." + AllTrim( ::cNumero() ) + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 4 ] ) + ::cConector
   ::cBuffer   += "100" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += AllTrim( Str( Month( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorLinea ) + ::cConector
   ::cBuffer   += AllTrim( Str( Year( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += ( D():FacturasClientes( ::nView ) )->cSerie + ::cConector
   ::cBuffer   += AllTrim( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) ) + ::cConector
   ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
   ::cBuffer   += "E" + ::cConector
   ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 1 .AND. hGet( ::aTotalesIva[ 1 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 1 ], "neto" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 2 .AND. hGet( ::aTotalesIva[ 2 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 2 ], "neto" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 3 .AND. hGet( ::aTotalesIva[ 3 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 3 ], "neto" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 1 .AND. hGet( ::aTotalesIva[ 1 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 1 ], "impiva" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 2 .AND. hGet( ::aTotalesIva[ 2 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 2 ], "impiva" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 3 .AND. hGet( ::aTotalesIva[ 3 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 3 ], "impiva" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 1 .AND. hGet( ::aTotalesIva[ 1 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 1 ], "porcentajeiva" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 2 .AND. hGet( ::aTotalesIva[ 2 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 2 ], "porcentajeiva" ) ), "0" ) + ::cConector
   ::cBuffer   += if( ( len( ::aTotalesIva ) >= 3 .AND. hGet( ::aTotalesIva[ 3 ], "porcentajeiva" ) <> nil ), ::cFormatoImporte( hGet( ::aTotalesIva[ 3 ], "porcentajeiva" ) ), "0" ) + ::cConector









   ::cBuffer   += dtoc( GetSysDate() )  + ::cConector
   ::cBuffer   += AllTrim( ( D():FacturasClientes( ::nView ) )->cDniCli ) + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 4 ] ) + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 12 ] ) + ::cConector
   ::cBuffer   += AllTrim( ( D():FacturasClientes( ::nView ) )->cNomCli ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 1 ] ) + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 3 ] ) + ::cConector
   ::cBuffer   += if( len( ::aTotalesIva ) >= 1 .AND. ( D():FacturasClientes( ::nView ) )->lRecargo .AND. hGet( ::aTotalesIva[ 1 ], "porcentajere" ) <> nil, ::cFormatoPorcentaje( hGet( ::aTotalesIva[ 1 ], "porcentajere" ) ), "0" ) + ::cConector
   ::cBuffer   += if( len( ::aTotalesIva ) >= 2 .AND. ( D():FacturasClientes( ::nView ) )->lRecargo .AND. hGet( ::aTotalesIva[ 2 ], "porcentajere" ) <> nil, ::cFormatoPorcentaje( hGet( ::aTotalesIva[ 2 ], "porcentajere" ) ), "0" ) + ::cConector
   ::cBuffer   += if( len( ::aTotalesIva ) >= 3 .AND. ( D():FacturasClientes( ::nView ) )->lRecargo .AND. hGet( ::aTotalesIva[ 3 ], "porcentajere" ) <> nil, ::cFormatoPorcentaje( hGet( ::aTotalesIva[ 3 ], "porcentajere" ) ), "0" ) + ::cConector



   ::cBuffer   += "0" + Chr(13)+Chr(10)

   ::nContadorLinea ++

RETURN ( Self )



static FUNCTION EnlaceSage_addHaber( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   ::cBuffer   += cCodEmpCnt( "A" ) + ::cConector
   ::cBuffer   += AllTrim( Str( Year( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorAsiento ) + ::cConector
   ::cBuffer   += "H" + ::cConector
   ::cBuffer   += Padr( AllTrim( cCliCtaVta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), 7, "0" ) + ::cConector
   ::cBuffer   += if( Empty( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), AllTrim( ( D():FacturasClientes( ::nView ) )->cCodCli ), AllTrim( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ) ) + ::cConector
   ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "N/F." + AllTrim( ::cNumero() ) + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 1 ] ) + ::cConector
   ::cBuffer   += "100" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += AllTrim( Str( Month( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorLinea ) + ::cConector
   ::cBuffer   += "0" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += dtoc( GetSysDate() ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + Chr(13)+Chr(10)

   ::nContadorLinea ++

RETURN ( Self )



static FUNCTION EnlaceSage_addCobrosHaber( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   ::cBuffer   += cCodEmpCnt( "A" ) + ::cConector
   ::cBuffer   += AllTrim( Str( Year( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorAsiento ) + ::cConector
   ::cBuffer   += "H" + ::cConector
   ::cBuffer   += if( Empty( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), AllTrim( ( D():FacturasClientes( ::nView ) )->cCodCli ), AllTrim( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ) ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "RECIBO N/F." + AllTrim( ::cNumero() ) + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 4 ] ) + ::cConector
   ::cBuffer   += "100" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += AllTrim( Str( Month( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorLinea ) + ::cConector
   ::cBuffer   += "0" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += dtoc( GetSysDate() ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + Chr(13)+Chr(10)

   ::nContadorLinea ++

RETURN ( Self )



static FUNCTION EnlaceSage_addCobrosDebe( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   ::cBuffer   += cCodEmpCnt( "A" ) + ::cConector
   ::cBuffer   += AllTrim( Str( Year( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorAsiento ) + ::cConector
   ::cBuffer   += "D" + ::cConector
   ::cBuffer   += ::SubCtaCaja + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "RECIBO N/F." + AllTrim( ::cNumero() ) + ::cConector
   ::cBuffer   += ::cFormatoImporte( ::aTotales[ 4 ] ) + ::cConector
   ::cBuffer   += "100" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += AllTrim( Str( Month( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
   ::cBuffer   += Str( ::nContadorLinea ) + ::cConector
   ::cBuffer   += "0" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += dtoc( GetSysDate() ) + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + ::cConector
   ::cBuffer   += "" + Chr(13)+Chr(10)

   ::nContadorLinea ++

RETURN ( Self )



static FUNCTION EnlaceSage_addIva( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   local aIva

   for each aIva in ::aTotalesIva


      if hGet( aIva, "porcentajeiva" ) <> nil

         ::cBuffer   += cCodEmpCnt( "A" ) + ::cConector
         ::cBuffer   += AllTrim( Str( Year( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
         ::cBuffer   += Str( ::nContadorAsiento ) + ::cConector
         ::cBuffer   += "H" + ::cConector
         ::cBuffer   += ::CuentaIva( hget( aIva, "porcentajeiva" ) ) + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "N/F." + AllTrim( ::cNumero() ) + ::cConector
         ::cBuffer   += ::cFormatoImporte( hGet( aIva, "impiva" ) ) + ::cConector
         ::cBuffer   += "100" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += AllTrim( Str( Month( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
         ::cBuffer   += Str( ::nContadorLinea ) + ::cConector
         ::cBuffer   += "0" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += dtoc( GetSysDate() ) + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + Chr(13)+Chr(10)

         ::nContadorLinea ++

      end

   next

RETURN ( Self )



static FUNCTION EnlaceSage_addRe( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   local aIva

   for each aIva in ::aTotalesIva


      if hGet( aIva, "porcentajeiva" ) <> nil

         ::cBuffer   += cCodEmpCnt( "A" ) + ::cConector
         ::cBuffer   += AllTrim( Str( Year( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
         ::cBuffer   += Str( ::nContadorAsiento ) + ::cConector
         ::cBuffer   += "H" + ::cConector
         ::cBuffer   += ::CuentaRe( hget( aIva, "porcentajeiva" ) ) + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ) + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "N/F." + AllTrim( ::cNumero() ) + ::cConector
         ::cBuffer   += ::cFormatoImporte( hGet( aIva, "impre" ) ) + ::cConector
         ::cBuffer   += "100" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += AllTrim( Str( Month( ( D():FacturasClientes( ::nView ) )->dFecFac ) ) ) + ::cConector
         ::cBuffer   += Str( ::nContadorLinea ) + ::cConector
         ::cBuffer   += "0" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += dtoc( GetSysDate() ) + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + ::cConector
         ::cBuffer   += "" + Chr(13)+Chr(10)

         ::nContadorLinea ++

      end

   next

RETURN ( Self )



static FUNCTION EnlaceSage_CuentaIva( nIva ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   local cSubCta := ""

      do case
         case nIva == 21
            if !( D():FacturasClientes( ::nView ) )->lRecargo
               cSubCta  := ::SubCtaVtaIva21
            else
               cSubCta  := ::SubCtaVtaIvaRe21
            end

         case nIva == 10

            if !( D():FacturasClientes( ::nView ) )->lRecargo
               cSubCta  := ::SubCtaVtaIva10
            else
               cSubCta  := ::SubCtaVtaIvaRe10
            end

         case nIva == 4

            if !( D():FacturasClientes( ::nView ) )->lRecargo
               cSubCta  := ::SubCtaVtaIva4
            else
               cSubCta  := ::SubCtaVtaIvaRe4
            end

         case nIva == 0

            if !( D():FacturasClientes( ::nView ) )->lRecargo
               cSubCta  := ::SubCtaVtaIva0
            else
               cSubCta  := ::SubCtaVtaIvaRe0
            end

         case nIva == 2

            if !( D():FacturasClientes( ::nView ) )->lRecargo
               cSubCta  := ::SubCtaVtaIva2
            else
               cSubCta  := ::SubCtaVtaIvaRe2
            end

         case nIva == 7.5

            if !( D():FacturasClientes( ::nView ) )->lRecargo
               cSubCta  := ::SubCtaVtaIva75
            else
               cSubCta  := ::SubCtaVtaIvaRe75
            end

         case nIva == 5

            if !( D():FacturasClientes( ::nView ) )->lRecargo
               cSubCta  := ::SubCtaVtaIva5
            else
               cSubCta  := ::SubCtaVtaIvaRe5
            end

      end

RETURN ( cSubCta )



static FUNCTION EnlaceSage_CuentaRe( nIva ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   local cSubCta := ""

      do case
         case nIva == 21
               cSubCta  := "4750052"

         case nIva == 10
               cSubCta  := "4750014"

         case nIva == 4
               cSubCta  := "4750050"

         case nIva == 0
               cSubCta  := "4750099"

         case nIva == 2
               cSubCta  := "4750026"

         case nIva == 7.5
               cSubCta  := "4750751"

         case nIva == 5
               cSubCta  := "4750062"

      end

RETURN ( cSubCta )



static FUNCTION EnlaceSage_cFormatoImporte( nImporte ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   local cImporte    := ""

   cImporte          := AllTrim( Trans( nImporte, cPorDiv() ) )
   cImporte          := StrTran( cImporte, ".", "" )

RETURN ( cImporte )



static FUNCTION EnlaceSage_cFormatoPorcentaje( nPorcentaje ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   local cPorcentaje    := ""

   cPorcentaje          := AllTrim( Trans( nPorcentaje, "@E 999.99" ) )
   cPorcentaje          := StrTran( cPorcentaje, ".", "" )

RETURN ( cPorcentaje )



static FUNCTION EnlaceSage_changeState( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   if dbLock( ( D():FacturasClientes( ::nView ) ) )
      ( D():FacturasClientes( ::nView ) )->lContab    := .T.
      ( D():FacturasClientes( ::nView ) )->( dbUnLock() )
   end

RETURN ( Self )



static FUNCTION EnlaceSage_WriteASCII( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   if Empty( ::cBuffer )
      Return ( .F. )
   end

   ferase( ::cFullFile() )

   if !file( ::cFullFile() ) .OR. empty( ::hFile )
      ::hFile     := fCreate( ::cFullFile() )
   end

   if !empty( ::hFile )

      fWrite( ::hFile, ::cBuffer )
      fClose( ::hFile )

      ::cBuffer   := ""




      if apoloMsgNoYes( "Proceso de exportaciÃ³n realizado con Ã©xito" + Chr(13)+Chr(10) +  "en fichero " + ( ::cFullFile() )            + Chr(13)+Chr(10) +  "Â¿ Desea abrir el fichero resultante ?", "Elija una opciÃ³n." )
         shellExecute( 0, "open", ( ::cDirectory + "\" + ::cFile ), , , 1 )
      end

      Return .T.

   end

Return ( .F. )



static FUNCTION EnlaceSage_AddCabecera( ) ; local Self AS CLASS EnlaceSage := QSelf() AS CLASS EnlaceSage

   ::cBuffer   += "CodigoEmpresa" + ::cConector
   ::cBuffer   += "Ejercicio" + ::cConector
   ::cBuffer   += "Asiento" + ::cConector
   ::cBuffer   += "CargoAbono" + ::cConector
   ::cBuffer   += "CodigoCuenta" + ::cConector
   ::cBuffer   += "Contrapartida" + ::cConector
   ::cBuffer   += "Fechaasiento" + ::cConector
   ::cBuffer   += "TipoDocumento" + ::cConector
   ::cBuffer   += "DocumentoConta" + ::cConector
   ::cBuffer   += "Comentario" + ::cConector
   ::cBuffer   += "ImporteAsiento" + ::cConector
   ::cBuffer   += "CodigoDiario" + ::cConector
   ::cBuffer   += "CodigoCanal" + ::cConector
   ::cBuffer   += "NumeroPeriodo" + ::cConector
   ::cBuffer   += "OrdenMovimientos" + ::cConector
   ::cBuffer   += "EjercicioFactura" + ::cConector
   ::cBuffer   += "SerieFactura" + ::cConector
   ::cBuffer   += "NumeroFactura" + ::cConector
   ::cBuffer   += "FechaFactura" + ::cConector
   ::cBuffer   += "TipoFactura" + ::cConector
   ::cBuffer   += "FechaOperacion" + ::cConector
   ::cBuffer   += "SuFacturaNo" + ::cConector
   ::cBuffer   += "BaseIva1" + ::cConector
   ::cBuffer   += "BaseIva2" + ::cConector
   ::cBuffer   += "BaseIva3" + ::cConector
   ::cBuffer   += "CuotaIva1" + ::cConector
   ::cBuffer   += "CuotaIva2" + ::cConector
   ::cBuffer   += "CuotaIva3" + ::cConector
   ::cBuffer   += "PorIva1" + ::cConector
   ::cBuffer   += "PorIva2" + ::cConector
   ::cBuffer   += "PorIva3" + ::cConector
   ::cBuffer   += "FechaGrabacion" + ::cConector
   ::cBuffer   += "CifDNI" + ::cConector
   ::cBuffer   += "ImporteFactura" + ::cConector
   ::cBuffer   += "ImporteRetencion" + ::cConector
   ::cBuffer   += "Nombre" + ::cConector
   ::cBuffer   += "CodigoCuentaFactura" + ::cConector
   ::cBuffer   += "LibreA1" + ::cConector
   ::cBuffer   += "Base Recargo" + ::cConector
   ::cBuffer   += "Cuota Recargo" + ::cConector
   ::cBuffer   += "PorRecargoEquivalencia1" + ::cConector
   ::cBuffer   += "PorRecargoEquivalencia2" + ::cConector
   ::cBuffer   += "PorRecargoEquivalencia3" + ::cConector
   ::cBuffer   += "PorRecargoEquivalencia4" + Chr(13)+Chr(10)

Return ( .F. )







_HB_CLASS EnlaceMonitor ; function EnlaceMonitor ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EnlaceMonitor", iif( .F., { }, { @HBObject() } ), @EnlaceMonitor() ) ) ;

   _HB_MEMBER { oInstance } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInstance"}, .F. )

   _HB_MEMBER { cBuffer } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBuffer"}, .F. )
   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )
   _HB_MEMBER { oTree } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTree"}, .F. )

   _HB_MEMBER { cDirectory } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDirectory"}, .F. )
   _HB_MEMBER { cFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFile"}, .F. )

   _HB_MEMBER { cFullFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFullFile"}, .F. )
   _HB_MEMBER { hFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hFile"}, .F. )

   _HB_MEMBER { aTotalFactura } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotalFactura"}, .F. )

   _HB_MEMBER { SubCtaVtaIva21 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva21"}, .F. )
   _HB_MEMBER { SubCtaVtaIva0 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaIva0"}, .F. )
   _HB_MEMBER { SubCtaVtaRe } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaVtaRe"}, .F. )

   _HB_MEMBER { SubCtaPrvIva21 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaPrvIva21"}, .F. )
   _HB_MEMBER { SubCtaPrvIva0 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaPrvIva0"}, .F. )
   _HB_MEMBER { SubCtaPrvRe } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"SubCtaPrvRe"}, .F. )

   _HB_MEMBER { aSubCtaIngresos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSubCtaIngresos"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @EnlaceMonitor_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetInstance(); oClass:AddMethod( "GetInstance", @EnlaceMonitor_GetInstance(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyInstance(); oClass:AddInline( "destroyInstance", {|Self | ( ( Self ) ), ( ::oInstance := nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ContabilizaFacturaCliente(); oClass:AddMethod( "ContabilizaFacturaCliente", @EnlaceMonitor_ContabilizaFacturaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER changeStateFacturaCliente(); oClass:AddMethod( "changeStateFacturaCliente", @EnlaceMonitor_changeStateFacturaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER WriteASCII(); oClass:AddMethod( "WriteASCII", @EnlaceMonitor_WriteASCII(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addFacturaCliente(); oClass:AddMethod( "addFacturaCliente", @EnlaceMonitor_addFacturaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cFullFile(); oClass:AddInline( "cFullFile", {|Self | ( ( Self ) ), ( ::cDirectory + "\" + ::cFile ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeTree(); oClass:AddInline( "writeTree", {|Self, cText, nState | ( ( Self ) ), ( ::oTree:Select( ::oTree:Add( cText, nState ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cNumeroFacturaCliente(); oClass:AddInline( "cNumeroFacturaCliente", {|Self | ( ( Self ) ), ( ( D():FacturasClientes( ::nView ) )->cSerie + Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) + ( D():FacturasClientes( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFormatNumeroFacturaCliente(); oClass:AddInline( "cFormatNumeroFacturaCliente", {|Self | ( ( Self ) ), ( ( D():FacturasClientes( ::nView ) )->cSerie + "/" + AllTrim( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cFormatoImporte(); oClass:AddMethod( "cFormatoImporte", @EnlaceMonitor_cFormatoImporte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFormatoPorcentaje(); oClass:AddMethod( "cFormatoPorcentaje", @EnlaceMonitor_cFormatoPorcentaje(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSubcuentaCliente(); oClass:AddMethod( "getSubcuentaCliente", @EnlaceMonitor_getSubcuentaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSubcuentaRet(); oClass:AddMethod( "getSubcuentaRet", @EnlaceMonitor_getSubcuentaRet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSubCtaIngresosFacturaClientes(); oClass:AddMethod( "getSubCtaIngresosFacturaClientes", @EnlaceMonitor_getSubCtaIngresosFacturaClientes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ContabilizaFacturaProveedor(); oClass:AddMethod( "ContabilizaFacturaProveedor", @EnlaceMonitor_ContabilizaFacturaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cNumeroFacturaProveedor(); oClass:AddInline( "cNumeroFacturaProveedor", {|Self | ( ( Self ) ), ( ( D():FacturasProveedores( ::nView ) )->cSerFac + Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ) + ( D():FacturasProveedores( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFormatNumeroFacturaProveedor(); oClass:AddInline( "cFormatNumeroFacturaProveedor", {|Self | ( ( Self ) ), ( ( D():FacturasProveedores( ::nView ) )->cSerFac + "/" + AllTrim( Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ) ) + "/" + ( D():FacturasProveedores( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSubCtaIngresosFacturaProveedor(); oClass:AddMethod( "getSubCtaIngresosFacturaProveedor", @EnlaceMonitor_getSubCtaIngresosFacturaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addFacturaProveedor(); oClass:AddMethod( "addFacturaProveedor", @EnlaceMonitor_addFacturaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER changeStateFacturaProveedor(); oClass:AddMethod( "changeStateFacturaProveedor", @EnlaceMonitor_changeStateFacturaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSubcuentaProveedor(); oClass:AddMethod( "getSubcuentaProveedor", @EnlaceMonitor_getSubcuentaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EnlaceMonitor ;



static FUNCTION EnlaceMonitor_New( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   if empty( cRutCnt() )
      ::cDirectory                     := "C:\ENLACEMONITOR"
   else
      ::cDirectory                     := cRutCnt()
   end

   ::cFile                             := "ENLACEMONITOR" + dtos( getsysdate() ) + ".MMB"

   ::cBuffer                           := ""
   ::aTotalFactura                     := {}
   ::aSubCtaIngresos                   := {}

   ::SubCtaVtaIva21                    := "4770002100      "
   ::SubCtaVtaIva0                     := "4770888888      "
   ::SubCtaVtaRe                       := "4770005221      "

   ::SubCtaPrvIva21                    := "4720002100      "
   ::SubCtaPrvIva0                     := "4770999991      "
   ::SubCtaPrvRe                       := "4720005221      "

RETURN ( Self )



static FUNCTION EnlaceMonitor_GetInstance( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   if empty( ::oInstance )
      ::oInstance                      := ::New()
   end

RETURN ( ::oInstance )



static FUNCTION EnlaceMonitor_ContabilizaFacturaCliente( nView, oTree ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   ::nView     := nView
   ::oTree     := oTree

   if ( D():FacturasClientes( ::nView ) )->lContab
      ::writeTree( "Factura anteriormente contabilizada : " + ::cFormatNumeroFacturaCliente(), 0 )
      Return ( Self )
   end







   ::aTotalFactura      := aTotFacCli( ::cNumeroFacturaCliente(), D():FacturasClientes( ::nView ), D():FacturasClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasClientesCobros( ::nView ), D():AnticiposClientes( ::nView ) )


   ::getSubCtaIngresosFacturaClientes()

   aEval( ::aSubCtaIngresos, {|h| ::addFacturaCliente( h ) } )

   ::writeTree( "Factura contabilizada : " + ::cFormatNumeroFacturaCliente(), 1 )

   ::changeStateFacturaCliente()

RETURN ( Self )



static FUNCTION EnlaceMonitor_addFacturaCliente( hHash ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   ::cBuffer   += if( len( ::aSubCtaIngresos ) > 1, "VM", "V " )
   ::cBuffer   += padr( dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ), 10 )
   ::cBuffer   += padr( dToc( ( D():FacturasClientes( ::nView ) )->dFecFac ), 10 )
   ::cBuffer   += Space( 10 )
   ::cBuffer   += Padr( ( D():FacturasClientes( ::nView ) )->cSerie + Str( ( D():FacturasClientes( ::nView ) )->nNumFac ), 10 )
   ::cBuffer   += Space( 2 )
   ::cBuffer   += ::getSubcuentaCliente()
   ::cBuffer   += Padr( SubStr( ( D():FacturasClientes( ::nView ) )->cDniCli, 1, 14 ), 14 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasClientes( ::nView ) )->cNomCli, 1, 30 ), 30 )
   ::cBuffer   += Padr( "N/Fcta. N. " + ::cFormatNumeroFacturaCliente(), 40 )
   ::cBuffer   += padr( ::cFormatoImporte( hGet( hHash, "importe" ) ), 15 )
   ::cBuffer   += padr( ::cFormatoPorcentaje( hGet( ::aTotalFactura[8][1], "porcentajeiva" ) ), 5 )
   ::cBuffer   += padr( ::cFormatoImporte( hGet( hHash, "iva" ) ), 15 )
   ::cBuffer   += if( hGet( ::aTotalFactura[8][1], "porcentajeiva" ) == 0, ::SubCtaVtaIva0, ::SubCtaVtaIva21 )
   ::cBuffer   += if( ( D():FacturasClientes( ::nView ) )->lRecargo, padr( ::cFormatoPorcentaje( hGet( ::aTotalFactura[8][1], "porcentajere" ) ), 5 ), Space( 5 ) )
   ::cBuffer   += if( ( D():FacturasClientes( ::nView ) )->lRecargo, padr( ::cFormatoImporte( ::aTotalFactura[ 3 ] ), 15 ), Space( 15 ) )
   ::cBuffer   += if( ( D():FacturasClientes( ::nView ) )->lRecargo, ::SubCtaVtaRe, Space( 16 ) )
   ::cBuffer   += if( ( D():FacturasClientes( ::nView ) )->nPctRet <> 0, padr( ::cFormatoPorcentaje( ( D():FacturasClientes( ::nView ) )->nPctRet ), 5 ), Space( 5 ) )
   ::cBuffer   += if( ( D():FacturasClientes( ::nView ) )->nPctRet <> 0, padr( ::cFormatoImporte( ::aTotalFactura[ 12 ] ), 15 ), Space( 15 ) )
   ::cBuffer   += if( ( D():FacturasClientes( ::nView ) )->nPctRet <> 0, ::getSubcuentaRet(), Space( 16 ) )
   ::cBuffer   += padr( ::cFormatoImporte( ::aTotalFactura[ 4 ] ), 15 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Padr( hGet( hHash, "cuenta" ), 16 )
   ::cBuffer   += padr( ::cFormatoImporte( hGet( hHash, "importe" ) ), 15 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasClientes( ::nView ) )->cDirCli, 1, 30 ), 30 )
   ::cBuffer   += Space( 10 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasClientes( ::nView ) )->cPobCli, 1, 30 ), 30 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasClientes( ::nView ) )->cPrvCli, 1, 30 ), 30 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasClientes( ::nView ) )->cPosCli, 1, 5 ), 5 )
   ::cBuffer   += "N"
   ::cBuffer   += Space( 16 )
   ::cBuffer   += Space( 16 )
   ::cBuffer   += Space( 15 )
   ::cBuffer   += "N"
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 35 )
   ::cBuffer   += "N"
   ::cBuffer   += "N"
   ::cBuffer   += Space( 16 )
   ::cBuffer   += Space( 15 )
   ::cBuffer   += "X"
   ::cBuffer   += Space( 60 )
   ::cBuffer   += Space( 2 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 4 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 144 )

RETURN ( Self )



static FUNCTION EnlaceMonitor_getSubCtaIngresosFacturaClientes( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   local nPos           := 0
   local cCnt           := ""
   local cCuenta        := ""
   local nRecAnt        := ( D():FacturasClientesLineas( ::nView ) )->( Recno() )
   local nOrdAnt        := ( D():FacturasClientesLineas( ::nView ) )->( OrdSetFocus( "nNumFac" ) )

   ::aSubCtaIngresos       := {}

   if ( D():FacturasClientesLineas( ::nView ) )->( dbSeek( ::cNumeroFacturaCliente() ) )


      while ( D():FacturasClientesLineas( ::nView ) )->cSerie + Str( ( D():FacturasClientesLineas( ::nView ) )->nNumFac ) + ( D():FacturasClientesLineas( ::nView ) )->cSufFac == ::cNumeroFacturaCliente() .AND. !( D():FacturasClientesLineas( ::nView ) )->( Eof() )

            if !Empty( ( D():FacturasClientesLineas( ::nView ) )->cRef )

               cCnt           := retCtaVta( ( D():FacturasClientesLineas( ::nView ) )->cRef, .F., D():Articulos( ::nView ) )

               cCuenta        := SubStr( cCnt, 1, 3 ) + "0" + SubStr( cCnt, 4 )

               nPos           := aScan( ::aSubCtaIngresos, {|h| hGet( h, "cuenta" ) == cCuenta } )

               if nPos == 0


                  aAdd( ::aSubCtaIngresos, { "cuenta" => cCuenta, "importe" => nTotLFacCli( D():FacturasClientesLineas( ::nView ) ), "iva" => nIvaLFacCli( D():FacturasClientesLineas( ::nView ) ) } )
               else
                  hSet( ::aSubCtaIngresos[ nPos ], "importe", hGet( ::aSubCtaIngresos[ nPos ], "importe" ) + nTotLFacCli( D():FacturasClientesLineas( ::nView ) ) )
                  hSet( ::aSubCtaIngresos[ nPos ], "iva", hGet( ::aSubCtaIngresos[ nPos ], "iva" ) + nIvaLFacCli( D():FacturasClientesLineas( ::nView ) ) )
               end

            end

            ( D():FacturasClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():FacturasClientesLineas( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientesLineas( ::nView ) )->( dbGoTo( nRecAnt ) )

RETURN ( Self )



static FUNCTION EnlaceMonitor_getSubcuentaCliente( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   local cSubCta := cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) )

RETURN ( Padr( cSubCta, 16 ) )



static FUNCTION EnlaceMonitor_getSubcuentaProveedor( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   local cSubCta := cPrvCta( ( D():FacturasProveedores( ::nView ) )->cCodPrv, D():Proveedores( ::nView ) )

RETURN ( Padr( cSubCta, 16 ) )



static FUNCTION EnlaceMonitor_getSubcuentaRet( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   local cSubCta := cCtaRet()

RETURN ( Padr( cSubCta, 16 ) )



static FUNCTION EnlaceMonitor_ContabilizaFacturaProveedor( nView, oTree ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   ::nView     := nView
   ::oTree     := oTree

   if ( D():FacturasProveedores( ::nView ) )->lContab
      ::writeTree( "Factura anteriormente contabilizada : " + ::cFormatNumeroFacturaProveedor(), 0 )
      Return ( Self )
   end






   ::aTotalFactura      := aTotFacPrv( ::cNumeroFacturaProveedor(), D():FacturasProveedores( ::nView ), D():FacturasProveedoresLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasProveedoresPagos( ::nView ) )


   ::getSubCtaIngresosFacturaProveedor()

   aEval( ::aSubCtaIngresos, {|h| ::addFacturaProveedor( h ) } )

   ::writeTree( "Factura contabilizada : " + ::cFormatNumeroFacturaProveedor(), 1 )

   ::changeStateFacturaProveedor()

RETURN ( Self )



static FUNCTION EnlaceMonitor_getSubCtaIngresosFacturaProveedor( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   local nPos           := 0
   local cCnt           := ""
   local cCuenta        := ""
   local nRecAnt        := ( D():FacturasProveedoresLineas( ::nView ) )->( Recno() )
   local nOrdAnt        := ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( "nNumFac" ) )

   ::aSubCtaIngresos       := {}

   if ( D():FacturasProveedoresLineas( ::nView ) )->( dbSeek( ::cNumeroFacturaProveedor() ) )


      while ( D():FacturasProveedoresLineas( ::nView ) )->cSerFac + Str( ( D():FacturasProveedoresLineas( ::nView ) )->nNumFac ) + ( D():FacturasProveedoresLineas( ::nView ) )->cSufFac == ::cNumeroFacturaProveedor() .AND. !( D():FacturasProveedoresLineas( ::nView ) )->( Eof() )

            if !Empty( ( D():FacturasProveedoresLineas( ::nView ) )->cRef )

               cCnt           := RetCtaCom( ( D():FacturasProveedoresLineas( ::nView ) )->cRef, .F., D():Articulos( ::nView ) )

               cCuenta        := SubStr( cCnt, 1, 3 ) + "0" + SubStr( cCnt, 4 )

               nPos           := aScan( ::aSubCtaIngresos, {|h| hGet( h, "cuenta" ) == cCuenta } )

               if nPos == 0


                  aAdd( ::aSubCtaIngresos, { "cuenta" => cCuenta, "importe" => nTotLFacPrv( D():FacturasProveedoresLineas( ::nView ) ), "iva" => nIvaLFacPrv( D():FacturasProveedoresLineas( ::nView ) ) } )
               else
                  hSet( ::aSubCtaIngresos[ nPos ], "importe", hGet( ::aSubCtaIngresos[ nPos ], "importe" ) + nTotLFacPrv( D():FacturasProveedoresLineas( ::nView ) ) )
                  hSet( ::aSubCtaIngresos[ nPos ], "iva", hGet( ::aSubCtaIngresos[ nPos ], "iva" ) + nIvaLFacPrv( D():FacturasProveedoresLineas( ::nView ) ) )
               end

            end

            ( D():FacturasProveedoresLineas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasProveedoresLineas( ::nView ) )->( dbGoTo( nRecAnt ) )

RETURN ( Self )



static FUNCTION EnlaceMonitor_addFacturaProveedor( hHash ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   ::cBuffer   += if( len( ::aSubCtaIngresos ) > 1, "CM", "C " )
   ::cBuffer   += padr( dToc( ( D():FacturasProveedores( ::nView ) )->dFecEnt ), 10 )
   ::cBuffer   += padr( dToc( ( D():FacturasProveedores( ::nView ) )->dFecFac ), 10 )
   ::cBuffer   += Padr( AllTrim( ( D():FacturasProveedores( ::nView ) )->cNumDoc ), 10 )
   ::cBuffer   += Padr( if( Empty( AllTrim( ( D():FacturasProveedores( ::nView ) )->cSuPed ) ), ( D():FacturasProveedores( ::nView ) )->cSerFac + Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ), AllTrim( ( D():FacturasProveedores( ::nView ) )->cSuPed ) ), 10 )
   ::cBuffer   += Space( 2 )
   ::cBuffer   += ::getSubcuentaProveedor()
   ::cBuffer   += Padr( SubStr( ( D():FacturasProveedores( ::nView ) )->cDniPrv, 1, 14 ), 14 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasProveedores( ::nView ) )->cNomPrv, 1, 30 ), 30 )
   ::cBuffer   += Padr( "S/Fcta. N. " + AllTrim( ( D():FacturasProveedores( ::nView ) )->cSuPed ) + Space( 1 ) + AllTrim( ( D():FacturasProveedores( ::nView ) )->cNomPrv ), 40 )
   ::cBuffer   += padr( ::cFormatoImporte( hGet( hHash, "importe" ) ), 15 )
   ::cBuffer   += padr( ::cFormatoPorcentaje( hGet( ::aTotalFactura[5][1], "porcentajeiva" ) ), 5 )
   ::cBuffer   += padr( ::cFormatoImporte( hGet( hHash, "iva" ) ), 15 )
   ::cBuffer   += if( hGet( ::aTotalFactura[5][1], "porcentajeiva" ) == 0, ::SubCtaPrvIva0, ::SubCtaPrvIva21 )
   ::cBuffer   += if( ( D():FacturasProveedores( ::nView ) )->lRecargo, padr( ::cFormatoPorcentaje( hGet( ::aTotalFactura[5][1], "porcentajere" ) ), 5 ), Space( 5 ) )
   ::cBuffer   += if( ( D():FacturasProveedores( ::nView ) )->lRecargo, padr( ::cFormatoImporte( ::aTotalFactura[ 3 ] ), 15 ), Space( 15 ) )
   ::cBuffer   += if( ( D():FacturasProveedores( ::nView ) )->lRecargo, ::SubCtaPrvRe, Space( 16 ) )
   ::cBuffer   += if( ( D():FacturasProveedores( ::nView ) )->nPctRet <> 0, padr( ::cFormatoPorcentaje( ( D():FacturasProveedores( ::nView ) )->nPctRet ), 5 ), Space( 5 ) )
   ::cBuffer   += if( ( D():FacturasProveedores( ::nView ) )->nPctRet <> 0, padr( ::cFormatoImporte( ::aTotalFactura[ 6 ] ), 15 ), Space( 15 ) )
   ::cBuffer   += if( ( D():FacturasProveedores( ::nView ) )->nPctRet <> 0, ::getSubcuentaRet(), Space( 16 ) )
   ::cBuffer   += padr( ::cFormatoImporte( ::aTotalFactura[ 4 ] ), 15 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Padr( hGet( hHash, "cuenta" ), 16 )
   ::cBuffer   += padr( ::cFormatoImporte( hGet( hHash, "importe" ) ), 15 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasProveedores( ::nView ) )->cDirPrv, 1, 30 ), 30 )
   ::cBuffer   += Space( 10 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasProveedores( ::nView ) )->cPobPrv, 1, 30 ), 30 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasProveedores( ::nView ) )->cProvProv, 1, 30 ), 30 )
   ::cBuffer   += Padr( SubStr( ( D():FacturasProveedores( ::nView ) )->cPosPrv, 1, 5 ), 5 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 16 )
   ::cBuffer   += Space( 16 )
   ::cBuffer   += Space( 15 )
   ::cBuffer   += "N"
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 35 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 16 )
   ::cBuffer   += Space( 15 )
   ::cBuffer   += "X"
   ::cBuffer   += Space( 60 )
   ::cBuffer   += Space( 2 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 4 )
   ::cBuffer   += Space( 1 )
   ::cBuffer   += Space( 144 )















































RETURN ( Self )



static FUNCTION EnlaceMonitor_cFormatoImporte( nImporte ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   local cImporte    := ""

   cImporte          := AllTrim( Trans( nImporte, cPorDiv() ) )
   cImporte          := StrTran( cImporte, ".", "" )

RETURN ( cImporte )



static FUNCTION EnlaceMonitor_cFormatoPorcentaje( nPorcentaje ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   local cPorcentaje    := ""

   cPorcentaje          := AllTrim( Trans( nPorcentaje, "@E 999.99" ) )
   cPorcentaje          := StrTran( cPorcentaje, ".", "" )

RETURN ( cPorcentaje )



static FUNCTION EnlaceMonitor_changeStateFacturaCliente( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   if dbLock( ( D():FacturasClientes( ::nView ) ) )
      ( D():FacturasClientes( ::nView ) )->lContab    := .T.
      ( D():FacturasClientes( ::nView ) )->( dbUnLock() )
   end

RETURN ( Self )



static FUNCTION EnlaceMonitor_changeStateFacturaProveedor( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   if dbLock( ( D():FacturasProveedores( ::nView ) ) )
      ( D():FacturasProveedores( ::nView ) )->lContab    := .T.
      ( D():FacturasProveedores( ::nView ) )->( dbUnLock() )
   end

RETURN ( Self )



static FUNCTION EnlaceMonitor_WriteASCII( ) ; local Self AS CLASS EnlaceMonitor := QSelf() AS CLASS EnlaceMonitor

   if Empty( ::cBuffer )
      Return ( .F. )
   end

   ferase( ::cFullFile() )

   if !file( ::cFullFile() ) .OR. empty( ::hFile )
      ::hFile     := fCreate( ::cFullFile() )
   end

   if !empty( ::hFile )

      fWrite( ::hFile, ::cBuffer )
      fClose( ::hFile )

      ::cBuffer   := ""




      if apoloMsgNoYes( "Proceso de exportación realizado con éxito" + Chr(13)+Chr(10) +  "en fichero " + ( ::cFullFile() )            + Chr(13)+Chr(10) +  "¿ Desea abrir el fichero resultante ?", "Elija una opción." )
         shellExecute( 0, "open", ( ::cDirectory + "\" + ::cFile ), , , 1 )
      end

      Return .T.

   end

Return ( .F. )







_HB_CLASS EnlaceSage50 ; function EnlaceSage50 ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EnlaceSage50", iif( .F., { }, { @HBObject() } ), @EnlaceSage50() ) ) ;

   _HB_MEMBER { oInstance } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInstance"}, .F. )

   _HB_MEMBER { cBufferSubCta } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBufferSubCta"}, .F. )
   _HB_MEMBER { cBufferAsiento } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBufferAsiento"}, .F. )
   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )
   _HB_MEMBER { oTree } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTree"}, .F. )

   _HB_MEMBER { cConector } ; oClass:AddMultiData(, ";", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConector"}, .F. )

   _HB_MEMBER { nLenSubcta } ; oClass:AddMultiData(, 6, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLenSubcta"}, .F. )

   _HB_MEMBER { cDirectory } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDirectory"}, .F. )
   _HB_MEMBER { cFileSubCta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileSubCta"}, .F. )
   _HB_MEMBER { cFileDiario } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileDiario"}, .F. )
   _HB_MEMBER { hFileSubCta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hFileSubCta"}, .F. )
   _HB_MEMBER { hFileDiario } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hFileDiario"}, .F. )

   _HB_MEMBER { aCtaClientes } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCtaClientes"}, .F. )
   _HB_MEMBER { aCtaProveedores } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCtaProveedores"}, .F. )

   _HB_MEMBER { aSubCtaIngresos } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSubCtaIngresos"}, .F. )

   _HB_MEMBER { nContadorAsiento } ; oClass:AddMultiData(, 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nContadorAsiento"}, .F. )

   _HB_MEMBER { aTotales } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotales"}, .F. )
   _HB_MEMBER { aTotalesIva } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotalesIva"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @EnlaceSage50_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetInstance(); oClass:AddMethod( "GetInstance", @EnlaceSage50_GetInstance(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyInstance(); oClass:AddInline( "destroyInstance", {|Self | ( ( Self ) ), ( ::oInstance := nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ContabilizaFacturaCliente(); oClass:AddMethod( "ContabilizaFacturaCliente", @EnlaceSage50_ContabilizaFacturaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ContabilizaTicketCliente(); oClass:AddMethod( "ContabilizaTicketCliente", @EnlaceSage50_ContabilizaTicketCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER changeState(); oClass:AddMethod( "changeState", @EnlaceSage50_changeState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER changeStateTicket(); oClass:AddMethod( "changeStateTicket", @EnlaceSage50_changeStateTicket(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ContabilizaReciboCliente(); oClass:AddMethod( "ContabilizaReciboCliente", @EnlaceSage50_ContabilizaReciboCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ContabilizaFacturaProveedor(); oClass:AddMethod( "ContabilizaFacturaProveedor", @EnlaceSage50_ContabilizaFacturaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER changeStateFacturaProveedor(); oClass:AddMethod( "changeStateFacturaProveedor", @EnlaceSage50_changeStateFacturaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER WriteASCII(); oClass:AddMethod( "WriteASCII", @EnlaceSage50_WriteASCII(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cFullFileSubCta(); oClass:AddInline( "cFullFileSubCta", {|Self | ( ( Self ) ), ( ::cDirectory + "\" + ::cFileSubCta ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFullFileDiario(); oClass:AddInline( "cFullFileDiario", {|Self | ( ( Self ) ), ( ::cDirectory + "\" + ::cFileDiario ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeTree(); oClass:AddInline( "writeTree", {|Self, cText, nState | ( ( Self ) ), ( ::oTree:Select( ::oTree:Add( cText, nState ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cNumero(); oClass:AddInline( "cNumero", {|Self | ( ( Self ) ), ( ( D():FacturasClientes( ::nView ) )->cSerie + "/" + AllTrim( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cNumeroFactura(); oClass:AddInline( "cNumeroFactura", {|Self | ( ( Self ) ), ( ( D():FacturasClientes( ::nView ) )->cSerie + Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) + ( D():FacturasClientes( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cNumeroTicketFormato(); oClass:AddInline( "cNumeroTicketFormato", {|Self | ( ( Self ) ), ( ( D():Tikets( ::nView ) )->cSerTik + "/" + AllTrim( ( D():Tikets( ::nView ) )->cNumTik ) + "/" + ( D():Tikets( ::nView ) )->cSufTik ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cNumeroTicket(); oClass:AddInline( "cNumeroTicket", {|Self | ( ( Self ) ), ( ( D():Tikets( ::nView ) )->cSerTik + ( D():Tikets( ::nView ) )->cNumTik + ( D():Tikets( ::nView ) )->cSufTik ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cNumeroFacturaProveedorFormato(); oClass:AddInline( "cNumeroFacturaProveedorFormato", {|Self | ( ( Self ) ), ( ( D():FacturasProveedores( ::nView ) )->cSerFac + "/" + AllTrim( Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ) ) + "/" + ( D():FacturasProveedores( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cNumeroFacturaProveedor(); oClass:AddInline( "cNumeroFacturaProveedor", {|Self | ( ( Self ) ), ( ( D():FacturasProveedores( ::nView ) )->cSerFac + Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ) + ( D():FacturasProveedores( ::nView ) )->cSufFac ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cNumeroReciboFormato(); oClass:AddInline( "cNumeroReciboFormato", {|Self | ( ( Self ) ), ( ( D():FacturasClientesCobros( ::nView ) )->cSerie + "/" + AllTrim( Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientesCobros( ::nView ) )->cSufFac + "-" + AllTrim( Str( ( D():FacturasClientesCobros( ::nView ) )->nNumRec ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cNumeroRecibo(); oClass:AddInline( "cNumeroRecibo", {|Self | ( ( Self ) ), ( ( D():FacturasClientesCobros( ::nView ) )->cSerie + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ) + ( D():FacturasClientesCobros( ::nView ) )->cSufFac + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumRec ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddSubCta(); oClass:AddMethod( "AddSubCta", @EnlaceSage50_AddSubCta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAsientos(); oClass:AddMethod( "AddAsientos", @EnlaceSage50_AddAsientos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addDebe(); oClass:AddMethod( "addDebe", @EnlaceSage50_addDebe(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addHaber(); oClass:AddMethod( "addHaber", @EnlaceSage50_addHaber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addIva(); oClass:AddMethod( "addIva", @EnlaceSage50_addIva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lIncludeSubCta(); oClass:AddMethod( "lIncludeSubCta", @EnlaceSage50_lIncludeSubCta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lIncludeSubCtaPrv(); oClass:AddMethod( "lIncludeSubCtaPrv", @EnlaceSage50_lIncludeSubCtaPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cFormatoImporte( nImporte); oClass:AddMethod( "cFormatoImporte", @EnlaceSage50_cFormatoImporte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFormatoPorcentaje( nPorcentaje); oClass:AddMethod( "cFormatoPorcentaje", @EnlaceSage50_cFormatoPorcentaje(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cFormatoFecha( dFecha); oClass:AddMethod( "cFormatoFecha", @EnlaceSage50_cFormatoFecha(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddSubCtaIngresos(); oClass:AddMethod( "AddSubCtaIngresos", @EnlaceSage50_AddSubCtaIngresos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSubCuentaIva( nIva); oClass:AddMethod( "getSubCuentaIva", @EnlaceSage50_getSubCuentaIva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSubCuentaRe( nRe); oClass:AddMethod( "getSubCuentaRe", @EnlaceSage50_getSubCuentaRe(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSubCuentaIvaCompras( nIva); oClass:AddMethod( "getSubCuentaIvaCompras", @EnlaceSage50_getSubCuentaIvaCompras(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddSubCtaIngresosTickets(); oClass:AddMethod( "AddSubCtaIngresosTickets", @EnlaceSage50_AddSubCtaIngresosTickets(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddSubCtaTickets(); oClass:AddMethod( "AddSubCtaTickets", @EnlaceSage50_AddSubCtaTickets(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAsientosTickets(); oClass:AddMethod( "AddAsientosTickets", @EnlaceSage50_AddAsientosTickets(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addDebeTickets(); oClass:AddMethod( "addDebeTickets", @EnlaceSage50_addDebeTickets(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addHaberTickets(); oClass:AddMethod( "addHaberTickets", @EnlaceSage50_addHaberTickets(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addIvaTickets(); oClass:AddMethod( "addIvaTickets", @EnlaceSage50_addIvaTickets(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddSubCtaGastosFacPrv(); oClass:AddMethod( "AddSubCtaGastosFacPrv", @EnlaceSage50_AddSubCtaGastosFacPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddSubCtaFacPrv(); oClass:AddMethod( "AddSubCtaFacPrv", @EnlaceSage50_AddSubCtaFacPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAsientosFacPrv(); oClass:AddMethod( "AddAsientosFacPrv", @EnlaceSage50_AddAsientosFacPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addDebeFacPrv(); oClass:AddMethod( "addDebeFacPrv", @EnlaceSage50_addDebeFacPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addHaberFacPrv(); oClass:AddMethod( "addHaberFacPrv", @EnlaceSage50_addHaberFacPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addIvaFacPrv(); oClass:AddMethod( "addIvaFacPrv", @EnlaceSage50_addIvaFacPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAsientosRecibos(); oClass:AddMethod( "AddAsientosRecibos", @EnlaceSage50_AddAsientosRecibos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addDebeRecibo(); oClass:AddMethod( "addDebeRecibo", @EnlaceSage50_addDebeRecibo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addHaberRecibo(); oClass:AddMethod( "addHaberRecibo", @EnlaceSage50_addHaberRecibo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addDescuentoLineal(); oClass:AddMethod( "addDescuentoLineal", @EnlaceSage50_addDescuentoLineal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER changeStateReciboCliente(); oClass:AddMethod( "changeStateReciboCliente", @EnlaceSage50_changeStateReciboCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EnlaceSage50 ;



static FUNCTION EnlaceSage50_New( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if empty( cRutCnt() )
      ::cDirectory      := "C:\ENLACESAGE"
   else
      ::cDirectory      := cRutCnt()
   end

   ::cBufferSubCta      := ""
   ::cBufferAsiento     := ""

   ::cFileSubCta        := "xSubCta.txt"
   ::cFileDiario        := "xDiario.txt"

   ::aCtaClientes       := {}
   ::aCtaProveedores    := {}

   ::aTotales           := {}
   ::aTotalesIva        := {}

   ::nContadorAsiento   := Space( 6 )

   ::nLenSubcta         := ConfiguracionesEmpresaModel():getNumeric( "lenSubCta", 1 )

   ferase( ::cFullFileDiario() )

   if !file( ::cFullFileDiario() ) .OR. empty( ::hFileDiario )
      ::hFileDiario     := fCreate( ::cFullFileDiario() )
   end

RETURN ( Self )



static FUNCTION EnlaceSage50_GetInstance( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if empty( ::oInstance )

      ::oInstance       := ::New()

      if Empty( ::nContadorAsiento )

         MsgGet( "Seleccione un número de asiento", "asiento: ", @::nContadorAsiento )

         if Empty( ::nContadorAsiento )
            MsgStop( "Tiene que indicar un número de asiento" )
            Return ( Self )
         end

         ::nContadorAsiento   := val( ::nContadorAsiento )

         if ::nContadorAsiento < 1
            MsgStop( "Tiene que indicar un número de asiento" )
            Return ( Self )
         end

      end

   end

RETURN ( ::oInstance )



static FUNCTION EnlaceSage50_ContabilizaFacturaCliente( nView, oTree ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::nView              := nView
   ::oTree              := oTree

   if Empty( ::nContadorAsiento )

      ::writeTree( "Error al indicar un asiento", 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   if ( D():FacturasClientes( ::nView ) )->lContab

      ::writeTree( "Factura anteriormente contabilizada : " + ::cNumero(), 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   ::AddSubCtaIngresos()
   ::AddSubCta()
   ::AddAsientos()

   ::changeState()

RETURN ( Self )



static FUNCTION EnlaceSage50_ContabilizaReciboCliente( nView, oTree ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::nView              := nView
   ::oTree              := oTree

   if Empty( ::nContadorAsiento )

      ::writeTree( "Error al indicar un asiento", 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   if ( D():FacturasClientesCobros( ::nView ) )->lConPgo

      ::writeTree( "Recibo anteriormente contabilizado : " + ::cNumeroReciboFormato(), 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   ::AddAsientosRecibos()

   ::changeStateReciboCliente()

RETURN ( Self )



static FUNCTION EnlaceSage50_changeState( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if dbLock( ( D():FacturasClientes( ::nView ) ) )
      ( D():FacturasClientes( ::nView ) )->lContab    := .T.
      ( D():FacturasClientes( ::nView ) )->( dbUnLock() )
   end

RETURN ( Self )



static FUNCTION EnlaceSage50_changeStateReciboCliente( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if dbLock( ( D():FacturasClientesCobros( ::nView ) ) )
      ( D():FacturasClientesCobros( ::nView ) )->lConPgo    := .T.
      ( D():FacturasClientesCobros( ::nView ) )->( dbUnLock() )
   end

RETURN ( Self )



static FUNCTION EnlaceSage50_WriteASCII( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local lCreateSubCta     :=  .F.
   local lCreateDiario     :=  .F.

   if Empty( ::cBufferSubCta ) .AND. Empty( ::cBufferAsiento )
      Return ( .F. )
   end





   ferase( ::cFullFileSubCta() )

   if !file( ::cFullFileSubCta() ) .OR. empty( ::hFileSubCta )
      ::hFileSubCta     := fCreate( ::cFullFileSubCta() )
   end

   if !empty( ::hFileSubCta )

      fWrite( ::hFileSubCta, ::cBufferSubCta )
      fClose( ::hFileSubCta )

      ::cBufferSubCta   := ""

      lCreateSubCta     :=  .T.

   end





   if !empty( ::hFileDiario )

      fClose( ::hFileDiario )

      lCreateDiario     :=  .T.

   end

   if lCreateSubCta
      ::writeTree( "Fichero : " + ::cFullFileSubCta + " creado correctamente ", 1 )
   else
      ::writeTree( "Fichero : " + ::cFullFileSubCta + " no se ha creado correctamente ", 0 )
   end

   if lCreateDiario
      ::writeTree( "Fichero : " + ::cFullFileDiario() + " creado correctamente ", 1 )
   else
      ::writeTree( "Fichero : " + ::cFullFileDiario() + " no se ha creado correctamente ", 0 )
   end



   if apoloMsgNoYes( "Proceso de exportación realizado con éxito" + Chr(13)+Chr(10) +  "¿ Desea abrir el directorio resultante ?", "Elija una opción." )
      shellExecute( 0, "open", ( ::cDirectory ), , , 1 )
   end

Return ( .T. )



static FUNCTION EnlaceSage50_lIncludeSubCta( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if aScan( ::aCtaClientes, {|x| x == ( D():FacturasClientes( ::nView ) )->cCodCli } ) == 0
      Return ( .F. )
   end

Return ( .T. )



static FUNCTION EnlaceSage50_lIncludeSubCtaPrv( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if aScan( ::aCtaProveedores, {|x| x == ( D():FacturasProveedores( ::nView ) )->cCodPrv } ) == 0
      Return ( .F. )
   end

Return ( .T. )



static FUNCTION EnlaceSage50_AddSubCtaIngresos( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local nPos           := 0
   local cCnt           := ""
   local nRecAnt        := ( D():FacturasClientesLineas( ::nView ) )->( Recno() )
   local nOrdAnt        := ( D():FacturasClientesLineas( ::nView ) )->( OrdSetFocus( "nNumFac" ) )
   local nTotal         := 0

   ::aSubCtaIngresos       := {}

   if ( D():FacturasClientesLineas( ::nView ) )->( dbSeek( ::cNumeroFactura() ) )


      while ( D():FacturasClientesLineas( ::nView ) )->cSerie + Str( ( D():FacturasClientesLineas( ::nView ) )->nNumFac ) + ( D():FacturasClientesLineas( ::nView ) )->cSufFac == ::cNumeroFactura() .AND. !( D():FacturasClientesLineas( ::nView ) )->( Eof() )

            if !Empty( ( D():FacturasClientesLineas( ::nView ) )->cRef )

               cCnt           := retCtaVta( ( D():FacturasClientesLineas( ::nView ) )->cRef, .F., D():Articulos( ::nView ) )

               if Empty( cCnt )
                  cCnt        := cCtaCli() + replicate( "0", ::nLenSubcta - 3 )
               end

               nPos           := aScan( ::aSubCtaIngresos, {|h| hGet( h, "cuenta" ) == cCnt } )




               nTotal         := nNetLFacCli( D():FacturasClientesLineas( ::nView ), , , , .T. )

               nRestaDescuentoVenta( @nTotal, ( D():FacturasClientes( ::nView ) )->nDtoEsp )
               nRestaDescuentoVenta( @nTotal, ( D():FacturasClientes( ::nView ) )->nDpp )
               nRestaDescuentoVenta( @nTotal, ( D():FacturasClientes( ::nView ) )->nDtoUno )
               nRestaDescuentoVenta( @nTotal, ( D():FacturasClientes( ::nView ) )->nDtoDos )
               nRestaDescuentoVenta( @nTotal, ( D():FacturasClientes( ::nView ) )->nPctDto )

               if nPos == 0

                  aAdd( ::aSubCtaIngresos, { "cuenta" => cCnt, "importe" => nTotal } )

               else

                  hSet( ::aSubCtaIngresos[ nPos ], "importe", hGet( ::aSubCtaIngresos[ nPos ], "importe" ) + nTotal )

               end

            end

            ( D():FacturasClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():FacturasClientesLineas( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientesLineas( ::nView ) )->( dbGoTo( nRecAnt ) )

   asort( ::aSubCtaIngresos, , , {|x,y| hget( x, "cuenta" ) < hget( y, "cuenta" ) } )

Return ( nil )



static FUNCTION EnlaceSage50_AddSubCta( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local nOrdAnt  := ( D():Clientes( ::nView ) )->( OrdSetFocus( "COD" ) )

   if ::lIncludeSubCta()
      Return ( nil )
   end

   aAdd( ::aCtaClientes, ( D():FacturasClientes( ::nView ) )->cCodCli )

   if ( D():Clientes( ::nView ) )->( dbSeek( ( D():FacturasClientes( ::nView ) )->cCodCli ) )

      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Subcta, 12 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Titulo, 40 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Nif, 15 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Domicilio, 35 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Poblacion, 25 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Provincia, 20 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->CodPostal, 5 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 5 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 1 )
      ::cBufferSubCta      += Padr( "", 9 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Fax, 15 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->cMeiInt, 50 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Titulo, 100 )
      ::cBufferSubCta      += Padr( "0", 1 )
      ::cBufferSubCta      += Padr( "", 2 )
      ::cBufferSubCta      += Padr( "", 9 )
      ::cBufferSubCta      += Padr( "", 40 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "", 5 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Nif, 30 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Titulo, 120 )  + Chr(13)+Chr(10)

   end

   ( D():Clientes( ::nView ) )->( OrdSetFocus( nOrdAnt ) )

Return ( nil )



static FUNCTION EnlaceSage50_AddAsientos( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50







   ::aTotales           := aTotFacCli( ( D():FacturasClientes( ::nView ) )->cSerie + Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) + ( D():FacturasClientes( ::nView ) )->cSufFac, D():FacturasClientes( ::nView ), D():FacturasClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasClientesCobros( ::nView ), D():AnticiposClientes( ::nView ) )

   ::aTotalesIva        := ::aTotales[8]

   ::addDebe()
   ::addHaber()
   ::addIva()
   ::addDescuentoLineal()

   ::nContadorAsiento ++

Return ( nil )



static FUNCTION EnlaceSage50_addDebe( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
   ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasClientes( ::nView ) )->dFecFac ), 8 )
   ::cBufferAsiento      += Padr( AllTrim( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), 12 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "N/Fcta. " + ::cNumero(), 25 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Right( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ), 8 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 3 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cSerie, 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( ( D():FacturasClientes( ::nView ) )->nTotFac ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 100 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cDniCli, 15 )
   ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cNomCli, 40 )
   ::cBufferAsiento      += Padr( "", 9 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ::cNumero(), 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 25 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 32 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 34 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 11 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 30 )
   ::cBufferAsiento      += Padr( "", 120 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




   if !empty( ::hFileDiario )
      fWrite( ::hFileDiario, ::cBufferAsiento )
   end

   ::cBufferAsiento   := ""

Return ( nil )



static FUNCTION EnlaceSage50_addHaber( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local hCtaIng

   for each hCtaIng in ::aSubCtaIngresos

      ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
      ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasClientes( ::nView ) )->dFecFac ), 8 )
      ::cBufferAsiento      += Padr( AllTrim( hGet( hCtaIng, "cuenta" ) ), 12 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( "N/Fcta. " + ::cNumero() + AllTrim( ( D():FacturasClientes( ::nView ) )->cNomCli ), 25 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Right( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ), 8 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 3 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Pad( ( D():FacturasClientes( ::nView ) )->cSerie, 1 )
      ::cBufferAsiento      += Padr( "", 4 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( hGet( hCtaIng, "importe" ) ), 16 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 100 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cDniCli, 15 )
      ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cNomCli, 40 )
      ::cBufferAsiento      += Padr( "", 9 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( ::cNumero(), 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 4 )
      ::cBufferAsiento      += Padr( "", 15 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 25 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 32 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 34 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 11 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 30 )
      ::cBufferAsiento      += Padr( "", 120 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 15 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




      if !empty( ::hFileDiario )
         fWrite( ::hFileDiario, ::cBufferAsiento )
      end

      ::cBufferAsiento   := ""

   next

Return ( nil )



static FUNCTION EnlaceSage50_addIva( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local aIva

   for each aIva in ::aTotalesIva

      if hGet( aIva, "porcentajeiva" ) <> nil

         ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
         ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasClientes( ::nView ) )->dFecFac ), 8 )
         ::cBufferAsiento      += Padr( ::getSubCuentaIva( hGet( aIva, "porcentajeiva" ) ), 12 )
         ::cBufferAsiento      += Padr( AllTrim( cCliCta( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), 12 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padr( "N/Fcta. " + ::cNumero() + AllTrim( ( D():FacturasClientes( ::nView ) )->cNomCli ), 25 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Right( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ), 8 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( hGet( aIva, "porcentajeiva" ) ), 5 )
         ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( 0 ), 5 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 3 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cSerie, 1 )
         ::cBufferAsiento      += Padr( "", 4 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( hGet( aIva, "impiva" ) ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( hGet( aIva, "neto" ) ), 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 100 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cDniCli, 15 )
         ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cNomCli, 40 )
         ::cBufferAsiento      += Padr( "", 9 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ::cNumero(), 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 4 )
         ::cBufferAsiento      += Padr( "", 15 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 25 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 32 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 34 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 11 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 30 )
         ::cBufferAsiento      += Padr( "", 120 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 15 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




         if !empty( ::hFileDiario )
            fWrite( ::hFileDiario, ::cBufferAsiento )
         end

         ::cBufferAsiento   := ""

      end

   next

   if ( D():FacturasClientes( ::nView ) )->lRecargo

      for each aIva in ::aTotalesIva

         if hGet( aIva, "porcentajeiva" ) <> nil

            ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
            ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasClientes( ::nView ) )->dFecFac ), 8 )
            ::cBufferAsiento      += Padr( ::getSubCuentaRe( hGet( aIva, "porcentajere" ) ), 12 )
            ::cBufferAsiento      += Padr( "", 12 )
            ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
            ::cBufferAsiento      += Padr( "N/Fcta. " + ::cNumero() + AllTrim( ( D():FacturasClientes( ::nView ) )->cNomCli ), 25 )
            ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
            ::cBufferAsiento      += Right( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ), 8 )
            ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
            ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( hGet( aIva, "porcentajere" ) ), 5 )
            ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( 0 ), 5 )
            ::cBufferAsiento      += Padr( "", 10 )
            ::cBufferAsiento      += Padr( "", 3 )
            ::cBufferAsiento      += Padr( "", 6 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 6 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 6 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cSerie, 1 )
            ::cBufferAsiento      += Padr( "", 4 )
            ::cBufferAsiento      += Padr( "", 5 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
            ::cBufferAsiento      += Padl( ::cFormatoImporte( hGet( aIva, "impre" ) ), 16 )
            ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 10 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 6 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 6 )
            ::cBufferAsiento      += Padr( "", 6 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 5 )
            ::cBufferAsiento      += Padr( "", 10 )
            ::cBufferAsiento      += Padr( "", 5 )
            ::cBufferAsiento      += Padr( "", 5 )
            ::cBufferAsiento      += Padr( "", 6 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 100 )
            ::cBufferAsiento      += Padr( "", 50 )
            ::cBufferAsiento      += Padr( "", 50 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cDniCli, 15 )
            ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cNomCli, 40 )
            ::cBufferAsiento      += Padr( "", 9 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 10 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 12 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( ::cNumero(), 40 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 4 )
            ::cBufferAsiento      += Padr( "", 15 )
            ::cBufferAsiento      += Padr( "", 12 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 12 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 25 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 32 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 50 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 34 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 11 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 16 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 1 )
            ::cBufferAsiento      += Padr( "", 8 )
            ::cBufferAsiento      += Padr( "", 40 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "", 2 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 50 )
            ::cBufferAsiento      += Padr( "", 30 )
            ::cBufferAsiento      += Padr( "", 120 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 15 )
            ::cBufferAsiento      += Padr( "F", 1 )
            ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




            if !empty( ::hFileDiario )
               fWrite( ::hFileDiario, ::cBufferAsiento )
            end

            ::cBufferAsiento   := ""

         end

      next

   end

Return ( nil )



static FUNCTION EnlaceSage50_addDescuentoLineal( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local hCtaIng

   if !ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )
      return ( nil )
   end

   ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
   ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasClientes( ::nView ) )->dFecFac ), 8 )
   ::cBufferAsiento      += Padr( AllTrim( ConfiguracionesEmpresaModel():getValue( "cuenta_descuento_especial", "" ) ), 12 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "N/Fcta. " + ::cNumero(), 25 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Right( Str( ( D():FacturasClientes( ::nView ) )->nNumFac ), 8 )
   ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 3 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Pad( ( D():FacturasClientes( ::nView ) )->cSerie, 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( ::aTotales[14] ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 100 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cDniCli, 15 )
   ::cBufferAsiento      += Padr( ( D():FacturasClientes( ::nView ) )->cNomCli, 40 )
   ::cBufferAsiento      += Padr( "", 9 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ::cNumero(), 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 25 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 32 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 34 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 11 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 30 )
   ::cBufferAsiento      += Padr( "", 120 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




   if !empty( ::hFileDiario )
      fWrite( ::hFileDiario, ::cBufferAsiento )
   end

   ::cBufferAsiento   := ""

Return ( nil )



static FUNCTION EnlaceSage50_AddAsientosRecibos( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50







   ::aTotales           := aTotFacCli( ( D():FacturasClientesCobros( ::nView ) )->cSerie + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ) + ( D():FacturasClientesCobros( ::nView ) )->cSufFac, D():FacturasClientes( ::nView ), D():FacturasClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasClientesCobros( ::nView ), D():AnticiposClientes( ::nView ) )

   ::aTotalesIva        := ::aTotales[8]

   ::addDebeRecibo()
   ::addHaberRecibo()

   ::nContadorAsiento ++

Return ( nil )



static FUNCTION EnlaceSage50_addDebeRecibo( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
   ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasClientesCobros( ::nView ) )->dEntrada ), 8 )
   ::cBufferAsiento      += Padr( AllTrim( cCliCta( ( D():FacturasClientesCobros( ::nView ) )->cCodCli, D():Clientes( ::nView ) ) ), 12 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "N/Rec. " + ::cNumeroReciboFormato(), 25 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Right( Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ), 8 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 3 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():FacturasClientesCobros( ::nView ) )->cSerie, 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( ( D():FacturasClientesCobros( ::nView ) )->nImporte ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 100 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 9 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ::cNumeroReciboFormato(), 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 25 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 32 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 34 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 11 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 30 )
   ::cBufferAsiento      += Padr( "", 120 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)

   if !empty( ::hFileDiario )
      fWrite( ::hFileDiario, ::cBufferAsiento )
   end

   ::cBufferAsiento   := ""

Return ( nil )



static FUNCTION EnlaceSage50_addHaberRecibo( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local cCtaPgo

   cCtaPgo               := ( D():FacturasClientesCobros( ::nView ) )->cCtaRec

   if Empty( cCtaPgo )
      cCtaPgo            := cCtaFPago( ( D():FacturasClientesCobros( ::nView ) )->cCodPgo, D():FormasPago( ::nView ) )
   end

   if Empty( cCtaPgo )
      cCtaPgo        := cCtaCob()
   end

   ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
   ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasClientesCobros( ::nView ) )->dEntrada ), 8 )
   ::cBufferAsiento      += Padr( AllTrim( cCtaPgo ), 12 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "N/Rec. " + ::cNumeroReciboFormato(), 25 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Right( Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ), 8 )
   ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 3 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Pad( ( D():FacturasClientesCobros( ::nView ) )->cSerie, 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( ( D():FacturasClientesCobros( ::nView ) )->nImporte ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 100 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 9 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ::cNumeroReciboFormato(), 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 25 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 32 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 34 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 11 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 30 )
   ::cBufferAsiento      += Padr( "", 120 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)

   if !empty( ::hFileDiario )
      fWrite( ::hFileDiario, ::cBufferAsiento )
   end

   ::cBufferAsiento   := ""

Return ( nil )



static FUNCTION EnlaceSage50_cFormatoImporte( nImporte ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local cImporte    := ""

   cImporte          := AllTrim( Trans( nImporte, cPorDiv() ) )
   cImporte          := StrTran( cImporte, ".", "" )
   cImporte          := StrTran( cImporte, ",", "." )

RETURN ( cImporte )



static FUNCTION EnlaceSage50_cFormatoPorcentaje( nPorcentaje ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local cPorcentaje    := ""

   cPorcentaje          := AllTrim( Trans( nPorcentaje, "@E 999.99" ) )
   cPorcentaje          := StrTran( cPorcentaje, ".", "" )
   cPorcentaje          := StrTran( cPorcentaje, ",", "." )

RETURN ( cPorcentaje )



static FUNCTION EnlaceSage50_cFormatoFecha( dFecha ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local cFecha         := ""

   cFecha               += AllTrim( Str( Year( dFecha ) ) )
   cFecha               += AllTrim( RJust( Str( Month( dFecha ) ), "0", 2 ) )
   cFecha               += AllTrim( RJust( Str( Day( dFecha ) ), "0", 2 ) )

RETURN ( cFecha )



static FUNCTION EnlaceSage50_getSubCuentaIva( nIva ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local cSubCta        := ""
   local cPrefijo       := "477"
   local cSufijo        := AllTrim( Str( int( nIva ) ) )

   cSubCta              += cPrefijo
   cSubCta              := LJust( cSubCta, "0", ::nLenSubcta - len( cSufijo ) )
   cSubCta              += cSufijo

RETURN ( cSubCta )



static FUNCTION EnlaceSage50_getSubCuentaRe( nRe ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local cSubCta        := ""
   local cPrefijo       := "475"
   local cSufijo        := AllTrim( Str( int( nRe ) ) )

   cSubCta              += cPrefijo
   cSubCta              := LJust( cSubCta, "0", ::nLenSubcta - len( cSufijo ) )
   cSubCta              += cSufijo

RETURN ( cSubCta )



static FUNCTION EnlaceSage50_getSubCuentaIvaCompras( nIva ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local cSubCta        := ""
   local cPrefijo       := "472"
   local cSufijo        := AllTrim( Str( int( nIva ) ) )

   cSubCta              += cPrefijo
   cSubCta              := LJust( cSubCta, "0", ::nLenSubcta - len( cSufijo ) )
   cSubCta              += cSufijo

RETURN ( cSubCta )



static FUNCTION EnlaceSage50_ContabilizaTicketCliente( nView, oTree ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::nView              := nView
   ::oTree              := oTree

   if Empty( ::nContadorAsiento )

      ::writeTree( "Error al indicar un asiento", 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   if ( D():Tikets( ::nView ) )->lConTik

      ::writeTree( "Simplificada anteriormente contabilizada : " + ::cNumeroTicketFormato(), 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   ::AddSubCtaIngresosTickets()
   ::AddSubCtaTickets()
   ::AddAsientosTickets()

   ::changeStateTicket()

Return ( .T. )



static FUNCTION EnlaceSage50_changeStateTicket( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if dbLock( ( D():Tikets( ::nView ) ) )
      ( D():Tikets( ::nView ) )->lConTik    := .T.
      ( D():Tikets( ::nView ) )->( dbUnLock() )
   end

RETURN ( Self )



static FUNCTION EnlaceSage50_AddSubCtaIngresosTickets( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local nPos           := 0
   local cCnt           := ""
   local nRecAnt        := ( D():TiketsLineas( ::nView ) )->( Recno() )
   local nOrdAnt        := ( D():TiketsLineas( ::nView ) )->( OrdSetFocus( "CNUMTIL" ) )

   ::aSubCtaIngresos    := {}

   if ( D():TiketsLineas( ::nView ) )->( dbSeek( ::cNumeroTicket() ) )


      while ( D():TiketsLineas( ::nView ) )->cSerTil + ( D():TiketsLineas( ::nView ) )->cNumTil + ( D():TiketsLineas( ::nView ) )->cSufTil == ::cNumeroTicket() .AND. !( D():TiketsLineas( ::nView ) )->( Eof() )

            if !Empty( ( D():TiketsLineas( ::nView ) )->cCbaTil )

               cCnt           := retCtaVta( ( D():TiketsLineas( ::nView ) )->cCbaTil, .F., D():Articulos( ::nView ) )

               if Empty( cCnt )
                  cCnt        := cCtaCli() + replicate( "0", ::nLenSubcta - 3 )
               end

               nPos           := aScan( ::aSubCtaIngresos, {|h| hGet( h, "cuenta" ) == cCnt } )

               if nPos == 0

                  aAdd( ::aSubCtaIngresos, { "cuenta" => cCnt, "importe" => nNetLTpv( D():TiketsLineas( ::nView ) ) } )
               else

                  hSet( ::aSubCtaIngresos[ nPos ], "importe", hGet( ::aSubCtaIngresos[ nPos ], "importe" ) + nNetLTpv( D():TiketsLineas( ::nView ) ) )

               end

            end

            ( D():TiketsLineas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():TiketsLineas( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():TiketsLineas( ::nView ) )->( dbGoTo( nRecAnt ) )

   asort( ::aSubCtaIngresos, , , {|x,y| hget( x, "cuenta" ) < hget( y, "cuenta" ) } )

Return ( nil )



static FUNCTION EnlaceSage50_AddSubCtaTickets( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local nOrdAnt  := ( D():Clientes( ::nView ) )->( OrdSetFocus( "COD" ) )

   if ::lIncludeSubCta()
      Return ( nil )
   end

   aAdd( ::aCtaClientes, ( D():Tikets( ::nView ) )->cCliTik )

   if ( D():Clientes( ::nView ) )->( dbSeek( ( D():Tikets( ::nView ) )->cCliTik ) )

      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Subcta, 12 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Titulo, 40 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Nif, 15 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Domicilio, 35 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Poblacion, 25 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Provincia, 20 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->CodPostal, 5 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 5 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 1 )
      ::cBufferSubCta      += Padr( "", 9 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Fax, 15 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->cMeiInt, 50 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Titulo, 100 )
      ::cBufferSubCta      += Padr( "0", 1 )
      ::cBufferSubCta      += Padr( "", 2 )
      ::cBufferSubCta      += Padr( "", 9 )
      ::cBufferSubCta      += Padr( "", 40 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "", 5 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Nif, 30 )
      ::cBufferSubCta      += Padr( ( D():Clientes( ::nView ) )->Titulo, 120 )  + Chr(13)+Chr(10)

   end

   ( D():Clientes( ::nView ) )->( OrdSetFocus( nOrdAnt ) )

Return ( nil )



static FUNCTION EnlaceSage50_AddAsientosTickets( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50




   ::aTotales           := aTotTik( ( D():Tikets( ::nView ) )->cSerTik + ( D():Tikets( ::nView ) )->cNumTik + ( D():Tikets( ::nView ) )->cSufTik, D():Tikets( ::nView ), D():TiketsLineas( ::nView ), D():Divisas( ::nView ) )

   ::aTotalesIva        := ::aTotales[5]

   ::addDebeTickets()
   ::addHaberTickets()
   ::addIvaTickets()

   ::nContadorAsiento ++

Return ( nil )



static FUNCTION EnlaceSage50_addDebeTickets( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
   ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():Tikets( ::nView ) )->dFecTik ), 8 )
   ::cBufferAsiento      += Padr( AllTrim( cCliCta( ( D():Tikets( ::nView ) )->cCliTik, D():Clientes( ::nView ) ) ), 12 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "N/Sinplificada " + ::cNumeroTicketFormato(), 25 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Right( ( D():Tikets( ::nView ) )->cNumTik, 8 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 3 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cSerTik, 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( ( D():Tikets( ::nView ) )->nTotTik ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 100 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cDniCli, 15 )
   ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cNomTik, 40 )
   ::cBufferAsiento      += Padr( "", 9 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ::cNumeroTicketFormato(), 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 25 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 32 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 34 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 11 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 30 )
   ::cBufferAsiento      += Padr( "", 120 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




   if !empty( ::hFileDiario )
      fWrite( ::hFileDiario, ::cBufferAsiento )
   end

   ::cBufferAsiento   := ""

Return ( nil )



static FUNCTION EnlaceSage50_addHaberTickets( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local hCtaIng

   for each hCtaIng in ::aSubCtaIngresos

      ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
      ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():Tikets( ::nView ) )->dFecTik ), 8 )
      ::cBufferAsiento      += Padr( AllTrim( hGet( hCtaIng, "cuenta" ) ), 12 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( "N/Simplificada " + ::cNumeroTicketFormato(), 25 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Right( ( D():Tikets( ::nView ) )->cNumTik, 8 )
      ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
      ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 3 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Pad( ( D():Tikets( ::nView ) )->cSerTik, 1 )
      ::cBufferAsiento      += Padr( "", 4 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( hGet( hCtaIng, "importe" ) ), 16 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 100 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cDniCli, 15 )
      ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cNomTik, 40 )
      ::cBufferAsiento      += Padr( "", 9 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( ::cNumeroTicketFormato(), 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 4 )
      ::cBufferAsiento      += Padr( "", 15 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 25 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 32 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 34 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 11 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 30 )
      ::cBufferAsiento      += Padr( "", 120 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 15 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




      if !empty( ::hFileDiario )
         fWrite( ::hFileDiario, ::cBufferAsiento )
      end

      ::cBufferAsiento   := ""

   next

Return ( nil )



static FUNCTION EnlaceSage50_addIvaTickets( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local n

   for n:= 1 to 3

      if ::aTotales[ 5, n ] <> nil

         ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
         ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():Tikets( ::nView ) )->dFecTik ), 8 )
         ::cBufferAsiento      += Padr( ::getSubCuentaIva( ::aTotales[ 5, n ] ), 12 )
         ::cBufferAsiento      += Padr( AllTrim( cCliCta( ( D():Tikets( ::nView ) )->cCliTik, D():Clientes( ::nView ) ) ), 12 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padr( "N/Simplificada " + ::cNumeroTicketFormato(), 25 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Right( ( D():Tikets( ::nView ) )->cNumTik, 8 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( ::aTotales[ 5, n ] ), 5 )
         ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( 0 ), 5 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 3 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cSerTik, 1 )
         ::cBufferAsiento      += Padr( "", 4 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( ::aTotales[ 7, n ] ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( ::aTotales[ 6, n ] ), 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 100 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cDniCli, 15 )
         ::cBufferAsiento      += Padr( ( D():Tikets( ::nView ) )->cNomTik, 40 )
         ::cBufferAsiento      += Padr( "", 9 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ::cNumeroTicketFormato(), 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 4 )
         ::cBufferAsiento      += Padr( "", 15 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 25 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 32 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 34 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 11 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 30 )
         ::cBufferAsiento      += Padr( "", 120 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 15 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




         if !empty( ::hFileDiario )
            fWrite( ::hFileDiario, ::cBufferAsiento )
         end

         ::cBufferAsiento   := ""

      end

   next

Return ( nil )



static FUNCTION EnlaceSage50_ContabilizaFacturaProveedor( nView, oTree ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::nView              := nView
   ::oTree              := oTree

   if Empty( ::nContadorAsiento )

      ::writeTree( "Error al indicar un asiento", 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   if ( D():FacturasProveedores( ::nView ) )->lContab

      ::writeTree( "Factura anteriormente contabilizada : " + ::cNumeroFacturaProveedor(), 0 )

      if !empty( ::hFileDiario )
         fClose( ::hFileDiario )
      end

      Return ( Self )

   end

   ::AddSubCtaGastosFacPrv()
   ::AddSubCtaFacPrv()
   ::AddAsientosFacPrv()

   ::changeStateFacturaProveedor()

RETURN ( Self )



static FUNCTION EnlaceSage50_changeStateFacturaProveedor( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   if dbLock( ( D():FacturasProveedores( ::nView ) ) )
      ( D():FacturasProveedores( ::nView ) )->lContab    := .T.
      ( D():FacturasProveedores( ::nView ) )->( dbUnLock() )
   end

RETURN ( Self )



static FUNCTION EnlaceSage50_AddSubCtaGastosFacPrv( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local nPos           := 0
   local cCnt           := ""
   local nRecAnt        := ( D():FacturasProveedoresLineas( ::nView ) )->( Recno() )
   local nOrdAnt        := ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( "nNumFac" ) )

   ::aSubCtaIngresos    := {}

   if ( D():FacturasProveedoresLineas( ::nView ) )->( dbSeek( ::cNumeroFacturaProveedor() ) )


      while ( D():FacturasProveedoresLineas( ::nView ) )->cSerFac + Str( ( D():FacturasProveedoresLineas( ::nView ) )->nNumFac ) + ( D():FacturasProveedoresLineas( ::nView ) )->cSufFac == ::cNumeroFacturaProveedor() .AND. !( D():FacturasProveedoresLineas( ::nView ) )->( Eof() )

            if !Empty( ( D():FacturasProveedoresLineas( ::nView ) )->cRef )

               cCnt           := RetCtaCom( ( D():FacturasProveedoresLineas( ::nView ) )->cRef, .F., D():Articulos( ::nView ) )

               if Empty( cCnt )
                  cCnt        := cCtaPrv() + replicate( "0", ::nLenSubcta - 3 )
               end

               nPos           := aScan( ::aSubCtaIngresos, {|h| hGet( h, "cuenta" ) == cCnt } )

               if nPos == 0

                  aAdd( ::aSubCtaIngresos, { "cuenta" => cCnt, "importe" => nNetLFacPrv( D():FacturasProveedoresLineas( ::nView ), D():FacturasProveedores( ::nView ) ) } )
               else

                  hSet( ::aSubCtaIngresos[ nPos ], "importe", hGet( ::aSubCtaIngresos[ nPos ], "importe" ) + nNetLFacPrv( D():FacturasProveedoresLineas( ::nView ), D():FacturasProveedores( ::nView ) ) )

               end

            end

            ( D():FacturasProveedoresLineas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasProveedoresLineas( ::nView ) )->( dbGoTo( nRecAnt ) )

   asort( ::aSubCtaIngresos, , , {|x,y| hget( x, "cuenta" ) < hget( y, "cuenta" ) } )

Return ( nil )



static FUNCTION EnlaceSage50_AddSubCtaFacPrv( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local nOrdAnt  := ( D():Proveedores( ::nView ) )->( OrdSetFocus( "COD" ) )

   if ::lIncludeSubCtaPrv()
      Return ( nil )
   end

   aAdd( ::aCtaProveedores, ( D():FacturasProveedores( ::nView ) )->cCodPrv )

   if ( D():Proveedores( ::nView ) )->( dbSeek( ( D():FacturasProveedores( ::nView ) )->cCodPrv ) )

      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Subcta, 12 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Titulo, 40 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Nif, 15 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Domicilio, 35 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Poblacion, 25 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Provincia, 20 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->CodPostal, 5 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 5 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 1 )
      ::cBufferSubCta      += Padr( "", 9 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Fax, 15 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->cMeiInt, 50 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Titulo, 100 )
      ::cBufferSubCta      += Padr( "0", 1 )
      ::cBufferSubCta      += Padr( "", 2 )
      ::cBufferSubCta      += Padr( "", 9 )
      ::cBufferSubCta      += Padr( "", 40 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( " 0.00", 5 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( " 0", 2 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "F", 1 )
      ::cBufferSubCta      += Padr( "", 12 )
      ::cBufferSubCta      += Padr( "", 5 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Nif, 30 )
      ::cBufferSubCta      += Padr( ( D():Proveedores( ::nView ) )->Titulo, 120 )  + Chr(13)+Chr(10)

   end

   ( D():Proveedores( ::nView ) )->( OrdSetFocus( nOrdAnt ) )

Return ( nil )



static FUNCTION EnlaceSage50_AddAsientosFacPrv( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50






   ::aTotales           := aTotFacPrv( ( D():FacturasProveedores( ::nView ) )->cSerFac + Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ) + ( D():FacturasProveedores( ::nView ) )->cSufFac, D():FacturasProveedores( ::nView ), D():FacturasProveedoresLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasProveedoresPagos( ::nView ) )

   ::aTotalesIva        := ::aTotales[5]

   ::addDebeFacPrv()
   ::addHaberFacPrv()
   ::addIvaFacPrv()

   ::nContadorAsiento ++

Return ( nil )



static FUNCTION EnlaceSage50_addDebeFacPrv( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
   ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasProveedores( ::nView ) )->dFecFac ), 8 )
   ::cBufferAsiento      += Padr( AllTrim( cPrvCta( ( D():FacturasProveedores( ::nView ) )->cCodPrv, D():Proveedores( ::nView ) ) ), 12 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "N/Fcta. " + ::cNumeroFacturaProveedorFormato(), 25 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Right( Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ), 8 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 3 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cSerFac, 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( ( D():FacturasProveedores( ::nView ) )->nTotFac ), 16 )
   ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 5 )
   ::cBufferAsiento      += Padr( "", 6 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 100 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cDniPrv, 15 )
   ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cNomPrv, 40 )
   ::cBufferAsiento      += Padr( "", 9 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 10 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( ::cNumeroFacturaProveedorFormato(), 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 4 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 12 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 25 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 32 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 34 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 11 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 16 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 1 )
   ::cBufferAsiento      += Padr( "", 8 )
   ::cBufferAsiento      += Padr( "", 40 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "", 2 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 50 )
   ::cBufferAsiento      += Padr( "", 30 )
   ::cBufferAsiento      += Padr( "", 120 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 15 )
   ::cBufferAsiento      += Padr( "F", 1 )
   ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




   if !empty( ::hFileDiario )
      fWrite( ::hFileDiario, ::cBufferAsiento )
   end

   ::cBufferAsiento   := ""

Return ( nil )



static FUNCTION EnlaceSage50_addHaberFacPrv( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local hCtaIng

   for each hCtaIng in ::aSubCtaIngresos

      ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
      ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasProveedores( ::nView ) )->dFecFac ), 8 )
      ::cBufferAsiento      += Padr( AllTrim( hGet( hCtaIng, "cuenta" ) ), 12 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( "N/Fcta. " + ::cNumeroFacturaProveedorFormato(), 25 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Right( Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ), 8 )
      ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
      ::cBufferAsiento      += Padr( ::cFormatoImporte( 0 ), 5 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 3 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Pad( ( D():FacturasProveedores( ::nView ) )->cSerFac, 1 )
      ::cBufferAsiento      += Padr( "", 4 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( hGet( hCtaIng, "importe" ) ), 16 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 5 )
      ::cBufferAsiento      += Padr( "", 6 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 100 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cDniPrv, 15 )
      ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cNomPrv, 40 )
      ::cBufferAsiento      += Padr( "", 9 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 10 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( ::cNumeroFacturaProveedorFormato(), 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 4 )
      ::cBufferAsiento      += Padr( "", 15 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 12 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 25 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 32 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 34 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 11 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 16 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 1 )
      ::cBufferAsiento      += Padr( "", 8 )
      ::cBufferAsiento      += Padr( "", 40 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "", 2 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 50 )
      ::cBufferAsiento      += Padr( "", 30 )
      ::cBufferAsiento      += Padr( "", 120 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 15 )
      ::cBufferAsiento      += Padr( "F", 1 )
      ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




      if !empty( ::hFileDiario )
         fWrite( ::hFileDiario, ::cBufferAsiento )
      end

      ::cBufferAsiento   := ""

   next

Return ( nil )



static FUNCTION EnlaceSage50_addIvaFacPrv( ) ; local Self AS CLASS EnlaceSage50 := QSelf() AS CLASS EnlaceSage50

   local aIva

   for each aIva in ::aTotalesIva

      if aIva[3] <> nil

         ::cBufferAsiento      += Padl( AllTrim( Str( ::nContadorAsiento ) ), 6 )
         ::cBufferAsiento      += Padr( ::cFormatoFecha( ( D():FacturasProveedores( ::nView ) )->dFecFac ), 8 )
         ::cBufferAsiento      += Padr( ::getSubCuentaIvaCompras( aIva[3] ), 12 )
         ::cBufferAsiento      += Padr( AllTrim( cPrvCta( ( D():FacturasProveedores( ::nView ) )->cCodPrv, D():Proveedores( ::nView ) ) ), 12 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padr( "N/Fcta." + ::cNumeroFacturaProveedorFormato(), 25 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Right( Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ), 8 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( aIva[3] ), 5 )
         ::cBufferAsiento      += Padl( ::cFormatoPorcentaje( 0 ), 5 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 3 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cSerFac, 1 )
         ::cBufferAsiento      += Padr( "", 4 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( aIva[ 8 ] ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( 0 ), 16 )
         ::cBufferAsiento      += Padl( ::cFormatoImporte( aIva[2] ), 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 5 )
         ::cBufferAsiento      += Padr( "", 6 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 100 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cDniPrv, 15 )
         ::cBufferAsiento      += Padr( ( D():FacturasProveedores( ::nView ) )->cNomPrv, 40 )
         ::cBufferAsiento      += Padr( "", 9 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 10 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( ::cNumeroFacturaProveedorFormato(), 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 4 )
         ::cBufferAsiento      += Padr( "", 15 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 12 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 25 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 32 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 34 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 11 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 16 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 1 )
         ::cBufferAsiento      += Padr( "", 8 )
         ::cBufferAsiento      += Padr( "", 40 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "", 2 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 50 )
         ::cBufferAsiento      += Padr( "", 30 )
         ::cBufferAsiento      += Padr( "", 120 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 15 )
         ::cBufferAsiento      += Padr( "F", 1 )
         ::cBufferAsiento      += Padr( "", 9 ) + Chr(13)+Chr(10)




         if !empty( ::hFileDiario )
            fWrite( ::hFileDiario, ::cBufferAsiento )
         end

         ::cBufferAsiento   := ""

      end

   next

Return ( nil )
