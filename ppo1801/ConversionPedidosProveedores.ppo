#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\ConversionPedidosProveedores.prg"
_HB_CLASS TConversionPedidosProveedores ; function TConversionPedidosProveedores ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TConversionPedidosProveedores", iif( .T., { @TConversionDocumentos() }, { @HBObject() } ), @TConversionPedidosProveedores() ) ) ;

   _HB_MEMBER { cCodigoProveedor } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodigoProveedor"}, .F. )



   _HB_MEMBER Dialog(); oClass:AddMethod( "Dialog", @TConversionPedidosProveedores_Dialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCodigoProveedor(); oClass:AddInline( "setCodigoProveedor", {|Self, cCodigoProveedor | ( ( Self ) ), ( ::cCodigoProveedor := cCodigoProveedor ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCodigoProveedor(); oClass:AddInline( "getCodigoProveedor", {|Self | ( ( Self ) ), ( ::cCodigoProveedor ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER startDialog(); oClass:AddMethod( "startDialog", @TConversionPedidosProveedores_startDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER botonSiguiente(); oClass:AddMethod( "botonSiguiente", @TConversionPedidosProveedores_botonSiguiente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadLinesDocument(); oClass:AddMethod( "loadLinesDocument", @TConversionPedidosProveedores_loadLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TConversionPedidosProveedores ;















static FUNCTION TConversionPedidosProveedores_Dialog( ) ; local Self AS CLASS TConversionPedidosProveedores := QSelf() AS CLASS TConversionPedidosProveedores

   local oBmp


   ::oDlg = TDialog():New(,,,,, "ASS_CONVERSION_DOCUMENTO",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )





   oBmp := TBitmap():ReDefine( 500, "gc_clipboard_empty_businessman_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )




   ::oTitle := TSay():ReDefine( 510, {||      ::cTitle}, ::oDlg,,,, .F.,, .F., .F., )




   ::oFld := TPages():Redefine( 100, ::oDlg, {"ASS_CONVERSION_DOCUMENTO_3"},,,, )

   ::DialogSelectionLines( ::oFld:aDialogs[1] )






   ::buttonPrior := TButton():ReDefine( 3, {||( ::botonAnterior() )}, ::oDlg,,, .F.,,,, .F. )




   ::buttonNext := TButton():ReDefine( 1, {||( ::botonSiguiente() )}, ::oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::oDlg:End() )}, ::oDlg,,, .F.,,,, .F. )

   ::oDlg:bStart  := {|| ::startDialog() }

   ::oDlg:addFastKey( 116, {|| ::botonSiguiente() } )

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   oBmp:End()

RETURN ( ::oDlg:nResult == 1 )



static FUNCTION TConversionPedidosProveedores_startDialog( ) ; local Self AS CLASS TConversionPedidosProveedores := QSelf() AS CLASS TConversionPedidosProveedores

   ::setDocumentPedidosProveedores()

   ::buttonPrior:Hide()
   ::buttonNext:setText( "&Importar")

   ::oBrwLines:Load()

   ::loadLinesDocument()

   ::setBrowseLinesDocument()

RETURN ( Self )



static FUNCTION TConversionPedidosProveedores_botonSiguiente( ) ; local Self AS CLASS TConversionPedidosProveedores := QSelf() AS CLASS TConversionPedidosProveedores

   if !::oDocumentLines:anySelect()
      msgStop( "No hay líneas seleccionadas." )
   else
      ::oDlg:End( 1 )
   end

Return ( Self )






static FUNCTION TConversionPedidosProveedores_loadLinesDocument( ) ; local Self AS CLASS TConversionPedidosProveedores := QSelf() AS CLASS TConversionPedidosProveedores

   local hDictionary
   local oDocumentLine

   if empty( ::getCodigoProveedor() )
      msgStop( "Es necesario codificar un proveedor." )
      Return .F.
   end

   ::oDocumentLines:reset()

   ( ::getHeaderAlias() )->( ordsetfocus( "cCodPrv" ) )

   if ( ::getHeaderAlias() )->( dbseek( ::getCodigoProveedor() ) )

      while ( ::getHeaderAlias() )->cCodPrv == ::getCodigoProveedor() .AND. !::getHeaderEof()

         if ( ( ::getHeaderAlias() )->nEstado <> 3 ) .AND. ( ::getLineAlias() )->( dbSeek( ::getHeaderId() ) )

            while ::getHeaderId() == ::aliasDocumentLine:getDocumentId() .AND. ! ( ::getLineAlias() )->( eof() )

               hDictionary       := D():getHashFromAlias( ::getLineAlias(), ::getLineDictionary() )

               oDocumentLine     := SupplierDeliveryNoteDocumentLine():newFromDictionary( self, hDictionary )

               if oDocumentLine:getUnitsAwaitingReception() > 0
                  hSet( oDocumentLine:hDictionary, "Unidades", oDocumentLine:getUnitsAwaitingReception() )
                  ::oDocumentLines:addLines( oDocumentLine )
               end

               ( ::getLineAlias() )->( dbskip() )

            end

         end

         ( ::getHeaderAlias() )->( dbSkip() )

      end

   end

RETURN ( .T. )
