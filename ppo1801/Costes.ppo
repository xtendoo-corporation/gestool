#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Costes.prg"
_HB_CLASS TCosMaq ; function TCosMaq ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TCosMaq", iif( .T., { @TMant() }, { @HBObject() } ), @TCosMaq() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_industrial_robot_money_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )

   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 250 + ( 161 * 256 ) + ( 52 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TCosMaq_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TCosMaq_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TCosMaq_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TCosMaq_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave( oGet, nMode); oClass:AddMethod( "lPreSave", @TCosMaq_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TCosMaq ;



static FUNCTION TCosMaq_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TCosMaq := QSelf() AS CLASS TCosMaq

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE



      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      ::CloseFiles()

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TCosMaq_CloseFiles( ) ; local Self AS CLASS TCosMaq := QSelf() AS CLASS TCosMaq

   if !Empty( ::oDbf )
      ::oDbf:end()
   end

   ::oDbf         := nil

RETURN .T.



static FUNCTION TCosMaq_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TCosMaq := QSelf() AS CLASS TCosMaq

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   oDbf := DbfServer( "Costes.Dbf", "Costes" ):New( "Costes.Dbf", "Costes", ( cDriver ), "Costes de maquinaria", ( cPath ) )

      oDbf:AddField( "cCodCos", "C", 12, 0,,,,, "Código", .F., 100, .F., {} )
      oDbf:AddField( "cDesCos", "C", 35, 0,,,,, "Nombre", .F., 400, .F., {} )
      oDbf:AddField( "nImpCos", "N", 16, 6, cPouDiv(),,,, "Importe", .T., 100, .F., {} )

      oDbf:AddIndex( "cCodCos", "Costes.Cdx", "cCodCos",,, .F., .F., "Código",,, .T., .F. )
      oDbf:AddIndex( "cDesCos", "Costes.Cdx", "cDesCos",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TCosMaq_Resource( nMode ) ; local Self AS CLASS TCosMaq := QSelf() AS CLASS TCosMaq

    local oDlg
   local oGet

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "costes de maquinaria", "CostesMaquina",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cCodCos, ::oDbf:cCodCos:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cDesCos, ::oDbf:cDesCos:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:nImpCos, ::oDbf:nImpCos:= u ) }, oDlg,, ( cPouDiv() ),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( if( ::lPreSave( oGet, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| if( ::lPreSave( oGet, nMode ), oDlg:end( 1 ), ) } )
   end

   oDlg:bStart := { || oGet:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TCosMaq_lPreSave( oGet, nMode ) ; local Self AS CLASS TCosMaq := QSelf() AS CLASS TCosMaq

   if nMode == 1 .OR. nMode == 4
      if Empty( ::oDbf:cCodCos )
         MsgStop( "Código del coste no puede estar vacío" )
         oGet:SetFocus()
         Return .F.
      end

      if ::oDbf:SeekInOrd( ::oDbf:cCodCos, "CCODCOS" )
         msgStop( "Código existente" )
         oGet:SetFocus()
         return .F.
      end
   end

   if Empty( ::oDbf:cDesCos )
      MsgStop( "La descripción del coste no puede estar vacía." )
      Return .F.
   end

Return .T.
