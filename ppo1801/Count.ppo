#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 32 ".\.\Prg\Count.prg"
static aCountersDocument   := {  {"NPEDPRV", "Pedido a proveedores"                    , .T., .T., .T., .F. }, {"NALBPRV", "Albaran de proveedores"                  , .T., .T., .T., .F. }, {"NFACPRV", "Facturas de proveedores"                 , .T., .T., .T., .T. }, {"NRCTPRV", "Facturas rectificativas de proveedores"  , .T., .T., .T., .T. }, {"NSATCLI", "S.A.T. a clientes"                       , .T., .T., .T., .F. }, {"NPRECLI", "Presupuestos a clientes"                 , .T., .T., .T., .F. }, {"NPEDCLI", "Pedido de clientes"                      , .T., .T., .T., .F. }, {"NALBCLI", "Albaranes de clientes"                   , .T., .T., .T., .F. }, {"NFACCLI", "Facturas a clientes"                     , .T., .T., .T., .T. }, {"NANTCLI", "Anticipos de facturas clientes"          , .T., .T., .T., .F. }, {"NFACREC", "Facturas rectificativas"                 , .T., .T., .T., .T. }, {"NDEPAGE", "Introducción depósitos"                  , .T., .T., .T., .F. }, {"NEXTAGE", "Estado depósitos"                        , .T., .T., .T., .F. }, {"NTIKCLI", "Tickets a clientes"                      , .T., .F., .T., .F. }, {"NPARPRD", "Partes de producción"                    , .T., .T., .T., .F. }, {"NMOVALM", "Movimientos de almacén"                  , .F., .T., .T., .F. }, {"NSESION", "Sesiónes"                                , .F., .F., .T., .F. }, {"NREMESA", "Remesas bancarias"                       , .F., .F., .T., .F. }, {"NCOBCLI", "Cobros de clientes"                      , .F., .F., .T., .F. }, {"NRECPRV", "Recibos de proveedor"                    , .T., .T., .F., .F. }, {"NRECCLI", "Recibos de clientes"                     , .T., .T., .T., .F. }, {"NEXPEDI", "Expedientes"                             , .T., .T., .T., .F. }, {"NCOBAGE", "Liquidación de agentes"                  , .F., .T., .T., .F. }, {"NENTPED", "Entrega a cuenta pedido"                 , .F., .T., .F., .F. }, {"NENTALB", "Entrega a cuenta albarán"                , .F., .T., .F., .F. }, {"NENTSAL", "Entradas y salidas"                      , .F., .F., .T., .F. } }




_HB_CLASS TCounter ; function TCounter ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TCounter", iif( .F., { }, { @HBObject() } ), @TCounter() ) ) ;

   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )
   _HB_MEMBER { documentType } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"documentType"}, .F. )

   _HB_MEMBER { oDialog } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDialog"}, .F. )
   _HB_MEMBER { cTitle } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTitle"}, .F. )

   _HB_MEMBER { documenSerial } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"documenSerial"}, .F. )
   _HB_MEMBER { comboDocumentCounter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"comboDocumentCounter"}, .F. )

   _HB_MEMBER { getDocumentCounter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"getDocumentCounter"}, .F. )
   _HB_MEMBER { documentCounter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"documentCounter"}, .F. )

   _HB_MEMBER New() AS CLASS TCounter; oClass:AddMethod( "New", @TCounter_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenDialog(); oClass:AddMethod( "OpenDialog", @TCounter_OpenDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadTitle(); oClass:AddMethod( "loadTitle", @TCounter_loadTitle(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER searchDocumentCounter(); oClass:AddMethod( "searchDocumentCounter", @TCounter_searchDocumentCounter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER changeDocumentCounter(); oClass:AddMethod( "changeDocumentCounter", @TCounter_changeDocumentCounter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveDocumentCounter(); oClass:AddMethod( "saveDocumentCounter", @TCounter_saveDocumentCounter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TCounter ;



static FUNCTION TCounter_New( nView, documentType ) ; local Self AS CLASS TCounter := QSelf() AS CLASS TCounter

   If( documentType == nil, documentType := "NFACCLI", ) ;

   ::nView                 := nView
   ::documentType          := upper( documentType )

   ::documenSerial         := { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" }[1]
   ::documentCounter       := 0

   ::loadTitle()

RETURN ( self )



static FUNCTION TCounter_OpenDialog( ) ; local Self AS CLASS TCounter := QSelf() AS CLASS TCounter



   ::oDialog = TDialog():New(,,,, ::cTitle, "SETCONTADORES",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   TBitmap():ReDefine( 500, "gc_document_text_pencil_48",, ::oDialog,,, .F., .F.,,, .F.,,, .T. )





   ::comboDocumentCounter := TComboBox():ReDefine( 100, { | u | If( PCount()==0, ::documenSerial, ::documenSerial:= u ) }, { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" }, ::oDialog,,,,,,, .F.,,,,,,, "::comboDocumentCounter",,,,,,, )

   ::comboDocumentCounter:bChange := {|| ::searchDocumentCounter() }







   ::getDocumentCounter := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::documentCounter, ::documentCounter:= u ) }, ::oDialog,, "999999999", {||       ( ::documentCounter > 0 )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )

   ::getDocumentCounter:bChange  := {|| ::changeDocumentCounter() }




   TButton():ReDefine( 1, {||( ::saveDocumentCounter() )}, ::oDialog,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   ::oDialog:bStart              := {|| ::searchDocumentCounter() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

RETURN ( self )



static FUNCTION TCounter_loadTitle( ) ; local Self AS CLASS TCounter := QSelf() AS CLASS TCounter

   local nScan

   ::cTitle    := "Establecer contadores"

   nScan       := ascan( aCountersDocument, {|a| a[1] == ::documentType } )
   if nScan <> 0
      ::cTitle := aCountersDocument[nScan, 2]
   end

RETURN ( self )



static FUNCTION TCounter_searchDocumentCounter( ) ; local Self AS CLASS TCounter := QSelf() AS CLASS TCounter

   local counter  := 0

   if !empty( ::documenSerial ) .AND. D():gotoContadores( ::documentType, ::nView )
      counter     := ( D():Contadores( ::nView ) )->( fieldget( fieldpos( ::documenSerial ) ) )
   end

   ::getDocumentCounter:cText( counter )

RETURN ( .T. )



static FUNCTION TCounter_changeDocumentCounter( ) ; local Self AS CLASS TCounter := QSelf() AS CLASS TCounter

   ::comboDocumentCounter:Disable()

RETURN ( .T. )



static FUNCTION TCounter_saveDocumentCounter( ) ; local Self AS CLASS TCounter := QSelf() AS CLASS TCounter

   local fieldPosition

   if empty( ::documenSerial )
      msgStop( "La serie del documento esta vacia" )
      RETURN ( .F. )
   end

   fieldPosition     := ( D():Contadores( ::nView ) )->( fieldPos( ::documenSerial ) )
   if ( fieldPosition == 0 )
      msgStop( "Campo no encontrado" )
      RETURN ( .F. )
   end

   if D():gotoContadores( ::documentType, ::nView ) .AND. dblock( D():Contadores( ::nView ) )
      ( D():Contadores( ::nView ) )->( fieldput( fieldPosition, ::documentCounter ) )
      ( D():Contadores( ::nView ) )->( dbunlock() )
   end

   ::oDialog:end( 1 )

RETURN ( .T. )













function putCount( cPath, cField, cSerDoc, nNewNum )

   local nPos

   If( cPath == nil, cPath := cPatEmp(), ) ;

   dbUseArea( .T., cDriver(), cPath + "nCount.Dbf", "COUNT", .T. )
   COUNT->( ordListAdd( cPath + "nCount.Cdx"  ) )

   if COUNT->( dbSeek( cField ) )

      nPos        := COUNT->( fieldpos( cSerDoc ) )

      if nPos     <> 0
         COUNT->( FieldPut( nPos, nNewNum ) )
      end

   end

   COUNT->( dbCloseArea() )

Return ( nil )



Function synCount( cPath, nSemilla )

   local cDoc
   local dbf
   local oError
   local oBlock

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( nSemilla == nil, nSemilla := 1, ) ;

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





      dbUseArea( .T., ( cDriver() ), ( cPath + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPath + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if !( dbf )->( neterr() )

         ( dbf )->( ordsetfocus( "Doc" ) )

         for each cDoc in aCountersDocument

            if cDoc[ 1 ] == "NSESION"
               nSemilla             := 1
            end

            if !( dbf )->( dbSeek( cDoc[ 1 ] ) )

               if dbAppe( dbf )

                  ( dbf )->Doc      := cDoc[ 1 ]
                  ( dbf )->Des      := cDoc[ 2 ]
                  ( dbf )->lSerie   := cDoc[ 3 ]
                  ( dbf )->lDoc     := cDoc[ 4 ]
                  ( dbf )->lCon     := cDoc[ 5 ]
                  ( dbf )->lNFC     := cDoc[ 6 ]
                  ( dbf )->A        := nSemilla
                  ( dbf )->B        := nSemilla
                  ( dbf )->C        := nSemilla
                  ( dbf )->D        := nSemilla
                  ( dbf )->E        := nSemilla
                  ( dbf )->H        := nSemilla
                  ( dbf )->I        := nSemilla
                  ( dbf )->J        := nSemilla
                  ( dbf )->K        := nSemilla
                  ( dbf )->L        := nSemilla
                  ( dbf )->M        := nSemilla
                  ( dbf )->N        := nSemilla
                  ( dbf )->O        := nSemilla
                  ( dbf )->P        := nSemilla
                  ( dbf )->Q        := nSemilla
                  ( dbf )->R        := nSemilla
                  ( dbf )->S        := nSemilla
                  ( dbf )->T        := nSemilla
                  ( dbf )->U        := nSemilla
                  ( dbf )->V        := nSemilla
                  ( dbf )->W        := nSemilla
                  ( dbf )->X        := nSemilla
                  ( dbf )->Y        := nSemilla
                  ( dbf )->Z        := nSemilla

                  ( dbf )->( dbUnLock() )
               end

            else

               if ( dbf )->( dbrlock() )
                  ( dbf )->lSerie   := cDoc[ 3 ]
                  ( dbf )->lDoc     := cDoc[ 4 ]
                  ( dbf )->lCon     := cDoc[ 5 ]
                  ( dbf )->lNFC     := cDoc[ 6 ]
                  ( dbf )->( dbunlock() )
               end

            end

         next

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir la tabla de contadores" )

   end

   ErrorBlock( oBlock )

   ( dbf )->( dbCloseArea() )

Return nil





Function IsCount()

   if !lExistTable( cPatEmp() + "nCount.Dbf" )
      mkCount( cPatEmp() )
   end

   if !lExistIndex( cPatEmp() + "nCount.Cdx" )
      rxCount( cPatEmp() )
   end

   synCount( cPatEmp() )

Return ( .T. )



FUNCTION mkCount( cPath, oMeter, nSemilla )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "nCount.Dbf" )
      CreateFiles( cPath, oMeter, nSemilla )
   end

   if !lExistIndex( cPath + "nCount.Cdx" )
      rxCount( cPath )
   end

RETURN .T.



FUNCTION rxCount( cPath, oMeter )

   local n
   local dbf

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "nCount.Dbf" )
      CreateFiles( cPath, oMeter )
   end



   dbUseArea( .T., cDriver(), cPath + "nCount.Dbf", cCheckArea( "nCount", @dbf ), .F. )

   if !( dbf )->( netErr() )

      n           := ( dbf )->( fCount() )

      ( dbf )->( dbCloseArea() )

      if n < len( aItmCount() )

         dbCreate( cPatEmpTmp() + "nCount.Dbf", aSqlStruct( aItmCount() ), cDriver() )
         appDbf( cPath, cPatEmpTmp(), "nCount" )

         fEraseTable( cPath + "nCount.Dbf" )
         fRenameTable( cPatEmpTmp() + "nCount.Dbf", cPath + "nCount.Dbf" )

      end

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de contadores", "Reindexando contadores" )

      return nil

   end

   fErase( cPath + "nCount.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "nCount.Dbf", cCheckArea( "NCOUNT", @dbf ), .F. )

   if !( dbf )->( neterr() )

      ( dbf )->( __dbPack() )

      ( dbf )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbf )->( ordCreate( cPath + "nCount.Cdx", "Doc", "Upper( Doc )", {|| Upper( Field->Doc ) } ) )

      ( dbf )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbf )->( ordCreate( cPath + "nCount.Cdx", "Des", "Upper( Des )", {|| Upper( Field->Des ) } ) )

      ( dbf )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbf )->( ordCreate( cPath + "nCount.Cdx", "cCodDlg", "cCodDlg", {|| Field->cCodDlg } ) )

      ( dbf )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de contadores", "Reindexando contadores" )

   end

Return ( nil )



Function toAdsCount( cPath )

   local dbf

   dbUseArea( .T., cDriver(), cPath + "nCount.Dbf", cCheckArea( "nCount", @dbf ), .F., .F. )

   if !( dbf )->( netErr() )

      __dbCopy( ( "nCount.Adt" ), { },,,,, .F., "ADT",, )

      ( dbf )->( dbCloseArea() )

   end

Return ( nil )



Static Function CreateFiles( cPath, oMeter, nSemilla, cPathOld )

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( nSemilla == nil, nSemilla := 1, ) ;

   if !lExistTable( cPath + "nCount.Dbf" )
      dbCreate( cPath + "nCount.Dbf", aSqlStruct( aItmCount() ), cDriver() )
   end

   rxCount( cPath )

Return nil



Function aItmCount()

   local aItmCount   := {}

   aAdd( aItmCount,  {  "cCodDlg", "C",  2, 0 } )
   aAdd( aItmCount,  {  "Doc",     "C", 10, 0 } )
   aAdd( aItmCount,  {  "Des",     "C", 30, 0 } )
   aAdd( aItmCount,  {  "lSerie",  "L",  1, 0 } )
   aAdd( aItmCount,  {  "cSerie",  "C",  1, 0 } )
   aAdd( aItmCount,  {  "A",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "B",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "C",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "D",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "E",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "F",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "G",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "H",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "I",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "J",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "K",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "L",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "M",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "N",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "O",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "P",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "Q",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "R",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "S",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "T",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "U",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "V",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "W",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "X",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "Y",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "Z",       "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasA", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasB", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasC", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasD", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasE", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasF", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasG", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasH", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasI", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasJ", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasK", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasL", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasM", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasN", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasO", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasP", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasQ", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasR", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasS", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasT", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasU", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasV", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasW", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasX", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasY", "N",  9, 0 } )
   aAdd( aItmCount,  {  "CopiasZ", "N",  9, 0 } )
   aAdd( aItmCount,  {  "lDoc",    "L",  1, 0 } )
   aAdd( aItmCount,  {  "DocA",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocB",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocC",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocD",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocE",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocF",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocG",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocH",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocI",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocJ",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocK",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocL",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocM",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocN",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocO",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocP",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocQ",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocR",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocS",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocT",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocU",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocV",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocW",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocX",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocY",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "DocZ",    "C",  3, 0 } )
   aAdd( aItmCount,  {  "cNFCA",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCB",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCC",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCD",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCE",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCF",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCG",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCH",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCI",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCJ",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCK",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCL",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCM",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCN",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCO",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCP",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCQ",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCR",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCS",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCT",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCU",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCV",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCW",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCX",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCY",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "cNFCZ",   "C", 20, 0 } )
   aAdd( aItmCount,  {  "nNFCA",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCB",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCC",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCD",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCE",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCF",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCG",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCH",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCI",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCJ",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCK",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCL",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCM",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCN",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCO",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCP",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCQ",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCR",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCS",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCT",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCU",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCV",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCW",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCX",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCY",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "nNFCZ",   "C",  9, 0 } )
   aAdd( aItmCount,  {  "lNFC",    "L",  1, 0 } )
   aAdd( aItmCount,  {  "lCon",    "L",  1, 0 } )
   aAdd( aItmCount,  {  "cPltDfl", "C",250, 0 } )

Return ( aItmCount )



FUNCTION setContador( serieDocumento, numeroDocumento, tipoDocumento, nView )

   local fieldPosition

   BEGIN SEQUENCE WITH {| oErr | Break( oErr ) }

      fieldPosition     := ( D():Contadores( nView ) )->( fieldPos( serieDocumento ) )

      if fieldPosition <> 0

         if ( D():Contadores( nView ) )->( dbseek( upper( tipoDocumento ) ) ) .AND. dblock( D():Contadores( nView ) )
            ( D():Contadores( nView ) )->( fieldput( fieldPosition, numeroDocumento ) )
            ( D():Contadores( nView ) )->( dbunlock() )
         end

      end

   RECOVER

      msgStop( "Imposible establecer contador" )

   end

RETURN ( nil )
