#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Ctarem.prg"
_HB_CLASS TCtaRem ; function TCtaRem ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TCtaRem", iif( .T., { @TMant() }, { @HBObject() } ), @TCtaRem() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_portfolio_folder_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )

   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER { oBanco } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBanco"}, .F. )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TCtaRem_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TCtaRem_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TCtaRem_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenService( lExclusive); oClass:AddMethod( "OpenService", @TCtaRem_OpenService(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TCtaRem_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGetCtaRem( cCodCta, oSay); oClass:AddMethod( "lGetCtaRem", @TCtaRem_lGetCtaRem(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cRetCtaRem( cCodCta, oSay); oClass:AddMethod( "cRetCtaRem", @TCtaRem_cRetCtaRem(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cRetCtaCon( cCodCta); oClass:AddMethod( "cRetCtaCon", @TCtaRem_cRetCtaCon(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cRetCtaDto( cCodCta); oClass:AddMethod( "cRetCtaDto", @TCtaRem_cRetCtaDto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dFechaFirma(); oClass:AddInline( "dFechaFirma", {|Self, cCodCta | ( ( Self ) ), ( if( ::oDbf:SeekInOrd( cCodCta, "cCodCta" ), ::oDbf:dFirPre, ctod("") ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lValidResource( nMode, oDlg); oClass:AddMethod( "lValidResource", @TCtaRem_lValidResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lCargaBanco(); oClass:AddMethod( "lCargaBanco", @TCtaRem_lCargaBanco(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TCtaRem ;



static FUNCTION TCtaRem_OpenFiles( lExclusive ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local lOpen          := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles()
      end

      ::oBanco          := TBancos():Create()
      ::oBanco:OpenFiles()

      ::oDbf:Activate( .F., !( lExclusive ) )

      ::cFirstKey       := ::oDbf:cCodCta

   RECOVER USING oError

      lOpen             := .F.

      ::CloseFiles()

      msgStop( "Imposible abrir todas las bases de datos de cuentas de remesas." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TCtaRem_OpenService( lExclusive, cPath ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local lOpen          := .T.
   local oBlock
   local oError

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      ::CloseFiles()

      msgStop( "Imposible abrir todas las bases de datos de cuentas de remesas." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TCtaRem_CloseFiles( ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   if !Empty( ::oDbf ) .AND. ::oDbf:Used()
      ::oDbf:End()
   end

   if !Empty( ::oBanco )
      ::oBanco:End()
   end

   ::oDbf      := nil
   ::oBanco    := nil

RETURN .T.



static FUNCTION TCtaRem_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   oDbf := DbfServer( "CTAREM.DBF", "CTAREM" ):New( "CTAREM.DBF", "CTAREM", ( cDriver ), "Cuentas de remesas", ( cPath ) )

      oDbf:AddField( "cCodCta", "C", 3, 0, "@!",,,, "Código", .F., 40, .F., {} )
      oDbf:AddField( "cNomCta", "C", 40, 0, "@!",,,, "Nombre", .F., 240, .F., {} )
      oDbf:AddField( "cDirCta", "C", 80, 0,,,,, "Domicilio", .F., 340, .F., {} )

      oDbf:AddField( "cPaisIBAN", "C", 2, 0, "@!",,,, "País IBAN", .F.,, .T., {} )
      oDbf:AddField( "cCtrlIBAN", "C", 2, 0, "99",,,, "Dígito de control IBAN", .F.,, .T., {} )

      oDbf:AddField( "cEntBan", "C", 4, 0, "9999",,,, "Entidad", .F.,, .T., {} )
      oDbf:AddField( "cAgcBan", "C", 4, 0, "9999",,,, "Agencia", .F.,, .T., {} )
      oDbf:AddField( "cDgcBan", "C", 2, 0, "99",,,, "DC", .F.,, .T., {} )
      oDbf:AddField( "cCtaBan", "C", 10, 0, "9999999999",,,, "Cuenta", .F.,, .T., {} )



      oDbf:AddField( "bCtaBnc", "B", 24, 0,,,, {|| oDbf:FieldGetByName( "cPaisIBAN" ) + oDbf:FieldGetByName( "cCtrlIBAN" ) + "-" + oDbf:FieldGetByName( "cEntBan" ) + "-" + oDbf:FieldGetByName( "cAgcBan" ) + "-" + oDbf:FieldGetByName( "cDgcBan" ) + "-" + oDbf:FieldGetByName( "cCtaBan" ) }, "Cuenta bancaria", .F., 200, .F., {} )

      oDbf:AddField( "cSufCta", "C", 3, 0, "@!", "000",,, "Sufijo", .F.,, .T., {} )
      oDbf:AddField( "cSufN58", "C", 3, 0, "@!",,,, "Sufijo Norma 58", .F.,, .T., {} )

      oDbf:AddField( "cCodPre", "C", 2, 0, "99",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cNifPre", "C", 9, 0, "@!",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cNomPre", "C", 40, 0, "@!",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cEntPre", "C", 4, 0, "9999",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cAgcPre", "C", 4, 0, "9999",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cPaiPre", "C", 2, 0, "@!",,,, "", .F.,, .T., {} )
      oDbf:AddField( "dFirPre", "D", 8, 0, "",,,, "", .F.,, .T., {} )

      oDbf:AddField( "cCodAcr", "C", 2, 0, "99",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cPaiAcr", "C", 2, 0, "@!",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cNifAcr", "C", 9, 0, "@!",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cNomAcr", "C", 40, 0, "@!",,,, "", .F.,, .T., {} )
      oDbf:AddField( "cDirAcr", "C", 60, 0,,,,, "", .F.,, .T., {} )
      oDbf:AddField( "cPosAcr", "C", 15, 0,,,,, "", .F.,, .T., {} )
      oDbf:AddField( "cPobAcr", "C", 40, 0,,,,, "", .F.,, .T., {} )
      oDbf:AddField( "cProAcr", "C", 40, 0,,,,, "", .F.,, .T., {} )

      oDbf:AddField( "cSubCta", "C", 12, 0,,,,, "", .F.,, .T., {} )
      oDbf:AddField( "cCtaDto", "C", 12, 0,,,,, "", .F.,, .T., {} )
      oDbf:AddField( "cCodIne", "C", 6, 0,,,,, "", .F.,, .T., {} )
      oDbf:AddField( "cBanco", "C", 50, 0,,,,, "", .F.,, .T., {} )

      oDbf:AddIndex( "cCodCta", "CtaRem.Cdx", "cCodCta",,, .F., .F., "Código",,, .T., .F. )
      oDbf:AddIndex( "cNomCta", "CtaRem.Cdx", "cNomCta",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TCtaRem_Resource( nMode ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

    local oDlg
   local oGet
   local oGetCta
   local oGetDto
   local cGetSubCta  := ""
   local oGetSubCta
   local cGetCtaDto  := ""
   local oGetCtaDto
   local oGetDgtBan
   local oBanco
   local oPaisIBAN
   local oCtrlIBAN
   local oEntBnc
   local oSucBnc
   local oCtaBnc
   local oEntPre
   local oAgcPre

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "cuentas de remesas", "CtaRem",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodCta, ::oDbf:cCodCta:= u ) }, oDlg,, ::oDbf:FieldByName( "cCodCta" ):cPict, {||    NotValid( oGet, ::oDbf:cAlias, .T., "0" )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomCta, ::oDbf:cNomCta:= u ) }, oDlg,, ::oDbf:FieldByName( "cNomCta" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cDirCta, ::oDbf:cDirCta:= u ) }, oDlg,, ::oDbf:FieldByName( "cDirCta" ):cPict,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oBanco := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, ::oDbf:cBanco, ::oDbf:cBanco:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oBanco:bHelp   := {|| ::lCargaBanco( oBanco, oEntBnc, oSucBnc, oGetDgtBan, oCtaBnc, oEntPre, oAgcPre ) }






      oPaisIBAN := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:cPaisIBAN, ::oDbf:cPaisIBAN:= u ) }, oDlg,, ::oDbf:FieldByName( "cPaisIBAN" ):cPict, {||    ( lIbanDigit( ::oDbf:cPaisIBAN, ::oDbf:cEntBan, ::oDbf:cAgcBan, ::oDbf:cDgcBan, ::oDbf:cCtaBan, oCtrlIBAN ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oCtrlIBAN := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, ::oDbf:cCtrlIBAN, ::oDbf:cCtrlIBAN:= u ) }, oDlg,, ::oDbf:FieldByName( "cAgcBan" ):cPict, {||    ( oPaisIBAN:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oEntBnc := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, ::oDbf:cEntBan, ::oDbf:cEntBan:= u ) }, oDlg,, ::oDbf:FieldByName( "cEntBan" ):cPict, {||    ( lCalcDC( ::oDbf:cEntBan, ::oDbf:cAgcBan, ::oDbf:cDgcBan, ::oDbf:cCtaBan, oGetDgtBan, ::oDbf:cPaisIBAN ), oPaisIBAN:lValid() )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oSucBnc := TGetHlp():ReDefine( 133, { | u | If( PCount()==0, ::oDbf:cAgcBan, ::oDbf:cAgcBan:= u ) }, oDlg,, ::oDbf:FieldByName( "cAgcBan" ):cPict, {||    ( lCalcDC( ::oDbf:cEntBan, ::oDbf:cAgcBan, ::oDbf:cDgcBan, ::oDbf:cCtaBan, oGetDgtBan, ::oDbf:cPaisIBAN ), oPaisIBAN:lValid() )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oGetDgtBan := TGetHlp():ReDefine( 134, { | u | If( PCount()==0, ::oDbf:cDgcBan, ::oDbf:cDgcBan:= u ) }, oDlg,, ::oDbf:FieldByName( "cDgcBan" ):cPict, {||    ( lCalcDC( ::oDbf:cEntBan, ::oDbf:cAgcBan, ::oDbf:cDgcBan, ::oDbf:cCtaBan, oGetDgtBan, ::oDbf:cPaisIBAN ), oPaisIBAN:lValid() )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oCtaBnc := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, ::oDbf:cCtaBan, ::oDbf:cCtaBan:= u ) }, oDlg,, ::oDbf:FieldByName( "cCtaBan" ):cPict, {||    ( lCalcDC( ::oDbf:cEntBan, ::oDbf:cAgcBan, ::oDbf:cDgcBan, ::oDbf:cCtaBan, oGetDgtBan, ::oDbf:cPaisIBAN ), oPaisIBAN:lValid() )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oDbf:cSufCta, ::oDbf:cSufCta:= u ) }, oDlg,, ::oDbf:FieldByName( "cSufCta" ):cPict,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )
















      oGetCta := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, ::oDbf:cSubCta, ::oDbf:cSubCta:= u ) }, oDlg,, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( oGetCta, {  ::oDbf:cSubCta, ::oDbf:cNomCta, "", ::oDbf:cDirCta, "", "", "" }, oGetSubCta ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( oGetCta, oGetSubCta ) )}, nil, "LUPA",, )




        oGetSubCta := TGetHlp():ReDefine( 241, { | u | If( PCount()==0, cGetSubCta, cGetSubCta:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )




















      oGetDto := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, ::oDbf:cCtaDto, ::oDbf:cCtaDto:= u ) }, oDlg,, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( oGetDto, {  ::oDbf:cSubCta, ::oDbf:cNomCta, "", ::oDbf:cDirCta, "", "", "" }, oGetCtaDto ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( oGetDto, oGetCtaDto ) )}, nil, "LUPA",, )




      oGetCtaDto := TGetHlp():ReDefine( 251, { | u | If( PCount()==0, cGetCtaDto, cGetCtaDto:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )









      TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oDbf:cCodPre, ::oDbf:cCodPre:= u ) }, oDlg,, ::oDbf:FieldByName( "cCodPre" ):cPict,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 270, { | u | If( PCount()==0, ::oDbf:cPaiPre, ::oDbf:cPaiPre:= u ) }, oDlg,, ::oDbf:FieldByName( "cPaiPre" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::oDbf:cNomPre, ::oDbf:cNomPre:= u ) }, oDlg,, ::oDbf:FieldByName( "cNomPre" ):cPict,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::oDbf:cNifPre, ::oDbf:cNifPre:= u ) }, oDlg,, ::oDbf:FieldByName( "cNifPre" ):cPict,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oEntPre := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, ::oDbf:cEntPre, ::oDbf:cEntPre:= u ) }, oDlg,, ::oDbf:FieldByName( "cEntPre" ):cPict,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oAgcPre := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, ::oDbf:cAgcPre, ::oDbf:cAgcPre:= u ) }, oDlg,, ::oDbf:FieldByName( "cAgcPre" ):cPict,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 260, { | u | If( PCount()==0, ::oDbf:cCodIne, ::oDbf:cCodIne:= u ) }, oDlg,,,,,,,,, .T., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 280, { | u | If( PCount()==0, ::oDbf:dFirPre, ::oDbf:dFirPre:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      TGetHlp():ReDefine( 400, { | u | If( PCount()==0, ::oDbf:cCodAcr, ::oDbf:cCodAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cCodAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 410, { | u | If( PCount()==0, ::oDbf:cPaiAcr, ::oDbf:cPaiAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cPaiAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 420, { | u | If( PCount()==0, ::oDbf:cNomAcr, ::oDbf:cNomAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cNomAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 430, { | u | If( PCount()==0, ::oDbf:cNifAcr, ::oDbf:cNifAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cNifAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 440, { | u | If( PCount()==0, ::oDbf:cDirAcr, ::oDbf:cDirAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cDirAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 450, { | u | If( PCount()==0, ::oDbf:cPosAcr, ::oDbf:cPosAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cPosAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 460, { | u | If( PCount()==0, ::oDbf:cPobAcr, ::oDbf:cPobAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cPobAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 470, { | u | If( PCount()==0, ::oDbf:cProAcr, ::oDbf:cProAcr:= u ) }, oDlg,, ::oDbf:FieldByName( "cProAcr" ):cPict,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      TButton():ReDefine( 1, {||( ::lValidResource( nMode, oGet, oDlg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ::lValidResource( nMode, oGet, oDlg ) } )
   end

   oDlg:bStart    := { || oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TCtaRem_lCargaBanco( oBnc, oEnt, oSuc, oDig, oCta, oEntPre, oAgcPre ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local cBanco   := ::oBanco:Buscar( , "cCodBnc" )

   if !Empty( cBanco )

      oBnc:cText( oRetFld( cBanco, ::oBanco:oDbf, "cNomBnc" ) )
      oEnt:cText( oRetFld( cBanco, ::oBanco:oDbf, "cEntBnc" ) )
      oSuc:cText( oRetFld( cBanco, ::oBanco:oDbf, "cOfiBnc" ) )
      oDig:cText( Space( 2 ) )
      oCta:cText( Space( 10 ) )

      oEntPre:cText( oRetFld( cBanco, ::oBanco:oDbf, "cEntBnc" ) )
      oAgcPre:cText( oRetFld( cBanco, ::oBanco:oDbf, "cOfiBnc" ) )

   end

Return .T.



static FUNCTION TCtaRem_lValidResource( nMode, oGet, oDlg ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   if nMode == 1 .OR. nMode == 4

      if ::oDbf:SeekInOrd( ::oDbf:cCodCta, "cCodCta" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodCta ) )
         return nil
      end

   end

   if Empty( ::oDbf:cNomCta )
      MsgStop( "El nombre de la cuenta de remesa no puede estar vacío." )
      Return nil
   end

Return ( oDlg:end( 1 ) )



static FUNCTION TCtaRem_lGetCtaRem( oCodCta, oSay ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local lRet     := .F.
   local xValor   := oCodCta:VarGet()

   if Empty( xValor )
      if( oSay <> nil, oSay:cText( "" ), )
      return .T.
   else
      xValor      := RJustObj( oCodCta, "0" )
   end

   if ::oDbf:SeekInOrd( xValor, "cCodCta" )
      oSay:cText( ::oDbf:cNomCta )
      lRet        := .T.
   else
      msgStop( "Cuenta de remesa no encontrada" )
   end

RETURN ( lRet )



static FUNCTION TCtaRem_cRetCtaRem( cCodCta ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local cRet  := ""

   if !Empty( ::oDbf )
      if ::oDbf:SeekInOrd( cCodCta, "cCodCta" )
         cRet  := ::oDbf:cNomCta
      end
   end

RETURN ( cRet )



static FUNCTION TCtaRem_cRetCtaCon( cCodCta ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local cRet  := ""

   if ::oDbf:SeekInOrd( cCodCta, "cCodCta" )
      cRet     := ::oDbf:cSubCta
   end

RETURN ( cRet )



static FUNCTION TCtaRem_cRetCtaDto( cCodCta ) ; local Self AS CLASS TCtaRem := QSelf() AS CLASS TCtaRem

   local cRet  := ""

   if ::oDbf:SeekInOrd( cCodCta, "cCodCta" )
      cRet     := ::oDbf:cCtaDto
   end

RETURN ( cRet )
