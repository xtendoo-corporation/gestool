#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\CuentasRemesaController.prg"
_HB_CLASS CuentasRemesaController ; function CuentasRemesaController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CuentasRemesaController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @CuentasRemesaController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER { oBancosController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBancosController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @CuentasRemesaController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @CuentasRemesaController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CuentasRemesaController ;



static FUNCTION CuentasRemesaController_New( oSenderController ) ; local Self AS CLASS CuentasRemesaController := QSelf() AS CLASS CuentasRemesaController

   ::Super:New( oSenderController )

   ::cTitle                         := "Cuentas de remesa"

   ::cName                          := "cuentas_remesa"



   ::hImage                         := {  "16" => "gc_notebook2_16", "32" => "gc_notebook2_32", "48" => "gc_notebook2_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLCuentasRemesaModel():New( self )

   ::oBrowseView                    := CuentasRemesaBrowseView():New( self )

   ::oDialogView                    := CuentasRemesaView():New( self )

   ::oBancosController              := CuentasBancariasController():new( self )

   ::oValidator                     := CuentasRemesaValidator():New( self, ::oDialogView )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oRepository                    := CuentasRemesaRepository():New( self )

   ::oGetSelector                   := GetSelector():New( self )

   ::oModel:setEvent( "loadedBlankBuffer",            {|| ::oBancosController:loadBlankBuffer() } )
   ::oModel:setEvent( "insertedBuffer",               {|| ::oBancosController:insertBuffer() } )

   ::oModel:setEvent( "loadedCurrentBuffer",          {|| ::oBancosController:loadedCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "updatedBuffer",                {|| ::oBancosController:updateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "loadedDuplicateCurrentBuffer", {|| ::oBancosController:loadedDuplicateCurrentBuffer( ::getUuid() ) } )
   ::oModel:setEvent( "loadedDuplicateBuffer",        {|| ::oBancosController:loadedDuplicateBuffer( ::getUuid() ) } )

   ::oModel:setEvent( "deletedSelection",             {|| ::oBancosController:deleteBuffer( ::getUuidFromRecno( ::oBrowseView:getBrowse():aSelected ) ) } )

RETURN ( Self )



static FUNCTION CuentasRemesaController_End( ) ; local Self AS CLASS CuentasRemesaController := QSelf() AS CLASS CuentasRemesaController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oCamposExtraValoresController:End()

   ::Super:End()

RETURN ( Self )











_HB_CLASS CuentasRemesaBrowseView ; function CuentasRemesaBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CuentasRemesaBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @CuentasRemesaBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @CuentasRemesaBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CuentasRemesaBrowseView ;



static FUNCTION CuentasRemesaBrowseView_addColumns( ) ; local Self AS CLASS CuentasRemesaBrowseView := QSelf() AS CLASS CuentasRemesaBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "cuenta"
      :cHeader             := "Cuenta bancaria"
      :nWidth              := 300
      :bEditValue          := {|| transform( ::getRowSet():fieldGet( "cuenta" ), "@R NNNN-NNNN-NNNN-NN-NNNNNNNNNNN" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS CuentasRemesaView ; function CuentasRemesaView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CuentasRemesaView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @CuentasRemesaView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @CuentasRemesaView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER startActivate(); oClass:AddMethod( "startActivate", @CuentasRemesaView_startActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CuentasRemesaView ;



static FUNCTION CuentasRemesaView_startActivate( ) ; local Self AS CLASS CuentasRemesaView := QSelf() AS CLASS CuentasRemesaView

   ::oController:oBancosController:oGetSelector:Start()

RETURN ( self )



static FUNCTION CuentasRemesaView_Activate( ) ; local Self AS CLASS CuentasRemesaView := QSelf() AS CLASS CuentasRemesaView

   local oSayCamposExtra



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "cuenta remesa", "CUENTA_REMESA",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   ::oSayCamposExtra := TSay():ReDefine( 120, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }


   ::oController:oBancosController:oDialogView:ExternalRedefine( ::oDialog )







   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "sufijo" ], ::oController:oModel:hBuffer[ "sufijo" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo_ine" ], ::oController:oModel:hBuffer[ "codigo_ine" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cuenta_banco" ], ::oController:oModel:hBuffer[ "cuenta_banco" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil, "LUPA",, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cuenta_descuento" ], ::oController:oModel:hBuffer[ "cuenta_descuento" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil, "LUPA",, )




   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "presentador_codigo" ], ::oController:oModel:hBuffer[ "presentador_codigo" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "presentador_iso_pais" ], ::oController:oModel:hBuffer[ "presentador_iso_pais" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "presentador_nombre" ], ::oController:oModel:hBuffer[ "presentador_nombre" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "presentador_nif" ], ::oController:oModel:hBuffer[ "presentador_nif" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "acreedor_codigo" ], ::oController:oModel:hBuffer[ "acreedor_codigo" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 230, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "acreedor_iso_pais" ], ::oController:oModel:hBuffer[ "acreedor_iso_pais" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 240, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "acreedor_nombre" ], ::oController:oModel:hBuffer[ "acreedor_nombre" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 250, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "acreedor_nif" ], ::oController:oModel:hBuffer[ "acreedor_nif" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::startActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()

RETURN ( ::oDialog:nResult )








_HB_CLASS CuentasRemesaValidator ; function CuentasRemesaValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CuentasRemesaValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @CuentasRemesaValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @CuentasRemesaValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

 oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CuentasRemesaValidator ;



static FUNCTION CuentasRemesaValidator_getValidators( ) ; local Self AS CLASS CuentasRemesaValidator := QSelf() AS CLASS CuentasRemesaValidator




   ::hValidators  := {  "nombre" =>                {  "required"           => "El nombre es un dato requerido", "unique"             => "El nombre introducido ya existe" }, "codigo" =>                {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe" } }
RETURN ( ::hValidators )










_HB_CLASS SQLCuentasRemesaModel ; function SQLCuentasRemesaModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLCuentasRemesaModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLCuentasRemesaModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "cuentas_remesa", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

  _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLCuentasRemesaModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLCuentasRemesaModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLCuentasRemesaModel ;



static FUNCTION SQLCuentasRemesaModel_getInitialSelect( ) ; local Self AS CLASS SQLCuentasRemesaModel := QSelf() AS CLASS SQLCuentasRemesaModel












   local cSelect  := "SELECT cuentas_remesa.id,"                                                               + " " +  "cuentas_remesa.uuid,"                                                                 + " " +  "cuentas_remesa.codigo,"                                                               + " " +  "cuentas_remesa.nombre,"                                                               + " " +  "CONCAT( cuentas_bancarias.iban_codigo_pais, "                                         + " " +  "cuentas_bancarias.iban_digito_control, "                                              + " " +  "cuentas_bancarias.cuenta_codigo_entidad, "                                            + " " +  "cuentas_bancarias.cuenta_codigo_oficina, "                                            + " " +  "cuentas_bancarias.cuenta_digito_control, "                                            + " " +  "cuentas_bancarias.cuenta_numero ) AS cuenta"                                          + " " +  "FROM cuentas_remesa"                                                                     + " " +  "INNER JOIN cuentas_bancarias ON cuentas_remesa.uuid = cuentas_bancarias.parent_uuid"  + " "

RETURN ( cSelect )



static FUNCTION SQLCuentasRemesaModel_getColumns( ) ; local Self AS CLASS SQLCuentasRemesaModel := QSelf() AS CLASS SQLCuentasRemesaModel


   hset( ::hColumns, "id",                      {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                    {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )
   ::getEmpresaColumns()



   hset( ::hColumns, "codigo",                  {  "create"    => "VARCHAR( 20 )"                            , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "nombre",                  {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "sufijo",                  {  "create"    => "VARCHAR( 3 )"                            , "default"   => {|| space( 3 ) } }                        )


   hset( ::hColumns, "codigo_ine",              {  "create"    => "VARCHAR( 6 )"                            , "default"   => {|| space( 6 ) } }                        )


   hset( ::hColumns, "cuenta_banco",            {  "create"    => "VARCHAR( 12 )"                           , "default"   => {|| space( 12 ) } }                       )


   hset( ::hColumns, "cuenta_descuento",        {  "create"    => "VARCHAR( 12 )"                           , "default"   => {|| space( 12 ) } }                       )


   hset( ::hColumns, "presentador_codigo",      {  "create"    => "VARCHAR( 2 )"                            , "default"   => {|| space( 2 ) } }                        )


   hset( ::hColumns, "presentador_iso_pais",    {  "create"    => "VARCHAR( 2 )"                            , "default"   => {|| space( 2 ) } }                        )


   hset( ::hColumns, "presentador_nombre",      {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "presentador_nif",         {  "create"    => "VARCHAR( 9 )"                            , "default"   => {|| space( 9 ) } }                        )


   hset( ::hColumns, "acreedor_codigo",         {  "create"    => "VARCHAR( 2 )"                            , "default"   => {|| space( 2 ) } }                        )


   hset( ::hColumns, "acreedor_iso_pais",       {  "create"    => "VARCHAR( 2 )"                            , "default"   => {|| space( 2 ) } }                        )


   hset( ::hColumns, "acreedor_nombre",         {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "acreedor_nif",            {  "create"    => "VARCHAR( 9 )"                            , "default"   => {|| space( 9 ) } }                        )

   ::getTimeStampColumns()

RETURN ( ::hColumns )











_HB_CLASS CuentasRemesaRepository ; function CuentasRemesaRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CuentasRemesaRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @CuentasRemesaRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLCuentasRemesaModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CuentasRemesaRepository ;