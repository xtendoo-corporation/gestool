#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\presenter\terceros\Customer.prg"
_HB_CLASS Customer ; function Customer ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "Customer", iif( .T., { @Editable() }, { @HBObject() } ), @Customer() ) ) ;

   _HB_MEMBER { oClienteIncidencia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oClienteIncidencia"}, .F. )
   _HB_MEMBER { oGroupCustomer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGroupCustomer"}, .F. )

   _HB_MEMBER { oViewIncidencia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oViewIncidencia"}, .F. )

   _HB_MEMBER { oGridCustomer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGridCustomer"}, .F. )

   _HB_MEMBER { oViewSales } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oViewSales"}, .F. )

   _HB_MEMBER { cTipoCliente } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipoCliente"}, .F. )
   _HB_MEMBER { hTipoCliente } ; oClass:AddMultiData(, { "1" => "Clientes", "2" => "Potenciales", "3" => "Web" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hTipoCliente"}, .F. )

   _HB_MEMBER { cIdCliente } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIdCliente"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @Customer_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Init( nView); oClass:AddMethod( "Init", @Customer_Init(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create(); oClass:AddMethod( "Create", @Customer_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runNavigatorCustomer(); oClass:AddMethod( "runNavigatorCustomer", @Customer_runNavigatorCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER openFiles(); oClass:AddMethod( "openFiles", @Customer_openFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER closeFiles(); oClass:AddInline( "closeFiles", {|Self | ( ( Self ) ), ( D():DeleteView( ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setEnviroment(); oClass:AddInline( "setEnviroment", {|Self | ( ( Self ) ), ( ::setDataTable( "Client" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER showIncidencia(); oClass:AddInline( "showIncidencia", {|Self | ( ( Self ) ), ( ::oClienteIncidencia:showNavigator() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource(); oClass:AddInline( "Resource", {|Self | ( ( Self ) ), ( ::oViewEdit:Resource() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setFilterAgentes(); oClass:AddMethod( "setFilterAgentes", @Customer_setFilterAgentes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPreSaveEdit(); oClass:AddInline( "onPreSaveEdit", {|Self | ( ( Self ) ), ( .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER onPreEnd(); oClass:AddInline( "onPreEnd", {|Self | ( ( Self ) ), ( .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPostGetDocumento(); oClass:AddMethod( "onPostGetDocumento", @Customer_onPostGetDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER onPreSaveAppend(); oClass:AddMethod( "onPreSaveAppend", @Customer_onPreSaveAppend(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER editCustomer( Codigo); oClass:AddMethod( "editCustomer", @Customer_editCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER salesCustomer( Codigo); oClass:AddMethod( "salesCustomer", @Customer_salesCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FilterSalesCustomerTable( cTextFilter); oClass:AddMethod( "FilterSalesCustomerTable", @Customer_FilterSalesCustomerTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RefreshBrowseCustomerSales(); oClass:AddMethod( "RefreshBrowseCustomerSales", @Customer_RefreshBrowseCustomerSales(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER liqInvoice( cNumFac); oClass:AddMethod( "liqInvoice", @Customer_liqInvoice(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER visualizaFactura( cNumFac); oClass:AddMethod( "visualizaFactura", @Customer_visualizaFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runGridGroupCustomer(); oClass:AddMethod( "runGridGroupCustomer", @Customer_runGridGroupCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lValidGroupCustomer(); oClass:AddMethod( "lValidGroupCustomer", @Customer_lValidGroupCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS Customer ;



static FUNCTION Customer_New( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   if ::OpenFiles()

      ::setFilterAgentes()

      ::Create()

   end

Return ( self )



static FUNCTION Customer_Init( oSender ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   ::nView                                := oSender:nView

   ::Create()

Return ( self )



static FUNCTION Customer_Create( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   ::oViewNavigator                       := CustomerViewSearchNavigator():New( self )
   ::oViewNavigator:setTitleDocumento( "Clientes" )

   ::oGridCustomer                        := CustomerViewSearchNavigator():New( self )
   ::oGridCustomer:setSelectorMode()
   ::oGridCustomer:setTitleDocumento( "Seleccione cliente" )
   ::oGridCustomer:setDblClickBrowseGeneral( {|| ::oGridCustomer:endView() } )

   ::oViewEdit                            := CustomerView():New( self )

   ::oViewSales                           := CustomerSalesViewSearchNavigator():New( self )

   ::oClienteIncidencia                   := CustomerIncidence():New( self )

   ::oGroupCustomer                       := GroupCustomer():init( self )

   ::setEnviroment()

Return ( self )



static FUNCTION Customer_runNavigatorCustomer( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   if !empty( ::oViewNavigator )
      ::oViewNavigator:showView()
   end

   ::CloseFiles()

return ( self )



static FUNCTION Customer_openFiles( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   local oError
   local oBlock
   local lOpenFiles     := .T.

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::nView           := D():CreateView()

      D():Clientes( ::nView )

      D():ClientesDirecciones( ::nView )

      D():FacturasClientes( ::nView )

      D():FacturasClientesLineas( ::nView )

      D():FacturasClientesCobros( ::nView )

   RECOVER USING oError

      lOpenFiles        := .F.

      ApoloMsgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      ::CloseFiles( "" )
   end

Return ( lOpenFiles )



static FUNCTION Customer_onPostGetDocumento( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   local cTipo          := str( hGet( ::hDictionaryMaster, "TipoCliente" ) )

   if !empty( cTipo ) .AND. hHasKey( ::hTipoCliente, cTipo )
      ::cTipoCliente    := hGet( ::hTipoCliente, cTipo )
   end

   if ::lAppendMode()
      hSet( ::hDictionaryMaster, "Codigo", D():getLastKeyClientes( ::nView ) )
   end

Return ( .T. )



static FUNCTION Customer_onPreSaveAppend( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   local nScan
   local nTipoCliente      := 1

   nScan                   := hScan( ::hTipoCliente, {|k,v,i| v == ::cTipoCliente } )
   if nScan <> 0
      nTipoCliente         := val( hGetKeyAt( ::hTipoCliente, nScan ) )
   end

   hSet( ::hDictionaryMaster, "TipoCliente", nTipoCliente )
   hSet( ::hDictionaryMaster, "EnviarInternet", .T. )

Return ( .T. )



static FUNCTION Customer_setFilterAgentes( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   local cCodigoAgente     := accessCode():cAgente

   if !empty( cCodigoAgente )
      ( D():Clientes( ::nView ) )->( dbsetfilter( {|| !Field->lBlqCli .AND. Field->cAgente == cCodigoAgente }, "!lBlqCli .and. cAgente == '" + cCodigoAgente + "'" ) )
      ( D():Clientes( ::nView ) )->( dbgotop() )
   end

Return ( .T. )



static FUNCTION Customer_editCustomer( idCliente ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   if empty( idCliente )
      Return .F.
   end

   D():getStatusClientes( ::nView )

   ( D():Clientes( ::nView ) )->( ordsetfocus( 1 ) )

   if ( D():Clientes( ::nView ) )->( dbseek( idCliente ) )

      if ( nAnd( Auth():Level( "clientes" ), 4 ) <> 0 )
         ::Edit()
      else
         ::Zoom()
      end

   end

   D():setStatusClientes( ::nView )

Return( .T. )



static FUNCTION Customer_salesCustomer( idCliente ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   if empty( idCliente )
      Return .F.
   end

   ::cIdCliente   := idCliente

   D():getStatusFacturasClientes( ::nView )

   ::oViewSales:Resource()

   ( D():FacturasClientes( ::nView ) )->( dbClearFilter() )

   D():setStatusFacturasClientes( ::nView )

Return( .T. )



static FUNCTION Customer_FilterSalesCustomerTable( cTextFilter ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   ( D():FacturasClientes( ::nView ) )->( dbClearFilter() )
   ( D():FacturasClientes( ::nView ) )->( ordsetfocus( "dFecDes" ) )

   do case
      case cTextFilter == "Todas"
         ( D():FacturasClientes( ::nView ) )->( dbsetfilter( {|| Field->cCodCli == ::cIdCliente }, "cCodCli == '" + ::cIdCliente + "'" ) )

      case cTextFilter == "Pendientes"
         ( D():FacturasClientes( ::nView ) )->( dbsetfilter( {|| !Field->lLiquidada .AND. Field->cCodCli == ::cIdCliente }, "!lLiquidada .and. cCodCli == '" + ::cIdCliente + "'" ) )

      case cTextFilter == "Cobradas"
         ( D():FacturasClientes( ::nView ) )->( dbsetfilter( {|| Field->lLiquidada .AND. Field->cCodCli == ::cIdCliente }, "lLiquidada .and. cCodCli == '" + ::cIdCliente + "'" ) )

   end

   ( D():FacturasClientes( ::nView ) )->( dbGoTop() )

   ::oViewSales:oBrowse:Refresh()

return ( .T. )



static FUNCTION Customer_RefreshBrowseCustomerSales( cTextFilter ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   ::FilterSalesCustomerTable( cTextFilter )

   ::oViewSales:oBrowse:Refresh()

Return ( .T. )



static FUNCTION Customer_liqInvoice( cNumFac ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   local nRec        := ( D():FacturasClientesCobros( ::nView ) )->( Recno() )
   local nOrdAnt     := ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( "fNumFac" ) )

   if ( D():FacturasClientesCobros( ::nView ) )->( dbseek( cNumFac ) )


      while ( D():FacturasClientesCobros( ::nView ) )->cSerie + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ) + ( D():FacturasClientesCobros( ::nView ) )->cSufFac == cNumFac .AND. !( D():FacturasClientesCobros( ::nView ) )->( Eof() )

            if !( D():FacturasClientesCobros( ::nView ) )->lCobrado





               if dbLock( D():FacturasClientesCobros( ::nView ) )
                  ( D():FacturasClientesCobros( ::nView ) )->dEntrada   := Date()
                  ( D():FacturasClientesCobros( ::nView ) )->lCobrado   := .T.
                  ( D():FacturasClientesCobros( ::nView ) )->dFecCre    := GetSysDate()
                  ( D():FacturasClientesCobros( ::nView ) )->cHorCre    := Time()
                  ( D():FacturasClientesCobros( ::nView ) )->( dbUnLock() )
               end





               PrnRecCli( ( D():FacturasClientesCobros( ::nView ) )->cSerie + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ) + ( D():FacturasClientesCobros( ::nView ) )->cSufFac + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumRec ) )

            end

            ( D():FacturasClientesCobros( ::nView ) )->( dbSkip() )

      end

   end





   ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientesCobros( ::nView ) )->( dbGoTo( nRec ) )

   nRec        := ( D():FacturasClientes( ::nView ) )->( Recno() )
   nOrdAnt     := ( D():FacturasClientes( ::nView ) )->( OrdSetFocus( "nNumFac" ) )

   if ( D():FacturasClientes( ::nView ) )->( dbseek( cNumFac ) )








      ChkLqdFacCli( nil, D():FacturasClientes( ::nView ), D():FacturasClientesLineas( ::nView ), D():FacturasClientesCobros( ::nView ), D():AnticiposClientes( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), .F. )
   end

   ( D():FacturasClientes( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientes( ::nView ) )->( dbGoTo( nRec ) )

Return ( .T. )



static FUNCTION Customer_visualizaFactura( cNumFac ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   local oInvoiceCustomer
   local nRecAnt
   local nOrdAnt

   nRecAnt           := ( D():FacturasClientes( ::nView ) )->( Recno() )
   nOrdAnt           := ( D():FacturasClientes( ::nView ) )->( OrdSetFocus( "nNumFac" ) )

   oInvoiceCustomer  := InvoiceCustomer():Create( ::nView )

   if ( D():FacturasClientes( ::nView ) )->( dbSeek( cNumFac ) )
      oInvoiceCustomer:Zoom()
   else
      ApoloMsgStop( "Error al cargar la factura" )
   end

   ( D():FacturasClientes( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientes( ::nView ) )->( dbGoTo( nRecAnt ) )

Return ( .T. )



static FUNCTION Customer_runGridGroupCustomer( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   ::oViewEdit:oCodigoGrupo:Disable()

   if !empty( ::oGroupCustomer:oGridGroupCustomer )

      ::oGroupCustomer:oGridGroupCustomer:showView()

      if ::oGroupCustomer:oGridGroupCustomer:isEndOk()
         ::oViewEdit:SetGetValue( ( D():GrupoClientes( ::nView ) )->cCodGrp, "CodigoGrupo" )
      end

      ::lValidGroupCustomer()

   end

   ::oViewEdit:oCodigoGrupo:Enable()

RETURN ( self )



static FUNCTION Customer_lValidGroupCustomer( ) ; local Self AS CLASS Customer := QSelf() AS CLASS Customer

   local nRec
   local nOrdAnt
   local lValid                  := .F.
   local codigoGroupCustomer     := hGet( ::hDictionaryMaster, "CodigoGrupo" )

   if empty( codigoGroupCustomer )
      RETURN ( .T. )
   end

   ::oViewEdit:oCodigoGrupo:Disable()
   ::oViewEdit:oNombreGrupo:cText( "" )

   nRec                          := ( D():GrupoClientes( ::nView ) )->( recno() )
   nOrdAnt                       := ( D():GrupoClientes( ::nView ) )->( ordsetfocus( "cCodGrp" ) )

   if ( D():GrupoClientes( ::nView ) )->( dbSeek( codigoGroupCustomer ) )

      ::oViewEdit:oCodigoGrupo:cText( ( D():GrupoClientes( ::nView ) )->cCodGrp )
      ::oViewEdit:oNombreGrupo:cText( ( D():GrupoClientes( ::nView ) )->cNomGrp )

      lValid                     := .T.

   else

      apoloMsgStop( "Grupo de cliente no encontrado" )

   end

   ( D():GrupoClientes( ::nView ) )->( ordsetfocus( nOrdAnt ) )
   ( D():GrupoClientes( ::nView ) )->( dbgoto( nRec ) )

   ::oViewEdit:oCodigoGrupo:Enable()

RETURN ( lValid )
