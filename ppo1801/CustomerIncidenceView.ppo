#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\Prg\tablet\view\terceros\CustomerIncidenceView.prg"
_HB_CLASS CustomerIncidenceView ; function CustomerIncidenceView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CustomerIncidenceView", iif( .T., { @ViewBase() }, { @HBObject() } ), @CustomerIncidenceView() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @CustomerIncidenceView_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertControls(); oClass:AddMethod( "insertControls", @CustomerIncidenceView_insertControls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineNombre(); oClass:AddMethod( "defineNombre", @CustomerIncidenceView_defineNombre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineFecha(); oClass:AddMethod( "defineFecha", @CustomerIncidenceView_defineFecha(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineHora(); oClass:AddMethod( "defineHora", @CustomerIncidenceView_defineHora(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineIncidencia(); oClass:AddMethod( "defineIncidencia", @CustomerIncidenceView_defineIncidencia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineCombo(); oClass:AddMethod( "defineCombo", @CustomerIncidenceView_defineCombo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CustomerIncidenceView ;



static FUNCTION CustomerIncidenceView_New( oSender ) ; local Self AS CLASS CustomerIncidenceView := QSelf() AS CLASS CustomerIncidenceView

   ::oSender               := oSender

Return ( self )



static FUNCTION CustomerIncidenceView_insertControls( nMode ) ; local Self AS CLASS CustomerIncidenceView := QSelf() AS CLASS CustomerIncidenceView

   ::defineNombre()

   ::defineCombo()

   ::defineFecha()

   ::defineHora()

Return ( self )



static FUNCTION CustomerIncidenceView_defineCombo( ) ; local Self AS CLASS CustomerIncidenceView := QSelf() AS CLASS CustomerIncidenceView










   TGridSay():Build( {  "nRow"      => 130, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Tipo" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23 } )







   TGridComboBox():Build(  {  "nRow"      => 130, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| iif( empty( u ), ::oSender:cNombreIncidencia, ::oSender:cNombreIncidencia := u ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 25, "aItems"    => D():getTiposIncicencias( ::getView() ) } )

Return ( self )



static FUNCTION CustomerIncidenceView_defineNombre( ) ; local Self AS CLASS CustomerIncidenceView := QSelf() AS CLASS CustomerIncidenceView










   TGridSay():Build( {  "nRow"      => 40, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Incidencia" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23 } )








   TGridMultiGet():Build(  {  "nRow"      => 40, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Nombre" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 50, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerIncidenceView_defineFecha( ) ; local Self AS CLASS CustomerIncidenceView := QSelf() AS CLASS CustomerIncidenceView










   TGridSay():Build( {  "nRow"      => 100, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Fecha" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23 } )







   TGridGet():Build(    {  "nRow"      => 100, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Fecha" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 4.0, ::oDlg ) }, "nHeight"   => 25, "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerIncidenceView_defineHora( ) ; local Self AS CLASS CustomerIncidenceView := QSelf() AS CLASS CustomerIncidenceView











   TGridGet():Build( {  "nRow"      => 100, "nCol"      => {|| GridWidth( 7, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Hora" ) }, "bValid"    => {|| iif( !validTime( hGet( ::oSender:hDictionaryMaster, "Hora" ) ), ::setErrorValidator( "El formato de la hora no es correcto" ), .T. ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 4.0, ::oDlg ) }, "cPict"     => "@R 99:99:99" , "nHeight"   => 25, "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerIncidenceView_defineIncidencia( ) ; local Self AS CLASS CustomerIncidenceView := QSelf() AS CLASS CustomerIncidenceView

   local getIncidencia









   TGridUrllink():Build(               {  "nTop"      => 70, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "cURL"      => "Nombre", "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor() } )








   getIncidencia  := TGridGet():Build( {  "nRow"      => 70, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Nombre" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9.0, ::oDlg ) }, "nHeight"   => 23, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )
