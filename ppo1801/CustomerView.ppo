#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\Prg\tablet\view\terceros\CustomerView.prg"
_HB_CLASS CustomerView ; function CustomerView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "CustomerView", iif( .T., { @ViewBase() }, { @HBObject() } ), @CustomerView() ) ) ;

   _HB_MEMBER { oCheckVisLun } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckVisLun"}, .F. )
   _HB_MEMBER { oCheckVisMar } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckVisMar"}, .F. )
   _HB_MEMBER { oCheckVisMie } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckVisMie"}, .F. )
   _HB_MEMBER { oCheckVisJue } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckVisJue"}, .F. )
   _HB_MEMBER { oCheckVisVie } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckVisVie"}, .F. )
   _HB_MEMBER { oCheckVisSab } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckVisSab"}, .F. )
   _HB_MEMBER { oCheckVisDom } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckVisDom"}, .F. )

   _HB_MEMBER { oCheckRecargo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCheckRecargo"}, .F. )

   _HB_MEMBER { oCodigoGrupo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodigoGrupo"}, .F. )
   _HB_MEMBER { oNombreGrupo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oNombreGrupo"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @CustomerView_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTextoTipoDocumento(); oClass:AddInline( "getTextoTipoDocumento", {|Self | ( ( Self ) ), ( LblTitle( ::getMode() ) + "cliente" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertControls(); oClass:AddMethod( "insertControls", @CustomerView_insertControls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineCodigo(); oClass:AddMethod( "defineCodigo", @CustomerView_defineCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineNombre(); oClass:AddMethod( "defineNombre", @CustomerView_defineNombre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineNIF(); oClass:AddMethod( "defineNIF", @CustomerView_defineNIF(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineDomicilio(); oClass:AddMethod( "defineDomicilio", @CustomerView_defineDomicilio(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER definePoblacion(); oClass:AddMethod( "definePoblacion", @CustomerView_definePoblacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineCodigoPostal(); oClass:AddMethod( "defineCodigoPostal", @CustomerView_defineCodigoPostal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineProvincia(); oClass:AddMethod( "defineProvincia", @CustomerView_defineProvincia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineEstablecimiento(); oClass:AddMethod( "defineEstablecimiento", @CustomerView_defineEstablecimiento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineTipoCliente(); oClass:AddMethod( "defineTipoCliente", @CustomerView_defineTipoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineTelefono(); oClass:AddMethod( "defineTelefono", @CustomerView_defineTelefono(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineEmail(); oClass:AddMethod( "defineEmail", @CustomerView_defineEmail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineGrupo(); oClass:AddMethod( "defineGrupo", @CustomerView_defineGrupo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineRuta(); oClass:AddMethod( "defineRuta", @CustomerView_defineRuta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineRecargo(); oClass:AddMethod( "defineRecargo", @CustomerView_defineRecargo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER whenControl(); oClass:AddInline( "whenControl", {|Self | ( ( Self ) ), ( ::getMode() <> 3 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS CustomerView ;



static FUNCTION CustomerView_New( oSender ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView

   ::oSender               := oSender

Return ( self )



static FUNCTION CustomerView_insertControls( ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView

   ::defineCodigo(40)

   ::defineTipoCliente(70)

   ::defineNombre(100)

   ::defineNIF(130)

   ::defineGrupo(160)

   ::defineDomicilio(190)

   ::definePoblacion(220)

   ::defineCodigoPostal(250)

   ::defineProvincia(280)

   ::defineTelefono(310)

   ::defineEmail(340)

   ::defineEstablecimiento(370)

   ::defineRuta(400)

   ::defineRecargo(430)

Return ( self )



static FUNCTION CustomerView_defineCodigo( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView

   local oCodigo










   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Código *" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23 } )












   oCodigo  := TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Codigo" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 2, ::oDlg ) }, "bWhen"     => {|| ::getMode() == 1 }, "bValid"    => {|| iif( !validKey( oCodigo, ( D():Clientes( ::getView() ) ), .T., "0", 1, RetNumCodCliEmp() ), ApoloErrorMsgStop( "El código ya existe" ), .T. ) }, "nHeight"   => 23, "cPict"     => Replicate( "X", RetNumCodCliEmp() ), "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineNIF( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "NIF *" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )












   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "NIF" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9.0, ::oDlg ) }, "bWhen"     => {|| ::whenControl() }, "nHeight"   => 23, "cPict"     => "@!", "bValid"    => {||   iif( empty( hGet( ::oSender:hDictionaryMaster, "NIF" ) ), ApoloErrorMsgStop( "El campo NIF es un dato obligatorio" ), .T. ) }, "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineNombre( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Nombre *" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )












   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Nombre" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9.0, ::oDlg ) }, "bWhen"     => {|| ::whenControl() }, "bValid"    => {||   iif( empty( hGet( ::oSender:hDictionaryMaster, "Nombre" ) ), ApoloErrorMsgStop( "El nombre es un dato obligatorio" ), .T. ) }, "nHeight"   => 23, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineDomicilio( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Domicilio" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )









   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Domicilio" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineCodigoPostal( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Cod postal" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )









   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "CodigoPostal" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_definePoblacion( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Población" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )









   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Poblacion" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineProvincia( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Provincia" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )









   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Provincia" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineEstablecimiento( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView












   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Establec." }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "lDesign"   => .F. } )









   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "NombreEstablecimiento" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineTipoCliente( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      =>  nRow , "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Tipo" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )









   TGridComboBox():Build(  {  "nRow"      =>  nRow , "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| iif( empty( u ), ::oSender:cTipoCliente, ::oSender:cTipoCliente := u ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 25, "bWhen"     => {|| ::whenControl() }, "aItems"    => hGetValues( ::oSender:hTipoCliente ) } )

Return ( self )



static FUNCTION CustomerView_defineTelefono( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView












   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Teléfono" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "lDesign"   => .F. } )









   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Telefono" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineEmail( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "E-mail" }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )








   TGridGet():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "Email" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "lPixels"   => .T. } )

Return ( self )



static FUNCTION CustomerView_defineRuta( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView











   TGridSay():Build( {  "nRow"      => nRow, "nCol"      => {|| GridWidth( ::columnLabel, ::oDlg ) }, "bText"     => {|| "Ruta " }, "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( ::widthLabel, ::oDlg ) }, "nHeight"   => 23, "lDesign"   => .F. } )











   ::oCheckVisLun    := TGridCheckBox():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "cCaption"  => " L", "bSetGet"   => {|u| ::SetGetValue( u, "lVisLun" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 1, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )










   ::oCheckVisMar    := TGridCheckBox():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 3.5, ::oDlg ) }, "cCaption"  => " M", "bSetGet"   => {|u| ::SetGetValue( u, "lVisMar" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 1, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )










   ::oCheckVisMie    := TGridCheckBox():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 4.5, ::oDlg ) }, "cCaption"  => " X", "bSetGet"   => {|u| ::SetGetValue( u, "lVisMie" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 1, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )










   ::oCheckVisJue    := TGridCheckBox():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 5.5, ::oDlg ) }, "cCaption"  => " J", "bSetGet"   => {|u| ::SetGetValue( u, "lVisJue" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 1, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )










   ::oCheckVisVie    := TGridCheckBox():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 6.5, ::oDlg ) }, "cCaption"  => " V", "bSetGet"   => {|u| ::SetGetValue( u, "lVisVie" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 1, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )










   ::oCheckVisSab    := TGridCheckBox():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 7.5, ::oDlg ) }, "cCaption"  => " S", "bSetGet"   => {|u| ::SetGetValue( u, "lVisSab" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 1, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )










   ::oCheckVisDom    := TGridCheckBox():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 8.5, ::oDlg ) }, "cCaption"  => " D", "bSetGet"   => {|u| ::SetGetValue( u, "lVisDom" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 1, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )

Return( self )



static FUNCTION CustomerView_defineGrupo( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView










   TGridUrllink():Build({  "nTop"      => nRow, "nLeft"     => {|| GridWidth( ::columnLabel, ::oDlg ) }, "cURL"      => "Grupo ", "oWnd"      => ::oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| if( ::whenControl(), ::oSender:runGridGroupCustomer(), ) } } )









   ::oCodigoGrupo   := TGridGet():Build( {   "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "bSetGet"   => {|u| ::SetGetValue( u, "CodigoGrupo" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 2, ::oDlg ) }, "nHeight"   => 23, "lPixels"   => .T., "bWhen"     => {|| ::whenControl() }, "bValid"    => {|| ::oSender:lValidGroupCustomer() } } )







   ::oNombreGrupo   := TGridGet():Build(  {  "nRow"      => nRow, "nCol"      => {|| GridWidth( 4.5, ::oDlg ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 7, ::oDlg ) }, "lPixels"   => .T., "bWhen"     => {|| .F. }, "nHeight"   => 23 } )

Return( self )



static FUNCTION CustomerView_defineRecargo( nRow ) ; local Self AS CLASS CustomerView := QSelf() AS CLASS CustomerView










   ::oCheckRecargo    := TGridCheckBox():Build(  { "nRow"      => nRow, "nCol"      => {|| GridWidth( 2.5, ::oDlg ) }, "cCaption"  => "Recargo equivalencia", "bSetGet"   => {|u| ::SetGetValue( u, "Recargo" ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 5, ::oDlg ) }, "nHeight"   => 23, "bWhen"     => {|| ::whenControl() }, "oFont"     => oGridFont(), "lPixels"   => .T. } )


Return( self )
