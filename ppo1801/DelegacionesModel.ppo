#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\DelegacionesModel.prg"
_HB_CLASS DelegacionesModel ; function DelegacionesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DelegacionesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @DelegacionesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "Delega" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER UpdateDelegacionCodigoEmpresa(); oClass:AddMethod( "UpdateDelegacionCodigoEmpresa", @DelegacionesModel_UpdateDelegacionCodigoEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DeleteDelegacionesEmpresa( cCodigoEmpresa); oClass:AddMethod( "DeleteDelegacionesEmpresa", @DelegacionesModel_DeleteDelegacionesEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER arrayDelegaciones( cCodigoEmpresa); oClass:AddMethod( "arrayDelegaciones", @DelegacionesModel_arrayDelegaciones(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aNombres(); oClass:AddMethod( "aNombres", @DelegacionesModel_aNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER aNombresSeleccionables(); oClass:AddInline( "aNombresSeleccionables", {|Self | ( ( Self ) ), ( hb_AIns(::aNombres(),1,"", .T.) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidFromNombre(); oClass:AddInline( "getUuidFromNombre", {|Self, cNombre | ( ( Self ) ), ( ::getField( "Uuid", "cNomDlg", cNombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromUuid(); oClass:AddInline( "getNombreFromUuid", {|Self, cUuid | ( ( Self ) ), ( ::getField( "cNomDlg", "Uuid", cUuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoFromNombre(); oClass:AddInline( "getCodigoFromNombre", {|Self, cNombre | ( ( Self ) ), ( ::getField( "cCodDlg", "cNomDlg", cNombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromCodigo(); oClass:AddInline( "getNombreFromCodigo", {|Self, cCodigo | ( ( Self ) ), ( ::getField( "cNomDlg", "cCodDlg", cCodigo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre( cCodigo); oClass:AddMethod( "getNombre", @DelegacionesModel_getNombre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DelegacionesModel ;



static FUNCTION DelegacionesModel_UpdateDelegacionCodigoEmpresa( ) ; local Self AS CLASS DelegacionesModel := QSelf() AS CLASS DelegacionesModel

   local cStm

   local cSql  := "UPDATE " + ::getTableName() + " " +  "SET cCodEmp = CONCAT( '00', TRIM( cCodEmp ) ) WHERE ( LENGTH( cCodEmp ) < 4 )"

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION DelegacionesModel_DeleteDelegacionesEmpresa( cCodigoEmpresa ) ; local Self AS CLASS DelegacionesModel := QSelf() AS CLASS DelegacionesModel

   local cStm

   local cSql  := "DELETE FROM " + ::getTableName() + " " +  "WHERE cCodEmp = " + quoted( cCodigoEmpresa )

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION DelegacionesModel_arrayDelegaciones( cCodigoEmpresa ) ; local Self AS CLASS DelegacionesModel := QSelf() AS CLASS DelegacionesModel

   local cStm
   local aDlg  := {}
   local cSql  := "SELECT cCodDlg FROM " + ::getTableName() + " "
   cSql        +=    "WHERE cCodEmp = " + quoted( cCodigoEmpresa )

   if ::ExecuteSqlStatement( cSql, @cStm )
      ( cStm )->( dbgotop() )
      while !( cStm )->( eof() )
         aadd( aDlg, ( cStm )->cCodDlg )
         ( cStm )->( dbskip() )
      end
   end

Return ( aDlg )



static FUNCTION DelegacionesModel_aNombres( cCodigoEmpresa ) ; local Self AS CLASS DelegacionesModel := QSelf() AS CLASS DelegacionesModel

   local cStm
   local cSql
   local aDlg              := {}

   If( cCodigoEmpresa == nil, cCodigoEmpresa := cCodEmp(), ) ;

   cSql                    := "SELECT * FROM " + ::getTableName() + " "
   cSql                    +=    "WHERE cCodEmp = " + quoted( cCodigoEmpresa )

   if !::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( aDlg )
   endif

   while !( cStm )->( eof() )
      aadd( aDlg, alltrim( ( cStm )->cNomDlg ) )
      ( cStm )->( dbskip() )
   end

RETURN ( aDlg )



static FUNCTION DelegacionesModel_getNombre( cCodigo ) ; local Self AS CLASS DelegacionesModel := QSelf() AS CLASS DelegacionesModel

   local cStm
   local cSql
   local cNombre           := ""

   cSql                    := "SELECT * FROM " + ::getTableName() + " "
   cSql                    +=    "WHERE cCodDlg = " + quoted( cCodigo ) +  " AND cCodEmp = " + quoted( cCodEmp() )

   if ::ExecuteSqlStatement( cSql, @cStm )
      ( cStm )->( dbGoTop() )
      cNombre  := ( cStm )->cNomDlg
   end

RETURN ( cNombre )







function cNameDelegacion( cCodigo )

Return ( DelegacionesModel():getNombre( cCodigo ) )
