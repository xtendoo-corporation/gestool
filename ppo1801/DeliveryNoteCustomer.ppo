#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\Prg\tablet\presenter\documentos\ventas\DeliveryNoteCustomer.prg"
_HB_CLASS DeliveryNoteCustomer ; function DeliveryNoteCustomer ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DeliveryNoteCustomer", iif( .T., { @DocumentsSales() }, { @HBObject() } ), @DeliveryNoteCustomer() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @DeliveryNoteCustomer_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Build(); oClass:AddMethod( "Build", @DeliveryNoteCustomer_Build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Default(); oClass:AddMethod( "Default", @DeliveryNoteCustomer_Default(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setViewSearchNavigator(); oClass:AddMethod( "setViewSearchNavigator", @DeliveryNoteCustomer_setViewSearchNavigator(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAppendDocumento(); oClass:AddMethod( "getAppendDocumento", @DeliveryNoteCustomer_getAppendDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getEditDocumento(); oClass:AddMethod( "getEditDocumento", @DeliveryNoteCustomer_getEditDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLinesDocument( id); oClass:AddMethod( "getLinesDocument", @DeliveryNoteCustomer_getLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDocumentLine(); oClass:AddMethod( "getDocumentLine", @DeliveryNoteCustomer_getDocumentLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLines(); oClass:AddInline( "getLines", {|Self | ( ( Self ) ), ( ::oDocumentLines:getLines() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLineDetail(); oClass:AddInline( "getLineDetail", {|Self | ( ( Self ) ), ( ::oDocumentLines:getLineDetail( ::nPosDetail ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAppendDetail(); oClass:AddMethod( "getAppendDetail", @DeliveryNoteCustomer_getAppendDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteLinesDocument(); oClass:AddMethod( "deleteLinesDocument", @DeliveryNoteCustomer_deleteLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER printDocument(); oClass:AddMethod( "printDocument", @DeliveryNoteCustomer_printDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertLineDocument( oLine); oClass:AddMethod( "insertLineDocument", @DeliveryNoteCustomer_insertLineDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLastLineNumber( id); oClass:AddMethod( "getLastLineNumber", @DeliveryNoteCustomer_getLastLineNumber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER genInvoiceCustomer(); oClass:AddMethod( "genInvoiceCustomer", @DeliveryNoteCustomer_genInvoiceCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runScriptPreSaveAppend(); oClass:AddMethod( "runScriptPreSaveAppend", @DeliveryNoteCustomer_runScriptPreSaveAppend(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSqlSentenceAlbaranesClientes(); oClass:AddMethod( "getSqlSentenceAlbaranesClientes", @DeliveryNoteCustomer_getSqlSentenceAlbaranesClientes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runScriptPreDelete(); oClass:AddMethod( "runScriptPreDelete", @DeliveryNoteCustomer_runScriptPreDelete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER actualizaStock(); oClass:AddMethod( "actualizaStock", @DeliveryNoteCustomer_actualizaStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RollBackStock(); oClass:AddMethod( "RollBackStock", @DeliveryNoteCustomer_RollBackStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DeliveryNoteCustomer ;



static FUNCTION DeliveryNoteCustomer_New( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   ::super:New( self )





   ::hTextDocuments                    := {  "textMain"     => "Albaranes de clientes", "textShort"    => "Albarán", "textTitle"    => "lineas de albaranes", "textSummary"  => "Resumen albarán", "textGrid"     => "Grid albarán clientes" }



   ::oViewSearchNavigator:setTitleDocumento( "Albaranes de clientes" )

   ::oViewEdit:setTitleDocumento( "Albarán" )

   ::oViewEditResumen:setTitleDocumento( "Resumen albarán" )



   ::Default()

Return ( self )



static FUNCTION DeliveryNoteCustomer_Build( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   ::super:Build( self )

   ::Default()

Return ( self )



static FUNCTION DeliveryNoteCustomer_setViewSearchNavigator( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   ::oViewSearchNavigator  := DeliveryNoteCustomerViewSearchNavigator():New( self )

RETURN ( self )



static FUNCTION DeliveryNoteCustomer_Default( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   ::setTypePrintDocuments( "AC" )

   ::setCounterDocuments( "nAlbCli" )

   ::setDataTable( "AlbCliT" )

   ::setDataTableLine( "AlbCliL" )

   ::lAlowEdit             := accessCode():lInvoiceModify

Return ( self )



static FUNCTION DeliveryNoteCustomer_getSqlSentenceAlbaranesClientes( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local cSentence   := ""

   cSentence         := runScript( "Tablet\Albaranesclientes\SQLOpen.prg" )

   if Empty( cSentence )
      cSentence      := D():getSqlSentenceAlbaranesClientes()
   end

Return ( cSentence )



static FUNCTION DeliveryNoteCustomer_getAppendDocumento( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   ::hDictionaryMaster      := D():GetDefaultHashAlbaranCliente( ::nView )

Return ( self )



static FUNCTION DeliveryNoteCustomer_getEditDocumento( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local id                := D():AlbaranesClientesId( ::nView )

   if empty( id )
      Return .F.
   end

   ::hDictionaryMaster     := D():getHashAlbaranCliente( ::nView )

   if empty( ::hDictionaryMaster )
      Return .F.
   end

   ::getLinesDocument( id )

Return ( .T. )






static FUNCTION DeliveryNoteCustomer_getLinesDocument( id ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   ::oDocumentLines:reset()

   D():getStatusAlbaranesClientesLineas( ::nView )

   ( D():AlbaranesClientesLineas( ::nView ) )->( ordSetFocus( 1 ) )

   if ( D():AlbaranesClientesLineas( ::nView ) )->( dbSeek( id ) )

      while ( D():AlbaranesClientesLineasId( ::nView ) == id ) .AND. !( D():AlbaranesClientesLineas( ::nView ) )->( eof() )

         ::addDocumentLine()

         ( D():AlbaranesClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

   D():setStatusAlbaranesClientesLineas( ::nView )

RETURN ( self )



static FUNCTION DeliveryNoteCustomer_getDocumentLine( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local hLine    := D():GetAlbaranClienteLineasHash( ::nView )

   if empty( hLine )
      Return ( nil )
   end

Return ( DictionaryDocumentLine():New( self, hLine ) )



static FUNCTION DeliveryNoteCustomer_getAppendDetail( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local hLine             := D():getAlbaranClienteLineaDefaultValues( ::nView )

   ::oDocumentLineTemporal := DictionaryDocumentLine():New( self, hLine )

Return ( self )



static FUNCTION DeliveryNoteCustomer_deleteLinesDocument( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local statement

   if lAIS()


      statement   := "DELETE FROM " + cPatEmp() + "AlbCliL " +  "WHERE cSerAlb = '" + ::getSerie() + "' AND nNumAlb = " + alltrim( ::getStrNumero() ) + " AND cSufAlb = '" + ::getSufijo() + "'"

      TDataCenter():ExecuteSqlStatement( statement )

   else

      D():getStatusAlbaranesClientesLineas( ::nView )
      ( D():AlbaranesClientesLineas( ::nView ) )->( ordsetfocus( 1 ) )

      while ( D():AlbaranesClientesLineas( ::nView ) )->( dbseek( ::getID() ) )
         ::delDocumentLine()
      end

      D():setStatusAlbaranesClientesLineas( ::nView )

   end

Return ( Self )



static FUNCTION DeliveryNoteCustomer_printDocument( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   imprimeAlbaranCliente( ::getID(), ::cFormatToPrint )

Return ( .T. )



static FUNCTION DeliveryNoteCustomer_insertLineDocument( oLine ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local lineNumber        := ::getLastLineNumber()



   oLine:setNumeroLinea( lineNumber )

   oLine:setPosicionImpresion( lineNumber )
   oLine:setSerie( ( D():AlbaranesClientes( ::nView ) )->cSerAlb )
   oLine:setNumero( ( D():AlbaranesClientes( ::nView ) )->nNumAlb )
   oLine:setSufijo( ( D():AlbaranesClientes( ::nView ) )->cSufAlb )

   oLine:setStore( ( D():AlbaranesClientes( ::nView ) )->cCodAlm )

   oLine:setFechaDocumento( ( D():AlbaranesClientes( ::nView ) )->dFecAlb )
   oLine:setHoraDocumento( ( D():AlbaranesClientes( ::nView ) )->tFecAlb )





Return ( .T. )



static FUNCTION DeliveryNoteCustomer_getLastLineNumber( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local id                := D():AlbaranesClientesId( ::nView )
   local lineNumber        := 0

   D():getStatusAlbaranesClientesLineas( ::nView )

   ( D():AlbaranesClientesLineas( ::nView ) )->( ordSetFocus( 1 ) )

   if ( D():AlbaranesClientesLineas( ::nView ) )->( dbSeek( id ) )

      while ( D():AlbaranesClientesLineasId( ::nView ) == id ) .AND. !( D():AlbaranesClientesLineas( ::nView ) )->( eof() )

         if ( D():AlbaranesClientesLineas( ::nView ) )->nNumLin > lineNumber
            lineNumber     := ( D():AlbaranesClientesLineas( ::nView ) )->nNumLin
         end

         ( D():AlbaranesClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

   D():setStatusAlbaranesClientesLineas( ::nView )

RETURN ( ++lineNumber )



static FUNCTION DeliveryNoteCustomer_genInvoiceCustomer( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   local oInvoiceCustomerGenerator

   ::getEditDocumento()

   if hGet( ::hDictionaryMaster, "Estado" ) == 3
      ApoloMsgStop( "Albarán anteriormente facturado." )
      Return .T.
   end

   oInvoiceCustomerGenerator  := GenInvoiceCustomer():New( self )

   oInvoiceCustomerGenerator:setMasterDeliveryNote( ::hDictionaryMaster )
   oInvoiceCustomerGenerator:setLinesDeliveryNote( ::oDocumentLines:getDictionaryArray() )
   oInvoiceCustomerGenerator:Run()

RETURN ( self )



static FUNCTION DeliveryNoteCustomer_runScriptPreSaveAppend( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   runScript( "Tablet\AlbaranesClientes\PreSaveAppend.prg", self )

RETURN ( .T. )



static FUNCTION DeliveryNoteCustomer_runScriptPreDelete( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

   runScript( "Tablet\AlbaranesClientes\PreDelete.prg", self )

RETURN ( .T. )



static FUNCTION DeliveryNoteCustomer_actualizaStock( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer

Return ( .T. )



static FUNCTION DeliveryNoteCustomer_RollBackStock( ) ; local Self AS CLASS DeliveryNoteCustomer := QSelf() AS CLASS DeliveryNoteCustomer


Return ( .T. )
