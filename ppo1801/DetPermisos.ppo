#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\DetPermisos.prg"
_HB_CLASS TDetPermisos ; function TDetPermisos ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetPermisos", iif( .T., { @TDet() }, { @HBObject() } ), @TDetPermisos() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @TDetPermisos_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetPermisos_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetPermisos ;



static FUNCTION TDetPermisos_New( cPath, cDriver, oParent ) ; local Self AS CLASS TDetPermisos := QSelf() AS CLASS TDetPermisos

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::cPath              := cPath
   ::cDriver            := cDriver
   ::oParent            := oParent

RETURN ( Self )



static FUNCTION TDetPermisos_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TDetPermisos := QSelf() AS CLASS TDetPermisos

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "DETPERMISOS.DBF", "DETPERMISOS" ):New( "DETPERMISOS.DBF",, ( cDriver ), "Detatte de permisos", ( cPath ) )

      ::oDbf:AddField( "uuid", "C", 40, 0,, win_uuidcreatestring(),,, "Identificador", .F.,, .F., {} )
      ::oDbf:AddField( "uuidperm", "C", 100, 0,,,,, "Uuid de permiso", .F.,, .F., {} )
      ::oDbf:AddField( "nombre", "C", 100, 0,,,,, "Nombre", .F.,, .F., {} )
      ::oDbf:AddField( "nivel", "N", 3, 0,,,,, "Nivel de permisos", .F.,, .F., {} )

      ::oDbf:AddIndex( "Uuid", "DETPERMISOS.CDX", "uuid",,, .F., .F., "uuid",,, .T., .F. )



RETURN ( ::oDbf )







_HB_CLASS DetPermisosModel ; function DetPermisosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DetPermisosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @DetPermisosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "detpermisos" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNivel( cPermisoUuid, cNombre); oClass:AddMethod( "getNivel", @DetPermisosModel_getNivel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER exist( uuidperm, nombre); oClass:AddMethod( "exist", @DetPermisosModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER set( uuidperm, nombre, nivel); oClass:AddMethod( "set", @DetPermisosModel_set(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER exist( uuidperm, nombre); oClass:AddMethod( "exist", @DetPermisosModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER insert( uuidperm, nombre, nivel); oClass:AddMethod( "insert", @DetPermisosModel_insert(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER update( uuidperm, nombre, nivel); oClass:AddMethod( "update", @DetPermisosModel_update(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InsertFromHashSql( hHash); oClass:AddMethod( "InsertFromHashSql", @DetPermisosModel_InsertFromHashSql(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lExisteUuid( uuid); oClass:AddMethod( "lExisteUuid", @DetPermisosModel_lExisteUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNivelRol( cUuidRol, cOption); oClass:AddMethod( "getNivelRol", @DetPermisosModel_getNivelRol(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteLines( uuidperm); oClass:AddMethod( "deleteLines", @DetPermisosModel_deleteLines(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DetPermisosModel ;



static FUNCTION DetPermisosModel_getNivel( cPermisoUuid, cNombre ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm  := "getNivel"


   local cSQL  := "SELECT nivel FROM " + ::getTableName()           + " " +  "WHERE uuidperm = " + quoted( cPermisoUuid )   + " " +  "AND nombre = " + quoted( cNombre )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( lastrec() ) > 0

         ( cStm )->( dbGoTop() )

         RETURN ( ( cStm )->nivel )

      end

   end

RETURN ( nil )



static FUNCTION DetPermisosModel_exist( uuidperm, nombre ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm  := "ExistDetPerm"



   local cSql  := "SELECT nivel " +  "FROM " + ::getTableName()                   + " " +  "WHERE uuidperm = " + quoted( uuidperm )     + " AND " +  "nombre = " + quoted( nombre )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION DetPermisosModel_set( uuidperm, nombre, nivel ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   if ::exist( uuidperm, nombre )
      RETURN ( ::update( uuidperm, nombre, nivel ) )
   end

RETURN ( ::insert( uuidperm, nombre, nivel ) )



static FUNCTION DetPermisosModel_insert( uuidperm, nombre, nivel ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm              := "insertDetPerm"
   local cSql

   cSql                    := "INSERT INTO " + ::getTableName() + " "
   cSql                    +=    "( uuid, "
   cSql                    +=       "uuidperm, "
   cSql                    +=       "nombre, "
   cSql                    +=       "nivel ) "
   cSql                    += "VALUES "
   cSql                    +=    "( " + quoted( win_uuidcreatestring() ) + ", "
   cSql                    +=       quoted( uuidperm ) + ", "
   cSql                    +=       quoted( nombre ) + ", "
   cSql                    +=       alltrim( str( nivel ) ) + " )"

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION DetPermisosModel_update( uuidperm, nombre, nivel ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm              := "updateDetPerm"
   local cSql

   cSql                    := "UPDATE " + ::getTableName() + " "
   cSql                    +=    "SET "
   cSql                    +=       "nivel = " + alltrim( str( nivel ) ) + " "
   cSql                    +=    "WHERE uuidperm = " + quoted( uuidperm ) + " AND "
   cSql                    +=        "nombre = " + quoted( nombre )

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION DetPermisosModel_getNivelRol( cUuidRol, cOption ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm  := "getNivelRol"






   local cSQL  := "SELECT nivel FROM " + ::getTableName() + " detpermisos " +   "INNER JOIN " + ::getDatosTableName( "permisos" ) + " AS permisos " +   "ON permisos.uuid = detpermisos.uuidperm"       + " " +   "INNER JOIN " + ::getDatosTableName( "roles" ) + " AS roles " +   "ON roles.permuuid = permisos.uuid"                   + " " +   "WHERE roles.uuid = " + quoted( cUuidRol )               + " " +   "AND detpermisos.nombre = " + quoted( cOption )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
         return ( cStm )->nivel
      end

   end

Return ( nil )



static FUNCTION DetPermisosModel_InsertFromHashSql( hHash ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm     := "InsertFromHashSql"
   local cSql     := ""

   if !Empty( hHash ) .AND. !::lExisteUuid( hGet( hHash, "uuid" ) )

      cSql         := "INSERT INTO " + ::getTableName()
      cSql         += " ( uuid, uuidperm, nombre, nivel ) VALUES "
      cSql         += " ( " + quoted( hGet( hHash, "uuid" ) )
      cSql         += ", " + quoted( hGet( hHash, "permiso_uuid" ) )
      cSql         += ", " + quoted( hGet( hHash, "nombre" ) )
      cSql         += ", " + AllTrim( Str( hGet( hHash, "nivel" ) ) ) + " )"

      ::ExecuteSqlStatement( cSql, @cStm )

   end

Return ( nil )



static FUNCTION DetPermisosModel_lExisteUuid( uuid ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm     := "lExisteUuid"
   local cSql     := ""

   cSql     := "SELECT * FROM " + ::getTableName() + " WHERE uuid = " + quoted( uuid )

      if ::ExecuteSqlStatement( cSql, @cStm )

         if ( cStm )->( RecCount() ) > 0
            Return ( .T. )
         end

      end

Return ( .F. )



static FUNCTION DetPermisosModel_deleteLines( uuidperm ) ; local Self AS CLASS DetPermisosModel := QSelf() AS CLASS DetPermisosModel

   local cStm     := "deleteLines"
   local cSql     := ""

   cSql     := "DELETE FROM " + ::getTableName() + " WHERE uuidperm = " + quoted( uuidperm )

   ::ExecuteSqlStatement( cSql, @cStm )

Return ( nil )
