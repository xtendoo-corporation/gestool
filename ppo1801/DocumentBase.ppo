#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\presenter\DocumentBase.prg"
_HB_CLASS repositoryBase ; function repositoryBase ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "repositoryBase", iif( .F., { }, { @HBObject() } ), @repositoryBase() ) ) ;

   _HB_MEMBER { hDictionary } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDictionary"}, .F. )

   _HB_MEMBER getValue( key, uDefault) ; oClass:AddVirtual( "getValue" )
   _HB_MEMBER setValue( key, value) ; oClass:AddVirtual( "setValue" )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS repositoryBase ;



_HB_CLASS repositoryDictionary ; function repositoryDictionary ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "repositoryDictionary", iif( .T., { @repositoryBase() }, { @HBObject() } ), @repositoryDictionary() ) ) ;

   _HB_MEMBER getValue(); oClass:AddInline( "getValue", {|Self, key, uDefault | ( ( Self ) ), ( hGetDefault( ::hDictionary, key, uDefault ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setValue(); oClass:AddInline( "setValue", {|Self, key, value | ( ( Self ) ), ( hSet( ::hDictionary, key, value ), value ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS repositoryDictionary ;



_HB_CLASS repositoryAlias ; function repositoryAlias ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "repositoryAlias", iif( .T., { @repositoryBase() }, { @HBObject() } ), @repositoryAlias() ) ) ;

   _HB_MEMBER getAlias() ; oClass:AddVirtual( "getAlias" )
   _HB_MEMBER getDictionary() ; oClass:AddVirtual( "getDictionary" )

   _HB_MEMBER getValue(); oClass:AddInline( "getValue", {|Self, key, uDefault | ( ( Self ) ), ( D():getFieldFromAliasDictionary( key, ::getAlias(), ::getDictionary(), uDefault ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setValue(); oClass:AddInline( "setValue", {|Self, key, value | ( ( Self ) ), ( hSet( ::hDictionary, key, value ), value ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS repositoryAlias ;



_HB_CLASS DocumentBase ; function DocumentBase ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DocumentBase", iif( .F., { }, { @HBObject() } ), @DocumentBase() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { hDictionary } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDictionary"}, .F. )

   _HB_MEMBER { select } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"select"}, .F. )

   _HB_MEMBER new(); oClass:AddMethod( "new", @DocumentBase_new(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER newBuildDictionary( oSender); oClass:AddMethod( "newBuildDictionary", @DocumentBase_newBuildDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER newFromDictionary(); oClass:AddMethod( "newFromDictionary", @DocumentBase_newFromDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getView(); oClass:AddInline( "getView", {|Self | ( ( Self ) ), ( ::oSender:getView() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDictionary(); oClass:AddInline( "getDictionary", {|Self | ( ( Self ) ), ( ::hDictionary ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setDictionary(); oClass:AddInline( "setDictionary", {|Self, hDictionary | ( ( Self ) ), ( ::hDictionary := hDictionary ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValue(); oClass:AddInline( "getValue", {|Self, key, uDefault | ( ( Self ) ), ( hGetDefault( ::hDictionary, key, uDefault ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setValue(); oClass:AddInline( "setValue", {|Self, key, value | ( ( Self ) ), ( hSet( ::hDictionary, key, value ), value ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValueFromDictionary( hDictionary, cKey); oClass:AddMethod( "getValueFromDictionary", @DocumentBase_getValueFromDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setValueFromDictionary( hDictionary, cKey); oClass:AddMethod( "setValueFromDictionary", @DocumentBase_setValueFromDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectLine(); oClass:AddInline( "selectLine", {|Self | ( ( Self ) ), ( ::select := .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER unSelectLine(); oClass:AddInline( "unSelectLine", {|Self | ( ( Self ) ), ( ::select := .F. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER toogleSelectLine(); oClass:AddInline( "toogleSelectLine", {|Self | ( ( Self ) ), ( ::select := !::select ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isSelectLine(); oClass:AddInline( "isSelectLine", {|Self | ( ( Self ) ), ( ::select ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerie(); oClass:AddInline( "getSerie", {|Self | ( ( Self ) ), ( ::getValue( "Serie" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setSerie(); oClass:AddInline( "setSerie", {|Self, value | ( ( Self ) ), ( ::setValue( "Serie", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumero(); oClass:AddInline( "getNumero", {|Self | ( ( Self ) ), ( ::getValue( "Numero" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setNumero(); oClass:AddInline( "setNumero", {|Self, value | ( ( Self ) ), ( ::setValue( "Numero", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijo(); oClass:AddInline( "getSufijo", {|Self | ( ( Self ) ), ( ::getValue( "Sufijo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setSufijo(); oClass:AddInline( "setSufijo", {|Self, value | ( ( Self ) ), ( ::setValue( "Sufijo", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getId(); oClass:AddInline( "getId", {|Self | ( ( Self ) ), ( ::getDocumentId() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDocumentId(); oClass:AddInline( "getDocumentId", {|Self | ( ( Self ) ), ( ::getValue( "Serie" ) + str( ::getValue( "Numero" ), 9 ) + ::getValue( "Sufijo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroDocumento(); oClass:AddInline( "getNumeroDocumento", {|Self | ( ( Self ) ), ( ::getValue( "Serie" ) + alltrim( str( ::getValue( "Numero" ) ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDivisa(); oClass:AddInline( "getDivisa", {|Self | ( ( Self ) ), ( ::getValue( "Divisa" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getStore(); oClass:AddInline( "getStore", {|Self | ( ( Self ) ), ( ::getValue( "Almacen" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setStore(); oClass:AddInline( "setStore", {|Self, value | ( ( Self ) ), ( ::setValue( "Almacen", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFecha(); oClass:AddInline( "getFecha", {|Self | ( ( Self ) ), ( ::getValue( "Fecha" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setFecha(); oClass:AddInline( "setFecha", {|Self, value | ( ( Self ) ), ( ::setValue( "Fecha", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHora(); oClass:AddInline( "getHora", {|Self | ( ( Self ) ), ( ::getValue( "Hora" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setHora(); oClass:AddInline( "setHora", {|Self, value | ( ( Self ) ), ( ::setValue( "Hora", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DocumentBase ;



static FUNCTION DocumentBase_new( oSender ) ; local Self AS CLASS DocumentBase := QSelf() AS CLASS DocumentBase

   ::oSender            := oSender

Return ( Self )



static FUNCTION DocumentBase_newBuildDictionary( oSender ) ; local Self AS CLASS DocumentBase := QSelf() AS CLASS DocumentBase

   ::new( oSender )

   ::setDictionary( D():getHashFromAlias( oSender:getLineAlias(), oSender:getLineDictionary() ) )

Return ( Self )



static FUNCTION DocumentBase_newFromDictionary( oSender, hDictionary ) ; local Self AS CLASS DocumentBase := QSelf() AS CLASS DocumentBase

   ::new( oSender )

   ::setDictionary( hDictionary )

Return ( Self )



static FUNCTION DocumentBase_getValueFromDictionary( hDictionary, cKey ) ; local Self AS CLASS DocumentBase := QSelf() AS CLASS DocumentBase

   if !( hhaskey( hDictionary, cKey ) )
      Return ( nil )
   end

Return ( ::getValue( cKey, hGet( hDictionary, cKey ) ) )



static FUNCTION DocumentBase_setValueFromDictionary( hDictionary, cKey ) ; local Self AS CLASS DocumentBase := QSelf() AS CLASS DocumentBase

   if !( hhaskey( hDictionary, cKey ) )
      Return ( nil )
   end

Return ( ::setValue( cKey, hGet( hDictionary, cKey ) ) )










_HB_CLASS AliasDocumentBase ; function AliasDocumentBase ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AliasDocumentBase", iif( .T., { @DocumentBase() }, { @HBObject() } ), @AliasDocumentBase() ) ) ;

   _HB_MEMBER { cAlias } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAlias"}, .F. )

   _HB_MEMBER getAlias() ; oClass:AddVirtual( "getAlias" )
   _HB_MEMBER getDictionary() ; oClass:AddVirtual( "getDictionary" )

   _HB_MEMBER getValue(); oClass:AddInline( "getValue", {|Self, key, uDefault | ( ( Self ) ), ( D():getFieldFromAliasDictionary( key, ::getAlias(), ::getDictionary(), uDefault ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setValue(); oClass:AddInline( "setValue", {|Self, key, value | ( ( Self ) ), ( hSet( ::hDictionary, key, value ), value ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRecno(); oClass:AddInline( "getRecno", {|Self | ( ( Self ) ), ( ( ::getAlias() )->( recno() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER eof(); oClass:AddInline( "eof", {|Self | ( ( Self ) ), ( ( ::getAlias() )->( eof() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER setLinesScope(); oClass:AddInline( "setLinesScope", {|Self, id | ( ( Self ) ), ( ( ::getAlias() )->( ordscope( 0, id ) ), ( ::getAlias() )->( ordscope( 1, id ) ), ( ::getAlias() )->( dbgotop() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER quitLinesScope(); oClass:AddInline( "quitLinesScope", {|Self | ( ( Self ) ), ( ::setLinesScope( nil ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AliasDocumentBase ;