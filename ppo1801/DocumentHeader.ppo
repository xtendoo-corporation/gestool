#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\Prg\tablet\presenter\DocumentHeader.prg"
_HB_CLASS DocumentHeader ; function DocumentHeader ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DocumentHeader", iif( .T., { @DocumentBase() }, { @HBObject() } ), @DocumentHeader() ) ) ;

   _HB_MEMBER newBuildDictionary( oSender); oClass:AddMethod( "newBuildDictionary", @DocumentHeader_newBuildDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDate(); oClass:AddInline( "getDate", {|Self | ( ( Self ) ), ( ::getValue( "Fecha" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setDate(); oClass:AddInline( "setDate", {|Self, value | ( ( Self ) ), ( ::setValue( "Fecha", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getClient(); oClass:AddInline( "getClient", {|Self | ( ( Self ) ), ( ::getValue( "Cliente" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setClient(); oClass:AddInline( "setClient", {|Self, value | ( ( Self ) ), ( ::setValue( "Cliente", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getClientName(); oClass:AddInline( "getClientName", {|Self | ( ( Self ) ), ( ::getValue( "NombreCliente" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setClientName(); oClass:AddInline( "setClientName", {|Self, value | ( ( Self ) ), ( ::setValue( "NombreCliente", value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DocumentHeader ;



static FUNCTION DocumentHeader_newBuildDictionary( oSender ) ; local Self AS CLASS DocumentHeader := QSelf() AS CLASS DocumentHeader

   ::new( oSender )

   if !empty( oSender ) .AND. __objHasMethod( oSender, "getHeaderAlias" ) .AND. __objHasMethod( oSender, "getHeaderDictionary" )
      ::setDictionary( D():getHashFromAlias( oSender:getHeaderAlias(), oSender:getHeaderDictionary() ) )
   end

Return ( Self )



_HB_CLASS AliasDocumentHeader ; function AliasDocumentHeader ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AliasDocumentHeader", iif( .T., { @DocumentHeader() }, { @HBObject() } ), @AliasDocumentHeader() ) ) ;

   _HB_MEMBER getAlias(); oClass:AddInline( "getAlias", {|Self | ( ( Self ) ), ( if( empty( ::oSender ), "", ::oSender:getHeaderAlias() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDictionary(); oClass:AddInline( "getDictionary", {|Self | ( ( Self ) ), ( if( empty( ::oSender ), "", ::oSender:getHeaderDictionary() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValue(); oClass:AddInline( "getValue", {|Self, key, uDefault | ( ( Self ) ), ( D():getFieldFromAliasDictionary( key, ::getAlias(), ::getDictionary(), uDefault ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setValue(); oClass:AddInline( "setValue", {|Self, key, value | ( ( Self ) ), ( hSet( ::hDictionary, key, value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AliasDocumentHeader ;










_HB_CLASS ClientDeliveryNoteDocumentHeader ; function ClientDeliveryNoteDocumentHeader ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ClientDeliveryNoteDocumentHeader", iif( .T., { @DocumentHeader() }, { @HBObject() } ), @ClientDeliveryNoteDocumentHeader() ) ) ;

   _HB_MEMBER newBuildDictionary( oSender); oClass:AddMethod( "newBuildDictionary", @ClientDeliveryNoteDocumentHeader_newBuildDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER newBlankDictionary( oSender); oClass:AddMethod( "newBlankDictionary", @ClientDeliveryNoteDocumentHeader_newBlankDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER newRecordDictionary( oSender); oClass:AddMethod( "newRecordDictionary", @ClientDeliveryNoteDocumentHeader_newRecordDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ClientDeliveryNoteDocumentHeader ;



static FUNCTION ClientDeliveryNoteDocumentHeader_newBuildDictionary( oSender ) ; local Self AS CLASS ClientDeliveryNoteDocumentHeader := QSelf() AS CLASS ClientDeliveryNoteDocumentHeader

   ::setDictionary( D():getHashRecordAlbaranesClientes() )

Return ( Self )



static FUNCTION ClientDeliveryNoteDocumentHeader_newBlankDictionary( oSender ) ; local Self AS CLASS ClientDeliveryNoteDocumentHeader := QSelf() AS CLASS ClientDeliveryNoteDocumentHeader

   ::new( oSender )

   if !empty(oSender)
      ::setDictionary( D():getHashBlankAlbaranesClientes( oSender:nView ) )
   end

Return ( Self )



static FUNCTION ClientDeliveryNoteDocumentHeader_newRecordDictionary( oSender ) ; local Self AS CLASS ClientDeliveryNoteDocumentHeader := QSelf() AS CLASS ClientDeliveryNoteDocumentHeader

  ::new( oSender )

   if !empty(oSender)
      ::setDictionary( D():getHashRecordAlbaranesClientes( oSender:nView ) )
   end

Return ( Self )
