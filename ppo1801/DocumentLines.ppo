#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\presenter\DocumentLines.prg"
_HB_CLASS DocumentLines ; function DocumentLines ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DocumentLines", iif( .F., { }, { @HBObject() } ), @DocumentLines() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { aLines } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aLines"}, .F. )

   _HB_MEMBER new( oSender); oClass:AddMethod( "new", @DocumentLines_new(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getView(); oClass:AddInline( "getView", {|Self | ( ( Self ) ), ( ::oSender:getView() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER reset(); oClass:AddMethod( "reset", @DocumentLines_reset(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addLines( oLine); oClass:AddMethod( "addLines", @DocumentLines_addLines(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addLinesObjects( oLine); oClass:AddMethod( "addLinesObjects", @DocumentLines_addLinesObjects(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLines(); oClass:AddInline( "getLines", {|Self | ( ( Self ) ), ( ::aLines ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getCloneLine(); oClass:AddInline( "getCloneLine", {|Self | ( ( Self ) ), ( oClone( ::getLine() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLine(); oClass:AddInline( "getLine", {|Self, nPosition | ( ( Self ) ), ( if( !empty( ::aLines ), ::aLines[ nPosition ], nil ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLineDetail(); oClass:AddInline( "getLineDetail", {|Self, nPosition | ( ( Self ) ), ( ::getLine( nPosition  ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getCloneLineDetail(); oClass:AddInline( "getCloneLineDetail", {|Self, nPosition | ( ( Self ) ), ( oClone( ::getLineDetail( nPosition  ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER appendLineDetail(); oClass:AddInline( "appendLineDetail", {|Self, oDocumentLine | ( ( Self ) ), ( aadd( ::aLines, oDocumentLine ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveLineDetail(); oClass:AddInline( "saveLineDetail", {|Self, nPosition, oDocumentLine | ( ( Self ) ), ( ::aLines[ nPosition  ] := oDocumentLine ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getBruto(); oClass:AddMethod( "getBruto", @DocumentLines_getBruto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getBase(); oClass:AddMethod( "getBase", @DocumentLines_getBase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectAll(); oClass:AddInline( "selectAll", {|Self | ( ( Self ) ), ( aeval( ::aLines, {|oLine| oLine:selectLine() } ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER unselectAll(); oClass:AddInline( "unselectAll", {|Self | ( ( Self ) ), ( aeval( ::aLines, {|oLine| oLine:unSelectLine() } ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER anySelect(); oClass:AddMethod( "anySelect", @DocumentLines_anySelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getHeaderAlias(); oClass:AddInline( "getHeaderAlias", {|Self | ( ( Self ) ), ( ::oSender:getHeaderAlias() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHeaderDictionary(); oClass:AddInline( "getHeaderDictionary", {|Self | ( ( Self ) ), ( ::oSender:getHeaderDictionary() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLineAlias(); oClass:AddInline( "getLineAlias", {|Self | ( ( Self ) ), ( ::oSender:getLineAlias() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLineDictionary(); oClass:AddInline( "getLineDictionary", {|Self | ( ( Self ) ), ( ::oSender:getLineDictionary() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER sortingPleaseWait( expresion); oClass:AddMethod( "sortingPleaseWait", @DocumentLines_sortingPleaseWait(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER sortBy( expresion); oClass:AddMethod( "sortBy", @DocumentLines_sortBy(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDictionaryArray(); oClass:AddMethod( "getDictionaryArray", @DocumentLines_getDictionaryArray(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DocumentLines ;



static FUNCTION DocumentLines_new( oSender ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   ::oSender      := oSender

Return ( Self )



static FUNCTION DocumentLines_reset( ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   ::aLines       := {}

Return ( Self )



static FUNCTION DocumentLines_addLines( oLine ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   aAdd( ::aLines, oLine )

Return ( Self )



static FUNCTION DocumentLines_addLinesObjects( ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   ::addLines( DocumentLine():New() )

Return (  Self )



static FUNCTION DocumentLines_getBruto( ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   local oLine
   local Bruto    := 0

   for each oLine in ::aLines
      Bruto       += oLine:getBruto()
   next

Return ( Bruto )



static FUNCTION DocumentLines_getBase( ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   local oLine
   local Base     := 0

   for each oLine in ::aLines
      Base        += oLine:getBase()
   next

Return ( Base )



static FUNCTION DocumentLines_sortingPleaseWait( expresion, oColumn, oBrowse ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   msgRun( "Ordenando columna", "Espere por favor...", {|| ::sortBy( expresion ) } )

Return ( Self )



static FUNCTION DocumentLines_sortBy( expresion ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   If( expresion == nil, expresion := "getCode", ) ;

   asort( ::aLines, , , {|x,y| oSend( x, expresion ) <= oSend( y, expresion ) } )

Return ( Self )



static FUNCTION DocumentLines_anySelect( ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   local anySelect   := .F.

   aeval( ::aLines, {|oLine| if( oLine:isSelectLine(), anySelect := .T., ) } )

Return ( anySelect )



static FUNCTION DocumentLines_getDictionaryArray( ) ; local Self AS CLASS DocumentLines := QSelf() AS CLASS DocumentLines

   local aDictionary    := {}

   aeval( ::aLines, {|oLine| aAdd( aDictionary, oLine:hDictionary ) } )

Return ( aDictionary )
