#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\DocumentosModel.prg"
_HB_CLASS DocumentosModel ; function DocumentosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DocumentosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @DocumentosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Rdocumen" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWhereTipo(); oClass:AddMethod( "getWhereTipo", @DocumentosModel_getWhereTipo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWhereMovimientosAlmacen(); oClass:AddInline( "getWhereMovimientosAlmacen", {|Self | ( ( Self ) ), ( ::getWhereTipo( "RM" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWhereCodigo( cCodigo, cField); oClass:AddMethod( "getWhereCodigo", @DocumentosModel_getWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDescripWhereCodigo(); oClass:AddInline( "getDescripWhereCodigo", {|Self, cCodigo | ( ( Self ) ), ( ::getWhereCodigo( cCodigo, "cDescrip" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setReportWhereCodigo( cCodigo, cReport); oClass:AddMethod( "setReportWhereCodigo", @DocumentosModel_setReportWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getReportWhereCodigo( cCodigo); oClass:AddMethod( "getReportWhereCodigo", @DocumentosModel_getReportWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER exist(); oClass:AddMethod( "exist", @DocumentosModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER encodeSemicolons(); oClass:AddInline( "encodeSemicolons", {|Self, cText | ( ( Self ) ), ( SQLDatabase():escapeStr( cText ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER decodeSemicolons(); oClass:AddInline( "decodeSemicolons", {|Self, cText | ( ( Self ) ), ( strtran( cText, "&quot;", "'" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DocumentosModel ;



static FUNCTION DocumentosModel_getWhereTipo( cTipo ) ; local Self AS CLASS DocumentosModel := QSelf() AS CLASS DocumentosModel

   local cStm


   local cSql  := "SELECT Codigo, cDescrip "                +  "FROM " + ::getTableName() + " "       +  "WHERE cTipo = " + quoted( cTipo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( fetchHashFromWorkArea( cStm ) )
   end

RETURN ( cStm )



static FUNCTION DocumentosModel_getWhereCodigo( cCodigo, cField ) ; local Self AS CLASS DocumentosModel := QSelf() AS CLASS DocumentosModel

   local cStm


   local cSql  := "SELECT " + cField + " "                  +  "FROM " + ::getTableName() + " "       +  "WHERE Codigo = " + quoted( cCodigo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( fieldpos( cField ) ) ) )
   end

RETURN ( "" )



static FUNCTION DocumentosModel_exist( cCodigo ) ; local Self AS CLASS DocumentosModel := QSelf() AS CLASS DocumentosModel

   local cStm


   local cSql  := "SELECT Codigo "                                      +  "FROM " + ::getTableName() + " "                   +  "WHERE Codigo = " + quoted( cCodigo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION DocumentosModel_setReportWhereCodigo( cCodigo, cReport ) ; local Self AS CLASS DocumentosModel := QSelf() AS CLASS DocumentosModel

   local cStm


   local cSql  := "UPDATE " + ::getTableName() + " "                                         +  "SET mReport = " + quoted( SQLDatabase():escapeStr( cReport ) )  + " "    +  "WHERE Codigo = " + quoted( cCodigo )

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION DocumentosModel_getReportWhereCodigo( cCodigo ) ; local Self AS CLASS DocumentosModel := QSelf() AS CLASS DocumentosModel

   local cStm


   local cSql  := "SELECT mReport "                         +  "FROM " + ::getTableName() + " "       +  "WHERE Codigo = " + quoted( cCodigo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( fieldpos( "mReport" ) ) ) )
   end

RETURN ( "" )
