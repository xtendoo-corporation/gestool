#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\presenter\documentos\ventas\DocumentsSales.prg"
_HB_CLASS DocumentsSales ; function DocumentsSales ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "DocumentsSales", iif( .T., { @Documents() }, { @HBObject() } ), @DocumentsSales() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { oProduct } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProduct"}, .F. )
   _HB_MEMBER { oProductStock } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProductStock"}, .F. )
   _HB_MEMBER { oStore } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oStore"}, .F. )
   _HB_MEMBER { oPayment } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPayment"}, .F. )
   _HB_MEMBER { oDirections } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDirections"}, .F. )
   _HB_MEMBER { oImpuestos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oImpuestos"}, .F. )

   _HB_MEMBER { cAliasClientesRuta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAliasClientesRuta"}, .F. )

   _HB_MEMBER { oViewEditResumen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oViewEditResumen"}, .F. )

   _HB_MEMBER { oDocumentLines } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDocumentLines"}, .F. )

   _HB_MEMBER { oLinesDocumentsSales } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLinesDocumentsSales"}, .F. )

   _HB_MEMBER { nUltimoCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nUltimoCliente"}, .F. )





   _HB_MEMBER { hTextDocuments } ; oClass:AddMultiData(, {  "textMain"     => "Facturas de clientes", "textShort"    => "Factura", "textTitle"    => "lineas de facturas", "textSummary"  => "Resumen factura", "textGrid"     => "Grid facturas clientes" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hTextDocuments"}, .F. )








   _HB_MEMBER { hOrdenRutas } ; oClass:AddMultiData(, {  "1" => { "where"=>"lVisDom", "order"=>"nVisDom" }, "2" => { "where"=>"lVisLun", "order"=>"nVisLun" }, "3" => { "where"=>"lVisMar", "order"=>"nVisMar" }, "4" => { "where"=>"lVisMie", "order"=>"nVisMie" }, "5" => { "where"=>"lVisJue", "order"=>"nVisJue" }, "6" => { "where"=>"lVisVie", "order"=>"nVisVie" }, "7" => { "where"=>"lVisSab", "order"=>"nVisSab" }, "8" => { "where"=>"",        "order"=>"cod" } }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hOrdenRutas"}, .F. )

   _HB_MEMBER { cTextSummaryDocument } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTextSummaryDocument"}, .F. )
   _HB_MEMBER { cTypePrintDocuments } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTypePrintDocuments"}, .F. )
   _HB_MEMBER { cCounterDocuments } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCounterDocuments"}, .F. )

   _HB_MEMBER { oTotalDocument } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTotalDocument"}, .F. )

   _HB_MEMBER { oldSerie } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oldSerie"}, .F. )

   _HB_MEMBER New( oSender); oClass:AddMethod( "New", @DocumentsSales_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Build( oSender); oClass:AddMethod( "Build", @DocumentsSales_Build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER play(); oClass:AddMethod( "play", @DocumentsSales_play(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runNavigator(); oClass:AddMethod( "runNavigator", @DocumentsSales_runNavigator(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER onPreRunNavigator(); oClass:AddMethod( "onPreRunNavigator", @DocumentsSales_onPreRunNavigator(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER hSetMaster(); oClass:AddInline( "hSetMaster", {|Self, cField, uValue | ( ( Self ) ), ( hSet( ::hDictionaryMaster, cField, uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER hGetMaster(); oClass:AddInline( "hGetMaster", {|Self, cField | ( ( Self ) ), ( hGet( ::hDictionaryMaster, cField ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER hSetDetail(); oClass:AddInline( "hSetDetail", {|Self, cField, uValue | ( ( Self ) ), ( hSet( ::oDocumentLineTemporal:hDictionary, cField, uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER hGetDetail(); oClass:AddInline( "hGetDetail", {|Self, cField | ( ( Self ) ), ( hGet( ::oDocumentLineTemporal:hDictionary, cField ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setTextSummaryDocument(); oClass:AddInline( "setTextSummaryDocument", {|Self, cTextSummaryDocument | ( ( Self ) ), ( ::cTextSummaryDocument := cTextSummaryDocument ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTextSummaryDocument(); oClass:AddInline( "getTextSummaryDocument", {|Self | ( ( Self ) ), ( if( hhaskey( ::hTextDocuments, "textSummary" ), hget( ::hTextDocuments, "textSummary"), ::cTextSummaryDocument ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTextGrid(); oClass:AddInline( "getTextGrid", {|Self | ( ( Self ) ), ( if( hhaskey( ::hTextDocuments, "textGrid" ), hget( ::hTextDocuments, "textGrid"), "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTextTitle(); oClass:AddInline( "getTextTitle", {|Self | ( ( Self ) ), ( if( hhaskey( ::hTextDocuments, "textTitle" ), hget( ::hTextDocuments, "textTitle"), "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setTypePrintDocuments(); oClass:AddInline( "setTypePrintDocuments", {|Self, cTypePrintDocuments | ( ( Self ) ), ( ::cTypePrintDocuments := cTypePrintDocuments ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTypePrintDocuments(); oClass:AddInline( "getTypePrintDocuments", {|Self | ( ( Self ) ), ( ::cTypePrintDocuments ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCounterDocuments(); oClass:AddInline( "setCounterDocuments", {|Self, cCounterDocuments | ( ( Self ) ), ( ::cCounterDocuments := cCounterDocuments ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCounterDocuments(); oClass:AddInline( "getCounterDocuments", {|Self | ( ( Self ) ), ( ::cCounterDocuments ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @DocumentsSales_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @DocumentsSales_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSqlSentenceAlbaranesClientes(); oClass:AddInline( "getSqlSentenceAlbaranesClientes", {|Self | ( ( Self ) ), ( D():getSqlSentenceAlbaranesClientes() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerie(); oClass:AddInline( "getSerie", {|Self | ( ( Self ) ), ( ::hGetMaster( "Serie" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumero(); oClass:AddInline( "getNumero", {|Self | ( ( Self ) ), ( ::hGetMaster( "Numero" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getStrNumero(); oClass:AddInline( "getStrNumero", {|Self | ( ( Self ) ), ( str( ::getNumero(), 9 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijo(); oClass:AddInline( "getSufijo", {|Self | ( ( Self ) ), ( ::hGetMaster( "Sufijo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getStore(); oClass:AddInline( "getStore", {|Self | ( ( Self ) ), ( ::hGetMaster( "Almacen" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getId(); oClass:AddInline( "getId", {|Self | ( ( Self ) ), ( ::getSerie() + ::getStrNumero() + ::getSufijo() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroDocumento(); oClass:AddInline( "getNumeroDocumento", {|Self | ( ( Self ) ), ( ::getSerie() + alltrim( ::getStrNumero() ) + ::getSufijo() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isPuntoVerde(); oClass:AddInline( "isPuntoVerde", {|Self | ( ( Self ) ), ( ::hGetMaster( "OperarPuntoVerde" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isRecargoEquivalencia(); oClass:AddInline( "isRecargoEquivalencia", {|Self | ( ( Self ) ), ( ::hGetMaster( "lRecargo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER resourceDetail(); oClass:AddInline( "resourceDetail", {|Self, nMode | ( ( Self ) ), ( ::oLinesDocumentsSales:resourceDetail( nMode ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onViewCancel(); oClass:AddMethod( "onViewCancel", @DocumentsSales_onViewCancel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER onViewSave(); oClass:AddMethod( "onViewSave", @DocumentsSales_onViewSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isResumenVenta(); oClass:AddMethod( "isResumenVenta", @DocumentsSales_isResumenVenta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidResumenVenta(); oClass:AddMethod( "lValidResumenVenta", @DocumentsSales_lValidResumenVenta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDataBrowse(); oClass:AddInline( "getDataBrowse", {|Self, Name | ( ( Self ) ), ( hGet( ::oDocumentLineTemporal:hDictionary[ ::oViewEdit:oBrowse:nArrayAt ], Name ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isChangeSerieTablet( lReadyToSend, getSerie); oClass:AddMethod( "isChangeSerieTablet", @DocumentsSales_isChangeSerieTablet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER changeSerieTablet( getSerie); oClass:AddMethod( "changeSerieTablet", @DocumentsSales_changeSerieTablet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runGridCustomer(); oClass:AddMethod( "runGridCustomer", @DocumentsSales_runGridCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidCliente(); oClass:AddMethod( "lValidCliente", @DocumentsSales_lValidCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runGridDirections(); oClass:AddMethod( "runGridDirections", @DocumentsSales_runGridDirections(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidDireccion(); oClass:AddMethod( "lValidDireccion", @DocumentsSales_lValidDireccion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runGridPayment(); oClass:AddMethod( "runGridPayment", @DocumentsSales_runGridPayment(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidPayment(); oClass:AddMethod( "lValidPayment", @DocumentsSales_lValidPayment(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER changeRuta(); oClass:AddMethod( "changeRuta", @DocumentsSales_changeRuta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER priorClient(); oClass:AddInline( "priorClient", {|Self | ( ( Self ) ), ( ::moveClient( .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nextClient(); oClass:AddInline( "nextClient", {|Self | ( ( Self ) ), ( ::moveClient( .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER moveClient(); oClass:AddMethod( "moveClient", @DocumentsSales_moveClient(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadNextClient(); oClass:AddMethod( "loadNextClient", @DocumentsSales_loadNextClient(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER gotoUltimoCliente(); oClass:AddMethod( "gotoUltimoCliente", @DocumentsSales_gotoUltimoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setUltimoCliente(); oClass:AddMethod( "setUltimoCliente", @DocumentsSales_setUltimoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getBruto(); oClass:AddInline( "getBruto", {|Self | ( ( Self ) ), ( ::oDocumentLines:getBruto() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER calculaIVA() ; oClass:AddVirtual( "calculaIVA" )

   _HB_MEMBER saveAppendDetail(); oClass:AddMethod( "saveAppendDetail", @DocumentsSales_saveAppendDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveEditDetail(); oClass:AddMethod( "saveEditDetail", @DocumentsSales_saveEditDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isPrintDocument(); oClass:AddMethod( "isPrintDocument", @DocumentsSales_isPrintDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER printDocument() ; oClass:AddVirtual( "printDocument" )

   _HB_MEMBER saveEditDocumento(); oClass:AddMethod( "saveEditDocumento", @DocumentsSales_saveEditDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveAppendDocumento(); oClass:AddMethod( "saveAppendDocumento", @DocumentsSales_saveAppendDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPreSaveAppend(); oClass:AddMethod( "onPreSaveAppend", @DocumentsSales_onPreSaveAppend(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER onPreSaveAppendDetail(); oClass:AddMethod( "onPreSaveAppendDetail", @DocumentsSales_onPreSaveAppendDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER onPostSaveAppendDetail(); oClass:AddMethod( "onPostSaveAppendDetail", @DocumentsSales_onPostSaveAppendDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPostGetDocumento(); oClass:AddInline( "onPostGetDocumento", {|Self | ( ( Self ) ), ( ::oldSerie  := ::getSerie() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER onPreSaveEdit(); oClass:AddMethod( "onPreSaveEdit", @DocumentsSales_onPreSaveEdit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPreEnd(); oClass:AddMethod( "onPreEnd", @DocumentsSales_onPreEnd(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setClientToDocument(); oClass:AddMethod( "setClientToDocument", @DocumentsSales_setClientToDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setAgentToDocument(); oClass:AddMethod( "setAgentToDocument", @DocumentsSales_setAgentToDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setDatasInDictionaryMaster( NumeroDocumento); oClass:AddMethod( "setDatasInDictionaryMaster", @DocumentsSales_setDatasInDictionaryMaster(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER addDocumentLine(); oClass:AddMethod( "addDocumentLine", @DocumentsSales_addDocumentLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER assignLinesDocument(); oClass:AddMethod( "assignLinesDocument", @DocumentsSales_assignLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setLinesDocument(); oClass:AddMethod( "setLinesDocument", @DocumentsSales_setLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER appendDocumentLine(); oClass:AddInline( "appendDocumentLine", {|Self, oDocumentLine | ( ( Self ) ), ( D():appendHashRecord( oDocumentLine:hDictionary, ::getDataTableLine(), ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER delDocumentLine(); oClass:AddInline( "delDocumentLine", {|Self | ( ( Self ) ), ( D():deleteRecord( ::getDataTableLine(), ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cComboRecargoValue(); oClass:AddMethod( "cComboRecargoValue", @DocumentsSales_cComboRecargoValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onclickClientEdit(); oClass:AddInline( "onclickClientEdit", {|Self | ( ( Self ) ), ( ::oCliente:EditCustomer( hGet( ::hDictionaryMaster, "Cliente" ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER onclickClientSales(); oClass:AddInline( "onclickClientSales", {|Self | ( ( Self ) ), ( ::oCliente:SalesCustomer( hGet( ::hDictionaryMaster, "Cliente" ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getEditDetail(); oClass:AddMethod( "getEditDetail", @DocumentsSales_getEditDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setDocuments(); oClass:AddMethod( "setDocuments", @DocumentsSales_setDocuments(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @DocumentsSales_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runScriptPreSaveAppend() ; oClass:AddVirtual( "runScriptPreSaveAppend" )
   _HB_MEMBER deleteLinesCero() ; oClass:AddVirtual( "deleteLinesCero" )

   _HB_MEMBER runGridSignature(); oClass:AddMethod( "runGridSignature", @DocumentsSales_runGridSignature(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setViewSearchNavigator(); oClass:AddMethod( "setViewSearchNavigator", @DocumentsSales_setViewSearchNavigator(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER rollBackStock(); oClass:AddInline( "rollBackStock", {|Self | ( ( Self ) ), ( .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER actualizaStock(); oClass:AddInline( "actualizaStock", {|Self | ( ( Self ) ), ( .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS DocumentsSales ;



static FUNCTION DocumentsSales_New( oSender ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if !::openFiles()
      RETURN ( self )
   end

   ::Build( oSender )

RETURN ( self )



static FUNCTION DocumentsSales_setViewSearchNavigator( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::oViewSearchNavigator  := DocumentSalesViewSearchNavigator():New( self )

RETURN ( self )



static FUNCTION DocumentsSales_Build( oSender ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::oSender               := oSender

   ::setViewSearchNavigator()

   ::oViewEdit             := DocumentSalesViewEdit():New( self )

   ::oViewEditResumen      := ViewEditResumen():New( self )

   ::oCliente              := Customer():init( self )

   ::oProduct              := Product():init( self )

   ::oImpuestos            := Impuestos():init( self )

   ::oProductStock         := ProductStock():init( self )

   ::oStore                := Store():init( self )

   ::oPayment              := Payment():init( self )

   ::oDirections           := Directions():init( self )

   ::oDocumentLines        := DocumentLines():New( self )

   ::oLinesDocumentsSales  := LinesDocumentsSales():New( self )

   ::oTotalDocument        := TotalDocument():New( self )

RETURN ( self )



static FUNCTION DocumentsSales_play( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if ::onPreRunNavigator()
      ::runNavigator()
   end

   ::closeFiles()

RETURN ( self )






static FUNCTION DocumentsSales_onPreRunNavigator( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if empty( ::getWorkArea() )
      RETURN .T.
   end

   ( ::getWorkArea() )->( ordsetfocus( "dFecDes" ) )
   ( ::getWorkArea() )->( dbgotop() )

   if ( accessCode():lFilterByAgent ) .AND. !empty( accessCode():cAgente )
      ( ::getWorkArea() )->( adsSetAOF( "cCodAge = " + quoted( accessCode():cAgente ) ) )
      ( ::getWorkArea() )->( dbgotop() )
   end

RETURN ( .T. )



static FUNCTION DocumentsSales_runNavigator( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if !empty( ::oViewSearchNavigator )
      ::oViewSearchNavigator:Resource()
   end

RETURN ( self )



static FUNCTION DocumentsSales_OpenFiles( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local oError
   local oBlock
   local lOpenFiles     := .T.

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::nView           := D():CreateView()

      D():PedidosClientes( ::nView )

      D():PedidosClientesLineas( ::nView )


      D():AlbaranesClientes( ::nView, ::getSqlSentenceAlbaranesClientes() )

      D():AlbaranesClientesLineas( ::nView )



      D():FacturasClientesLineas( ::nView )

      D():FacturasClientesCobros( ::nView )

      D():TiposIva( ::nView )

      D():Divisas( ::nView )

      D():Clientes( ::nView )

      D():ClientesDirecciones( ::nView )

      D():Articulos( ::nView )

      D():ArticulosCodigosBarras( ::nView )

      D():ProveedorArticulo( ::nView )

      D():Proveedores( ::nView )

      D():Familias( ::nView )

      D():ImpuestosEspeciales( ::nView )

      D():Kit( ::nView )

      D():Contadores( ::nView )

      D():Documentos( ::nView )

      D():FormasPago( ::nView )

      ::oStock            := TStock():Create( cPatEmp() )
      if !::oStock:lOpenFiles()
         lOpenFiles     := .F.
      end

   RECOVER USING oError

      lOpenFiles        := .F.

      apoloMsgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      ::closeFiles()
   end

RETURN ( lOpenFiles )



static FUNCTION DocumentsSales_CloseFiles( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   D():DeleteView( ::nView )

   if !empty( ::oStock )
      ::oStock:end()
   end

   ::oStock    := nil

RETURN nil



static FUNCTION DocumentsSales_isChangeSerieTablet( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if GetPvProfString( "Tablet", "BloqueoSerie", ".F.", cIniAplication() ) == ".T."
      RETURN ( self )
   end

   if ::lZoomMode()
      RETURN ( self )
   end

   if hGet( ::hDictionaryMaster, "Envio" )
      ::ChangeSerieTablet( ::oViewEdit:getSerie )
   end

RETURN ( self )



static FUNCTION DocumentsSales_changeSerieTablet( getSerie ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local cSerie   := getSerie:VarGet()

   do case
      case cSerie == "A"
         getSerie:cText( "B" )

      case cSerie == "B"
         getSerie:cText( "C" )

      case cSerie == "C"
         getSerie:cText( "A" )

      otherwise
         getSerie:cText( "A" )

   end

RETURN ( self )



static FUNCTION DocumentsSales_lValidDireccion( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local lValid            := .T.










































RETURN lValid



static FUNCTION DocumentsSales_lValidPayment( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local nRec
   local nOrdAnt
   local lValid            := .F.
   local codigoPayment     := hGet( ::hDictionaryMaster, "Pago" )

   if empty( codigoPayment )
      RETURN .F.
   end

   ::oViewEditResumen:oCodigoFormaPago:Disable()
   ::oViewEditResumen:oNombreFormaPago:cText( "" )

   nRec                    := ( D():FormasPago( ::nView ) )->( Recno() )
   nOrdAnt                 := ( D():FormasPago( ::nView ) )->( ordsetfocus( "cCodPago" ) )

   if ( D():FormasPago( ::nView ) )->( dbSeek( codigoPayment ) )

      ::oViewEditResumen:oCodigoFormaPago:cText( ( D():FormasPago( ::nView ) )->cCodPago )
      ::oViewEditResumen:oNombreFormaPago:cText( ( D():FormasPago( ::nView ) )->cDesPago )

      lValid               := .T.

   else

      apoloMsgStop( "Forma de pago no encontrada" )

   end

   ( D():FormasPago( ::nView ) )->( ordsetfocus( nOrdAnt ) )
   ( D():FormasPago( ::nView ) )->( dbgoto( nRec ) )

   ::oViewEditResumen:oCodigoFormaPago:Enable()

RETURN lValid



static FUNCTION DocumentsSales_lValidCliente( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local lValid      := .T.
   local cNewCodCli  := hGet( ::hDictionaryMaster, "Cliente" )

   if empty( cNewCodCli )
      RETURN .T.
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodCliEmp() )
   end

   ::oViewEdit:getCodigoCliente:Disable()

   if !empty( ::oViewEdit:oGetEstablecimiento )
      ::oViewEdit:oGetEstablecimiento:cText( "" )
   end

   if ::setClientToDocument( cNewCodCli )

      ::setAgentToDocument()

      ::oViewEdit:refreshCliente()
      ::oViewEdit:refreshSerie()

      lValid         := .T.

   else

      ApoloMsgStop( "Cliente no encontrado" )

      lValid         := .F.

   end

   ::oViewEdit:getCodigoCliente:Enable()

RETURN lValid



static FUNCTION DocumentsSales_changeRuta( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local cFilter           := ""
   local cCliente          := space( RetNumCodCliEmp() )
   local cWhere            := ""
   local cOrder            := ""
   local cAgente           := ""

   if !hhaskey( ::hOrdenRutas, alltrim( str( ::oViewEdit:oCbxRuta:nAt ) ) )
      RETURN ( cCliente )
   end

   cWhere                  := hget( hget( ::hOrdenRutas, alltrim( str( ::oViewEdit:oCbxRuta:nAt ) ) ), "where" )
   cOrder                  := hget( hget( ::hOrdenRutas, alltrim( str( ::oViewEdit:oCbxRuta:nAt ) ) ), "order" )

   if ( accessCode():lFilterByAgent ) .AND. !empty( accessCode():cAgente )
      cAgente              += accessCode():cAgente
   end

   ::cAliasClientesRuta      := ClientesModel():getClientesPorRuta( cWhere, cAgente, cOrder )

   ( ::cAliasClientesRuta )->( dbGoTop() )
   cCliente             := ( ::cAliasClientesRuta )->Cod

   if !empty( ::oViewEdit:getRuta )
      ::oViewEdit:getRuta:cText( alltrim( Str( ( ::cAliasClientesRuta )->Recno ) ) + "/" + alltrim( str( ( ::cAliasClientesRuta )->( ADSKeyCount( , , 1 ) ) ) ) )
      ::oViewEdit:getRuta:Refresh()
   end

   if !empty( ::oViewEdit:getCodigoCliente )
      ::oViewEdit:getCodigoCliente:cText( cCliente )
      ::oViewEdit:getCodigoCliente:lValid()
   end

RETURN cCliente



static FUNCTION DocumentsSales_moveClient( lAnterior ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local lSet           := .F.

   if isTrue( lAnterior )
      ( ::cAliasClientesRuta )->( dbSkip( -1 ) )
      lSet           := .T.
   end

   if isFalse( lAnterior )

      if ( ::cAliasClientesRuta )->( ADSKeyNo( , , 1 ) ) < ( ::cAliasClientesRuta )->( ADSKeyCount( , , 1 ) )
         ( ::cAliasClientesRuta )->( dbSkip() )
      end

      lSet           := .T.

   end

   if isNil( lAnterior )
      lSet           := .T.
   end

   if !empty( ::oViewEdit:getRuta )
      ::oViewEdit:getRuta:cText( alltrim( str( ( ::cAliasClientesRuta )->Recno ) ) + "/" + alltrim( str( ( ::cAliasClientesRuta )->( ADSKeyCount( , , 1 ) ) ) ) )
      ::oViewEdit:getRuta:Refresh()
   end

   if lSet

      ::oViewEdit:getCodigoCliente:cText( ( ::cAliasClientesRuta )->Cod )
      ::oViewEdit:getCodigoCliente:lValid()

   end

RETURN ( .T. )



static FUNCTION DocumentsSales_loadNextClient( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::gotoUltimoCliente()

   if !hb_isnumeric( ::nUltimoCliente )
      RETURN ( self )
   end

   if ::nUltimoCliente <> 0
      ::nextClient()
   else
      ::moveClient()
   end

RETURN ( self )



static FUNCTION DocumentsSales_gotoUltimoCliente( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if !empty( ::nUltimoCliente ) .AND. !empty( ::cAliasClientesRuta ) .AND. ( ::cAliasClientesRuta )->( used() )
      ( ::cAliasClientesRuta )->( dbgoto( ::nUltimoCliente ) )
   end

RETURN .T.



static FUNCTION DocumentsSales_setUltimoCliente( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if !empty( ::cAliasClientesRuta ) .AND. ( ::cAliasClientesRuta )->( used() )
      ::nUltimoCliente  := ( ::cAliasClientesRuta )->recno
   end

RETURN nil



static FUNCTION DocumentsSales_saveAppendDetail( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::oDocumentLines:appendLineDetail( ::oDocumentLineTemporal )

   if !empty( ::oViewEdit:oBrowse )
      ::oViewEdit:oBrowse:Refresh()
   end

RETURN ( self )



static FUNCTION DocumentsSales_saveEditDetail( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::oDocumentLines:saveLineDetail( ::nPosDetail, ::oDocumentLineTemporal )

   if !empty( ::oViewEdit:oBrowse )
      ::oViewEdit:oBrowse:Refresh()
   end

RETURN ( self )



static FUNCTION DocumentsSales_lValidResumenVenta( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local lReturn  := .T.



   if empty( hGet( ::hDictionaryMaster, "Cliente" ) )
      ApoloMsgStop( "Cliente no puede estar vacío.", "¡Atención!" )
      RETURN .F.
   end



   if len( ::oDocumentLines:aLines ) <= 0
      ApoloMsgStop( "No puede almacenar un documento sin lineas.", "¡Atención!" )
      RETURN .F.
   end

RETURN lReturn



static FUNCTION DocumentsSales_onViewCancel( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if ApoloMsgNoYes( "¿Desea terminar el proceso?", "¡Atención!", .T. )
      ::oViewEdit:oDlg:end()
   end

RETURN ( self )



static FUNCTION DocumentsSales_onViewSave( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::oTotalDocument:Calculate()

   if ::isResumenVenta()

      ::runScriptPreSaveAppend()

      ::setUltimoCliente()

      ::oViewEdit:oDlg:end( 1 )

   end

RETURN ( self )



static FUNCTION DocumentsSales_isResumenVenta( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if !::lValidResumenVenta()
      RETURN .F.
   end

   if empty( ::oViewEditResumen )
      RETURN .F.
   end

   ::oViewEditResumen:setTitleDocumento( ::getTextSummaryDocument() )

RETURN ( ::oViewEditResumen:Resource() )



static FUNCTION DocumentsSales_isPrintDocument( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if empty( ::cFormatToPrint ) .OR. alltrim( ::cFormatToPrint ) == "No imprimir"
      RETURN .F.
   end

   ::cFormatToPrint  := left( ::cFormatToPrint, 3 )





   ( ::getDataTable() )->( OrdKeyCount() )

   ::printDocument()

   ::resetFormatToPrint()

RETURN( self )



static FUNCTION DocumentsSales_saveEditDocumento( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::Super:saveEditDocumento()

   ::deleteLinesDocument()

   ::assignLinesDocument()

   ::setLinesDocument()

RETURN ( .T. )



static FUNCTION DocumentsSales_saveAppendDocumento( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::Super:saveAppendDocumento()

   ::assignLinesDocument()

   ::deleteLinesCero()

   ::setLinesDocument()

RETURN ( .T. )



static FUNCTION DocumentsSales_assignLinesDocument( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local oDocumentLine
   local nNumeroLinea   := 0

   for each oDocumentLine in ::oDocumentLines:aLines

      nNumeroLinea++

      oDocumentLine:setNumeroLinea( nNumeroLinea )
      oDocumentLine:setPosicionImpresion( nNumeroLinea )

      oDocumentLine:setSerieMaster( ::hDictionaryMaster )
      oDocumentLine:setNumeroMaster( ::hDictionaryMaster )
      oDocumentLine:setSufijoMaster( ::hDictionaryMaster )

      oDocumentLine:setAlmacenMaster( ::hDictionaryMaster )

      oDocumentLine:setFechaMaster( ::hDictionaryMaster )
      oDocumentLine:setHoraMaster( ::hDictionaryMaster )

   next

RETURN( self )



static FUNCTION DocumentsSales_setLinesDocument( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local oDocumentLine

   for each oDocumentLine in ::oDocumentLines:aLines

      ::appendDocumentLine( oDocumentLine )

   next

RETURN ( self )



static FUNCTION DocumentsSales_onPreEnd( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::isPrintDocument()

   ::oDocumentLines:reset()

   ( ::getDataTable() )->( OrdSetFocus( ::nOrdenAnterior ) )

RETURN ( .T. )



static FUNCTION DocumentsSales_cComboRecargoValue( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local cComboRecargoValue

   if !empty( ::oViewEditResumen:aComboRecargo[1] )
      cComboRecargoValue    := ::oViewEditResumen:cComboRecargo[1]
   endif

RETURN ( ::oViewEditResumen:cComboRecargo  := cComboRecargoValue )



static FUNCTION DocumentsSales_addDocumentLine( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local oDocumentLine  := ::getDocumentLine()

   if !empty( oDocumentLine )
      ::oDocumentLines:addLines( oDocumentLine )
   end

RETURN ( self )



static FUNCTION DocumentsSales_setDatasInDictionaryMaster( NumeroDocumento ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if !empty( NumeroDocumento )
      hSet( ::hDictionaryMaster, "Numero", NumeroDocumento )
   end

   ::oTotalDocument:Calculate()

   hSet( ::hDictionaryMaster, "Envio", .T. )

   hSet( ::hDictionaryMaster, "FechaCreacion", date() )
   hSet( ::hDictionaryMaster, "HoraCreacion", time() )

   hSet( ::hDictionaryMaster, "TotalDocumento", ::oTotalDocument:getTotalDocument() )
   hSet( ::hDictionaryMaster, "TotalImpuesto", ::oTotalDocument:getImporteIva() )
   hSet( ::hDictionaryMaster, "TotalRecargo", ::oTotalDocument:getImporteRecargo() )
   hSet( ::hDictionaryMaster, "TotalNeto", ::oTotalDocument:getBase() )

RETURN ( .T. )



static FUNCTION DocumentsSales_getEditDetail( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if !empty( ::nPosDetail )
      ::oDocumentLineTemporal   := ::oDocumentLines:getCloneLineDetail( ::nPosDetail )
   end

RETURN ( self )



static FUNCTION DocumentsSales_setDocuments( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local cFormato
   local nFormato
   local cDocumento     := ""
   local aFormatos      := aDocs( ::getTypePrintDocuments(), D():Documentos( ::nView ), .T. )

   cFormato             := cFormatoDocumento( ::getSerie(), ::getCounterDocuments(), D():Contadores( ::nView ) )

   if empty( cFormato )
      cFormato          := cFirstDoc( ::getTypePrintDocuments(), D():Documentos( ::nView ) )
   end

   nFormato             := aScan( aFormatos, {|x| Left( x, 3 ) == cFormato } )
   nFormato             := Max( Min( nFormato, len( aFormatos ) ), 1 )

   ::oViewEditResumen:SetImpresoras( aFormatos )
   ::oViewEditResumen:SetImpresoraDefecto( aFormatos[ nFormato ] )

RETURN ( .T. )



static FUNCTION DocumentsSales_Resource( nMode ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local lResource   := .F.

   if !empty( ::oViewEdit )
      lResource      := ::oViewEdit:Resource( nMode )
   end

RETURN ( lResource )



static FUNCTION DocumentsSales_onPreSaveAppend( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local numeroDocumento

   numeroDocumento               := nNewDoc( ::getSerie(), ::getWorkArea(), ::getCounterDocuments(), , D():Contadores( ::nView ) )

   if empty( numeroDocumento )
      RETURN ( .F. )
   end

   ::actualizaStock()

RETURN ( ::setDatasInDictionaryMaster( numeroDocumento ) )



static FUNCTION DocumentsSales_onPreSaveAppendDetail( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local oDocumentLine           := ::getDocumentLine()
   local cDescripcionArticulo    := alltrim( ::hGetDetail( "DescripcionArticulo" ) )

   oDocumentLine:setValue( "DescripcionAmpliada", cDescripcionArticulo )

RETURN ( .T. )



static FUNCTION DocumentsSales_onPostSaveAppendDetail( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   ::oLinesDocumentsSales:onPostSaveAppendDetail()

RETURN ( .T. )



static FUNCTION DocumentsSales_onPreSaveEdit( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if ::oldSerie <> ::getSerie()
      ::onPreSaveAppend()
   else
      ::setDatasInDictionaryMaster()
   end

   ::rollBackStock()
   ::actualizaStock()

RETURN ( .T. )



static FUNCTION DocumentsSales_setAgentToDocument( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local tabletAgent

   tabletAgent       := UsuariosModel():getUsuarioAgenteExclusivo( Auth():uuid )

   if Empty( tabletAgent )
      tabletAgent    := GetPvProfString( "Tablet", "Agente", "", cIniAplication() )
   end

   if !empty( tabletAgent )
      hSet( ::hDictionaryMaster, "Agente", tabletAgent )
   end

RETURN ( .T. )



static FUNCTION DocumentsSales_setClientToDocument( CodigoCliente ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local lRETURN           := .F.

   D():getStatusClientes( ::nView )

   ( D():Clientes( ::nView ) )->( ordsetfocus( 1 ) )
   if ( D():Clientes( ::nView ) )->( dbseek( CodigoCliente ) )

      if ( D():Clientes( ::nView ) )->lBlqCli
         ApoloMsgStop( "Cliente bloqueado" )
         D():setStatusClientes( ::nView )
         Return .F.
      end

      lRETURN              := .T.

      hSet( ::hDictionaryMaster, "Cliente",              ( D():Clientes( ::nView ) )->Cod )
      hSet( ::hDictionaryMaster, "NombreCliente",        ( D():Clientes( ::nView ) )->Titulo )
      hSet( ::hDictionaryMaster, "DomicilioCliente",     ( D():Clientes( ::nView ) )->Domicilio )
      hSet( ::hDictionaryMaster, "PoblacionCliente",     ( D():Clientes( ::nView ) )->Poblacion )
      hSet( ::hDictionaryMaster, "ProvinciaCliente",     ( D():Clientes( ::nView ) )->Provincia )
      hSet( ::hDictionaryMaster, "CodigoPostalCliente",  ( D():Clientes( ::nView ) )->CodPostal )
      hSet( ::hDictionaryMaster, "TelefonoCliente",      ( D():Clientes( ::nView ) )->Telefono )
      hSet( ::hDictionaryMaster, "DniCliente",           ( D():Clientes( ::nView ) )->Nif )
      hSet( ::hDictionaryMaster, "GrupoCliente",         ( D():Clientes( ::nView ) )->Nif )
      hSet( ::hDictionaryMaster, "OperarPuntoVerde",     ( D():Clientes( ::nView ) )->lPntVer )

      if !empty( ::oViewEdit:oGetEstablecimiento )
         ::oViewEdit:oGetEstablecimiento:cText( ( D():Clientes( ::nView ) )->NbrEst )
         ::oViewEdit:oGetEstablecimiento:Refresh()
      end

      if ::lAppendMode()

         if !empty( ( D():Clientes( ::nView ) )->Serie )
            hSet( ::hDictionaryMaster, "Serie", ( D():Clientes( ::nView ) )->Serie )
         end

         hSet( ::hDictionaryMaster, "Almacen",                       ( if( empty( Application():codigoAlmacen() ), ( D():Clientes( ::nView ) )->cCodAlm, Application():codigoAlmacen() ) ) )
         hSet( ::hDictionaryMaster, "Pago",                          ( if( empty( ( D():Clientes( ::nView ) )->CodPago ), cDefFpg(), ( D():Clientes( ::nView ) )->CodPago ) ) )


         if Empty( cCodigoAgente() )
            hSet( ::hDictionaryMaster, "Agente",                     ( D():Clientes( ::nView ) )->cAgente )
            hSet( ::hDictionaryMaster, "ComisionAgente",             AgentesModel():getComision( ( D():Clientes( ::nView ) )->cAgente ) )
         else
            hSet( ::hDictionaryMaster, "Agente",                     cCodigoAgente() )
            hSet( ::hDictionaryMaster, "ComisionAgente",             AgentesModel():getComision( cCodigoAgente() ) )
         end

         hSet( ::hDictionaryMaster, "TipoImpuesto",                  ( D():Clientes( ::nView ) )->nRegIva )
         hSet( ::hDictionaryMaster, "Tarifa",                        ( D():Clientes( ::nView ) )->cCodTar )
         hSet( ::hDictionaryMaster, "Ruta",                          ( D():Clientes( ::nView ) )->cCodRut )
         hSet( ::hDictionaryMaster, "NumeroTarifa",                  ( D():Clientes( ::nView ) )->nTarifa )
         hSet( ::hDictionaryMaster, "DescuentoTarifa",               ( D():Clientes( ::nView ) )->nDtoArt )
         hSet( ::hDictionaryMaster, "Transportista",                 ( D():Clientes( ::nView ) )->cCodTrn )
         hSet( ::hDictionaryMaster, "DescripcionDescuento1",         ( D():Clientes( ::nView ) )->cDtoEsp )
         hSet( ::hDictionaryMaster, "PorcentajeDescuento1",          ( D():Clientes( ::nView ) )->nDtoEsp )
         hSet( ::hDictionaryMaster, "DescripcionDescuento2",         ( D():Clientes( ::nView ) )->cDpp    )
         hSet( ::hDictionaryMaster, "PorcentajeDescuento2",          ( D():Clientes( ::nView ) )->nDpp    )
         hSet( ::hDictionaryMaster, "DescripcionDescuento3",         ( D():Clientes( ::nView ) )->cDtoUno )
         hSet( ::hDictionaryMaster, "PorcentajeDescuento3",          ( D():Clientes( ::nView ) )->nDtoCnt )
         hSet( ::hDictionaryMaster, "DescripcionDescuento4",         ( D():Clientes( ::nView ) )->cDtoDos )
         hSet( ::hDictionaryMaster, "PorcentajeDescuento4",          ( D():Clientes( ::nView ) )->nDtoRap )
         hSet( ::hDictionaryMaster, "DescuentoAtipico",              ( D():Clientes( ::nView ) )->nDtoAtp )
         hSet( ::hDictionaryMaster, "LugarAplicarDescuentoAtipico",  ( D():Clientes( ::nView ) )->nSbrAtp )
         hSet( ::hDictionaryMaster, "RecargoEquivalencia",           ( D():Clientes( ::nView ) )->lReq    )

      end

   end

   D():setStatusClientes( ::nView )

RETURN( lRETURN )



static FUNCTION DocumentsSales_runGridPayment( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   if ::lZoomMode()
      RETURN ( self )
   end

   ::oViewEditResumen:oCodigoFormaPago:Disable()

   if !empty( ::oPayment:oGridPayment )

      ::oPayment:oGridPayment:showView()

      if ::oPayment:oGridPayment:isEndOk()
         ::oViewEditResumen:SetGetValue( ( D():FormasPago( ::nView ) )->cCodPago, "Pago" )
      end

      ::lValidPayment()

   end

   ::oViewEditResumen:oCodigoFormaPago:Enable()

RETURN ( self )



static FUNCTION DocumentsSales_runGridCustomer( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local nOrdenAnterior
   local nRecnoAnterior
   local cFiltroAnterior
   local cAgent            := AllTRim( GetPvProfString( "Tablet", "Agente", "", cIniAplication() ) )
   local cRut              := AllTRim( GetPvProfString( "Tablet", "ruta", "", cIniAplication() ) )
   local lFiltroAgente

   lFiltroAgente           := GetPvProfString( "Tablet", "FiltrarAgente", ".F.", cIniAplication() )
   logwrite( "*********************lFiltroAgente:" + lFiltroAgente )
   lFiltroAgente           := Upper( lFiltroAgente ) == ".T."

   logwrite( "*********************cAgent:" + cAgent )
   logwrite( "*********************cRut:" + cRut )

   if ::lZoomMode()
      RETURN ( self )
   end

   nRecnoAnterior    := ( D():Clientes( ::nView ) )->( recno() )
   nOrdenAnterior    := ( D():Clientes( ::nView ) )->( ordsetfocus() )
   cFiltroAnterior   := ( D():Clientes( ::nView ) )->( adsgetaof() )

   ( D():Clientes( ::nView ) )->( adsclearaof() )

   if !lFiltroAgente
      ( D():Clientes( ::nView ) )->( dbsetfilter( {|| !Field->lBlqCli }, "!lBlqCli" ) )
   else
      ( D():Clientes( ::nView ) )->( dbsetfilter( {|| !Field->lBlqCli .AND. Field->cAgente == cAgent .AND. Field->cCodRut == cRut }, "!lBlqCli .and. cAgente == cAgent .and. cCodRut == cRut" ) )
   end

   ( D():Clientes( ::nView ) )->( dbgotop() )

   ::oViewEdit:getCodigoCliente:Disable()

   if !empty( ::oCliente:oGridCustomer )

      ::oCliente:oGridCustomer:showView()

      if ::oCliente:oGridCustomer:IsEndOk()
         ::oViewEdit:SetGetValue( ( D():Clientes( ::nView ) )->Cod, "Cliente" )
      end

      ::lValidCliente()

   end

   ::oViewEdit:getCodigoCliente:Enable()

   ( D():Clientes( ::nView ) )->( dbClearFilter() )
   ( D():Clientes( ::nView ) )->( ordsetfocus( nOrdenAnterior ) )
   ( D():Clientes( ::nView ) )->( adssetaof( cFiltroAnterior ) )
   ( D():Clientes( ::nView ) )->( dbgoto( nRecnoAnterior ) )

RETURN ( self )



static FUNCTION DocumentsSales_runGridDirections( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales




































RETURN ( self )



static FUNCTION DocumentsSales_runGridSignature( ) ; local Self AS CLASS DocumentsSales := QSelf() AS CLASS DocumentsSales

   local oFirma
   local hBmp

   if !Empty( hGet( ::hDictionaryMaster, "Firma" ) )

      if !ApoloMsgNoYes( "El documento ya esta firmado", "¿Desea voler a firmarlo?", .T. )
         RETURN ( self )
      end

   end

   oFirma   := SignatureDocument():New( ::oSender )

   if !Empty( oFirma )

      oFirma:Play()

      if oFirma:oSignatureView:isEndOk()

         if File( oFirma:oSignatureView:cFile )

            hBmp        := readBitMap( 0, oFirma:oSignatureView:cFile )

            if !empty( hBmp )
               hSet( ::hDictionaryMaster, "Firma", bmpToStr( hBmp ) )
            end

            deleteObject( hBmp )

         end

      end

   end

RETURN ( self )
