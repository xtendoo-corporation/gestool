#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Dotnetbu.prg"
_HB_CLASS TDotNetButton ; function TDotNetButton ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDotNetButton", iif( .F., { }, { @HBObject() } ), @TDotNetButton() ) ) ;

      _HB_MEMBER { AS NUMERIC nInitId } ; oClass:AddMultiClsData( "NUMERIC", 100, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nInitId"}, .F. )
      _HB_MEMBER { AS ARRAY aCoors } ; oClass:AddMultiData( "ARRAY", {0,0,0,0}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCoors"}, .F. )
      _HB_MEMBER { bAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bAction"}, .F. )
      _HB_MEMBER { bRAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bRAction"}, .F. )
      _HB_MEMBER { bSelect } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bSelect"}, .F. )
      _HB_MEMBER { bWhen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bWhen"}, .F. )
      _HB_MEMBER { cIcon } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIcon"}, .F. )
      _HB_MEMBER { AS CHARACTER cName } ; oClass:AddMultiData( "CHARACTER", "oBoton", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )
      _HB_MEMBER { AS CHARACTER cPrompt } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPrompt"}, .F. )
      _HB_MEMBER { cxBmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cxBmp"}, .F. )
      _HB_MEMBER { AS LOGICAL lEnabled } ; oClass:AddMultiData( "LOGICAL", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lEnabled"}, .F. )
      _HB_MEMBER { AS LOGICAL lEnd } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lEnd"}, .F. )
      _HB_MEMBER { AS LOGICAL lGrouping } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lGrouping"}, .F. )
      _HB_MEMBER { AS LOGICAL lHead } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lHead"}, .F. )
      _HB_MEMBER { AS LOGICAL lHorizontal } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lHorizontal"}, .F. )
      _HB_MEMBER { AS LOGICAL lSelected } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSelected"}, .F. )
      _HB_MEMBER { AS LOGICAL lVisible } ; oClass:AddMultiData( "LOGICAL", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVisible"}, .F. )
      _HB_MEMBER { AS LOGICAL lWorking } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lWorking"}, .F. )
      _HB_MEMBER { nClrText } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrText"}, .F. )
      _HB_MEMBER { AS NUMERIC nColumna } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nColumna"}, .F. )
      _HB_MEMBER { nId } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nId"}, .F. )
      _HB_MEMBER { oGrupo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGrupo"}, .F. )
      _HB_MEMBER { oMenu } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMenu"}, .F. )
      _HB_MEMBER { oPopup } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPopup"}, .F. )
      _HB_MEMBER { oPrevio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPrevio"}, .F. )

      _HB_MEMBER { Cargo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Cargo"}, .F. )

      _HB_MEMBER New( nWidth, oGroup, cBmp, cCaption, nColumna, bAction, oMenu, bWhen, lGrouping, lHead, lEnd) AS CLASS TDotNetButton; oClass:AddMethod( "New", @TDotNetButton_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Click() ; oClass:AddVirtual( "Click" )
      _HB_MEMBER Copy(); oClass:AddMethod( "Copy", @TDotNetButton_Copy(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Delete(); oClass:AddMethod( "Delete", @TDotNetButton_Delete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Edit(); oClass:AddMethod( "Edit", @TDotNetButton_Edit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER End() ; oClass:AddVirtual( "End" )
      _HB_MEMBER GenPrg(); oClass:AddMethod( "GenPrg", @TDotNetButton_GenPrg(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetNewId(); oClass:AddInline( "GetNewId", {|Self | ( ( Self ) ), If( ::nInitId == nil, ::nInitId := 100,), ++::nInitId }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetTextWidth(); oClass:AddMethod( "GetTextWidth", @TDotNetButton_GetTextWidth(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Hide(); oClass:AddInline( "Hide", {|Self | ( ( Self ) ), ::lVisible := .F. }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER IsOver(); oClass:AddInline( "IsOver", {|Self, nRow, nCol | ( ( Self ) ), PtInRect( nRow, nCol,::aCoors ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Paint( hDC); oClass:AddMethod( "Paint", @TDotNetButton_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER RButtonDown( nRow, nCol, nFlags); oClass:AddMethod( "RButtonDown", @TDotNetButton_RButtonDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Refresh(); oClass:AddInline( "Refresh", {|Self | ( ( Self ) ), ::oGrupo:Refresh() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Show(); oClass:AddInline( "Show", {|Self | ( ( Self ) ), ::lVisible := .T. }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER cBmp( cNewVal); _HB_MEMBER _cBmp( cNewVal); oClass:AddMethod( "cBmp", @TDotNetButton_cBmp(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_cBmp", @TDotNetButton_cBmp(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER cCaption( cNewVal); _HB_MEMBER _cCaption( cNewVal); oClass:AddMethod( "cCaption", @TDotNetButton_cCaption(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_cCaption", @TDotNetButton_cCaption(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER cGetFromDLL(); oClass:AddMethod( "cGetFromDLL", @TDotNetButton_cGetFromDLL(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nBottom( nNewVal); _HB_MEMBER _nBottom( nNewVal); oClass:AddMethod( "nBottom", @TDotNetButton_nBottom(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nBottom", @TDotNetButton_nBottom(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nHeight( nNewVal); _HB_MEMBER _nHeight( nNewVal); oClass:AddMethod( "nHeight", @TDotNetButton_nHeight(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nHeight", @TDotNetButton_nHeight(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nHorizWidth( nHeight); oClass:AddMethod( "nHorizWidth", @TDotNetButton_nHorizWidth(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nLeft( nNewVal); _HB_MEMBER _nLeft( nNewVal); oClass:AddMethod( "nLeft", @TDotNetButton_nLeft(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nLeft", @TDotNetButton_nLeft(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nRight( nNewVal); _HB_MEMBER _nRight( nNewVal); oClass:AddMethod( "nRight", @TDotNetButton_nRight(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nRight", @TDotNetButton_nRight(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nTop( nNewVal); _HB_MEMBER _nTop( nNewVal); oClass:AddMethod( "nTop", @TDotNetButton_nTop(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nTop", @TDotNetButton_nTop(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER nWidth( nNewVal); _HB_MEMBER _nWidth( nNewVal); oClass:AddMethod( "nWidth", @TDotNetButton_nWidth(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_nWidth", @TDotNetButton_nWidth(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER oParent(); oClass:AddInline( "oParent", {|Self | ( ( Self ) ), ::oGrupo:oCarpeta:oParent}, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Selected(); oClass:AddInline( "Selected", {|Self | ( ( Self ) ), ( ::lSelected := .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER UnSelected(); oClass:AddInline( "UnSelected", {|Self | ( ( Self ) ), ( ::lSelected := .F. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Action(); oClass:AddInline( "Action", {|Self | ( ( Self ) ), ( if( ::isEnabled(), eval( ::bAction, self ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER When(); oClass:AddInline( "When", {|Self | ( ( Self ) ), ( if( hb_isblock( ::bWhen ), eval( ::bWhen, self ), .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER isEnabled(); oClass:AddInline( "isEnabled", {|Self | ( ( Self ) ), ( ::lEnabled .AND. ::When() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDotNetButton ;



  static FUNCTION TDotNetButton_New( nWidth, oGroup, cBmp, cCaption, nColumna, bAction, oMenu, bWhen, lGrouping, lHead, lEnd ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


   local n, nLen, oCol

   if cCaption  == nil; cCaption  :=  ""; endif
   if cBmp      == nil; cBmp      :=  ""; endif
   if lGrouping == nil; lGrouping := .F.; endif
   if lHead     == nil; lHead     := .F.; endif
   if lEnd      == nil; lEnd      := .F.; endif

   ::cBmp         := cBmp
   ::cPrompt      := cCaption
   ::lGrouping    := lGrouping
   ::lHead        := lHead
   ::lEnd         := lEnd
   ::bAction      := bAction

   ::aCoors[1]    := 0
   ::aCoors[2]    := 0
   ::aCoors[3]    := 0
   ::aCoors[4]    := 0 + nWidth

   ::oPopup       := oMenu
   ::bWhen        := bWhen

   ::nId          := ::GetNewId()

   ::oGrupo       := oGroup

   ::oGrupo:AddButton( self, nColumna, lGrouping, lHead, lEnd )

return self


  static FUNCTION TDotNetButton_nTop( nNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if nNewVal <> nil
   ::aCoors[1] := nNewVal
endif

return ::aCoors[1]



  static FUNCTION TDotNetButton_nLeft( nNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if nNewVal <> nil
   ::aCoors[2] := nNewVal
endif

return ::aCoors[2]


  static FUNCTION TDotNetButton_nBottom( nNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if nNewVal <> nil
   ::aCoors[3] := nNewVal
endif

return ::aCoors[3]


  static FUNCTION TDotNetButton_nRight( nNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if nNewVal <> nil
   ::aCoors[4] := nNewVal
endif

return ::aCoors[4]



  static FUNCTION TDotNetButton_nWidth( nNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if nNewVal <> nil
   ::aCoors[4] := ::aCoors[2] + nNewVal
endif

return ::aCoors[4]-::aCoors[2]


  static FUNCTION TDotNetButton_nHeight( nNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if nNewVal <> nil
   ::aCoors[3] := ::aCoors[1] + nNewVal
endif

return ::aCoors[3] - ::aCoors[1]



  static FUNCTION TDotNetButton_cCaption( cNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if cNewVal <> nil
   ::cPrompt := cNewVal
   ::oGrupo:ResizeItems()
endif

return ::cPrompt


  static FUNCTION TDotNetButton_cBmp( cNewVal ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


if cNewVal <> nil
   ::cxBmp := cNewVal
   if ::oGrupo <> nil
      ::oGrupo:ResizeItems()
   endif
endif

return ::cxBmp



  static FUNCTION TDotNetButton_Paint( hDC ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton

local lSmallImage := .F.
local nT          := ::nTop
local nL          := ::nLeft
local hBmp        := 0
local hScr        := 0
local rc
local hBmp2       := 0
local nH          := 0
local nW          := 0
local oFont, hFont, hOldFont
local nColor, nMode
local nTop, nLeft, nBottom, nRight
local nAlign
local a := {::oParent:nRow, ::oParent:nCol }
local aPoint := {a[1],a[2]}
local lIsOver
local nHeight := ::aCoors[3]-::aCoors[1]
local nWidth  := ::aCoors[4]-::aCoors[2]
local nH4 := nHeight/4
local nH5 := nHeight/5
local n2H5 := nH5*2
local n3H5 := n2H5 + nH5
local lCaptured
local hPen, hOldPen
local nHText
local nWText := ::GetTextWidth()
local hLib := 0

if ::lWorking
   return 0
endif


lIsOver := PtInRect( aPoint[1], aPoint[2], ::aCoors )


lCaptured := lIsOver .AND. ::oParent:lCaptured .AND. ::oParent:oBtnCaptured <> nil .AND. ::oParent:oBtnCaptured:nID == ::nID

if !::lVisible
   return 0
endif

if ::oGrupo:lByLines
   lSmallImage := .T.
endif

if ::oParent:lDisenio
   if ::oParent:cResources <> nil
      hLib := LoadLibrary( ::oParent:cResources )
      if hLib <> 0
         hBmp := LoadBitmap( hLib, ::cBmp )
         FreeLibrary( hLib )
      endif
   endif
endif

if hBmp == 0
   if( hBmp := LoadBitmap( GetResources(), ::cBmp ) ) == 0
       hBmp := ReadBitmap( 0, ::cBmp )
   endif
endif

if hBmp <> 0
   nH := BmpHeight( hBmp )
   nW := BmpWidth( hBmp )

endif

if hBmp <> 0
   if lSmallImage .OR. ::lHorizontal .OR. empty( ::cCaption )
      nT := ::nTop + int(::nHeight/2) - nH/2
      nL := ::nLeft + if( empty(::cCaption), ::nWidth/2 - nW/2, 5 )
      if ::oPopup <> nil
         nL := ::nLeft + 4
      endif
   else
      nT := ::nTop  + nH4 - (nH/2)
      nL := ::nLeft + (::nWidth /2) - (nW/2)
   endif
   if lCaptured
      nT++
      nL++
   endif
endif


rc := { ::aCoors[1], ::aCoors[2],::aCoors[3],::aCoors[4]}

if lIsOver .AND. ::isEnabled() .OR. ::lSelected

   if lCaptured
      VerticalGradient( hDC, {rc[1]             ,rc[2]+1,rc[1]+n2H5         ,rc[4]  }, ::oParent:oColor:GRADBTN10, ::oParent:oColor:GRADBTN11 )
      VerticalGradient( hDC, {rc[1]+ n2H5 -1    ,rc[2]+1,rc[1]+n3H5         ,rc[4]  }, ::oParent:oColor:GRADBTN20, ::oParent:oColor:GRADBTN21 )
      VerticalGradient( hDC, {rc[1]+ n3H5 -1    ,rc[2]+1,rc[3]              ,rc[4]  }, ::oParent:oColor:GRADBTN30, ::oParent:oColor:GRADBTN31 )
   else
      if ::lSelected
         VerticalGradient( hDC, {rc[1]             ,rc[2]+1,rc[1]+n2H5         ,rc[4]  }, ::oParent:oColor:GRADBTN100, ::oParent:oColor:GRADBTN101 )
         VerticalGradient( hDC, {rc[1]+ n2H5 -1    ,rc[2]+1,rc[1]+n3H5         ,rc[4]  }, ::oParent:oColor:GRADBTN200, ::oParent:oColor:GRADBTN201 )
         VerticalGradient( hDC, {rc[1]+ n3H5 -1    ,rc[2]+1,rc[3]              ,rc[4]  }, ::oParent:oColor:GRADBTN300, ::oParent:oColor:GRADBTN301 )
      else
         VerticalGradient( hDC, {rc[1]             ,rc[2]+1,rc[1]+n2H5         ,rc[4]  }, ::oParent:oColor:GRADBTN1000, ::oParent:oColor:GRADBTN1001 )
         VerticalGradient( hDC, {rc[1]+ n2H5 -1    ,rc[2]+1,rc[1]+n3H5         ,rc[4]  }, ::oParent:oColor:GRADBTN2000, ::oParent:oColor:GRADBTN2001 )
         VerticalGradient( hDC, {rc[1]+ n3H5 -1    ,rc[2]+1,rc[3]              ,rc[4]  }, ::oParent:oColor:GRADBTN3000, ::oParent:oColor:GRADBTN3001 )
      endif
      RoundBox( hDC,rc[2]+1,rc[1]+1,rc[4]-1,rc[3]-1, ::oParent:oColor:nCorner1, ::oParent:oColor:nCorner1, ::oParent:oColor:BORDERBTN1 )
   endif

   RoundBox( hDC,rc[2],rc[1],rc[4],rc[3], ::oParent:oColor:nCorner1, ::oParent:oColor:nCorner1, ::oParent:oColor:BORDERBTN2 )

endif

if ::lGrouping

   nTop    := rc[1]
   nLeft   := rc[2]
   nBottom := rc[3]
   nRight  := rc[4]


   if !lCaptured .AND. !lIsOver .AND. ::isEnabled() .AND. !::lSelected
      FillSolidRect(hDC, {nTop                     , nLeft, nTop + (nBottom-nTop)*0.4, nRight}, ::oParent:oColor:PANE_BTN_GRP1 )
      FillSolidRect(hDC, {nTop + (nBottom-nTop)*0.4, nLeft,                   nBottom, nRight}, ::oParent:oColor:PANE_BTN_GRP2 )
   endif

   if ::lHead


      Line( hDC, nTop     , nLeft+1 , nTop     , nRight  , ::oParent:oColor:BORDER_TOP_BTN_HEAD1 )
      Line( hDC, nTop+1   , nLeft+1 , nTop+1   , nRight-1, ::oParent:oColor:BORDER_TOP_BTN_HEAD2 )


      Line( hDC, nTop + 1 , nLeft   , nBottom  , nLeft   , ::oParent:oColor:BORDER_LEFT_BTN_HEAD1 )
      Line( hDC, nTop + 2 , nLeft+1 , nBottom-1, nLeft+1 , ::oParent:oColor:BORDER_LEFT_BTN_HEAD2 )


      Line( hDC, nBottom  , nLeft+1 , nBottom  , nRight  , ::oParent:oColor:BORDER_BOTTOM_BTN_HEAD1 )
      Line( hDC, nBottom-1, nLeft+2 , nBottom-1, nRight-1, ::oParent:oColor:BORDER_BOTTOM_BTN_HEAD2 )


      Line( hDC, nTop + 1 , nRight-1, nBottom-1, nRight-1, ::oParent:oColor:BORDER_RIGHT_BTN_HEAD1 )

   endif

   if ::lEnd

      if ::lHead


         Line( hDC, nTop     , nLeft+4 , nTop     , nRight  , ::oParent:oColor:BORDER_TOP_BTN_HEAD_END1 )
         Line( hDC, nTop+1   , nLeft+4 , nTop+1   , nRight-1, ::oParent:oColor:BORDER_TOP_BTN_HEAD_END2 )





         Line( hDC, nBottom  , nLeft +4, nBottom  , nRight  , ::oParent:oColor:BORDER_BOTTOM_BTN_HEAD_END1 )
         Line( hDC, nBottom-1, nLeft +4, nBottom-1, nRight-1, ::oParent:oColor:BORDER_BOTTOM_BTN_HEAD_END2 )


         Line( hDC, nTop + 1 , nRight  , nBottom  , nRight  , ::oParent:oColor:BORDER_RIGHT_BTN_HEAD_END1 )
         Line( hDC, nTop + 1 , nRight-1, nBottom-1, nRight-1, ::oParent:oColor:BORDER_RIGHT_BTN_HEAD_END2 )

      else


         Line( hDC, nTop     , nLeft   , nTop     , nRight  , ::oParent:oColor:BORDER_TOP_BTN_END1 )
         Line( hDC, nTop+1   , nLeft+1 , nTop+1   , nRight-1, ::oParent:oColor:BORDER_TOP_BTN_END2 )


         Line( hDC, nTop+1  , nLeft    , nBottom-1, nLeft   , ::oParent:oColor:BORDER_LEFT_BTN_END1   )


         Line( hDC, nBottom  , nLeft   , nBottom  , nRight  , ::oParent:oColor:BORDER_BOTTOM_BTN_END1 )
         Line( hDC, nBottom-1, nLeft   , nBottom-1, nRight-1, ::oParent:oColor:BORDER_BOTTOM_BTN_END2 )


         Line( hDC, nTop + 1 , nRight  , nBottom  , nRight  , ::oParent:oColor:BORDER_RIGHT_BTN_END1 )
         Line( hDC, nTop + 1 , nRight-1, nBottom-1, nRight-1, ::oParent:oColor:BORDER_RIGHT_BTN_END2 )

      endif

   endif

   if !::lEnd .AND. !::lHead

      Line( hDC, nTop    , nLeft    , nTop     , nRight  , ::oParent:oColor:BORDER_MIDLE_TOP1     )
      Line( hDC, nTop+1   , nLeft+1 , nTop+1   , nRight-1, ::oParent:oColor:BORDER_MIDLE_TOP2     )

      Line( hDC, nTop+1  , nLeft    , nBottom-1, nLeft   , ::oParent:oColor:BORDER_MIDLE_LEFT1    )

      Line( hDC, nBottom , nLeft    , nBottom  , nRight  , ::oParent:oColor:BORDER_MIDLE_BOTTOM1  )
      Line( hDC, nBottom-1, nLeft   , nBottom-1, nRight-1, ::oParent:oColor:BORDER_MIDLE_BOTTOM2  )

      Line( hDC, nTop + 1 , nRight-1, nBottom-1, nRight-1, ::oParent:oColor:BORDER_MIDLE_RIGHT1   )
   endif

endif

if hBmp <> 0
   if !::isEnabled()
      hBmp2 := BmpToGray( hBmp, 20 )
      DeleteObject( hBmp )
      hBmp := hBmp2
   endif
   DrawMasked( hDC, hBmp, nT, nL )
   DeleteObject( hBmp )
endif

if ::oParent:oFont <> nil
   hFont := ::oParent:oFont:hFont
else
   oFont := TFont():New( "Ms Sans Serif", 0, -12.3,,,,,,,,,,,,,, )
   hFont := oFont:hFont
endif

do case
   case ::lHorizontal

      nTop    := ::nTop
      nLeft   := nL +  nW + 4
      nBottom := ::nBottom
      nRight  := ::nRight

   case hBmp == 0 .AND. nWText < ::nWidth

      nTop    := ::nTop
      nLeft   := ::nLeft
      nBottom := ::nBottom
      nRight  := ::nRight

   case lSmallImage

      nTop    := ::nTop
      nLeft   := ::nLeft + nW + 8
      nBottom := ::nBottom
      nRight  := ::nRight

   otherwise

      nTop    := ::nTop + nH + 8
      nLeft   := ::nLeft
      nBottom := ::nBottom
      nRight  := ::nRight

endcase

if lCaptured
   nTop++
   nLeft++
   nBottom++
   nRight++
endif

hOldFont := SelectObject( hDC, hFont )
nColor   := SetTextColor( hDC, if( ::isEnabled(), ::oParent:oColor:_CLRTEXTBACK, 12632256 ) )
nMode    := SetBkMode( hDC, 1 )

do case
   case ::lHorizontal .AND. ( ::oPopup <> nil .OR. hBmp <> 0 )
        nAlign := nOr( 32, 4, 0x00040000 )
   case hBmp == 0 .AND. nWText < ::nWidth
        nAlign := nOr( 32, 4, 1 )
   case lSmallImage
        nAlign := nOR( 32, 0, 4 )
   otherwise
        nAlign := nOR( 1, 16, 0x00040000, 0 )
endcase

if ::oGrupo:lByLines .AND. hBmp == 0 .AND. ::oPopup <> nil
   nRight -= 11
endif


nHText := DrawText( hDC, ::cCaption, {nTop, nLeft, nBottom, nRight}, nOr( nAlign, 1024, 2048 ))

if ::oPopup <> nil .AND. !::lHorizontal
   if !lSmallImage .AND. nTop + nHText + 12 > ::nTop + ::nHeight
      nAlign := nOR( 16, 0x00040000, 0 )
   endif
   nLeft += 4
endif

DrawText( hDC, alltrim(::cCaption), {nTop, nLeft + if( nAlign == nOR( 1, 16, 0x00040000, 0, 2048 ),4,0), nBottom, nRight}, nAlign )



if ::oGrupo:lByLines .AND. hBmp == 0 .AND. ::oPopup <> nil
   nRight += 11
endif


if ::oPopup <> nil

   hBmp := BmpArrowDownNet()

   if ::lHorizontal
      nTop  := nTop + int(nHeight/2) - 2
      nLeft := nRight - 10
   else
      if !lSmallImage .AND. nTop + nHText + 12 > ::nTop + ::nHeight
         nTop  := nBottom - 8
         nLeft := nRight - 10
      else
         if lSmallImage
            nTop  := nTop + int(nHeight/2) - 2
            nLeft := nRight - 10
         else
            nTop  := nTop + nHText + 3
            nLeft := nLeft + nWidth/2 - 3
         endif
      endif
   endif
   Drawmasked( hDC, hBmp, nTop, nLeft )
   DeleteObject( hBmp )

endif

SetBkMode   ( hDC, nMode    )
SetTextColor( hDC, nColor   )
SelectObject( hDC, hOldFont )

if oFont <> nil
   oFont:End()
endif

return 0


  static FUNCTION TDotNetButton_RButtonDown( nRow, nCol, nFlags ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton


return 0

static function MakePopup( o )
local oPopup

oPopup := MenuBegin( .T.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )
    MenuAddItem( "Item 1",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
    MenuAddItem( "Item 2",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
    MenuAddItem( "Item 3",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
    MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)
    MenuAddItem( "Item 4",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
MenuEnd()

return oPopup


   static FUNCTION TDotNetButton_Edit( ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton

local oFont
local bValid := {||.T.}
local o := self
local uVar
local nTop, nLeft, nWidth, nHeight

uVar := padr(::cPrompt, 100)

nTop    := ::nTop + 6
nLeft   := ::nLeft +4
nWidth  := ::nWidth -8
nHeight := ::nHeight -8

oFont := TFont():New( "Ms Sans Serif", 0, -10,,,,,,,,,,,,,, )

   ::oParent:oGet := TGet():New(nTop,nLeft,{ | u | If( PCount()==0, uVar, uVar:= u ) },o:oParent,nWidth,nHeight,,,0,( 255 + ( 215 * 256 ) + ( 94 * 65536 ) ) ,oFont,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F.,.T.,)

   ::oParent:nLastKey := 0
   ::oParent:oGet:SetFocus()
   ::oParent:oGet:bValid := {|| .T. }




   ::oParent:oGet:bLostFocus := {||  o:oParent:oGet:Assign(), o:oParent:oGet:VarPut( o:oParent:oGet:oGet:VarGet() ), o:cCaption := if( o:oParent:nLastKey <> 27, alltrim(o:oParent:oGet:oGet:VarGet()), o:cCaption ) , o:oParent:GetCoords(), o:oParent:Refresh() }

   ::oParent:oGet:bKeyDown := { | nKey | If( nKey == 13 .OR. nKey == 27, ( o:oParent:nLastKey := nKey, o:oParent:oGet:End()), ) }



return nil


  static FUNCTION TDotNetButton_nHorizWidth( nHeight ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton

local nWidth
local hBmp
local nW := 0
local nH := 0

if valtype( ::cBmp ) == "C" .AND. "." $ ::cBmp
   hBmp := ReadBitmap( 0, ::cBmp )
else
   hBmp := LoadBitmap( GetResources(), ::cBmp )
endif

if hBmp <> 0
   nH := BmpHeight( hBmp )
   nW := BmpWidth( hBmp )
   DeleteObject( hBmp )
endif

if empty( ::cCaption )
   nWidth := 5 + nW + 5
else
   if hBmp == 0
      nWidth := 5 + ::GetTextWidth() + 5
   else
      nWidth := 5 + nW + 5 + ::GetTextWidth()
   endif
endif

if ::oGrupo:lByLines
   if ::oPopup <> nil
      nWidth += 11
   endif
endif

if nWidth < ::nWidth
   nWidth := ::nWidth
endif

return nWidth





   static FUNCTION TDotNetButton_GetTextWidth( ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton

local hFont
local oFont
local nWidth := 0

if ::oParent:oFont <> nil
   hFont := ::oParent:oFont:hFont
else
   oFont := TFont():New( "Ms Sans Serif", 0, -12.3,,,,,,,,,,,,,, )
   hFont := oFont:hFont
endif

nWidth := GetTextWidth( 0, ::cCaption, hFont )

if oFont <> nil
   oFont:End()
endif


return nWidth



   static FUNCTION TDotNetButton_Delete( ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton

local n, n2, nLen2
local nLen := len( ::oGrupo:aItems )

::lWorking := .T.

for n := 1 to nLen
    if ::oGrupo:aItems[n]:nId == ::nId
       adel( ::oGrupo:aItems, n )
       asize( ::oGrupo:aItems, nLen - 1 )
       exit
    endif
next

if ::oGrupo:lByColumns
   nLen := len( ::oGrupo:aColumns[::nColumna] )
   for n := 1 to nLen
       if ::oGrupo:aColumns[::nColumna]:aItems[n]:nId == ::nId
          adel( ::oGrupo:aColumns[::nColumna]:aItems, n )
          asize( ::oGrupo:aColumns[::nColumna]:aItems, len(::oGrupo:aColumns[::nColumna]:aItems) - 1 )
          exit
       endif
   next

   if len(::oGrupo:aColumns[::nColumna]:aItems) == 0
      adel( ::oGrupo:aColumns,::nColumna )
      asize( ::oGrupo:aColumns, len( ::oGrupo:aColumns ) - 1 )
   endif



   for n := 1 to len(::oGrupo:aColumns)
       nLen2 := len(::oGrupo:aColumns[n]:aItems)
       for n2 := 1 to nLen2
           ::oGrupo:aColumns[n]:aItems[n2]:nColumna := n
       next
   next
endif

::lWorking := .F.

return nil



   static FUNCTION TDotNetButton_GenPrg( ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton

local cPrg := ""

::cName := "oBtn" +  alltrim(str(::nId-100))

  ::oParent:cVars += "local " + ::cName + Chr(13)+Chr(10)

  cPrg += space(16) + ::cName + " := "










  cPrg += "TDotNetButton():New( " + alltrim( str(::nWidth))   +", "     + ::oGrupo:cName +", "     + if( valtype(::cBmp) == "N", alltrim(str(::cBmp)),'"'+::cBmp+'"') + ","  + '"'+ ::cPrompt +'", '             + if( ::nColumna > 0, alltrim(str(::nColumna)),) +", " + "{|| .t.}, "                      + " oMenu ,"                        +  " bWhen, "                        + if(::lGrouping,".t.",".f.")+ ", " + if(::lHead,".t.",".f.")+ ", "     + if(::lEnd,".t.",".f.") +         " ) " + Chr(13)+Chr(10)


return cPrg







      static FUNCTION TDotNetButton_cGetFromDLL( ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton




return 0


  static FUNCTION TDotNetButton_Copy( ) ; local Self AS CLASS TDotNetButton := QSelf() AS CLASS TDotNetButton

local cInfo := ::GenPrg()
local oClp


   oClp := TClipBoard():New( Upper("TEXT"), )

   if oClp:Open()
      oClp:Clear()
      oClp:SetText( cInfo )
      oClp:End()
   else
      msgStop( "The clipboard is not available now!" )
   endif

return nil
