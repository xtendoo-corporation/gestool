#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 19 ".\.\Prg\Empresa.prg"
static oWndBrw
static dbfEmp
static dbfDiv
static dbfDlg
static dbfCfg
static tmpDlg
static dbfBnc
static dbfCount
static oBandera

static cNewDlg
static cNewBnc
static lActEmp                := .T.
static nIvaReq                := 1

static cOldCodigoEmpresa

static nSemillaContadores     := 1

static aImportacion

static cOldSerie
static cOldNomSer

static cNewEmpresa            := ""

static oOfficeBar

static oBanco

static cTmpCon
static tmpCount

static bEdit                  := {| aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode ) }
static bEditConfig            := {| aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode | EditConfig( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode ) }
static bEdtDlg                := {| aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode, cCod | EdtDet( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode, cCod ) }

static aItmEmp                := {}
static aTiempo                := { "0 min.", "1 min.", "2 min.", "5 min.", "10 min.", "15 min.", "30 min.", "45 min.", "1 hora", "2 horas", "4 horas", "8 horas" }
static aTiempoImp             := { "0 seg.", "5 seg.", "10 seg.", "15 seg.", "20 seg.", "25 seg.", "30 seg.", "35 seg.", "40 seg.", "45 seg.", "50 seg.", "55 seg.", "60 seg." }

static aTipImpTpv             := { "No imprimir", "Imprimir", "Imprimir regalo" }

static cTiempoPed

static aDocumentos
static aImagenes

static oCmbDocumentos
static cCmbDocumentos

static oNombreSerie
static cNombreSerie

static oCmbSerie
static cCmbSerie

static oGetSerie
static cGetSerie

static oGetContador
static nGetContador

static oGetFormato
static cGetFormato

static oGetCopias
static nGetCopias

static oGetNFCPrefijo
static cGetNFCPrefijo

static oGetNFCContador
static cGetNFCContador

static oGroupNFC
static cGrupoNFC

static oGetPlantillaDefecto
static cGetPlantillaDefecto

static oGetPrecioVenta
static oGetPrecioWebVenta
static oGetPrecioProducto
static oGetPrecioCombinado

static oCmbContabilidad
static cCmbContabilidad
static aCmbContabilidad        := { "Contaplus", "A3 CON", "Sage despacho", "Monitor informática", "Sage 50" }

static cMailNotificaciones
static lInformacionInmediata
static lSincronizarVencimientos

static lDtoLinealDespuesTotal

static cDireccionFtpImagenes
static cUsuarioFtpImagenes
static cClaveFtpImagenes

static pdaFtp
static pdaUsuario
static pdaPassword
static pdaPasivo
static pdaRuta
static pdaRecogerVentas

static cCtaDescuentoEspecial

static nDecimalesRecargo

static lDesFacExt

static lBrowseSql
static lBusConte
static lPasPrepare

static nLenSubcta

static lCalBultos

static lEnvioRecepcion

static nView

static TComercio

static NUMERO_TARIFAS          := 6



STATIC FUNCTION OpenFiles( lCount )

   local lOpen    := .T.
   local oError
   local oBlock

   If( lCount == nil, lCount := .T., ) ;

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDlg ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if lCount
         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      end

      oBanco      := TBancos():Create()
      oBanco:OpenFiles()

      oBandera    := TBandera():New()

      TComercio   := TComercio():Default()



























      aDocumentos := {  "Pedido a proveedores", "Albaran de proveedores", "Facturas de proveedores", "Facturas rectificativas de proveedores", "S.A.T. a clientes", "Presupuestos a clientes", "Pedido de clientes", "Albaranes de clientes", "Facturas a clientes", "Anticipos de facturas clientes", "Facturas rectificativas", "Introducción depósitos", "Estado depósitos", "Tickets a clientes", "Partes de producción", "Expedientes", "Movimientos de almacén", "Sesiónes", "Remesas bancarias", "Ordenes de carga", "Cobros de clientes", "Recibos de proveedor", "Recibos de clientes", "Liquidación de agentes", "Entrega a cuenta pedido", "Entrega a cuenta albarán", "Entradas y salidas" }



























      aImagenes   := {  "gc_clipboard_empty_businessman_16", "gc_document_empty_businessman_16", "gc_document_text_businessman_16", "gc_document_text_businessman_16", "gc_power_drill_sat_user_16", "gc_notebook_user_16", "gc_clipboard_empty_user_16", "gc_document_empty_16", "gc_document_text_businessman_16", "gc_document_text_money2_16", "gc_document_text_delete2_16", "gc_package_plus_16", "gc_package_check_16", "gc_cash_register_user_16", "gc_document_text_worker_16", "gc_folder_document_16", "gc_pencil_package_16", "gc_clock_16", "gc_briefcase2_document_16", "gc_small_truck_16", "gc_user_16", "gc_briefcase2_businessman_16", "gc_briefcase2_user_16", "gc_briefcase2_agent_16", "gc_clipboard_empty_bag_16", "gc_document_empty_bag_16", "gc_cash_register_refresh_16" }

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



STATIC FUNCTION CloseFiles()

   if !empty( dbfEmp )
      ( dbfEmp )->( dbCloseArea() )
   end

   if !empty( dbfDiv )
      ( dbfDiv )->( dbCloseArea() )
   end

   if !empty( dbfDlg )
      ( dbfDlg )->( dbCloseArea() )
   end

   if !empty( dbfCount )
      ( dbfCount )->( dbCloseArea() )
   end

   if !empty( oBanco )
      oBanco:End()
   end

   TComercio:endInstance()

   dbfEmp      := nil
   dbfDiv      := nil
   dbfDlg      := nil
   dbfCount    := nil
   oBanco      := nil
   oWndBrw     := nil

RETURN .T.



FUNCTION Empresa( oMenuItem, oWnd )

   local nLevel         := 0

   If( oMenuItem == nil, oMenuItem := "01003", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

   if oWndBrw == nil





      nLevel            := Auth():Level( oMenuItem )

      if nAnd( nLevel, 1 ) == 0
         msgStop( "Acceso no permitido." )
         RETURN nil
      end





      if oWnd <> nil
         sysrefresh(); oWnd:CloseAll(); sysrefresh()
      end





      if !OpenFiles()
         RETURN nil
      end

















      oWndBrw := TShell():New( 2, 10, 18, 70, "Empresas",, oWnd,,, .F.,,, ( dbfEmp ),,,,, {"Código",    "Nombre"}, {||( if( oUser():lCambiarEmpresa, WinAppEmp(), ) )}, {||( if( oUser():lCambiarEmpresa, WinEdtEmp(), ) )}, {||( if( oUser():lCambiarEmpresa, WinDelEmp(), ) )},, nil, nLevel, "gc_factory_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      oWndBrw:lAutoPos              := .F.

      if oUser():lCambiarEmpresa



         oWndBrw:oBrw:bLDblClick    := {||   setEmpresa( ( dbfEmp )->CodEmp ), ApplicationLoad(), chkTurno( , oWnd ), if( !empty( oWndBrw ), oWndBrw:End( .T. ), ) }
      else
         oWndBrw:oBrw:bLDblClick    := {|| nil }
      end



      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Seleccionada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfEmp )->CodEmp == cCodigoEmpresaEnUso() }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_factory_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "CodEmp"
         :bEditValue       := {|| if( ( dbfEmp )->lGrupo, "<" + rTrim( ( dbfEmp )->CodEmp ) + ">", ( dbfEmp )->CodEmp ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNombre"
         :bEditValue       := {|| if( ( dbfEmp )->lGrupo, "<" + rTrim( ( dbfEmp )->cNombre ) + ">", ( dbfEmp )->cNombre ) }
         :nWidth           := 340
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      oWndBrw:CreateXFromCode()







      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()

   if oUser():lCambiarEmpresa






      oWndBrw:NewAt( "SEL",,, {||( Eval( oWndBrw:oBrw:bLDblClick ) )}, "Sele(c)cionar", "C",,, 8,, .F. )






      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







      oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )

   end







      oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfEmp ) )}, "(Z)oom", "Z",,, 8,, .F. )

   if oUser():lCambiarEmpresa






      oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel(), oWndBrw:oBrw:Refresh() )}, "(E)liminar", "E",,, 16,, .F. )






      oWndBrw:NewAt( "CNFCLI",,, {||( WinEdtRec( oWndBrw:oBrw, bEditConfig, dbfEmp ) )}, "Con(f)igurar", "F",,, 4,, .F. )

   end





      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

   else

        oWndBrw:setFocus()

   end

RETURN NIL



STATIC FUNCTION WinAppEmp()

   local cCodigoEmpresa
   local cNombreEmpresa

   if winAppRec( oWndBrw, bEdit, dbfEmp )

      cCodigoEmpresa    := ( dbfEmp )->CodEmp
      cNombreEmpresa    := ( dbfEmp )->cNombre





      oWndBrw:QuitOnProcess()
      oWndBrw:End()





      stopServices()





      initialProccesBuildEmpresa( cCodigoEmpresa, cNombreEmpresa )

   end

RETURN ( nil )



STATIC FUNCTION WinDupEmp()

   if WinDupRec( oWndBrw, bEdit, dbfEmp )
      initialProccesBuildEmpresa()
   end

RETURN ( nil )



STATIC FUNCTION initialProccesBuildEmpresa( cCodigoEmpresa, cNombreEmpresa )





   dbCloseAll()

   mkPathEmp( cCodigoEmpresa, cNombreEmpresa, cOldCodigoEmpresa, aImportacion, .T., .T., nSemillaContadores )





   setEmpresa( cCodigoEmpresa )





   ApplicationLoad()





   chkTurno( , oWnd() )





   initServices()

RETURN ( nil )



STATIC FUNCTION WinEdtEmp()

   if winEdtRec( oWndBrw, bEdit, dbfEmp )

      setEmpresa( ( dbfEmp )->CodEmp )

      applicationLoad()

      chkTurno()

   end

RETURN ( nil )






STATIC FUNCTION WinDelEmp()

   local lRet     := .F.
   local cEmp     := ( dbfEmp )->CodEmp
   local cPath    := fullCurDir() + "Emp" + cEmp + "\"

   if cEmp == cCodigoEmpresaEnUso()
      msgStop( "Imposible borrar empresa activa" )
      RETURN ( lRet )
   end


   if ApoloMsgNoYes( "Confirme eliminación de empresa", "Supresión de empresa" ) .AND.  ApoloMsgNoYes( "Eliminara DEFINITIVAMENTE los datos de la empresa : " + Rtrim( ( dbfEmp )->cNombre ), "Confirme supresión de empresa" )

      CursorWait()

      if IsDirectory( cPath )
         EraseFilesInDirectory(cPath )
      end

      DelegacionesModel():DeleteDelegacionesEmpresa( cEmp )

      EmpresasModel():DeleteEmpresa( cEmp )

      if !empty( oWndBrw )
         oWndBrw:goUp(); oWndBrw:goDown(); oWndBrw:SetFocus()
      end

      lRet  := .T.

      CursorWE()

   end

RETURN lRet



STATIC FUNCTION EdtRec( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oFld
    local bmpEmp
   local oBtnOk
   local oBtnPrv
   local oNomEmp
   local cNomEmp
   local oCodEmp

   local oBmpEmp
   local oBmpChg

   local oBrwDet
   local oBrwBnc

   local oSemilla

   local oGetSemilla

   local oBmpGeneral
   local oBmpImportacion
   local oBmpDelegaciones
   local oBmpBancos
   local lAppendMode       := ( nMode == 1 .OR. nMode == 4 )

   cOldCodigoEmpresa       := Space( 4 )
   nSemillaContadores      := 1
   aImportacion            := aImportacion()



   StopServices()

   if ( nMode == 4 )
      cOldCodigoEmpresa    := aTmp[ 1 ]
   end

   if ( nMode == 1 )
      aTmp[ 14 ]     := 7
      aTmp[ 15 ]     := 7
      aTmp[ 30 ]     := 1
      aTmp[ 31 ]     := 1
      aTmp[ 122 ]     := 1
      aTmp[ 118 ]     := 1
      aTmp[ 123 ]     := 1
      aTmp[ 119 ]     := 1
      aTmp[ 49 ]     := 8
      aTmp[ 138 ]     := 8
      aTmp[ 17 ]     := "EUR"
      aTmp[ 18 ]     := "PTS"
      aTmp[ 171 ]    := .T.
      aTmp[ 172 ]    := .T.
      aTmp[ 173 ]    := .T.
      aTmp[ 174 ]    := .T.
      aTmp[ 175 ]    := .T.
      aTmp[ 176 ]    := .T.
      aTmp[ 177 ]    := "Precio 1"
      aTmp[ 178 ]    := "Precio 2"
      aTmp[ 179 ]    := "Precio 3"
      aTmp[ 180 ]    := "Precio 4"
      aTmp[ 181 ]    := "Precio 5"
      aTmp[ 182 ]    := "Precio 6"
      aTmp[ 273  ]    := "IVA"
   end

   if ( lAppendMode )
      aTmp[ 155 ]     := Ctod( "01/01/" + Str( Year( Date() ), 4 ) )
      aTmp[ 156 ]     := Ctod( "31/12/" + Str( Year( Date() ), 4 ) )
      aTmp[ 317    ]     := win_uuidcreatestring()
   end

   if BeginEdtRec( aTmp, nMode )
      RETURN .F.
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Empresas", "EMPRESA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

   if ( lAppendMode )









   oFld := TFolder():ReDefine( 400, {"Em&presa", "&Importación", "De&legaciones"}, { "EMPRESA_1","EMPRESA_9","EMPRESA_11" }, oDlg,,,,, .F., )

   else







   oFld := TFolder():ReDefine( 400, {"Em&presa", "De&legaciones"}, { "EMPRESA_1","EMPRESA_11" }, oDlg,,,,, .F., )

   end





   oBmpGeneral := TBitmap():ReDefine( 500, "gc_factory_48",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .T. )






   aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oFld:aDialogs[ 1 ],, "@!", {||    ( NotValid( aGet[ 1 ], dbfEmp, .T., "0" ) .AND. !empty( aTmp[ 1 ] ) )},,,,,, .F., {||     ( lAppendMode )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 4 ], aTmp[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[219], aTmp[219]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[5], aTmp[5]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[6], aTmp[6]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[7], aTmp[7]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[8], aTmp[8]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[9], aTmp[9]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[10], aTmp[10]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[11], aTmp[11]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 194, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   aGet[ 293 ] := TCheckBox():ReDefine( 195, { | u | If( PCount()==0, aTmp[ 293 ], aTmp[ 293 ]:= u ) }, oFld:aDialogs[ 1 ],, {||( if( aTmp[ 293 ], ( aGet[ 294 ]:varPut( Year( Date() ) + 1 ), aGet[ 295 ]:varPut( 0 ) ), ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )





   aGet[ 294 ] := TGetHlp():ReDefine( 196, { | u | If( PCount()==0, aTmp[ 294 ], aTmp[ 294 ]:= u ) }, oFld:aDialogs[ 1 ],, "9999",,,,,,, .F., {||     ( aTmp[ 293 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   aGet[ 295 ] := TGetHlp():ReDefine( 197, { | u | If( PCount()==0, aTmp[ 295 ], aTmp[ 295 ]:= u ) }, oFld:aDialogs[ 1 ],, "9999",,,,,,, .F., {||     ( aTmp[ 293 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )












   aGet[ 17 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDiv( aGet[ 17 ], oBmpEmp, , , , dbfDiv, oBandera ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 17 ], oBmpEmp, nil, dbfDiv, oBandera )}, nil, "LUPA",, )




   oBmpEmp := TBitmap():ReDefine( 361, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )








   aGet[ 18 ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDiv( aGet[ 18 ], oBmpChg, , , , dbfDiv, oBandera ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 18 ], oBmpChg, nil, dbfDiv, oBandera )}, nil, "LUPA",, )




   oBmpChg := TBitmap():ReDefine( 371, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )








   TGetHlp():ReDefine( 201, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],, "99", {||    ( aTmp[ 14 ] >= 4 .AND. aTmp[ 14 ] <= 12 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      4}, {|| 12},, nil,,, )








   TGetHlp():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],, "99", {||    ( aTmp[ 15 ] >= 4 .AND. aTmp[ 15 ] <= 12 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      4}, {|| 12},, nil,,, )





   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 155 ], aTmp[ 155 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 156 ], aTmp[ 156 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

   if ( lAppendMode )





      oBmpImportacion := TBitmap():ReDefine( 500, "gc_office_building_48",, oFld:aDialogs[ 2 ],,, .F., .F.,,, .F.,,, .T. )








      oCodEmp := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cOldCodigoEmpresa, cOldCodigoEmpresa:= u ) }, oFld:aDialogs[2],, "@!", {||    ( if( cEmpresa( oCodEmp, dbfEmp, oNomEmp ), AppFromEmpresa( cOldCodigoEmpresa, dbfEmp, aGet, aTmp, tmpDlg, dbfDlg ), .F. ) )},,,,,, .F., {||      ( lAppendMode )},, .F., .F.,,,,, {|Self|( BrwEmpresa( oCodEmp, dbfEmp, oNomEmp ) )}, nil, "LUPA",, )




      oNomEmp := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cNomEmp, cNomEmp:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aImportacion:lArticulos, aImportacion:lArticulos:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TRadMenu():Redefine( { | u | If( PCount()==0, aImportacion:nCosto, aImportacion:nCosto:= u ) }, oFld:aDialogs[2],, { 231, 232 },,,,, .F., {||     ( ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) ) .AND. aImportacion:lArticulos )}, )




      TCheckBox():ReDefine( 240, { | u | If( PCount()==0, aImportacion:lClientes, aImportacion:lClientes:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 250, { | u | If( PCount()==0, aImportacion:lProveedor, aImportacion:lProveedor:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 251, { | u | If( PCount()==0, aImportacion:lOferta, aImportacion:lOferta:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 252, { | u | If( PCount()==0, aImportacion:lPromocion, aImportacion:lPromocion:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 260, { | u | If( PCount()==0, aImportacion:lAlmacen, aImportacion:lAlmacen:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 270, { | u | If( PCount()==0, aImportacion:lAgente, aImportacion:lAgente:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 280, { | u | If( PCount()==0, aImportacion:lRuta, aImportacion:lRuta:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 285, { | u | If( PCount()==0, aImportacion:lDocument, aImportacion:lDocument:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 290, { | u | If( PCount()==0, aImportacion:lStockIni, aImportacion:lStockIni:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aImportacion:lFPago, aImportacion:lFPago:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 310, { | u | If( PCount()==0, aImportacion:lPedPrv, aImportacion:lPedPrv:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 320, { | u | If( PCount()==0, aImportacion:lAlbPrv, aImportacion:lAlbPrv:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 330, { | u | If( PCount()==0, aImportacion:lPreCli, aImportacion:lPreCli:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 340, { | u | If( PCount()==0, aImportacion:lPedCli, aImportacion:lPedCli:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 350, { | u | If( PCount()==0, aImportacion:lAlbCli, aImportacion:lAlbCli:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 360, { | u | If( PCount()==0, aImportacion:lVale, aImportacion:lVale:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 370, { | u | If( PCount()==0, aImportacion:lAnticipo, aImportacion:lAnticipo:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 380, { | u | If( PCount()==0, aImportacion:lProduccion, aImportacion:lProduccion:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 390, { | u | If( PCount()==0, aImportacion:lBancos, aImportacion:lBancos:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aImportacion:lScript, aImportacion:lScript:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )




      TCheckBox():ReDefine( 410, { | u | If( PCount()==0, aImportacion:lEntidades, aImportacion:lEntidades:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !empty( cOldCodigoEmpresa ) .AND. ( lAppendMode ) )}, .F. )






      oGetSemilla := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nSemillaContadores, nSemillaContadores:= u ) }, oFld:aDialogs[2],, "999999999", {||    ( nSemillaContadores > 0 )},,,,,, .F., {||      ( lAppendMode )},, .F., .F.,,,,,, nil,,, )

   end










      oBmpDelegaciones := TBitmap():ReDefine( 600, "Flag_Eu_48_Alpha",, oFld:aDialogs[ if( lAppendMode, 3, 2 ) ],,, .F., .F.,,, .F.,,, .T. )




      TButton():ReDefine( 500, {||( WinAppRec( oBrwDet, bEdtDlg, tmpDlg, , , aTmp[ 1] ), oBrwDet:DrawSelect() )}, oFld:aDialogs[ if( lAppendMode, 3, 2 ) ],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDet, bEdtDlg, tmpDlg ) )}, oFld:aDialogs[ if( lAppendMode, 3, 2 ) ],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( DbDelRec( oBrwDet, tmpDlg ) )}, oFld:aDialogs[ if( lAppendMode, 3, 2 ) ],,, .F., {||     ( nMode <> 3 )},,, .F. )





      oBrwDet                 := IXBrowse():New( if( lAppendMode, oFld:aDialogs[ 3 ], oFld:aDialogs[ 2 ] ) )

      oBrwDet:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDet:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDet:cAlias          := tmpDlg
      oBrwDet:nMarqueeStyle   := 6
      oBrwDet:cName           := "Delegacion.Empresa"

      with object ( oBrwDet:AddCol() )
         :cHeader             := "Código"
         :cSortOrder          := "cCodDlg"
         :bEditValue          := {|| ( tmpDlg )->cCodDlg }
         :nWidth              := 80
      end

      with object ( oBrwDet:AddCol() )
         :cHeader             := "Nombre"
         :cSortOrder          := "cNomDlg"
         :bEditValue          := {|| ( tmpDlg )->cNomDlg }
         :nWidth              := 260
      end

      oBrwDet:bRClicked       := {| nRow, nCol, nFlags | oBrwDet:RButtonDown( nRow, nCol, nFlags ) }

      if ( nMode <> 3 )
         oBrwDet:bLDblClick   := {|| WinEdtRec( oBrwDet, bEdtDlg, tmpDlg ) }
      end

      oBrwDet:CreateFromResource( 100 )









      oBtnPrv := TButton():ReDefine( 3, {||( PrvTrans( oFld, oBtnOk ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      oBtnOk := TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oBrw, oFld, oDlg, oBtnOk, oBrwDet, dbfEmp, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oFld:aDialogs[2]:AddFastKey( 113, {|| WinAppRec( oBrwDet, bEdtDlg, tmpDlg, , , aTmp[1] ), oBrwDet:DrawSelect() } )
         oFld:aDialogs[2]:AddFastKey( 114, {|| WinEdtRec( oBrwDet, bEdtDlg, tmpDlg ) } )
         oFld:aDialogs[2]:AddFastKey( 115, {|| DBDelRec( oBrwDet, tmpDlg ) } )
         oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )
      end

      oDlg:bStart    := {|| oBrwDet:Load(), aGet[ 1 ]:SetFocus(), aGet[ 17 ]:lValid(), aGet[ 18 ]:lValid() }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( if( !lAppendMode, oBtnPrv:Hide(), SetWindowText( oBtnOk:hWnd, "&Siguiente >" ) ) )}, oDlg:bRClicked,,, )

   oBmpChg:End()
   oBmpEmp:End()

   if !empty( oBmpGeneral )
      oBmpGeneral:End()
   end

   if !empty( oBmpImportacion )
      oBmpImportacion:End()
   end

   if !empty( oBmpDelegaciones )
      oBmpDelegaciones:End()
   end

   DeleteObject( bmpEmp )





   KillTrans()





RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION EditConfig( aTmp, aGet, dbfEmp, oBrw, nSelFolder, bValid, nMode )

   local n
   local oFnt
    local oDlg
   local oFld
   local oSay                    := Array( 47 )
   local cSay                    := AFill( Array( 47 ), "" )
   local oError
   local oBlock
   local oPdaRuta

   local oBrwEmp
   local oBrwCon

   local oBmpComportamiento
   local oBmpDefecto
   local oBmpArticulos
   local oBmpContadores
   local oBmpContabilidad
   local oBmpEnvios
   local oBmpComunicacion
   local oBmpTPV

   local aBnfSobre               := { "Costo", "Venta" }
   local aCifRut                 := { "Cálculo de C.I.F.", "Cálculo de R.U.T." }
   local aPrinters               := GetPrinters()
   local oSayFmt
   local cSayFmt                 := ""
   local oGroupNFC
   local oSerie
   local cSerie                  := "A"

   local oPrestashopFile
   local cPrestashopFile         := ""





   if nAnd( Auth():Level( "01003" ), 4 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .F.
   end

   if lGrupoEmpresa( ( ( dbfEmp )->CodEmp ), dbfEmp )
      msgStop( "No se puede configurar un grupo de empresas." )
      RETURN .F.
   end

   if BeginEditConfig( aTmp, nMode )
      RETURN .F.
   end

   cCmbDocumentos                := aDocumentos[ 1 ]
   cCmbSerie                     := "A"
   nGetContador                  := 1
   cGetFormato                   := Space( 3 )
   cGetPlantillaDefecto          := Space( 250 )
   nGetCopias                    := 1
   cGetSerie                     := Space( 1 )

   cNombreSerie                  := aTmp[ 244 ]




   StopServices()



   setEmpresa( ( dbfEmp )->CodEmp, oBrw )

   ApplicationLoad()

   checkEmpresaTablesExistences()



   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if empty( aTmp[ 108 ] )
      aTmp[ 108 ]     := Space( 1 )
   end

   if empty( aTmp[ 21 ] )
      aTmp[ 21 ]     := "Cliente"
   end

   if empty( aTmp[ 23 ] )
      aTmp[ 23 ]     := "A:"
   end

   if empty( aTmp[ 163 ] )
      aTmp[ 163 ]     := Padr( "Cajas", 100 )
   end

   if empty( aTmp[ 164 ] )
      aTmp[ 164 ]     := Padr( "Unidades", 100 )
   end

   if empty( aTmp[ 302 ] )
      aTmp[ 302 ]  := Padr( "Bultos", 100 )
   end

   if empty( aTmp[ 183 ] )
      aTmp[ 183 ]     := "0800"
   end

   if empty( aTmp[ 273 ] )
      aTmp[ 273 ]     := "IVA"
   end

   cOldNomSer              := "A"

   n                       := aScan( aPrinters, {| cPrinter | Rtrim( cPrinter ) == Rtrim( aTmp[ 152 ] ) } )
   if n <> 0
      aTmp[ 152 ]     := aPrinters[ n ]
   else
      aTmp[ 152 ]     := Space( 200 )
   end

   if empty( nSelFolder )
      nSelFolder           := 1
   end

   cSay[ 36 ]                 := aBnfSobre[ Max( aTmp[ 130 ], 1 ) ]
   cSay[ 37 ]                 := aBnfSobre[ Max( aTmp[ 131 ], 1 ) ]
   cSay[ 38 ]                 := aBnfSobre[ Max( aTmp[ 132 ], 1 ) ]
   cSay[ 39 ]                 := aBnfSobre[ Max( aTmp[ 133 ], 1 ) ]
   cSay[ 40 ]                 := aBnfSobre[ Max( aTmp[ 134 ], 1 ) ]
   cSay[ 41 ]                 := aBnfSobre[ Max( aTmp[ 135 ], 1 ) ]
   cSay[ 42 ]                 := aCifRut[ Max( aTmp[ 207 ], 1 ) ]

   cSay[ 47 ]                 := RetFld( aTmp[ 16 ], dbfDlg, "cNomDlg" )

   cTiempoPed                 := cTiempoToCadena( aTmp[ 211 ] )

   cCmbContabilidad           := aCmbContabilidad[ Min( Max( aTmp[ 298 ], 1 ), len( aCmbContabilidad ) ) ]

   cMailNotificaciones        := padr( ConfiguracionesEmpresaModel():getValue( "mail_notificaciones", "" ), 200 )

   lEnvioRecepcion            := ConfiguracionesEmpresaModel():getLogic( "envio_recepcion", .F. )

   lInformacionInmediata      := ConfiguracionesEmpresaModel():getLogic( "informacion_inmediata", .F. )

   lSincronizarVencimientos   := ConfiguracionesEmpresaModel():getLogic( "sincronizar_vencimientos", .F. )

   pdaRuta                 := padr( ConfiguracionesEmpresaModel():getValue( "pda_ruta", "" ), 200 )
   pdaFtp                  := padr( ConfiguracionesEmpresaModel():getValue( "pda_ftp", "" ), 200 )
   pdaUsuario              := padr( ConfiguracionesEmpresaModel():getValue( "pda_user", "" ), 200 )
   pdaPassword             := padr( ConfiguracionesEmpresaModel():getValue( "pda_password", "" ), 200 )
   pdaPasivo               := ConfiguracionesEmpresaModel():getLogic( "pda_pasivo", .F. )
   pdaRecogerVentas        := ConfiguracionesEmpresaModel():getNumeric( "pda_recoger_ventas", 0 )
   lBrowseSql              := ConfiguracionesEmpresaModel():getLogic( "lBrowseSql", .F. )
   lBusConte               := ConfiguracionesEmpresaModel():getLogic( "lBusConte", .F. )
   lPasPrepare             := ConfiguracionesEmpresaModel():getLogic( "lPasPrepare", .F. )
   lDtoLinealDespuesTotal  := ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )

   cDireccionFtpImagenes   := padr( ConfiguracionesEmpresaModel():getValue( "Direccion_Ftp_Img", "" ), 200 )
   cUsuarioFtpImagenes     := padr( ConfiguracionesEmpresaModel():getValue( "Usuario_Ftp_Img", "" ), 200 )
   cClaveFtpImagenes       := padr( ConfiguracionesEmpresaModel():getValue( "Clave_Ftp_Img", "" ), 200 )

   nLenSubcta              := ConfiguracionesEmpresaModel():getNumeric( "lenSubCta", 1 )

   lDesFacExt              := ConfiguracionesEmpresaModel():getLogic( "lDesFacExt", .F. )

   cCtaDescuentoEspecial   := padr( ConfiguracionesEmpresaModel():getValue( "cuenta_descuento_especial", "" ), 12 )

   nDecimalesRecargo       := ConfiguracionesEmpresaModel():getNumeric( "nDecimalesRE", 2 )

   lCalBultos              := ConfiguracionesEmpresaModel():getLogic( "lCalBultos", .F. )

   LoaItmEmp( aTmp )




   oDlg = TDialog():New(,,,, "Configuración de empresa : " + aTmp[ 1 ] + "-" + aTmp[ 2 ], "EmpresaCfg",, .F.,,,,, oWnd(), .F.,,,,,, .F.,, "oDlg", nil, )











      oFld := TPages():Redefine( 400, oDlg, {"EMPRESA_2", "EMPRESA_3", "EMPRESA_8", "EMPRESA_TPV", "EMPRESA_10", "EMPRESA_CONTABILIDAD", "EMPRESA_ENVIOS", "EMPRESA_COMUNICACIONES"},,,, )







      oBmpComportamiento := TBitmap():ReDefine( 500, "gc_wrench_48",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .T. )




      aGet[ 20 ] := TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 34 ] := TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 35 ] := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 36 ] := TCheckBox():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 272 ] := TCheckBox():ReDefine( 206, { | u | If( PCount()==0, aTmp[ 272 ], aTmp[ 272 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 145 ] := TCheckBox():ReDefine( 187, { | u | If( PCount()==0, aTmp[ 145 ], aTmp[ 145 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 140 ] := TCheckBox():ReDefine( 185, { | u | If( PCount()==0, aTmp[ 140 ], aTmp[ 140 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 138, { | u | If( PCount()==0, aTmp[ 170 ], aTmp[ 170 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 273 ] := TGetHlp():ReDefine( 139, { | u | If( PCount()==0, aTmp[ 273 ], aTmp[ 273 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )







      TGetHlp():ReDefine( 141, { | u | If( PCount()==0, nDecimalesRecargo, nDecimalesRecargo:= u ) }, oFld:aDialogs[ 1 ],, "9",,,,,,, .F.,,, .F., .T.,,, {||      2}, {||      6},, nil,,, )




      aGet[ 38 ] := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 113 ] := TCheckBox():ReDefine( 181, { | u | If( PCount()==0, aTmp[ 113 ], aTmp[ 113 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 143 ] := TCheckBox():ReDefine( 182, { | u | If( PCount()==0, aTmp[ 143 ], aTmp[ 143 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 166 ] := TCheckBox():ReDefine( 191, { | u | If( PCount()==0, aTmp[ 166 ], aTmp[ 166 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 165 ] := TCheckBox():ReDefine( 189, { | u | If( PCount()==0, aTmp[ 165 ], aTmp[ 165 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 194 ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 194 ], aTmp[ 194 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 193 ] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 193 ], aTmp[ 193 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 242 ] := TCheckBox():ReDefine( 204, { | u | If( PCount()==0, aTmp[ 242 ], aTmp[ 242 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 141 ] := TCheckBox():ReDefine( 195, { | u | If( PCount()==0, aTmp[ 141 ], aTmp[ 141 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 238 ] := TCheckBox():ReDefine( 196, { | u | If( PCount()==0, aTmp[ 238 ], aTmp[ 238 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 305 ] := TCheckBox():ReDefine( 197, { | u | If( PCount()==0, aTmp[ 305 ], aTmp[ 305 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 319 ] := TCheckBox():ReDefine( 154, { | u | If( PCount()==0, aTmp[ 319 ], aTmp[ 319 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 323 ] := TCheckBox():ReDefine( 155, { | u | If( PCount()==0, aTmp[ 323 ], aTmp[ 323 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 37 ] := TCheckBox():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 137 ] := TCheckBox():ReDefine( 184, { | u | If( PCount()==0, aTmp[ 137 ], aTmp[ 137 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 195 ] := TCheckBox():ReDefine( 192, { | u | If( PCount()==0, aTmp[ 195 ], aTmp[ 195 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 116 ] := TCheckBox():ReDefine( 183, { | u | If( PCount()==0, aTmp[ 116 ], aTmp[ 116 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )





      aGet[ 117 ] := TCheckBox():ReDefine( 188, { | u | If( PCount()==0, aTmp[ 117 ], aTmp[ 117 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F., {||     aTmp[ 116 ]}, .F. )





      aGet[ 236 ] := TCheckBox():ReDefine( 153, { | u | If( PCount()==0, aTmp[ 236 ], aTmp[ 236 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F., {||     aTmp[ 116 ]}, .F. )




      aGet[ 142 ] := TCheckBox():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 142 ], aTmp[ 142 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 241 ] := TCheckBox():ReDefine( 203, { | u | If( PCount()==0, aTmp[ 241 ], aTmp[ 241 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )









      aGet[ 205 ] := TCheckBox():ReDefine( 198, { | u | If( PCount()==0, aTmp[ 205 ], aTmp[ 205 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 300 ] := TCheckBox():ReDefine( 306, { | u | If( PCount()==0, aTmp[ 300 ], aTmp[ 300 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 39 ] := TCheckBox():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 297 ] := TCheckBox():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 297 ], aTmp[ 297 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 40 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      aGet[ 45 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 46 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      aGet[ 41 ] := TCheckBox():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 42 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      aGet[ 43 ] := TCheckBox():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 43 ], aTmp[ 43 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 44 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      aGet[ 310 ] := TCheckBox():ReDefine( 199, { | u | If( PCount()==0, aTmp[ 310 ], aTmp[ 310 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )







      oBmpTPV := TBitmap():ReDefine( 500, "gc_cash_register_48",, oFld:aDialogs[ 4 ],,, .F., .F.,,, .F.,,, .T. )



      aGet[ 144 ] := TCheckBox():ReDefine( 186, { | u | If( PCount()==0, aTmp[ 144 ], aTmp[ 144 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 198 ] := TCheckBox():ReDefine( 196, { | u | If( PCount()==0, aTmp[ 198 ], aTmp[ 198 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )




      aGet[ 202 ] := TCheckBox():ReDefine( 158, { | u | If( PCount()==0, aTmp[ 202 ], aTmp[ 202 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )




      aGet[ 223 ] := TCheckBox():ReDefine( 159, { | u | If( PCount()==0, aTmp[ 223 ], aTmp[ 223 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 228 ] := TCheckBox():ReDefine( 197, { | u | If( PCount()==0, aTmp[ 228 ], aTmp[ 228 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 192 ] := TCheckBox():ReDefine( 193, { | u | If( PCount()==0, aTmp[ 192 ], aTmp[ 192 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 322 ] := TCheckBox():ReDefine( 194, { | u | If( PCount()==0, aTmp[ 322 ], aTmp[ 322 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 276 ] := TCheckBox():ReDefine( 126, { | u | If( PCount()==0, aTmp[ 276 ], aTmp[ 276 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 277 ] := TCheckBox():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 277 ], aTmp[ 277 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 279 ] := TCheckBox():ReDefine( 127, { | u | If( PCount()==0, aTmp[ 279 ], aTmp[ 279 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 191 ] := TCheckBox():ReDefine( 128, { | u | If( PCount()==0, aTmp[ 191 ], aTmp[ 191 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 283 ] := TCheckBox():ReDefine( 129, { | u | If( PCount()==0, aTmp[ 283 ], aTmp[ 283 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 299 ] := TCheckBox():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 299 ], aTmp[ 299 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 271 ] := TCheckBox():ReDefine( 990, { | u | If( PCount()==0, aTmp[ 271 ], aTmp[ 271 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 290 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 290 ], aTmp[ 290 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )




      aGet[ 291 ] := TComboBox():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 291 ], aTmp[ 291 ]:= u ) }, aTipImpTpv, oFld:aDialogs[ 4 ],,,,,,, .F.,,,,,,, "aGet[ 291 ]",,,,,,, )



      TGetHlp():ReDefine( 230, { | u | If( PCount()==0, cMailNotificaciones, cMailNotificaciones:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      aGet[ ( dbfEmp )->( fieldpos( "lOpenTik" ) ) ] := TCheckBox():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfEmp )->( fieldpos( "lOpenTik" ) ) ], aTmp[ ( dbfEmp )->( fieldpos( "lOpenTik" ) ) ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )



      aGet[ 318 ] := TCheckBox():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 318 ], aTmp[ 318 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F.,, .F. )







      oBmpDefecto := TBitmap():ReDefine( 500, "gc_clipboard_pencil_48",, oFld:aDialogs[ 2 ],,, .F., .F.,,, .F.,,, .T. )






      aGet[ 16 ] := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( cDelegacion( aGet[ 16 ], dbfDlg, oSay[47], aTmp[ 1 ] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDelegacion( aGet[ 16 ], dbfDlg, oSay[47], aTmp[ 1 ] ) )}, nil, "LUPA",, )




      oSay[47] := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, cSay[47], cSay[47]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      aGet[ 107 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 107 ], aTmp[ 107 ]:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( cClient( aGet[ 107 ], , oSay[32] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwClient( aGet[ 107 ], oSay[32] ) )}, nil, "LUPA",, )




      oSay[32] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSay[32], cSay[32]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 108 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 108 ], aTmp[ 108 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( aTmp[ 108 ] == Space( 1 ) .OR. ( aTmp[ 108 ] >= "A" .AND. aTmp[ 108 ] <= "Z" ) )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( aGet[ 108 ] ) )}, {||  ( DwSerie( aGet[ 108 ] ) )},,,, nil,,, )







      aGet[ 109 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 109 ], aTmp[ 109 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( cCajas( aGet[ 109 ], , oSay[33] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 109 ], oSay[33] ) )}, nil, "LUPA",, )




      oSay[ 33 ] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSay[ 33 ], cSay[ 33 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      aGet[ 189 ] := TCheckBox():ReDefine( 142, { | u | If( PCount()==0, aTmp[ 189 ], aTmp[ 189 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )







      aGet[ 47 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( cAlmacen( aGet[ 47 ], , oSay[1] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 47 ], oSay[1] ) )}, nil, "LUPA",, )




      oSay[1] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSay[1], cSay[1]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      aGet[ 190 ] := TCheckBox():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 190 ], aTmp[ 190 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )



      aGet[ 315 ] := TCheckBox():ReDefine( 123, { | u | If( PCount()==0, aTmp[ 315 ], aTmp[ 315 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )







      aGet[ 48 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( cFPago( aGet[ 48 ], , oSay[2] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 48 ], oSay[2] ) )}, nil, "LUPA",, )




      oSay[2] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cSay[2], cSay[2]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 121 ] := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, aTmp[ 121 ], aTmp[ 121 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( cTiva( aGet[ 121 ], , oSay[35] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 121 ], , oSay[35] ) )}, nil, "LUPA",, )




      oSay[35] := TGetHlp():ReDefine( 136, { | u | If( PCount()==0, cSay[35], cSay[35]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      aGet[ 167 ] := TCheckBox():ReDefine( 137, { | u | If( PCount()==0, aTmp[ 167 ], aTmp[ 167 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )




      aGet[ 110 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 110 ], aTmp[ 110 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oSay[34] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cSay[34], cSay[34]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 226 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 226 ], aTmp[ 226 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( cTemporada( aGet[ 226 ], , oSay[ 46 ] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwTemporada( aGet[ 226 ], oSay[ 46 ] ) )}, nil, "LUPA",, )




      oSay[ 46 ] := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, cSay[ 46 ], cSay[ 46 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      aGet[ 120 ] := TGetHlp():ReDefine( 155, { | u | If( PCount()==0, aTmp[ 120 ], aTmp[ 120 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!",,,,,,, .F.,,, .F., .F.,,,,, {|Self|( aGet[ 120 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 120 ] ), .T. ), 100 ) ) )}, nil, "FOLDER",, )








      aGet[ 183 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 183 ], aTmp[ 183 ]:= u ) }, oFld:aDialogs[ 2 ],, "@R 99:99", {||    ( validHourMinutes( aGet[ 183 ], .T. ) )},,,,,, .F.,,, .F., .T., {||    ( UpTime( aGet[ 183 ] ) )}, {||  ( DwTime( aGet[ 183 ] ) )},,,, nil,,, )








      oSerie := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, cSerie, cSerie:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( cSerie >= "A" .AND. cSerie <= "Z" )},,,,,, .F.,,, .F., .T., {||    ( ChangeSerie( aGet, aTmp, oSerie, cSerie, .F. ) )}, {||  ( ChangeSerie( aGet, aTmp, oSerie, cSerie, .T. ) )},,,, nil,,, )




      oNombreSerie := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cNombreSerie, cNombreSerie:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( GuardaNombreSerie( aTmp, cSerie ) )},,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 282 ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 282 ], aTmp[ 282 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )






      aGet[ 278 ] := TGetHlp():ReDefine( 295, { | u | If( PCount()==0, aTmp[ 278 ], aTmp[ 278 ]:= u ) }, oFld:aDialogs[ 2 ],, "999999999", {||    ( aTmp[ 278 ] > 0 )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      aGet[ 148 ] := TGetHlp():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 148 ], aTmp[ 148 ]:= u ) }, oFld:aDialogs[ 2 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      aGet[ 227 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 227 ], aTmp[ 227 ]:= u ) }, oFld:aDialogs[ 2 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      oSay[ 42 ] := TComboBox():ReDefine( 160, { | u | If( PCount()==0, cSay[ 42 ], cSay[ 42 ]:= u ) }, aCifRut, oFld:aDialogs[ 2 ],,,,,,, .F.,,,,,,, "oSay[ 42 ]",,,,,,, )



      aGet[ 316 ] := TCheckBox():ReDefine( 652, { | u | If( PCount()==0, aTmp[ 316 ], aTmp[ 316 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )



      aGet[ 324 ] := TCheckBox():ReDefine( 653, { | u | If( PCount()==0, aTmp[ 324 ], aTmp[ 324 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 650, { | u | If( PCount()==0, lBrowseSql, lBrowseSql:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 660, { | u | If( PCount()==0, lBusConte, lBusConte:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 654, { | u | If( PCount()==0, lDtoLinealDespuesTotal, lDtoLinealDespuesTotal:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 651, { | u | If( PCount()==0, lPasPrepare, lPasPrepare:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )



      aGet[ 321 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 321 ], aTmp[ 321 ]:= u ) }, oFld:aDialogs[ 2 ],, { 310, 320, 330 },,,,, .F.,, )







      oBmpArticulos := TBitmap():ReDefine( 500, "gc_object_cube_48",, oFld:aDialogs[ 3 ],,, .F., .F.,,, .F.,,, .T. )




      aGet[ 171 ] := TCheckBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 171 ], aTmp[ 171 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F., {||     .F.}, .F. )




      aGet[ 177 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 177 ], aTmp[ 177 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      aGet[ 124 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 124 ], aTmp[ 124 ]:= u ) }, oFld:aDialogs[ 3 ],, "@E 999.99",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      oSay[ 36 ] := TComboBox():ReDefine( 130, { | u | If( PCount()==0, cSay[ 36 ], cSay[ 36 ]:= u ) }, aBnfSobre, oFld:aDialogs[ 3 ],,,,,,, .F.,,,,,,, "oSay[ 36 ]",,,,,,, )



      aGet[ 172 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 172 ], aTmp[ 172 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )





      aGet[ 178 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 178 ], aTmp[ 178 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( aTmp[ 172 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 125 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 125 ], aTmp[ 125 ]:= u ) }, oFld:aDialogs[ 3 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 172 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 37 ] := TComboBox():ReDefine( 230, { | u | If( PCount()==0, cSay[ 37 ], cSay[ 37 ]:= u ) }, aBnfSobre, oFld:aDialogs[ 3 ],,,,,,, .F., {||     ( aTmp[ 172 ] )},,,,,, "oSay[ 37 ]",,,,,,, )



      aGet[ 173 ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 173 ], aTmp[ 173 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )





      aGet[ 179 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 179 ], aTmp[ 179 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( aTmp[ 173 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 126 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 126 ], aTmp[ 126 ]:= u ) }, oFld:aDialogs[ 3 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 173 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 38 ] := TComboBox():ReDefine( 330, { | u | If( PCount()==0, cSay[ 38 ], cSay[ 38 ]:= u ) }, aBnfSobre, oFld:aDialogs[ 3 ],,,,,,, .F., {||     ( aTmp[ 173 ] )},,,,,, "oSay[ 38 ]",,,,,,, )



      aGet[ 174 ] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 174 ], aTmp[ 174 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )





      aGet[ 180 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 180 ], aTmp[ 180 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( aTmp[ 174 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 127 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 127 ], aTmp[ 127 ]:= u ) }, oFld:aDialogs[ 3 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 174 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 39 ] := TComboBox():ReDefine( 430, { | u | If( PCount()==0, cSay[ 39 ], cSay[ 39 ]:= u ) }, aBnfSobre, oFld:aDialogs[ 3 ],,,,,,, .F., {||     ( aTmp[ 174 ] )},,,,,, "oSay[ 39 ]",,,,,,, )



      aGet[ 175 ] := TCheckBox():ReDefine( 501, { | u | If( PCount()==0, aTmp[ 175 ], aTmp[ 175 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )





      aGet[ 181 ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ 181 ], aTmp[ 181 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( aTmp[ 175 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 128 ] := TGetHlp():ReDefine( 520, { | u | If( PCount()==0, aTmp[ 128 ], aTmp[ 128 ]:= u ) }, oFld:aDialogs[ 3 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 175 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 40 ] := TComboBox():ReDefine( 530, { | u | If( PCount()==0, cSay[ 40 ], cSay[ 40 ]:= u ) }, aBnfSobre, oFld:aDialogs[ 3 ],,,,,,, .F., {||     ( aTmp[ 175 ] )},,,,,, "oSay[ 40 ]",,,,,,, )



      aGet[ 176 ] := TCheckBox():ReDefine( 600, { | u | If( PCount()==0, aTmp[ 176 ], aTmp[ 176 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )





      aGet[ 182 ] := TGetHlp():ReDefine( 610, { | u | If( PCount()==0, aTmp[ 182 ], aTmp[ 182 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( aTmp[ 176 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 129 ] := TGetHlp():ReDefine( 620, { | u | If( PCount()==0, aTmp[ 129 ], aTmp[ 129 ]:= u ) }, oFld:aDialogs[ 3 ],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 176 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 41 ] := TComboBox():ReDefine( 630, { | u | If( PCount()==0, cSay[ 41 ], cSay[ 41 ]:= u ) }, aBnfSobre, oFld:aDialogs[ 3 ],,,,,,, .F., {||     ( aTmp[ 176 ] )},,,,,, "oSay[ 41 ]",,,,,,, )



      oGetPrecioVenta   := comboTarifa():Build( { "idCombo" => 800, "uValue" => aTmp[ 232 ] } )
      oGetPrecioVenta:Resource( oFld:aDialogs[ 3 ] )



      oGetPrecioWebVenta   := comboTarifa():Build( { "idCombo" => 810, "uValue" => aTmp[ 233 ] } )
      oGetPrecioWebVenta:Resource( oFld:aDialogs[ 3 ] )



      oGetPrecioProducto   := comboTarifa():Build( { "idCombo" => 740, "uValue" => aTmp[ 203 ] } )
      oGetPrecioProducto:Resource( oFld:aDialogs[ 3 ] )



      oGetPrecioCombinado    := comboTarifa():Build( { "idCombo" => 750, "uValue" => aTmp[ 204 ] } )
      oGetPrecioCombinado:Resource( oFld:aDialogs[ 3 ] )



      aGet[ 301 ] := TCheckBox():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 301 ], aTmp[ 301 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )




      TCheckBox():ReDefine( 451, { | u | If( PCount()==0, lCalBultos, lCalBultos:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F., {||     aTmp[ 301 ]}, .F. )




      aGet[ 302 ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ 302 ], aTmp[ 302 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     aTmp[ 301 ]},, .F., .F.,,,,,, nil,,, )




      aGet[ 32 ] := TCheckBox():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[ 3 ],, {|| ( lChgCajCaj( aGet, aTmp ) )},,,,, .F.,, .F. )




      aGet[ 33 ] := TCheckBox():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F., {||     aTmp[ 32 ]}, .F. )




      aGet[ 163 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 163 ], aTmp[ 163 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     aTmp[ 32 ]},, .F., .F.,,,,,, nil,,, )



      aGet[ 164 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 164 ], aTmp[ 164 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 206 ] := TCheckBox():ReDefine( 770, { | u | If( PCount()==0, aTmp[ 206 ], aTmp[ 206 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )



      aGet[ 201 ] := TCheckBox():ReDefine( 193, { | u | If( PCount()==0, aTmp[ 201 ], aTmp[ 201 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )



      aGet[ 234 ] := TCheckBox():ReDefine( 196, { | u | If( PCount()==0, aTmp[ 234 ], aTmp[ 234 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )




      aGet[ 212 ] := TCheckBox():ReDefine( 194, { | u | If( PCount()==0, aTmp[ 212 ], aTmp[ 212 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )



      aGet[ 239 ] := TCheckBox():ReDefine( 197, { | u | If( PCount()==0, aTmp[ 239 ], aTmp[ 239 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )



      aGet[ 240 ] := TCheckBox():ReDefine( 198, { | u | If( PCount()==0, aTmp[ 240 ], aTmp[ 240 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )



      aGet[ 320 ] := TCheckBox():ReDefine( 550, { | u | If( PCount()==0, aTmp[ 320 ], aTmp[ 320 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )






      TGetHlp():ReDefine( 700, { | u | If( PCount()==0, aTmp[ 49 ], aTmp[ 49 ]:= u ) }, oFld:aDialogs[ 3 ],, "99", {||    ( aTmp[ 49 ] >= 8 .AND. aTmp[ 49 ] <= 12 )},,,,,, .F.,,, .F., .T.,,, {|| 8}, {|| 12},, nil,,, )






      TGetHlp():ReDefine( 710, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[ 3 ],, "99", {||    ( aTmp[ 50 ] >= 0 .AND. aTmp[ 50 ]  <= 6 )},,,,,, .F.,,, .F., .T.,,, {|| 0}, {|| 6},, nil,,, )






      TGetHlp():ReDefine( 720, { | u | If( PCount()==0, aTmp[ 138 ], aTmp[ 138 ]:= u ) }, oFld:aDialogs[ 3 ],, "99", {||    ( aTmp[ 138 ] >= 8 .AND. aTmp[ 138 ] <= 12 )},,,,,, .F.,,, .F., .T.,,, {|| 8}, {|| 12},, nil,,, )






      TGetHlp():ReDefine( 730, { | u | If( PCount()==0, aTmp[ 139 ], aTmp[ 139 ]:= u ) }, oFld:aDialogs[ 3 ],, "99", {||    ( aTmp[ 139 ] >= 0 .AND. aTmp[ 139 ]  <= 6 )},,,,,, .F.,,, .F., .T.,,, {|| 0}, {|| 6},, nil,,, )



      TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 280 ], aTmp[ 280 ]:= u ) }, oFld:aDialogs[ 3 ],, { 760, 761, 762 },,,,, .F.,, )







      oBmpContadores := TBitmap():ReDefine( 500, "gc_document_text_pencil_48",, oFld:aDialogs[ 5 ],,, .F., .F.,,, .F.,,, .T. )






      oCmbDocumentos := TComboBox():ReDefine( 100, { | u | If( PCount()==0, cCmbDocumentos, cCmbDocumentos:= u ) }, aDocumentos, oFld:aDialogs[ 5 ],,,,,,, .F., {||     ( nMode <> 3 )}, aImagenes,,,,, "oCmbDocumentos",,,,,,, )

      oCmbDocumentos:bChange  := {|| CmbDocumentosChanged() }









      oGetSerie := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cGetSerie, cGetSerie:= u ) }, oFld:aDialogs[ 5 ],, "@!", {||    ( empty( cGetSerie ) .OR. ( cGetSerie >= "A" .AND. cGetSerie <= "Z" ) )},,,,,, .F.,,, .F., .T., {||    ( UpSerie( oGetSerie ) )}, {||  ( DwSerie( oGetSerie ) )},,,, nil,, 151, )




      oCmbSerie := TComboBox():ReDefine( 110, { | u | If( PCount()==0, cCmbSerie, cCmbSerie:= u ) }, { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" }, oFld:aDialogs[ 5 ],,,,,,, .F.,,,,,,, "oCmbSerie",,,,,,, )

      oCmbSerie:bChange       := {|| CmbSerieChanged() }







      oGetContador := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nGetContador, nGetContador:= u ) }, oFld:aDialogs[ 5 ],, "999999999", {||    ( nGetContador > 0 )},,,,,, .F.,,, .F., .T.,,,,,, nil,, 122, )








      oGetFormato := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cGetFormato, cGetFormato:= u ) }, oFld:aDialogs[ 5 ],,, {||    ( cDocumento( oGetFormato, oGetFormato:oHelpText ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwDocumento( oGetFormato, oGetFormato:oHelpText ) )}, nil, "LUPA", 132, 131 )









      oGetCopias := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nGetCopias, nGetCopias:= u ) }, oFld:aDialogs[ 5 ],, "9", {||    nGetCopias >= 0},,,,,, .F.,,, .F., .T.,,, {||      0}, {||      9},, nil,, 141, )




      oGetNFCPrefijo := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cGetNFCPrefijo, cGetNFCPrefijo:= u ) }, oFld:aDialogs[ 5 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 161, )




      oGetNFCContador := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, cGetNFCContador, cGetNFCContador:= u ) }, oFld:aDialogs[ 5 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 171, )





      oGetPlantillaDefecto := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, cGetPlantillaDefecto, cGetPlantillaDefecto:= u ) }, oFld:aDialogs[ 5 ],,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( oGetPlantillaDefecto:cText( cGetFile( "Html (*.html, *.htm) |*.html;*.htm|", "Seleccione el fichero HTML", , cPatHtml() ) ) )}, nil, "Folder",, )





      aGet[ 325 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 325 ], aTmp[ 325 ]:= u ) }, oFld:aDialogs[ 5 ],,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( aGet[ 325 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 325 ] ), .T. ), 200 ) ) )}, nil, "Folder",, )







      oBmpContabilidad := TBitmap():ReDefine( 500, "gc_folders2_48",, oFld:aDialogs[ 6 ],,, .F., .F.,,, .F.,,, .T. )






      oCmbContabilidad := TComboBox():ReDefine( 90, { | u | If( PCount()==0, cCmbContabilidad, cCmbContabilidad:= u ) }, aCmbContabilidad, oFld:aDialogs[ 6 ],,,,,,, .F.,,,,,,, "oCmbContabilidad",,,,,,, )

      oCmbContabilidad:bChange      := {|| SetAplicacionContable( oCmbContabilidad:nAt ) }








      aGet[ 51 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[ 6 ],, "@!",,,,,,, .F.,,, .F., .F.,,,,,, nil, "FOLDER",, )

      aGet[ 51 ]:bHelp        := {|| aGet[ 51 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 51 ] ), .T. ), 100 ) ) }
      aGet[ 51 ]:bValid       := {|| ValidRutaContabilidad( aGet, aTmp ) }








      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nLenSubcta, nLenSubcta:= u ) }, oFld:aDialogs[ 6 ],, "99",,,,,,, .F., {||     ( oCmbContabilidad:nAt == 5 )},, .F., .T.,,, {||      1}, {||      12},, nil,,, )



      TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cCtaDescuentoEspecial, cCtaDescuentoEspecial:= u ) }, oFld:aDialogs[ 6 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      oBrwEmp                       := IXBrowse():New( oFld:aDialogs[ 6 ] )

      oBrwEmp:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwEmp:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwEmp:bWhen                 := {|| ChkRuta( aTmp[ 51 ], .F. ) }
      oBrwEmp:bLDblClick            := {|| EditConta( oBrwEmp:nArrayAt, aTmp ), oBrwEmp:Refresh() }

      oBrwEmp:SetArray( aItmEmp, , , .F. )

      oBrwEmp:nMarqueeStyle         := 5
      oBrwEmp:nRowHeight            := 22
      oBrwEmp:lHScroll              := .F.

      oBrwEmp:CreateFromResource( 110 )

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Serie"
         :bEditValue       := {|| aItmEmp[ oBrwEmp:nArrayAt, 1 ] }
         :nWidth           := 30
      end

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| aItmEmp[ oBrwEmp:nArrayAt, 2 ] }
         :nWidth           := 60
      end

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Empresa"
         :bEditValue       := {|| cEmpresaContaplus( AllTrim( aTmp[ 51 ] ), aItmEmp[ oBrwEmp:nArrayAt, 2 ] ) }
         :nWidth           := 190
      end

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Proyecto"
         :bEditValue       := {|| Transform( aItmEmp[ oBrwEmp:nArrayAt, 3 ], "@R ###.#######" ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Modificar"
         :bStrData         := {|| "" }
         :bOnPostEdit      := {|| .T. }
         :bEditBlock       := {|| EditConta( oBrwEmp:nArrayAt, aTmp ), oBrwEmp:Refresh() }
         :nEditType        := 5
         :nWidth           := 20
         :nHeadBmpNo       := 1
         :nBtnBmp          := 1
         :nHeadBmpAlign    := 1
         :AddResource( "Edit16" )
     end











      aGet[ 104 ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 104 ], aTmp[ 104 ]:= u ) }, oFld:aDialogs[ 6 ],, "999", {||    ( ChkCta( aTmp[ 104 ], aGet[ 104 ]:oSay, .F., AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )},, .F., .F.,,,,, {|Self|( BrwChkCta( aGet[ 104 ], aGet[ 104 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 371, )









      aGet[ 105 ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ 105 ], aTmp[ 105 ]:= u ) }, oFld:aDialogs[ 6 ],, "999", {||    ( ChkCta( aTmp[ 105 ], aGet[ 105 ]:oSay, .F., AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )},, .F., .F.,,,,, {|Self|( BrwChkCta( aGet[ 105 ], aGet[ 105 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 381, )









      aGet[ 106 ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ 106 ], aTmp[ 106 ]:= u ) }, oFld:aDialogs[ 6 ],, "999", {||    ( ChkCta( aTmp[ 106 ], aGet[ 106 ]:oSay, .F., AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )},, .F., .F.,,,,, {|Self|( BrwChkCta( aGet[ 106 ], aGet[ 106 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 391, )









      aGet[ 111 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 111 ], aTmp[ 111 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 111 ], nil, aGet[ 111 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 111 ], aGet[ 111 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 401, )









      aGet[ 112 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 112 ], aTmp[ 112 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 112 ], nil, aGet[ 112 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 112 ], aGet[ 112 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 411, )









      aGet[ 149 ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ 149 ], aTmp[ 149 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 149 ], nil, aGet[ 149 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 149 ], aGet[ 149 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 431, )









      aGet[ 157 ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ 157 ], aTmp[ 157 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 157 ], nil, aGet[ 157 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 157 ], aGet[ 157 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 441, )









      aGet[ 287 ] := TGetHlp():ReDefine( 445, { | u | If( PCount()==0, aTmp[ 287 ], aTmp[ 287 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 287 ], nil, aGet[ 287 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 287 ], aGet[ 287 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 446, )









      aGet[ 288 ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ 288 ], aTmp[ 288 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 288 ], nil, aGet[ 288 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 288 ], aGet[ 288 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 511, )









      aGet[ 169 ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 169 ], aTmp[ 169 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 169 ], nil, aGet[ 169 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 169 ], aGet[ 169 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 451, )









      aGet[ 168 ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ 168 ], aTmp[ 168 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 168 ], nil, aGet[ 168 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 168 ], aGet[ 168 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 461, )











      aGet[ 312 ] := TGetHlp():ReDefine( 550, { | u | If( PCount()==0, aTmp[ 312 ], aTmp[ 312 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 312 ], nil, aGet[ 312 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 312 ], aGet[ 312 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 551, )









      aGet[ 311 ] := TGetHlp():ReDefine( 560, { | u | If( PCount()==0, aTmp[ 311 ], aTmp[ 311 ]:= u ) }, oFld:aDialogs[ 6 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 311 ], nil, aGet[ 311 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 311 ], aGet[ 311 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 561, )






      TRadMenu():Redefine( { | u | If( PCount()==0, nIvaReq, nIvaReq:= u ) }, oFld:aDialogs[ 6 ],, { 420, 421 },,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )}, )



      aGet[ 235 ] := TCheckBox():ReDefine( 470, { | u | If( PCount()==0, aTmp[ 235 ], aTmp[ 235 ]:= u ) }, oFld:aDialogs[ 6 ],,,,,,, .F.,, .F. )



      aGet[ 274 ] := TCheckBox():ReDefine( 480, { | u | If( PCount()==0, aTmp[ 274 ], aTmp[ 274 ]:= u ) }, oFld:aDialogs[ 6 ],,,,,,, .F.,, .F. )



      aGet[ 275 ] := TCheckBox():ReDefine( 490, { | u | If( PCount()==0, aTmp[ 275 ], aTmp[ 275 ]:= u ) }, oFld:aDialogs[ 6 ],,,,,,, .F.,, .F. )



      aGet[ 314 ] := TCheckBox():ReDefine( 530, { | u | If( PCount()==0, aTmp[ 314 ], aTmp[ 314 ]:= u ) }, oFld:aDialogs[ 6 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 240, { | u | If( PCount()==0, lInformacionInmediata, lInformacionInmediata:= u ) }, oFld:aDialogs[ 6 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 250, { | u | If( PCount()==0, lSincronizarVencimientos, lSincronizarVencimientos:= u ) }, oFld:aDialogs[ 6 ],,,,,,, .F.,, .F. )







      oBmpEnvios := TBitmap():ReDefine( 500, "gc_satellite_dish2_48",, oFld:aDialogs[ 7 ],,, .F., .F.,,, .F.,,, .T. )



      TCheckBox():ReDefine( 165, { | u | If( PCount()==0, lEnvioRecepcion, lEnvioRecepcion:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F.,, .F. )





      aGet[ 21 ] := TComboBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, { "Cliente", "Servidor" }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     lEnvioRecepcion},,,,,, "aGet[ 21 ]",,,,,,, )




      aGet[ 292 ] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 292 ], aTmp[ 292 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     lEnvioRecepcion}, .F. )




      TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[ 7 ],, { 110, 111 },,,,, .F., {||     lEnvioRecepcion}, )








      TBtnBmp():ReDefine( 112, "gc_data_16",,,,, {|Self|( TSndRecInf():testFtpConexion() )}, oFld:aDialogs[ 7 ], .F., {||     ( aTmp[ 22 ] == 2 .AND. lEnvioRecepcion )}, .F., "Probar conexión FTP",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







      aGet[ 23 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[ 7 ],, "@!",,,,,,, .F., {||     ( aTmp[ 22 ] < 2 .AND. lEnvioRecepcion )},, .F., .F.,,,,, {|Self|( aGet[ 23 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 23 ] ), .T. ), 100 ) ) )}, nil, "FOLDER",, )




      TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,,,, .F., {||     ( aTmp[ 22 ] == 2 .AND. lEnvioRecepcion )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,,,, .F., {||     ( aTmp[22] == 2 .AND. lEnvioRecepcion )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,,,, .F., {||     ( aTmp[ 22 ] == 2 .AND. lEnvioRecepcion )},, .F., .F.,,,,,, nil,,, )




      aGet[ 221 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 221 ], aTmp[ 221 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     lEnvioRecepcion}, .F. )




      aGet[ 147 ] := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 147 ], aTmp[ 147 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     lEnvioRecepcion}, .F. )




      aGet[ 308 ] := TCheckBox():ReDefine( 191, { | u | If( PCount()==0, aTmp[ 308 ], aTmp[ 308 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     lEnvioRecepcion}, .F. )




      TCheckBox():ReDefine( 192, { | u | If( PCount()==0, lDesFacExt, lDesFacExt:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     lEnvioRecepcion}, .F. )



      TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 285 ], aTmp[ 285 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F.,, .F. )




      TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 286 ], aTmp[ 286 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,,,, .F., {||     ( aTmp[ 285 ] )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 303 ], aTmp[ 303 ]:= u ) }, oFld:aDialogs[ 7 ],, ( Replicate( "X", RetNumCodCliEmp() ) ),,,,,,, .F., {||     lEnvioRecepcion},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 304 ], aTmp[ 304 ]:= u ) }, oFld:aDialogs[ 7 ],, ( Replicate( "X", RetNumCodPrvEmp() ) ),,,,,,, .F., {||     lEnvioRecepcion},, .F., .F.,,,,,, nil,,, )






      oPdaRuta := TGetHlp():ReDefine( 640, { | u | If( PCount()==0, pdaRuta, pdaRuta:= u ) }, oFld:aDialogs[ 7 ],, "@!",,,,,,, .F.,,, .F., .F.,,,,, {|Self|( oPdaRuta:cText( padr( cGetDir32( "Seleccione directorio", rtrim( pdaRuta ), .T. ), 100 ) ) )}, nil, "FOLDER",, )



      TGetHlp():ReDefine( 600, { | u | If( PCount()==0, pdaFtp, pdaFtp:= u ) }, oFld:aDialogs[ 7 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 610, { | u | If( PCount()==0, pdaUsuario, pdaUsuario:= u ) }, oFld:aDialogs[ 7 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 620, { | u | If( PCount()==0, pdaPassword, pdaPassword:= u ) }, oFld:aDialogs[ 7 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TCheckBox():ReDefine( 630, { | u | If( PCount()==0, pdaPasivo, pdaPasivo:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F.,, .F. )





      TGetHlp():ReDefine( 650, { | u | If( PCount()==0, pdaRecogerVentas, pdaRecogerVentas:= u ) }, oFld:aDialogs[ 7 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )







      oBmpComunicacion := TBitmap():ReDefine( 500, "gc_earth_48",, oFld:aDialogs[ 8 ],,, .F., .F.,,, .F.,,, .T. )



      TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 184 ], aTmp[ 184 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 196 ], aTmp[ 196 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 185 ], aTmp[ 185 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 176, { | u | If( PCount()==0, aTmp[ 186 ], aTmp[ 186 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TCheckBox():ReDefine( 175, { | u | If( PCount()==0, aTmp[ 197 ], aTmp[ 197 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 177, { | u | If( PCount()==0, aTmp[ 306 ], aTmp[ 306 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,, .F.,, .F. )



      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 187 ], aTmp[ 187 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 185, { | u | If( PCount()==0, aTmp[ 307 ], aTmp[ 307 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TComercio:dialogCreateWebCombobox( 100, oFld:aDialogs[ 8 ] )







      TBtnBmp():ReDefine( 101, "gc_data_16",,,,, {|Self|( TestConexionDatabase() )}, oFld:aDialogs[ 8 ], .F.,, .F., "",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )







      TBtnBmp():ReDefine( 102, "gc_data_16",,,,, {|Self|( TestConexionFTP() )}, oFld:aDialogs[ 8 ], .F.,, .F., "",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )





      TSay():ReDefine( 105, {||   TComercio:getErrorJson()}, oFld:aDialogs[ 8 ],,,, .F.,, .F., .F., )






      aGet[ 213 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 213 ], aTmp[ 213 ]:= u ) }, oFld:aDialogs[ 8 ],, "@!",,,,,,, .F.,,, .F., .F.,,,,, {|Self|( aGet[ 213 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 213 ] ), .T. ), 100 ) ) )}, nil, "FOLDER",, )



      TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 214 ], aTmp[ 214 ]:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 410, { | u | If( PCount()==0, cDireccionFtpImagenes, cDireccionFtpImagenes:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 420, { | u | If( PCount()==0, cUsuarioFtpImagenes, cUsuarioFtpImagenes:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 430, { | u | If( PCount()==0, cClaveFtpImagenes, cClaveFtpImagenes:= u ) }, oFld:aDialogs[ 8 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      oFld:aDialogs[ 5 ]:AddFastKey( 114, {|| EdtCon( oBrwCon ) } )

      oDlg:AddFastKey( 116, {|| SaveEditConfig( aTmp, oSay, oBrw, oDlg, nMode ) } )

      oDlg:bStart    := {|| StartEditConfig( aTmp, oSay, oBrw, oDlg, oFld, nMode ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( InitEditConfig( oFld, nSelFolder ) )}, oDlg:bRClicked,,, )



   RECOVER USING oError

      msgStop( "Imposible editar configuración de empresas" + Chr(13)+Chr(10) + ErrorMessage( oError )  )

   end
   ErrorBlock( oBlock )



   KillTrans()

   if oDlg:nResult == 1

      setEmpresa( ( dbfEmp )->CodEmp, oBrw )

      ApplicationLoad()

      checkEmpresaTablesExistences()

      chkTurno( , oWnd() )

   end



   InitServices()



   if !empty( oBmpComportamiento )
      oBmpComportamiento:End()
   end

   if !empty( oBmpDefecto )
      oBmpDefecto:End()
   end

   if !empty( oBmpArticulos )
      oBmpArticulos:End()
   end

   if !empty( oBmpContadores )
      oBmpContadores:End()
   end

   if !empty( oBmpContabilidad )
      oBmpContabilidad:End()
   end

   if !empty( oBmpEnvios )
      oBmpEnvios:End()
   end

   if !empty( oBmpComunicacion )
      oBmpComunicacion:End()
   end

   if !empty( oBmpTPV )
      oBmpTPV:End()
   end

   if !empty( oFnt )
      oFnt:End()
   end

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION InitEditConfig( oFld, nSelFolder )

   oFld:SetOption( nSelFolder )

RETURN ( nil )



STATIC FUNCTION StartEditConfig( aTmp, oSay, oBrw, oDlg, oFld, nMode )

   local oBoton
   local oGrupo
   local oCarpeta

   oOfficeBar              := TDotNetBar():New( 0, 0, 2020, 128, oDlg, 1 )
   oOfficeBar:lPaintAll    := .F.
   oOfficeBar:lDisenio     := .F.
   oOfficeBar:SetStyle( 1 )

   oDlg:oTop         := oOfficeBar

   oCarpeta          := TCarpeta():New( oOfficeBar, "Configurar empresa." )

   oGrupo            := TDotNetGroup():New( oCarpeta, 488, "Opciones", .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_wrench_32",               "General",           1, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_clipboard_pencil_32",     "Valores",           2, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_object_cube_32",          "Artículos",         3, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_cash_register_32",        "T.P.V.",            4, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_document_text_pencil_32", "Contadores",        5, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_folders2_32",             "Contabilidad",      6, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_satellite_dish2_32",      "Envios",            7, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_earth_32",                "Comunicaciones",    8, {| oBtn | oFld:SetOption( oBtn:nColumna ) }, , , .F., .F., .F. )

   oGrupo            := TDotNetGroup():New( oCarpeta, 122, "Guardar", .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_floppy_disk_32",          "Guardar",           1, {|| SaveEditConfig( aTmp, oSay, oBrw, oDlg, nMode ) }, , , .F., .F., .F. )
      oBoton         := TDotNetButton():New( 60, oGrupo, "gc_door_open2_32",           "Salida",            2, {|| oDlg:End() }, , , .F., .F., .F. )

   aEvalValid( oFld:aDialogs[ 2 ] )

   aEvalValid( oFld:aDialogs[ 6 ] )

   CmbDocumentosChanged( .F. )

RETURN nil



STATIC FUNCTION KillTrans()





   if !empty( tmpDlg ) .AND. ( tmpDlg )->( Used() )
      ( tmpDlg )->( dbCloseArea() )
      tmpDlg         := nil
   end

   dbfErase( cNewDlg )

   if !empty( tmpCount ) .AND. ( tmpCount )->( Used() )
      ( tmpCount )->( dbCloseArea() )
      tmpCount      := nil
   end

   dbfErase( cTmpCon )

RETURN nil



STATIC FUNCTION CmbDocumentosChanged( lCmbSerieSaved )

   local cItemText

   If( lCmbSerieSaved == nil, lCmbSerieSaved := .T., ) ;





   cItemText               := Upper( Rtrim( cCmbDocumentos ) )
   if empty( cItemText )
      RETURN ( .T. )
   end





   if lCmbSerieSaved
      CmbSerieSave( oCmbSerie )
   end





   if dbSeekInOrd( cItemText, "Des", tmpCount )

      cOldSerie         := nil

      if ( tmpCount )->lSerie
         if( !empty( oCmbSerie ), oCmbSerie:Show(), )
         if( !empty( oCmbSerie ), oCmbSerie:Select( 1 ), )
         if( !empty( oGetSerie ), oGetSerie:Show(), )
      else
         if( !empty( oCmbSerie ), oCmbSerie:Hide(), )
         if( !empty( oGetSerie ), oGetSerie:Hide(), )
      end

      if ( tmpCount )->lDoc
         if( !empty( oGetFormato ), oGetFormato:Show(), )
         if( !empty( oGetCopias ), oGetCopias:Show(), )
      else
         if( !empty( oGetFormato ), oGetFormato:Hide(), )
         if( !empty( oGetCopias ), oGetCopias:Hide(), )
      end

      if ( tmpCount )->lCon
         if( !empty( oGetContador ), oGetContador:Show(), )
      else
         if( !empty( oGetContador ), oGetContador:Hide(), )
      end

      if( !empty( oGetSerie ), oGetSerie:cText( ( tmpCount )->cSerie ), )

      if( !empty( oGetPlantillaDefecto ), oGetPlantillaDefecto:cText( ( tmpCount )->cPltDfl ), )

      if ( tmpCount )->lNFC
         if( !empty( oGetNFCPrefijo ), oGetNFCPrefijo:Show(), )
         if( !empty( oGetNFCContador ), oGetNFCContador:Show(), )
      else
         if( !empty( oGetNFCPrefijo ), oGetNFCPrefijo:Hide(), )
         if( !empty( oGetNFCContador ), oGetNFCContador:Hide(), )
      end





      CmbSerieChanged()

   end

RETURN ( .T. )



STATIC FUNCTION CmbSerieSave( uSerie )

   local cSerie

   do case
      case isObject( uSerie )
         cSerie         := uSerie:VarGet()
      case isChar( uSerie)
         cSerie         := uSerie
   end

   if empty( cSerie )
      RETURN ( .T. )
   end









   if !empty( cSerie ) .AND. dbDialogLock( tmpCount )
      ( tmpCount )->( FieldPut( FieldPos( cSerie ),               nGetContador      ) )
      ( tmpCount )->( FieldPut( FieldPos( "Doc"    + cSerie ),    cGetFormato       ) )
      ( tmpCount )->( FieldPut( FieldPos( "Copias" + cSerie ),    nGetCopias        ) )
      ( tmpCount )->( FieldPut( FieldPos( "cNCF"   + cSerie ),    cGetNFCPrefijo    ) )
      ( tmpCount )->( FieldPut( FieldPos( "nCNF"   + cSerie ),    cGetNFCContador   ) )

      ( tmpCount )->cSerie                                       := cGetSerie
      ( tmpCount )->cPltDfl                                      := cGetPlantillaDefecto
      ( tmpCount )->( dbUnLock() )
   end

RETURN ( .T. )



STATIC FUNCTION CmbSerieChanged()

   local cSerie

   if empty( oCmbSerie )
      RETURN .T.
   end
   cSerie               := oCmbSerie:VarGet()

   if !empty( cOldSerie ) .AND. ( cOldSerie <> cSerie )
      cmbSerieSave( cOldSerie )
   end

   oGetContador:cText( ( tmpCount )->( FieldGet( FieldPos( cSerie ) ) ) )
   oGetCopias:cText( Max( ( tmpCount )->( FieldGet( FieldPos( "Copias" + cSerie ) ) ), 0 ) )
   oGetFormato:cText( ( tmpCount )->( FieldGet( FieldPos( "Doc" + cSerie ) ) ) )

   oGetNFCPrefijo:cText( ( tmpCount )->( FieldGet( FieldPos( "cNFC" + cSerie ) ) ) )
   oGetNFCContador:cText( ( tmpCount )->( FieldGet( FieldPos( "nNFC" + cSerie ) ) ) )

   oGetPlantillaDefecto:cText( ( tmpCount )->cPltDfl )

   oGetFormato:lValid()

   cOldSerie            := cSerie

RETURN ( .T. )



STATIC FUNCTION EdtDet( aTmp, aGet, tmpDlg, oBrw, bVal, bWhe, nMode, cCod )

   local oDlg

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "delegaciones", "Delega",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ], aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ]:= u ) }, oDlg,, "@!", {||    ( lValidDelega( cCod, aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ] ) )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( tmpDlg )->( FieldPos( "cNomDlg" ) ) ], aTmp[ ( tmpDlg )->( FieldPos( "cNomDlg" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 1, {||( EndDelega( aTmp, aGet, tmpDlg, oBrw, nMode, oDlg, cCod ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndDelega( aTmp, aGet, tmpDlg, oBrw, nMode, oDlg, cCod ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION EndDelega( aTmp, aGet, tmpDlg, oBrw, nMode, oDlg, cCod )

   if nMode == 1

      if empty( aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ] ) .OR. ( tmpDlg )->( dbSeek( cCod + aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ] ) )
         MsgStop( "Código no valido" )
         RETURN nil
      end

      if empty( aTmp[ ( tmpDlg )->( FieldPos( "uuid" ) ) ] )
         aTmp[ ( tmpDlg )->( FieldPos( "uuid" ) ) ]   := win_uuidcreatestring()
      end

   end

   WinGather( aTmp, aGet, tmpDlg, oBrw, nMode )

RETURN ( oDlg:end( 1 ) )



STATIC FUNCTION lValidDelega( cCodEmpresa, cCodDelega )

   if empty( cCodDelega )
      MsgStop( "Código de delgación no puede estar vacio" )
      RETURN .F.
   end

   if ( tmpDlg )->( dbSeek( cCodEmpresa + cCodDelega ) )
      MsgStop( "Delegación existente" )
      RETURN .F.
   end

RETURN .T.



STATIC FUNCTION EdtCon( oBrwCon )

   local cPic
   local nCol     := oBrwCon:nColAct
   local uVar     := ( tmpCount )->( fieldGet( nCol + 1 ) )
   local bValid

   if nCol <= 1
      RETURN .F.
   end

   if nCol == 2
      cPic        := "@!"
      bValid      := { |oGet| empty( oGet:VarGet() ) .OR. ( oGet:VarGet() >= "A" .AND. oGet:VarGet() <= "Z" ) }
   else
      cPic        := "999999999"
      bValid      := { |oGet| oGet:VarGet() > 0 }
   end

   if oBrwCon:lEditCol( nCol, @uVar, cPic, bValid )

      if dbDialogLock( tmpCount )
         ( tmpCount )->( fieldPut( nCol + 1, uVar ) )
         ( tmpCount )->( dbUnlock() )
      end

      oBrwCon:DrawSelect()

   end

RETURN .T.



FUNCTION cEmpresa( oGet, dbfEmp, oGet2, aGet, aTmp, tmpDlg, dbfDlg )

   local nRec
   local lValid   := .F.
   local cCodEmp  := oGet:VarGet()

   if empty( cCodEmp )

      if !empty( oGet2 )
            oGet2:cText( "" )
      end

      RETURN .T.

   end

   nRec           := ( dbfEmp )->( Recno() )

   if dbSeekInOrd( cCodEmp, "CodEmp", dbfEmp )

      oGet:cText( ( dbfEmp )->CodEmp )

      if !empty( oGet2 )
         oGet2:cText( ( dbfEmp )->cNombre )
      end

      lValid      := .T.

   else

        msgStop( "Empresa no encontrada", "Cadena buscada : " + cCodEmp )

   end

   ( dbfEmp )->( dbGoTo( nRec ) )

RETURN lValid



FUNCTION lEmpresa( cCodEmp, dbfEmp )

   local lClose   := .F.
   local lValid   := .F.

   if empty( cCodEmp )
      RETURN .F.
   end

   if empty( dbfEmp )
      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if ( dbfEmp )->( dbSeek( cCodEmp ) )
      lValid      := .T.
   end

   if lClose
      ( dbfEmp )->( dbCloseArea() )
   end

RETURN lValid



STATIC FUNCTION lGrupo( cCodEmp, dbfEmp )

   local lGrupo   := .F.

   if empty( cCodEmp )
      RETURN .F.
   end

   if dbSeekInOrd( cCodEmp, "CodEmp", dbfEmp )
      lGrupo      := ( dbfEmp )->lGrupo
   end

RETURN lGrupo



FUNCTION BrwEmpresa( oGet, dbfEmp, oGet2, lGrupo )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
   local aSta
   local nRec
   local nOrd     := GetBrwOpt( "BrwEmpresa" )
    local oCbxOrd
   local aCbxOrd  := { "Código", "Nombre" }
   local cCbxOrd

   If( lGrupo == nil, lGrupo := .F., ) ;

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]

   nRec           := ( dbfEmp )->( Recno() )
   nOrd           := ( dbfEmp )->( OrdSetFocus( nOrd ) )

   if lGrupo
      ( dbfEmp )->( dbSetFilter( {|| Field->lGrupo }, "lGrupo" ) )
   else
      ( dbfEmp )->( dbSetFilter( {|| !Field->lGrupo }, "!lGrupo" ) )
   end

   aSta           := aGetStatus( dbfEmp )

   ( dbfEmp )->( dbGoTop() )

   oDlg = TDialog():New(,,,, if( lGrupo, "Grupo", "Empresa" ), "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfEmp ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfEmp ) ) }, .F., .F.,,,,,, nil, "Find",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfEmp )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfEmp
      oBrw:nMarqueeStyle   := 6
      oBrw:cName           := "Browse.Empresa"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "CodEmp"
         :bEditValue       := {|| ( dbfEmp )->CodEmp }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNombre"
         :bEditValue       := {|| ( dbfEmp )->cNombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )

      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

      oDlg:bStart := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   IF oDlg:nResult == 1

      oGet:cText( ( dbfEmp )->CodEmp )

        IF ValType( oGet2 ) == "O"
         oGet2:cText( (dbfEmp)->cNombre )
        end

    end

   DestroyFastFilter( dbfEmp )

   SetStatus( dbfEmp, aSta )

   ( dbfEmp )->( dbClearFilter() )
   ( dbfEmp )->( OrdSetFocus( nOrd ) )
   ( dbfEmp )->( dbGoTo( nRec ) )

    oGet:setFocus()

RETURN ( oDlg:nResult == 1 )



FUNCTION SetEmpresa( cCodEmp, oBrw, lAdministrator )

   local oBlock
   local oError
   local lError            := .F.

   If( lAdministrator == nil, lAdministrator := .F., ) ;

   if !empty( oWnd() )
      oWnd():Disable()
   end

   CursorWait()








   if empty( cCodEmp )
      cCodEmp        := UsuariosModel():getUsuarioEmpresa( Auth():Uuid() )
   end

   if empty( cCodEmp )
      cCodEmp        := EmpresasModel():getCodigoActiva()
   end

   if empty( cCodEmp )
      cCodEmp        := EmpresasModel():getPrimera()
   end

   cCodEmp           := rjust( cCodEmp, "0", 4 )

   if !lIsDir( FullCurDir() + "Emp" + cCodEmp )
      lError         := .T.
      msgStop( "El directorio de la empresa " + cCodEmp + " no existe." )
   end





   cPatEmp( cCodEmp )

   cPatScriptEmp( cCodEmp )

















   cCodigoEmpresaEnUso( cCodEmp )

   if !aEmpresa( cCodEmp, lAdministrator )
      Empresa()
   end





   TDataCenter():BuildEmpresa()





   SetTituloEmpresa()





   WritePProString( "main", "Ultima Empresa", cCodEmp, cIniAplication() )





   UsuariosModel():UpdateEmpresaEnUso( Auth():codigo(), cCodEmp )





   if !empty( oBrw )
      oBrw:Refresh()
      oBrw:SetFocus()
   end






   CursorWE()

   if !empty( oWnd() )
      oWnd():Enable()
   end

RETURN ( lError )



FUNCTION SelectEmpresa( cCodEmp )

   cCodEmp           := RJust( cCodEmp, "0", 4 )

   if !lIsDir( FullCurDir() + "Emp" + cCodEmp )
      msgStop( "El directorio de la empresa " + cCodEmp + " no existe." )
      RETURN ( .F. )
   end





   cPatEmp( cCodEmp )

   cPatScriptEmp( cCodEmp )





   cPatEmp( cCodEmp, nil, .T. )

   cPatEmp( cCodEmp, nil, .T. )

   cPatEmp( cCodEmp, nil, .T. )

   cPatEmp( cCodEmp, nil, .T. )





   cCodigoEmpresaEnUso( cCodEmp )





   TDataCenter():BuildEmpresa()

RETURN ( .T. )



FUNCTION checkEmpresaTablesExistences()

   oMsgText( "Comprobando existencia de tablas" )
   IsEntSal()

   oMsgText( "Comprobando almacenes" )
   IsAlmacen()

   oMsgText( "Comprobando formas de pago" )
   IsFPago()

   oMsgText( "Comprobando articulos" )
   IsArticulo()

   oMsgText( "Comprobando facturas a proveedor" )
   IsFacPrv()

   oMsgText( "Comprobando presupuestos a clientes" )
   IsPreCli()

   oMsgText( "Comprobando pedidos a clientes" )
   IsPedCli()

   oMsgText( "Comprobando albaranes a clientes" )
   IsAlbCli()

   oMsgText( "Comprobando facturas a clientes" )
   IsFacCli()

   oMsgText( "Comprobando facturas rectificativas a clientes" )
   IsFacRec()

   oMsgText( "Comprobando anticipos a clientes" )
   IsAntCli()

   oMsgText( "Comprobando tickets" )
   IsTpv()

   oMsgText( "Comprobando bancos" )
   IsBancos()

   oMsgText( "Comprobando contadores" )
   IsCount()

   oMsgText( "Comprobando contadores" )
   IsSitua()

RETURN nil





STATIC FUNCTION WinDelGrp( oBrw, dbfEmp )

   local lRet     := .F.
   local cPath    := FullCurDir() + "Emp" + ( dbfEmp )->CodEmp + "\"
   local cCodEmp  := ( dbfEmp )->CodEmp
   local nRec     := ( dbfEmp )->( Recno() )

   if dbSeekInOrd( cCodEmp, "CCODGRP", dbfEmp )
      msgStop( "No se puede eliminar un grupo asignado a empresas" )
      ( dbfEmp )->( dbGoto( nRec ) )
      RETURN ( lRet )
   end

   ( dbfEmp )->( dbGoto( nRec ) )

   if ApoloMsgNoYes( "Confirme eliminación de grupo", "Supresión de grupo" )

      if ApoloMsgNoYes( "Eliminara DEFINITIVAMENTE los datos del grupo: " + Rtrim( ( dbfEmp )->cNombre ), "Confirme supresión de grupo" )

         CursorWait()

         if IsDirectory( cPath )
            EraseFilesInDirectory(cPath )
            if DirRemove( cPath ) <> 0
               msgStop( "Error al borrar el directorio " + Str( fError() ), cPath )
            end
         end

         DelRecno( dbfEmp, oBrw )

         lRet     := .T.

         CursorWE()

      end

   end

RETURN lRet



FUNCTION mkPathEmp( cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg )

   local oDlgWat
   local oBmp
   local lEnd           := .F.
   local acImages       := { "BAR_01" }
   local cMsg           := "Creando nueva empresa"
   local cPath          := cPatEmpOld( cCodEmpNew )
   local cPathOld       := if( !empty( cCodEmpOld ), cPatEmpOld( cCodEmpOld ), nil )

   If( lDialog == nil, lDialog := .F., ) ;
   If( lNewEmp == nil, lNewEmp := .F., ) ;
   If( cNomEmpNew == nil, cNomEmpNew := "", ) ;
   If( aImportacion == nil, aImportacion := aImportacion():False(), ) ;

   if IsDirectory( cPath )
      EraseFilesInDirectory( cPath )
   end





   if lDialog

      oDlgWat = TDialog():New(,,,, "Creando empresa : " + cCodEmpNew + " - " + Rtrim( cNomEmpNew ), "CreaEmp",, .F.,,,,,, .F.,,,,,, .F.,, "oDlgWat", nil, )





         oBmp := TBitmap():ReDefine( 500, "gc_factory_48",, oDlgWat,,, .F., .F.,,, .F.,,, .T. )

         TAnimat():Redefine( oDlgWat, 100, acImages, 1 )



         oMsg := TSay():ReDefine( 110, {|| cMsg}, oDlgWat,,,, .F.,, .F., .F., )

         oDlgWat:bStart := {|| StartPathEmp( cPath, cPathOld, cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg ), lEnd := .T., oDlgWat:End() }

      oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .T., {|Self|( lEnd )},,, oDlgWat:bRClicked,,, )

      oBmp:End()

   else

      StartPathEmp( cPath, cPathOld, cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg )

   end

   sysrefresh()

RETURN ( .T. )



STATIC FUNCTION StartPathEmp( cPath, cPathOld, cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg )

   local oError
   local oBlock
   local cCodGrp        := Space( 4 )
   local cPathGrp       := ""
   local lAIS           := lAIS()

   if cCodEmpOld <> nil
      cCodGrp           := EmpresasModel():getCodigoGrupo( cCodEmpOld )
   end

   if !empty( cCodGrp )
      cPathGrp          := cPatStk( cCodGrp, , , .T. )
   else
      cPathGrp          := cPathOld
   end

   if lAIS
      setIndexToCDX()
   end

   dbCloseAll()

   sysrefresh()

   if lChDir( cNamePath( cPath ) ) .OR. makeDir( cNamePath( cPath ) ) <> -1





      if oMsg <> nil
         oMsg:SetText( "Creando contadores" )
      end
      mkCount( cPath ); synCount( cPath, nGetSemilla ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando configuración de columnas" )
      end
      ColumnasUsuariosModel():createFile( cPath ) ; sysrefresh()
      ColumnasUsuariosModel():createIndex( cPath ) ; sysrefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando familias" )
      end
      mkFamilia( cPath, aImportacion:lArticulos, cPathGrp ) ; rxFamilia( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando Estados de los SAT" )
      end
      mkEstadoSat( cPath, aImportacion:lSatCli, cPathGrp ); rxEstadoSat( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando " + getConfigTraslation( "temporadas" ) )
      end
      mkTemporada( cPath, aImportacion:lArticulos, cPathGrp ); rxTemporada( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando categorías" )
      end
      mkCategoria( cPath, aImportacion:lArticulos, cPathGrp ); rxCategoria( cPath )   ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de familias" )
      end
      if cPathGrp <> nil
         TGrpFam():Create( cPath ):CheckFiles( cPathGrp + "GrpFam.Dbf" )   ; sysrefresh()
      else
         TGrpFam():Create( cPath ):CheckFiles()                            ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando comandas" )
      end
      if cPathGrp <> nil
         TComandas():Create( cPath ):CheckFiles( cPathGrp + "TComandas.Dbf" ); sysrefresh()
      else
         TComandas():Create( cPath ):CheckFiles()                            ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando fabricantes" )
      end
      if cPathGrp <> nil
         TFabricantes():Create( cPath ):CheckFiles( cPathGrp + "Fabricantes.Dbf" )  ; sysrefresh()
      else
         TFabricantes():Create( cPath ):CheckFiles()                                ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando auditoría" )
      end
      if cPathGrp <> nil
         TAuditoria():Create( cPath ):CheckFiles( cPathGrp + "auditor.dbf" )  ; sysrefresh()
      else
         TAuditoria():Create( cPath ):CheckFiles()                            ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando campos extras" )
      end
      TCamposExtra():Create( cPath ):CheckFiles()                                     ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando lineas de campos extras" )
      end
      TDetCamposExtra():Create( cPath ):CheckFiles()                                     ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando catálogos" )
      end
      if cPathGrp <> nil
         TCatalogo():Create( cPath ):CheckFiles( cPathGrp + "Catalogo.Dbf" )  ; sysrefresh()
      else
         TCatalogo():Create( cPath ):CheckFiles()                             ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando unidades de medición" )
      end

      if cPathGrp <> nil
         UniMedicion():Create( cPath ):CheckFiles( cPathGrp + "UndMed.Dbf" ) ; sysrefresh()
      else
         UniMedicion():Create( cPath ):CheckFiles() ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando propiedades" )
      end
      mkPro( cPath, aImportacion:lArticulos, cPathGrp ); rxPro( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tarifas" )
      end
      mkTarifa(   cPath, nil, aImportacion:lArticulos, cPathGrp )       ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando promociones" )
      end
      mkPromo(    cPath, aImportacion:lPromocion, cPathGrp )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando articulos" )
      end
      mkArticulo( cPath, aImportacion:lArticulos, cPathGrp, nil, .F. )  ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando clientes" )
      end
      mkClient( cPath, aImportacion:lClientes, cPathGrp )             ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando proveedores" )
      end
      mkProvee( cPath, aImportacion:lProveedor, cPathGrp )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando agentes" )
      end
      mkAgentes( cPath, aImportacion:lAgente, cPathGrp )          ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando rutas" )
      end
      mkRuta( cPath, aImportacion:lRuta, cPathGrp )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando almacén" )
      end
      mkAlmacen( cPath, aImportacion:lAlmacen, cPathGrp ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando categoría" )
      end
      mkCategoria( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando ubicaciones" )
      end
      mkUbi( cPath, aImportacion:lAlmacen, cPathGrp ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando ofertas" )
      end
      mkOferta( cPath, aImportacion:lOferta, cPathGrp ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tpv" )
      end
      mkTpv( cPath, aImportacion:lVale, cPathGrp ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando menus tpv" )
      end
      if cPathGrp <> nil
         TPVMenu():Create( cPath ):CheckFiles( cPathGrp + "TpvMenus.Dbf" ) ; sysrefresh()
      else
         TPVMenu():Create( cPath ):CheckFiles() ; sysrefresh()
      end

      if cPathGrp <> nil
         TPVMenuArticulo():Create( cPath ):CheckFiles( cPathGrp + "TpvMnuArt.Dbf" )
      else
         TPVMenuArticulo():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if cPathGrp <> nil
         TPVMenuOrdenes():Create( cPath ):CheckFiles( cPathGrp + "TpvMnuOrd.Dbf" )
      else
         TPVMenuOrdenes():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando forma de pago" )
      end
      mkFPago( cPath, aImportacion:lFPago, cPathGrp )
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando entrada y salidas" )
      end
      mkEntSal( cPath )
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando bancos" )
      end
      if cPathGrp <> nil .AND. aImportacion:lBancos
         TBancos():Create( cPath ):CheckFiles( cPathGrp + "Bancos.Dbf" )
      else
         TBancos():Create( cPath ):CheckFiles()
      end

      if cPathGrp <> nil .AND. aImportacion:lBancos
         TCuentasBancarias():Create( cPath ):CheckFiles( cPathGrp + "EmpBnc.Dbf" )
      else
         TCuentasBancarias():Create( cPath ):CheckFiles()
      end

      if cPathGrp <> nil .AND. aImportacion:lScript
         TScripts():Create( cPath ):CheckFiles( cPathGrp + "Scripts.Dbf" )
      else
         TScripts():Create( cPath ):CheckFiles()
      end

      if cPathGrp <> nil .AND. aImportacion:lEntidades
         TEntidades():Create( cPath ):CheckFiles( cPathGrp + "Entidades.Dbf" )
      else
         TEntidades():Create( cPath ):CheckFiles()
      end

      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando impuesto de hidrocarburos" )
      end
      TNewImp():Create( cPath ):CheckFiles() ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando sesiones" )
      end
      TTurno():Create( cPath ):CheckFiles() ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tipos de articulos" )
      end
      if cPathGrp <> nil .AND. aImportacion:lArticulos
         TTipArt():Create( cPath ):CheckFiles( cPathGrp + "TipArt.Dbf" ) ; sysrefresh()
      else
         TTipArt():Create( cPath ):CheckFiles() ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando proyectos" )
      end

      if oMsg <> nil
         oMsg:SetText( "Creando atípicas de clientes y grupos" )
      end

      if cPathGrp <> nil .AND. aImportacion:lArticulos
         TAtipicas():Create( cPath ):CheckFiles( cPathGrp + "CliAtp.Dbf" ) ; sysrefresh()
      else
         TAtipicas():Create( cPath ):CheckFiles()                          ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de clientes" )
      end

      if cPathGrp <> nil .AND. aImportacion:lClientes
         TGrpCli():Create( cPath ):CheckFiles( cPathGrp + "GrpCli.Dbf" )   ; sysrefresh()
      else
         TGrpCli():Create( cPath ):CheckFiles()                            ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de facturas automáticas" )
      end

      if cPathGrp <> nil .AND. aImportacion:lClientes
         TGrpFacturasAutomaticas():Create( cPath ):CheckFiles( cPathGrp + "GrpFac.Dbf" )   ; sysrefresh()
      else
         TGrpFacturasAutomaticas():Create( cPath ):CheckFiles()                            ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando transportistas" )
      end

      if cPathGrp <> nil .AND. aImportacion:lClientes
         TTrans():Create( cPath ):CheckFiles( cPathGrp + "Transpor.Dbf" )  ; sysrefresh()
      else
         TTrans():Create( cPath ):CheckFiles()                             ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de proveedores" )
      end

      if cPathGrp <> nil .AND. aImportacion:lProveedor
         TGrpPrv():Create( cPath ):CheckFiles( cPathGrp + "GrpPrv.Dbf" )   ; sysrefresh()
      else
         TGrpPrv():Create( cPath ):CheckFiles()                            ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando cuentas de remesas" )
      end

      if cPathGrp <> nil
         TCtaRem():Create( cPath ):CheckFiles( cPathGrp + "CtaRem.Dbf" )   ; sysrefresh()
      else
         TCtaRem():Create( cPath ):CheckFiles()                            ; sysrefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando salas y puntos de ventas" )
      end

      if cPathGrp <> nil
         TTpvRestaurante():Create( cPath ):CheckFiles( cPathGrp + "SalaVta.Dbf" )     ; sysrefresh()
         TDetSalaVta():Create( cPath ):CheckFiles( cPathGrp + "SlaPnt.Dbf" )     ; sysrefresh()
      else
         TTpvRestaurante():Create( cPath ):CheckFiles()                               ; sysrefresh()
         TDetSalaVta():Create( cPath ):CheckFiles()                              ; sysrefresh()
      end





      if oMsg <> nil
         oMsg:SetText( "Creando pedido a proveedores" )
      end
      mkPedPrv( cPath, aImportacion:lAlbPrv, cPathGrp, nil, {| dbf | ( dbf )->nEstado <> 3 } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando albaran a proveedores" )
      end
      mkAlbPrv( cPath, aImportacion:lAlbPrv, cPathGrp, nil, {| dbf | !( dbf )->nFacturado <> 3 } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando factura a proveedores" )
      end
      mkFacPrv( cPath, nil ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas rectificativas a proveedores" )
      end
      mkRctPrv( cPath, nil ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando recibos a proveedores" )
      end
      mkRecPrv( cPath, nil ) ; sysrefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando presupuesto a clientes" )
      end
      mkPreCli( cPath, aImportacion:lPreCli, cPathGrp, nil, {| dbf | !( dbf )->lEstado } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando S.A.T. a clientes" )
      end
      mkSatCli( cPath, aImportacion:lSatCli, cPathGrp, nil, {| dbf | !( dbf )->lEstado } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando pedidos a clientes" )
      end
      mkPedCli( cPath, aImportacion:lPedCli, cPathGrp, nil, {| dbf | ( dbf )->nEstado <> 3 } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando albaranes a clientes" )
      end
      mkAlbCli( cPath, aImportacion:lAlbCli, cPathGrp, nil, {| dbf | !lFacturado( dbf ) } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas a clientes" )
      end
      mkFacCli( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas rectificativas a clientes" )
      end
      mkFacRec( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando recibos a clientes" )
      end
      mkRecCli( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas de anticipos a clientes" )
      end
      mkAntCli( cPath, aImportacion:lAnticipo, cPathGrp ) ; sysrefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando ordenes de carga" )
      end

      if cPathGrp <> nil
         TOrdCarga():Create( cPath ):CheckFiles( cPathGrp + "OrdCarP.Dbf" )
      else
         TOrdCarga():Create( cPath ):CheckFiles()
      end

      if cPathGrp <> nil
         TDetOrdCar():Create( cPath ):CheckFiles( cPathGrp + "OrdCarL.Dbf" )
      else
         TDetOrdCar():Create( cPath ):CheckFiles()
      end

      sysrefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando secciones de producción" )
      end

      if cPathGrp <> nil
         TSeccion():Create( cPath ):CheckFiles( cPathGrp + "Seccion.Dbf" )
      else
         TSeccion():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando horas de producción" )
      end

      if cPathGrp <> nil
         THoras():Create( cPath ):CheckFiles( cPathGrp + "Horas.Dbf" )
      else
         THoras():Create( cPath ):CheckFiles()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando detalle de horas de producción" )
      end

      if cPathGrp <> nil
         TDetHoras():Create( cPath ):CheckFiles( cPathGrp + "OpeL.Dbf" )
      else
         TDetHoras():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando operarios de producción" )
      end

      if cPathGrp <> nil
         TOperarios():Create( cPath ):CheckFiles( cPathGrp + "OpeT.Dbf" )
      else
         TOperarios():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando operaciones de producción" )
      end

      if cPathGrp <> nil
         TOperacion():Create( cPath ):CheckFiles( cPathGrp + "Operacio.Dbf" )
      else
         TOperacion():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tipos de operaciones de producción" )
      end

      if cPathGrp <> nil
         TTipOpera():Create( cPath ):CheckFiles( cPathGrp + "TipOpera.Dbf" )
      else
         TTipOpera():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando maquinarias de producción" )
      end

      if cPathGrp <> nil
         TMaquina():Create( cPath ):CheckFiles( cPathGrp + "MaqCosT.Dbf" )
      else
         TMaquina():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando costos de maquinarias de producción" )
      end

      if cPathGrp <> nil
         TCosMaq():Create( cPath ):CheckFiles( cPathGrp + "Costes.Dbf" )
      else
         TCosMaq():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if cPathGrp <> nil
         TFideliza():Create( cPath ):CheckFiles( cPathGrp + "Fideliza.Dbf" )
      else
         TFideliza():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if cPathGrp <> nil
         TDetFideliza():Create( cPath ):CheckFiles( cPathGrp + "DetFideliza.Dbf" )
      else
         TDetFideliza():Create( cPath ):CheckFiles()
      end
      sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando identificadores de prestashop" )
      end

      TPrestaShopId():Create( cPath ):CheckFiles()
      sysrefresh()



      if oMsg <> nil
         oMsg:SetText( "Creando columnas de usuarios" )
      end

      if cPathGrp <> nil
         TShell():AppendData( cPath, cPathGrp )
      else
         TShell():ReindexData( cPath )
      end



      if oMsg <> nil
         oMsg:SetText( "Creando favoritos de informes" )
      end

      if cPathGrp <> nil
         mkReport( cPath, .T., cPathGrp )
      else
         mkReport( cPath )
      end





      if oMsg <> nil
         oMsg:SetText( "Creando documentos" )
      end
      mkDocs( cPath, aImportacion:lDocument, cPathGrp ) ; sysrefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando stocks" )
      end
      if aImportacion:lStockIni .AND. cPathOld <> nil


      end










      if oMsg <> nil
         oMsg:SetText( "Creando movimientos de almacén" )
      end
      TRemMovAlm():BuildFiles( cPath )                                     ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando lineas de movimientos de almacén" )
      end
      TDetMovimientos():BuildFiles( cPath )                                ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando lineas de movimientos de almacén" )
      end
      TDetSeriesMovimientos():BuildFiles( cPath )                          ; sysrefresh()











      if lNewEmp
         reindexaEmp( cPath, cCodEmpNew, oMsg )
      end

   else

      MsgStop( "Imposible crear el directorio " + cPath )

   end





   if lAIS

      selectEmpresa( cCodEmpNew )

      if oMsg <> nil
         oMsg:SetText( "Insertando tablas en el diccionario de datos" )
      end

      TDataCenter():buildEmpresa()
      TDataCenter():deleteEmpresaTablesFromDataDictionary()
      TDataCenter():addEmpresaTablesToDataDictionary()

      setIndexToADSCDX()

      if oMsg <> nil
         oMsg:SetText( "Optimizando indices" )
      end

      TDataCenter():Reindex()

      if oMsg <> nil
         oMsg:SetText( "Proceso finalizado" )
      end

   end

RETURN .T.



FUNCTION ReindexaEmp( cPath, cCodigoEmpresa, oMsg )

   with object ( TReindex():New( nil, nil, cPath ) )
      :lEmpresa      := .F.
      :lDatos        := .F.
      :lSincroniza   := .F.
      :lMessageEnd   := .F.
      :cCodEmp       := cCodigoEmpresa
      :cPatCli       := cPatEmp( cCodigoEmpresa, .F., .T. )
      :cPatArt       := cPatEmp( cCodigoEmpresa, .F., .T. )
      :cPatPrv       := cPatEmp( cCodigoEmpresa, .F., .T. )
      :cPatAlm       := cPatEmp( cCodigoEmpresa, .F., .T. )
      :GenIndices( oMsg )
   end

RETURN .T.






FUNCTION lActualiza( cCodEmp, oWndBrw, lNoWait, cNomEmp, lSincroniza )

   local oBmp
   local oAni
   local oAct
   local oMsg
   local oDlgWat
   local hBmp           := LoadBitmap( GetResources(), "BSTOP" )
   local cMsg           := ""
   local aMsg           := {}
   local acImages       := { "BAR_01" }
   local oBtnAceptar
   local oBtnCancelar

   If( lNoWait == nil, lNoWait := .F., ) ;
   If( lSincroniza == nil, lSincroniza := .T., ) ;

   if !TReindex():lFreeHandle()

      msgStop( "Existen procesos exclusivos, no se puede acceder a la aplicación" + Chr(13)+Chr(10) +  "en estos momentos, reintentelo pasados unos segundos." )
      RETURN .F.
   end

   if !TReindex():lCreateHandle()
      msgStop( "Esta opción ya ha sido inicada por otro usuario", "Atención" )
      RETURN .F.
   end

   if lNoWait
      lActEmp           := .T.
   end

   if oWndBrw <> nil
      oWndBrw:End( .T. )
   end

   oDlgWat = TDialog():New(,,,, "Actualizando empresa : " + AllTrim( cCodEmp ) + " - " + AllTrim( cNomEmp ), "ACTEMPRESA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlgWat", nil, )





      oBmp := TBitmap():ReDefine( 500, "gc_factory_48",, oDlgWat,,, .F., .F.,,, .F.,,, .T. )

      oAni        := TAnimat():Redefine( oDlgWat, 100, acImages, 1 )



      oMsg := TSay():ReDefine( 110, {|| cMsg}, oDlgWat,,,, .F.,, .F., .F., )



      oAct := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, lActEmp, lActEmp:= u ) }, oDlgWat,,,,,,, .F.,, .F. )




      oBtnAceptar := TButton():ReDefine( 1, {||( ActualizaEmpresa( cCodEmp, aMsg, oAni, oBtnAceptar, oBtnCancelar, oDlgWat, oMsg, oAct, lActEmp, lSincroniza ) )}, oDlgWat,,, .F.,,,, .F. )





      oBtnCancelar := TButton():ReDefine( 2, {||( oDlgWat:End() )}, oDlgWat,,, .F.,,,, .F. )
      oDlgWat:AddFastKey( 116, {|| Eval( oBtnAceptar:bAction ) } )

      if lNoWait
         oDlgWat:bStart := oBtnAceptar:bAction
      else
         oDlgWat:bStart := {|| oAni:Hide() }
      end

   oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .T.,,,, oDlgWat:bRClicked,,, )

   TReindex():lCloseHandle()

   oAni:End()
   oBmp:End()

   DeleteObject( hBmp )

RETURN ( oDlgWat:nResult == 1 )



STATIC FUNCTION ActualizaEmpresa( cCodEmp, aMsg, oAni, oBtnAceptar, oBtnCancelar, oDlg, oMsg, oAct, lActEmp, lSincroniza )

   oDlg:bValid          := {|| .F. }

   oAct:Disable()
   oBtnAceptar:Hide()
   oBtnCancelar:Hide()

   if lAIS()
      TDataCenter():ActualizaEmpresa( oMsg )
   else
      ActDbfEmp( cCodEmp, aMsg, oAni, oDlg, oMsg, nil, lActEmp, lSincroniza )
   end

   oDlg:bValid          := {|| .T. }

   oDlg:End( 1 )

RETURN nil



STATIC FUNCTION ActDbfEmp( cCodEmp, aMsg, oAni, oDlg, oMsg, oMet, lActEmp, lSincroniza )

   local oBlock
   local oError
   local cEmpDat  := cPatDat()
   local cEmpTmp  := cPatEmpTmp()
   local cEmpOld  := cPatEmpOld( cCodEmp )

   oAni:Show()

   oMsg:SetText( "Generando nueva estructura" )





   dbCloseAll()

   aEval( Directory( cEmpTmp + "*.*" ), {| aFiles | fErase( cEmpTmp + aFiles[ 1 ] ) } )

   if mkPathEmp( "Tmp", nil, nil, aImportacion():False(), .F., .F., nil, oMsg )





      oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE










         if mkDiv( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Divisas", "divisas monetarias", oMet, oMsg, aMsg )
         end

         if mkTiva( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Tiva", "tipos de impuestos", oMet, oMsg, aMsg )
         end

         oMsg:SetText( "Añadiendo filtros" )
         TFilterDatabase():Create():SyncAllDbf()

         if mkCajas( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Cajas", "cajas", oMet, oMsg, aMsg )
            ActDbf( cEmpDat, cEmpTmp, "CajL", "impresoras de comanda", oMet, oMsg, aMsg )
         end

         if mkSitua( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Situa", "situaciones", oMet, oMsg, aMsg )
         end

         if mkImpTik( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "ImpTik", "impresora de tikets", oMet, oMsg, aMsg )
         end

         if mkVisor( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Visor", "visor", oMet, oMsg, aMsg )
         end

         if mkCajPorta( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "CajPorta", "cajón portamonedas", oMet, oMsg, aMsg )
         end

         if mkTipImp( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "TipImp", "tipo de impresoras", oMet, oMsg, aMsg )
         end

         if mkLogPorta( cEmpTmp )
            ActDbf( cEmpOld, cEmpTmp, "LogPorta", "log cajón portamonedas", oMet, oMsg, aMsg )
         end

         if mkReport( cEmpTmp, .F. )
            ActDbf( cEmpOld, cEmpTmp, "CfgCar", "Añadiendo datos de documentos", oMet, oMsg, aMsg )
         end





         ActDbf( cEmpOld, cEmpTmp, "FPago",     "formas de pago", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Familias",  "familias", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FamPrv",    "familias de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FamLeng",   "familias lenguajes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Categorias","categorías", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Temporadas","temporadas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "EstadoSat","estado de los SAT", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Pro",       "propiedades", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TblPro",    "tabla de propiedades", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "RDocumen",  "documentos", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ObrasT",    "obras", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "TarPreT",   "tarifas de precios", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TarPreL",   "tarifas de precios", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TarPreS",   "tarifas de precios", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PromoT",    "promociones", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PromoL",    "promociones", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Articulo",  "artículos", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ArtCodebar","códigos de barras", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtDiv",    "precios por ventas propiedades", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtKit",    "artículos kits", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ParKit",    "parent kits", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtAsc",    "artículos asociados", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtLbl",    "artículos relación de codigos de barras", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtImg",    "artículos relación de imagenes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtDoc",    "artículos relación de documentos", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ProvArt",   "artículos por proveedor", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtAlm",    "stock por almacenes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Client",    "clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ClientD",   "documentos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliAtp",    "atipicas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliBnc",    "bancos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliInc",    "incidencias de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliCto",    "contactos de clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Provee",    "proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ProveeD",   "documentos de proveedor", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PrvBnc",    "bancos de proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Agentes",   "agentes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Ruta",      "rutas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Almacen",   "almacen", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "EntSal",    "entradas y salidas de caja", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "TikeT",     "tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeL",     "líneas de tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeP",     "pagos de tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeC",     "pagos de clientes tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeS",     "series de tickets", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Oferta",    "ofertas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PedProvT",  "pedidos a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedProvL",  "líneas de pedidos a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedPrvI",   "incidencias de pedidos a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedPrvD",   "documentos de pedidos a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "AlbProvT",  "albaran de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbProvL",  "líneas de albarán a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbPrvI",   "incidencias de albaranes a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbPrvD",   "documentos de albaranes a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbPrvS",   "números de serie de albaranes a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "FacPrvT",   "facturas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvL",   "líneas de facturas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvP",   "pagos de facturas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvI",   "incidencias de facturas a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvD",   "documentos de facturas a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvS",   "números de serie de facturas a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "RctPrvT",   "facturas rectificativas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RctPrvL",   "líneas de facturas rectificativas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RctPrvI",   "incidencias de facturas rectificativas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RctPrvS",   "números de serie de facturas rectificativas a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "DepAgeT",   "depositos a almacenes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "DepAgeL",   "líneas de depositos a almacenes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ExtAgeT",   "existencias a almacenes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ExtAgeL",   "líneas de existencias a almacenes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "SatCliT",   "S.A.T. a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "SatCliL",   "líneas de S.A.T. a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "SatCliI",   "incidencias de S.A.T. a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "SatCliD",   "documentos de S.A.T. a clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PreCliT",   "presupuestos a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PreCliL",   "líneas de presupuestos a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PreCliI",   "incidencias de presupuestos a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PreCliD",   "documentos de presupuestos a clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PedCliT",   getConfigTraslation("Pedidos de clientes"), oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliL",   "líneas de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliR",   "reservas de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliI",   "incidencias de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliD",   "documentos de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliP",   "entregas a cuenta de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliE",   "situaciones de pedido de cliente", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "AlbCliT",   "albaranes de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliL",   "líneas de albaranes de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliI",   "incidencias de albaranes a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliD",   "documentos de albaranes a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliP",   "entregas a cuenta de albaranes a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliS",   "números de series de albaranes a clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "FacCliT",   "facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliL",   "líneas de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliP",   "pagos de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliI",   "incidencias de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliD",   "documentos de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliS",   "series de facturas de clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "FacRecT",   "facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecL",   "líneas de facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecI",   "incidencias de facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecD",   "documentos de facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecS",   "series de facturas rectificativas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "AntCliT",   "anticipos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AntCliI",   "anticipos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AntCliD",   "documentos de anticipos de clientes", oMet, oMsg, aMsg )

         oMsg:SetText( "País" )
         TPais():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "OdooIds" )
         TOdooIds():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Usuarios" )
         TUsuarios():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Roles" )
         TRoles():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Permisos" )
         TPermisos():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Asistencias" )
         TAsistencias():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Detalle permisos" )
         TDetPermisos():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Columnas" )
         TAcceso():MakeDatabase( cPatDat() )

         oMsg:SetText( "Lenguaje" )
         TLenguaje():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Centro de coste" )
         TCentroCoste():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Unidades de medición" )
         UniMedicion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo bancos" )
         TBancos():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo cuentas bancarias" )
         TCuentasBancarias():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo backup" )
         TBackup():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo envios y recepciones" )
         TSndRecInf():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo frases publicitarias" )
         TFrasesPublicitarias():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo datos de documentos" )
         TInfGen():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de familias" )
         TGrpFam():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo auditoría" )
         TAuditoria():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo fabricante" )
         TFabricantes():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de comandas" )
         TComandas():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo campos extra" )
         TCamposExtra():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de campos extra" )
         TDetCamposExtra():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo notas" )
         TNotas():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo agenda" )
         TAgenda():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo sala de ventas" )
         TSalaVenta():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo ubicaciones de sala de ventas" )
         TDetSalaVta():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo plantillas de ventas automáticas" )
         TFacAutomatica():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de plantillas de ventas automáticas" )
         TDetFacAutomatica():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo histórico de plantillas de ventas automáticas" )
         THisFacAutomatica():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo invitaciones" )
         TInvitacion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo partes de producción" )
         TProduccion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo expedientes" )
         TExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de artículos" )
         TTipArt():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo catálogos de artículos" )
         TCatalogo():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de clientes" )
         TGrpCli():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de proveedores" )
         TGrpPrv():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo nuevos impuestos" )
         TNewImp():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo transportistas" )
         TTrans():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo turnos" )
         TTurno():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo cuentas de remesas" )
         TCtaRem():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo remesas" )
         TRemesas():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo secciones" )
         TSeccion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de horas" )
         THoras():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo operarios" )
         TOperarios():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo horas de operarios" )
         TDetHoras():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo operaciones" )
         TOperacion():Create():SyncAllDbf()

         oMsg:SetText( "Tipos de operación" )
         TTipOpera():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo costes maquinaria" )
         TCosMaq():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo máquina" )
         TMaquina():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalle máquinas" )
         TDetCostes():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de partes de producción" )
         TDetProduccion():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo series de partes de producción" )
         TDetSeriesProduccion():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de personal" )
         TDetPersonal():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de horas de personal" )
         TDetHorasPersonal():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de materias primas" )
         TDetMaterial():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo series de materiales de producción" )
         TDetSeriesMaterial():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de maquinaria" )
         TDetMaquina():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de expedientes" )
         TTipoExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo subtipos de expediente" )
         TDetTipoExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo entidades" )
         TEntidades():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo colaboradores" )
         TColaboradores():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo actuaciones" )
         TActuaciones():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo expedientes" )
         TExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo actuaciones de expedientes" )
         TDetActuacion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo comentarios" )
         TComentarios():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de comentarios" )
         TDetComentarios():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo ordenes de comandas" )
         TOrdenComanda():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo programas de fidelización" )
         TFideliza():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de programas de fidelización" )
         TDetFideliza():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo capturas" )
         TCaptura():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de capturas" )
         TDetCaptura():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Añadiendo plantillas XML" )
         TPlantillaXml():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de plantillas XML" )
         TDetCabeceraPlantillaXML():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo liquidaciones de agentes" )
         TCobAge():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de liquidaciones de agentes" )
         TDetCobAge():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo reporting" )
         TFastReportInfGen():SyncAllDbf()

         oMsg:SetText( "Añadiendo scripts" )
         TScripts():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo envios y recepciones de internet" )
         TSndRecInf():SyncAllDbf()

         oMsg:SetText( "Menús" )
         TpvMenu():Create():SyncAllDbf()

         oMsg:SetText( "Ordenes de menús" )
         TpvMenuOrdenes():Create():SyncAllDbf()

         oMsg:SetText( "Articulos de menú" )
         TPVMenuArticulo():Create():SyncAllDbf()

         oMsg:SetText( "Identificadores de prestashop" )
         TPrestaShopId():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo orden de carga" )
         TOrdCarga():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo lineas orden de carga" )
         TDetOrdCar():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo movimientos de almacén" )
         ActDbf( cEmpOld, cEmpTmp, "RemMovT",   "Movimientos de almacén", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "HisMov",    "Lineas movimientos de almacén", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "MovSer",    "Series movimientos de almacén", oMet, oMsg, aMsg )

      RECOVER USING oError

         msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      end

      ErrorBlock( oBlock )





      InitDbClass()





      with object ( TReindex():New() )
         :lSincroniza   := lSincroniza
         :lMessageEnd   := .F.
         :GenIndices( oMsg )
      end

   end





   aEval( Directory( cEmpTmp + "*.*" ), {|aFiles| fErase( cEmpTmp + aFiles[ 1 ] ) } )

   oAni:Hide()

RETURN .T.



STATIC FUNCTION cGetInfo( uVal )

   local cType := ValType( uVal )

   do case
      case cType == "C"
         RETURN uVal

      case cType == "O"
         RETURN "Class: " + uVal:ClassName()

      case cType == "A"
         RETURN "Len: " + Str( Len( uVal ), 4 )

      otherwise
         RETURN cValToChar( uVal )
   endcase

RETURN nil



STATIC FUNCTION IsChgStru( dbfOld, dbfNew )

   local i
   local lChg     := .F.
   local cCharOld
   local cCharNew
   local aStruOld := ( dbfOld )->( dbStruct() )
   local aStruNew := ( dbfNew )->( dbStruct() )

   if len( aStruOld ) <> len( aStruNew )
      lChg        := .T.
   else
      for i := 1 to len( aStruNew )
         cCharOld := aStruOld[ i, 1 ] + aStruOld[ i, 2 ] + str( aStruOld[ i, 3 ], 3 ) + str( aStruOld[ i, 4 ], 2 )
         cCharNew := aStruNew[ i, 1 ] + aStruNew[ i, 2 ] + str( aStruNew[ i, 3 ], 3 ) + str( aStruNew[ i, 4 ], 2 )
         if cCharOld <> cCharNew
            lChg  := .T.
            exit
         endif
      next
   endif

RETURN lChg



STATIC FUNCTION BeginEdtRec( aTmp )

   local oBlock
   local oError
   local lErrors  := .F.
   local cCodEmp  := aTmp[ 1 ]

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   cNewDlg        := cGetNewFileName( cPatTmp() + "Dlg"  )

   dbCreate( cNewDlg, aSqlStruct( aItmDlg() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewDlg, cCheckArea( "Dlg", @tmpDlg ), .F. )

   if !NetErr() .AND. ( tmpDlg )->( Used() )

      ( tmpDlg )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( tmpDlg )->( ordCreate( cNewDlg, "Recno", "Recno()", {|| Recno() } ) )

   else

      lErrors     := .T.

   end





   if !lErrors

      if ( dbfDlg )->( dbSeek( cCodEmp ) )
         while ( dbfDlg )->cCodEmp == cCodEmp .AND. !( dbfDlg )->( eof() )
            dbPass( dbfDlg, tmpDlg, .T. )
            ( dbfDlg )->( dbSkip() )
         end
      end

      ( tmpDlg )->( dbGoTop() )

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear tablas temporales." )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

RETURN ( lErrors )



STATIC FUNCTION BeginEditConfig( aTmp )

   local oBlock
   local oError
   local lErrors  := .F.
   local cCodEmp  := aTmp[ 1 ]

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   cTmpCon        := cGetNewFileName( cPatTmp() + "CON" )

   dbCreate( cTmpCon, aSqlStruct( aItmCount() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpCon, cCheckArea( "CON", @tmpCount ), .F. )

   if !NetErr() .AND. ( tmpCount )->( Used() )

      ( tmpCount )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpCount )->( ordCreate( cTmpCon, "Doc", "Upper( Doc )", {|| Upper( Field->Doc ) } ) )

      ( tmpCount )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpCount )->( ordCreate( cTmpCon, "Des", "Upper( Des )", {|| Upper( Field->Des ) } ) )

   else

      lErrors     := .T.

   end





   if !lErrors

      ( dbfCount )->( dbGoTop() )
      while !( dbfCount )->( eof() )
         dbPass( dbfCount, tmpCount, .T. )
         ( dbfCount )->( dbSkip() )
      end

      ( tmpCount )->( dbGoTop() )

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear tablas temporales." )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

RETURN ( lErrors )



STATIC FUNCTION PrvTrans( oFld, oBtnOk )

   if oFld:nOption > 1
      oFld:SetOption( oFld:nOption - 1 )
   end

   if oFld:nOption <> 3
      SetWindowText( oBtnOk:hWnd, "&Siguiente >" )
   end

RETURN nil







FUNCTION ActDbf( cEmpOld, cEmpTmp, cFile, cText, oMtr, oMsg )

   local i
   local cField
   local dbfOld
   local dbfTmp
   local dbfNamOld            := cEmpOld + cFile
   local dbfNamTmp            := cEmpTmp + cFile
   local lCopy                := .F.
   local nField               := 0
   local aField

   sysrefresh()

   if oMsg <> nil
      oMsg:SetText( "Añadiendo " + cText )
   end

   if !lExistTable( dbfNamOld + ".Dbf" )
      RETURN .F.
   end

   if !lExistTable( dbfNamTmp + ".Dbf" )
      RETURN .F.
   end

   dbUseArea( .T., ( cDriver() ), ( dbfNamOld + ".Dbf" ), ( cCheckArea( "OLD", @dbfOld ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if NetErr()
      msgStop( "Error al abrir el fichero " + ( dbfNamOld ) + ".Dbf" )
      RETURN .F.
   end

   dbUseArea( .T., ( cLocalDriver() ), ( dbfNamTmp + ".Dbf" ), ( cCheckArea( "TMP", @dbfTmp ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if NetErr()
      msgStop( "Error al abrir el fichero " + ( dbfNamTmp ) + ".Dbf" )
      RETURN .F.
   end



   nField                     := ( dbfTmp )->( fCount() )
   aField                     := array( nField )

   for i := 1 to nField
      aField[ i ]             := ( dbfTmp )->( fieldPos( ( dbfOld )->( fieldName( i ) ) ) )
   next



   ( dbfOld )->( dbGoTop() )
   while !( dbfOld )->( eof() )

      ( dbfTmp )->( dbAppend() )

      aEval( aField, {| nFld, i | if( nFld <> 0, ( dbfTmp )->( FieldPut( nFld, ( dbfOld )->( FieldGet( i ) ) ) ), ) } )

      ( dbfOld )->( dbSkip() )

      sysrefresh()

   end

   lCopy                      := ( dbfOld )->( eof() )

   ( dbfOld )->( dbCloseArea() )
   ( dbfTmp )->( dbCloseArea() )



   if lCopy

      if lExistTable( dbfNamOld + ".Dbf" )
         fEraseTable( dbfNamOld + ".Dbf" )
      end

      if lExistTable( dbfNamOld + ".Fpt" )
         fEraseTable( dbfNamOld + ".Fpt" )
      end

      if lExistTable( dbfNamOld + ".Cdx" )
         fEraseTable( dbfNamOld + ".Cdx" )
      end

      if lExistTable( dbfNamTmp + ".Dbf" )
         if fRenameTable( dbfNamTmp + ".Dbf", dbfNamOld + ".Dbf" ) == -1
            msgStop( "La tabla " + ( dbfNamTmp ) + ".Dbf" + " no ha sido renombrada a " + ( dbfNamOld ) + ".Dbf" )
         end
      end

      if lExistTable( dbfNamTmp + ".Fpt" )
         if fRenameTable( dbfNamTmp + ".Fpt", dbfNamOld + ".Fpt" ) == -1
            msgStop( "La tabla " + ( dbfNamTmp ) + ".Fpt" + " no ha sido renombrada a " + ( dbfNamOld ) + ".Fpt" )
         end
      end

      if lExistTable( dbfNamTmp + ".Cdx" )
         if fRenameTable( dbfNamTmp + ".Cdx", dbfNamOld + ".Cdx" ) == -1
            msgStop( "La tabla " + ( dbfNamTmp ) + ".Cdx" + " no ha sido renombrada a " + ( dbfNamOld ) + ".Cdx" )
         end
      end

   else

      MsgStop( "No se actualizo el fichero " + ( dbfNamOld ) + ".Dbf" )

   end

RETURN ( lCopy )



STATIC FUNCTION EndTrans( aTmp, aGet, oBrw, oFld, oDlg, oBtnOk, oBrwDet, dbfEmp, nMode )

   local n
   local cCodEmp           := aTmp[ 1 ]
   cNewEmpresa             := aTmp[ 1 ]

   if nMode == 1 .OR. nMode == 4

      if oFld:nOption <> 3

         oFld:SetOption( oFld:nOption + 1 )

         if oFld:nOption == 3
            SetWindowText( oBtnOk:hWnd, "&Terminar" )
         end

         RETURN nil

      end

      if !empty( cOldCodigoEmpresa ) .AND. !dbSeekInOrd( cOldCodigoEmpresa, "CodEmp", dbfEmp )
         msgStop( "Empresa " + cOldCodigoEmpresa + " no encontrada." )
         RETURN nil
      end

   end





   oDlg:Disable()





   while ( dbfDlg )->( dbSeek( cCodEmp ) )
      if( dbLock( dbfDlg ), ( ( dbfDlg )->( dbDelete() ), ( dbfDlg )->( dbUnLock() ) ), )
   end





   ( tmpDlg )->( dbGoTop() )
   while !( tmpDlg )->( eof() )
      dbPass( tmpDlg, dbfDlg, .T., cCodEmp )
      ( tmpDlg )->( dbSkip() )
   end





   if nMode == 1







      if empty( aTmp[ 48 ] )
         aTmp[ 48 ]  := "00"
      end

      if empty( aTmp[ 47 ] )
         aTmp[ 47 ]  := "000"
      end

      if empty( aTmp[ 109 ] )
         aTmp[ 109 ]  := "000"
      end

      if empty( aTmp[ 110 ] )
         aTmp[ 110 ]  := "000"
      end

      if empty( aTmp[ 120 ] )
         aTmp[ 120 ]  := ".\Imagen"
      end

      aTmp[ 31 ]     := nSemillaContadores
      aTmp[ 118 ]     := nSemillaContadores
      aTmp[ 119 ]     := nSemillaContadores
      aTmp[ 122 ]     := nSemillaContadores
      aTmp[ 123 ]     := nSemillaContadores
      aTmp[ 188 ]     := nSemillaContadores

   end





   WinGather( aTmp, aGet, dbfEmp, oBrw, nMode, , .F. )





   dbCommitAll()





   oDlg:Enable()
   oDlg:End( 1 )

RETURN .T.



FUNCTION ConfEmpresa( oMenuItem, oWnd, nSelFolder )

   local nLevel         := 0

   If( oMenuItem == nil, oMenuItem := "01003", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;
   If( nSelFolder == nil, nSelFolder := 1, ) ;





   nLevel               := Auth():Level( oMenuItem )

   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN nil
   end





   if oWnd <> nil
      sysrefresh(); oWnd:CloseAll(); sysrefresh()
   end

   if OpenFiles()

      if ( dbfEmp )->( dbSeek( cCodEmp() ) )
         WinEdtRec( nil, bEditConfig, dbfEmp, nSelFolder )
      else
         MsgStop( "Código de empresa " + cCodEmp() + " no encontrada." )
      end

      CloseFiles()

   end

RETURN NIL



STATIC FUNCTION AppFromEmpresa( cCodEmp, dbfEmp, aGet, aTmp, tmpDlg, dbfDlg )

   local nRec              := ( dbfEmp )->( Recno() )

   if dbSeekInOrd( cCodEmp, "CodEmp", dbfEmp )

      aTmp[ 16 ]     := (dbfEmp)->cSufDoc
      aTmp[ 14 ]     := (dbfEmp)->nCodCli
      aTmp[ 15 ]     := (dbfEmp)->nCodPrv
      aTmp[ 32 ]     := (dbfEmp)->lUseCaj
      aTmp[ 33 ]     := (dbfEmp)->lCalCaj
      aTmp[ 20 ]     := (dbfEmp)->lCodArt
      aTmp[ 34 ]     := (dbfEmp)->lEntCon
      aTmp[ 35 ]     := (dbfEmp)->lModDes
      aTmp[ 36 ]     := (dbfEmp)->lModIva
      aTmp[ 37 ]     := (dbfEmp)->lTipMov
      aTmp[ 113 ]     := (dbfEmp)->lGetCob
      aTmp[ 115 ]     := (dbfEmp)->lSelFam
      aTmp[ 117 ]     := (dbfEmp)->lModImp
      aTmp[ 38 ]     := (dbfEmp)->lActCos
      aTmp[ 45 ]     := (dbfEmp)->lNumObr
      aTmp[ 46 ]     := (dbfEmp)->cNumObr
      aTmp[ 39 ]     := (dbfEmp)->lNumPed
      aTmp[ 40 ]     := (dbfEmp)->cNumPed
      aTmp[ 41 ]     := (dbfEmp)->lNumAlb
      aTmp[ 42 ]     := (dbfEmp)->cNumAlb
      aTmp[ 43  ]     := (dbfEmp)->lSuaLb
      aTmp[ 44  ]     := (dbfEmp)->cSuaLb
      aTmp[ 49 ]     := (dbfEmp)->nDgtUnd
      aTmp[ 50 ]     := (dbfEmp)->nDecUnd
      aTmp[ 138 ]     := (dbfEmp)->nDgtEsc
      aTmp[ 139 ]     := (dbfEmp)->nDecEsc
      aTmp[ 51 ]     := (dbfEmp)->cRutCnt
      aTmp[ 104 ]     := (dbfEmp)->cCtaCli
      aTmp[ 105 ]     := (dbfEmp)->cCtaPrv
      aTmp[ 106 ]     := (dbfEmp)->cCtaVta
      aTmp[ 111 ]     := (dbfEmp)->cCtaCob
      aTmp[ 112 ]     := (dbfEmp)->cCtaSin
      aTmp[ 149 ]     := (dbfEmp)->cCtaAnt
      aTmp[ 114 ]     := (dbfEmp)->dFecVer
      aTmp[ 115 ]     := (dbfEmp)->lSelFam
      aTmp[ 117 ]     := (dbfEmp)->lModImp
      aTmp[ 118 ]     := (dbfEmp)->nNumLiq
      aTmp[ 119 ]     := (dbfEmp)->nNumCar
      aTmp[ 21 ]     := (dbfEmp)->cEnvUsr
      aTmp[ 22 ]     := (dbfEmp)->nTipCon
      aTmp[ 23 ]     := (dbfEmp)->cRutCon
      aTmp[ 24 ]     := (dbfEmp)->cNomCon
      aTmp[ 25 ]     := (dbfEmp)->cUsrCon
      aTmp[ 26 ]     := (dbfEmp)->cPswCon
      aTmp[ 27 ]     := (dbfEmp)->cSitFtp
      aTmp[ 28 ]     := (dbfEmp)->cUsrFtp
      aTmp[ 29 ]     := (dbfEmp)->cPswFtp
      aTmp[ 47 ]     := (dbfEmp)->cDefAlm
      aTmp[ 48 ]     := (dbfEmp)->cDefFpg
      aTmp[ 107 ]     := (dbfEmp)->cDefCli
      aTmp[ 108 ]     := (dbfEmp)->cDefSer
      aTmp[ 109 ]     := (dbfEmp)->cDefCaj
      aTmp[ 110 ]     := (dbfEmp)->cDefCjr
      aTmp[ 140 ]     := (dbfEmp)->lGetLot
      aTmp[ 141 ]     := (dbfEmp)->lBusImp
      aTmp[ 142 ]     := (dbfEmp)->lShwCos
      aTmp[ 143 ]     := (dbfEmp)->lGetAge
      aTmp[ 145 ]     := (dbfEmp)->lGetUsr
      aTmp[ 144 ]     := (dbfEmp)->lImpExa
      aTmp[ 152 ]     := (dbfEmp)->cPrnPdf
      aTmp[ 121 ]     := (dbfEmp)->cDefIva
      aTmp[ 148 ]     := (dbfEmp)->nDiaVal
      aTmp[ 168 ]  := (dbfEmp)->cCtaCeeRpt
      aTmp[ 169 ]  := (dbfEmp)->cCtaCeeSpt
      aTmp[ 311 ]  := (dbfEmp)->cCeeRptCom
      aTmp[ 312 ]  := (dbfEmp)->cCeeSptCom





      if ( dbfDlg )->( dbSeek( cCodEmp ) )
         while ( ( dbfDlg )->cCodEmp == cCodEmp .AND. !( dbfDlg )->( eof() ) )
            dbPass( dbfDlg, tmpDlg, .T. )
            ( dbfDlg )->( dbSkip() )
         end
      end

      ( tmpDlg )->( dbGoTop() )

   end

   ( dbfEmp )->( dbGoTo( nRec ) )

RETURN ( .T. )



FUNCTION ChkAllEmp( lForced )

   local n
   local dbfEmp
   local nHandle
   local aEmp        := {}

   If( lForced == nil, lForced := .F., ) ;

   if ( !File( FullCurDir() + "ChkEmp.nil" ) .OR. fSize( FullCurDir() + "ChkEmp.nil" ) == 0 .OR. lForced )

      aEmp           := aFullEmpresas()








      if lForced .OR.  ApoloMsgNoYes(    "El sistema ha detectado una nueva versión, es"       + Chr(13)+Chr(10) +  "conveniente que inicie el proceso de actualización"  + Chr(13)+Chr(10) +  "de sus datos, para ello deben de salir todos los"    + Chr(13)+Chr(10) +  "usuarios de la aplicación."                          + Chr(13)+Chr(10) +  + Chr(13)+Chr(10) +  "¿Desea actualizar todos sus datos?", "Seleccione una opción" )


         if !empty( oWnd() )
            oWnd():Disable()
         end

         for n := 1 to len( aEmp )

            setEmpresa( aEmp[ n, 1 ] )

            checkEmpresaTablesExistences()

            lActualiza( aEmp[ n, 1 ], oWndBrw, .T., aEmp[ n, 2 ] )

         next

         if !empty( oWnd() )
            oWnd():Enable()
         end

      end

      if !File( FullCurDir() + "ChkEmp.nil" )

         if ( nHandle := fCreate( FullCurDir() + "ChkEmp.nil", 0 ) ) == -1
            MsgStop( "No puedo crear el fichero, " + FullCurDir() + "ChkEmp.nil", "Error " + cValToChar( fError() ) )
         else
            fClose( nHandle )
         end

      end

      nHandle        := fOpen( FullCurDir() + "ChkEmp.nil", 2 )

      if fError() <> 0
         msgStop( "No puedo abrir el fichero, " + FullCurDir() + "ChkEmp.nil", "Error " + cValToChar( fError() ) )
      else
         fWrite( nHandle, Dtos( Date() ) )
      end

      fClose( nHandle )

   end

RETURN nil



STATIC FUNCTION EditConta( nAt, aTmp )

   local oDlg
   local oGetEmp
   local cGetEmp  := aItmEmp[ nAt, 2 ]
   local oSayEmp
   local cSayEmp
   local oGetPrj
   local cGetPrj  := aItmEmp[ nAt, 3 ]
   local oSayPrj
   local cSayPrj

   oDlg = TDialog():New(,,,,, "EDTEMPCNT",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oGetEmp := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetEmp, cGetEmp:= u ) }, oDlg,, "@!",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      oSayEmp := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSayEmp, cSayEmp:= u ) }, oDlg,, "@!",,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      oGetPrj := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cGetPrj, cGetPrj:= u ) }, oDlg,, "@R ###.######",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oSayPrj := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cSayPrj, cSayPrj:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )



      if lAplicacionContaplus()

         oGetEmp:bValid    := {|| ChkEmpresaContaplus( AllTrim( aTmp[ 51 ] ), cGetEmp, oSayEmp ), .T. }
         oGetEmp:bHelp     := {|| BrwEmpresaContaplus( AllTrim( aTmp[ 51 ] ), oGetEmp ) }
         oGetEmp:cBmp      := "Lupa"

         oGetPrj:bValid    := {|| ChkProyecto( cGetPrj, oSayPrj, AllTrim( aTmp[ 51 ] ), cGetEmp ), .T. }
         oGetPrj:bHelp     := {|| BrwProyecto( oGetPrj, oSayPrj, AllTrim( aTmp[ 51 ] ), cGetEmp ) }
         oGetPrj:cBmp      := "Lupa"

         oDlg:bStart       := {|| oGetEmp:lValid(), oGetPrj:lValid() }

      end



      oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      aItmEmp[ nAt, 2 ]   := cGetEmp
      aItmEmp[ nAt, 3 ]   := cGetPrj
   end

RETURN ( nil )



STATIC FUNCTION SaveEditConfig( aTmp, oSay, oBrw, oDlg, nMode )

   CursorWait()

   oDlg:Disable()





   oNombreSerie:lValid()





   CmbSerieSave( oCmbSerie )





   aTmp[ 298 ]  := oCmbContabilidad:nAt

   aTmp[ 52 ]    := aItmEmp[ 1, 2 ]
   aTmp[ 53 ]    := aItmEmp[ 2, 2 ]
   aTmp[ 54 ]    := aItmEmp[ 3, 2 ]
   aTmp[ 55 ]    := aItmEmp[ 4, 2 ]
   aTmp[ 56 ]    := aItmEmp[ 5, 2 ]
   aTmp[ 57 ]    := aItmEmp[ 6, 2 ]
   aTmp[ 58 ]    := aItmEmp[ 7, 2 ]
   aTmp[ 59 ]    := aItmEmp[ 8, 2 ]
   aTmp[ 60 ]    := aItmEmp[ 9, 2 ]
   aTmp[ 61 ]    := aItmEmp[10, 2 ]
   aTmp[ 62 ]    := aItmEmp[11, 2 ]
   aTmp[ 63 ]    := aItmEmp[12, 2 ]
   aTmp[ 64 ]    := aItmEmp[13, 2 ]
   aTmp[ 65 ]    := aItmEmp[14, 2 ]
   aTmp[ 66 ]    := aItmEmp[15, 2 ]
   aTmp[ 67 ]    := aItmEmp[16, 2 ]
   aTmp[ 68 ]    := aItmEmp[17, 2 ]
   aTmp[ 69 ]    := aItmEmp[18, 2 ]
   aTmp[ 70 ]    := aItmEmp[19, 2 ]
   aTmp[ 71 ]    := aItmEmp[20, 2 ]
   aTmp[ 72 ]    := aItmEmp[21, 2 ]
   aTmp[ 73 ]    := aItmEmp[22, 2 ]
   aTmp[ 74 ]    := aItmEmp[23, 2 ]
   aTmp[ 75 ]    := aItmEmp[24, 2 ]
   aTmp[ 76 ]    := aItmEmp[25, 2 ]
   aTmp[ 77 ]    := aItmEmp[26, 2 ]

   aTmp[ 78 ]    := aItmEmp[ 1, 3 ]
   aTmp[ 79 ]    := aItmEmp[ 2, 3 ]
   aTmp[ 80 ]    := aItmEmp[ 3, 3 ]
   aTmp[ 81 ]    := aItmEmp[ 4, 3 ]
   aTmp[ 82 ]    := aItmEmp[ 5, 3 ]
   aTmp[ 83 ]    := aItmEmp[ 6, 3 ]
   aTmp[ 84 ]    := aItmEmp[ 7, 3 ]
   aTmp[ 85 ]    := aItmEmp[ 8, 3 ]
   aTmp[ 86 ]    := aItmEmp[ 9, 3 ]
   aTmp[ 87 ]    := aItmEmp[10, 3 ]
   aTmp[ 88 ]    := aItmEmp[11, 3 ]
   aTmp[ 89 ]    := aItmEmp[12, 3 ]
   aTmp[ 90 ]    := aItmEmp[13, 3 ]
   aTmp[ 91 ]    := aItmEmp[14, 3 ]
   aTmp[ 92 ]    := aItmEmp[15, 3 ]
   aTmp[ 93 ]    := aItmEmp[16, 3 ]
   aTmp[ 94 ]    := aItmEmp[17, 3 ]
   aTmp[ 95 ]    := aItmEmp[18, 3 ]
   aTmp[ 96 ]    := aItmEmp[19, 3 ]
   aTmp[ 97 ]    := aItmEmp[20, 3 ]
   aTmp[ 98 ]    := aItmEmp[21, 3 ]
   aTmp[ 99 ]    := aItmEmp[22, 3 ]
   aTmp[ 100 ]    := aItmEmp[23, 3 ]
   aTmp[ 101 ]    := aItmEmp[24, 3 ]
   aTmp[ 102 ]    := aItmEmp[25, 3 ]
   aTmp[ 103 ]    := aItmEmp[26, 3 ]

   aTmp[ 146  ]    := ( nIvaReq == 1 )

   aTmp[ 130 ]    := oSay[ 36 ]:nAt
   aTmp[ 131 ]    := oSay[ 37 ]:nAt
   aTmp[ 132 ]    := oSay[ 38 ]:nAt
   aTmp[ 133 ]    := oSay[ 39 ]:nAt
   aTmp[ 134 ]    := oSay[ 40 ]:nAt
   aTmp[ 135 ]    := oSay[ 41 ]:nAt

   aTmp[ 207 ]     := oSay[ 42 ]:nAt

   aTmp[ 211 ]  := cCadenaToTiempo( cTiempoPed )

   if !empty( oGetPrecioVenta )
      aTmp[ 232 ]        := oGetPrecioVenta:getTarifa()
   else
      aTmp[ 232 ]        := 1
   endif

   if !empty( oGetPrecioWebVenta )
      aTmp[ 233 ]     := oGetPrecioWebVenta:getTarifa()
   else
      aTmp[ 233 ]     := 1
   endif

   if !empty( oGetPrecioProducto )
      aTmp[ 203 ]       := oGetPrecioProducto:getTarifa()
   else
      aTmp[ 203 ]       := 1
   endif

   if !empty( oGetPrecioCombinado )
      aTmp[ 204 ]       := oGetPrecioCombinado:getTarifa()
   else
      aTmp[ 204 ]       := 1
   endif



   ( tmpCount )->( dbGoTop() )
   while !( tmpCount )->( eof() )

      if dbSeekInOrd( ( tmpCount )->Doc, "Doc", dbfCount )
         dbPass( tmpCount, dbfCount )
      end

      ( tmpCount )->( dbSkip() )

   end

   ConfiguracionesEmpresaModel():setValue( "mail_notificaciones",          alltrim( cMailNotificaciones ) )
   ConfiguracionesEmpresaModel():setValue( "informacion_inmediata",        lInformacionInmediata )
   ConfiguracionesEmpresaModel():setValue( "sincronizar_vencimientos",     lSincronizarVencimientos )
   ConfiguracionesEmpresaModel():setValue( "envio_recepcion",              lEnvioRecepcion )

   ConfiguracionesEmpresaModel():setValue( "pda_ruta",                     alltrim( pdaRuta ) )

   ConfiguracionesEmpresaModel():setValue( "pda_ftp",                      alltrim( pdaFtp ) )
   ConfiguracionesEmpresaModel():setValue( "pda_user",                     alltrim( pdaUsuario ) )
   ConfiguracionesEmpresaModel():setValue( "pda_password",                 alltrim( pdaPassword ) )

   ConfiguracionesEmpresaModel():setValue( "cuenta_descuento_especial",    alltrim( cCtaDescuentoEspecial ) )

   ConfiguracionesEmpresaModel():setValue( "pda_pasivo",                   pdaPasivo )

   ConfiguracionesEmpresaModel():setValue( "pda_recoger_ventas",           pdaRecogerVentas )

   ConfiguracionesEmpresaModel():setValue( "lenSubCta",                    nLenSubcta )

   ConfiguracionesEmpresaModel():setValue( "nDecimalesRE",                 nDecimalesRecargo )

   ConfiguracionesEmpresaModel():setValue( "lBrowseSql",                   lBrowseSql )
   ConfiguracionesEmpresaModel():setValue( "lBusConte",                    lBusConte )
   ConfiguracionesEmpresaModel():setValue( "lPasPrepare",                  lPasPrepare )

   ConfiguracionesEmpresaModel():setValue( "lDtoLinAfterTotal",            lDtoLinealDespuesTotal )

   ConfiguracionesEmpresaModel():setValue( "lDesFacExt",                   lDesFacExt )

   ConfiguracionesEmpresaModel():setValue( "Direccion_Ftp_Img",            cDireccionFtpImagenes )
   ConfiguracionesEmpresaModel():setValue( "Usuario_Ftp_Img",              cUsuarioFtpImagenes )
   ConfiguracionesEmpresaModel():setValue( "Clave_Ftp_Img",                cClaveFtpImagenes )

   ConfiguracionesEmpresaModel():setValue( "lCalBultos",                   lCalBultos )



   winGather( aTmp, , dbfEmp, oBrw, nMode )

   oDlg:Enable()
   oDlg:End( 1 )

   CursorWE()

RETURN nil



STATIC FUNCTION LoaItmEmp( aTmp )

   aItmEmp       := {}

   aAdd( aItmEmp, { "A", aTmp[ 52 ], aTmp[ 78 ] } )
   aAdd( aItmEmp, { "B", aTmp[ 53 ], aTmp[ 79 ] } )
   aAdd( aItmEmp, { "C", aTmp[ 54 ], aTmp[ 80 ] } )
   aAdd( aItmEmp, { "D", aTmp[ 55 ], aTmp[ 81 ] } )
   aAdd( aItmEmp, { "E", aTmp[ 56 ], aTmp[ 82 ] } )
   aAdd( aItmEmp, { "F", aTmp[ 57 ], aTmp[ 83 ] } )
   aAdd( aItmEmp, { "G", aTmp[ 58 ], aTmp[ 84 ] } )
   aAdd( aItmEmp, { "H", aTmp[ 59 ], aTmp[ 85 ] } )
   aAdd( aItmEmp, { "I", aTmp[ 60 ], aTmp[ 86 ] } )
   aAdd( aItmEmp, { "J", aTmp[ 61 ], aTmp[ 87 ] } )
   aAdd( aItmEmp, { "K", aTmp[ 62 ], aTmp[ 88 ] } )
   aAdd( aItmEmp, { "L", aTmp[ 63 ], aTmp[ 89 ] } )
   aAdd( aItmEmp, { "M", aTmp[ 64 ], aTmp[ 90 ] } )
   aAdd( aItmEmp, { "N", aTmp[ 65 ], aTmp[ 91 ] } )
   aAdd( aItmEmp, { "O", aTmp[ 66 ], aTmp[ 92 ] } )
   aAdd( aItmEmp, { "P", aTmp[ 67 ], aTmp[ 93 ] } )
   aAdd( aItmEmp, { "Q", aTmp[ 68 ], aTmp[ 94 ] } )
   aAdd( aItmEmp, { "R", aTmp[ 69 ], aTmp[ 95 ] } )
   aAdd( aItmEmp, { "S", aTmp[ 70 ], aTmp[ 96 ] } )
   aAdd( aItmEmp, { "T", aTmp[ 71 ], aTmp[ 97 ] } )
   aAdd( aItmEmp, { "U", aTmp[ 72 ], aTmp[ 98 ] } )
   aAdd( aItmEmp, { "V", aTmp[ 73 ], aTmp[ 99 ] } )
   aAdd( aItmEmp, { "W", aTmp[ 74 ], aTmp[ 100 ] } )
   aAdd( aItmEmp, { "X", aTmp[ 75 ], aTmp[ 101 ] } )
   aAdd( aItmEmp, { "Y", aTmp[ 76 ], aTmp[ 102 ] } )
   aAdd( aItmEmp, { "Z", aTmp[ 77 ], aTmp[ 103 ] } )

   nIvaReq     := if( aTmp[ 146 ], 1, 2 )

RETURN nil



FUNCTION PosEmpresa( cCodEmp, dbfEmp, oWndBrw )

   local nRec           := ( dbfEmp )->( Recno() )
   local nOrd           := ( dbfEmp )->( OrdSetFocus( "CodEmp" ) )

   if !( dbfEmp )->( dbSeek( cCodEmp ) )
      ( dbfEmp )->( dbGoTo( nRec ) )
   end

   ( dbfEmp )->( OrdSetFocus( nOrd ) )

   oWndBrw:Refresh()

RETURN nil



_HB_CLASS AImportacion ; function AImportacion ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "AImportacion", iif( .F., { }, { @HBObject() } ), @AImportacion() ) ) ;

   _HB_MEMBER { lArticulos } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lArticulos"}, .F. )
   _HB_MEMBER { lClientes } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lClientes"}, .F. )
   _HB_MEMBER { lProveedor } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lProveedor"}, .F. )
   _HB_MEMBER { lAgente } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAgente"}, .F. )
   _HB_MEMBER { lRuta } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRuta"}, .F. )
   _HB_MEMBER { lPedPrv } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lPedPrv"}, .F. )
   _HB_MEMBER { lAlbPrv } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAlbPrv"}, .F. )
   _HB_MEMBER { lPreCli } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lPreCli"}, .F. )
   _HB_MEMBER { lSatCli } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSatCli"}, .F. )
   _HB_MEMBER { lPedCli } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lPedCli"}, .F. )
   _HB_MEMBER { lAlbCli } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAlbCli"}, .F. )
   _HB_MEMBER { lAlmacen } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAlmacen"}, .F. )
   _HB_MEMBER { lDocument } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lDocument"}, .F. )
   _HB_MEMBER { lStockIni } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lStockIni"}, .F. )
   _HB_MEMBER { lOferta } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lOferta"}, .F. )
   _HB_MEMBER { lPromocion } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lPromocion"}, .F. )
   _HB_MEMBER { lFPago } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFPago"}, .F. )
   _HB_MEMBER { lVale } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVale"}, .F. )
   _HB_MEMBER { lAnticipo } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAnticipo"}, .F. )
   _HB_MEMBER { lProduccion } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lProduccion"}, .F. )
   _HB_MEMBER { lBancos } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lBancos"}, .F. )
   _HB_MEMBER { lExpedientes } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExpedientes"}, .F. )
   _HB_MEMBER { lFidelizacion } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFidelizacion"}, .F. )
   _HB_MEMBER { nCosto } ; oClass:AddMultiData(, 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCosto"}, .F. )
   _HB_MEMBER { lScript } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lScript"}, .F. )
   _HB_MEMBER { lEntidades } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lEntidades"}, .F. )

   _HB_MEMBER False(); oClass:AddMethod( "False", @AImportacion_False(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS AImportacion ;



static FUNCTION AImportacion_False( ) ; local Self AS CLASS AImportacion := QSelf() AS CLASS AImportacion

   ::lArticulos      := .F.
   ::lClientes       := .F.
   ::lProveedor      := .F.
   ::lAgente         := .F.
   ::lRuta           := .F.
   ::lPedPrv         := .F.
   ::lAlbPrv         := .F.
   ::lPreCli         := .F.
   ::lPedCli         := .F.
   ::lAlbCli         := .F.
   ::lAlmacen        := .F.
   ::lStockIni       := .F.
   ::lOferta         := .F.
   ::lPromocion      := .F.
   ::lFPago          := .F.
   ::lVale           := .F.
   ::lAnticipo       := .F.
   ::lDocument       := .F.
   ::lProduccion     := .F.
   ::lBancos         := .F.
   ::lExpedientes    := .F.
   ::lFidelizacion   := .F.
   ::nCosto          := 1
   ::lScript         := .F.
   ::lEntidades      := .F.

RETURN ( Self )



FUNCTION cPrinterPDF() ; RETURN ( if( !empty( aEmp()[ 152 ] ), Rtrim( aEmp()[ 152 ] ), "" ) )



FUNCTION nUltimaRecpcionInformacion( nRecepcion )

   if !empty( nRecepcion )
      SetFieldEmpresa( nRecepcion, "nRecInf" )
   end

RETURN ( aEmp()[ 151 ] )



FUNCTION nUltimoEnvioInformacion( nEnvio )

   if !empty( nEnvio )
      SetFieldEmpresa( nEnvio, "nSndInf" )
   end

RETURN ( aEmp()[ 150 ] )



FUNCTION BrwDelegacion( oGet, dbfDelega, oGetNombre, cCodigoEmpresa )

    local oDlg
    local oBrw
   local nRec
   local nOrd              := GetBrwOpt( "BrwDelegacion" )
   local oGet1
   local cGet1
    local oCbxOrd
   local cCbxOrd
   local aCbxOrd           := { "Código" }

   If( cCodigoEmpresa == nil, cCodigoEmpresa := cCodEmp(), ) ;

   nOrd                    := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd                 := aCbxOrd[ nOrd ]

   nRec                    := ( dbfDelega )->( Recno() )
   nOrd                    := ( dbfDelega )->( OrdSetFocus( nOrd ) )

   ( dbfDelega )->( dbSetFilter( {|| Field->cCodEmp == cCodigoEmpresa }, "cCodEmp == " + cCodigoEmpresa ) )
   ( dbfDelega )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Delegación", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||       ( OrdClearScope( oBrw, dbfDelega ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfDelega ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfDelega )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfDelega
      oBrw:nMarqueeStyle   := 6
      oBrw:cName           := "Browse.Delegacion.Empresa"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodDlg"
         :bEditValue       := {|| ( dbfDelega )->cCodDlg }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomDlg"
         :bEditValue       := {|| ( dbfDelega )->cNomDlg }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||        .F.},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||        .F.},,, .F. )

      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

      oDlg:bStart    := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   DestroyFastFilter( dbfDelega )

   if oDlg:nResult == 1

      oGet:cText( ( dbfDelega )->cCodDlg )

      if isObject( oGetNombre )
         oGetNombre:cText( ( dbfDelega )->cNomDlg )
      end

   end

   ( dbfDelega )->( dbGoTo( nRec ) )
   ( dbfDelega )->( OrdSetFocus( nOrd ) )

    oGet:SetFocus()

RETURN ( oDlg:nResult == 1 )



FUNCTION cDelegacion( oGet, dbfDelega, oGetNombre, cCodigoEmpresa )

   local lValid            := .F.
   local cCodDlg           := oGet:varGet()

   If( cCodigoEmpresa == nil, cCodigoEmpresa := cCodEmp(), ) ;

   if empty( cCodDlg )

      if !empty( oGetNombre )
            oGetNombre:cText( "" )
      end

      RETURN .T.

   end

   if ( dbfDelega )->( dbSeek( cCodigoEmpresa + cCodDlg ) )

      oGet:cText( ( dbfDelega )->cCodDlg )

      if !empty( oGetNombre )
         oGetNombre:cText( ( dbfDelega )->cNomDlg )
      end

      lValid      := .T.

   else

      msgStop( "Delegación no encontrada" )

   end

RETURN lValid



FUNCTION AppEmpresa()

   if OpenFiles( .F. )

      WinAppRec( nil, bEdit, dbfEmp )

      CloseFiles()

   end

RETURN .T.



FUNCTION NextEmpresa()

   if empty( oWnd() )
      RETURN .F.
   end





   if nAnd( Auth():Level( "01003" ), 1 ) <> 0
      msgStop( "Acceso no permitido." )
      RETURN .F.
   end

   CursorWait()





   if oWnd() <> nil
      oWnd():Disable()
      oWnd():CloseAll()
   end

   if OpenFiles( .F. )

      if ( dbfEmp )->( dbSeek( cCodigoEmpresaEnUso() ) ) .AND. ( dbfEmp )->( OrdKeyNo() ) <> ( dbfEmp )->( OrdKeyCount() )

         ( dbfEmp )->( dbSkip() )

         if ( dbfEmp )->lGrupo
            ( dbfEmp )->( dbSkip() )
         end

         setEmpresa( ( dbfEmp )->CodEmp )

         ApplicationLoad()

         chkTurno()

         msgInfo( "Nueva empresa activa : " + ( dbfEmp )->CodEmp + " - " + Rtrim( ( dbfEmp )->cNombre ), "Cambio de empresa" )

      end

      CloseFiles()

   end

   oWnd():Enable()

   CursorWE()

RETURN .T.



FUNCTION PriorEmpresa()

   if empty( oWnd() )
      RETURN .F.
   end





   if nAnd( Auth():Level( "01003" ), 1 ) <> 0
      msgStop( "Acceso no permitido." )
      RETURN .F.
   end

   CursorWait()





   if oWnd() <> nil
      oWnd():Disable()
      oWnd():CloseAll()
   end

   if OpenFiles( .F. )

      if ( dbfEmp )->( dbSeek( cCodigoEmpresaEnUso() ) ) .AND. ( dbfEmp )->( OrdKeyNo() ) <> 1

         ( dbfEmp )->( dbSkip( -1 ) )

         if ( dbfEmp )->lGrupo
            ( dbfEmp )->( dbSkip( -1 ) )
         end

         setEmpresa( ( dbfEmp )->CodEmp )

         ApplicationLoad()

         chkTurno()

         msgInfo( "Nueva empresa activa : " + ( dbfEmp )->CodEmp + " - " + Rtrim( ( dbfEmp )->cNombre ), "Cambio de empresa" )

      end

      CloseFiles()

   end

   oWnd():Enable()

   CursorWE()

RETURN .T.






FUNCTION TstEmpresa( cPatDat )

   local oBlock
   local oError
   local dbfEmp
   local dbfDlg
   local cCodEmp
   local lChangeCode
   local lChangeStruct

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !lExistTable( cPatDat() + "Empresa.Dbf" )
         dbCreate( cPatDat() + "Empresa.Dbf", aSqlStruct( aItmEmp() ), cDriver() )
      end

      if !lExistTable( cPatDat() + "Delega.Dbf" )
         dbCreate( cPatDat() + "Delega.Dbf", aSqlStruct( aItmDlg() ), cDriver() )
      end

      if !lExistIndex( cPatDat() + "Empresa.Cdx" ) .OR. !lExistIndex( cPatDat() + "Delega.Cdx" )
         rxEmpresa( cPatDat() )
      end





      dbUseArea( .T., cDriver(), ( cPatDat() + "Empresa.Dbf" ), cCheckArea( "Empresa", @dbfEmp ), .F. )

      if !( dbfEmp )->( netErr() )

         lChangeStruct  := lChangeStruct( dbfEmp, aItmEmp() )

         ( dbfEmp )->( dbCloseArea() )

         if lChangeStruct
            changeStructEmpresa()
         end

      end





      dbUseArea( .T., cDriver(), ( cPatDat() + "Delega.Dbf" ), cCheckArea( "Delega", @dbfDlg ), .F. )

      if !( dbfDlg )->( netErr() )

         lChangeStruct  := lChangeStruct( dbfDlg, aItmDlg() )

         ( dbfDlg )->( dbCloseArea() )

         if lChangeStruct
            changeStructDelegacion()
         end

      end

      CursorWait()





      dbUseArea( .T.,  cDriver(), ( cPatDat() + "Empresa.Dbf" ), cCheckArea( "EMPRESA", @dbfEmp ), .F. )

      if !( dbfEmp )->( netErr() )

         ( dbfEmp )->( dbgotop() )
         while !( dbfEmp )->( eof() )

            cCodEmp     := alltrim( ( dbfEmp )->CodEmp )

            if len( cCodEmp ) < 4

               if IsDirectory( FullCurDir() + "Emp" + cCodEmp )
                  if fRename( FullCurDir() + "Emp" + cCodEmp, FullCurDir() + "Emp" + RJust( cCodEmp, "0", 4 ) ) == -1
                     msgStop( "No he podido renombrar el directorio " + FullCurDir() + "Emp" + cCodEmp )
                  end
               end

            end

            ( dbfEmp )->( dbskip() )

         end

         ( dbfEmp )->( dbclosearea() )

      end





      EmpresasModel():UpdateEmpresaCodigoEmpresa()

      CursorWE()

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de empresa" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN ( .T. )



STATIC FUNCTION changeStructEmpresa()

   TDataCenter():deleteTableNameFromDataDictionary( "Empresa" )

   lCdx( .T. )
   lAIS( .F. )

   mkEmpresa( cPatEmpTmp(), cLocalDriver() )





   appDbf( cPatDat(), cPatEmpTmp(), "Empresa", aItmEmp() )

   fEraseTable( cPatDat() + "Empresa.Dbf" )

   fRenameTable( cPatEmpTmp() + "Empresa.Dbf", cPatDat() + "Empresa.Dbf" )
   fRenameTable( cPatEmpTmp() + "Empresa.Cdx", cPatDat() + "Empresa.Cdx" )

   lCdx( .F. )
   lAIS( .T. )

   TDataCenter():AddTableName( "Empresa" )

RETURN ( .T. )






STATIC FUNCTION changeStructDelegacion()

   TDataCenter():deleteTableNameFromDataDictionary( "Delega" )

   lCdx( .T. )
   lAIS( .F. )

   mkEmpresa( cPatEmpTmp(), cLocalDriver() )

   appDbf( cPatDat(), cPatEmpTmp(), "Delega", aItmDlg() )

   fEraseTable( cPatDat() + "Delega.Dbf" )

   fRenameTable( cPatEmpTmp() + "Delega.Dbf", cPatDat() + "Delega.Dbf" )
   fRenameTable( cPatEmpTmp() + "Delega.Cdx", cPatDat() + "Delega.Cdx" )

   lCdx( .F. )
   lAIS( .T. )

   TDataCenter():AddTableName( "Delega" )

RETURN ( .T. )




FUNCTION aItmEmp()

   local aDbf  := {}

   aAdd( aDbf, {"CodEmp",     "C",  4, 0, "Código de la empresa",            "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"cNombre",    "C", 45, 0, "Nombre de la empresa",            "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CNIF",       "C", 15, 0, "Nif de la empresa",               "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CADMINIS",   "C", 35, 0, "Administrador",                   "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CDOMICILIO", "C", 35, 0, "Domicilio",                       "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CPOBLACION", "C", 35, 0, "Población",                       "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CPROVINCIA", "C", 30, 0, "Provincia",                       "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CCODPOS",    "C",  5, 0, "Código postal",                   "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CTLF",       "C", 15, 0, "Teléfono",                        "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CFAX",       "C", 15, 0, "Fax",                             "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"EMAIL",      "C", 50, 0, "E-mail",                          "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"WEB",        "C",120, 0, "Página web",                      "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"LACTIVA",    "L",  1, 0, "Activa",                          "",                   "", "aEmp()", .F. } )
   aAdd( aDbf, {"NCODCLI",    "N",  2, 0, "Número de digitos del código de cliente", "",           "", "aEmp()", 0 } )
   aAdd( aDbf, {"NCODPRV",    "N",  2, 0, "Número de digitos del código de proveedor", "",         "", "aEmp()", 0 } )
   aAdd( aDbf, {"CSUFDOC",    "C",  2, 0, "Sufijo para documentos",          "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CDIVEMP",    "C",  3, 0, "Divisa de la empresa",            "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CDIVCHG",    "C",  3, 0, "Divisa para cambios",             "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"NTURTIK",    "N",  4, 0, "Contador para turnos",            "",                   "", "aEmp()", 0 } )
   aAdd( aDbf, {"LCODART",    "L",  1, 0, "Permitir solo artículos codificados", "",               "", "aEmp()", .F. } )
   aAdd( aDbf, {"CENVUSR",    "C", 20, 0, "Tipo de envio cliente o servidor","",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"NTIPCON",    "N",  1, 0, "Tipo de conexión",                "",                   "", "aEmp()", 0 } )
   aAdd( aDbf, {"CRUTCON",    "C",250, 0, "Ruta de la conexión",             "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CNOMCON",    "C", 50, 0, "Nombre de la conexión",           "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CUSRCON",    "C", 50, 0, "Nombre de usuario de la conexión","",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CPSWCON",    "C", 20, 0, "Password para conexión",          "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CSITFTP",    "C",100, 0, "Nombre del servidor ftp",         "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CUSRFTP",    "C", 50, 0, "Nombre de usuario para ftp",      "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CPSWFTP",    "C", 20, 0, "Password para usuario",           "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMTUR",    "N",  9, 0, "Número del turno",                "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMREM",    "N",  9, 0, "Número de la remesa",             "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LUSECAJ",    "L",  1, 0, "Usar cajas",                      "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LCALCAJ",    "L",  1, 0, "Cajas en calculo",                "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LENTCON",    "L",  1, 0, "Entradas continuas",              "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LMODDES",    "L",  1, 0, "Modificar descripciones",         "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LMODIVA",    "L",  1, 0, "Modificar tipo de impuestos",     "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LTIPMOV",    "L",  1, 0, "Permitir multiples tipos de venta","",                  "", "aEmp()", nil } )
   aAdd( aDbf, {"LACTCOS",    "L",  1, 0, "Actualizar precios de costo",     "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LNUMPED" ,   "L",  1, 0, "Incluir comentarios de su pedido", "",                  "", "aEmp()", nil } )
   aAdd( aDbf, {"CNUMPED" ,   "C", 50, 0, "Texto a incluir comentarios de su pedido", "",          "", "aEmp()", nil } )
   aAdd( aDbf, {"LNUMALB",    "L",  1, 0, "Incluir comentarios de nuestro albaran", "",            "", "aEmp()", nil } )
   aAdd( aDbf, {"CNUMALB",    "C", 50, 0, "Texto a incluir comentarios de nuestro albaran", "",    "", "aEmp()", nil } )
   aAdd( aDbf, {"LSUALB" ,    "L",  1, 0, "Incluir comentarios de su albaran", "",                 "", "aEmp()", nil } )
   aAdd( aDbf, {"CSUALB" ,    "C", 50, 0, "Texto a incluir comentarios de su albaran", "",         "", "aEmp()", nil } )
   aAdd( aDbf, {"LNUMOBR",    "L",  1, 0, "Incluir comentarios de la dirección",  "",              "", "aEmp()", nil } )
   aAdd( aDbf, {"CNUMOBR",    "C", 50, 0, "Texto a incluir comentarios de la dirección", "",       "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFALM",    "C", 16, 0, "Almacen por defecto",             "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFFPG",    "C",  2, 0, "Forma de pago por defecto",       "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"NDGTUND",    "N",  2, 0, "Número de digitos para las unidades", "",               "", "aEmp()", nil } )
   aAdd( aDbf, {"NDECUND",    "N",  1, 0, "Número de decimales para las unidades", "",             "", "aEmp()", nil } )
   aAdd( aDbf, {"CRUTCNT",    "C",100, 0, "Ruta de contabilidad",            "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpA",   "C",  5, 0, "Código de la empresa en contaplus para la serie A", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpB",   "C",  5, 0, "Código de la empresa en contaplus para la serie B", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpC",   "C",  5, 0, "Código de la empresa en contaplus para la serie C", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpD",   "C",  5, 0, "Código de la empresa en contaplus para la serie D", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpE",   "C",  5, 0, "Código de la empresa en contaplus para la serie E", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpF",   "C",  5, 0, "Código de la empresa en contaplus para la serie F", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpG",   "C",  5, 0, "Código de la empresa en contaplus para la serie G", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpH",   "C",  5, 0, "Código de la empresa en contaplus para la serie H", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpI",   "C",  5, 0, "Código de la empresa en contaplus para la serie I", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpJ",   "C",  5, 0, "Código de la empresa en contaplus para la serie J", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpK",   "C",  5, 0, "Código de la empresa en contaplus para la serie K", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpL",   "C",  5, 0, "Código de la empresa en contaplus para la serie L", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpM",   "C",  5, 0, "Código de la empresa en contaplus para la serie M", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpN",   "C",  5, 0, "Código de la empresa en contaplus para la serie N", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpO",   "C",  5, 0, "Código de la empresa en contaplus para la serie O", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpP",   "C",  5, 0, "Código de la empresa en contaplus para la serie P", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpQ",   "C",  5, 0, "Código de la empresa en contaplus para la serie Q", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpR",   "C",  5, 0, "Código de la empresa en contaplus para la serie R", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpS",   "C",  5, 0, "Código de la empresa en contaplus para la serie S", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpT",   "C",  5, 0, "Código de la empresa en contaplus para la serie T", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpU",   "C",  5, 0, "Código de la empresa en contaplus para la serie U", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpV",   "C",  5, 0, "Código de la empresa en contaplus para la serie V", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpW",   "C",  5, 0, "Código de la empresa en contaplus para la serie W", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpX",   "C",  5, 0, "Código de la empresa en contaplus para la serie X", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpY",   "C",  5, 0, "Código de la empresa en contaplus para la serie Y", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpZ",   "C",  5, 0, "Codigo de la empresa en contaplus para la serie Z", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProA",   "C",  9, 0, "Código del proyecto en contaplus para la serie A" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProB",   "C",  9, 0, "Código del proyecto en contaplus para la serie B" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProC",   "C",  9, 0, "Código del proyecto en contaplus para la serie C" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProD",   "C",  9, 0, "Código del proyecto en contaplus para la serie D" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProE",   "C",  9, 0, "Código del proyecto en contaplus para la serie E" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProF",   "C",  9, 0, "Código del proyecto en contaplus para la serie F" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProG",   "C",  9, 0, "Código del proyecto en contaplus para la serie G" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProH",   "C",  9, 0, "Código del proyecto en contaplus para la serie H" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProI",   "C",  9, 0, "Código del proyecto en contaplus para la serie I" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProJ",   "C",  9, 0, "Código del proyecto en contaplus para la serie J" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProK",   "C",  9, 0, "Código del proyecto en contaplus para la serie K" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProL",   "C",  9, 0, "Código del proyecto en contaplus para la serie L" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProM",   "C",  9, 0, "Código del proyecto en contaplus para la serie M" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProN",   "C",  9, 0, "Código del proyecto en contaplus para la serie N" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProO",   "C",  9, 0, "Código del proyecto en contaplus para la serie O" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProP",   "C",  9, 0, "Código del proyecto en contaplus para la serie P" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProQ",   "C",  9, 0, "Código del proyecto en contaplus para la serie Q" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProR",   "C",  9, 0, "Código del proyecto en contaplus para la serie R" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProS",   "C",  9, 0, "Código del proyecto en contaplus para la serie S" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProT",   "C",  9, 0, "Código del proyecto en contaplus para la serie T" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProU",   "C",  9, 0, "Código del proyecto en contaplus para la serie U" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProV",   "C",  9, 0, "Código del proyecto en contaplus para la serie V" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProW",   "C",  9, 0, "Código del proyecto en contaplus para la serie W" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProX",   "C",  9, 0, "Código del proyecto en contaplus para la serie X" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProY",   "C",  9, 0, "Código del proyecto en contaplus para la serie Y" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProZ",   "C",  9, 0, "Código del proyecto en contaplus para la serie Z",  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTACLI",    "C",  3, 0, "Cuenta en contaplus de clientes",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTAPRV",    "C",  3, 0, "Cuenta en contaplus de proveedores",                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTAVTA",    "C",  3, 0, "Cuenta en contaplus de venta",                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFCLI",    "C", 12, 0, "Cliente por defecto",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFSER",    "C",  1, 0, "Serie por defecto",                                     "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFCAJ",    "C",  3, 0, "Caja por defecto",                                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFCJR",    "C",  3, 0, "Cajero por defecto",                                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTACOB",    "C", 12, 0, "Subcuenta de cobros en T.P.V.",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTASIN",    "C", 12, 0, "Subcuenta de clientes sin codificar",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LGETCOB",    "L",  1, 0, "Recoger obras",                                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"DFECVER",    "D",  8, 0, "Fecha de la versión",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LSELFAM",    "L",  1, 0, "Selector por família",                                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LUSEIMP",    "L",  1, 0, "Habilitar impuestos especiales",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LMODIMP",    "L",  1, 0, "Modificar impuestos especiales",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMLIQ",    "N",  9, 0, "Número de la liquidación",                              "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMCAR",    "N",  9, 0, "Número de la ordenes de carga",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDIRIMG",    "C",100, 0, "Directorio de imagenes",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFIVA",    "C",  1, 0, "Tipo de impuesto por defecto",                          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMMOV",    "N",  9, 0, "Número del movimiento de almacen",                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMCOB",    "N",  9, 0, "Número del cobro de agentes",                           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF1",   "N",  6, 2, "Primer porcentaje de beneficio por defecto",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF2",   "N",  6, 2, "Segundo porcentaje de beneficio por defecto",           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF3",   "N",  6, 2, "Tercer porcentaje de beneficio por defecto",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF4",   "N",  6, 2, "Cuarto porcentaje de beneficio por defecto",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF5",   "N",  6, 2, "Quinto porcentaje de beneficio por defecto",            "", "", "aEmp()", nil} )
   aAdd( aDbf, {"NDEFBNF6",   "N",  6, 2, "Sexto porcentaje de beneficio por defecto",             "", "", "aEmp()", nil} )
   aAdd( aDbf, {"nDefSbr1",   "N",  1, 0, "Primer beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr2",   "N",  1, 0, "Segundo beneficio sobre el costo o sobre venta por defecto","", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr3",   "N",  1, 0, "Tercer beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr4",   "N",  1, 0, "Cuarto beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr5",   "N",  1, 0, "Quinto beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr6",   "N",  1, 0, "Sexto beneficio sobre el costo o sobre venta por defecto",  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lShwKit",    "L",  1, 0, "Mostrar productos kit",                                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lPasNil",    "L",  1, 0, "Confirmar artículos sin valorar",                       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDgtEsc",    "N",  1, 0, "Número de digitos para escandallos",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDecEsc",    "N",  1, 0, "Número de decimales para escandallos",                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetLot",    "L",  1, 0, "Recoger lotes",                                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lBusImp",    "L",  1, 0, "Buscar importes en la tarifa inferior",                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lShwCos",    "L",  1, 0, "Mostrar precios de costo",                              "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetAge",    "L",  1, 0, "Recoger el agente",                                     "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lImpExa",    "L",  1, 0, "Importe exacto al cobrar",                              "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetUsr",    "L",  1, 0, "Recoger el usuario",                                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lIvaReq",    "L",  1, 0, "Lógico para creación de cuentas de contabilidad",       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lEnvEnt",    "L",  1, 0, "Lógico para enviar solo albaranes entregados",          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDiaVal",    "N",  3, 0, "Dias de validez para un presupuesto",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaAnt",    "C", 12, 0, "Subcuenta de anticipos de clientes",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nSndInf",    "N",  9, 0, "Número del último envio",                               "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nRecInf",    "N",  9, 0, "Número del la última recepción",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPrnPdf",    "C",220, 0, "Impresora para generar PDF",                            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lCodeBar",   "L",  1, 0, "Lógico seleccionar multiples códigos de barras",        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cDedVta",    "C",  2, 0, "Tipo de venta por defecto",                             "", "", "aEmp()", nil } )
   aAdd( aDbf, {"dIniOpe",    "D",  8, 0, "Fecha de inicio de las operaciones",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"dFinOpe",    "D",  8, 0, "Fecha de fin de las operaciones",                       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaRet",    "C", 12, 0, "Cuenta en contaplus de IRPF",                           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cSitSql",    "C",100, 0, "Nombre del servidor para MySql",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cUsrSql",    "C", 50, 0, "Nombre de usuario para MySql",                          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPswSql",    "C", 20, 0, "Password para usuario para MySql",                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nPrtSql",    "N",  5, 0, "Puerto para conexión de MySql",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cDtbSql",    "C",100, 0, "Base de datos MySql",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNbrCaj",    "C",100, 0, "Descripción para cajas",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNbrUnd",    "C",100, 0, "Descripción para unidades",                             "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lUsePor",    "L",  1, 0, "Lógico habilitar portes",                               "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lUsePnt",    "L",  1, 0, "Lógico habilitar punto verde",                          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lIvaInc",    "L",  1, 0, "Lógico para impuestos incluido",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaCeeRpt", "C", 12, 0, "Cuenta en contaplus de impuestos repercutido",          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaCeeSpt", "C", 12, 0, "Cuenta en contaplus de impuestos soportado",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lUseTbl",    "L",  1, 0, "Lógico para usar tabla de propiedades",                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lShwTar1",   "L",  1, 0, "Lógico para mostrar la primera tarifa",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar2",   "L",  1, 0, "Lógico para mostrar la segunda tarifa",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar3",   "L",  1, 0, "Lógico para mostrar la tercera tarifa",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar4",   "L",  1, 0, "Lógico para mostrar la cuarta tarifa",                  "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar5",   "L",  1, 0, "Lógico para mostrar la quinta tarifa",                  "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar6",   "L",  1, 0, "Lógico para mostrar la sexta tarifa",                   "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"cTxtTar1",   "C", 50, 0, "Nombre para la primera tarifa",                         "", "", "aEmp()", "Precio 1"} )
   aAdd( aDbf, {"cTxtTar2",   "C", 50, 0, "Nombre para la segunda tarifa",                         "", "", "aEmp()", "Precio 2"} )
   aAdd( aDbf, {"cTxtTar3",   "C", 50, 0, "Nombre para la tercera tarifa",                         "", "", "aEmp()", "Precio 3"} )
   aAdd( aDbf, {"cTxtTar4",   "C", 50, 0, "Nombre para la cuarta tarifa",                          "", "", "aEmp()", "Precio 4"} )
   aAdd( aDbf, {"cTxtTar5",   "C", 50, 0, "Nombre para la quinta tarifa",                          "", "", "aEmp()", "Precio 5"} )
   aAdd( aDbf, {"cTxtTar6",   "C", 50, 0, "Nombre para la sexta tarifa",                           "", "", "aEmp()", "Precio 6"} )
   aAdd( aDbf, {"cIniJor",    "C",  5, 0, "Hora de inicio de la jornada laboral",                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cSrvMai",    "C",250, 0, "Servidor de correo",                                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaMai",    "C",250, 0, "Cuenta de correo",                                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPssMai",    "C",250, 0, "Clave de cuenta de correo",                             "", "", "aEmp()", "" } )
   aAdd( aDbf, {"cCcpMai",    "C",250, 0, "Enviar copias de mail a cuenta de correo",              "", "", "aEmp()", "" } )
   aAdd( aDbf, {"nNumPgo",    "N",  9, 0, "Contador para pago de clientes",                        "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lSelCaj",    "L",  1, 0, "Lógico seleccionar cajas",                              "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lSelAlm",    "L",  1, 0, "Lógico seleccionar almacenes",                          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lAddCut",    "L",  1, 0, "Lógico sumar unidades en TPV",                          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lFidelity",  "L",  1, 0, "Lógico para iniciar el modo fidelity",                  "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lPreLin",    "L",  1, 0, "Lógico seleccionar precios en línea",                   "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lDtoLin",    "L",  1, 0, "Lógico habilitar descuento lineal",                     "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lSalPdt",    "L",  1, 0, "Lógico avisar saldo pendiente",                         "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nPrtMai",    "N",  5, 0, "Puerto del servidor de correo",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lAutMai",    "L",  1, 0, "Lógico de autenticación del servidor de correo",        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetUbi",    "L",  1, 0, "Recoger ubicación de venta",                            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGrupo",     "L",  1, 0, "Lógico de grupo",                                       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodGrp",    "C",  4, 0, "Código del grupo",                                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lStkCero",   "L",  1, 0, "Lógico para mostrar estokaje cero",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lShowSala",  "L",  1, 0, "Lógico para mostrar las sala de venta siempre",         "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nPreTPro",   "N",  1, 0, "Precios para productos en táctil",                      "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"nPreTCmb",   "N",  1, 0, "Precios para combinados en táctil",                     "", "", "aEmp()", 2 } )
   aAdd( aDbf, {"lCosPrv",    "L",  1, 0, "Lógico costo por proveedor",                            "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lShwPop",    "L",  1, 0, "Lógico de mostrar ventanas de stocks",                  "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"nCifRut",    "N",  1, 0, "Númerico para calclulo de CIF o RUT",                   "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"cDImagen",   "C",250, 0, "Ruta para las imagenes en FTP",                         "", "", "aEmp()", Space( 250 ) } )
   aAdd( aDbf, {"lGetFpg",    "L",  1, 0, "Lógico de solicitar siempre forma de pago",             "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cSeriePed",  "C",  1, 0, "Serie para pedidos de internet",                        "", "", "aEmp()", "A" } )
   aAdd( aDbf, {"nTiempoPed", "N",  3, 0, "Tiempo en recargar los pedidos",                        "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lNStkAct",   "L",  1, 0, "Logico para no mostrar el stock actual en ventas",      "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cRutEdi",    "C",250, 0, "Ruta para exportar las facturas a EDI",                 "", "", "aEmp()", Space( 250 ) } )
   aAdd( aDbf, {"cCodEdi",    "C", 17, 0, "Código EDI [EAN] de nuestras empresa",                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cUsrFtpImg", "C", 50, 0, "Nombre de usuario para ftp de imagenes",                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPswFtpImg", "C", 50, 0, "Contraseña de usuario para ftp de imagenes",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cHstFtpImg", "C", 50, 0, "Host para ftp de imagenes",                             "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nPrtFtp",    "N",  5, 0, "Puerto del servidor ftp para imagenes",                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNumRegMer", "C",250, 0, "Número del registro mercantil",                         "", "", "aEmp()", Space( 250 ) } )
   aAdd( aDbf, {"nTiempoImp", "N",  3, 0, "Tiempo de recarga de impresión pda",                    "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lPasEnvio",  "L",  1, 0, "Lógico envio pasivo de datos",                          "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lPasFtp",    "L",  1, 0, "Lógico envio pasivo ftp",                               "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lOrdNomTpv", "L",  1, 0, "Lógico ordén TPV por nombre",                           "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lGrpCli",    "L",  1, 0, "Lógico de grupo tablas de cliente",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpArt",    "L",  1, 0, "Lógico de grupo tablas de artículos",                   "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"CDefTem",    "C", 10, 0, "Temporada por defecto",                                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDiaVale",   "N",  3, 0, "Numeros de dias para que el vale sea valido",           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lNumTik",    "L",  1, 0, "Lógico numero del tiket obligatorio para devolución",   "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lCosAct",    "L",  1, 0, "Lógico para usar costo actual en movimientos",          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpPrv",    "L",  1, 0, "Lógico de grupo tablas de proveedores",                 "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpAlm",    "L",  1, 0, "Lógico de grupo tablas de almacén",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nPreVta",    "N",  1, 0, "Precios para ventas generales",                         "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"nPreWebVta", "N",  1, 0, "Precios para ventas web",                               "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lSerNoCom",  "L",  1, 0, "Avisar en ventas de números de serie no comprados",     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lConIva",    "L",  1, 0, "Lógico para contabilizar apuntes de impuestos siempre", "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lIvaImpEsp", "L",  1, 0, "Aplicar impuestos a impuestos especiales",              "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lBtnFam",    "L",  1, 0, "Seleccion de familias por botones en PDA",              "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lPreMin",    "L",  1, 0, "Lógico no permitir ventas bajo precio mínimo",          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lCalLot",    "L",  1, 0, "Lógico calculo de lotes en stock",                      "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lCalSer",    "L",  1, 0, "Lógico calculo de números de serie en stock",           "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lMovCos",    "L",  1, 0, "Lógico no usar movimientos en costo medio",             "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpEnt",    "L",  1, 0, "Lógico agrupar entregas a cuenta en recibos",           "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lBusCir",    "L",  1, 0, "Lógico activar búsqueda circular",                      "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cNomSerA",   "C", 60, 0, "Nombre para la serie A",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerB",   "C", 60, 0, "Nombre para la serie B",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerC",   "C", 60, 0, "Nombre para la serie C",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerD",   "C", 60, 0, "Nombre para la serie D",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerE",   "C", 60, 0, "Nombre para la serie E",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerF",   "C", 60, 0, "Nombre para la serie F",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerG",   "C", 60, 0, "Nombre para la serie G",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerH",   "C", 60, 0, "Nombre para la serie H",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerI",   "C", 60, 0, "Nombre para la serie I",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerJ",   "C", 60, 0, "Nombre para la serie J",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerK",   "C", 60, 0, "Nombre para la serie K",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerL",   "C", 60, 0, "Nombre para la serie L",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerM",   "C", 60, 0, "Nombre para la serie M",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerN",   "C", 60, 0, "Nombre para la serie N",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerO",   "C", 60, 0, "Nombre para la serie O",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerP",   "C", 60, 0, "Nombre para la serie P",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerQ",   "C", 60, 0, "Nombre para la serie Q",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerR",   "C", 60, 0, "Nombre para la serie R",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerS",   "C", 60, 0, "Nombre para la serie S",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerT",   "C", 60, 0, "Nombre para la serie T",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerU",   "C", 60, 0, "Nombre para la serie U",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerV",   "C", 60, 0, "Nombre para la serie V",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerW",   "C", 60, 0, "Nombre para la serie W",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerX",   "C", 60, 0, "Nombre para la serie X",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerY",   "C", 60, 0, "Nombre para la serie Y",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerZ",   "C", 60, 0, "Nombre para la serie Z",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lCntNeg",    "L",  1, 0, "Contabilizar negativo",                                 "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lImgArt",    "L",  1, 0, "Lógico si un artículo lleva imagen",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lFltYea",    "L",  1, 0, "Lógico filtro de documentos por año",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomImp",    "C", 20, 0, "Nombre del impuesto",                                   "", "", "aEmp()", "IVA" } )
   aAdd( aDbf, {"lReqDec",    "L",  1, 0, "Lógico si el recargo se aplica con decimales",          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lAptNeg",    "L",  1, 0, "Lógico de realizar apunte en contaplus en negativo",    "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lLlevar",    "L",  1, 0, "Lógico realizar para llevar en táctil",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lRecoger",   "L",  1, 0, "Lógico realizar para recoger en táctil",                "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"nAutSer",    "N", 16, 0, "Número de autserializado",                              "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lEncargar",  "L",  1, 0, "Lógico realizar para encargos en táctil",               "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"nCopSea",    "N",  1, 0, "Número para comportamiento en caso de conflicto",       "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lRealWeb",   "L",  1, 0, "Lógico conectar tiempo real con la web",                "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lRecNumFac", "L",  1, 0, "Lógico para recuperar el número de las facturas",       "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lAlbTct",    "L",  1, 0, "Lógico para realizar albaranes desde táctil",           "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lFacTct",    "L",  1, 0, "Lógico para realizar facturas desde táctil",            "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lMailTrno",  "L",  1, 0, "Lógico para enviar mail de cierre de turno",            "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cMailTrno",  "C",200, 0, "dirección de correo electónico para cierre de turno",   "", "", "aEmp()", "" } )
   aAdd( aDbf, {"cCtaPor",    "C", 12, 0, "Subcuenta de portes",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaGas",    "C", 12, 0, "Subcuenta de gastos",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lApeNomb",   "L",  1, 0, "Lógico recibir apellidos, nombre desde la web",         "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lTotTikCob", "L",  1, 0, "Lógico mostrar total ticket al cobrar",                 "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nTipImpTpv", "N",  1, 0, "Opción impresión al cobrar en tpv táctil",              "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lEmpFrnq",   "L",  1, 0, "Lógico empresa franquiciada",                           "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lRECC",      "L",  1, 0, "Régimen especial del criterio de caja",                 "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nIniRECC",   "N",  4, 0, "Año inicio régimen especial del criterio de caja",      "", "", "aEmp()", } )
   aAdd( aDbf, {"nFinRECC",   "N",  4, 0, "Año fin régimen especial del criterio de caja",         "", "", "aEmp()", } )
   aAdd( aDbf, {"lHExpWeb",   "L",  1, 0, "Ocultar botón exportar web",                            "", "", "aEmp()", } )
   aAdd( aDbf, {"lRecCostes", "L",  1, 0, "Recalcula costes en partes de producción",              "", "", "aEmp()", } )
   aAdd( aDbf, {"nExpContbl", "N",  1, 0, "Exportación contable",                                  "", "", "aEmp()", } )
   aAdd( aDbf, {"lShowLin",   "L",  1, 0, "Ocultar lineas borradas",                               "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lShowOrg",   "L",  1, 0, "Mostrar almacén origen en compras",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lUseBultos", "L",  1, 0, "Usar bultos",                                           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNbrBultos", "C",100, 0, "Descripción para bultos",                               "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodCliFrq", "C", 12, 0, "Código de cliente para franquicia",                     "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodPrvFrq", "C", 12, 0, "Código de proveedor para franquicia",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lStkAlm",    "L",  1, 0, "Lógico de usar stock por almacenes",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lSSLMai",    "L",  1, 0, "Lógico de uso de protocolo SSL del servidor de correo", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCcoMai",    "C",250, 0, "Enviar con copia oculta de mail a cuenta de correo",    "", "", "aEmp()", "" } )
   aAdd( aDbf, {"lRecEnt",    "L",  1, 0, "Lógico para recibir albaranes como entregados",         "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cSeriePre",  "C",  1, 0, "Serie para presupuestos de internet",                   "", "", "aEmp()", "A" } )
   aAdd( aDbf, {"lServicio",  "L",  1, 0, "Lógico fecha servicio",                                 "", "", "aEmp()" } )
   aAdd( aDbf, {"cCeeRptCom", "C", 12, 0, "Cuenta en contaplus de impuestos repercutido en compras", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCeeSptCom", "C", 12, 0, "Cuenta en contaplus de impuestos devengado en compras",   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lOpenTik",   "L",  1, 0, "Lógico permitir tickets abiertos en sesiones",          "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lContRec",   "L",  1, 0, "Lógico permitir contabilizar recibos con factura sin contabilizar", "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lStockAlm",  "L",  1, 0, "Lógico mostrar stock por almacén en ventas",            "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lBrFamTre",  "L",  1, 0, "Mostrar browse de familias tree",                       "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"Uuid",       "C", 40, 0, "Uuid",                                                  "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lCBarTpv",   "L",  1, 0, "Lógico códigos de barras en táctil",                    "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lDtoCliLin", "L",  1, 0, "Pasar descuento general clientes a lineas",             "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lLoaUltLot", "L",  1, 0, "Cargar último lote utilizado",                          "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"nCosVta",    "N",  1, 0, "Tipo de costo en ventas",                               "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lMsgPromo",  "L",  1, 0, "Lógico confirmación vales promoción",                   "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lAddAtp",    "L",  1, 0, "Lógico agregar atipicas en ventas",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lUltVta",    "L",  1, 0, "Lógico guardar último precio de venta",                 "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cDirSafe",   "C",200, 0, "Directorio para hacer copia de seguridad",              "", "", "aEmp()", .F. } )

RETURN ( aDbf )



STATIC FUNCTION aItmDlg()

   local aItmDlg  := {}

   aAdd( aItmDlg, { "cCodEmp", "C",  4, 0, "Código de empresa"    } )
   aAdd( aItmDlg, { "cCodDlg", "C",  2, 0, "Código de delegación" } )
   aAdd( aItmDlg, { "cNomDlg", "C", 50, 0, "Nombre de delegación" } )
   aAdd( aItmDlg, { "Uuid",    "C", 40, 0, "Uuid" } )

RETURN ( aItmDlg )



STATIC FUNCTION aItmCfg()

   local aItmCfg  := {}

   aAdd( aItmCfg, { "cCodEmp",   "C",  4, 0, "Código de empresa"    } )
   aAdd( aItmCfg, { "cName",     "C", 50, 0, "Nombre de la configuración" } )
   aAdd( aItmCfg, { "cValue",    "C", 50, 0, "Valos de la configuración" } )
   aAdd( aItmCfg, { "Uuid",      "C", 40, 0, "Uuid" } )

RETURN ( aItmCfg )



FUNCTION mkEmpresa( cPath, cDriver )

   If( cPath == nil, cPath := cPatDat(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   if !lExistTable( cPath + "EMPRESA.DBF" )
      dbCreate( cPath + "EMPRESA.DBF", aSqlStruct( aItmEmp() ), cDriver )
   end

   if !lExistTable( cPath + "DELEGA.DBF" )
      dbCreate( cPath + "DELEGA.DBF", aSqlStruct( aItmDlg() ), cDriver )
   end

   if !lExistTable( cPath + "CONFEMP.DBF" )
      dbCreate( cPath + "CONFEMP.DBF", aSqlStruct( aItmCfg() ), cDriver )
   end

   if !lExistIndex( cPath + "EMPRESA.CDX" ) .OR. !lExistIndex( cPath + "DELEGA.CDX" ) .OR. !lExistIndex( cPath + "CONFEMP.CDX" )
      rxEmpresa( cPath, cDriver )
   end

RETURN NIL



FUNCTION rxEmpresa( cPath, cDriver )

   local dbfEmp

   If( cPath == nil, cPath := cPatDat(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   if !lExistTable( cPath + "EMPRESA.DBF" )
      dbCreate( cPath + "EMPRESA.DBF", aSqlStruct( aItmEmp() ), cDriver )
   end

   dbUseArea( .T., cDriver(), cPath + "Empresa.Dbf", cCheckArea( "EMPRESA", @dbfEmp ), .F. )
   if !( dbfEmp )->( neterr() )
      ( dbfEmp)->( __dbPack() )

      ( dbfEmp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfEmp )->( ordCreate( cPath + "EMPRESA.CDX", "CODEMP", "CodEmp", {|| Field->CodEmp }, ) )

      ( dbfEmp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfEmp )->( ordCreate( cPath + "EMPRESA.CDX", "CNOMBRE", "CNOMBRE", {|| Field->cNomBre } ) )

      ( dbfEmp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfEmp )->( ordCreate( cPath + "EMPRESA.CDX", "CCODGRP", "CCODGRP", {|| Field->cCodGrp } ) )

      ( dbfEmp )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de empresas" )
   end

   if !lExistTable( cPath + "DELEGA.DBF" )
      dbCreate( cPath + "DELEGA.DBF", aSqlStruct( aItmDlg() ), cDriver )
   end

   dbUseArea( .T., cDriver(), cPath + "DELEGA.DBF", cCheckArea( "DELEGA", @dbfDlg ), .F. )

   if !( dbfDlg )->( neterr() )
      ( dbfDlg)->( __dbPack() )

      ( dbfDlg )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfDlg )->( ordCreate( cPath + "DELEGA.CDX", "CCODEMP", "CCODEMP + CCODDLG", {|| field->cCodEmp + field->cCodDlg } ) )

      ( dbfDlg )->( dbeval( {|| field->uuid := win_uuidcreatestring() }, {|| empty( field->uuid ) } ) )

      ( dbfDlg )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de delegaciones" )
   end

   if !lExistTable( cPath + "CONFEMP.DBF" )
      dbCreate( cPath + "CONFEMP.DBF", aSqlStruct( aItmCfg() ), cDriver )
   end

   dbUseArea( .T., cDriver(), cPath + "CONFEMP.DBF", cCheckArea( "CONFEMP", @dbfCfg ), .F. )

   if !( dbfCfg )->( neterr() )
      ( dbfCfg)->( __dbPack() )

      ( dbfCfg )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfCfg )->( ordCreate( cPath + "CONFEMP.CDX", "CVALUE", "CCODEMP + CNAME + CVALUE", {|| field->cCodEmp + field->cName + field->cValue } ) )

      ( dbfCfg )->( dbeval( {|| field->uuid := win_uuidcreatestring() }, {|| empty( field->uuid ) } ) )

      ( dbfCfg )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de configuraciones de empresa" )
   end

RETURN NIL



FUNCTION SynEmpresa( cPath )

   local oBlock
   local oError
   local dbfEmpresa
   local dbfDelega
   local dbfConfig

   If( cPath == nil, cPath := cPatDat(), ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPath + "Empresa.Dbf" ), ( cCheckArea( "Empresa", @dbfEmpresa ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPath + "Empresa.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPath + "Delega.Dbf" ), ( cCheckArea( "Delega", @dbfDelega ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPath + "Delega.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPath + "ConfEmp.Dbf" ), ( cCheckArea( "ConfEmp", @dbfConfig ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPath + "ConfEmp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





      ( dbfEmpresa )->( dbGoTop() )
      while !( dbfEmpresa )->( eof() )

         if empty( ( dbfEmpresa )->Uuid )
            ( dbfEmpresa )->Uuid := win_uuidcreatestring()
         end

         ( dbfEmpresa )->( dbSkip() )

         SysRefresh()

      end





      ( dbfDelega )->( dbGoTop() )
      while !( dbfDelega )->( eof() )

         if empty( ( dbfDelega )->Uuid )
            ( dbfDelega )->Uuid := win_uuidcreatestring()
         end

         ( dbfDelega )->( dbSkip() )

         SysRefresh()

      end





      ( dbfConfig )->( dbGoTop() )
      while !( dbfConfig )->( eof() )

         if empty( ( dbfConfig )->Uuid )
            ( dbfConfig )->Uuid := win_uuidcreatestring()
         end

         ( dbfConfig )->( dbSkip() )

         SysRefresh()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de empresa." )

   end

   ErrorBlock( oBlock )

   ( dbfEmpresa )->( dbCloseArea() )
   ( dbfDelega )->( dbCloseArea() )
   ( dbfConfig )->( dbCloseArea() )

RETURN nil







FUNCTION lValidaOperacion( dOperacion, lMessage )

   If( lMessage == nil, lMessage := .T., ) ;


   if ( empty( aEmp()[ 155 ] ) .OR. empty( aEmp()[ 156 ] ) ) .OR.  ( dOperacion >= aEmp()[ 155 ] .AND. dOperacion <= aEmp()[ 156 ] )
      RETURN .T.
   end

   if lMessage
      msgStop( "La fecha del documento no está entre la fecha de operaciones marcada en la empresa" )
   end

RETURN ( .F. )



FUNCTION lValidaSerie( cSerie, lMessage )

   If( lMessage == nil, lMessage := .T., ) ;

   if ( cSerie >= "A" .AND. cSerie <= "Z" )
      RETURN .T.
   end

   if lMessage
      msgStop( "La serie del documento debe estar comprendida entre la A y la Z." )
   end

RETURN ( .F. )



FUNCTION cNombreUnidades()

   local cNombreUnidades   := "Unidades"

   if !empty( aEmp() ) .AND. 164 <= len( aEmp() ) .AND. !empty( aEmp()[ 164 ] )
      cNombreUnidades      := Rtrim( aEmp()[ 164 ] )
   end

RETURN ( cNombreUnidades )



FUNCTION cNombreCajas()

   local cNombreCajas   := "Cajas"

   if !empty( aEmp() ) .AND. 163 <= len( aEmp() ) .AND. !empty( aEmp()[ 163 ] )
      cNombreCajas      := Rtrim( aEmp()[ 163 ] )
   end

RETURN ( cNombreCajas )



STATIC FUNCTION lChgCajCaj( aGet, aTmp )

   if !aTmp[ 32 ]
      aTmp[ 33 ]  := .F.
      aGet[ 33 ]:Refresh()
   end

RETURN (.T.)



STATIC FUNCTION cTiempoToCadena( nTiempo )

   local cTiempo  := aTiempo[ 1 ]

   do case
      case nTiempo == 0
         cTiempo  := aTiempo[ 1 ]
      case nTiempo == 1
         cTiempo  := aTiempo[ 2 ]
      case nTiempo == 2
         cTiempo  := aTiempo[ 3 ]
      case nTiempo == 5
         cTiempo  := aTiempo[ 4 ]
      case nTiempo == 10
         cTiempo  := aTiempo[ 5 ]
      case nTiempo == 15
         cTiempo  := aTiempo[ 6 ]
      case nTiempo == 30
         cTiempo  := aTiempo[ 7 ]
      case nTiempo == 45
         cTiempo  := aTiempo[ 8 ]
      case nTiempo == 60
         cTiempo  := aTiempo[ 9 ]
      case nTiempo == 120
         cTiempo  := aTiempo[ 10 ]
      case nTiempo == 240
         cTiempo  := aTiempo[ 11 ]
      case nTiempo == 480
         cTiempo  := aTiempo[ 12 ]
   endcase

RETURN ( cTiempo )



STATIC FUNCTION cTiempoToCadenaImp( nTiempo )

   local cTiempo  := aTiempoImp[ 1 ]

   do case
      case nTiempo == 0
         cTiempo  := aTiempoImp[ 1 ]
      case nTiempo == 5
         cTiempo  := aTiempoImp[ 2 ]
      case nTiempo == 10
         cTiempo  := aTiempoImp[ 3 ]
      case nTiempo == 15
         cTiempo  := aTiempoImp[ 4 ]
      case nTiempo == 20
         cTiempo  := aTiempoImp[ 5 ]
      case nTiempo == 25
         cTiempo  := aTiempoImp[ 6 ]
      case nTiempo == 30
         cTiempo  := aTiempoImp[ 7 ]
      case nTiempo == 35
         cTiempo  := aTiempoImp[ 8 ]
      case nTiempo == 40
         cTiempo  := aTiempoImp[ 9 ]
      case nTiempo == 45
         cTiempo  := aTiempoImp[ 10 ]
      case nTiempo == 50
         cTiempo  := aTiempoImp[ 11 ]
      case nTiempo == 55
         cTiempo  := aTiempoImp[ 12 ]
      case nTiempo == 60
         cTiempo  := aTiempoImp[ 13 ]
   endcase

RETURN ( cTiempo )



STATIC FUNCTION cCadenaToTiempo( cTiempo )

   local nTiempo := 0

   do case
      case cTiempo == aTiempo[ 1 ]
         nTiempo  := 0
      case cTiempo == aTiempo[ 2 ]
         nTiempo  := 1
      case cTiempo == aTiempo[ 3 ]
         nTiempo  := 2
      case cTiempo == aTiempo[ 4 ]
         nTiempo  := 5
      case cTiempo == aTiempo[ 5 ]
         nTiempo  := 10
      case cTiempo == aTiempo[ 6 ]
         nTiempo  := 15
      case cTiempo == aTiempo[ 7 ]
         nTiempo  := 30
      case cTiempo == aTiempo[ 8 ]
         nTiempo  := 45
      case cTiempo == aTiempo[ 9 ]
         nTiempo  := 60
      case cTiempo == aTiempo[ 10 ]
         nTiempo  := 120
      case cTiempo == aTiempo[ 11 ]
         nTiempo  := 240
      case cTiempo == aTiempo[ 12 ]
         nTiempo  := 480
   endcase

RETURN ( nTiempo )



FUNCTION SetTituloEmpresa()

   if oWnd() <> nil
      oWnd():cTitle( "Gestool" + Space( 1 ) + "2K25 (2025)" + Space( 1 ) + cTypeVersion() + " : " + uFieldEmpresa( "CodEmp", "" ) + " - " + Rtrim( uFieldEmpresa( "cNombre", "" ) ) )
   end

RETURN ( nil )



FUNCTION aItmBnc()

   local aBase := {}

   aAdd( aBase, { "cCodEmp",     "C",  4, 0, "Código de empresa",                "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cEntBnc",     "C",  4, 0, "Entidad bancaria",                 "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cSucBnc",     "C",  4, 0, "Sucursal bancaria",                "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cDigBnc",     "C",  2, 0, "Dígito control",                   "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCtaBnc",     "C", 10, 0, "Cuenta",                           "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCodBnc",     "C", 50, 0, "Nombre del banco",                 "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cDirBnc",     "C", 35, 0, "Domicilio del banco",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPobBnc",     "C", 25, 0, "Población del banco",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cProBnc",     "C", 20, 0, "Provincia del banco",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCPBnc",      "C", 15, 0, "Código postal",                    "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cTlfBnc",     "C", 20, 0, "Teléfono",                         "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cFaxBnc",     "C", 20, 0, "Fax",                              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPContBnc",   "C", 35, 0, "Persona de contacto",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPaiBnc",     "C",  4, 0, "Pais",                             "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "nSalIni",     "N", 16, 6, "Saldo inicial",                    "",                   "", "( cDbfBnc )" } )

RETURN ( aBase )



FUNCTION rxBnc( cPath, oMeter )

   local dbfBnc

   If( cPath == nil, cPath := cPatEmp(), ) ;

   dbUseArea( .T., cDriver(), cPath + "EmpBnc.Dbf", cCheckArea( "EmpBnc", @dbfBnc ), .F. )

   if !( dbfBnc )->( neterr() )

      ( dbfBnc )->( __dbPack() )

      ( dbfBnc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfBnc )->( ordCreate( cPath + "EmpBnc.CDX", "cCodEmp", "cCodEmp + cCodBnc", {|| Field->cCodEmp + Field->cCodBnc } ) )

      ( dbfBnc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfBnc )->( ordCreate( cPath + "EmpBnc.CDX", "cCtaBnc", "cCodEmp + cEntBnc + cSucBnc + cDigBnc + cCtaBnc", {|| Field->cCodEmp + Field->cEntBnc + Field->cSucBnc + Field->cDigBnc + Field->cCtaBnc } ) )

      ( dbfBnc )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de delegaciones" )

   end

RETURN NIL



FUNCTION BrwBncEmp( oGet, oGetPaisIBAN, oGetControlIBAN, oGetEntidad, oGetSucursal, oGetDigitoControl, oGetCuenta, dbfBancos )

    local oDlg
    local oBrw
   local oFont
   local oBtn
    local oGet1
    local cGet1
   local nOrd        := GetBrwOpt( "BrwBncEmp" )
    local oCbxOrd
   local aCbxOrd     := { "Nombre", "Cuenta" }
   local cCbxOrd     := "Nombre"
   local nLevel      := Auth():Level( "01003" )
   local lClose      := .F.
   local nOrdAnt

   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   if !lExistTable( cPatEmp() + "EmpBnc.Dbf" )
      MsgStop( "No existe el fichero de bancos" )
      RETURN .F.
   end

   if empty( dbfBancos )
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "EmpBnc.Dbf" ), ( cCheckArea( "EMPBNC", @dbfBancos ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "EmpBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose         := .T.
   end

   nOrdAnt           := ( dbfBancos )->( ordSetFocus( nOrd ) )

   ( dbfBancos )->( dbGoTop() )



   oDlg = TDialog():New(,,,, "Seleccionar cuentas bancarias", "HelpEntry",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfBancos, nil, cCodEmp() ) ) }, .F., .F.,,,,,, nil, "Find",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfBancos )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfBancos
      oBrw:nMarqueeStyle   := 5

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodBnc"
         :bEditValue       := {|| ( dbfBancos )->cCodBnc }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomBnc"
         :bEditValue       := {|| ( dbfBancos )->cNomBnc }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cuenta"
         :cSortOrder       := "cCtaBnc"
         :bEditValue       := {|| PictureCuentaIBAN( dbfBancos ) }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfBancos )->cDirBnc }
         :nWidth           := 180
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| ( dbfBancos )->cPobBnc }
         :nWidth           := 100
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| ( dbfBancos )->cCPBnc }
         :nWidth           := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| ( dbfBancos )->cProBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Teléfono"
         :bEditValue       := {|| ( dbfBancos )->cTlfBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfBancos )->cFaxBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Contacto"
         :bEditValue       := {|| ( dbfBancos )->cPContBnc }
         :nWidth           := 140
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )





        TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      oGet:cText( ( dbfBancos )->cNomBnc )

      oGetPaisIBAN:cText( ( dbfBancos )->cPaisIBAN )
      oGetControlIBAN:cText( ( dbfBancos )->cCtrlIBAN )
      oGetEntidad:cText( ( dbfBancos )->cEntBnc )
      oGetSucursal:cText( ( dbfBancos )->cSucBnc )
      oGetDigitoControl:cText( ( dbfBancos )->cDigBnc )
      oGetCuenta:cText( ( dbfBancos )->cCtaBnc )

   end

   DestroyFastFilter( dbfBancos )

   SetBrwOpt( "BrwBancos", ( dbfBancos )->( OrdNumber() ) )

   ( dbfBancos )->( dbClearFilter() )

   ( dbfBancos )->( OrdSetFocus( nOrdAnt ) )

   if lClose
      ( dbfBancos )->( dbCloseArea() )
   end

    oGet:setFocus()

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION ChangeSerie( aGet, aTmp, oSerie, cSerie, lDown )





   GuardaNombreSerie( aTmp, cSerie )





   if lDown
      DwSerie( oSerie )
   else
      UpSerie( oSerie )
   end





   CargaNombreSerie( aTmp, oSerie )

RETURN ( .T. )



STATIC FUNCTION GuardaNombreSerie( aTmp, cSerie )

   do case
      case cSerie == "A"
         aTmp[ 244 ] := cNombreSerie
      case cSerie == "B"
         aTmp[ 245 ] := cNombreSerie
      case cSerie == "C"
         aTmp[ 246 ] := cNombreSerie
      case cSerie == "D"
         aTmp[ 247 ] := cNombreSerie
      case cSerie == "E"
         aTmp[ 248 ] := cNombreSerie
      case cSerie == "F"
         aTmp[ 249 ] := cNombreSerie
      case cSerie == "G"
         aTmp[ 250 ] := cNombreSerie
      case cSerie == "H"
         aTmp[ 251 ] := cNombreSerie
      case cSerie == "I"
         aTmp[ 252 ] := cNombreSerie
      case cSerie == "J"
         aTmp[ 253 ] := cNombreSerie
      case cSerie == "K"
         aTmp[ 254 ] := cNombreSerie
      case cSerie == "L"
         aTmp[ 255 ] := cNombreSerie
      case cSerie == "M"
         aTmp[ 256 ] := cNombreSerie
      case cSerie == "N"
         aTmp[ 257 ] := cNombreSerie
      case cSerie == "O"
         aTmp[ 258 ] := cNombreSerie
      case cSerie == "P"
         aTmp[ 259 ] := cNombreSerie
      case cSerie == "Q"
         aTmp[ 260 ] := cNombreSerie
      case cSerie == "R"
         aTmp[ 261 ] := cNombreSerie
      case cSerie == "S"
         aTmp[ 262 ] := cNombreSerie
      case cSerie == "T"
         aTmp[ 263 ] := cNombreSerie
      case cSerie == "U"
         aTmp[ 264 ] := cNombreSerie
      case cSerie == "V"
         aTmp[ 265 ] := cNombreSerie
      case cSerie == "W"
         aTmp[ 266 ] := cNombreSerie
      case cSerie == "X"
         aTmp[ 267 ] := cNombreSerie
      case cSerie == "Y"
         aTmp[ 268 ] := cNombreSerie
      case cSerie == "Z"
         aTmp[ 269 ] := cNombreSerie
   end

RETURN ( .T. )



STATIC FUNCTION CargaNombreSerie( aTmp, oSerie )

   do Case
      case oSerie:VarGet() == "A"
         oNombreSerie:cText( aTmp[ 244 ] )
      case oSerie:VarGet() == "B"
         oNombreSerie:cText( aTmp[ 245 ] )
      case oSerie:VarGet() == "C"
         oNombreSerie:cText( aTmp[ 246 ] )
      case oSerie:VarGet() == "D"
         oNombreSerie:cText( aTmp[ 247 ] )
      case oSerie:VarGet() == "E"
         oNombreSerie:cText( aTmp[ 248 ] )
      case oSerie:VarGet() == "F"
         oNombreSerie:cText( aTmp[ 249 ] )
      case oSerie:VarGet() == "G"
         oNombreSerie:cText( aTmp[ 250 ] )
      case oSerie:VarGet() == "H"
         oNombreSerie:cText( aTmp[ 251 ] )
      case oSerie:VarGet() == "I"
         oNombreSerie:cText( aTmp[ 252 ] )
      case oSerie:VarGet() == "J"
         oNombreSerie:cText( aTmp[ 253 ] )
      case oSerie:VarGet() == "K"
         oNombreSerie:cText( aTmp[ 254 ] )
      case oSerie:VarGet() == "L"
         oNombreSerie:cText( aTmp[ 255 ] )
      case oSerie:VarGet() == "M"
         oNombreSerie:cText( aTmp[ 256 ] )
      case oSerie:VarGet() == "N"
         oNombreSerie:cText( aTmp[ 257 ] )
      case oSerie:VarGet() == "O"
         oNombreSerie:cText( aTmp[ 258 ] )
      case oSerie:VarGet() == "P"
         oNombreSerie:cText( aTmp[ 259 ] )
      case oSerie:VarGet() == "Q"
         oNombreSerie:cText( aTmp[ 260 ] )
      case oSerie:VarGet() == "R"
         oNombreSerie:cText( aTmp[ 261 ] )
      case oSerie:VarGet() == "S"
         oNombreSerie:cText( aTmp[ 262 ] )
      case oSerie:VarGet() == "T"
         oNombreSerie:cText( aTmp[ 263 ] )
      case oSerie:VarGet() == "U"
         oNombreSerie:cText( aTmp[ 264 ] )
      case oSerie:VarGet() == "V"
         oNombreSerie:cText( aTmp[ 265 ] )
      case oSerie:VarGet() == "W"
         oNombreSerie:cText( aTmp[ 266 ] )
      case oSerie:VarGet() == "X"
         oNombreSerie:cText( aTmp[ 267 ] )
      case oSerie:VarGet() == "Y"
         oNombreSerie:cText( aTmp[ 268 ] )
      case oSerie:VarGet() == "Z"
         oNombreSerie:cText( aTmp[ 269 ] )
   end

RETURN ( .T. )



STATIC FUNCTION ValidRutaContabilidad( aGet, aTmp )



   if lAplicacionContaplus()

      ChkRuta( aTmp[ 51 ], .T. )

   else

      if !empty( aTmp[ 51 ] ) .AND. !IsDir( aTmp[ 51 ] )
         msgStop( "Directorio " + alltrim( aTmp[ 51 ] ) + " no existe." )
         RETURN .F.
      end

   end

RETURN ( .T. )



FUNCTION SelectDelegacion()

   local oDlg
   local oBrw
   local oBmp
   local dbfDlg
   local oGetBuscar
   local cGetBuscar     := Space( 100 )
   local oCbxOrden
   local cCbxOrden      := "Código"





   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDlg ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   if lAIS()
      ( dbfDlg )->( AdsSetAOF( "Field->cCodEmp == '" + cCodEmp() + "'" ) )
   else
      ( dbfDlg )->( dbSetFilter( {|| Field->cCodEmp == cCodEmp() }, "Field->cCodEmp == cCodEmp()" ) )
   end

   ( dbfDlg )->( dbGoTop() )








   oDlg = TDialog():New(,,,, "Seleccionar delegación", "SelectItem",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oBmp := TBitmap():ReDefine( 300, "flag_eu_48_alpha",, oDlg,,, .F., .F.,,, .F.,,, .T. )






      oGetBuscar := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetBuscar, cGetBuscar:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfDlg, nil, nil, .F. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrden := TComboBox():ReDefine( 110, { | u | If( PCount()==0, cCbxOrden, cCbxOrden:= u ) }, { "Código", "Nombre" }, oDlg,,, {|Self|( ( dbfDlg )->( OrdSetFocus( oCbxOrden:nAt ) ), oBrw:Refresh(), oGetBuscar:SetFocus() )},,,, .F.,,,,,,, "oCbxOrden",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfDlg

      oBrw:nMarqueeStyle   := 5

      oBrw:CreateFromResource( 200 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodDlg"
         :bEditValue       := {|| ( dbfDlg )->cCodDlg }
         :nWidth           := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomDlg"
         :bEditValue       := {|| ( dbfDlg )->cNomDlg }
         :nWidth           := 160
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      Application():setDelegacion( ( dbfDlg )->cCodDlg, ( dbfDlg )->Uuid )
      cDlgUsr( ( dbfDlg )->cCodDlg )
   end

   if !empty( dbfDlg )
      ( dbfDlg )->( dbCloseArea() )
   end

   if !empty( oBmp )
      oBmp:End()
   end

RETURN ( oDlg:nResult == 1 )



FUNCTION aSerializedEmpresas()

RETURN ( aFullEmpresas( .T., .T. ) )



FUNCTION aFullEmpresas( lExcludeGroup, lSerialize )

   local dbfEmp
   local aFullEmpresas     := {}

   If( lExcludeGroup == nil, lExcludeGroup := .F., ) ;
   If( lSerialize == nil, lSerialize := .F., ) ;

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Empresa.DBF" ), ( cCheckArea( "Empresa", @dbfEmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "Empresa.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   while !( dbfEmp )->( eof() )

      if !( ( dbfEmp )->lGrupo .AND. lExcludeGroup )
         if lSerialize
            aAdd( aFullEmpresas, ( dbfEmp )->CodEmp + " - " + alltrim( ( dbfEmp )->cNombre ) )
         else
            aAdd( aFullEmpresas, { ( dbfEmp )->CodEmp, ( dbfEmp )->cNombre, ( dbfEmp )->lGrupo } )
         end
      end

      ( dbfEmp )->( dbSkip() )

   end

   ( dbfEmp )->( dbCloseArea() )

RETURN ( aFullEmpresas )



STATIC FUNCTION TestConexionDatabase()

   local lConected   := .F.

   if !( TComercio:isValidNameWebToExport() )
      RETURN .F.
   end

   if !( TComercio:TComercioConfig:setCurrentWebName( TComercio:getWebToExport() ) )
      RETURN .F.
   end

   msgRun( "Intentando conectar con base de datos", "Espere por favor...", {|| lConected  :=  TComercio:prestaShopConnect() } )

   if lConected
      msgInfo( "Conexión con base de datos realizada correctamente" )
      TComercio:prestashopDisConnect()
   else




      msgStop( "Servidor : "  + TComercio:TComercioConfig:getMySqlServer()   + Chr(13)+Chr(10) +  "User : "      + TComercio:TComercioConfig:getMySqlUser()     + Chr(13)+Chr(10) +  "Database : "  + TComercio:TComercioConfig:getMySqlDatabase() + Chr(13)+Chr(10) +  "Port : "      + alltrim( str( TComercio:TComercioConfig:getMySqlPort() ) ), "Error al conectar con la base de datos" )
   end

RETURN ( .T. )



STATIC FUNCTION TestConexionFTP()

   local lConected   := .F.

   if !( TComercio:isValidNameWebToExport() )
      RETURN .F.
   end

   if !( TComercio:TComercioConfig:setCurrentWebName( TComercio:getWebToExport() ) )
      RETURN .F.
   end

   msgRun( "Intentando conectar con servidor FTP", "Espere por favor...", {|| TComercio:buildFTP(), lConected := TComercio:oFtp:CreateConexion() } )

   if lConected
      msgInfo( "Conexión servidor FTP realizada correctamente" )
      TComercio:oFtp:EndConexion()
   else
      msgStop( "Error al conectar con servidor FTP" )
   end

RETURN ( .T. )



Function arrayEmpresa( cCodEmpresa, nVista )

   local aEmpresa    := {}
   local oBlock
   local oError

   msgInfo( "arrayEmpresa" )




      MsgInfo( nVista, "nVista" )

      TDataCenter():GetAllTables( "Tables" )

      browse( D():Empresa( nVista ) )

      ( D():Empresa( nVista ) )->( OrdSetFocus( "CODEMP" ) )

      if ( D():Empresa( nVista ) )->( dbSeek( cCodEmpresa ) )
         aEmpresa       := dbScatter( D():Empresa( nVista ) )
      end










Return aEmpresa



Function cPicReq()

   local nDec  := ConfiguracionesEmpresaModel():getNumeric( "nDecimalesRE", 2 )
   local cPic  := "@E 999."

   cPic        += Replicate( "9", nDec )

Return cPic
