#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\EmpresasModel.prg"
_HB_CLASS EmpresasModel ; function EmpresasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EmpresasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @EmpresasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "Empresa" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER UpdateEmpresaCodigoEmpresa(); oClass:AddMethod( "UpdateEmpresaCodigoEmpresa", @EmpresasModel_UpdateEmpresaCodigoEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoActiva(); oClass:AddMethod( "getCodigoActiva", @EmpresasModel_getCodigoActiva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoGrupo( cCodigoEmpresa); oClass:AddMethod( "getCodigoGrupo", @EmpresasModel_getCodigoGrupo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRegistrosActivos(); oClass:AddMethod( "getRegistrosActivos", @EmpresasModel_getRegistrosActivos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPrimera(); oClass:AddMethod( "getPrimera", @EmpresasModel_getPrimera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoGrupoCliente(); oClass:AddInline( "getCodigoGrupoCliente", {|Self, cCodigoEmpresa | ( ( Self ) ), ( ::getCodigoGrupoCampoLogico( cCodigoEmpresa, "lGrpCli" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoGrupoProveedor(); oClass:AddInline( "getCodigoGrupoProveedor", {|Self, cCodigoEmpresa | ( ( Self ) ), ( ::getCodigoGrupoCampoLogico( cCodigoEmpresa, "lGrpPrv" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoGrupoArticulo(); oClass:AddInline( "getCodigoGrupoArticulo", {|Self, cCodigoEmpresa | ( ( Self ) ), ( ::getCodigoGrupoCampoLogico( cCodigoEmpresa, "lGrpArt" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoGrupoAlmacen(); oClass:AddInline( "getCodigoGrupoAlmacen", {|Self, cCodigoEmpresa | ( ( Self ) ), ( ::getCodigoGrupoCampoLogico( cCodigoEmpresa, "lGrpAlm" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoGrupoCampoLogico( cCodigoEmpresa, cCampoLogico); oClass:AddMethod( "getCodigoGrupoCampoLogico", @EmpresasModel_getCodigoGrupoCampoLogico(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER scatter( cCodigoEmpresa); oClass:AddMethod( "scatter", @EmpresasModel_scatter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DeleteEmpresa( cCodigoEmpresa); oClass:AddMethod( "DeleteEmpresa", @EmpresasModel_DeleteEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aNombres(); oClass:AddMethod( "aNombres", @EmpresasModel_aNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER aNombresSeleccionables(); oClass:AddInline( "aNombresSeleccionables", {|Self | ( ( Self ) ), ( hb_AIns(::aNombres(),1,"", .T.) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidFromNombre(); oClass:AddInline( "getUuidFromNombre", {|Self, cNombre | ( ( Self ) ), ( ::getField( "Uuid", "cNombre", cNombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromUuid(); oClass:AddInline( "getNombreFromUuid", {|Self, cUuid | ( ( Self ) ), ( ::getField( "cNombre", "Uuid", cUuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCodigoFromNombre(); oClass:AddInline( "getCodigoFromNombre", {|Self, cNombre | ( ( Self ) ), ( ::getField( "CodEmp", "cNombre", cNombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreFromCodigo(); oClass:AddInline( "getNombreFromCodigo", {|Self, cCodigo | ( ( Self ) ), ( ::getField( "cNombre", "CodEmp", cCodigo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EmpresasModel ;



static FUNCTION EmpresasModel_UpdateEmpresaCodigoEmpresa( ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm

   local cSql  := "UPDATE " + ::getTableName() + " " +  "SET CodEmp = CONCAT( '00', TRIM( CodEmp ) ) WHERE ( LENGTH( CodEmp ) < 4 )"

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION EmpresasModel_getCodigoGrupo( cCodigoEmpresa ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm
   local cSql  := "SELECT cCodGrp FROM " + ::getTableName() + " WHERE CodEmp = '" + alltrim( cCodigoEmpresa ) + "'"

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->cCodGrp )
   end

RETURN ( "" )



static FUNCTION EmpresasModel_getCodigoActiva( ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm
   local cSql  := "SELECT CodEmp FROM " + ::getTableName() + " WHERE lActiva"

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->CodEmp )
   end

RETURN ( "" )



static FUNCTION EmpresasModel_getRegistrosActivos( ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm
   local cSql  := "SELECT Count(*) AS Counter FROM " + ::getTableName()

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->Counter )
   end

RETURN ( 0 )



static FUNCTION EmpresasModel_getPrimera( ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm
   local cSql  := "SELECT TOP 1 CodEmp FROM " + ::getTableName() + " WHERE NOT lGrupo"

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->CodEmp )
   end

RETURN ( "" )



static FUNCTION EmpresasModel_getCodigoGrupoCampoLogico( cCodigoEmpresa, cCampoLogico ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm
   local cSql



   cSql              := "SELECT cCodGrp FROM " + ::getTableName()   + " " +  "WHERE CodEmp = " + quoted( cCodigoEmpresa )    + " " +  "AND " + cCampoLogico + " = TRUE"

   if ::ExecuteSqlStatement( cSql, @cStm )
      if !empty( ( cStm )->cCodGrp )
         cCodigoEmpresa    := ( cStm )->cCodGrp
      end
   end

RETURN ( cCodigoEmpresa )



static FUNCTION EmpresasModel_scatter( cCodigoEmpresa ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm
   local cSql  := "SELECT * FROM " + ::getTableName() + " WHERE CodEmp = " + quoted( cCodigoEmpresa )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( dbScatter( cStm ) )
   end

RETURN ( {} )



static FUNCTION EmpresasModel_DeleteEmpresa( cCodigoEmpresa ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm

   local cSql  := "DELETE FROM " + ::getTableName() + " " +  "WHERE CodEmp = " + quoted( cCodigoEmpresa )

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION EmpresasModel_aNombres( ) ; local Self AS CLASS EmpresasModel := QSelf() AS CLASS EmpresasModel

   local cStm
   local aEmp  := {}
   local cSql  := "SELECT * FROM " + ::getTableName()

   if !::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( aEmp )
   endif

   while !( cStm )->( eof() )
      aadd( aEmp, alltrim( ( cStm )->cNombre ) )
      ( cStm )->( dbskip() )
   end

RETURN ( aEmp )







_HB_CLASS ConfiguracionesEmpresaModel ; function ConfiguracionesEmpresaModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ConfiguracionesEmpresaModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @ConfiguracionesEmpresaModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "ConfEmp" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InsertFromHashSql( hHash); oClass:AddMethod( "InsertFromHashSql", @ConfiguracionesEmpresaModel_InsertFromHashSql(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lExisteUuid( uuid); oClass:AddMethod( "lExisteUuid", @ConfiguracionesEmpresaModel_lExisteUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValue(); oClass:AddMethod( "getValue", @ConfiguracionesEmpresaModel_getValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setValue(); oClass:AddMethod( "setValue", @ConfiguracionesEmpresaModel_setValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNumeric( name, default); oClass:AddMethod( "getNumeric", @ConfiguracionesEmpresaModel_getNumeric(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getChar(); oClass:AddInline( "getChar", {|Self, name, default | ( ( Self ) ), ( ::getValue( name, default ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLogic(); oClass:AddMethod( "getLogic", @ConfiguracionesEmpresaModel_getLogic(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ConfiguracionesEmpresaModel ;



static FUNCTION ConfiguracionesEmpresaModel_InsertFromHashSql( hHash ) ; local Self AS CLASS ConfiguracionesEmpresaModel := QSelf() AS CLASS ConfiguracionesEmpresaModel

   local cStm     := "InsertFromHashSql"
   local cSql     := ""

   if !Empty( hHash ) .AND. !::lExisteUuid( Str( hGet( hHash, "id" ) ) )

      cSql         := "INSERT INTO " + ::getTableName()
      cSql         += " ( cCodEmp, cName, cValue, uuid ) VALUES "
      cSql         += " ( " + quoted( hGet( hHash, "empresa" ) )
      cSql         += ", " + quoted( hGet( hHash, "name" ) )
      cSql         += ", " + quoted( hGet( hHash, "value" ) )
      cSql         += ", " + quoted( Str( hGet( hHash, "id" ) ) ) + " )"

      ::ExecuteSqlStatement( cSql, @cStm )

   end

Return ( nil )



static FUNCTION ConfiguracionesEmpresaModel_lExisteUuid( uuid ) ; local Self AS CLASS ConfiguracionesEmpresaModel := QSelf() AS CLASS ConfiguracionesEmpresaModel

   local cStm     := "lExisteUuid"
   local cSql     := ""

   cSql     := "SELECT * FROM " + ::getTableName() + " WHERE uuid = " + quoted( uuid )

      if ::ExecuteSqlStatement( cSql, @cStm )

         if ( cStm )->( RecCount() ) > 0
            Return ( .T. )
         end

      end

Return ( .F. )



static FUNCTION ConfiguracionesEmpresaModel_getValue( name, default ) ; local Self AS CLASS ConfiguracionesEmpresaModel := QSelf() AS CLASS ConfiguracionesEmpresaModel

   local cStm        := "getValueConfigEmp"


   local cSentence   := "SELECT cValue FROM " + ::getTableName()            + space( 1 ) +  "WHERE cCodEmp = " + quoted( cCodEmp() )        + space( 1 ) +  "AND cName = " + quoted( name )

   if ::ExecuteSqlStatement( cSentence, @cStm )

      if ( cStm )->( RecCount() ) > 0
         ( cStm )->( dbGoTop() )
         Return ( ( cStm )->cValue )
      end

   end

RETURN ( default )



static FUNCTION ConfiguracionesEmpresaModel_getNumeric( name, default ) ; local Self AS CLASS ConfiguracionesEmpresaModel := QSelf() AS CLASS ConfiguracionesEmpresaModel

   local uValue      := ::getValue( name, default )

   if !hb_isnumeric( uValue )
      RETURN ( val( uValue ) )
   end

RETURN ( uValue )



static FUNCTION ConfiguracionesEmpresaModel_getLogic( name, default ) ; local Self AS CLASS ConfiguracionesEmpresaModel := QSelf() AS CLASS ConfiguracionesEmpresaModel

   local cValue

   if !hb_islogical( default )
      default  := .F.
   end

   cValue      := ::getValue( name )

   if !empty( cValue )
      RETURN ( ".T." $ upper( cValue ) )
   end

RETURN ( default )



static FUNCTION ConfiguracionesEmpresaModel_setValue( name, value ) ; local Self AS CLASS ConfiguracionesEmpresaModel := QSelf() AS CLASS ConfiguracionesEmpresaModel

   local id
   local cStm1    := "SetValue1"
   local cStm2    := "SetValue2"
   local cSentence

   value          := cValToStr( value )



   cSentence      := "SELECT uuid FROM " + ::getTableName()                + space( 1 )   +  "WHERE cCodEmp = " + quoted( cCodEmp() )           + space( 1 )   +  "AND cName = " + quoted( name )

   if ::ExecuteSqlStatement( cSentence, @cStm1 )

      if ( cStm1 )->( RecCount() ) > 0

         ( cStm1 )->( dbGoTop() )

         id       := ( cStm1 )->uuid

      end

   end

   if empty( id )










      cSentence   := "INSERT INTO " + ::getTableName()                  + space( 1 )   +  "( cCodEmp,"                                       + space( 1 )   +  "cName,"                                        + space( 1 )   +  "cValue,"                                       + space( 1 )   +  "uuid )"                                        + space( 1 )   +  "VALUES"                                           + space( 1 )   +  "( " + quoted( cCodEmp() ) + ","                   + space( 1 )   +  quoted( name ) + ","                            + space( 1 )   +  quoted( value ) + ","                           + space( 1 )   +  quoted( win_uuidcreatestring() ) + " )"

   else




      cSentence   := "UPDATE " + ::getTableName()                       + space( 1 )   +  "SET"                                              + space( 1 )   +  "cValue = " + toSQLString( value )              + space( 1 )   +  "WHERE uuid = " + quoted( id )

   end

   ::ExecuteSqlStatement( cSentence, @cStm2 )

RETURN ( Self )
