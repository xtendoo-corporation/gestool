#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Entidades.prg"
_HB_CLASS TEntidades ; function TEntidades ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TEntidades", iif( .T., { @TMant() }, { @HBObject() } ), @TEntidades() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_office_building2_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )
   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 197 + ( 227 * 256 ) + ( 9 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TEntidades_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TEntidades_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TEntidades_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave( nMode); oClass:AddMethod( "lPreSave", @TEntidades_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDireccion(); oClass:AddInline( "getDireccion", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cDireccion" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDescripcion(); oClass:AddInline( "getDescripcion", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cDesEnt"    ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cNombre"    ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getGLNFisico(); oClass:AddInline( "getGLNFisico", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cGLNFisico" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getPntLogico(); oClass:AddInline( "getPntLogico", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cPntLogico" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDireccion(); oClass:AddInline( "getDireccion", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cDireccion" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCodigoPostal(); oClass:AddInline( "getCodigoPostal", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cCodPostal" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getPoblacion(); oClass:AddInline( "getPoblacion", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cPoblacion" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getProvincia(); oClass:AddInline( "getProvincia", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cProvincia" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getPais(); oClass:AddInline( "getPais", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cPais"      ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCodigoPais(); oClass:AddInline( "getCodigoPais", {|Self, id | ( ( Self ) ), ( getPaisCode( oRetFld( id, ::oDbf, "cPais" ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTelefono(); oClass:AddInline( "getTelefono", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cTelefono"  ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getWeb(); oClass:AddInline( "getWeb", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cWeb"       ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMail(); oClass:AddInline( "getMail", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cMail"      ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getContacto(); oClass:AddInline( "getContacto", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cContacto"  ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCodigoINE(); oClass:AddInline( "getCodigoINE", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cCodigoINE" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCNOCNAE(); oClass:AddInline( "getCNOCNAE", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cCNOCNAE"   ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getOtros(); oClass:AddInline( "getOtros", {|Self, id | ( ( Self ) ), ( oRetFld( id, ::oDbf, "cOtros"     ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TEntidades ;



static FUNCTION TEntidades_OpenFiles( lExclusive ) ; local Self AS CLASS TEntidades := QSelf() AS CLASS TEntidades

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen          := .F.

      ::CloseFiles()

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError )  )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TEntidades_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TEntidades := QSelf() AS CLASS TEntidades

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   oDbf := DbfServer( "Entidades.Dbf", "Entidades" ):New( "Entidades.Dbf", "Entidades", ( cDriver ), "Entidades", ( cPath ) )

      oDbf:AddField( "cCodEnt", "C", 14, 0,,,,, "Código", .F., 100, .F., {} )
      oDbf:AddField( "cDesEnt", "C", 60, 0,,,,, "Descripción", .F., 400, .F., {} )
      oDbf:AddField( "cNombre", "C", 60, 0,,,,, "Nombre", .F., 400, .F., {} )
      oDbf:AddField( "cGLNFisico", "C", 60, 0,,,,, "GLN físico", .F.,, .T., {} )
      oDbf:AddField( "cPntLogico", "C", 60, 0,,,,, "Punto lógico operacional", .F.,, .T., {} )
      oDbf:AddField( "cDireccion", "C", 160, 0,,,,, "Dirección", .F., 400, .F., {} )
      oDbf:AddField( "cCodPostal", "C", 15, 0,,,,, "Código postal", .F., 100, .F., {} )
      oDbf:AddField( "cPoblacion", "C", 100, 0,,,,, "Población", .F., 200, .F., {} )
      oDbf:AddField( "cProvincia", "C", 100, 0,,,,, "Provincia", .F., 200, .F., {} )
      oDbf:AddField( "cPais", "C", 100, 0,,,,, "País", .F., 200, .F., {} )
      oDbf:AddField( "cTelefono", "C", 20, 0,,,,, "Teléfono", .F.,, .T., {} )
      oDbf:AddField( "cWeb", "C", 200, 0,,,,, "Web", .F.,, .T., {} )
      oDbf:AddField( "cMail", "C", 100, 0,,,,, "Correo electrónico", .F.,, .T., {} )
      oDbf:AddField( "cContacto", "C", 200, 0,,,,, "Contacto", .F.,, .T., {} )
      oDbf:AddField( "cCodigoINE", "C", 20, 0,,,,, "Código INE", .F.,, .T., {} )
      oDbf:AddField( "cCNOCNAE", "C", 20, 0,,,,, "CNO/CNAE", .F.,, .T., {} )
      oDbf:AddField( "cOtros", "C", 200, 0,,,,, "Otros", .F.,, .T., {} )

      oDbf:AddIndex( "cCodEnt", "Entidades.Cdx", "cCodEnt",,, .F., .F., "Código",,, .T., .F. )
      oDbf:AddIndex( "cDesEnt", "Entidades.Cdx", "cDesEnt",,, .F., .F., "Descripción",,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TEntidades_Resource( nMode ) ; local Self AS CLASS TEntidades := QSelf() AS CLASS TEntidades

   local oDlg
   local oGet

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "entidades", "Entidades",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cCodEnt, ::oDbf:cCodEnt:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cDesEnt, ::oDbf:cDesEnt:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:cNombre, ::oDbf:cNombre:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:cGLNFisico, ::oDbf:cGLNFisico:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbf:cPntLogico, ::oDbf:cPntLogico:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::oDbf:cDireccion, ::oDbf:cDireccion:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oDbf:cCodPostal, ::oDbf:cCodPostal:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::oDbf:cPoblacion, ::oDbf:cPoblacion:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oDbf:cProvincia, ::oDbf:cProvincia:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TComboBox():ReDefine( 200, { | u | If( PCount()==0, ::oDbf:cPais, ::oDbf:cPais:= u ) }, aPaisesValues(), oDlg,,,,,,, .F., {||     ( nMode <> 3 )},,,,,,,,,,,,, )




      TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::oDbf:cTelefono, ::oDbf:cTelefono:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 220, { | u | If( PCount()==0, ::oDbf:cWeb, ::oDbf:cWeb:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 230, { | u | If( PCount()==0, ::oDbf:cMail, ::oDbf:cMail:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 240, { | u | If( PCount()==0, ::oDbf:cContacto, ::oDbf:cContacto:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 250, { | u | If( PCount()==0, ::oDbf:cCodigoINE, ::oDbf:cCodigoINE:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 260, { | u | If( PCount()==0, ::oDbf:cCNOCNAE, ::oDbf:cCNOCNAE:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 270, { | u | If( PCount()==0, ::oDbf:cOtros, ::oDbf:cOtros:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( if( ::lPreSave( nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| if( ::lPreSave( nMode ), oDlg:end( 1 ), ) } )
   end

   oDlg:bStart := { || oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TEntidades_lPreSave( nMode ) ; local Self AS CLASS TEntidades := QSelf() AS CLASS TEntidades

   local cErrors  := ""

   if ( nMode == 1 .OR. nMode == 4 )
      if ::oDbf:SeekInOrd( ::oDbf:cCodEnt, "cCodEnt" )
         cErrors  += "Código ya existe " + Rtrim( ::oDbf:cCodEnt ) + Chr(13)+Chr(10)
      end
   end

   if Empty( ::oDbf:cDesEnt )
      cErrors  += "La descripción de la entidad no puede estar vacía." + Chr(13)+Chr(10)
   end

   if Empty( ::oDbf:cDireccion )
      cErrors  += "La dirección de la entidad no puede estar vacía." + Chr(13)+Chr(10)
   end

   if Empty( ::oDbf:cCodPostal )
      cErrors  += "El código postal de la entidad no puede estar vacío." + Chr(13)+Chr(10)
   end

   if Empty( ::oDbf:cPoblacion )
      cErrors  += "La población de la entidad no puede estar vacío." + Chr(13)+Chr(10)
   end

   if Empty( ::oDbf:cProvincia )
      cErrors  += "La provincia de la entidad no puede estar vacía." + Chr(13)+Chr(10)
   end

   if Empty( ::oDbf:cPais )
      cErrors  += "El país de la entidad no puede estar vacío." + Chr(13)+Chr(10)
   end

   if !empty(cErrors)
      msgStop( cErrors )
      Return .F.
   end

Return .T.
