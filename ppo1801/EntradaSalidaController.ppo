#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\EntradaSalidaController.prg"
_HB_CLASS EntradaSalidaController ; function EntradaSalidaController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EntradaSalidaController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @EntradaSalidaController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER { oDocumentosController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDocumentosController"}, .F. )

   _HB_MEMBER { oCajasController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCajasController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @EntradaSalidaController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @EntradaSalidaController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EntradaSalidaController ;



static FUNCTION EntradaSalidaController_New( ) ; local Self AS CLASS EntradaSalidaController := QSelf() AS CLASS EntradaSalidaController

   ::Super:New()

   ::cTitle                      := "Entradas y salidas"

   ::cName                       := "entradas_salidas"



   ::hImage                      := {  "16" => "gc_cash_register_refresh_16", "32" => "gc_cash_register_refresh_32", "48" => "gc_cash_register_refresh_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLEntradaSalidaModel():New( self )

   ::oBrowseView                    := EntradaSalidaBrowseView():New( self )

   ::oDialogView                    := EntradaSalidaView():New( self )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oDocumentosController          := DocumentosController():New( self, ::oModel:cTableName )

   ::oValidator                     := EntradaSalidaValidator():New( self, ::oDialogView )

   ::oCajasController               := CajasController():New( self )

   ::oRepository                    := EntradaSalidaRepository():New( self )

   ::oGetSelector                   := GetSelector():New( self )

RETURN ( Self )



static FUNCTION EntradaSalidaController_End( ) ; local Self AS CLASS EntradaSalidaController := QSelf() AS CLASS EntradaSalidaController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oCamposExtraValoresController:End()

   ::oDocumentosController:End()

   ::oCajasController:End()

   ::oRepository:End()

   ::Super:End()

RETURN ( Self )











_HB_CLASS EntradaSalidaBrowseView ; function EntradaSalidaBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EntradaSalidaBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @EntradaSalidaBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @EntradaSalidaBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EntradaSalidaBrowseView ;



static FUNCTION EntradaSalidaBrowseView_addColumns( ) ; local Self AS CLASS EntradaSalidaBrowseView := QSelf() AS CLASS EntradaSalidaBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "tipo"
      :cHeader             := "Tipo"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "tipo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "sesion"
      :cHeader             := "Sesión"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "sesion" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo_caja"
      :cHeader             := "Código Caja"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo_caja" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

  with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre_caja"
      :cHeader             := "Nombre caja"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre_caja" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS EntradaSalidaView ; function EntradaSalidaView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EntradaSalidaView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @EntradaSalidaView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER { oTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTipo"}, .F. )

   _HB_MEMBER { aTipo } ; oClass:AddMultiData(, { "Entrada", "Salida" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTipo"}, .F. )

   _HB_MEMBER StartActivate(); oClass:AddMethod( "StartActivate", @EntradaSalidaView_StartActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @EntradaSalidaView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EntradaSalidaView ;



static FUNCTION EntradaSalidaView_Activate( ) ; local Self AS CLASS EntradaSalidaView := QSelf() AS CLASS EntradaSalidaView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "Entrada o salida de caja", "ENTRADA_SALIDA",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   ::oTipo := TComboBox():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "tipo" ], ::oController:oModel:hBuffer[ "tipo" ]:= u ) }, ::aTipo, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},,,,,, "::oTipo",,,,,,, )







   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "importe" ], ::oController:oModel:hBuffer[ "importe" ]:= u ) }, ::oDialog,, "@E 9999999.999", {||       ( ::oController:validate( "importe" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "sesion" ], ::oController:oModel:hBuffer[ "sesion" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )

   ::oController:oCajasController:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "caja_uuid" ], ::oController:oModel:hBuffer[ "caja_uuid" ]:= u ) } )

   ::oController:oCajasController:oGetSelector:setEvent( "validated", {|| ::CajasControllerValidated() } )

   ::oController:oCajasController:oGetSelector:Activate( 140, 141, ::oDialog )








  TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "fecha_hora" ], ::oController:oModel:hBuffer[ "fecha_hora" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )
      ::redefineExplorerBar( 160 )





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   ::oDialog:bStart  := {|| ::StartActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )


RETURN ( ::oDialog:nResult )



static FUNCTION EntradaSalidaView_StartActivate( ) ; local Self AS CLASS EntradaSalidaView := QSelf() AS CLASS EntradaSalidaView

   local oPanel                  := ::oExplorerBar:AddPanel( "Datos relacionados", nil, 1 )



   oPanel:AddLink(   "Campos extra...", {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }, ::oController:oCamposExtraValoresController:getImage( "16" ) )



   oPanel:AddLink(   "Documentos...", {|| ::oController:oDocumentosController:activateDialogView() }, ::oController:oDocumentosController:getImage( "16" ) )

   ::oController:oCajasController:oGetSelector:Start()

RETURN ( self )







_HB_CLASS EntradaSalidaValidator ; function EntradaSalidaValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EntradaSalidaValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @EntradaSalidaValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @EntradaSalidaValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EntradaSalidaValidator ;



static FUNCTION EntradaSalidaValidator_getValidators( ) ; local Self AS CLASS EntradaSalidaValidator := QSelf() AS CLASS EntradaSalidaValidator




   ::hValidators  := {  "nombre" =>                {  "required"           => "El nombre es un dato requerido"    , "unique"             => "El nombre introducido ya existe"   }, "tipos"  =>                {  "required"           => "El tipo es un datos requerido"     }, "Importe"  =>              {  "required"           => "El importe es un datos requerido"  } }
RETURN ( ::hValidators )










_HB_CLASS SQLEntradaSalidaModel ; function SQLEntradaSalidaModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLEntradaSalidaModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLEntradaSalidaModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "cajas_entradas_salidas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLEntradaSalidaModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getCajaUuidAttribute(); oClass:AddInline( "getCajaUuidAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), space( 40 ), ::oController:oCajasController:oModel():getCodigoWhereUuid( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setCajaUuidAttribute(); oClass:AddInline( "setCajaUuidAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), "", ::oController:oCajasController:oModel():getUuidWhereCodigo( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

_HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLEntradaSalidaModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLEntradaSalidaModel ;



static FUNCTION SQLEntradaSalidaModel_getInitialSelect( ) ; local Self AS CLASS SQLEntradaSalidaModel := QSelf() AS CLASS SQLEntradaSalidaModel














   local cSelect  := "SELECT cajas_entradas_salidas.id,"                                                               + " " +  "cajas_entradas_salidas.uuid,"                                                                 + " " +  "cajas_entradas_salidas.sesion,"                                                               + " " +  "cajas_entradas_salidas.nombre,"                                                               + " " +  "cajas_entradas_salidas.fecha_hora,"                                                           + " " +  "cajas_entradas_salidas.caja_uuid,"                                                            + " " +  "cajas_entradas_salidas.nombre,"                                                               + " " +  "cajas_entradas_salidas.tipo,"                                                                 + " " +  "cajas_entradas_salidas.importe,"                                                              + " " +  "cajas_entradas_salidas.delegacion_uuid,"                                                        + " " +  "cajas.codigo as 'codigo_caja',"                                                                 + " " +  "cajas.nombre as 'nombre_caja'"                                                                  + " " +  "FROM cajas_entradas_salidas"                                                                     + " " +  "INNER JOIN cajas ON cajas_entradas_salidas.caja_uuid = cajas.uuid"  + " "

RETURN ( cSelect )



static FUNCTION SQLEntradaSalidaModel_getColumns( ) ; local Self AS CLASS SQLEntradaSalidaModel := QSelf() AS CLASS SQLEntradaSalidaModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )

   ::getEmpresaColumns()



   hset( ::hColumns, "sesion",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "fecha_hora",        {  "create"    => "TIMESTAMP"                               , "default"   => {|| hb_datetime() } }                      )


   hset( ::hColumns, "caja_uuid",         {  "create"   => "VARCHAR( 40 )"                            , "default"   => {|| space( 40 ) } }                        )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "tipo",              {  "create"     => "ENUM( 'Entrada', 'Salida' )"             , "default"    => {|| "Entrada" }  }                        )


   hset( ::hColumns, "importe",           {  "create"     => "FLOAT( 10, 3 )"                          , "default"    => {|| 0  } }                                )


   hset( ::hColumns, "delegacion_uuid",   {  "create"   => "VARCHAR( 40 )"                            , "default"   => {|| space( 40 ) } }                        )

   ::getTimeStampColumns()

RETURN ( ::hColumns )











_HB_CLASS EntradaSalidaRepository ; function EntradaSalidaRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "EntradaSalidaRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @EntradaSalidaRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLEntradaSalidaModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, Uuid | ( ( Self ) ), ( ::getColumnWhereUuid( Uuid, "nombre" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidWhereNombre(); oClass:AddInline( "getUuidWhereNombre", {|Self, cNombre | ( ( Self ) ), ( ::getUuidWhereColumn( cNombre, "nombre", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS EntradaSalidaRepository ;