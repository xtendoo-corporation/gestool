#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Services\Events.prg"
_HB_CLASS Events ; function Events ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "Events", iif( .F., { }, { @HBObject() } ), @Events() ) ) ;

   _HB_MEMBER { hEvents } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hEvents"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @Events_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @Events_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Set( cEvent, bEvent); oClass:AddMethod( "Set", @Events_Set(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Fire( cEvent); oClass:AddMethod( "Fire", @Events_Fire(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS Events ;



static FUNCTION Events_New( oSenderController ) ; local Self AS CLASS Events := QSelf() AS CLASS Events

   ::hEvents                        := {=>}

RETURN ( self )



static FUNCTION Events_End( ) ; local Self AS CLASS Events := QSelf() AS CLASS Events

   ::hEvents                        := nil

RETURN ( nil )



static FUNCTION Events_Set( cEvent, bEvent ) ; local Self AS CLASS Events := QSelf() AS CLASS Events

   cEvent   := lower( cEvent )

   if hhaskey( ::hEvents, cEvent )
      aadd( hget( ::hEvents, cEvent ), bEvent )
   else
      hset( ::hEvents, cEvent, { bEvent } )
   end

RETURN ( nil )



static FUNCTION Events_Fire( cEvent ) ; local Self AS CLASS Events := QSelf() AS CLASS Events

   local bEvent
   local lEvent   := .T.

   if empty( ::hEvents )
      RETURN ( .T. )
   end

   cEvent         := lower( cEvent )

   if !hhaskey( ::hEvents, cEvent )
      RETURN ( .T. )
   end

   if !hb_isarray( hget( ::hEvents, cEvent ) )
      RETURN ( .T. )
   end

   for each bEvent in hget( ::hEvents, cEvent )

      lEvent      := eval( bEvent )

      if hb_islogical( lEvent ) .AND. !lEvent
         RETURN ( .F. )
      end

   next

RETURN ( lEvent )
