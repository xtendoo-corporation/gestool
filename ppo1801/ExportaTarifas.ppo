#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\ExportaTarifas.prg"
memvar oAlbCliT
memvar oAlbCliL
memvar oFacCliT
memvar oFacCliL
memvar oDbfArt
memvar oDbfCli



_HB_CLASS TExportaTarifas ; function TExportaTarifas ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TExportaTarifas", iif( .T., { @TNewInfGen() }, { @HBObject() } ), @TExportaTarifas() ) ) ;

   _HB_MEMBER { nLevel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLevel"}, .F. )

   _HB_MEMBER { cFileTmp } ; oClass:AddMultiData(, Space( 1 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileTmp"}, .F. )

   _HB_MEMBER { oBrwLin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwLin"}, .F. )
   _HB_MEMBER { oBtnAdd } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnAdd"}, .F. )
   _HB_MEMBER { oBtnEdit } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnEdit"}, .F. )
   _HB_MEMBER { oBtnDel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnDel"}, .F. )
   _HB_MEMBER { oBtnUp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnUp"}, .F. )
   _HB_MEMBER { oBtnDown } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnDown"}, .F. )
   _HB_MEMBER { oBtnSave } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnSave"}, .F. )
   _HB_MEMBER { oBtnLoad } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnLoad"}, .F. )

   _HB_MEMBER { oGetAncho } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetAncho"}, .F. )
   _HB_MEMBER { oGetExpresion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetExpresion"}, .F. )
   _HB_MEMBER { oSayExpresion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayExpresion"}, .F. )

   _HB_MEMBER { oAlbaran } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbaran"}, .F. )
   _HB_MEMBER { lAlbaranes } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAlbaranes"}, .F. )
   _HB_MEMBER { oFactura } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFactura"}, .F. )
   _HB_MEMBER { lFacturas } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFacturas"}, .F. )

   _HB_MEMBER { oTreeCampos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTreeCampos"}, .F. )

   _HB_MEMBER { aTipoExpresion } ; oClass:AddMultiData(, { "Campo", "Expresión", "Constante" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTipoExpresion"}, .F. )
   _HB_MEMBER { oTipoExpresion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTipoExpresion"}, .F. )

   _HB_MEMBER { aAlign } ; oClass:AddMultiData(, { "Izquierda", "Derecha" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aAlign"}, .F. )
   _HB_MEMBER { oAlign } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlign"}, .F. )

   _HB_MEMBER { aFieldAlbT } ; oClass:AddMultiData(, aItmAlbCli(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aFieldAlbT"}, .F. )
   _HB_MEMBER { aFieldAlbL } ; oClass:AddMultiData(, aColAlbCli(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aFieldAlbL"}, .F. )
   _HB_MEMBER { aFieldFacT } ; oClass:AddMultiData(, aItmFacCli(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aFieldFacT"}, .F. )
   _HB_MEMBER { aFieldFacL } ; oClass:AddMultiData(, aColFacCli(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aFieldFacL"}, .F. )
   _HB_MEMBER { aFieldArt } ; oClass:AddMultiData(, aItmArt(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aFieldArt"}, .F. )
   _HB_MEMBER { aFieldCli } ; oClass:AddMultiData(, aItmCli(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aFieldCli"}, .F. )

   _HB_MEMBER { lChangeDbf } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lChangeDbf"}, .F. )

   _HB_MEMBER { oAlbCliT } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { oAlbCliL } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )

   _HB_MEMBER { oFacCliT } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { oFacCliL } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )

   _HB_MEMBER { cTextoFinal } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTextoFinal"}, .F. )

   _HB_MEMBER New( oMenuItem, oWnd); oClass:AddMethod( "New", @TExportaTarifas_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateTemporal(); oClass:AddMethod( "CreateTemporal", @TExportaTarifas_CreateTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Play(); oClass:AddMethod( "Play", @TExportaTarifas_Play(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TExportaTarifas_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TExportaTarifas_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TExportaTarifas_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TExportaTarifas_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InitDialog(); oClass:AddMethod( "InitDialog", @TExportaTarifas_InitDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Detalle( nMode); oClass:AddMethod( "Detalle", @TExportaTarifas_Detalle(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER EndDetalle( nMode); oClass:AddMethod( "EndDetalle", @TExportaTarifas_EndDetalle(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DelRegTemporal(); oClass:AddMethod( "DelRegTemporal", @TExportaTarifas_DelRegTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetDlgMode( lStart); oClass:AddMethod( "SetDlgMode", @TExportaTarifas_SetDlgMode(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lCargaTreeCampos(); oClass:AddMethod( "lCargaTreeCampos", @TExportaTarifas_lCargaTreeCampos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Cancelar(); oClass:AddMethod( "Cancelar", @TExportaTarifas_Cancelar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveConf(); oClass:AddMethod( "SaveConf", @TExportaTarifas_SaveConf(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadConf(); oClass:AddMethod( "LoadConf", @TExportaTarifas_LoadConf(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Exportacion(); oClass:AddMethod( "Exportacion", @TExportaTarifas_Exportacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DblClickTree(); oClass:AddMethod( "DblClickTree", @TExportaTarifas_DblClickTree(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TExportaTarifas ;



static FUNCTION TExportaTarifas_New( oMenuItem, oWndParent ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   If( oMenuItem == nil, oMenuItem := "01112", ) ;
   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   ::nLevel             := Auth():Level( oMenuItem )

   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::oDbf               := nil

RETURN Self



static FUNCTION TExportaTarifas_Play( uParam ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   if nAnd( ::nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end

   if ::OpenFiles()

      if ::lResource()
         ::Activate()
      end

   end

   ::CloseFiles()

RETURN ( Self )



static FUNCTION TExportaTarifas_CreateTemporal( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   ::cFileTmp       := cGetNewFileName( cPatTmp() + "TExp" )

   ::oDbf := DbfServer( ( ::cFileTmp ), "TExp" ):New( ( ::cFileTmp ), "TExp", ( cLocalDriver() ), "Exportación", ( cPatTmp() ) )

      ::oDbf:AddField( "NTIPO", "N", 1, 0,,,,, "Tipo", .F.,, .F., {} )
      ::oDbf:AddField( "CCAMPO", "C", 25, 0,,,,, "Campo", .F.,, .F., {} )
      ::oDbf:AddField( "CDESCRIP", "C", 100, 0,,,,, "Nombre", .F.,, .F., {} )
      ::oDbf:AddField( "CTABLA", "C", 25, 0,,,,, "Alias", .F.,, .F., {} )
      ::oDbf:AddField( "MEXPRE", "M", 10, 0,,,,, "Expresion", .F.,, .F., {} )
      ::oDbf:AddField( "NANCHO", "N", 5, 0,,,,, "Ancho", .F.,, .F., {} )
      ::oDbf:AddField( "NALIGN", "N", 1, 0,,,,, "Alineación", .F.,, .F., {} )

      ::oDbf:AddIndex( ( Str( ::oDbf:Recno() ) ), ( ::cFileTmp ), ( Str( ::oDbf:Recno() ) ),,, .F., .F., "Orden",,, .T., .F. )



RETURN ::oDbf



static FUNCTION TExportaTarifas_OpenFiles( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas





   ::CreateTemporal()

   ::oDbf:Activate( .F., .F. )

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

RETURN ( .T. )



static FUNCTION TExportaTarifas_CloseFiles( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   if ::oDbfRut <> nil .AND. ::oDbfRut:Used()
      ::oDbfRut:End()
   end

   if ::oDbfCli <> nil .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

   if ::oDbfArt <> nil .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   if ::oAlbCliT <> nil .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end

   if ::oAlbCliL <> nil .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   if ::oFacCliT <> nil .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end

   if ::oFacCliL <> nil .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end

   if ::oGrpCli <> nil
      ::oGrpCli:End()
   end

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
   end

   ::oGrpCli      := nil
   ::oDbfRut      := nil
   ::oDbfCli      := nil
   ::oDbfArt      := nil
   ::oAlbCliT     := nil
   ::oAlbCliL     := nil
   ::oFacCliT     := nil
   ::oFacCliL     := nil
   ::oDbf         := nil





   dbfErase( ::cFileTmp )

RETURN ( .T. )



static FUNCTION TExportaTarifas_lResource( cFld ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   ::lNewInforme  := .T.





   ::lCreaArrayPeriodos()

   ::oDlg = TDialog():New(,,,, "Exportación de tarifas", "EXPTARIFA",, .F.,,,,, oWnd(), .F.,,,,,, .F.,, "::oDlg", nil, )





   ::oDefIniInf( 1110, ::oDlg )

   ::oDefFinInf( 1120, ::oDlg )

   ::lPeriodoInforme( 220, ::oDlg )





   ::oImageList                     := TImageList():New( 16, 16 )
   ::oTreeRango                     := TTreeView():Redefine( 100, ::oDlg )
   ::oTreeRango:bChanged            := {|| ::ChangeRango() }
   ::oTreeRango:bLostFocus          := {|| ::ChangeValor() }

   ::oDefTodos( 140, ::oDlg )
   ::oDefDesde( 110, 111, ::oDlg )
   ::oDefHasta( 120, 121, ::oDlg )



   ::oAlbaran := TCheckBox():ReDefine( 150, { | u | If( PCount()==0, ::lAlbaranes, ::lAlbaranes:= u ) }, ::oDlg,,,,,,, .F.,, .F. )



   ::oFactura := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, ::lFacturas, ::lFacturas:= u ) }, ::oDlg,,,,,,, .F.,, .F. )





   ::lGrupoGrupoCliente()

   ::lGrupoRuta()

   ::lGrupoCliente()

   ::lGrupoArticulo()





   ::oDefSerInf( ::oDlg )





   ::oBrwLin                  := IXBrowse():New( ::oDlg )

   ::oBrwLin:bClrSel          := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   ::oBrwLin:bClrSelFocus     := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   ::oDbf:SetBrowse( ::oBrwLin )

   ::oBrwLin:nMarqueeStyle    := 5
   ::oBrwLin:lHScroll         := .F.

   ::oBrwLin:bLDblClick       := {|| ::Detalle( 2 ) }

   ::oBrwLin:CreateFromResource( 400 )

   with object ( ::oBrwLin:AddCol() )
      :cHeader                := "Tipo"
      :bEditValue             := {|| ::aTipoExpresion[ Max( ::oDbf:FieldGetByName( "nTipo" ), 1 ) ] }
      :nWidth                 := 90
   end

   with object ( ::oBrwLin:AddCol() )
      :cHeader                := "Expresión"
      :bEditValue             := {|| if( ::oDbf:FieldGetByName( "nTipo" ) > 1, ::oDbf:FieldGetByName( "mExpre" ), ::oDbf:FieldGetByName( "cDescrip" ) ) }
      :nWidth                 := 230
   end

   with object ( ::oBrwLin:AddCol() )
      :cHeader                := "Alineación"
      :bEditValue             := {|| ::aAlign[ Max( ::oDbf:FieldGetByName( "nAlign" ), 1 ) ] }
      :nWidth                 := 80
   end

   with object ( ::oBrwLin:AddCol() )
      :cHeader                := "Ancho"
      :bEditValue             := {|| ::oDbf:FieldGetByName( "nAncho" ) }
      :nWidth                 := 60
      :nDataStrAlign          := 1
      :nHeadStrAlign          := 1
   end








   ::oBtnAdd := TButton():ReDefine( 410, {||( ::Detalle( 1 ) )}, ::oDlg,,, .F.,,,, .F. )




   ::oBtnEdit := TButton():ReDefine( 420, {||( ::Detalle( 2 ) )}, ::oDlg,,, .F.,,,, .F. )




   ::oBtnDel := TButton():ReDefine( 430, {||( ::DelRegTemporal() )}, ::oDlg,,, .F.,,,, .F. )




   ::oBtnUp := TButton():ReDefine( 440, {||( DbSwapUp( ::oDbf:cAlias, ::oBrwLin ) )}, ::oDlg,,, .F.,,,, .F. )




   ::oBtnDown := TButton():ReDefine( 450, {||( DbSwapDown( ::oDbf:cAlias, ::oBrwLin ) )}, ::oDlg,,, .F.,,,, .F. )




   ::oBtnSave := TButton():ReDefine( 460, {||( ::SaveConf() )}, ::oDlg,,, .F.,,,, .F. )




   ::oBtnLoad := TButton():ReDefine( 470, {||( ::LoadConf() )}, ::oDlg,,, .F.,,,, .F. )





   ::oDefMetInf( 1160, ::oDlg )

   ::oMtrInf:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
   ::oMtrInf:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
   ::oMtrInf:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )








   ::oBtnAction := TButton():ReDefine( 500, {||( ::Exportacion() )}, ::oDlg,,, .F.,,,, .F. )





   ::oBtnCancel := TButton():ReDefine( 550, {||( ::Cancelar() )}, ::oDlg,,, .F.,,,, .T. )

RETURN ( .T. )



static FUNCTION TExportaTarifas_Activate( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local lActivate

   if !Empty( ::oDlg )

      ::oDlg:AddFastKey( 113, {|| ::Detalle( 1 ) } )
      ::oDlg:AddFastKey( 114, {|| ::Detalle( 2 ) } )
      ::oDlg:AddFastKey( 115, {|| ::DelRegTemporal() } )
      ::oDlg:AddFastKey( 116, {|| ::Exportacion() } )

      if ::lNewInforme
         ::oDlg:bStart  := {|| ::InitDialog(), ::lRecargaFecha() }
      end

      ::oDlg:Activate( , , , .T. )

      lActivate         := ( ::oDlg:nResult == 1 )

   end

RETURN ( lActivate )



static FUNCTION TExportaTarifas_InitDialog( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local n

   if !Empty( ::aSelectionRango )

      for n := 1 to len( ::aSelectionRango )
         with object ( ::oTreeRango:Add( ::aSelectionRango[ n ]:Cargo:Nombre, n - 1 ) )
            :Cargo := ::aSelectionRango[ n ]
         end
      next





      if len( ::oTreeRango:aItems ) > 0
         ::oTreeRango:Select( ::oTreeRango:aItems[ 1 ] )
         ::ChangeRango()
      end

   end

   ::oTreeRango:SetImagelist( ::oImageList )

RETURN ( Self )



static FUNCTION TExportaTarifas_Detalle( nMode ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local oDlg

   do case
      case nMode == 1

         ::oDbf:Blank()

         ::oDbf:nTipo   := 1
         ::oDbf:nAncho  := 1
         ::oDbf:nAlign  := 1

      case nMode == 2

         if ::oDbf:RecCount() == 0
            Return .F.
         end

         ::oDbf:Load()

   end

   ::lChangeDbf         := .T.

   oDlg = TDialog():New(,,,, "Exportación de tarifas", "LEXPTARIFA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




   ::oTipoExpresion := TComboBox():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:nTipo, ::oDbf:nTipo:= u ) }, ::aTipoExpresion, oDlg,,,,,,, .F.,,,,,,, "::oTipoExpresion",,,,,,, )

      ::oTipoExpresion:bChange   := { || ::SetDlgMode( .F. ) }





   ::oGetAncho := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:nAncho, ::oDbf:nAncho:= u ) }, oDlg,, "99999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )

   ::oTreeCampos                 := TTreeView():Redefine( 120, oDlg )
   ::oTreeCampos:bLDblClick      := {|| ::DblClickTree( nMode, oDlg ) }



   ::oGetExpresion := TMultiGet():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:mExpre, ::oDbf:mExpre:= u ) }, oDlg,,,,,,, .F.,, .F.,, )



   ::oSayExpresion := TSay():ReDefine( 131,, oDlg,,,, .F.,, .F., .F., )




   ::oAlign := TComboBox():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:nAlign, ::oDbf:nAlign:= u ) }, ::aAlign, oDlg,,,,,,, .F.,,,,,,, "::oAlign",,,,,,, )




   TButton():ReDefine( 500, {||( ::EndDetalle( nMode, oDlg ) )}, oDlg,,, .F.,,,, .F. )





   ::oBtnCancel := TButton():ReDefine( 550, {||( oDlg:End() )}, oDlg,,, .F.,,,, .T. )

   oDlg:bStart := {|| ::SetDlgMode( .T.) }

   oDlg:AddFastKey( 116, {|| ::EndDetalle( nMode, oDlg ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   if oDlg:nResult == 1

      do case
         case nMode == 1
            ::oDbf:Insert()

         case nMode == 2
            ::oDbf:Save()
      end

   else
      ::oDbf:Cancel()
   end

   ::oBrwLin:Refresh()

Return ( Self )



static FUNCTION TExportaTarifas_DblClickTree( nMode, oDlg ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local oSelect   := ::oTreeCampos:GetItem()

   if Len( oSelect:aItems ) <> 0
      oSelect:Expand()
   else
      ::EndDetalle( nMode, oDlg )
   end

Return ( Self )



static FUNCTION TExportaTarifas_EndDetalle( nMode, oDlg ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local cFieldSelect   := ""
   local nPos

   if ::oDbf:nAncho < 1
      msgStop( "El ancho del campo tiene que ser mayor que 1." )
      ::oGetAncho:SetFocus()
      Return .F.
   end

   if ::oDbf:nTipo <> 1

      if Empty( ::oDbf:mExpre )
         msgStop( "La expresión no puede estar vacía." )
         ::oGetExpresion:SetFocus()
         Return .F.
      end

   else

      cFieldSelect   := ::oTreeCampos:GetSelText()







      if Empty( cFieldSelect )                              .OR. AllTrim( cFieldSelect ) == "Albaranes"             .OR. AllTrim( cFieldSelect ) == "Lineas de albaranes"   .OR. AllTrim( cFieldSelect ) == "Facturas"              .OR. AllTrim( cFieldSelect ) == "Lineas de facturas"    .OR. AllTrim( cFieldSelect ) == "Artículos"             .OR. AllTrim( cFieldSelect ) == "Clientes"
         msgStop( "Tiene que seleccionar un campo." )
         ::oTreeCampos:SetFocus()
         Return .F.
      end





      do case
         case ( nPos := aScan( ::aFieldAlbT, {|a| a[5] == cFieldSelect } ) ) <> 0

            ::oDbf:cCampo   := ::aFieldAlbT[ nPos, 1 ]
            ::oDbf:cDescrip := cFieldSelect
            ::oDbf:cTabla   := "Cabecera albaran"

         case ( nPos := aScan( ::aFieldAlbL, {|a| a[5] == cFieldSelect } ) ) <> 0

            ::oDbf:cCampo   := ::aFieldAlbL[ nPos, 1 ]
            ::oDbf:cDescrip := cFieldSelect
            ::oDbf:cTabla   := "Lineas albaran"

         case ( nPos := aScan( ::aFieldFacT, {|a| a[5] == cFieldSelect } ) ) <> 0

            ::oDbf:cCampo   := ::aFieldFacT[ nPos, 1 ]
            ::oDbf:cDescrip := cFieldSelect
            ::oDbf:cTabla   := "Cabecera factura"

         case ( nPos := aScan( ::aFieldFacL, {|a| a[5] == cFieldSelect } ) ) <> 0

            ::oDbf:cCampo   := ::aFieldFacL[ nPos, 1 ]
            ::oDbf:cDescrip := cFieldSelect
            ::oDbf:cTabla   := "Lineas factura"

         case ( nPos := aScan( ::aFieldArt, {|a| a[5] == cFieldSelect } ) ) <> 0

            ::oDbf:cCampo   := ::aFieldArt[ nPos, 1 ]
            ::oDbf:cDescrip := cFieldSelect
            ::oDbf:cTabla   := "Artículos"

         case ( nPos := aScan( ::aFieldCli, {|a| a[5] == cFieldSelect } ) ) <> 0

            ::oDbf:cCampo   := ::aFieldCli[ nPos, 1 ]
            ::oDbf:cDescrip := cFieldSelect
            ::oDbf:cTabla   := "Clientes"

      end

   end

   if ::oDbf:nAlign < 1
      ::oDbf:Align          := 1
   end

   oDlg:End( 1 )

Return ( .T. )



static FUNCTION TExportaTarifas_SetDlgMode( lStart ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   If( lStart == nil, lStart := .F., ) ;

   do case
      case ::oDbf:nTipo <= 1
         ::oGetExpresion:Hide()
         ::oTreeCampos:Show()
         ::oSayExpresion:SetText( "Campo" )
         ::lCargaTreeCampos()

      case ::oDbf:nTipo == 2
         ::oGetExpresion:Show()
         ::oTreeCampos:Hide()
         ::oSayExpresion:SetText( "Expresión" )

      case ::oDbf:nTipo == 3
         ::oGetExpresion:Show()
         ::oTreeCampos:Hide()
         ::oSayExpresion:SetText( "Constante" )

   end





   if !lStart
      ::oGetExpresion:cText( "" )
   end


Return ( .T. )



static FUNCTION TExportaTarifas_DelRegTemporal( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   ::lChangeDbf   := .T.

   WinDelRec( , ::oDbf:cAlias )

   ::oBrwLin:Refresh()

Return ( .T. )



static FUNCTION TExportaTarifas_lCargaTreeCampos( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local oTree
   local aField

   if ::oTreeCampos <> nil

      ::oTreeCampos:DeleteAll()





      oTree    := ::oTreeCampos:Add( "Clientes" , 0 )

      for each aField in ::aFieldCli
         if !Empty( aField[ 5 ] )
            oTree:Add( aField[ 5 ], 1 )
         end
      next





      oTree    := ::oTreeCampos:Add( "Artículos" , 0 )

      for each aField in ::aFieldArt
         if !Empty( aField[ 5 ] )
            oTree:Add( aField[ 5 ], 1 )
         end
      next





      oTree    := ::oTreeCampos:Add( "Facturas" , 0 )

      for each aField in ::aFieldFacT
         if !Empty( aField[ 5 ] )
            oTree:Add( aField[ 5 ], 1 )
         end
      next





      oTree    := ::oTreeCampos:Add( "Lineas de facturas" , 0 )

      for each aField in ::aFieldFacL
         if !Empty( aField[ 5 ] )
            oTree:Add( aField[ 5 ], 1 )
         end
      next





      oTree    := ::oTreeCampos:Add( "Albaranes" , 0 )

      for each aField in ::aFieldAlbT
         if !Empty( aField[ 5 ] )
            oTree:Add( aField[ 5 ], 1 )
         end
      next





      oTree    := ::oTreeCampos:Add( "Lineas de albaranes" , 0 )

      for each aField in ::aFieldAlbL
         if !Empty( aField[ 5 ] )
            oTree:Add( aField[ 5 ], 1 )
         end
      next

      ::oTreeCampos:Refresh()

   end

Return ( .T. )



static FUNCTION TExportaTarifas_SaveConf( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local cGetFile
   local nHandle
   local aDir          := {}

   if ::oDbf:RecCount() == 0
      Return .F.
   end

   cGetFile      := cGetFile( "*.zip", "Seleccione el nombre del fichero a guardar" )

   if Empty( cGetFile )
      Return .F.
   end

   nHandle := fCreate( cGetFile )
   if nHandle <> -1

      if fClose( nHandle ) .AND. ( fErase( cGetFile ) == 0 )

         aDir     := Directory( ::cFileTmp + ".*" )

         ::oDbf:Close()

         hb_SetDiskZip( {|| nil } )
         aEval( aDir, { | cName, nIndex | hb_ZipFile( cGetFile, cPatTmp() + cName[ 1 ], 9 ) } )
         hb_gcAll()

         ::oDbf:ReActivate()

         msgInfo( "Documento exportado satisfactoriamente" )

      else

         MsgStop( "Error en la unidad" )

      end

   else

      MsgStop( "Ruta no válida" )

   end

   ::oBrwLin:Refresh()

Return ( .T. )



static FUNCTION TExportaTarifas_LoadConf( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local cGetFile    := cGetFile( "*.zip", "Selección de fichero" )
   local aFiles      := {}
   local cNameFile

   if Empty( cGetFile )
      Return .F.
   end





   if !file( cGetFile )
      MsgStop( "El fichero " + cGetFile + " no existe." )
      Return .F.
   end





   aFiles            := Hb_GetFilesInZip( cGetFile )

   if !Hb_UnZipFile( cGetFile, , , , cEmpTmp(), aFiles )
      MsgStop( "No se ha descomprimido el fichero " + cGetFile, "Error" )
      Return .F.
   end

   hb_gcAll()





   cNameFile         := Left( aFiles[ 1 ], At( ".", aFiles[ 1 ] ) - 1 )





   ::oDbf:Zap()
   ::oDbf:AppendFrom( cEmpTmp() + cNameFile + ".Dbf" )
   ::oDbf:ReindexAll()
   ::oDbf:GoTop()

   ::oBrwLin:Refresh()





   EraseFilesInDirectory(cEmpTmp(), cNameFile + ".*" )

   ::lChangeDbf      := .F.

Return ( .T. )



static FUNCTION TExportaTarifas_Cancelar( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas



   if ::lChangeDbf            .AND. ::oDbf:RecCount() <> 0  .AND. ApoloMsgNoYes(  "¿ Desea guardar los cambios en la configuración de la exportación ?", "Elija una opción" )

      ::SaveConf()

   end

   ::oDlg:End()

Return ( .T. )



static FUNCTION TExportaTarifas_Exportacion( ) ; local Self AS CLASS TExportaTarifas := QSelf() AS CLASS TExportaTarifas

   local nHand
   local cExpHead    := ""
   local cExpLine    := ""
   local cGetFile
   local uField
   local lFirstLine  := .T.
   local lErrorBlock := .F.

   public oAlbCliT   := ::oAlbCliT
   public oAlbCliL   := ::oAlbCliL
   public oFacCliT   := ::oFacCliT
   public oFacCliL   := ::oFacCliL
   public oDbfArt    := ::oDbfArt
   public oDbfCli    := ::oDbfCli

   if ::oDbf:RecCount() == 0
      MsgStop( "Tiene que cargar una configuración" )
      return .F.
   end

   cGetFile          := cGetFile( "*.txt", "Selección de fichero" )

   if Empty( cGetFile )
      return .F.
   end





   ::cTextoFinal     := ""

   if ::lAlbaranes





      ::oAlbCliT:OrdSetFocus( "dFecAlb" )
      ::oAlbCliL:OrdSetFocus( "nNumAlb" )
      ::oDbfArt:OrdSetFocus( "Codigo" )

      cExpHead          := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

      if !::oGrupoRuta:Cargo:Todos
         cExpHead       += ' .and. cCodRut >= "' + Rtrim( ::oGrupoRuta:Cargo:Desde ) + '" .and. cCodRut <= "' + Rtrim( ::oGrupoRuta:Cargo:Hasta ) + '"'
      end

      if !::oGrupoCliente:Cargo:Todos
         cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCodCli <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
      end

      ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )

      cExpLine          := "!lTotLin .and. !lControl"

      if !::oGrupoArticulo:Cargo:Todos
         cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
      end

      ::oAlbCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ), ::oAlbCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

      ::oAlbCliT:GoTop()

      while !::oAlbCliT:Eof()




         if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )                                         .AND. ( ::oGrupoGCliente:Cargo:Todos                                                .OR. ( cGruCli( ::oAlbCliT:cCodCli, ::oDbfCli ) >= ::oGrupoGCliente:Cargo:Desde    .AND. cGruCli( ::oAlbCliT:cCodCli, ::oDbfCli ) <= ::oGrupoGCliente:Cargo:Hasta ) )

            if ::oAlbCliL:Seek( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb )

               while ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb == ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb .AND. !::oAlbCliL:eof()

                  if ::oDbfArt:Seek( ::oAlbCliL:cRef )

                     ::oDbf:GoTop()

                     while !::oDbf:Eof()





                        do case





                           case ::oDbf:nTipo <= 1

                              do case
                                 case AllTrim( ::oDbf:cTabla )  == "Cabecera albaran"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oAlbCliT:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oAlbCliT:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                                 case AllTrim( ::oDbf:cTabla ) == "Lineas albaran"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oAlbCliL:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oAlbCliL:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                                 case AllTrim( ::oDbf:cTabla ) == "Artículos"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oDbfArt:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oDbfArt:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                                 case AllTrim( ::oDbf:cTabla ) == "Clientes"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oDbfCli:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oDbfCli:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                              end





                           case ::oDbf:nTipo == 2

                              uField               := bCheck2Block( AllTrim( ::oDbf:mExpre ), lFirstLine )

                              if uField <> nil
                                 uField            := Eval( uField )
                              else
                                 lErrorBlock       := .T.
                              end

                              if ::oDbf:nAlign <= 1

                                 ::cTextoFinal        += Padr( AllTrim( cValToText( uField ) ), ::oDbf:nAncho )

                              elseif ::oDbf:nAlign == 2

                                 ::cTextoFinal        += Padl( AllTrim( cValToText( uField ) ), ::oDbf:nAncho )

                              end





                           case ::oDbf:nTipo >= 3

                              if ::oDbf:nAlign <= 1

                                 ::cTextoFinal        += Padr( AllTrim( ::oDbf:mExpre ), ::oDbf:nAncho )

                              elseif ::oDbf:nAlign == 2

                                 ::cTextoFinal        += Padl( AllTrim( ::oDbf:mExpre ), ::oDbf:nAncho )

                              end

                        end

                        ::oDbf:Skip()

                     end

                     ::cTextoFinal                 += Chr(13)+Chr(10)

                     lFirstLine                    := .F.

                  end

                  ::oAlbCliL:Skip()

               end

            end

         end

         ::oAlbCliT:Skip()

         ::oMtrInf:AutoInc()

      end

      ::oMtrInf:AutoInc( ::oAlbCliT:Lastrec() )





      ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )

      ::oAlbCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ) )

   end

   if ::lFacturas





      ::oFacCliT:OrdSetFocus( "dFecFac" )
      ::oFacCliL:OrdSetFocus( "nNumFac" )
      ::oDbfArt:OrdSetFocus( "Codigo" )

      cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

      if !::oGrupoRuta:Cargo:Todos
         cExpHead       += ' .and. cCodRut >= "' + Rtrim( ::oGrupoRuta:Cargo:Desde ) + '" .and. cCodRut <= "' + Rtrim( ::oGrupoRuta:Cargo:Hasta ) + '"'
      end

      if !::oGrupoCliente:Cargo:Todos
         cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCodCli <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
      end

      ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )

      cExpLine          := "!lTotLin .and. !lControl"

      if !::oGrupoArticulo:Cargo:Todos
         cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
      end

      ::oFacCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ), ::oFacCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

      ::oFacCliT:GoTop()

      while !::oFacCliT:Eof()




         if lChkSer( ::oFacCliT:cSerie, ::aSer )                                          .AND. ( ::oGrupoGCliente:Cargo:Todos                                                .OR. ( cGruCli( ::oFacCliT:cCodCli, ::oDbfCli ) >= ::oGrupoGCliente:Cargo:Desde    .AND. cGruCli( ::oFacCliT:cCodCli, ::oDbfCli ) <= ::oGrupoGCliente:Cargo:Hasta ) )

            if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

               while ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac == ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac .AND. !::oFacCliL:eof()

                  if ::oDbfArt:Seek( ::oFacCliL:cRef )

                     ::oDbf:GoTop()

                     while !::oDbf:Eof()





                        do case





                           case ::oDbf:nTipo <= 1

                              do case
                                 case AllTrim( ::oDbf:cTabla )  == "Cabecera factura"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oFacCliT:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oFacCliT:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                                 case AllTrim( ::oDbf:cTabla ) == "Lineas factura"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oFacCliL:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oFacCliL:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                                 case AllTrim( ::oDbf:cTabla ) == "Artículos"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oDbfArt:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oDbfArt:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                                 case AllTrim( ::oDbf:cTabla ) == "Clientes"

                                    if ::oDbf:nAlign <= 1

                                       ::cTextoFinal     += Padr( AllTrim( cValToText( ::oDbfCli:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    elseif ::oDbf:nAlign == 2

                                       ::cTextoFinal     += Padl( AllTrim( cValToText( ::oDbfCli:FieldGetByName( AllTrim( ::oDbf:cCampo ) ) ) ), ::oDbf:nAncho )

                                    end

                              end





                           case ::oDbf:nTipo == 2

                              uField               := bCheck2Block( AllTrim( ::oDbf:mExpre ), lFirstLine )

                              if uField <> nil
                                 uField            := Eval( uField )
                              else
                                 lErrorBlock       := .T.
                              end

                              if ::oDbf:nAlign <= 1

                                 ::cTextoFinal        += Padr( AllTrim( cValToText( uField ) ), ::oDbf:nAncho )

                              elseif ::oDbf:nAlign == 2

                                 ::cTextoFinal        += Padl( AllTrim( cValToText( uField ) ), ::oDbf:nAncho )

                              end





                           case ::oDbf:nTipo >= 3

                              if ::oDbf:nAlign <= 1

                                 ::cTextoFinal        += Padr( AllTrim( ::oDbf:mExpre ), ::oDbf:nAncho )

                              elseif ::oDbf:nAlign == 2

                                 ::cTextoFinal        += Padl( AllTrim( ::oDbf:mExpre ), ::oDbf:nAncho )

                              end

                        end

                        ::oDbf:Skip()

                     end

                     ::cTextoFinal                 += Chr(13)+Chr(10)

                     lFirstLine                    := .F.

                  end

                  ::oFacCliL:Skip()

               end

            end

         end

         ::oFacCliT:Skip()

         ::oMtrInf:AutoInc()

      end

      ::oMtrInf:AutoInc( ::oFacCliT:Lastrec() )





      ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )

      ::oFacCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ) )

   end

   if !lErrorBlock





      fErase( cGetFile )
      nHand       := fCreate( cGetFile )
      fWrite( nHand, ::cTextoFinal )
      fClose( nHand )






      if ApoloMsgNoYes( "Proceso de exportación realizado con éxito" + Chr(13)+Chr(10) +  "¿ Desea abrir el fichero resultante ?", "Elija una opción." )
         ShellExecute( 0, "open", cGetFile, , , 1 )
      end

   else

      MsgStop( "Error en el proceso de exportación" )

   end





   ::oDbf:GoTop()
   ::oBrwLin:Refresh()

RETURN ( .T. )
