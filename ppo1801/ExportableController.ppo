#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ExportableController.prg"
_HB_CLASS ExportableController ; function ExportableController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ExportableController", iif( .F., { }, { @HBObject() } ), @ExportableController() ) ) ;

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER { lSelectSend } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSelectSend"}, .F. )

   _HB_MEMBER setSelectSend(); oClass:AddInline( "setSelectSend", {|Self, lSelect | ( ( Self ) ), ( ::lSelectSend := lSelect ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSelectSend(); oClass:AddInline( "getSelectSend", {|Self | ( ( Self ) ), ( ::lSelectSend ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER { lSelectRecive } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSelectRecive"}, .F. )

   _HB_MEMBER setSelectRecive(); oClass:AddInline( "setSelectRecive", {|Self, lSelect | ( ( Self ) ), ( ::lSelectRecive := lSelect ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSelectRecive(); oClass:AddInline( "getSelectRecive", {|Self | ( ( Self ) ), ( ::lSelectRecive ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER { cZipFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cZipFile"}, .F. )

   _HB_MEMBER setZipFile(); oClass:AddInline( "setZipFile", {|Self, cZipFile | ( ( Self ) ), ( ::cZipFile := cZipFile ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getZipFile(); oClass:AddInline( "getZipFile", {|Self | ( ( Self ) ), ( ::cZipFile ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @ExportableController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Load(); oClass:AddMethod( "Load", @ExportableController_Load(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Save(); oClass:AddMethod( "Save", @ExportableController_Save(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isSendData( oInternet); oClass:AddMethod( "isSendData", @ExportableController_isSendData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTitle(); oClass:AddInline( "getTitle", {|Self | ( ( Self ) ), ( ::oController:getTitle() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cText(); oClass:AddInline( "cText", {|Self | ( ( Self ) ), ( ::getTitle() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ExportableController ;



static FUNCTION ExportableController_New( oController ) ; local Self AS CLASS ExportableController := QSelf() AS CLASS ExportableController

   ::oController     := oController

RETURN ( Self )



static FUNCTION ExportableController_Save( ) ; local Self AS CLASS ExportableController := QSelf() AS CLASS ExportableController

   WritePProString( "Envio",     ::getTitle(), cValToChar( ::lSelectSend ), cIniEmpresa() )

   WritePProString( "Recepcion", ::getTitle(), cValToChar( ::lSelectRecive ), cIniEmpresa() )

RETURN ( Self )



static FUNCTION ExportableController_Load( ) ; local Self AS CLASS ExportableController := QSelf() AS CLASS ExportableController

   ::lSelectSend     := ( Upper( GetPvProfString( "Envio", ::getTitle(), cValToChar( ::lSelectSend ), cIniEmpresa() ) ) == ".T." )

   ::lSelectRecive   := ( Upper( GetPvProfString( "Recepcion", ::getTitle(), cValToChar( ::lSelectRecive ), cIniEmpresa() ) ) == ".T." )

RETURN ( Self )



static FUNCTION ExportableController_isSendData( oInternet ) ; local Self AS CLASS ExportableController := QSelf() AS CLASS ExportableController

   if !file( ::getZipFile() )
      RETURN ( .F. )
   end

   if oInternet:SendFiles( ::getZipFile() )
      oInternet:SetText( "Ficheros de artículos enviados " + ::getZipFile() )
      RETURN ( .T. )
   end

   oInternet:SetText( "ERROR fichero de artículos no enviado" )

RETURN ( .F. )
