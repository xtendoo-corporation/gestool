#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 283 ".\.\Prg\Factcli.prg"
memvar cDbf
memvar cDbfCol
memvar cDbfCob
memvar cCliente
memvar cDbfCli
memvar cDivisa
memvar cDbfDiv
memvar cFPago
memvar cDbfPgo
memvar cIva
memvar cDbfIva
memvar cAgente
memvar cDbfAge
memvar cTvta
memvar cDbfTvt
memvar cObras
memvar cDbfObr
memvar cDbfPedT
memvar cDbfPedL
memvar cDbfAlbT
memvar cDbfAlbL
memvar cDbfAlbP
memvar cDbfTrn
memvar cDbfRut
memvar cDbfCajT
memvar aImpVto
memvar aDatVto
memvar aIvaUno
memvar aIvaDos
memvar aIvaTre
memvar aIvmUno
memvar aIvmDos
memvar aIvmTre
memvar aTotTip
memvar cCtaCli
memvar nTotBrt
memvar nTotDto
memvar nTotDpp
memvar nTotUno
memvar nTotDos
memvar nTotNet
memvar nTotSup
memvar nTotIva
memvar nTotReq
memvar nTotFac
memvar nTotPag
memvar nTotImp
memvar nTotPnt
memvar nTotRet
memvar nTotCob
memvar nTotCos
memvar nTotIvm
memvar aTotIvm
memvar nTotPes
memvar nTotAge
memvar nTotTrn
memvar nTotAtp
memvar nTotRnt
memvar nTotPctRnt
memvar nVdv
memvar nVdvDivFac
memvar cPicUndFac
memvar cPouDivFac
memvar cPorDivFac
memvar cPpvDivFac
memvar nDouDivFac
memvar nRouDivFac
memvar nDpvDivFac
memvar cCodPgo
memvar nTotArt
memvar nTotCaj
memvar lFacCli
memvar lAntCli
memvar oStk
memvar nTotalDto
memvar nTotalDtoLineal

memvar lEnd
memvar nRow
memvar oInf
memvar nPagina
memvar oReport

memvar aTotIva





static oWndBrw

static nView

static oBrwIva
static oBrwPgo

static dbfRuta
static dbfTikT
static dbfTikL
static dbfTikS
static dbfPedCliE
static dbfFacRecT
static dbfFacRecL
static dbfFacRecS
static dbfAlbCliL
static dbfAlbCliT
static dbfAlbCliS
static dbfAlbCliP
static dbfAlbCliI
static dbfAlbCliD
static dbfPedCliT
static dbfPedCliL
static dbfPedCliI
static dbfPedCliD
static dbfPedCliP
static dbfPreCliT
static dbfPreCliL
static dbfPreCliI
static dbfPreCliD

static dbfFacCliI
static dbfFacCliD
static dbfFacCliS

static dbfFacPrvL
static dbfFacPrvS

static dbfSatCliT
static dbfSatCliL
static dbfSatCliI
static dbfSatCliD
static dbfSatCliS

static dbfAlbPrvL
static dbfAlbPrvS
static dbfPedCliR
static dbfProSer
static dbfMatSer

static dbfTmpLin
static dbfTmpInc
static dbfTmpDoc
static dbfTmpPgo
static dbfTmpSer
Static dbfTmpEntidades
Static dbfTmpEst

static oTlfCli
static cTlfCli

static dbfIva
static dbfClient
static dbfCliBnc
static dbfPromoT
static dbfPromoL
static dbfPromoC
static dbfAlm
static dbfCodebar
static dbfTarPreT
static dbfTarPreL
static dbfTarPreS
static dbfOferta
static dbfDiv
static dbfObrasT
static dbfFamilia
static dbfProvee
static dbfKit

static dbfArtDiv
static dbfCajT
static dbfDelega
static dbfAgeCom
static dbfEmp
static dbfFacPrvT
static dbfRctPrvL
static dbfRctPrvS
static dbfProLin
static dbfProMat
static dbfPedPrvL

static oStock
static TComercio

static oTrans

static oCtaRem
static oBandera
static oUndMedicion
static cTmpLin
static cTmpInc
static cTmpDoc
static cTmpPgo
static cTmpSer
static cTmpEnt
static cTmpEst
static oTotFacLin
static oGetTotal
static oGetTarifa
static oGetNet
static oGetTotPnt
static oGetTotIvm
static oGetPctRet
static oGetIva
static oGetReq
static oGetAge
static oGetTotPg

static oGetPes
static oGetDif
static cPouDiv
static oMenu
static oDetMenu
static cPinDiv
static cPorDiv
static cPpvDiv
static cPicUnd
static nVdvDiv
static nDouDiv
static nRouDiv
static nDpvDiv
static oNewImp
static oTipArt
static oGrpFam
static oFraPub
static oBanco
static oEntidades

static oImpuestos
static lImpuestos          := .T.

static oRiesgoCliente
static nRiesgoCliente      := 0

static oTotalLinea
static nTotalLinea         := 0
static oRentabilidadLinea
static cRentabilidadLinea  := ""
static oComisionLinea
static nComisionLinea      := 0

static nTotalRecibosPagados

static aNumAlb             := {}
static aNumSat             := {}

static oBrwLin

static oGetRnt
static cGetRnt             := ""
static oGetEnt
static oGetTrn
static cCodDiv
static oGetDtoEnt

static nTotal              := 0
static nTotalOld           := 0
static nTotalDif           := 0

static oBtnPre
static oBtnPed
static oBtnAlb
static oBtnGrp
static oBtnSat
static oBtnKit
static oBtnAtp
static oBtnPrecio

static cOldCodCli          := ""
static cOldCodArt          := ""
static cOldPrpArt          := ""
static cOldLotArt          := ""
static dOldFecCad          := cToD("")
static cOldUndMed          := ""
static lOpenFiles          := .F.
static lExternal        := .F.

static oClienteRutaNavigator
static oMailingFacturasClientes

static hOrdenRutas         := { "1" => "lVisDom", "2" => "lVisLun", "3" => "lVisMar", "4" => "lVisMie", "5" => "lVisJue", "6" => "lVisVie", "7" => "lVisSab", "8" => "Cod" }

static oTipFac
static aTipFac             := { "Venta", "Alquiler" }

static hCabeceraFactura    := 0
static hLineaFactura       := 0
static hVencimientoFactura := 0
static hDescuentoFactura   := 0
static hImpuestosFactura   := 0

static aImportacion        := {}
static lCancelImportacion  := .F.

static cFiltroUsuario      := ""

static oMeter
static nMeter              := 1

static oDetCamposExtra
static oLinDetCamposExtra
static oCentroCoste
static aEntidades          := {}

static oCbxRuta

static nUltimoCliente      := 0
static cSerieAnterior      := ""
static cCodPagoAnterior    := ""

static Counter

static oGetCelda
static cGetCelda

static oTipoCtrCoste
static cTipoCtrCoste
static aTipoCtrCoste       := { "Centro de coste", "Proveedor", "Agente", "Cliente" }

static bEdtRec             := { |aTmp, aGet, cFacCliT, oBrw, bWhen, bValid, nMode, aNumDoc| EdtRec( aTmp, aGet, cFacCliT, oBrw, bWhen, bValid, nMode, aNumDoc ) }
static bEdtDet             := { |aTmp, aGet, cFacCliL, oBrw, bWhen, bValid, nMode, aTmpFac| EdtDet( aTmp, aGet, cFacCliL, oBrw, bWhen, bValid, nMode, aTmpFac ) }
static bEdtInc             := { |aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode, aTmpLin| EdtInc( aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtDoc             := { |aTmp, aGet, dbfFacCliD, oBrw, bWhen, bValid, nMode, aTmpLin| EdtDoc( aTmp, aGet, dbfFacCliD, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtEntidades       := { |aTmp, aGet, dbfTmpEntidades, oBrw, bWhen, bValid, nMode| EdtEntidades( aTmp, aGet, dbfTmpEntidades, oBrw, bWhen, bValid, nMode ) }
static bEdtTablet          := { |aTmp, aGet, cFacCliT, oBrw, bWhen, bValid, nMode, aNumDoc| EdtTablet( aTmp, aGet, cFacCliT, oBrw, bWhen, bValid, nMode, aNumDoc ) }
static bEdtDetTablet       := { |aTmp, aGet, cFacCliL, oBrw, bWhen, bValid, nMode, aTmpFac| EdtDetTablet( aTmp, aGet, cFacCliL, oBrw, bWhen, bValid, nMode, aTmpFac ) }
static bEdtEst             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpFac | EdtEst( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpFac ) }





FUNCTION FactCli( oMenuItem, oWnd, hHash )

   local oRpl
   local oSnd
   local oImp
   local oPrv
   local oPdf
   local oMail
   local oLiq
   local oDel
   local oDup
   local oBtnEur
   local lEuro          := .F.
   local nLevel
   local oRotor
   local oScript

   If( oMenuItem == nil, oMenuItem := "facturas_de_clientes", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      Return .F.
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      Return .F.
   end

   DisableAcceso()
























   oWndBrw := TShell():New( 0, 0, 22, 80, "Facturas de clientes",, oWnd,,, .F.,,, ( D():FacturasClientes( nView ) ),,,,, {"Número", "Fecha", "Código", "Nombre", "Dirección", "Agente", "Sesión", "NFC", "Envio", "Su albarán", "Total"}, {||( WinAppRec( oWndBrw:oBrw, bEdtRec, D():FacturasClientes( nView ), hHash ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdtRec, D():FacturasClientes( nView ), hHash ) )}, {||( WinDelRec( oWndBrw:oBrw, D():FacturasClientes( nView ), {|| QuiFacCli() } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdtRec, D():FacturasClientes( nView ), hHash ) )}, nil, nLevel, "gc_document_text_user_16", ( 190 + ( 57 * 256 ) + ( 0 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEdtRec, D():FacturasClientes( nView ) ) )}, .T. )

      oWndBrw:lFechado     := .T.

      oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| if( ( D():FacturasClientes( nView ) )->lCloFac, "Cerrada", "Abierta" ) }
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->lCloFac }
         :nWidth           := 20
         :SetCheck( { "gc_lock2_12" , "Nil16" } )
         :AddResource( "gc_lock2_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cobrado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| cChkPagFacCli( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, D():FacturasClientes( nView ), D():FacturasClientesCobros( nView ) ) }
         :bBmpData         := {|| nChkPagFacCli( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, D():FacturasClientes( nView ), D():FacturasClientesCobros( nView ) ) }
         :nWidth           := 20
         :AddResource( "GC_CHECK_12" )
         :AddResource( "GC_SHAPE_SQUARE_12" )
         :AddResource( "GC_DELETE_12" )
         :AddResource( "gc_money2_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Contabilizado"
         :nHeadBmpNo       := 3
         :bStrData         := {|| if( ( D():FacturasClientes( nView ) )->lContab, "Contabilizado", "Pendiente" ) }
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->lContab }
         :nWidth           := 20
         :SetCheck( { "gc_folder2_12", "Nil16" } )
         :AddResource( "gc_folder2_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :cSortOrder       := "lSndDoc"
         :nHeadBmpNo       := 3
         :bStrData         := {|| if( ( D():FacturasClientes( nView ) )->lSndDoc, "Enviado", "No enviado" ) }
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "gc_mail2_12", "Nil16" } )
         :AddResource( "GC_MAIL2_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Entregado"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| !empty( ( D():FacturasClientes( nView ) )->dFecEnt ) }
         :nWidth           := 20
         :SetCheck( { "GC_HAND_PAPER_12", "Nil16" } )
         :AddResource( "GC_HAND_PAPER_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Exportado EDI"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->lExpEdi }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_edi_16", "Nil16" } )
         :AddResource( "gc_edi_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Exportado a Facturae 3.2 [Factura electrónica]"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->lExpFac }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_document_empty_world_16", "Nil16" } )
         :AddResource( "gc_document_empty_world_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Incidencia"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| nEstadoIncidencia( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_document_information_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Rectificada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| lRectificadaCli( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, D():FacturasClientes( nView ), dbfFacRecT ) }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_document_text_delete_12", "Nil16" } )
         :AddResource( "gc_document_text_delete_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Impreso"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->lImprimido }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_printer2_12", "Nil16" } )
         :AddResource( "gc_printer2_16" )
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "@. Enviar por mail"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->lMail }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_mail_earth_12", "Nil16" } )
         :AddResource( "gc_mail_earth_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Publicado"
         :bEditValue       := {|| if( ( D():FacturasClientes( nView ) )->lValida, "Publicado", "Borrador" ) }
         :nWidth           := 120
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumFac"
         :bEditValue       := {|| D():FacturasClientesIdTextShort( nView ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cSufFac }
         :nWidth           := 40
         :lHide            := .T.
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "NFC"
         :cSortOrder       := "cNfc"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cNFC }
         :nWidth           := 160
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :cSortOrder       := "cTurFac"
         :bEditValue       := {|| Trans( ( D():FacturasClientes( nView ) )->cTurFac, "######" ) }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecDes"
         :bEditValue       := {|| Dtoc( ( D():FacturasClientes( nView ) )->dFecFac ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Hora"
         :bEditValue       := {|| trans( ( D():FacturasClientes( nView ) )->tFecFac, "@R 99:99:99") }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCodCaj }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Usuario"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCodUsr }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( D():FacturasClientes( nView ) )->cCodCli ) }
         :nWidth           := 70
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| AllTrim( ( D():FacturasClientes( nView ) )->cNomCli ) }
         :nWidth           := 280
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Establecimiento"
         :bEditValue       := {|| ClientesModel():getField( "NbrEst", "Cod", ( D():FacturasClientes( nView ) )->cCodCli ) }
         :nWidth           := 280
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| alltrim( ( D():FacturasClientes( nView ) )->cPosCli ) }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| AllTrim( ( D():FacturasClientes( nView ) )->cPobCli ) }
         :nWidth           := 180
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| alltrim( ( D():FacturasClientes( nView ) )->cPrvCli ) }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Agente"
         :cSortOrder       := "cCodAge"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCodAge }
         :nWidth           := 50
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

       with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre agente"
         :bEditValue       := {|| AgentesModel():getNombre( ( D():FacturasClientes( nView ) )->cCodAge ) }
         :nWidth           := 150
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Pago"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCodPago }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Ruta"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCodRut }
         :nWidth           := 40
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCodAlm }
         :nWidth           := 60
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Dirección"
         :cSortOrder       := "cCodObr"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCodObr }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Des. dirección"
         :bEditValue       := {|| ClientesDireccionesModel():getName( ( D():FacturasClientes( nView ) )->cCodCli, ( D():FacturasClientes( nView ) )->cCodObr ) }
         :nWidth           := 150
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->nTotNet }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->nTotIva }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "R.E."
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->nTotReq }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->nTotFac }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :cSortOrder       := "nTotFac"
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( D():FacturasClientes( nView ) )->cDivFac ), dbfDiv ) }
         :nWidth           := 30
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Centro de coste"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cCtrCoste }
         :nWidth           := 30
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "N. albarán"
         :bEditValue       := {|| if( !empty( ( D():FacturasClientes( nView ) )->cNumAlb ), Trans( ( D():FacturasClientes( nView ) )->cNumAlb, "@R #/#########/##" ), "" ) }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Su pedido"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cSuFac }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Su albarán"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cSuAlb }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Creación/Modificación"
         :bEditValue       := {|| dtoc( ( D():FacturasClientes( nView ) )->dFecCre ) + space( 1 ) + ( D():FacturasClientes( nView ) )->cTimCre }
         :nWidth           := 120
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Bultos"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->nBultos }
         :cEditPicture     := "99999"
         :nWidth           := 95
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
         :nEditType        := 1
         :bOnPostEdit      := {|oCol, uNewValue, nKey| ChangeBultos( oCol, uNewValue, nKey ) }
      end

   oDetCamposExtra:addCamposExtra( oWndBrw )

   oWndBrw:cHtmlHelp    := "Factura a clientes"

   oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







      oDup := oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",, {|This|This:Toggle()}, 2,, .F. )















      oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )







      oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,,,, .F. )






      oWndBrw:NewAt( "ZOOM",,, {||( PublicarFactura() )}, "(P)ublicar", "P",,, 8,, .F. )







      oDel := oWndBrw:NewAt( "DEL",,, {||( WinDelRec( oWndBrw:oBrw, D():FacturasClientes( nView ), {|| QuiFacCli() } ) )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )







      oWndBrw:NewAt( "DEL",,, {||( DelSerie( oWndBrw ) )}, "Series",,,, 16, oDel, .F. )







      oImp := oWndBrw:NewAt( "IMP",,, {||( selectedGenFacCli( 1 ), oWndBrw:Refresh() )}, "(I)mprimir", "I",, {|This|This:Toggle()}, 32,, .F. )

         lGenFacCli( oWndBrw:oBrw, oImp, 1 )






      oWndBrw:NewAt( "GC_PRINTER2_",,, {||( ImprimirSeriesFacturas() )}, "Imp(r)imir series", "R",,, 32,, .F. )







      oPrv := oWndBrw:NewAt( "PREV1",,, {||( selectedGenFacCli( 2 ), oWndBrw:Refresh() )}, "(P)revisualizar", "P",, {|This|This:Toggle()}, 32,, .F. )


         lGenFacCli( oWndBrw:oBrw, oPrv, 2 )






      oPdf := oWndBrw:NewAt( "DOCLOCK",,, {||( selectedGenFacCli( 3 ) )}, "Pd(f)", "F",, {|This|This:Toggle()}, 32,, .F. )


         lGenFacCli( oWndBrw:oBrw, oPdf, 3 )





      oMail := oWndBrw:NewAt( "GC_MAIL_EARTH_",,, {||( oMailingFacturasClientes:documentsDialog( oWndBrw:oBrw:aSelected ) )}, "Correo electrónico",,, {|This|This:Toggle()}, 32,, .F. )





      oWndBrw:NewAt( "GC_MAIL_EARTH_",,, {||( oMailingFacturasClientes:databaseDialog() )}, "Correo electrónico series",,,, 32,, .F. )






      oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TLabelGeneratorFacturasClientes():New( nView ):Dialog() )}, "Eti(q)uetas", "Q",,, 32,, .F. )






      oLiq := oWndBrw:NewAt( "gc_money2_",,, {||( lLiquida( oWndBrw:oBrw ) )}, "C(o)brar", "O",,, 2,, .F. )







      oWndBrw:NewAt( "gc_money2_",,, {||( aGetSelRec( oWndBrw, {|| lLiquida( oWndBrw:oBrw, ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) }, "Liquidar series de facturas", .T., nil, .T., nil ) )}, "Cobrar series",,,, 4, oLiq, .F. )






      oWndBrw:NewAt( "BMPCONTA",,, {||( aGetSelRec( oWndBrw, {|lChk1, lChk2, oTree| actionContabilidad( lChk1, lChk2, oTree ) }, "Contabilizar facturas", lHideCheck1Contabilidad(), "Simular resultados", lHideCheck2Contabilidad(), "Contabilizar recibos", , {|| postActionContabilidad() } ) )}, "(C)ontabilizar", "C",,, 4,, .F. )

   if RolesModel():getRolCambiarEstado( Auth():rolUuid() )






      oWndBrw:NewAt( "CHGSTATE",,, {||( aGetSelRec( oWndBrw, {| lChk | lChgContabilizado( lChk ) }, "Cambiar estado", .F., "Contabilizado", .T. ) )}, "Cambiar es(t)ado", "T",,, 4,, .F. )

   end








      oSnd := oWndBrw:NewAt( "LBL",, "Seleccionar facturas para ser enviadas", {||lSnd( oWndBrw, D():FacturasClientes( nView ) )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():FacturasClientes( nView ), "lSndDoc", .T., .T., .T. ) )}, "Todos",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():FacturasClientes( nView ), "lSndDoc", .F., .T., .T. ) )}, "Ninguno",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():FacturasClientes( nView ), "lSndDoc", .T., .F., .T. ) )}, "Abajo",,,, 4, oSnd, .F. )





      oWndBrw:NewAt( "gc_document_text_earth_",,, {||( aGetSelRec( oWndBrw, {|lChk1, lChk2, oTree| CreateFileFacturae( oTree, lChk1, lChk2 ) }, "Exportar facturas electrónicas a Facturae v 3.2", .T., "Firmar digitalmente (necesita runtime de Java)", .T., "Enviar por correo electrónico" ) )}, "Exportar a Facturae 3.2",,,, 4,, .F. )





      oWndBrw:NewAt( "gc_edi_",,, {||( aGetSelRec( oWndBrw, {|lNoExportadas, lChk2, oTree| runEDIScript( lNoExportadas, oTree, nView ) }, "Exportar facturas a EDI", .F., "Solo las no exportadas", .T. ) )}, "Exportar a EDI",,,, 4,, .F. )





      oBtnEur := oWndBrw:NewAt( "gc_currency_euro_",,, {||( lEuro := !lEuro, oWndBrw:Refresh() )}, "Moneda",,,, 8,, .F. )

   if RolesModel():getRolCambiarCampos( Auth():rolUuid() )






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():FacturasClientes( nView ), aItmFacCli() ) )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():FacturasClientesLineas( nView ), aColFacCli() ) )}, "Lineas",,,, 4, oRpl, .F. )

   end






      oWndBrw:NewAt( "INFO",,, {||( TTrazaDocumento():Activate( "11", ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) )}, "I(n)forme documento", "N",,, 4,, .F. )




      oWndBrw:NewAt( "gc_document_text_pencil_",,, {||( Counter:OpenDialog() )}, "Establecer contadores",,,,,, .F. )





      oScript := oWndBrw:NewAt( "gc_folder_document_",,, {||( oScript:Expand() )}, "Scripts",,,,,, .F. )
         ImportScript( oWndBrw, oScript, "FacturasClientes" )






      oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,, {|This|This:Toggle()},,, .F. )





      oWndBrw:NewAt( "GC_USER_",,, {||( EdtCli( ( D():FacturasClientes( nView ) )->cCodCli ) )}, "Modificar cliente",,,,, oRotor, .F. )





      oWndBrw:NewAt( "INFO",,, {||( InfCliente( ( D():FacturasClientes( nView ) )->cCodCli ) )}, "Informe de cliente",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_CLIPBOARD_EMPTY_USER_",,, {||( EdtObras( ( D():FacturasClientes( nView ) )->cCodCli, ( D():FacturasClientes( nView ) )->cCodObr, dbfObrasT ) )}, "Modificar Dirección",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_NOTEBOOK_USER_",,, {||( if( !empty( ( D():FacturasClientes( nView ) )->cNumPre ), ZooPreCli( ( D():FacturasClientes( nView ) )->cNumPre ), MsgStop( "No hay presupusto asociado" ) ) )}, "Visualizar presupuesto",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_CLIPBOARD_EMPTY_USER_",,, {||( if( !empty( ( D():FacturasClientes( nView ) )->cNumPed ), ZooPedCli( ( D():FacturasClientes( nView ) )->cNumPed ), MsgStop( "No hay pedido asociado" ) ) )}, "Visualizar pedido",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_DOCUMENT_EMPTY_",,, {||( if( !empty( ( D():FacturasClientes( nView ) )->cNumAlb ), ZooAlbCli( ( D():FacturasClientes( nView ) )->cNumAlb ), MsgStop( "No hay albarán asociado" ) ) )}, "Visualizar albarán",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_BRIEFCASE2_BUSINESSMAN_",,, {||( RecCli( , , { ( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) } ) )}, "Modificar recibo",,,,, oRotor, .T. )





      oWndBrw:NewAt( "GC_NOTE_",,, {||( FacCliNotas() )}, "Generar nota de agenda",,,,, oRotor, .T. )
   if ( "VI" $ appParamsMain() )






      oWndBrw:NewAt( "GC_DOCUMENT_TEXT_MONEY2_",,, {||( ExcelIsra() )}, "Excel israel",,,,, oRotor, .T. )
   end







   oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .T. )
    oWndBrw:oActiveFilter:SetFields( aItmFacCli() )
    oWndBrw:oActiveFilter:SetFilterType( "11" )

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

   enableAcceso()

   if !empty(oWndBrw)

      if uFieldempresa( "lFltYea" )
         oWndBrw:setYearCombobox()
      end

      if !empty( hHash )
         oWndBrw:RecAdd()
         hHash             := nil
      end

   end

Return .T.



STATIC FUNCTION GenFacCli( nDevice, cCaption, cCodDoc, cPrinter, nCopies )

   if ( D():FacturasClientes( nView ) )->( lastrec() ) == 0
      return nil
   end

   If( nDevice == nil, nDevice := 1, ) ;
   If( cCaption == nil, cCaption := "Imprimiendo facturas a clientes", ) ;
   If( cCodDoc == nil, cCodDoc := cFormatoFacturasClientes(), ) ;
   If( cPrinter == nil, cPrinter := cPrinterFactura( Application():CodigoCaja(), dbfCajT ), ) ;

   if empty( nCopies )
      nCopies           := retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" )
   end

   if nCopies == 0
      nCopies           := nCopiasDocumento( ( D():FacturasClientes( nView ) )->cSerie, "nFacCli", D():Contadores( nView ) )
   end

   if nCopies == 0
      nCopies           := 1
   end

   if !lExisteDocumento( cCodDoc, D():Documentos( nView ) )
      return nil
   end



   if lVisualDocumento( cCodDoc, D():Documentos( nView ) )
      printReportFacCli( nDevice, nCopies, cPrinter, cCodDoc )
   else
      msgStop( "El formato ya no es soportado" )
   end



   lChgImpDoc( D():FacturasClientes( nView ) )

Return ( nil )



FUNCTION imprimeFacturaCliente( cNumeroFactura, cFormatoDocumento )

   local nLevel         := Auth():Level( "facturas_de_clientes" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if OpenFiles()

      if dbSeekInOrd( cNumeroFactura, "nNumFac", D():FacturasClientes( nView ) )

         nTotFacCli()

         genFacCli( 1, nil, cFormatoDocumento )

      else

         msgStop( "Número de factura " + alltrim( cNumeroFactura ) + " no encontrado.", "Stop! " + str( len( cNumeroFactura ) ) )

      end

      sysrefresh()

      CloseFiles()

   end

   nView                := nil

Return .T.



Static Function EPage( oInf, cCodDoc )

   private nPagina      := oInf:nPage
   private lEnd         := oInf:lFinish
   private nRow         := oInf:nRow





   PrintItems( cCodDoc, oInf )

RETURN NIL



STATIC FUNCTION OpenFiles()

   local oBlock
   local oError

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de facturas de clientes", "Ficheros actualmente en uso" )
      Return ( .F. )
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      DisableAcceso()





      nView    := D():CreateView()

      D():FacturasClientes( nView )

      D():FacturasClientesLineas( nView )

      D():FacturasClientesEntidades( nView )

      D():FacturasClientesSituaciones( nView )

      D():Clientes( nView )

      D():objectGruposClientes( nView )

      D():ClientesEntidad( nView )

      D():ArticuloStockAlmacenes( nView )

      D():Articulos( nView )

      D():Contadores( nView )

      D():Agentes( nView )

      D():Documentos( nView )
      ( D():Documentos( nView ) )->( ordSetFocus( "cTipo" ) )

      D():ArticuloLenguaje( nView )

      D():ClientesEntidad( nView )

      D():GetObject( "UnidadMedicion", nView )

      D():ImpuestosEspeciales( nView )

      D():FacturasClientesCobros( nView )
      ( D():FacturasClientesCobros( nView ) )->( ordsetfocus( "fNumFac" ) )

      D():Propiedades( nView )

      D():PropiedadesLineas( nView )

      D():FormasPago( nView )

      D():EmpresaBancos( nView )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLII.DBF" ), ( cCheckArea( "FACCLII", @dbfFacCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLID.DBF" ), ( cCheckArea( "FACCLID", @dbfFacCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIS.DBF" ), ( cCheckArea( "FACCLIS", @dbfFacCliS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





      D():Atipicas( nView )

      D():Get( "CliInc", nView )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECT.DBF" ), ( cCheckArea( "FACRECT", @dbfFacRecT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECL.DBF" ), ( cCheckArea( "FACRECL", @dbfFacRecL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECS.DBF" ), ( cCheckArea( "FACRECS", @dbfFacRecS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if !TDataCenter():OpenAlbCliT( @dbfAlbCliT )
         lOpenFiles     := .F.
      end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIP.DBF" ), ( cCheckArea( "ALBCLIP", @dbfAlbCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLII.DBF" ), ( cCheckArea( "ALBCLII", @dbfAlbCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLID.DBF" ), ( cCheckArea( "ALBCLID", @dbfAlbCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIS.DBF" ), ( cCheckArea( "ALBCLIS", @dbfAlbCliS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





      if !TDataCenter():OpenSatCliT( @dbfSatCliT )
         lOpenFiles        := .F.
      end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "SatCliL.DBF" ), ( cCheckArea( "SatCliL", @dbfSatCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "SatCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "SatCliI.DBF" ), ( cCheckArea( "SatCliI", @dbfSatCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "SatCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "SatCliD.DBF" ), ( cCheckArea( "SatCliD", @dbfSatCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "SatCliD.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "SatCliS.DBF" ), ( cCheckArea( "SatCliS", @dbfSatCliS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "SatCliS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if !TDataCenter():OpenPedCliT( @dbfPedCliT )
         lOpenFiles        := .F.
      end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIT", @dbfPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLII.DBF" ), ( cCheckArea( "PEDCLII", @dbfPedCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLID.DBF" ), ( cCheckArea( "PEDCLID", @dbfPedCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIR.DBF" ), ( cCheckArea( "PEDCLIR", @dbfPedCliR ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if !TDataCenter():OpenPreCliT( @dbfPreCliT )
         lOpenFiles     := .F.
      end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLIL.DBF" ), ( cCheckArea( "PRECLIL", @dbfPreCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLII.DBF" ), ( cCheckArea( "PRECLII", @dbfPreCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLID.DBF" ), ( cCheckArea( "PRECLID", @dbfPreCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKES.DBF" ), ( cCheckArea( "TIKES", @dbfTikS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfCliBnc ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfKit ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPRET.DBF" ), ( cCheckArea( "TARPRET", @dbfTarPreT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPRET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPREL.DBF" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPRES.DBF" ), ( cCheckArea( "TARPRES", @dbfTarPreS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPRES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOT.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOL.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOC.DBF" ), ( cCheckArea( "PROMOC", @dbfPromoC ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOC.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOferta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RUTA.DBF" ), ( cCheckArea( "RUTA", @dbfRuta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RUTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @dbfArtDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Cajas.Dbf" ), ( cCheckArea( "CAJAS", @dbfCajT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "Cajas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Almacen.DBF" ), ( cCheckArea( "Almacen", @dbfAlm ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "Almacen.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDelega ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGECOM.DBF" ), ( cCheckArea( "AGECOM", @dbfAgeCom ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGECOM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPRVS.DBF" ), ( cCheckArea( "ALBPRVS", @dbfAlbPrvS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPRVS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVT.DBF" ), ( cCheckArea( "FACPRVT", @dbfFacPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVS.DBF" ), ( cCheckArea( "FACPRVS", @dbfFacPrvS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvS.DBF" ), ( cCheckArea( "RctPrvS", @dbfRctPrvS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.DBF" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.DBF" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROSER.DBF" ), ( cCheckArea( "PROSER", @dbfProSer ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROSER.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "MatSer.Dbf" ), ( cCheckArea( "MatSer", @dbfMatSer ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "MatSer.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.DBF" ), ( cCheckArea( "PedPrvL", @dbfPedPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROVEE.DBF" ), ( cCheckArea( "PROVEE", @dbfProvee ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROVEE.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      oBandera          := TBandera():New()

      oStock            := TStock():Create( cPatEmp() )
      if !oStock:lOpenFiles()
         lOpenFiles     := .F.
      end

      oCtaRem           := TCtaRem():Create( cPatEmp() )
      if !oCtaRem:OpenFiles()
         lOpenFiles     := .F.
      end

      oNewImp           := TNewImp():Create( cPatEmp() )
      if !oNewImp:OpenFiles()
         lOpenFiles     := .F.
      end

      oTrans            := TTrans():Create( cPatEmp() )
      if !oTrans:OpenFiles()
         lOpenFiles     := .F.
      end

      oTipArt           := TTipArt():Create( cPatEmp() )
      if !oTipArt:OpenFiles()
         lOpenFiles     := .F.
      end

      oGrpFam           := TGrpFam():Create( cPatEmp() )
      if !oGrpFam:OpenFiles()
         lOpenFiles     := .F.
      end

      oUndMedicion      := UniMedicion():Create( cPatEmp() )
      if !oUndMedicion:OpenFiles()
         lOpenFiles     := .F.
      end

      oFraPub           := TFrasesPublicitarias():Create( cPatEmp() )
      if !oFraPub:OpenFiles()
         lOpenFiles     := .F.
      end

      oBanco            := TBancos():Create()
      if !oBanco:OpenFiles()
         lOpenFiles     := .F.
      end

      oEntidades        := TEntidades():Create()
      if !oEntidades:OpenFiles()
         lOpenFiles     := .F.
      end

      oCentroCoste        := TCentroCoste():Create( cPatDat() )
      if !oCentroCoste:OpenFiles()
         lOpenFiles     := .F.
      end

      oClienteRutaNavigator          := ClienteRutaNavigator():New( nView )

      oMailingFacturasClientes       := TGenmailingDatabaseFacturasClientes():New( nView )

      TComercio                      := TComercio():New( nView, oStock )

      Counter                        := TCounter():New( nView, "nFacCli" )





      public nTotFac    := 0
      public nTotBrt    := 0
      public nTotDto    := 0
      public nTotDPP    := 0
      public nTotNet    := 0
      public nTotSup    := 0
      public nTotIva    := 0
      public nTotIvm    := 0
      public nTotAge    := 0
      public nTotReq    := 0
      public nTotPnt    := 0
      public nTotUno    := 0
      public nTotDos    := 0
      public nTotRet    := 0
      public nTotTrn    := 0
      public nTotCos    := 0
      public nTotCob    := 0
      public nTotPes    := 0
      public nTotRnt    := 0
      public nTotAtp    := 0
      public nTotArt    := 0
      public nTotCaj    := 0
      public nTotPctRnt := 0










      public aTotIva    := { {     "porcentajeiva" => 0,    "logrecargo"    => .F.,    "porcentajere"    => 0,    "bruto"            => 0,    "neto"            => 0,    "impiva"        => 0,    "impre"            => 0,    "nivmh"            => 0,    "ntransporte"    => 0,    "npntver"        => 0 } }

      public aTotIvm    := { { 0,0,0 }, { 0,0,0 }, { 0,0,0 }, }
      public aIvmUno    := aTotIvm[ 1 ]
      public aIvmDos    := aTotIvm[ 2 ]
      public aIvmTre    := aTotIvm[ 3 ]

      public aImpVto    := {}
      public aDatVto    := {}





      oDetCamposExtra                  := TDetCamposExtra():New()
      oDetCamposExtra:OpenFiles()
      oDetCamposExtra:setTipoDocumento( "Facturas a clientes" )
      oDetCamposExtra:setbId( {|| D():FacturasClientesId( nView ) } )

      oLinDetCamposExtra               := TDetCamposExtra():New()
      oLinDetCamposExtra:OpenFiles()
      oLinDetCamposExtra:setTipoDocumento( "Lineas de facturas a clientes" )
      oLinDetCamposExtra:setbId( {|| D():FacturasClientesLineasEscandalloId( nView ) } )

      lOpenFiles                       := .T.

      EnableAcceso()

   RECOVER USING oError

      lOpenFiles                       := .F.

      msgStop(  ErrorMessage( oError ), "Imposible abrir todas las bases de datos facturas de clientes.", )

      EnableAcceso()

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles()

   DisableAcceso()

   DestroyFastFilter( D():FacturasClientes( nView ), .T., .T. )

   if !empty( dbfIva )
      ( dbfIva     )->( dbCloseArea() )
   end

   if !empty( dbfFacCliI )
      ( dbfFacCliI )->( dbCloseArea() )
   end

   if !empty( dbfFacCliD )
      ( dbfFacCliD )->( dbCloseArea() )
   end

   if !empty( dbfFacCliS )
      ( dbfFacCliS )->( dbCloseArea() )
   end

   if !empty( dbfFacRecT )
      ( dbfFacRecT )->( dbCloseArea() )
   end

   if !empty( dbfFacRecL )
      ( dbfFacRecL )->( dbCloseArea() )
   end

   if !empty( dbfFacRecS )
      ( dbfFacRecS )->( dbCloseArea() )
   end

   if !empty( dbfAlbCliT )
      ( dbfAlbCliT )->( dbCloseArea() )
   end

   if !empty( dbfAlbCliL )
      ( dbfAlbCliL )->( dbCloseArea() )
   end

   if !empty( dbfAlbCliP )
      ( dbfAlbCliP )->( dbCloseArea() )
   end

   if !empty( dbfAlbCliI )
      ( dbfAlbCliI )->( dbCloseArea() )
   end

   if !empty( dbfAlbCliD )
      ( dbfAlbCliD )->( dbCloseArea() )
   end

   if !empty( dbfAlbCliS )
      ( dbfAlbCliS )->( dbCloseArea() )
   end

   if ( !empty( dbfSatCliT ), ( dbfSatCliT )->( dbCloseArea() ), )
   if ( !empty( dbfSatCliL ), ( dbfSatCliL )->( dbCloseArea() ), )
   if ( !empty( dbfSatCliI ), ( dbfSatCliI )->( dbCloseArea() ), )
   if ( !empty( dbfSatCliD ), ( dbfSatCliD )->( dbCloseArea() ), )
   if ( !empty( dbfSatCliS ), ( dbfSatCliS )->( dbCloseArea() ), )

   if !empty( dbfPedCliT )
      ( dbfPedCliT )->( dbCloseArea() )
   end

   if !empty( dbfPedCliL )
      ( dbfPedCliL )->( dbCloseArea() )
   end

   if !empty( dbfPedCliP )
      ( dbfPedCliP )->( dbCloseArea() )
   end

   if !empty( dbfPedCliI )
      ( dbfPedCliI )->( dbCloseArea() )
   end

   if !empty( dbfPedCliD )
      ( dbfPedCliD )->( dbCloseArea() )
   end

   if !empty( dbfPreCliT )
      ( dbfPreCliT )->( dbCloseArea() )
   end

   if !empty( dbfPreCliL )
      ( dbfPreCliL )->( dbCloseArea() )
   end

   if !empty( dbfPreCliI )
      ( dbfPreCliI )->( dbCloseArea() )
   end

   if !empty( dbfPreCliD )
      ( dbfPreCliD )->( dbCloseArea() )
   end

   if !empty( dbfTikT )
      ( dbfTikT )->( dbCloseArea() )
   end

   if !empty( dbfTikL )
      ( dbfTikL )->( dbCloseArea() )
   end

   if !empty( dbfTikS )
      ( dbfTikS )->( dbCloseArea() )
   end

   if dbfCodebar <> nil
      ( dbfCodebar )->( dbCloseArea() )
   end

   if !empty( dbfFamilia )
      ( dbfFamilia )->( dbCloseArea() )
   end

   if !empty( dbfKit )
      ( dbfKit     )->( dbCloseArea() )
   end

   if !empty( dbfTarPreT )
      ( dbfTarPreT )->( dbCloseArea() )
   end

   if !empty( dbfTarPreL )
      ( dbfTarPreL )->( dbCloseArea() )
   end

   if !empty( dbfTarPreS )
      ( dbfTarPreS )->( dbCloseArea() )
   end

   if !empty( dbfPromoT )
      ( dbfPromoT  )->( dbCloseArea() )
   end

   if !empty( dbfPromoL )
      ( dbfPromoL  )->( dbCloseArea() )
   end

   if !empty( dbfPromoC )
      ( dbfPromoC  )->( dbCloseArea() )
   end

   if !empty( dbfAlm )
      ( dbfAlm    )->( dbCloseArea() )
   end

   if !empty( dbfDiv )
      ( dbfDiv     )->( dbCloseArea() )
   end

   if !empty( dbfObrasT )
      ( dbfObrasT  )->( dbCloseArea() )
   end

   if !empty( dbfOferta )
      ( dbfOferta  )->( dbCloseArea() )
   end

   if !empty( dbfRuta )
      ( dbfRuta    )->( dbCloseArea() )
   end

   if !empty( dbfArtDiv )
      ( dbfArtDiv  )->( dbCloseArea() )
   end

   if !empty( dbfCajT )
      ( dbfCajT    )->( dbCloseArea() )
   end

   if !empty( dbfDelega )
      ( dbfDelega )->( dbCloseArea() )
   end

   if !empty( dbfAgeCom )
      ( dbfAgeCom )->( dbCloseArea() )
   end

   if !empty( dbfAlbPrvL )
      ( dbfAlbPrvL )->( dbCloseArea() )
   end

   if !empty( dbfAlbPrvS )
      ( dbfAlbPrvS )->( dbCloseArea() )
   end

   if !empty( dbfPedCliR )
      ( dbfPedCliR )->( dbCloseArea() )
   end

   if !empty( dbfEmp )
      ( dbfEmp )->( dbCloseArea() )
   end

   if !empty( dbfFacPrvT )
      ( dbfFacPrvT )->( dbCloseArea() )
   end

   if !empty( dbfFacPrvL )
      ( dbfFacPrvL )->( dbCloseArea() )
   end

   if !empty( dbfFacPrvS )
      ( dbfFacPrvS )->( dbCloseArea() )
   end

   if !empty( dbfRctPrvL )
      ( dbfRctPrvL )->( dbCloseArea() )
   end

   if !empty( dbfRctPrvS )
      ( dbfRctPrvS )->( dbCloseArea() )
   end

   if !empty( dbfProLin )
      ( dbfProLin )->( dbCloseArea() )
   end

   if !empty( dbfProMat )
      ( dbfProMat )->( dbCloseArea() )
   end

   if !empty( dbfProSer )
      ( dbfProSer )->( dbCloseArea() )
   end

   if !empty( dbfMatSer )
      ( dbfMatSer )->( dbCloseArea() )
   end

   if dbfCliBnc <> nil
      ( dbfCliBnc )->( dbCloseArea() )
   end

   if dbfPedPrvL <> nil
      ( dbfPedPrvL )->( dbCloseArea() )
   end

   if dbfProMat <> nil
      ( dbfProMat )->( dbCloseArea() )
   end

   if dbfProvee <> nil
      ( dbfProvee )->( dbCloseArea() )
   end

   TComercio:end()

   if !empty( oStock )
      oStock:end()
   end

   if !empty( oCtaRem )
      oCtaRem:end()
   end

   if !empty( oNewImp )
      oNewImp:end()
   end

   if !empty( oTipArt )
      oTipArt:end()
   end

   if !empty( oGrpFam )
      oGrpFam:end()
   end

   if !empty( oTrans )
      oTrans:End()
   end

   if !empty( oUndMedicion )
      oUndMedicion:End()
   end

   if !empty( oFraPub )
      oFraPub:end()
   end

   if !empty( oBanco )
      oBanco:End()
   end

   if !empty( oEntidades )
      oEntidades:End()
   end

   if !empty( oCentroCoste )
      oCentroCoste:End()
   end

   if !empty( oMailingFacturasClientes )
      oMailingFacturasClientes:End()
   end

   dbfIva          := nil
   dbfFacCliD      := nil
   dbfFacCliS      := nil
   dbfAlbCliT      := nil
   dbfAlbCliL      := nil
   dbfAlbCliI      := nil
   dbfAlbCliD      := nil
   dbfAlbCliS      := nil
   dbfPedCliT      := nil
   dbfPedCliL      := nil
   dbfPedCliP      := nil
   dbfPedCliI      := nil
   dbfPedCliD      := nil
   dbfPreCliT      := nil
   dbfPreCliL      := nil
   dbfPreCliI      := nil
   dbfPreCliD      := nil
   dbfSatCliT      := nil
   dbfSatCliL      := nil
   dbfSatCliI      := nil
   dbfSatCliD      := nil
   dbfSatCliS      := nil

   dbfTikT         := nil
   dbfCodebar      := nil
   dbfFamilia      := nil
   dbfKit          := nil
   dbfTarPreT      := nil
   dbfTarPreL      := nil
   dbfTarPreS      := nil
   dbfPromoT       := nil
   dbfPromoL       := nil
   dbfPromoC       := nil
   dbfAlm          := nil
   dbfDiv          := nil
   oBandera        := nil
   dbfObrasT       := nil
   dbfOferta       := nil
   dbfRuta         := nil
   dbfArtDiv       := nil
   dbfCajT         := nil
   dbfDelega       := nil
   dbfAgeCom       := nil
   dbfAlbPrvL      := nil
   dbfAlbPrvS      := nil
   dbfPedCliR      := nil
   dbfEmp          := nil
   dbfFacPrvT      := nil
   dbfFacPrvL      := nil
   dbfFacPrvS      := nil
   dbfRctPrvL      := nil
   dbfRctPrvS      := nil
   dbfProLin       := nil
   dbfProMat       := nil
   dbfPedPrvL      := nil
   dbfProMat       := nil
   dbfProvee       := nil

   oStock          := nil
   oNewImp         := nil
   oTipArt         := nil
   oGrpFam         := nil
   oUndMedicion    := nil
   oBanco          := nil
   oTrans         := nil

   D():DeleteView( nView )

   lOpenFiles      := .F.

   EnableAcceso()

   if !empty( oDetCamposExtra )
      oDetCamposExtra:CloseFiles()
      oDetCamposExtra:End()
   end

   if !empty( oLinDetCamposExtra )
      oLinDetCamposExtra:CloseFiles()
      oLinDetCamposExtra:End()
   end

   SysRefresh()

Return ( !lOpenFiles )



STATIC FUNCTION EdtRec( aTmp, aGet, dbf, oBrw, hHash, bValid, nMode )

   local n
   local oDlg
   local oFld
   local oBrwInc
   local oBrwDoc
   local oBrwEntidades
   local oBrwEst
   local oSay              := Array( 12 )
   local cSay              := Array( 12 )
   local oSayLabels        := Array(  5 )
   local oBmpDiv
   local oBmpEmp
   local nOrd
   local oBtn
   local cTlfCli
   local oGetMasDiv
   local cGetMasDiv        := ""
   local cGetPctRet
   local cSerie            := cNewSer( "nFacCli", D():Contadores( nView ) )
   local lWhen             := if( oUser():lAdministrador(), nMode <> 3, if( nMode == 2, !aTmp[ 77 ], nMode <> 3 ) )
   local oSayGetRnt
   local cTipFac
   local oSayDias
   local oAutoGet
   local cAutoGet          := Space( 200 )
   local hBmp






   local hBmpGeneral       := {  { "Resource" => "gc_document_text_user2_48",    "Dialog" => 1 }, { "Resource" => "gc_folders2_48",               "Dialog" => 2 }, { "Resource" => "gc_information_48",            "Dialog" => 3 }, { "Resource" => "gc_address_book_48",           "Dialog" => 4 }, { "Resource" => "gc_form_earth_48",             "Dialog" => 5 }, { "Resource" => "gc_document_attachment_48",    "Dialog" => 6 }, { "Resource" => "gc_money2_48",                 "Dialog" => 7 } }





   cOldCodCli              := aTmp[ 7 ]

   setOldPorcentajeAgente( aTmp[ 24 ] )





   do case
   case nMode == 1

      if !lCurSesion()
         MsgStop( "No hay sesiones activas, imposible añadir documentos" )
         Return .F.
      end

      if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
         msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
         Return .F.
      end

      aTmp[ 5    ]  := cCurSesion()
      aTmp[ 28    ]  := Ctod("")
      aTmp[ 8    ]  := Application():codigoAlmacen()
      aTmp[ 9    ]  := Application():CodigoCaja()
      aTmp[ 34   ]  := cDefFpg()
      aTmp[ 63    ]  := cDivEmp()
      aTmp[ 64    ]  := nChgDiv( aTmp[ 63 ], dbfDiv )
      aTmp[ 3    ]  := RetSufEmp()
      aTmp[ 25 ]  := .F.
      aTmp[ 62    ]  := .T.
      aTmp[ 126      ]  := .T.
      aTmp[ 69    ]  := cProCnt()
      aTmp[ 82    ]  := Auth():Codigo()
      aTmp[ 87    ]  := Ctod("")
      aTmp[ 89    ]  := Application():CodigoDelegacion()
      aTmp[ 61    ]  := uFieldEmpresa( "lIvaInc" )
      aTmp[ 97    ]  := padr( getConfigTraslation( "Gastos" ), 250 )
      aTmp[ 37    ]  := nIva( dbfIva, cDefIva() )
      aTmp[ 123      ]  := lRECCEmpresa()
      aTmp[ 129    ]  := getSysTime()
      aTmp[ 62    ]  := .T.
      aTmp[ 4 ]  := win_uuidcreatestring()

   case nMode == 4

      if !lCurSesion()
         MsgStop( "No hay sesiones activas, imposible añadir documentos" )
         Return .F.
      end

      if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
         msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada" )
         Return .F.
      end

      aTmp[ 6    ]  := GetSysDate()
      aTmp[ 129    ]  := getSysTime()
      aTmp[ 5    ]  := cCurSesion()
      aTmp[ 39    ]  := ""
      aTmp[ 40    ]  := ""
      aTmp[ 41    ]  := ""
      aTmp[ 26    ]  := .F.
      aTmp[ 30    ]  := .F.
      aTmp[ 77    ]  := .F.
      aTmp[ 62    ]  := .T.
      aTmp[ 126      ]  := .T.
      aTmp[ 123      ]  := lRECCEmpresa()
      aTmp[ 82    ]  := Auth():Codigo()
      aTmp[ 4 ]  := win_uuidcreatestring()

   case nMode == 2


      if aTmp[ 26 ] .AND. !ApoloMsgNoYes(  "La modificación de esta factura puede provocar descuadres contables." + Chr(13)+Chr(10) + "¿ Desea continuar ?", "Factura ya contabilizada" )
         return .F.
      end

      aTmp[ 62    ]   := .T.

      lChangeRegIva( aTmp )

   end





   cTipFac                 := aTipFac[ if( hb_islogical( aTmp[ 94 ] ) .AND. aTmp[ 94 ], 2, 1  ) ]





   if BeginTrans( aTmp, nMode )
      Return .F.
   end





   nOrd                    := ( D():FacturasClientes( nView ) )->( ordSetFocus( 1 ) )





   if empty( Rtrim( aTmp[ 1 ] ) )
      aTmp[ 1 ]      := cSerie
   end

   if empty( aTmp[ 19 ] )
      aTmp[ 19 ]     := Max( uFieldEmpresa( "nPreVta" ), 1 )
   end

   if empty( aTmp[ 63 ] )
      aTmp[ 63 ]     := cDivEmp()
   end

   if empty( aTmp[ 44 ] )
      aTmp[ 44 ]     := Padr( "General", 50 )
   end

   if empty( aTmp[ 46 ] )
      aTmp[ 46 ]        := Padr( "Pronto pago", 50 )
   end





   nRiesgoCliente          := oStock:nRiesgo( aTmp[ 7 ] )

   if empty( aTmp[ 103 ] )
      aTmp[ 103 ]     := RetFld( aTmp[ 7 ], D():Clientes( nView ), "Telefono" )
   end

   cPicUnd                 := MasUnd()
   cPouDiv                 := cPouDiv( aTmp[ 63 ], dbfDiv )
   cPorDiv                 := cPorDiv( aTmp[ 63 ], dbfDiv )
   cPinDiv                 := cPinDiv( aTmp[ 63 ], dbfDiv )
   nDouDiv                 := nDouDiv( aTmp[ 63 ], dbfDiv )
   nRouDiv                 := nRouDiv( aTmp[ 63 ], dbfDiv )
   cPpvDiv                 := cPpvDiv( aTmp[ 63 ], dbfDiv )
   nDpvDiv                 := nDpvDiv( aTmp[ 63 ], dbfDiv )





   cSay[ 2 ]               := RetFld( aTmp[ 8 ], dbfAlm )
   cSay[ 4 ]               := RetFld( aTmp[ 34], D():FormasPago( nView ) )
   cSay[ 8 ]               := RetFld( aTmp[ 21 ], dbfRuta )
   cSay[ 3 ]               := RetFld( aTmp[ 20 ], D():Agentes( nView ) )
   cSay[ 5 ]               := RetFld( aTmp[ 22 ], dbfTarPreT )
   cSay[ 7 ]               := RetFld( aTmp[ 7 ] + aTmp[ 23 ], dbfObrasT, "cNomObr", "cCodCli" )
   cSay[ 9 ]               := oTrans:cNombre( aTmp[ 75 ] )
   cSay[ 10]               := RetFld( aTmp[ 9 ], dbfCajT )
   cSay[ 11]               := UsuariosModel():getNombreWhereCodigo( aTmp[ 82 ] )
   cSay[ 12]               := RetFld( cCodEmp() + aTmp[ 89 ], dbfDelega, "cNomDlg" )





   InitTarifaCabecera( aTmp[ 19 ] )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "facturas a clientes", "FACCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )























      oFld := TFolder():ReDefine( 400, {"&Factura", "Da&tos", "&Incidencias", "D&ocumentos", "&Entidades", "&Situaciones", "&Cobros"}, { "FACCLI_1","FACCLI_2","PEDCLI_3","PEDCLI_4","VIEW_FACTURAS_ENTIDADES","PEDCLI_5","FACTURAS_CLIENTES_RECIBOS" }, oDlg,,,,, .F., )




      for each hBmp in hBmpGeneral
         TBitmap():ReDefine( 990, hBmp[ "Resource" ], , oFld:aDialogs[ hBmp[ "Dialog" ] ], , , .F., .F., , , .F., , , .T. )
      next







      aGet[ 7 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,, {||    ( loaCli( aGet, aTmp, nMode ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwClient( aGet[ 7 ], aGet[ 10 ] ), ::lValid() )}, nil, "Lupa",, )







      TBtnBmp():ReDefine( 175, "gc_symbol_percent_16",,,,, {|Self|( HistoricoVentas():New():Historico() )}, oFld:aDialogs[1], .F., {||     ( nMode <> 3 )}, .F.,,,,,, !.T.,, .F.,,, .F., !.F.,, .F. )




      aGet[ 10 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )

      if uFieldEmpresa( "nCifRut" ) == 1





      aGet[ 16 ] := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],,, {||    ( CheckCif( aGet[ 16 ] ) )},,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )

      else






      aGet[ 16 ] := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],, "@R 999999999-9", {||    ( CheckRut( aGet[ 16 ] ) )},,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )

      end






      aGet[ 11 ] := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 11 ], Rtrim( aTmp[ 12 ] ) + Space( 1 ) + Rtrim( aTmp[ 13 ] ) )}, nil, "gc_earth_lupa_16",, )




      aGet[ 15 ] := TGetHlp():ReDefine( 184, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 12 ] := TGetHlp():ReDefine( 185, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 13 ] := TGetHlp():ReDefine( 186, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )





      aGet[ 103 ] := TGetHlp():ReDefine( 187, { | u | If( PCount()==0, aTmp[ 103 ], aTmp[ 103 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 17 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )





      oRiesgoCliente := TGetHlp():ReDefine( 182, { | u | If( PCount()==0, nRiesgoCliente, nRiesgoCliente:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oGetTarifa  := comboTarifa():Build( { "idCombo" => 171, "uValue" => aTmp[ 19 ] } )
      oGetTarifa:Resource( oFld:aDialogs[1] )

      if ( nMode == 3 )
         oGetTarifa:disable()
      end







      oBtnPrecio := TBtnBmp():ReDefine( 174, "gc_arrow_down_16",,,,, {|Self|( ChangeTarifaCabecera( oGetTarifa:getTarifa(), dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1], .F., {||     ( nMode <> 3 .AND. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) )}, .F.,,,,,, !.T.,, .F.,,, .F., !.F.,, .F. )












      aGet[ 63 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 63 ], aTmp[ 63 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDivOut( aGet[ 63 ], oBmpDiv, aGet[ 64 ], @cPouDiv, @nDouDiv, @cPorDiv, @nRouDiv, @cPpvDiv, @nDpvDiv, oGetMasDiv, dbfDiv, oBandera ) )},,,,,, .F., {||     ( nMode == 1 .AND. ( dbfTmpLin )->( LastRec() ) == 0 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 63 ], oBmpDiv, aGet[ 64 ], dbfDiv, oBandera )}, nil, "LUPA",, )




      oBmpDiv := TBitmap():ReDefine( 191, ( cBmpDiv( aTmp[ 63 ], dbfDiv ) ),, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )





      aGet[ 64 ] := TGetHlp():ReDefine( 192, { | u | If( PCount()==0, aTmp[ 64 ], aTmp[ 64 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.9999",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ 82 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 82 ], aTmp[ 82 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSay[ 11 ]:cText( UsuariosModel():getNombreWhereCodigo( aTmp[ 82 ] ) ), .T.  )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 11 ] := TGetHlp():ReDefine( 126, { | u | If( PCount()==0, cSay[ 11 ], cSay[ 11 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      aGet[ 61 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( ( dbfTmpLin )->( ordKeyCount() ) == 0 .OR. getConfigEmpresa( "PermitirCambioFacturaIVAIncluido", .F. ) )}, .F. )











      aGet[ 22 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cTarifa( aGet[ 22 ], oSay[ 5 ] ) )},,,,,, .F., {||     ( lWhen .AND. oUser():lAdministrador() )},, .F., .F.,,,,, {|Self|( BrwTarifa( aGet[ 22 ], oSay[ 5 ] ) )}, nil, "LUPA",, )




      oSay[ 5 ] := TGetHlp():ReDefine( 211, { | u | If( PCount()==0, cSay[ 5 ], cSay[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 23 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cObras( aGet[ 23 ], oSay[ 7 ], aTmp[ 7 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwObras( aGet[ 23 ], oSay[ 7 ], aTmp[ 7 ], dbfObrasT ) )}, nil, "LUPA",, )




      oSay[ 7 ] := TGetHlp():ReDefine( 221, { | u | If( PCount()==0, cSay[ 7 ], cSay[ 7 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )












      aGet[ 8 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cAlmacen( aGet[ 8 ], , oSay[ 2 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 8 ], oSay[ 2 ] ) )}, nil, "LUPA",, )






      oSay[ 2 ] := TGetHlp():ReDefine( 231, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( ExpAlmacen( aTmp[ 8 ], dbfTmpLin, oBrwLin ) )}, nil, "Bot",, )












      aGet[ 34 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cFPago( aGet[ 34 ], D():FormasPago( nView ), oSay[ 4 ] ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 34 ], oSay[ 4 ] ) )}, nil, "LUPA",, )




      oSay[ 4 ] := TGetHlp():ReDefine( 241, { | u | If( PCount()==0, cSay[ 4 ], cSay[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ 113 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 113 ], aTmp[ 113 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,, {|Self|( BrwBncCli( aGet[ 113 ], aGet[ 114 ], aGet[ 115 ], aGet[ 116 ], aGet[ 117 ], aGet[ 118 ], aGet[ 119 ], aTmp[ 7 ] ) )}, nil, "LUPA",, )






      aGet[ 114 ] := TGetHlp():ReDefine( 424, { | u | If( PCount()==0, aTmp[ 114 ], aTmp[ 114 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( lIbanDigit( aTmp[ 114 ], aTmp[ 116 ], aTmp[ 117 ], aTmp[ 118 ], aTmp[ 119 ], aGet[ 115 ] ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )





      aGet[ 115 ] := TGetHlp():ReDefine( 425, { | u | If( PCount()==0, aTmp[ 115 ], aTmp[ 115 ]:= u ) }, oFld:aDialogs[1],,, {||    ( lIbanDigit( aTmp[ 114 ], aTmp[ 116 ], aTmp[ 117 ], aTmp[ 118 ], aTmp[ 119 ], aGet[ 115 ] ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )






      aGet[ 116 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 116 ], aTmp[ 116 ]:= u ) }, oFld:aDialogs[1],,, {||    (  lCalcDC( aTmp[ 116 ], aTmp[ 117 ], aTmp[ 118 ], aTmp[ 119 ], aGet[ 118 ], aTmp[ 114 ] ), aGet[ 114 ]:lValid() )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )






      aGet[ 117 ] := TGetHlp():ReDefine( 421, { | u | If( PCount()==0, aTmp[ 117 ], aTmp[ 117 ]:= u ) }, oFld:aDialogs[1],,, {||    (  lCalcDC( aTmp[ 116 ], aTmp[ 117 ], aTmp[ 118 ], aTmp[ 119 ], aGet[ 118 ], aTmp[ 114 ] ), aGet[ 114 ]:lValid() )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )






      aGet[ 118 ] := TGetHlp():ReDefine( 422, { | u | If( PCount()==0, aTmp[ 118 ], aTmp[ 118 ]:= u ) }, oFld:aDialogs[1],,, {||    (  lCalcDC( aTmp[ 116 ], aTmp[ 117 ], aTmp[ 118 ], aTmp[ 119 ], aGet[ 118 ], aTmp[ 114 ] ), aGet[ 114 ]:lValid() )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )







      aGet[ 119 ] := TGetHlp():ReDefine( 423, { | u | If( PCount()==0, aTmp[ 119 ], aTmp[ 119 ]:= u ) }, oFld:aDialogs[1],, "9999999999", {||    (  lCalcDC( aTmp[ 116 ], aTmp[ 117 ], aTmp[ 118 ], aTmp[ 119 ], aGet[ 118 ], aTmp[ 114 ] ), aGet[ 114 ]:lValid() )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )











      aGet[ 20 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[1],,, {||    ( LoadAgente( aGet[ 20 ], D():Agentes( nView ), oSay[ 3 ], aGet[ 24 ], dbfAgeCom, dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( brwAgentes( aGet[ 20 ], oSay[ 3 ] ) )}, nil, "LUPA",, )






      oSay[ 3 ] := TGetHlp():ReDefine( 251, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( !empty( aTmp[ 20 ] ) .AND. lWhen )},, .F., .F.,,,,, {|Self|( changeAgentPercentageInAllLines( aTmp[ 24 ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, nil, "Bot",, )







      aGet[ 24 ] := TGetHlp():ReDefine( 252, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( validateAgentPercentage( aGet[ 24 ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( !empty( aTmp[ 20 ] ) .AND. lWhen )},, .F., .T.,,,,,, nil,,, )




      oGetAge := TGetHlp():ReDefine( 253, { | u | If( PCount()==0, nTotAge, nTotAge:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[ 21 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cRuta( aGet[ 21 ], dbfRuta, oSay[ 8 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwRuta( aGet[ 21 ], dbfRuta, oSay[ 8 ] ) )}, nil, "LUPA",, )




      oSay[ 8 ] := TGetHlp():ReDefine( 261, { | u | If( PCount()==0, cSay[ 8 ], cSay[ 8 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      TButton():ReDefine( 500, {||( AppDeta( oBrwLin, bEdtDet, aTmp, .F. ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},,, .F. )





      TButton():ReDefine( 501, {||( EdtDeta( oBrwLin, bEdtDet, aTmp, .F., nMode ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},,, .F. )






      TButton():ReDefine( 502, {||( WinDelRec( oBrwLin, dbfTmpLin, {|| DelDeta() }, {|| RecalculaTotal( aTmp ) } ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo )  )},,, .F. )



      TButton():ReDefine( 503, {||( WinZooRec( oBrwLin, bEdtDet, dbfTmpLin, .F., nMode, aTmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )





      TButton():ReDefine( 515, {||( AppDeta( oBrwLin, bEdtDet, aTmp, .T. ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo )  )},,, .F. )





      TButton():ReDefine( 524, {||( LineUp( dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 525, {||( LineDown( dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )




      oBtnKit := TButton():ReDefine( 526, {||( lEscandalloEdtRec( .T., oBrwLin ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )




      oBtnAtp := TButton():ReDefine( 527, {||( CargaAtipicasCliente( aTmp, oBrwLin, oDlg ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )




      TButton():ReDefine( 528, {||( TGetDialog():New( {|getDialog| runMasiveAppendLines( getDialog, aTmp ) } ):Run() )}, oFld:aDialogs[1],,, .F.,,,, .F. )





      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )

      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
      oBrwLin:bClrStd         := {|| { if( ( dbfTmpLin )->lKitChl, 8421504, 0 ), if( ( dbfTmpLin )->lControl, ( 240 + ( 240 * 256 ) + ( 240 * 65536 ) ), GetSysColor( 5 )) } }

      oBrwLin:cAlias          := dbfTmpLin

      oBrwLin:nMarqueeStyle   := 6
      oBrwLin:lFooter         := .T.
      oBrwLin:cName           := "Factura de cliente.Detalle"



      with object ( oBrwLin:AddCol() )
         :cHeader             := "Oferta"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfTmpLin )->lLinOfe }
         :nWidth              := 60
         :lHide               := .T.
         :SetCheck( { "gc_star2_16", "Nil16" } )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Número"
         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }
         :cSortOrder          := "nNumLin"
         :cEditPicture        := "9999"
         :nWidth              := 55
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Número Kit"
         :bEditValue          := {|| ( dbfTmpLin )->nNumKit }
         :cEditPicture        := "9999"
         :nWidth              := 55
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Posición"
         :cSortOrder          := "nPosPrint"
         :bEditValue          := {|| ( dbfTmpLin )->nPosPrint }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :cEditPicture        := "9999"
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Código"
         :cSortOrder          := "cRef"
         :bEditValue          := {|| ( dbfTmpLin )->cRef }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :nWidth              := 60
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "C. Barras"
         :bEditValue          := {|| cCodigoBarrasDefecto( ( dbfTmpLin )->cRef, dbfCodeBar ) }
         :nWidth              := 100
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Descripción"
         :cSortOrder          := "cDetalle"
         :bEditValue          := {|| Descrip( dbfTmpLin ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :nWidth              := 300
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "última venta"
         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecUltCom ) }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "última unidades"
         :bEditValue          := {|| ( dbfTmpLin )->nUniUltCom }
         :cEditPicture        := MasUnd()
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Último precio"
         :bEditValue          := {|| ( dbfTmpLin )->nPrcUltCom }
         :cEditPicture        := cPouDiv
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Valor prop. 1"
         :bEditValue          := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cValPr1, nView ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Valor prop. 2"
         :bEditValue          := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr2, nView ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfTmpLin )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Caducidad"
         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecCad ) }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Bultos"
         :bEditValue          := {|| ( dbfTmpLin )->nBultos }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := cNombreCajas()
         :bEditValue          := {|| ( dbfTmpLin )->nCanEnt }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| ( dbfTmpLin )->nUniCaja }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nEditType          := 1
         :bOnPostEdit        := {|o,x,n| ChangeUnidades( o, x, n, aTmp, dbfTmpLin ) }
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Sumar unidades"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| SumaUnidadLinea( aTmp ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_navigate_plus_16" )
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Restar unidades"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| RestaUnidadLinea( aTmp ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_navigate_minus_16" )
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total " + cNombreUnidades()
         :bEditValue          := {|| nTotNFacCli( dbfTmpLin ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Unidad de medición"
         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }
         :nWidth              := 105
         :lHide                 := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Peso"
         :bEditValue          := {|| ( dbfTmpLin )->nPesokg }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "T. Peso"
         :bEditValue          := {|| ( nTotNFacCli( dbfTmpLin ) * ( dbfTmpLin )->nPesokg ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }
         :nWidth              := 34
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Precio"
         :bEditValue          := {|| nTotUFacCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nEditType           := 1
         :bOnPostEdit         := {|o,x,n| ChangePrecio( o, x, n, aTmp, dbfTmpLin ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Costo"
         :bEditValue          := {|| ( dbfTmpLin )->nCosDiv }
         :cEditPicture        := cPinDiv
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Dto."
         :bEditValue          := {|| ( dbfTmpLin )->nDto }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 55
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Dto. Lin."
         :bEditValue          := {|| nDtoUFacCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Prm."
         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Age"
         :bEditValue          := {|| ( dbfTmpLin )->nComAge }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% " + cImp()
         :bEditValue          := {|| ( dbfTmpLin )->nIva }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 45
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Portes"
         :bEditValue          := {|| nTrnUFacCli( dbfTmpLin, nDpvDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Punto verde"
         :bEditValue          := {|| nPntUFacCli( dbfTmpLin, nDpvDiv, , aTmp[ 122 ] ) }
         :cEditPicture        := cPpvDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Imp. especiales"
         :bEditValue          := {|| nTotIFacCli( dbfTmpLin, nDouDiv, nRouDiv ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end


      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total"
         :bEditValue          := {|| nTotLFacCli( dbfTmpLin, nDouDiv, nRouDiv, nil, .T., aTmp[ 122 ], .T. ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 94
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecha ) }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Im. Imprimido"
         :bStrData            := {|| "" }
         :bEditValue          := {||( dbfTmpLin )->lImpLin }
         :nWidth              := 20
         :lHide               := .T.
         :SetCheck( { "gc_mail2_16", "Nil16" } )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader          := "Centro de coste"
         :bEditValue       := {|| ( dbfTmpLin )->cCtrCoste }
         :nWidth           := 20
         :lHide            := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Dirección"
         :bEditValue          := {|| ( dbfTmpLin )->cCodObr + Space( 1 ) + RetFld( aTmp[ 7 ] + ( dbfTmpLin )->cCodObr, dbfObrasT, "cNomObr" ) }
         :nWidth              := 250
         :lHide               := .T.
      end

      if nMode <> 3
         oBrwLin:bLDblClick   := {|| EdtDeta( oBrwLin, bEdtDet, aTmp, .F., nMode ) }
      end

      oBrwLin:CreateFromResource( 1 )








      aGet[ 44 ] := TGetHlp():ReDefine( 299, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )







     aGet[45 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[1],, "@ER 999.999999%", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .T.,,,,,, nil,,, )




      aGet[ 46 ] := TGetHlp():ReDefine( 309, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )







      aGet[ 47 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[1],, "@ER 999.999999%", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .T.,,,,,, nil,,, )








      aGet[ 48 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )







      aGet[ 49 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 49 ], aTmp[ 49 ]:= u ) }, oFld:aDialogs[1],, "@ER 999.999999%", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .T.,,,,,, nil,,, )




      aGet[ 50 ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )







      aGet[ 51 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[1],, "@ER 999.999999%", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .T.,,,,,, nil,,, )







      aGet[ 95 ] := TCheckBox():ReDefine( 361, { | u | If( PCount()==0, aTmp[ 95 ], aTmp[ 95 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )





      aGet[ 96 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 96 ], aTmp[ 96 ]:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     aTmp[ 95 ]},, .F., .F.,,,,,, nil,,, )




      aGet[ 97 ] := TGetHlp():ReDefine( 411, { | u | If( PCount()==0, aTmp[ 97 ], aTmp[ 97 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )},, .F., .F.,,,,,, nil,,, )







      aGet[ 38 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[1],, cPorDiv, {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .F.,,,,,, nil,,, )









      aGet[ 37 ] := TGetHlp():ReDefine( 412, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( dbfIva, aTmp[ 37 ] ) .AND. RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 37 ], dbfIva, , .T. ) )}, nil, "LUPA",, )





      oBrwIva                        := IXBrowse():New( oFld:aDialogs[1] )

      oBrwIva:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwIva:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwIva:SetArray( aTotIva, , , .F. )

      oBrwIva:nMarqueeStyle          := 6
      oBrwIva:lRecordSelector        := .F.
      oBrwIva:lHScroll               := .F.

      oBrwIva:CreateFromResource( 370 )

      with object ( oBrwIva:AddCol() )
         :cHeader          := "Base"
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "neto" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ) <> 0 ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "%" + cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), "@E 999.99" ), "" ), "" ) }
         :bEditValue       := {|| hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) }
         :nWidth           := 44
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
         :nEditType        := 1
         :bEditWhen        := {|| !IsNil( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) ) }
         :bOnPostEdit      := {|o,x| EdtIva( o, x, hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), dbfTmpLin, dbfIva, oBrwLin ), RecalculaTotal( aTmp ) }
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "% R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) <> nil .AND. aTmp[ 59 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ), cPicReq() ), "" ), "" ) }
         :nWidth           := 44
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impre" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ) <> nil .AND. aTmp[ 59 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end







      oGetNet := TSay():ReDefine( 401, {|| nTotNet}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetIva := TSay():ReDefine( 405, {|| nTotIva}, oFld:aDialogs[1],,,, .F.,, .F., .F., )






      aGet[ 59 ] := TCheckBox():ReDefine( 406, { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ) )},,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )}, .F. )





      oImpuestos := TCheckBox():ReDefine( 709, { | u | If( PCount()==0, lImpuestos, lImpuestos:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( .F. )}, .F. )



      oGetReq := TSay():ReDefine( 407, {|| nTotReq}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oGetTotal := TSay():ReDefine( 485, {|| nTotal}, oFld:aDialogs[1],,,, .F., oFontTotal(), .F., .F., )






      aGet[ 122 ] := TCheckBox():ReDefine( 409, { | u | If( PCount()==0, aTmp[ 122 ], aTmp[ 122 ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ), oBrwLin:Refresh() )},,,,, .F., {||     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) )}, .F. )



      oGetTotPnt := TSay():ReDefine( 404, {|| nTotPnt}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetTrn := TSay():ReDefine( 402, {|| nTotTrn}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetTotIvm := TSay():ReDefine( 403, {|| nTotIvm}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSayGetRnt := TSay():ReDefine( 800,, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetRnt := TGetHlp():ReDefine( 408, { | u | If( PCount()==0, cGetRnt, cGetRnt:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oGetMasDiv := TSay():ReDefine( 488, {|| cGetMasDiv}, oFld:aDialogs[1],,,, .F., oFontTotal(), .F., .F., )







      aGet[ 80 ] := TComboBox():ReDefine( 440, { | u | If( PCount()==0, aTmp[ 80 ], aTmp[ 80 ]:= u ) }, { "Ret. S/Base", "Ret. S/Total" }, oFld:aDialogs[1],, {||    ( RecalculaTotal( aTmp ) )}, {|Self|( RecalculaTotal( aTmp ) )},,,, .F., {||     ( lWhen )},,,,,, "aGet[ 80 ]",,,,,,, )







     aGet[ 81 ] := TGetHlp():ReDefine( 490, { | u | If( PCount()==0, aTmp[ 81 ], aTmp[ 81 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )



      oGetPctRet := TSay():ReDefine( 491, {|| cGetPctRet}, oFld:aDialogs[1],,,, .F.,, .F., .F., )









      aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( aTmp[ 1 ] >= "A" .AND. aTmp[ 1 ] <= "Z" )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .T., {||    ( UpSerie( aGet[ 1 ] ) )}, {||  ( DwSerie( aGet[ 1 ] ) )},,,, nil,,, )

         aGet[ 1 ]:bLostFocus := {|| aGet[ 69 ]:cText( cProCnt( aTmp[ 1 ] ) ) }





      aGet[ 2 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oFld:aDialogs[1],, "999999999",,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 3 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      oTipFac := TComboBox():ReDefine( 217, { | u | If( PCount()==0, cTipFac, cTipFac:= u ) }, aTipFac, oFld:aDialogs[1],,, {|Self|( SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ) )},,,, .F., {||     ( ( dbfTmpLin )->( LastRec() ) == 0 )},,,,,, "oTipFac",,,,,,, )






      aGet[ 6 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,, {|Self|aGet[ 6 ]:cText( Calendario( aTmp[ 6 ] ) )}, nil,,, )








      aGet[ 129 ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 129 ], aTmp[ 129 ]:= u ) }, oFld:aDialogs[1],, "@R 99:99:99", {||    ( iif(   !validTime( aTmp[ 129 ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









      aGet[ 123 ] := TCheckBox():ReDefine( 195, { | u | If( PCount()==0, aTmp[ 123 ], aTmp[ 123 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( uFieldEmpresa( "lRECC" ) .AND. nMode <> 3 )}, .F. )







      aGet[ 93 ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,, 112, )







      aGet[ 92 ] := TGetHlp():ReDefine( 113, { | u | If( PCount()==0, aTmp[ 92 ], aTmp[ 92 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,, 114, )





      oSayDias := TSay():ReDefine( 115, {||      ( aTmp[ 92 ] - aTmp[ 93 ] )}, oFld:aDialogs[1], "9999",,, .F.,, .F., .F., )








      oBtnPre := TBtnBmp():ReDefine( 601, "gc_notebook_user_16",,,,, {|Self|( BrwPreCli( aGet[ 41 ], dbfPreCliT, dbfPreCliL, dbfIva, dbfDiv, D():FormasPago( nView ), aGet[ 61 ] ) )}, oFld:aDialogs[1], .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )}, .F., "Importar presupuesto",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )








      oBtnPed := TBtnBmp():ReDefine( 602, "gc_clipboard_empty_user_16",,,,, {|Self|( BrwPedCli( aGet[ 40 ], dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, D():FormasPago( nView ), aGet[ 61 ] ) )}, oFld:aDialogs[1], .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )}, .F., "Importar pedido",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )








      oBtnAlb := TBtnBmp():ReDefine( 603, "gc_document_empty_16",,,,, {|Self|( BrwAlbCli( aGet[ 39 ], aGet[ 61 ] ) )}, oFld:aDialogs[1], .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )}, .F., "Importar albaran",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )








      oBtnSat := TBtnBmp():ReDefine( 604, "gc_power_drill_sat_user_16",,,,, {|Self|( BrwSatCli( aGet[ 42 ], dbfSatCliT, dbfSatCliL, dbfIva, dbfDiv, D():FormasPago( nView ), aGet[ 61 ] ) )}, oFld:aDialogs[1], .F., {||     ( lWhen .AND. ( dbfTmpLin )->( ordKeyCount() ) == 0 )}, .F., "Importar S.A.T.",,,,, !.T.,, .F.,,, .F., !.F.,, .F. )





      oBtnGrp := TButton():ReDefine( 512, {||( GrpAlb( aGet, aTmp, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen  )},,, .F. )






      aGet[ 39 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[1],, "@R #/#########/##", {||    ( cAlbCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 40 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[1],, "@R #/#########/##", {||    ( cPedCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 41 ] := TGetHlp():ReDefine( 152, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[1],, "@R #/#########/##", {||    ( cPreCli( aGet, aTmp, oBrwLin, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 42 ] := TGetHlp():ReDefine( 153, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[1],, "@R #/#########/##", {||    ( cSatCli( aGet, aTmp, oBrwLin, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 89 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 89 ], aTmp[ 89 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 12 ] := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSay[ 12 ], cSay[ 12 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[ 75 ] := TGetHlp():ReDefine( 235, { | u | If( PCount()==0, aTmp[ 75 ], aTmp[ 75 ]:= u ) }, oFld:aDialogs[2],,, {||    ( LoadTrans( aTmp, aGet[ 75 ], aGet[ 76 ], oSay[ 9 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( oTrans:Buscar( aGet[ 75 ] ), .T. )}, nil, "LUPA",, )




      oSay[ 9 ] := TGetHlp():ReDefine( 236, { | u | If( PCount()==0, cSay[ 9 ], cSay[ 9 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 76 ] := TGetHlp():ReDefine( 237, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[ 9 ] := TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[2],,, {||    cCajas( aGet[ 9 ], dbfCajT, oSay[ 10 ] )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 9 ], oSay[ 10 ] ) )}, nil, "LUPA",, )




      oSay[ 10 ] := TGetHlp():ReDefine( 166, { | u | If( PCount()==0, cSay[ 10 ], cSay[ 10 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[69] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[69], aTmp[69]:= u ) }, oFld:aDialogs[2],, "@R ###.######", {||    ( ChkProyecto( aTmp[69], oSay[ 6 ] ), .T. )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. lWhen )},, .F., .F.,,,,, {|Self|( BrwProyecto( aGet[69], oSay[ 6 ] ) )}, nil, "LUPA",, )




      oSay[ 6 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, cSay[ 6 ], cSay[ 6 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








        aGet[ 130 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 130 ], aTmp[ 130 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oCentroCoste:Existe( aGet[ 130 ], aGet[ 130 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 130 ] ) )}, nil, "LUPA",, 351 )






      aGet[35] := TGetHlp():ReDefine( 128, { | u | If( PCount()==0, aTmp[35], aTmp[35]:= u ) }, oFld:aDialogs[2],, "99999",,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )





      aGet[ 29 ] := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[2],, "@!",,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      aGet[ 83 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 83 ], aTmp[ 83 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 84 ] := TGetHlp():ReDefine( 401, { | u | If( PCount()==0, aTmp[ 84 ], aTmp[ 84 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ 132 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 132 ], aTmp[ 132 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )





      aGet[ 133 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 133 ], aTmp[ 133 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )










      aGet[ 28 ] := TGetHlp():ReDefine( 162, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,, {|Self|aGet[28]:cText( Calendario( aTmp[28] ) )}, nil,,, )




      aGet[ 101 ] := TGetHlp():ReDefine( 163, { | u | If( PCount()==0, aTmp[ 101 ], aTmp[ 101 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      aGet[65] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[65], aTmp[65]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      aGet[66] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, aTmp[66], aTmp[66]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      aGet[31] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[31], aTmp[31]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[ 86 ] := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 86 ], aTmp[ 86 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F. )




      aGet[ 87 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 87 ], aTmp[ 87 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )




      aGet[ 88 ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 88 ], aTmp[ 88 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )













      aGet[ 68 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 68 ], aTmp[ 68 ]:= u ) }, oFld:aDialogs[2],, { 410, 411, 412, 413 }, {||( lChangeRegIva( aTmp ) )},,,, .F., {||     ( nMode <> 3 )}, )







      aGet[ 98 ] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 98 ], aTmp[ 98 ]:= u ) }, oFld:aDialogs[2],, {||( lChangeEDI( aGet, aTmp ) )},,,,, .F., {||     ( lWhen )}, .F. )




      aGet[ 99 ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 99 ], aTmp[ 99 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[ 126 ] := TCheckBox():ReDefine( 135, { | u | If( PCount()==0, aTmp[ 126 ], aTmp[ 126 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F. )




      aGet[ 127 ] := TGetHlp():ReDefine( 136, { | u | If( PCount()==0, aTmp[ 127 ], aTmp[ 127 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ 128 ] := TGetHlp():ReDefine( 137, { | u | If( PCount()==0, aTmp[ 128 ], aTmp[ 128 ]:= u ) }, oFld:aDialogs[2],, "@R 99:99:99",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 100 ] := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, aTmp[ 100 ], aTmp[ 100 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[ 33 ] := TMultiGet():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F.,, )





      aGet[ 32 ] := TMultiGet():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F.,, )






      oBrwPgo                 := IXBrowse():New( oFld:aDialogs[7] )

      oBrwPgo:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPgo:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPgo:cAlias          := dbfTmpPgo
      oBrwPgo:cName           := "Factura de cliente.Pagos"

      oBrwPgo:nMarqueeStyle   := 6

      oBrwPgo:lFooter         := .T.
      oBrwPgo:nFooterHeight   := 35
      oBrwPgo:nFooterLines    := 2

      oBrwPgo:CreateFromResource( 200 )

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Cr. Sesión cerrada"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfTmpPgo )->lCloPgo }
         :nWidth              := 20
         :lHide               := .T.
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Estado"
         :bStrData            := {|| cEstadoRecibo( dbfTmpPgo ) }
         :bBmpData            := {|| nEstadoRecibo( dbfTmpPgo ) }
         :nWidth              := 90
         :AddResource( "Cnt16" )
         :AddResource( "Sel16" )
         :AddResource( "gc_undo_16" )
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Cn. Contabilizado"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfTmpPgo )->lConPgo }
         :nWidth              := 20
         :lHide               := .T.
         :SetCheck( { "Cnt16", "Nil16" } )
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Sesión"
         :bEditValue          := {|| ( dbfTmpPgo )->cTurRec }
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Expedido"
         :bEditValue          := {|| DtoC( ( dbfTmpPgo )->dPreCob ) }
         :nWidth              := 82
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Vencimiento"
         :bEditValue          := {|| DtoC( ( dbfTmpPgo )->dFecVto ) }
         :nWidth              := 82
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Cobro"
         :bEditValue          := {|| DtoC( ( dbfTmpPgo )->dEntrada ) }
         :lHide               := .T.
         :nWidth              := 70
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| ( dbfTmpPgo )->cDescrip }
         :nWidth              := 182
         :bFooter             := {|| "Total cobrado" + Chr(13)+Chr(10) + "Total pendiente" }
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Div."
         :bEditValue          := {|| cSimDiv( ( dbfTmpPgo )->cDivPgo, dbfDiv ) }
         :nWidth              := 30
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Importe"
         :bEditValue          := {|| ( dbfTmpPgo )->nImporte }
         :cEditPicture        := cPorDiv
         :nWidth              := 105
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :bFooter             := {|| transform( nTotCob, cPorDiv ) + Chr(13)+Chr(10) + transform( nTotFac - nTotCob, cPorDiv ) }
      end

      if nMode == 2
         oBrwPgo:bLDblClick   := {|| ExtEdtRecCli( dbfTmpPgo, nView, .T., oCtaRem, oCentroCoste ), oBrwPgo:Refresh(), RecalculaTotal( aTmp ) }
      end





      TButton():ReDefine( 500, {||( ExtEdtRecCli( dbfTmpPgo, nView, .T., oCtaRem, oCentroCoste ), oBrwPgo:Refresh(), RecalculaTotal( aTmp ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode == 2 )},,, .F. )





      TButton():ReDefine( 501, {||( ExtDelRecCli( dbfTmpPgo ), oBrwPgo:Refresh(), RecalculaTotal( aTmp ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode == 2 )},,, .F. )





      TButton():ReDefine( 502, {||( VisRecCli( ( dbfTmpPgo )->cSerie + str( ( dbfTmpPgo )->nNumFac ) + ( dbfTmpPgo )->cSufFac + str( ( dbfTmpPgo )->nNumRec ) + ( dbfTmpPgo )->cTipRec, .F. ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode == 2 )},,, .F. )





      TButton():ReDefine( 503, {||( PrnRecCli( ( dbfTmpPgo )->cSerie + str( ( dbfTmpPgo )->nNumFac ) + ( dbfTmpPgo )->cSufFac + str( ( dbfTmpPgo )->nNumRec ) + ( dbfTmpPgo )->cTipRec, .F. ) )}, oFld:aDialogs[7],,, .F., {||     ( nMode == 2 )},,, .F. )










      oGetPes := TGetHlp():ReDefine( 570, { | u | If( PCount()==0, nTotPes, nTotPes:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      oGetDif := TGetHlp():ReDefine( 580, { | u | If( PCount()==0, nTotalDif, nTotalDif:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      oBrwInc                 := IXBrowse():New( oFld:aDialogs[3] )

      oBrwInc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwInc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwInc:cAlias          := dbfTmpInc

      oBrwInc:nMarqueeStyle   := 6
      oBrwInc:cName           := "Factura de cliente.Incidencia"

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Re. Resuelta"
            :bStrData         := {|| "" }
            :bEditValue       := {|| ( dbfTmpInc )->lListo }
            :nWidth           := 90
            :SetCheck( { "Sel16", "Cnt16" } )
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }
            :nWidth           := 100
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }
            :nWidth           := 380
         end

         if nMode <> 3
            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }
         else
            oBrwInc:bLDblClick   := {|| WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) }
         end

         oBrwInc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[3],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[3],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwInc, dbfTmpInc ) )}, oFld:aDialogs[3],,, .F., {||     ( lWhen )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) )}, oFld:aDialogs[3],,, .F.,,,, .F. )



      oBrwDoc                 := IXBrowse():New( oFld:aDialogs[4] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc

      oBrwDoc:nMarqueeStyle   := 6
      oBrwDoc:nRowHeight      := 40
      oBrwDoc:nDataLines      := 2

      with object ( oBrwDoc:AddCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }
         :nWidth           := 940
      end

      if nMode <> 3
         oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) }
      end

      oBrwDoc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwDoc, dbfTmpDoc ) )}, oFld:aDialogs[4],,, .F., {||     ( lWhen )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[4],,, .F.,,,, .F. )




      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", rTrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[4],,, .F.,,,, .F. )



      oBrwEntidades                 := IXBrowse():New( oFld:aDialogs[5] )

      oBrwEntidades:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwEntidades:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwEntidades:cAlias          := dbfTmpEntidades

      oBrwEntidades:nMarqueeStyle   := 6

      with object ( oBrwEntidades:AddCol() )
         :cHeader          := "Entidades"
         :bEditValue       := {|| ( dbfTmpEntidades )->cCodEnt }
         :nWidth           := 300
      end

      with object ( oBrwEntidades:AddCol() )
         :cHeader          := "Rol"
         :bEditValue       := {|| ( dbfTmpEntidades )->cRol }
         :nWidth           := 300
      end

      oBrwEntidades:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( BrwEntidad( aTmp[ 7 ], dbfTmpEntidades ), oBrwEntidades:refresh() )}, oFld:aDialogs[5],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinAppRec( oBrwEntidades, bEdtEntidades, dbfTmpEntidades ) )}, oFld:aDialogs[5],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwEntidades, dbfTmpEntidades ) )}, oFld:aDialogs[5],,, .F., {||     ( lWhen )},,, .F. )





      oBrwEst                 := IXBrowse():New( oFld:aDialogs[6] )

      oBrwEst:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwEst:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwEst:cAlias          := dbfTmpEst

      oBrwEst:nMarqueeStyle   := 6
      oBrwEst:cName           := "Factura de cliente.Situaciones"

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Nombre"
            :bEditValue       := {|| ( dbfTmpEst )->cSitua }
            :nWidth           := 140
         end

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpEst )->dFecSit ) }
            :nWidth           := 90
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Hora"
            :bEditValue       := {|| trans( ( dbfTmpEst )->tFecSit, "@R 99:99:99" ) }
            :nWidth           := 90
         end

         if nMode <> 3
            oBrwEst:bLDblClick   := {|| WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) }
         end

         oBrwEst:CreateFromResource( 210 )





   TButton():ReDefine( 500, {||( WinAppRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[6],,, .F., {||     ( lWhen )},,, .F. )






   TButton():ReDefine( 501, {||( WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[6],,, .F., {||     ( lWhen )},,, .F. )





   TButton():ReDefine( 502, {||( WinDelRec( oBrwEst, dbfTmpEst ) )}, oFld:aDialogs[6],,, .F., {||     ( lWhen )},,, .F. )




   TButton():ReDefine( 503, {||( WinZooRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[6],,, .F.,,,, .F. )






      oMeter      := TApoloMeter():ReDefine( 200, { | u | if( pCount() == 0, nMeter, nMeter := u ) }, 10, oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )





      TButton():ReDefine( 3, {||( RecFacCli( aTmp ), oBrwLin:Refresh(), RecalculaTotal( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 4, {||( if( EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ), GenFacCli( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      oBtn := TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( if( exitNoSave( nMode, dbfTmpLin ), oDlg:end(), ) )}, oDlg,,, .F.,,,, .T. )

      oSayLabels[ 1 ] := TGroup():ReDefine( 700,, oFld:aDialogs[1],,,, .T. )
      oSayLabels[ 2 ] := TSay():ReDefine( 708,, oFld:aDialogs[1],,,, .F.,, .F., .F., )
      oSayLabels[ 4 ] := TSay():ReDefine( 710,, oFld:aDialogs[1],,,, .F.,, .F., .F., )
      oSayLabels[ 5 ] := TSay():ReDefine( 712,, oFld:aDialogs[1],,,, .F.,, .F., .F., )





      oBmpEmp := TBitmap():ReDefine( 500,, "Bmp\ImgFacCli.bmp", oDlg,,, .F., .F.,,, .F.,,, .F. )






      if nMode <> 3

         oFld:aDialogs[1]:AddFastKey( 113, {|| AppDeta( oBrwLin, bEdtDet, aTmp, .F. ) } )
         oFld:aDialogs[1]:AddFastKey( 114, {|| EdtDeta( oBrwLin, bEdtDet, aTmp, .F., nMode ) } )
         oFld:aDialogs[1]:AddFastKey( 115, {|| WinDelRec( oBrwLin, dbfTmpLin, {|| DelDeta() }, {|| RecalculaTotal( aTmp ) } ) } )

         oFld:aDialogs[3]:AddFastKey( 113, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
         oFld:aDialogs[3]:AddFastKey( 114, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
         oFld:aDialogs[3]:AddFastKey( 115, {|| WinDelRec( oBrwInc, dbfTmpInc ) } )

         oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 115, {|| WinDelRec( oBrwDoc, dbfTmpDoc ) } )

         oFld:aDialogs[6]:AddFastKey( 113, {|| WinAppRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) } )
         oFld:aDialogs[6]:AddFastKey( 114, {|| WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) } )
         oFld:aDialogs[6]:AddFastKey( 115, {|| WinDelRec( oBrwEst, dbfTmpEst ) } )

         oDlg:AddFastKey( 117,             {|| if( EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ), GenFacCli( 1 ), ) } )
         oDlg:AddFastKey( 116,             {|| EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ) } )
         oDlg:AddFastKey( 120,             {|| oDetCamposExtra:Play( Space( 1 ) ) } )
         oDlg:AddFastKey( 65,                {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )

      end

      oDlg:SetControlFastKey( "FacturasClientesLineas", nView, aGet, dbfTmpLin )

      oDlg:bStart := {|| StartEdtRec( aTmp, aGet, oDlg, nMode, hHash, oBrwLin ) }




   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( recalculaTotal( aTmp ) )}, .T.,,, {|Self|( initDialog( aTmp, oDlg, oBrwLin, oBrwInc, oBrwPgo ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ) )}, oDlg:bRClicked,,, )





   if ( oDlg:nResult <> 1 )
      CancelEdtRec( nMode, aGet )
   end

   DisableAcceso()





   ( D():FacturasClientes( nView ) )->( ordSetFocus( nOrd ) )





   if !empty( oBrwLin )
      oBrwLin:CloseData()
      oBrwLin:end()
   end

   if !empty( oBrwIva )
      oBrwIva:end()
   end

   if !empty( oBrwPgo )
      oBrwPgo:CloseData()
      oBrwPgo:end()
   end

   if !empty( oBrwInc )
      oBrwInc:CloseData()
      oBrwInc:end()
   end

   if !empty( oBrwDoc )
      oBrwDoc:end()
   end

   if !empty( oBtnPre )
      oBtnPre:end()
   end

   if !empty( oBtnPed )
      oBtnPed:end()
   end

   if !empty( oBtnAlb )
      oBtnAlb:end()
   end

   if !empty( oBtnSat )
      oBtnSat:end()
   end

   if !empty( oMenu )
      oMenu:end()
   end

   if !empty( oBmpDiv )
      oBmpDiv:end()
   end

   if !empty( oBmpEmp )
      oBmpEmp:end()
   end





   KillTrans()

   SysRefresh()

   EnableAcceso()

RETURN ( oDlg:nResult == 1 )



Static Function StartEdtRec( aTmp, aGet, oDlg, nMode, hHash, oBrwLin )

   if nMode == 1

      if lRecogerUsuario() .AND. !lGetUsuario( aGet[ 82 ] )
         oDlg:End()
      end

      if IsHash( hHash )

         do case
            case HGetKeyAt( hHash, 1 ) == "artículo"
               AppDeta( oBrwLin, bEdtDet, aTmp, nil, HGetValueAt( hHash, 1 ) )

            case HGetKeyAt( hHash, 1 ) == "Cliente"
               aGet[ 7 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 7 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "SAT"
               aGet[ 42 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 42 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "Presupuesto"
               aGet[ 41 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 41 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "Pedido"
               aGet[ 40 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 40 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "Albaran"
               aGet[ 39 ]:cText( HGetValueAt( hHash, 1 ) )
               aGet[ 39 ]:lValid()

            case HGetKeyAt( hHash, 1 ) == "Factura"
               cFacPrv( HGetValueAt( hHash, 1 ), aGet, aTmp, oBrwLin, nMode )

         end

      end

    else

      if !empty( aGet[ 130 ] )
         aGet[ 130 ]:lValid()
      endif

      if !Empty( aGet[ 75 ] )
         aGet[ 75 ]:lValid()
      end

   end













   lEscandalloEdtRec( .F., oBrwLin )





   if !empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )

      while !( dbfTmpInc )->( Eof() )
         if ( dbfTmpInc )->lAviso .AND. !( dbfTmpInc )->lListo
            MsgInfo( Trim( ( dbfTmpInc )->mDesInc ), "¡Incidencia!" )
         end
         ( dbfTmpInc )->( dbSkip() )
      end

      ( dbfTmpInc )->( dbGoTop() )

   end

Return ( nil )



Static Function InitDialog( aTmp, oDlg, oBrwLin, oBrwInc, oBrwPgo )

   EdtRecMenu( aTmp, oDlg )

   oBrwLin:MakeTotals()

   oBrwLin:Load()
   oBrwInc:Load()
   oBrwPgo:Load()

   oMeter:Set( 0 )

Return ( nil )



Static Function CancelEdtRec( nMode, aGet )

   local cNumDoc

   if ( nMode == 1 .OR. nMode == 4 )

      CursorWait()



      if len( aNumAlb ) > 0
         for each cNumDoc in aNumAlb
            if ( dbfAlbCliT )->( dbSeek( cNumDoc ) )
               SetFacturadoAlbaranCliente( .F., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS )
            end
         next
      end



      cNumDoc                             := aGet[ 41 ]:VarGet()

      if !empty( cNumDoc ) .AND. dbSeekInOrd( cNumDoc, "nNumPre", dbfPreCliT )
         if ( dbfPreCliT )->lEstado .AND. dbLock( dbfPreCliT )
            ( dbfPreCliT )->lEstado    := .F.
            ( dbfPreCliT )->( dbUnLock() )
         end
      end



      cNumDoc                             := aGet[ 40 ]:VarGet()

      if !empty( cNumDoc ) .AND. dbSeekInOrd( cNumDoc, "nNumPed", dbfPedCliT )
         if ( dbfPedCliT )->nEstado <> 1 .AND. dbLock( dbfPedCliT )
            ( dbfPedCliT )->nEstado    := 1
            ( dbfPedCliT )->( dbUnLock() )
         end
      end



      cNumDoc                             := aGet[ 42 ]:VarGet()

      if !empty( cNumDoc ) .AND. dbSeekInOrd( cNumDoc, "nNumSat", dbfSatCliT )
         if ( dbfSatCliT )->lEstado .AND. dbLock( dbfSatCliT )
            ( dbfSatCliT )->lEstado    := .F.
            ( dbfSatCliT )->( dbUnLock() )
         end
      end

      CursorWE()

   end

Return ( nil )



Static Function runMasiveAppendLines( oDialog, aCabeceraFactura )

   oDialog:cleanErrors()

   if !empty( oDialog:cGet )
      oneAppendLine( aCabeceraFactura, oDialog:cGet )
      oDialog:cleanGet()
   end

   if !empty( oDialog:cGetRelacion )
      masiveAppendLines( aCabeceraFactura, oDialog )
      oDialog:cleanGet()
   end

RETURN ( nil )



Static Function masiveAppendLines( aCabeceraFactura, oDialog )

   local aArticulo
   local aRelacion
   local aArticulos
   local aRelaciones
   local cRelaciones       := oDialog:cGetRelacion

   oDialog:cleanErrors()

   aRelaciones             := hb_atokens( cRelaciones, Chr(13)+Chr(10) )

   for each aRelacion in aRelaciones

      aArticulo           := hb_atokens( aRelacion, "," )

      if isArray( aArticulo ) .AND. len( aArticulo ) >= 2 .AND. !empty( aArticulo[1] ) .AND. !empty( aArticulo[2] )

         if !( oneAppendLine( aCabeceraFactura, aArticulo[1], val( aArticulo[2] ) ) )

            aadd( oDialog:aErrors, "- Error al añadir el artículo " + alltrim( aArticulo[1] ) )

         end

      end

   next

RETURN ( nil )



Static Function oneAppendLine( aCabeceraFactura, cCodigoArticulo, nUnidadesArticulos )

   local aLineasFacturas

   If( nUnidadesArticulos == nil, nUnidadesArticulos := 1, ) ;

   aLineasFacturas               := dbBlankRec( dbfTmpLin )

   setDlgMode( aLineasFacturas, nil, nil, nil, nil, nil, nil, nil, 1, nil, aCabeceraFactura )

   if loaArt( cCodigoArticulo, nil, aLineasFacturas, aCabeceraFactura, nil, nil, nil, nil, nil, nil, 1 )

      aLineasFacturas[ 19 ]  := nUnidadesArticulos

      SaveDeta( aLineasFacturas, aCabeceraFactura, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1 )

      if !empty( oBrwLin )
         oBrwLin:Refresh()
      end

      recalculaTotal( aCabeceraFactura )

      RETURN ( .T. )

   end

RETURN ( .F. )







STATIC FUNCTION EdtDet( aTmp, aGet, cFacCliL, oBrw, lTotLin, cCodArtEnt, nMode, aTmpFac )

   local oDlg
   local oFld
   local oBtn
   local oGet3
   local cGet3             := ""
   local oSayPr1
   local oSayPr2
   local cSayPr1           := ""
   local cSayPr2           := ""
   local oSayVp1
   local oSayVp2
   local cSayVp1           := ""
   local cSayVp2           := ""
   local oSayAlm
   local cSayAlm           := ""
   local bmpImage
   local oStkAct
   local nStkAct           := 0
   local oBtnSer
   local oSayGrp
   local cSayGrp           := ""
   local oSayFam
   local cSayFam           := ""
   local cCodArt           := Padr( aTmp[ 4 ], 32 )
   local oSayDias
   local oGetAge
   local cGetAge           := ""
   local oSayParKit

   cGetCelda               := Space(20)

   cTipoCtrCoste           := AllTrim( aTmp[ 103 ] )

   do case
   case nMode == 1

      aTmp[ 12  ]       := 1
      aTmp[ 21   ]       := aTmpFac[ 6 ]
      aTmp[ 26  ]       := lTotLin
      aTmp[ 39  ]       := aTmpFac[ 8 ]
      aTmp[ 40  ]       := aTmpFac[ 61 ]
      aTmp[ 22  ]       := cDefVta()
      aTmp[ 85 ]       := aTmpFac[ 40 ]
      aTmp[ 86 ]       := aTmpFac[ 6 ]
      aTmp[ 95 ]       := aTmpFac[ 129 ]
      aTmp[ 17 ]       := aTmpFac[ 20 ]

      aTmp[ 77  ]       := oGetTarifa:getTarifa()

      if !empty( cCodArtEnt )
         cCodArt              := Padr( cCodArtEnt, 32 )
      end

      aTmp[ 71 ]       := aTmpFac[ 93  ]
      aTmp[ 70 ]       := aTmpFac[ 92 ]

      if !empty( oTipFac ) .AND. oTipFac:nAt == 2
         aTmp[ 69 ]  := .T.
      else
         aTmp[ 69 ]  := .F.
      end

      aTmp[ 99 ]       := aTmpFac[ 23 ]

      cTipoCtrCoste           := "Centro de coste"

      oLinDetCamposExtra:setTemporalAppend()

   case nMode == 2

      aTmp[ 6 ] := Round( aTmp[ 6 ], nDouDiv )
      aTmp[ 7  ] := Round( aTmp[ 7  ], nDpvDiv )
      aTmp[ 33  ] := Round( aTmp[ 33  ], nDouDiv )
      lTotLin           := aTmp[ 26 ]

   case nMode == 5

      aTmp[ 33  ] := Round( aTmp[ 33  ], nDouDiv )
      lTotLin           := aTmp[ 26 ]

   end





   cOldCodArt           := aTmp[ 4    ]
   cOldPrpArt           := aTmp[ 28 ] + aTmp[ 29 ] + aTmp[ 30 ] + aTmp[ 31 ]
   cOldUndMed           := aTmp[ 16 ]



   cSayGrp              := RetFld( aTmp[ 56 ], oGrpFam:GetAlias() )
   cSayFam              := RetFld( aTmp[ 55 ], dbfFamilia )
   cGetAge                 := cNbrAgent( aTmp[ 17 ] )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "líneas de facturas de clientes", "LFACCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )











      oFld := TFolder():ReDefine( 400, {"&General", "Da&tos", "&Observaciones", "&Centro coste"}, { "LFACCLI_8","LFACCLI_6","LFACCLI_3","LCTRCOSTE" }, oDlg,,,,, .F., )







      aGet[ 4 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodArt, cCodArt:= u ) }, oFld:aDialogs[1],,, {||    ( loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .T., , oSayParKit ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[ 4 ], aGet[ 5 ] , , , , aGet[ 45 ], aTmp[ 28 ], aTmp[ 29 ], aGet[ 30 ], aGet[ 31 ], aGet[ 46 ], if( uFieldEmpresa( "lStockAlm" ), aTmp[ 39 ], nil ) ) )}, nil, "LUPA",, )




      aGet[ 5 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( ( lModDes() .OR. empty( aTmp[ 5 ] ) ) .AND. nMode <> 3 .AND. nMode <> 5 )},, .F., .F.,,,,,, nil,,, )





      aGet[23] := TMultiGet():ReDefine( 111, { | u | If( PCount()==0, aTmp[23], aTmp[23]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( ( lModDes() .OR. empty( aTmp[ 23 ] ) ) .AND. nMode <> 3 .AND. nMode <> 5 )}, .F.,, )











      aGet[ 45 ] := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 113, )

      aGet[ 45 ]:bValid   := {|| loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .T. )  }






      aGet[ 46 ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 341, )






      aGet[ 112 ] := TComboBox():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 112 ], aTmp[ 112 ]:= u ) }, {""}, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode == 1 )},,,,,, "aGet[ 112 ]",,,,,,, )



      oSayParKit := TSay():ReDefine( 211,, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      BrowseProperties():newInstance( 500, oFld:aDialogs[1], nView )





      oGetCelda := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, cGetCelda, cGetCelda:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 184, )

      oGetCelda:bValid              := {|| SearchProperty( oGetCelda, BrowseProperties():getInstance():oBrwProperties ), .T. }









      aGet[ 30 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 30 ], oSayVp1, aTmp[ 28 ], D():PropiedadesLineas( nView ) ), loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ), .F. ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 30 ], oSayVp1, aTmp[ 28 ] ) )}, nil, "LUPA",, )

         aGet[ 30 ]:bChange   := {|| aGet[ 30 ]:Assign(), if( !uFieldEmpresa( "lNStkAct" ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ], oStkAct ), .T. ) }



      oSayPr1 := TSay():ReDefine( 271, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp1 := TGetHlp():ReDefine( 272, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 31 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 31 ], oSayVp2, aTmp[ 29 ], D():PropiedadesLineas( nView ) ), loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ), .F. ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 31 ], oSayVp2, aTmp[ 29 ] ) )}, nil, "LUPA",, )

         aGet[ 31 ]:bChange   := {|| aGet[ 31 ]:Assign(), if( !uFieldEmpresa( "lNStkAct" ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ], oStkAct ), .T. ) }



      oSayPr2 := TSay():ReDefine( 281, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp2 := TGetHlp():ReDefine( 282, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 8 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( lCalcDeta( aTmp, aTmpFac ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,, 351, )









      aGet[ 11 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lTiva( dbfIva, aTmp[ 11 ], @aTmp[ 57 ] ) )},,,,,, .F., {||     ( lModIva() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 11 ], dbfIva, , .T. ) )}, nil, "LUPA",, )









      aGet[ 42 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[1],, cPouDiv,,,,,,, .F., {||     ( uFieldEmpresa( "lModImp" ) .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,, {|Self|( oNewImp:nBrwImp( aGet[ 42 ] ) )}, nil,, 126, )







      aGet[ 93 ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     ( uFieldEmpresa( "lUseBultos" ) .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,, 451, )

      aGet[ 93 ]:Cargo          := "nBultos"
      aGet[ 93 ]:bPostValidate  := {| oSender | runScript( "FacturasClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpFac ) }









      aGet[12] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[12], aTmp[12]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( lCalcDeta( aTmp, aTmpFac ), loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) )},,,,,, .F., {||     ( nMode <> 3 .AND. lUseCaj() .AND. !lTotLin .AND. nMode <> 5 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ), loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 131, )

      aGet[ 12 ]:Cargo          := "nCanEnt"
      aGet[ 12 ]:bPostValidate  := {| oSender | runScript( "FacturasClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpFac ) }










      aGet[ 19 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( lCalcDeta( aTmp, aTmpFac ), loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 .AND. oUser():lModificaUnidades() )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ), loaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 141, )

      aGet[ 19 ]:Cargo          := "nUniCaja"
      aGet[ 19 ]:bPostValidate  := {| oSender | runScript( "FacturasClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpFac ) }

      BrowseProperties():getInstance():setBindingUnidades( aGet[ 19 ] )








      aGet[ 16 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oUndMedicion:Existe( aGet[ 16 ], aGet[ 16 ]:oHelpText, "cNombre" ), ValidaMedicion( aTmp, aGet ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oUndMedicion:Buscar( aGet[ 16 ] ), ValidaMedicion( aTmp, aGet ) )}, nil, "LUPA",, 171 )













      aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] := TGetHlp():ReDefine( 520, { | u | If( PCount()==0, aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ], aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,, 521, )

         aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ], aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,, 531, )

         aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ], aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,, 541, )

         aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetColor( 8388608 )








      aGet[ 6 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( lCalcDeta( aTmp, aTmpFac ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,,, )












      aGet[ 77 ] := TGetHlp():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 77 ], aTmp[ 77 ]:= u ) }, oFld:aDialogs[1],, "9", {||    ( aTmp[ 77 ] >= 1 .AND. aTmp[ 77 ] <= 6 )},,,,,, .F., {||     ( nMode <> 3 .AND. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) )}, {|nKey,nFlags,Self| (  changeTarifa( aTmp, aGet, aTmpFac ), loadComisionAgente( aTmp, aGet, aTmpFac ), lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,, {||      1}, {||      6},, nil,,, )










      aGet[ 7 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],, cPpvDiv, {||    ( lCalcDeta( aTmp, aTmpFac ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,, 152, )





      aGet[ 32 ] := TGetHlp():ReDefine( 295, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 14 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 15 ] := TGetHlp():ReDefine( 175, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 67 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 67 ], aTmp[ 67 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 68 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 68 ], aTmp[ 68 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. nMode <> 5 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 94 ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ 94 ], aTmp[ 94 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 84 ] := TCheckBox():ReDefine( 440, { | u | If( PCount()==0, aTmp[ 84 ], aTmp[ 84 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )

      aGet[ 84 ]:bChange   := {|| if( aTmp[ 84 ], ( aGet[ 11 ]:cText( 0 ), aGet[ 11 ]:HardDisable() ), ( aGet[ 11 ]:HardEnable() ) ) }











      aGet[ 33 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( aTmp[33] >= 0 )}, ( 255 + ( 0 * 256 ) + ( 0 * 65536 ) ),,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,, {||      0},,, nil,, 261, )








      aGet[ 9 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalcDeta( aTmp, aTmpFac ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 10 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalcDeta( aTmp, aTmpFac ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 18 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( lCalcDeta( aTmp, aTmpFac ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, aTmpFac ) ) }, .F., .T.,,,,,, nil,,, )





      oComisionLinea := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, nComisionLinea, nComisionLinea:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      oTotalLinea := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nTotalLinea, nTotalLinea:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 53 ] := TGetHlp():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oTipArt:Existe( aGet[ 53 ], oGet3 ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )},, .F., .F.,,,,, {|Self|( oTipArt:Buscar( aGet[ 53 ] ) )}, nil, "LUPA",, )




      oGet3 := TGetHlp():ReDefine( 206, { | u | If( PCount()==0, cGet3, cGet3:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 17 ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oGetAge := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cGetAge, cGetAge:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )












      aGet[ 39 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 39 ], , oSayAlm ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 39 ], oSayAlm ) )}, nil, "LUPA",, )

      aGet[ 39 ]:bLostFocus   := {|| if( !uFieldEmpresa( "lNStkAct" ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ], oStkAct ), .T. ) }




      oSayAlm := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSayAlm, cSayAlm:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      oStkAct := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, nStkAct, nStkAct:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 37 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[1],, cPouDiv,,,,,,, .F., {||     ( RolesModel():getRolVerPreciosCosto( Auth():rolUuid() ) .AND.  nMode <> 3 )},, .F., .F.,,,,,, nil,, 321, )
      TBtnBmp():ReDefine( 322, "gc_businessman_16",,,,,{|| THistoricoProveedor():run( aTmp[ 4 ], aGet[ 37 ], aGet[ 59 ] ) }, oFld:aDialogs[1], .F., , .F.,  )










      aGet[102] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[102], aTmp[102]:= u ) }, oFld:aDialogs[2],, "9999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[27] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[27], aTmp[27]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )






      aGet[21] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[21], aTmp[21]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .T.,,,,, {|Self|aGet[21]:cText( Calendario( aTmp[21] ) )}, nil,,, )






      aGet[ 86 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 86 ], aTmp[ 86 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .T.,,,,, {|Self|aGet[ 86 ]:cText( Calendario( aTmp[ 86 ] ) )}, nil,,, )








      aGet[ 95 ] := TGetHlp():ReDefine( 361, { | u | If( PCount()==0, aTmp[ 95 ], aTmp[ 95 ]:= u ) }, oFld:aDialogs[2],, "@R 99:99:99", {||    ( iif(   !validTime( aTmp[ 95 ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )




      aGet[13] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[13], aTmp[13]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





      aGet[38] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[38], aTmp[38]:= u ) }, oFld:aDialogs[2],, cPouDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 61 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( aGet[ 61 ], bmpImage ) ) }, .F., .F.,,,,, {|Self|( GetBmp( aGet[ 61 ], bmpImage ) )}, nil, "LUPA",, )











      aGet[ 56 ] := TGetHlp():ReDefine( ( 150 ), { | u | If( PCount()==0, aTmp[ 56 ], aTmp[ 56 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSayGrp:cText( RetFld( aTmp[ 56  ], oGrpFam:GetAlias() ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oGrpFam:Buscar( aGet[ 56 ] ) )}, nil, "LUPA",, )




      oSayGrp := TGetHlp():ReDefine( ( 151 ), { | u | If( PCount()==0, cSayGrp, cSayGrp:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 55 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSayFam:cText( RetFld( aTmp[ 55  ], dbfFamilia ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFamilia( aGet[ 55 ], oSayFam ) )}, nil, "LUPA",, )




      oSayFam := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSayFam, cSayFam:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








    aGet[ 59 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cProvee( aGet[ 59 ], dbfProvee, aGet[ 59 ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwProvee( aGet[ 59 ], aGet[ 59 ]:oHelpText ) )}, nil, "LUPA",, 321 )








      aGet[ 99 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 99 ], aTmp[ 99 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cObras( aGet[ 99 ], aGet[ 99 ]:oHelpText, aTmpFac[ 7 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwObras( aGet[ 99 ], aGet[ 99 ]:oHelpText, aTmpFac[ 7 ], dbfObrasT ) )}, nil, "LUPA",, 331 )




      oRentabilidadLinea := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, cRentabilidadLinea, cRentabilidadLinea:= u ) }, oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 301, )




      aGet[ 83 ] := TCheckBox():ReDefine( 411, { | u | If( PCount()==0, aTmp[ 83 ], aTmp[ 83 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 47 ] := TCheckBox():ReDefine( 331, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 48 ] := TCheckBox():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 49 ] := TCheckBox():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 49 ], aTmp[ 49 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 36 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[2],, { 350, 351, 352 },,,,, .F., {||     ( nMode <> 3 )}, )









    aGet[ 58 ] := TMultiGet():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





    aGet[ 81 ] := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 81 ], aTmp[ 81 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )












      aGet[ 96 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 96 ], aTmp[ 96 ]:= u ) }, oFld:aDialogs[4],,, {||    ( oCentroCoste:Existe( aGet[ 96 ], aGet[ 96 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 96 ] ) )}, nil, "LUPA",, 411 )






      oTipoCtrCoste := TComboBox():ReDefine( 140, { | u | If( PCount()==0, cTipoCtrCoste, cTipoCtrCoste:= u ) }, aTipoCtrCoste, oFld:aDialogs[4],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oTipoCtrCoste",,,,,,, )

         oTipoCtrCoste:bChange   := {|| clearGet( aGet[ 104 ] ), loadGet( aGet[ 104 ], cTipoCtrCoste ) }







      aGet[ 104 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 104 ], aTmp[ 104 ]:= u ) }, oFld:aDialogs[4],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 160 )





    bmpImage := TBitmap():ReDefine( 220,, ( cFileBitmap( cPatImg(), aTmp[ 61 ] ) ), oDlg,, { |nRow,nCol,nKeyFlags| ( bmpImage:lStretch := !bmpImage:lStretch, bmpImage:Refresh() ) }, .F., .F.,,, .F.,,, .F. )

        bmpImage:SetColor( , GetSysColor( 15 ) )





    oBtn := TButton():ReDefine( 1, {||SaveDeta( aTmp, aTmpFac, aGet, oBrw, oDlg, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, oTotalLinea, oStkAct, nStkAct, cCodArt, oBtn, oBtnSer, , oSayParKit )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




    TButton():ReDefine( 9, {||( ChmHelp( "añadir_v" ) )}, oDlg,,, .F.,,,, .F. )




    oBtnSer := TButton():ReDefine( 552, {||( EditarNumeroSerie( aTmp, oStock, nMode ) )}, oDlg,,, .F.,,,, .F. )



   if nMode <> 3
      if uFieldEmpresa( "lGetLot")
         oDlg:AddFastKey( 13,   {|| if( !Empty( aGet[ 4 ] ), ( aGet[ 30 ]:lValid(), aGet[ 31 ]:lValid() ), ), oBtn:SetFocus(), oBtn:Click() } )
      end
      oDlg:AddFastKey( 116,          {|| oBtn:SetFocus(), oBtn:Click() } )
   end

   oDlg:AddFastKey( 117, {|| oBtnSer:Click() } )
   oDlg:AddFastKey( 120, {|| oLinDetCamposExtra:Play( if( nMode == 1, "", Str( ( dbfTmpLin )->( OrdKeyNo() ) ) ) ) } )



   oDlg:bStart    := {||   SetDlgMode( aTmp, aGet, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nMode, oTotalLinea, aTmpFac, oRentabilidadLinea, , oSayParKit ), loadGet( aGet[ 104 ], cTipoCtrCoste ), aGet[ 104 ]:lValid(), if( !empty( cCodArtEnt ), aGet[ 4 ]:lValid(), ), aGet[ 59 ]:lValid(), aGet[ 99 ]:lValid() }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( menuEdtDet( aGet[ 4 ], oDlg, , if( nMode == 1, "", Str( ( dbfTmpLin )->( OrdKeyNo() ) ) ) ) )}, oDlg:bRClicked,,, )

   if !Empty( oDetMenu )
      oDetMenu:End()
   end

   if !empty( bmpImage )
      bmpImage:End()
   end

   BrowseProperties():endInstance()

RETURN ( oDlg:nResult == 1 )



Static Function EdtInc( aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode, aTmpFac )

   local oDlg

   if nMode == 1
      aTmp[ 1   ] := aTmpFac[ 1  ]
      aTmp[ 2  ] := aTmpFac[ 2 ]
      aTmp[ 3  ] := aTmpFac[ 3 ]
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "incidencias de facturas a clientes", "INCIDENCIA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function EdtEst( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpFac )

      local oDlg

      if nMode == 1

         aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("tFecSit")) ]  := GetSysTime()

    end

      oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Situación del documento del cliente", "SITUACION_ESTADO",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






         aGet[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("cSitua")) ] := TComboBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("cSitua")) ], aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("cSitua")) ]:= u ) }, ( SituacionesModel():getArrayNombres() ), oDlg,,,,,,, .F., {||     ( nMode <> 3 )},,,,,, 'aGet[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("cSitua")) ]',,,,,,, )







        aGet[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("dFecSit")) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("dFecSit")) ], aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("dFecSit")) ]:= u ) }, oDlg,,,,,,,,, .F., {||  ( nMode <> 3 )},, .F., .T.,,,,, {|Self|aGet[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("dFecSit")) ]:cText( Calendario( aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("dFecSit")) ] ) )}, nil,,, )









      aGet[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("tFecSit")) ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("tFecSit")) ], aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("tFecSit")) ]:= u ) }, oDlg,, "@R 99:99:99", {||    ( iif( !validTime( aTmp[ (D():FacturasClientesSituaciones( nView ))->(fieldpos("tFecSit")) ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





         TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpEst, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





         TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpEst, oBrw, nMode ), oDlg:end( 1 ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( .T. )




Static Function EdtDoc( aTmp, aGet, dbfFacCliD, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de pedidos a proveedor", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | " + "*.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function EdtEntidades( aTmp, aGet, dbfTmpEntidades, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oCodigo

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "entidades", "Facturas_Entidades",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







      oCodigo := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpEntidades )->( FieldPos( "cCodEnt" ) ) ], aTmp[ ( dbfTmpEntidades )->( FieldPos( "cCodEnt" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 101 )

      oCodigo:bHelp     := {|| oEntidades:Buscar( oCodigo ) }
      oCodigo:bValid    := {|| iif( !empty( oCodigo:varGet() ), oEntidades:Existe( oCodigo, oCodigo:oHelpText, "cDesEnt" ), .T. ) }




      TComboBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpEntidades )->( FieldPos( "cRol" ) ) ], aTmp[ ( dbfTmpEntidades )->( FieldPos( "cRol" ) ) ]:= u ) }, aRolesValues(), oDlg,,,,,,, .F.,,,,,,,,,,,,,, )




      TButton():ReDefine( 1, {||( endEdtEntidades( dbfTmpEntidades, aTmp, oBrw, nMode, oDlg, aTmp[ ( dbfTmpEntidades )->( FieldPos( "cCodEnt" ) ) ], aTmp[ ( dbfTmpEntidades )->( FieldPos( "cRol" ) ) ] ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )


      oDlg:AddFastKey( 116, {|| endEdtEntidades( dbfTmpEntidades, aTmp, oBrw, nMode, oDlg, aTmp[ ( dbfTmpEntidades )->( FieldPos( "cCodEnt" ) ) ], aTmp[ ( dbfTmpEntidades )->( FieldPos( "cRol" ) ) ] ) } )


   oDlg:bStart    := {|| oCodigo:lValid() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



static function lvalid( oDbf, CodigoEntidad, RolEntidad )

   if empty( CodigoEntidad )
         msgInfo( "La entidad no puede estar vacia." )
         Return .F.
      endif

      if empty( RolEntidad )
         msgInfo( "El rol no puede estar vacio." )
         return .F.
      endif

   if dbSeekInOrd( ( padr( CodigoEntidad, 60 ) + padr( RolEntidad, 60 ) ), "cRolEnt", oDbf )
      msgInfo( "Codigo y rol ya introducidos." )
      return .F.
   endif

return  .T.



static function  endEdtEntidades( oDbf, aTmp, oBrw, nMode, oDlg, CodEntidad, RolEntidad )

   if lValid( oDbf, CodEntidad, RolEntidad )
      WinGather( aTmp, nil, oDbf, oBrw, nMode )
      oDlg:end( 1 )
   endif

return .T.



STATIC FUNCTION EdtTablet( aTmp, aGet, dbf, oBrw, hHash, bValid, nMode )

RETURN ( nil )



Static function startEdtTablet( nMode, aGet, oSayTextRuta )

   if ( nMode == 1 )
      changeRutaTablet( aGet, oSayTextRuta )
   end

Return ( nil )



STATIC FUNCTION EdtDetTablet( aTmp, aGet, dbf, oBrw, lTotLin, cCodArtEnt, nMode, aTmpFac )

RETURN ( nil )



static function EdtResumenTablet( aTmp, aGet, nMode, oDlgFac )

RETURN ( nil )



Static Function priorClient( aGet, oSayTextRuta )

   oClienteRutaNavigator:gotoPrior( oSayTextRuta )

Return ( moveClient( aGet ) )



Static Function nextClient( aGet, oSayTextRuta )

   oClienteRutaNavigator:gotoNext( oSayTextRuta )

Return ( moveClient( aGet ) )



Static Function moveClient( aGet )

   if !empty( aGet[ 7 ] )
      aGet[ 7 ]:cText( oClienteRutaNavigator:getSelected() )
      aGet[ 7 ]:Refresh()
      aGet[ 7 ]:lValid()
      aGet[ 23 ]:cText( Space( 10 ) )
      aGet[ 23 ]:Refresh()
      aGet[ 23 ]:lValid()
   end

Return ( nil )



static function changeRutaTablet( aGet, oSayTextRuta )

   local cOrder

   if hhaskey( hOrdenRutas, AllTrim( Str( oCbxRuta:nAt ) ) )

      cOrder      := hOrdenRutas[ AllTrim( Str( oCbxRuta:nAt ) ) ]

      oClienteRutaNavigator:getClientesRutas( cOrder, oSayTextRuta )

      oClienteRutaNavigator:gotoLastProcesed( oSayTextRuta )

      moveClient( aGet )

   end

Return ( nil )



static function ChangeSerieTablet( aGet )

   local cSerie   := aGet[ 1 ]:VarGet()

   do case
      case cSerie == "A"
         if !empty( aGet[ 1 ] )
            aGet[ 1 ]:cText( "B" )
         end

      case cSerie == "B"
         if !empty( aGet[ 1 ] )
            aGet[ 1 ]:cText( "C" )
         end

      case cSerie == "C"
         if !empty( aGet[ 1 ] )
            aGet[ 1 ]:cText( "A" )
         end

      otherwise
         if !empty( aGet[ 1 ] )
            aGet[ 1 ]:cText( "A" )
         end

   end

   aGet[ 1 ]:Refresh()

Return ( .T. )



static function cDocumentoDefecto( cSerie, aCbxOrd )

   local cDocumento     := ""
   local cFormato       := cFormatoFacturasClientes( cSerie )
   local nFormato       := aScan( aCbxOrd, {|x| Left( x, 3 ) == cFormato } )
   nFormato             := Max(Min(nFormato,len(aCbxOrd)),1)

return aCbxOrd[ nFormato ]



Function FacCliTablet()

   local oDlg
   local oBrw
   local oSayGeneral
   local nAltoGet        := 23
   local oBtnSalir
   local oGetSearch
   local cGetSearch      := Space( 100 )
   local oCbxOrd
   local aCbxOrd         := { "Número", "Fecha", "Código", "Nombre" }
   local cCbxOrd         := "Número"
   local oBtnAdd
   local oBtnEdt
   local oBtnDel
   local oBtnUp
   local oBtnDown
   local oBtnUpPage
   local oBtnDownPage
   local cCodigoAgente     := AccessCode():cAgente



   if !OpenFiles( .T. )
      Return .F.
   end

   ( D():FacturasClientes( nView ) )->( OrdSetFocus( "dFecDes" ) )
   ( D():FacturasClientes( nView ) )->( dbGoTop() )

   if !empty(cCodigoAgente)
      ( D():FacturasClientes( nView ) )->( dbsetfilter( {|| Field->cCodAge == cCodigoAgente }, "cCodAge == cCodigoAgente" ) )
      ( D():FacturasClientes( nView ) )->( dbgotop() )
   end





   oDlg                 := TDialog():New( 1, 5, 40, 100, "gestool TABLET",,, .F., nOR( 128, 2147483648, 12582912, 524288, 131072, 65536 ),, ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ),,, .F.,, oGridFont(),,,, .F.,, "oDlg" )















     oSayGeneral        := TGridSay():Build(    {  "nRow"      => 0, "nCol"      => {|| GridWidth( 0.5, oDlg ) }, "bText"     => {|| "Facturas de clientes" }, "oWnd"      => oDlg, "oFont"     => oGridFontBold(), "lPixels"   => .T., "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), "nWidth"    => {|| GridWidth( 8, oDlg ) }, "nHeight"   => 32, "lDesign"   => .F. } )







      oBtnSalir         := TGridImage():Build(  {  "nTop"      => 5, "nLeft"     => {|| GridWidth( 10.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_end_64", "bLClicked" => {|| oDlg:End() }, "oWnd"      => oDlg } )












      oGetSearch        := TGridGet():Build(    {  "nRow"      => 45, "nCol"      => {|| GridWidth( 0.5, oDlg ) }, "bSetGet"   => {|u| if( PCount() == 0, cGetSearch, cGetSearch := u ) }, "oWnd"      => oDlg, "nWidth"    => {|| GridWidth( 9, oDlg ) }, "nHeight"   => 25, "bValid"    => {|| OrdClearScope( oBrw, D():FacturasClientes( nView ) ) }, "bChanged"  => {| nKey, nFlags, Self | AutoSeek( nKey, nFlags, Self, oBrw, D():FacturasClientes( nView ), .T. ) } } )












      oCbxOrd           := TGridComboBox():Build({ "nRow"      => 45, "nCol"      => {|| GridWidth( 9.5, oDlg ) }, "bSetGet"   => {|u| if( PCount() == 0, cCbxOrd, cCbxOrd := u ) }, "oWnd"      => oDlg, "nWidth"    => {|| GridWidth( 2, oDlg ) }, "nHeight"   => 25, "aItems"    => aCbxOrd, "bChange"   => {| nKey, nFlags, Self | ( D():FacturasClientes( nView ) )->( OrdSetFocus( oCbxOrd:nAt ) ), oGetSearch:SetFocus() } } )











      oBtnAdd           := TGridImage():Build(  {  "nTop"      => 75, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_add_64", "bLClicked" => {|| WinAppRec( nil, bEdtTablet, D():FacturasClientes( nView ) ) }, "oWnd"      => oDlg } )







      oBtnEdt           := TGridImage():Build(  {  "nTop"      => 75, "nLeft"     => {|| GridWidth( 2, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_edit_64", "bLClicked" => {|| WinEdtRec( nil, bEdtTablet, D():FacturasClientes( nView ) ) }, "oWnd"      => oDlg } )

      if .F.






      oBtnDel           := TGridImage():Build(  {  "nTop"      => 75, "nLeft"     => {|| GridWidth( 3.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_minus_64", "bLClicked" => {|| WinDelRec( oBrw, D():FacturasClientes( nView ), {|| QuiFacCli() }, , , .T. ) }, "oWnd"      => oDlg } )
      end







      oBtnUpPage        := TGridImage():Build(  {  "nTop"      => 75, "nLeft"     => {|| GridWidth( 7.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_page_up_64", "bLClicked" => {|| oBrw:PageUp(), oBrw:Select( 0 ), oBrw:Select( 1 ), oBrw:Refresh()  }, "oWnd"      => oDlg } )







      oBtnUp         := TGridImage():Build(  {     "nTop"      => 75, "nLeft"     => {|| GridWidth( 8.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_up_64", "bLClicked" => {|| oBrw:GoUp(), oBrw:Select( 0 ), oBrw:Select( 1 ), oBrw:Refresh()  }, "oWnd"      => oDlg } )







      oBtnDown          := TGridImage():Build(  {  "nTop"      => 75, "nLeft"     => {|| GridWidth( 9.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_down_64", "bLClicked" => {|| oBrw:GoDown(), oBrw:Select( 0 ), oBrw:Select( 1 ), oBrw:Refresh() }, "oWnd"      => oDlg } )







      oBtnDownPage      := TGridImage():Build(  {  "nTop"      => 75, "nLeft"     => {|| GridWidth( 10.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "flat_page_down_64", "bLClicked" => {|| oBrw:PageDown(), oBrw:Select( 0 ), oBrw:Select( 1 ), oBrw:Refresh() }, "oWnd"      => oDlg } )





      oBrw                    := TGridIXBrowse():New( oDlg )

      oBrw:nTop               := oBrw:EvalRow( 115 )
      oBrw:nLeft              := oBrw:EvalCol( {|| GridWidth( 0.5, oDlg ) } )
      oBrw:nWidth             := oBrw:EvalWidth( {|| GridWidth( 11, oDlg ) } )
      oBrw:nHeight            := oBrw:EvalHeight( {|| GridHeigth( oDlg ) - oBrw:nTop - 10 } )

      oBrw:cAlias             := D():FacturasClientes( nView )
      oBrw:nMarqueeStyle      := 6
      oBrw:cName              := "Grid facturas"

      with object ( oBrw:AddCol() )
         :cHeader            := "Factura"
        :bEditValue         := {|| ( D():FacturasClientes( nView ) )->cSerie + "/" + AllTrim( Str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + Chr(13)+Chr(10) + Dtoc( ( D():FacturasClientes( nView ) )->dFecFac ) }
        :nWidth             := 160
    end

    with object ( oBrw:AddCol() )
         :cHeader            := "Cliente"
        :bEditValue         := {|| AllTrim( ( D():FacturasClientes( nView ) )->cCodCli ) + Chr(13)+Chr(10) + AllTrim( ( D():FacturasClientes( nView ) )->cNomCli )  }
        :nWidth             := 320
    end

    with object ( oBrw:AddCol() )
         :cHeader            := "Base"
        :bEditValue         := {|| ( D():FacturasClientes( nView ) )->nTotNet  }
        :cEditPicture      := cPorDiv()
        :nWidth             := 80
        :nDataStrAlign     := 1
        :nHeadStrAlign     := 1
        :lHide             := .T.
    end

    with object ( oBrw:AddCol() )
         :cHeader            := cImp()
        :bEditValue         := {|| ( D():FacturasClientes( nView ) )->nTotIva  }
        :cEditPicture      := cPorDiv()
        :nWidth             := 80
        :nDataStrAlign     := 1
        :nHeadStrAlign     := 1
        :lHide             := .T.
    end

    with object ( oBrw:AddCol() )
         :cHeader            := "R.E."
         :bEditValue         := {|| ( D():FacturasClientes( nView ) )->nTotReq  }
         :cEditPicture        := cPorDiv()
         :nWidth             := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
    end

    with object ( oBrw:AddCol() )
         :cHeader            := "Total"
        :bEditValue         := {|| ( D():FacturasClientes( nView ) )->nTotFac }
        :cEditPicture      := cPorDiv()
        :nWidth             := 190
        :nDataStrAlign     := 1
        :nHeadStrAlign     := 1
    end

      oBrw:nHeaderHeight      := 48
      oBrw:nFooterHeight      := 48
      oBrw:nRowHeight         := 96
      oBrw:nDataLines         := 2

      oBrw:bLDblClick         := {|| WinEdtRec( nil, bEdtTablet, D():FacturasClientes( nView ) ) }

      oBrw:CreateFromCode( 105 )





      oDlg:bResized              := {|| GridResize( oDlg ) }

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( GridMaximize( oDlg ) )}, oDlg:bRClicked,,, )





    CloseFiles()

RETURN .T.



STATIC FUNCTION PrnSerie()

   local oDlg
   local oFmtDoc
   local cFmtDoc     := cFormatoFacturasClientes()
   local oRango
   local nRango      := 1
   local oSayFmt
   local cSayFmt
   local oSerIni
   local oSerFin
   local cSerIni     := ( D():FacturasClientes( nView ) )->cSerie
   local cSerFin     := ( D():FacturasClientes( nView ) )->cSerie
   local oDocIni
   local oDocFin
   local nDocIni     := ( D():FacturasClientes( nView ) )->nNumFac
   local nDocFin     := ( D():FacturasClientes( nView ) )->nNumFac
   local cSufIni     := ( D():FacturasClientes( nView ) )->cSufFac
   local cSufFin     := ( D():FacturasClientes( nView ) )->cSufFac
   local oPrinter
   local cPrinter    := ImpresoraDefectoUsuario()
   local lCopiasPre  := .T.
   local lInvOrden   := .F.
   local dFecDesde   := CtoD( "01/01/" + str( Year( Date() ) ) )
   local dFecHasta   := Date()
   local oNumCop
   local nNumCop     := if( nCopiasDocumento( (D():FacturasClientes( nView ))->cSerie, "nFacCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( (D():FacturasClientes( nView ))->cSerie, "nFacCli", D():Contadores( nView ) ) )

   cSayFmt           := cNombreDoc( cFmtDoc )

   oDlg = TDialog():New(,,,, "Imprimir series de facturas", "IMPSERIES",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



   oRango := TRadMenu():Redefine( { | u | If( PCount()==0, nRango, nRango:= u ) }, oDlg,, { 201, 202 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   oDocIni := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )






   oDocFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, dFecDesde, dFecDesde:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, dFecHasta, dFecHasta:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )



   TCheckBox():ReDefine( 500, { | u | If( PCount()==0, lInvOrden, lInvOrden:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 170, { | u | If( PCount()==0, lCopiasPre, lCopiasPre:= u ) }, oDlg,,,,,,, .F.,, .F. )









   oNumCop := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, nNumCop, nNumCop:= u ) }, oDlg,, "999999999", {||    nNumCop > 0},,,,,, .F., {||     !lCopiasPre},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )






   oFmtDoc := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cFmtDoc, cFmtDoc:= u ) }, oDlg,,, {||    ( cDocumento( oFmtDoc, oSayFmt, D():Documentos( nView ) ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oFmtDoc, oSayFmt, "FC" ) )}, nil, "LUPA",, )




   oSayFmt := TGetHlp():ReDefine( 91, { | u | If( PCount()==0, cSayFmt, cSayFmt:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 92, "gc_document_text_pencil_12",,,,,{|| EdtDocumento( cFmtDoc ) }, oDlg, .F., , .F.,  )




   oPrinter := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cPrinter, cPrinter:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 161, "gc_printer2_check_16",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .F., , .F.,  )





   TButton():ReDefine( 1, {||(  StartPrint( Substr( cFmtDoc, 1, 3 ), cSerIni + str( nDocIni, 9 ) + cSufIni, cSerFin + str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| StartPrint( Substr( cFmtDoc, 1, 3 ), cSerIni + str( nDocIni, 9 ) + cSufIni, cSerFin + str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) } )

   oDlg:bStart := { || oSerIni:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oWndBrw:oBrw:refresh()

RETURN NIL



STATIC FUNCTION StartPrint( cFmtDoc, cDocIni, cDocFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta )

   local nCopyClient
   local nRecno
   local nOrdAnt

   oDlg:Disable()

   if nRango == 1

      nRecno      := ( D():FacturasClientes( nView ) )->( recno() )
      nOrdAnt     := ( D():FacturasClientes( nView ) )->( OrdSetFocus( "nNumFac" ) )

      if !lInvOrden

         ( D():FacturasClientes( nView ) )->( dbSeek( cDocIni, .T. ) )


         while ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac >= cDocIni .AND.  ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac <= cDocFin

               lChgImpDoc( D():FacturasClientes( nView ) )

            if lCopiasPre

               nCopyClient := if( nCopiasDocumento( ( D():FacturasClientes( nView ) )->cSerie, "nFacCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( ( D():FacturasClientes( nView ) )->cSerie, "nFacCli", D():Contadores( nView ) ) )

               GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter,  )

            else

               GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter, nNumCop )

            end

            ( D():FacturasClientes( nView ) )->( dbSkip() )

         end

      else

         ( D():FacturasClientes( nView ) )->( dbSeek( cDocFin, .T. ) )



         while ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac >= cDocIni .AND.  ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac <= cDocFin .AND.  !( D():FacturasClientes( nView ) )->( Bof() )

            lChgImpDoc( D():FacturasClientes( nView ) )

            if lCopiasPre

               GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter )

            else

               GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter, nNumCop )

            end

            ( D():FacturasClientes( nView ) )->( dbSkip( -1 ) )

         end

      end

   else

      nRecno      := ( D():FacturasClientes( nView ) )->( recno() )
      nOrdAnt     := ( D():FacturasClientes( nView ) )->( OrdSetFocus( "DFECFAC" ) )

      if !lInvOrden

         ( D():FacturasClientes( nView ) )->( dbGoTop() )

         while !( D():FacturasClientes( nView ) )->( Eof() )

            if ( D():FacturasClientes( nView ) )->dFecFac >= dFecDesde .AND. ( D():FacturasClientes( nView ) )->dFecFac <= dFecHasta

               lChgImpDoc( D():FacturasClientes( nView ) )

               if lCopiasPre

                  nCopyClient := if( nCopiasDocumento( ( D():FacturasClientes( nView ) )->cSerie, "nFacCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( ( D():FacturasClientes( nView ) )->cSerie, "nFacCli", D():Contadores( nView ) ) )

                  GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter  )

               else

                  GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter, nNumCop )

               end

            end

            ( D():FacturasClientes( nView ) )->( dbSkip() )

         end

      else

         ( D():FacturasClientes( nView ) )->( dbGoBottom() )

         while !( D():FacturasClientes( nView ) )->( Bof() )

            if ( D():FacturasClientes( nView ) )->dFecFac >= dFecDesde .AND. ( D():FacturasClientes( nView ) )->dFecFac <= dFecHasta

               lChgImpDoc( D():FacturasClientes( nView ) )

               if lCopiasPre

                  GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter  )

               else

                  GenFacCli( 1, "Imprimiendo documento : " + ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, cFmtDoc, cPrinter, nNumCop )

               end

            end

            ( D():FacturasClientes( nView ) )->( dbSkip( -1 ) )

         end

      end

   end

   ( D():FacturasClientes( nView ) )->( dbGoTo( nRecNo ) )
   ( D():FacturasClientes( nView ) )->( ordSetFocus( nOrdAnt ) )

   oDlg:Enable()

RETURN NIL







STATIC FUNCTION lLiquida( oBrw, cFactura )

   If( cFactura == nil, cFactura := ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, ) ;

   if ( D():FacturasClientes( nView ) )->lLiquidada
      msgStop( "Factura ya cobrada", "Imposible añadir cobros" )
      return .F.
   end





   if ( D():FacturasClientesCobros( nView ) )->( dbSeek( cFactura ) )

      while ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac == cFactura .AND. !( D():FacturasClientesCobros( nView ) )->( eof() )

         if empty( ( D():FacturasClientesCobros( nView ) )->cTipRec ) .AND. !( D():FacturasClientesCobros( nView ) )->lCobrado

            EdtRecCli( ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) + ( D():FacturasClientesCobros( nView ) )->cTipRec, .F. )

            exit

         end

         ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

      end

   end





   ChkLqdFacCli( nil, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), , dbfIva, dbfDiv, .F. )





   if !empty( oAuditor() )
      oAuditor():AddEvent( "Liquidada factura de clientes", ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, "11" )
   end

   oBrw:Refresh()
   oBrw:SetFocus()

Return .T.



Static Function lChgContabilizado( lContabilizado )

   if ( D():FacturasClientes( nView ) )->( dbRLock() )
      ( D():FacturasClientes( nView ) )->lContab  := lContabilizado
      ( D():FacturasClientes( nView ) )->cConGuid := ""
      ( D():FacturasClientes( nView ) )->lSndDoc  := !( D():FacturasClientes( nView ) )->lSndDoc
      ( D():FacturasClientes( nView ) )->dFecCre  := Date()
      ( D():FacturasClientes( nView ) )->cTimCre  := Time()
      ( D():FacturasClientes( nView ) )->( dbUnlock() )
   end

Return .T.







STATIC FUNCTION cAlbCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode )

   local cDesAlb
   local lValid      := .F.
   local cAlbaran    := aGet[ 39 ]:varGet()
   local aAlbCliT
   local aAlbCliL
   local nTotEntAlb  := 0
   local cSuPed      := ""

   if ( nMode <> 1 .OR. empty( cAlbaran ) )
      return .T.
   end

   aAlbCliT          := aGetStatus( dbfAlbCliT, .T. )
   aAlbCliL          := aGetStatus( dbfAlbCliL, .T. )

   if ( dbfAlbCliT )->( dbSeek( cAlbaran ) )

      if lFacturado( dbfAlbCliT )

         MsgStop( "albarán facturado" )

      else

         CursorWait()

         aGet[ 1  ]:cText( ( dbfAlbCliT )->cSerAlb )

         aGet[ 7 ]:cText( ( dbfAlbCliT )->cCodCli )
         aGet[ 7 ]:bWhen    := {|| .F. }
         aGet[ 7 ]:lValid()

         aGet[ 10 ]:cText( ( dbfAlbCliT )->cNomCli )
         aGet[ 11 ]:cText( ( dbfAlbCliT )->cDirCli )
         aGet[ 12 ]:cText( ( dbfAlbCliT )->cPobCli )
         aGet[ 13 ]:cText( ( dbfAlbCliT )->cPrvCli )
         aGet[ 15 ]:cText( ( dbfAlbCliT )->cPosCli )
         aGet[ 16 ]:cText( ( dbfAlbCliT )->cDniCli )
         aGet[ 103 ]:cText( ( dbfAlbCliT )->cTlfCli )

         aGet[ 8 ]:cText( ( dbfAlbCliT )->cCodAlm )
         aGet[ 8 ]:lValid()

         aGet[ 9 ]:cText( ( dbfAlbCliT )->cCodCaj )
         aGet[ 9 ]:lValid()

         aGet[ 34 ]:cText( ( dbfAlbCliT )->cCodPago )
         aGet[ 34 ]:lValid()

         aGet[ 20 ]:cText( ( dbfAlbCliT )->cCodAge )
         aGet[ 20 ]:lValid()

         aGet[ 24 ]:cText( ( dbfAlbCliT )->nPctComAge )

         aGet[ 22 ]:cText( ( dbfAlbCliT )->CCODTAR )
         aGet[ 22 ]:lValid()

         aGet[ 21 ]:cText( ( D():Clientes( nView ) )->CCODRUT )
         aGet[ 21 ]:lValid()

         aGet[ 23 ]:cText( ( dbfAlbCliT )->CCODOBR )
         aGet[ 23 ]:lValid()

         aGet[ 75 ]:cText( ( dbfAlbCliT )->cCodTrn )
         aGet[ 75 ]:lValid()

         aGet[ 130 ]:cText( ( dbfAlbCliT )->cCtrCoste )
         aGet[ 130 ]:lValid()

         aGet[ 61  ]:Click( ( dbfAlbCliT )->lIvaInc )
         aGet[ 59 ]:Click( ( dbfAlbCliT )->lRecargo )
         aGet[ 122  ]:Click( ( dbfAlbCliT )->lOperPv )
         aGet[ 123    ]:Click( lRECCEmpresa() )





         aGet[ 31 ]:cText( ( dbfAlbCliT )->cCondEnt )
         aGet[ 32  ]:cText( ( dbfAlbCliT )->mComent )
         aGet[ 33  ]:cText( ( dbfAlbCliT )->mObserv )
         aGet[ 29   ]:cText( ( dbfAlbCliT )->cSuPed  )





         aGet[ 44  ]:cText( ( dbfAlbCliT )->cDtoEsp )
         aGet[ 46     ]:cText( ( dbfAlbCliT )->cDpp    )
         aGet[ 45  ]:cText( ( dbfAlbCliT )->nDtoEsp )
         aGet[ 47     ]:cText( ( dbfAlbCliT )->nDpp    )
         aGet[ 48  ]:cText( ( dbfAlbCliT )->cDtoUno )
         aGet[ 49  ]:cText( ( dbfAlbCliT )->nDtoUno )
         aGet[ 50  ]:cText( ( dbfAlbCliT )->cDtoDos )
         aGet[ 51  ]:cText( ( dbfAlbCliT )->nDtoDos )
         aGet[ 97  ]:cText( ( dbfAlbCliT )->cManObr )
         aGet[ 37  ]:cText( ( dbfAlbCliT )->nIvaMan )
         aGet[ 38  ]:cText( ( dbfAlbCliT )->nManObr )
         aGet[ 35  ]:cText( ( dbfAlbCliT )->nBultos )
         aGet[ 65  ]:cText( ( dbfAlbCliT )->cRetPor )
         aGet[ 66  ]:cText( ( dbfAlbCliT )->cRetMat )

         aTmp[ 85 ]              := ( dbfAlbCliT )->cCodGrp
         aTmp[ 17 ]              := ( dbfAlbCliT )->lModCli
         aTmp[ 122 ]              := ( dbfAlbCliT )->lOperPv
         aTmp[ 41 ]              := ( dbfAlbCliT )->cNumPre

         cSuPed                        := ( dbfAlbCliT )->cSuPed





         aTmp[ 94 ]            := ( dbfAlbCliT )->lAlquiler
         aTmp[ 92  ]            := ( dbfAlbCliT )->dFecEntr
         aTmp[ 93   ]            := ( dbfAlbCliT )->dFecSal

         if !empty( oTipFac )
            if aTmp[ 94 ]
               oTipFac:Select( 2 )
            else
               oTipFac:Select( 1 )
            end
         end





         aTmp[ 101 ]               := ( dbfAlbCliT )->cCodSuAlb





         if ( dbfAlbCliL )->( dbSeek( cAlbaran ) )

            if lNumAlb() .OR. lSuAlb()
               ( dbfTmpLin )->( dbAppend() )
               cDesAlb                 := ""
               cDesAlb                 += If( lNumObr(), Rtrim( cNumObr() ) + " " + rtrim( (dbfAlbCliT)->CCODOBR ), "" )
               cDesAlb                 += If( lNumAlb(), Rtrim( cNumAlb() ) + " " + rtrim( (dbfAlbCliT)->CSERALB + "/" + AllTrim( str( (dbfAlbCliT)->NNUMALB ) ) + "/" + (dbfAlbCliT)->CSUFALB ), "" )
               cDesAlb                 += If( lSuAlb(),  Rtrim( cSuAlb()  ) + " " + rtrim( (dbfAlbCliT)->CCODSUALB ), "" )
               cDesAlb                 += " - Fecha " + Dtoc( (dbfAlbCliT)->DFECALB )
               (dbfTmpLin)->cDetalle   := cDesAlb
               (dbfTmpLin)->lControl   := .T.
            end





            while ( ( dbfAlbCliL )->cSerAlb + str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == cAlbaran .AND. !( dbfAlbCliL )->( eof() ) )

                if !( dbfAlbCliL )->lFacturado

                       (dbfTmpLin)->( dbAppend() )

                       (dbfTmpLin)->cSerie     := Space(1)
                       (dbfTmpLin)->nNumFac     := 0
                       (dbfTmpLin)->cSufFac     := ( dbfAlbCliL )->cSufAlb
                       (dbfTmpLin)->cRef         := ( dbfAlbCliL )->cRef
                       (dbfTmpLin)->cDetalle     := ( dbfAlbCliL )->cDetalle
                       (dbfTmpLin)->nPreUnit     := ( dbfAlbCliL )->nPreunit
                       (dbfTmpLin)->nPntVer     := ( dbfAlbCliL )->nPntVer
                       (dbfTmpLin)->nImpTrn     := ( dbfAlbCliL )->nImpTrn
                       (dbfTmpLin)->nDto         := ( dbfAlbCliL )->nDto
                       (dbfTmpLin)->nDtoPrm     := ( dbfAlbCliL )->nDtoPrm
                       (dbfTmpLin)->nIva         := ( dbfAlbCliL )->nIva
                       (dbfTmpLin)->nCanEnt     := ( dbfAlbCliL )->nCanEnt
                       (dbfTmpLin)->lControl     := ( dbfAlbCliL )->lControl
                       (dbfTmpLin)->nPesokg     := ( dbfAlbCliL )->nPesoKg
                       (dbfTmpLin)->cPesokg     := ( dbfAlbCliL )->cPesokg
                       (dbfTmpLin)->cUnidad     := ( dbfAlbCliL )->cUnidad
                       (dbfTmpLin)->cCodAge     := ( dbfAlbCliT )->cCodAge
                       (dbfTmpLin)->nComAge     := ( dbfAlbCliL )->nComAge
                       (dbfTmpLin)->nUniCaja     := ( dbfAlbCliL )->nUniCaja
                       (dbfTmpLin)->nUndKit     := ( dbfAlbCliL )->nUndKit
                       (dbfTmpLin)->dFecha     := ( dbfAlbCliL )->dFecha
                       (dbfTmpLin)->cTipMov     := ( dbfAlbCliL )->cTipMov
                       (dbfTmpLin)->mLngDes     := ( dbfAlbCliL )->mLngDes
                       (dbfTmpLin)->cCodAlb     := ( dbfAlbCliT )->cSerAlb + str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb
                       (dbfTmpLin)->dFecAlb     := ( dbfAlbCliL )->dFecAlb
                       (dbfTmpLin)->lTotLin     := ( dbfAlbCliL )->lTotLin
                       (dbfTmpLin)->lImpLin     := ( dbfAlbCliL )->lImpLin
                       (dbfTmpLin)->cCodPr1     := ( dbfAlbCliL )->cCodPr1
                       (dbfTmpLin)->cCodPr2     := ( dbfAlbCliL )->cCodPr2
                       (dbfTmpLin)->cValPr1     := ( dbfAlbCliL )->cValPr1
                       (dbfTmpLin)->cValPr2     := ( dbfAlbCliL )->cValPr2
                       (dbfTmpLin)->nFacCnv     := ( dbfAlbCliL )->nFacCnv
                       (dbfTmpLin)->nDtoDiv     := ( dbfAlbCliL )->nDtoDiv
                       (dbfTmpLin)->nNumLin     := ( dbfAlbCliL )->nNumLin
                       (dbfTmpLin)->nCtlStk     := ( dbfAlbCliL )->nCtlStk
                       (dbfTmpLin)->nCosDiv     := ( dbfAlbCliL )->nCosDiv
                       (dbfTmpLin)->nPvpRec     := ( dbfAlbCliL )->nPvpRec
                       (dbfTmpLin)->cAlmLin     := ( dbfAlbCliL )->cAlmLin
                       (dbfTmpLin)->lIvaLin     := ( dbfAlbCliL )->lIvaLin
                       (dbfTmpLin)->cCodImp     := ( dbfAlbCliL )->cCodImp
                       (dbfTmpLin)->nValImp     := ( dbfAlbCliL )->nValImp
                       (dbfTmpLin)->lLote         := ( dbfAlbCliL )->lLote
                       (dbfTmpLin)->nLote         := ( dbfAlbCliL )->nLote
                       (dbfTmpLin)->cLote         := ( dbfAlbCliL )->cLote
                       (dbfTmpLin)->dFecCad     := ( dbfAlbCliL )->dFecCad
                       (dbfTmpLin)->lKitArt     := ( dbfAlbCliL )->lKitArt
                       (dbfTmpLin)->lKitChl     := ( dbfAlbCliL )->lKitChl
                       (dbfTmpLin)->lKitPrc     := ( dbfAlbCliL )->lKitPrc
                       (dbfTmpLin)->nMesGrt     := ( dbfAlbCliL )->nMesGrt
                       (dbfTmpLin)->lMsgVta     := ( dbfAlbCliL )->lMsgVta
                       (dbfTmpLin)->lNotVta     := ( dbfAlbCliL )->lNotVta
                       (dbfTmpLin)->cCodTip     := ( dbfAlbCliL )->cCodTip
                       (dbfTmpLin)->mNumSer     := ( dbfAlbCliL )->mNumSer
                       (dbfTmpLin)->cCodFam     := ( dbfAlbCliL )->cCodFam
                       (dbfTmpLin)->cGrpFam     := ( dbfAlbCliL )->cGrpFam
                       (dbfTmpLin)->nReq         := ( dbfAlbCliL )->nReq
                       (dbfTmpLin)->mObsLin     := ( dbfAlbCliL )->mObsLin
                       (dbfTmpLin)->cCodPrv     := ( dbfAlbCliL )->cCodPrv
                       (dbfTmpLin)->cNomPrv     := ( dbfAlbCliL )->cNomPrv
                       (dbfTmpLin)->cImagen     := ( dbfAlbCliL )->cImagen
                       (dbfTmpLin)->nPuntos     := ( dbfAlbCliL )->nPuntos
                       (dbfTmpLin)->nValPnt     := ( dbfAlbCliL )->nValPnt
                       (dbfTmpLin)->nDtoPnt     := ( dbfAlbCliL )->nDtoPnt
                       (dbfTmpLin)->nIncPnt     := ( dbfAlbCliL )->nIncPnt
                       (dbfTmpLin)->cRefPrv     := ( dbfAlbCliL )->cRefPrv
                       (dbfTmpLin)->nVolumen     := ( dbfAlbCliL )->nVolumen
                       (dbfTmpLin)->cVolumen     := ( dbfAlbCliL )->cVolumen
                       (dbfTmpLin)->lAlquiler     := ( dbfAlbCliL )->lAlquiler
                       (dbfTmpLin)->dFecEnt     := ( dbfAlbCliL )->dFecEnt
                       (dbfTmpLin)->dFecSal     := ( dbfAlbCliL )->dFecSal
                       (dbfTmpLin)->nPreAlq     := ( dbfAlbCliL )->nPreAlq
                       (dbfTmpLin)->nNumMed     := ( dbfAlbCliL )->nNumMed
                       (dbfTmpLin)->nMedUno     := ( dbfAlbCliL )->nMedUno
                       (dbfTmpLin)->nMedDos     := ( dbfAlbCliL )->nMedDos
                       (dbfTmpLin)->nMedTre     := ( dbfAlbCliL )->nMedTre
                       (dbfTmpLin)->nTarLin     := ( dbfAlbCliL )->nTarLin
                       (dbfTmpLin)->lImpFra     := ( dbfAlbCliL )->lImpFra
                       (dbfTmpLin)->cTxtFra     := ( dbfAlbCliL )->cTxtFra
                       (dbfTmpLin)->Descrip     := ( dbfAlbCliL )->Descrip
                       (dbfTmpLin)->lLinOfe     := ( dbfAlbCliL )->lLinOfe
                       (dbfTmpLin)->lVolImp     := ( dbfAlbCliL )->lVolImp
                       (dbfTmpLin)->cNumPed     := ( dbfAlbCliL )->cNumPed
                       (dbfTmpLin)->cSuPed     := cSuPed
                       (dbfTmpLin)->cCodCli     := ( dbfAlbCliL )->cCodCli
                       (dbfTmpLin)->nBultos     := ( dbfAlbCliL )->nBultos
                       (dbfTmpLin)->cFormato     := ( dbfAlbCliL )->cFormato
                       (dbfTmpLin)->tFecFac     := ( dbfAlbCliL )->tFecAlb
                       (dbfTmpLin)->cCtrCoste     := ( dbfAlbCliL )->cCtrCoste
                       (dbfTmpLin)->cCodObr     := ( dbfAlbCliL )->cObrLin
                       (dbfTmpLin)->cRefAux     := ( dbfAlbCliL )->cRefAux
                       (dbfTmpLin)->cRefAux2     := ( dbfAlbCliL )->cRefAux2
                       (dbfTmpLin)->cTipCtr     := ( dbfAlbCliL )->cTipCtr
                       (dbfTmpLin)->cTerCtr     := ( dbfAlbCliL )->cTerCtr
                       (dbfTmpLin)->nNumKit     := ( dbfAlbCliL )->nNumKit
                       (dbfTmpLin)->id_tipo_v     := ( dbfAlbCliL )->id_tipo_v
                       (dbfTmpLin)->nRegIva     := ( dbfAlbCliL )->nRegIva
                       (dbfTmpLin)->nPosPrint     := ( dbfAlbCliL )->nPosPrint

                  end

                ( dbfAlbCliL )->( dbSkip() )

            end





            HideImportacion( aGet, aGet[ 39 ] )





            if aScan( aNumAlb, cAlbaran ) == 0
               aAdd( aNumAlb, cAlbaran )
            end

         else

            MsgStop( "albarán no contiene lineas de detalle." )

         end

         ( dbfTmpLin )->( dbGoTop() )





         if ( dbfAlbCliS )->( dbSeek( cAlbaran ) )

            while ( dbfAlbCliS )->cSerAlb + str( ( dbfAlbCliS )->nNumAlb ) + ( dbfAlbCliS )->cSufAlb == cAlbaran .AND. !( dbfAlbCliS )->( Eof() )

               ( dbfTmpSer )->( dbAppend() )
               ( dbfTmpSer )->nNumLin  := ( dbfAlbCliS )->nNumLin
               ( dbfTmpSer )->cRef     := ( dbfAlbCliS )->cRef
               ( dbfTmpSer )->cAlmLin  := ( dbfAlbCliS )->cAlmLin
               ( dbfTmpSer )->cNumSer  := ( dbfAlbCliS )->cNumSer

               ( dbfAlbCliS )->( dbSkip() )

            end

         end





         if ( dbfAlbCliI )->( dbSeek( cAlbaran ) )

            while ( dbfAlbCliI )->cSerAlb + str( ( dbfAlbCliI )->nNumAlb ) + ( dbfAlbCliI )->cSufAlb == cAlbaran .AND. !( dbfAlbCliI )->( Eof() )
               dbPass( dbfAlbCliI, dbfTmpInc, .T. )
               ( dbfAlbCliI )->( dbSkip() )
            end

         end





         if ( dbfAlbCliD )->( dbSeek( cAlbaran ) )

            while ( dbfAlbCliD )->cSerAlb + str( ( dbfAlbCliD )->nNumAlb ) + ( dbfAlbCliD )->cSufAlb == cAlbaran .AND. !( dbfAlbCliD )->( Eof() )
               dbPass( dbfAlbCliD, dbfTmpDoc, .T. )
               ( dbfAlbCliD )->( dbSkip() )
            end

         end

         ( dbfAlbCliD )->( dbGoTop() )

         oBrwLin:Refresh()
         oBrwPgo:Refresh()

         oBrwLin:SetFocus()

         HideImportacion( aGet, aGet[ 39 ] )

         CursorWE()

      end

   else

      MsgStop( "albarán : " + cAlbaran + " no encontrado" )

   end

   SetStatus( dbfAlbCliT, aAlbCliT )
   SetStatus( dbfAlbCliL, aAlbCliL )

   if !empty( oBrwPgo )
      oBrwPgo:Refresh()
   end

RETURN .T.






STATIC FUNCTION cFacPrv( cFacPrv, aGet, aTmp, oBrw, nMode )

   local aFacPrvT
   local aFacPrvL
   local aFacPrvS

   if nMode <> 1 .OR. empty( cFacPrv )
      return .T.
   end

   aFacPrvT          := aGetStatus( dbfFacPrvT, .T. )
   aFacPrvL          := aGetStatus( dbfFacPrvL, .T. )
   aFacPrvS          := aGetStatus( dbfFacPrvS, .T. )

   if ( dbfFacPrvT )->( dbSeek( cFacPrv ) )





      aGet[ 8 ]:cText( ( dbfFacPrvT )->cCodAlm )
      aGet[ 8 ]:lValid()
      aGet[ 9 ]:cText( ( dbfFacPrvT )->cCodCaj )
      aGet[ 9 ]:lValid()
      aGet[ 35 ]:cText( ( dbfFacPrvT )->nBultos )
      aGet[ 31]:cText( ( dbfFacPrvT )->cCondEnt )
      aGet[ 32 ]:cText( ( dbfFacPrvT )->mComent )
      aGet[ 33 ]:cText( ( dbfFacPrvT )->cObserv )

      aTmp[ 112 ]                   := ( dbfFacPrvT )->cSerFac + str( ( dbfFacPrvT )->nNumFac ) + ( dbfFacPrvT )->cSufFac





      if ( dbfFacPrvL )->( dbSeek( cFacPrv ) )

         while ( ( dbfFacPrvL )->cSerFac + str( ( dbfFacPrvL )->nNumFac ) + ( dbfFacPrvL )->cSufFac == cFacPrv .AND. !( dbfFacPrvL )->( eof() ) )

            if !( dbfFacPrvL )->lControl

               ( dbfTmpLin )->( dbAppend() )
               ( dbfTmpLin )->nNumLin     := ( dbfFacPrvL )->nNumLin
               ( dbfTmpLin )->nPosPrint   := ( dbfFacPrvL )->nPosPrint
               ( dbfTmpLin )->cRef        := ( dbfFacPrvL )->cRef
               ( dbfTmpLin )->cRefPrv     := ( dbfFacPrvL )->cRefPrv
               ( dbfTmpLin )->cDetalle    := ( dbfFacPrvL )->cDetalle
               ( dbfTmpLin )->mLngDes     := ( dbfFacPrvL )->mLngDes
               ( dbfTmpLin )->mNumSer     := ( dbfFacPrvL )->mNumSer
               ( dbfTmpLin )->nCanEnt     := ( dbfFacPrvL )->nCanEnt
               ( dbfTmpLin )->cUnidad     := ( dbfFacPrvL )->cUnidad
               ( dbfTmpLin )->nUniCaja    := ( dbfFacPrvL )->nUniCaja
               ( dbfTmpLin )->nIva        := ( dbfFacPrvL )->nIva
               ( dbfTmpLin )->nReq        := ( dbfFacPrvL )->nReq
               ( dbfTmpLin )->dFecha      := ( dbfFacPrvT )->dFecFac
               ( dbfTmpLin )->nCtlStk     := ( dbfFacPrvL )->nCtlStk
               ( dbfTmpLin )->cAlmLin     := ( dbfFacPrvL )->cAlmLin
               ( dbfTmpLin )->lIvaLin     := ( dbfFacPrvL )->lIvaLin
               ( dbfTmpLin )->cCodPr1     := ( dbfFacPrvL )->cCodPr1
               ( dbfTmpLin )->cCodPr2     := ( dbfFacPrvL )->cCodPr2
               ( dbfTmpLin )->cValPr1     := ( dbfFacPrvL )->cValPr1
               ( dbfTmpLin )->cValPr2     := ( dbfFacPrvL )->cValPr2
               ( dbfTmpLin )->nCosDiv     := ( dbfFacPrvL )->nPreUnit
               ( dbfTmpLin )->lKitArt     := ( dbfFacPrvL )->lKitArt
               ( dbfTmpLin )->lKitChl     := ( dbfFacPrvL )->lKitChl
               ( dbfTmpLin )->lKitPrc     := ( dbfFacPrvL )->lKitPrc
               ( dbfTmpLin )->lLote       := ( dbfFacPrvL )->lLote
               ( dbfTmpLin )->nLote       := ( dbfFacPrvL )->nLote
               ( dbfTmpLin )->cLote       := ( dbfFacPrvL )->cLote
               ( dbfTmpLin )->dFecCad     := ( dbfFacPrvL )->dFecCad
               ( dbfTmpLin )->cCodFam     := ( dbfFacPrvL )->cCodFam
               ( dbfTmpLin )->cGrpFam     := ( dbfFacPrvL )->cGrpFam
               ( dbfTmpLin )->cCodPrv     := ( dbfFacPrvT )->cCodPrv
               ( dbfTmpLin )->nNumMed     := ( dbfFacPrvL )->nNumMed
               ( dbfTmpLin )->nMedUno     := ( dbfFacPrvL )->nMedUno
               ( dbfTmpLin )->nMedDos     := ( dbfFacPrvL )->nMedDos
               ( dbfTmpLin )->nMedTre     := ( dbfFacPrvL )->nMedTre
               ( dbfTmpLin )->nFacCnv     := ( dbfFacPrvL )->nFacCnv
               ( dbfTmpLin )->mObsLin     := ( dbfFacPrvL )->mObsLin
               ( dbfTmpLin )->nBultos     := ( dbfFacPrvL )->nBultos
               ( dbfTmpLin )->cFormato    := ( dbfFacPrvL )->cFormato

            end

            ( dbfFacPrvL )->( dbSkip() )

         end

      else

         MsgStop( "La factura no contiene lineas de detalle." )

      end

      ( dbfTmpLin )->( dbGoTop() )





      if ( dbfFacPrvS )->( dbSeek( cFacPrv ) )

         while ( dbfFacPrvS )->cSerFac + str( ( dbfFacPrvS )->nNumFac ) + ( dbfFacPrvS )->cSufFac == cFacPrv .AND. !( dbfFacPrvS )->( Eof() )

            ( dbfTmpSer )->( dbAppend() )
            ( dbfTmpSer )->nNumLin  := ( dbfFacPrvS )->nNumLin
            ( dbfTmpSer )->cRef     := ( dbfFacPrvS )->cRef
            ( dbfTmpSer )->cAlmLin  := ( dbfFacPrvS )->cAlmLin
            ( dbfTmpSer )->cNumSer  := ( dbfFacPrvS )->cNumSer

            ( dbfFacPrvS )->( dbSkip() )

         end

      end





      RecFacCli( aTmp, .F. )

      oBrw:SetFocus()
      oBrw:Refresh()

      RecalculaTotal( aTmp )

   else

      MsgStop( "Factura : " + cFacPrv + " no encontrada" )

   end

   SetStatus( dbfFacPrvT, aFacPrvT )
   SetStatus( dbfFacPrvL, aFacPrvL )
   SetStatus( dbfFacPrvS, aFacPrvS )

RETURN .T.



STATIC FUNCTION selectedGenFacCli( nDevice, cTitle, cCodigoDocumento )

   local nPos

   for each nPos in ( oWndBrw:oBrw:aSelected )

      ( D():FacturasClientes( nView ) )->( dbgoto( nPos ) )

      genFacCli( nDevice, cTitle, cCodigoDocumento )

      SysRefresh()

   next

RETURN NIL



static function lGenFacCli( oBrw, oBtn, nDevice )

   local bAction

   If( nDevice == nil, nDevice := 1, ) ;

   if empty( oBtn )
      return nil
   end

   if !( D():Documentos( nView ) )->( dbSeek( "FC" ) )








      oWndBrw:NewAt( "GC_DOCUMENT_WHITE_",,, {||( msgStop( "No hay facturas de clientes predefinidas" ) )}, "No hay documentos", "N",,, 4, oBtn, .F. )

   else

      while ( D():Documentos( nView ) )->cTipo == "FC" .AND. !( D():Documentos( nView ) )->( eof() )

         bAction  := bGenFacCli( nDevice, "Imprimiendo facturas de clientes", ( D():Documentos( nView ) )->Codigo )

         oWndBrw:NewAt( "gc_document_white_", , , bAction, rtrim( ( D():Documentos( nView ) )->cDescrip ) , , , , , oBtn )

         ( D():Documentos( nView ) )->( dbSkip() )

      end

   end

   SysRefresh()

return nil



static function bGenFacCli( nDevice, cTitle, cCodDoc )

   local nDev  := by( nDevice )
   local cTit  := by( cTitle  )
   local cCod  := by( cCodDoc )
   local bGen  := {|| selectedGenFacCli( nDevice, cTit, cCod ) }

return ( bGen )



static function QuiFacCli()

   local nRec
   local nOrdAnt
   local cSerDoc
   local nNumDoc
   local cSufDoc
   local cNumPed
   local cNumAlb
   local cNumSat
   local cNumPre
   local aAlb           := {}

   if ( D():FacturasClientes( nView ) )->lCloFac .AND. !oUser():lAdministrador()
      msgStop( "Solo puede eliminar facturas cerradas los administradores." )
      return .F.
   end

   cSerDoc           := ( D():FacturasClientes( nView ) )->cSerie
   nNumDoc           := ( D():FacturasClientes( nView ) )->nNumFac
   cSufDoc           := ( D():FacturasClientes( nView ) )->cSufFac
   cNumPed           := ( D():FacturasClientes( nView ) )->cNumPed
   cNumAlb           := ( D():FacturasClientes( nView ) )->cNumAlb
   cNumSat           := ( D():FacturasClientes( nView ) )->cNumSat
   cNumPre           := ( D():FacturasClientes( nView ) )->cNumPre

   TComercio:resetProductsToUpdateStocks()





   nOrdAnt           := ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( "nNumFac" ) )
   while ( D():FacturasClientesLineas( nView ) )->( dbSeek( cSerDoc + str( nNumDoc ) + cSufDoc ) ) .AND. !( D():FacturasClientesLineas( nView ) )->( eof() )

      TComercio:appendProductsToUpadateStocks( ( D():FacturasClientesLineas( nView ) )->cRef, nView )

      if dbLock( D():FacturasClientesLineas( nView ) )
        ( D():FacturasClientesLineas( nView ) )->( dbDelete() )
        ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
      end

      ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

   end




   ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( nOrdAnt ) )





   nOrdAnt           := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "fNumFac" ) )

   while ( D():FacturasClientesCobros( nView ) )->( dbSeek( cSerDoc + str( nNumDoc ) + cSufDoc ) ) .AND. !( D():FacturasClientesCobros( nView ) )->( eof() )
      if dbLock( D():FacturasClientesCobros( nView ) )
         ( D():FacturasClientesCobros( nView ) )->( dbDelete() )
         ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
      end

      ( D():FacturasClientesCobros( nView ) )->( dbSkip() )
   end

   ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( nOrdAnt ) )





   nOrdAnt           := ( dbfFacCliI )->( OrdSetFocus( "nNumFac" ) )

   while ( dbfFacCliI )->( dbSeek( cSerDoc + str( nNumDoc ) + cSufDoc ) ) .AND. !( dbfFacCliI )->( eof() )
      if dbLock( dbfFacCliI )
         ( dbfFacCliI )->( dbDelete() )
         ( dbfFacCliI )->( dbUnLock() )
      end

      ( dbfFacCliI )->( dbSkip() )
   end

   ( dbfFacCliI )->( OrdSetFocus( nOrdAnt ) )





   nOrdAnt           := ( dbfFacCliD )->( OrdSetFocus( "nNumFac" ) )

   while ( dbfFacCliD )->( dbSeek( cSerDoc + str( nNumDoc ) + cSufDoc ) ) .AND. !( dbfFacCliD )->( eof() )
      if dbLock( dbfFacCliD )
         ( dbfFacCliD )->( dbDelete() )
         ( dbfFacCliD )->( dbUnLock() )
      end

      ( dbfFacCliD )->( dbSkip() )
   end

   ( dbfFacCliD )->( OrdSetFocus( nOrdAnt ) )





   nOrdAnt           := ( dbfFacCliS )->( OrdSetFocus( "nNumFac" ) )

   while ( dbfFacCliS )->( dbSeek( cSerDoc + str( nNumDoc ) + cSufDoc ) ) .AND. !( dbfFacCliS )->( eof() )
      if dbLock( dbfFacCliS )
         ( dbfFacCliS )->( dbDelete() )
         ( dbfFacCliS )->( dbUnLock() )
      end

      ( dbfFacCliS )->( dbSkip() )
   end

   ( dbfFacCliS )->( OrdSetFocus( nOrdAnt ) )





   if !empty( cNumPed )

      if( dbfPedCliP )->( dbSeek( cNumPed ) )

         while ( dbfPedCliP )->cSerPed + str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .AND. !( dbfPedCliP )->( Eof() )

            if dbLock( dbfPedCliP )
               ( dbfPedCliP )->lPasado := .F.
               ( dbfPedCliP )->( dbUnLock() )
            end

         ( dbfPedCliP )->( dbSkip() )

         end

      end





      oStock:SetEstadoPedCli( cNumPed, .T., cSerDoc + str( nNumDoc ) + cSufDoc )

   end





   if !empty( cNumAlb )

      if( dbfAlbCliP )->( dbSeek( cNumAlb ) )

         while ( dbfAlbCliP )->cSerAlb + str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb == cNumAlb .AND. !( dbfAlbCliP )->( Eof() )

            if dbLock( dbfAlbCliP )
               ( dbfAlbCliP )->lPasado := .F.
               ( dbfAlbCliP )->( dbUnLock() )
            end

            ( dbfAlbCliP )->( dbSkip() )

         end

      end

   end





   nOrdAnt  := ( dbfAlbCliT )->( OrdSetFocus( "cNumFac" ) )

   while ( dbfAlbCliT )->( dbSeek( cSerDoc + str( nNumDoc, 9 ) + cSufDoc ) ) .AND. !( dbfAlbCliT )->( eof() )
      SetFacturadoAlbaranCliente( .F., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS )
   end

   ( dbfAlbCliT )->( OrdSetFocus( nOrdAnt ) )





   if !empty( cNumSat )

      if( dbfSatCliT )->( dbSeek( cNumSat ) )

         while ( dbfSatCliT )->cSerSat + str( ( dbfSatCliT )->nNumSat ) + ( dbfSatCliT )->cSufSat == cNumSat .AND. !( dbfSatCliT )->( Eof() )

            if dbLock( dbfSatCliT )
               ( dbfSatCliT )->lEstado := .F.
               ( dbfSatCliT )->( dbUnLock() )
            end

            ( dbfSatCliT )->( dbSkip() )

         end

      end

   end





   if !empty( cNumPre )

      if ( dbfPreCliT )->( dbSeek( cNumPre ) )

         while ( dbfPreCliT )->cSerPre + str( ( dbfPreCliT )->nNumPre ) + ( dbfPreCliT )->cSufPre == cNumPre .AND. !( dbfPreCliT )->( Eof() )

            if ( dbfPreCliT )->( dbRLock() )
               ( dbfPreCliT )->lEstado := .F.
               ( dbfPreCliT )->( dbUnlock() )
            end

            ( dbfPreCliT )->( dbSkip() )

         end

      end

   end





   if !empty( ( D():FacturasClientes( nView ) )->cNumDoc ) .AND. ( dbfTikT )->( dbSeek( ( D():FacturasClientes( nView ) )->cNumDoc ) )
      DelRecno( dbfTikT, nil, .F. )
   end





   if uFieldEmpresa( "lRecNumFac" )
      nPutDoc( cSerDoc, nNumDoc, cSufDoc, D():FacturasClientes( nView ), "nFacCli", , D():Contadores( nView ) )
   end





   TComercio:updateWebProductStocks()

Return .T.



STATIC FUNCTION lHideCheck1Contabilidad()

    do case
        case lAplicacionA3()
            Return ( .T. )

         case lAplicacionSage()
             Return ( .T. )

         case lAplicacionSage50()
             Return ( .T. )

        case lAplicacionMonitor()
            Return ( .T. )

    end

Return ( .F. )



STATIC FUNCTION lHideCheck2Contabilidad()

    do case
         case lAplicacionSage()
             Return ( .T. )

         case lAplicacionSage50()
             Return ( .T. )

        case lAplicacionMonitor()
            Return ( .T. )

    end

Return ( .F. )



STATIC FUNCTION actionContabilidad( lChk1, lChk2, oTree )

    do case
        case lAplicacionContaplus() .OR. lAplicacionA3()
            CntFacCli( lChk1, lChk2, nil, .T., oTree, nil, nil, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), , D():Clientes( nView ), dbfDiv, D():Articulos( nView ), D():FormasPago( nView ), dbfIva, oNewImp )

         case lAplicacionSage()
             EnlaceSage():GetInstance():ContabilizaFacturaCliente( nView, oTree )

         case lAplicacionSage50()
             EnlaceSage50():GetInstance():ContabilizaFacturaCliente( nView, oTree )

        case lAplicacionMonitor()
             EnlaceMonitor():GetInstance():ContabilizaFacturaCliente( nView, oTree )


    end

Return ( .T. )



STATIC FUNCTION postActionContabilidad()

    do case
        case lAplicacionA3()
            EnlaceA3():GetInstance():WriteASCII()
            EnlaceA3():DestroyInstance()

         case lAplicacionSage()
             EnlaceSage():GetInstance():WriteASCII()
            EnlaceSage():DestroyInstance()

        case lAplicacionSage50()
             EnlaceSage50():GetInstance():WriteASCII()
            EnlaceSage50():DestroyInstance()

        case lAplicacionMonitor()
             EnlaceMonitor():GetInstance():WriteASCII()
            EnlaceMonitor():DestroyInstance()

    end

Return ( .T. )



STATIC FUNCTION aGetSelRec( oBrw, bAction, cTitle, lHide1, cTitle1, lHide2, cTitle2, bPreAction, bPostAction )

   local oDlg
   local oBtnOk
   local oBtnCancel
   local oRad
   local nRad        := 1
   local aRet        := {}
   local oTree
   local oChk1
   local oChk2
   local lChk1       := .T.
   local lChk2       := .T.
   local nRecno      := ( D():FacturasClientes( nView ) )->( Recno() )
   local nOrdAnt     := ( D():FacturasClientes( nView ) )->( OrdSetFocus( 1 ) )
   local oSerIni
   local oSerFin
   local cSerIni     := ( D():FacturasClientes( nView ) )->cSerie
   local cSerFin     := ( D():FacturasClientes( nView ) )->cSerie
   local oDocIni
   local oDocFin
   local nDocIni     := ( D():FacturasClientes( nView ) )->nNumFac
   local nDocFin     := ( D():FacturasClientes( nView ) )->nNumFac
   local oSufIni
   local oSufFin
   local cSufIni     := ( D():FacturasClientes( nView ) )->cSufFac
   local cSufFin     := ( D():FacturasClientes( nView ) )->cSufFac
   local oMtrInf
   local nMtrInf
   local lFechas     := .T.
   local dDesde      := CtoD( "01/01/" + str( Year( Date() ) ) )
   local dHasta      := Date()
   local oImageList

   If( cTitle == nil, cTitle := "", ) ;
   If( lHide1 == nil, lHide1 := .F., ) ;
   If( cTitle1 == nil, cTitle1 := "", ) ;
   If( lHide2 == nil, lHide2 := .F., ) ;
   If( cTitle2 == nil, cTitle2 := "", ) ;

   oImageList        := TImageList():New( 16, 16 )
   oImageList:AddMasked( TBitmap():Define( "gc_delete_12" ),    ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oImageList:AddMasked( TBitmap():Define( "gc_check_12" ),  ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )

   oDlg = TDialog():New(,,,, cTitle, "SelectRango",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



   oRad := TRadMenu():Redefine( { | u | If( PCount()==0, nRad, nRad:= u ) }, oDlg,, { 80, 81 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z" )},,,,,, .T., {||     ( oRad:nOption == 2 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )






   TBtnBmp():ReDefine( 101, "Up16",,,,, {|Self|( dbFirst( D():FacturasClientes( nView ), "nNumFac", oDocIni, cSerIni, "nNumFac" ) )}, oDlg, .F.,, .F.,,,,,, !.T.,, .F.,,, .F., !.F.,, .F. )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z" )},,,,,, .T., {||     ( oRad:nOption == 2 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TBtnBmp():ReDefine( 111, "Down16",,,,, {|Self|( dbLast( D():FacturasClientes( nView ), "nNumFac", oDocFin, cSerFin, "nNumFac" ) )}, oDlg, .F.,, .F.,,,,,, !.T.,, .F.,,, .F., !.F.,, .F. )






   oDocIni := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRad == 2 )},, .F., .T.,,,,,, nil,,, )






   oDocFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRad == 2 )},, .F., .T.,,,,,, nil,,, )





   oSufIni := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )





   oSufFin := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )



   oChk1 := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, lChk1, lChk1:= u ) }, oDlg,,,,,,, .F.,, .F. )



   oChk2 := TCheckBox():ReDefine( 180, { | u | If( PCount()==0, lChk2, lChk2:= u ) }, oDlg,,,,,,, .F.,, .F. )







   TCheckBox():ReDefine( 300, { | u | If( PCount()==0, lFechas, lFechas:= u ) }, oDlg,,,,,,, .F.,, .F. )





   TGetHlp():ReDefine( 310, { | u | If( PCount()==0, dDesde, dDesde:= u ) }, oDlg,,,,,,,,, .F., {||     ( !lFechas )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 320, { | u | If( PCount()==0, dHasta, dHasta:= u ) }, oDlg,,,,,,,,, .F., {||     ( !lFechas )},, .F., .T.,,,,,, nil,,, )





   oTree             := TTreeView():Redefine( 170, oDlg )
   oTree:bLDblClick  := {|| TreeChanged( oTree ) }





   oMtrInf := TApoloMeter():ReDefine( 200, { | u | If( PCount()==0, nMtrInf, nMtrInf:= u ) },, oDlg, .F.,,, .T.,,,, )

   oMtrInf:SetTotal( ( D():FacturasClientes( nView ) )->( OrdKeyCount() ) )




   oBtnOk := TButton():ReDefine( 1, {||( MakSelRec( bAction, bPreAction, bPostAction, cSerIni + str( nDocIni, 9 ) + cSufIni, cSerFin + str( nDocFin, 9 ) + cSufFin, nRad, lChk1, lChk2, lFechas, dDesde, dHasta, oDlg, oBtnCancel, oTree, oBrw, oMtrInf ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )

   oDlg:bStart := {|| StartGetSelRec( oBrw, oRad, oChk1, oChk2, oSerIni, oSerFin, oDocIni, oDocFin, oSufIni, oSufFin, lHide1, lHide2, cTitle1, cTitle2 ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oTree:SetImageList( oImageList ) )}, oDlg:bRClicked,,, )

   ( D():FacturasClientes( nView ) )->( ordSetFocus( nOrdAnt ) )
   ( D():FacturasClientes( nView ) )->( dbGoTo( nRecNo ) )

   oImageList:End()

   oTree:Destroy()

   oBrw:SetFocus()
   oBrw:Refresh()

RETURN ( aRet )



Static Function StartGetSelRec( oBrw, oRad, oChk1, oChk2, oSerIni, oSerFin, oDocIni, oDocFin, oSufIni, oSufFin, lHide1, lHide2, cTitle1, cTitle2 )

   if !empty( oBrw ) .AND. ( len( oBrw:oBrw:aSelected ) > 1 )

      oRad:SetOption( 1 )

   else

      oRad:SetOption( 2 )

      oSerIni:Enable()
      oSerFin:Enable()
      oDocIni:Enable()
      oDocFin:Enable()
      oSufIni:Enable()
      oSufFin:Enable()

   end

   if lHide1
      oChk1:UnCheck()
      oChk1:Hide()
   else
      SetWindowText( oChk1:hWnd, cTitle1 )
      oChk1:Refresh()
   end

   if lHide2
      oChk2:UnCheck()
      oChk2:Hide()
   else
      SetWindowText( oChk2:hWnd, cTitle2 )
      oChk2:Refresh()
   end

Return ( nil )



Static Function TreeChanged( oTree )

   local oItemTree   := oTree:GetItem()

   if !empty( oItemTree ) .AND. !empty( oItemTree:bAction )
      Eval( oItemTree:bAction )
   end

RETURN NIL



Static Function MakSelRec( bAction, bPreAction, bPostAction, cDocIni, cDocFin, nRad, lChk1, lChk2, lFechas, dDesde, dHasta, oDlg, oBtnCancel, oTree, oBrw, oMtrInf )

   local n        := 0
   local nPos     := 0
   local nRec     := ( D():FacturasClientes( nView ) )->( Recno() )
   local aPos
   local lRet
   local lPre
   local lWhile   := .T.





   if lChk1
      aPos        := { 0, 0 }
      ClientToScreen( oDlg:hWnd, aPos )
      oDlg:Move( aPos[ 1 ] - 26, aPos[ 2 ] - 510 )
   end





   oBtnCancel:bAction   := {|| lWhile := .F. }

   oDlg:Disable()

   oTree:Enable()
   oTree:DeleteAll()

   oBtnCancel:Enable()

   if !empty( bPreAction )
      lPre              := Eval( bPreAction )
   end

   if !IsLogic( lPre ) .OR. lPre

      if ( nRad == 1 )

         oMtrInf:SetTotal( len( oBrw:oBrw:aSelected ) )

         for each nPos in ( oBrw:oBrw:aSelected )

            ( D():FacturasClientes( nView ) )->( dbGoTo( nPos ) )

            if lFechas .OR.( ( D():FacturasClientes( nView ) )->dFecFac >= dDesde .AND. ( D():FacturasClientes( nView ) )->dFecFac <= dHasta )

               lRet  := Eval( bAction, lChk1, lChk2, oTree, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ) )

               if IsFalse( lRet )
                  exit
               end

            end

            oMtrInf:Set( ++n )

            SysRefresh()

            if !lWhile
               exit
            end

         next

      else

         oMtrInf:SetTotal( ( D():FacturasClientes( nView ) )->( OrdKeyCount() ) )

         ( D():FacturasClientes( nView ) )->( dbSeek( cDocIni, .T. ) )




         while ( lWhile )                                                                                      .AND.  ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac, 9 ) + ( D():FacturasClientes( nView ) )->cSufFac >= cDocIni .AND.  ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac, 9 ) + ( D():FacturasClientes( nView ) )->cSufFac <= cDocFin .AND.  !( D():FacturasClientes( nView ) )->( eof() )

            if lFechas .OR.( ( D():FacturasClientes( nView ) )->dFecFac >= dDesde .AND. ( D():FacturasClientes( nView ) )->dFecFac <= dHasta )

               lRet  := Eval( bAction, lChk1, lChk2, oTree, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ) )

               if IsFalse( lRet )
                  exit
               end

            end

            oMtrInf:Set( ( D():FacturasClientes( nView ) )->( OrdKeyNo() ) )

            ( D():FacturasClientes( nView ) )->( dbSkip() )

            SysRefresh()

         end

         oMtrInf:Set( ( D():FacturasClientes( nView ) )->( OrdKeyCount() ) )

      end

      if !empty( bPostAction )
         Eval( bPostAction )
      end

   end

   ( D():FacturasClientes( nView ) )->( dbGoTo( nRec ) )

   if lChk1
      WndCenter( oDlg:hWnd )
   end

   oBtnCancel:bAction   := {|| oDlg:End() }

   oDlg:Enable()

   if oBrw <> nil
      oBrw:Refresh()
   end

RETURN ( nil )






STATIC FUNCTION cPedCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode )

   local nDiv
   local cDesAlb
   local nTotRet
   local cPedido     := aGet[ 40 ]:VarGet()
   local lValid      := .F.
   local nTotEntPed  := 0

   if nMode <> 1 .OR. empty( cPedido )
      return .T.
   end

   if dbSeekInOrd( cPedido, "nNumPed", dbfPedCliT )

      if ( dbfPedCliT )->nEstado == 3

         MsgStop( "Pedido recibido" )
         lValid      := .F.

      else

         CursorWait()

         aGet[40 ]:bWhen := {|| .F. }

         aGet[7 ]:cText( ( dbfPedCliT )->CCODCLI )
         aGet[7 ]:lValid()
         aGet[7 ]:Disable()

         aGet[10 ]:cText( (dbfPedCliT)->CNOMCLI )
         aGet[11 ]:cText( (dbfPedCliT)->CDIRCLI )
         aGet[12 ]:cText( (dbfPedCliT)->CPOBCLI )
         aGet[13 ]:cText( (dbfPedCliT)->CPRVCLI )
         aGet[15 ]:cText( (dbfPedCliT)->CPOSCLI )
         aGet[16 ]:cText( (dbfPedCliT)->CDNICLI )
         aGet[8 ]:cText( (dbfPedCliT)->CCODALM )
         aGet[103 ]:cText( (dbfPedCliT)->CTLFCLI )
         aGet[8 ]:lValid()

         aGet[9 ]:cText( ( dbfPedCliT )->cCodCaj )
         aGet[9 ]:lValid()

         aGet[34]:cText( ( dbfPedCliT )->cCodPgo )
         aGet[34]:lValid()

         aGet[20 ]:cText( ( dbfPedCliT )->cCodAge )
         aGet[20 ]:lValid()

         aGet[24]:cText( ( dbfPedCliT )->nPctComAge )

         aGet[22 ]:cText( ( dbfPedCliT )->cCodTar )
         aGet[22 ]:lValid()

         aGet[23 ]:cText( ( dbfPedCliT )->cCodObr )
         aGet[23 ]:lValid()

         if !empty( oGetTarifa )
            oGetTarifa:setTarifa( ( dbfPedCliT )->nTarifa )
         else
            aTmp[ 19 ]  := ( dbfPedCliT )->nTarifa
         end

         aGet[75 ]:cText( ( dbfPedCliT )->cCodTrn )
         aGet[75 ]:lValid()

         aGet[61 ]:Click( ( dbfPedCliT )->lIvaInc )
         aGet[59]:Click( ( dbfPedCliT )->lRecargo )
         aGet[122 ]:Click( ( dbfPedCliT )->lOperPv )
         aGet[123   ]:Click( lRECCEmpresa() )

         aTmp[85]          := ( dbfPedCliT )->cCodGrp
         aTmp[17]          := ( dbfPedCliT )->lModCli





         aGet[ 31]:cText( ( dbfPedCliT )->cCondEnt )
         aGet[ 32 ]:cText( ( dbfPedCliT )->mComent  )
         aGet[ 33 ]:cText( ( dbfPedCliT )->mObserv  )





         aGet[44]:cText( ( dbfPedCliT )->cDtoEsp )
         aGet[46   ]:cText( ( dbfPedCliT )->cDpp    )
         aGet[45]:cText( ( dbfPedCliT )->nDtoEsp )
         aGet[47   ]:cText( ( dbfPedCliT )->nDpp    )
         aGet[48]:cText( ( dbfPedCliT )->cDtoUno )
         aGet[49]:cText( ( dbfPedCliT )->nDtoUno )
         aGet[50]:cText( ( dbfPedCliT )->cDtoDos )
         aGet[51]:cText( ( dbfPedCliT )->nDtoDos )
         aGet[97]:cText( ( dbfPedCliT )->cManObr )
         aGet[37]:cText( ( dbfPedCliT )->nIvaMan )
         aGet[38]:cText( ( dbfPedCliT )->nManObr )
         aGet[35]:cText( ( dbfPedCliT )->nBultos )





         aTmp[ 94 ]      := ( dbfPedCliT )->lAlquiler
         aTmp[ 92  ]      := ( dbfPedCliT )->dFecEntr
         aTmp[ 93   ]      := ( dbfPedCliT )->dFecSal

         if !empty( oTipFac )
            if ( dbfPedCliT )->lAlquiler
               oTipFac:Select( 2 )
            else
               oTipFac:Select( 1 )
            end
         end





         if ( dbfPedCliL )->( dbSeek( cPedido ) )

            (dbfTmpLin)->( dbAppend() )
            cDesAlb                    := ""
            cDesAlb                    += "Pedido Nº " + ( dbfPedCliT )->cSerPed + "/" + AllTrim( str( ( dbfPedCliT )->NNUMPED ) ) + "/" + ( dbfPedCliT )->CSUFPED
            cDesAlb                    += " - Fecha " + Dtoc( (dbfPedCliT)->DFECPED )
            (dbfTmpLin)->MLNGDES       := cDesAlb
            (dbfTmpLin)->LCONTROL      := .T.

            while ( ( dbfPedCliL )->cSerPed + str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cPedido )

               nTotRet                 := ( dbfPedCliL )->nUniCaja

               nTotRet                 -= AlbaranesClientesLineasModel():nUnidadesEntregadas( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cValPr1, ( dbfPedCliL )->cValPr2, ( dbfPedCliL )->cLote )
               nTotRet                 -= FacturasClientesLineasModel():nUnidadesEntregadas( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cValPr1, ( dbfPedCliL )->cValPr2, ( dbfPedCliL )->cLote )

               (dbfTmpLin)->( dbAppend() )

               (dbfTmpLin)->nNumLin    := (dbfPedCliL)->nNumLin
               (dbfTmpLin)->nPosPrint  := (dbfPedCliL)->nPosPrint
               (dbfTmpLin)->cRef       := (dbfPedCliL)->cRef
               (dbfTmpLin)->cDetalle   := (dbfPedCliL)->cDetalle
               (dbfTmpLin)->mLngDes    := (dbfPedCliL)->mLngDes
               (dbfTmpLin)->mNumSer    := (dbfPedCliL)->mNumSer
               (dbfTmpLin)->nPreUnit   := (dbfPedCliL)->nPreDiv
               (dbfTmpLin)->nPntVer    := (dbfPedCliL)->nPntVer
               (dbfTmpLin)->nImpTrn    := (dbfPedCliL)->nImpTrn
               (dbfTmpLin)->nPESOKG    := (dbfPedCliL)->nPesOkg
               (dbfTmpLin)->cPESOKG    := (dbfPedCliL)->cPesOkg
               (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad
               (dbfTmpLin)->nVolumen   := (dbfPedCliL)->nVolumen
               (dbfTmpLin)->cVolumen   := (dbfPedCliL)->cVolumen
               (dbfTmpLin)->nIVA       := (dbfPedCliL)->nIva
               (dbfTmpLin)->nReq       := (dbfPedCliL)->nReq
               (dbfTmpLin)->cUNIDAD    := (dbfPedCliL)->cUnidad
               (dbfTmpLin)->nDTO       := (dbfPedCliL)->nDto
               (dbfTmpLin)->nDTOPRM    := (dbfPedCliL)->nDtoPrm
               (dbfTmpLin)->cCodAge    := (dbfPedCliT)->cCodAge
               (dbfTmpLin)->nCOMAGE    := (dbfPedCliL)->nComAge
               (dbfTmpLin)->lTOTLIN    := (dbfPedCliL)->lTotLin
               (dbfTmpLin)->nDtoDiv    := (dbfPedCliL)->nDtoDiv
               (dbfTmpLin)->nCtlStk    := (dbfPedCliL)->nCtlStk
               (dbfTmpLin)->nCosDiv    := (dbfPedCliL)->nCosDiv
               (dbfTmpLin)->nPvpRec    := (dbfPedCliL)->nPvpRec
               (dbfTmpLin)->cTipMov    := (dbfPedCliL)->cTipMov
               (dbfTmpLin)->cAlmLin    := (dbfPedCliL)->cAlmLin
               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp
               (dbfTmpLin)->nValImp    := (dbfPedCliL)->nValImp
               (dbfTmpLin)->CCODPR1    := (dbfPedCliL)->cCodPr1
               (dbfTmpLin)->CCODPR2    := (dbfPedCliL)->cCodPr2
               (dbfTmpLin)->CVALPR1    := (dbfPedCliL)->cValPr1
               (dbfTmpLin)->CVALPR2    := (dbfPedCliL)->cValPr2
               (dbfTmpLin)->lKitArt    := (dbfAlbCliL)->lKitArt
               (dbfTmpLin)->lKitChl    := (dbfPedCliL)->lKitChl
               (dbfTmpLin)->lKitPrc    := (dbfPedCliL)->lKitPrc
               (dbfTmpLin)->lLote      := (dbfPedCliL)->lLote
               (dbfTmpLin)->nLote      := (dbfPedCliL)->nLote
               (dbfTmpLin)->cLote      := (dbfPedCliL)->cLote
               (dbfTmpLin)->lMsgVta    := (dbfPedCliL)->lMsgVta
               (dbfTmpLin)->lNotVta    := (dbfPedCliL)->lNotVta
               (dbfTmpLin)->lImpLin    := (dbfPedCliL)->lImpLin
               (dbfTmpLin)->cCodTip    := (dbfPedCliL)->cCodTip
               (dbfTmpLin)->mObsLin    := (dbfPedCliL)->mObsLin
               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip
               (dbfTmpLin)->cCodPrv    := (dbfPedCliL)->cCodPrv
               (dbfTmpLin)->cImagen    := (dbfPedCliL)->cImagen
               (dbfTmpLin)->cCodFam    := (dbfPedCliL)->cCodFam
               (dbfTmpLin)->cGrpFam    := (dbfPedCliL)->cGrpFam
               (dbfTmpLin)->cRefPrv    := (dbfPedCliL)->cRefPrv
               (dbfTmpLin)->dFecEnt    := (dbfPedCliL)->dFecEnt
               (dbfTmpLin)->dFecSal    := (dbfPedCliL)->dFecSal
               (dbfTmpLin)->nPreAlq    := (dbfPedCliL)->nPreAlq
               (dbfTmpLin)->lAlquiler  := (dbfPedCliL)->lAlquiler
               (dbfTmpLin)->nNumMed    := (dbfPedCliL)->nNumMed
               (dbfTmpLin)->nMedUno    := (dbfPedCliL)->nMedUno
               (dbfTmpLin)->nMedDos    := (dbfPedCliL)->nMedDos
               (dbfTmpLin)->nMedTre    := (dbfPedCliL)->nMedTre
               (dbfTmpLin)->nPuntos    := (dbfPedCliL)->nPuntos
               (dbfTmpLin)->nValPnt    := (dbfPedCliL)->nValPnt
               (dbfTmpLin)->nDtoPnt    := (dbfPedCliL)->nDtoPnt
               (dbfTmpLin)->nIncPnt    := (dbfPedCliL)->nIncPnt
               (dbfTmpLin)->lControl   := (dbfPedCliL)->lControl
               (dbfTmpLin)->cNumPed    := cPedido
               (dbfTmpLin)->lLinOfe    := (dbfPedCliL)->lLinOfe
               (dbfTmpLin)->nBultos    := (dbfPedCliL)->nBultos
               (dbfTmpLin)->cFormato   := (dbfPedCliL)->cFormato
               (dbfTmpLin)->cCodObr    := (dbfPedCliL)->cObrLin
               (dbfTmpLin)->cRefAux    := (dbfPedCliL)->cRefAux
               (dbfTmpLin)->cRefAux2   := (dbfPedCliL)->cRefAux2
               (dbfTmpLin)->cCtrCoste  := (dbfPedCliL)->cCtrCoste
               (dbfTmpLin)->cTipCtr    := (dbfPedCliL)->cTipCtr
               (dbfTmpLin)->cTerCtr    := (dbfPedCliL)->cTerCtr





               if nTotRet <> 0





                  if lCalCaj()

                     nDiv  := Mod( nTotRet, ( dbfPedCliL )->nUniCaja )
                     if nDiv == 0 .AND. ( dbfPedCliL )->nCanPed <> 0
                        ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed
                        ( dbfTmpLin )->nUniCaja := ( dbfPedCliL )->nUniCaja
                     else
                        ( dbfTmpLin )->nCanEnt  := 0
                        ( dbfTmpLin )->nUniCaja := nTotRet
                     end

                  else

                     ( dbfTmpLin )->nCanEnt     := ( dbfPedCliL )->nCanPed
                     ( dbfTmpLin )->nUniCaja    := nTotRet

                  end

               end

               (dbfPedCliL)->( dbSkip( 1 ) )

            end

            ( dbfTmpLin )->( dbGoTop() )





            if ( nMode <> 4 ) .AND. ( dbfPedCliI )->( dbSeek( cPedido ) )

               while ( dbfPedCliI )->cSerPed + str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cPedido .AND. !( dbfPedCliI )->( Eof() )
                  dbPass( dbfPedCliI, dbfTmpInc, .T. )
                  ( dbfPedCliI )->( dbSkip() )
               end

            end

            ( dbfPedCliI )->( dbGoTop() )





            if ( dbfPedCliD )->( dbSeek( cPedido ) )

               while ( dbfPedCliD )->cSerPed + str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed == cPedido .AND. !( dbfPedCliD )->( Eof() )
                  dbPass( dbfPedCliD, dbfTmpDoc, .T. )
                  ( dbfPedCliD )->( dbSkip() )
               end

            end

            ( dbfPedCliD )->( dbGoTop() )

            oBrwLin:Refresh()
            oBrwPgo:Refresh()

            oBrwLin:SetFocus()

         end

         lValid   := .T.

         CursorWE()

      end

      HideImportacion( aGet, aGet[ 40 ] )

   else

      MsgStop( "Pedido no existe" )

   end

RETURN lValid






STATIC FUNCTION cPreCli( aGet, aTmp, oBrw, nMode )

   local cDesAlb
   local cPedido  := aGet[ 41 ]:VarGet()
   local lValid   := .F.

   if nMode <> 1 .OR. empty( cPedido )
      return .T.
   end

   if dbSeekInOrd( cPedido, "nNumPre", dbfPreCliT )

      if ( dbfPreCliT )->lEstado

         MsgStop( "Presupuesto ya aprobado" )
         lValid   := .F.

      else

         aGet[7 ]:cText( ( dbfPreCliT )->CCODCLI )
         aGet[7 ]:lValid()
         aGet[7 ]:Disable()

         aGet[10 ]:cText( ( dbfPreCliT )->CNOMCLI )
         aGet[11 ]:cText( ( dbfPreCliT )->CDIRCLI )
         aGet[12 ]:cText( ( dbfPreCliT )->CPOBCLI )
         aGet[13 ]:cText( ( dbfPreCliT )->CPRVCLI )
         aGet[15 ]:cText( ( dbfPreCliT )->CPOSCLI )
         aGet[16 ]:cText( ( dbfPreCliT )->CDNICLI )
         aGet[103 ]:cText( ( dbfPreCliT )->CTLFCLI )

         aGet[8 ]:cText( ( dbfPreCliT )->CCODALM )
         aGet[8 ]:lValid()

         aGet[9 ]:cText( ( dbfPreCliT )->cCodCaj )
         aGet[9 ]:lValid()

         aGet[34]:cText( ( dbfPreCliT )->CCODPGO )
         aGet[34]:lValid()

         aGet[20 ]:cText( ( dbfPreCliT )->CCODAGE )
         aGet[20 ]:lValid()

         aGet[24]:cText( ( dbfPreCliT )->nPctComAge )

         aGet[22 ]:cText( ( dbfPreCliT )->CCODTAR )
         aGet[22 ]:lValid()

         aGet[23 ]:cText( ( dbfPreCliT )->CCODOBR )
         aGet[23 ]:lValid()

         if !empty( oGetTarifa )
            oGetTarifa:setTarifa( ( dbfPreCliT )->nTarifa )
         else
            aTmp[ 19 ]  := ( dbfPreCliT )->nTarifa
         end

         aGet[75 ]:cText( ( dbfPreCliT )->cCodTrn )
         aGet[75 ]:lValid()

         aGet[61 ]:Click( ( dbfPreCliT )->lIvaInc )
         aGet[59]:Click( ( dbfPreCliT )->lRecargo )
         aGet[122 ]:Click( ( dbfPreCliT )->lOperPv )
         aGet[123   ]:Click( lRECCEmpresa() )

         aGet[31]:cText( ( dbfPreCliT )->cCondEnt )
         aGet[32 ]:cText( ( dbfPreCliT )->mComent )
         aGet[33 ]:cText( ( dbfPreCliT )->mObserv )

         aGet[44 ]:cText( ( dbfPreCliT )->cDtoEsp )
         aGet[46    ]:cText( ( dbfPreCliT )->cDpp    )
         aGet[45 ]:cText( ( dbfPreCliT )->nDtoEsp )
         aGet[47    ]:cText( ( dbfPreCliT )->nDpp    )
         aGet[48 ]:cText( ( dbfPreCliT )->cDtoUno )
         aGet[49 ]:cText( ( dbfPreCliT )->nDtoUno )
         aGet[50 ]:cText( ( dbfPreCliT )->cDtoDos )
         aGet[51 ]:cText( ( dbfPreCliT )->nDtoDos )
         aGet[97 ]:cText( ( dbfPreCliT )->cManObr )
         aGet[37 ]:cText( ( dbfPreCliT )->nIvaMan )
         aGet[38 ]:cText( ( dbfPreCliT )->nManObr )
         aGet[35 ]:cText( ( dbfPreCliT )->nBultos )

         aTmp[85]          := ( dbfPreCliT )->cCodGrp
         aTmp[17]          := ( dbfPreCliT )->lModCli





         aTmp[ 94 ]      := ( dbfPreCliT )->lAlquiler
         aTmp[ 92  ]      := ( dbfPreCliT )->dFecEntr
         aTmp[ 93   ]      := ( dbfPreCliT )->dFecSal

         if !empty( oTipFac )
            if aTmp[ 94 ]
               oTipFac:Select( 2 )
            else
               oTipFac:Select( 1 )
            end
         end

         if (dbfPreCliL)->( dbSeek( cPedido ) )

            (dbfTmpLin)->( dbAppend() )
            cDesAlb              := ""
            cDesAlb              += "Presupuesto Nº " + ( dbfPreCliT )->cSerPre + "/" + AllTrim( str( ( dbfPreCliT )->nNumPre ) ) + "/" + ( dbfPreCliT )->cSufPre
            cDesAlb              += " - Fecha " + Dtoc( ( dbfPreCliT )->dFecPre )
            (dbfTmpLin)->MLNGDES    := cDesAlb
            (dbfTmpLin)->LCONTROL   := .T.

            while ( (dbfPreCliL)->cSerPre + str( (dbfPreCliL)->nNumPre ) + (dbfPreCliL)->cSufPre == cPedido )

               (dbfTmpLin)->( dbAppend() )

               (dbfTmpLin)->nNumLin    := (dbfPreCliL)->nNumLin
               (dbfTmpLin)->nPosPrint  := (dbfPreCliL)->nPosPrint
               (dbfTmpLin)->cRef       := (dbfPreCliL)->cRef
               (dbfTmpLin)->cDetalle   := (dbfPreCliL)->cDetAlle
               (dbfTmpLin)->mLngDes    := (dbfPreCliL)->mLngDes
               (dbfTmpLin)->mNumSer    := (dbfPreCliL)->mNumSer
               (dbfTmpLin)->nPreUnit   := (dbfPreCliL)->nPreDiv
               (dbfTmpLin)->nPntVer    := (dbfPreCliL)->nPntVer
               (dbfTmpLin)->nImpTrn    := (dbfPreCliL)->nImpTrn
               (dbfTmpLin)->nPESOKG    := (dbfPreCliL)->nPesOkg
               (dbfTmpLin)->cPESOKG    := (dbfPreCliL)->cPesOkg
               (dbfTmpLin)->cUnidad    := (dbfPreCliL)->cUnidad
               (dbfTmpLin)->nVolumen   := (dbfPreCliL)->nVolumen
               (dbfTmpLin)->cVolumen   := (dbfPreCliL)->cVolumen
               (dbfTmpLin)->nIVA       := (dbfPreCliL)->nIva
               (dbfTmpLin)->nReq       := (dbfPreCliL)->nReq
               (dbfTmpLin)->cUNIDAD    := (dbfPreCliL)->cUnidad
               (dbfTmpLin)->nDTO       := (dbfPreCliL)->nDto
               (dbfTmpLin)->nDTOPRM    := (dbfPreCliL)->nDtoPrm
               (dbfTmpLin)->cCodAge    := (dbfPreCliT)->cCodAge
               (dbfTmpLin)->nCOMAGE    := (dbfPreCliL)->nComAge
               (dbfTmpLin)->lTOTLIN    := (dbfPreCliL)->lTotLin
               (dbfTmpLin)->nDtoDiv    := (dbfPreCliL)->nDtoDiv
               (dbfTmpLin)->nCtlStk    := (dbfPreCliL)->nCtlStk
               (dbfTmpLin)->nCosDiv    := (dbfPreCliL)->nCosDiv
               (dbfTmpLin)->nPvpRec    := (dbfPreCliL)->nPvpRec
               (dbfTmpLin)->cTipMov    := (dbfPreCliL)->cTipMov
               (dbfTmpLin)->cAlmLin    := (dbfPreCliL)->cAlmLin
               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp
               (dbfTmpLin)->nValImp    := (dbfPreCliL)->nValImp
               (dbfTmpLin)->CCODPR1    := (dbfPreCliL)->cCodPr1
               (dbfTmpLin)->CCODPR2    := (dbfPreCliL)->cCodPr2
               (dbfTmpLin)->CVALPR1    := (dbfPreCliL)->cValPr1
               (dbfTmpLin)->CVALPR2    := (dbfPreCliL)->cValPr2
               (dbfTmpLin)->nCanEnt    := (dbfPreCLiL)->nCanPre
               (dbfTmpLin)->nUniCaja   := (dbfPreCLiL)->nUniCaja
               (dbfTmpLin)->nUndKit    := (dbfPreCLiL)->nUndKit
               (dbfTmpLin)->lKitArt    := (dbfPreCLiL)->lKitArt
               (dbfTmpLin)->lKitChl    := (dbfPreCLiL)->lKitChl
               (dbfTmpLin)->lKitPrc    := (dbfPreCliL)->lKitPrc
               (dbfTmpLin)->lLote      := (dbfPreCliL)->lLote
               (dbfTmpLin)->nLote      := (dbfPreCliL)->nLote
               (dbfTmpLin)->cLote      := (dbfPreCliL)->cLote
               (dbfTmpLin)->lMsgVta    := (dbfPreCliL)->lMsgVta
               (dbfTmpLin)->lNotVta    := (dbfPreCliL)->lNotVta
               (dbfTmpLin)->lImpLin    := (dbfPreCliL)->lImpLin
               (dbfTmpLin)->cCodTip    := (dbfPreCliL)->cCodTip
               (dbfTmpLin)->mObsLin    := (dbfPreCliL)->mObsLin
               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip
               (dbfTmpLin)->cCodPrv    := (dbfPreCliL)->cCodPrv
               (dbfTmpLin)->cImagen    := (dbfPreCliL)->cImagen
               (dbfTmpLin)->cCodFam    := (dbfPreCliL)->cCodFam
               (dbfTmpLin)->cGrpFam    := (dbfPreCliL)->cGrpFam
               (dbfTmpLin)->cRefPrv    := (dbfPreCliL)->cRefPrv
               (dbfTmpLin)->dFecEnt    := (dbfPreCliL)->dFecEnt
               (dbfTmpLin)->dFecSal    := (dbfPreCliL)->dFecSal
               (dbfTmpLin)->nPreAlq    := (dbfPreCliL)->nPreAlq
               (dbfTmpLin)->lAlquiler  := (dbfPreCliL)->lAlquiler
               (dbfTmpLin)->nNumMed    := (dbfPreCliL)->nNumMed
               (dbfTmpLin)->nMedUno    := (dbfPreCliL)->nMedUno
               (dbfTmpLin)->nMedDos    := (dbfPreCliL)->nMedDos
               (dbfTmpLin)->nMedTre    := (dbfPreCliL)->nMedTre
               (dbfTmpLin)->nPuntos    := (dbfPreCliL)->nPuntos
               (dbfTmpLin)->nValPnt    := (dbfPreCliL)->nValPnt
               (dbfTmpLin)->nDtoPnt    := (dbfPreCliL)->nDtoPnt
               (dbfTmpLin)->nIncPnt    := (dbfPreCliL)->nIncPnt
               (dbfTmpLin)->lControl   := (dbfPreCliL)->lControl
               (dbfTmpLin)->lLinOfe    := (dbfPreCliL)->lLinOfe
               (dbfTmpLin)->nBultos    := (dbfPreCliL)->nBultos
               (dbfTmpLin)->cFormato   := (dbfPreCliL)->cFormato
               (dbfTmpLin)->cCodObr    := (dbfPedCliT)->cCodObr
               (dbfTmpLin)->cRefAux    := (dbfPreCliL)->cRefAux
               (dbfTmpLin)->cRefAux2   := (dbfPreCliL)->cRefAux2
               (dbfTmpLin)->cCtrCoste  := (dbfPreCliL)->cCtrCoste
               (dbfTmpLin)->cTipCtr    := (dbfPreCliL)->cTipCtr
               (dbfTmpLin)->cTerCtr    := (dbfPreCliL)->cTerCtr

               (dbfPreCliL)->( dbSkip() )

            end

            ( dbfTmpLin )->( dbGoTop() )





            if ( nMode <> 4 ) .AND. ( dbfPreCliI )->( dbSeek( cPedido ) )

               while ( dbfPreCliI )->cSerPre + str( ( dbfPreCliI )->nNumPre ) + ( dbfPreCliI )->cSufPre == cPedido .AND. !( dbfPreCliI )->( Eof() )
                  dbPass( dbfPreCliI, dbfTmpInc, .T. )
                  ( dbfPreCliI )->( dbSkip() )
               end

            end

            ( dbfPreCliI )->( dbGoTop() )





            if ( dbfPreCliD )->( dbSeek( cPedido ) )

               while ( dbfPreCliD )->cSerPre + str( ( dbfPreCliD )->nNumPre ) + ( dbfPreCliD )->cSufPre == cPedido .AND. !( dbfPreCliD )->( Eof() )
                  dbPass( dbfPreCliD, dbfTmpDoc, .T. )
                  ( dbfPreCliD )->( dbSkip() )
               end

            end

            ( dbfPreCliD )->( dbGoTop() )

            oBrw:refresh()
            oBrw:setFocus()

         end

         lValid   := .T.

         if ( dbfPreCliT )->( dbRLock() )
            ( dbfPreCliT )->lEstado := .T.
            ( dbfPreCliT )->( DbUnlock() )
         end

      end

      HideImportacion( aGet, aGet[ 41 ] )

   ELSE

      MsgStop( "Presupuesto no existe" )

   end

RETURN lValid



STATIC FUNCTION DelSerie( oWndBrw )

   local oDlg
   local oSerIni
   local oSerFin
   local oTxtDel
   local nTxtDel     := 0
   local nRecno      := ( D():FacturasClientes( nView ) )->( Recno() )
   local nOrdAnt     := ( D():FacturasClientes( nView ) )->( OrdSetFocus( 1 ) )
   local oDesde      := TDesdeHasta():Init( ( D():FacturasClientes( nView ) )->cSerie, ( D():FacturasClientes( nView ) )->nNumFac, ( D():FacturasClientes( nView ) )->cSufFac, GetSysDate() )
   local lCancel     := .F.
   local oBtnAceptar
   local oBtnCancel




   oDlg = TDialog():New(,,,, "Eliminar series de facturas", "DELSERDOC",, .F.,,,,, oWndBrw, .F.,,,,,, .F.,, "oDlg", nil, )



   TRadMenu():Redefine( { | u | If( PCount()==0, oDesde:nRadio, oDesde:nRadio:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, oDesde:cSerieInicio, oDesde:cSerieInicio:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieInicio >= "A" .AND. oDesde:cSerieInicio <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, oDesde:cSerieFin, oDesde:cSerieFin:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieFin >= "A" .AND. oDesde:cSerieFin <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, oDesde:nNumeroInicio, oDesde:nNumeroInicio:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, oDesde:nNumeroFin, oDesde:nNumeroFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, oDesde:cSufijoInicio, oDesde:cSufijoInicio:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, oDesde:cSufijoFin, oDesde:cSufijoFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oDesde:dFechaInicio, oDesde:dFechaInicio:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, oDesde:dFechaFin, oDesde:dFechaFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )




   oBtnAceptar := TButton():ReDefine( 1, {||( DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, @lCancel ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( lCancel := .T., oDlg:end() )}, oDlg,,, .F.,,,, .T. )





 oTxtDel := TApoloMeter():ReDefine( 160, { | u | If( PCount()==0, nTxtDel, nTxtDel:= u ) }, ( D():FacturasClientes( nView ) )->( OrdKeyCount() ), oDlg, .F.,,, .T.,,,, )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( lCancel )},,, oDlg:bRClicked,,, )

   ( D():FacturasClientes( nView ) )->( dbGoTo( nRecNo ) )
   ( D():FacturasClientes( nView ) )->( ordSetFocus( nOrdAnt ) )

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



STATIC FUNCTION DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, lCancel )

   local nOrd
   local nDeleted       := 0
   local nProcesed      := 0

   oBtnAceptar:Hide()
   oBtnCancel:bAction   := {|| lCancel := .T. }

   if oDesde:nRadio == 1

      nOrd              := ( D():FacturasClientes( nView ) )->( OrdSetFocus( "nNumFac" ) )

      ( D():FacturasClientes( nView ) )->( dbSeek( oDesde:cNumeroInicio(), .T. ) )
      while !lCancel .AND. ( D():FacturasClientes( nView ) )->( !eof() )






         if ( D():FacturasClientes( nView ) )->cSerie  >= oDesde:cSerieInicio  .AND. ( D():FacturasClientes( nView ) )->cSerie  <= oDesde:cSerieFin     .AND. ( D():FacturasClientes( nView ) )->nNumFac >= oDesde:nNumeroInicio .AND. ( D():FacturasClientes( nView ) )->nNumFac <= oDesde:nNumeroFin    .AND. ( D():FacturasClientes( nView ) )->cSufFac >= oDesde:cSufijoInicio .AND. ( D():FacturasClientes( nView ) )->cSufFac <= oDesde:cSufijoFin

            ++nDeleted

            oTxtDel:cText  := "Eliminando : " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( nView ) )->cSufFac

            WinDelRec( nil, D():FacturasClientes( nView ), {|| QuiFacCli() } )

         else

            ( D():FacturasClientes( nView ) )->( dbSkip() )

         end

         ++nProcesed

         oTxtDel:Set( nProcesed )

      end

      ( D():FacturasClientes( nView ) )->( OrdSetFocus( nOrd ) )

   else

      nOrd              := ( D():FacturasClientes( nView ) )->( OrdSetFocus( "dFecFac" ) )

      ( D():FacturasClientes( nView ) )->( dbSeek( oDesde:dFechaInicio, .T. ) )
      while !lCancel .AND. ( D():FacturasClientes( nView ) )->( !eof() )


         if ( D():FacturasClientes( nView ) )->dFecFac >= oDesde:dFechaInicio  .AND. ( D():FacturasClientes( nView ) )->dFecFac <= oDesde:dFechaFin

            ++nDeleted

            oTxtDel:cText  := "Eliminando : " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( nView ) )->cSufFac

            WinDelRec( nil, D():FacturasClientes( nView ), {|| QuiFacCli() } )

         else

            ( D():FacturasClientes( nView ) )->( dbSkip() )

         end

         ++nProcesed

         oTxtDel:Set( nProcesed )

      end

      ( D():FacturasClientes( nView ) )->( OrdSetFocus( nOrd ) )

   end

   lCancel              := .T.

   oBtnAceptar:Show()

   if lCancel
      msgStop( "Total de registros borrados : " + str( nDeleted ), "Proceso cancelado" )
   else
      msgInfo( "Total de registros borrados : " + str( nDeleted ), "Proceso finalizado" )
   end

RETURN ( oDlg:End() )



static function RecFacCli( aTmpFac, lMessage )

   local nRecno
   local cCodFam
   local nDtoAge     := 0
   local nImpAtp     := 0
   local nImpOfe     := 0
   local hAtipica

   If( lMessage == nil, lMessage := .T., ) ;

   if lMessage




      if !ApoloMsgNoYes(  "!Atención!,"                                       + Chr(13)+Chr(10) +  "todos los precios se recalcularán en función de"  + Chr(13)+Chr(10) +  "los valores en las bases de datos.", "¿ Desea proceder ?" )
         return nil
      end

   end

   nRecno            := ( dbfTmpLin )->( RecNo() )

   ( D():Articulos( nView ) )->( ordSetFocus( "Codigo" ) )

   ( dbfTmpLin )->( dbGotop() )
   while !( dbfTmpLin )->( eof() )





      if ( D():Articulos( nView ) )->( dbSeek( ( dbfTmpLin )->cRef ) )

         do case
            case aTmpFac[ 68 ] <= 2
               ( dbfTmpLin )->nIva     := nIva( dbfIva, ( D():Articulos( nView ) )->TipoIva )
               ( dbfTmpLin )->nReq     := nReq( dbfIva, ( D():Articulos( nView ) )->TipoIva )
            case aTmpFac[ 68 ] == 3
               ( dbfTmpLin )->nIva     := 0
               ( dbfTmpLin )->nReq     := 0
         end





         if !empty( ( D():Articulos( nView ) )->cCodImp )
            ( dbfTmpLin )->cCodImp  := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp, aTmpFac[ 61 ], ( dbfTmpLin )->nIva )
         end





         ( dbfTmpLin )->nPreUnit := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), dbfDiv, dbfKit, dbfIva, , , oNewImp )





         ( dbfTmpLin )->nPntVer  := ( D():Articulos( nView ) )->nPntVer1





         ( dbfTmpLin )->nCtlStk  := (D():Articulos( nView ))->nCtlStock
         ( dbfTmpLin )->nCosDiv  := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpFac[ 7 ] )
         ( dbfTmpLin )->nPvpRec  := (D():Articulos( nView ))->PvpRec



         cCodFam                 := ( dbfTmpLin )->cCodFam



         do case
         case !empty( aTmpFac[ 22 ] )

            nImpOfe     := RetPrcTar( ( dbfTmpLin )->cRef, aTmpFac[ 22 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL, ( dbfTmpLin )->nTarLin )
            if nImpOfe <> 0
               ( dbfTmpLin )->nPreUnit := nImpOfe
            end

            nImpOfe     := RetPctTar( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ 22 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL )
            if nImpOfe <> 0
               ( dbfTmpLin )->nDto     := nImpOfe
            end

            nImpOfe     := RetComTar( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ 22 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpFac[ 20 ], dbfTarPreL, dbfTarPreS )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nComAge  := nImpOfe
            end






            nImpOfe     := RetDtoPrm( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ 22 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpFac[ 6 ], dbfTarPreL )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nDtoPrm  := nImpOfe
            end





            nDtoAge     := RetDtoAge( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ 22 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpFac[ 6 ], aTmpFac[ 20 ], dbfTarPreL, dbfTarPreS )
            if nDtoAge  <> 0
               ( dbfTmpLin )->nComAge  := nDtoAge
            end

         end





         hAtipica := hAtipica( hValue( dbfTmpLin, aTmpFac ) )

         if !empty( hAtipica )

            if hhaskey( hAtipica, "nTarifaFamilia" ) .AND. hAtipica[ "nTarifaFamilia" ] > 0
               ( dbfTmpLin )->nPreUnit := nRetPreArt( hAtipica[ "nTarifaFamilia" ], aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), dbfDiv, dbfKit, dbfIva, , , oNewImp )
            end

            if hhaskey( hAtipica, "nImporte" )
               if hAtipica[ "nImporte" ] <> 0
                  ( dbfTmpLin )->nPreUnit := hAtipica[ "nImporte" ]
               end
            end

            if hhaskey( hAtipica, "nDescuentoPorcentual" )
               if hAtipica[ "nDescuentoPorcentual" ] <> 0
                  ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
               end
            end

            if hhaskey( hAtipica, "nDescuentoPromocional" )
               if hAtipica[ "nDescuentoPromocional" ] <> 0
                  ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
               end
            end

            if hhaskey( hAtipica, "nDescuentoLineal" )
               if hAtipica[ "nDescuentoLineal" ] <> 0
                  ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
               end
            end

            if hhaskey( hAtipica, "nComisionAgente" )
               if hAtipica[ "nComisionAgente" ] <> 0
                  ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
               end
            end

         end





         nImpOfe     := nImpOferta( ( dbfTmpLin )->cRef, aTmpFac[ 7 ], aTmpFac[ 85 ], ( dbfTmpLin )->nUniCaja, aTmpFac[ 6 ], dbfOferta, ( dbfTmpLin )->nTarLin, nil, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )
         if nImpOfe  <> 0
            ( dbfTmpLin )->nPreUnit := nCnv2Div( nImpOfe, cDivEmp(), aTmpFac[ 63 ] )
         end










      end

      ( dbfTmpLin )->( dbSkip() )

   end

   ( dbfTmpLin )->( dbGoTo( nRecno ) )

return nil



Static Function lEscandalloEdtRec( lSet, oBrwLin )

   local lShwKit     := lShwKit()

   if lSet
      lShwKit        := !lShwKit
   end

   if lShwKit
      SetWindowText( oBtnKit:hWnd, "Ocultar Esc&ll." )
      if ( dbfTmpLin )->( Used() )
         ( dbfTmpLin )->( dbClearFilter() )
      end
   else
      SetWindowText( oBtnKit:hWnd, "Mostrar Esc&ll." )
      if ( dbfTmpLin )->( Used() )
         ( dbfTmpLin )->( dbSetFilter( {|| ! Field->lKitChl }, "!lKitChl" ) )
      end
   end

   if lSet
      lShwKit( lShwKit )
   end

   if !empty( oBrwLin )
      oBrwLin:Refresh()
   end

Return ( nil )












STATIC FUNCTION GrpAlb( aGet, aTmp, oBrw, nMode )

   local oDlg
   local oBmp
   local oTitle1
   local oTitle2
   local oTitle3
   local oBrwDet
   local nOrd
   local nOrdLineasFacturas
   local nNumLin
   local nPosPrint
   local nItem       := 1
   local nTotDoc     := 0
   local nDtoEsp     := 0
   local nDtoDpp     := 0
   local nDtoUno     := 0
   local nDtoDos     := 0
   local nOffSet     := nLastNum( dbfTmpLin )
   local cDesAlb     := ""
   local cCodCli     := Rtrim( aGet[ 7 ]:VarGet() )
   local lIvaInc     := aTmp[ 61 ]
   local lAlquiler   := .F.
   local aFacturas  := {}
   local nTotEntAlb  := 0
   local cSuPed      := ""

   msgwait( ValType( aTotIva ), "", 0.0001 )

   if empty( cCodCli )
      msgStop( "Es necesario codificar un cliente.", "Agrupar Facturas" )
      return .T.
   end

   nOrd              := ( dbfAlbCliT )->( ordSetFocus( "CCODCLI" ) )
   nOrdLineasFacturas := ( dbfAlbCliL )->( ordSetFocus( "nPosPrint" ) )

   if !empty( oTipFac ) .AND. oTipFac:nAt == 2
      lAlquiler      := .T.
   end






   if ( dbfAlbCliT )->( dbSeek( cCodCli ) )
      while Rtrim( ( dbfAlbCliT )->cCodCli ) == cCodCli .AND. !( dbfAlbCliT )->( eof() )




         if ( dbfAlbCliT )->lAlquiler  == lAlquiler                                          .AND. !( dbfAlbCliT )->lFacturado                                                      .AND. ( lIvaInc == ( dbfAlbCliT )->lIvaInc  )                                          .AND. ( empty( aTmp[ 23 ] ) .OR. ( dbfAlbCliT )->cCodObr == aTmp[ 23 ] )













            aAdd( aFacturas, {  lFacturado( dbfAlbCliT ) , ( dbfAlbCliT )->cSerAlb + str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, ( dbfAlbCliT )->cCodSuAlb , ( dbfAlbCliT )->dFecAlb , ( dbfAlbCliT )->cCodCli , ( dbfAlbCliT )->cNomCli , ( dbfAlbCliT )->cRetMat , ( dbfAlbCliT )->cCodObr , sTotAlbCli( ( dbfAlbCliT )->cSerAlb + str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, nil, nil, .T. ), ( dbfAlbCliT )->cSerAlb , ( dbfAlbCliT )->nNumAlb , ( dbfAlbCliT )->cSufAlb , ( dbfAlbCliT )->cCodAge } )
         endif

         ( dbfAlbCliT )->( dbSkip() )

      end

   else

      msgStop( "No existen Facturas de este cliente." )

      ( dbfAlbCliT )->( ordSetFocus( nOrd ) )
      ( dbfAlbCliS )->( ordSetFocus( nOrdLineasFacturas ) )

      return .T.

   end





   ( dbfAlbCliT )->( ordSetFocus( nOrd ) )





   if Len( aFacturas ) == 0
      MsgStop( "No existen Facturas sin facturar" )
      return .T.
   end








   oDlg = TDialog():New(,,,, "Agrupando Facturas de clientes", "SET_ALBARAN",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmp := TBitmap():ReDefine( 500, "gc_document_text_gear_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )



      oTitle1 := TSay():ReDefine( 501, {|| RTrim( aTmp[10] )}, oDlg,,,, .F.,, .F., .F., )



      oTitle2 := TSay():ReDefine( 502, {|| If( empty( aTmp[23] ), "TODAS", aTmp[23] )}, oDlg,,,, .F.,, .F., .F., )



      oTitle3 := TSay():ReDefine( 503, {|| if( aTmp[ 61 ], "Incluido", "Desglosado" )}, oDlg,,,, .F.,, .F., .F., )



      oTitle3 := TSay():ReDefine( 504, {|| "Tipo de " + cImp() + ": "}, oDlg,,,, .F.,, .F., .F., )

      oBrwDet                        := IXBrowse():New( oDlg )

      oBrwDet:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDet:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDet:nMarqueeStyle          := 5
      oBrwDet:lRecordSelector        := .F.
      oBrwDet:lHscroll               := .F.
      oBrwDet:lFooter                := .T.
      oBrwDet:cName                  := "Agrupar Facturas clientes"

      oBrwDet:bLDblClick   := {|| aFacturas[ oBrwDet:nArrayAt, 1 ] := !aFacturas[ oBrwDet:nArrayAt, 1 ], oBrwDet:Refresh() }

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Seleccionado"
         :cSortOrder       := 1
         :bStrData         := {|| "" }
         :bEditValue       := {|| aFacturas[ oBrwDet:nArrayAt, 1 ] }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := 2
         :bEditValue       := {|| aFacturas[ oBrwDet:nArrayAt, 10 ] + "/" + AllTrim( str( aFacturas[ oBrwDet:nArrayAt, 11 ] ) ) + "/" + aFacturas[ oBrwDet:nArrayAt, 12 ] }
         :nWidth           := 75
      end

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Su albarán"
         :cSortOrder       := 3
         :bEditValue       := {|| aFacturas[ oBrwDet:nArrayAt, 3 ] }
         :nWidth           := 75
      end

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := 4
         :bEditValue       := {|| Dtoc( aFacturas[ oBrwDet:nArrayAt, 4 ] ) }
         :nWidth           := 80
      end

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := 5
         :bEditValue       := {|| Rtrim( aFacturas[ oBrwDet:nArrayAt, 5 ] ) + Space(1) + aFacturas[ oBrwDet:nArrayAt, 6 ] }
         :nWidth           := 225
      end

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Matrícula"
         :cSortOrder       := 7
         :bEditValue       := {|| Rtrim( aFacturas[ oBrwDet:nArrayAt, 7 ] ) }
         :nWidth           := 80
      end

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Dirección"
         :cSortOrder       := 8
         :bEditValue       := {|| Rtrim( aFacturas[ oBrwDet:nArrayAt, 8 ] ) + Space(1) + RetFld( aFacturas[ oBrwDet:nArrayAt, 5 ] + aFacturas[ oBrwDet:nArrayAt, 8 ], dbfObrasT, "cNomObr" ) }
         :nWidth           := 225
      end

      with object ( oBrwDet:AddCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| aFacturas[ oBrwDet:nArrayAt, 9 ]:nTotalDocumento }
         :bFooter          := {|| nTotalFacturasAgrupar( aFacturas ) }
         :nWidth           := 70
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
      end

      oBrwDet:SetArray( aFacturas, .T., , .F. )

      oBrwDet:CreateFromResource( 130 )






      TButton():ReDefine( 514, {||(  aFacturas[ oBrwDet:nArrayAt, 1 ] := !aFacturas[ oBrwDet:nArrayAt, 1 ], oBrwDet:refresh(), oBrwDet:setFocus() )}, oDlg,,, .F.,,,, .F. )






      TButton():ReDefine( 516, {||(  aEval( aFacturas, { |aItem| aItem[1] := .T. } ), oBrwDet:refresh(), oBrwDet:setFocus() )}, oDlg,,, .F.,,,, .F. )






      TButton():ReDefine( 517, {||(  aEval( aFacturas, { |aItem| aItem[1] := .F. } ), oBrwDet:refresh(), oBrwDet:setFocus() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 518, {||( ZooAlbCli( aFacturas[ oBrwDet:nArrayAt, 2 ] ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

      oDlg:bStart := {|| oBrwDet:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   if oDlg:nResult == 1 .AND. Len( aFacturas ) >= 1

      CursorWait()





      for nItem := 1 to Len( aFacturas )
         if ( aFacturas[ nItem, 1 ] )
             if ( dbfAlbCliT )->( dbSeek( aFacturas[ nItem, 2] ) )
               SetFacturadoAlbaranCliente( .T., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS )
            end
            aAdd( aNumAlb, aFacturas[ nItem, 2 ] )
         end
      next

      for nItem := 1 to Len( aFacturas )





         if ( dbfAlbCliT )->( dbSeek( aFacturas[ nItem, 2] ) ) .AND. aFacturas[ nItem, 1 ]

            if !empty( ( dbfAlbCliT )->cCodAge ) .AND. empty( aTmp[ 20 ] )
               aGet[ 20  ]:cText( ( dbfAlbCliT )->cCodAge )
            end

            if !empty( ( dbfAlbCliT )->cCodPago ) .AND. empty( aTmp[ 34 ] )
               aGet[ 34 ]:cText( ( dbfAlbCliT )->cCodPago )
            end

            if ( dbfAlbCliT )->lRecargo
               aGet[ 59 ]:Click( .T. )
            end

            if ( dbfAlbCliT )->lOperPv
               aGet[ 122 ]:Click( .T. )
            end

            cSuPed               := ( dbfAlbCliT )->cSuPed

         end





         if ( dbfAlbCliL )->( dbSeek( aFacturas[ nItem, 2 ] ) ) .AND. aFacturas[ nItem, 1 ]

            nNumLin                       := nil
            nPosPrint                     := nil

            if lNumAlb() .OR. lNumObr() .OR. lSuAlb()

               if nOffSet < nLastNum( dbfTmpLin )
                  ++nOffSet
               end

               ( dbfTmpLin )->( dbAppend() )

               cDesAlb                    := ""
               if lNumObr()
                  cDesAlb                 += Alltrim( cNumObr() ) + " " + StrTran( aFacturas[ nItem, 8 ], " ", "" ) + Space( 1 )
                  cDesAlb                 += if( !empty( aFacturas[ nItem, 8 ] ), AllTrim( RetFld( aFacturas[ nItem, 5 ] + aFacturas[ nItem, 8 ], dbfObrasT, "cNomObr" ) ), "" )
               end
               if lNumAlb()
                  cDesAlb                 += Alltrim( cNumAlb() ) + " " + Left( aFacturas[ nItem, 2 ], 1 ) + "/" + AllTrim( Substr( aFacturas[ nItem, 2 ], 2, 9 ) ) + "/" + Right( aFacturas[ nItem, 2 ], 2 ) + Space( 1 )
               end
               if lSuAlb()
                  cDesAlb                 += Alltrim( cSuAlb()  ) + " " + StrTran( aFacturas[ nItem, 3 ], " ", "" ) + Space( 1 )
               end
               cDesAlb                    += " - Fecha " + Dtoc( aFacturas[ nItem, 4] )

               ( dbfTmpLin )->cDetalle    := cDesAlb
               ( dbfTmpLin )->mLngDes     := cDesAlb
               ( dbfTmpLin )->lControl    := .T.
               ( dbfTmpLin )->nNumLin     := nOffSet
               ( dbfTmpLin )->nPosPrint   := nOffSet

            end

            while ( ( dbfAlbCliL )->cSerAlb + str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == aFacturas[ nItem, 2] .AND. !( dbfAlbCliL )->( Eof() ) )

               if nNumLin <> ( dbfAlbCliL )->nNumLin .AND. !( dbfAlbCliL )->lControl
                  ++nOffSet
                  nNumLin              := ( dbfAlbCliL )->nNumLin
               end








               appendRegisterByHash( dbfAlbCliL, dbfTmpLin, {  "nNumLin"   => nOffSet, "nPosPrint" => nOffSet, "cCodAlb"   => ( dbfAlbCliT )->cSerAlb + str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, "dFecFac"   => ( dbfAlbCliT )->dFecAlb, "tFecFac"   => ( dbfAlbCliT )->tFecAlb, "cSuPed"    => cSuPed, "cCodObr"   => aFacturas[ nItem, 8 ], "cCodAge"   => aFacturas[ nItem, 13 ] } )





               if ( dbfAlbCliS )->( dbSeek( ( dbfAlbCliL )->cSerAlb + str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb + str( ( dbfAlbCliL )->nNumLin ) ) )

                  while ( ( dbfAlbCliS )->cSerAlb + str( ( dbfAlbCliS )->nNumAlb ) + ( dbfAlbCliS )->cSufAlb + str( ( dbfAlbCliS )->nNumLin ) == ( dbfAlbCliL )->cSerAlb + str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb + str( ( dbfAlbCliL )->nNumLin ) .AND. !( dbfAlbCliS )->( eof() ) )

                     ( dbfTmpSer )->( dbAppend() )

                     ( dbfTmpSer )->nNumLin     := nOffSet
                     ( dbfTmpSer )->cRef        := ( dbfAlbCliS )->cRef
                     ( dbfTmpSer )->cAlmLin     := ( dbfAlbCliS )->cAlmLin
                     ( dbfTmpSer )->lUndNeg     := ( dbfAlbCliS )->lUndNeg
                     ( dbfTmpSer )->cNumSer     := ( dbfAlbCliS )->cNumSer

                     ( dbfAlbCliS )->( dbSkip() )

                  end

               end

               ( dbfAlbCliL )->( dbSkip() )

            end





            nTotDoc                       += aFacturas[ nItem, 9 ]:nTotalBruto
            nDtoEsp                       += aFacturas[ nItem, 9 ]:nTotalDescuentoGeneral
            nDtoDpp                       += aFacturas[ nItem, 9 ]:nTotalDescuentoProntoPago
            nDtoUno                       += aFacturas[ nItem, 9 ]:nTotalDescuentoUno
            nDtoDos                       += aFacturas[ nItem, 9 ]:nTotalDescuentoDos





            if RetFld( cCodCli, D():Clientes( nView ), "lTotAlb" )
               ( dbfTmpLin )->( dbAppend() )
               ( dbfTmpLin )->nNumLin     := ++nOffSet
               ( dbfTmpLin )->nPosPrint   := nOffSet
               ( dbfTmpLin )->mLngDes     := "Total albarán..."
               ( dbfTmpLin )->lTotLin     := .T.
            end

            ( dbfTmpLin )->( dbGoTop() )





            if ( nMode <> 4 ) .AND. ( dbfAlbCliI )->( dbSeek( aFacturas[ nItem, 2 ] ) )
               while ( dbfAlbCliI )->cSerAlb + str( ( dbfAlbCliI )->nNumAlb ) + ( dbfAlbCliI )->cSufAlb == aFacturas[ nItem, 2 ] .AND. !( dbfAlbCliI )->( Eof() )
                  dbPass( dbfAlbCliI, dbfTmpInc, .T. )
                  ( dbfAlbCliI )->( dbSkip() )
               end
            end

            ( dbfAlbCliI )->( dbGoTop() )





            if ( dbfAlbCliD )->( dbSeek( aFacturas[ nItem, 2 ] ) )
               while ( dbfAlbCliD )->cSerAlb + str( ( dbfAlbCliD )->nNumAlb ) + ( dbfAlbCliD )->cSufAlb == aFacturas[ nItem, 2 ] .AND. !( dbfAlbCliD )->( Eof() )
                  dbPass( dbfAlbCliD, dbfTmpDoc, .T. )
                  ( dbfAlbCliD )->( dbSkip() )
               end
            end

            ( dbfAlbCliD )->( dbGoTop() )

            oBrw:Refresh()

         end

         ( dbfTmpLin )->( dbGoTop() )
         ( dbfTmpInc )->( dbGoTop() )
         ( dbfTmpDoc )->( dbGoTop() )

      next





      aGet[ 39 ]:Hide()
      aGet[ 40 ]:Hide()
      aGet[ 41 ]:Hide()

      oBtnPre:Disable()
      oBtnPed:Disable()
      oBtnAlb:Disable()

      oBtnGrp:bWhen  := {|| .F. }





      if !empty( nDtoEsp )
         aGet[ 45 ]:cText( nDtoEsp / nTotDoc * 100 )
         nTotDoc  -= nDtoEsp
      end

      if !empty( nDtoDpp )
         aGet[ 47 ]:cText( nDtoDpp / nTotDoc * 100 )
         nTotDoc  -= nDtoDpp
      end

      if !empty( nDtoUno )
         aGet[ 49 ]:cText( nDtoUno / nTotDoc * 100 )
         nTotDoc  -= nDtoUno
      end

      if !empty( nDtoDos )
         aGet[ 51 ]:cText( nDtoDos / nTotDoc * 100 )
      end

      HideImportacion( aGet )





      RecalculaTotal( aTmp )

      CursorWE()

   end





   oBrwDet:CloseData()

   oBmp:End()

RETURN .T.



static function nTotalFacturasAgrupar( aFacturas )

   local aAlbaran
   local nTotal   := 0

   for each aAlbaran in aFacturas

      if aAlbaran[1]
         nTotal      +=  aAlbaran[9]:nTotalDocumento
      end

   next

return Trans( nTotal, cPorDiv )



Static Function EdtRecMenu( aTmp, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra para la familia", .F.,, {|oMenuItem|( oDetCamposExtra:Play( Space( 1 ) ) )},, "gc_form_plus2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&2. Visualizar presupuesto", "Visualiza el presupueso del que proviene", .F.,, {|oMenuItem|( if( !empty( aTmp[ 41 ] ), ZooPreCli( aTmp[ 41 ] ), MsgStop( "No hay presupusto asociado" ) ) )},, "gc_notebook_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)





            MenuAddItem( "&3. Visualizar pedido", "Visualiza el pedido del que proviene", .F.,, {|oMenuItem|( if( !empty( aTmp[ 40 ] ), ZooPedCli( aTmp[ 40 ] ), MsgStop( "No hay pedido asociado" ) ) )},, "gc_clipboard_empty_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)





            MenuAddItem( "&4. Visualizar albarán", "Visualiza el albarán del que proviene", .F.,, {|oMenuItem|( if( !empty( aTmp[ 39 ] ), ZooAlbCli( aTmp[ 39 ] ), MsgStop( "No hay albarán asociado" ) ) )},, "gc_document_empty_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)




            MenuAddItem( "&5. Modificar cliente", "Modifica la ficha del cliente", .F.,, {|oMenuItem|( if( !empty( aTmp[ 7 ] ), EdtCli( aTmp[ 7 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "gc_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&6. Modificar cliente contactos", "Modifica la ficha del cliente en contactos", .F.,, {|oMenuItem|( if( !empty( aTmp[ 7 ] ), EdtCli( aTmp[ 7 ], , 5 ), MsgStop( "Código de cliente vacío" ) ) )},, "gc_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&7. Informe de cliente", "Informe de cliente", .F.,, {|oMenuItem|( if( !empty( aTmp[ 7 ] ), InfCliente( aTmp[ 7 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&8. Modificar Dirección", "Modifica ficha de la Dirección", .F.,, {|oMenuItem|( if( !empty( aTmp[ 23 ] ), EdtObras( aTmp[ 7 ], aTmp[ 23 ], dbfObrasT ), MsgStop( "Código de obra vacío" ) ) )},, "gc_worker2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)





            MenuAddItem( "&9. Informe del documento", "Informe del documento", .F.,, {|oMenuItem|( TTrazaDocumento():Activate( "11", aTmp[ 1 ] + str( aTmp[ 2 ] ) + aTmp[ 3 ] ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&10. Firmar documento", "Firmar documento", .F.,, {|oMenuItem|( if( empty( aTmp[ 131 ] ) .OR.  msgNoYes( "El documento ya esta firmado, ¿Desea voler a firmarlo?" ), aTmp[ 131 ] := signatureToMemo(), ) )},, "gc_sign_document_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

RETURN ( oMenu )



Static Function nEstadoIncidencia( cNumFac )

   local nEstado  := 0
   local aBmp     := ""

   if ( dbfFacCliI )->( dbSeek( cNumFac ) )

      while ( dbfFacCliI )->cSerie + str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac == cNumFac .AND. !( dbfFacCliI )->( Eof() )

         if ( dbfFacCliI )->lListo
            do case
               case nEstado == 0 .OR. nEstado == 3
                    nEstado := 3
               case nEstado == 1
                    nEstado := 2
            end
         else
            do case
               case nEstado == 0
                    nEstado := 1
               case nEstado == 3
                    nEstado := 2
            end
         end

         ( dbfFacCliI )->( dbSkip() )

      end

   end

Return ( nEstado )



Static Function DesgPnt( cCodArt, aTmp, nTarifa, oPreDiv, oCosDiv, nMode )

   local oDlg
   local oPuntos
   local oValorPunto
   local oDtoPnt
   local oIncPnt
   local oImporte
   local nPuntos     := 0
   local nValorPunto := 0
   local nDtoPnt     := 0
   local nIncPnt     := 0



   if empty( cCodArt )
      MsgInfo( "Debe seleccinar un artículo", "Código vacío" )
      return .F.
   end



   nPuntos           := aTmp[ 62 ]
   nValorPunto       := aTmp[ 63 ]
   nDtoPnt           := aTmp[ 64 ]
   nIncPnt           := aTmp[ 65 ]

   oDlg = TDialog():New(,,,, "Desglose de puntos", "DESGPUNTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







   oPuntos := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, nPuntos, nPuntos:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )







   oValorPunto := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, nValorPunto, nValorPunto:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )









   oDtoPnt := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nDtoPnt, nDtoPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )









   oIncPnt := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, nIncPnt, nIncPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )




   oImporte := TSay():ReDefine( 240, {|| nCalculoPuntos( nPuntos, nValorPunto, nDtoPnt, nIncPnt )}, oDlg, cPouDiv,,, .F.,, .F., .F., )





   TButton():ReDefine( 500, {||( EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, D():Articulos( nView ), nDouDiv ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




   TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, D():Articulos( nView ), nDouDiv ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      aTmp[ 62 ]     := nPuntos
      aTmp[ 63 ]     := nValorPunto
      aTmp[ 64 ]     := nDtoPnt
      aTmp[ 65 ]     := nIncPnt
      oCosDiv:cText( oImporte:VarGet() )
      oCosDiv:Refresh()
   end

Return ( .T. )



Static Function FacCliNotas()

   local cObserv  := ""
   local aData    := {}

   aAdd( aData, "Factura " + ( D():FacturasClientes( nView ) )->cSerie + "/" + AllTrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + Alltrim( ( D():FacturasClientes( nView ) )->cSufFac ) + " de " + Rtrim( ( D():FacturasClientes( nView ) )->cNomCli ) )
   aAdd( aData, "11" )
   aAdd( aData, ( D():FacturasClientes( nView ) )->cCodCli )
   aAdd( aData, ( D():FacturasClientes( nView ) )->cNomCli )
   aAdd( aData, ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac )

   if ( D():Clientes( nView ) )->( dbSeek( ( D():FacturasClientes( nView ) )->cCodCli ) )

      if !empty( ( D():Clientes( nView ) )->cPerCto )
         cObserv  += Rtrim( ( D():Clientes( nView ) )->cPerCto ) + Space( 1 )
      end

      if !empty( ( D():Clientes( nView ) )->Telefono )
         cObserv  += "Télefono : " + Rtrim( ( D():Clientes( nView ) )->Telefono ) + Space( 1 )
      end

      if !empty( ( D():Clientes( nView ) )->Movil )
         cObserv  += "Móvil : " + Rtrim( ( D():Clientes( nView ) )->Movil ) + Space( 1 )
      end

      if !empty( ( D():Clientes( nView ) )->Fax )
         cObserv  += "Fax : " + Rtrim( ( D():Clientes( nView ) )->Fax ) + Space( 1 )
      end

   end

   aAdd( aData, cObserv )

   GenerarNotas( aData )

Return ( nil )



STATIC FUNCTION DupSerie( oWndBrw )

   local oDlg
   local oSerIni
   local oSerFin
   local oTxtDup
   local nTxtDup     := 0
   local nRecno      := ( D():FacturasClientes( nView ) )->( Recno() )
   local nOrdAnt     := ( D():FacturasClientes( nView ) )->( OrdSetFocus( 1 ) )
   local oDesde      := TDesdeHasta():Init( ( D():FacturasClientes( nView ) )->cSerie, ( D():FacturasClientes( nView ) )->nNumFac, ( D():FacturasClientes( nView ) )->cSufFac, GetSysDate() )
   local lCancel     := .F.
   local oBtnAceptar
   local oBtnCancel
   local oFecDoc
   local cFecDoc     := GetSysDate()
   local oActual
   local lActual     := .F.




   oDlg = TDialog():New(,,,, "Duplicar series de facturas", "DUPSERDOC",, .F.,,,,, oWndBrw, .F.,,,,,, .F.,, "oDlg", nil, )



   TRadMenu():Redefine( { | u | If( PCount()==0, oDesde:nRadio, oDesde:nRadio:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, oDesde:cSerieInicio, oDesde:cSerieInicio:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieInicio >= "A" .AND. oDesde:cSerieInicio <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, oDesde:cSerieFin, oDesde:cSerieFin:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieFin >= "A" .AND. oDesde:cSerieFin <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, oDesde:nNumeroInicio, oDesde:nNumeroInicio:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, oDesde:nNumeroFin, oDesde:nNumeroFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, oDesde:cSufijoInicio, oDesde:cSufijoInicio:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, oDesde:cSufijoFin, oDesde:cSufijoFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oDesde:dFechaInicio, oDesde:dFechaInicio:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, oDesde:dFechaFin, oDesde:dFechaFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )



   oActual := TCheckBox():ReDefine( 210, { | u | If( PCount()==0, lActual, lActual:= u ) }, oDlg,,,,,,, .F.,, .F. )




   oFecDoc := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cFecDoc, cFecDoc:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   oBtnAceptar := TButton():ReDefine( 1, {||( DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, lActual, cFecDoc ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( lCancel := .T., oDlg:end() )}, oDlg,,, .F.,,,, .T. )





 oTxtDup := TApoloMeter():ReDefine( 160, { | u | If( PCount()==0, nTxtDup, nTxtDup:= u ) }, ( D():FacturasClientes( nView ) )->( OrdKeyCount() ), oDlg, .F.,,, .T.,,,, )

      oDlg:AddFastKey( 116, {|| DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, lActual, cFecDoc ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( lCancel )},,, oDlg:bRClicked,,, )

   ( D():FacturasClientes( nView ) )->( dbGoTo( nRecNo ) )
   ( D():FacturasClientes( nView ) )->( ordSetFocus( nOrdAnt ) )

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



STATIC FUNCTION DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, lCancel, lActual, cFecDoc )

   local nOrd
   local nDuplicados    := 0
   local nProcesed      := 0

   oBtnAceptar:Hide()
   oBtnCancel:bAction   := {|| lCancel := .T. }

   if oDesde:nRadio == 1

      nOrd              := ( D():FacturasClientes( nView ) )->( OrdSetFocus( "nNumFac" ) )

      ( D():FacturasClientes( nView ) )->( dbSeek( oDesde:cNumeroInicio(), .T. ) )

      while !lCancel .AND. ( D():FacturasClientes( nView ) )->( !eof() )






         if ( D():FacturasClientes( nView ) )->cSerie  >= oDesde:cSerieInicio  .AND. ( D():FacturasClientes( nView ) )->cSerie  <= oDesde:cSerieFin     .AND. ( D():FacturasClientes( nView ) )->nNumFac >= oDesde:nNumeroInicio .AND. ( D():FacturasClientes( nView ) )->nNumFac <= oDesde:nNumeroFin    .AND. ( D():FacturasClientes( nView ) )->cSufFac >= oDesde:cSufijoInicio .AND. ( D():FacturasClientes( nView ) )->cSufFac <= oDesde:cSufijoFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( nView ) )->cSufFac

            DupFactura( lActual, cFecDoc )

         end

         ( D():FacturasClientes( nView ) )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( D():FacturasClientes( nView ) )->( OrdSetFocus( nOrd ) )

   else

      nOrd              := ( D():FacturasClientes( nView ) )->( OrdSetFocus( "dFecFac" ) )

      ( D():FacturasClientes( nView ) )->( dbSeek( oDesde:dFechaInicio, .T. ) )

      while !lCancel .AND. ( D():FacturasClientes( nView ) )->( !eof() )


         if ( D():FacturasClientes( nView ) )->dFecFac >= oDesde:dFechaInicio  .AND. ( D():FacturasClientes( nView ) )->dFecFac <= oDesde:dFechaFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( nView ) )->cSufFac

            DupFactura( lActual, cFecDoc )

         end

         ( D():FacturasClientes( nView ) )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( D():FacturasClientes( nView ) )->( OrdSetFocus( nOrd ) )

   end

   lCancel              := .T.

   oBtnAceptar:Show()

   if lCancel
      msgStop( "Total de registros duplicados : " + str( nDuplicados ), "Proceso cancelado" )
   else
      msgInfo( "Total de registros duplicados : " + str( nDuplicados ), "Proceso finalizado" )
   end

RETURN ( oDlg:End() )



STATIC FUNCTION FacRecDup( cDbf, xField1, xField2, xField3, lCab, lPag, lActual, cFecDoc )

   local nRec           := ( cDbf )->( Recno() )
   local aTabla         := {}
   local nOrdAnt

   If( lCab == nil, lCab := .F., ) ;
   If( lPag == nil, lPag := .F., ) ;
   If( lActual == nil, lActual := .F., ) ;

   aTabla               := DBScatter( cDbf )
   aTabla[ 1  ]   := xField1
   aTabla[ 2 ]   := xField2
   aTabla[ 3 ]   := xField3

   if lCab

      if !lActual
         aTabla[ 6  ]  := cFecDoc
      end

      aTabla[ 5     ]  := cCurSesion()
      aTabla[ 9     ]  := Application():CodigoCaja()
      aTabla[ 26     ]  := .F.
      aTabla[ 4       ]  := ""
      aTabla[ 27    ]  := ""
      aTabla[ 28     ]  := Ctod("")
      aTabla[ 30     ]  := .F.
      aTabla[ 39     ]  := Space( 12 )
      aTabla[ 40     ]  := Space( 12 )
      aTabla[ 41     ]  := Space( 12 )
      aTabla[ 78     ]  := Space( 12 )
      aTabla[ 79     ]  := Space( 12 )
      aTabla[ 62     ]  := .T.
      aTabla[ 70     ]  := Space( 10 )
      aTabla[ 77     ]  := .F.
      aTabla[ 82     ]  := Auth():Codigo()
      aTabla[ 83     ]  := Date()
      aTabla[ 84     ]  := Time()
      aTabla[ 86  ]  := .F.
      aTabla[ 87     ]  := Ctod("")
      aTabla[ 88     ]  := Space( 5 )
      aTabla[ 89     ]  := Application():CodigoDelegacion()

      nOrdAnt                 := ( cDbf )->( OrdSetFocus( "NNUMFAC" ) )

   end

   if lPag

      if !lActual
         aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "dPreCob") )  ]      := cFecDoc
         if aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "lCobrado" ) ) ]
            aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "dEntrada" ) ) ]  := cFecDoc
         else
            aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "dEntrada" ) ) ]  := Ctod("")
         end
      end

      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "cCodCaj" ) )  ]  := Application():CodigoCaja()
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "cTurRec" ) )  ]  := cCurSesion()

      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "lConPgo" ) )  ]  := .F.
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "lRecImp" ) )  ]  := .F.
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "lRecDto" ) )  ]  := .F.
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "dFecDto" ) )  ]  := Ctod("")
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "lCloPgo" ) )  ]  := .F.
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "dFecImp" ) )  ]  := Ctod("")
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "cHorImp" ) )  ]  := Space( 5 )
      aTabla[ ( D():FacturasClientesCobros( nView ) )->( FieldPos( "dFecVto" ) )  ]  := cFecDoc

   end

   if dbLock( cDbf, .T. )
      aEval( aTabla, { | uTmp, n | ( cDbf )->( fieldPut( n, uTmp ) ) } )
      ( cDbf )->( dbUnLock() )
   end

   if lCab
      ( cDbf )->( OrdSetFocus( nOrdAnt ) )
   end

   ( cDbf )->( dbGoTo( nRec ) )

RETURN ( .T. )



STATIC FUNCTION DupFactura( lActual, cFecDoc )

   local nNewNumFac  := 0



   nNewNumFac        := nNewDoc( ( D():FacturasClientes( nView ) )->cSerie, D():FacturasClientes( nView ), "nFacCli", 9, D():Contadores( nView ) )



   FacRecDup( D():FacturasClientes( nView ), ( D():FacturasClientes( nView ) )->cSerie, nNewNumFac, ( D():FacturasClientes( nView ) )->cSufFac, .T., .F., lActual, cFecDoc )



   if ( D():FacturasClientesLineas( nView ) )->( dbSeek( ( D():FacturasClientesId( nView ) ) ) )

      while ( D():FacturasClientesId( nView ) ) == D():FacturasClientesLineasId( nView ) .AND. !( D():FacturasClientesLineas( nView ) )->( eof() )

         FacRecDup( D():FacturasClientesLineas( nView ), ( D():FacturasClientes( nView ) )->cSerie, nNewNumFac, ( D():FacturasClientes( nView ) )->cSufFac, .F., .F. )

         ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

      end

   end



   if ( D():FacturasClientesCobros( nView ) )->( dbSeek( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) )


      while ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac == ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac .AND.  !( D():FacturasClientesCobros( nView ) )->( Eof() )

         FacRecDup( D():FacturasClientesCobros( nView ), ( D():FacturasClientes( nView ) )->cSerie, nNewNumFac, ( D():FacturasClientes( nView ) )->cSufFac, .F., .T., lActual, cFecDoc )

         ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

      end

   end



   if ( dbfFacCliD )->( dbSeek( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) )


      while ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac == ( dbfFacCliD )->cSerie + str( ( dbfFacCliD )->nNumFac ) + ( dbfFacCliD )->cSufFac .AND.  !( dbfFacCliD )->( Eof() )

         FacRecDup( dbfFacCliD, ( D():FacturasClientes( nView ) )->cSerie, nNewNumFac, ( D():FacturasClientes( nView ) )->cSufFac, .F., .T. )

         ( dbfFacCliD )->( dbSkip() )

      end

   end

RETURN ( .T. )



STATIC FUNCTION SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt )

   if !empty( oTipFac )

      if oTipFac:nAt == 2
         aGet[ 92 ]:Show()
         aGet[ 93  ]:Show()
         oSayDias:Show()
      else
         aGet[ 92 ]:Hide()
         aGet[ 93  ]:Hide()
         oSayDias:Hide()
      end

      aGet[ 92 ]:Refresh()
      aGet[ 93  ]:Refresh()

      oSayDias:Refresh()

   end

   if RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )

      if !empty( oSayGetRnt )
         oSayGetRnt:Hide()
      end

      if !empty( oGetRnt )
         oGetRnt:Hide()
      end

   end

Return nil



STATIC FUNCTION ValidaMedicion( aTmp, aGet )

   local cNewUndMed

   if !empty( aGet ) .AND. !empty( aGet[ 16 ] )
      cNewUndMed  := aGet[ 16 ]:VarGet
   else
      cNewUndMed  := aTmp[ 16 ]
   end





   if ( empty( cOldUndMed ) .OR. cOldUndMed <> cNewUndMed )

      if oUndMedicion:oDbf:Seek( aTmp[ 16 ] )

         if oUndMedicion:oDbf:nDimension >= 1 .AND. !empty( oUndMedicion:oDbf:cTextoDim1 )
            if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( ( D():Articulos( nView ) )->nLngArt )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
            else
               aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := ( D():Articulos( nView ) )->nLngArt
            end
         else
            if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            else
               aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 2 .AND. !empty( oUndMedicion:oDbf:cTextoDim2 )
            if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( ( D():Articulos( nView ) )->nAltArt )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
            else
               aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := ( D():Articulos( nView ) )->nAltArt
            end
         else
            if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            else
                 aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 3 .AND. !empty( oUndMedicion:oDbf:cTextoDim3 )
            if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( ( D():Articulos( nView ) )->nAncArt )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
            else
               aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := ( D():Articulos( nView ) )->nAncArt
            end
         else
            if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
               aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            else
               aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := 0
            end
         end

      else

         if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
         end

         if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
         end

         if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
         end

      end

      cOldUndMed := cNewUndMed

   end

RETURN .T.



Static Function ChangeTarifa( aTmp, aGet, aTmpFac )

    local nPrePro  := 0

   nPrePro     := nPrePro( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 30 ], aTmp[ 29 ], aTmp[ 31 ], aTmp[ 77 ], aTmpFac[ 61 ], dbfArtDiv, aTmpFac[ 22 ] )

   if nPrePro == 0
      nPrePro  := nRetPreArt( aTmp[ 77 ], aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), dbfDiv, dbfKit, dbfIva, , , oNewImp )
   end

   if !empty( aTmpFac[ 22 ] )
      nPrePro  := RetPrcTar( aTmp[ 4 ], aTmpFac[ 22 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], dbfTarPreL, aTmp[ 77 ] )
   end

   if nPrePro <> 0
      aGet[ 6 ]:cText( nPrePro )
   end

return .T.



static function loadComisionAgente( aTmp, aGet, aTmpFac )

   local nComisionAgenteTarifa

   nComisionAgenteTarifa         := nComisionAgenteTarifa( aTmpFac[ 20 ], aTmp[ 77 ], nView )
   if nComisionAgenteTarifa == 0
      nComisionAgenteTarifa      := aTmpFac[ 24 ]
   end

   if !empty( aGet ) .AND. !empty( aGet[ 18 ] )
      aGet[ 18 ]:cText( nComisionAgenteTarifa )
   end

return .T.



Static Function DataReport( oFr )

   local np





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Facturas", ( D():FacturasClientes( nView ) )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Facturas", cItemsToReport( aItmFacCli() ) )

   oFr:SetWorkArea(     "Lineas de facturas", ( D():FacturasClientesLineas( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de facturas", cItemsToReport( aColFacCli() ) )

   oFr:SetWorkArea(     "Series de lineas de facturas", ( dbfFacCliS )->( Select() ) )
   oFr:SetFieldAliases( "Series de lineas de facturas", cItemsToReport( aSerFacCli() ) )

   oFr:SetWorkArea(     "Entidades de la factura", ( D():FacturasClientesEntidades( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Entidades de la factura", cItemsToReport( aEntidadesFacCli() ) )

   oFr:SetWorkArea(     "Incidencias de facturas", ( dbfFacCliI )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de facturas", cItemsToReport( aIncFacCli() ) )

   oFr:SetWorkArea(     "Documentos de facturas", ( dbfFacCliD )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de facturas", cItemsToReport( aFacCliDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( dbfEmp )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Obras", ( dbfObrasT )->( Select() ) )
   oFr:SetFieldAliases( "Obras",  cItemsToReport( aItmObr() ) )

   oFr:SetWorkArea(     "Almacenes", ( dbfAlm )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Rutas", ( dbfRuta )->( Select() ) )
   oFr:SetFieldAliases( "Rutas", cItemsToReport( aItmRut() ) )

   oFr:SetWorkArea(     "Agentes", ( D():Agentes( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Agentes", cItemsToReport( aItmAge() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Familias", ( dbfFamilia )->( Select() ) )
   oFr:SetFieldAliases( "Familias", cItemsToReport( aItmFam() ) )

   oFr:SetWorkArea(     "Tipo artículo", oTipArt:Select() )
   oFr:SetFieldAliases( "Tipo artículo", cObjectsToReport( oTipArt:oDbf ) )

   oFr:SetWorkArea(     "Recibos", ( D():FacturasClientesCobros( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Recibos", cItemsToReport( aItmRecCli() ) )

   oFr:SetWorkArea(     "Ofertas", ( dbfOferta )->( Select() ) )
   oFr:SetFieldAliases( "Ofertas", cItemsToReport( aItmOfe() ) )

   oFr:SetWorkArea(     "Bancos", ( dbfCliBnc )->( Select() ) )
   oFr:SetFieldAliases( "Bancos", cItemsToReport( aCliBnc() ) )

   oFr:SetWorkArea(     "Unidades de medición",  oUndMedicion:Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( oUndMedicion:oDbf ) )

   oFr:SetWorkArea(     "SAT", ( dbfSatCliT )->( Select() ) )
   oFr:SetFieldAliases( "SAT", cItemsToReport( aItmSatCli() ) )

   oFr:SetWorkArea(     "Impuestos especiales",  oNewImp:Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( oNewImp:oDbf ) )

   oFr:SetWorkArea(     "Transportistas", oTrans:Select() )
   oFr:SetFieldAliases( "Transportistas", cObjectsToReport( oTrans:oDbf ) )







   oFr:setUserDataSet( "Impuestos factura", "porcentajeiva;logrecargo;porcentajere;bruto;neto;impiva;impre;nivmh;ntransporte;npntver", {||np := 1},    {||np := np + 1},    {||np := np - 1},    {||np > Len( aTotIva )}, {|key| hGet( aTotIva[np], key ) } )

   oFr:SetMasterDetail( "Facturas", "Lineas de facturas",                     {|| D():FacturasClientesId( nView ) } )
   oFr:SetMasterDetail( "Facturas", "Incidencias de facturas",                {|| D():FacturasClientesId( nView ) } )
   oFr:SetMasterDetail( "Facturas", "Documentos de facturas",                 {|| D():FacturasClientesId( nView ) } )
   oFr:SetMasterDetail( "Facturas", "Clientes",                               {|| ( D():FacturasClientes( nView ) )->cCodCli } )
   oFr:SetMasterDetail( "Facturas", "Obras",                                  {|| ( D():FacturasClientes( nView ) )->cCodCli + ( D():FacturasClientes( nView ) )->cCodObr } )
   oFr:SetMasterDetail( "Facturas", "Almacenes",                              {|| ( D():FacturasClientes( nView ) )->cCodAlm } )
   oFr:SetMasterDetail( "Facturas", "Rutas",                                  {|| ( D():FacturasClientes( nView ) )->cCodRut } )
   oFr:SetMasterDetail( "Facturas", "Agentes",                                {|| ( D():FacturasClientes( nView ) )->cCodAge } )
   oFr:SetMasterDetail( "Facturas", "Formas de pago",                         {|| ( D():FacturasClientes( nView ) )->cCodPago } )
   oFr:SetMasterDetail( "Facturas", "Empresa",                                {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Facturas", "Recibos",                                {|| D():FacturasClientesId( nView ) } )
   oFr:SetMasterDetail( "Facturas", "Bancos",                                 {|| ( D():FacturasClientes( nView ) )->cCodCli } )
   oFr:SetMasterDetail( "Facturas", "País",                                   {|| retFld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodPai" ) } )
   oFr:SetMasterDetail( "Facturas", "Transportistas",                            {|| ( D():FacturasClientes( nView ) )->cCodTrn } )

   oFr:SetMasterDetail( "Lineas de facturas", "Artículos",                    {|| SynchronizeDetails() } )
   oFr:SetMasterDetail( "Lineas de facturas", "Familia",                      {|| ( D():FacturasClientesLineas( nView ) )->cCodFam } )
   oFr:SetMasterDetail( "Lineas de facturas", "Tipo artículo",                {|| ( D():FacturasClientesLineas( nView ) )->cCodTip } )
   oFr:SetMasterDetail( "Lineas de facturas", "Ofertas",                      {|| ( D():FacturasClientesLineas( nView ) )->cRef } )
   oFr:SetMasterDetail( "Lineas de facturas", "Unidades de medición",         {|| ( D():FacturasClientesLineas( nView ) )->cUnidad } )
   oFr:SetMasterDetail( "Lineas de facturas", "SAT",                          {|| ( D():FacturasClientesLineas( nView ) )->cNumSat } )
   oFr:SetMasterDetail( "Lineas de facturas", "Impuestos especiales",         {|| ( D():FacturasClientesLineas( nView ) )->cCodImp } )
   oFr:SetMasterDetail( "Lineas de facturas", "Series de lineas de facturas", {|| D():FacturasClientesLineasId( nView ) + str( ( D():FacturasClientesLineas( nView ) )->nNumLin ) } )

   oFr:SetResyncPair(   "Facturas", "Lineas de facturas" )
   oFr:SetResyncPair(   "Facturas", "Incidencias de facturas" )
   oFr:SetResyncPair(   "Facturas", "Documentos de facturas" )
   oFr:SetResyncPair(   "Facturas", "Empresa" )
   oFr:SetResyncPair(   "Facturas", "Clientes" )
   oFr:SetResyncPair(   "Facturas", "Obras" )
   oFr:SetResyncPair(   "Facturas", "Almacenes" )
   oFr:SetResyncPair(   "Facturas", "Rutas" )
   oFr:SetResyncPair(   "Facturas", "Agentes" )
   oFr:SetResyncPair(   "Facturas", "Formas de pago" )
   oFr:SetResyncPair(   "Facturas", "Recibos" )
   oFr:SetResyncPair(   "Facturas", "Bancos" )
   oFr:SetResyncPair(   "Facturas", "País" )
   oFr:SetResyncPair(   "Facturas", "Transportistas" )

   oFr:SetResyncPair(   "Lineas de facturas", "Artículos" )
   oFr:SetResyncPair(   "Lineas de facturas", "Familia" )
   oFr:SetResyncPair(   "Lineas de facturas", "Tipo artículo" )
   oFr:SetResyncPair(   "Lineas de facturas", "Ofertas" )
   oFr:SetResyncPair(   "Lineas de facturas", "Unidades de medición" )
   oFr:SetResyncPair(   "Lineas de facturas", "SAT" )
   oFr:SetResyncPair(   "Lineas de facturas", "Impuestos especiales" )
   oFr:SetResyncPair(   "Lineas de facturas", "Series de lineas de facturas" )

Return nil



Static Function SynchronizeDetails()

Return ( ( D():FacturasClientesLineas( nView ) )->cRef )



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Facturas" )
   oFr:DeleteCategory(  "Lineas de facturas" )





   oFr:AddVariable(     "Facturas",             "Identificador de factura",            "CallHbFunc('FacturasClientesId')" )
   oFr:AddVariable(     "Facturas",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Facturas",             "Total factura",                       "GetHbVar('nTotFac')" )
   oFr:AddVariable(     "Facturas",             "Total factura texto",                 "CallHbFunc('cTotFacCli')" )
   oFr:AddVariable(     "Facturas",             "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Facturas",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Facturas",             "Total descuentos",                    "GetHbVar('nTotalDto')" )
   oFr:AddVariable(     "Facturas",             "Total descuento lineal",              "GetHbVar('nTotalDtoLineal')" )
   oFr:AddVariable(     "Facturas",             "Total neto",                          "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Facturas",             "Total primer descuento definible",    "GetHbVar('nTotUno')" )
   oFr:AddVariable(     "Facturas",             "Total segundo descuento definible",   "GetHbVar('nTotDos')" )
   oFr:AddVariable(     "Facturas",             "Total " + cImp(),                     "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Facturas",             "Total RE",                            "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Facturas",             "Total página",                        "GetHbVar('nTotPag')" )
   oFr:AddVariable(     "Facturas",             "Total retención",                     "GetHbVar('nTotRet')" )
   oFr:AddVariable(     "Facturas",             "Total peso",                          "GetHbVar('nTotPes')" )
   oFr:AddVariable(     "Facturas",             "Total costo",                         "GetHbVar('nTotCos')" )
   oFr:AddVariable(     "Facturas",             "Total cobrado",                       "GetHbVar('nTotCob')" )
   oFr:AddVariable(     "Facturas",             "Total artículos",                     "GetHbVar('nTotArt')" )
   oFr:AddVariable(     "Facturas",             "Total cajas",                         "GetHbVar('nTotCaj')" )
   oFr:AddVariable(     "Facturas",             "Total punto verde",                   "GetHbVar('nTotPnt')" )
   oFr:AddVariable(     "Facturas",             "Cuenta por defecto del cliente",      "GetHbVar('cCtaCli')" )

   oFr:AddVariable(     "Facturas",             "Total unidades primer tipo de impuestos especiales",            "GetHbArrayVar('aIvmUno',1 )" )
   oFr:AddVariable(     "Facturas",             "Total unidades segundo tipo de impuestos especiales",           "GetHbArrayVar('aIvmDos',1 )" )
   oFr:AddVariable(     "Facturas",             "Total unidades tercer tipo de impuestos especiales",            "GetHbArrayVar('aIvmTre',1 )" )
   oFr:AddVariable(     "Facturas",             "Importe del primer tipo de impuestos especiales",               "GetHbArrayVar('aIvmUno',2 )" )
   oFr:AddVariable(     "Facturas",             "Importe del segundo tipo de impuestos especiales",              "GetHbArrayVar('aIvmDos',2 )" )
   oFr:AddVariable(     "Facturas",             "Importe del tercer tipo de impuestos especiales",               "GetHbArrayVar('aIvmTre',2 )" )
   oFr:AddVariable(     "Facturas",             "Total importe primer tipo de impuestos especiales",             "GetHbArrayVar('aIvmUno',3 )" )
   oFr:AddVariable(     "Facturas",             "Total importe segundo tipo de impuestos especiales",            "GetHbArrayVar('aIvmDos',3 )" )
   oFr:AddVariable(     "Facturas",             "Total importe tercer tipo de impuestos especiales",             "GetHbArrayVar('aIvmTre',3 )" )

   oFr:AddVariable(     "Facturas",             "Cuenta bancaria cliente",                         "CallHbFunc('cCtaFacCli')" )

   oFr:AddVariable(     "Facturas",             "Saldo anterior envase 4",                         "CallHbFunc('nSaldoAnterior4')" )
   oFr:AddVariable(     "Facturas",             "Saldo anterior envase 8",                         "CallHbFunc('nSaldoAnterior8')" )
   oFr:AddVariable(     "Facturas",             "Saldo anterior envase 16",                        "CallHbFunc('nSaldoAnterior16')" )
   oFr:AddVariable(     "Facturas",             "Saldo documento envase 4",                        "CallHbFunc('nSaldoDocumento4')" )
   oFr:AddVariable(     "Facturas",             "Saldo documento envase 8",                        "CallHbFunc('nSaldoDocumento8')" )
   oFr:AddVariable(     "Facturas",             "Saldo documento envase 16",                       "CallHbFunc('nSaldoDocumento16')" )
   oFr:AddVariable(     "Facturas",             "Total saldo envase 4",                            "CallHbFunc('nTotalSaldo4')" )
   oFr:AddVariable(     "Facturas",             "Total saldo envase 8",                            "CallHbFunc('nTotalSaldo8')" )
   oFr:AddVariable(     "Facturas",             "Total saldo envase 16",                           "CallHbFunc('nTotalSaldo16')" )

   oFr:AddVariable(     "Lineas de facturas",   "Detalle del artículo",                            "CallHbFunc('cDesFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Detalle del artículo otro lenguaje",              "CallHbFunc('cDesFacCliLeng')" )
   oFr:AddVariable(     "Lineas de facturas",   "Total unidades artículo",                         "CallHbFunc('nTotNFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Precio unitario del artículo",                    "CallHbFunc('nTotUFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Precio unitario con descuentos",                  "CallHbFunc('nTotPFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Punto verde del artículo",                        "CallHbFunc('nPntUFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Total línea de factura",                          "CallHbFunc('nTotLFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Total peso por línea",                            "CallHbFunc('nPesLFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Total final línea del factura",                   "CallHbFunc('nTotFFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Importe descuento línea del factura",             "CallHbFunc('nDtoLFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Importe impuestos especiales línea del factura",  "CallHbFunc('nTotIFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Total descuento línea del factura",               "CallHbFunc('nTotDtoLFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Fecha en juliano",                                "CallHbFunc('dJulianoFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Fecha en juliano 4 meses",                        "CallHbFunc('dJuliano4FacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Precio unitario sin " + cImp(),                   "CallHbFunc('nNoIncUFacCli')"  )
   oFr:AddVariable(     "Lineas de facturas",   "Total linea sin " + cImp(),                       "CallHbFunc('nNoIncLFacCli')"  )
   oFr:AddVariable(     "Lineas de facturas",   "Dirección del SAT",                               "CallHbFunc('cFacturaClienteDireccionSAT')" )
   oFr:AddVariable(     "Lineas de facturas",   "Stock actual en almacén",                         "CallHbFunc('nStockLineaFasCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Cambia orden",                                    "CallHbFunc('FacturaClienteLineaOrdSetFocus')" )
   oFr:AddVariable(     "Lineas de facturas",   "Total línea "+ cImp() + " incluido",              "CallHbFunc('nIncLFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",   "Precio unitario "+ cImp() + " incluido",          "CallHbFunc('nIncUFacCli')" )

Return nil



Function DesignReportFacCli( oFr, dbfDoc )

   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag





      DataReport( oFr )





      if !empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "CallHbFunc('nTotFacCli');"                                 + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "MasterData",  "MainPage", 6 )
         oFr:SetProperty(     "MasterData",  "Top", 200 )
         oFr:SetProperty(     "MasterData",  "Height", 0 )
         oFr:SetProperty(     "MasterData",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "MasterData",  "DataSet", "Facturas" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de facturas" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )

      oFr:SetTabTreeExpanded( 16, .F. )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lOpen
         CloseFiles()
      end

   else

      Return .F.

   end

Return .T.



Function mailReportFacCli( cCodigoDocumento )

Return ( printReportFacCli( 6, 1, ImpresoraDefectoUsuario(), cCodigoDocumento ) )



Function printReportFacCli( nDevice, nCopies, cPrinter, cCodigoDocumento )

   local oFr
   local nOrdFacL
   local cFilePdf

   If( nDevice == nil, nDevice := 2, ) ;
   If( nCopies == nil, nCopies := 1, ) ;
   If( cCodigoDocumento == nil, cCodigoDocumento := cFormatoFacturasClientes(), ) ;

   if empty( cCodigoDocumento )
      msgStop( "El Código del documento esta vacio" )
      Return ( nil )
   end

   if Empty( cPrinter )
      cPrinter                := ImpresoraDefectoUsuario()
   end

   SysRefresh()

   nOrdFacL                   := ( D():FacturasClientesLineas( nView ) )->( ordSetFocus( "nPosPrint" ) )
   cFilePdf                   := cPatOut() + "FacturasCliente" + StrTran( D():FacturasClientesId( nView ), " ", "" ) + ".Pdf"

   oFr                        := frReportManager():New()
   oFr:LoadLangRes( "Spanish.Xml" )
   oFr:SetIcon( 1 )
   oFr:SetTitle( "Diseñador de documentos" )



   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( D():Documentos( nView ) )->( Select() ), "mReport" ) } )



   dataReport( oFr )



   if lMemoDocumento( cCodigoDocumento, D():Documentos( nView ) )

      oFr:LoadFromBlob( ( D():Documentos( nView ) )->( Select() ), "mReport")



      variableReport( oFr )



      oFr:PrepareReport()



      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
            oFr:DoExport(     "PDFExport" )

         case nDevice == 6

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .F. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

   ( D():FacturasClientesLineas( nView ) )->( ordSetFocus( nOrdFacL ) )

Return ( cFilePdf )



Static Function YearComboBoxChange()

   if ( oWndBrw:oWndBar:cYearComboBox() <> "[Todos]" )
      oWndBrw:oWndBar:setYearComboBoxExpression( "year( field->dFecFac ) == " + oWndBrw:oWndBar:cYearComboBox() )
   else
      oWndBrw:oWndBar:setYearComboBoxExpression( "" )
   end

   oWndBrw:chgFilter()

Return .T.







STATIC FUNCTION BeginTrans( aTmp, nMode )

   local nOrd
   local cFac
   local oError
   local oBlock
   local lErrors          := .F.
   local cDbfLin          := "FCliL"
   local cDbfInc          := "FCliI"
   local cDbfDoc          := "FCliD"
   local cDbfAnt          := "FCliA"
   local cDbfPgo          := "FCliP"
   local cDbfSer          := "FCliS"
   local cDbfEnt          := "FCliE"
   local cDbfEst          := "FCliC"
   local lStkMinimo     := .T.

   CursorWait()

   oBlock                 := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   cFac                   := aTmp[ 1 ] + str( aTmp[ 2 ] ) + aTmp[ 3 ]
   aNumAlb                := {}

   do case
      case nMode == 1
         nTotalOld   := 0

      case nMode == 4
         nTotalOld   := 0

      case nMode == 2
         nTotalOld   := nTotFac

   end





   cTmpLin        := cGetNewFileName( cPatTmp() + cDbfLin )
   cTmpInc        := cGetNewFileName( cPatTmp() + cDbfInc )
   cTmpDoc        := cGetNewFileName( cPatTmp() + cDbfDoc )
   cTmpPgo        := cGetNewFileName( cPatTmp() + cDbfPgo )
   cTmpSer        := cGetNewFileName( cPatTmp() + cDbfSer )
   cTmpEnt        := cGetNewFileName( cPatTmp() + cDbfEnt )
   cTmpEst        := cGetNewFileName( cPatTmp() + cDbfEst )





   dbCreate( cTmpLin, aSqlStruct( aColFacCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpLin, cCheckArea( cDbfLin, @dbfTmpLin ), .F. )

   if !NetErr()

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "nNumLin", "str( nNumLin, 4 )", {|| str( Field->nNumLin ) } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "cRef", "cRef", {|| Field->cRef } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "cDetalle", "cDetalle", {|| Field->cDetalle } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "nPosPrint", "Str( nPosPrint, 4 )", {|| Str( Field->nPosPrint ) } ) )

      oLinDetCamposExtra:initArrayValue()

      if ( D():FacturasClientesLineas( nView ) )->( dbSeek( cFac ) )

         while ( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac ) == cFac .AND. !( D():FacturasClientesLineas( nView ) )->( eof() )

            if nMode == 4
                appendRegisterByHash( D():FacturasClientesLineas( nView ), dbfTmpLin, { "dFecFac" => aTmp[ 6 ] } )

                lStkMinimo  := lCompruebaStock( dbfTmpLin, oStock, nTotNFacCli( dbfTmpLin ), , .F. )

            else
                dbPass( D():FacturasClientesLineas( nView ), dbfTmpLin, .T. )
            end

            oLinDetCamposExtra:SetTemporalLines( ( dbfTmpLin )->cSerie + str( ( dbfTmpLin )->nNumFac ) + ( dbfTmpLin )->cSufFac + str( ( dbfTmpLin )->nNumLin ) + str( ( dbfTmpLin )->nNumKit ), ( dbfTmpLin )->( OrdKeyNo() ), nMode )

            ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

         end

      end

      ( dbfTmpLin )->( dbGoTop() )

      oStock:SetTmpFacCliL( dbfTmpLin )

   else

      lErrors     := .T.

   end





   dbCreate( cTmpInc, aSqlStruct( aIncFacCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpInc, cCheckArea( cDbfInc, @dbfTmpInc ), .F. )
   if !NetErr()
      ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpInc )->( ordCreate( cTmpInc, "Recno", "Recno()", {|| Recno() } ) )

      if ( nMode <> 4 ) .AND. ( dbfFacCliI )->( dbSeek( cFac ) )
         while ( ( dbfFacCliI )->cSerie + str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac == cFac ) .AND. ( dbfFacCliI )->( !eof() )
            dbPass( dbfFacCliI, dbfTmpInc, .T. )
            ( dbfFacCliI )->( dbSkip() )
         end
      end

      ( dbfTmpInc )->( dbGoTop() )
   else
      lErrors     := .T.
   end





   dbCreate( cTmpDoc, aSqlStruct( aFacCliDoc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpDoc, cCheckArea( cDbfDoc, @dbfTmpDoc ), .F. )
   if !NetErr()
      ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpDoc )->( ordCreate( cTmpDoc, "Recno", "Recno()", {|| Recno() } ) )

      if ( nMode <> 4 ) .AND. ( dbfFacCliD )->( dbSeek( cFac ) )
         while ( ( dbfFacCliD )->cSerFac + str( ( dbfFacCliD )->nNumFac ) + ( dbfFacCliD )->cSufFac == cFac ) .AND. ( dbfFacCliD )->( !eof() )
            dbPass( dbfFacCliD, dbfTmpDoc, .T. )
            ( dbfFacCliD )->( dbSkip() )
         end
      end

      ( dbfTmpDoc )->( dbGoTop() )
   else
      lErrors     := .T.
   end





   dbCreate( cTmpPgo, aSqlStruct( aItmRecCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpPgo, cCheckArea( cDbfPgo, @dbfTmpPgo ), .F. )

   if !NetErr()

      ( dbfTmpPgo )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTmpPgo )->( ordCreate( cTmpPgo , "cRecDev", "cRecDev", {|| Field->cRecDev } ) )

      ( dbfTmpPgo )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTmpPgo )->( ordCreate( cTmpPgo, "nNumFac", "cSerie + str( nNumFac ) + cSufFac + str( nNumRec ) + cTipRec", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumRec ) + Field->cTipRec } ) )

      ( dbfTmpPgo )->( ordCondSet( "!Deleted() .and. empty( cTipRec )", {|| !Deleted() .AND.  empty( Field->cTipRec ) } ) )
      ( dbfTmpPgo )->( ordCreate( cTmpPgo, "fNumFac", "cSerie + str( nNumFac ) + cSufFac + str( nNumRec )", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumRec ) + Field->cTipRec } ) )

      ( dbfTmpPgo )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTmpPgo )->( ordCreate( cTmpPgo, "cNumMtr", "Field->cNumMtr", {|| Field->cNumMtr } ) )

      nOrd        := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "fNumFac" ) )

      if ( nMode <> 4 ) .AND. ( D():FacturasClientesCobros( nView ) )->( dbSeek( cFac ) )
         while ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac == cFac .AND. ( D():FacturasClientesCobros( nView ) )->( !eof() )
            if empty( ( D():FacturasClientesCobros( nView ) )->cTipRec )
               dbPass( D():FacturasClientesCobros( nView ), dbfTmpPgo, .T. )
            end
            ( D():FacturasClientesCobros( nView ) )->( dbSkip() )
         end
      end

      ( dbfTmpPgo  )->( dbGoTop() )
      ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( nOrd ) )

   else

      lErrors     := .T.

   end





   dbCreate( cTmpSer, aSqlStruct( aSerFacCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpSer, cCheckArea( cDbfSer, @dbfTmpSer ), .F. )

   if !( dbfTmpSer )->( NetErr() )

      ( dbfTmpSer )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpSer )->( OrdCreate( cTmpSer, "nNumLin", "str( nNumLin, 4 ) + cRef", {|| str( Field->nNumLin, 4 ) + Field->cRef } ) )

      if ( nMode <> 4 ) .AND. ( dbfFacCliS )->( dbSeek( cFac ) )
         while ( ( dbfFacCliS )->cSerFac + str( ( dbfFacCliS )->nNumFac ) + ( dbfFacCliS )->cSufFac == cFac ) .AND. !( dbfFacCliS )->( eof() )
            dbPass( dbfFacCliS, dbfTmpSer, .T. )
            ( dbfFacCliS )->( dbSkip() )
         end
      end

      ( dbfTmpSer )->( dbGoTop() )

      oStock:SetTmpFacCliS( dbfTmpSer )

   else

      lErrors     := .T.

   end





   dbCreate( cTmpEnt, aSqlStruct( aEntidadesFacCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpEnt, cCheckArea( cDbfSer, @dbfTmpEntidades ), .F. )

   if !( dbfTmpEntidades )->( NetErr() )

      ( dbfTmpEntidades )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpEntidades )->( OrdCreate( cTmpEnt, "nRecno", "str( recno() )", {|| str( recno() ) } ) )

      ( dbfTmpEntidades )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpEntidades )->( OrdCreate( cTmpEnt, "cRolEnt", "cCodEnt + cRol", {|| Field->cCodEnt + Field->cRol } ) )

      if ( nMode <> 4 ) .AND. D():gotoIdFacturasClientesEntidades( cFac, nView )

         while ( D():FacturasClientesEntidadesId( nView ) == cFac .AND. !D():eofFacturasClientesEntidades( nView ) )

            dbPass( D():FacturasClientesEntidades( nView ), dbfTmpEntidades, .T. )

            ( D():FacturasClientesEntidades( nView ) )->( dbSkip() )

         end

      end

      ( dbfTmpEntidades )->( dbGoTop() )

   else

      lErrors     := .T.

   end



   dbCreate( cTmpEst, aSqlStruct( aFacCliEst() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpEst, cCheckArea( cDbfEst, @dbfTmpEst ), .F. )

   if !( dbfTmpEst )->( NetErr() )

      ( dbfTmpEst )->( ordCreate( cTmpEst, "nNumFac", "cSerFac + str( nNumFac ) + cSufFac + dtos( dFecSit )  + tFecSit", {|| Field->cSerFac + str( Field->nNumFac ) + Field->cSufFac + dtos( Field->dFecSit )  + Field->tFecSit } ) )
      ( dbfTmpEst )->( ordListAdd( cTmpEst ) )

      if ( nMode <> 4 ) .AND. ( D():FacturasClientesSituaciones( nView ) )->( dbSeek( cFac ) )

         while ( ( D():FacturasClientesSituaciones( nView ) )->cSerFac + Str( ( D():FacturasClientesSituaciones( nView ) )->nNumFac ) + ( D():FacturasClientesSituaciones( nView ) )->cSufFac == cFac ) .AND. ( D():FacturasClientesSituaciones( nView ) )->( !eof() )

            dbPass( D():FacturasClientesSituaciones( nView ), dbfTmpEst, .T. )

            ( D():FacturasClientesSituaciones( nView ) )->( dbSkip() )

         end

      end

      ( dbfTmpEst )->( dbGoTop() )

   else

      lErrors     := .T.

   end





   oDetCamposExtra:SetTemporal( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "", nMode )

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

   CursorWE()






Return ( lErrors )







STATIC FUNCTION loaCli( aGet, aTmp, nMode, oGetEstablecimiento, lShowInc )

   local lValid      := .T.
   local cNewCodCli  := aGet[ 7 ]:varGet()
   local lChgCodCli  := ( empty( cOldCodCli ) .OR. cOldCodCli <> cNewCodCli )
   local hash

   If( lShowInc == nil, lShowInc := .T., ) ;

   if empty( cNewCodCli )
      Return .T.
   elseif At( ".", cNewCodCli ) <> 0
      cNewCodCli     := PntReplace( aGet[ 7 ], "0", RetNumCodCliEmp() )
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodCliEmp() )
   end

   if ( D():Clientes( nView ) )->( dbSeek( cNewCodCli ) )

      if !( isAviableClient( nView, nMode ) )
         return .F.
      end

      aGet[ 7 ]:cText( ( D():Clientes( nView ) )->Cod )

      if oTlfCli <> nil
         oTlfCli:SetText( ( D():Clientes( nView ) )->Telefono )
      end

      if ( D():Clientes( nView ) )->nColor <> 0
         aGet[ 10 ]:SetColor( , ( D():Clientes( nView ) )->nColor )
      end

      if !empty( aGet[ 10 ] )
         if empty( aGet[ 10 ]:varGet() ) .OR. lChgCodCli
            aGet[ 10 ]:cText( ( D():Clientes( nView ) )->Titulo )
         end
      else
         aTmp[ 10 ]  := ( D():Clientes( nView ) )->Titulo
      end

      if !empty( aGet[ 11 ] )
         if empty( aGet[ 11 ]:varGet() ) .OR. lChgCodCli
            aGet[ 11 ]:cText( ( D():Clientes( nView ) )->Domicilio )
         end
      else
         aTmp[ 11 ]  := ( D():Clientes( nView ) )->Domicilio
      end

      if !empty( aGet[ 103 ] )
         if empty( aGet[ 103 ]:varGet() ) .OR. lChgCodCli
            aGet[ 103 ]:cText( ( D():Clientes( nView ) )->Telefono )
         end
      else
         aTmp[ 103 ]  := ( D():Clientes( nView ) )->Telefono
      end

      if !empty( aGet[12] )
         if empty( aGet[12]:varGet() ) .OR. lChgCodCli
            aGet[12]:cText( ( D():Clientes( nView ) )->Poblacion )
         end
      else
         aTmp[ 12 ]  := ( D():Clientes( nView ) )->Poblacion
      end

      if !empty( aGet[13] )
         if empty( aGet[ 13 ]:varGet() ) .OR. lChgCodCli
            aGet[ 13 ]:cText( ( D():Clientes( nView ) )->Provincia )
         end
      else
         aTmp[ 13 ]  := ( D():Clientes( nView ) )->Provincia
      end

      if !empty( aGet[15] )
         if empty( aGet[ 15 ]:varGet() ) .OR. lChgCodCli
            aGet[ 15 ]:cText( ( D():Clientes( nView ) )->CodPostal )
         end
      else
         aTmp[ 15 ]  := ( D():Clientes( nView ) )->CodPostal
      end

      if !empty( aGet[16] )
         if empty( aGet[ 16 ]:varGet() ) .OR. lChgCodCli
            aGet[ 16 ]:cText( ( D():Clientes( nView ) )->Nif )
         end
      else
         aTmp[ 16 ]  := ( D():Clientes( nView ) )->Nif
      end

      if empty( aTmp[ 85 ] ) .OR. lChgCodCli
         aTmp[ 85 ]  := ( D():Clientes( nView ) )->cCodGrp
      end

      if ( lChgCodCli )
         aTmp[ 17 ]  := ( D():Clientes( nView ) )->lModDat
      end

      if ( lChgCodCli )
         aTmp[ 122 ]  := ( D():Clientes( nView ) )->lPntVer
      end

      if nMode == 1

         aTmp[ 68 ]  := ( D():Clientes( nView ) )->nRegIva

         lChangeRegIva( aTmp )



         if empty( aTmp[ 1 ] )

            if !empty( ( D():Clientes( nView ) )->Serie )
               if !empty( aGet[ 1 ] )
                  aGet[ 1 ]:cText( ( D():Clientes( nView ) )->Serie )
               else
                  aTmp[ 1 ]   := ( D():Clientes( nView ) )->Serie
               end
            end

         else


            if !empty( ( D():Clientes( nView ) )->Serie )               .AND. aTmp[ 1 ] <> ( D():Clientes( nView ) )->Serie

               if !empty( aGet[ 1 ] )
                  aGet[ 1 ]:cText( ( D():Clientes( nView ) )->Serie )
               else
                  aTmp[ 1 ]   := ( D():Clientes( nView ) )->Serie
               end

            end

         end










         if !empty( aGet[ 22 ] )
            if ( empty( aGet[ 22 ]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Clientes( nView ) )->cCodTar )
               aGet[ 22 ]:cText( ( D():Clientes( nView ) )->cCodTar )
               aGet[ 22 ]:lValid()
            end
         else
            aTmp[ 22 ]  := ( D():Clientes( nView ) )->cCodTar
         end

         if !empty( aGet[ 34 ] ) .AND. ( empty( aGet[ 34 ]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Clientes( nView ) )->CodPago )

            aGet[ 34 ]:cText( ( D():Clientes( nView ) )->CodPago )
            aGet[ 34 ]:lValid()



            if lBancoDefecto( ( D():Clientes( nView ) )->Cod, dbfCliBnc )

               if !empty( aGet[ 113 ] ) .OR. lChgCodCli
                  aGet[ 113 ]:cText( ( dbfCliBnc )->cCodBnc )
                  aGet[ 113 ]:lValid()
               else
                  aTmp[ 113 ]   := ( dbfCliBnc )->cCodBnc
               end

               if !empty( aGet[ 114 ] ) .OR. lChgCodCli
                  aGet[ 114 ]:cText( ( dbfCliBnc )->cPaisIBAN )
                  aGet[ 114 ]:lValid()
               else
                  aTmp[ 114 ]   := ( dbfCliBnc )->cPaisIBAN
               end

               if !empty( aGet[ 115 ] ) .OR. lChgCodCli
                  aGet[ 115 ]:cText( ( dbfCliBnc )->cCtrlIBAN )
                  aGet[ 115 ]:lValid()
               else
                  aTmp[ 115 ]   := ( dbfCliBnc )->cCtrlIBAN
               end

               if !empty( aGet[ 116 ] ) .OR. lChgCodCli
                  aGet[ 116 ]:cText( ( dbfCliBnc )->cEntBnc )
                  aGet[ 116 ]:lValid()
               else
                  aTmp[ 116 ]  := ( dbfCliBnc )->cEntBnc
               end

               if !empty( aGet[ 117 ] ) .OR. lChgCodCli
                  aGet[ 117 ]:cText( ( dbfCliBnc )->cSucBnc )
                  aGet[ 117 ]:lValid()
               else
                  aTmp[ 117 ]  := ( dbfCliBnc )->cSucBnc
               end

               if !empty( aGet[ 118 ] ) .OR. lChgCodCli
                  aGet[ 118 ]:cText( ( dbfCliBnc )->cDigBnc )
                  aGet[ 118 ]:lValid()
               else
                  aTmp[ 118 ]  := ( dbfCliBnc )->cDigBnc
               end

               if !empty( aGet[ 119 ] ) .OR. lChgCodCli
                  aGet[ 119 ]:cText( ( dbfCliBnc )->cCtaBnc )
                  aGet[ 119 ]:lValid()
               else
                  aTmp[ 119 ]  := ( dbfCliBnc )->cCtaBnc
               end

            end

         end

         if aGet[ 20 ] <> nil
            if ( empty( aGet[ 20 ]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Clientes( nView ) )->cAgente )
               aGet[ 20 ]:cText( ( D():Clientes( nView ) )->cAgente )
               aGet[ 20 ]:lValid()
            end
         else
            aTmp[ 20 ]  := ( D():Clientes( nView ) )->cAgente
         end

         if !empty( aGet[ 21 ] )
            if ( empty( aGet[ 21 ]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Clientes( nView ) )->cCodRut )
               aGet[ 21 ]:cText( ( D():Clientes( nView ))->cCodRut )
               aGet[ 21 ]:lValid()
            end
         else
            aTmp[ 21 ]  := ( D():Clientes( nView ) )->cAgente
         end

         if !empty( oGetTarifa )
            if ( empty( oGetTarifa:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Clientes( nView ) )->nTarifa )
               oGetTarifa:setTarifa( ( D():Clientes( nView ) )->nTarifa )
            end
         else
            aTmp[ 19 ]  := ( D():Clientes( nView ) )->nTarifa
         end

         if ( empty( aTmp[ 125 ] ) .OR. lChgCodCli )
            aTmp[ 125 ] := ( D():Clientes( nView ) )->nDtoArt
         end

         if !empty( aGet[ 75 ] )
            if !empty( aGet[ 75 ] ) .AND. ( empty( aGet[ 75 ]:varGet() ) .OR. lChgCodCli ) .AND. !empty( ( D():Clientes( nView ) )->cCodTrn )
               aGet[ 75 ]:cText( ( D():Clientes( nView ) )->cCodTrn )
               aGet[ 75 ]:lValid()
            end
         else
            aTmp[ 75 ]  := ( D():Clientes( nView ) )->cCodTrn
         end

         if lChgCodCli

            if !empty( aGet[ 59 ] )
               aGet[ 59 ]:Click( ( D():Clientes( nView ) )->lReq )
            else
               aTmp[ 59 ]    := ( D():Clientes( nView ) )->lReq
            end

            if !empty( aGet[ 123 ] )
               aGet[ 123 ]:Click( lRECCEmpresa() )
            end

            if !empty( aGet[ 33 ] )
                  aGet[ 33 ]:cText( ( D():Clientes( nView ) )->mComent )
            else
               aTmp[ 33 ]  := ( D():Clientes( nView ) )->mComent
            end

            if !empty( oRiesgoCliente ) .AND. lChgCodCli
               oStock:SetRiesgo( cNewCodCli, oRiesgoCliente, ( D():Clientes( nView ) )->Riesgo )
            end



            if !empty( aGet[ 80 ] )
               aGet[ 80  ]:Select( if( ( D():Clientes( nView ) )->nTipRet <> 0, ( D():Clientes( nView ) )->nTipRet, 1 ) )
            else
               aTmp[ 80  ] := if( ( D():Clientes( nView ) )->nTipRet <> 0, ( D():Clientes( nView ) )->nTipRet, 1 )
            end

            if !empty( aGet[ 81 ] )
               aGet[ 81  ]:cText( ( D():Clientes( nView ) )->nPctRet )
            else
               aTmp[ 81  ] := ( D():Clientes( nView ) )->nPctRet
            end



            if !uFieldempresa( "lDtoCliLin" )

                if !empty( aGet[ 44 ] )
                   aGet[ 44 ]:cText( ( D():Clientes( nView ) )->cDtoEsp )
                else
                   aTmp[ 44 ]  := ( D():Clientes( nView ) )->cDtoEsp
                end

                if !empty( aGet[ 45 ] )
                   aGet[ 45 ]:cText( ( D():Clientes( nView ) )->nDtoEsp )
                else
                   aTmp[ 45 ]  := ( D():Clientes( nView ) )->nDtoEsp
                end

            end

            if !empty( aGet[ 46    ] )
               aGet[ 46    ]:cText( ( D():Clientes( nView ) )->cDpp )
            else
               aTmp[ 46    ]  := ( D():Clientes( nView ) )->cDpp
            end

            if !empty( aGet[ 47    ] )
               aGet[ 47    ]:cText( ( D():Clientes( nView ) )->nDpp )
            else
               aTmp[ 47    ]  := ( D():Clientes( nView ) )->nDpp
            end

            if !empty( aGet[ 48 ] )
               aGet[ 48 ]:cText( ( D():Clientes( nView ) )->cDtoUno )
            else
               aTmp[ 48 ]  := ( D():Clientes( nView ) )->cDtoUno
            end

            if !empty( aGet[ 50 ] )
               aGet[ 50 ]:cText( ( D():Clientes( nView ) )->cDtoDos )
            else
               aTmp[ 50 ]  := ( D():Clientes( nView ) )->cDtoDos
            end

            if !empty( aGet[ 49 ] )
               aGet[ 49 ]:cText( ( D():Clientes( nView ) )->nDtoCnt )
            else
               aTmp[ 49 ]  := ( D():Clientes( nView ) )->nDtoCnt
            end

            if !empty( aGet[ 51 ] )
               aGet[ 51 ]:cText( ( D():Clientes( nView ) )->nDtoRap )
            else
               aTmp[ 51 ]  := ( D():Clientes( nView ) )->nDtoRap
            end

            aTmp[ 90 ] := ( D():Clientes( nView ) )->nDtoAtp

            aTmp[ 91 ] := ( D():Clientes( nView ) )->nSbrAtp

         end



      end

      if ( D():Clientes( nView ) )->lMosCom .AND. !empty( ( D():Clientes( nView ) )->mComent ) .AND. lChgCodCli
         MsgStop( Trim( ( D():Clientes( nView ) )->mComent ) )
      end

      if lShowInc
         ShowIncidenciaCliente( ( D():Clientes( nView ) )->Cod, nView )
      end

      cOldCodCli  := ( D():Clientes( nView ) )->Cod

      lValid      := .T.

   ELSE

      msgStop( "Cliente no encontrado" )

      lValid      := .F.

   end

RETURN lValid



STATIC FUNCTION RecalculaTotal( aTmp )

   nTotFacCli( nil, D():FacturasClientes( nView ), dbfTmpLin, dbfIva, dbfDiv, D():FacturasClientesCobros( nView ), aTmp, nil, .F. )

   nTotCob           := nTotalRecibosPagadosFacturasCliente( nil, D():FacturasClientes( nView ), dbfTmpPgo, dbfIva, dbfDiv )





   if oBrwIva <> nil
         oBrwIva:SetArray( aTotIva, , , .F. )
      oBrwIva:Refresh()
   end

   if oBrwPgo <> nil
      oBrwPgo:Refresh()
   end

   if oGetAge <> nil
      oGetAge:SetText( Trans( nTotAge, cPorDiv ) )
   end

   if oGetNet <> nil
      oGetNet:SetText( Trans( nTotNet, cPorDiv ) )
   end

   if oGetIva <> nil
      oGetIva:SetText( Trans( nTotIva, cPorDiv ) )
   end

   if oGetRnt <> nil
      oGetRnt:SetText( alltrim( Trans( nTotRnt, cPorDiv ) ) + space( 1 ) + cSimDiv( cCodDiv, dbfDiv ) + " : " + alltrim( Trans( nTotPctRnt, "999.99" ) ) + "%" )
   end

   if oGetReq <> nil
      oGetReq:SetText( Trans( nTotReq, cPorDiv ) )
   end

   if oGetTotal <> nil
      oGetTotal:SetText( Trans( nTotFac, cPorDiv ) )
   end

   if oTotFacLin <> nil
      oTotFacLin:SetText( Trans( nTotFac, cPorDiv ) )
   end

   if oGetTotPg <> nil
      oGetTotPg:SetText( Trans( nTotFac, cPorDiv ) )
   end

   if oGetTotIvm <> nil
      oGetTotIvm:SetText( Trans( nTotIvm, cPorDiv ) )
   end

   if oGetTotPnt <> nil
      oGetTotPnt:SetText( Trans( nTotPnt, cPorDiv ) )
   end

   if oGetTrn <> nil
      oGetTrn:SetText( Trans( nTotTrn, cPorDiv ) )
   end

   if oGetPctRet <> nil
      oGetPctRet:SetText( Trans( nTotRet, cPorDiv ) )
   end





   if oGetPes <> nil
      oGetPes:cText( nTotPes )
   end

   if oGetDif <> nil
      oGetDif:cText( nTotalDif )
   end

Return .T.







STATIC FUNCTION AppDeta( oBrwDet, bEdtDet, aTmp, lTot, cCodArt, aNumDoc )

   If( lTot == nil, lTot := .F., ) ;

   if !( "TABLET" $ appParamsMain() )

      if lRecibosPagadosTmp( dbfTmpPgo )
         MsgStop( "No se pueden añadir registros a una factura con recibos cobrados" )
         return .F.
      end

   end

   if ( empty( aNumDoc ) ) .OR. lTot

      WinAppRec( oBrwDet, bEdtDet, dbfTmpLin, lTot, cCodArt, aTmp )

   else


      MsgStop( "No se pueden añadir registros a una factura que" + Chr(13)+Chr(10) +  "proviene de Facturas." )

   end

RETURN RecalculaTotal( aTmp )







STATIC FUNCTION lCalcDeta( aTmp, aTmpFac, lTotal )

   local nCalculo
   local nUnidades
   local nCosto
   local nMargen
   local nRentabilidad
   local nBase
   local nComision

   If( lTotal == nil, lTotal := .F., ) ;

   if aTmp[ 69 ]
      nCalculo    := aTmp[ 72 ]
   else
      nCalculo    := aTmp[ 6 ]
   end

    if !ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )
           nCalculo       -= aTmp[ 33 ]
       end

   nUnidades      := nTotNFacCli( aTmp )



   if !aTmp[ 40 ]
      if aTmp[ 83 ]
         nCalculo += aTmp[ 42 ] * NotCero( aTmp[ 67 ] )
      else
         nCalculo += aTmp[ 42 ]
      end
   end

   nCalculo       *= nUnidades



   if aTmp[ 8 ] <> 0
      nCalculo    += nUnidades * aTmp[ 8 ]
   end



   if aTmp[ 9    ] <> 0
      nCalculo    -= nCalculo * aTmp[ 9    ] / 100
   end

   if aTmp[ 10 ] <> 0
      nCalculo    -= nCalculo * aTmp[ 10 ] / 100
   end





   nCosto            := nUnidades * aTmp[ 37 ]

   if aTmp[ 40 ] .AND. aTmp[ 11 ] <> 0
      nBase          := nCalculo - Round( nCalculo / ( 100 / aTmp[ 11 ] + 1 ), nRouDiv )
   else
      nBase          := nCalculo
   end

   nComision         := ( nBase * aTmp[ 18 ] / 100 )
   nMargen           := nBase - nCosto - nComision

   if nCalculo == 0
      nRentabilidad  := 0
   else
      nRentabilidad  := nRentabilidad( nBase - nComision, 0, nCosto )
   end





   if aTmpFac[ 122 ]
      nCalculo       += nUnidades * aTmp[ 7 ]
   end





   if !empty( oTotalLinea )
      oTotalLinea:cText( nCalculo )
   end

   if !empty( oRentabilidadLinea )
      oRentabilidadLinea:cText( AllTrim( Trans( nMargen, cPorDiv ) + AllTrim( cSimDiv( cCodDiv, dbfDiv ) ) + " : " + AllTrim( Trans( nRentabilidad, "999.99" ) ) + "%" ) )
   end

   if !empty( oComisionLinea )
      oComisionLinea:cText( Round( ( nBase * aTmp[ 18 ] / 100 ), nRouDiv ) )
   end

Return ( if( !lTotal, .T., nCalculo ) )







static function lRecibosPagadosTmp( dbfTmpPgo )

   local nRecAct
   local lRecPgd  := .F.

   if empty( Select( dbfTmpPgo ) )
      Return ( lRecPgd )
   end

   nRecAct        := ( dbfTmpPgo )->( Recno() )

   while !( dbfTmpPgo )->( eof() )
      if ( dbfTmpPgo )->lCobrado .OR. ( dbfTmpPgo )->lDevuelto
         lRecPgd  := .T.
         exit
      end
      ( dbfTmpPgo )->( dbSkip() )
   end

   ( dbfTmpPgo )->( dbGoTo( nRecAct) )

return ( lRecPgd )







STATIC FUNCTION SetDlgMode( aTmp, aGet, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nMode, oTotal, aTmpFac, oRentLin, oSayLote, oSayParKit )

   local cCodArt        := left( aTmp[ 4 ], 18 )

   if !empty( aGet )

      if !uFieldEmpresa( "lUseBultos" )
         if !empty( aGet[ 93 ] )
            aGet[ 93 ]:Hide()
         end
      else
         if !empty( aGet[ 93 ] )
            aGet[ 93 ]:SetText( uFieldempresa( "cNbrBultos" ) )
         end
      end

      if !lUseCaj() .AND. !( "TABLET" $ appParamsMain() )
         if !empty( aGet[ 12 ] )
            aGet[ 12 ]:Hide()
         end
      end

      if !empty( aGet[ 84 ] )
         aGet[ 84 ]:Show()
      end

      if aGet[ 42 ] <> nil

         if !uFieldEmpresa( "lUseImp" )

            aGet[ 42 ]:Hide()
            aGet[ 83 ]:Hide()

         else

            if !uFieldEmpresa( "lModImp" )
               aGet[ 42 ]:Disable()
            end

            if !uFieldEmpresa( "lIvaImpEsp" )
               if !empty( aGet[ 83 ] )
                  aGet[ 83 ]:Disable()
               end
            end

         end

      end

      if aGet[ 8 ] <> nil
         if !uFieldEmpresa( "lUsePor", .F. )
            aGet[ 8 ]:Hide()
         end
      end

      if aGet[ 7 ] <> nil
         if !uFieldEmpresa( "lUsePnt", .F. ) .OR. !aTmpFac[ 122 ]
            aGet[ 7 ]:Hide()
         end
      end

      if aGet[ 33 ] <> nil
         if !( "TABLET" $ appParamsMain() ) .AND. !uFieldEmpresa( "lDtoLin", .F. )
            aGet[ 33 ]:Hide()
         end
      end

   end

   if oRentLin <> nil .AND. RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )
      oRentLin:Hide()
   end

   if !empty(aGet)

      if aTmp[ 43 ]

         if !empty( aGet[ 45 ] )
            aGet[ 45 ]:Show()
         end

         if !empty( aGet[ 46 ] )
            aGet[ 46 ]:Show()
         end

         if !empty( oSayLote )
            oSayLote:Show()
         end

      else

         if !empty( aGet[ 45 ] )
            aGet[ 45 ]:Hide()
         end

         if !empty( aGet[ 46 ] )
            aGet[ 46 ]:Hide()
         end

         if !empty( oSayLote )
            oSayLote:Hide()
         end

      end

   end

   do case
   case nMode == 1

      if !empty( aGet ) .AND. empty( aGet[ 4 ]:varGet() )
         aGet[ 4 ]:cText( Space( 200 ) )
      end

      aTmp[ 40 ]  := aTmpFac[ 61 ]
      aTmp[ 46 ]  := Ctod( "" )

      aTmp[ 12 ]  := 1
      aTmp[ 19]  := 1

      if !empty( aGet ) .AND. !empty( aGet[ 12 ] )
         aGet[ 12 ]:refresh()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 19 ] )
         aGet[ 19]:refresh()
      end

      aTmp[ 35 ]  := nLastNum( dbfTmpLin )

      if !empty( aGet ) .AND. !empty( aGet[ 102  ] )
         aGet[ 102  ]:cText( nLastNum( dbfTmpLin, "nPosPrint" ) )
      else
         aTmp[ 102  ] := nLastNum( dbfTmpLin, "nPosPrint" )
      end

      if !empty( aGet ) .AND. !empty( aGet[ 39 ] )
         aGet[ 39 ]:cText( aTmpFac[ 8 ] )
      else
         aTmp[ 39 ]  := aTmpFac[ 8 ]
      end

      if !empty( aGet ) .AND. !empty( aGet[ 5] )
         aGet[ 5]:Show()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 23 ] )
         aGet[ 23 ]:Hide()
      end

      if aTmpFac[ 68 ] <= 2
         if !empty( aGet ) .AND. !empty( aGet[ 11 ] )
            aGet[ 11 ]:cText( nIva( dbfIva, cDefIva() ) )
         else
            aTmp[ 11 ]  := nIva( dbfIva, cDefIva() )
         end

         aTmp[ 57 ]     := nReq( dbfIva, cDefIva() )
      end

      if !empty( oStkAct )
         if !uFieldEmpresa( "lNStkAct" )
            oStkAct:Show()
            oStkAct:cText( 0 )
         else
            oStkAct:Hide()
         end
      end

      if !empty( aGet ) .AND. !empty( aGet[ 96 ] )
         aGet[ 96 ]:cText( aTmpFac[ 130 ] )
         aGet[ 96 ]:lValid()
      endif

      cTipoCtrCoste        := "Centro de coste"

      if !empty( oTipoCtrCoste )
         oTipoCtrCoste:Refresh()
      end

      if !empty( aGet )
         clearGet( aGet[ 104 ] )
      end

   case ( nMode == 2 .OR. nMode == 3 )

      if !empty( cCodArt )

         if !empty( aGet ) .AND. !empty( aGet[ 5 ] )
            aGet[ 5 ]:show()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 23 ] )
            aGet[ 23 ]:hide()
         end

      else

         if !aTmp[ 13 ]

            if !empty( aGet ) .AND. !empty( aGet[5] )
               aGet[5]:hide()
            end

            if !empty( aGet ) .AND. !empty( aGet[23 ] )
               aGet[23 ]:show()
            end

         else

            if !empty( aGet ) .AND. !empty( aGet[5] )
               aGet[5]:show()
            end

            if !empty( aGet ) .AND. !empty( aGet[23 ] )
               aGet[23 ]:hide()
            end

         end

      end

      StocksModel():lPutStockActual( cCodArt, aTmp[ 39 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ], oStkAct )

      if uFieldEmpresa( "lNStkAct" )
         oStkAct:Hide()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 96 ] )
         aGet[ 96 ]:lValid()
      endif

    end

       if !empty( aGet ) .AND. !empty( aGet[ 112 ] )
        aGet[ 112 ]:Hide()
    end

    if !Empty( oSayParKit )
        oSayParKit:Hide()
    end

      if !empty( aTmp[ 28 ] )

      if !empty( aGet ) .AND. !empty( aGet[ 30 ] )
         aGet[ 30 ]:Show()
         aGet[ 30 ]:lValid()
      end

      if !empty( oSayPr1 )
         oSayPr1:Show()
         oSayPr1:SetText( retProp( aTmp[ 28 ], D():Propiedades( nView ) ) )
      end

      if !empty( oSayVp1 )
         oSayVp1:Show()
      end

   else

      if !empty( aGet ) .AND. !empty( aGet[ 30 ] )
         aGet[ 30 ]:hide()
      end

      if !empty( oSayPr1 )
         oSayPr1:hide()
      end

      if !empty( oSayVp1 )
         oSayVp1:hide()
      end

   end

   if !empty( aTmp[29 ] )

      if !empty( aGet ) .AND. !empty( aGet[ 31 ] )
         aGet[ 31 ]:Show()
         aGet[ 31 ]:lValid()
      end

      if !empty( oSayPr2 )
         oSayPr2:Show()
         oSayPr2:SetText( retProp( aTmp[ 29 ], D():Propiedades( nView ) ) )
      end

      if !empty( oSayVp2 )
         oSayVp2:Show()
      end

   else

      if !empty( aGet ) .AND. !empty( aGet[ 31 ] )
         aGet[31 ]:hide()
      end

      if !empty( oSayPr2 )
         oSayPr2:hide()
      end

      if !empty( oSayVp2 )
         oSayVp2:hide()
      end

   end

      if !empty( oTotal )
         oTotal:cText( 0 )
      end





      if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
         aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
      end

      if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
         aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
      end

      if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
         aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
     end

      if oUndMedicion:oDbf:Seek( aTmp[ 16 ] )

         if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 1 .AND. !empty( oUndMedicion:oDbf:cTextoDim1 )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
         end

         if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 2 .AND. !empty( oUndMedicion:oDbf:cTextoDim2 )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
         end

         if !empty( aGet ) .AND. !empty( aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 3 .AND. !empty( oUndMedicion:oDbf:cTextoDim3 )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
            aGet[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
         end

      end





      if empty( aTmp[ 77 ] )
         if !empty( aGet ) .AND. !empty( aGet[ 77 ] )
            if !empty( oGetTarifa )
               aGet[ 77 ]:cText( oGetTarifa:getTarifa() )
            else
               aGet[ 77 ]:cText( aTmpFac[ 19 ] )
            end
         else
            if !empty( oGetTarifa )
               aTmp[ 77 ]     := oGetTarifa:getTarifa()
            else
               aTmp[ 77 ]     := aTmpFac[ 19 ]
            end
         end
      end

      if !empty( aGet ) .AND. !empty( aGet[ 77 ] )
         if !uFieldEmpresa( "lPreLin" )
            aGet[ 77 ]:Hide()
         else
            aGet[ 77 ]:Show()
         end
      end





      if !empty( aGet ) .AND. !empty( aGet[ 22 ] )
         aGet[ 22 ]:lValid()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 53 ] )
         aGet[ 53 ]:lValid()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 39 ] )
         aGet[ 39 ]:lValid()
      end

      if RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() )

      if !empty( aGet ) .AND. !empty( aGet[ 37 ] )
         aGet[ 37 ]:Hide()
      end

   end





   if ( empty( aTmp[ 6 ] ) .OR. RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) .AND. nMode <> 3

      if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
         aGet[ 6 ]:HardEnable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 8  ] )
         aGet[ 8  ]:HardEnable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 7 ] )
         aGet[ 7 ]:HardEnable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 9     ] )
         aGet[ 9     ]:HardEnable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 10  ] )
         aGet[ 10  ]:HardEnable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 33 ] )
      aGet[ 33  ]:HardEnable()
      end

   else

      if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
         aGet[ 6 ]:HardDisable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 8  ] )
         aGet[ 8  ]:HardDisable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 7 ] )
         aGet[ 7  ]:HardDisable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 9     ] )
         aGet[ 9     ]:HardDisable()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 10  ] )
         aGet[ 10  ]:HardDisable()
      end

      if !empty( aGet ) .AND. !empty(  aGet[ 33  ] )
         aGet[ 33  ]:HardDisable()
      end

   end



   if !empty( oFld )
      oFld:SetOption( 1 )
   end



   if !empty( BrowseProperties():getInstance() )
      BrowseProperties():getInstance():Hide()
   end

   if !Empty( oGetCelda )
      oGetCelda:hide()
   end



   if !empty( aGet )
      aGet[ 4 ]:SetFocus()
   end

Return nil







STATIC FUNCTION LoaArt( cCodArt, aGet, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, lFocused, oSayLote, oSayParKit )

   local hHas128
   local cLote
   local hAtipica
   local dFechaCaducidad
   local nDtoAge
   local nImpAtp
   local nImpOfe
   local nCosPro           := 0
   local cCodFam
   local cProveedor
   local cValPr1           := ""
   local cValPr2           := ""
   local cPrpArt
   local nNumDto           := 0
   local nPrePro           := 0
   local nTarOld           := aTmp[ 77 ]
   local lChgCodArt        := ( empty( cOldCodArt ) .OR. rtrim( cOldCodArt ) <> rtrim( cCodArt ) )
   local lChgPrpArt        := ( cOldPrpArt <> aTmp[ 28 ] + aTmp[ 29 ] + aTmp[ 30 ] + aTmp[ 31 ] )
   local lChgLotArt
   local nComisionAgenteTarifa
   local nUnidades         := 0
   local cArtLotCad
   local aListaKits        := {}
   local hLoteAct

       if cOldLotArt == nil .OR. aTmp[ 45 ] == nil
        lChgLotArt         := .F.
    else
           lChgLotArt         := ( cOldLotArt <> rtrim( aTmp[ 45 ] ) )
       end

   If( lFocused == nil, lFocused := .T., ) ;

   if empty( cCodArt )

      if lRetCodArt()
         MsgStop( "No se pueden añadir líneas sin codificar" )
         return .F.
      end

      if empty( aTmp[ 11 ] ) .AND. !aTmp[ 84 ]
         if !empty( aGet ) .AND. !empty( aGet[ 11 ] )
            aGet[ 11 ]:bWhen  := {|| .T. }
         end
      end

      if !empty( aGet )
         aGet[ 5 ]:cText( Space( 50 ) )
         aGet[ 5 ]:bWhen   := {|| .T. }
      end

      if !( "TABLET" $ appParamsMain() )
         aGet[ 5 ]:Hide()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 23 ] )
         aGet[ 23 ]:Show()
         if lFocused
            aGet[ 23 ]:SetFocus()
         end
      end

      if !empty( aGet ) .AND. !empty( aGet[ 30 ] )
         aGet[ 30 ]:Hide()
      end

      if !empty( oSayPr1 )
         oSayPr1:Hide()
      end

      if !empty( oSayVp1 )
         oSayVp1:Hide()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 31 ] )
         aGet[ 30 ]:Hide()
      end

      if !empty( oSayPr2 )
         oSayPr1:Hide()
      end

      if !empty( oSayVp2 )
         oSayVp1:Hide()
      end

      if !empty( aGet ) .AND. !empty( aGet[ 112 ] )
         aGet[ 112 ]:Hide()
      end

      if !empty( BrowseProperties():getInstance() )
         BrowseProperties():getInstance():Hide()
      end

          if !Empty( oGetCelda )
              oGetCelda:hide()
           end

      Return .T.

   end

   if !empty( aGet ) .AND. !empty( aGet[ 11 ] ) .AND. !aTmp[ 84 ]
      aGet[ 11 ]:bWhen  := {|| lModIva() }
   end





   if Len( Alltrim( cCodArt ) ) > 18

           if At( ";", cCodArt ) <> 0

            cArtLotCad           := cCodArt
            cCodArt              := Padr( SubStr( cArtLotCad, 1, ( At( ";", cArtLotCad ) - 1 ) ), 18 )
            cArtLotCad           := SubStr( cArtLotCad, At( ";", cArtLotCad ) + 1 )
            cLote                := Padr( SubStr( cArtLotCad, 1, ( At( ";", cArtLotCad ) - 1 ) ), 64 )
            dFechaCaducidad      := Ctod( AllTrim( SubStr( cArtLotCad, At( ";", cArtLotCad ) + 1 ) ) )

          else

            hHas128              := GetHashGs128( cCodArt )

            if !empty( hHas128 )

                cCodArt           := uGetCodigo( hHas128, "00" )

                if Empty( cCodArt )
                   cCodArt        := uGetCodigo( hHas128, "01" )
                end

                cLote             := Upper( uGetCodigo( hHas128, "10" ) )

                dFechaCaducidad   := uGetCodigo( hHas128, "15" )

                if Empty( dFechaCaducidad )
                   dFechaCaducidad   := uGetCodigo( hHas128, "17" )
                end

                nUnidades         := uGetCodigo( hHas128, "3103" )

            end

        end

   end

   cCodArt                 := cSeekCodebar( cCodArt, dbfCodebar, D():Articulos( nView ) )





   if aSeekProp( @cCodArt, @cValPr1, @cValPr2, D():Articulos( nView ), D():PropiedadesLineas( nView ) )

           if uFieldEmpresa( "lGetLot")
               MsgWait( cCodArt + cValPr1 + cValPr2, "Propiedades", 0.0001 )
           end






      aTmp[ 51 ]        := ( D():Articulos( nView ) )->lMsgVta
      aTmp[ 52 ]        := ( D():Articulos( nView ) )->lNotVta





      if ( lChgCodArt )

         if ( D():Articulos( nView ) )->lObs
            MsgStop( "artículo catalogado como obsoleto" )
            return .F.
         end

         CursorWait()

         cCodArt                 := ( D():Articulos( nView ) )->Codigo

         if !empty( aGet )
            aGet[ 4 ]:cText( Padr( cCodArt, 200 ) )
         end

         aTmp[ 4 ]           := cCodArt



         aTmp[ 100 ]        := ( D():Articulos( nView ) )->cRefAux
         aTmp[ 101 ]       := ( D():Articulos( nView ) )->cRefAux2





         aTmp[ 28 ]        := ( D():Articulos( nView ) )->cCodPrp1
         aTmp[ 29 ]        := ( D():Articulos( nView ) )->cCodPrp2

         aGet[ 30 ]:cText( space( 20 ) )
         aGet[ 31 ]:cText( space( 20 ) )

         if !empty( aTmp[ 28 ] ) .AND. !empty( aGet ) .AND. !empty( aGet[ 30 ] )

            if !empty( cValPr1 )
               aGet[ 30 ]:cText( cCodPrp( aTmp[ 28 ], cValPr1, D():PropiedadesLineas( nView ) ) )
            end

         end

         if !empty( aTmp[ 29 ] ) .AND. !empty( aGet ) .AND. !empty( aGet[ 31 ] )

            if !empty( cValPr2 )
               aGet[ 31 ]:cText( cCodPrp( aTmp[ 29 ], cValPr2, D():PropiedadesLineas( nView ) ) )
            end

         end





         if !empty( aGet ) .AND. !empty( aGet[ 61 ] )
            aGet[ 61 ]:cText( ( D():Articulos( nView ) )->cImagen )
         else
            aTmp[ 61 ]     := ( D():Articulos( nView ) )->cImagen
         end

         if !empty( bmpImage )
            if !empty( aTmp[ 61 ] )
               bmpImage:Show()
               bmpImage:LoadBmp( cFileBitmap( cPatImg(), aTmp[ 61 ] ) )
            else
               bmpImage:Hide()
            end
         end

         if ( D():Articulos( nView ) )->lMosCom .AND. !empty( ( D():Articulos( nView ) )->mComent )
            MsgStop( Trim( ( D():Articulos( nView ) )->mComent ) )
         end



         if !empty( aGet ) .AND. !empty( aGet[ 59 ] )
            aGet[ 59 ]:cText( ( D():Articulos( nView ) )->cPrvHab )
            aGet[ 59 ]:lValid()
         else
            aTmp[ 59 ]  := ( D():Articulos( nView ) )->cPrvHab
         end

         aTmp[ 66 ]  := Padr( cRefPrvArt( aTmp[ 4 ], ( D():Articulos( nView ) )->cPrvHab , D():ProveedorArticulo( nView ) ), 18 )

         if !empty( aGet ) .AND. !empty( aGet[ 5 ] )
            aGet[ 5 ]:show()
            aGet[ 5 ]:cText( ( D():Articulos( nView ) )->Nombre )
         else
            aTmp[ 5 ] := ( D():Articulos( nView ) )->Nombre
         end

         if !empty( aGet ) .AND. !empty( aGet[ 23 ] )

            aGet[ 23 ]:hide()

            if !empty( ( D():Articulos( nView ) )->Descrip )
               aGet[ 23 ]:cText( ( D():Articulos( nView ) )->Descrip )
            else
               aGet[ 23 ]:cText( ( D():Articulos( nView ) )->Nombre )
            end

         else

            if !empty( ( D():Articulos( nView ) )->Descrip )
               aTmp[ 23 ]  := ( D():Articulos( nView ) )->Descrip
            else
               aTmp[ 23 ]  := ( D():Articulos( nView ) )->Nombre
            end

        end



         if !empty( aGet ) .AND. !empty( aGet[ 14 ] )
            aGet[ 14  ]:cText( ( D():Articulos( nView ) )->nPesoKg )
         else
            aTmp[ 14  ] := ( D():Articulos( nView ) )->nPesoKg
         end

         if !empty( aGet ) .AND. !empty( aGet[ 15 ] )
            aGet[ 15 ]:cText( ( D():Articulos( nView ) )->cUndDim )
         else
            aTmp[ 15 ] := ( D():Articulos( nView ) )->cUndDim
         end

         if !empty( aGet ) .AND. !empty( aGet[ 67 ] )
            aGet[ 67 ]:cText( ( D():Articulos( nView ) )->nVolumen )
         else
            aTmp[ 67 ] := ( D():Articulos( nView ) )->nVolumen
         end

         if !empty( aGet ) .AND. !empty( aGet[ 16 ] )
            aGet[ 16 ]:cText( ( D():Articulos( nView ) )->cUnidad )
            aGet[ 16 ]:lValid()
         else
            aTmp[ 16 ] := ( D():Articulos( nView ) )->cUnidad
         end

         if !empty( aGet ) .AND. !empty( aGet[ 68 ] )
            aGet[ 68 ]:cText( ( D():Articulos( nView ) )->cVolumen )
         else
            aTmp[ 68 ]:= ( D():Articulos( nView ) )->cVolumen
         end

         if !empty( aGet ) .AND. !empty( aGet[53 ] )
            aGet[ 53 ]:cText( ( D():Articulos( nView ) )->cCodTip )
         else
            aTmp[ 53 ]  := ( D():Articulos( nView ) )->cCodTip
         end



         aTmp[ 32 ]     := 1





         cCodFam                 := ( D():Articulos( nView ) )->Familia

         if !empty( cCodFam )

            if !empty( aGet ) .AND. aGet[ 55 ] <> nil
               aGet[ 55 ]:cText( cCodFam )
               aGet[ 55 ]:lValid()
            else
               aTmp[ 55 ]  := cCodFam
            end

            if !empty( aGet ) .AND. aGet[ 56 ] <> nil
               aGet[ 56 ]:cText( cGruFam( cCodFam, dbfFamilia ) )
               aGet[ 56 ]:lValid()
            else
               aTmp[ 56 ]  := cGruFam( cCodFam, dbfFamilia )
            end

            if !empty( aGet ) .AND. aGet[ 79 ] <> nil
               aGet[ 79 ]:cText( aTmpFac[ 124 ] )
               aGet[ 79 ]:lValid()
            else
               aTmp[ 79 ]  := aTmpFac[ 124 ]
            end

         else

            if !empty( aGet ) .AND. aGet[ 55 ] <> nil
               aGet[ 55 ]:cText( Space( 8 ) )
               aGet[ 55 ]:lValid()
            end

            if !empty( aGet ) .AND. aGet[ 56 ] <> nil
               aGet[ 56 ]:cText( Space( 3 ) )
               aGet[ 56 ]:lValid()
            end

            if !empty( aGet ) .AND. aGet[ 79 ] <> nil
               aGet[ 79 ]:cText( Space( 3 ) )
               aGet[ 79 ]:lValid()
            end

         end





         if ( D():Articulos( nView ) )->lKitArt

            aTmp[ 47 ]     := ( D():Articulos( nView ) )->lKitArt
            aTmp[ 27 ]     := lImprimirCompuesto( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
            aTmp[ 49 ]     := lPreciosCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )

            if lStockCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )

               if !empty( aGet ) .AND. aGet[ 36 ] <> nil
                  aGet[ 36 ]:SetOption( ( D():Articulos( nView ) )->nCtlStock )
               else
                  aTmp[ 36 ]  := ( D():Articulos( nView ) )->nCtlStock
               end

            else

               if !empty( aGet ) .AND. aGet[ 36 ] <> nil
                  aGet[ 36 ]:SetOption( 3 )
               else
                  aTmp[ 36 ]  := 3
               end

            end





            aListaKits             := ListaEscandallosModel():getListNames( cCodArt )

            if Len( aListaKits ) > 0

                 if !empty( aGet ) .AND. !empty( aGet[ 112 ] )

                    aGet[ 112 ]:Show()

                    if !Empty( oSayParKit )
                        oSayParKit:Show()
                       end

                    aGet[ 112 ]:SetItems( aListaKits )
                    aGet[ 112 ]:Set( aListaKits[1] )
                    aGet[ 112 ]:Refresh()

                 end

            end

         else

            aTmp[ 27 ]     := .F.

            if !empty( aGet ) .AND. aGet[ 36 ] <> nil
               aGet[ 36 ]:SetOption( ( D():Articulos( nView ) )->nCtlStock )
            else
               aTmp[ 36 ]  := ( D():Articulos( nView ) )->nCtlStock
            end

         end





         if aTmpFac[ 68 ] <= 2
            if !empty( aGet ) .AND. !empty( aGet[ 11 ] )
               aGet[ 11 ]:cText( nIva( dbfIva, ( D():Articulos( nView ) )->TipoIva ) )
            else
               aTmp[ 11 ]     := nIva( dbfIva, ( D():Articulos( nView ) )->TipoIva )
            end
            aTmp[ 57 ]        := nReq( dbfIva, ( D():Articulos( nView ) )->TipoIva )
         end





         aTmp[ 41 ]     := ( D():Articulos( nView ) )->cCodImp

         if !empty( aGet )
            oNewImp:setCodeAndValue( aTmp[ 41 ], aGet[ 42 ] )
         end

         if !empty( ( D():Articulos( nView ) )->cCodImp )
            aTmp[ 83 ]     := RetFld( ( D():Articulos( nView ) )->cCodImp, oNewImp:oDbf:cAlias, "lIvaVol" )
         end

         if ( D():Articulos( nView ) )->nBulEnt <> 0
            if !empty( aGet )
               aGet[ 93 ]:cText( ( D():Articulos( nView ) )->nBulEnt )
            else
               aTmp[ 93 ]  := ( D():Articulos( nView ) )->nBulEnt
            end
         end

         if ( D():Articulos( nView ) )->nCajEnt <> 0
            if !empty( aGet )
               aGet[ 12 ]:cText( ( D():Articulos( nView ) )->nCajEnt )
            else
               aTmp[ 12 ]  := ( D():Articulos( nView ) )->nCajEnt
            end
         end

         if !empty( nUnidades )
            if !empty( aGet )
               aGet[ 19 ]:cText( nUnidades )
            else
               aTmp[ 19 ] := nUnidades
            end
         end

         if empty( nUnidades ) .AND. ( D():Articulos( nView ) )->nUniCaja <> 0
            if !empty( aGet )
               aGet[ 19 ]:cText( ( D():Articulos( nView ) )->nUniCaja )
            else
               aTmp[ 19 ]    := ( D():Articulos( nView ) )->nUniCaja
            end
         end



         loadComisionAgente( aTmp, aGet, aTmpFac )





         if !empty( ( D():Articulos( nView ) )->cCodFra )

            if !empty( aGet ) .AND. aGet[ 79 ] <> nil
               aGet[ 79 ]:cText( aTmpFac[ 124 ] )
               aGet[ 79 ]:lValid()
            else
               aTmp[ 79 ] := aTmpFac[ 124 ]
            end

         end





         if !empty( aGet ) .AND. !empty( aGet[ 81 ] )
            aGet[ 81 ]:cText( ( D():Articulos( nView ) )->Descrip )
         else
            aTmp[ 81 ]    := ( D():Articulos( nView ) )->Descrip
         end





         aTmp[ 28 ]     := ( D():Articulos( nView ) )->cCodPrp1
         aTmp[ 29 ]     := ( D():Articulos( nView ) )->cCodPrp2

         if ( !empty( aTmp[ 28 ] ) .OR. !empty( aTmp[ 29 ] ) ) .AND. ( uFieldEmpresa( "lUseTbl" ) .AND. ( nMode == 1 ) )

            if !empty( aGet )
               aGet[ 12  ]:cText( 0 )
               aGet[ 19 ]:cText( 0 )
            end

            BrowseProperties():getInstance():buildPropertiesTable( cCodArt, aTmp[ 28 ], aTmp[ 29 ] )

            if !Empty( oGetCelda )
                  oGetCelda:Show()
               end

         else

            BrowseProperties():getInstance():hide()

            if !Empty( oGetCelda )
                  oGetCelda:hide()
               end

            if !empty( aTmp[ 28 ] )

               if !empty( aGet ) .AND. aGet[ 30 ] <> nil
                  aGet[ 30 ]:show()
                  if lFocused
                     aGet[ 30 ]:SetFocus()
                  end
               end

               if oSayPr1 <> nil
                  oSayPr1:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp1, D():Propiedades( nView ) ) )
                  oSayPr1:show()
               end

               if oSayVp1 <> nil
                  oSayVp1:SetText( "" )
                  oSayVp1:Show()
               end

            else

               if !empty( aGet ) .AND. !empty( aGet[ 30 ] )
                  aGet[ 30 ]:hide()
                  aGet[ 30 ]:cText( Space( 20 ) )
               end

               if !empty( oSayPr1 )
                  oSayPr1:SetText( "" )
                  oSayPr1:hide()
               end

               if !empty( oSayVp1 )
                  oSayVp1:hide()
               end

            end

            if !empty( aTmp[ 29 ] )

               if !empty( aGet ) .AND. aGet[ 31 ] <> nil
                  aGet[ 31 ]:show()
               end

               if oSayPr2 <> nil
                  oSayPr2:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp2, D():Propiedades( nView ) ) )
                  oSayPr2:show()
               end

               if !empty( oSayVp2 )
                  oSayVp2:SetText( "" )
                  oSayVp2:Show()
               end

            else

               if !empty( aGet ) .AND. !empty( aGet[ 31 ] )
                  aGet[ 31 ]:hide()
                  aGet[ 31 ]:cText( Space( 20 ) )
               end

               if!empty( oSayPr2 )
                  oSayPr2:SetText( "" )
                  oSayPr2:hide()
               end

               if !empty( oSayVp2 )
                  oSayVp2:hide()
               end

            end

         end

      end





      cPrpArt              := aTmp[ 28 ] + aTmp[ 29 ] + aTmp[ 30 ] + aTmp[ 31 ]

      if ( lChgCodArt ) .OR. ( cPrpArt <> cOldPrpArt )





         if nMode == 1
            cCodFam        := RetFamArt( aTmp[ 4 ], D():Articulos( nView ) )
         else
            cCodFam        := aTmp[ 55 ]
         end



            if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
               aGet[ 9 ]:cText( 0 )
            else
               aTmp[ 9 ] := 0
            end

            if !empty( aGet ) .AND. !empty( aGet[ 33 ] )
               aGet[ 33 ]:cText( 0 )
            else
               aTmp[ 33 ] := 0
            end

            if !empty( aGet ) .AND. !empty( aGet[ 10 ] )
               aGet[ 10 ]:cText( 0 )
            else
               aTmp[ 10 ]:= 0
            end

            aTmp[ 82  ] := .F.





         if !empty( aGet ) .AND. !empty( aGet[ 7 ] )
             aGet[ 7 ]:cText( ( D():Articulos( nView ) )->NPNTVER1 )
         else
             aTmp [ 7 ]   :=  ( D():Articulos( nView ) )->NPNTVER1
         end

         aTmp[ 38 ]        := ( D():Articulos( nView ) )->PvpRec





        if uFieldempresa( "lDtoCliLin" )

            if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                 aGet[ 9 ]:cText( retFld( aTmpFac[ 7 ], D():Clientes( nView ), "nDtoEsp" ) )
                 aTmp[ 9 ]     := retFld( aTmpFac[ 7 ], D():Clientes( nView ), "nDtoEsp" )
              else
                 aTmp[ 9 ]     := retFld( aTmpFac[ 7 ], D():Clientes( nView ), "nDtoEsp" )
              end

        end





         nNumDto                 := retFld( aTmpFac[ 7 ], D():Clientes( nView ), "nDtoArt" )

         if nNumDto <> 0

            do case
               case nNumDto == 1

                  if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                     aGet[ 9 ]:cText( ( D():Articulos( nView ) )->nDtoArt1 )
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt1
                  else
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt1
                  end

               case nNumDto == 2

                  if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                     aGet[ 9 ]:cText( ( D():Articulos( nView ) )->nDtoArt2 )
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt2
                  else
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt2
                  end

               case nNumDto == 3

                  if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                     aGet[ 9]:cText( ( D():Articulos( nView ) )->nDtoArt3 )
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt3
                  else
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt3
                  end

               case nNumDto == 4

                  if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                     aGet[ 9 ]:cText( ( D():Articulos( nView ) )->nDtoArt4 )
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt4
                  else
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt4
                  end

               case nNumDto == 5

                  if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                     aGet[ 9 ]:cText( ( D():Articulos( nView ) )->nDtoArt5 )
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt5
                  else
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt5
                  end

               case nNumDto == 6

                  if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                     aGet[ 9]:cText( ( D():Articulos( nView ) )->nDtoArt6 )
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt6
                  else
                     aTmp[ 9 ]     := ( D():Articulos( nView ) )->nDtoArt6
                  end

            end

         end





         if aTmp[ 9 ] == 0
            if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
               aGet[ 9 ]:cText( nDescuentoFamilia( cCodFam, dbfFamilia ) )
            else
               aTmp[ 9 ]     := nDescuentoFamilia( cCodFam, dbfFamilia )
            end
         end





         if !empty( aGet ) .AND. !empty( aGet[ 16 ] )
            aGet[ 16 ]:cText( ( D():Articulos( nView ) )->cUnidad )
         else
            aTmp[ 16 ]  := ( D():Articulos( nView ) )->cUnidad
         end





         nPrePro           := nPrePro( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 30 ], aTmp[ 29 ], aTmp[ 31 ], aTmp[ 77 ], aTmpFac[ 61 ], dbfArtDiv, dbfTarPreL, aTmpFac[22] )

         if nPrePro == 0
            nPrePro        := nRetPreArt( aTmp[ 77 ], aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), dbfDiv, dbfKit, dbfIva, , if( !empty( aGet ), aGet[ 77 ], nil ), oNewImp )
         end

         aTmp[ 6 ] := nPrePro

         if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
            aGet[ 6 ]:Refresh()
         end

         sysRefresh()

         ValidaMedicion( aTmp, aGet )



          if !empty( aTmpFac[ 22 ] )



             nImpOfe  := RetPrcTar( aTmp[ 4 ], aTmpFac[ 22 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], dbfTarPreL, aTmp[ 77 ] )
             if nImpOfe <> 0
                aTmp[ 6 ]    := nImpOfe

                if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
                   aGet[ 6 ]:Refresh()
                end
             end



             nImpOfe  := RetPctTar( aTmp[ 4 ], aTmp[ 55 ], aTmpFac[ 22 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], dbfTarPreL )
             if nImpOfe <> 0
                aTmp[ 9 ]  := nImpOfe

                if !empty( aGet ) .AND. !empty( aGet[9 ] )
                   aGet[ 9 ]:Refresh()
                end
             end



             nImpOfe  := RetLinTar( aTmp[ 4 ], aTmp[ 55 ], aTmpFac[22], aTmp[28], aTmp[29], aTmp[30], aTmp[31], dbfTarPreL )
             if nImpOfe <> 0

                aTmp[ 33 ]  := nImpOfe

                if !empty( aGet ) .AND. !empty( aGet[ 33 ] )
                   aGet[ 33 ]:Refresh()
                end
             end



             nImpOfe  := retComTar( aTmp[ 4 ], aTmp[ 55 ], aTmpFac[ 22 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmpFac[ 20 ], dbfTarPreL, dbfTarPreS )
             if nImpOfe <> 0

                aTmp[ 18 ]  := nImpOfe

                if !empty( aGet ) .AND. !empty( aGet[ 18 ] )
                   aGet[ 18 ]:cText( nImpOfe )
                end
             end



             nImpOfe  := RetDtoPrm( aTmp[ 4 ], aTmp[ 55 ], aTmpFac[22], aTmp[28], aTmp[29], aTmp[30], aTmp[31], aTmpFac[6], dbfTarPreL )
             if nImpOfe  <> 0

                aTmp[ 10 ]  := nImpOfe

                if !empty( aGet ) .AND. !empty( aGet[ 10 ] )
                   aGet[ 10 ]:cText( nImpOfe )
                end
             end



             nDtoAge  := RetDtoAge( aTmp[ 4 ], aTmp[ 55 ], aTmpFac[ 22 ], aTmp[28], aTmp[29], aTmp[30], aTmp[31], aTmpFac[6], aTmpFac[20], dbfTarPreL, dbfTarPreS )
             if nDtoAge  <> 0

                aTmp[ 18 ]  := nDtoAge

                if !empty( aGet ) .AND. !empty( aGet[ 18] )
                   aGet[ 18 ]:cText( nDtoAge )
                end
             end

          end







              hAtipica := hAtipica( hValue( aTmp, aTmpFac ) )

              if !empty( hAtipica )

                  if hhaskey( hAtipica, "nTarifaFamilia" ) .AND. hAtipica[ "nTarifaFamilia" ] > 0

                      aTmp[ 6 ] := nRetPreArt( hAtipica[ "nTarifaFamilia" ], aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), dbfDiv, dbfKit, dbfIva, , if( !empty( aGet ), aGet[ 77 ], nil ), oNewImp )

                    if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
                       aGet[ 6 ]:Refresh()
                    end

                   end

                 if hhaskey( hAtipica, "nImporte" ) .AND. hAtipica[ "nImporte" ] <> 0

                    aTmp[ 6 ] := hAtipica[ "nImporte" ]

                    if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
                       aGet[ 6 ]:Refresh()
                    end
                 end

                 if hhaskey( hAtipica, "nDescuentoPorcentual" ) .AND. hAtipica[ "nDescuentoPorcentual"] <> 0 .AND. aTmp[ 9 ] == 0

                    aTmp[ 9 ]  := hAtipica[ "nDescuentoPorcentual"]

                    if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
                       aGet[ 9 ]:Refresh()
                    end
                 end

                 if hhaskey( hAtipica, "nDescuentoPromocional" ) .AND. hAtipica[ "nDescuentoPromocional" ] <> 0 .AND. aTmp[ 10 ] == 0

                    aTmp[ 10 ]  := hAtipica[ "nDescuentoPromocional" ]

                    if !empty( aGet ) .AND. !empty( aGet[ 10 ] )
                       aGet[ 10 ]:Refresh()
                    end
                 end

                 if hhaskey( hAtipica, "nComisionAgente" ) .AND. hAtipica[ "nComisionAgente" ] <> 0 .AND. aTmp[ 18 ] == 0

                    atmp[ 18 ]  := hAtipica[ "nComisionAgente" ]

                    if !empty( aGet ) .AND. !empty( aGet[ 18 ] )
                       aGet[ 18 ]:Refresh()
                    end
                 end

                 if hhaskey( hAtipica, "nDescuentoLineal" ) .AND. hAtipica[ "nDescuentoLineal" ] <> 0 .AND. aTmp[ 33 ] == 0

                    aTmp[ 33 ]  := hAtipica[ "nDescuentoLineal" ]

                    if !empty( aGet ) .AND. !empty( aGet[ 33 ] )
                       aGet[ 33 ]:Refresh()
                    end
                 end

                 if hhaskey( hAtipica, "nTarifaPrecio" ) .AND. hAtipica[ "nTarifaPrecio" ] <> 0 .AND. aTmp[ 33 ] == 0

                    aTmp[ 77 ]  := hAtipica[ "nTarifaPrecio" ]

                    if !empty( aGet ) .AND. !empty( aGet[ 77 ] )
                       aGet[ 77 ]:Refresh()
                    end
                 end



          end

      end





      if ( lChgCodArt ) .OR. ( lChgLotArt )





         if ( D():Articulos( nView ) )->lLote

            aTmp[ 43 ]    := ( D():Articulos( nView ) )->lLote



            if empty( cLote ) .AND. uFieldempresa( "lLoaUltLot" )
               cLote          := ( D():Articulos( nView ) )->cLote



            end

            if !empty( aGet ) .AND. !empty( aGet[ 45 ] )

               aGet[ 45 ]:Show()

               if empty( aGet[ 45 ]:VarGet() )
                  aGet[ 45 ]:cText( cLote )
               end

            else

               if empty( aTmp[ 45 ] )
                  aTmp[ 45 ] := cLote
               end

            end

            if !empty( oSayLote )
               oSayLote:Show()
            end

            if empty( dFechaCaducidad )
               dFechaCaducidad      := StocksModel():getFechaCaducidad( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ] )

            end









            if !empty( aGet ) .AND. !empty( aGet[ 46 ] )

               aGet[ 46 ]:Show()
               aGet[ 46 ]:cText( cTod( "" ) )

               if empty( aGet[ 46 ]:VarGet() ) .OR. ( dFechaCaducidad <> dOldFecCad )
                  if aTmp[ 43 ] .AND. !Empty( aGet[ 45 ]:VarGet() )
                      aGet[ 46 ]:cText( dFechaCaducidad )
                      aGet[ 46 ]:lValid()
                  end
                  aGet[ 46 ]:lValid()
               end

            else

               if empty( aTmp[ 46 ] ) .AND. uFieldempresa( "lLoaUltLot" )
                  aTmp[ 46 ]  := dFechaCaducidad
               end

            end

         else

            if !empty( aGet ) .AND. !empty( aGet[ 45 ] )
               aTmp[ 45 ]    := Space( 14 )
               aGet[ 45 ]:cText( Space( 14 ) )
               aGet[ 45 ]:Hide()
            end

            if !empty( aGet ) .AND. !empty( aGet[ 46 ] )
               aTmp[ 46 ]  := cTod( "" )
               aGet[ 46 ]:cText( cTod( "" ) )
               aGet[ 46 ]:Hide()
            end

            if !empty( oSayLote )
               oSayLote:Hide()
            end

         end





         do case
           case uFieldEmpresa( "nCosVta" ) < 2

              nCosPro           := oStock:nCostoMedio( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ] )

              if nCosPro == 0
                 nCosPro        := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpFac[ 7 ] )
              end

           case uFieldEmpresa( "nCosVta" ) == 2

              nCosPro           := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpFac[ 7 ] )

           case uFieldEmpresa( "nCosVta" ) == 3

              nCosPro           := MaterialesProducidosLineasModel():getCosto(  aTmp[ 4 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ] )

              if nCosPro == 0
                 nCosPro        := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpFac[ 7 ] )
              end

         end

         if aTmp[ 37 ] == 0

             aTmp[ 37 ]  := nCosPro

             if !empty( aGet ) .AND. aGet[ 37 ] <> nil
                aGet[ 37 ]:Refresh()
             end

         end

      end





      if ( lChgCodArt ) .OR. ( lChgPrpArt ) .OR. ( lChgLotArt )

         if !uFieldEmpresa( "lNStkAct" ) .AND. oStkAct <> nil .AND. aTmp[ 36 ] <= 1
            StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ], oStkAct )
            oStkAct:Refresh()
         end

      end





      lBuscaOferta( aTmp[ 4 ], aGet, aTmp, aTmpFac, dbfOferta, dbfDiv, dbfKit, dbfIva  )





      cOldPrpArt  := cPrpArt
      cOldCodArt  := cCodArt
      cOldLotArt  := aTmp[ 45 ]
      dOldFecCad  := dFechaCaducidad





      if empty( aTmp[ 6 ] ) .OR. RolesModel():getRolCambiarPrecios( Auth():rolUuid() )

         if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
            aGet[ 6 ]:HardEnable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 8  ] )
            aGet[ 8  ]:HardEnable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 7 ] )
             aGet[ 7 ]:HardEnable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
            aGet[ 9    ]:HardEnable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 10 ] )
            aGet[ 10 ]:HardEnable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 33 ] )
             aGet[ 33 ]:HardEnable()
         end

      else

         if !empty( aGet ) .AND. !empty( aGet[ 6 ] )
            aGet[ 6 ]:HardDisable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 8  ] )
            aGet[ 8  ]:HardDisable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 7 ] )
             aGet[ 7 ]:HardEnable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 9 ] )
            aGet[ 9 ]:HardDisable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 10 ] )
            aGet[ 10 ]:HardDisable()
         end

         if !empty( aGet ) .AND. !empty( aGet[ 33 ] )
             aGet[ 33 ]:HardEnable()
         end

      end

      CursorWE()

   else

      MsgStop( "artículo no encontrado" )

      Return .F.

   end

RETURN .T.







STATIC FUNCTION SaveDeta( aTmp, aTmpFac, aGet, oBrw, oDlg, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, oTotal, oStkAct, nStkAct, cCodArt, oBtn, oBtnSer, oSayLote, oSayParKit )

   local n
   local i
   local nRec
   local aClo
   local nTotUnd                 := 0
   local hAtipica
   local lBeforeAppendEvent
   local nPrecioPropiedades      := 0
   local oBrwProperties          := BrowseProperties():getInstance()

   if !empty( oBtn )
      oBtn:SetFocus()
   end

















   aTmp[ 40 ]  := aTmpFac[ 61 ]

   if empty( aTmp[ 39 ] ) .AND. !empty( aGet ) .AND. !empty( aGet[ 39 ] )
      MsgStop( "Código de almacen no puede estar vacio" )
      aGet[ 39 ]:SetFocus()
      return .F.
   end

   if !empty( aGet ) .AND. !empty( aGet[ 39 ] ) .AND. !cAlmacen( aGet[ 39 ], dbfAlm )
      return .F.
   end



   if lPrecioMinimo( aTmp[ 4 ], aTmp[ 6 ], nMode, D():Articulos( nView ) )
      msgStop( "El precio de venta es inferior al precio mínimo.")
      return .F.

   end




   if ( nMode == 1 ) .AND. RetFld( aTmp[ 4 ], D():Articulos( nView ), "lNumSer" ) .AND. !( dbfTmpSer )->( dbSeek( str( aTmp[ 35 ], 4 ) + aTmp[ 4 ] ) )
      msgStop( "Tiene que introducir números de serie para este artículo." )
      if !empty( oBtnSer )
         oBtnSer:Click()
      end
      RETURN .F.
   end



   if isAppendOrDuplicateMode( nMode )
      if isfalse( runEventScript( "FacturasClientes\Lineas\beforeAppend", aTmp, aTmpFac, nView, dbfTmpLin ) )
         RETURN .F.
      end
   end

   aTmp[ 103 ]  := cTipoCtrCoste



   aClo              := aClone( aTmp )



   if nMode == 5

      nRec     := ( dbfTmpLin )->( recno() )

      ( dbfTmpLin )->( dbGoTop() )
      while !( dbfTmpLin )->( eof() )

         if ( dbfTmpLin )->lSel
            aEval( aTmp, {| cFld, n | if( !empty( aTmp[ n ] ), ( dbfTmpLin )->( FieldPut( n, aTmp[ n ] ) ), ) } )
         end

         ( dbfTmpLin )->( dbSkip() )

      end

      ( dbfTmpLin )->( dbGoTo( nRec ) )

      oBrw:Refresh()

      oDlg:end( 1 )

      RETURN nil

   end



   if !empty( aTmp[ 4 ] ) .AND. ( aTmp[ 52 ] .OR. aTmp[ 51 ] )

      nTotUnd     := nTotNFacCli( aTmp )

      if nMode == 2
         nTotUnd  -= nTotNFacCli( dbfTmpLin )
      end

      if !lCompruebaStock( aTmp, oStock, nTotUnd, nStkAct )
         return nil
      end































   end

   if aTmp[ 57 ] == 0
      aTmp[ 57 ]     := nPReq( dbfIva, aTmp[ 11 ] )
   end

   if !( "TABLET" $ appParamsMain() )

      if nMode == 1

         if aTmp[ 43 ]
            saveLoteActual( aTmp[ 4 ], aTmp[ 45 ], nView )
         end

         if !empty( oBrwProperties )

            if !empty( oBrwProperties:Cargo )

               for n := 1 to len( oBrwProperties:Cargo )

                  for i := 1 to len( oBrwProperties:Cargo[ n ] )

                    if !Empty( oBrwProperties:Cargo[ n, i ] )

                        if isNum( oBrwProperties:Cargo[ n, i ]:Value ) .AND. oBrwProperties:Cargo[ n, i ]:Value <> 0

                            aTmp[ 35 ]     := nLastNum( dbfTmpLin )
                            aTmp[ 102 ]   := nLastNum( dbfTmpLin, "nPosPrint" )
                            aTmp[ 19]     := oBrwProperties:Cargo[ n, i ]:Value
                            aTmp[ 28 ]     := oBrwProperties:Cargo[ n, i ]:cCodigoPropiedad1
                            aTmp[ 30 ]     := oBrwProperties:Cargo[ n, i ]:cValorPropiedad1
                            aTmp[ 29 ]     := oBrwProperties:Cargo[ n, i ]:cCodigoPropiedad2
                            aTmp[ 31 ]     := oBrwProperties:Cargo[ n, i ]:cValorPropiedad2



                            nPrecioPropiedades   := nPrePro( aTmp[ 4 ], aTmp[ 28 ], aTmp[ 30 ], aTmp[ 29 ], aTmp[ 31 ], aTmp[ 77 ], aTmpFac[ 61 ], dbfArtDiv, dbfTarPreL, aTmpFac[ 22 ] )
                            if !empty( nPrecioPropiedades )
                               aTmp[ 6 ] := nPrecioPropiedades
                            end



                            saveDetail( aTmp, aClo, aGet, aTmpFac, dbfTmpLin, oBrw, nMode )

                        end

                    end

                  next

               next

               aCopy( dbBlankRec( dbfTmpLin ), aTmp )

               aEval( aGet, {| o, i | if( "GET" $ o:ClassName(), o:cText( aTmp[ i ] ), ) } )

            else

               saveDetail( aTmp, aClo, aGet, aTmpFac, dbfTmpLin, oBrw, nMode )

            end

         end

      else

         saveDetail( aTmp, aClo, aGet, aTmpFac, dbfTmpLin, oBrw, nMode )

      end

   else

      WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

   end





   if nMode == 1
      oLinDetCamposExtra:SaveTemporalAppend( ( dbfTmpLin )->( OrdKeyNo() ) )
   end





  if !empty( bmpImage )
      bmpImage:Hide()
      PalBmpFree( bmpImage:hBitmap, bmpImage:hPalette )
   end

   cOldCodArt        := ""
   cOldUndMed        := ""

   if nMode == 1 .AND. lEntCon()

      recalculaTotal( aTmpFac )

      aCopy( dbBlankRec( dbfTmpLin ), aTmp )

      if !empty( aGet )
         aeval( aGet, {| o, i | if( "GET" $ o:ClassName(), o:cText( aTmp[ i ] ), ) } )
      end

      setDlgMode( aTmp, aGet, oFld, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nMode, oTotal, aTmpFac, , oSayLote, oSayParKit )

      sysRefresh()

      if !empty( aGet ) .AND. !empty( aGet[ 4 ] )
         aGet[ 4 ]:SetFocus()
      end

   else

      if !empty( oDlg )
         oDlg:end( 1 )
      end

   end

RETURN nil



Static Function lCompruebaStock( uTmpLin, oStock, nTotalUnidades, nStockActual, lMsg )

   local cCodigoArticulo
   local cCodigoAlmacen
   local lNotVta
   local lMsgVta
   local nStockAct

   If( lMsg == nil, lMsg := .T., ) ;

   do case
      case ValType( uTmpLin ) == "A"

         cCodigoArticulo   := uTmpLin[ 4 ]
         cCodigoAlmacen    := uTmpLin[ 39 ]
         lNotVta           := uTmpLin[ 52 ]
         lMsgVta           := uTmpLin[ 51 ]

         if empty( nStockActual )
            nStockActual   := StocksModel():nStockArticulo( uTmpLin[ 4 ], uTmpLin[ 39 ], uTmpLin[ 28 ], uTmpLin[ 29 ], uTmpLin[ 30 ], uTmpLin[ 31 ], uTmpLin[ 45 ] )
         end

         nStockAct           := StocksModel():nGlobalStockArticulo( uTmpLin[ 4 ] )

      case ValType( uTmpLin ) == "C"

         cCodigoArticulo   := ( uTmpLin )->cRef
         cCodigoAlmacen    := ( uTmpLin )->cAlmLin
         lNotVta           := ( uTmpLin )->lNotVta
         lMsgVta           := ( uTmpLin )->lMsgVta

         if empty( nStockActual )
            nStockActual   := StocksModel():nStockArticulo( ( uTmpLin )->cRef, ( uTmpLin )->cAlmLin, ( uTmpLin )->cCodPr1, ( uTmpLin )->cCodPr2, ( uTmpLin )->cValPr1, ( uTmpLin )->cValPr2, ( uTmpLin )->cLote )
         end

         nStockAct           := StocksModel():nGlobalStockArticulo( ( uTmpLin )->cRef )

   end

   if nTotalUnidades <> 0

      do case
         case ( nStockActual - nTotalUnidades ) < 0

            if lNotVta
               if lMsg
                  msgStop( "No hay stock suficiente, tenemos " + Alltrim( Trans( nStockActual, MasUnd() ) ) + " unidad(es) disponible(s)," + Chr(13)+Chr(10) + "en almacén " + AllTrim( cCodigoAlmacen ) + " de este lote o propiedades." + Chr(13)+Chr(10) + " Hay " + AllTrim( Trans( nStockAct, MasUnd() ) ) + " unidades totales seleccionando otras opciones."  )
               end
               return .F.
            end

            if lMsgVta
               if lMsg
                  Return ApoloMsgNoYes( "No hay stock suficiente, tenemos " + Alltrim( Trans( nStockActual, MasUnd() ) ) + " unidad(es) disponible(s)," + Chr(13)+Chr(10) + " en almacén " + AllTrim( cCodigoAlmacen ) + " de este lote o propiedades." + Chr(13)+Chr(10) + " Hay " + AllTrim( Trans( nStockAct, MasUnd() ) ) + " unidades totales seleccionando otras opciones." , "¿Desea continuar?" )
               else
                  Return .F.
               end
            end

         case ( nStockAct - nTotalUnidades ) < nStockMinimo( cCodigoArticulo, cCodigoAlmacen, nView )

            if lMsgVta
               if lMsg
                  Return ApoloMsgNoYes( "El stock está por debajo del mínimo.", "¿Desea continuar?" )
               else
                  Return .F.
               end
            end

      end

   end

Return .T.



Static Function saveDetail( aTmp, aClo, aGet, aTmpFac, dbfTmpLin, oBrw, nMode )

   local hAtipica
   local sOfertaArticulo
   local nCajasGratis         := 0
   local nUnidadesGratis      := 0



   hAtipica                   := hAtipica( hValue( aTmp, aTmpFac ) )
   if !empty( hAtipica )

      if hhaskey( hAtipica, "nCajasGratis" ) .AND. hget( hAtipica, "nCajasGratis" ) <> 0
         nCajasGratis         := hget( hAtipica, "nCajasGratis" )
      end
      if hhaskey( hAtipica, "nUnidadesGratis" ) .AND. hget( hAtipica, "nUnidadesGratis" ) <> 0
         nUnidadesGratis      := hget( hAtipica, "nUnidadesGratis" )
      end
   end



   if empty( nCajasGratis ) .AND. empty( nUnidadesGratis )
      sOfertaArticulo         := structOfertaArticulo( D():getHashArray( aTmpFac, "FacCliT", nView ), D():getHashArray( aTmp, "FacCliL", nView ), nTotLFacCli( aTmp ), nView )
      if !empty( sOfertaArticulo )
         nCajasGratis         := sOfertaArticulo:nCajasGratis
         nUnidadesGratis      := sOfertaArticulo:nUnidadesGratis
      end
   end



   if nCajasGratis <> 0
      aTmp[ 82 ]        := .T.
      aTmp[ 12 ]        -= nCajasGratis
      commitDetail( aTmp, aClo, nil, aTmpFac, dbfTmpLin, oBrw, nMode )

      aTmp[ 82 ]        := .T.
      aTmp[ 12 ]        := nCajasGratis
      aTmp[ 6]        := 0
      aTmp[ 9    ]        := 0
      aTmp[ 33 ]        := 0
      aTmp[ 10 ]        := 0
      aTmp[ 18 ]        := 0
   end



   if nUnidadesGratis <> 0
      aTmp[ 82 ]        := .T.
      aTmp[ 19]        -= nUnidadesGratis

      commitDetail( aTmp, aClo, nil, aTmpFac, dbfTmpLin, oBrw, nMode )

      aTmp[ 82 ]        := .T.
      aTmp[ 19]        := nUnidadesGratis
      aTmp[ 6]        := 0
      aTmp[ 9    ]        := 0
      aTmp[ 33 ]        := 0
      aTmp[ 10 ]        := 0
      aTmp[ 18 ]        := 0
   end

   commitDetail( aTmp, aClo, aGet, aTmpFac, dbfTmpLin, oBrw, nMode )

Return nil



Static Function commitDetail( aTmp, aClo, aGet, aTmpFac, dbfTmpLin, oBrw, nMode )

   winGather( aTmp, aGet, dbfTmpLin, oBrw, nMode, nil, .F. )

   appendAsociado( aClo, aTmpFac )

   if ( nMode == 1 ) .AND. ( aClo[ 47 ] )
      appendKit( aClo, aTmpFac )
   end

Return nil



STATIC FUNCTION appendAsociado( uTmpLin, aTmpFac )

   local cCodArt
   local cSerFac
   local nNumFac
   local cSufFac
   local nCanEnt
   local dFecFac
   local cTipMov
   local cAlmLin
   local nIvaLin
   local lIvaLin
   local nComAge
   local nUniCaj
   local nDtoGrl
   local nDtoPrm
   local nDtoDiv
   local cNumPed
   local nTarLin
   local nRecAct                       := ( ( D():Asociado( nView ) ) )->( RecNo() )
   local nRecLin                       := ( dbfTmpLin )->( RecNo() )
   local nNumLin                       := ( dbfTmpLin )->nNumLin
   local nPosPrint
   local nUnidades                     := 0
   local nStkActual                    := 0
   local nStockMinimo                  := 0
   local nOrdAnt                         := ( D():Asociado( nView ) )->( OrdSetFocus( "cCodArt" ) )

   if isArray( uTmpLin )
      cCodArt                          := uTmpLin[ 4    ]
      cSerFac                          := uTmpLin[ 1  ]
      nNumFac                          := uTmpLin[ 2 ]
      cSufFac                          := uTmpLin[ 3 ]
      nCanEnt                          := uTmpLin[ 12 ]
      dFecFac                          := uTmpLin[ 21  ]
      cTipMov                          := uTmpLin[ 22 ]
      cAlmLin                          := uTmpLin[ 39 ]
      nIvaLin                          := uTmpLin[ 11    ]
      lIvaLin                          := uTmpLin[ 40 ]
      nComAge                          := uTmpLin[ 18 ]
      nUniCaj                          := uTmpLin[ 19]
      nDtoGrl                          := uTmpLin[ 9    ]
      nDtoPrm                          := uTmpLin[ 10 ]
      nDtoDiv                          := uTmpLin[ 33 ]
      nNumLin                          := uTmpLin[ 35 ]
      nPosPrint                        := uTmpLin[ 102 ]
      nTarLin                          := uTmpLin[ 77 ]
   else
      cCodArt                          := ( uTmpLin )->cRef
      cSerFac                          := ( uTmpLin )->cSerie
      nNumFac                          := ( uTmpLin )->nNumFac
      cSufFac                          := ( uTmpLin )->cSufFac
      nCanEnt                          := ( uTmpLin )->nCanEnt
      dFecFac                          := ( uTmpLin )->dFecha
      cTipMov                          := ( uTmpLin )->cTipMov
      cAlmLin                          := ( uTmpLin )->cAlmLin
      nIvaLin                          := ( uTmpLin )->nIva
      lIvaLin                          := ( uTmpLin )->lIvaLin
      nComAge                          := ( uTmpLin )->nComAge
      nUniCaj                          := ( uTmpLin )->nUniCaja
      nDtoGrl                          := ( uTmpLin )->nDto
      nDtoPrm                          := ( uTmpLin )->nDtoPrm
      nDtoDiv                          := ( uTmpLin )->nDtoDiv
      nNumLin                          := ( uTmpLin )->nNumLin
      nPosPrint                        := ( uTmpLin )->nPosPrint
      nTarLin                          := ( uTmpLin )->nTarLin
   end





   if ( D():Asociado( nView ) )->( dbSeek( cCodArt ) )

      while ( D():Asociado( nView ) )->cCodArt == cCodArt .AND. !( D():Asociado( nView ) )->( eof() )

         if ( D():Articulos( nView ) )->( dbSeek( ( D():Asociado( nView ) )->cRefAsc ) )

            ( dbfTmpLin )->( dbAppend() )

            ( dbfTmpLin )->nNumLin     := nNumLin
            ( dbfTmpLin )->nPosPrint   := nPosPrint

            ( dbfTmpLin )->nNumKit     := nLastNum( dbfTmpLin, "nNumKit" )
            ( dbfTmpLin )->cRef        := ( D():Asociado( nView ) )->cRefAsc
            ( dbfTmpLin )->cDetalle    := ( D():Articulos( nView ) )->Nombre
            ( dbfTmpLin )->nPntVer     := ( D():Articulos( nView ) )->nPntVer1
            ( dbfTmpLin )->nPesokg     := ( D():Articulos( nView ) )->nPesoKg
            ( dbfTmpLin )->cPesokg     := ( D():Articulos( nView ) )->cUndDim
            ( dbfTmpLin )->cUnidad     := ( D():Articulos( nView ) )->cUnidad
            ( dbfTmpLin )->nVolumen    := ( D():Articulos( nView ) )->nVolumen
            ( dbfTmpLin )->cVolumen    := ( D():Articulos( nView ) )->cVolumen
            ( dbfTmpLin )->nCtlStk     := ( D():Articulos( nView ) )->nCtlStock
            ( dbfTmpLin )->nPvpRec     := ( D():Articulos( nView ) )->PvpRec
            ( dbfTmpLin )->cCodImp     := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->lLote       := ( D():Articulos( nView ) )->lLote
            ( dbfTmpLin )->cLote       := ( D():Articulos( nView ) )->cLote

            ( dbfTmpLin )->nCosDiv     := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpFac[ 7 ] )





            ( dbfTmpLin )->cCodFam     := ( D():Articulos( nView ) )->Familia
            ( dbfTmpLin )->cGrpFam     := cGruFam( ( dbfTmpLin )->cCodFam, dbfFamilia )





            ( dbfTmpLin )->cSerie      := cSerFac
            ( dbfTmpLin )->nNumFac     := nNumFac
            ( dbfTmpLin )->cSufFac     := cSufFac
            ( dbfTmpLin )->nCanEnt     := nCanEnt
            ( dbfTmpLin )->dFecha      := dFecFac
            ( dbfTmpLin )->cTipMov     := cTipMov
            ( dbfTmpLin )->cAlmLin     := cAlmLin
            ( dbfTmpLin )->lIvaLin     := lIvaLin





            ( dbfTmpLin )->nUniCaja    := nUniCaj * ( D():Asociado( nView ) )->nUndAsc





            ( dbfTmpLin )->nIva     := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
            ( dbfTmpLin )->nReq     := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )





            ( dbfTmpLin )->nPreUnit := nRetPreArt( nTarLin, aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )





            ( dbfTmpLin )->nCtlStk  := ( D():Articulos( nView ) )->nCtlStock

         end

         ( D():Asociado( nView ) )->( dbSkip() )

      end

   end

   ( D():Asociado( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():Asociado( nView ) )->( dbGoTo( nRecAct ) )
   ( dbfTmpLin )->( dbGoTo( nRecLin ) )

RETURN NIL



STATIC FUNCTION AppendKit( uTmpLin, aTmpFac )

   local cCodArt
   local cSerFac
   local nNumFac
   local cSufFac
   local nCanEnt
   local dFecFac
   local cTipMov
   local cAlmLin
   local nIvaLin
   local lIvaLin
   local nComAge
   local nUniCaj
   local nDtoGrl
   local nDtoPrm
   local nDtoDiv
   local cNumPed
   local nTarLin
   local nRecAct                       := ( dbfKit    )->( RecNo() )
   local nRecLin                       := ( dbfTmpLin )->( RecNo() )
   local nNumLin                       := ( dbfTmpLin )->nNumLin
   local nPosPrint
   local nUnidades                     := 0
   local nStkActual                    := 0
   local nStockMinimo                  := 0
   local cIdParKit
   local aListaKits                    := {}
   local hKit

   if isArray( uTmpLin )
      cCodArt                          := uTmpLin[ 4    ]
      cSerFac                          := uTmpLin[ 1  ]
      nNumFac                          := uTmpLin[ 2 ]
      cSufFac                          := uTmpLin[ 3 ]
      nCanEnt                          := uTmpLin[ 12 ]
      dFecFac                          := uTmpLin[ 21  ]
      cTipMov                          := uTmpLin[ 22 ]
      cAlmLin                          := uTmpLin[ 39 ]
      nIvaLin                          := uTmpLin[ 11    ]
      lIvaLin                          := uTmpLin[ 40 ]
      nComAge                          := uTmpLin[ 18 ]
      nUniCaj                          := uTmpLin[ 19]
      nDtoGrl                          := uTmpLin[ 9    ]
      nDtoPrm                          := uTmpLin[ 10 ]
      nDtoDiv                          := uTmpLin[ 33 ]
      nNumLin                          := uTmpLin[ 35 ]
      nPosPrint                        := uTmpLin[ 102 ]
      nTarLin                          := uTmpLin[ 77 ]
      cIdParKit                        := uTmpLin[ 112 ]
   else
      cCodArt                          := ( uTmpLin )->cRef
      cSerFac                          := ( uTmpLin )->cSerie
      nNumFac                          := ( uTmpLin )->nNumFac
      cSufFac                          := ( uTmpLin )->cSufFac
      nCanEnt                          := ( uTmpLin )->nCanEnt
      dFecFac                          := ( uTmpLin )->dFecha
      cTipMov                          := ( uTmpLin )->cTipMov
      cAlmLin                          := ( uTmpLin )->cAlmLin
      nIvaLin                          := ( uTmpLin )->nIva
      lIvaLin                          := ( uTmpLin )->lIvaLin
      nComAge                          := ( uTmpLin )->nComAge
      nUniCaj                          := ( uTmpLin )->nUniCaja
      nDtoGrl                          := ( uTmpLin )->nDto
      nDtoPrm                          := ( uTmpLin )->nDtoPrm
      nDtoDiv                          := ( uTmpLin )->nDtoDiv
      nNumLin                          := ( uTmpLin )->nNumLin
      nPosPrint                        := ( uTmpLin )->nPosPrint
      nTarLin                          := ( uTmpLin )->nTarLin
      cIdParKit                        := ( uTmpLin )->cIdParKit
   end





   if !Empty( cIdParKit )

           aListaKits         := EscandallosArticuloModel():getListByUuid( ListaEscandallosModel():getUuidFromName( cIdParKit ) )

           for each hKit in aListaKits

               if ( D():Articulos( nView ) )->( dbSeek( hGet( hKit, "CREFKIT" ) ) )

                ( dbfTmpLin )->( dbAppend() )

                ( dbfTmpLin )->nNumLin     := nNumLin
                ( dbfTmpLin )->nPosPrint   := nPosPrint
                ( dbfTmpLin )->lKitChl     := .T.

                ( dbfTmpLin )->nNumKit     := nLastNum( dbfTmpLin, "nNumKit" )
                ( dbfTmpLin )->cRef        := hGet( hKit, "CREFKIT" )
                ( dbfTmpLin )->cDetalle    := ( D():Articulos( nView ) )->Nombre
                ( dbfTmpLin )->nPntVer     := ( D():Articulos( nView ) )->nPntVer1
                ( dbfTmpLin )->nPesokg     := ( D():Articulos( nView ) )->nPesoKg
                ( dbfTmpLin )->cPesokg     := ( D():Articulos( nView ) )->cUndDim
                ( dbfTmpLin )->cUnidad     := ( D():Articulos( nView ) )->cUnidad
                ( dbfTmpLin )->nVolumen    := ( D():Articulos( nView ) )->nVolumen
                ( dbfTmpLin )->cVolumen    := ( D():Articulos( nView ) )->cVolumen
                ( dbfTmpLin )->nCtlStk     := ( D():Articulos( nView ) )->nCtlStock
                ( dbfTmpLin )->nPvpRec     := ( D():Articulos( nView ) )->PvpRec
                ( dbfTmpLin )->cCodImp     := ( D():Articulos( nView ) )->cCodImp
                ( dbfTmpLin )->lLote       := ( D():Articulos( nView ) )->lLote
                ( dbfTmpLin )->cLote       := ( D():Articulos( nView ) )->cLote

                ( dbfTmpLin )->nCosDiv     := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpFac[ 7 ] )
                ( dbfTmpLin )->nValImp     := oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp )

                if ( D():Articulos( nView ) )->lFacCnv
                   ( dbfTmpLin )->nFacCnv  := ( D():Articulos( nView ) )->nFacCnv
                end





                ( dbfTmpLin )->cCodFam     := ( D():Articulos( nView ) )->Familia
                ( dbfTmpLin )->cGrpFam     := cGruFam( ( dbfTmpLin )->cCodFam, dbfFamilia )





                ( dbfTmpLin )->cSerie      := cSerFac
                ( dbfTmpLin )->nNumFac     := nNumFac
                ( dbfTmpLin )->cSufFac     := cSufFac
                ( dbfTmpLin )->nCanEnt     := nCanEnt
                ( dbfTmpLin )->dFecha      := dFecFac
                ( dbfTmpLin )->cTipMov     := cTipMov
                ( dbfTmpLin )->cAlmLin     := cAlmLin
                ( dbfTmpLin )->lIvaLin     := lIvaLin





                ( dbfTmpLin )->lImpLin     := lImprimirComponente( cCodArt, D():Articulos( nView ) )
                ( dbfTmpLin )->lKitPrc     := lPreciosComponentes( cCodArt, D():Articulos( nView ) )

                ( dbfTmpLin )->nComAge     := nComAge
                ( dbfTmpLin )->nUniCaja    := nUniCaj * hGet( hKit, "NUNDKIT" )





                if !empty( nIvaLin )
                   ( dbfTmpLin )->nIva     := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
                   ( dbfTmpLin )->nReq     := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
                else
                   ( dbfTmpLin )->nIva     := 0
                   ( dbfTmpLin )->nReq     := 0
                end





                if ( dbfTmpLin )->lKitPrc
                   ( dbfTmpLin )->nPreUnit := nRetPreArt( nTarLin, aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )
                end





                if lStockComponentes( cCodArt, D():Articulos( nView ) )
                   ( dbfTmpLin )->nCtlStk  := ( D():Articulos( nView ) )->nCtlStock
                else
                   ( dbfTmpLin )->nCtlstk  := 3
                end





                if ( dbfKit )->lAplDto
                   ( dbfTmpLin )->nDto     := nDtoGrl
                   ( dbfTmpLin )->nDtoPrm  := nDtoPrm
                   ( dbfTmpLin )->nDtoDiv  := nDtoDiv
                end









            end

           next

       end


























































































































































   ( dbfKit    )->( dbGoTo( nRecAct ) )
   ( dbfTmpLin )->( dbGoTo( nRecLin ) )

RETURN NIL



STATIC FUNCTION lMoreIva( nCodIva )

   IF aTotIva[ 1, 3 ] == nil .OR. aTotIva[ 2, 3 ] == nil .OR. aTotIva[ 3, 3 ] == nil
      RETURN .T.
   end

   IF aTotIva[ 1, 3 ] == nCodIva .OR. aTotIva[ 2, 3 ] == nCodIva .OR. aTotIva[ 3, 3 ] == nCodIva
      RETURN .T.
   end

   MsgStop( "Factura con más de 3 tipos de " + cImp() )

RETURN .F.







STATIC FUNCTION EdtDeta( oBrwDet, bEdtDet, aTmp, lTot, nFacMod )

   if lRecibosPagadosTmp( dbfTmpPgo )
      MsgStop( "No se pueden modificar registros a una factura con recibos cobrados" )
      return .F.
   end






   if ( dbfTmpLin )->lSel
      WinMulRec( oBrwDet, bEdtDet, dbfTmpLin, lTot, nFacMod, aTmp )
   else
      WinEdtRec( oBrwDet, bEdtDet, dbfTmpLin, lTot, nFacMod, aTmp )
   end










RETURN ( RecalculaTotal( aTmp ) )







STATIC FUNCTION DelDeta()








   CursorWait()

   while ( dbfTmpSer )->( dbSeek( str( ( dbfTmpLin )->nNumLin, 4 ) ) )
      ( dbfTmpSer )->( dbDelete() )
   end

   if ( dbfTmpLin )->lKitArt
      dbDelKit( , dbfTmpLin, ( dbfTmpLin )->nNumLin )
   end

   CursorWE()

RETURN .T.







STATIC FUNCTION EndTrans( aTmp, aGet, oBrw, oBrwDet, oBrwPgo, aNumAlb, nMode, oDlg )

   local n
   local nOrd
   local oError
   local oBlock
   local cSerFac
   local nNumFac
   local nNumNFC
   local cSufFac
   local cNumPed
   local cNumAlb
   local dFecFac
   local cCodCli
   local tFecFac
   local cUuid

   if empty( aTmp[ 1 ] )
      aTmp[ 1 ]   := "A"
   end

   cSerFac              := aTmp[ 1  ]
   nNumFac              := aTmp[ 2 ]
   cSufFac              := aTmp[ 3 ]
   cNumPed              := aTmp[ 40 ]
   cNumAlb              := aTmp[ 39 ]
   dFecFac              := aTmp[ 6 ]
   tFecFac              := aTmp[ 129 ]
   cCodCli              := aTmp[ 7 ]
   cUuid                 := aTmp[ 4 ]





   if !lValidaOperacion( aTmp[ 6 ] )
      Return .F.
   end

   if !lValidaSerie( aTmp[ 1 ] )
      Return .F.
   end

   if lClienteBloqueado( aGet )
      Return .F.
   end





   if lNombreVacio( aGet, aTmp[ 10 ] )
      Return .F.
   end

   if empty( aTmp[ 16 ] )
      msgStop( "D.N.I. / C.I.F. de cliente no puede estar vacío." )
      if !empty( aGet[ 16 ] )
         aGet[ 16 ]:SetFocus()
      end
      return .F.
   end

   if empty( aTmp[ 11 ] )
      msgStop( "Domicilio de cliente no puede estar vacío." )
      if !empty( aGet[ 11 ] )
         aGet[ 11 ]:SetFocus()
      end
      return .F.
   end

   if lAlmacenVacio( aGet, aTmp[ 8 ] )
      Return .F.
   end

   if lFormaPagoVacia( aGet, aTmp[ 34 ] )
      Return .F.
   end

   if lDivisaVacia( aGet, aTmp[ 63 ] )
      Return .F.
   end

   if nTotFac > 0

       if !lFormaPagoCobrado( aTmp[ 34 ], D():FormasPago( nView ) )
          if lClienteRiesgoAlcanzado( aTmp[ 7 ], oStock, D():Clientes( nView ), nTotFac, nMode )
             msgStop( "Este cliente supera el limite de riesgo permitido." )
             if !empty( aGet[ 7 ] )
                aGet[ 7 ]:SetFocus()
             end
             return .F.
          end
       end

   end

    if lLimitDaysPendiente( aTmp[ 7 ] ) .AND. ( aTmp[ 34 ] <> "00" .AND. aTmp[ 34 ] <> "CO" )
        msgStop( "Este cliente supera el limite de días de facturas pendientes." )
        if !empty( aGet[ 7 ] )
            aGet[ 7 ]:SetFocus()
        end
        return .F.
    end

   if empty( aTmp[ 20 ] ) .AND. lRecogerAgentes()
      msgStop( "Agente no puede estar vacío." )
      if !empty( aGet[ 20 ] )
         aGet[ 20 ]:SetFocus()
      end
      return .F.
   end

   if empty( aTmp[ 23 ] ) .AND. lObras() .AND. ( ClientesDireccionesModel():nCount( aTmp[ 7 ] ) > 0 )
      MsgStop( "Debe de introducir una obra." )
      if !empty( aGet[ 23 ] )
         aGet[ 23 ]:SetFocus()
      end
      return .F.
   end

   if lLineasVacias()
      return .F.
   end

   if lPasNil() .AND. ( nMode == 1 .OR. nMode == 4 )

      ( dbfTmpLin )->( dbGoTop() )
      while !( dbfTmpLin )->( eof() )

         if !( dbfTmpLin )->lControl .AND. ( dbfTmpLin )->nPreUnit == 0 .AND. !( dbfTmpLin )->lKitPrc
            if !ApoloMsgNoYes( "El artículo " + Rtrim( ( dbfTmpLin )->cRef ) + " - " + Rtrim( Descrip( dbfTmpLin ) ) + " no esta valorado.", "¿ Desea continuar archivando la factura ?" )
               return .F.
            end
         end

         ( dbfTmpLin )->( dbSkip() )

      end

   end



   DisableAcceso()



   if isAppendOrDuplicateMode( nMode )
      if isfalse( runEventScript( "FacturasClientes\beforeAppend", aTmp, dbfTmpLin ) )
         return .F.
      end
   end

   if isEditMode( nMode )
      if isfalse( runEventScript( "FacturasClientes\beforeEdit", aTmp, dbfTmpLin ) )
         return .F.
      end
   end

   aTmp[ 83 ]        := Date()
   aTmp[ 84 ]        := Time()
   aTmp[ 19 ]        := oGetTarifa:getTarifa()
   aTmp[ 94 ]      := ( !empty( oTipFac ) .AND. oTipFac:nAt == 2 )

   oDlg:Disable()

   TComercio:resetProductsToUpdateStocks()




      oMsgText( "Archivando" )

      if !empty( oMeter )
         oMeter:Set( 1 )
      end



      ( dbfTmpLin )->( dbClearFilter() )



      if isAppendOrDuplicateMode( nMode )

         oMsgText( "Obteniendo nuevo contador" )

         if !empty( oMeter )
            oMeter:set( 2 )
         end



         nNumFac              := nNewDoc( cSerFac, D():FacturasClientes( nView ), "NFACCLI", , D():Contadores( nView ) )
         aTmp[ 2 ]     := nNumFac
         cSufFac              := retSufEmp()
         aTmp[ 3 ]     := cSufFac
         aTmp[ 30 ]     := !empty( aNumAlb )

      end

      begintransaction()

      if isEditMode( nMode )
         rollBackFacCli( cSerFac + str( nNumFac ) + cSufFac )
      end







      GuardaTemporalesFacCli( cSerFac, nNumFac, cSufFac, dFecFac, tFecFac, cCodCli, aTmp, cUuid )





      oMsgText( "Guardamos los totales" )

      if !empty( oMeter )
         oMeter:Set( 4 )
      end

      aTmp[ 104 ]  := nTotNet
      aTmp[ 106 ]  := nTotIva
      aTmp[ 107 ]  := nTotReq
      aTmp[ 108 ]  := nTotFac
      aTmp[ 105 ]  := nTotSup
      aTmp[ 120 ]  := nTotCob
      aTmp[ 121 ]  := nTotFac - nTotCob



      oMsgText( "Guardamos el documento" )

      if !empty( oMeter )
         oMeter:Set( 4 )
      end





      oDetCamposExtra:saveExtraField( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "" )





      WinGather( aTmp, , D():FacturasClientes( nView ), , nMode )





       if uFieldempresa( "lAddAtp" )

          ( dbfTmpLin )->( dbGoTop() )

          while !( dbfTmpLin )->( Eof() )

            if !Empty( ( dbfTmpLin )->cRef )




                 AtipicasModel():AddArticulo( {   "cCodCli"   => cCodCli, "cCodArt"   => ( dbfTmpLin )->cRef, "cNomArt"   => ( dbfTmpLin )->cDetalle, "nPreUnit"  => ( dbfTmpLin )->nPreUnit } )

            end

             ( dbfTmpLin )->( dbSkip() )

          end

          ( dbfTmpLin )->( dbGoTop() )

       end



      oMsgText( "Actualizamos el estado de los Facturas" )

      if !empty( oMeter )
         oMeter:Set( 5 )
      end

      if len( aNumAlb ) > 0

         for n := 1 to len( aNumAlb )
            if ( dbfAlbCliT )->( dbSeek( aNumAlb[ n ] ) )
               SetFacturadoAlbaranCliente( .T., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS, cSerFac + str( nNumFac ) + cSufFac )
            end
         next

      end





      oMsgText( "Actualizamos el estado de los pedidos" )

      if !empty( oMeter )
         oMeter:Set( 6 )
      end

      if !empty( cNumPed )





         oStock:SetEstadoPedCli( cNumPed, .T., cSerFac + str( nNumFac ) + cSufFac )

         if( dbfPedCliP )->( dbSeek( cNumPed ) )

            while ( dbfPedCliP )->cSerPed + str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .AND. !( dbfPedCliP )->( Eof() )

               if dbLock( dbfPedCliP )
                  ( dbfPedCliP )->lPasado := .T.
                  ( dbfPedCliP )->( dbUnLock() )
               end

               ( dbfPedCliP )->( dbSkip() )

               SysRefresh()

            end

         end

      end





      oMsgText( "Marcamos las entregas de las facturas" )

      if !empty( oMeter )
         oMeter:Set( 7 )
      end

      if !empty( cNumAlb )

         if( dbfAlbCliP )->( dbSeek( cNumAlb ) )

            while ( dbfAlbCliP )->cSerAlb + str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb == cNumAlb .AND. !( dbfAlbCliP )->( Eof() )

               if dbLock( dbfAlbCliP )
                  ( dbfAlbCliP )->lPasado := .T.
                  ( dbfAlbCliP )->( dbUnLock() )
               end

               ( dbfAlbCliP )->( dbSkip() )

               SysRefresh()

            end

         end

      end



      oMsgText( "Finalizamos la transacción" )

      commitTransaction()



      oMsgText( "Generamos los pagos" )

      if !empty( oMeter )
         oMeter:Set( 8 )
      end

      genPgoFacCli( cSerFac + str( nNumFac, 9 ) + cSufFac, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), , D():Clientes( nView ), D():FormasPago( nView ), dbfDiv, dbfIva, nMode )





      oMsgText( "Comprobamos el estado de la factura" )

      if !empty( oMeter )
         oMeter:Set( 9 )
      end

      ChkLqdFacCli( nil, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), , dbfIva, dbfDiv )














   oMsgText( "Cerramos el dialogo" )

   if !empty( oMeter )
      oMeter:Set( 10 )
   end

   TComercio:updateWebProductStocks()

   oDlg:Enable()
   oDlg:End( 1 )

   EnableAcceso()

Return .T.








Static Function runEDIScript( uParam1, uParam2, uParam3, uParam4, uParam5, uParam6, uParam7, uParam8, uParam9, uParam10 )

   runEventScript( "FacturasClientes\EDI", uParam1, uParam2, uParam3, uParam4, uParam5, uParam6, uParam7, uParam8, uParam9, uParam10 )

Return ( nil )



Static Function CreateFileEDI()

   local cCabeceraFactura     := uFieldEmpresa( "cRutEdi" ) + "\" + "SINCC.TXT"
   local cLineaFactura        := uFieldEmpresa( "cRutEdi" ) + "\" + "SINCL.TXT"
   local cVencimientoFactura  := uFieldEmpresa( "cRutEdi" ) + "\" + "SINCV.TXT"
   local cDescuentoFactura    := uFieldEmpresa( "cRutEdi" ) + "\" + "SINCD.TXT"
   local cImpuestosFactura    := uFieldEmpresa( "cRutEdi" ) + "\" + "SINCI.TXT"

   if file( cCabeceraFactura )
      ferase( cCabeceraFactura )
   end
   if file( cLineaFactura )
      ferase( cLineaFactura )
   end
   if file( cVencimientoFactura )
      ferase( cVencimientoFactura )
   end
   if file( cDescuentoFactura )
      ferase( cDescuentoFactura )
   end
   if file( cImpuestosFactura )
      ferase( cImpuestosFactura )
   end

   hCabeceraFactura           := fCreate( cCabeceraFactura     )
   hLineaFactura              := fCreate( cLineaFactura        )
   hVencimientoFactura        := fCreate( cVencimientoFactura  )
   hDescuentoFactura          := fCreate( cDescuentoFactura    )
   hImpuestosFactura          := fCreate( cImpuestosFactura    )

return nil



Static Function CloseFileEDI()

   fClose( hCabeceraFactura      )
   fClose( hLineaFactura         )
   fClose( hVencimientoFactura   )
   fClose( hDescuentoFactura     )
   fClose( hImpuestosFactura     )

return nil



Static Function ExportarEDI( lNoExportados, oTree )

   local oNode
   local nDescuento           := 0
   local nNumeroLinea         := 0
   local cNumeroFactura

   if ( D():FacturasClientes( nView ) )->lExpEdi .AND. lNoExportados
      oNode                   := oTree:Add( "Factura : " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + Alltrim( ( D():FacturasClientes( nView ) )->cSufFac ) + " anteriormente generada.", 1 )
      oTree:Select( oNode )
      Return .F.
   end

   cNumeroFactura             := ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac





   if hCabeceraFactura        <> -1 .AND. hLineaFactura           <> -1 .AND. hVencimientoFactura     <> -1 .AND. hDescuentoFactura       <> -1 .AND. hImpuestosFactura       <> -1

      nTotFacCli( cNumeroFactura, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), dbfIva, dbfDiv, D():FacturasClientesCobros( nView ) )





      ExportaEDICabecera( hCabeceraFactura )





      if !empty( ( D():FacturasClientes( nView ) )->nDtoEsp )
         ExportaEDIDescuentoCabecera( ( D():FacturasClientes( nView ) )->nDtoEsp, nTotDto, ++nDescuento, hDescuentoFactura )
      end

      if !empty( ( D():FacturasClientes( nView ) )->nDpp )
         ExportaEDIDescuentoCabecera( ( D():FacturasClientes( nView ) )->nDpp, nTotDpp, ++nDescuento, hDescuentoFactura )
      end

      if !empty( ( D():FacturasClientes( nView ) )->nDtoAtp )
         ExportaEDIDescuentoCabecera( ( D():FacturasClientes( nView ) )->nDtoAtp, nTotAtp, ++nDescuento, hDescuentoFactura )
      end

      if !empty( ( D():FacturasClientes( nView ) )->nDtoUno )
         ExportaEDIDescuentoCabecera( ( D():FacturasClientes( nView ) )->nDtoUno, nTotUno, ++nDescuento, hDescuentoFactura )
      end

      if !empty( ( D():FacturasClientes( nView ) )->nDtoDos )
         ExportaEDIDescuentoCabecera( ( D():FacturasClientes( nView ) )->nDtoDos, nTotDos, ++nDescuento, hDescuentoFactura )
      end





      ExportaEDIImpuestos( hImpuestosFactura )





      if ( D():FacturasClientesLineas( nView ) )->( dbSeek( cNumeroFactura ) )

         while ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac == cNumeroFactura .AND. !( D():FacturasClientesLineas( nView ) )->( eof() )

            if lValLine( D():FacturasClientesLineas( nView ) )

               ExportaEDILinea( ++nNumeroLinea, hLineaFactura  )

               if ( D():FacturasClientesLineas( nView ) )->nDto <> 0
                  ExportaEDIDescuentoLinea( ( D():FacturasClientesLineas( nView ) )->nDto, nDtoLFacCli( D():FacturasClientesLineas( nView ), nRouDiv, nVdvDiv ), nNumeroLinea, ++nDescuento, hDescuentoFactura  )
               end

               if ( D():FacturasClientesLineas( nView ) )->nDtoPrm <> 0
                  ExportaEDIDescuentoLinea( ( D():FacturasClientesLineas( nView ) )->nDtoPrm, nPrmLFacCli( D():FacturasClientesLineas( nView ), nRouDiv, nVdvDiv ), nNumeroLinea, ++nDescuento, hDescuentoFactura  )
               end

            end

            ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

         end

      end





      nNumeroLinea         := 0

      if ( D():FacturasClientesCobros( nView ) )->( dbSeek( cNumeroFactura ) )

         while ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac == cNumeroFactura .AND. !( D():FacturasClientesCobros( nView ) )->( eof() )

            ExportaEDIRecibo( ++nNumeroLinea, hVencimientoFactura )

            ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

         end

      end





      if dbLock( D():FacturasClientes( nView ) )
         ( D():FacturasClientes( nView ) )->lExpEdi    := .T.
         ( D():FacturasClientes( nView ) )->dFecEdi    := GetSysDate()
         ( D():FacturasClientes( nView ) )->cHorEdi    := Time()
         ( D():FacturasClientesLineas( nView ) )->( dbUnlock() )
      end

      oNode                := oTree:Add( "Factura : " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + Alltrim( ( D():FacturasClientes( nView ) )->cSufFac ) + " ficheros generados.", 1 )

   else

      oNode                := oTree:Add( "Factura : " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + Alltrim( ( D():FacturasClientes( nView ) )->cSufFac ) + " ficheros no generados.", 0 )

   end

   oTree:Select( oNode )

Return .T.



Static Function ExportaEDICabecera( hFicheroFactura )

   local cCabecera         := ""
   local nDescuento        := 0


   cCabecera         += Padr( "380", 6 )
   cCabecera         += Padr( Alltrim( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac) , 17 )
   cCabecera         += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
   cCabecera         += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   cCabecera         += Padr( "", 6 )
   cCabecera         += Padr( Dtos( ( D():FacturasClientes( nView ) )->dFecFac ), 8 )
   cCabecera         += Padr( Dtos( ( D():FacturasClientes( nView ) )->dFecFac ) + Dtos( ( D():FacturasClientes( nView ) )->dFecFac ), 16 )
   cCabecera         += Padr( "42", 6 )
   cCabecera         += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
   cCabecera         += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   if !empty( ( D():FacturasClientes( nView ) )->cCodObr )
      cCabecera      += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli + ( D():FacturasClientes( nView ) )->cCodObr, dbfObrasT, "cCodEdi" ), 13 )
   else
      cCabecera      += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   end
   cCabecera         += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
   cCabecera         += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   cCabecera         += Padr( "", 6 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cSuFac, 17 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cSuAlb, 17 )
   cCabecera         += Padr( "", 3 )
   cCabecera         += Padr( "", 17 )
   cCabecera         += Padr( "", 17 )
   cCabecera         += Padr( "", 17 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cNomCli, 70 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cDirCli, 70 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cPobCli, 35 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cPosCli, 9 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cDniCli, 17 )
   cCabecera         += Padr( uFieldEmpresa( "cDomicilio" ), 70 )
   cCabecera         += Padr( uFieldEmpresa( "cPoblacion" ), 35 )
   cCabecera         += Padr( uFieldEmpresa( "cCodPos" ), 9 )
   cCabecera         += Padr( ( D():FacturasClientes( nView ) )->cDivFac, 6 )
   cCabecera         += Padr( "", 8 )
   cCabecera         += Padl( Trans( nTotNet, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( nTotNet, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( nTotBrt, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( nTotImp, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( nTotFac, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( 0, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( 0, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( nTotDto, "99999999999999.999" ), 18 )
   cCabecera         += Padr( "", 17 )
   cCabecera         += Padr( "", 13 )
   cCabecera         += Padr( "", 17 )
   cCabecera         += Chr(13)+Chr(10)

   fWrite( hFicheroFactura, cCabecera )

Return nil

Static Function ExportaEDILinea( nNumeroLinea, hFicheroFactura )

   local cLinea      := ""


   cLinea            += Padr( "380", 6 )
   cLinea            += Padr( Alltrim( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac) , 17 )
   cLinea            += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
   cLinea            += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   cLinea            += Padl( Trans( nNumeroLinea, "999999" ), 6 )
   cLinea            += Padr( RetFld( ( D():FacturasClientesLineas( nView ) )->cRef, D():Articulos( nView ), "Codebar" ), 15 )
   cLinea            += Padr( if( !empty( ( D():FacturasClientesLineas( nView ) )->cDetalle ), ( D():FacturasClientesLineas( nView ) )->cDetalle, ( D():FacturasClientesLineas( nView ) )->mLngDes ), 35 )
   cLinea            += Padr( "M", 1 )
   cLinea            += Padr( "", 15 )
   cLinea            += Padr( "", 15 )
   cLinea            += Padr( "", 15 )
   cLinea            += Padr( "", 15 )
   cLinea            += Padr( ( D():FacturasClientesLineas( nView ) )->cLote, 15 )
   cLinea            += Padl( Trans( nTotNFacCli( D():FacturasClientesLineas( nView ) ), "999999999999.999" ), 16 )
   cLinea            += Padl( Trans( 0, "999999999999.999" ), 16 )
   cLinea            += Padr( "", 6 )
   cLinea            += Padl( Trans( 0, "999999999999.999" ), 16 )
   cLinea            += Padl( Trans( 0, "999999999999.999" ), 16 )
   cLinea            += Padl( Trans( nTotLFacCli( D():FacturasClientesLineas( nView ), nDouDiv, nRouDiv ), "99999999999999.999" ), 18 )
   cLinea            += Padl( Trans( nTotUFacCli( D():FacturasClientesLineas( nView ), nDouDiv ), "99999999999.999" ), 16 )
   cLinea            += Padl( Trans( nTotPFacCli( D():FacturasClientesLineas( nView ), nDouDiv ), "9999999999.9999" ), 16 )
   cLinea            += Padr( "", 6 )
   cLinea            += Padr( "VAT", 6 )
   cLinea            += Padl( Trans( ( D():FacturasClientesLineas( nView ) )->nIva, "999.99" ), 6 )
   cLinea            += Padl( Trans( 0, "9999999999999.999" ), 18 )
   cLinea            += Padl( Trans( if( ( D():FacturasClientes( nView ) )->lRecargo, ( D():FacturasClientesLineas( nView ) )->nReq, 0 ), cPicReq() ), 6 )
   cLinea            += Padl( Trans( 0, "9999999999999.999" ), 18 )
   cLinea            += Padr( "", 6 )
   cLinea            += Padl( Trans( 0, "999.99" ), 6 )
   cLinea            += Padl( Trans( 0, "9999999999999.999" ), 18 )
   cLinea            += Padr( ( D():FacturasClientes( nView ) )->cNumPed, 17 )
   cLinea            += Padr( ( D():FacturasClientesLineas( nView ) )->cCodAlb, 17 )
   cLinea            += Padl( Trans( 0, "99999999" ), 8 )
   cLinea            += Padr( "", 7 )
   cLinea            += Padl( Trans( nTotLFacCli( D():FacturasClientesLineas( nView ), nDouDiv, nRouDiv, nVdvDiv, .F. ), "99999999999999.999" ), 18 )
   cLinea            += Chr(13)+Chr(10)

   fWrite( hFicheroFactura, cLinea )

Return nil

Static Function ExportaEDIRecibo( nNumeroRecibo, hFicheroFactura )

   local cRecibo     := ""


   cRecibo           += Padr( "380", 6 )
   cRecibo           += Padr( Alltrim( ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac ) , 17 )
   cRecibo           += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
   cRecibo           += Padr( Retfld( ( D():FacturasClientesCobros( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   cRecibo           += Padl( Trans( nNumeroRecibo, "999999" ), 6 )
   cRecibo           += Padr( Dtos( ( D():FacturasClientesCobros( nView ) )->dFecVto ), 8 )
   cRecibo           += Padl( Trans( nTotRecCli( D():FacturasClientesCobros( nView ), dbfDiv ), "999999999999.999" ), 16 )
   cRecibo           += Chr(13)+Chr(10)

   fWrite( hFicheroFactura, cRecibo )

Return nil

Static Function ExportaEDIDescuentoCabecera( nPorcentajeDescuento, nTotalDescuento, nDescuento, hFicheroFactura )

   local cCabecera   := ""


   cCabecera         += Padr( "380", 6 )
   cCabecera         += Padr( Alltrim( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) , 17 )
   cCabecera         += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
   cCabecera         += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   cCabecera         += Padl( Trans( 0, "999999" ), 6 )
   cCabecera         += Padl( Trans( nDescuento, "99" ), 2 )
   cCabecera         += "A"
   cCabecera         += Padl( Trans( nDescuento, "999" ), 3 )
   cCabecera         += Padl( Trans( nPorcentajeDescuento, "9999.9999" ), 9 )
   cCabecera         += Padl( Trans( nTotalDescuento, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( 0, "99999999999999.999" ), 18 )
   cCabecera         += Padl( Trans( 0, "999999999999.999" ), 16 )
   cCabecera         += Padr( "TD", 6 )
   cCabecera         += Padl( Trans( 0, "999999999999.999" ), 16 )
   cCabecera         += Padr( "", 6 )
   cCabecera         += Chr(13)+Chr(10)

  fWrite( hFicheroFactura, cCabecera )

Return nil

Static Function ExportaEDIDescuentoLinea( nPorcentajeDescuento, nTotalDescuento, nLinea, nDescuento, hFicheroFactura )

   local cLinea      := ""


   cLinea            += Padr( "380", 6 )
   cLinea            += Padr( Alltrim( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) , 17 )
   cLinea            += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
   cLinea            += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
   cLinea            += Padl( Trans( nLinea, "999999" ), 6 )
   cLinea            += Padl( Trans( nDescuento, "99" ), 2 )
   cLinea            += "A"
   cLinea            += Padl( Trans( nDescuento, "999" ), 3 )
   cLinea            += Padl( Trans( nPorcentajeDescuento, "9999.9999" ), 9 )
   cLinea            += Padl( Trans( nTotalDescuento, "99999999999999.999" ), 18 )
   cLinea            += Padl( Trans( 0, "99999999999999.999" ), 18 )
   cLinea            += Padl( Trans( 0, "999999999999.999" ), 16 )
   cLinea            += Padr( "TD", 6 )
   cLinea            += Padl( Trans( 0, "999999999999.999" ), 16 )
   cLinea            += Padr( "", 6 )
   cLinea            += Chr(13)+Chr(10)

  fWrite( hFicheroFactura, cLinea )

Return nil

Static Function ExportaEDIImpuestos( hFicheroFactura )

   local nImpuesto   := 0
   local cImpuesto   := ""

   if !empty( aIvaUno[ 3 ] )

      cImpuesto      += Padr( "380", 6 )
      cImpuesto      += Padr( Alltrim( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) , 17 )
      cImpuesto      += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
      cImpuesto      += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
      cImpuesto      += Padl( Trans( ++nImpuesto, "99" ), 2 )
      cImpuesto      += Padr( "VAT", 6 )
      cImpuesto      += Padl( Trans( aIvaUno[ 3 ], "999.99" ), 6 )
      cImpuesto      += Padl( Trans( aIvaUno[ 8 ], "99999999999999.999" ), 18 )
      cImpuesto      += Padl( Trans( aIvaUno[ 2 ], "99999999999999.999" ), 18 )
      cImpuesto      += Chr(13)+Chr(10)
   end

   if !empty( aIvaDos[ 3 ] )

      cImpuesto      += Padr( "380", 6 )
      cImpuesto      += Padr( Alltrim( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) , 17 )
      cImpuesto      += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
      cImpuesto      += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
      cImpuesto      += Padl( Trans( ++nImpuesto, "99" ), 2 )
      cImpuesto      += Padr( "VAT", 6 )
      cImpuesto      += Padl( Trans( aIvaDos[ 3 ], "999.99" ), 6 )
      cImpuesto      += Padl( Trans( aIvaDos[ 8 ], "99999999999999.999" ), 18 )
      cImpuesto      += Padl( Trans( aIvaDos[ 2 ], "99999999999999.999" ), 18 )
      cImpuesto      += Chr(13)+Chr(10)
   end

   if !empty( aIvaTre[ 3 ] )

      cImpuesto      += Padr( "380", 6 )
      cImpuesto      += Padr( Alltrim( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac ) , 17 )
      cImpuesto      += Padr( uFieldEmpresa( "cCodEdi" ), 13 )
      cImpuesto      += Padr( Retfld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cCodEdi" ), 13 )
      cImpuesto      += Padl( Trans( ++nImpuesto, "99" ), 2 )
      cImpuesto      += Padr( "VAT", 6 )
      cImpuesto      += Padl( Trans( aIvaTre[ 3 ], "999.99" ), 6 )
      cImpuesto      += Padl( Trans( aIvaTre[ 8 ], "99999999999999.999" ), 18 )
      cImpuesto      += Padl( Trans( aIvaTre[ 2 ], "99999999999999.999" ), 18 )
      cImpuesto      += Chr(13)+Chr(10)
   end

   fWrite( hFicheroFactura, cImpuesto )

Return nil



static function lChangeEDI( aGet, aTmp )

   if aTmp[ 98 ]
      aGet[ 99 ]:cText( GetSysDate() )
      aGet[ 100 ]:cText( Time() )
   else
      aGet[ 99 ]:cText( Ctod( "" ) )
      aGet[ 100 ]:cText( Space( 5 ) )
   end

Return .T.



Static Function CreateFileFacturae( oTree, lFirmar, lEnviar )

   local a
   local oTax
   local nPago
   local nTotal
   local cNumero
   local nNumero
   local oFactura
   local oDiscount
   local nAnticipo
   local oItemLine
   local oInstallment
   local cCodigoEntidad
   local oAdministrativeCentres
   local nOrdAnt
   local aTotFacCli
   local nDescuentoEstatal     := 0
   local nImpRetencion         := 0

   nNumero              := ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac
   cNumero              := ( D():FacturasClientes( nView ) )->cSerie + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + Rtrim( ( D():FacturasClientes( nView ) )->cSufFac )

   nTotal               := nTotFacCli( nNumero, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), dbfIva, dbfDiv, D():FacturasClientesCobros( nView ) )
   nPago                := nTotalRecibosPagadosFacturasCliente( nNumero, D():FacturasClientes( nView ), D():FacturasClientesCobros( nView ), dbfIva, dbfDiv )
   nAnticipo            := 0






       aTotFacCli          := aTotFacCli(     nNumero,    D():FacturasClientes( nView ),    D():FacturasClientesLineas( nView ),    dbfIva,    dbfDiv,    D():FacturasClientesCobros( nView ) )

       nImpRetencion         := aTotFacCli[12]

       if ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )

           nDescuentoEstatal     := aTotFacCli[14]
           nTotal                 := nTotal + nDescuentoEstatal

       end

   oFactura             := TFacturaElectronica():New( oTree )

   with object ( oFactura )

      :cFicheroOrigen            := cPatXml() + cNumero + ".xml"
      :cFicheroDestino           := cPatXml() + cNumero + ".xsig"





      :cMailServer               := Rtrim( uFieldEmpresa( "cSrvMai" ) )
      :cMailServerPort           := uFieldEmpresa( "nPrtMai" )
      :cMailServerUserName       := Rtrim( uFieldEmpresa( "cCtaMai" ) )
      :cMailServerPassword       := Rtrim( uFieldEmpresa( "cPssMai" ) )





      :cNif                      := uFieldEmpresa( "cNif" )

      :cInvoiceSeriesCode        := ( D():FacturasClientes( nView ) )->cSerie
      :cInvoiceNumber            := alltrim( str( Year( ( D():FacturasClientes( nView ) )->dFecFac ) ) ) + "/"
      :cInvoiceNumber            += ( D():FacturasClientes( nView ) )->cSerie + Rtrim( ( D():FacturasClientes( nView ) )->cSufFac ) + "/"
      :cInvoiceNumber            += alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) )
      :cInvoiceCurrencyCode      := ( D():FacturasClientes( nView ) )->cDivFac
      :cTaxCurrencyCode          := ( D():FacturasClientes( nView ) )->cDivFac
      :nInvoiceTotalAmount       := nTotal
      :nTotalOutstandingAmount   := nTotal
      :nTotalExecutableAmount    := nTotal
      :nPorcentajeRetencion      := ( D():FacturasClientes( nView ) )->nPctRet
      :nImporteRetencion           := nImpRetencion





      :oSellerParty:cTaxIdentificationNumber          := "ES" + uFieldEmpresa( "cNif" )

      if Val( Left( uFieldEmpresa( "cNif" ), 1 ) ) <> 0
         :oSellerParty:cPersonTypeCode                := "F"
         :oSellerParty:cName                          := uFieldEmpresa( "cNombre" )
         :oSellerParty:cFirstSurname                  := uFieldEmpresa( "cNombre" )
      else
         :oSellerParty:cPersonTypeCode                := "J"
         :oSellerParty:cCorporateName                 := uFieldEmpresa( "cNombre" )
         :oSellerParty:cTradeName                     := uFieldEmpresa( "cNombre" )
         :oSellerParty:cRegisterOfCompaniesLocation   := uFieldEmpresa( "cNumRegMer" )
      end

      :oSellerParty:cAddress                          := uFieldEmpresa( "cDomicilio" )
      :oSellerParty:cPostCode                         := uFieldEmpresa( "cCodPos" )
      :oSellerParty:cTown                             := uFieldEmpresa( "cPoblacion" )
      :oSellerParty:cProvince                         := uFieldEmpresa( "cProvincia" )
      :oSellerParty:cTelephone                        := uFieldEmpresa( "cTlf" )
      :oSellerParty:cTelFax                           := uFieldEmpresa( "cFax" )
      :oSellerParty:cWebAddress                       := uFieldEmpresa( "Web" )
      :oSellerParty:cElectronicMail                   := uFieldEmpresa( "EMail" )





      :oBuyerParty:cTaxIdentificationNumber           := "ES" + ( D():FacturasClientes( nView ) )->cDniCli

      if Val( Left( ( D():FacturasClientes( nView ) )->cDniCli, 1 ) ) <> 0
         :oBuyerParty:cPersonTypeCode                 := "F"
         :oBuyerParty:cName                           := ( D():FacturasClientes( nView ) )->cNomCli
         :oBuyerParty:cFirstSurname                   := ( D():FacturasClientes( nView ) )->cNomCli
      else
         :oBuyerParty:cPersonTypeCode                 := "J"
         :oBuyerParty:cCorporateName                  := ( D():FacturasClientes( nView ) )->cNomCli
         :oBuyerParty:cTradeName                      := ( D():FacturasClientes( nView ) )->cNomCli
      end

      :oBuyerParty:cAddress                           := ( D():FacturasClientes( nView ) )->cDirCli
      :oBuyerParty:cPostCode                          := ( D():FacturasClientes( nView ) )->cPosCli
      :oBuyerParty:cTown                              := ( D():FacturasClientes( nView ) )->cPobCli
      :oBuyerParty:cProvince                          := ( D():FacturasClientes( nView ) )->cPrvCli
      :oBuyerParty:cTelephone                         := RetFld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "Telefono" )
      :oBuyerParty:cTelFax                            := RetFld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "Fax" )
      :oBuyerParty:cWebAddress                        := RetFld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cWebInt" )
      :oBuyerParty:cElectronicMail                    := RetFld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "cMeiInt" )





      :dOperationDate                                 := ( D():FacturasClientes( nView ) )->dFecFac
      :dIssueDate                                     := ( D():FacturasClientes( nView ) )->dFecFac

      :dFechaInicioOperacion                           := ( D():FacturasClientes( nView ) )->dIniPer
         :dFechaFinOperacion                               := ( D():FacturasClientes( nView ) )->dFinPer

      :cPlaceOfIssuePostCode                          := uFieldEmpresa( "cCodPos" )
      :cPlaceOfIssueDescription                       := uFieldEmpresa( "cPoblacion" )





      :nInvoiceTotal                                  := nTotal
      :nDtoEstatal                                       := nDescuentoEstatal
      :nTotalGrossAmount                              := nTotBrt
      :nTotalGrossAmountBeforeTaxes                   := nTotNet





      for each a in aTotIva

         if !isNil( hGet( a, "porcentajeiva" ) )

            oTax                                      := Tax()
            oTax:nTaxBase                             := hGet( a, "neto" )
            oTax:nTaxRate                             := hGet( a, "porcentajeiva" )
            oTax:nTaxAmount                           := hGet( a, "impiva" )
            oTax:nEquivalenceSurcharge                := hGet( a, "porcentajere" )
            oTax:nEquivalenceSurchargeAmount          := hGet( a, "impre" )
            oTax:cTaxTypeCode                           := if( TiposIvaModel():getTipoIgic( hGet( a, "porcentajeiva" ) ), "03", "01" )

            :addTax( oTax )

         end

      next





      if nTotDto <> 0

         oDiscount                                 := Discount()
         oDiscount:cDiscountReason                 := ( D():FacturasClientes( nView ) )->cDtoEsp
         oDiscount:nDiscountRate                   := ( D():FacturasClientes( nView ) )->nDtoEsp
         oDiscount:nDiscountAmount                 := nTotDto

         :addDiscount( oDiscount )

      end

      if nTotDpp <> 0

         oDiscount                                 := Discount()
         oDiscount:cDiscountReason                 := ( D():FacturasClientes( nView ) )->cDpp
         oDiscount:nDiscountRate                   := ( D():FacturasClientes( nView ) )->nDpp
         oDiscount:nDiscountAmount                 := nTotDpp

         :addDiscount( oDiscount )

      end

      if nTotUno <> 0

         oDiscount                                 := Discount()
         oDiscount:cDiscountReason                 := ( D():FacturasClientes( nView ) )->cDtoUno
         oDiscount:nDiscountRate                   := ( D():FacturasClientes( nView ) )->nDtoUno
         oDiscount:nDiscountAmount                 := nTotUno

         :addDiscount( oDiscount )

      end

      if nTotDos <> 0

         oDiscount                                 := Discount()
         oDiscount:cDiscountReason                 := ( D():FacturasClientes( nView ) )->cDtoDos
         oDiscount:nDiscountRate                   := ( D():FacturasClientes( nView ) )->nDtoDos
         oDiscount:nDiscountAmount                 := nTotDos

         :addDiscount( oDiscount )

      end

      if nTotAtp <> 0

         oDiscount                                 := Discount()
         oDiscount:cDiscountReason                 := ""
         oDiscount:nDiscountRate                   := ( D():FacturasClientes( nView ) )->nDtoAtp
         oDiscount:nDiscountAmount                 := nTotAtp

         :addDiscount( oDiscount )

      end



      if ( D():FacturasClientesLineas( nView ) )->( dbSeek( nNumero ) )

         while ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac == nNumero .AND. !( D():FacturasClientesLineas( nView ) )->( Eof() )

            if lValidLineForFacturae()

               oItemLine                           := ItemLine():New( oFactura )

               oItemLine:cItemDescription          := Descrip( D():FacturasClientesLineas( nView ) )
               oItemLine:nQuantity                 := nTotNFacCli( D():FacturasClientesLineas( nView ) )
               oItemLine:nUnitPriceWithoutTax      := nNetUFacCli( D():FacturasClientesLineas( nView ), nDouDiv ) + ( D():FacturasClientesLineas( nView ) )->nPntVer
               oItemLine:nUnitPriceWithTax         := nTotUFacCli( D():FacturasClientesLineas( nView ), nDouDiv ) + ( D():FacturasClientesLineas( nView ) )->nPntVer

               oItemLine:nIva                      := ( D():FacturasClientesLineas( nView ) )->nIva
               oItemLine:lIvaInc                   := ( D():FacturasClientes( nView ) )->lIvaInc



               if ( D():FacturasClientesLineas( nView ) )->nDtoDiv <> 0

                  oDiscount                        := Discount()
                  oDiscount:nDiscountAmount        := nDescuentoLinealFacCli( D():FacturasClientesLineas( nView ), nDouDiv ) * nTotNFacCli( D():FacturasClientesLineas( nView ) )

                  oItemLine:addDiscount( oDiscount )

               end



               if ( D():FacturasClientesLineas( nView ) )->nDto <> 0

                  oDiscount                        := Discount()
                  oDiscount:nDiscountRate          := ( D():FacturasClientesLineas( nView ) )->nDto

                  oItemLine:addDiscount( oDiscount )

               end



               if ( D():FacturasClientesLineas( nView ) )->nDtoPrm <> 0

                  oDiscount                        := Discount()
                  oDiscount:nDiscountRate          := ( D():FacturasClientesLineas( nView ) )->nDtoPrm

                  oItemLine:addDiscount( oDiscount )

               end



               oTax                                := Tax()
               oTax:nTaxRate                       := ( D():FacturasClientesLineas( nView ) )->nIva
               oTax:nTaxBase                       := nNetLFacCli( D():FacturasClientesLineas( nView ), nDouDiv, nRouDiv, , , .F., .F. )
               oTax:nTaxAmount                     := nIvaLFacCli( D():FacturasClientesLineas( nView ), nDouDiv, nRouDiv, , , .F., .F. )

               if ( D():FacturasClientes( nView ) )->lRecargo
                  oTax:nEquivalenceSurcharge       := ( D():FacturasClientesLineas( nView ) )->nReq
                  oTax:nEquivalenceSurchargeAmount := nReqLFacCli( D():FacturasClientesLineas( nView ), nDouDiv, nRouDiv, , .F., .F., .F. )
               end

               oItemLine:addTax( oTax )



               :addItemLine( oItemLine )

            end

            ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

         end

      end



      if ( D():FacturasClientesCobros( nView ) )->( dbSeek( nNumero ) )

         while ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac == nNumero .AND. !( D():FacturasClientesCobros( nView ) )->( Eof() )

            if empty( ( D():FacturasClientesCobros( nView ) )->cTipRec )

               if !empty( cCodigoXmlPago( ( D():FacturasClientesCobros( nView ) )->cCodPgo, D():FormasPago( nView ) ) )

                  oInstallment                           := Installment()
                  oInstallment:dInstallmentDueDate       := ( D():FacturasClientesCobros( nView ) )->dFecVto
                  oInstallment:nInstallmentAmount        := nTotRecCli( D():FacturasClientesCobros( nView ), dbfDiv )
                  oInstallment:cPaymentMeans             := cCodigoXmlPago( ( D():FacturasClientesCobros( nView ) )->cCodPgo, D():FormasPago( nView ) )





                  if !Empty( ( D():FormasPago( nView ) )->cCtaBnc )

                     if ( D():FormasPago( nView ) )->( dbSeek( ( D():FacturasClientesCobros( nView ) )->cCodPgo ) )

                           oInstallment:oAccountToBeCredited               := Account()
                           oInstallment:oAccountToBeCredited:cIBAN         := ( D():FormasPago( nView ) )->cPaisIBAN + ( D():FormasPago( nView ) )->cCtrlIBAN + ( D():FormasPago( nView ) )->cEntBnc + ( D():FormasPago( nView ) )->cSucBnc + ( D():FormasPago( nView ) )->cDigBnc + ( D():FormasPago( nView ) )->cCtaBnc
                           oInstallment:oAccountToBeCredited:cBankCode     := ( D():FormasPago( nView ) )->cEntBnc
                           oInstallment:oAccountToBeCredited:cBranchCode   := ( D():FormasPago( nView ) )->cSucBnc

                           if !Empty( ( D():FormasPago( nView ) )->cBanco )

                              nOrdAnt     :=  ( D():EmpresaBancos( nView ) )->( OrdSetFocus( "cNomBnc" ) )

                              if ( D():EmpresaBancos( nView ) )->( dbSeek( ( D():FormasPago( nView ) )->cBanco ) )

                                 oInstallment:oAccountToBeCredited:cAddress   := ( D():EmpresaBancos( nView ) )->cDirBnc
                                 oInstallment:oAccountToBeCredited:cPostCode  := ( D():EmpresaBancos( nView ) )->cCPBnc
                                 oInstallment:oAccountToBeCredited:cTown      := ( D():EmpresaBancos( nView ) )->cPobBnc
                                 oInstallment:oAccountToBeCredited:cProvince  := ( D():EmpresaBancos( nView ) )->cProBnc

                              end

                           end

                           oInstallment:oAccountToBeCredited:cCountryCode  := "ESP"

                        end

                  end

















































                  :addInstallment( oInstallment )

               else

                  oTree:Add( "Recibo : " + ( D():FacturasClientesCobros( nView ) )->cSerie + "/" + AllTrim( str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientesCobros( nView ) )->cSufFac + "-" + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) + " no tiene Código de facturae." )

               end

            end

            ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

         end

      end



      if D():gotoIdFacturasClientesEntidades( nNumero, nView )

         while ( D():FacturasClientesEntidadesId( nView ) == nNumero .AND. !D():eofFacturasClientesEntidades( nView ) )

            cCodigoEntidad                               := ( D():FacturasClientesEntidades( nView ) )->cCodEnt

            oAdministrativeCentres                       := AdministrativeCentres()
            oAdministrativeCentres:cCentreCode           := cCodigoEntidad
            oAdministrativeCentres:cRoleTypeCode         := getRolCode( ( D():FacturasClientesEntidades( nView ) )->cRol )
            oAdministrativeCentres:cAddress              := oEntidades:getDireccion( cCodigoEntidad )
            oAdministrativeCentres:cPostCode             := oEntidades:getCodigoPostal( cCodigoEntidad )
            oAdministrativeCentres:cTown                 := oEntidades:getPoblacion( cCodigoEntidad )
            oAdministrativeCentres:cProvince             := oEntidades:getProvincia( cCodigoEntidad )
            oAdministrativeCentres:cCountryCode          := oEntidades:getCodigoPais( cCodigoEntidad )
            oAdministrativeCentres:cCentreDescription    := oEntidades:getDescripcion( cCodigoEntidad )

            :addAdministrativeCentres( oAdministrativeCentres )

            ( D():FacturasClientesEntidades( nView ) )->( dbSkip() )

         end

      end

   end



   oFactura:GeneraXml()

   if !oFactura:lError
      if dbLock( D():FacturasClientes( nView ) )
         ( D():FacturasClientes( nView ) )->lExpFac := .T.
         ( D():FacturasClientes( nView ) )->( dbUnLock() )
      end
   end











   oFactura:ShowInWeb()

   hb_gcall( .F. )

return nil



static function lValidLineForFacturae()

   RETURN ( .T. )

Return ( lValLine( D():FacturasClientesLineas( nView ) ) .AND. !( D():FacturasClientesLineas( nView ) )->lTotLin .AND. nTotNFacCli( D():FacturasClientesLineas( nView ) ) <> 0 )



Static Function loadRecCli( aTmp, oBrwPgo )

   local nRec
   local cFac

   DisableAcceso()

   nRec           := ( dbfTmpPgo  )->( recno() )
   cFac           := aTmp[ 1 ] + str( aTmp[ 2 ] ) + aTmp[ 3 ]

   ( dbfTmpPgo )->( __dbZap() )

   if ( D():FacturasClientesCobros( nView ) )->( dbSeek( cFac ) )

      while ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac == cFac .AND. ( D():FacturasClientesCobros( nView ) )->( !eof() )

         if empty( ( D():FacturasClientesCobros( nView ) )->cTipRec )
            dbPass( D():FacturasClientesCobros( nView ), dbfTmpPgo, .T. )
         end

         ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

      end

   end

   ( dbfTmpPgo )->( dbgoto( nRec ) )

   if !empty( oBrwPgo )
      oBrwPgo:Refresh()
   end

   EnableAcceso()

RETURN nil



Static Function EndPgo( aTmp, aGet, lPgdOld, nImpOld, dbfTmpPgo, oBrw, oDlg, nMode )

   local nImp
   local nCon
   local nRec        := ( dbfTmpPgo )->( Recno() )
   local lImpNeg     := ( dbfTmpPgo )->nImporte < 0
   local nImpTmp     := abs( aTmp[ ( dbfTmpPgo )->( FieldPos( "nImporte" ) ) ] )
   local nImpFld     := abs( ( dbfTmpPgo )->nImporte )

   if !aGet[ ( dbfTmpPgo )->( FieldPos( "nImpCob" ) ) ]:lValid()
      return .F.
   end










   oDlg:Disable()





   if nImpFld <> nImpTmp





      nImp                       := ( nImpFld - nImpTmp ) * if( lImpNeg, - 1 , 1 )





      ( dbfTmpPgo )->( dbAppend() )
      nCon                       := ( dbfTmpPgo )->( LastRec() )
      ( dbfTmpPgo )->cSerie      := aTmp[ ( dbfTmpPgo )->( FieldPos( "CSERIE"  ) ) ]
      ( dbfTmpPgo )->nNumFac     := aTmp[ ( dbfTmpPgo )->( FieldPos( "NNUMFAC" ) ) ]
      ( dbfTmpPgo )->cSufFac     := aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUFFAC" ) ) ]
      ( dbfTmpPgo )->nNumRec     := nCon
      ( dbfTmpPgo )->cCodCaj     := aTmp[ ( dbfTmpPgo )->( FieldPos( "CCODCAJ" ) ) ]
      ( dbfTmpPgo )->cCodCli     := aTmp[ ( dbfTmpPgo )->( FieldPos( "CCODCLI" ) ) ]
      ( dbfTmpPgo )->dEntrada    := Ctod( "" )
      ( dbfTmpPgo )->nImporte    := nImp
      ( dbfTmpPgo )->nImpGas     := 0
      ( dbfTmpPgo )->cDescrip    := "Recibo n." + AllTrim( str( nCon ) ) + " de factura " + aTmp[ ( dbfTmpPgo )->( FieldPos( "CSERIE" ) ) ] + "/" + AllTrim( str( aTmp[ ( dbfTmpPgo )->( FieldPos( "NNUMFAC" ) ) ] ) ) + "/" + aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUFFAC" ) ) ]
      ( dbfTmpPgo )->dPreCob     := dFecFacCli( aTmp[ ( dbfTmpPgo )->( FieldPos( "CSERIE" ) ) ] + str( aTmp[ ( dbfTmpPgo )->( FieldPos( "NNUMFAC" ) ) ] ) + aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUFFAC" ) ) ], D():FacturasClientes( nView ) )
      ( dbfTmpPgo )->dFecVto     := dFecFacCli( aTmp[ ( dbfTmpPgo )->( FieldPos( "CSERIE" ) ) ] + str( aTmp[ ( dbfTmpPgo )->( FieldPos( "NNUMFAC" ) ) ] ) + aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUFFAC" ) ) ], D():FacturasClientes( nView ) )
      ( dbfTmpPgo )->cPgdoPor    := ""
      ( dbfTmpPgo )->lCobrado    := .F.
      ( dbfTmpPgo )->cDivPgo     := aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIVPGO" ) ) ]
      ( dbfTmpPgo )->nVdvPgo     := aTmp[ ( dbfTmpPgo )->( FieldPos( "NVDVPGO" ) ) ]
      ( dbfTmpPgo )->lConPgo     := .F.
      ( dbfTmpPgo )->cTurRec     := cCurSesion()
      ( dbfTmpPgo )->( dbUnLock() )

   end

   ( dbfTmpPgo )->( dbGoTo( nRec ) )





   WinGather( aTmp, aGet, dbfTmpPgo, oBrw, nMode )





   dbCommitAll()

   oDlg:Enable()

   oDlg:End( 1 )

return .T.





_HB_CLASS sTotal ; function sTotal ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "sTotal", iif( .T., { @HBPersistent() }, { @HBObject() } ), @sTotal() ) ) ;

   _HB_MEMBER { nTotalNeto } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalNeto"}, .F. )

   _HB_MEMBER { aTotalBase } ; oClass:AddMultiData(, { 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotalBase"}, .F. )

   _HB_MEMBER { nTotalBruto } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalBruto"}, .F. )
   _HB_MEMBER { aTotalBruto } ; oClass:AddMultiData(, { 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotalBruto"}, .F. )

   _HB_MEMBER { nTotalDocumento } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalDocumento"}, .F. )

   _HB_MEMBER { nTotalPuntoVerde } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalPuntoVerde"}, .F. )
   _HB_MEMBER { nTotalTransporte } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalTransporte"}, .F. )
   _HB_MEMBER { nTotalAgente } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalAgente"}, .F. )

   _HB_MEMBER { nTotalIva } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalIva"}, .F. )
   _HB_MEMBER { aTotalIva } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotalIva"}, .F. )

   _HB_MEMBER { aPorcentajeIva } ; oClass:AddMultiData(, { nil, nil, nil }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aPorcentajeIva"}, .F. )

   _HB_MEMBER { nTotalRecargoEquivalencia } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalRecargoEquivalencia"}, .F. )

   _HB_MEMBER { nTotalImpuestoHidrocarburos } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalImpuestoHidrocarburos"}, .F. )
   _HB_MEMBER { aTotalImpuestoHidrocarburos } ; oClass:AddMultiData(, { 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTotalImpuestoHidrocarburos"}, .F. )

   _HB_MEMBER { nTotalRetencion } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalRetencion"}, .F. )

   _HB_MEMBER { nTotalCosto } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalCosto"}, .F. )
   _HB_MEMBER { nTotalRentabilidad } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalRentabilidad"}, .F. )

   _HB_MEMBER { nTotalDescuentoGeneral } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalDescuentoGeneral"}, .F. )
   _HB_MEMBER { nTotalDescuentoProntoPago } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalDescuentoProntoPago"}, .F. )
   _HB_MEMBER { nTotalDescuentoUno } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalDescuentoUno"}, .F. )
   _HB_MEMBER { nTotalDescuentoDos } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalDescuentoDos"}, .F. )

   _HB_MEMBER { nTotalDtoLineal } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalDtoLineal"}, .F. )

   _HB_MEMBER { nTotalSuplidos } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalSuplidos"}, .F. )

   _HB_MEMBER { nTotalCobrado } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalCobrado"}, .F. )

   _HB_MEMBER { nPromocion } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPromocion"}, .F. )

   _HB_MEMBER { nTotalPersona } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalPersona"}, .F. )

   _HB_MEMBER { nDecimalesRedondeo } ; oClass:AddMultiData(, 2, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDecimalesRedondeo"}, .F. )

   _HB_MEMBER { nTotalDtoLineal } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalDtoLineal"}, .F. )

   _HB_MEMBER { nCobrado } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCobrado"}, .F. )
   _HB_MEMBER { nCambio } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCambio"}, .F. )

   _HB_MEMBER { aBrtTik } ; oClass:AddMultiData(, { 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBrtTik"}, .F. )
   _HB_MEMBER { aBasTik } ; oClass:AddMultiData(, { 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBasTik"}, .F. )
   _HB_MEMBER { aIvmTik } ; oClass:AddMultiData(, { 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aIvmTik"}, .F. )
   _HB_MEMBER { aIvaTik } ; oClass:AddMultiData(, { 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aIvaTik"}, .F. )

   _HB_MEMBER nTotalPrimerBruto(); oClass:AddInline( "nTotalPrimerBruto", {|Self | ( ( Self ) ), ( ::aTotalBruto[ 1 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalSegundoBruto(); oClass:AddInline( "nTotalSegundoBruto", {|Self | ( ( Self ) ), ( ::aTotalBruto[ 2 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalTercerBruto(); oClass:AddInline( "nTotalTercerBruto", {|Self | ( ( Self ) ), ( ::aTotalBruto[ 3 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TotalBruto(); oClass:AddInline( "TotalBruto", {|Self | ( ( Self ) ), ( ::aTotalBruto[ 1 ] + ::aTotalBruto[ 2 ] + ::aTotalBruto[ 3 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotalPrimeraBase(); oClass:AddInline( "nTotalPrimeraBase", {|Self | ( ( Self ) ), ( ::aTotalBase[ 1 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalSegundaBase(); oClass:AddInline( "nTotalSegundaBase", {|Self | ( ( Self ) ), ( ::aTotalBase[ 2 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalTerceraBase(); oClass:AddInline( "nTotalTerceraBase", {|Self | ( ( Self ) ), ( ::aTotalBase[ 3 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TotalBase(); oClass:AddInline( "TotalBase", {|Self | ( ( Self ) ), ( ::aTotalBase[ 1 ] + ::aTotalBase[ 2 ] + ::aTotalBase[ 3 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nBasePrimerIva(); oClass:AddInline( "nBasePrimerIva", {|Self | ( ( Self ) ), ( ::aTotalIva[ 1, 2 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nBaseSegundoIva(); oClass:AddInline( "nBaseSegundoIva", {|Self | ( ( Self ) ), ( ::aTotalIva[ 2, 2 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nBaseTercerIva(); oClass:AddInline( "nBaseTercerIva", {|Self | ( ( Self ) ), ( ::aTotalIva[ 3, 2 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nPorcentajePrimerIva(); oClass:AddInline( "nPorcentajePrimerIva", {|Self | ( ( Self ) ), ( ::aPorcentajeIva[1] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nPorcentajeSegundoIva(); oClass:AddInline( "nPorcentajeSegundoIva", {|Self | ( ( Self ) ), ( ::aPorcentajeIva[2] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nPorcentajeTercerIva(); oClass:AddInline( "nPorcentajeTercerIva", {|Self | ( ( Self ) ), ( ::aPorcentajeIva[3] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotalPrimerIva(); oClass:AddInline( "nTotalPrimerIva", {|Self | ( ( Self ) ), ( if( empty( ::aTotalIva ), ::aIvaTik[1], ::aTotalIva[ 1, 8 ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalSegundoIva(); oClass:AddInline( "nTotalSegundoIva", {|Self | ( ( Self ) ), ( if( empty( ::aTotalIva ), ::aIvaTik[2], ::aTotalIva[ 2, 8 ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalTercerIva(); oClass:AddInline( "nTotalTercerIva", {|Self | ( ( Self ) ), ( if( empty( ::aTotalIva ), ::aIvaTik[3], ::aTotalIva[ 3, 8 ] ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TotalIva(); oClass:AddInline( "TotalIva", {|Self | ( ( Self ) ), ( ::nTotalPrimerIva() + ::nTotalSegundoIva() + ::nTotalTercerIva() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotalPrimerImpuestoHidrocarburos(); oClass:AddInline( "nTotalPrimerImpuestoHidrocarburos", {|Self | ( ( Self ) ), ( ::aTotalImpuestoHidrocarburos[ 1 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalSegundoImpuestoHidrocarburos(); oClass:AddInline( "nTotalSegundoImpuestoHidrocarburos", {|Self | ( ( Self ) ), ( ::aTotalImpuestoHidrocarburos[ 2 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalTercerImpuestoHidrocarburos(); oClass:AddInline( "nTotalTercerImpuestoHidrocarburos", {|Self | ( ( Self ) ), ( ::aTotalImpuestoHidrocarburos[ 3 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TotalImpuestoHidrocarburos(); oClass:AddInline( "TotalImpuestoHidrocarburos", {|Self | ( ( Self ) ), ( ::aTotalImpuestoHidrocarburos[ 1 ] + ::aTotalImpuestoHidrocarburos[ 2 ] + ::aTotalImpuestoHidrocarburos[ 3 ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TotalDescuento(); oClass:AddInline( "TotalDescuento", {|Self | ( ( Self ) ), ( ::nTotalDescuentoGeneral + ::nTotalDescuentoProntoPago + ::nTotalDescuentoUno + ::nTotalDescuentoDos ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TotalDocumento(); oClass:AddInline( "TotalDocumento", {|Self | ( ( Self ) ), ( Round( ::nTotalDocumento, ::nDecimalesRedondeo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TotalRentabilidad(); oClass:AddInline( "TotalRentabilidad", {|Self | ( ( Self ) ), ( Round( ::aTotalBase - ::nTotalCosto, ::nDecimalesRedondeo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER PorcentajeRentabilidad(); oClass:AddInline( "PorcentajeRentabilidad", {|Self | ( ( Self ) ), ( nRentabilidad( ::aTotalBase, 0, ::nTotalCosto ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotalCobro(); oClass:AddInline( "nTotalCobro", {|Self | ( ( Self ) ), ( Round( ::nCobrado - ::nCambio, ::nDecimalesRedondeo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS sTotal ;






Static Function FacCliExcelImport()

   local n
   local sBancasImportacion
   local cCodigoCliente
   local nVentaBruta
   local nComision
   local nVentaNeta
   local nBeneficio
   local oOleExcel
   local cFileExcel                    := cGetFile( "Excel ( *.Xls ) | *.xls |Excel ( *.Xlsx ) | *.xlsx", "Seleccione la hoja de calculo" )

   if File( cFileExcel )

      oOleExcel                        := TOleExcel():New( "Importando hoja de excel", "Conectando...", .F. )

      oOleExcel:oExcel:Visible         := .T.
      oOleExcel:oExcel:DisplayAlerts   := .F.
      oOleExcel:oExcel:WorkBooks:Open( cFileExcel )
      oOleExcel:oExcel:WorkSheets( 1 ):Activate()

      for n := 1 to 65536

         sBancasImportacion                     := sBancasImportacion()

         sBancasImportacion:cCodigoCliente      := oOleExcel:oExcel:ActiveSheet:Range( "A" + lTrim( str( n ) ) ):Value
         if !empty( sBancasImportacion:cCodigoCliente )

            sBancasImportacion:cCodigoCliente   := Left( sBancasImportacion:cCodigoCliente, 3 )
            sBancasImportacion:cCodigoCliente   := Rjust( sBancasImportacion:cCodigoCliente, "0", RetNumCodCliEmp() )

            sBancasImportacion:nVentaBruta      := oOleExcel:oExcel:ActiveSheet:Range( "D" + lTrim( str( n ) ) ):Value
            sBancasImportacion:nComision        := oOleExcel:oExcel:ActiveSheet:Range( "E" + lTrim( str( n ) ) ):Value
            sBancasImportacion:nVentaNeta       := oOleExcel:oExcel:ActiveSheet:Range( "F" + lTrim( str( n ) ) ):Value
            sBancasImportacion:nBeneficio       := oOleExcel:oExcel:ActiveSheet:Range( "L" + lTrim( str( n ) ) ):Value
            sBancasImportacion:nPremios         := oOleExcel:oExcel:ActiveSheet:Range( "K" + lTrim( str( n ) ) ):Value
            sBancasImportacion:nPorcentaje      := Round( sBancasImportacion:nComision / sBancasImportacion:nVentaBruta * 100, 0 )

            WinAppRec( oWndBrw:oBrw, bEdtRec, D():FacturasClientes( nView ), , , sBancasImportacion )

         else

            exit

         end

      next

      msgStop( "Proceso de importación finalizazo." )

      oOleExcel:oExcel:Quit()

      oOleExcel:oExcel:DisplayAlerts := .T.

      oOleExcel:End()

   end

Return nil



static function AddFichero( aFichero, oBrwFichero )

   local i
   local cFile
   local aFile
   local nFlag    := nOr( 0x00000800, 0x00000008, 0x00000200, 0x00080000, 0x00200000 )

   cFile          := cGetFile( "Excel ( *.Xlsx ) | *.xlsx|Excel ( *.Xls ) | *.xls", "Seleccione la hoja de calculo", "*.*" , , .F., .T., nFlag )
   cFile          := Left( cFile, At( Chr( 0 ) + Chr( 0 ), cFile ) - 1 )

   if !empty( cFile )

      cFile       := StrTran( cFile, Chr( 0 ), "," )
      aFile       := hb_aTokens( cFile, "," )

      if Len( aFile ) > 1

         for i := 2 to Len( aFile )
            aFile[ i ] := aFile[ 1 ] + "\" + aFile[ i ]
         next

         hb_ADel( aFile, 1, .T. )

      endif

      if IsArray( aFile )

         for i := 1 to Len( aFile )
            aAdd( aFichero, aFile[ i ] )
         next

      else

         aAdd( aFichero, aFile )

      endif

   end

   oBrwFichero:Refresh()

return nil



Static Function DelFichero( aFichero, oBrwFichero )

   hb_ADel( aFichero, oBrwFichero:nArrayAt, .T. )

   oBrwFichero:Refresh()

return nil



_HB_CLASS sBancasImportacion ; function sBancasImportacion ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "sBancasImportacion", iif( .F., { }, { @HBObject() } ), @sBancasImportacion() ) ) ;

   _HB_MEMBER { nVentaBruta } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nVentaBruta"}, .F. )
   _HB_MEMBER { nComision } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nComision"}, .F. )
   _HB_MEMBER { nVentaNeta } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nVentaNeta"}, .F. )
   _HB_MEMBER { nBeneficio } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nBeneficio"}, .F. )
   _HB_MEMBER { nPorcentaje } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPorcentaje"}, .F. )
   _HB_MEMBER { nPremios } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPremios"}, .F. )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS sBancasImportacion ;



_HB_CLASS sNovotecnoImportacion ; function sNovotecnoImportacion ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "sNovotecnoImportacion", iif( .F., { }, { @HBObject() } ), @sNovotecnoImportacion() ) ) ;

   _HB_MEMBER { cCodigoCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodigoCliente"}, .F. )
   _HB_MEMBER { dFecha } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFecha"}, .F. )
   _HB_MEMBER { cHora } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cHora"}, .F. )
   _HB_MEMBER { cCodigoArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodigoArticulo"}, .F. )
   _HB_MEMBER { cNombreArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNombreArticulo"}, .F. )
   _HB_MEMBER { nNumeroOperacion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nNumeroOperacion"}, .F. )

   _HB_MEMBER { nImporteClaro } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImporteClaro"}, .F. )
   _HB_MEMBER { nImporteOrange } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImporteOrange"}, .F. )
   _HB_MEMBER { nImporteViva } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImporteViva"}, .F. )
   _HB_MEMBER { nImporteMount } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImporteMount"}, .F. )
   _HB_MEMBER { nImporteTricom } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImporteTricom"}, .F. )
   _HB_MEMBER { nImporteLoterias } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImporteLoterias"}, .F. )

   _HB_MEMBER { cTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipo"}, .F. )
   _HB_MEMBER { lValid } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lValid"}, .F. )
   _HB_MEMBER { nPrecio } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPrecio"}, .F. )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS sNovotecnoImportacion ;



Static Function ExecuteImportacion( aFichero, oTreeImportacion, oMeterImportacion, oBtnCancel, oDlg )

   local n
   local oNode
   local oError
   local oBlock
   local oError2
   local oBlock2
   local cFichero
   local oOleExcel
   local oActiveSheet
   local nActiveSheetRows
   local nActiveSheetColumns
   local sNovotecnoImportacion

   oDlg:Disable()
   oBtnCancel:Enable()

   aImportacion                           := {}
   lCancelImportacion                     := .F.

   for each cFichero in aFichero

      oBlock                              := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         oTreeImportacion:Select( oTreeImportacion:Add( "Importando hoja de excel " + cFichero ) )

         oOleExcel                        := TOleExcel():New( "Importando hoja de excel", "Conectando...", .F. )

         oOleExcel:oExcel:Visible         := .F.
         oOleExcel:oExcel:DisplayAlerts   := .F.

         oOleExcel:oExcel:Workbooks:Add()
         oOleExcel:oExcel:Workbooks:Open( cFichero )

         oActiveSheet                     := oOleExcel:oExcel:ActiveSheet

         nActiveSheetRows                 := oActiveSheet:UsedRange:Rows:Count()
         nActiveSheetColumns              := oActiveSheet:UsedRange:Columns:Count()

         oMeterImportacion:SetTotal( nActiveSheetRows )

         for n := 2 to ( nActiveSheetRows - 1 )

            oBlock2                                         := ErrorBlock( { | oError2 | Break( oError2 ) } )
            BEGIN SEQUENCE

            if !lCancelImportacion

               sNovotecnoImportacion                        := sNovotecnoImportacion()



               oNode                                        := oTreeImportacion:Add( "Procesando operación " + lTrim( str( n ) ) )
               oTreeImportacion:Select( oNode )

               sNovotecnoImportacion:cCodigoCliente         := oOleExcel:oExcel:ActiveSheet:Range( "A" + lTrim( str( n ) ) ):Value

               if !empty( sNovotecnoImportacion:cCodigoCliente )

                  if IsNum( sNovotecnoImportacion:cCodigoCliente )
                     sNovotecnoImportacion:cCodigoCliente   := Round( sNovotecnoImportacion:cCodigoCliente, 0 )
                     sNovotecnoImportacion:cCodigoCliente   := str( sNovotecnoImportacion:cCodigoCliente )
                     sNovotecnoImportacion:cCodigoCliente   := Alltrim( sNovotecnoImportacion:cCodigoCliente )
                  end

                  if dbSeekInOrd( sNovotecnoImportacion:cCodigoCliente, "cCodPos", dbfObrasT )
                     sNovotecnoImportacion:cCodigoCliente   := ( dbfObrasT )->cCodCli
                  else
                     sNovotecnoImportacion:cCodigoCliente   := Rjust( sNovotecnoImportacion:cCodigoCliente, "0", RetNumCodCliEmp() )
                  end

                  sNovotecnoImportacion:dFecha              := Date()
                  sNovotecnoImportacion:cHora               := Time()

                  sNovotecnoImportacion:nImporteClaro       := oOleExcel:oExcel:ActiveSheet:Range( "B" + lTrim( str( n ) ) ):Value
                  sNovotecnoImportacion:nImporteOrange      := oOleExcel:oExcel:ActiveSheet:Range( "C" + lTrim( str( n ) ) ):Value
                  sNovotecnoImportacion:nImporteViva        := oOleExcel:oExcel:ActiveSheet:Range( "D" + lTrim( str( n ) ) ):Value
                  sNovotecnoImportacion:nImporteMount       := oOleExcel:oExcel:ActiveSheet:Range( "E" + lTrim( str( n ) ) ):Value
                  sNovotecnoImportacion:nImporteTricom      := oOleExcel:oExcel:ActiveSheet:Range( "F" + lTrim( str( n ) ) ):Value
                  sNovotecnoImportacion:nImporteLoterias    := oOleExcel:oExcel:ActiveSheet:Range( "G" + lTrim( str( n ) ) ):Value

                  sNovotecnoImportacion:lValid              := .T.

                  oTreeImportacion:Select( oNode:Add( "Cliente " + sNovotecnoImportacion:cCodigoCliente ) )
                  oTreeImportacion:Select( oNode:Add( "Fecha " + Dtoc( sNovotecnoImportacion:dFecha ) ) )
                  oTreeImportacion:Select( oNode:Add( "Hora " + sNovotecnoImportacion:cHora ) )
                  oTreeImportacion:Select( oNode:Add( "Precio Claro " + Alltrim( cValToChar( sNovotecnoImportacion:nImporteClaro ) ) ) )

                  if sNovotecnoImportacion:lValid
                     aAdd( aImportacion, sNovotecnoImportacion )
                  end

               end

            end

            RECOVER USING oError2

               msgStop( ErrorMessage( oError2 ), "Error al importar facturas" )

            end

            ErrorBlock( oBlock2 )

            oMeterImportacion:Set( n )

         next

         oOleExcel:oExcel:Quit()
         oOleExcel:oExcel:DisplayAlerts   := .T.

      RECOVER USING oError

         msgStop( ErrorMessage( oError ), "Error al importar facturas" )

      end

      ErrorBlock( oBlock )

      if !empty( oOleExcel )
         oOleExcel:End()
      end

      if lCancelImportacion
         oTreeImportacion:Select( oTreeImportacion:Add( "Proceso cancelado por el usuario" ) )
      end

   next

   if !lCancelImportacion .AND. !empty( aImportacion )
      FacturaImportacion( oTreeImportacion )
   end

   oDlg:Enable()

return nil



static function FacturaImportacion( oTreeImportacion )

   local s
   local aTotalFactura
   local cCodigoCambio
   local cSerieFactura
   local nNumeroFactura
   local cSufijoFactura
   local nNumeroLinea                  := 1
   local lAppendFactura                := .F.

   aSort( aImportacion, , , {|x,y| x:cCodigoCliente > y:cCodigoCliente } )

   for each s in aImportacion





      nNumeroLinea                     := 1
      lAppendFactura                   := .F.





      if dbSeekInOrd( s:cCodigoCliente, "Cod", D():Clientes( nView ) )

         cSerieFactura                 := if( !empty( ( D():Clientes( nView ) )->Serie ), ( D():Clientes( nView ) )->Serie, "A" )
         nNumeroFactura                := nNewDoc( cSerieFactura, D():FacturasClientes( nView ), "nFacCli", , D():Contadores( nView ) )
         cSufijoFactura                := RetSufEmp()

         ( D():FacturasClientes( nView ) )->( dbAppend() )
         if !( D():FacturasClientes( nView ) )->( NetErr() )

            ( D():FacturasClientes( nView ) )->cSerie     := cSerieFactura
            ( D():FacturasClientes( nView ) )->nNumFac    := nNumeroFactura
            ( D():FacturasClientes( nView ) )->cSufFac    := cSufijoFactura

            ( D():FacturasClientes( nView ) )->cCodCli    := ( D():Clientes( nView ) )->Cod
            ( D():FacturasClientes( nView ) )->cNomCli    := ( D():Clientes( nView ) )->Titulo
            ( D():FacturasClientes( nView ) )->cDirCli    := ( D():Clientes( nView ) )->Domicilio
            ( D():FacturasClientes( nView ) )->cPobCli    := ( D():Clientes( nView ) )->Poblacion
            ( D():FacturasClientes( nView ) )->cPrvCli    := ( D():Clientes( nView ) )->Provincia
            ( D():FacturasClientes( nView ) )->cPosCli    := ( D():Clientes( nView ) )->CodPostal
            ( D():FacturasClientes( nView ) )->cDniCli    := ( D():Clientes( nView ) )->Nif

            ( D():FacturasClientes( nView ) )->cCodPago   := if( !empty( ( D():Clientes( nView ) )->CodPago ), ( D():Clientes( nView ) )->CodPago, cDefFpg() )
            ( D():FacturasClientes( nView ) )->nTarifa    := Max( ( D():Clientes( nView ) )->nTarifa, 1 )
            ( D():FacturasClientes( nView ) )->dFecFac    := s:dFecha
            ( D():FacturasClientes( nView ) )->cTurFac    := cCurSesion()
            ( D():FacturasClientes( nView ) )->cCodAlm    := Application():codigoAlmacen()
            ( D():FacturasClientes( nView ) )->cCodUsr    := Auth():Codigo()
            ( D():FacturasClientes( nView ) )->dFecCre    := Date()
            ( D():FacturasClientes( nView ) )->cTimCre    := Time()
            ( D():FacturasClientes( nView ) )->cCodCaj    := Application():CodigoCaja()

            lAppendFactura             := .T.

            oTreeImportacion:Select( oTreeImportacion:Add( "Nueva factura creada " + ( D():FacturasClientes( nView ) )->cSerie + "/" + Alltrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + Alltrim( ( D():FacturasClientes( nView ) )->cSufFac ) ) )

         end

      else

         oTreeImportacion:Add( "Cliente no encontrado " + s:cCodigoCliente )

      end

      if lAppendFactura

         if s:nImporteClaro <> 0

            ( D():FacturasClientesLineas( nView ) )->( dbAppend() )
            if !( D():FacturasClientesLineas( nView ) )->( NetErr() )

               ( D():FacturasClientesLineas( nView ) )->nNumLin    := nNumeroLinea++
               ( D():FacturasClientesLineas( nView ) )->cSerie     := cSerieFactura
               ( D():FacturasClientesLineas( nView ) )->nNumFac    := nNumeroFactura
               ( D():FacturasClientesLineas( nView ) )->cSufFac    := cSufijoFactura
               ( D():FacturasClientesLineas( nView ) )->cRef       := "CLARO"
               ( D():FacturasClientesLineas( nView ) )->cDetalle   := "CLARO"
               ( D():FacturasClientesLineas( nView ) )->nUniCaja   := 1
               ( D():FacturasClientesLineas( nView ) )->nPreUnit   := s:nImporteClaro
               ( D():FacturasClientesLineas( nView ) )->cAlmLin    := Application():codigoAlmacen()

            end

         end

         if s:nImporteOrange <> 0

            ( D():FacturasClientesLineas( nView ) )->( dbAppend() )
            if !( D():FacturasClientesLineas( nView ) )->( NetErr() )

               ( D():FacturasClientesLineas( nView ) )->nNumLin    := nNumeroLinea++
               ( D():FacturasClientesLineas( nView ) )->cSerie     := cSerieFactura
               ( D():FacturasClientesLineas( nView ) )->nNumFac    := nNumeroFactura
               ( D():FacturasClientesLineas( nView ) )->cSufFac    := cSufijoFactura
               ( D():FacturasClientesLineas( nView ) )->cRef       := "ORANGE"
               ( D():FacturasClientesLineas( nView ) )->cDetalle   := "ORANGE"
               ( D():FacturasClientesLineas( nView ) )->nUniCaja   := 1
               ( D():FacturasClientesLineas( nView ) )->nPreUnit   := s:nImporteOrange
               ( D():FacturasClientesLineas( nView ) )->cAlmLin    := Application():codigoAlmacen()

            end

         end

         if s:nImporteViva <> 0

            ( D():FacturasClientesLineas( nView ) )->( dbAppend() )
            if !( D():FacturasClientesLineas( nView ) )->( NetErr() )

               ( D():FacturasClientesLineas( nView ) )->nNumLin    := nNumeroLinea++
               ( D():FacturasClientesLineas( nView ) )->cSerie     := cSerieFactura
               ( D():FacturasClientesLineas( nView ) )->nNumFac    := nNumeroFactura
               ( D():FacturasClientesLineas( nView ) )->cSufFac    := cSufijoFactura
               ( D():FacturasClientesLineas( nView ) )->cRef       := "VIVA"
               ( D():FacturasClientesLineas( nView ) )->cDetalle   := "VIVA"
               ( D():FacturasClientesLineas( nView ) )->nUniCaja   := 1
               ( D():FacturasClientesLineas( nView ) )->nPreUnit   := s:nImporteViva
               ( D():FacturasClientesLineas( nView ) )->cAlmLin    := Application():codigoAlmacen()

            end

         end

         if s:nImporteTricom <> 0

            ( D():FacturasClientesLineas( nView ) )->( dbAppend() )
            if !( D():FacturasClientesLineas( nView ) )->( NetErr() )

               ( D():FacturasClientesLineas( nView ) )->nNumLin    := nNumeroLinea++
               ( D():FacturasClientesLineas( nView ) )->cSerie     := cSerieFactura
               ( D():FacturasClientesLineas( nView ) )->nNumFac    := nNumeroFactura
               ( D():FacturasClientesLineas( nView ) )->cSufFac    := cSufijoFactura
               ( D():FacturasClientesLineas( nView ) )->cRef       := "TRICOM"
               ( D():FacturasClientesLineas( nView ) )->cDetalle   := "TRICOM"
               ( D():FacturasClientesLineas( nView ) )->nUniCaja   := 1
               ( D():FacturasClientesLineas( nView ) )->nPreUnit   := s:nImporteTricom
               ( D():FacturasClientesLineas( nView ) )->cAlmLin    := Application():codigoAlmacen()

            end

         end

         if s:nImporteLoterias <> 0

            ( D():FacturasClientesLineas( nView ) )->( dbAppend() )
            if !( D():FacturasClientesLineas( nView ) )->( NetErr() )

               ( D():FacturasClientesLineas( nView ) )->nNumLin    := nNumeroLinea++
               ( D():FacturasClientesLineas( nView ) )->cSerie     := cSerieFactura
               ( D():FacturasClientesLineas( nView ) )->nNumFac    := nNumeroFactura
               ( D():FacturasClientesLineas( nView ) )->cSufFac    := cSufijoFactura
               ( D():FacturasClientesLineas( nView ) )->cRef       := "LOTERIAS"
               ( D():FacturasClientesLineas( nView ) )->cDetalle   := "LOTERIAS"
               ( D():FacturasClientesLineas( nView ) )->nUniCaja   := 1
               ( D():FacturasClientesLineas( nView ) )->nPreUnit   := s:nImporteLoterias
               ( D():FacturasClientesLineas( nView ) )->cAlmLin    := Application():codigoAlmacen()

            end

         end

      end

      if lAppendFactura .AND. !empty( cSerieFactura ) .AND. !empty( nNumeroFactura )
         GeneraCobrosImportacion( cSerieFactura, nNumeroFactura, cSufijoFactura )
      end

   next

   oTreeImportacion:Select( oTreeImportacion:Add( "Proceso de importación finalizado" ) )

return nil



static function GeneraCobrosImportacion( cSerieFactura, nNumeroFactura, cSufijoFactura )

   local aTotalFactura





   GenPgoFacCli( cSerieFactura + str( nNumeroFactura ) + cSufijoFactura, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), , D():Clientes( nView ), D():FormasPago( nView ), dbfDiv, dbfIva )

   ChkLqdFacCli( , D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), , dbfIva, dbfDiv, .F. )





   aTotalFactura                 := aTotFacCli( cSerieFactura + str( nNumeroFactura ) + cSufijoFactura, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), dbfIva, dbfDiv, D():FacturasClientesCobros( nView ), , ( D():FacturasClientes( nView ) )->cDivFac )

   if dbLock( D():FacturasClientes( nView ) )

      ( D():FacturasClientes( nView ) )->nTotNet    := aTotalFactura[ 1 ]
      ( D():FacturasClientes( nView ) )->nTotIva    := aTotalFactura[ 2 ]
      ( D():FacturasClientes( nView ) )->nTotReq    := aTotalFactura[ 3 ]
      ( D():FacturasClientes( nView ) )->nTotFac    := aTotalFactura[ 4 ]

      ( D():FacturasClientes( nView ) )->( dbUnLock() )

   end

return nil



static function lBuscaOferta( cCodArt, aGet, aTmp, aTmpFac, dbfOferta, dbfDiv, dbfKit, dbfIva  )

   local sOfeArt
   local nTotalLinea    := 0


   if ( D():Articulos( nView ) )->Codigo == cCodArt .OR. ( D():Articulos( nView ) )->( dbSeek( cCodArt ) )





      nTotalLinea       := lCalcDeta( aTmp, aTmpFac, .T. )

      sOfeArt           := sOfertaArticulo( cCodArt, aTmpFac[ 7 ], aTmpFac[ 85 ], aTmp[ 19 ], aTmpFac[ 6 ], dbfOferta, aTmp[ 77 ], aTmpFac[ 61 ], aTmp[28], aTmp[29], aTmp[30], aTmp[31], aTmp[ 63 ], aTmp[ 12 ], nTotalLinea )

      if !empty( sOfeArt )
         if ( sOfeArt:nPrecio <> 0 )
            aGet[ 6 ]:cText( sOfeArt:nPrecio )
         end
         if ( sOfeArt:nDtoPorcentual <> 0 )
            aGet[ 9     ]:cText( sOfeArt:nDtoPorcentual )
         end
         if ( sOfeArt:nDtoLineal <> 0)
            aGet[ 33  ]:cText( sOfeArt:nDtoLineal )
         end
         aTmp[ 82  ] := .T.
      end

      if !aTmp[ 82 ]





         sOfeArt        := sOfertaFamilia( ( D():Articulos( nView ) )->Familia, aTmpFac[ 7 ], aTmpFac[ 85 ], aTmpFac[ 6 ], dbfOferta, aTmp[ 77 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 82 ]  := .T.
         end

      end

      if !aTmp[ 82 ]





         sOfeArt     := sOfertaTipoArticulo( ( D():Articulos( nView ) )->cCodTip, aTmpFac[ 7 ], aTmpFac[ 85 ], aTmpFac[ 6 ], dbfOferta, aTmp[ 77 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 82 ]  := .T.
         end

      end

      if !aTmp[ 82 ]





         sOfeArt     := sOfertaCategoria( ( D():Articulos( nView ) )->cCodCate, aTmpFac[ 7 ], aTmpFac[ 85 ], aTmpFac[ 6 ], dbfOferta, aTmp[ 77 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 82 ]  := .T.
         end

      end

      if !aTmp[ 82 ]





         sOfeArt     := sOfertaTemporada( ( D():Articulos( nView ) )->cCodTemp, aTmpFac[ 7 ], aTmpFac[ 85 ], aTmp[ 6 ], dbfOferta, aTmp[ 77 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 82 ]  := .T.
         end

      end

      if !aTmp[ 82 ]





         sOfeArt     := sOfertaFabricante( ( D():Articulos( nView ) )->cCodFab, aTmpFac[ 7 ], aTmpFac[ 85 ], aTmpFac[ 6 ], dbfOferta, aTmp[ 77 ], D():Articulos( nView ), aTmp[ 19 ], aTmp[ 12 ], nTotalLinea )

         if !empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 9    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 33 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 82 ]  := .T.
         end

      end

   end

return .T.



Static Function lValidLote( aTmp, aGet, oStkAct )

   if !uFieldEmpresa( "lNStkAct" )
      StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 28 ], aTmp[ 29 ], aTmp[ 30 ], aTmp[ 31 ], aTmp[ 45 ], oStkAct )
   end

Return ( .T. )



Static Function EditarNumeroSerie( aTmp, oStock, nMode )

   local oNumerosSeries

   with object ( TNumerosSerie() )

      :nMode            := nMode

      :cCodArt          := aTmp[ 4    ]
      :cCodAlm          := aTmp[ 39 ]
      :nNumLin          := aTmp[ 35 ]

      :nTotalUnidades   := nTotNFacCli( aTmp )

      :oStock           := oStock

      :uTmpSer          := dbfTmpSer

      :Resource()

   end

Return ( nil )








STATIC FUNCTION cSatCli( aGet, aTmp, oBrw, nMode )

   local cDesAlb
   local cNumSat  := aGet[ 42 ]:VarGet()
   local lValid   := .F.

   if nMode <> 1 .OR. empty( cNumsat )
      return .T.
   end

   if dbSeekInOrd( cNumSat, "nNumSat", dbfSatCliT )

      if ( dbfSatCliT )->lEstado

         MsgStop( "S.A.T. ya procesado" )
         lValid   := .F.

      else

         CursorWait()

         aGet[ 7 ]:cText( ( dbfSatCliT )->CCODCLI )
         aGet[ 7 ]:lValid()
         aGet[ 7 ]:Disable()

         aGet[ 10 ]:cText( ( dbfSatCliT )->CNOMCLI )
         aGet[ 11 ]:cText( ( dbfSatCliT )->CDIRCLI )
         aGet[ 12 ]:cText( ( dbfSatCliT )->CPOBCLI )
         aGet[ 13 ]:cText( ( dbfSatCliT )->CPRVCLI )
         aGet[ 15 ]:cText( ( dbfSatCliT )->CPOSCLI )
         aGet[ 16 ]:cText( ( dbfSatCliT )->CDNICLI )
         aGet[ 103 ]:cText( ( dbfSatCliT )->CTLFCLI )

         aGet[ 8 ]:cText( ( dbfSatCliT )->CCODALM )
         aGet[ 8 ]:lValid()

         aGet[ 9 ]:cText( ( dbfSatCliT )->cCodCaj )
         aGet[ 9 ]:lValid()

         aGet[ 34]:cText( ( dbfSatCliT )->CCODPGO )
         aGet[ 34]:lValid()

         aGet[ 20 ]:cText( ( dbfSatCliT )->CCODAGE )
         aGet[ 20 ]:lValid()

         aGet[ 24]:cText( ( dbfSatCliT )->nPctComAge )

         aGet[ 22 ]:cText( ( dbfSatCliT )->CCODTAR )
         aGet[ 22 ]:lValid()

         aGet[ 23 ]:cText( ( dbfSatCliT )->CCODOBR )
         aGet[ 23 ]:lValid()

         if !empty(oGetTarifa)
            oGetTarifa:setTarifa( ( dbfSatCliT )->nTarifa )
         else
            aTmp[ 19 ]  := ( dbfSatCliT )->nTarifa
         end

         aGet[ 75 ]:cText( ( dbfSatCliT )->cCodTrn )
         aGet[ 75 ]:lValid()

         aGet[ 61 ]:Click( ( dbfSatCliT )->lIvaInc )
         aGet[ 59]:Click( ( dbfSatCliT )->lRecargo )
         aGet[ 122 ]:Click( ( dbfSatCliT )->lOperPv )
         aGet[ 123   ]:Click( lRECCEmpresa() )

         aGet[ 31]:cText( ( dbfSatCliT )->cCondEnt )
         aGet[ 32 ]:cText( ( dbfSatCliT )->mComent )
         aGet[ 33 ]:cText( ( dbfSatCliT )->mObserv )

         aGet[ 44 ]:cText( ( dbfSatCliT )->cDtoEsp )
         aGet[ 46    ]:cText( ( dbfSatCliT )->cDpp    )
         aGet[ 45 ]:cText( ( dbfSatCliT )->nDtoEsp )
         aGet[ 47    ]:cText( ( dbfSatCliT )->nDpp    )
         aGet[ 48 ]:cText( ( dbfSatCliT )->cDtoUno )
         aGet[ 49 ]:cText( ( dbfSatCliT )->nDtoUno )
         aGet[ 50 ]:cText( ( dbfSatCliT )->cDtoDos )
         aGet[ 51 ]:cText( ( dbfSatCliT )->nDtoDos )
         aGet[ 97 ]:cText( ( dbfSatCliT )->cManObr )
         aGet[ 37 ]:cText( ( dbfSatCliT )->nIvaMan )
         aGet[ 38 ]:cText( ( dbfSatCliT )->nManObr )
         aGet[ 35 ]:cText( ( dbfSatCliT )->nBultos )

         aTmp[ 85 ]        := ( dbfSatCliT )->cCodGrp
         aTmp[ 17 ]        := ( dbfSatCliT )->lModCli





         aTmp[ 94 ]      := ( dbfSatCliT )->lAlquiler
         aTmp[ 92  ]      := ( dbfSatCliT )->dFecEntr
         aTmp[ 93   ]      := ( dbfSatCliT )->dFecSal

         if ( dbfSatCliL )->( dbSeek( cNumsat ) )

            ( dbfTmpLin )->( dbAppend() )
            cDesAlb                    := ""
            cDesAlb                    += "S.A.T. Nº " + ( dbfSatCliT )->cSerSat + "/" + AllTrim( str( ( dbfSatCliT )->nNumSat ) ) + "/" + ( dbfSatCliT )->cSufSat
            cDesAlb                    += " - Fecha " + Dtoc( ( dbfSatCliT )->dFecSat )
            ( dbfTmpLin )->MLNGDES     := cDesAlb
            ( dbfTmpLin )->LCONTROL    := .T.

            while ( ( dbfSatCliL )->cSerSat + str( ( dbfSatCliL )->nNumSat ) + ( dbfSatCliL )->cSufSat == cNumsat )

               (dbfTmpLin)->( dbAppend() )

               (dbfTmpLin)->nNumLin    := (dbfSatCliL)->nNumLin
               (dbfTmpLin)->nPosPrint  := (dbfSatCliL)->nPosPrint
               (dbfTmpLin)->cRef       := (dbfSatCliL)->cRef
               (dbfTmpLin)->cDetalle   := (dbfSatCliL)->cDetAlle
               (dbfTmpLin)->mLngDes    := (dbfSatCliL)->mLngDes
               (dbfTmpLin)->mNumSer    := (dbfSatCliL)->mNumSer
               (dbfTmpLin)->nPreUnit   := (dbfSatCliL)->nPreDiv
               (dbfTmpLin)->nPntVer    := (dbfSatCliL)->nPntVer
               (dbfTmpLin)->nImpTrn    := (dbfSatCliL)->nImpTrn
               (dbfTmpLin)->nPesoKG    := (dbfSatCliL)->nPesokg
               (dbfTmpLin)->cPesoKG    := (dbfSatCliL)->cPesokg
               (dbfTmpLin)->cUnidad    := (dbfSatCliL)->cUnidad
               (dbfTmpLin)->nVolumen   := (dbfSatCliL)->nVolumen
               (dbfTmpLin)->cVolumen   := (dbfSatCliL)->cVolumen
               (dbfTmpLin)->nIVA       := (dbfSatCliL)->nIva
               (dbfTmpLin)->nReq       := (dbfSatCliL)->nReq
               (dbfTmpLin)->cUNIDAD    := (dbfSatCliL)->cUnidad
               (dbfTmpLin)->nDTO       := (dbfSatCliL)->nDto
               (dbfTmpLin)->nDTOPRM    := (dbfSatCliL)->nDtoPrm
               (dbfTmpLin)->nCOMAGE    := (dbfSatCliL)->nComAge
               (dbfTmpLin)->lTOTLIN    := (dbfSatCliL)->lTotLin
               (dbfTmpLin)->nDtoDiv    := (dbfSatCliL)->nDtoDiv
               (dbfTmpLin)->nCtlStk    := (dbfSatCliL)->nCtlStk
               (dbfTmpLin)->nCosDiv    := (dbfSatCliL)->nCosDiv
               (dbfTmpLin)->cTipMov    := (dbfSatCliL)->cTipMov
               (dbfTmpLin)->cAlmLin    := (dbfSatCliL)->cAlmLin
               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp
               (dbfTmpLin)->nValImp    := (dbfSatCliL)->nValImp
               (dbfTmpLin)->CCODPR1    := (dbfSatCliL)->cCodPr1
               (dbfTmpLin)->CCODPR2    := (dbfSatCliL)->cCodPr2
               (dbfTmpLin)->CVALPR1    := (dbfSatCliL)->cValPr1
               (dbfTmpLin)->CVALPR2    := (dbfSatCliL)->cValPr2
               (dbfTmpLin)->nCanEnt    := (dbfSatCLiL)->nCanSat
               (dbfTmpLin)->nUniCaja   := (dbfSatCLiL)->nUniCaja
               (dbfTmpLin)->nUndKit    := (dbfSatCLiL)->nUndKit
               (dbfTmpLin)->lKitArt    := (dbfSatCLiL)->lKitArt
               (dbfTmpLin)->lKitChl    := (dbfSatCLiL)->lKitChl
               (dbfTmpLin)->lKitPrc    := (dbfSatCliL)->lKitPrc
               (dbfTmpLin)->lLote      := (dbfSatCliL)->lLote
               (dbfTmpLin)->nLote      := (dbfSatCliL)->nLote
               (dbfTmpLin)->cLote      := (dbfSatCliL)->cLote
               (dbfTmpLin)->lMsgVta    := (dbfSatCliL)->lMsgVta
               (dbfTmpLin)->lNotVta    := (dbfSatCliL)->lNotVta
               (dbfTmpLin)->lImpLin    := (dbfSatCliL)->lImpLin
               (dbfTmpLin)->cCodTip    := (dbfSatCliL)->cCodTip
               (dbfTmpLin)->mObsLin    := (dbfSatCliL)->mObsLin
               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip
               (dbfTmpLin)->cCodPrv    := (dbfSatCliL)->cCodPrv
               (dbfTmpLin)->cImagen    := (dbfSatCliL)->cImagen
               (dbfTmpLin)->cCodFam    := (dbfSatCliL)->cCodFam
               (dbfTmpLin)->cGrpFam    := (dbfSatCliL)->cGrpFam
               (dbfTmpLin)->cRefPrv    := (dbfSatCliL)->cRefPrv
               (dbfTmpLin)->dFecEnt    := (dbfSatCliL)->dFecEnt
               (dbfTmpLin)->dFecSal    := (dbfSatCliL)->dFecSal
               (dbfTmpLin)->nPreAlq    := (dbfSatCliL)->nPreAlq
               (dbfTmpLin)->lAlquiler  := (dbfSatCliL)->lAlquiler
               (dbfTmpLin)->nNumMed    := (dbfSatCliL)->nNumMed
               (dbfTmpLin)->nMedUno    := (dbfSatCliL)->nMedUno
               (dbfTmpLin)->nMedDos    := (dbfSatCliL)->nMedDos
               (dbfTmpLin)->nMedTre    := (dbfSatCliL)->nMedTre
               (dbfTmpLin)->nPuntos    := (dbfSatCliL)->nPuntos
               (dbfTmpLin)->nValPnt    := (dbfSatCliL)->nValPnt
               (dbfTmpLin)->nDtoPnt    := (dbfSatCliL)->nDtoPnt
               (dbfTmpLin)->nIncPnt    := (dbfSatCliL)->nIncPnt
               (dbfTmpLin)->lControl   := (dbfSatCliL)->lControl
               (dbfTmpLin)->lLinOfe    := (dbfSatCliL)->lLinOfe
               (dbfTmpLin)->cNumSat    := cNumSat
               (dbfTmpLin)->nBultos    := (dbfSatCliL)->nBultos
               (dbfTmpLin)->cFormato   := (dbfSatCliL)->cFormato
               (dbfTmpLin)->cCodObr    := (dbfSatCliL)->cObrLin
               (dbfTmpLin)->cRefAux    := (dbfSatCliL)->cRefAux
               (dbfTmpLin)->cRefAux2   := (dbfSatCliL)->cRefAux2
               (dbfTmpLin)->cCtrCoste  := (dbfSatCliL)->cCtrCoste
               (dbfTmpLin)->cTipCtr    := (dbfSatCliL)->cTipCtr
               (dbfTmpLin)->cTerCtr    := (dbfSatCliL)->cTerCtr

               (dbfSatCliL)->( dbSkip() )

            end

            ( dbfTmpLin )->( dbGoTop() )





            if ( nMode <> 4 ) .AND. ( dbfSatCliI )->( dbSeek( cNumsat ) )
               while ( dbfSatCliI )->cSerSat + str( ( dbfSatCliI )->nNumSat ) + ( dbfSatCliI )->cSufSat == cNumsat .AND. !( dbfSatCliI )->( Eof() )
                  dbPass( dbfSatCliI, dbfTmpInc, .T. )
                  ( dbfSatCliI )->( dbSkip() )
               end
            end

            ( dbfSatCliI )->( dbGoTop() )





            if ( dbfSatCliD )->( dbSeek( cNumsat ) )
               while ( dbfSatCliD )->cSerSat + str( ( dbfSatCliD )->nNumSat ) + ( dbfSatCliD )->cSufSat == cNumsat .AND. !( dbfSatCliD )->( Eof() )
                  dbPass( dbfSatCliD, dbfTmpDoc, .T. )
                  ( dbfSatCliD )->( dbSkip() )
               end
            end

            ( dbfSatCliD )->( dbGoTop() )





            if ( dbfSatCliS )->( dbSeek( cNumsat ) )
               while ( dbfSatCliS )->cSerSat + str( ( dbfSatCliS )->nNumSat ) + ( dbfSatCliS )->cSufSat == cNumsat .AND. !( dbfSatCliS )->( Eof() )
                  dbPass( dbfSatCliS, dbfTmpSer, .T. )
                  ( dbfSatCliS )->( dbSkip() )
               end
            end

            ( dbfSatCliS )->( dbGoTop() )

            oBrw:Refresh()
            oBrw:Setfocus()

         end

         lValid   := .T.

         if ( dbfSatCliT )->( dbRLock() )
            ( dbfSatCliT )->lEstado := .T.
            ( dbfSatCliT )->( dbUnlock() )
         end

         CursorWE()

      end

      HideImportacion( aGet, aGet[ 42 ] )

   else

      MsgStop( "S.A.T. no existe" )

   end

RETURN lValid



Static Function HideImportacion( aGet, oShow )

   aGet[ 61 ]:Disable()

   aGet[ 39 ]:Hide()
   aGet[ 40 ]:Hide()
   aGet[ 41 ]:Hide()
   aGet[ 42 ]:Hide()

   oBtnPre:Hide()
   oBtnPed:Hide()
   oBtnAlb:Hide()
   oBtnGrp:Hide()
   oBtnSat:Hide()

   if !empty( oShow )
      oShow:Show()
   end

Return ( nil )



Function cFacturaClienteDireccionSAT()

   local dbfObras
   local cDireccion  := ""

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ObrasT.Dbf" ), ( cCheckArea( "Obras", @dbfObras ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   if ( dbfObras )->( dbSeek( ( dbfSatCliT )->cCodCli + ( dbfSatCliT )->cCodObr ) )
      cDireccion     := ( dbfObras )->cNomObr
   end

   ( dbfObras )->( dbCloseArea() )

Return ( cDireccion )



Static Function CargaAtipicasCliente( aTmpFac, oBrwLin, oDlg )

   local nOrder
   local lSearch     := .F.





   if empty( aTmpFac[ 7 ] )
      MsgStop( "Código de cliente no puede estar vacío para utilizar el asistente." )
      Return .F.
   end





   nOrder            := ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodCli" ) )

   if ( D():Atipicas( nView ) )->( dbSeek( aTmpFac[ 7 ] ) )

      AutoMeterDialog( oDlg )

      SetTotalAutoMeterDialog( ( D():Atipicas( nView ) )->( LastRec() ) )

      while ( D():Atipicas( nView ) )->cCodCli == aTmpFac[ 7 ] .AND. !( D():Atipicas( nView ) )->( Eof() )

         if lConditionAtipica( nil, D():Atipicas( nView ) ) .AND. ( D():Atipicas( nView ) )->lAplFac

            AppendDatosAtipicas( aTmpFac )

         end

         SetAutoMeterDialog( ( D():Atipicas( nView ) )->( Recno() ) )

         ( D():Atipicas( nView ) )->( dbSkip() )

      end

      EndAutoMeterDialog( oDlg )

   end





   if !lSearch

      if !empty( aTmpFac[ 85 ] )

         ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodGrp" ) )

         if ( D():Atipicas( nView ) )->( dbSeek( aTmpFac[ 85 ] ) )

            AutoMeterDialog( oDlg )

            SetTotalAutoMeterDialog( ( D():Atipicas( nView ) )->( LastRec() ) )

            while ( D():Atipicas( nView ) )->cCodGrp == aTmpFac[ 85 ] .AND. !( D():Atipicas( nView ) )->( Eof() )

               if lConditionAtipica( nil, D():Atipicas( nView ) ) .AND. ( D():Atipicas( nView ) )->lAplFac

                  AppendDatosAtipicas( aTmpFac )

               end

               SetAutoMeterDialog( ( D():Atipicas( nView ) )->( Recno() ) )

               ( D():Atipicas( nView ) )->( dbSkip() )

            end

            EndAutoMeterDialog( oDlg )

         end

         ( D():Atipicas( nView ) )->( OrdSetFocus( nOrder ) )

      end

   end



   RecalculaTotal( aTmpFac )

   if !empty( oBrwLin )
      oBrwLin:GoTop()
      oBrwLin:Refresh()
   end

Return .T.



Static Function AppendDatosAtipicas( aTmpFac )

   local nPrecioAtipica
      local hAtipica

      if !dbSeekInOrd( ( D():Atipicas( nView ) )->cCodArt, "cRef", dbfTmpLin )


      if ( D():Articulos( nView ) )->( dbSeek( ( D():Atipicas( nView ) )->cCodArt ) ) .AND. !( D():Articulos( nView ) )->lObs

         ( dbfTmpLin )->( dbAppend() )

         ( dbfTmpLin )->nNumLin        := nLastNum( dbfTmpLin )
         ( dbfTmpLin )->nPosPrint      := nLastNum( dbfTmpLin, "nPosPrint" )
         ( dbfTmpLin )->cRef           := ( D():Atipicas( nView ) )->cCodArt
         ( dbfTmpLin )->cCodPr1        := ( D():Atipicas( nView ) )->cCodPr1
         ( dbfTmpLin )->cCodPr2        := ( D():Atipicas( nView ) )->cCodPr2
         ( dbfTmpLin )->cValPr1        := ( D():Atipicas( nView ) )->cValPr1
         ( dbfTmpLin )->cValPr2        := ( D():Atipicas( nView ) )->cValPr2
         ( dbfTmpLin )->nCosDiv        := ( D():Atipicas( nView ) )->nPrcCom
         ( dbfTmpLin )->cAlmLin        := aTmpFac[ 8 ]
         ( dbfTmpLin )->lIvaLin        := aTmpFac[ 61 ]
         ( dbfTmpLin )->dFecFac        := aTmpFac[ 6 ]
         ( dbfTmpLin )->nTarLin        := oGetTarifa:getTarifa()
         ( dbfTmpLin )->nCanEnt        := 1
         ( dbfTmpLin )->nUniCaja       := 0
         ( dbfTmpLin )->lFromAtp       := .T.



         ( dbfTmpLin )->cDetalle       := ( D():Articulos( nView ) )->Nombre

         if aTmpFac[ 68 ] <= 2
            ( dbfTmpLin )->nIva        := nIva( dbfIva, ( D():Articulos( nView ) )->TipoIva )
            ( dbfTmpLin )->nReq        := nReq( dbfIva, ( D():Articulos( nView ) )->TipoIva )
         end

         ( dbfTmpLin )->cUnidad        := ( D():Articulos( nView ) )->cUnidad
         ( dbfTmpLin )->nCtlStk        := ( D():Articulos( nView ) )->nCtlStock
         ( dbfTmpLin )->lLote          := ( D():Articulos( nView ) )->lLote
         ( dbfTmpLin )->lMsgVta        := ( D():Articulos( nView ) )->lMsgVta
         ( dbfTmpLin )->lNotVta        := ( D():Articulos( nView ) )->lNotVta
         ( dbfTmpLin )->cCodTip        := ( D():Articulos( nView ) )->cCodTip
         ( dbfTmpLin )->cCodFam        := ( D():Articulos( nView ) )->Familia
         ( dbfTmpLin )->nPesoKg        := ( D():Articulos( nView ) )->nPesoKg

         ( dbfTmpLin )->dFecUltCom     := dFechaUltimaVenta( aTmpFac[ 7 ], ( D():Atipicas( nView ) )->cCodArt, dbfAlbCliL, D():FacturasClientesLineas( nView ) )
         ( dbfTmpLin )->nUniUltCom     := nUnidadesUltimaVenta( aTmpFac[ 7 ], ( D():Atipicas( nView ) )->cCodArt, dbfAlbCliL, D():FacturasClientesLineas( nView ) )
         ( dbfTmpLin )->nPrcUltCom     := nPrecioUltimaVenta( aTmpFac[ 7 ], ( D():Atipicas( nView ) )->cCodArt, dbfAlbCliL, D():FacturasClientesLineas( nView ) )





         hAtipica := hAtipica( hValue( dbfTmpLin, aTmpFac ) )

         if !empty( hAtipica )

            if hhaskey( hAtipica, "nImporte" )
               if hAtipica[ "nImporte" ] <> 0
                  ( dbfTmpLin )->nPreUnit    := hAtipica[ "nImporte" ]
               else
                  ( dbfTmpLin )->nPreUnit    := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), dbfDiv, dbfKit, dbfIva, , , oNewImp )
               end
            end

            if hhaskey( hAtipica, "nDescuentoPorcentual" )
               ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
            end

            if hhaskey( hAtipica, "nDescuentoPromocional" )
               ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
            end

            if hhaskey( hAtipica, "nDescuentoLineal" )
               ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
            end

            if hhaskey( hAtipica, "nComisionAgente" )
               ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
            end

         end

      end

   else





      hAtipica := hAtipica( hValue( dbfTmpLin, aTmpFac ) )

      if !empty( hAtipica )

         if hhaskey( hAtipica, "nImporte" )
            if hAtipica[ "nImporte" ] <> 0
               ( dbfTmpLin )->nPreUnit := hAtipica[ "nImporte" ]
            else
               ( dbfTmpLin )->nPreUnit    := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpFac[ 63 ], aTmpFac[ 61 ], D():Articulos( nView ), dbfDiv, dbfKit, dbfIva, , , oNewImp )
            end
         end

         if hhaskey( hAtipica, "nDescuentoPorcentual" )
            ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
         end

         if hhaskey( hAtipica, "nDescuentoPromocional" )
            ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
         end

         if hhaskey( hAtipica, "nDescuentoLineal" )
            ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
         end

         if hhaskey( hAtipica, "nComisionAgente" )
            ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
         end

      end

   end

Return .T.



Static Function ChangeUnidades( oCol, uNewValue, nKey, aTmp, dbfTmpLin )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      ( dbfTmpLin )->nUnicaja       := uNewValue

      RecalculaTotal( aTmp )

   end

Return .T.



Static Function ChangePrecio( oCol, uNewValue, nKey, aTmp, dbfTmpLin )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      SetUFacCli( dbfTmpLin, uNewValue )

      RecalculaTotal( aTmp )

    end

Return .T.






Static Function SumaUnidadLinea( aTmp )


   ( dbfTmpLin )->nUniCaja++

   RecalculaTotal( aTmp )

Return .T.






Static Function RestaUnidadLinea( aTmp )

   ( dbfTmpLin )->nUniCaja--

   RecalculaTotal( aTmp )

Return .T.



Static Function hValue( uTmpLinea, uTmpCabecera )

   local hValue                  := {=>}

   do case
      case ValType( uTmpLinea ) == "A"

         hValue[ "cCodigoArticulo"   ] := uTmpLinea[ 4 ]
         hValue[ "cCodigoPropiedad1" ] := uTmpLinea[ 28 ]
         hValue[ "cCodigoPropiedad2" ] := uTmpLinea[ 29 ]
         hValue[ "cValorPropiedad1"  ] := uTmpLinea[ 30 ]
         hValue[ "cValorPropiedad2"  ] := uTmpLinea[ 31 ]
         hValue[ "cCodigoFamilia"    ] := uTmpLinea[ 55 ]
         hValue[ "nTarifaPrecio"     ] := uTmpLinea[ 77 ]
         hValue[ "nCajas"            ] := uTmpLinea[ 12 ]
         hValue[ "nUnidades"         ] := uTmpLinea[ 19 ]

      case ValType( uTmpLinea ) == "C"

         hValue[ "cCodigoArticulo"   ] := ( uTmpLinea )->cRef
         hValue[ "cCodigoPropiedad1" ] := ( uTmpLinea )->cCodPr1
         hValue[ "cCodigoPropiedad2" ] := ( uTmpLinea )->cCodPr2
         hValue[ "cValorPropiedad1"  ] := ( uTmpLinea )->cValPr1
         hValue[ "cValorPropiedad2"  ] := ( uTmpLinea )->cValPr2
         hValue[ "cCodigoFamilia"    ] := ( uTmpLinea )->cCodFam
         hValue[ "nTarifaPrecio"     ] := ( uTmpLinea )->nTarLin
         hValue[ "nCajas"            ] := ( uTmpLinea )->nCanEnt
         hValue[ "nUnidades"         ] := ( uTmpLinea )->nUniCaja

   end

   do case
      case ValType( uTmpCabecera ) == "A"

         hValue[ "cCodigoCliente"    ] := uTmpCabecera[ 7 ]
         hValue[ "cCodigoGrupo"      ] := uTmpCabecera[ 85 ]
         hValue[ "lIvaIncluido"      ] := uTmpCabecera[ 61 ]
         hValue[ "dFecha"            ] := uTmpCabecera[ 6 ]
         hValue[ "nDescuentoTarifa"  ] := uTmpCabecera[ 125 ]

      case ValType( uTmpCabecera ) == "C"

         hValue[ "cCodigoCliente"    ] := ( uTmpCabecera )->cCodCli
         hValue[ "cCodigoGrupo"      ] := ( uTmpCabecera )->cCodGrp
         hValue[ "lIvaIncluido"      ] := ( uTmpCabecera )->lIvaInc
         hValue[ "dFecha"            ] := ( uTmpCabecera )->dFecFac
         hValue[ "nDescuentoTarifa"  ] := ( uTmpCabecera )->nDtoTarifa

   end

   hValue[ "nTipoDocumento"         ] := "11"
   hValue[ "nView"                  ] := nView

Return ( hValue )



Static Function ImprimirSeriesFacturas( nDevice, lExt )

   local aStatus
   local oPrinter
   local cPrinterFactura   := cPrinterFactura( Application():CodigoCaja(), dbfCajT )

   If( nDevice == nil, nDevice := 1, ) ;
   If( lExt == nil, lExt := .F., ) ;



   oPrinter                := PrintSeries():New( nView ):SetVentas()



   oPrinter:Serie(         ( D():FacturasClientes( nView ) )->cSerie )
   oPrinter:Documento(     ( D():FacturasClientes( nView ) )->nNumFac )
   oPrinter:Sufijo(        ( D():FacturasClientes( nView ) )->cSufFac )

   if lExt

      oPrinter:oFechaInicio:cText( ( D():FacturasClientes( nView ) )->dFecFac )
      oPrinter:oFechaFin:cText( ( D():FacturasClientes( nView ) )->dFecFac )

   end

   oPrinter:oFormatoDocumento:TypeDocumento( "FC" )



   oPrinter:oFormatoDocumento:cText( cFormatoFacturasClientes() )



   aStatus           := D():GetInitStatus( "FacCliT", nView )

   oPrinter:bInit    := {||   ( D():FacturasClientes( nView ) )->( dbSeek( oPrinter:DocumentoInicio(), .T. ) ) }


   oPrinter:bWhile   := {||   oPrinter:InRangeDocumento( D():FacturasClientesId( nView ) )                  .AND.  ( D():FacturasClientes( nView ) )->( !eof() ) }




   oPrinter:bFor     := {||   oPrinter:InRangeFecha( ( D():FacturasClientes( nView ) )->dFecFac )           .AND.  oPrinter:InRangeCliente( ( D():FacturasClientes( nView ) )->cCodCli )         .AND.  oPrinter:InRangeAgente( ( D():FacturasClientes( nView ) )->cCodAge )         .AND.  oPrinter:InRangeGrupoCliente( retGrpCli( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ) ) ) }

   oPrinter:bSkip    := {||   ( D():FacturasClientes( nView ) )->( dbSkip() ) }





   oPrinter:bAction  := {||   GenFacCli(  nDevice, "Imprimiendo documento : " + D():FacturasClientesId( nView ), oPrinter:oFormatoDocumento:uGetValue, oPrinter:oImpresora:uGetValue, if( !oPrinter:oCopias:lCopiasPredeterminadas, oPrinter:oCopias:uGetValue, ) ) }


   oPrinter:bStart   := {||   if( lExternal, oPrinter:DisableRange(), ), if( !empty( cPrinterFactura ), oPrinter:setPrinter( cPrinterFactura ), ) }



   oPrinter:Resource():End()



   D():SetStatus( "FacCliT", nView, aStatus )

   if !empty( oWndBrw )
      oWndBrw:Refresh()
   end

Return .T.









FUNCTION nBrtLFacCli( uTmpLin, nDec, nRec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotUFacCli( uTmpLin, nDec, nVdv, cPorDiv )
   nCalculo          *= nTotNFacCli( uTmpLin )

   nCalculo          := Round( nCalculo / nVdv, nRec )

Return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )






FUNCTION nIvaUFacCli( uTmpLin, nDec, nVdv )

   local nCalculo

   If( uTmpLin == nil, uTmpLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotUFacCli( uTmpLin, nDec, nVdv )

   if ( uTmpLin )->lIvaLin
      nCalculo       -= nCalculo / ( 1 + ( uTmpLin )->nIva / 100 )
   else
      nCalculo       := nCalculo * ( uTmpLin )->nIva / 100
   end

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )






FUNCTION nReqUFacCli( dbfTmpLin, nDec, nVdv )

   local nCalculo

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUFacCli( dbfTmpLin, nDec, nVdv )

   if !( dbfTmpLin )->lIvaLin
      nCalculo    := nCalculo * ( dbfTmpLin )->nReq / 100
   else
      nCalculo    -= nCalculo / ( 1 + ( dbfTmpLin )->nReq / 100 )
   end

   if nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )






FUNCTION nIncUFacCli( cTmpLin, nDec, nVdv )

   local nCalculo

   If( cTmpLin == nil, cTmpLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotUFacCli( cTmpLin, nDec, nVdv )

   if !( cTmpLin )->lIvaLin
      nCalculo       += nCalculo * ( cTmpLin )->nIva / 100
   end

   IF nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nIvaLFacCli( cFacCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo    := 0

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   if ( cFacCliL )->nRegIva <= 1

      nCalculo          := nTotLFacCli( cFacCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

      if !( cFacCliL )->lIvaLin
         nCalculo       := nCalculo * ( cFacCliL )->nIva / 100
      else
         nCalculo       -= nCalculo / ( 1 + ( cFacCliL )->nIva / 100 )
      end

   end

   nCalculo          := Round( nCalculo, nRou )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nIvaIFacCli( dbfLin, nDec, nRou, nVdv, cPouDiv )

   local nCalculo := nTotIFacCli( dbfLin, nDec, nRou, nVdv )

   nCalculo       := Round( nCalculo * ( dbfLin )->nIva / 100, nRou )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nReqLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo := nTotLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   nCalculo       := Round( nCalculo * ( dbfLin )->nReq / 100, nRou )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )







FUNCTION nIncLFacCli( cDbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )

   local lIvaInc
   local nCalculo    := 0

   If( nDec == nil, nDec := 0, ) ;
   If( nRouDec == nil, nRouDec := 0111, ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .F., ) ;
   If( cDbfLin == nil, cDbfLin := D():FacturasClientesLineas( nView ), ) ;

   nCalculo          := nTotLFacCli( cDbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn )

   if !( cDbfLin )->lIvaLin
      nCalculo       += nCalculo * ( cDbfLin )->nIva / 100
   end

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )






FUNCTION nNoIncLFacCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )

   local nCalculo

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;

   nCalculo       := nTotLFacCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn )

   if ( dbfLin )->lIvaLin
      nCalculo    := nCalculo / ( ( ( dbfLin )->nIva / 100 ) + 1 )
   end

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )







FUNCTION nNoIncUFacCli( dbfLin, nDec, nVdv )

   local nCalculo

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;

   nCalculo       := nTotUFacCli( dbfLin, nDec, nVdv )

   if ( dbfLin )->lIvaLin
      nCalculo    := nCalculo / ( ( ( dbfLin )->nIva / 100 ) + 1 )
   end

RETURN ( nCalculo )



FUNCTION aTotFacCli( cFactura, cFacCliT, cFacCliL, dbfIva, dbfDiv, dbfFacCliP, cAntCliT, cDivRet )

   nTotFacCli( cFactura, cFacCliT, cFacCliL, dbfIva, dbfDiv, dbfFacCliP, nil, cDivRet )

RETURN ( { nTotNet, nTotIva, nTotReq, nTotFac, nTotPnt, nTotTrn, nTotAge, aTotIva, nTotCos, nTotIvm, nTotRnt, nTotRet, nTotCob, nTotalDtoLineal } )



FUNCTION nTotPdtFacCli( cFactura, cFacCliT, cFacCliL, dbfIva, dbfDiv, dbfFacCliP, cAntCliT, cDivRet )

   nTotFacCli( cFactura, cFacCliT, cFacCliL, dbfIva, dbfDiv, dbfFacCliP, nil, cDivRet )

RETURN ( nTotFac - nTotCob )



FUNCTION sTotFacCli( cFactura, cFacCliT, cFacCliL, dbfIva, dbfDiv, dbfFacCliP, cAntCliT, cDivRet )

   local sTotal

   nTotFacCli( cFactura, cFacCliT, cFacCliL, dbfIva, dbfDiv, dbfFacCliP, nil, cDivRet )

   sTotal                                 := sTotal()

   sTotal:nTotalBruto                     := nTotBrt
   sTotal:nTotalNeto                      := nTotNet
   sTotal:nTotalIva                       := nTotIva
   sTotal:nTotalRecargoEquivalencia       := nTotReq
   sTotal:nTotalRetencion                 := nTotRet
   sTotal:nTotalDocumento                 := nTotFac
   sTotal:nTotalPuntoVerde                := nTotPnt
   sTotal:nTotalTransporte                := nTotTrn
   sTotal:nTotalAgente                    := nTotAge
   sTotal:nTotalCosto                     := nTotCos
   sTotal:nTotalImpuestoHidrocarburos     := nTotIvm
   sTotal:nTotalRentabilidad              := nTotRnt

   sTotal:nTotalDtoLineal                 := nTotalDtoLineal

   sTotal:nTotalDescuentoGeneral          := nTotDto
   sTotal:nTotalDescuentoProntoPago       := nTotDpp
   sTotal:nTotalDescuentoUno              := nTotUno
   sTotal:nTotalDescuentoDos              := nTotDos

   sTotal:nTotalCobrado                   := nTotCob

   sTotal:nTotalDtoLineal                      := nTotalDtoLineal

   sTotal:aTotalIva                       := aTotIva

Return ( sTotal )







FUNCTION cCliFacCli( cFacCli, uFacCliT )

   local cCodCli  := ""

   do case
      case ValType( uFacCliT ) == "C"
         if (uFacCliT)->( dbSeek( cFacCli ) )
            cCodCli     := (uFacCliT)->CCODCLI
         end
      case ValType( uFacCliT ) == "O"
         if uFacCliT:Seek( cFacCli )
            cCodCli     := uFacCliT:cCodCli
         end
   end

RETURN ( cCodCli )







FUNCTION cNbrFacCli( cFacCli, uFacCliT )

   local cNomCli  := ""

   do case
      case ValType( uFacCliT ) == "C"
         if (uFacCliT)->( dbSeek( cFacCli ) )
            cNomCli     := (uFacCliT)->CNOMCLI
         end
      case ValType( uFacCliT ) == "O"
         if uFacCliT:Seek( cFacCli )
            cNomCli     := uFacCliT:cNomCli
         end
   end

RETURN ( cNomCli )







FUNCTION cPgoFacCli( cFacCli, cFacCliT )

   local cCodPgo  := ""

   if ValType( cFacCliT ) == "O"
      if cFacCliT:Seek( cFacCli )
         cCodPgo  := cFacCliT:cCodPago
      end
   else
      if ( cFacCliT )->( dbSeek( cFacCli ) )
         cCodPgo  := ( cFacCliT )->cCodPago
      end
   end

RETURN ( cCodPgo )



FUNCTION cProFacCli( cFacCli, cFacCliT )

   local cCodPro  := ""

   if ( cFacCliT )->( dbSeek( cFacCli ) )
      cCodPro     := ( cFacCliT )->CCODPRO
   end

RETURN ( cCodPro )






FUNCTION lConFacCli( cFacCli, cFacCliT )

   local lConFac  := .F.

   if ( cFacCliT )->( dbSeek( cFacCli ) )
      lConFac     := ( cFacCliT )->lContab
   end

RETURN ( lConFac )






FUNCTION cAgeFacCli( cFacCli, cFacCliT )

   local cCliFac  := ""

   if ValType( cFacCliT ) == "O"
      if cFacCliT:Seek( cFacCli )
         cCliFac  := cFacCliT:cCodAge
      end
   else
      if ( cFacCliT )->( dbSeek( cFacCli ) )
         cCliFac  := ( cFacCliT )->cCodAge
      end
   end

RETURN ( cCliFac )






FUNCTION cDesFacCli( cFacCliL, cFacCliS )

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( cFacCliS == nil, cFacCliS := dbfFacCliS, ) ;

RETURN ( Descrip( cFacCliL, cFacCliS ) )



FUNCTION cDesFacCliLeng( cFacCliL, cFacCliS, cArtLeng )

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( cFacCliS == nil, cFacCliS := dbfFacCliS, ) ;
   If( cArtLeng == nil, cArtLeng := D():ArticuloLenguaje( nView ), ) ;

RETURN ( DescripLeng( cFacCliL, cFacCliS, cArtLeng ) )



Function cCtaFacCli( cFacCliT, cFacCliP, cBncCli )

   local cCtaFacCli     := ""

   If( cFacCliT == nil, cFacCliT := D():FacturasClientes( nView ), ) ;
   If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cBncCli == nil, cBncCli := dbfCliBnc, ) ;

   cCtaFacCli           := Rtrim( ( cFacCliT )->cEntBnc + ( cFacCliT )->cSucBnc + ( cFacCliT )->cDigBnc + ( cFacCliT )->cCtaBnc )

   if empty( cCtaFacCli )
      if dbSeekInOrd( ( cFacCliT )->cSerie + str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac, "fNumFac", cFacCliP )
         cCtaFacCli     := cClientCuenta( ( cFacCliP )->cCodCli, cBncCli )
      end
   end

Return ( cCtaFacCli )



FUNCTION nBas( aIva, nPctIva, nRet )

   local nPos := aScan( aIva, {| aIva | aIva[ 3 ] == nPctIva } )

RETURN ( if( nPos <> 0, aIva[ nPos, nRet ], 0 ) )



FUNCTION nValorArrayIVA( cSerializeTotal, nPorcentajeIva, nValor )

   local nPos
   local aTotalIva   := {}
   local sTotal      := sTotal():New()
   local cValor      := "neto"

   If( nValor == nil, nValor := 2, ) ;

   do case
       case nValor == 1
           cValor := "bruto"
       case nValor == 2
           cValor := "neto"
       case nValor == 3
           cValor := "porcentajeiva"
       case nValor == 4
           cValor := "porcentajere"
       case nValor == 5
           cValor := "npntver"
       case nValor == 6
           cValor := "nivmh"
       case nValor == 7
           cValor := "ntransporte"
       case nValor == 8
           cValor := "impiva"
       case nValor == 9
           cValor := "impre"
   end

   sTotal:loadFromText( cSerializeTotal )

   aTotalIva         := sTotal:aTotalIva

   if empty( aTotalIva )
      RETURN ( 0 )
   end

   nPos              := aScan( aTotalIva, {| aIva | hGet( aIva, "porcentajeiva" ) == nPorcentajeIva } )

RETURN ( if( nPos <> 0, hGet( aTotalIva[ nPos ], cValor ), 0 ) )






function nTotDFacCli( cCodArt, dbfFacCliL, cCodAlm )

   local nOrd     := ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( "cRef" ) )
   local nRec     := ( D():FacturasClientesLineas( nView ) )->( Recno() )
   local nTotVta  := 0

   if ( D():FacturasClientesLineas( nView ) )->( dbSeek( cCodArt ) )

      while ( D():FacturasClientesLineas( nView ) )->cRef == cCodArt .AND. !( D():FacturasClientesLineas( nView ) )->( eof() )

         if !( D():FacturasClientesLineas( nView ) )->lTotLin
            if cCodAlm <> nil
               if cCodAlm == ( D():FacturasClientesLineas( nView ) )->cAlmLin
                  nTotVta  += nTotNFacCli( D():FacturasClientesLineas( nView ) ) * NotCero( ( D():FacturasClientesLineas( nView ) )->nFacCnv )
               end
            else
               nTotVta     += nTotNFacCli( D():FacturasClientesLineas( nView ) ) * NotCero( ( D():FacturasClientesLineas( nView ) )->nFacCnv )
            end
         end

         ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

      end

   end

   ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( nOrd  ) )
   ( D():FacturasClientesLineas( nView ) )->( dbGoTo( nRec ) )

return ( nTotVta )



FUNCTION nVolLFacCli( dbfLin )

   local nCalculo    := 0

   if !( dbfLin )->lTotLin
      nCalculo       := nTotNFacCli( dbfLin ) * ( dbfLin )->nVolumen
   end

RETURN ( nCalculo )



FUNCTION nTotPFacCli( dbfLin, nDec, nVdv, cPorDiv )

   local nCalculo
   local nDescuentoGeneral
   local nDescuentoPromocional

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( dbfLin )->lTotLin

      nCalculo                   := nTotUFacCli( dbfLin, nDec )

   else





      nCalculo                   := nTotUFacCli( dbfLin, nDec )

      nCalculo                   -= Round( ( dbfLin )->nDtoDiv , nDec )

      if ( dbfLin )->nDto <> 0
         nCalculo                -= nCalculo * ( dbfLin )->nDto / 100
      end

      if ( dbfLin )->nDtoPrm <> 0
         nCalculo                -= nCalculo * ( dbfLin )->nDtoPrm / 100
      end






   end

   nCalculo                      := Round( nCalculo / nVdv, nDec )

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )






FUNCTION nDtoLFacCli( cFacCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cFacCliL )->nDto <> 0 .AND. !( cFacCliL )->lTotLin

      nCalculo          := nTotUFacCli( cFacCliL, nDec ) * nTotNFacCli( cFacCliL )





      nCalculo          -= Round( ( cFacCliL )->nDtoDiv / nVdv , nDec )

      nCalculo          := nCalculo * ( cFacCliL )->nDto / 100


      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )



FUNCTION nDtoLinealFacCli( cFacCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if !( cFacCliL )->lTotLin

      nCalculo          := nTotNFacCli( cFacCliL ) * ( cFacCliL )->nDtoDiv





      nCalculo          := Round( nCalculo / nVdv , nDec )

      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )






FUNCTION nPrmLFacCli( cFacCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cFacCliL )->nDtoPrm <> 0 .AND. !( cFacCliL )->lTotLin

      nCalculo          := nTotUFacCli( cFacCliL, nDec ) * nTotNFacCli( cFacCliL )





      nCalculo          -= Round( ( cFacCliL )->nDtoDiv / nVdv , nDec )

      if ( cFacCliL )->nDto <> 0
         nCalculo       -= nCalculo * ( cFacCliL )->nDto / 100
      end

      nCalculo          := nCalculo * ( cFacCliL )->nDtoPrm / 100

      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )



Function nTotDtoLFacCli( dbfLin, nDec, nVdv, cPorDiv )

   local nCalculo

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nDtoLFacCli( dbfLin, nDec, nVdv ) * nTotNFacCli( dbfLin )

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

   nCalculo          := Round( nCalculo, nDec )

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION sTotLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )

   local uTotLFacCli
   local nTotLFacCli := nTotLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )

   if nTotLFacCli == 0 .AND. !( dbfLin )->lControl
      uTotLFacCli    := "S/C"
   else
      uTotLFacCli    := if( cPorDiv <> NIL, Trans( nTotLFacCli, cPorDiv ), nTotLFacCli )
   end

RETURN ( uTotLFacCli )



FUNCTION nDtoAtpFacCli( uFacCliT, uFacCliL, nDec, nRou, nVdv, lPntVer, lImpTrn )

   local nCalculo
   local nDtoAtp     := 0

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo          := nTotLFacCli( uFacCliL, nDec, nRou, nVdv, .T., lPntVer, lImpTrn )

   if ( uFacCliT )->nSbrAtp <= 1 .AND. ( uFacCliT )->nDtoAtp <> 0
      nDtoAtp        += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo          -= Round( nCalculo * ( uFacCliT )->nDtoEsp / 100, nRou )

   if ( uFacCliT )->nSbrAtp == 2 .AND. ( uFacCliT )->nDtoAtp <> 0
      nDtoAtp        += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo          -= Round( nCalculo * ( uFacCliT )->nDpp    / 100, nRou )

   if ( uFacCliT )->nSbrAtp == 3 .AND. ( uFacCliT )->nDtoAtp <> 0
      nDtoAtp        += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo          -= Round( nCalculo * ( uFacCliT )->nDtoUno / 100, nRou )

   if ( uFacCliT )->nSbrAtp == 4 .AND. ( uFacCliT )->nDtoAtp <> 0
      nDtoAtp        += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo          -= Round( nCalculo * ( uFacCliT )->nDtoDos / 100, nRou )

   if ( uFacCliT )->nSbrAtp == 5 .AND. ( uFacCliT )->nDtoAtp <> 0
      nDtoAtp        += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )
   end

RETURN ( nDtoAtp )






FUNCTION nNetLFacCli( cFacCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;

   nCalculo          := nTotLFacCli( cFacCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )

   if ( cFacCliL )->nIva <> 0 .AND. ( cFacCliL )->lIvaLin
      if nRou <> nil
         nCalculo -= Round( nCalculo / ( 100 / ( cFacCliL )->nIva + 1 ), nRou )
      else
         nCalculo -= ( nCalculo / ( 100 / ( cFacCliL )->nIva + 1 ) )
      end
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )






function nVtaFacCli( cCodCli, dDesde, dHasta, cFacCliT, cFacCliL, cFacCliP, dbfIva, dbfDiv, nYear )

   local nCon     := 0
   local nOrd     := ( cFacCliT )->( OrdSetFocus( "CCODCLI" ) )
   local nRec     := ( cFacCliT )->( Recno() )



   if ( cFacCliT )->( dbSeek( cCodCli ) )

      while ( cFacCliT )->cCodCli = cCodCli .AND. !( cFacCliT )->( Eof() )



         if ( dDesde == nil .OR. ( cFacCliT )->DFECFAC >= dDesde ) .AND. ( dHasta == nil .OR. ( cFacCliT )->DFECFAC <= dHasta ) .AND. ( nYear == nil .OR. Year( ( cFacCliT )->dFecFac ) == nYear )

            nCon  += nTotFacCli( ( cFacCliT )->cSerie + str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac, cFacCliT, cFacCliL, dbfIva, dbfDiv, cFacCliP, nil, cDivEmp(), .F. )

         end

         ( cFacCliT )->( dbSkip() )

         SysRefresh()

      end

   end

   ( cFacCliT )->( OrdSetFocus( nOrd ) )
   ( cFacCliT )->( dbGoTo( nRec ) )

return nCon






function nCobFacCli( cCodCli, dDesde, dHasta, cFacCliT, cFacCliL, dbfFacCliP, dbfIva, dbfDiv, lOnlyCob, nYear )

   local nCon        := 0
   local nOrd        := ( dbfFacCliP )->( OrdSetFocus( "CCODCLI" ) )
   local nRec        := ( dbfFacCliP )->( Recno() )

   If( lOnlyCob == nil, lOnlyCob := .T., ) ;





   if ( dbfFacCliP )->( dbSeek( cCodCli ) )

      while ( dbfFacCliP )->cCodCli = cCodCli .AND. !( dbfFacCliP )->( Eof() )




         if ( ( dbfFacCliP )->lCobrado .AND. !( dbfFacCliP )->lPasado )    .AND. ( dDesde == nil .OR. ( dbfFacCliP )->dEntrada >= dDesde )      .AND. ( dHasta == nil .OR. ( dbfFacCliP )->dEntrada <= dHasta )      .AND. ( nYear == nil .OR. Year( ( dbfFacCliP )->dEntrada ) == nYear )

            nCon     += nTotCobCli( dbfFacCliP, dbfDiv, nil, .F. )

         end

         ( dbfFacCliP )->( dbSkip() )

         SysRefresh()

      end

   end

   ( dbfFacCliP )->( OrdSetFocus( nOrd ) )
   ( dbfFacCliP )->( dbGoTo( nRec ) )

return nCon



function nPdtFacCli( cCodCli, dDesde, dHasta, cFacCliT, cFacCliL, dbfFacCliP, dbfIva, dbfDiv, lOnlyCob, nYear )

   local nCon        := 0
   local nOrd        := ( dbfFacCliP )->( OrdSetFocus( "CCODCLI" ) )
   local nRec        := ( dbfFacCliP )->( Recno() )

   If( lOnlyCob == nil, lOnlyCob := .T., ) ;





   if ( dbfFacCliP )->( dbSeek( cCodCli ) )

      while ( dbfFacCliP )->cCodCli = cCodCli .AND. !( dbfFacCliP )->( Eof() )




         if (!( dbfFacCliP )->lCobrado )                                   .AND. ( dDesde == nil .OR. ( dbfFacCliP )->dEntrada >= dDesde )      .AND. ( dHasta == nil .OR. ( dbfFacCliP )->dEntrada <= dHasta )      .AND. ( nYear == nil .OR. Year( ( dbfFacCliP )->dEntrada ) == nYear )

            nCon     += nTotRecCli( dbfFacCliP, dbfDiv, nil, .F. )

         end

         ( dbfFacCliP )->( dbSkip() )

         SysRefresh()

      end

   end

   ( dbfFacCliP )->( OrdSetFocus( nOrd ) )
   ( dbfFacCliP )->( dbGoTo( nRec ) )

return nCon



Function ShowKit( dbfMaster, dbfTmpLin, oBrw, lSet, dbfTmpInc, cCodCli, cClient, oGetRnt, aGet, oSayGetRnt )

   local lShwKit     := lShwKit()

   If( lSet == nil, lSet := .T., ) ;

   if !empty( aGet ) .AND. !empty( dbfMaster )

      if !empty( cCodCli )

        aGet[ ( dbfMaster )->( FieldPos( "cCodCli" ) ) ]:cText( cCodCli )
        aGet[ ( dbfMaster )->( FieldPos( "cCodCli" ) ) ]:lValid()

      end

   end

   if oGetRnt <> nil .AND. RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )
      oGetRnt:Hide()
   end

   if oSayGetRnt <> nil .AND. RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )
      oSayGetRnt:Hide()
   end





   if !empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )

      while !( dbfTmpInc )->( Eof() )
         if ( dbfTmpInc )->lAviso .AND. !( dbfTmpInc )->lListo
            MsgInfo( Trim( ( dbfTmpInc )->mDesInc ), "!Incidencia!" )
         end
         ( dbfTmpInc )->( dbSkip() )
      end

      ( dbfTmpInc )->( dbGoTop() )

   end

   oBrw:Refresh()

return nil



FUNCTION lSndInt( oBrw, dbf )

   if ( dbf )->( dbRLock() )
      ( dbf )->lSndDoc  := !( dbf )->lSndDoc
      ( dbf )->( dbUnlock() )
   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL







function nTotRFacCli( cNumFac, dFecRes, cCodArt, cValPr1, cValPr2, cLote, cFacCliT, cFacCliL )

   local nTot        := 0
   local aStaFac     := aGetStatus( cFacCliT, .T. )
   local aStaLin     := aGetStatus( cFacCliL, .F. )

   If( cValPr1 == nil, cValPr1 := Space( 40 ), ) ;
   If( cValPr2 == nil, cValPr2 := Space( 40 ), ) ;

   ( cFacCliL )->( dbGoTop() )

   if ( cFacCliL )->( dbSeek( cNumFac ) )
      while ( cFacCliL )->cSerie + str( ( cFacCliL )->nNumFac, 9 ) + ( cFacCliL )->cSufFac == cNumFac .AND. !( cFacCliL )->( eof() )
         if ( cFacCliL )->cRef + ( cFacCliL )->cValPr1 + ( cFacCliL )->cValPr2 == cCodArt + cValPr1 + cValPr2
            if empty( dFecRes ) .OR. dFecRes <= dFecFacCli( ( cFacCliL )->cSerFac + str( ( cFacCliL )->nNumFac ) + ( cFacCliL )->cSufFac, cFacCliT )
               if ( cFacCliL )->cLote == cLote
                  nTot  += nTotNFacCli( cFacCliL )
               end
            end
         end
         ( cFacCliL )->( dbSkip() )
      end
   end

   SetStatus( cFacCliT, aStaFac )
   SetStatus( cFacCliL, aStaLin )

return ( nTot )



function nUnidadesRecibidasFacturasClientes( cNumPed, cCodArt, cValPr1, cValPr2 )

       local nUnidades   := 0
       local cFacCliL      := FacturasClientesLineasModel():lineasUnidadesRecibidas( cNumPed, cCodArt, cValPr1, cValPr2 )

       if Empty( cFacCliL )
           Return ( nUnidades )
       end

    while !( cFacCliL )->( eof() )
        nUnidades        += nTotNFacCli( cFacCliL )
        ( cFacCliL )->( dbskip() )
    end

return ( nUnidades )



FUNCTION browseFacturasClientes( oGet, oIva, nView )

   local oDlg
   local oBrw
   local nOrd
   local oGet1
   local cGet1
   local oCbxOrd
   local cCbxOrd
   local aCbxOrd

   aCbxOrd        := { "Número", "Fecha", "Cliente", "Nombre" }
   nOrd           := GetBrwOpt( "BrwFacCli" )
   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]

   D():getStatusFacturasClientes( nView )

   oDlg = TDialog():New(,,,, "Facturas de clientes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, D():FacturasClientes( nView ) ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, D():FacturasClientes( nView ), nil, nil, .F. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( D():FacturasClientes( nView ) )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := D():FacturasClientes( nView )
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Factura de cliente.Browse"

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumFac"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cSerie + "/" + RTrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cSufFac }
         :nWidth           := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecFac"
         :bEditValue       := {|| Dtoc( ( D():FacturasClientes( nView ) )->dFecFac ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| Rtrim( ( D():FacturasClientes( nView ) )->cCodCli ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| Rtrim( ( D():FacturasClientes( nView ) )->cNomCli ) }
         :nWidth           := 300
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| Trans( ( D():FacturasClientes( nView ) )->nTotFac, cPorDiv() ) }
         :nWidth           := 100
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :cSortOrder       := "nTotFac"
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end





      TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





      TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBrw:Load() )}, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      oGet:cText( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac )

      oGet:bWhen   := {|| .F. }

      if !empty( oIva )
         oIva:Click( ( D():FacturasClientes( nView ) )->lIvaInc ):Refresh()
      end

   end

   SetBrwOpt( "BrwFacCli", ( D():FacturasClientes( nView ) )->( OrdNumber() ) )

   D():setStatusFacturasClientes( nView )

   oBrw:CloseData()

RETURN ( oDlg:nResult == 1 )



Function AppFacCli( cCodCli, cCodArt, lOpenBrowse )

   local nLevel         := Auth():Level( "facturas_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FactCli( nil, nil, cCodCli, cCodArt )
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( .T. )
         nTotFacCli()
         WinAppRec( nil, bEdtRec, D():FacturasClientes( nView ), cCodCli, cCodArt )
         CloseFiles()
      end

   end

RETURN .T.



Function EdtFacCli( cNumFac, lOpenBrowse )

   local nLevel         := Auth():Level( "facturas_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FactCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra factura" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            nTotFacCli()
            WinEdtRec( nil, bEdtRec, D():FacturasClientes( nView ) )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION ZooFacCli( cNumFac, lOpenBrowse )

   local nLevel         := Auth():Level( "facturas_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FactCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra factura" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            nTotFacCli()
            WinZooRec( nil, bEdtRec, D():FacturasClientes( nView ) )
         end
         CloseFiles()
      end

   end

Return .T.



FUNCTION DelFacCli( cNumFac, lOpenBrowse )

   local nLevel         := Auth():Level( "facturas_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FactCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            WinDelRec( nil, D():FacturasClientes( nView ), {|| QuiFacCli() } )
         else
            MsgStop( "No se encuentra factura" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            nTotFacCli()
            WinDelRec( nil, D():FacturasClientes( nView ), {|| QuiFacCli() } )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION PrnFacCli( cNumFac, lOpenBrowse, cCaption, cFormato, cPrinter )

   local nLevel         := Auth():Level( "facturas_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FactCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            ImprimirSeriesFacturas( 1, .T. )

         else
            MsgStop( "No se encuentra factura" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            ImprimirSeriesFacturas( 1, .T. )

         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION VisFacCli( cNumFac, lOpenBrowse, cCaption, cFormato, cPrinter )

   local nLevel         := Auth():Level( "facturas_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FactCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            ImprimirSeriesFacturas( 2, .T. )

         else
            MsgStop( "No se encuentra factura" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientes( nView ) )
            ImprimirSeriesFacturas( 2, .T. )

         end

         CloseFiles()

      end

   end

Return .T.



Function ExcelIsra()

   local n
   local dFecFac     := ""
   local nNumFac     := ""
   local nImpFac     := 0
   local oOleExcel
   local cFileExcel  := cGetFile( "Excel ( *.Xls ) | " + "*.Xls", "Seleccione la hoja de calculo" )

   if File( cFileExcel )

      CreateWaitMeter( "Importando de Excel", "Hoja para Servital", 365 )

      oOleExcel      := CreateObject( "Excel.Application" )

      oOleExcel:Visible       := .F.
      oOleExcel:DisplayAlerts := .F.
      oOleExcel:WorkBooks:Open( cFileExcel )

      oOleExcel:WorkSheets( 1 ):Activate()

      for n := 1 to 365

         dFecFac  := oOleExcel:ActiveSheet:Range( "A" + lTrim( str( n ) ) ):Text
         dFecFac  := Ctod( dFecFac )
         nNumFac  := oOleExcel:ActiveSheet:Range( "B" + lTrim( str( n ) ) ):Text
         nNumFac  := Val( nNumFac )
         nImpFac  := oOleExcel:ActiveSheet:Range( "C" + lTrim( str( n ) ) ):Value

         if !empty( nNumFac )

            if dbAppe( D():FacturasClientes( nView ) )
               ( D():FacturasClientes( nView ) )->cSerie     := "A"
               ( D():FacturasClientes( nView ) )->nNumFac    := nNumFac
               ( D():FacturasClientes( nView ) )->cSufFac    := RetSufEmp()
               ( D():FacturasClientes( nView ) )->lLiquidada := .T.
               ( D():FacturasClientes( nView ) )->dFecFac    := dFecFac
               ( D():FacturasClientes( nView ) )->cCodAlm    := Application():codigoAlmacen()
               ( D():FacturasClientes( nView ) )->cCodCaj    := Application():CodigoCaja()
               ( D():FacturasClientes( nView ) )->cCodPago   := cDefFpg()
               ( D():FacturasClientes( nView ) )->cDivFac    := cDivEmp()
               ( D():FacturasClientes( nView ) )->nVdvFac    := nChgDiv( cDivEmp(), dbfDiv )
               ( D():FacturasClientes( nView ) )->cCodUsr    := Auth():Codigo()
               ( D():FacturasClientes( nView ) )->cTurFac    := cCurSesion()
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end

            if dbAppe( D():FacturasClientesLineas( nView ) )
               ( D():FacturasClientesLineas( nView ) )->cSerie     := "A"
               ( D():FacturasClientesLineas( nView ) )->nNumFac    := nNumFac
               ( D():FacturasClientesLineas( nView ) )->cSufFac    := RetSufEmp()
               ( D():FacturasClientesLineas( nView ) )->nUniCaja   := 1
               ( D():FacturasClientesLineas( nView ) )->nPreUnit   := nImpFac
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end

            if dbAppe( D():FacturasClientesCobros( nView ) )
               ( D():FacturasClientesCobros( nView ) )->cSerie     := "A"
               ( D():FacturasClientesCobros( nView ) )->nNumFac    := nNumFac
               ( D():FacturasClientesCobros( nView ) )->cSufFac    := RetSufEmp()
               ( D():FacturasClientesCobros( nView ) )->nNumRec    := 1
               ( D():FacturasClientesCobros( nView ) )->lCobrado   := .T.
               ( D():FacturasClientesCobros( nView ) )->nImporte   := nImpFac
               ( D():FacturasClientesCobros( nView ) )->nImpCob    := nImpFac
               ( D():FacturasClientesCobros( nView ) )->cDescrip   := "Recibo n. 1 de factura A/" + AllTrim( str( nNumFac ) ) + "/" + RetSufEmp()
               ( D():FacturasClientesCobros( nView ) )->cDivPgo    := cDivEmp()
               ( D():FacturasClientesCobros( nView ) )->nVdvPgo    := nChgDiv( cDivEmp(), dbfDiv )
               ( D():FacturasClientesCobros( nView ) )->dEntrada   := dFecFac
               ( D():FacturasClientesCobros( nView ) )->dPreCob    := dFecFac
               ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
            end

         end

         RefreshWaitMeter( n )

      next

      oOleExcel:DisplayAlerts := .T.
      oOleExcel:Quit()

      EndWaitMeter()

   end

Return nil



Function NewLineReport( oReport )

   oReport:NewLine()

Return ( "" )



function SynFacCli( cPath )

   local oBlock
   local oError
   local nOrdAnt
   local cCodFam
   local aTotFac
   local cCodTip
   local cCodImp
   local cNumSer
   local aNumSer
   local cNumPed
   local aNumPed        := {}
   local nPorCabecera   := 0
   local hConsolidacion

   If( cPath == nil, cPath := cPatEmp(), ) ;

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   FacturasClientesModel():defaultSufijo()

   if OpenFiles()



      ( D():FacturasClientes( nView ) )->( OrdSetFocus( 0 ) )
      ( D():FacturasClientes( nView ) )->( dbGoTop() )

      while !( D():FacturasClientes( nView ) )->( eof() )

         if !empty( ( D():FacturasClientes( nView ) )->cNumPre ) .AND. Len( AllTrim( ( D():FacturasClientes( nView ) )->cNumPre ) ) <> 12
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cNumPre := AllTrim( ( D():FacturasClientes( nView ) )->cNumPre ) + "00"
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientes( nView ) )->cNumPed ) .AND. Len( AllTrim( ( D():FacturasClientes( nView ) )->cNumPed ) ) <> 12
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cNumPed := AllTrim( ( D():FacturasClientes( nView ) )->cNumPed ) + "00"
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientes( nView ) )->cNumAlb ) .AND. Len( AllTrim( ( D():FacturasClientes( nView ) )->cNumAlb ) ) <> 12
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cNumAlb := AllTrim( ( D():FacturasClientes( nView ) )->cNumAlb ) + "00"
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientes( nView ) )->cNumSat ) .AND. Len( AllTrim( ( D():FacturasClientes( nView ) )->cNumSat ) ) <> 12
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cNumSat := AllTrim( ( D():FacturasClientes( nView ) )->cNumSat ) + "00"
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientes( nView ) )->cNumDoc ) .AND. Len( AllTrim( ( D():FacturasClientes( nView ) )->cNumDoc ) ) <> 13
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cNumDoc := AllTrim( ( D():FacturasClientes( nView ) )->cNumDoc ) + "00"
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientes( nView ) )->cFacPrv ) .AND. Len( AllTrim( ( D():FacturasClientes( nView ) )->cFacPrv ) ) <> 12
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cFacPrv := AllTrim( ( D():FacturasClientes( nView ) )->cFacPrv ) + "00"
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():FacturasClientes( nView ) )->cCodCaj )
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cCodCaj := "000"
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():FacturasClientes( nView ) )->cNomCli ) .AND. !empty ( ( D():FacturasClientes( nView ) )->cCodCli )
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->cNomCli := RetFld( ( D():FacturasClientes( nView ) )->cCodCli, D():Clientes( nView ), "Titulo" )
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end
         end





         if !empty( ( D():FacturasClientes( nView ) )->cCodAge )

            if ( D():FacturasClientes( nView ) )->( dbRLock() )
               ( D():FacturasClientes( nView ) )->nPctComAge := RetFld( ( D():FacturasClientes( nView ) )->cCodAge, D():Agentes( nView ), "nCom1" )
               ( D():FacturasClientes( nView ) )->( dbUnLock() )
            end

         end





         if empty( ( D():FacturasClientes( nView ) )->cGuid ) .AND. ( D():FacturasClientes( nView ) )->( dbRLock() )
            ( D():FacturasClientes( nView ) )->cGuid  := win_uuidcreatestring()
            ( D():FacturasClientes( nView ) )->( dbUnLock() )
         end

         if !empty( ( D():FacturasClientes( nView ) )->cNumPed )
            aAdd( aNumPed, ( D():FacturasClientes( nView ) )->cNumPed )
         end

         ( D():FacturasClientes( nView ) )->( dbSkip() )

      end

      ( D():FacturasClientes( nView ) )->( OrdSetFocus( 1 ) )



      ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( 0 ) )
      ( D():FacturasClientesCobros( nView ) )->( dbGoTop() )

      while !( D():FacturasClientesCobros( nView ) )->( eof() )

         if empty( ( D():FacturasClientesCobros( nView ) )->cSufFac )
            if ( D():FacturasClientesCobros( nView ) )->( dbRLock() )
               ( D():FacturasClientesCobros( nView ) )->cSufFac := "00"
               ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():FacturasClientesCobros( nView ) )->cCodCaj )
            if ( D():FacturasClientesCobros( nView ) )->( dbRLock() )
               ( D():FacturasClientesCobros( nView ) )->cCodCaj := "000"
               ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
            end
         end

         ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

      end

      ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "fNumFac" ) )



      ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( 0 ) )
      ( D():FacturasClientesLineas( nView ) )->( dbGoTop() )

      while !( D():FacturasClientesLineas( nView ) )->( eof() )

         if empty( ( D():FacturasClientesLineas( nView ) )->cSufFac )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->cSufFac    := "00"
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientesLineas( nView ) )->cNumPed ) .AND. Len( AllTrim( ( D():FacturasClientesLineas( nView ) )->cNumPed ) ) <> 12
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->cNumPed := AllTrim( ( D():FacturasClientesLineas( nView ) )->cNumPed ) + "00"
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientesLineas( nView ) )->cCodAlb ) .AND. Len( AllTrim( ( D():FacturasClientesLineas( nView ) )->cCodAlb ) ) <> 12
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->cCodAlb := AllTrim( ( D():FacturasClientesLineas( nView ) )->cCodAlb ) + "00"
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end






















         if !empty( ( D():FacturasClientesLineas( nView ) )->cRef ) .AND. empty( ( D():FacturasClientesLineas( nView ) )->nVolumen )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->nVolumen   := RetFld( ( D():FacturasClientesLineas( nView ) )->cRef, D():Articulos( nView ), "nVolumen" )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():FacturasClientesLineas( nView ) )->cLote ) .AND. !empty( ( D():FacturasClientesLineas( nView ) )->nLote )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->cLote      := AllTrim( str( ( D():FacturasClientesLineas( nView ) )->nLote ) )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if ( D():FacturasClientesLineas( nView ) )->lIvaLin <> ( D():FacturasClientes( nView ) )->lIvaInc
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->lIvaLin    := RetFld( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac, D():FacturasClientes( nView ), "lIvaInc" )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientesLineas( nView ) )->cRef ) .AND. empty( ( D():FacturasClientesLineas( nView ) )->cCodFam )
            cCodFam                    := RetFamArt( ( D():FacturasClientesLineas( nView ) )->cRef, D():Articulos( nView ) )
            if !empty( cCodFam )
               if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
                  ( D():FacturasClientesLineas( nView ) )->cCodFam := cCodFam
                  ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
               end
            end
         end

         if !empty( ( D():FacturasClientesLineas( nView ) )->cRef ) .AND. empty( ( D():FacturasClientesLineas( nView ) )->cCodTip )
            cCodTip                    := RetFld( ( D():FacturasClientesLineas( nView ) )->cRef, D():Articulos( nView ), "cCodTip" )
            if !empty( cCodTip )
               if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
                  ( D():FacturasClientesLineas( nView ) )->cCodTip := cCodTip
                  ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
               end
            end
         end

         if !empty( ( D():FacturasClientesLineas( nView ) )->cRef ) .AND. !empty( ( D():FacturasClientesLineas( nView ) )->cCodFam )
            cCodFam                    := cGruFam( ( D():FacturasClientesLineas( nView ) )->cCodFam, dbfFamilia )
            if !empty( cCodFam )
               if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
                    ( D():FacturasClientesLineas( nView ) )->cGrpFam := cCodFam
                    ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
               end
            end
         end

         if empty( ( D():FacturasClientesLineas( nView ) )->nReq )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->nReq       := nPReq( dbfIva, ( D():FacturasClientesLineas( nView ) )->nIva )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():FacturasClientesLineas( nView ) )->cCodAge )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->cCodAge    := RetFld( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac, D():FacturasClientes( nView ), "cCodAge" )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if ( D():FacturasClientesLineas( nView ) )->nRegIva <> RetFld( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac, D():FacturasClientes( nView ), "nRegIva" )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->nRegIva    := RetFld( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac, D():FacturasClientes( nView ), "nRegIva" )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end



         if !empty( ( D():FacturasClientesLineas( nView ) )->cCodAlb )
            if empty( ( D():FacturasClientesLineas( nView ) )->dFecFac )
               if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
                  ( D():FacturasClientesLineas( nView ) )->dFecFac    := retFld( ( D():FacturasClientesLineas( nView ) )->cCodAlb, dbfAlbCliL, "dFecAlb" )
                  ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
               end
            end
         end

         if empty( ( D():FacturasClientesLineas( nView ) )->dFecFac )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->dFecFac    := RetFld( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac, D():FacturasClientes( nView ), "dFecFac" )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():FacturasClientesLineas( nView ) )->cCodCli )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->cCodCli    := RetFld( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac, D():FacturasClientes( nView ), "cCodCli" )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if empty( ( D():FacturasClientesLineas( nView ) )->cAlmLin )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->cAlmLin    := RetFld( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac, D():FacturasClientes( nView ), "cCodAlm" )
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         if !empty( ( D():FacturasClientesLineas( nView ) )->mNumSer )
            aNumSer                    := hb_aTokens( ( D():FacturasClientesLineas( nView ) )->mNumSer, "," )
            for each cNumSer in aNumSer
               ( dbfFacCliS )->( dbAppend() )
               ( dbfFacCliS )->cSerFac := ( D():FacturasClientesLineas( nView ) )->cSerie
               ( dbfFacCliS )->nNumFac := ( D():FacturasClientesLineas( nView ) )->nNumFac
               ( dbfFacCliS )->cSufFac := ( D():FacturasClientesLineas( nView ) )->cSufFac
               ( dbfFacCliS )->cRef    := ( D():FacturasClientesLineas( nView ) )->cRef
               ( dbfFacCliS )->cAlmLin := ( D():FacturasClientesLineas( nView ) )->cAlmLin
               ( dbfFacCliS )->nNumLin := ( D():FacturasClientesLineas( nView ) )->nNumLin
               ( dbfFacCliS )->cNumSer := cNumSer
            next
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->mNumSer    := ""
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end











         if empty( ( D():FacturasClientesLineas( nView ) )->nPosPrint )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->nPosPrint    := ( D():FacturasClientesLineas( nView ) )->nNumLin
               ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
            end
         end

         ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

         SysRefresh()

      end

      ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( 1 ) )



      ( dbfFacCliI )->( OrdSetFocus( 0 ) )
      ( dbfFacCliI )->( dbGoTop() )

      while !( dbfFacCliI )->( eof() )

         if empty( ( dbfFacCliI )->cSufFac )
            if ( dbfFacCliI )->( dbRLock() )
               ( dbfFacCliI )->cSufFac := "00"
               ( dbfFacCliI )->( dbUnLock() )
            end
         end

         ( dbfFacCliI )->( dbSkip() )

         SysRefresh()

      end

      ( dbfFacCliI )->( OrdSetFocus( 1 ) )



      ( dbfFacCliS )->( OrdSetFocus( 0 ) )
      ( dbfFacCliS )->( dbGoTop() )

      while !( dbfFacCliS )->( eof() )

         if empty( ( dbfFacCliS )->cSufFac )
            if ( dbfFacCliS )->( dbRLock() )
               ( dbfFacCliS )->cSufFac := "00"
               ( dbfFacCliS )->( dbUnLock() )
            end
         end

         if empty( ( dbfFacCliS )->dFecFac )
            if ( dbfFacCliS )->( dbRLock() )
               ( dbfFacCliS )->dFecFac := RetFld( ( dbfFacCliS )->cSerFac + str( ( dbfFacCliS )->nNumFac ) + ( dbfFacCliS )->cSufFac, D():FacturasClientes( nView ), "dFecFac" )
               ( dbfFacCliS )->( dbUnLock() )
            end
         end

         ( dbfFacCliS )->( dbSkip() )

         SysRefresh()

      end

      ( dbfFacCliS )->( OrdSetFocus( 1 ) )





      ( D():FacturasClientes( nView ) )->( dbGoTop() )
      while !( D():FacturasClientes( nView ) )->( eof() )

         aTotFac           := aTotFacCli( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), dbfIva, dbfDiv, D():FacturasClientesCobros( nView ), , ( D():FacturasClientes( nView ) )->cDivFac )


            if ( D():FacturasClientes( nView ) )->( dbRLock() )
              ( D():FacturasClientes( nView ) )->nTotNet := aTotFac[1]
              ( D():FacturasClientes( nView ) )->nTotIva := aTotFac[2]
              ( D():FacturasClientes( nView ) )->nTotReq := aTotFac[3]
              ( D():FacturasClientes( nView ) )->nTotFac := aTotFac[4]
              ( D():FacturasClientes( nView ) )->( dbUnLock() )
           end


         if ( D():FacturasClientes( nView ) )->nTotLiq == 0
            if ( D():FacturasClientes( nView ) )->( dbRLock() )
              ( D():FacturasClientes( nView ) )->nTotLiq := aTotFac[13]
             ( D():FacturasClientes( nView ) )->nTotPdt := aTotFac[4] - aTotFac[13]
             ( D():FacturasClientes( nView ) )->( dbUnLock() )
          end
         end

         ( D():FacturasClientes( nView ) )->( dbSkip() )

      end



      ( D():FacturasClientesLineas( nView ) )->( dbGoTop() )
      while !( D():FacturasClientesLineas( nView ) )->( eof() )

         if !( D():FacturasClientes( nView ) )->( dbSeek( ( D():FacturasClientesLineas( nView ) )->cSerie + str( ( D():FacturasClientesLineas( nView ) )->nNumFac ) + ( D():FacturasClientesLineas( nView ) )->cSufFac ) )
            if ( D():FacturasClientesLineas( nView ) )->( dbRLock() )
               ( D():FacturasClientesLineas( nView ) )->( dbDelete() )
               ( D():FacturasClientesLineas( nView ) )->( dbRUnLock() )
            end
         end

         ( D():FacturasClientesLineas( nView ) )->( dbSkip() )

      end

      ( dbfFacCliS )->( dbGoTop() )
      while !( dbfFacCliS )->( eof() )

         if !( D():FacturasClientes( nView ) )->( dbSeek( ( dbfFacCliS )->cSerFac + str( ( dbfFacCliS )->nNumFac ) + ( dbfFacCliS )->cSufFac ) )
            if ( dbfFacCliS )->( dbRLock() )
               ( dbfFacCliS )->( dbDelete() )
            ( dbfFacCliS )->( dbRUnLock() )
         end
         end

         ( dbfFacCliS )->( dbSkip() )

         SysRefresh()

      end

      ( dbfFacCliI )->( dbGoTop() )
      while !( dbfFacCliI )->( eof() )

         if !( D():FacturasClientes( nView ) )->( dbSeek( ( dbfFacCliI )->cSerie + str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac ) )
            if ( dbfFacCliI )->( dbRLock() )
               ( dbfFacCliI )->( dbDelete() )
               ( dbfFacCliI )->( dbRUnLock() )
            end
         end

         ( dbfFacCliI )->( dbSkip() )

         SysRefresh()

      end





     if !empty( aNumPed )

        for each cNumPed in aNumPed
           oStock:SetEstadoPedCli( cNumPed )
        next

     end



      CloseFiles()

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de facturas de clientes." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return nil



Function mailing( cTo,cSubject )

Return ( nil )



Function isLineaTotalFacCli( uFacCliL )

   if isArray( uFacCliL )
      Return ( uFacCliL[ 26 ] )
   end

Return ( ( uFacCliL )->lTotLin )



Function nDescuentoLinealFacCli( uFacCliL, nDec, nVdv )

   local nDescuentoLineal

   If( nVdv == nil, nVdv := 1, ) ;

   if isArray( uFacCliL )
      nDescuentoLineal  := uFacCliL[ 33 ]
   else
      nDescuentoLineal  := ( uFacCliL )->nDtoDiv
   end

Return ( Round( nDescuentoLineal / nVdv, nDec ) )



Function nDescuentoPorcentualFacCli( uFacCliL )

   local nDescuentoPorcentual

   if isArray( uFacCliL )
      nDescuentoPorcentual  := uFacCliL[ 9 ]
   else
      nDescuentoPorcentual  := ( uFacCliL )->nDto
   end

Return ( nDescuentoPorcentual )



Function nDescuentoPromocionFacCli( uFacCliL )

   local nDescuentoPromocion

   if isArray( uFacCliL )
      nDescuentoPromocion  := uFacCliL[ 10 ]
   else
      nDescuentoPromocion  := ( uFacCliL )->nDtoPrm
   end

Return ( nDescuentoPromocion )



Function nPuntoVerdeFacCli( uFacCliL )

   local nPuntoVerde

   if isArray( uFacCliL )
      nPuntoVerde  := uFacCliL[ 7 ]
   else
      nPuntoVerde  := ( uFacCliL )->nPntVer
   end

Return ( nPuntoVerde )



Function nTransporteFacCli( uFacCliL )

   local nTransporte

   if isArray( uFacCliL )
      nTransporte  := uFacCliL[ 8 ]
   else
      nTransporte  := ( uFacCliL )->nImpTrn
   end

Return ( nTransporte )



FUNCTION nTotLFacCli( uFacCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo
   local nUnidades

   If( uFacCliL == nil, uFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;


       if isLineaTotalFacCli( uFacCliL )

      nCalculo          := nTotUFacCli( uFacCliL, nDec, nVdv )

       else

      nUnidades         := nTotNFacCli( uFacCliL )
      nCalculo          := nTotUFacCli( uFacCliL, nDec, nVdv ) * nUnidades





      if !ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )
          if lDto
             nCalculo       -= nDescuentoLinealFacCli( uFacCliL, nDec, nVdv ) * nUnidades
          end
      end

      if lDto .AND. nDescuentoPorcentualFacCli( uFacCliL ) <> 0
         nCalculo       -= nCalculo * nDescuentoPorcentualFacCli( uFacCliL ) / 100
      end

      if lDto .AND. nDescuentoPromocionFacCli( uFacCliL ) <> 0
         nCalculo       -= nCalculo * nDescuentoPromocionFacCli( uFacCliL ) / 100
      end





      if lPntVer .AND. nPuntoVerdeFacCli( uFacCliL ) <> 0
         nCalculo       += nPuntoVerdeFacCli( uFacCliL ) * nUnidades
      end





      if lImpTrn .AND. nTransporteFacCli( uFacCliL ) <> 0
         nCalculo       += nTransporteFacCli( uFacCliL ) * nUnidades
      end

   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

   if nRou <> nil
      nCalculo          := Round( nCalculo, nRou )
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nTotUFacCli( uTmpLin, nDec, nVdv )

   local nCalculo       := 0

   If( uTmpLin == nil, uTmpLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   do case
      case IsChar( uTmpLin )

         if ( uTmpLin )->lAlquiler
            nCalculo    := ( uTmpLin )->nPreAlq
         else
            nCalculo    := ( uTmpLin )->nPreUnit
         end

      case IsObject( uTmpLin )

         if uTmpLin:lAlquiler
            nCalculo    := uTmpLin:nPreAlq
         else
            nCalculo    := uTmpLin:nPreUnit
         end

      case IsArray( uTmpLin )

         if uTmpLin[ 69 ]
            nCalculo    := uTmpLin[ 72 ]
         else
            nCalculo    := uTmpLin[ 6 ]
         end

      case IsHash( uTmpLin )

         nCalculo       := hGet( uTmpLin, "PrecioVenta" )

   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



Function nNetUFacCli( dbfLin, nDec, nVdv )

   local nCalculo    := nTotUFacCli( dbfLin, nDec, nVdv )

   if ( dbfLin )->nIva <> 0 .AND. ( dbfLin )->lIvaLin
      if nDec <> nil
         nCalculo    -= Round( nCalculo / ( 100 / ( dbfLin )->nIva + 1 ), nDec )
      else
         nCalculo    -= ( nCalculo / ( 100 / ( dbfLin )->nIva + 1 ) )
      end
   end

RETURN ( nCalculo )







FUNCTION SetUFacCli( dbfLin, nNewVal )

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;

   if ( dbfLin )->lAlquiler
      ( dbfLin )->nPreAlq     := nNewVal
   else
      ( dbfLin )->nPreUnit    := nNewVal
   end

RETURN ( nil )






FUNCTION nTotNFacCli( uDbf )

   local nTotUnd

   If( uDbf == nil, uDbf := D():FacturasClientesLineas( nView ), ) ;

   do case
      case ValType( uDbf ) == "A"

        nTotUnd  := NotBulto( uDbf[ 93 ] )
        nTotUnd  *= NotCaja( uDbf[ 12 ] )
        nTotUnd  *= uDbf[ 19 ]
        nTotUnd  *= NotCero( uDbf[ 20 ] )
        nTotUnd  *= NotCero( uDbf[ 74 ] )
        nTotUnd  *= NotCero( uDbf[ 75 ] )
        nTotUnd  *= NotCero( uDbf[ 76 ] )

   case ValType( uDbf ) == "C"

        nTotUnd  := NotBulto( ( uDbf )->nBultos )
        nTotUnd  *= NotCaja( ( uDbf )->nCanEnt )
        nTotUnd  *=( uDbf )->nUniCaja
        nTotUnd  *= NotCero( ( uDbf )->nUndKit )
        nTotUnd  *= NotCero( ( uDbf )->nMedUno )
        nTotUnd  *= NotCero( ( uDbf )->nMedDos )
        nTotUnd  *= NotCero( ( uDbf )->nMedTre )

   otherwise

        nTotUnd  := NotBulto( uDbf:nBultos )
        nTotUnd  *= NotCaja( uDbf:nCanEnt )
        nTotUnd  *= uDbf:nUniCaja
        nTotUnd  *= NotCero( uDbf:nUndKit )
        nTotUnd  *= NotCero( uDbf:nMedUno )
        nTotUnd  *= NotCero( uDbf:nMedDos )
        nTotUnd  *= NotCero( uDbf:nMedTre )

   end

Return ( nTotUnd )



function nTotVFacCli( uDbf )

   local nTotUnd

   If( uDbf == nil, uDbf := D():FacturasClientesLineas( nView ), ) ;

   do case
      case ValType( uDbf ) == "A"

         nTotUnd  := nTotNFacCli( uDbf ) * NotCero( uDbf[ 32 ] )

      case ValType( uDbf ) == "C"

         nTotUnd  := nTotNFacCli( uDbf ) * NotCero( ( uDbf )->nFacCnv )

      otherwise

         nTotUnd  := nTotNFacCli( uDbf ) * NotCero( uDbf:nFacCnv )

   end

return ( nTotUnd )



FUNCTION IsFacCli( cPath )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "FacCliT.Dbf" )
      dbCreate( cPath + "FacCliT.Dbf", aSqlStruct( aItmFacCli() ), cDriver() )
   end

   if !lExistTable( cPath + "FacCliL.Dbf" )
      dbCreate( cPath + "FacCliL.Dbf", aSqlStruct( aColFacCli() ), cDriver() )
   end

   if !lExistTable( cPath + "FacCliI.Dbf" )
      dbCreate( cPath + "FacCliI.Dbf", aSqlStruct( aIncFacCli() ), cDriver() )
   end

   if !lExistTable( cPath + "FacCliD.Dbf" )
      dbCreate( cPath + "FacCliD.Dbf", aSqlStruct( aFacCliDoc() ), cDriver() )
   end




   if !lExistIndex( cPath + "FacCliT.Cdx" ) .OR.  !lExistIndex( cPath + "FacCliT.Cdx" ) .OR.  !lExistIndex( cPath + "FacCliI.Cdx" ) .OR.  !lExistTable( cPath + "FacCliD.Cdx" )

      rxFacCli( cPath )

   end

Return ( .T. )







FUNCTION mkFacCli( cPath, oMeter, lReindex )

   If( lReindex == nil, lReindex := .T., ) ;

   if oMeter <> nil
      oMeter:cText   := "Generando Bases"
      sysrefresh()
   end

   if !lExistTable( cPath + "FACCLIT.DBF", cLocalDriver() )
      dbCreate( cPath + "FACCLIT.DBF", aSqlStruct( aItmFacCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "FACCLIL.DBF", cLocalDriver() )
      dbCreate( cPath + "FACCLIL.DBF", aSqlStruct( aColFacCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "FACCLII.DBF", cLocalDriver() )
      dbCreate( cPath + "FACCLII.DBF", aSqlStruct( aIncFacCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "FACCLID.DBF", cLocalDriver() )
      dbCreate( cPath + "FACCLID.DBF", aSqlStruct( aFacCliDoc() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "FACCLIS.DBF", cLocalDriver() )
      dbCreate( cPath + "FACCLIS.DBF", aSqlStruct( aSerFacCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "FACCLIE.DBF", cLocalDriver() )
      dbCreate( cPath + "FACCLIE.DBF", aSqlStruct( aEntidadesFacCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "FACCLIC.Dbf", cLocalDriver() )
      dbCreate( cPath + "FACCLIC.Dbf", aSqlStruct( aFacCliEst() ), cLocalDriver() )
   end

   if lReindex
      rxFacCli( cPath, cLocalDriver() )
   end

RETURN .T.






FUNCTION rxFacCli( cPath, cDriver )

   local cFacCliT
   local cFacCliL
   local dbfFacCliI
   local dbfFacCliD

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;











   if !lExistTable( cPath + "FacCliT.Dbf", cDriver )   .OR. !lExistTable( cPath + "FacCliL.Dbf", cDriver )   .OR. !lExistTable( cPath + "FacCliI.Dbf", cDriver )   .OR. !lExistTable( cPath + "FacCliD.Dbf", cDriver )   .OR. !lExistTable( cPath + "FacCliS.Dbf", cDriver )   .OR. !lExistTable( cPath + "FacCliE.Dbf", cDriver )   .OR. !lExistTable( cPath + "FacCliC.Dbf", cDriver )
      mkFacCli( cPath, nil, .F. )
   end

   fEraseIndex( cPath + "FacCliT.Cdx", cDriver )
   fEraseIndex( cPath + "FacCliT.Cdx", cDriver )
   fEraseIndex( cPath + "FacCliI.Cdx", cDriver )
   fEraseIndex( cPath + "FacCliD.Cdx", cDriver )
   fEraseIndex( cPath + "FacCliS.Cdx", cDriver )
   fEraseIndex( cPath + "FacCliE.Cdx", cDriver )
   fEraseIndex( cPath + "FacCliC.Cdx", cDriver )

   dbUseArea( .T., cDriver, cPath + "FACCLIL.DBF", cCheckArea( "FACCLIL", @cFacCliL ), .F. )
   if !( cFacCliL )->( neterr() )
      ( cFacCliL )->( __dbPack() )

      ( cFacCliL )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "nNumFac", "cSerie + str( nNumFac ) + cSufFac", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac } ) )

      ( cFacCliL )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "cRef", "cRef", {|| Field->cRef }, ) )

      ( cFacCliL )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "Lote", "cLote", {|| Field->cLote }, ) )

      ( cFacCliL )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "cCodAlb", "cCodAlb", {|| Field->cCodAlb }, ) )

      ( cFacCliL )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "cNumRef", "cSerie + str( nNumFac ) + cSufFac + cRef", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + Field->cRef } ) )

      ( cFacCliL)->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "iNumFac", "'11' + cSerie + str( nNumFac ) + Space( 1 ) + cSufFac + Str( nNumLin )", {|| "11" + Field->cSerie + str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac + Str( Field->nNumLin ) } ) )

      ( cFacCliL )->( ordCondSet( "!Deleted()", {|| !Deleted() }, , , , , , , , , .T. ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "cRefFec", "cRef + cCodCli + dtos( dFecFac ) + tFecFac", {|| Field->cRef + Field->cCodCli + dtos( Field->dFecFac ) + Field->tFecFac } ) )

      ( cFacCliL )->( ordCondSet( "!lValidado .and. !lControl .and. nCtlStk < 2 .and. !Deleted()", {|| !Field->lValidado .AND. !Field->lControl .AND. Field->nCtlStk < 2 .AND. !Deleted() }, , , , , , , , , .T. ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "cStkFast", "cRef + cAlmLin + dtos( dFecFac ) + tFecFac", {|| Field->cRef + Field->cAlmLin + dtos( Field->dFecFac ) + Field->tFecFac } ) )

      ( cFacCliL )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "nNumLin", "cSerie + str( nNumFac ) + cSufFac + str( nNumLin )", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumLin ) } ) )

      ( cFacCliL )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "nPosPrint", "cSerie + str( nNumFac ) + cSufFac + Str( nPosPrint )", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nPosPrint ) } ) )

      ( cFacCliL )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "cVtaFast", "cRef + cAlmLin + dtos( dFecFac )", {|| Field->cRef + Field->cAlmLin + dtos( Field->dFecFac ) } ) )

      ( cFacCliL )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cFacCliL )->( ordCreate( cPath + "FacCliL.Cdx", "parUuid", "parUuid", {|| Field->parUuid } ) )

      ( cFacCliL )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de facturas de clientes" )

   end

   dbUseArea( .T., cDriver, cPath + "FacCliI.DBF", cCheckArea( "FacCliI", @dbfFacCliI ), .F. )
   if !( dbfFacCliI )->( neterr() )
      ( dbfFacCliI )->( __dbPack() )

      ( dbfFacCliI )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfFacCliI )->( ordCreate( cPath + "FacCliI.Cdx", "nNumFac", "cSerie + str( nNumFac ) + cSufFac", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac } ) )

      ( dbfFacCliI)->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfFacCliI )->( ordCreate( cPath + "FacCliI.Cdx", "iNumFac", "'11' + cSerie + str( nNumFac ) + Space( 1 ) + cSufFac", {|| "11" + Field->cSerie + str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )

      ( dbfFacCliI)->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfFacCliI )->( ordCreate( cPath + "FacCliI.Cdx", "parUuid", "parUuid", {|| Field->parUuid } ) )

      ( dbfFacCliI )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de facturas de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "FacCliD.DBF", cCheckArea( "FacCliD", @dbfFacCliD ), .F. )
   if !( dbfFacCliD )->( neterr() )
      ( dbfFacCliD )->( __dbPack() )

      ( dbfFacCliD )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfFacCliD )->( ordCreate( cPath + "FacCliD.Cdx", "nNumFac", "cSerFac + str( nNumFac ) + cSufFac", {|| Field->cSerFac + str( Field->nNumFac ) + Field->cSufFac } ) )

      ( dbfFacCliD)->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfFacCliD )->( ordCreate( cPath + "FacCliD.Cdx", "iNumFac", "'11' + cSerFac + str( nNumFac ) + Space( 1 ) + cSufFac", {|| "11" + Field->cSerFac + str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )

      ( dbfFacCliD)->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfFacCliD )->( ordCreate( cPath + "FacCliD.Cdx", "parUuid", "parUuid", {|| Field->parUuid } ) )

      ( dbfFacCliD )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de facturas de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "FACCLIT.DBF", cCheckArea( "FACCLIT", @cFacCliT ), .F. )

   if !( cFacCliT )->( neterr() )
      ( cFacCliT )->( __dbPack() )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "NNUMFAC", "CSERIE + str( NNUMFAC ) + CSUFFAC", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac }, ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "dFecFac", "dFecFac", {|| Field->dFecFac } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "CCODCLI", "CCODCLI", {|| Field->CCODCLI } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "CNOMCLI", "Upper( CNOMCLI )", {|| Upper( Field->CNOMCLI ) } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "CCODOBR", "cCodObr + Dtos( dFecFac )", {|| Field->cCodObr + Dtos( Field->dFecFac ) } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "CCODAGE", "cCodAge + Dtos( dFecFac )", {|| Field->cCodAge + Dtos( Field->dFecFac ) } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "CTURFAC", "CTURFAC + CSUFFAC + CCODCAJ", {|| Field->CTURFAC + Field->CSUFFAC + Field->CCODCAJ } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "CAGEFEC", "CCODAGE + DtoS( DFECFAC )", {|| Field->CCODAGE + DtoS( Field->DFECFAC ) } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "NNUMLIQ", "str( NNUMLIQ ) + CSUFLIQ", {|| str( Field->NNUMLIQ ) + Field->CSUFLIQ } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted()  } ))
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "lSndDoc", "lSndDoc", {|| Field->lSndDoc } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ))
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "cNumDoc", "cNumDoc", {|| Field->cNumDoc } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ))
      ( cFacCliT )->( ordCreate( cPath + "FacCliT.Cdx", "cNumPre", "cNumPre", {|| Field->cNumPre } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ))
      ( cFacCliT )->( ordCreate( cPath + "FacCliT.Cdx", "cNumPed", "cNumPed", {|| Field->cNumPed } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ))
      ( cFacCliT )->( ordCreate( cPath + "FACCLIT.CDX", "cNumAlb", "cNumAlb", {|| Field->cNumAlb } ) )

      ( cFacCliT)->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliT.Cdx", "iNumFac", "'11' + cSerie + str( nNumFac ) + Space( 1 ) + cSufFac", {|| "11" + Field->cSerie + str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }, , , , , , , , , .T. ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliT.Cdx", "dFecDes", "dFecFac", {|| Field->dFecFac } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }, , , , , , , , , .T. ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliT.Cdx", "lMail", "lMail", {|| Field->lMail } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }, , , , , , , , , .T. ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliT.Cdx", "nTotFac", "nTotFac", {|| Field->nTotFac } ) )

      ( cFacCliT )->( dbCloseArea() )

   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de facturas de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "FacCliS.Dbf", cCheckArea( "FacCliS", @cFacCliT ), .F. )

   if !( cFacCliT )->( neterr() )
      ( cFacCliT )->( __dbPack() )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliS.Cdx", "nNumFac", "cSerFac + str( nNumFac ) + cSufFac + str( nNumLin )", {|| Field->cSerFac + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumLin ) } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliS.Cdx", "cRefSer", "cRef + cAlmLin + cNumSer", {|| Field->cRef + Field->cAlmLin +Field->cNumSer } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliS.CDX", "cNumSer", "cNumSer", {|| Field->cNumSer } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliS.Cdx", "iNumFac", "'11' + cSerFac + str( nNumFac ) + Space( 1 ) + cSufFac", {|| "11" + Field->cSerFac + str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliS.Cdx", "parUuid", "parUuid", {|| Field->parUuid } ) )

      ( cFacCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de Números de series de facturas de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "FacCliE.Dbf", cCheckArea( "FacCliE", @cFacCliT ), .F. )

   if !( cFacCliT )->( neterr() )
      ( cFacCliT )->( __dbPack() )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliE.Cdx", "nNumFac", "cSerFac + str( nNumFac ) + cSufFac", {|| Field->cSerFac + str( Field->nNumFac ) + Field->cSufFac } ) )

      ( cFacCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de entidades de facturas de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "FacCliC.Dbf", cCheckArea( "FacCliC", @cFacCliT ), .F. )

   if !( cFacCliT )->( neterr() )
      ( cFacCliT )->( __dbPack() )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliC.Cdx", "nNumFac", "cSerFac + str( nNumFac ) + cSufFac", {|| Field->cSerFac + str( Field->nNumFac ) + Field->cSufFac } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliC.Cdx", "cSitua", "cSitua", {|| Field->cSitua } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliC.Cdx", "idPs", "str( idPs )", {|| str( Field->idPs ) } ) )

      ( cFacCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de situación de facturas de clientes" )
   end

Return nil



function aFacCliEst()

   local aFacCliEst  := {}

   aAdd( aFacCliEst, { "cSerFac", "C",    1,  0, "Serie de factura" ,            "",                   "", "( cDbfCol )", nil } )
   aAdd( aFacCliEst, { "nNumFac", "N",    9,  0, "Numero de factura" ,           "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aFacCliEst, { "cSufFac", "C",    2,  0, "Sufijo de factura" ,           "",                   "", "( cDbfCol )", nil } )
   aAdd( aFacCliEst, { "cSitua",  "C",  140,  0, "Situación" ,                   "",                   "", "( cDbfCol )", nil } )
   aAdd( aFacCliEst, { "dFecSit", "D",    8,  0, "Fecha de la situación" ,       "",                   "", "( cDbfCol )", nil } )
   aAdd( aFacCliEst, { "tFecSit", "C",    6,  0, "Hora de la situación" ,        "",                   "", "( cDbfCol )", nil } )
   aAdd( aFacCliEst, { "idPs",    "N",   11,  0, "Id prestashop" ,               "",                   "", "( cDbfCol )", nil } )
   aAdd( aFacCliEst, { "parUuid", "C",   40,  0, "Id Padre" ,                    "",                   "", "( cDbfCol )", nil } )

return ( aFacCliEst )



function aIncFacCli()

   local aIncFacCli  := {}

   aAdd( aIncFacCli, { "cSerie",  "C",    1,  0, "Serie de factura" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "nNumFac", "N",    9,  0, "Número de factura" ,             "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "cSufFac", "C",    2,  0, "Sufijo de factura" ,             "",                   "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "cCodTip", "C",    3,  0, "Tipo de incidencia" ,            "",                   "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "dFecInc", "D",    8,  0, "Fecha de la incidencia" ,        "",                   "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "mDesInc", "M",   10,  0, "Descripción de la incidencia" ,  "",                   "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "lListo",  "L",    1,  0, "Lógico de listo" ,               "",                   "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "lAviso",  "L",    1,  0, "Lógico de Aviso" ,               "",                   "", "( cDbfCol )" } )
   aAdd( aIncFacCli, { "parUuid", "C",   40,  0, "Id Padre" ,                      "",                   "", "( cDbfCol )" } )

return ( aIncFacCli )



function aFacCliDoc()

   local aFacCliDoc  := {}

   aAdd( aFacCliDoc, { "cSerFac", "C",    1,  0, "Serie de factura" ,                "",                   "", "( cDbfCol )" } )
   aAdd( aFacCliDoc, { "nNumFac", "N",    9,  0, "Número de factura" ,               "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aFacCliDoc, { "cSufFac", "C",    2,  0, "Sufijo de factura" ,               "",                   "", "( cDbfCol )" } )
   aAdd( aFacCliDoc, { "cNombre", "C",  250,  0, "Nombre del documento" ,            "",                   "", "( cDbfCol )" } )
   aAdd( aFacCliDoc, { "cRuta",   "C",  250,  0, "Ruta del documento" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aFacCliDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento" ,     "",                   "", "( cDbfCol )" } )
   aAdd( aFacCliDoc, { "parUuid", "C",   40,  0, "Id Padre" ,                        "",                   "", "( cDbfCol )" } )

return ( aFacCliDoc )



function aColFacCli()

   local aColFacCli  := {}

   aAdd( aColFacCli, { "cSerie"     ,"C",  1, 0, ""                                       , "Serie",                       "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nNumFac"    ,"N",  9, 0, ""                                       , "Numero",                      "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cSufFac"    ,"C",  2, 0, ""                                       , "Sufijo",                      "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cRef"       ,"C", 18, 0, "Referencia del artículo"                , "Articulo",                    "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cDetalle"   ,"C",250, 0, "Detalle del artículo"                   , "DescripcionArticulo",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPreUnit"   ,"N", 16, 6, "Precio unitario"                        , "PrecioVenta",                 "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPntVer"    ,"N", 16, 6, "Importe punto verde"                    , "PuntoVerde",                  "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nImpTrn"    ,"N", 16, 6, "Importe de portes"                      , "Portes",                      "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nDto"       ,"N",  6, 2, "Descuento"                              , "DescuentoPorcentual",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nDtoPrm"    ,"N",  6, 2, "Descuento promocional"                  , "DescuentoPromocion",          "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nIva"       ,"N",  6, 2, "Porcentaje de " + cImp()                , "PorcentajeImpuesto",          "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nCanEnt"    ,"N", 16, 6, cNombreCajas()                           , "Cajas",                       "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lControl"   ,"L",  1, 0, "Lógico linea de control"                , "LineaControl",                "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPesokg"    ,"N", 16, 6, "Peso del producto"                      , "Peso",                        "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cPesokg"    ,"C",  2, 0, "Unidad de peso del producto"            , "UnidadMedicionPeso",          "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cUnidad"    ,"C",  2, 0, "Unidades de venta"                      , "UnidadMedicion",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodAge"    ,"C",  3, 0, "Código del agente"                      , "Agente",                      "", "( cDbfCol )", {|| cCodigoAgente() } } )
   aAdd( aColFacCli, { "nComAge"    ,"N",  6, 2, "Comisión del agente"                    , "ComisionAgente",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nUniCaja"   ,"N", 16, 6, cNombreUnidades()                        , "Unidades",                    "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nUndKit"    ,"N", 16, 6, "Unidades del producto kit"              , "UnidadesKit",                 "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "dFecha"     ,"D",  8, 0, "Fecha de detalle"                       , "FechaEntrega",                "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cTipMov"    ,"C",  2, 0, "Tipo de movimiento"                     , "Tipo",                        "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "mLngDes"    ,"M", 10, 0, "Descripción de artículo sin codificar"  , "DescripcionAmpliada",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodAlb"    ,"C", 12, 0, "Número del albarán de procedencia"      , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "dFecAlb"    ,"D",  8, 0, "Fecha del albarán de procedencia"       , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lTotLin"    ,"L",  1, 0, "Valor Lógico para enviar el documento"  , "LineaTotal",                  "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lImpLin"    ,"L",  1, 0, "línea no imprimible"                    , "LineaNoImprimible",           "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodPr1"    ,"C", 20, 0, "Código de primera propiedad"            , "CodigoPropiedad1",            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodPr2"    ,"C", 20, 0, "Código de segunda propiedad"            , "CodigoPropiedad2",            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cValPr1"    ,"C", 20, 0, "Valor de primera propiedad"             , "ValorPropiedad1",             "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cValPr2"    ,"C", 20, 0, "Valor de segunda propiedad"             , "ValorPropiedad2",             "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nFacCnv"    ,"N", 16, 6, "Factor de conversión de la compra"      , "FactorConversion",            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nDtoDiv"    ,"N", 16, 6, "Descuento lineal de la compra"          , "DescuentoLineal",             "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lSel"       ,"L",  1, 0, ""                                       , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nNumLin"    ,"N",  4, 0, "Número de la línea"                     , "NumeroLinea",                 "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nCtlStk"    ,"N",  1, 0, "Tipo de stock de la línea"              , "TipoStock",                   "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nCosDiv"    ,"N", 16, 6, "Costo del producto"                     , "PrecioCosto",                 "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPvpRec"    ,"N", 16, 6, "Precio de venta recomendado"            , "PrecioVentaRecomendado",      "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cAlmLin"    ,"C", 16, 0, "Código de almacén"                      , "Almacen",                     "", "( cDbfCol )", {|| Application():codigoAlmacen() } } )
   aAdd( aColFacCli, { "lIvaLin"    ,"L",  1, 0, cImp() + " incluido"                     , "LineaImpuestoIncluido",       "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodImp"    ,"C",  3, 0, "Código del impuesto especial"           , "ImpuestoEspecial",            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nValImp"    ,"N", 16, 6, "Importe del impuesto especial"          , "ImporteImpuestoEspecial",     "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lLote"      ,"L",  1, 0, ""                                       , "LogicoLote",                  "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nLote"      ,"N",  9, 0, ""                                       , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cLote"      ,"C", 64, 0, "Número de lote"                         , "Lote",                        "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "dFecCad"    ,"D",  8, 0, "Fecha de caducidad"                     , "FechaCaducidad",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lKitArt"    ,"L",  1, 0, "línea con escandallo"                   , "LineaEscandallo",             "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lKitChl"    ,"L",  1, 0, "línea pertenciente a escandallo"        , "LineaPerteneceEscandallo",    "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lKitPrc"    ,"L",  1, 0, ""                                       , "LineaEscandalloPrecio",       "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nMesGrt"    ,"N",  2, 0, "Meses de garantía"                      , "MesesGarantia",               "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lMsgVta"    ,"L",  1, 0, "Avisar venta sin stocks"                , "AvisarSinStock",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lNotVta"    ,"L",  1, 0, "No permitir venta sin stocks"           , "NoPermitirSinStock",          "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodTip"    ,"C",  4, 0, "Código del tipo de artículo"            , "TipoArticulo",                "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "mNumSer"    ,"M", 10, 0, ""                                       , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodFam"    ,"C", 16, 0, "Código de familia"                      , "Familia",                     "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cGrpFam"    ,"C",  3, 0, "Código del grupo de familia"            , "GrupoFamilia",                "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nReq"       ,"N", 16, 6, "Recargo de equivalencia"                , "RecargoEquivalencia",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "mObsLin"    ,"M", 10, 0, "Observaciones de linea"                 , "Observaciones",               "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodPrv"    ,"C", 12, 0, "Código del proveedor"                   , "Proveedor",                   "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cNomPrv"    ,"C", 30, 0, "Nombre del proveedor"                   , "NombreProveedor",             "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cImagen"    ,"C",128, 0, "Fichero de imagen"                      , "Imagen",                      "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPuntos"    ,"N", 15, 6, "Puntos del artículo"                    , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nValPnt"    ,"N", 16, 6, "Valor del punto"                        , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nDtoPnt"    ,"N",  5, 2, "Descuento puntos"                       , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nIncPnt"    ,"N",  5, 2, "Incremento porcentual"                  , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cRefPrv"    ,"C", 18, 0, "Referencia proveedor"                   , "ReferenciaProveedor",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nVolumen"   ,"N", 16, 6, "Volumen del producto"                   , "Volumen",                     "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cVolumen"   ,"C",  2, 0, "Unidad del volumen"                     , "UnidadMedicionVolumen",       "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lAlquiler"  ,"L",  1, 0, "Lógico de línea de alquiler"            , "Alquiler",                    "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "dFecEnt"    ,"D",  8, 0, "Fecha de entrada del alquiler"          , "FechaEntradaAlquiler",        "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "dFecSal"    ,"D",  8, 0, "Fecha de salida del alquiler"           , "FechaSalidaAlquiler",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPreAlq"    ,"N", 16, 6, "Precio de alquiler"                     , "PrecioAlquiler",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nNumMed"    ,"N",  1, 0, "Número de mediciones"                   , "NumeroMedidiones",            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nMedUno"    ,"N", 16, 6, "Primera unidad de medición"             , "Medicion1",                   "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nMedDos"    ,"N", 16, 6, "Segunda unidad de medición"             , "Medicion2",                   "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nMedTre"    ,"N", 16, 6, "Tercera unidad de medición"             , "Medicion3",                   "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nTarLin"    ,"N",  1, 0, "Tarifa de precio aplicada"              , "NumeroTarifa",                "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lImpFra",   "L",   1, 0, "Lógico de imprimir frase publicitaria"  , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodPry",   "C",   4, 0, "Código del proyecto"                    , "Proyecto",                    "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cTxtFra",   "C", 250, 0, "Texto de la frase publicitaria"         , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "Descrip",   "M",  10, 0, "Descripción larga"                      , "DescripcionTecnica",          "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lLinOfe",   "L",   1, 0, "Linea con oferta"                       , "LineaOferta",                 "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lVolImp",   "L",   1, 0, "Aplicar volumen impuestos especiales"   , "VolumenImpuestosEspeciales",  "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lGasSup",   "L",   1, 0, "Linea de gastos suplidos"               , "GastosSuplidos",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cNumPed"   ,"C",  12, 0, "Número del pedido"                      , "NumeroPedido",                "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "dFecFac"   ,"D",   8, 0, "Fecha de factura"                       , "Fecha",                       "", "( cDbfCol )", {|| GetSysDate() } } )
   aAdd( aColFacCli, { "cSuPed"    ,"C",  50, 0, "Su pedido (desde albarán)"              , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cNumSat"   ,"C",  12, 0, "Número del SAT"                         , "NumeroSAT",                   "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "dFecUltCom","D",   8, 0, "Fecha última compra"                    , "FechaUltimaVenta",            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodCli"   ,"C",  12, 0, "Código del cliente"                     , "Cliente",                     "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lFromAtp"  ,"L",   1, 0, ""                                       , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nUniUltCom","N",  16, 6, "Unidades última compra"                 , "UnidadesUltimaVenta",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nBultos",   "N",  16, 6, "Numero de bultos en líneas"             , "Bultos",                      "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cFormato",  "C", 100, 0, "Formato de venta"                       , "Formato",                     "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "tFecFac",   "C",   6, 0, "Hora de la factura"                     , "Hora",                        "", "( cDbfCol )", {|| GetSysTime() } } )
   aAdd( aColFacCli, { "cCtrCoste", "C",   9, 0, "Código del centro de coste"             , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lLabel"   , "L",   1, 0, "Lógico para marca de etiqueta"          , "LogicoEtiqueta",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nLabel"   , "N",   6, 0, "Unidades de etiquetas a imprimir"       , "NumeroEtiqueta",              "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cCodObr"  , "C",  10, 0, "Código de la dirección"                 , "Direccion",                   "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cRefAux",   "C",  18, 0, "Referencia auxiliar"                    , "ReferenciaAuxiliar",          "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cRefAux2",  "C",  18, 0, "Segunda referencia auxiliar"            , "ReferenciaAuxiliar2",         "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPosPrint", "N",   4, 0, "Posición de impresión"                  , "PosicionImpresion",           "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cTipCtr",   "C",  20, 0, "Tipo tercero centro de coste"           , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cTerCtr",   "C",  20, 0, "Tercero centro de coste"                , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nNumKit",   "N",   4, 0, "Número de línea de escandallo"          , "",                            "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "id_tipo_v", "N",  16, 0, "Identificador tipo de venta"            , "IdentificadorTipoVenta",      "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nRegIva",   "N",   1, 0, "Régimen de " + cImp()                   , "TipoImpuesto",                "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "nPrcUltCom","N",  16, 6, "Precio última compra"                   , "PrecioUltimaVenta",           "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "lValidado", "L",   1, 0, "Lógico validado con consolidación"       , "LogicoValidado",              "", "( cDbfCol )", .F. } )
   aAdd( aColFacCli, { "Uuid",         "C",  40, 0, "Identificador único"                         , "Uuid",                         "", "( cDbfCol )", {|| win_uuidcreatestring() } } )
   aAdd( aColFacCli, { "parUuid",     "C",  40, 0, "Identificador cabecera"                     , "ParUuid",                       "", "( cDbfCol )", nil } )
   aAdd( aColFacCli, { "cIdParKit", "C",  40, 0, "Identificador lista de materiales"       , "cIdParKit",                   "", "( cDbfCol )", nil } )

return ( aColFacCli )



function aItmFacCli()

   local aItmFacCli  := {}

   aAdd( aItmFacCli, {"cSerie"      ,"C",  1, 0, "Serie de la factura" ,                                       "Serie",                       "", "( cDbf )", {|| "A" } } )
   aAdd( aItmFacCli, {"nNumFac"     ,"N",  9, 0, "Número de la factura" ,                                      "Numero",                      "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cSufFac"     ,"C",  2, 0, "Sufijo de la factura" ,                                      "Sufijo",                      "", "( cDbf )", {|| RetSufEmp() } } )
   aAdd( aItmFacCli, {"cGuid"       ,"C", 40, 0, "Guid de la factura" ,                                        "GUID",                        "", "( cDbf )", {|| win_uuidcreatestring() } } )
   aAdd( aItmFacCli, {"cTurFac"     ,"C",  6, 0, "Sesión de la factura" ,                                      "Turno",                       "", "( cDbf )", {|| cCurSesion( nil, .F.) } } )
   aAdd( aItmFacCli, {"dFecFac"     ,"D",  8, 0, "Fecha de la factura" ,                                       "Fecha",                       "", "( cDbf )", {|| GetSysDate() } } )
   aAdd( aItmFacCli, {"cCodCli"     ,"C", 12, 0, "Código del cliente" ,                                        "Cliente",                     "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodAlm"     ,"C", 16, 0, "Código de almacén" ,                                         "Almacen",                     "", "( cDbf )", {|| Application():codigoAlmacen() } } )
   aAdd( aItmFacCli, {"cCodCaj"     ,"C",  3, 0, "Código de caja" ,                                            "Caja",                        "", "( cDbf )", {|| Application():CodigoCaja() } } )
   aAdd( aItmFacCli, {"cNomCli"     ,"C", 80, 0, "Nombre del cliente" ,                                        "NombreCliente",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDirCli"     ,"C",200, 0, "Domicilio del cliente" ,                                     "DomicilioCliente",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cPobCli"     ,"C",200, 0, "Población del cliente" ,                                     "PoblacionCliente",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cPrvCli"     ,"C",100, 0, "Provincia del cliente" ,                                     "ProvinciaCliente",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nCodProV"    ,"N",  2, 0, "Número de provincia cliente" ,                               "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cPosCli"     ,"C", 15, 0, "Código postal del cliente" ,                                 "CodigoPostalCliente",         "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDniCli"     ,"C", 30, 0, "NIF del cliente" ,                                           "DniCliente",                  "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lModCli"     ,"L",  1, 0, "Lógico de modificar datos del cliente" ,                     "ModificarDatosCliente",       "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lMayor"      ,"L",  1, 0, "Lógico de mayorista" ,                                       "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTarifa"     ,"N",  1, 0, "Tarifa de precio aplicada" ,                                 "NumeroTarifa",                "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodAge"     ,"C",  3, 0, "Código del agente" ,                                         "Agente",                      "", "( cDbf )", {|| AccessCode():cAgente } } )
   aAdd( aItmFacCli, {"cCodRut"     ,"C",  4, 0, "Código de la ruta" ,                                         "Ruta",                        "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodTar"     ,"C",  5, 0, "Código de la tarifa" ,                                       "Tarifa",                      "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodObr"     ,"C", 10, 0, "Código de la Dirección" ,                                    "Direccion",                   "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nPctComAge"  ,"N",  6, 2, "Porcentaje de Comisión del agente" ,                         "ComisionAgente",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lLiquidada"  ,"L",  1, 0, "Lógico de la factura pagada" ,                               "Pagada",                      "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lContab"     ,"L",  1, 0, "Lógico de la factura contabilizada" ,                        "Contabilizada",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cConGuid"    ,"C", 40, 0, "Guid del apunte contable" ,                                  "GuidApunteContable",          "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"dFecEnt"     ,"D",  8, 0, "Fecha de entrega" ,                                          "FechaEntrega",                "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cSuFac"      ,"C", 50, 0, "Su pedido" ,                                                 "SuPedido",                    "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lImpAlb"     ,"L",  1, 0, "Lógico si la factura se importe de facturas" ,               "ImportadaAlbaran",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCondent"    ,"C",100, 0, "Condición de entrada" ,                                      "CondicionEntrada",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"mComEnt"     ,"M", 10, 0, "Comentarios" ,                                               "Comentarios",                 "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"mObserv"     ,"M", 10, 0, "Observaciones" ,                                             "Observaciones",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodPago"    ,"C",  2, 0, "Código del tipo de pago" ,                                   "Pago",                        "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nBultos"     ,"N",  5, 0, "Número de bultos" ,                                          "Bultos",                      "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nPortes"     ,"N",  6, 0, "Valor del porte" ,                                           "Portes",                      "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nIvaMan"     ,"N",  6, 2, "Porcentaje de " + cImp() + " del gasto" ,                    "ImpuestoGastos",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nManObr"     ,"N", 16, 6, "Gasto" ,                                                     "Gastos",                      "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cNumAlb"     ,"C", 12, 0, "Número de albarán" ,                                         "NumeroAlbaran",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cNumPed"     ,"C", 12, 0, "Número de pedido" ,                                          "NumeroPedido",                "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cNumPre"     ,"C", 12, 0, "Número de presupuesto" ,                                     "NumeroPresupuesto",           "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cNumSat"     ,"C", 12, 0, "Número de S.A.T." ,                                          "NumeroSAT",                   "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTipoFac"    ,"N",  1, 0, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDtoEsp"     ,"C", 50, 0, "Descripción de porcentaje de descuento especial" ,           "DescripcionDescuento1",       "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoEsp"     ,"N", 10, 6, "Porcentaje de descuento especial" ,                          "PorcentajeDescuento1",        "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDpp"        ,"C", 50, 0, "Descripción de porcentaje de descuento por pronto pago",     "DescripcionDescuento2",       "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDpp"        ,"N", 10, 6, "Porcentaje de descuento por pronto pago" ,                   "PorcentajeDescuento2",        "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDtoUno"     ,"C", 25, 0, "Descripción de porcentaje de descuento personalizado",       "DescripcionDescuento3",       "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoUno"     ,"N", 10, 6, "Porcentaje de descuento por descuento personalizado" ,       "PorcentajeDescuento3",        "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDtoDos"     ,"C", 25, 0, "Descripción de porcentaje de descuento personalizado" ,      "DescripcionDescuento4",       "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoDos"     ,"N", 10, 6, "Porcentaje de descuento por descuento personalizado" ,       "PorcentajeDescuento4",        "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoCnt"     ,"N",  6, 2, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoRap"     ,"N",  6, 2, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoPub"     ,"N",  6, 2, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoPgo"     ,"N",  6, 2, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoPtf"     ,"N",  7, 2, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTipoIva"    ,"N",  1, 0, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nPorcIva"    ,"N",  4, 1, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lRecargo"    ,"L",  1, 0, "Lógico para recargo" ,                                       "RecargoEquivalencia",         "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cRemitido"   ,"C", 50, 0, "Campo de remitido" ,                                         "Remitido",                    "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lIvaInc"     ,"L",  1, 0, "Lógico " + cImp() + " incluido" ,                            "ImpuestosIncluidos",          "", "( cDbf )", {|| uFieldEmpresa( "lIvaInc" ) } } )
   aAdd( aItmFacCli, {"lSndDoc"     ,"L",  1, 0, "Lógico para documento enviado" ,                             "Envio",                       "", "( cDbf )", {|| .T. } } )
   aAdd( aItmFacCli, {"cDivFac"     ,"C",  3, 0, "Código de la divisa" ,                                       "Divisa",                      "", "( cDbf )", {|| cDivEmp() } } )
   aAdd( aItmFacCli, {"nVdvFac"     ,"N", 10, 4, "Cambio de la divisa" ,                                       "ValorDivisa",                 "", "( cDbf )", {|| nChgDiv() } } )
   aAdd( aItmFacCli, {"cRetPor"     ,"C",100, 0, "Retirado por" ,                                              "RetiradoPor",                 "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cRetMat"     ,"C", 20, 0, "Matrícula" ,                                                 "Matricula",                   "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cNumDoc"     ,"C", 13, 0, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nRegIva"     ,"N",  1, 0, "Régimen de " + cImp() ,                                      "TipoImpuesto",                "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodPro"     ,"C",  9, 0, "Código de proyecto en contabilidad" ,                        "ProyectoContable",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDocOrg"     ,"C", 10, 0, "Número del documento origen" ,                               "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nNumLiq"     ,"N",  9, 0, "Número liquidación",                                         "NumeroLiquidacion",           "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cSufLiq"     ,"C",  2, 0, "Sufijo de la liquidación",                                   "SufijoLiquidacion",           "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nImpLiq"     ,"N", 16, 6, "Importe liquidación",                                        "ImporteLiquidacion",          "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"dFecLiq"     ,"D",  8, 0, "Fecha liquidación",                                          "FechaLiquidacion",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodTrn"     ,"C",  9, 0, "Código del transportista" ,                                  "Transportista",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nKgsTrn"     ,"N", 16, 6, "TARA del transportista" ,                                    "TaraTransportista",           "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lCloFac"     ,"L",  1, 0, "" ,                                                          "DocumentoCerrado",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cAbnFac"     ,"C", 12, 0, "" ,                                                          "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cAntFac"     ,"C", 12, 0, "Factura de anticipo" ,                                       "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTipRet"     ,"N",  1, 0, "Tipo de retención ( 1. Base / 2. Base+IVA )",                "TipoRetencion",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nPctRet"     ,"N",  6, 2, "Porcentaje de retención",                                    "PorcentajeRetencion",         "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodUsr"     ,"C",  3, 0, "Código de usuario",                                          "Usuario",                     "", "( cDbf )", {|| Auth():Codigo() } } )
   aAdd( aItmFacCli, {"dFecCre"     ,"D",  8, 0, "Fecha de creación/modificación del documento",               "FechaCreacion",               "", "( cDbf )", {|| Date() } } )
   aAdd( aItmFacCli, {"cTimCre"     ,"C",  5, 0, "Hora de creación/modificación del documento",                "HoraCreacion",                "", "( cDbf )", {|| Time() } } )
   aAdd( aItmFacCli, {"cCodGrp"     ,"C",  4, 0, "Código de grupo de cliente" ,                                "GrupoCliente",                "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lImprimido"  ,"L",  1, 0, "Lógico de imprimido" ,                                       "Imprimido",                   "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"dFecImp"     ,"D",  8, 0, "última fecha de impresión" ,                                 "FechaImpresion",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cHorImp"     ,"C",  5, 0, "Hora de la última impresión" ,                               "HoraImpresion",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCodDlg"     ,"C",  2, 0, "Código Delegación" ,                                         "Delegacion",                  "", "( cDbf )", {|| Application():CodigoDelegacion() } } )
   aAdd( aItmFacCli, {"nDtoAtp"     ,"N",  6, 2, "Porcentaje de descuento atípico",                            "DescuentoAtipico",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nSbrAtp"     ,"N",  1, 0, "Lugar donde aplicar dto atípico",                            "LugarAplicarDescuentoAtipico","", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"dFecEntr"    ,"D",  8,  0, "Fecha de entrada de alquiler",                              "EntradaAlquiler",             "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"dFecSal"     ,"D",  8,  0, "Fecha de salida de alquiler",                               "SalidaAlquiler",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lAlquiler"   ,"L",  1,  0, "Lógico de alquiler",                                        "Alquiler",                    "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lPayCli"     ,"L",  1,  0, "Lógico a pagar por el cliente",                             "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nPayCli"     ,"N", 16,  6, "A pagar por el cliente",                                    "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cManObr"     ,"C",250,  0, "Literal de gastos",                                         "LiteralGastos",               "", "( cDbf )", {|| padr( getConfigTraslation( "Gastos" ), 250 ) } } )
   aAdd( aItmFacCli, {"lExpEdi"     ,"L",  1,  0, "Lógico de factura exportada a EDI",                         "ExportadaEDI",                "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"dFecEdi"     ,"D",  8,  0, "Fecha exportación a EDI",                                   "FechaExportadaEDI",           "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cHorEdi"     ,"C",  5,  0, "Hora exportación a EDI",                                    "HoraExportadaEDI",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cSuAlb"      ,"C", 25,  0, "Referencia a su albarán",                                   "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lExpFac"     ,"L",  1,  0, "Lógico de factura exportada a Facturae",                    "ExportadoFacturae",           "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cTlfCli"     ,"C", 20,  0, "Teléfono del cliente" ,                                     "TelefonoCliente",             "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTotNet"     ,"N", 16,  6, "Total neto" ,                                               "TotalNeto",                   "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTotSup"     ,"N", 16,  6, "Total gastos suplidos" ,                                    "TotalSuplidos",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTotIva"     ,"N", 16,  6, "Total " + cImp() ,                                          "TotalImpuesto",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTotReq"     ,"N", 16,  6, "Total recargo" ,                                            "TotalRecargo",                "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTotFac"     ,"N", 16,  6, "Total factura" ,                                            "TotalDocumento",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nEntIni"     ,"N",  6,  2, "Porcentaje de entrega inicial" ,                            "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nPctDto"     ,"N",  6,  2, "Porcentaje de descuento por entrega inicial" ,              "",                            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cNFC"        ,"C", 20,  0, "Código NFC" ,                                               "NFC",                         "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cFacPrv"     ,"C", 12,  0, "Factura de proveedor" ,                                     "FacturaProveedor",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cBanco"      ,"C", 50,  0, "Nombre del banco del cliente" ,                             "NombreBanco",                 "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cPaisIBAN"   ,"C",  2,  0, "País IBAN de la cuenta bancaria del cliente",               "CuentaIBAN",                  "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCtrlIBAN"   ,"C",  2,  0, "Dígito de control IBAN de la cuenta bancaria del cliente",  "DigitoControlIBAN",           "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cEntBnc"     ,"C",  4,  0, "Entidad de la cuenta bancaria del cliente" ,                "EntidadCuenta",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cSucBnc"     ,"C",  4,  0, "Sucursal de la cuenta bancaria del cliente" ,               "SucursalCuenta",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cDigBnc"     ,"C",  2,  0, "Dígito de control de la cuenta bancaria del cliente" ,      "DigitoControlCuenta",         "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"cCtaBnc"     ,"C", 10,  0, "Cuenta bancaria del cliente" ,                              "CuentaBancaria",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTotLiq"     ,"N", 16,  6, "Total liquidado" ,                                          "TotalLiquidado",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nTotPdt"     ,"N", 16,  6, "Total pendiente" ,                                          "TotalPendiente",              "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lOperPV"     ,"L", 1,   0, "Lógico para operar con punto verde" ,                       "OperarPuntoVerde",            "", "( cDbf )", {|| .F. } } )
   aAdd( aItmFacCli, {"lRECC"       ,"L", 1,   0, "Acogida al Régimen especial del criterio de caja",          "AcogidaRECC",                 "", "( cDbf )", {|| .F. } } )
   aAdd( aItmFacCli, {"cCodPry"     ,"C", 4,   0, "Código del proyecto",                                       "Proyecto",                    "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"nDtoTarifa"  ,"N", 6,   2, "Descuentos de tarifa",                                      "DescuentoTarifa",             "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"lMail"       ,"L", 1,   0, "Lógico para enviar mail" ,                                  "EnviarMail",                  "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"dMail"       ,"D", 8,   0, "Fecha mail enviado" ,                                       "FechaMailEnviado",            "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"tMail"       ,"C", 6,   0, "Hora mail enviado" ,                                        "HoraMailEnviado",             "", "( cDbf )", nil } )
   aAdd( aItmFacCli, {"tFecFac"     ,"C", 6,   0, "Hora de la factura" ,                                       "HoraFactura",                 "", "( cDbf )", {|| getSysTime() } } )
   aAdd( aItmFacCli, {"cCtrCoste"   ,"C", 9,   0, "Código del centro de coste" ,                               "CentroCoste",                 "", "( cDbf )", nil } )
   aAdd( aItmFacCli, { "mFirma"     ,"M", 10,  0, "Firma" ,                                                    "Firma",                       "", "( cDbf )", nil } )
   aAdd( aItmFacCli, { "dIniPer"    ,"D", 8,   0, "Fecha inicio del periodo" ,                                 "InicioPeriodo",               "", "( cDbf )", nil } )
   aAdd( aItmFacCli, { "dFinPer"    ,"D", 8,   0, "Fecha fin del periodo" ,                                    "FinPeriodo",                  "", "( cDbf )", nil } )
   aAdd( aItmFacCli, { "lFirma"     ,"L", 1,   0, "Confirmación firma" ,                                       "ConfirmaFirma",                 "", "( cDbf )", nil } )
   aAdd( aItmFacCli, { "lValida"      ,"L", 1,   0, "Factura validada" ,                                         "Validada",                       "", "( cDbf )", .F. } )

RETURN ( aItmFacCli )



Function aSerFacCli()

   local aColFacCli  := {}

   aAdd( aColFacCli,  { "cSerFac",     "C",  1,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "nNumFac",     "N",  9,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "cSufFac",     "C",  2,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "dFecFac",     "D",  8,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "nNumLin",     "N",  4,   0, "Número de la línea",               "'9999'",            "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "cRef",        "C", 18,   0, "Referencia del artículo",          "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "cAlmLin",     "C", 16,   0, "Almacén del artículo",             "",                  "", "( cDbfCol )" } )
   aAdd( aColfacCli,  { "lUndNeg",     "L",  1,   0, "Lógico de unidades en negativo",   "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "cNumSer",     "C", 30,   0, "Número de serie",                  "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "parUuid",     "C", 40,   0, "Id Padre" ,                        "",                  "", "( cDbfCol )" } )

Return ( aColFacCli )



Function aEntidadesFacCli()

   local aColFacCli  := {}

   aAdd( aColFacCli,  { "cSerFac",     "C",  1,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "nNumFac",     "N",  9,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "cSufFac",     "C",  2,   0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "cCodEnt",     "C", 60,   0, "Codigo de la Entidad" ,            "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "cRol",        "C", 60,   0, "Rol de la entidad",                "",                  "", "( cDbfCol )" } )
   aAdd( aColFacCli,  { "parUuid",     "C", 40,   0, "Id Padre" ,                        "",                  "", "( cDbfCol )" } )

Return ( aColFacCli )







FUNCTION nTotFacCli( cFactura, cFacCliT, cFacCliL, cIva, cDiv, cFacCliP, aTmp, cDivRet, lPic, lExcCnt, lNeto )

   local nRec
   local nOrd
   local nTotalArt
   local bCondition
   local lRecargo
   local nDtoUno
   local nDtoDos
   local nDtoEsp
   local nTipRet
   local nPctRet
   local nDtoIni
   local nDtoPP
   local nPorte
   local nManObr
   local nIvaMan
   local lIvaInc
   local nSbrAtp
   local nDtoAtp
   local nKgsTrn
   local nTotalLin         := 0
   local nTotalUnd         := 0
   local aTotalDto         := { 0, 0, 0 }
   local aTotalDPP         := { 0, 0, 0 }
   local aTotalUno         := { 0, 0, 0 }
   local aTotalDos         := { 0, 0, 0 }
   local aTotalAtp         := { 0, 0, 0 }
   local aTotalEnt         := { 0, 0, 0 }
   local aTotalBase        := { 0, 0, 0 }
   local nDescuentosLineas := 0
   local lPntVer           := .F.
   local nRegIva
   local nBaseGasto
   local nIvaGasto

   local oTotalDoc            := nTotalDocumento():new( nView )

   if !empty( nView )

      If( cFactura == nil, cFactura := D():FacturasClientesId( nView ), ) ;
      If( cFacCliT == nil, cFacCliT := D():FacturasClientes( nView ), ) ;
      If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
      If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;

   end

   If( cIva == nil, cIva := dbfIva, ) ;
   If( cDiv == nil, cDiv := dbfDiv, ) ;
   If( lPic == nil, lPic := .F., ) ;
   If( lNeto == nil, lNeto := .F., ) ;

   if empty( Select( cFacCliT ) )
      Return ( 0 )
   end

   if empty( Select( cFacCliL ) )
      Return ( 0 )
   end

   if empty( Select( cIva ) )
      Return ( 0 )
   end

   if empty( Select( cDiv ) )
      Return ( 0 )
   end





   public nTotFac    := 0
   public nTotBrt    := 0
   public nTotDto    := 0
   public nTotDPP    := 0
   public nTotNet    := 0
   public nTotSup    := 0
   public nTotIva    := 0
   public nTotIvm    := 0
   public nTotAge    := 0
   public nTotReq    := 0
   public nTotPnt    := 0
   public nTotUno    := 0
   public nTotDos    := 0
   public nTotRet    := 0
   public nTotTrn    := 0
   public nTotCos    := 0
   public nTotCob    := 0
   public nTotPes    := 0
   public nTotRnt    := 0
   public nTotAtp    := 0
   public nTotArt    := 0
   public nTotCaj    := 0
   public nTotImp    := 0
   public nTotPctRnt := 0
   public nTotalDto  := 0
   public nTotalDtoLineal := 0
   public cCtaCli    := cClientCuenta( ( cFacCliT )->cCodCli )










   public aTotIva     := {{     "porcentajeiva" => nil,    "logrecargo"    => .F.,    "porcentajere"    => nil,    "bruto"            => nil,    "neto"            => nil,    "impiva"        => nil,    "impre"            => nil,    "nivmh"            => nil,    "ntransporte"    => nil,    "npntver"        => nil }}

   public aIvaUno    := {}
   public aIvaDos    := {}
   public aIvaTre    := {}

   public aTotIvm    := { { 0,0,0 }, { 0,0,0 }, { 0,0,0 }, }
   public aIvmUno    := aTotIvm[ 1 ]
   public aIvmDos    := aTotIvm[ 2 ]
   public aIvmTre    := aTotIvm[ 3 ]

   public aImpVto    := {}
   public aDatVto    := {}

   nRec              := ( cFacCliL )->( Recno() )

   if aTmp <> nil
      nDtoUno        := aTmp[ 49 ]
      nDtoDos        := aTmp[ 51 ]
      lRecargo       := aTmp[ 59]
      nDtoEsp        := aTmp[ 45 ]
      nDtoPP         := aTmp[ 47    ]
      nPorte         := aTmp[ 36 ]
      nManObr        := aTmp[ 38 ]
      nIvaMan        := aTmp[ 37 ]
      lIvaInc        := aTmp[ 61 ]
      cCodDiv        := aTmp[ 63 ]
      nTipRet        := aTmp[ 80 ]
      nPctRet        := aTmp[ 81 ]
      nSbrAtp        := aTmp[ 91 ]
      nDtoAtp        := aTmp[ 90 ]
      nKgsTrn        := aTmp[ 76 ]
      lPntVer        := aTmp[ 122 ]
      nRegIva        := aTmp[ 68 ]
      bCondition     := {|| ( cFacCliL )->( !eof() ) }
      ( cFacCliL )->( dbGoTop() )
   else
      nDtoUno        := ( cFacCliT )->nDtoUno
      nDtoDos        := ( cFacCliT )->nDtoDos
      nDtoEsp        := ( cFacCliT )->nDtoEsp
      nDtoPP         := ( cFacCliT )->nDpp
      lRecargo       := ( cFacCliT )->lRecargo
      nPorte         := ( cFacCliT )->nPortes
      nManObr        := ( cFacCliT )->nManObr
      nIvaMan        := ( cFacCliT )->nIvaMan
      lIvaInc        := ( cFacCliT )->lIvaInc
      cCodDiv        := ( cFacCliT )->cDivFac
      nTipRet        := ( cFacCliT )->nTipRet
      nPctRet        := ( cFacCliT )->nPctRet
      nSbrAtp        := ( cFacCliT )->nSbrAtp
      nDtoAtp        := ( cFacCliT )->nDtoAtp
      nKgsTrn        := ( cFacCliT )->nKgsTrn
      lPntVer        := ( cFacCliT )->lOperPV
      nRegIva        := ( cFacCliT )->nRegIva
      bCondition     := {|| ( cFacCliL )->cSerie + str( ( cFacCliL )->nNumFac ) + ( cFacCliL )->cSufFac == cFactura .AND. !( cFacCliL )->( eof() ) }
      ( cFacCliL )->( dbSeek( cFactura ) )
   end





   cPouDiv           := cPouDiv( cCodDiv, cDiv )
   cPorDiv           := cPorDiv( cCodDiv, cDiv )
   cPpvDiv           := cPpvDiv( cCodDiv, cDiv )
   nDouDiv           := nDouDiv( cCodDiv, cDiv )
   nRouDiv           := nRouDiv( cCodDiv, cDiv )
   nDpvDiv           := nDpvDiv( cCodDiv, cDiv )

   while Eval( bCondition )

      if lValLine( cFacCliL )



         if ( lExcCnt == nil                                .OR. ( lExcCnt .AND. ( cFacCliL )->nCtlStk <> 2 )    .OR. ( !lExcCnt .AND. ( cFacCliL )->nCtlStk == 2 ) )

            if ( cFacCliL )->lTotLin





               if ( cFacCliL )->nPreUnit <> nTotalLin .OR. ( cFacCliL )->nUniCaja <> nTotalUnd

                  if ( cFacCliL )->( dbRLock() )
                     ( cFacCliL )->nPreUnit := nTotalLin
                     ( cFacCliL )->nUniCaja := nTotalUnd
                     ( cFacCliL )->( dbUnLock() )
                  end

               end





               nTotalLin         := 0
               nTotalUnd         := 0

            else

               nTotalArt         := nTotLFacCli( cFacCliL, nDouDiv, nRouDiv, , , .F., .F. )

               nTotTrn           := nTrnLFacCli( cFacCliL, nDouDiv )
               nTotIvm           := nTotIFacCli( cFacCliL, nDouDiv, nRouDiv )

               nTotPnt           := if( lPntVer, nPntLFacCli( cFacCliL, nDpvDiv ), 0 )
               nTotCos           += nCosLFacCli( cFacCliL, nDouDiv, nRouDiv )
               nTotPes           += nPesLFacCli( cFacCliL )

               nDescuentosLineas += nTotDtoLFacCli( cFacCliL, nDouDiv )

               nTotalDtoLineal   += nDtoLinealFacCli( cFacCliL, nDouDiv )

               if aTmp <> nil
                  nTotAge        += nComLFacCli( aTmp, cFacCliL, nDouDiv, nRouDiv )
               else
                  nTotAge        += nComLFacCli( cFacCliT, cFacCliL, nDouDiv, nRouDiv )
               end





               nTotalLin         += nTotalArt

               if ( cFacCliL )->lGasSup
                  nTotSup        += nTotalArt
               end

               nTotalUnd         += nTotNFacCli( cFacCliL )

               nTotArt           += nTotNFacCli( cFacCliL )
               nTotCaj           += ( cFacCliL )->nCanEnt





                   oTotalDoc:setArrayImpuesto( ( cFacCliL )->nIva, lRecargo, ( cFacCliL )->nReq, nTotalArt, nTotIvm, nTotTrn, nTotPnt )



               if ( cFacCliL )->nValImp <> 0

                  do case
                  case aTotIvm[ 1, 2 ] == 0 .OR. ( aTotIvm[ 1, 2 ] == Round( ( cFacCliL )->nValImp, nDouDiv ) )

                     aTotIvm[ 1, 1 ]   += nTotNFacCli( cFacCliL ) * if( ( cFacCliL )->lVolImp, NotCero( ( cFacCliL )->nVolumen ), 1 )
                     aTotIvm[ 1, 2 ]   := Round( ( cFacCliL )->nValImp, nDouDiv )
                     aTotIvm[ 1, 3 ]   := Round( aTotIvm[ 1, 1 ] * aTotIvm[ 1, 2 ], nRouDiv )

                  case aTotIvm[ 2, 2 ] == 0 .OR. ( aTotIvm[ 2, 2 ] == Round( ( cFacCliL )->nValImp, nDouDiv ) )

                     aTotIvm[ 2, 1 ]   += nTotNFacCli( cFacCliL ) * if( ( cFacCliL )->lVolImp, NotCero( ( cFacCliL )->nVolumen ), 1 )
                     aTotIvm[ 2, 2 ]   := Round( ( cFacCliL )->nValImp, nDouDiv )
                     aTotIvm[ 2, 3 ]   := Round( aTotIvm[ 2, 1 ] * aTotIvm[ 2, 2 ], nRouDiv )

                  case aTotIvm[ 3, 2 ] == 0 .OR. ( aTotIvm[ 3, 2 ] == Round( ( cFacCliL )->nValImp, nDouDiv ) )

                     aTotIvm[ 3, 1 ]   += nTotNFacCli( cFacCliL ) * if( ( cFacCliL )->lVolImp, NotCero( ( cFacCliL )->nVolumen ), 1 )
                     aTotIvm[ 3, 2 ]   := Round( ( cFacCliL )->nValImp, nDouDiv )
                     aTotIvm[ 3, 3 ]   := Round( aTotIvm[ 3, 1 ] * aTotIvm[ 3, 2 ], nRouDiv )

                  end

               end

            end

         else





            nTotalLin   := 0
            nTotalUnd   := 0

         end

      end

      ( cFacCliL )->( dbSkip() )

   end

       ( cFacCliL )->( dbGoTo( nRec ) )





       aTotIva          := oTotalDoc:getArrayImpuesto()
       aTotIva          := aSort( aTotIva,,, {|x,y| hGet( x, "porcentajeiva" ) > hGet( y, "porcentajeiva" ) } )

      nTotBrt            := oTotalDoc:getTotalBruto()

    if nDtoEsp <> 0
           nTotDto := oTotalDoc:setDescuentoEspecial( nDtoEsp )
       end
       if nDtoPP <> 0
           nTotDPP := oTotalDoc:setDescuentoProntoPago( nDtoPP )
       end
       if nDtoUno <> 0
           nTotUno := oTotalDoc:setDescuentoUno( nDtoUno )
       end
       if nDtoDos <> 0
           nTotDos := oTotalDoc:setDescuentoDos( nDtoDos )
       end





   nTotCob           := nTotalRecibosPagadosFacturasCliente( cFactura, cFacCliT, cFacCliP, cIva, cDiv )





       oTotalDoc:setImportesImpuesto( lIvaInc, nRegIva, nRouDiv )

       if lRecargo .AND. lIvaInc
        nTotBrt            := oTotalDoc:getTotalBruto()
    end



   if nManObr <> 0

      if lIvaInc
         nIvaGasto   := Round( nManObr / ( 100 / nIvaMan + 1 ), nRouDiv )
         nBaseGasto  := nManObr - nIvaGasto
      else
         nBaseGasto  := nManObr
         nIvaGasto   := Round( nManObr * nIvaMan / 100, nRouDiv )
      end

      oTotalDoc:setGastos( nIvaMan, nBaseGasto, nIvaGasto )

   end





   nTotNet           := oTotalDoc:getTotalNeto()





   nTotNet           += oTotalDoc:getTotalTrn()





   nTotIvm           := oTotalDoc:getTotalIvmh()





   nTotTrn           := oTotalDoc:getTotalTrn()





   nTotPnt           := oTotalDoc:getTotalPntVer()





   nTotIva           := oTotalDoc:getTotalIva()





   nTotReq           := oTotalDoc:getTotalRE()





   nTotImp           := Round( nTotIva + nTotReq + nTotIvm, nRouDiv )





   if nTipRet <= 1
      nTotRet        := Round( ( nTotNet - nTotSup ) * nPctRet / 100, nRouDiv )
   else
      nTotRet        := Round( ( nTotNet - nTotSup + nTotIva ) * nPctRet / 100, nRouDiv )
   end





   nTotRnt           := Round( nTotNet - nManObr - nTotAge - nTotPnt - nTotAtp - nTotCos, nRouDiv )

   nTotPctRnt        := nRentabilidad( nTotNet - nManObr - nTotAge - nTotPnt, nTotAtp, nTotCos )





    nTotFac           := Round( nTotNet + nTotImp - nTotRet, nRouDiv )

    if ConfiguracionesEmpresaModel():getLogic( "lDtoLinAfterTotal", .F. )
           nTotFac              -= nTotalDtoLineal
       end





   nTotAge           := Round( nTotAge, nRouDiv )





   if nKgsTrn <> 0
      nTotalDif      := nKgsTrn - nTotPes
   else
      nTotalDif      := 0
   end





   nTotalDto         := nDescuentosLineas + nTotDto + nTotDpp + nTotUno + nTotDos + nTotAtp





   if !empty( cFacCliP ) .AND. ( cFacCliP )->( Used() )

      nRec           := ( cFacCliP )->( Recno() )
      nOrd           := ( cFacCliP )->( OrdSetFocus( "fNumFac" ) )

      if ( cFacCliP )->( dbSeek( cFactura ) )

         while ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac == cFactura .AND. !( cFacCliP )->( eof() )

            if empty( ( cFacCliP )->cRecDev )
               aAdd( aImpVto, ( cFacCliP )->nImporte )
               aAdd( aDatVto, if( empty( ( cFacCliP )->dFecVto ), ( cFacCliP )->dPreCob,  ( cFacCliP )->dFecVto ) )
            end

            ( cFacCliP )->( dbSkip() )

         end

      end

      ( cFacCliP )->( OrdSetFocus( nOrd ) )
      ( cFacCliP )->( dbGoTo( nRec ) )

   end





   if cDivRet <> nil .AND. cDivRet <> cCodDiv
      nTotNet        := nCnv2Div( nTotNet, cCodDiv, cDivRet )
      nTotIva        := nCnv2Div( nTotIva, cCodDiv, cDivRet )
      nTotReq        := nCnv2Div( nTotReq, cCodDiv, cDivRet )
      nTotFac        := nCnv2Div( nTotFac, cCodDiv, cDivRet )
      nTotRet        := nCnv2Div( nTotRet, cCodDiv, cDivRet )
      nTotPnt        := nCnv2Div( nTotPnt, cCodDiv, cDivRet )
      nTotTrn        := nCnv2Div( nTotTrn, cCodDiv, cDivRet )
      cPorDiv        := cPorDiv( cDivRet, cDiv )
   end

RETURN ( if( lPic, Trans( if( lNeto, nTotNet, nTotFac ), cPorDiv ), if( lNeto, nTotNet, nTotFac ) ) )



FUNCTION nComLFacCli( cFacCliT, cFacCliL, nDecOut, nDerOut )

   local nImpLFacCli  := nImpLFacCli( cFacCliT, cFacCliL, nDecOut, nDerOut, , .F., .T., .F., .F. )

RETURN ( Round( ( nImpLFacCli * ( cFacCliL )->nComAge / 100 ), nDerOut ) )



FUNCTION nPesLFacCli( dbfLin )

   local nCalculo

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;

   if !( dbfLin )->lTotLin
      nCalculo       := Abs( nTotNFacCli( dbfLin ) ) * ( dbfLin )->nPesoKg
   end

RETURN ( nCalculo )



FUNCTION nCosLFacCli( dbfLine, nDec, nRec, nVdv, cPouDiv )

   local nCalculo       := 0

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRec == nil, nRec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if !( dbfLine )->lKitChl
      nCalculo          := nTotNFacCli( dbfLine )
      nCalculo          *= ( dbfLine )->nCosDiv
   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

   nCalculo             := Round( nCalculo, nRec )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )







FUNCTION nPntLFacCli( dbfLin, nDec, nVdv, lPntVer )

   local nPntVer

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;





   nPntVer           := nPntUFacCli( dbfLin, nDec, nVdv, lPntVer ) * nTotNFacCli( dbfLin )

RETURN ( Round( nPntVer, nDec ) )



FUNCTION nTotIFacCli( dbfLin, nDec, nRou, nVdv, cPorDiv )

   local nCalculo    := 0

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if !( dbfLin )->lTotLin





      nCalculo       := Round( ( dbfLin )->nValImp, nDec )





      nCalculo       *= nTotNFacCli( dbfLin )

      if ( dbfLin )->lVolImp
         nCalculo    *= NotCero( ( dbfLin )->nVolumen )
      end

      nCalculo       := Round( nCalculo / nVdv, nRou )

   end

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nTrnLFacCli( dbfLin, nDec, nRou, nVdv )

   local nImpTrn

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;





   nImpTrn           := nTrnUFacCli( dbfLin, nDec ) * nTotNFacCli( dbfLin )

   IF nVdv <> 0
      nImpTrn        := nImpTrn / nVdv
   end

RETURN ( Round( nImpTrn, nRou ) )







FUNCTION nImpUFacCli( uFacCliT, uFacCliL, nDec, nVdv, lIva )

   local lIvaInc
   local nCalculo

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;

   nCalculo       := nTotUFacCli( uFacCliL, nDec, nVdv )

   if IsArray( uFacCliT )

      nCalculo    -= Round( nCalculo * uFacCliT[ 45 ]  / 100, nDec )
      nCalculo    -= Round( nCalculo * uFacCliT[ 47    ]  / 100, nDec )
      nCalculo    -= Round( nCalculo * uFacCliT[ 49 ]  / 100, nDec )
      nCalculo    -= Round( nCalculo * uFacCliT[ 51 ]  / 100, nDec )
      lIvaInc     := uFacCliT[ 61 ]

   else

      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoEsp / 100, nDec )
      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDpp    / 100, nDec )
      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoUno / 100, nDec )
      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoDos / 100, nDec )
      lIvaInc     := ( uFacCliT )->lIvaInc

   end

   if IsArray( uFacCliL )

      if lIva .AND. uFacCliL[ 11 ] <> 0
         if !lIvaInc
            nCalculo    += nCalculo * uFacCliL[ 11 ] / 100
         end
      else
         if lIvaInc .AND. uFacCliL[ 11 ] <> 0
            nCalculo    -= Round( nCalculo / ( 100 / uFacCliL[ 11 ] + 1 ), nDec )
         end
      end

   else

      if lIva .AND. ( uFacCliL )->nIva <> 0
         if !lIvaInc
            nCalculo    += nCalculo * ( uFacCliL )->nIva / 100
         end
      else
         if lIvaInc .AND. ( uFacCliL )->nIva <> 0
            nCalculo    -= Round( nCalculo / ( 100 / ( uFacCliL )->nIva + 1 ), nDec )
         end
      end

   end

RETURN ( Round( nCalculo, nDec ) )







FUNCTION nImpLFacCli( uFacCliT, uFacCliL, nDec, nRou, nVdv, lIva, lDto, lPntVer, lImpTrn, cPouDiv )

   local lIvaInc
   local nCalculo

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo          := nTotLFacCli( uFacCliL, nDec, nRou, nVdv, .T., lPntVer, lImpTrn )

   if IsArray( uFacCliT )

      nCalculo       -= Round( nCalculo * uFacCliT[ 45 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uFacCliT[ 47    ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uFacCliT[ 49 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uFacCliT[ 51 ]  / 100, nRou )
      lIvaInc        := uFacCliT[ 61 ]

   else

      nCalculo       -= Round( nCalculo * ( uFacCliT )->nDtoEsp / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uFacCliT )->nDpp    / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uFacCliT )->nDtoUno / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uFacCliT )->nDtoDos / 100, nRou )
      lIvaInc        := ( uFacCliT )->lIvaInc

   end

   if IsArray( uFacCliL )

      if lIva .AND. uFacCliL[ 11 ] <> 0
         if !lIvaInc
            nCalculo    += nCalculo * uFacCliL[ 11 ] / 100
         end
      else
         if lIvaInc .AND. uFacCliL[ 11 ] <> 0
            nCalculo    -= Round( nCalculo / ( 100 / uFacCliL[ 11 ] + 1 ), nRou )
         end
      end

   else

      if lIva .AND. ( uFacCliL )->nIva <> 0
         if !lIvaInc
            nCalculo    += nCalculo * ( uFacCliL )->nIva / 100
         end
      else
         if lIvaInc .AND. ( uFacCliL )->nIva <> 0
            nCalculo    -= Round( nCalculo / ( 100 / ( uFacCliL )->nIva + 1 ), nRou )
         end
      end

   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )







FUNCTION nPntUFacCli( dbfTmpLin, nDec, nVdv, lPntVer )

       local nCalculo

       If( dbfTmpLin == nil, dbfTmpLin := D():FacturasClientesLineas( nView ), ) ;
       If( nDec == nil, nDec := nDouDiv(), ) ;
       If( nVdv == nil, nVdv := 1, ) ;
       If( lPntVer == nil, lPntVer := FacturasClientesModel():getField( ( dbfTmpLin )->cSerie, ( dbfTmpLin )->nNumFac, ( dbfTmpLin )->cSufFac, "lOperPV" ), ) ;

       if lPntVer
           nCalculo        := ( dbfTmpLin )->nPntVer
       else
        nCalculo        := 0
       end

       if nVdv <> 0
          nCalculo           := nCalculo / nVdv
       end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nTrnUFacCli( dbfTmpLin, nDec, nVdv )

   local nCalculo

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := ( dbfTmpLin )->nImpTrn

   IF nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



Static Function KillTrans()





   if !empty( dbfTmpLin ) .AND. ( dbfTmpLin )->( Used() )
      ( dbfTmpLin )->( dbCloseArea() )
   end

   if !empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )
      ( dbfTmpInc )->( dbCloseArea() )
   end

   if !empty( dbfTmpDoc ) .AND. ( dbfTmpDoc )->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end

   if !empty( dbfTmpPgo ) .AND. ( dbfTmpPgo )->( Used() )
      ( dbfTmpPgo )->( dbCloseArea() )
   end

   if !empty( dbfTmpSer ) .AND. ( dbfTmpSer )->( Used() )
      ( dbfTmpSer )->( dbCloseArea() )
   end

   if !empty( dbfTmpEntidades ) .AND. ( dbfTmpEntidades )->( Used() )
      ( dbfTmpEntidades )->( dbCloseArea() )
   end

   if !empty( dbfTmpEst ) .AND. ( dbfTmpEst )->( Used() )
      ( dbfTmpEst )->( dbCloseArea() )
   end

   dbfTmpLin         := nil
   dbfTmpInc         := nil
   dbfTmpDoc         := nil
   dbfTmpPgo         := nil
   dbfTmpSer         := nil
   dbfTmpEntidades   := nil
   dbfTmpEst         := nil

   dbfErase( cTmpLin )
   dbfErase( cTmpInc )
   dbfErase( cTmpDoc )
   dbfErase( cTmpPgo )
   dbfErase( cTmpSer )
   dbfErase( cTmpEnt )
   dbfErase( cTmpEst )

   oStock:SetTmpFacCliL()

RETURN NIL



FUNCTION nDtoUFacCli( dbfTmpLin, nDec, nVdv )

   local nCalculo := ( dbfTmpLin )->nDtoDiv

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   IF nVdv <> 0
      nCalculo    := ( dbfTmpLin )->nDtoDiv / nVdv
   end

RETURN ( round( nCalculo, nDec ) )







FUNCTION nTotFFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )

   local nCalculo    := 0

   If( dbfLin == nil, dbfLin := D():FacturasClientesLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   nCalculo          += nNoIncLFacCli( dbfLin )
   nCalculo          += nIvaLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )
   nCalculo          += nReqLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )

return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION checkPagosFacturaCliente( Id, nView )

Return ( ChkLqdFacCli( nil, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), , D():TiposIva( nView ), D():Divisas( nView ) ) )






FUNCTION ChkLqdFacCli( aTmp, cFacCliT, cFacCliL, cFacCliP, cAntCliT, dbfIva, dbfDiv )

   local lChkLqd
   local cFactura
   local nTotal
   local cDivFac
   local nPagFacCli
   local nRec     := ( cFacCliP )->( RecNo() )
   local lLiqAnt

   if aTmp <> nil
      cFactura    := aTmp[ 1  ] + str( aTmp[ 2 ] ) + aTmp[ 3 ]
      cDivFac     := aTmp[ 63 ]
      lLiqAnt     := aTmp[ 25 ]
   else
      cFactura    := ( cFacCliT )->cSerie + str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac
      cDivFac     := ( cFacCliT )->cDivFac
      lLiqAnt     := ( cFacCliT )->lLiquidada
   end

   nTotal         := abs( nTotFacCli( cFactura, cFacCliT, cFacCliL, dbfIva, dbfDiv, cFacCliP, nil, nil, .F. ) )

   nPagFacCli     := abs( nTotalRecibosPagadosFacturasCliente( cFactura, cFacCliT, cFacCliP, dbfIva, dbfDiv ) )

   lChkLqd                       := !lMayorIgual( nTotal, nPagFacCli, 0.001 )

   if aTmp <> nil
      aTmp[ 25 ]        := lChkLqd
   end

   if dbLock( cFacCliT )

      ( cFacCliT )->lLiquidada   := lChkLqd

      if lLiqAnt <> lChkLqd
         ( cFacCliT )->lSndDoc   := .T.
      end

      ( cFacCliT )->( dbUnLock() )

   end

   ( cFacCliP )->( dbGoTo( nRec ) )

RETURN ( lChkLqd )






FUNCTION dFecFacCli( cFacCli, cFacCliT )

   local aStatus
   local dFecFac  := CtoD("")

   if ValType( cFacCliT ) == "O"
      cFacCliT:GetStatus( .T. )
      if cFacCliT:Seek( cFacCli )
         dFecFac  := cFacCliT:dFecFac
      end
      cFacCliT:SetStatus()
   else
      aStatus  := aGetStatus( cFacCliT, .T. )
      if ( cFacCliT )->( dbSeek( cFacCli ) )
         dFecFac  := ( cFacCliT )->dFecFac
      end
      SetStatus( cFacCliT, aStatus )
   end

RETURN ( dFecFac )






FUNCTION tFecFacCli( cFacCli, cFacCliT )

   local aStatus
   local tFecFac  := Replicate( "0", 6 )

   if IsObject( cFacCliT )
      cFacCliT:GetStatus( .T. )
      if cFacCliT:Seek( cFacCli )
         tFecFac  := cFacCliT:tFecFac
      end
      cFacCliT:SetStatus()
   else
      aStatus  := aGetStatus( cFacCliT, .T. )
      if ( cFacCliT )->( dbSeek( cFacCli ) )
         tFecFac  := ( cFacCliT )->tFecFac
      end
      SetStatus( cFacCliT, aStatus )
   end

RETURN ( tFecFac )



FUNCTION BrowseInformesFacCli( oGet, oGet2 )

   local oDlg
   local oBrw
   local oGet1
   local cGet1
   local oCbxOrd
   local cCbxOrd
   local nOrd
   local aCbxOrd

   if !OpenFiles()
      Return .F.
   end

   aCbxOrd           := { "Número", "Fecha", "Cliente", "Nombre" }
   nOrd              := GetBrwOpt( "BrwFacCli" )
   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   oDlg = TDialog():New(,,,, "Facturas de clientes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, D():FacturasClientes( nView ) ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, D():FacturasClientes( nView ), nil, nil, .F. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( D():FacturasClientes( nView ) )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := D():FacturasClientes( nView )
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Factura de cliente.Browse informes"

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumFac"
         :bEditValue       := {|| ( D():FacturasClientes( nView ) )->cSerie + "/" + RTrim( str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + "/" + ( D():FacturasClientes( nView ) )->cSufFac }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecFac"
         :bEditValue       := {|| Dtoc( ( D():FacturasClientes( nView ) )->dFecFac ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| Rtrim( ( D():FacturasClientes( nView ) )->cCodCli ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| Rtrim( ( D():FacturasClientes( nView ) )->cNomCli ) }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotFacCli( D():FacturasClientesId( nView ), D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), dbfIva, dbfDiv, D():FacturasClientesCobros( nView ), nil, cDivEmp(), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end





      TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





      TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBrw:Load() )}, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      oGet:cText( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac )
      oGet2:cText( ( D():FacturasClientes( nView ) )->cNomCli )
   end

   SetBrwOpt( "BrwFacCli", ( D():FacturasClientes( nView ) )->( OrdNumber() ) )

   ( D():FacturasClientes( nView ) )->( dbClearFilter() )

   CloseFiles()





   oBrw:CloseData()

RETURN ( oDlg:nResult == 1 )



FUNCTION lValidInformeFacCli( oGet, oGet2 )

   local lClose   := .F.
   local lValid   := .F.
   local xValor   := oGet:varGet()

   if empty( xValor )
      return .T.
   end

   if !OpenFiles()
      Return .F.
   end

   if ( D():FacturasClientes( nView ) )->( dbSeek( xValor ) )

      oGet:cText( ( D():FacturasClientes( nView ) )->cSerie + str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac )
      oGet2:cText( ( D():FacturasClientes( nView ) )->cNomCli )

      lValid   := .T.

   else

      msgStop( "Factura no encontrada" )

   end

   CloseFiles()

RETURN lValid



Function dJuliano4FacCli( cFacCliL )

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;

RETURN ( AddMonth( JulianoToDate( , Val( ( cFacCliL )->cLote ) ), 4 ) )



Function dJulianoFacCli( cFacCliL )

   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;

RETURN ( AddMonth( JulianoToDate( , Val( ( cFacCliL )->cLote ) ), 6 ) )



FUNCTION nTotalRecibosGeneradosFacturasCliente( cFactura, cFacCliT, dbfFacCliP, dbfIva, dbfDiv, cDivRet )

Return ( nPagFacCli( cFactura, cFacCliT, dbfFacCliP, dbfIva, dbfDiv, cDivRet, .F., .F. ) )



FUNCTION nTotalRecibosPagadosFacturasCliente( cFactura, cFacCliT, dbfFacCliP, dbfIva, dbfDiv, cDivRet )

Return ( nPagFacCli( cFactura, cFacCliT, dbfFacCliP, dbfIva, dbfDiv, cDivRet, .T., .F. ) )






FUNCTION nPagFacCli( cFactura, cFacCliT, dbfFacCliP, dbfIva, dbfDiv, cDivRet, lOnlyCob, lPic )

   local nOrd
   local nRec
   local cPorDiv
   local nRouDiv        := 2
   local nTotalPagado   := 0
   local cCodDiv        := cDivEmp()

   If( lOnlyCob == nil, lOnlyCob := .T., ) ;
   If( lPic == nil, lPic := .F., ) ;





   if empty( Select( cFacCliT ) )
      Return ( 0 )
   end

   if empty( Select( dbfFacCliP ) )
      Return ( 0 )
   end

   if empty( Select( dbfIva ) )
      Return ( 0 )
   end

   if empty( Select( dbfDiv ) )
      Return ( 0 )
   end





   cCodDiv              := ( dbfFacCliP )->cDivPgo
   cPorDiv              := cPorDiv( cCodDiv, dbfDiv )
   nRouDiv              := nRouDiv( cCodDiv, dbfDiv )

   if empty( cFactura )

      nRec              := ( dbfFacCliP )->( Recno() )

      ( dbfFacCliP )->( dbGoTop() )
      while !( dbfFacCliP )->( Eof() )

         if ( lOnlyCob .AND. ( dbfFacCliP )->lCobrado .AND. !( dbfFacCliP )->lDevuelto ) .OR. !lOnlyCob .AND. !( dbfFacCliP )->lDevuelto

            nTotalPagado+= ( dbfFacCliP )->nImporte

         end

         ( dbfFacCliP )->( dbSkip() )

      end

      ( dbfFacCliP )->( dbGoTo( nRec ) )

   else

      nRec              := ( dbfFacCliP )->( Recno() )
      nOrd              := ( dbfFacCliP )->( OrdSetFocus( "fNumFac" ) )

      if ( dbfFacCliP )->( dbSeek( cFactura ) )
         while ( ( dbfFacCliP )->cSerie + str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFactura )

            if ( lOnlyCob .AND. ( dbfFacCliP )->lCobrado .AND. !( dbfFacCliP )->lDevuelto ) .OR. ( !lOnlyCob .AND. !( dbfFacCliP )->lDevuelto )

               nTotalPagado+= ( dbfFacCliP )->nImporte

            end

            ( dbfFacCliP )->( dbSkip() )

         end
      end

      ( dbfFacCliP )->( OrdSetFocus( nOrd ) )
      ( dbfFacCliP )->( dbGoTo( nRec ) )

   end

   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      nTotalPagado      := nCnv2Div( nTotalPagado, cCodDiv, cDivRet )
      cPorDiv           := cPorDiv( cDivRet, dbfDiv )
      nRouDiv           := nRouDiv( cDivRet, dbfDiv )
   end

   nTotalPagado         := Round( nTotalPagado, nRouDiv )

   if lPic
      nTotalPagado      := Trans( nTotalPagado, cPorDiv )
   end

RETURN ( nTotalPagado )




FUNCTION cChkPagFacCli( cFacCli, cFacCliT, dbfFacCliP )

   local cChkPag        := ""
   local nChkPag        := nChkPagFacCli( cFacCli, cFacCliT, dbfFacCliP )

   do case
      case nChkPag == 1
         cChkPag        := "Cobrado"

      case nChkPag == 2
         cChkPag        := "Parcialmente"

      case nChkPag == 3
         cChkPag        := "Pendiente"

   end

RETURN ( cChkPag )



FUNCTION nChkPagFacCli( cFacCli, cFacCliT, dbfFacCliP )

   local nOrd
   local nBitmap        := 3

   if ( cFacCliT )->lLiquidada
      Return ( 1 )
   end

   nOrd                 := ( dbfFacCliP )->( ordsetfocus( "fNumFac" ) )

   if ( dbfFacCliP )->( dbSeek( cFacCli ) )

      while ( dbfFacCliP )->cSerie + str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFacCli .AND. !( dbfFacCliP )->( eof() )

         if ( dbfFaccliP )->lCobrado .AND. !( dbfFacCliP )->lDevuelto

            nBitmap     := 2

            exit

         end

         ( dbfFacCliP )->( dbSkip() )

      end

   end

   ( dbfFacCliP )->( ordsetfocus( nOrd ) )

RETURN ( nBitmap )



Function FacturasClientesId()

Return ( D():FacturasClientesId( nView ) )



Function cTotFacCli()

Return ( Num2Text( nTotFac ) )






Function lRectificadaCli( cNumFac, cFacCliT, cFacRecT )

   local lRectificada   := .F.

   If( cFacCliT == nil, cFacCliT := D():FacturasClientes( nView ), ) ;
   If( cFacRecT == nil, cFacRecT := dbfFacRecT, ) ;
   If( cNumFac == nil, cNumFac := ( cFacCliT )->cSerie + str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac, ) ;

   if dbSeekInOrd( cNumFac, "CNUMFAC", cFacRecT )
      lRectificada      := .T.
   end

return ( lRectificada )



Function dFechaUltimaVenta( cCodCli, cCodArt, dbfAlbCliL, dbfFacCliL, dbfTikL )

   local nRecAlbL
   local nRecFacL
   local nOrdAlbL
   local nOrdFacL
   local dUltimaFactura
   local dUltimoAlbaran

   CursorWait()

   nRecAlbL                := ( dbfAlbCliL )->( Recno() )
   nRecFacL                := ( dbfFacCliL )->( Recno() )
   nOrdAlbL                := ( dbfAlbCliL )->( OrdSetFocus( "cRefFec" ) )
   nOrdFacL                := ( dbfFacCliL )->( OrdSetFocus( "cRefFec" ) )
   dUltimaFactura          := ctod( "" )
   dUltimoAlbaran          := ctod( "" )





   if ( dbfAlbCliL )->( dbSeek( cCodArt + cCodCli ) )
      dUltimoAlbaran       := ( dbfAlbCliL )->dFecAlb
   end





   if ( dbfFacCliL )->( dbSeek( cCodArt + cCodCli ) )
      dUltimaFactura       := ( dbfFacCliL )->dFecFac
   end





   ( dbfAlbCliL )->( OrdSetFocus( nOrdAlbL ) )
   ( dbfFacCliL )->( OrdSetFocus( nOrdFacL ) )
   ( dbfAlbCliL )->( dbGoTo( nRecAlbL ) )
   ( dbfFacCliL )->( dbGoTo( nRecFacL ) )

   CursorWE()

Return ( if( dUltimaFactura > dUltimoAlbaran, dUltimaFactura, dUltimoAlbaran ) )



Function nUnidadesUltimaVenta( cCodCli, cCodArt, dbfAlbCliL, dbfFacCliL, dbfTikL )

   local nUnidades      := 0
   local nRecAlbL       := ( dbfAlbCliL )->( Recno() )
   local nRecFacL       := ( dbfFacCliL )->( Recno() )
   local nOrdAlbL       := ( dbfAlbCliL )->( OrdSetFocus( "cRefFec" ) )
   local nOrdFacL       := ( dbfFacCliL )->( OrdSetFocus( "cRefFec" ) )
   local dUltimaFactura := ctod( "" )
   local dUltimoAlbaran := ctod( "" )

   CursorWait()





   if ( dbfAlbCliL )->( dbSeek( cCodArt + cCodCli ) )
      dUltimoAlbaran     := ( dbfAlbCliL )->dFecAlb
   end





   if ( dbfFacCliL )->( dbSeek( cCodArt + cCodCli ) )
      dUltimaFactura     := ( dbfFacCliL )->dFecFac
   end

   if !empty(dUltimaFactura) .OR. !empty(dUltimoAlbaran)

      if ( dUltimaFactura > dUltimoAlbaran )
         nUnidades      := nTotNFacCli( dbfFacCliL )
      else
         nUnidades      := nTotNAlbCli( dbfAlbCliL )
      end

   end





   ( dbfAlbCliL )->( OrdSetFocus( nOrdAlbL ) )
   ( dbfFacCliL )->( OrdSetFocus( nOrdFacL ) )
   ( dbfAlbCliL )->( dbGoTo( nRecAlbL ) )
   ( dbfFacCliL )->( dbGoTo( nRecFacL ) )

   CursorWE()

Return ( nUnidades )



Function nPrecioUltimaVenta( cCodCli, cCodArt, dbfAlbCliL, dbfFacCliL, dbfTikL )

   local nPrecio           := 0
   local nRecAlbL          := ( dbfAlbCliL )->( Recno() )
   local nRecFacL          := ( dbfFacCliL )->( Recno() )
   local nOrdAlbL          := ( dbfAlbCliL )->( OrdSetFocus( "cRefFec" ) )
   local nOrdFacL          := ( dbfFacCliL )->( OrdSetFocus( "cRefFec" ) )
   local dUltimaFactura    := ctod( "" )
   local dUltimoAlbaran    := ctod( "" )

   CursorWait()





   if ( dbfAlbCliL )->( dbSeek( cCodArt + cCodCli ) )
      dUltimoAlbaran       := ( dbfAlbCliL )->dFecAlb
   end





   if ( dbfFacCliL )->( dbSeek( cCodArt + cCodCli ) )
      dUltimaFactura       := ( dbfFacCliL )->dFecFac
   end

   if !empty( dUltimaFactura ) .OR. !empty( dUltimoAlbaran )

      if ( dUltimaFactura > dUltimoAlbaran )
         nPrecio           := ( dbfFacCliL )->nPreUnit
      else
         nPrecio           := ( dbfAlbCliL )->nPreUnit
      end

   end





   ( dbfAlbCliL )->( OrdSetFocus( nOrdAlbL ) )
   ( dbfFacCliL )->( OrdSetFocus( nOrdFacL ) )
   ( dbfAlbCliL )->( dbGoTo( nRecAlbL ) )
   ( dbfFacCliL )->( dbGoTo( nRecFacL ) )

   CursorWE()

Return ( nPrecio )



Function dUltimaVentaCliente( cCodCli )

   local dUltimaFactura    := AlbaranesClientesModel():UltimoDocumento( cCodCli )
   local dUltimoAlbaran    := FacturasClientesModel():UltimoDocumento( cCodCli )

Return ( if( dUltimaFactura > dUltimoAlbaran, dUltimaFactura, dUltimoAlbaran ) )



Function dPrimeraVentaCliente( cCodCli, nView )

   local dPrimeraVentaCliente    := ctod( "" )

   CursorWait()

   D():getStatusPedidosClientes( nView )
   D():setFocusPedidosClientes( "cCodCli", nView )

   if ( D():PedidosClientes( nView ) )->( dbseek( cCodCli ) )
      while ( D():PedidosClientes( nView ) )->cCodCli == cCodCli .AND. !( D():PedidosClientes( nView ) )->( eof() )
         if empty( dPrimeraVentaCliente ) .OR. ( ( D():PedidosClientes( nView ) )->dFecPed < dPrimeraVentaCliente )
            dPrimeraVentaCliente := ( D():PedidosClientes( nView ) )->dFecPed
         end
         ( D():PedidosClientes( nView ) )->( dbskip() )
      end
   end

   D():setStatusPedidosClientes( nView )

   D():getStatusAlbaranesClientes( nView )
   D():setFocusAlbaranesClientes( "cCodCli", nView )

   if ( D():AlbaranesClientes( nView ) )->( dbseek( cCodCli ) )
      while ( D():AlbaranesClientes( nView ) )->cCodCli == cCodCli .AND. !( D():AlbaranesClientes( nView ) )->( eof() )
         if empty( dPrimeraVentaCliente ) .OR. ( ( D():AlbaranesClientes( nView ) )->dFecAlb < dPrimeraVentaCliente )
            dPrimeraVentaCliente := ( D():AlbaranesClientes( nView ) )->dFecAlb
         end
         ( D():AlbaranesClientes( nView ) )->( dbskip() )
      end
   end

   D():setStatusFacturasClientes( nView )

   D():getStatusFacturasClientes( nView )
   D():setFocusFacturasClientes( "cCodCli", nView )

   if ( D():FacturasClientes( nView ) )->( dbseek( cCodCli ) )
      while ( D():FacturasClientes( nView ) )->cCodCli == cCodCli .AND. !( D():FacturasClientes( nView ) )->( eof() )
         if empty( dPrimeraVentaCliente ) .OR. ( ( D():FacturasClientes( nView ) )->dFecFac < dPrimeraVentaCliente )
            dPrimeraVentaCliente := ( D():FacturasClientes( nView ) )->dFecFac
         end
         ( D():FacturasClientes( nView ) )->( dbskip() )
      end
   end

   D():setStatusFacturasClientes( nView )

   CursorWE()

Return ( dPrimeraVentaCliente )



Function FacturaClienteLineaOrdSetFocus( cOrd )

   ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( cOrd ) )

Return .T.







_HB_CLASS TFacturasClientesSenderReciver ; function TFacturasClientesSenderReciver ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFacturasClientesSenderReciver", iif( .T., { @TSenderReciverItem() }, { @HBObject() } ), @TFacturasClientesSenderReciver() ) ) ;

   _HB_MEMBER { lSuccesfullSendFacturas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSuccesfullSendFacturas"}, .F. )
   _HB_MEMBER { lSuccesfullSendAnticipos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSuccesfullSendAnticipos"}, .F. )

   _HB_MEMBER { nFacturaNumberSend } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFacturaNumberSend"}, .F. )
   _HB_MEMBER { nAnticipoNumberSend } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nAnticipoNumberSend"}, .F. )

   _HB_MEMBER { cFileNameFacturas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileNameFacturas"}, .F. )
   _HB_MEMBER { cFileNameAnticipos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileNameAnticipos"}, .F. )

   _HB_MEMBER CreateData(); oClass:AddMethod( "CreateData", @TFacturasClientesSenderReciver_CreateData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER RestoreData(); oClass:AddMethod( "RestoreData", @TFacturasClientesSenderReciver_RestoreData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SendData(); oClass:AddMethod( "SendData", @TFacturasClientesSenderReciver_SendData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReciveData(); oClass:AddMethod( "ReciveData", @TFacturasClientesSenderReciver_ReciveData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ReciveFrq(); oClass:AddMethod( "ReciveFrq", @TFacturasClientesSenderReciver_ReciveFrq(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TFacturasClientesSenderReciver_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ProcessFrq(); oClass:AddMethod( "ProcessFrq", @TFacturasClientesSenderReciver_ProcessFrq(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validateRecepcion(); oClass:AddMethod( "validateRecepcion", @TFacturasClientesSenderReciver_validateRecepcion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validateRecepcionRecibo( tmpFacCliP, dbfFacCliP); oClass:AddMethod( "validateRecepcionRecibo", @TFacturasClientesSenderReciver_validateRecepcionRecibo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFacturasClientesSenderReciver ;



static FUNCTION TFacturasClientesSenderReciver_CreateData( ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   local nOrd
   local oBlock
   local oError
   local dbfFacCliT
   local dbfFacCliL
   local dbfFacCliI
   local dbfFacCliP
   local dbfAntCliT
   local tmpFacCliT
   local tmpFacCliL
   local tmpFacCliP
   local tmpFacCliI
   local tmpAntCliT
   local lSndFacCli           := .F.
   local lSndAntCli           := .F.

   if ::oSender:lServer
      ::cFileNameFacturas       := "FacCli" + win_uuidcreatestring() + ".All"
      ::cFileNameAnticipos      := "AntCli" + win_uuidcreatestring() + ".All"
   else
      ::cFileNameFacturas       := "FacCli" + win_uuidcreatestring() + "." + RetSufEmp()
      ::cFileNameAnticipos      := "AntCli" + win_uuidcreatestring() + "." + RetSufEmp()
   end

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliT.DBF" ), ( cCheckArea( "FacCliT", @dbfFacCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliL.DBF" ), ( cCheckArea( "FacCliL", @dbfFacCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliL.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliP.DBF" ), ( cCheckArea( "FacCliP", @dbfFacCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliI.DBF" ), ( cCheckArea( "FacCliI", @dbfFacCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( dbfAntCliT )->( OrdSetFocus( "cNumDoc" ) )



   mkFacCli( cPatSnd() )

   mkRecCli( cPatSnd() )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliT.DBF" ), ( cCheckArea( "FacCliT", @tmpFacCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliT.CDX" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliL.DBF" ), ( cCheckArea( "FacCliL", @tmpFacCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliL.Cdx" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliP.DBF" ), ( cCheckArea( "FacCliP", @tmpFacCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliP.CDX" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliI.DBF" ), ( cCheckArea( "FacCliI", @tmpFacCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliI.CDX" ) )

   if !empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( dbfFacCliT )->( LastRec() )
   end

   ::oSender:SetText( "Enviando facturas de clientes" )

   nOrd  := ( dbfFacCliT )->( OrdSetFocus( "lSndDoc" ) )

   if ( dbfFacCliT )->( dbSeek( .T. ) )
      while !( dbfFacCliT )->( eof() )

         if ( dbfFacCliT )->lSndDoc

            lSndFacCli  := .T.

            dbPass( dbfFacCliT, tmpFacCliT, .T. )
            ::oSender:SetText( ( dbfFacCliT )->cSerie + "/" + AllTrim( str( ( dbfFacCliT )->nNumFac ) ) + "/" + AllTrim( ( dbfFacCliT )->cSufFac ) + "; " + Dtoc( ( dbfFacCliT )->dFecFac ) + ";" + AllTrim( ( dbfFacCliT )->cCodCli ) + "; " + ( dbfFacCliT )->cNomCli )

            if ( dbfFacCliL )->( dbSeek( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )
               while ( ( dbfFacCliL )->cSerie + str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac ) == ( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) .AND. !( dbfFacCliL )->( eof() )
                  dbPass( dbfFacCliL, tmpFacCliL, .T. )
                  ( dbfFacCliL )->( dbSkip() )
               end
            end

            if ( dbfFacCliI )->( dbSeek( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )
               while ( ( dbfFacCliI )->cSerie + str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac ) == ( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) .AND. !( dbfFacCliI )->( eof() )
                  dbPass( dbfFacCliI, tmpFacCliI, .T. )
                  ( dbfFacCliI )->( dbSkip() )
               end
            end

            if ( dbfFacCliP )->( dbSeek( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )
               while ( ( dbfFacCliP )->cSerie + str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac ) == ( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) .AND. !( dbfFacCliP )->( eof() )
                  dbPass( dbfFacCliP, tmpFacCliP, .T. )
                  ( dbfFacCliP )->( dbSkip() )
               end
            end

            if ( dbfAntCliT )->( dbSeek( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )
               while ( ( dbfFacCliT )->cSerie + str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac == ( dbfAntCliT )->cNumDoc .AND. !( dbfAntCliT )->( eof() ) )
                  if !( dbfAntCliT )->lSndDoc .AND. ( dbfAntCliT )->( dbRLock() )
                     ( dbfAntCliT )->lSndDoc := .T.
                     ( dbfAntCliT )->( dbUnlock() )
                  end
                  ( dbfAntCliT )->( dbSkip() )
               end
            end

         end

         ( dbfFacCliT )->( dbSkip() )

         if !empty( ::oSender:oMtr )
            ::oSender:oMtr:Set( ( dbfFacCliT )->( OrdKeyNo() ) )
         end

      end
   end

   ( dbfFacCliT )->( OrdSetFocus( nOrd ) )

   ( dbfFacCliT )->( dbCloseArea() )
   ( dbfFacCliL )->( dbCloseArea() )
   ( dbfFacCliP )->( dbCloseArea() )
   ( dbfFacCliI )->( dbCloseArea() )
   ( dbfAntCliT )->( dbCloseArea() )
   ( tmpFacCliT )->( dbCloseArea() )
   ( tmpFacCliL )->( dbCloseArea() )
   ( tmpFacCliP )->( dbCloseArea() )
   ( tmpFacCliI )->( dbCloseArea() )

   if lSndFacCli

      ::oSender:SetText( "Comprimiendo facturas de clientes" )

      if ::oSender:lZipData( ::cFileNameFacturas )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay facturas de clientes para enviar" )

   end





   ::oSender:SetText( "Enviando anticipos de clientes" )





   mkAntCli( cPatSnd() )





   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @tmpAntCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AntCliT.CDX" ) )

   if !empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal  := ( dbfAntCliT )->( LastRec() )
   end

   while !( dbfAntCliT )->( eof() )

      if ( dbfAntCliT )->lSndDoc
         lSndAntCli        := .T.
         dbPass( dbfAntCliT, tmpAntCliT, .T. )
         ::oSender:SetText( ( dbfAntCliT )->cSerAnt + "/" + AllTRim( str( ( dbfAntCliT )->nNumAnt ) ) + "/" + AllTrim( ( dbfAntCliT )->cSufAnt ) + "; " + Dtoc( ( dbfAntCliT )->dFecAnt ) + "; " + AllTrim( ( dbfAntCliT )->cCodCli ) + "; " + ( dbfAntCliT )->cNomCli )
      end

      ( dbfAntCliT )->( dbSkip() )

      if !empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( dbfAntCliT )->( OrdKeyNo() ) )
      end

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfAntCliT )->( dbCloseArea() )
   ( tmpAntCliT )->( dbCloseArea() )

   if lSndAntCli

      ::oSender:SetText( "Comprimiendo anticipos de clientes" )

      if ::oSender:lZipData( ::cFileNameAnticipos )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay anticipos para enviar" )

   end

Return ( Self )



static FUNCTION TFacturasClientesSenderReciver_RestoreData( ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   local oBlock
   local oError
   local dbfFacCliT
   local dbfAntCliT

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if ::lSuccesfullSendFacturas

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliT.DBF" ), ( cCheckArea( "FacCliT", @dbfFacCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( dbfFacCliT )->( OrdSetFocus( "lSndDoc" ) )

      while ( dbfFacCliT )->( dbSeek( .T. ) ) .AND. !( dbfFacCliT )->( eof() )
         if ( dbfFacCliT )->( dbRLock() )
            ( dbfFacCliT )->lSndDoc := .F.
            ( dbfFacCliT )->( dbRUnlock() )
         end
      end

      ( dbfFacCliT )->( dbCloseArea() )

   end

   if ::lSuccesfullSendAnticipos

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( dbfAntCliT )->( OrdSetFocus( "lSndDoc" ) )

      while ( dbfAntCliT )->( dbSeek( .T. ) ) .AND. !( dbfAntCliT )->( eof() )
         if ( dbfAntCliT )->( dbRLock() )
            ( dbfAntCliT )->lSndDoc := .F.
            ( dbfAntCliT )->( dbRUnlock() )
         end
      end

      ( dbfAntCliT )->( dbCloseArea() )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( Self )



static FUNCTION TFacturasClientesSenderReciver_SendData( ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   local cDirectory           := ""

   if ::oSender:lFranquiciado
      cDirectory              := "Frq\"
   end

   ::lSuccesfullSendFacturas  := .F.
   ::lSuccesfullSendAnticipos := .F.





   if File( cPatOut() + ::cFileNameFacturas )

      if ::oSender:SendFiles( cPatOut() + ::cFileNameFacturas, cDirectory + ::cFileNameFacturas, cDirectory )
         ::lSuccesfullSendFacturas  := .T.
         ::oSender:SetText( "Fichero facturas de clientes enviados " + ::cFileNameFacturas )
      else
         ::oSender:SetText( "ERROR al enviar fichero de facturas de clientes" )
      end

   end





   if File( cPatOut() + ::cFileNameAnticipos )

      if ::oSender:SendFiles( cPatOut() + ::cFileNameAnticipos, ::cFileNameAnticipos, cDirectory )
         ::lSuccesfullSendAnticipos := .T.
         ::oSender:SetText( "Fichero anticipos de clientes enviados " + ::cFileNameAnticipos )
      else
         ::oSender:SetText( "ERROR al enviar fichero de anticipos de clientes" )
      end

   end

Return ( Self )



static FUNCTION TFacturasClientesSenderReciver_ReciveData( ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   local n
   local aExt

   aExt     := ::oSender:aExtensions()





   ::oSender:SetText( "Recibiendo facturas y anticipos de clientes" )

   for n := 1 to len( aExt )
      ::oSender:GetFiles( "FacCli*." + aExt[ n ], cPatIn() )
      ::oSender:GetFiles( "AntCli*." + aExt[ n ], cPatIn() )
   next

   ::oSender:SetText( "Facturas y anticipos de clientes recibidos" )

Return Self



static FUNCTION TFacturasClientesSenderReciver_Process( ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   local m
   local oStock

   local dbfIva
   local dbfDiv
   local dbfFacCliT
   local dbfFacCliL
   local dbfFacCliP
   local dbfAntCliT

   local tmpFacCliT
   local tmpFacCliL
   local tmpFacCliP
   local tmpAntCliT

   local dbfCliente
   local dbfProvee

   local oBlock
   local oError
   local lClient        := ::oSender:lServer
   local aFiles         := directory( cPatIn() + "FacCli*.*" )
   local cSerie
   local nNumero
   local cSufijo

   local cNumeroFactura
   local cTextoFactura  := ""
   local cNumeroRecibo
   local cTextoRecibo   := ""
   local lContabilizado := .F.

   for m := 1 to len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE





      if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )





         if file( cPatSnd() + "FacCliT.Dbf" ) .AND. file( cPatSnd() + "FacCliL.Dbf" ) .AND. file( cPatSnd() + "FacCliP.Dbf" )

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliT.DBF" ), ( cCheckArea( "FacCliT", @tmpFacCliT ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliT.CDX" ) )

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliL.DBF" ), ( cCheckArea( "FacCliL", @tmpFacCliL ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliL.Cdx" ) )

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliP.DBF" ), ( cCheckArea( "FacCliP", @tmpFacCliP ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliP.CDX" ) )

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliT.DBF" ), ( cCheckArea( "FacCliT", @dbfFacCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliL.DBF" ), ( cCheckArea( "FacCliL", @dbfFacCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliL.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliP.DBF" ), ( cCheckArea( "FacCliP", @dbfFacCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfCliente ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
            if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            while ( tmpFacCliT )->( !eof() )

               if ::validateRecepcion( tmpFacCliT, dbfFacCliT )

                  cNumeroFactura    := ( tmpFacCliT )->cSerie + str( ( tmpFacCliT )->nNumFac ) + ( tmpFacCliT )->cSufFac
                  cTextoFactura     := ( tmpFacCliT )->cSerie + "/" + AllTrim( str( ( tmpFacCliT )->nNumFac ) ) + "/" + AllTrim( ( tmpFacCliT )->cSufFac ) + "; " + Dtoc( ( tmpFacCliT )->dFecFac ) + "; " + AllTrim( ( tmpFacCliT )->cCodCli ) + "; " + ( tmpFacCliT )->cNomCli

                  while ( dbfFacCliT )->( dbseek( cNumeroFactura ) )
                       lContabilizado     := ( dbfFacCliT )->lContab
                     dbLockDelete( dbfFacCliT )
                  end

                  while ( dbfFacCliL )->( dbseek( cNumeroFactura ) )
                     dbLockDelete( dbfFacCliL )
                  end



                  dbPass( tmpFacCliT, dbfFacCliT, .T. )

                  if dbLock( dbfFacCliT )
                       ( dbfFacCliT )->lContab := lContabilizado
                     ( dbfFacCliT )->lSndDoc := .F.
                     ( dbfFacCliT )->( dbUnLock() )
                  end

                  ::oSender:SetText( "Añadida factura : " + cTextoFactura )



                  if ( tmpFacCliL )->( dbSeek( cNumeroFactura ) )
                     while ( tmpFacCliL )->cSerie + str( ( tmpFacCliL )->nNumFac ) + ( tmpFacCliL )->cSufFac == cNumeroFactura .AND. !( tmpFacCliL )->( eof() )
                        dbPass( tmpFacCliL, dbfFacCliL, .T. )
                        ( tmpFacCliL )->( dbSkip() )
                     end
                  end

                  ::oSender:setText( "Añadidas lineas de facturas : " + cTextoFactura )

               else

                  ::oSender:SetText( "Factura fecha invalida : " + cTextoFactura )

               end

               ( tmpFacCliT )->( dbSkip() )

            end





            ::oSender:SetText( "Empezamos con los recibos" )

            while ( tmpFacCliP )->( !eof() )

               ::oSender:SetText( "Antes de validar el recibo" )

               if ::validateRecepcionRecibo( tmpFacCliP, dbfFacCliP )

                  ::oSender:SetText( "Valido el recibo" )

                  cNumeroRecibo    := ( tmpFacCliP )->cSerie + str( ( tmpFacCliP )->nNumFac ) + ( tmpFacCliP )->cSufFac + Str( ( tmpFacCliP )->nNumRec )
                  cTextoRecibo     := ( tmpFacCliP )->cSerie + "/" + AllTrim( str( ( tmpFacCliP )->nNumFac ) ) + "/" + AllTrim( ( tmpFacCliT )->cSufFac ) + "-" + AllTrim( str( ( tmpFacCliP )->nNumRec ) ) + "; " + Dtoc( ( tmpFacCliP )->dEntrada ) + "; " + AllTrim( ( tmpFacCliP )->cCodCli )

                  while ( dbfFacCliP )->( dbseek( cNumeroRecibo ) )
                     dbLockDelete( dbfFacCliP )
                  end

                  dbPass( tmpFacCliP, dbfFacCliP, .T. )

                  ::oSender:SetText( "Añadido recibo : " + cTextoRecibo )



                  if ( dbfFacCliP )->( dbseek( cNumeroRecibo ) )
                     chkLqdFacCli( nil, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv )
                  end

               end

               SysRefresh()

               ( tmpFacCliP )->( dbSkip() )

            end

            ( dbfFacCliT )->( dbCloseArea() )
            ( dbfFacCliL )->( dbCloseArea() )
            ( dbfFacCliP )->( dbCloseArea() )
            ( dbfCliente )->( dbCloseArea() )
            ( dbfIva )->( dbCloseArea() )
            ( dbfDiv )->( dbCloseArea() )

            ( tmpFacCliT )->( dbCloseArea() )
            ( tmpFacCliL )->( dbCloseArea() )
            ( tmpFacCliP )->( dbCloseArea() )

            ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

         else

            ::oSender:SetText( "Faltan ficheros" )

            if !file( cPatSnd() + "FacCliT.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "FacCliT.Dbf" )
            end

            if !file( cPatSnd() + "FacCliL.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "FacCliL.Dbf" )
            end

            if !file( cPatSnd() + "FacCliP.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "FacCliP.Dbf" )
            end

         end

      else

         ::oSender:SetText( "Error al descomprimir fichero " + cPatIn() + aFiles[ m, 1 ] )

      end

      RECOVER USING oError

         ( dbfFacCliT )->( dbCloseArea() )
         ( dbfFacCliL )->( dbCloseArea() )
         ( dbfFacCliP )->( dbCloseArea() )
         ( dbfIva )->( dbCloseArea() )
         ( dbfDiv )->( dbCloseArea() )

         ( tmpFacCliT )->( dbCloseArea() )
         ( tmpFacCliL )->( dbCloseArea() )
         ( tmpFacCliP )->( dbCloseArea() )
         ( dbfCliente )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next





   ::oSender:SetText( "Recibiendo anticipos de clientes" )

   aFiles            := Directory( cPatIn() + "AntCli*.*" )

   for m := 1 to len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )

      BEGIN SEQUENCE

         if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )





            if file( cPatSnd() + "AntCliT.DBF" )

               dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @tmpAntCliT ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
               if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "AntCliT.CDX" ) )

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               while ( tmpAntCliT )->( !eof() )





                  if !( dbfAntCliT )->( dbSeek( ( tmpAntCliT )->CSERANT + str( ( tmpAntCliT )->NNUMANT ) + ( tmpAntCliT )->CSUFANT ) )

                     dbPass( tmpAntCliT, dbfAntCliT, .T. )

                     if lClient .AND. dbLock( dbfAntCliT )
                        ( dbfAntCliT )->lSndDoc := .F.
                        ( dbfAntCliT )->( dbUnLock() )
                     end

                     ::oSender:SetText( "Añadido : " + ( tmpAntCliT )->cSerAnt + "/" + AllTrim( str( ( tmpAntCliT )->NNUMANT ) ) + "/" + AllTrim( ( tmpAntCliT )->CSUFANT ) + "; " + Dtoc( ( tmpAntCliT )->DFECANT ) + "; " + Alltrim( ( tmpAntCliT )->cCodCli ) + "; " + ( tmpAntCliT )->cNomCli )

                  else

                     if dbLock( dbfAntCliT )
                        ( dbfAntCliT )->lLiquidada := ( tmpAntCliT )->lLiquidada
                        ( dbfAntCliT )->dLiquidada := ( tmpAntCliT )->dLiquidada
                        ( dbfAntCliT )->cNumDoc    := ( tmpAntCliT )->cNumDoc
                        ( dbfAntCliT )->( dbUnLock() )
                     end

                     ::oSender:SetText( "Actualizado : " + ( tmpAntCliT )->cSerAnt + "/" + AllTrim( str( ( tmpAntCliT )->NNUMANT ) ) + "/" + AllTrim( ( tmpAntCliT )->CSUFANT ) + "; " + Dtoc( ( tmpAntCliT )->DFECANT ) + "; " + Alltrim( ( tmpAntCliT )->cCodCli ) + "; " + ( tmpAntCliT )->cNomCli )

                  end

                  SysRefresh()

                  ( tmpAntCliT )->( dbSkip() )

               end

               ( dbfAntCliT )->( dbCloseArea() )
               ( tmpAntCliT )->( dbCloseArea() )

               ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

            else

               ::oSender:SetText( "Falta " + cPatSnd() + "AntCliT.Dbf" )

            end

         else

            ::oSender:SetText( "Error al descomprimir fichero " + cPatIn() + aFiles[ m, 1 ] )

         end

      RECOVER USING oError

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next

Return Self



static FUNCTION TFacturasClientesSenderReciver_ReciveFrq( ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   local n
   local aExt

   if ::oSender:lServer
      aExt  := aRetDlgEmp()
   else
      aExt  := { "All" }
   end





   ::oSender:setPathComunication( cRutConFrq() )

   ::oSender:SetText( "Recibiendo facturas y anticipos de clientes" )

   for n := 1 to len( aExt )
      ::oSender:GetFile( "FacCli*." + aExt[ n ], cPatInFrq() )
      ::oSender:GetFile( "AntCli*." + aExt[ n ], cPatInFrq() )
   next

   ::oSender:SetText( "Facturas y anticipos de clientes recibidos" )

Return Self



static FUNCTION TFacturasClientesSenderReciver_ProcessFrq( ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   local m

   local dbfFacCliT
   local dbfFacCliL
   local dbfFacCliP
   local dbfAntCliT

   local tmpFacCliT
   local tmpFacCliL
   local tmpFacCliP
   local tmpAntCliT

   local dbfCliente
   local dbfProvee

   local oBlock
   local oError

   local cSerie
   local nNumero
   local cSufijo

   local aFiles      := Directory( cPatInFrq() + "FacCli*.*" )

   if len( aFiles ) == 0
      Return .F.
   end

   if empty( uFieldempresa( "cCodCliFrq" ) )
      ::oSender:SetText( "Debe cumplimentar el código de cliente en la configuración de la empresa." )
      Return .F.
   end

   if empty( uFieldempresa( "cCodPrvFrq" ) )
      ::oSender:SetText( "Debe cumplimentar el código de proveedor en la configuración de la empresa." )
      Return .F.
   end

   for m := 1 to len( aFiles )



      if ::oSender:lUnZipData( cPatInFrq() + aFiles[ m, 1 ] )



         if file( cPatSnd() + "FacCliT.Dbf" ) .AND. file( cPatSnd() + "FacCliL.Dbf" ) .AND. file( cPatSnd() + "FacCliP.Dbf" )

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliT.Dbf" ), ( cCheckArea( "FacCliT", @tmpFacCliT ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliT.Cdx" ) )

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliL.Dbf" ), ( cCheckArea( "FacCliL", @tmpFacCliL ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliL.Cdx" ) )

            dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "FacCliP.Dbf" ), ( cCheckArea( "FacCliP", @tmpFacCliP ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
            if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "FacCliP.Cdx" ) )

            while ( tmpFacCliT )->( !eof() )

               AppendFacturaProveedores()

               if rtrim( ( tmpFacCliT )->cCodCli ) == rtrim( uFieldempresa( "cCodCliFrq" ) )

                  ::oSender:SetText( "Procesando factura : " + ( tmpFacCliL )->cSerie + "/" + AllTrim( str( ( tmpFacCliL )->nNumFac ) ) + "/" +  AllTrim( ( tmpFacCliL )->cSufFac ) + "; " + Dtoc( ( tmpFacCliT )->dFecFac ) + "; " + AllTrim( ( tmpFacCliT )->cCodCli ) + "; " + ( tmpFacCliT )->cNomCli )

               else

                  ::oSender:SetText( "Desestimada factura : " + ( tmpFacCliL )->cSerie + "/" + AllTrim( str( ( tmpFacCliL )->nNumFac ) ) + "/" +  AllTrim( ( tmpFacCliL )->cSufFac ) + "; " + Dtoc( ( tmpFacCliT )->dFecFac ) + "; " + AllTrim( ( tmpFacCliT )->cCodCli ) + "; " + ( tmpFacCliT )->cNomCli )

               end

               ( tmpFacCliT )->( dbSkip() )

            end

            ( dbfFacCliT )->( dbCloseArea() )
            ( dbfFacCliL )->( dbCloseArea() )
            ( dbfFacCliP )->( dbCloseArea() )

         else

            ::oSender:SetText( "Faltan ficheros" )

            if !file( cPatSnd() + "FacCliT.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "FacCliT.Dbf" )
            end

            if !file( cPatSnd() + "FacCliL.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "FacCliL.Dbf" )
            end

            if !file( cPatSnd() + "FacCliP.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "FacCliP.Dbf" )
            end

         end

      end

   next

Return Self



static FUNCTION TFacturasClientesSenderReciver_validateRecepcion( tmpFacCliT, dbfFacCliT ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   ::cErrorRecepcion       := "Pocesando factura de cliente número " + ( dbfFacCliT )->cSerie + "/" + alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + "/" + alltrim( ( dbfFacCliT )->cSufFac ) + " "

   if !( lValidaOperacion( ( tmpFacCliT )->dFecFac, .F. ) )

      ::cErrorRecepcion    += "la fecha " + dtoc( ( tmpFacCliT )->dFecFac ) + " no es valida en esta empresa"

      ::oSender:SetText( ::cErrorRecepcion )

      RETURN .F.

   end




















        if !( ( dbfFacCliT )->( dbSeek( ( tmpFacCliT )->cSerie + Str( ( tmpFacCliT )->nNumFac ) + ( tmpFacCliT )->cSufFac ) ) )
              Return .T.
           end

           if dtos( ( dbfFacCliT )->dFecCre ) + ( dbfFacCliT )->cTimCre >= dtos( ( tmpFacCliT )->dFecCre ) + ( tmpFacCliT )->cTimCre

              ::cErrorRecepcion    += "la fecha en la empresa " + dtoc( ( dbfFacCliT )->dFecCre ) + " " + ( dbfFacCliT )->cTimCre + " es más reciente que la recepción " + dtoc( ( tmpFacCliT )->dFecCre ) + " " + ( tmpFacCliT )->cTimCre

              ::oSender:SetText( ::cErrorRecepcion )

              RETURN .F.

           end



   ::oSender:SetText( ::cErrorRecepcion )

RETURN ( .T. )



static FUNCTION TFacturasClientesSenderReciver_validateRecepcionRecibo( tmpFacCliP, dbfFacCliP ) ; local Self AS CLASS TFacturasClientesSenderReciver := QSelf() AS CLASS TFacturasClientesSenderReciver

   ::cErrorRecepcion       := "Pocesando recibo de cliente número " + ( dbfFacCliP )->cSerie + "/" + alltrim( Str( ( dbfFacCliP )->nNumFac ) ) + "/" + alltrim( ( dbfFacCliP )->cSufFac ) + alltrim( Str( ( dbfFacCliP )->nNumRec ) ) + " "

   if !( lValidaOperacion( ( tmpFacCliP )->dPreCob, .F. ) )

      ::cErrorRecepcion    += "la fecha " + dtoc( ( tmpFacCliP )->dPreCob ) + " no es valida en esta empresa"

      ::oSender:SetText( ::cErrorRecepcion )

      Return .F.

   end

   if !( ( dbfFacCliP )->( dbSeek( ( tmpFacCliP )->cSerie + Str( ( tmpFacCliP )->nNumFac ) + ( tmpFacCliP )->cSufFac + Str( ( tmpFacCliP )->nNumRec ) ) ) )

      ::oSender:SetText( ::cErrorRecepcion )

      Return .T.

   end

   if dtos( ( dbfFacCliP )->dFecCre ) + ( dbfFacCliP )->cHorCre >= dtos( ( tmpFacCliP )->dFecCre ) + ( tmpFacCliP )->cHorCre

      ::cErrorRecepcion    += "la fecha en la empresa " + dtoc( ( dbfFacCliP )->dFecCre ) + " " + ( dbfFacCliP )->cHorCre + " es más reciente que la recepción " + dtoc( ( tmpFacCliP )->dFecCre ) + " " + ( tmpFacCliP )->cHorCre

      ::oSender:SetText( ::cErrorRecepcion )

      Return .F.

   end

   ::oSender:SetText( ::cErrorRecepcion )

Return ( .T. )



FUNCTION EdmFacCli( cCodRut, cPathTo, oStru, aSucces )

RETURN ( aSucces )



Static Function lComprobacionesFactCli( aGet, aTmp )

   local lReturn  := .T.

   if !lValidaOperacion( aTmp[ 6 ] )
      lReturn     := .F.
   end

   if !lValidaSerie( aTmp[ 1 ] )
      Return .F.
   end

   if lClienteBloqueado( aGet )
      lReturn     := .F.
   end

   if lNombreVacio( aGet, aTmp[ 10 ] )
      lReturn     := .F.
   end

   if lAlmacenVacio( aGet, aTmp[ 8 ] )
      lReturn     := .F.
   end

   if lFormaPagoVacia( aGet, aTmp[ 34 ] )
      lReturn     := .F.
   end

   if lDivisaVacia( aGet, aTmp[ 63 ] )
      lReturn     := .F.
   end

   if lLineasVacias()
      lReturn     := .F.
   end

Return ( lReturn )



Static Function lClienteBloqueado( aGet, cCliente )

   if empty( cCliente ) .AND. !empty( aGet[ 7 ] )
      cCliente    := aGet[ 7 ]:varGet()
   end

   if ( D():Clientes( nView ) )->( dbSeek( cCliente ) )

      if !( isAviableClient( nView ) )

         if !empty( aGet[ 7 ] )
            aGet[ 7 ]:SetFocus()
         end

         Return .T.

      end

   end

Return ( .F. )



Static Function lNombreVacio( aGet, cNomCli )

   local lReturn  := .F.

   if empty( cNomCli )

      if ( "TABLET" $ appParamsMain() )
         apoloMsgStop( "Nombre de cliente no puede estar vacío.")
      else
         msgStop( "Nombre de cliente no puede estar vacío." )
      end

      if !empty( aGet[ 10 ] )
         aGet[ 10 ]:SetFocus()
      end

      lReturn := .T.

   end

Return ( lReturn )



Static Function lAlmacenVacio( aGet, cCodAlm )

   local lReturn  := .F.

   if empty( cCodAlm )

      if ( "TABLET" $ appParamsMain() )
         apoloMsgStop( "Almacén no puede estar vacío.")
      else
         msgStop( "Almacén no puede estar vacío." )
      end

      if !empty( aGet[ 8 ] )
         aGet[ 8 ]:SetFocus()
      end

      lReturn := .T.

   end

Return ( lReturn )



Static Function lFormaPagoVacia( aGet, cCodPago )

   local lReturn  := .F.

   if empty( cCodPago )

      if ( "TABLET" $ appParamsMain() )
         apoloMsgStop( "Forma de pago no puede estar vacía.")
      else
         msgStop( "Forma de pago no puede estar vacía." )
      end

      if !empty( aGet[ 34 ] )
         aGet[ 34 ]:SetFocus()
      end

      lReturn := .T.

   end

Return ( lReturn )



Static Function lDivisaVacia( aGet, cCodDiv )

   local lReturn  := .F.

   if empty( cCodDiv )

      if ( "TABLET" $ appParamsMain() )
         apoloMsgStop( "No puede almacenar documento sin Código de divisa.")
      else
         msgStop( "No puede almacenar documento sin Código de divisa." )
      end

      if !empty( aGet[ 63 ] )
         aGet[ 63 ]:SetFocus()
      end

      lReturn := .T.

   end

Return ( lReturn )



Static Function lLineasVacias()

   local lReturn  := .F.

   if ( dbfTmpLin )->( eof() )

      if ( "TABLET" $ appParamsMain() )
         apoloMsgStop( "No puede almacenar un documento sin lineas.")
      else
         msgStop( "No puede almacenar un documento sin lineas." )
      end

      lReturn     := .T.

   end

return ( lReturn )



Static Function lCambioSerie( aTmp )

   if cSerieAnterior <> aTmp[ 1 ]
      Return .T.
   end

return .F.



Static Function GuardaContadorAnterior( nNumFac, cSufFac )

   if uFieldEmpresa( "LRECNUMFAC" )
      nPutDoc( cSerieAnterior, nNumFac, cSufFac, D():FacturasClientes( nView ), "nFacCli", , D():Contadores( nView ) )
   end

Return .T.



Static Function RollBackFacCli( cNumeroDocumento )

   local nOrd





   while ( D():FacturasClientesLineas( nView ) )->( dbSeek( cNumeroDocumento ) ) .AND. !( D():FacturasClientesLineas( nView ) )->( eof() )

      TComercio:appendProductsToUpadateStocks( ( D():FacturasClientesLineas( nView ) )->cRef, nView )

      if dbLock( D():FacturasClientesLineas( nView ) )
         ( D():FacturasClientesLineas( nView ) )->( dbDelete() )
         ( D():FacturasClientesLineas( nView ) )->( dbUnLock() )
      end

      SysRefresh()

   end





   while ( ( dbfFacCliI )->( dbSeek( cNumeroDocumento ) ) .AND. !( dbfFacCliI )->( eof() ) )
      if dbLock( dbfFacCliI )
         ( dbfFacCliI )->( dbDelete() )
         ( dbfFacCliI )->( dbUnLock() )
      end
      SysRefresh()
   end





   while ( ( dbfFacCliD )->( dbSeek( cNumeroDocumento ) ) .AND. !( dbfFacCliD )->( eof() ) )
      if dbLock( dbfFacCliD )
         ( dbfFacCliD )->( dbDelete() )
         ( dbfFacCliD )->( dbUnLock() )
      end
      SysRefresh()
   end





   while ( ( D():FacturasClientesCobros( nView ) )->( dbSeek( cNumeroDocumento ) ) .AND. !( D():FacturasClientesCobros( nView ) )->( eof() ) )
      if dbLock( D():FacturasClientesCobros( nView ) )
         ( D():FacturasClientesCobros( nView ) )->( dbDelete() )
         ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
      end
      SysRefresh()
   end





   while ( ( dbfFacCliS )->( dbSeek( cNumeroDocumento ) ) .AND. !( dbfFacCliS )->( eof() ) )
      if dbLock( dbfFacCliS )
         ( dbfFacCliS )->( dbDelete() )
         ( dbfFacCliS )->( dbUnLock() )
      end
      SysRefresh()
   end





   while D():gotoIdFacturasClientesEntidades( cNumeroDocumento, nView ) .AND. !D():eofFacturasClientesEntidades( nView )
      D():deleteFacturasClientesEntidades( nView )
      SysRefresh()
   end





      while ( D():FacturasClientesSituaciones( nView ) )->( dbSeek( cNumeroDocumento ) )
       if dbLock( D():FacturasClientesSituaciones( nView ) )
          ( D():FacturasClientesSituaciones( nView ) )->( dbDelete() )
          ( D():FacturasClientesSituaciones( nView ) )->( dbUnLock() )
       end
   end

Return .T.



Static Function GuardaTemporalesFacCli( cSerFac, nNumFac, cSufFac, dFecFac, tFecFac, cCodCli, aTmp, cUuid )

   ( dbfTmpLin )->( dbGoTop() )
   while ( dbfTmpLin )->( !eof() )

      ( dbfTmpLin )->nRegIva     := aTmp[ 68 ]

      if !( ( dbfTmpLin )->nUniCaja == 0 .AND. ( dbfTmpLin )->lFromAtp )

         ( dbfTmpLin )->cCodCli     := cCodCli

         if empty( ( dbfTmpLin )->dFecFac )
            ( dbfTmpLin )->dFecFac  := dFecFac
         end

         if empty( (dbfTmpLin)->tFecFac )
            ( dbfTmpLin )->tFecFac  := tFecFac
         end

         TComercio:appendProductsToUpadateStocks( ( dbfTmpLin )->cRef, nView )





         oLinDetCamposExtra:saveExtraField( cSerFac + Str( nNumFac ) + cSufFac + Str( ( dbfTmpLin )->nNumLin ) + Str( ( dbfTmpLin )->nNumKit ), ( dbfTmpLin )->( OrdKeyNo() ) )

         if !( dbfTmpLin )->lKitChl








             AtipicasModel():SaveUltimoPrecioVenta( {     "cCodCli" => cCodCli ,    "cCodArt" => ( dbfTmpLin )->cRef ,    "cCodPr1" => ( dbfTmpLin )->cCodPr1 ,    "cCodPr2" => ( dbfTmpLin )->cCodPr2 ,    "cValPr1" => ( dbfTmpLin )->cValPr1 ,    "cValPr2" => ( dbfTmpLin )->cValPr2 ,    "nPrcArt" => ( dbfTmpLin )->nPreUnit,    "nTarifa" => aTmp[ 19 ] } )
         end

         ( dbfTmpLin )->ParUuid  := cUuid

         dbPass( dbfTmpLin, D():FacturasClientesLineas( nView ), .T., cSerFac, nNumFac, cSufFac )

      end

      ( dbfTmpLin )->( dbSkip() )

      SysRefresh()

   end





   ( dbfTmpInc )->( dbGoTop() )
   while ( dbfTmpInc )->( !eof() )
      ( dbfTmpInc )->ParUuid  := cUuid
      dbPass( dbfTmpInc, dbfFacCliI, .T., cSerFac, nNumFac, cSufFac )
      ( dbfTmpInc )->( dbSkip() )
      SysRefresh()
   end





   ( dbfTmpDoc )->( dbGoTop() )
   while ( dbfTmpDoc )->( !eof() )
         ( dbfTmpDoc )->ParUuid  := cUuid
      dbPass( dbfTmpDoc, dbfFacCliD, .T., cSerFac, nNumFac, cSufFac )
      ( dbfTmpDoc )->( dbSkip() )
      SysRefresh()
   end





   ( dbfTmpSer )->( dbGoTop() )
   while ( dbfTmpSer )->( !eof() )
      ( dbfTmpSer )->ParUuid  := cUuid
      dbPass( dbfTmpSer, dbfFacCliS, .T., cSerFac, nNumFac, cSufFac, dFecFac )
      ( dbfTmpSer )->( dbSkip() )
      SysRefresh()
   end





   ( dbfTmpEntidades )->( dbGoTop() )
   while ( dbfTmpEntidades )->( !eof() )
      ( dbfTmpEntidades )->ParUuid  := cUuid
      dbPass( dbfTmpEntidades, D():FacturasClientesEntidades( nView ), .T., cSerFac, nNumFac, cSufFac )
      ( dbfTmpEntidades )->( dbSkip() )
      SysRefresh()
   end





    ( dbfTmpEst )->( DbGoTop() )
      while ( dbfTmpEst )->( !eof() )
         ( dbfTmpEst )->ParUuid  := cUuid
         dbPass( dbfTmpEst, D():FacturasClientesSituaciones( nView ), .T., cSerFac, nNumFac, cSufFac )
         ( dbfTmpEst )->( dbSkip() )
      end





   ( dbfTmpPgo )->( dbGoTop() )

   while ( dbfTmpPgo )->( !eof() )

      if ( dbfTmpPgo )-> cCodCli <> aTmp[ 7 ]
         ( dbfTmpPgo )-> cCodCli := aTmp[ 7 ]
      end

      if ( dbfTmpPgo )-> cNomCli <> aTmp[ 10 ]
         ( dbfTmpPgo )-> cNomCli := aTmp[ 10 ]
      end

      ( dbfTmpPgo )->ParUuid  := cUuid

      ( dbfTmpPgo )->( dbSkip() )

      SysRefresh()

   end





   EscribeTemporalPagos( cSerFac, nNumFac, cSufFac, aTmp )

Return .T.



Static Function EscribeTemporalPagos( cSerFac, nNumFac, cSufFac,aTmp )

   if !( "TABLET" $ appParamsMain() )

      ( dbfTmpPgo )->( dbGoTop() )
      while ( dbfTmpPgo )->( !eof() )

         if !empty( aTmp[ 130 ] )
         ( dbfTmpPgo )->cCtrCoste := aTmp[ 130 ]
         endif

         dbPass( dbfTmpPgo, D():FacturasClientesCobros( nView ), .T., cSerFac, nNumFac, cSufFac )
         ( dbfTmpPgo )->( dbSkip() )
         SysRefresh()
      end

   end

Return .T.



Function cFormatoFacturasClientes( cSerie )

   local cFormato

   If( cSerie == nil, cSerie := ( D():FacturasClientes( nView ) )->cSerie, ) ;

   cFormato                := cFormatoDocumento( cSerie, "nFacCli", D():Contadores( nView ) )

   if empty( cFormato )
      cFormato             := cFirstDoc( "FC", D():Documentos( nView ) )
   end

Return ( cFormato )



Static Function cFormatoPresupuestosClientes( cSerie )

   local cFormato

   If( cSerie == nil, cSerie := ( D():PresupuestosClientes( nView ) )->cSerPre, ) ;

   cFormato          := cFormatoDocumento( cSerie, "nPreCli", D():Contadores( nView ) )

   if empty( cFormato )
      cFormato       := cFirstDoc( "RC", D():Documentos( nView ) )
   end

Return ( cFormato )



Function DesignLabelFacturaClientes( oFr, cDoc )

   local oLabel
   local lOpenFiles  := empty( nView )

   if lOpenFiles .AND. !Openfiles()
      Return .F.
   endif

   oLabel            := TLabelGeneratorFacturasClientes():New( nView )



   oLabel:createTempLabelReport()
   oLabel:loadTempLabelReport()
   oLabel:dataLabel( oFr )



   if !empty( ( cDoc )->mReport )
      oFr:LoadFromBlob( ( cDoc )->( Select() ), "mReport")
   else
      oFr:AddPage(         "MainPage" )
      oFr:AddBand(         "MasterData",  "MainPage",       6 )
      oFr:SetProperty(     "MasterData",  "Top",            200 )
      oFr:SetProperty(     "MasterData",  "Height",         100 )
      oFr:SetObjProperty(  "MasterData",  "DataSet",        "Lineas de facturas" )
   end

   oFr:DesignReport()
   oFr:DestroyFr()

   oLabel:DestroyTempReport()
   oLabel:End()

   if lOpenFiles
      closeFiles()
   end

Return .T.



Static Function lChangeRegIva( aTmp )

   lImpuestos     := ( aTmp[ 68 ] <= 1 )

   if !empty( oImpuestos )
      oImpuestos:Refresh()
   end

return ( .T. )



Function SetOrderFacturaClienteLineas( cOrder )

   if empty( cOrder )
      Return .F.
   end

   D():getStatusFacturasClientes( nView )

   ( D():FacturasClientesLineas( nView ) )->( OrdSetFocus( cOrder ) )

Return ( .T. )



Function RollBackOrderFacturaClienteLineas()

   D():setStatusFacturasClientes( nView )

Return ( .T. )



Function nombrePrimeraPropiedadFacturasClientesLineas()

Return ( nombrePropiedad( ( D():FacturasClientesLineas( nView ) )->cCodPr1, ( D():FacturasClientesLineas( nView ) )->cValPr1, nView ) )



Function nombreSegundaPropiedadFacturasClientesLineas()

Return ( nombrePropiedad( ( D():FacturasClientesLineas( nView ) )->cCodPr2, ( D():FacturasClientesLineas( nView ) )->cValPr2, nView ) )



Function EnvaseArticuloFacturasClientesLineas( cCodCli, cCodArt )

   local nRec     := ( D():Atipicas( nView ) )->( Recno() )
   local nOrdAnt  := ( D():Atipicas( nView ) )->( OrdSetFocus( "cCliArt" ) )
   local cCodEnv  := ""

   if ( D():Atipicas( nView ) )->( dbSeek( Padr( cCodCli, 12 ) + Padr( cCodArt, 18 ) + Space( 80 ) ) ) .AND. !Empty( ( D():Atipicas( nView ) )->cCodEnv )
      cCodEnv  := ( D():Atipicas( nView ) )->cCodEnv
   else
      cCodEnv  := RetFld( Padr( cCodArt, 18 ), D():Articulos( nView ), "cCodFra", "Codigo" )
   end

   ( D():Atipicas( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():Atipicas( nView ) )->( dbGoTo( nRec ) )

Return ( cCodEnv )



Static Function importarArticulosScaner()

   local memoArticulos

   memoArticulos  := dialogArticulosScaner()

   if memoArticulos <> nil
      msgstop( memoArticulos, "procesar")
   end

Return nil



static Function menuEdtDet( oCodArt, oDlg, lOferta, nIdLin )

   If( lOferta == nil, lOferta := .F., ) ;

   oDetMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )


      MenuAddItem( "&1. Rotor  ",, .F.,,,, "Rotor16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra", .F.,, {|oMenuItem|( oLinDetCamposExtra:Play( nIdLin ) )},, "GC_FORM_PLUS2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&2. Modificar artículo", "Modificar la ficha del artículo", .F.,, {|oMenuItem|( EdtArticulo( oCodArt:VarGet() ) )},, "gc_object_cube_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&3. Informe de artículo", "Abrir el informe del artículo", .F.,, {|oMenuItem|( if( RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() ), msgStop( "No tiene permiso para ver los precios de costo" ), InfArticulo( oCodArt:VarGet() ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&4. Informe de stock", "Abrir el informe del stock", .F.,, {|oMenuItem|( InfStock( oCodArt:VarGet() ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oDetMenu )

Return ( oDetMenu )



Static Function ChangeBultos( oCol, uNewValue, nKey )

   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      if dbLock( D():FacturasClientes( nView ) )
         ( D():FacturasClientes( nView ) )->nBultos    := uNewValue
         ( D():FacturasClientes( nView ) )
      end

   end

Return .T.



FUNCTION hStockBufferFacCli( aTmp )

   local hBuffer := {=>}

   do case
          case hb_isArray( aTmp )

             hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
             hset( hBuffer, "codigo_almacen_entrada", "" )
             hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
             hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
             hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
             hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
             hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
             hset( hBuffer, "lote", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "clote" ) ) ] ) )
             hset( hBuffer, "bultos_articulo", aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nBultos" ) ) ] )
             hset( hBuffer, "cajas_articulo", aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "nCanEnt" ) ) ] )
             hset( hBuffer, "unidades_articulo", nTotNFacCli( aTmp ) )
             hset( hBuffer, "fecha", aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "dFecFac" ) ) ] )
             hset( hBuffer, "hora", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "tFecFac" ) ) ] ) )

          case hb_isChar( aTmp )

             hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
             hset( hBuffer, "codigo_almacen_entrada", "" )
             hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmLin ) )
             hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
             hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
             hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
             hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
             hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )
             hset( hBuffer, "bultos_articulo", ( aTmp )->nBultos )
             hset( hBuffer, "cajas_articulo", ( aTmp )->nCanEnt )
             hset( hBuffer, "unidades_articulo", nTotNFacCli( aTmp ) )
             hset( hBuffer, "fecha", ( aTmp )->dFecFac )
             hset( hBuffer, "hora", AllTrim( ( aTmp )->tFecFac ) )

        case hb_isObject( aTmp )

            if aTmp:ClassName == "DICTIONARYDOCUMENTLINE"

                hset( hBuffer, "codigo_articulo", AllTrim( aTmp:getValue( "Articulo" ) ) )
                 hset( hBuffer, "codigo_almacen_entrada", "" )
                 hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp:getValue( "Almacen" ) ) )
                 hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp:getValue( "CodigoPropiedad1" ) ) )
                 hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp:getValue( "ValorPropiedad1" ) ) )
                 hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp:getValue( "CodigoPropiedad2" ) ) )
                 hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp:getValue( "ValorPropiedad2" ) ) )
                 hset( hBuffer, "lote", AllTrim( aTmp:getValue( "Lote" ) ) )
                 hset( hBuffer, "bultos_articulo", aTmp:getValue( "Bultos" ) )
                 hset( hBuffer, "cajas_articulo", aTmp:getValue( "Cajas" ) )
                 hset( hBuffer, "unidades_articulo", NotBulto( aTmp:getValue( "Bultos" ) ) * NotCaja( aTmp:getValue( "Cajas" ) ) * aTmp:getValue( "Unidades" ) )
                 hset( hBuffer, "fecha", aTmp:getValue( "Fecha" ) )
                 hset( hBuffer, "hora", AllTrim( aTmp:getValue( "Hora" ) ) )

            end

   end

RETURN ( hBuffer )



FUNCTION hStockBufferFacCliEntregado( aTmp )

   local hBuffer := {=>}

   do case
      case hb_isArray( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
         hset( hBuffer, "lote", AllTrim( aTmp[ ( D():FacturasClientesLineas( nView ) )->( fieldpos( "clote" ) ) ] ) )
         hset( hBuffer, "pendiente_entregar", nTotNFacCli( aTmp ) )

      case hb_isChar( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmLin ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
         hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )
         hset( hBuffer, "pendiente_entregar", nTotNFacCli( aTmp ) )

   end

RETURN ( hBuffer )



Static Function LoadTrans( aTmp, oGetCod, oGetKgs, oSayTrn )

   local uValor   := oGetCod:VarGet()

   if empty( uValor )

      oSayTrn:cText( "" )
      oGetKgs:cText( 0 )

   else

      if oTrans:oDbf:SeekInOrd( uValor, "cCodTrn" )
         oGetCod:cText( uValor )
         oSayTrn:cText( oTrans:oDbf:cNomTrn )
         oGetKgs:cText( oTrans:oDbf:nKgsTrn )
      else
         msgStop( "Código de transportista no encontrado." )
         Return .F.
      end

   end

   RecalculaTotal( aTmp )

Return .T.



Function nSaldoAnterior4( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():FacturasClientes( nView ) )->cSerie + Str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, ) ;

Return oStock:nSaldoAnterior( Padr( "4", 18 ), cNumDoc )



Function nSaldoAnterior8( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():FacturasClientes( nView ) )->cSerie + Str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, ) ;

Return oStock:nSaldoAnterior( Padr( "8", 18 ), cNumDoc )



Function nSaldoAnterior16( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():FacturasClientes( nView ) )->cSerie + Str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, ) ;

Return oStock:nSaldoAnterior( Padr( "16", 18 ), cNumDoc )



Function nSaldoDocumento4( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():FacturasClientes( nView ) )->cSerie + Str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, ) ;

Return oStock:nSaldoDocumento( Padr("4", 18 ), cNumDoc)



Function nSaldoDocumento8( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():FacturasClientes( nView ) )->cSerie + Str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, ) ;

Return oStock:nSaldoDocumento( Padr("8", 18 ), cNumDoc)



Function nSaldoDocumento16( cNumDoc )

   If( cNumDoc == nil, cNumDoc := ( D():FacturasClientes( nView ) )->cSerie + Str( ( D():FacturasClientes( nView ) )->nNumFac ) + ( D():FacturasClientes( nView ) )->cSufFac, ) ;

Return oStock:nSaldoDocumento( Padr("16", 18 ), cNumDoc)



Function nTotalSaldo4( cCodCli, dFecFac )

   If( cCodCli == nil, cCodCli := ( D():FacturasClientes( nView ) )->cCodCli, ) ;
   If( dFecFac == nil, dFecFac := ( D():FacturasClientes( nView ) )->dFecFac, ) ;

Return oStock:nTotalSaldo( Padr("4", 18 ), cCodCli, dFecFac)



Function nTotalSaldo8( cCodCli, dFecFac )

   If( cCodCli == nil, cCodCli := ( D():FacturasClientes( nView ) )->cCodCli, ) ;
   If( dFecFac == nil, dFecFac := ( D():FacturasClientes( nView ) )->dFecFac, ) ;

Return oStock:nTotalSaldo( Padr("8", 18 ), cCodCli, dFecFac)



Function nTotalSaldo16( cCodCli, dFecFac )

   If( cCodCli == nil, cCodCli := ( D():FacturasClientes( nView ) )->cCodCli, ) ;
   If( dFecFac == nil, dFecFac := ( D():FacturasClientes( nView ) )->dFecFac, ) ;

Return oStock:nTotalSaldo( Padr("16", 18 ), cCodCli, dFecFac)



Function CreateFacCliQrCode()

    local cText := ( D():FacturasClientes( nView ) )->cSerie + AllTrim( Str( ( D():FacturasClientes( nView ) )->nNumFac ) )

    cText         := "Número: " + ( D():FacturasClientes( nView ) )->cSerie + AllTrim( Str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + Chr(13)+Chr(10)
    cText         += "Fecha: " + dToc( ( D():FacturasClientes( nView ) )->dFecFac ) + Chr(13)+Chr(10)
    cText         += "Cliente: " + AllTrim( ( D():FacturasClientes( nView ) )->cCodCli ) + " - " + AllTrim( ( D():FacturasClientes( nView ) )->cNomCli ) + Chr(13)+Chr(10)
    cText         += "Neto: " + Trans( ( D():FacturasClientes( nView ) )->nTotNet, cPorDiv ) + Chr(13)+Chr(10)
    cText         += "IVA: " + Trans( ( D():FacturasClientes( nView ) )->nTotIva, cPorDiv ) + Chr(13)+Chr(10)
    cText         += "Total: " + Trans( ( D():FacturasClientes( nView ) )->nTotFac, cPorDiv ) + Chr(13)+Chr(10)


    CreateQrCode( cText, ( D():FacturasClientes( nView ) )->cSerie + AllTrim( Str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + ( D():FacturasClientes( nView ) )->cSufFac )

Return .T.



Function cNameFacCliQrCode()

Return ( FullQrDir() + ( D():FacturasClientes( nView ) )->cSerie + AllTrim( Str( ( D():FacturasClientes( nView ) )->nNumFac ) ) + ( D():FacturasClientes( nView ) )->cSufFac + ".bmp" )



Static Function PublicarFactura()

    local nNumFac

    if !( D():FacturasClientes( nView ) )->lValida




        if dbLock( D():FacturasClientes( nView ) )
            ( D():FacturasClientes( nView ) )->lValida := .T.
            ( D():FacturasClientes( nView ) )->( dbUnLock() )
        end

    end

Return ( .T. )








_HB_CLASS nTotalDocumento ; function nTotalDocumento ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "nTotalDocumento", iif( .F., { }, { @HBObject() } ), @nTotalDocumento() ) ) ;

    _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )
    _HB_MEMBER { aArrayImpuesto } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aArrayImpuesto"}, .F. )

       _HB_MEMBER new( nView); oClass:AddMethod( "new", @nTotalDocumento_new(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER setArrayImpuesto(); oClass:AddMethod( "setArrayImpuesto", @nTotalDocumento_setArrayImpuesto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER getArrayImpuesto(); oClass:AddInline( "getArrayImpuesto", {|Self | ( ( Self ) ), ( ::aArrayImpuesto ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER setImportesImpuesto(); oClass:AddMethod( "setImportesImpuesto", @nTotalDocumento_setImportesImpuesto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER setGastos( nIvaMan, nBaseGasto, nIvaGasto); oClass:AddMethod( "setGastos", @nTotalDocumento_setGastos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER setDescuentoEspecial(); oClass:AddMethod( "setDescuentoEspecial", @nTotalDocumento_setDescuentoEspecial(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER setDescuentoProntoPago(); oClass:AddMethod( "setDescuentoProntoPago", @nTotalDocumento_setDescuentoProntoPago(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER setDescuentoUno(); oClass:AddMethod( "setDescuentoUno", @nTotalDocumento_setDescuentoUno(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER setDescuentoDos(); oClass:AddMethod( "setDescuentoDos", @nTotalDocumento_setDescuentoDos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER getTotalBruto(); oClass:AddMethod( "getTotalBruto", @nTotalDocumento_getTotalBruto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER getTotalNeto(); oClass:AddMethod( "getTotalNeto", @nTotalDocumento_getTotalNeto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER getTotalIva(); oClass:AddMethod( "getTotalIva", @nTotalDocumento_getTotalIva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER getTotalRE(); oClass:AddMethod( "getTotalRE", @nTotalDocumento_getTotalRE(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER getTotalIvmh(); oClass:AddMethod( "getTotalIvmh", @nTotalDocumento_getTotalIvmh(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER getTotalTrn(); oClass:AddMethod( "getTotalTrn", @nTotalDocumento_getTotalTrn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER getTotalPntVer(); oClass:AddMethod( "getTotalPntVer", @nTotalDocumento_getTotalPntVer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS nTotalDocumento ;



static FUNCTION nTotalDocumento_new( nView ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    ::nView             := nView

    ::aArrayImpuesto     := {}

Return ( self )



static FUNCTION nTotalDocumento_setArrayImpuesto( nPctIva, lRecargo, nPctReq, nBruto, nIvm, nTrn, nPntVer ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local hLine         := {=>}
    local nPos             := 0

    nPos := aScan( ::aArrayImpuesto, { |h| hGet( h, "porcentajeiva" ) == nPctIva } )

    if len( ::aArrayImpuesto ) == 0 .OR. nPos == 0










        hLine     :=     {     "porcentajeiva" => nPctIva,    "logrecargo"    => lRecargo,    "porcentajere"    => nPctReq,    "bruto"            => nBruto,    "neto"            => nBruto + nPntVer,    "impiva"        => 0,    "impre"            => 0,    "nivmh"            => nIvm,    "ntransporte"    => nTrn,    "npntver"        => nPntVer }

        aAdd( ::aArrayImpuesto, hLine )

    else

        hSet( ::aArrayImpuesto[nPos], "bruto", ( hGet( ::aArrayImpuesto[nPos], "bruto" ) + nBruto ) )
        hSet( ::aArrayImpuesto[nPos], "neto", ( hGet( ::aArrayImpuesto[nPos], "neto" ) + nBruto + nPntVer ) )
        hSet( ::aArrayImpuesto[nPos], "nivmh", ( hGet( ::aArrayImpuesto[nPos], "nivmh" ) + nIvm ) )
        hSet( ::aArrayImpuesto[nPos], "ntransporte", ( hGet( ::aArrayImpuesto[nPos], "ntransporte" ) + nTrn ) )
        hSet( ::aArrayImpuesto[nPos], "npntver", ( hGet( ::aArrayImpuesto[nPos], "npntver" ) + nPntVer ) )

    end

Return ( self )



static FUNCTION nTotalDocumento_setImportesImpuesto( lIvaInc, nRegIva, nRouDiv ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local hTipoIva
    local nTotalBase

    for each hTipoIva in ::aArrayImpuesto

        if lIvaInc

              if hGet( hTipoIva, "logrecargo" )

                if hGet( hTipoIva, "porcentajeiva" ) <> 0

                      hSet( hTipoIva, "neto", hGet( hTipoIva, "neto" ) - ( hGet( hTipoIva, "neto" ) / ( Div( 100, hGet( hTipoIva, "porcentajeiva" ) + hGet( hTipoIva, "porcentajere" ) ) + 1 ) ) )

                      nTotalBase      := hGet( hTipoIva, "neto" ) - hGet( hTipoIva, "neto" ) / ( Div( 100, hGet( hTipoIva, "porcentajeiva" ) + hGet( hTipoIva, "porcentajere" ) + 1 ) )

                    if nRegIva <= 1




                            hSet( hTipoIva, "neto", hGet( hTipoIva, "neto" ) )

                            if hGet( hTipoIva, "porcentajeiva" ) <> nil
                                 hSet( hTipoIva, "impiva", Round( hGet( hTipoIva, "neto" ) * hGet( hTipoIva, "porcentajeiva" ) / 100, nRouDiv ) )
                             end

                            if hGet( hTipoIva, "porcentajere" ) <> nil .AND. hGet( hTipoIva, "logrecargo" )
                                hSet( hTipoIva, "impre", Round( hGet( hTipoIva, "neto" ) * hGet( hTipoIva, "porcentajere" ) / 100, nRouDiv ) )
                            end


                    end

                end

              else

                if !uFieldEmpresa( "lIvaImpEsp" )
                    hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - hGet( hTipoIva, "nivmh" ) ) )
                end

                if nRegIva <= 1

                    if hGet( hTipoIva, "porcentajeiva" ) <> 0
                        hSet( hTipoIva, "impiva", Round( hGet( hTipoIva, "neto" ) / ( 100 / hGet( hTipoIva, "porcentajeiva" ) + 1 ), nRouDiv ) )
                        hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - hGet( hTipoIva, "impiva" ) ) )
                    end

                end

            end

            if uFieldEmpresa( "lIvaImpEsp" )
                hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - hGet( hTipoIva, "nivmh" ) ) )
              end

       else

              if nRegIva <= 1

                 if hGet( hTipoIva, "porcentajeiva" ) <> nil
                     hSet( hTipoIva, "impiva", Round( hGet( hTipoIva, "neto" ) * hGet( hTipoIva, "porcentajeiva" ) / 100, nRouDiv ) )
                 end

                if hGet( hTipoIva, "porcentajere" ) <> nil .AND. hGet( hTipoIva, "logrecargo" )
                    hSet( hTipoIva, "impre", Round( hGet( hTipoIva, "neto" ) * hGet( hTipoIva, "porcentajere" ) / 100, nRouDiv ) )
                end

              end

            if uFieldEmpresa( "lIvaImpEsp" )
                hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - hGet( hTipoIva, "nivmh" ) ) )
            end

       end

    next

Return ( self )



static FUNCTION nTotalDocumento_setGastos( nIvaMan, nBaseGasto, nIvaGasto ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local hTipoIva

    for each hTipoIva in ::aArrayImpuesto


        if     hGet( hTipoIva, "porcentajeiva" ) <> nil .AND.    hGet( hTipoIva, "porcentajeiva" ) == nIvaMan

            hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) + nBaseGasto ) )
            hSet( hTipoIva, "impiva", ( hGet( hTipoIva, "impiva" )  + nIvaGasto ) )

        end

    next

Return ( self )



static FUNCTION nTotalDocumento_setDescuentoEspecial( nDtoEsp ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local hTipoIva
    local nImporteDto         := 0
    local nTotImporteDto     := 0

    for each hTipoIva in ::aArrayImpuesto

        if     hGet( hTipoIva, "bruto" ) <> 0

            nImporteDto     := hGet( hTipoIva, "bruto" ) * nDtoEsp / 100

            nTotImporteDto  += nImporteDto

            hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - nImporteDto ) )

        end

    next

Return ( nTotImporteDto )



static FUNCTION nTotalDocumento_setDescuentoProntoPago( nDtoPP ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local hTipoIva
    local nImporteDto         := 0
    local nTotImporteDto     := 0

    for each hTipoIva in ::aArrayImpuesto

        if     hGet( hTipoIva, "bruto" ) <> 0

            nImporteDto     := hGet( hTipoIva, "bruto" ) * nDtoPP / 100

            nTotImporteDto  += nImporteDto

            hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - nImporteDto ) )

        end

    next

Return ( nTotImporteDto )



static FUNCTION nTotalDocumento_setDescuentoUno( nDtoUno ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local hTipoIva
    local nImporteDto         := 0
    local nTotImporteDto     := 0

    for each hTipoIva in ::aArrayImpuesto

        if     hGet( hTipoIva, "bruto" ) <> 0

            nImporteDto     := hGet( hTipoIva, "bruto" ) * nDtoUno / 100

            nTotImporteDto  += nImporteDto

            hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - nImporteDto ) )

        end

    next

Return ( nTotImporteDto )



static FUNCTION nTotalDocumento_setDescuentoDos( nDtoDos ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local hTipoIva
    local nImporteDto         := 0
    local nTotImporteDto     := 0

    for each hTipoIva in ::aArrayImpuesto

        if     hGet( hTipoIva, "bruto" ) <> 0

            nImporteDto     := hGet( hTipoIva, "bruto" ) * nDtoDos / 100

            nTotImporteDto  += nImporteDto

            hSet( hTipoIva, "neto", ( hGet( hTipoIva, "neto" ) - nImporteDto ) )

        end

    next

Return ( nTotImporteDto )



static FUNCTION nTotalDocumento_getTotalBruto( ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local nTotal := 0

    if len( ::aArrayImpuesto ) > 0
        aEval( ::aArrayImpuesto, {|h| if( hGet( h, "bruto" ) <> nil, nTotal += hGet( h, "bruto" ), ) } )
    end

Return nTotal



static FUNCTION nTotalDocumento_getTotalNeto( ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local nTotal := 0

    if len( ::aArrayImpuesto ) > 0
        aEval( ::aArrayImpuesto, {|h| if( hGet( h, "neto" ) <> nil, nTotal += hGet( h, "neto" ), ) } )
    end

Return nTotal



static FUNCTION nTotalDocumento_getTotalIva( ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local nTotal := 0

    if len( ::aArrayImpuesto ) > 0
        aEval( ::aArrayImpuesto, {|h| if( hGet( h, "impiva" ) <> nil, nTotal += hGet( h, "impiva" ), ) } )
    end

Return nTotal



static FUNCTION nTotalDocumento_getTotalRE( ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local nTotal := 0

    if len( ::aArrayImpuesto ) > 0
        aEval( ::aArrayImpuesto, {|h| if( hGet( h, "impre" ) <> nil, nTotal += hGet( h, "impre" ), ) } )
    end

Return nTotal



static FUNCTION nTotalDocumento_getTotalIvmh( ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local nTotal := 0

    if len( ::aArrayImpuesto ) > 0
        aEval( ::aArrayImpuesto, {|h| if( hGet( h, "nivmh" ) <> nil, nTotal += hGet( h, "nivmh" ), ) } )
    end

Return nTotal



static FUNCTION nTotalDocumento_getTotalTrn( ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local nTotal := 0

    if len( ::aArrayImpuesto ) > 0
        aEval( ::aArrayImpuesto, {|h| if( hGet( h, "ntransporte" ) <> nil, nTotal += hGet( h, "ntransporte" ), ) } )
    end

Return nTotal



static FUNCTION nTotalDocumento_getTotalPntVer( ) ; local Self AS CLASS nTotalDocumento := QSelf() AS CLASS nTotalDocumento

    local nTotal := 0

    if len( ::aArrayImpuesto ) > 0
        aEval( ::aArrayImpuesto, {|h| if( hGet( h, "npntver" ) <> nil, nTotal += hGet( h, "npntver" ), ) } )
    end

Return nTotal
