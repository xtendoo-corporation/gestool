#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\FacturasClientesLineasModel.prg"
_HB_CLASS FacturasClientesLineasModel ; function FacturasClientesLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "FacturasClientesLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @FacturasClientesLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "FacCliL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExtraWhere(); oClass:AddInline( "getExtraWhere", {|Self | ( ( Self ) ), ( "AND nCtlStk < 2" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaFieldName(); oClass:AddInline( "getFechaFieldName", {|Self | ( ( Self ) ), ( "dFecFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHoraFieldName(); oClass:AddInline( "getHoraFieldName", {|Self | ( ( Self ) ), ( "tFecFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerieFieldName(); oClass:AddInline( "getSerieFieldName", {|Self | ( ( Self ) ), ( "cSerie" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroFieldName(); oClass:AddInline( "getNumeroFieldName", {|Self | ( ( Self ) ), ( "nNumFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijoFieldName(); oClass:AddInline( "getSufijoFieldName", {|Self | ( ( Self ) ), ( "cSufFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTipoDocumento(); oClass:AddInline( "getTipoDocumento", {|Self | ( ( Self ) ), ( "11" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteWherId( cSerie, nNumero, cDelegacion); oClass:AddMethod( "deleteWherId", @FacturasClientesLineasModel_deleteWherId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lineasUnidadesEntregadas( cNumPed, cCodArt, cValPr1, cValPr2); oClass:AddMethod( "lineasUnidadesEntregadas", @FacturasClientesLineasModel_lineasUnidadesEntregadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nUnidadesEntregadas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote); oClass:AddMethod( "nUnidadesEntregadas", @FacturasClientesLineasModel_nUnidadesEntregadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInfoPdtEntregar( cCodigoArticulo, cCodigoAlmacen, dFechaHasta); oClass:AddMethod( "getInfoPdtEntregar", @FacturasClientesLineasModel_getInfoPdtEntregar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS FacturasClientesLineasModel ;



static FUNCTION FacturasClientesLineasModel_deleteWherId( cSerie, nNumero, cDelegacion ) ; local Self AS CLASS FacturasClientesLineasModel := QSelf() AS CLASS FacturasClientesLineasModel

   local cSentence


   cSentence         := "DELETE FROM " + ::getTableName() + " " +  "WHERE cSerie = '" + cSerie + "' AND nNumFac = " + alltrim( nNumero ) + " AND cSufFac = '" + cDelegacion + "'"

   ADSBaseModel():ExecuteSqlStatement( cSentence )

RETURN ( Self )



static FUNCTION FacturasClientesLineasModel_lineasUnidadesEntregadas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote ) ; local Self AS CLASS FacturasClientesLineasModel := QSelf() AS CLASS FacturasClientesLineasModel

    local cStm        := "lineasUnidadesEntregadasFacCli"
    local cSql           := ""

  If( cCodPr1 == nil, cCodPr1 := "", ) ;
  If( cCodPr2 == nil, cCodPr2 := "", ) ;
  If( cValPr1 == nil, cValPr1 := "", ) ;
  If( cValPr2 == nil, cValPr2 := "", ) ;
  If( cLote == nil, cLote := "", ) ;

    cSql                  += "SELECT * "
  cSql                  += "FROM " + ::getTableName() + Space( 1 )
    cSql                  += "WHERE cNumPed = " + quoted( cNumPed ) + " AND "
  cSql                  += "cRef = " + quoted( cCodArt )
     cSql              += " AND cCodPr1 = " + quoted( cCodPr1 )
  cSql              += " AND cCodPr2 = " + quoted( cCodPr2 )
  cSql                += " AND cValPr1 = " + quoted( cValPr1 )
    cSql                += " AND cValPr2 = " + quoted( cValPr2 )


     if ::ExecuteSqlStatement( cSql, @cStm )
    Return ( cStm )
  end

Return nil



static FUNCTION FacturasClientesLineasModel_nUnidadesEntregadas( cNumPed, cCodArt, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote ) ; local Self AS CLASS FacturasClientesLineasModel := QSelf() AS CLASS FacturasClientesLineasModel

  local cStm
  local cSql        := ""
  local nUnidades   := 0

  If( cCodPr1 == nil, cCodPr1 := "", ) ;
  If( cCodPr2 == nil, cCodPr2 := "", ) ;
  If( cValPr1 == nil, cValPr1 := "", ) ;
  If( cValPr2 == nil, cValPr2 := "", ) ;
  If( cLote == nil, cLote := "", ) ;

  cSql  += "SELECT * "
  cSql  += "FROM " + ::getTableName() + Space( 1 )
  cSql  += "WHERE cNumPed = " + quoted( cNumPed ) + " AND "
  cSql  += "cRef = " + quoted( cCodArt ) + " AND "
  cSql  += "cCodPr1 = " + quoted( cCodPr1 ) + " AND "
  cSql  += "cValPr1 = " + quoted( cValPr1 ) + " AND "
  cSql  += "cCodPr2 = " + quoted( cCodPr2 ) + " AND "
  cSql  += "cValPr2 = " + quoted( cValPr2 )


  if ::ExecuteSqlStatement( cSql, @cStm )

    if ( cStm )->( OrdKeyCount() ) <> 0

        ( cStm )->( dbGotop() )

        while !( cStm )->( eof() )

          nUnidades   += nTotNFacCli( cStm )

        ( cStm )->( dbSkip() )

      end

    end

    end

Return ( nUnidades )



static FUNCTION FacturasClientesLineasModel_getInfoPdtEntregar( cCodigoArticulo, cCodigoAlmacen, dFechaHasta ) ; local Self AS CLASS FacturasClientesLineasModel := QSelf() AS CLASS FacturasClientesLineasModel

    local cSql        := ""

    cSql              := "SELECT "
    cSql              += "0 as pdtrecibir, "
    do case
      case lCalCaj() .AND. lCalBul()
         cSql         += "( ( nBultos * nCanEnt * nUniCaja ) * -1 ) as pdtentrega, "

      case lCalCaj() .AND. !lCalBul()
         cSql         += "( ( nCanEnt * nUniCaja ) * -1 ) as pdtentrega, "

      case !lCalCaj() .AND. lCalBul()
         cSql         += "( ( nBultos * nUniCaja ) * -1 ) as pdtentrega, "

      case !lCalCaj() .AND. !lCalBul()
         cSql            += "( nUniCaja * - 1 ) as pdtentrega, "

    end
    cSql              += quoted( "11" ) + " AS Document, "
    cSql              += "dFecFac AS Fecha, "
    cSql              += "tFecFac AS Hora, "
    cSql              += "cSerie AS Serie, "
    cSql              += "CAST( nNumFac AS SQL_INTEGER ) AS Numero, "
    cSql              += "cSufFac AS Sufijo, "
    cSql              += "CAST( nNumLin AS SQL_INTEGER ) AS nNumLin, "
    cSql              += "cRef AS Articulo, "
    cSql              += "cAlmLin AS Almacen "
    cSql              += "FROM " + ::getTableName()
    cSql              += " WHERE NOT ( cNumPed = '' ) AND cRef = " + quoted( cCodigoArticulo ) + " "

    if !empty( cCodigoAlmacen )
      cSql            += "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
    end

    if hb_isdate( dFechaHasta )
      cSql            += "AND CAST( dFecFac AS SQL_CHAR ) <= " + formatoFechaSql( dFechaHasta ) + " "
    end

RETURN ( cSql )
