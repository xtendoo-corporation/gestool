#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\FacturasClientesModel.prg"
_HB_CLASS FacturasClientesModel ; function FacturasClientesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "FacturasClientesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @FacturasClientesModel() ) ) ;

   _HB_MEMBER getHeaderTableName(); oClass:AddInline( "getHeaderTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "FacCliT" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER UltimoDocumento( cCodigoCliente); oClass:AddMethod( "UltimoDocumento", @FacturasClientesModel_UltimoDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defaultSufijo(); oClass:AddMethod( "defaultSufijo", @FacturasClientesModel_defaultSufijo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInsertStatement( hFields); oClass:AddMethod( "getInsertStatement", @FacturasClientesModel_getInsertStatement(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getField( cSerie, nNumero, cSufijo, cField); oClass:AddMethod( "getField", @FacturasClientesModel_getField(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS FacturasClientesModel ;



static FUNCTION FacturasClientesModel_getField( cSerie, nNumero, cSufijo, cField ) ; local Self AS CLASS FacturasClientesModel := QSelf() AS CLASS FacturasClientesModel

   local cStm
   local cSql

   cSql              := "SELECT " + cField + " "
   cSql              +=    "FROM " + ::getHeaderTableName() + " "
   cSql              +=    "WHERE cSerie = " + quoted( cSerie ) + " AND nNumFac = " + AllTrim( Str( nNumero ) ) + " AND cSufFac = " + + quoted( cSufijo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( fieldpos( cField ) ) ) )
   end

RETURN ( nil )



static FUNCTION FacturasClientesModel_UltimoDocumento( cCodigoCliente ) ; local Self AS CLASS FacturasClientesModel := QSelf() AS CLASS FacturasClientesModel

   local cStm


   local cSql  := "SELECT TOP 1 dFecFac " +  "FROM " + ::getHeaderTableName() + " " +  "WHERE cCodCli = " + quoted( cCodigoCliente ) + " ORDER BY dFecFac DESC"

   if ::ExecuteSqlStatement( cSql, @cStm )
      Return ( ( cStm )->dFecFac )
   end

Return ( ctod( "" ) )



static FUNCTION FacturasClientesModel_defaultSufijo( ) ; local Self AS CLASS FacturasClientesModel := QSelf() AS CLASS FacturasClientesModel

   local cStm


   local cSql  := "UPDATE " + ::getHeaderTableName() +  " SET cSufFac = '00'" +  " WHERE cSufFac = ''"

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION FacturasClientesModel_getInsertStatement( hFields ) ; local Self AS CLASS FacturasClientesModel := QSelf() AS CLASS FacturasClientesModel

   local cStatement

   cStatement           := "INSERT INTO " + ::getHeaderTableName() + " "
   cStatement           += "( "

      hEval( hFields,   {| k, v | cStatement += k + ", " } )
   cStatement           := chgAtEnd( cStatement, " ) VALUES ( ", 2 )

      hEval( hFields,   {| k, v | cStatement += toAdsSQLString( v ) + ", " } )
   cStatement           := chgAtEnd( cStatement, " )", 2 )

RETURN ( cStatement )







Function getFechaFactura( cNumFac )

   local cSerie
   local nNumero
   local cSufijo

   if Empty( cNumFac )
      Return ( ctod( "" ) )
   end

   cSerie   := SubStr( cNumFac, 1, 1 )
   nNumero  := Val( SubStr( cNumFac, 2, 9 ) )
   cSufijo  := SubStr( cNumFac, 11, 2 )

Return( FacturasClientesModel():getField( cSerie, nNumero, cSufijo, "dFecFac" ) )







_HB_CLASS FacturasClientesCobrosModel ; function FacturasClientesCobrosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "FacturasClientesCobrosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @FacturasClientesCobrosModel() ) ) ;

   _HB_MEMBER getHeaderTableName(); oClass:AddInline( "getHeaderTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "FacCliP" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dFechaCobro( cSerie, nNumero, cSufijo); oClass:AddMethod( "dFechaCobro", @FacturasClientesCobrosModel_dFechaCobro(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS FacturasClientesCobrosModel ;



static FUNCTION FacturasClientesCobrosModel_dFechaCobro( cSerie, nNumero, cSufijo ) ; local Self AS CLASS FacturasClientesCobrosModel := QSelf() AS CLASS FacturasClientesCobrosModel

   local cStm




   local cSql  := "SELECT TOP 1 dEntrada " +  "FROM " + ::getHeaderTableName() + " " +  "WHERE cSerie = " + quoted( cSerie ) + " AND " +  "nNumFac = " + AllTrim( Str( nNumero ) ) + " AND " +  "cSufFac = " + quoted( cSufijo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      Return ( ( cStm )->dEntrada )
   end

Return ( ctod( "" ) )
