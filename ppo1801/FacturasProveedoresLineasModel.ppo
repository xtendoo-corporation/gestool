#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\FacturasProveedoresLineasModel.prg"
_HB_CLASS FacturasProveedoresLineasModel ; function FacturasProveedoresLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "FacturasProveedoresLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @FacturasProveedoresLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "FacPrvL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExtraWhere(); oClass:AddInline( "getExtraWhere", {|Self | ( ( Self ) ), ( "AND nCtlStk < 2 " ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaFieldName(); oClass:AddInline( "getFechaFieldName", {|Self | ( ( Self ) ), ( "dFecFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHoraFieldName(); oClass:AddInline( "getHoraFieldName", {|Self | ( ( Self ) ), ( "tFecFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerieFieldName(); oClass:AddInline( "getSerieFieldName", {|Self | ( ( Self ) ), ( "cSerFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroFieldName(); oClass:AddInline( "getNumeroFieldName", {|Self | ( ( Self ) ), ( "nNumFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijoFieldName(); oClass:AddInline( "getSufijoFieldName", {|Self | ( ( Self ) ), ( "cSufFac" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTipoDocumento(); oClass:AddInline( "getTipoDocumento", {|Self | ( ( Self ) ), ( "03" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceFechaCaducidad( cCodigoArticulo, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "getSQLSentenceFechaCaducidad", @FacturasProveedoresLineasModel_getSQLSentenceFechaCaducidad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "getFechaCaducidad", @FacturasProveedoresLineasModel_getFechaCaducidad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCostoFecha( cCodigoArticulo, dFecha); oClass:AddMethod( "getCostoFecha", @FacturasProveedoresLineasModel_getCostoFecha(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUltimasCompras( cCodigoArticulo, cCodigoProveedor); oClass:AddMethod( "getUltimasCompras", @FacturasProveedoresLineasModel_getUltimasCompras(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getComprasArticulo( cCodigoArticulo); oClass:AddMethod( "getComprasArticulo", @FacturasProveedoresLineasModel_getComprasArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS FacturasProveedoresLineasModel ;



static FUNCTION FacturasProveedoresLineasModel_getSQLSentenceFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS FacturasProveedoresLineasModel := QSelf() AS CLASS FacturasProveedoresLineasModel












   local cSql  := "SELECT "                                          +  "cRef as cCodigoArticulo, "                     +  "cCodPr1 as cCodigoPrimeraPropiedad, "          +  "cCodPr2 as cCodigoSegundaPropiedad, "          +  "cValPr1 as cValorPrimeraPropiedad, "           +  "cValPr2 as cValorSegundaPropiedad, "           +  "cLote as cLote, "                              +  "dFecFac as dFecDoc, "                          +  "dFecCad as dFecCad "                           +  "FROM " + ::getTableName() + " "                   +  "WHERE cRef = " + quoted( cCodigoArticulo ) + " "  +  "AND dFecCad IS NOT NULL "

   cSql        += "AND cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " "
   cSql        += "AND cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " "
   cSql        += "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
   cSql        += "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
   cSql        += "AND cLote = " + quoted( cLote ) + " "

RETURN ( cSql )



static FUNCTION FacturasProveedoresLineasModel_getFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS FacturasProveedoresLineasModel := QSelf() AS CLASS FacturasProveedoresLineasModel

   local nVal  := cTod( "" )
   local cStm



   local cSql  := "SELECT TOP 1 "                                                +  "dFecCad "                                                  +  "FROM " + ::getTableName() + " "                               +  "WHERE lLote AND cRef = " + quoted( cCodigoArticulo ) + " "
      cSql     +=    "AND cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " "
      cSql     +=    "AND cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " "
      cSql     +=    "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
      cSql     +=    "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
      cSql     +=    "AND cLote = " + quoted( cLote ) + " "
      cSql     +=    "ORDER BY dFecFac DESC"

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )
      nVal     := ( ( cStm )->dFecCad )
   end

RETURN ( nVal )



static FUNCTION FacturasProveedoresLineasModel_getCostoFecha( cCodigoArticulo, dFecha ) ; local Self AS CLASS FacturasProveedoresLineasModel := QSelf() AS CLASS FacturasProveedoresLineasModel

   local hCosto   := {=>}
   local cStm




   local cSql     := "SELECT TOP 1 "                                             +  "lineas.nPreUnit, cabecera.dFecFac "                     +  "FROM " + ::getTableName() + " AS lineas "                  +  "INNER JOIN " + ::getEmpresaTableName( "FacPrvT" ) + " AS cabecera ON cabecera.cSerFac = lineas.cSerFac AND cabecera.nNumFac = lineas.nNumFac AND cabecera.cSufFac = lineas.cSufFac " +  "WHERE cRef = " + quoted( cCodigoArticulo ) + " "
      cSql        +=    "AND cabecera.dFecFac <= " + quoted( Dtoc( dFecha ) ) + " "
      cSql        +=    "ORDER BY cabecera.dFecFac DESC"

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( ordkeycount() ) > 0
         hSet( hCosto, "Costo", ( cStm )->nPreUnit )
         hSet( hCosto, "Fecha", ( cStm )->dFecFac )
      else
         hSet( hCosto, "Costo", 0 )
         hSet( hCosto, "Fecha", cTod( "" ) )
      end

   end

RETURN ( hCosto )



static FUNCTION FacturasProveedoresLineasModel_getUltimasCompras( cCodigoArticulo, cCodigoProveedor ) ; local Self AS CLASS FacturasProveedoresLineasModel := QSelf() AS CLASS FacturasProveedoresLineasModel

   local aValores    := {}
   local cStm        := "UltComFacProv"








   local cSql        := "SELECT "                                                   +  "cabecera.cSerFac AS serie, "                            +  "cabecera.nNumFac AS numero, "                           +  "cabecera.cSufFac AS sufijo, "                           +  "cabecera.dFecFac AS fecha, "                            +  "lineas.nPreUnit AS precio "                              +  "FROM " + ::getTableName() + " AS lineas "                  +  "INNER JOIN " + ::getEmpresaTableName( "FacPrvT" ) + " AS cabecera ON cabecera.cSerFac = lineas.cSerFac AND cabecera.nNumFac = lineas.nNumFac AND cabecera.cSufFac = lineas.cSufFac " +  "WHERE lineas.cRef = " + quoted( cCodigoArticulo ) + " "
   cSql              +=    "AND cabecera.cCodPrv = " + quoted( cCodigoProveedor )

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )





         aAdd( aValores, { "tipo" => "Factura proveedor", "numero" => ( cStm )->serie + "/" + AllTrim( Str( ( cStm )->numero ) ), "fecha" => ( cStm )->fecha, "precio" => ( cStm )->precio } )


         ( cStm )->( dbSkip() )

      end

   end

RETURN ( aValores )



static FUNCTION FacturasProveedoresLineasModel_getComprasArticulo( cCodigoArticulo ) ; local Self AS CLASS FacturasProveedoresLineasModel := QSelf() AS CLASS FacturasProveedoresLineasModel

   local aValores    := {}
   local cStm        := "getComprasArticuloFac"










   local cSql        := "SELECT "                                                   +  "cabecera.cSerFac AS serie, "                            +  "cabecera.nNumFac AS numero, "                           +  "cabecera.cSufFac AS sufijo, "                           +  "cabecera.dFecFac AS fecha, "                            +  "cabecera.cCodPrv AS proveedor, "                        +  "lineas.nPreUnit AS precio, "                            +  "lineas.nUnicaja AS unidades "                           +  "FROM " + ::getTableName() + " AS lineas "                  +  "INNER JOIN " + ::getEmpresaTableName( "FacPrvT" ) + " AS cabecera ON cabecera.cSerFac = lineas.cSerFac AND cabecera.nNumFac = lineas.nNumFac AND cabecera.cSufFac = lineas.cSufFac " +  "WHERE lineas.cRef = " + quoted( cCodigoArticulo )

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )









         aAdd( aValores, { "tipo" => "Factura proveedor", "id" => ( cStm )->serie + Str( ( cStm )->numero ) + ( cStm )->sufijo , "idDoc" => "03" + ( cStm )->serie + Str( ( cStm )->numero ) + ( cStm )->sufijo , "proveedor" => ( cStm )->proveedor , "numero" => ( cStm )->serie + "/" + AllTrim( Str( ( cStm )->numero ) ), "fecha" => ( cStm )->fecha, "unidades" => ( cStm )->unidades, "precio" => ( cStm )->precio, "und_vendidas" => 0 } )

         ( cStm )->( dbSkip() )

      end

   end

RETURN ( aValores )
