#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\FamiliasModel.prg"
_HB_CLASS FamiliasModel ; function FamiliasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "FamiliasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @FamiliasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Familias" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER exist(); oClass:AddMethod( "exist", @FamiliasModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, cCodigoFamilia | ( ( Self ) ), ( ::getField( "cNomFam", "cCodFam", cCodigoFamilia ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getGrupo( cCodigoFamilia); oClass:AddMethod( "getGrupo", @FamiliasModel_getGrupo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @FamiliasModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNamesFromIdLanguagesPS( cCodFam, aIdsLanguages); oClass:AddMethod( "getNamesFromIdLanguagesPS", @FamiliasModel_getNamesFromIdLanguagesPS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getListToWP(); oClass:AddMethod( "getListToWP", @FamiliasModel_getListToWP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateWpId( cIdWP, cCodFam); oClass:AddMethod( "updateWpId", @FamiliasModel_updateWpId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS FamiliasModel ;



static FUNCTION FamiliasModel_exist( cCodigoFamilia ) ; local Self AS CLASS FamiliasModel := QSelf() AS CLASS FamiliasModel

   local cStm


   local cSql  := "SELECT cNomFam "                                     +  "FROM " + ::getTableName() + " "                   +  "WHERE cCodFam = " + quoted( cCodigoFamilia )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION FamiliasModel_getGrupo( cCodigoFamilia ) ; local Self AS CLASS FamiliasModel := QSelf() AS CLASS FamiliasModel

   local cCodGrp  := ::getField( "cCodFam", "cCodGrp", cCodigoFamilia )

RETURN ( if( Empty( cCodGrp ), Space( 3 ), Padr( cCodGrp, 3 ) ) )



static FUNCTION FamiliasModel_getToOdoo( cArea ) ; local Self AS CLASS FamiliasModel := QSelf() AS CLASS FamiliasModel

      local cSql     := "SELECT * FROM " + ::getTableName()
      cSql           += " WHERE lSelDoc"

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION FamiliasModel_getListToWP( ) ; local Self AS CLASS FamiliasModel := QSelf() AS CLASS FamiliasModel

      local cStm     := "getToWPFamilias"
      local cSql     := ""
      local aList    := {}

      cSql           := "SELECT * FROM " + ::getTableName()

      if ::ExecuteSqlStatement( cSql, @cStm )
         aList       := DBHScatter( cStm )
      end

RETURN ( aList )



static FUNCTION FamiliasModel_updateWpId( cIdWP, cCodFam ) ; local Self AS CLASS FamiliasModel := QSelf() AS CLASS FamiliasModel

   local cStm     := "updateWpId"
   local cSql     := ""
   local aList    := {}

   cSql           := "UPDATE " + ::getTableName()
   cSql           += " SET cIdWP = " + quoted( cIdWP )
   cSql           += " WHERE cCodFam = " + quoted( cCodFam )

   ::ExecuteSqlStatement( cSql, @cStm )

RETURN ( self )



static FUNCTION FamiliasModel_getNamesFromIdLanguagesPS( cCodFam, aIdsLanguages ) ; local Self AS CLASS FamiliasModel := QSelf() AS CLASS FamiliasModel

   local cName
   local hNames   := {=>}

   if Len( aIdsLanguages ) == 0
      Return ( hNames )
   end

   cName    := ::getNombre( cCodFam )

   if Empty( cName )
      Return ( hNames )
   end

   aEval( aIdsLanguages, {|id| hSet( hNames, AllTrim( Str( id ) ), AllTrim( cName ) ) } )

RETURN ( hNames )
