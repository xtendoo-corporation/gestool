













#pragma BEGINDUMP

#include "windows.h"
#include "hbapiitm.h"
#include "hbvm.h"
#include "hbapirdd.h"
#include "hbxvm.h"

typedef void *pointer;

typedef void (*proc_)(void);
typedef void (*proc_I)(long param1);
typedef void (*proc_IP) (int funcnum, pointer adr);
typedef void (*proc_C)(char * param);
typedef void (*proc_IC)(int param1, char * param2);
typedef void (*proc_CC)(char * param1, char * param2);
typedef void (*proc_CCC)(char * param1, char * param2, char * param3);
typedef void (*proc_IIII)(long param1, long param2, long param3, long param4);

typedef LONG (*func__I)(void);
typedef LONG (*func_I_I)(long param);
typedef LONG (*func_C_I)(char * param);
typedef LONG (*func_II_I)(long param1, long param2);
typedef LONG (*func_IC_I)(long param1, char * param2);
typedef LONG (*func_CC_I)(char * param1, char * param2);
typedef LONG (*func_CCC_I)(char * param1, char * param2, char * param3);
typedef LONG (*func_CCI_I)(char * param1, char * param2, long param3);
typedef LONG (*func_III_I)(long param1, long param2, long param3);
typedef LONG (*func_CIII_I)(char * param1, long param2, long param3, long param4);

typedef LONG (*func_CICCCCCCCC_I)(char * param1, long param2, char * param3, char * param4, char * param5,
                                  char * param6, char * param7, char * param8, char * param9, char * param10);

   
HB_FUNC( FRLOAD )
{
   hb_retnl((long)(HMODULE)LoadLibrary((char *)hb_parc(1)));  
}

HB_FUNC( GETFRPROCADDRESS )
{
   hb_retnl((long)(FARPROC)GetProcAddress((HMODULE)hb_parnl(1) , (char *)hb_parc(2)));
}

HB_FUNC( FRUNLOAD )
{
   FreeLibrary((HMODULE)hb_parnl(1));
}


HB_FUNC( CALL_PROC_ )
{
   proc_ CurProc = (proc_)hb_parnl(1);
   CurProc();
}

HB_FUNC( CALL_PROC_I )
{   
   proc_I CurProc = (proc_I)hb_parnl(1);
   CurProc(hb_parnl(2));
}

HB_FUNC( CALL_PROC_C )
{   
   proc_C CurProc = (proc_C)hb_parnl(1);
   CurProc((char *)hb_parc(2));
}

HB_FUNC( CALL_PROC_IC )
{   
   proc_IC CurProc = (proc_IC)hb_parnl(1);
   CurProc(hb_parnl(2), (char *)hb_parc(3));
}

HB_FUNC( CALL_PROC_CC )
{   
   proc_CC CurProc = (proc_CC)hb_parnl(1);
   CurProc((char *)hb_parc(2), (char *)hb_parc(3));
}

HB_FUNC( CALL_PROC_CCC )
{   
   proc_CCC CurProc = (proc_CCC)hb_parnl(1);
   CurProc((char *)hb_parc(2), (char *)hb_parc(3), (char *)hb_parc(4));
}


HB_FUNC( CALL_PROC_IIII )
{   
   proc_IIII CurProc = (proc_IIII)hb_parnl(1);
   CurProc(hb_parnl(2), hb_parnl(3), hb_parnl(4), hb_parnl(5));
}


HB_FUNC( CALL_FUNC__I )
{     
   func__I CurFunc = (func__I)hb_parnl(1);     
   hb_retnl(CurFunc());
}

HB_FUNC( CALL_FUNC_I_I )
{     
   func_I_I CurFunc = (func_I_I)hb_parnl(1);     
   hb_retnl(CurFunc(hb_parnl(2)));
}

HB_FUNC( CALL_FUNC_C_I )
{
   func_C_I CurFunc = (func_C_I)hb_parnl(1);     
   hb_retnl(CurFunc((char *)hb_parc(2)));
}

HB_FUNC( CALL_FUNC_II_I )
{     
   func_II_I CurFunc = (func_II_I)hb_parnl(1);     
   hb_retnl(CurFunc(hb_parnl(2), hb_parnl(3)));
}

HB_FUNC( CALL_FUNC_IC_I )
{     
   func_IC_I CurFunc = (func_IC_I)hb_parnl(1);     
   hb_retnl(CurFunc(hb_parnl(2), (char *)hb_parc(3)));
}

HB_FUNC( CALL_FUNC_CC_I )
{     
   func_CC_I CurFunc = (func_CC_I)hb_parnl(1);     
   hb_retnl(CurFunc((char *)hb_parc(2), (char *)hb_parc(3)));
}

HB_FUNC( CALL_FUNC_CCC_I )
{     
   func_CCC_I CurFunc = (func_CCC_I)hb_parnl(1);     
   hb_retnl(CurFunc((char *)hb_parc(2), (char *)hb_parc(3), (char *)hb_parc(4)));
}

HB_FUNC( CALL_FUNC_CCI_I )
{     
   func_CCI_I CurFunc = (func_CCI_I)hb_parnl(1);     
   hb_retnl(CurFunc((char *)hb_parc(2), (char *)hb_parc(3), hb_parnl(4)));
}

HB_FUNC( CALL_FUNC_III_I )
{   
   func_III_I CurFunc = (func_III_I)hb_parnl(1);     
   hb_retnl(CurFunc(hb_parnl(2), hb_parnl(3), hb_parnl(4)));
}

HB_FUNC( CALL_FUNC_CIII_I )
{     
   func_CIII_I CurFunc = (func_CIII_I)hb_parnl(1);     
   hb_retnl(CurFunc((char *)hb_parc(2), hb_parnl(3), hb_parnl(4), hb_parnl(5)));
}

HB_FUNC( CALL_FUNC_CICCCCCCCC_I )
{     
   func_CICCCCCCCC_I CurFunc = (func_CICCCCCCCC_I)hb_parnl(1);     
   hb_retnl(CurFunc((char *)hb_parc(2), hb_parnl(3), (char *)hb_parc(4), (char *)hb_parc(5), (char *)hb_parc(6), (char *)hb_parc(7), (char *)hb_parc(8),
                    (char *)hb_parc(9), (char *)hb_parc(10), (char *)hb_parc(11)));
}


USHORT TmpGetWA( AREAP area, void * ptr)
{   
   proc_I CurFunc = (proc_I)ptr;
   CurFunc(area->uiArea);  
   return 0;
}

long GetPAOptions(char * opt)
{  strcpy(opt, "227078209018115119019067064069218186161172089234214070110117037156248190034095088177245181054170022035219121155107237077212003");
   return 1;  
}

HB_FUNC( INITENGINE )
{

   proc_IP InitEng = (proc_IP)GetProcAddress((HMODULE)hb_parnl(1) , "InitEngine");
   
   if (InitEng)
   {
      InitEng(1, hb_itemNew);
      InitEng(2, hb_itemRelease);
      InitEng(3, hb_itemPutNI);
      InitEng(4, hb_itemGetNI);
      
      InitEng(6, hb_dynsymGetSymbol);
           
      InitEng(10, hb_itemType);
      InitEng(11, hb_itemGetPtr);
      InitEng(12, hb_itemGetNL);
      InitEng(13, hb_itemGetND);
      InitEng(14, hb_itemGetDS);
      InitEng(15, hb_itemGetL);
      InitEng(16, hb_itemGetCLen);
      InitEng(17, hb_itemCopyC);
      InitEng(18, hb_itemArrayGet);
      InitEng(19, hb_arrayLen);
      InitEng(20, hb_itemPutPtr);
      InitEng(21, hb_itemPutNL);
      InitEng(22, hb_itemPutND);
      InitEng(23, hb_itemPutDS);
      InitEng(24, hb_itemPutL);
      InitEng(25, hb_itemPutC);
      InitEng(26, hb_itemArrayNew);
      InitEng(27, hb_itemArrayPut);
      InitEng(28, hb_vmPush);
      InitEng(29, hb_vmPushSymbol);
      InitEng(30, hb_vmPushNil);
      InitEng(31, hb_dynsymFindSymbol);
      InitEng(32, hb_vmDo);
      InitEng(33, hb_param);
      InitEng(34, hb_itemClear);
   
      InitEng(35, hb_macroCompile);   
      InitEng(36, hb_macroRun);
      InitEng(37, hb_macroDelete);
      
      InitEng(38, hb_xvmRetValue);
   
      InitEng(39, hb_rddGetCurrentWorkAreaNumber);
      InitEng(40, hb_rddSelectWorkAreaNumber);
      InitEng(41, hb_rddGetFieldValue);
      InitEng(42, hb_rddPutFieldValue);
      InitEng(43, hb_itemGetNLL);
      InitEng(44, hb_itemPutNLL);
      InitEng(45, hb_itemCopy);
      InitEng(46, GetPAOptions);
   
      InitEng(47, hb_vmFunction);
      InitEng(48, hb_vmEvalBlock);
      InitEng(49, hb_vmEvalBlockV);
      InitEng(50, hb_vmEvalBlockOrMacro);
      InitEng(51, hb_itemPutCL);
      InitEng(52, hb_rddIterateWorkAreas);
      InitEng(53, TmpGetWA);

#ifdef HB_IT_DATETIME 
#ifdef __XHARBOUR__ 
      InitEng(54, hb_itemGetDTS);
      InitEng(55, hb_itemPutDTS); 
      InitEng(56, (pointer)2);
#else 
      InitEng(54, hb_itemGetTS);
      InitEng(55, hb_itemPutTS); 
      InitEng(56, (pointer)1);
#endif 
#else 
      InitEng(54, NULL);
      InitEng(55, NULL);
      InitEng(56, NULL);
#endif 


   }

}

 
              
#pragma ENDDUMP
#line 282 ".\.\Prg\FastRepH.prg"
EXTERNAL EVAL
EXTERNAL DBSKIP
EXTERNAL ALIAS
EXTERNAL DBUSEAREA
EXTERNAL DBCLOSEAREA
EXTERNAL ORDSCOPE
EXTERNAL BOF
EXTERNAL EOF
EXTERNAL DBGOBOTTOM
EXTERNAL DBGOTOP
EXTERNAL DBDELETE
EXTERNAL DBGOTO
EXTERNAL SELECT
EXTERNAL DBSELECTAREA
EXTERNAL SET
EXTERNAL ORDSETFOCUS
EXTERNAL DBAPPEND
EXTERNAL DBRLOCK
EXTERNAL NETERR
EXTERNAL DBUNLOCK
EXTERNAL RECNO
EXTERNAL ORDCONDSET
EXTERNAL ORDCOUNT
EXTERNAL ORDLISTADD
EXTERNAL ORDNAME
EXTERNAL ORDKEY
EXTERNAL ORDFOR
EXTERNAL ORDLISTCLEAR
EXTERNAL DBSEEK
EXTERNAL LASTREC
EXTERNAL DBSETRELATION
EXTERNAL DBCLEARRELATION
EXTERNAL DBSETFILTER
EXTERNAL DBCLEARFILTER
EXTERNAL __DBLOCATE
EXTERNAL __MVGET
EXTERNAL __MVPUT
EXTERNAL __MVEXIST








_HB_CLASS frReportManager ; function frReportManager ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "frReportManager", iif( .F., { }, { @HBObject() } ), @frReportManager() ) ) ;
   nScope := 4 ; ( ( nScope ) )















     _HB_MEMBER { _InitSyst, _FrNotifyError, _CloseSyst, _SetIcon, _SetTitle, _SetVisualActions, _LoadLangRes, _ShowReport, _PrepareReport, _ShowPreparedReport, _DesignReport, _LoadFromFile, _LoadFromResource, _LoadFromBlob, _SaveToFile, _SaveToBlob, _Clear, _LoadFPFile, _SaveToFPFile, _SetFormatSettings, _LoadStyleSheet, _Print, _GetErrors, _DoExport, _GetProperty, _SetProperty, _SetEventHandler, _AddFunction, _AddVariable, _SetVariable, _GetVariable, _DeletVariable, _DeletCategory, _SetScriptVar, _GetScriptVar, _Calc, _SetWorkArea, _SetMasterDetail, _SetResyncPair, _SetUserDataSet, _Resync, _SetFieldAliases, _RemoveDataSet, _ClearDataSets, _ClearMasterDetail, _ClearResyncPair, _SetADOConnectStr, _SetADOConnectPartStr, _StartManualBuild, _MemoAt, _SetDefaultFontProperty, _NewPage, _SetManualObjProperty, _LineAt, _PictureAt, _SendMail, _frMsgBox, _frInputBox, _LoadFromString, _SaveToString, _SetFileName, _SetTabTreeExpanded, _NewReport, _AddPage, _AddBand, _AddGlobalDsToReport, _SetObjProperty, _AddMemo, _AddLine, _AddPicture, _LoadStyleSheetFromString, _GetGlobalDSList, _IsObjectExists, _CreateFRObject, _EnumAllObjects, _GetPropList, _PrepareScript, _AddReport, _SelectReport, _RemoveReport, _ClearReports, _SetTxtDataSet } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"_InitSyst", "_FrNotifyError", "_CloseSyst", "_SetIcon", "_SetTitle", "_SetVisualActions", "_LoadLangRes", "_ShowReport", "_PrepareReport", "_ShowPreparedReport", "_DesignReport", "_LoadFromFile", "_LoadFromResource", "_LoadFromBlob", "_SaveToFile", "_SaveToBlob", "_Clear", "_LoadFPFile", "_SaveToFPFile", "_SetFormatSettings", "_LoadStyleSheet", "_Print", "_GetErrors", "_DoExport", "_GetProperty", "_SetProperty", "_SetEventHandler", "_AddFunction", "_AddVariable", "_SetVariable", "_GetVariable", "_DeletVariable", "_DeletCategory", "_SetScriptVar", "_GetScriptVar", "_Calc", "_SetWorkArea", "_SetMasterDetail", "_SetResyncPair", "_SetUserDataSet", "_Resync", "_SetFieldAliases", "_RemoveDataSet", "_ClearDataSets", "_ClearMasterDetail", "_ClearResyncPair", "_SetADOConnectStr", "_SetADOConnectPartStr", "_StartManualBuild", "_MemoAt", "_SetDefaultFontProperty", "_NewPage", "_SetManualObjProperty", "_LineAt", "_PictureAt", "_SendMail", "_frMsgBox", "_frInputBox", "_LoadFromString", "_SaveToString", "_SetFileName", "_SetTabTreeExpanded", "_NewReport", "_AddPage", "_AddBand", "_AddGlobalDsToReport", "_SetObjProperty", "_AddMemo", "_AddLine", "_AddPicture", "_LoadStyleSheetFromString", "_GetGlobalDSList", "_IsObjectExists", "_CreateFRObject", "_EnumAllObjects", "_GetPropList", "_PrepareScript", "_AddReport", "_SelectReport", "_RemoveReport", "_ClearReports", "_SetTxtDataSet"}, .F. )


      _HB_MEMBER PrepareCalls(); oClass:AddMethod( "PrepareCalls", @frReportManager_PrepareCalls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   nScope := 1 ; ( ( nScope ) )

      _HB_MEMBER { bSaveError } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bSaveError"}, .F. )
      _HB_MEMBER { frSystHandle } ; oClass:AddMultiClsData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"frSystHandle"}, .F. )
      _HB_MEMBER { PrintOptions } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"PrintOptions"}, .F. )
      _HB_MEMBER { PreviewOptions } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"PreviewOptions"}, .F. )
      _HB_MEMBER { EngineOptions } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"EngineOptions"}, .F. )
      _HB_MEMBER { ReportOptions } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"ReportOptions"}, .F. )
      _HB_MEMBER { bDbStruct } ; oClass:AddMultiClsData(, NIL, nScope + iif( .F., 16, 0 ) + iif( .F., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bDbStruct"}, .F. )

      _HB_MEMBER Init(); oClass:AddMethod( "Init", @frReportManager_Init(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER FrNotifyError(); oClass:AddMethod( "FrNotifyError", @frReportManager_FrNotifyError(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetIcon(); oClass:AddMethod( "SetIcon", @frReportManager_SetIcon(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetTitle(); oClass:AddMethod( "SetTitle", @frReportManager_SetTitle(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetVisualActions(); oClass:AddMethod( "SetVisualActions", @frReportManager_SetVisualActions(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadLangRes(); oClass:AddMethod( "LoadLangRes", @frReportManager_LoadLangRes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetFormatSettings(); oClass:AddMethod( "SetFormatSettings", @frReportManager_SetFormatSettings(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER DestroyFR(); oClass:AddMethod( "DestroyFR", @frReportManager_DestroyFR(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER ShowReport(); oClass:AddMethod( "ShowReport", @frReportManager_ShowReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ShowPreparedReport(); oClass:AddMethod( "ShowPreparedReport", @frReportManager_ShowPreparedReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER PrepareReport(); oClass:AddMethod( "PrepareReport", @frReportManager_PrepareReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER DesignReport(); oClass:AddMethod( "DesignReport", @frReportManager_DesignReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadFromFile(); oClass:AddMethod( "LoadFromFile", @frReportManager_LoadFromFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadFromResource(); oClass:AddMethod( "LoadFromResource", @frReportManager_LoadFromResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadFromBlob(); oClass:AddMethod( "LoadFromBlob", @frReportManager_LoadFromBlob(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadFromString(); oClass:AddMethod( "LoadFromString", @frReportManager_LoadFromString(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SaveToFile(); oClass:AddMethod( "SaveToFile", @frReportManager_SaveToFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SaveToBlob(); oClass:AddMethod( "SaveToBlob", @frReportManager_SaveToBlob(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SaveToString(); oClass:AddMethod( "SaveToString", @frReportManager_SaveToString(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetFileName(); oClass:AddMethod( "SetFileName", @frReportManager_SetFileName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Clear(); oClass:AddMethod( "Clear", @frReportManager_Clear(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadFPFile(); oClass:AddMethod( "LoadFPFile", @frReportManager_LoadFPFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SaveToFPFile(); oClass:AddMethod( "SaveToFPFile", @frReportManager_SaveToFPFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddReport(); oClass:AddMethod( "AddReport", @frReportManager_AddReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SelectReport(); oClass:AddMethod( "SelectReport", @frReportManager_SelectReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER RemoveReport(); oClass:AddMethod( "RemoveReport", @frReportManager_RemoveReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ClearReports(); oClass:AddMethod( "ClearReports", @frReportManager_ClearReports(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Print(); oClass:AddMethod( "Print", @frReportManager_Print(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetErrors(); oClass:AddMethod( "GetErrors", @frReportManager_GetErrors(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER DoExport(); oClass:AddMethod( "DoExport", @frReportManager_DoExport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadStyleSheet(); oClass:AddMethod( "LoadStyleSheet", @frReportManager_LoadStyleSheet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LoadStyleSheetFromString(); oClass:AddMethod( "LoadStyleSheetFromString", @frReportManager_LoadStyleSheetFromString(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER GetProperty(); oClass:AddMethod( "GetProperty", @frReportManager_GetProperty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetProperty(); oClass:AddMethod( "SetProperty", @frReportManager_SetProperty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetEventHandler(); oClass:AddMethod( "SetEventHandler", @frReportManager_SetEventHandler(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddFunction(); oClass:AddMethod( "AddFunction", @frReportManager_AddFunction(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetObjProperty(); oClass:AddMethod( "SetObjProperty", @frReportManager_SetObjProperty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER AddVariable(); oClass:AddMethod( "AddVariable", @frReportManager_AddVariable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetVariable(); oClass:AddMethod( "SetVariable", @frReportManager_SetVariable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetVariable(); oClass:AddMethod( "GetVariable", @frReportManager_GetVariable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER DeleteVariable(); oClass:AddMethod( "DeleteVariable", @frReportManager_DeleteVariable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER DeleteCategory(); oClass:AddMethod( "DeleteCategory", @frReportManager_DeleteCategory(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER SetScriptVar(); oClass:AddMethod( "SetScriptVar", @frReportManager_SetScriptVar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetScriptVar(); oClass:AddMethod( "GetScriptVar", @frReportManager_GetScriptVar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Calc(); oClass:AddMethod( "Calc", @frReportManager_Calc(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER SetWorkArea(); oClass:AddMethod( "SetWorkArea", @frReportManager_SetWorkArea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetMasterDetail(); oClass:AddMethod( "SetMasterDetail", @frReportManager_SetMasterDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetResyncPair(); oClass:AddMethod( "SetResyncPair", @frReportManager_SetResyncPair(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetUserDataSet(); oClass:AddMethod( "SetUserDataSet", @frReportManager_SetUserDataSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetTxtDataSet(); oClass:AddMethod( "SetTxtDataSet", @frReportManager_SetTxtDataSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetFieldAliases(); oClass:AddMethod( "SetFieldAliases", @frReportManager_SetFieldAliases(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Resync(); oClass:AddMethod( "Resync", @frReportManager_Resync(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ClearMasterDetail(); oClass:AddMethod( "ClearMasterDetail", @frReportManager_ClearMasterDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ClearResyncPair(); oClass:AddMethod( "ClearResyncPair", @frReportManager_ClearResyncPair(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER RemoveDataSet(); oClass:AddMethod( "RemoveDataSet", @frReportManager_RemoveDataSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ClearDataSets(); oClass:AddMethod( "ClearDataSets", @frReportManager_ClearDataSets(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetADOConnectStr(); oClass:AddMethod( "SetADOConnectStr", @frReportManager_SetADOConnectStr(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetADOConnectPartStr(); oClass:AddMethod( "SetADOConnectPartStr", @frReportManager_SetADOConnectPartStr(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER StartManualBuild(); oClass:AddMethod( "StartManualBuild", @frReportManager_StartManualBuild(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER MemoAt(); oClass:AddMethod( "MemoAt", @frReportManager_MemoAt(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetDefaultFontProperty(); oClass:AddMethod( "SetDefaultFontProperty", @frReportManager_SetDefaultFontProperty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER NewPage(); oClass:AddMethod( "NewPage", @frReportManager_NewPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetManualObjProperty(); oClass:AddMethod( "SetManualObjProperty", @frReportManager_SetManualObjProperty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER LineAt(); oClass:AddMethod( "LineAt", @frReportManager_LineAt(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER PictureAt(); oClass:AddMethod( "PictureAt", @frReportManager_PictureAt(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER NewReport(); oClass:AddMethod( "NewReport", @frReportManager_NewReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddPage(); oClass:AddMethod( "AddPage", @frReportManager_AddPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddBand(); oClass:AddMethod( "AddBand", @frReportManager_AddBand(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddGlobalDsToReport(); oClass:AddMethod( "AddGlobalDsToReport", @frReportManager_AddGlobalDsToReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetGlobalDSList(); oClass:AddMethod( "GetGlobalDSList", @frReportManager_GetGlobalDSList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddMemo(); oClass:AddMethod( "AddMemo", @frReportManager_AddMemo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddLine(); oClass:AddMethod( "AddLine", @frReportManager_AddLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER AddPicture(); oClass:AddMethod( "AddPicture", @frReportManager_AddPicture(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER IsObjectExists(); oClass:AddMethod( "IsObjectExists", @frReportManager_IsObjectExists(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER CreateFRObject(); oClass:AddMethod( "CreateFRObject", @frReportManager_CreateFRObject(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER EnumAllObjects(); oClass:AddMethod( "EnumAllObjects", @frReportManager_EnumAllObjects(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER GetPropList(); oClass:AddMethod( "GetPropList", @frReportManager_GetPropList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER PrepareScript(); oClass:AddMethod( "PrepareScript", @frReportManager_PrepareScript(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER SendMail(); oClass:AddMethod( "SendMail", @frReportManager_SendMail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER InputBox(); oClass:AddMethod( "InputBox", @frReportManager_InputBox(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SetTabTreeExpanded(); oClass:AddMethod( "SetTabTreeExpanded", @frReportManager_SetTabTreeExpanded(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS frReportManager ;









static FUNCTION frReportManager_Init( cOptionalPath ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
LOCAL oError

   IF ::frSystHandle == 0
      cOptionalPath := IF(cOptionalPath <> NIL, cOptionalPath, "FrSystH.dll")
      ::frSystHandle := FrLoad(cOptionalPath)
      IF ::frSystHandle <> 0
         ::PrepareCalls()
         Call_Func__I(::_InitSyst)

         ::PrintOptions := frPrintOptions():New( self )
         ::PreviewOptions := frPreviewOptions():New( self )
         ::EngineOptions := frEngineOptions():New( self )
         ::ReportOptions := frReportOptions():New( self )
      ELSE
         oError := ErrorNew()
         oError:GenCode     := 21
         oError:Severity    := 2
         oError:subSystem   := "FRH"
         oError:SubCode     := 2012
         oError:Description := "Can not load FRH library"
         oError:FileName    := cOptionalPath
         oError:CanDefault  := .F.
         Eval(ErrorBlock(), oError)
      ENDIF
   ENDIF

RETURN self






static FUNCTION frReportManager_DestroyFR( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager

    ::PrintOptions := NIL
    ::PreviewOptions := NIL
    ::EngineOptions := NIL
    ::ReportOptions := NIL

    Call_Func__I(::_CloseSyst)
    FrUnload(::frSystHandle)
    ::frSystHandle := 0
RETURN self






static FUNCTION frReportManager_PrepareCalls( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager

   InitEngine(::frSystHandle)
   ::_InitSyst := GetFrProcAddress(::frSystHandle, "InitSyst")
   ::_CloseSyst := GetFrProcAddress(::frSystHandle, "CloseSyst")
   ::_FrNotifyError := GetFrProcAddress(::frSystHandle, "FrNotifyError")
   ::_SetIcon := GetFrProcAddress(::frSystHandle, "SetIcon")
   ::_SetTitle := GetFrProcAddress(::frSystHandle, "SetTitle")
   ::_SetVisualActions := GetFrProcAddress(::frSystHandle, "SetVisualActions")
   ::_LoadLangRes := GetFrProcAddress(::frSystHandle, "LoadLangRes")
   ::_SetFormatSettings := GetFrProcAddress(::frSystHandle, "SetFormatSettings")
   ::_ShowReport := GetFrProcAddress(::frSystHandle, "ShowReport")
   ::_PrepareReport := GetFrProcAddress(::frSystHandle, "PrepareReport")
   ::_ShowPreparedReport := GetFrProcAddress(::frSystHandle, "ShowPreparedReport")
   ::_DesignReport := GetFrProcAddress(::frSystHandle, "DesignReport")
   ::_LoadFromFile := GetFrProcAddress(::frSystHandle, "LoadFromFile")
   ::_LoadFromResource := GetFrProcAddress(::frSystHandle, "LoadFromResource")
   ::_LoadFromBlob := GetFrProcAddress(::frSystHandle, "LoadFromBlob")
   ::_LoadFromString := GetFrProcAddress(::frSystHandle, "LoadFromString")
   ::_SaveToFile := GetFrProcAddress(::frSystHandle, "SaveToFile")
   ::_SaveToBlob := GetFrProcAddress(::frSystHandle, "SaveToBlob")
   ::_SaveToString := GetFrProcAddress(::frSystHandle, "SaveToString")
   ::_SetFileName := GetFrProcAddress(::frSystHandle, "SetFileName")
   ::_AddReport := GetFrProcAddress(::frSystHandle, "AddReport")
   ::_SelectReport := GetFrProcAddress(::frSystHandle, "SelectReport")
   ::_RemoveReport := GetFrProcAddress(::frSystHandle, "RemoveReport")
   ::_ClearReports := GetFrProcAddress(::frSystHandle, "ClearReports")
   ::_Clear := GetFrProcAddress(::frSystHandle, "Clear")
   ::_LoadFPFile := GetFrProcAddress(::frSystHandle, "LoadFPFile")
   ::_SaveToFPFile := GetFrProcAddress(::frSystHandle, "SaveToFPFile")
   ::_LoadStyleSheet := GetFrProcAddress(::frSystHandle, "LoadStyleSheet")
   ::_LoadStyleSheetFromString := GetFrProcAddress(::frSystHandle, "LoadStyleSheetFromString")
   ::_Print := GetFrProcAddress(::frSystHandle, "Print")
   ::_GetErrors := GetFrProcAddress(::frSystHandle, "GetErrors")
   ::_DoExport := GetFrProcAddress(::frSystHandle, "DoExport")
   ::_GetProperty := GetFrProcAddress(::frSystHandle, "GetProperty")
   ::_SetProperty := GetFrProcAddress(::frSystHandle, "SetProperty")
   ::_SetObjProperty := GetFrProcAddress(::frSystHandle, "SetObjProperty")
   ::_SetEventHandler := GetFrProcAddress(::frSystHandle, "SetEventHandler")
   ::_AddFunction := GetFrProcAddress(::frSystHandle, "AddFunction")
   ::_AddVariable := GetFrProcAddress(::frSystHandle, "AddVariable")
   ::_SetVariable := GetFrProcAddress(::frSystHandle, "SetVariable")
   ::_GetVariable := GetFrProcAddress(::frSystHandle, "GetVariable")
   ::_DeletVariable := GetFrProcAddress(::frSystHandle, "DeletVariable")
   ::_DeletCategory := GetFrProcAddress(::frSystHandle, "DeletCategory")
   ::_SetScriptVar := GetFrProcAddress(::frSystHandle, "SetScriptVar")
   ::_GetScriptVar := GetFrProcAddress(::frSystHandle, "GetScriptVar")
   ::_Calc := GetFrProcAddress(::frSystHandle, "Calc")
   ::_SetWorkArea := GetFrProcAddress(::frSystHandle, "SetWorkArea")
   ::_SetMasterDetail := GetFrProcAddress(::frSystHandle, "SetMasterDetail")
   ::_SetResyncPair := GetFrProcAddress(::frSystHandle, "SetResyncPair")
   ::_SetUserDataSet := GetFrProcAddress(::frSystHandle, "SetUserDataSet")
   ::_Resync := GetFrProcAddress(::frSystHandle, "Resync")
   ::_SetFieldAliases := GetFrProcAddress(::frSystHandle, "SetFieldAliases")
   ::_RemoveDataSet := GetFrProcAddress(::frSystHandle, "RemoveDataSet")
   ::_ClearDataSets := GetFrProcAddress(::frSystHandle, "ClearDataSets")
   ::_ClearMasterDetail := GetFrProcAddress(::frSystHandle, "ClearMasterDetail")
   ::_ClearResyncPair := GetFrProcAddress(::frSystHandle, "ClearResyncPair")
   ::_SetADOConnectStr := GetFrProcAddress(::frSystHandle, "SetADOConnectStr")
   ::_SetADOConnectPartStr := GetFrProcAddress(::frSystHandle, "SetADOConnectPartStr")
   ::_StartManualBuild := GetFrProcAddress(::frSystHandle, "StartManualBuild")
   ::_MemoAt := GetFrProcAddress(::frSystHandle, "MemoAt")
   ::_SetDefaultFontProperty := GetFrProcAddress(::frSystHandle, "SetDefaultFontProperty")
   ::_NewPage := GetFrProcAddress(::frSystHandle, "NewPage")
   ::_SetManualObjProperty := GetFrProcAddress(::frSystHandle, "SetManualObjProperty")
   ::_LineAt := GetFrProcAddress(::frSystHandle, "LineAt")
   ::_PictureAt := GetFrProcAddress(::frSystHandle, "PictureAt")
   ::_NewReport := GetFrProcAddress(::frSystHandle, "NewReport")
   ::_AddPage := GetFrProcAddress(::frSystHandle, "AddPage")
   ::_AddBand := GetFrProcAddress(::frSystHandle, "AddBand")
   ::_AddGlobalDsToReport := GetFrProcAddress(::frSystHandle, "AddGlobalDsToReport")
   ::_GetGlobalDSList := GetFrProcAddress(::frSystHandle, "GetGlobalDSList")
   ::_AddMemo := GetFrProcAddress(::frSystHandle, "AddMemo")
   ::_AddLine := GetFrProcAddress(::frSystHandle, "AddLine")
   ::_AddPicture := GetFrProcAddress(::frSystHandle, "AddPicture")
   ::_IsObjectExists := GetFrProcAddress(::frSystHandle, "IsObjectExists")
   ::_CreateFRObject := GetFrProcAddress(::frSystHandle, "CreateFRObject")
   ::_EnumAllObjects := GetFrProcAddress(::frSystHandle, "EnumAllObjects")
   ::_GetPropList := GetFrProcAddress(::frSystHandle, "GetPropList")
   ::_PrepareScript := GetFrProcAddress(::frSystHandle, "PrepareScript")
   ::_SendMail := GetFrProcAddress(::frSystHandle, "SendMail")
   ::_frMsgBox := GetFrProcAddress(::frSystHandle, "frMessageBox")
   ::_frInputBox := GetFrProcAddress(::frSystHandle, "frInputBox")
   ::_SetTabTreeExpanded := GetFrProcAddress(::frSystHandle, "SetTabTreeExpanded")
   ::_SetTxtDataSet := GetFrProcAddress(::frSystHandle, "SetTxtDataSet")

RETURN NIL






static FUNCTION frReportManager_FrNotifyError( oError ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
LOCAL cMessage, cCaption

   Call_Proc_(::_FrNotifyError)

   cCaption := iif( oError:severity > 1, "Error", "Warning" )


   IF ValType( oError:subsystem ) == "C"
      cMessage := oError:subsystem()
   ELSE
      cMessage := "???"
   ENDIF

   IF ValType( oError:subCode ) == "N"
      cMessage := cMessage + "/" + LTrim( Str( oError:subCode ) )
   ELSE
      cMessage := cMessage + "/???"
   ENDIF

   IF ValType( oError:description )  == "C"
      cMessage := cMessage + "  " + oError:description
   ENDIF

   DO CASE
   CASE !Empty( oError:filename )
      cMessage := cMessage + ": " + oError:filename
   CASE !Empty( oError:operation )
      cMessage := cMessage + ": " + oError:operation
   ENDCASE

   Call_Func_CCI_I(::_FrMsgBox, cMessage, cCaption, iif( oError:severity > 1, 16, 48))

RETURN .T.







static FUNCTION frReportManager_SetIcon( xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
LOCAL lRes
   IF ValType(xValue) = "C"
      lRes := Call_Func_IC_I(::_SetIcon, 0, xValue) == 1
   ELSE
      lRes := Call_Func_IC_I(::_SetIcon, xValue, NIL) == 1
   ENDIF
RETURN lRes






static FUNCTION frReportManager_SetTitle( cTitle ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_C_I(::_SetTitle, cTitle) == 1




























static FUNCTION frReportManager_SetVisualActions( nAction, lTaskListToFalse, bBeforeAction, bAfterAction ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_ParamB, tmp_ParamA
PRIVATE tmp_ParamB, tmp_ParamA
   IF nAction == 3
     tmp_ParamB := bBeforeAction
     tmp_ParamA := bAfterAction
   ENDIF
   lTaskListToFalse := IF(lTaskListToFalse <> NIL, IF(lTaskListToFalse, 1, 0), 0)
RETURN Call_Func_II_I(::_SetVisualActions, nAction, lTaskListToFalse) == 1






static FUNCTION frReportManager_LoadLangRes( cLangFile ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_C_I(::_LoadLangRes, cLangFile) == 1






static FUNCTION frReportManager_SetFormatSettings( nSetting, xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := xValue
   CALL_PROC_I(::_SetFormatSettings, nSetting)
RETURN NIL










static FUNCTION frReportManager_ShowReport( nNotClear ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   ::bSaveError := ErrorBlock( {|oError| ::FrNotifyError(oError) })
   nNotClear := IF(nNotClear <> NIL, nNotClear, 0)
   Call_Func_I_I(::_ShowReport, nNotClear)
   ErrorBlock( ::bSaveError )
RETURN self






static FUNCTION frReportManager_PrepareReport( nNotClear ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
LOCAL RES
   ::bSaveError := ErrorBlock( {|oError| ::FrNotifyError(oError) })
   nNotClear := IF(nNotClear <> NIL, nNotClear, 0)
   RES := Call_Func_I_I(::_PrepareReport, nNotClear) == 1
   ErrorBlock( ::bSaveError )
RETURN RES







static FUNCTION frReportManager_ShowPreparedReport( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   ::bSaveError := ErrorBlock( {|oError| ::FrNotifyError(oError) })
   Call_Func__I(::_ShowPreparedReport)
   ErrorBlock( ::bSaveError )
RETURN self






static FUNCTION frReportManager_DesignReport( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   ::bSaveError := ErrorBlock( {|oError| ::FrNotifyError(oError) })
   Call_Func__I(::_DesignReport)
   ErrorBlock( ::bSaveError )
RETURN self







static FUNCTION frReportManager_LoadFromFile( cFileName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_C_I(::_LoadFromFile, cFileName) == 1







static FUNCTION frReportManager_LoadFromResource( xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
LOCAL lRes
   IF ValType(xValue) = "C"
      lRes := Call_Func_IC_I(::_LoadFromResource, 0, xValue) == 1
   ELSE
      lRes := Call_Func_IC_I(::_LoadFromResource, xValue, NIL) == 1
   ENDIF
RETURN lRes







static FUNCTION frReportManager_LoadFromBlob( nWorkArea, cFieldName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_IC_I(::_LoadFromBlob, nWorkArea, cFieldName) == 1







static FUNCTION frReportManager_LoadFromString( cString ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_C_I(::_LoadFromString, cString) == 1






static FUNCTION frReportManager_SaveToFile( cFileName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_C(::_SaveToFile, cFileName)
RETURN self






static FUNCTION frReportManager_SaveToBlob( nWorkArea, cFieldName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Proc_IC(::_SaveToBlob, nWorkArea, cFieldName)






static FUNCTION frReportManager_SaveToString( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Result
PRIVATE tmp_Result := ""
   CALL_PROC_(::_SaveToString)
RETURN tmp_Result


static FUNCTION frReportManager_SetFileName( cFileName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   CALL_PROC_C(::_SetFileName, cFileName)
RETURN NIL


static FUNCTION frReportManager_AddReport( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager

RETURN Call_Func__I(::_AddReport)


static FUNCTION frReportManager_SelectReport( nReport ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager

RETURN CALL_FUNC_I_I(::_SelectReport, nReport)


static FUNCTION frReportManager_RemoveReport( nReport ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   CALL_PROC_I(::_RemoveReport, nReport)
RETURN NIL

static FUNCTION frReportManager_ClearReports( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   CALL_PROC_(::_ClearReports)
RETURN NIL







static FUNCTION frReportManager_Clear( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_(::_Clear)
RETURN self







static FUNCTION frReportManager_LoadFPFile( cFileName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_C_I(::_LoadFPFile, cFileName) == 1






static FUNCTION frReportManager_SaveToFPFile( cFileName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_C(::_SaveToFPFile, cFileName)
RETURN self






static FUNCTION frReportManager_LoadStyleSheet( cFileName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_C(::_LoadStyleSheet, cFileName)
RETURN self

static FUNCTION frReportManager_LoadStyleSheetFromString( cString ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_C(::_LoadStyleSheetFromString, cString)
RETURN self









static FUNCTION frReportManager_Print( lDialogIsChild ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
LOCAL RES
  ::bSaveError := ErrorBlock( {|oError| ::FrNotifyError(oError) })
  lDialogIsChild := IF(lDialogIsChild <> nil, IF(lDialogIsChild, 1, 0), 0)
  RES := Call_Func_I_I(::_Print, lDialogIsChild) == 1
  ErrorBlock( ::bSaveError )
RETURN RES






static FUNCTION frReportManager_GetErrors( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func__I(::_GetErrors)
RETURN tmp_RetVal













static FUNCTION frReportManager_DoExport( cExportObjectName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
  Call_Proc_C(::_DoExport, cExportObjectName)
RETURN Self
































static FUNCTION frReportManager_GetProperty( sObjectName, sPropName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_CC_I(::_GetProperty, sObjectName, sPropName)
RETURN tmp_RetVal

static FUNCTION frReportManager_SetProperty( sObjectName, sPropName, Value ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := Value
RETURN Call_Func_CC_I(::_SetProperty, sObjectName, sPropName) == 1


static FUNCTION frReportManager_SetObjProperty( cObjectName, cPropName, cObjToSetName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_CCC_I(::_SetObjProperty, cObjectName, cPropName, cObjToSetName) == 1







































static FUNCTION frReportManager_SetEventHandler( cObjectName, cPropName, bEventHandler ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := bEventHandler
RETURN Call_Func_CC_I(::_SetEventHandler, cObjectName, cPropName) == 1










static FUNCTION frReportManager_AddFunction( cFunction, cCategory, cDescription ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_CCC(::_AddFunction, cFunction, IF(cCategory <> NIL, cCategory, "") , IF(cDescription <> NIL, cDescription, ""))
RETURN Self



















static FUNCTION frReportManager_AddVariable( cCategory, cName, xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := xValue
   Call_Proc_CC(::_AddVariable, cCategory, cName)
RETURN Self






static FUNCTION frReportManager_SetVariable( cName, xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := xValue
   Call_Proc_C(::_SetVariable, cName)
RETURN Self






static FUNCTION frReportManager_GetVariable( cName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_GetVariable, cName)
RETURN tmp_RetVal






static FUNCTION frReportManager_DeleteVariable( cName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_C(::_DeletVariable, cName)
RETURN Self






static FUNCTION frReportManager_DeleteCategory( cCategory ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_C(::_DeletCategory, cCategory)
RETURN Self











static FUNCTION frReportManager_SetScriptVar( sName, xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := xValue
   Call_Proc_C(::_SetScriptVar, sName)
RETURN Self

static FUNCTION frReportManager_GetScriptVar( sName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_GetScriptVar, sName)
RETURN tmp_RetVal







static FUNCTION frReportManager_Calc( sExpression ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_Calc, sExpression)
RETURN tmp_RetVal















static FUNCTION frReportManager_SetWorkArea( cFrAlias, nWorkArea, lOem, aRangeParams ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
LOCAL Res := .F.
MEMVAR tmp_Params
PRIVATE tmp_Params := aRangeParams
   IF (nWorkArea)->(Used())
      lOem := IF(lOem <> NIL, IF(lOem, 1, 0), 0)
      aRangeParams := IF(aRangeParams <> NIL, 1, 0)
      Res := Call_Func_CIII_I(::_SetWorkArea, cFrAlias, nWorkArea, lOem, aRangeParams) == 1
   ENDIF
RETURN Res










static FUNCTION frReportManager_SetMasterDetail( cMasterAlias, cDetailAlias, bScopeValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := bScopeValue
RETURN Call_Func_CC_I(::_SetMasterDetail, cMasterAlias, cDetailAlias) == 1











static FUNCTION frReportManager_SetResyncPair( cParentAlias, cChildlAlias ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_CC_I(::_SetResyncPair, cParentAlias, cChildlAlias) == 1










static FUNCTION frReportManager_SetUserDataSet( sFrAlias, sFields, bGoTop, bSkipPlus1, bSkipMinus1,  bCheckEOF, bGetValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Params
PRIVATE tmp_Params := {bGoTop, bSkipPlus1, bSkipMinus1, bCheckEOF, bGetValue}
RETURN Call_Func_CC_I(::_SetUserDataSet, sFrAlias, sFields) == 1








static FUNCTION frReportManager_SetTxtDataSet( sFrAlias, sFileName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_CC_I(::_SetTxtDataSet, sFrAlias, sFileName) == 1








static FUNCTION frReportManager_Resync( cFrAlias ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_C_I(::_Resync, cFrAlias) == 1










static FUNCTION frReportManager_SetFieldAliases( cFrAlias, cFieldAliases ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_CC_I(::_SetFieldAliases, cFrAlias, cFieldAliases) == 1







static FUNCTION frReportManager_RemoveDataSet( cFrAlias ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_C_I(::_RemoveDataSet, cFrAlias) == 1







static FUNCTION frReportManager_ClearDataSets( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_(::_ClearDataSets)
RETURN self







static FUNCTION frReportManager_ClearMasterDetail( cDetailAlias ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_C(::_ClearMasterDetail, cDetailAlias)
RETURN self







static FUNCTION frReportManager_ClearResyncPair( cParentAlias, cChildlAlias ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_CC_I(::_ClearResyncPair, cParentAlias, cChildlAlias) == 1






static FUNCTION frReportManager_SetADOConnectStr( sFrAlias, sStr ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_CC_I(::_SetADOConnectStr, sFrAlias, sStr) == 1








static FUNCTION frReportManager_SetADOConnectPartStr( sFrAlias, sKey, sValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_CCC_I(::_SetADOConnectPartStr, sFrAlias, sKey, sValue) == 1









static FUNCTION frReportManager_StartManualBuild( bManualBlock, nOrientation, nPaperSize, nUnits ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := bManualBlock
   nOrientation := IF(nOrientation <> NIL, nOrientation, 0)
   nPaperSize := IF(nPaperSize <> NIL, nPaperSize, -1)
   nUnits := IF(nUnits <> NIL, nUnits, 3)
   Call_Func_III_I(::_StartManualBuild, nOrientation, nPaperSize, nUnits)
RETURN NIL


static FUNCTION frReportManager_MemoAt( cStr, nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param, tmp_Result
PRIVATE tmp_Param := {nLeft, nTop, nWidth, nHeight}, tmp_Result := ""
   Call_Func_C_I(::_MemoAt, cStr)
RETURN tmp_Result


static FUNCTION frReportManager_SetDefaultFontProperty( cPropName, xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := xValue
   Call_Func_C_I(::_SetDefaultFontProperty, cPropName)
RETURN NIL


static FUNCTION frReportManager_NewPage( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   Call_Proc_(::_NewPage)
RETURN NIL


static FUNCTION frReportManager_SetManualObjProperty( cObjName, cPropName, xValue ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := xValue
   Call_Func_CC_I(::_SetManualObjProperty, cObjName, cPropName)
RETURN NIL


static FUNCTION frReportManager_LineAt( nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param, tmp_Result
PRIVATE tmp_Param := {nLeft, nTop, nWidth, nHeight}, tmp_Result := ""
   Call_Func__I(::_LineAt)
RETURN tmp_Result


static FUNCTION frReportManager_PictureAt( cFileName, nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param, tmp_Result
PRIVATE tmp_Param := {nLeft, nTop, nWidth, nHeight}, tmp_Result := ""
   Call_Func_C_I(::_PictureAt, cFileName)
RETURN tmp_Result









static FUNCTION frReportManager_NewReport( cPageName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   CALL_PROC_C(::_NewReport, cPageName)
RETURN NIL


static FUNCTION frReportManager_AddPage( cPageName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   CALL_PROC_C(::_AddPage, cPageName)
RETURN NIL


static FUNCTION frReportManager_AddBand( cBandName, cParentPage, nBandType ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN CALL_FUNC_CCI_I(::_AddBand, cBandName, cParentPage, nBandType) > 0


static FUNCTION frReportManager_AddGlobalDsToReport( cDataSetName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN CALL_FUNC_C_I(::_AddGlobalDsToReport, cDataSetName) > 0


static FUNCTION frReportManager_GetGlobalDSList( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Result
PRIVATE tmp_Result := ""
   CALL_PROC_(::_GetGlobalDSList)
RETURN tmp_Result


static FUNCTION frReportManager_AddMemo( cParent, cName, cStr, nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := {nLeft, nTop, nWidth, nHeight}
RETURN Call_Func_CCC_I(::_AddMemo, cParent, cName, cStr) > 0


static FUNCTION frReportManager_AddLine( cParent, cName, nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := {nLeft, nTop, nWidth, nHeight}
RETURN Call_Func_CC_I(::_AddLine, cParent, cName) > 0


static FUNCTION frReportManager_AddPicture( cParent, cName, cFileName, nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := {nLeft, nTop, nWidth, nHeight}
RETURN Call_Func_CCC_I(::_AddPicture, cParent, cName, cFileName) > 0


static FUNCTION frReportManager_IsObjectExists( cObjName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN CALL_FUNC_C_I(::_IsObjectExists, cObjName) > 0


static FUNCTION frReportManager_CreateFRObject( cClassName, cParent, cName, nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := {nLeft, nTop, nWidth, nHeight}
RETURN CALL_FUNC_CCC_I(::_CreateFRObject, cClassName, cParent, cName) > 0


static FUNCTION frReportManager_EnumAllObjects( bEnumBlock ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Param
PRIVATE tmp_Param := bEnumBlock
   CALL_PROC_(::_EnumAllObjects)
RETURN NIL


static FUNCTION frReportManager_GetPropList( cObjName ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal := ""
   CALL_PROC_C(::_GetPropList, cObjName)
RETURN tmp_RetVal


static FUNCTION frReportManager_PrepareScript( ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
   CALL_PROC_(::_PrepareScript)
RETURN NIL











static FUNCTION frReportManager_SendMail( cServer, nPort, cUserField, cPasswordField, cFromField, cToField, cSubjectField, cCompanyField, cTextField, cFileNames ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Result
PRIVATE tmp_Result := ""


   Call_Func_CICCCCCCCC_I(::_SendMail, cServer, nPort, cUserField, cPasswordField, cFromField, cToField, cSubjectField, cCompanyField, cTextField, cFileNames)
RETURN tmp_Result


static FUNCTION frReportManager_InputBox( cCaption, cPrompt, cDefault ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
MEMVAR tmp_Result
PRIVATE tmp_Result := ""

   Call_Func_CCC_I(::_frInputBox, cCaption, cPrompt, cDefault)
RETURN tmp_Result


static FUNCTION frReportManager_SetTabTreeExpanded( nTabTreeViews, lExpand ) ; local Self AS CLASS frReportManager := QSelf() AS CLASS frReportManager
RETURN Call_Func_II_I(::_SetTabTreeExpanded, nTabTreeViews, IF(lExpand, 1, 0))














_HB_CLASS frEngineOptions ; function frEngineOptions ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "frEngineOptions", iif( .F., { }, { @HBObject() } ), @frEngineOptions() ) ) ;
   nScope := 4 ; ( ( nScope ) )

       _HB_MEMBER { frManager, _SetConvertNulls, _SetDoublePass, _SetPrintIfEmpty, _SetSilentMode, _SetNewSilentMode, _SetMaxMemSize, _SetTempDir, _SetUseFileCache } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"frManager", "_SetConvertNulls", "_SetDoublePass", "_SetPrintIfEmpty", "_SetSilentMode", "_SetNewSilentMode", "_SetMaxMemSize", "_SetTempDir", "_SetUseFileCache"}, .F. )

       _HB_MEMBER PrepareCalls(); oClass:AddMethod( "PrepareCalls", @frEngineOptions_PrepareCalls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   nScope := 1 ; ( ( nScope ) )
       _HB_MEMBER Init(); oClass:AddMethod( "Init", @frEngineOptions_Init(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetConvertNulls(); oClass:AddMethod( "SetConvertNulls", @frEngineOptions_SetConvertNulls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetDoublePass(); oClass:AddMethod( "SetDoublePass", @frEngineOptions_SetDoublePass(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetPrintIfEmpty(); oClass:AddMethod( "SetPrintIfEmpty", @frEngineOptions_SetPrintIfEmpty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetSilentMode(); oClass:AddMethod( "SetSilentMode", @frEngineOptions_SetSilentMode(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetNewSilentMode(); oClass:AddMethod( "SetNewSilentMode", @frEngineOptions_SetNewSilentMode(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetMaxMemSize(); oClass:AddMethod( "SetMaxMemSize", @frEngineOptions_SetMaxMemSize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetTempDir(); oClass:AddMethod( "SetTempDir", @frEngineOptions_SetTempDir(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetUseFileCache(); oClass:AddMethod( "SetUseFileCache", @frEngineOptions_SetUseFileCache(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS frEngineOptions ;







static FUNCTION frEngineOptions_Init( oManager ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
   ::frManager := oManager
   ::PrepareCalls()
RETURN self






static FUNCTION frEngineOptions_PrepareCalls( ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions

   ::_SetConvertNulls := GetFrProcAddress(::frManager:frSystHandle, "SetConvertNulls")
   ::_SetDoublePass := GetFrProcAddress(::frManager:frSystHandle, "SetDoublePass")
   ::_SetPrintIfEmpty := GetFrProcAddress(::frManager:frSystHandle, "SetPrintIfEmpty")
   ::_SetSilentMode := GetFrProcAddress(::frManager:frSystHandle, "SetSilentMode")
   ::_SetNewSilentMode := GetFrProcAddress(::frManager:frSystHandle, "SetNewSilentMode")
   ::_SetMaxMemSize := GetFrProcAddress(::frManager:frSystHandle, "SetMaxMemSize")
   ::_SetTempDir := GetFrProcAddress(::frManager:frSystHandle, "SetTempDir")
   ::_SetUseFileCache := GetFrProcAddress(::frManager:frSystHandle, "SetUseFileCache")

RETURN NIL








static FUNCTION frEngineOptions_SetConvertNulls( lConvert ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
  Call_Proc_I(::_SetConvertNulls, IF(lConvert <> NIL, IF(lConvert, 1, 0) , 1))
RETURN self






static FUNCTION frEngineOptions_SetDoublePass( lDouble ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
  Call_Proc_I(::_SetDoublePass, IF(lDouble <> NIL, IF(lDouble, 1, 0) , 0))
RETURN self







static FUNCTION frEngineOptions_SetPrintIfEmpty( lPrint ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
  Call_Proc_I(::_SetPrintIfEmpty, IF(lPrint <> NIL, IF(lPrint, 1, 0) , 1))
RETURN self








static FUNCTION frEngineOptions_SetSilentMode( lSilent ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
  Call_Proc_I(::_SetSilentMode, IF(lSilent <> NIL, IF(lSilent, 1, 0) , 0))
RETURN self









static FUNCTION frEngineOptions_SetNewSilentMode( nMode ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
   Call_Proc_I(::_SetNewSilentMode, nMode)
RETURN NIL













static FUNCTION frEngineOptions_SetMaxMemSize( nSize ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
   Call_Proc_I(::_SetMaxMemSize, nSize)
RETURN self







static FUNCTION frEngineOptions_SetTempDir( sDir ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetTempDir, IF(sDir <> NIL, sDir, ""))
RETURN tmp_RetVal







static FUNCTION frEngineOptions_SetUseFileCache( lUse ) ; local Self AS CLASS frEngineOptions := QSelf() AS CLASS frEngineOptions
   Call_Proc_I(::_SetUseFileCache, IF(lUse <> NIL, IF(lUse, 1, 0) , 0))
RETURN self











_HB_CLASS frPrintOptions ; function frPrintOptions ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "frPrintOptions", iif( .F., { }, { @HBObject() } ), @frPrintOptions() ) ) ;
   nScope := 4 ; ( ( nScope ) )

       _HB_MEMBER { frManager, _SetCopies, _SetCollate, _SetPageNumbers, _SetPrinter, _SetPrintPages, _SetShowDialog, _SetReverse, _ClearOptions } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"frManager", "_SetCopies", "_SetCollate", "_SetPageNumbers", "_SetPrinter", "_SetPrintPages", "_SetShowDialog", "_SetReverse", "_ClearOptions"}, .F. )

       _HB_MEMBER PrepareCalls(); oClass:AddMethod( "PrepareCalls", @frPrintOptions_PrepareCalls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   nScope := 1 ; ( ( nScope ) )
       _HB_MEMBER Init(); oClass:AddMethod( "Init", @frPrintOptions_Init(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetCopies(); oClass:AddInline( "SetCopies", {|Self, nCopies | ( ( Self ) ), Call_Func_I_I(::_SetCopies, IF(nCopies <> NIL, nCopies, -1)) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetCollate(); oClass:AddMethod( "SetCollate", @frPrintOptions_SetCollate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetPageNumbers(); oClass:AddMethod( "SetPageNumbers", @frPrintOptions_SetPageNumbers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetPrinter(); oClass:AddMethod( "SetPrinter", @frPrintOptions_SetPrinter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetPrintPages(); oClass:AddInline( "SetPrintPages", {|Self, nPages | ( ( Self ) ), Call_Func_I_I(::_SetPrintPages, IF(nPages <> NIL, nPages, -1)) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetShowDialog(); oClass:AddMethod( "SetShowDialog", @frPrintOptions_SetShowDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetReverse(); oClass:AddMethod( "SetReverse", @frPrintOptions_SetReverse(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER ClearOptions(); oClass:AddMethod( "ClearOptions", @frPrintOptions_ClearOptions(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS frPrintOptions ;









static FUNCTION frPrintOptions_Init( oManager ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions
   ::frManager := oManager
   ::PrepareCalls()
RETURN self






static FUNCTION frPrintOptions_PrepareCalls( ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions

   ::_SetCopies := GetFrProcAddress(::frManager:frSystHandle, "SetCopies")
   ::_SetCollate := GetFrProcAddress(::frManager:frSystHandle, "SetCollate")
   ::_SetPageNumbers := GetFrProcAddress(::frManager:frSystHandle, "SetPageNumbers")
   ::_SetPrinter := GetFrProcAddress(::frManager:frSystHandle, "SetPrinter")
   ::_SetPrintPages := GetFrProcAddress(::frManager:frSystHandle, "SetPrintPages")
   ::_SetShowDialog := GetFrProcAddress(::frManager:frSystHandle, "SetShowDialog")
   ::_SetReverse := GetFrProcAddress(::frManager:frSystHandle, "SetReverse")
   ::_ClearOptions := GetFrProcAddress(::frManager:frSystHandle, "ClearOptions")

RETURN NIL















static FUNCTION frPrintOptions_SetCollate( lCollate ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions
   lCollate := IF(lCollate <> NIL, IF(lCollate, 1, 0), 2)
RETURN IF(Call_Func_I_I(::_SetCollate, lCollate) == 1, .T., .F.)







static FUNCTION frPrintOptions_SetPageNumbers( sParam ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal := ""
   Call_Func_IC_I(::_SetPageNumbers, IF(sParam <> NIL, 1, 0),IF(sParam <> NIL, sParam, ""))
RETURN tmp_RetVal






static FUNCTION frPrintOptions_SetPrinter( sPrinter ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal := ""
   Call_Func_IC_I(::_SetPrinter, IF(sPrinter <> NIL, 1, 0),IF(sPrinter <> NIL, sPrinter, ""))
RETURN tmp_RetVal




















static FUNCTION frPrintOptions_SetShowDialog( lShow ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions
   lShow := IF(lShow <> NIL, IF(lShow, 1, 0), 2)
RETURN IF(Call_Func_I_I(::_SetShowDialog, lShow) == 1, .T., .F.)






static FUNCTION frPrintOptions_SetReverse( lReverse ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions
   lReverse := IF(lReverse <> NIL, IF(lReverse, 1, 0), 2)
RETURN IF(Call_Func_I_I(::_SetReverse, lReverse) == 1, .T., .F.)






static FUNCTION frPrintOptions_ClearOptions( ) ; local Self AS CLASS frPrintOptions := QSelf() AS CLASS frPrintOptions
   Call_Proc_(::_ClearOptions)
RETURN self











_HB_CLASS frPreviewOptions ; function frPreviewOptions ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "frPreviewOptions", iif( .F., { }, { @HBObject() } ), @frPreviewOptions() ) ) ;
   nScope := 4 ; ( ( nScope ) )


       _HB_MEMBER { frManager, _SetAllowEdit, _SetButtons, _SetDoubleBuffered, _SetMaximized, _SetBounds, _SetOutlineVisible, _SetOutlineExpand, _SetOutlineWidth, _SetShowCaptions, _SetZoom, _SetZoomMode, _SetPictureCacheInFile, _SetModal, _SetRemoveReportOnClose } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"frManager", "_SetAllowEdit", "_SetButtons", "_SetDoubleBuffered", "_SetMaximized", "_SetBounds", "_SetOutlineVisible", "_SetOutlineExpand", "_SetOutlineWidth", "_SetShowCaptions", "_SetZoom", "_SetZoomMode", "_SetPictureCacheInFile", "_SetModal", "_SetRemoveReportOnClose"}, .F. )

       _HB_MEMBER PrepareCalls(); oClass:AddMethod( "PrepareCalls", @frPreviewOptions_PrepareCalls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   nScope := 1 ; ( ( nScope ) )
       _HB_MEMBER Init(); oClass:AddMethod( "Init", @frPreviewOptions_Init(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetAllowEdit(); oClass:AddMethod( "SetAllowEdit", @frPreviewOptions_SetAllowEdit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetButtons(); oClass:AddMethod( "SetButtons", @frPreviewOptions_SetButtons(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetDoubleBuffered(); oClass:AddMethod( "SetDoubleBuffered", @frPreviewOptions_SetDoubleBuffered(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetMaximized(); oClass:AddMethod( "SetMaximized", @frPreviewOptions_SetMaximized(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetBounds(); oClass:AddMethod( "SetBounds", @frPreviewOptions_SetBounds(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetOutlineVisible(); oClass:AddMethod( "SetOutlineVisible", @frPreviewOptions_SetOutlineVisible(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetOutlineExpand(); oClass:AddMethod( "SetOutlineExpand", @frPreviewOptions_SetOutlineExpand(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetOutlineWidth(); oClass:AddMethod( "SetOutlineWidth", @frPreviewOptions_SetOutlineWidth(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetShowCaptions(); oClass:AddMethod( "SetShowCaptions", @frPreviewOptions_SetShowCaptions(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetZoom(); oClass:AddMethod( "SetZoom", @frPreviewOptions_SetZoom(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetZoomMode(); oClass:AddMethod( "SetZoomMode", @frPreviewOptions_SetZoomMode(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetModal(); oClass:AddMethod( "SetModal", @frPreviewOptions_SetModal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetPictureCacheInFile(); oClass:AddMethod( "SetPictureCacheInFile", @frPreviewOptions_SetPictureCacheInFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetRemoveReportOnClose(); oClass:AddMethod( "SetRemoveReportOnClose", @frPreviewOptions_SetRemoveReportOnClose(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS frPreviewOptions ;









static FUNCTION frPreviewOptions_Init( oManager ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   ::frManager := oManager
   ::PrepareCalls()
RETURN self






static FUNCTION frPreviewOptions_PrepareCalls( ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions

   ::_SetAllowEdit := GetFrProcAddress(::frManager:frSystHandle, "SetAllowEdit")
   ::_SetButtons := GetFrProcAddress(::frManager:frSystHandle, "SetButtons")
   ::_SetDoubleBuffered := GetFrProcAddress(::frManager:frSystHandle, "SetDoubleBuffered")
   ::_SetMaximized := GetFrProcAddress(::frManager:frSystHandle, "SetMaximized")
   ::_SetBounds := GetFrProcAddress(::frManager:frSystHandle, "SetBounds")
   ::_SetOutlineVisible := GetFrProcAddress(::frManager:frSystHandle, "SetOutlineVisible")
   ::_SetOutlineExpand := GetFrProcAddress(::frManager:frSystHandle, "SetOutlineExpand")
   ::_SetOutlineWidth := GetFrProcAddress(::frManager:frSystHandle, "SetOutlineWidth")
   ::_SetShowCaptions := GetFrProcAddress(::frManager:frSystHandle, "SetShowCaptions")
   ::_SetZoom := GetFrProcAddress(::frManager:frSystHandle, "SetZoom")
   ::_SetZoomMode := GetFrProcAddress(::frManager:frSystHandle, "SetZoomMode")
   ::_SetPictureCacheInFile := GetFrProcAddress(::frManager:frSystHandle,"SetPictureCacheInFile")
   ::_SetModal := GetFrProcAddress(::frManager:frSystHandle,"SetModal")
   ::_SetRemoveReportOnClose := GetFrProcAddress(::frManager:frSystHandle, "SetRemoveReportOnClose")

RETURN NIL







static FUNCTION frPreviewOptions_SetAllowEdit( lAllow ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetAllowEdit, IF(lAllow <> NIL, IF(lAllow, 1, 0) , 1))
RETURN self









static FUNCTION frPreviewOptions_SetButtons( nButtons ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   nButtons := IF(nButtons <> NIL, nButtons, 0)
   Call_Proc_I(::_SetButtons, nButtons)
RETURN self









static FUNCTION frPreviewOptions_SetDoubleBuffered( lDouble ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetDoubleBuffered, IF(lDouble <> NIL, IF(lDouble, 1, 0) , 1))
RETURN self






static FUNCTION frPreviewOptions_SetMaximized( lMax ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetMaximized, IF(lMax <> NIL, IF(lMax, 1, 0) , 1))
RETURN self






static FUNCTION frPreviewOptions_SetBounds( nLeft, nTop, nWidth, nHeight ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_IIII(::_SetBounds, nLeft, nTop, nWidth, nHeight)
RETURN self







static FUNCTION frPreviewOptions_SetOutlineVisible( lVis ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetOutlineVisible, IF(lVis <> NIL, IF(lVis, 1, 0) , 0))
RETURN self







static FUNCTION frPreviewOptions_SetOutlineExpand( lExpand ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetOutlineExpand, IF(lExpand <> NIL, IF(lExpand, 1, 0) , 1))
RETURN self






static FUNCTION frPreviewOptions_SetOutlineWidth( nWidth ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetOutlineWidth, IF(nWidth <> NIL, nWidth , 120))
RETURN self










static FUNCTION frPreviewOptions_SetShowCaptions( lShow ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetShowCaptions, IF(lShow <> NIL, IF(lShow, 1, 0) , 0))
RETURN self






static FUNCTION frPreviewOptions_SetZoom( nZoom ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
MEMVAR tmp_Param
PRIVATE tmp_Param := nZoom
   Call_Proc_I(::_SetZoom, IF(nZoom <> NIL, nZoom , 0))
RETURN tmp_Param












static FUNCTION frPreviewOptions_SetZoomMode( nZMode ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
RETURN Call_Proc_I(::_SetZoomMode, IF(nZMode <> NIL, nZMode, -1))








static FUNCTION frPreviewOptions_SetPictureCacheInFile( lCache ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetPictureCacheInFile, IF(lCache <> NIL, IF(lCache, 1, 0) , 0))
RETURN self









static FUNCTION frPreviewOptions_SetModal( lModal ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetModal, IF(lModal, 1, 0))
RETURN nil










static FUNCTION frPreviewOptions_SetRemoveReportOnClose( lRemove ) ; local Self AS CLASS frPreviewOptions := QSelf() AS CLASS frPreviewOptions
   Call_Proc_I(::_SetRemoveReportOnClose, IF(lRemove, 1, 0))
RETURN nil













_HB_CLASS frReportOptions ; function frReportOptions ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "frReportOptions", iif( .F., { }, { @HBObject() } ), @frReportOptions() ) ) ;
   nScope := 4 ; ( ( nScope ) )

       _HB_MEMBER { frManager, _SetAuthor, _SetCompressed, _SetCreateDate, _SetLastChange, _SetDescription, _SetInitString, _SetName, _SetPassword, _SetVersion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"frManager", "_SetAuthor", "_SetCompressed", "_SetCreateDate", "_SetLastChange", "_SetDescription", "_SetInitString", "_SetName", "_SetPassword", "_SetVersion"}, .F. )

       _HB_MEMBER PrepareCalls(); oClass:AddMethod( "PrepareCalls", @frReportOptions_PrepareCalls(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   nScope := 1 ; ( ( nScope ) )
       _HB_MEMBER Init(); oClass:AddMethod( "Init", @frReportOptions_Init(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetAuthor(); oClass:AddMethod( "SetAuthor", @frReportOptions_SetAuthor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetCompressed(); oClass:AddMethod( "SetCompressed", @frReportOptions_SetCompressed(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetCreateDate(); oClass:AddMethod( "SetCreateDate", @frReportOptions_SetCreateDate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetLastChange(); oClass:AddMethod( "SetLastChange", @frReportOptions_SetLastChange(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetDescription(); oClass:AddMethod( "SetDescription", @frReportOptions_SetDescription(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetInitString(); oClass:AddMethod( "SetInitString", @frReportOptions_SetInitString(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetName(); oClass:AddMethod( "SetName", @frReportOptions_SetName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetPassword(); oClass:AddMethod( "SetPassword", @frReportOptions_SetPassword(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER SetVersion(); oClass:AddMethod( "SetVersion", @frReportOptions_SetVersion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS frReportOptions ;








static FUNCTION frReportOptions_Init( oManager ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
   ::frManager := oManager
   ::PrepareCalls()
RETURN self






static FUNCTION frReportOptions_PrepareCalls( ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions

   ::_SetAuthor := GetFrProcAddress(::frManager:frSystHandle, "SetAuthor")
   ::_SetCompressed := GetFrProcAddress(::frManager:frSystHandle, "SetCompressed")
   ::_SetCreateDate := GetFrProcAddress(::frManager:frSystHandle, "SetCreateDate")
   ::_SetLastChange := GetFrProcAddress(::frManager:frSystHandle, "SetLastChange")
   ::_SetDescription := GetFrProcAddress(::frManager:frSystHandle, "SetDescription")
   ::_SetInitString := GetFrProcAddress(::frManager:frSystHandle, "SetInitString")
   ::_SetName := GetFrProcAddress(::frManager:frSystHandle, "SetName")
   ::_SetPassword := GetFrProcAddress(::frManager:frSystHandle, "SetPassword")
   ::_SetVersion := GetFrProcAddress(::frManager:frSystHandle, "SetVersion")

RETURN NIL







static FUNCTION frReportOptions_SetAuthor( sAuthor ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetAuthor, IF(sAuthor <> NIL, sAuthor, ""))
RETURN tmp_RetVal






static FUNCTION frReportOptions_SetCompressed( lCompressed ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_I_I(::_SetCompressed, IF(lCompressed <> NIL, IF(lCompressed, 1, 0) , -1))
RETURN tmp_RetVal












static FUNCTION frReportOptions_SetCreateDate( sDateTime ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetCreateDate, IF(sDateTime <> NIL, sDateTime, ""))
RETURN tmp_RetVal







static FUNCTION frReportOptions_SetLastChange( sDateTime ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetLastChange, IF(sDateTime <> NIL, sDateTime, ""))
RETURN tmp_RetVal






static FUNCTION frReportOptions_SetDescription( sDescription ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetDescription, IF(sDescription <> NIL, sDescription, ""))
RETURN tmp_RetVal






static FUNCTION frReportOptions_SetInitString( sInitString ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetInitString, IF(sInitString <> NIL, sInitString, ""))
RETURN tmp_RetVal






static FUNCTION frReportOptions_SetName( sName ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetName, IF(sName<>NIL, sName, ""))
RETURN tmp_RetVal







static FUNCTION frReportOptions_SetPassword( sPassword ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_RetVal
PRIVATE tmp_RetVal
   Call_Func_C_I(::_SetPassword, IF(sPassword<>NIL, sPassword, ""))
RETURN tmp_RetVal












static FUNCTION frReportOptions_SetVersion( aVersion ) ; local Self AS CLASS frReportOptions := QSelf() AS CLASS frReportOptions
MEMVAR tmp_Param
PRIVATE tmp_Param := aVersion
  IF (tmp_Param == NIL)
    tmp_Param := {NIL, NIL, NIL, NIL}
  ENDIF
  IF (Len(tmp_Param) < 4)
    ASize(tmp_Param, 4)
  ENDIF
  Call_Func__I(::_SetVersion)
RETURN tmp_Param
























FUNCTION fnDBStruct()
LOCAL Result := "", Arr, x, y
   IF frReportManager():bDbStruct == NIL
     Arr := DbStruct()
   ELSE
     Arr := Eval(frReportManager():bDbStruct)
   ENDIF
   for x = 1 to Len(Arr)
      for y = 1 to Len(Arr[x])
         DO CASE
            CASE (y = 1)
              Result := Result + Arr[x,y]
            CASE (y = 2)
              Result := Result + "," + Arr[x,y]
            CASE (y = 3).OR.(y = 4)
              Result := Result + "," + Alltrim(Str(Arr[x,y], 10, 0))
         ENDCASE
      next
      Result := Result + ";"
   next
RETURN Result
