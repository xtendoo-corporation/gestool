#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\GenPedProvFromMinimo.prg"
_HB_CLASS GenPedProvFromMinimo ; function GenPedProvFromMinimo ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "GenPedProvFromMinimo", iif( .F., { }, { @HBObject() } ), @GenPedProvFromMinimo() ) ) ;

   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

   _HB_MEMBER { oCodigoProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodigoProveedor"}, .F. )
   _HB_MEMBER { cCodigoProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodigoProveedor"}, .F. )
   _HB_MEMBER { oNombreProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oNombreProveedor"}, .F. )
   _HB_MEMBER { cNombreProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNombreProveedor"}, .F. )

   _HB_MEMBER { oSayNombreProveedor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayNombreProveedor"}, .F. )

   _HB_MEMBER { oMetMsg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMetMsg"}, .F. )
   _HB_MEMBER { nMetMsg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMetMsg"}, .F. )

   _HB_MEMBER { aAlmacenes } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aAlmacenes"}, .F. )

   _HB_MEMBER { aLines } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aLines"}, .F. )

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )
   _HB_MEMBER { oFld } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFld"}, .F. )
   _HB_MEMBER { oBmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBmp"}, .F. )

   _HB_MEMBER { oBrowse } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrowse"}, .F. )

   _HB_MEMBER { oFontTitle } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFontTitle"}, .F. )

   _HB_MEMBER { oDbfTemporal } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfTemporal"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @GenPedProvFromMinimo_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @GenPedProvFromMinimo_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cNomProveedor(); oClass:AddInline( "cNomProveedor", {|Self | ( ( Self ) ), ( "Proveedor: " + AllTrim( ::cCodigoProveedor ) + " - " + AllTrim( ::cNombreProveedor ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Load(); oClass:AddMethod( "Load", @GenPedProvFromMinimo_Load(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadRegister( cCodArt, hAlmacen); oClass:AddMethod( "loadRegister", @GenPedProvFromMinimo_loadRegister(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Save(); oClass:AddMethod( "Save", @GenPedProvFromMinimo_Save(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nSumUnidades(); oClass:AddMethod( "nSumUnidades", @GenPedProvFromMinimo_nSumUnidades(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotalImporte(); oClass:AddMethod( "nTotalImporte", @GenPedProvFromMinimo_nTotalImporte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS GenPedProvFromMinimo ;



static FUNCTION GenPedProvFromMinimo_New( nView, oCodigoProveedor, oNombreProveedor, dbfTmpLin ) ; local Self AS CLASS GenPedProvFromMinimo := QSelf() AS CLASS GenPedProvFromMinimo

   ::nView              := nView

   ::oFontTitle         := TFont():New( "Arial", 8, 16, .F., .T. )

   ::nMetMsg            := 0

   ::aAlmacenes         := {}

   ::aLines             := {}

   ::oCodigoProveedor   := oCodigoProveedor
   ::cCodigoProveedor   := oCodigoProveedor:VarGet()
   ::oNombreProveedor   := oNombreProveedor
   ::cNombreProveedor   := oNombreProveedor:VarGet()

   ::oDbfTemporal       := dbfTmpLin

RETURN ( Self )



static FUNCTION GenPedProvFromMinimo_Activate( ) ; local Self AS CLASS GenPedProvFromMinimo := QSelf() AS CLASS GenPedProvFromMinimo

   if Empty( ::cCodigoProveedor )
      MsgStop( "Tiene que seleccionar un proveedor para ejecutar éste asistente." )
      ::oCodigoProveedor:SetFocus()
      return .F.
   end


   ::oDlg = TDialog():New(,,,,, "ASS_IMPORTAR_MINIMO",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )





      ::oBmp := TBitmap():ReDefine( 500, "gc_hand_touch_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )




      ::oSayNombreProveedor := TSay():ReDefine( 100, {|| ::cNomProveedor()}, ::oDlg,,,, .F., ::oFontTitle(), .F., .F., )

      ::oBrowse                        := IXBrowse():New( ::oDlg )

      ::oBrowse:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrowse:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrowse:SetArray( ::aLines, , , .F. )

      ::oBrowse:nMarqueeStyle          := 6
      ::oBrowse:lRecordSelector        := .F.
      ::oBrowse:lHScroll               := .F.
      ::oBrowse:lFooter                := .T.
      ::oBrowse:lAutoSort              := .T.

      ::oBrowse:CreateFromResource( 200 )

      ::oBrowse:bLDblClick             := {|| hSet( ::aLines[ ::oBrowse:nArrayAt ], "lSelect", !hGet( ::aLines[ ::oBrowse:nArrayAt ], "lSelect" ) ), ::oBrowse:Refresh() }

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Sel.Seleccionado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| hGet( ::aLines[ ::oBrowse:nArrayAt ], "lSelect" ) }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | aeval( ::aLines, {|h| hSet( h, "lSelect", !hGet( h, "lSelect" ) ) } ), ::oBrowse:Refresh() }
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Artículo"
         :bEditValue       := {|| AllTrim( hGet( ::aLines[ ::oBrowse:nArrayAt ], "cCodArt" ) ) + " - " + AllTrim( hGet( ::aLines[ ::oBrowse:nArrayAt ], "cNomArt" ) ) }
         :nWidth           := 240
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| AllTrim( hGet( ::aLines[ ::oBrowse:nArrayAt ], "cCodAlm" ) ) + " - " + AllTrim( hGet( ::aLines[ ::oBrowse:nArrayAt ], "cNomAlm" ) ) }
         :nWidth           := 240
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Stock"
         :bEditValue       := {|| hGet( ::aLines[ ::oBrowse:nArrayAt ],"nStock" ) }
         :nWidth           := 80
         :cEditPicture     := MasUnd()
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Mínimo"
         :bEditValue       := {|| hGet( ::aLines[ ::oBrowse:nArrayAt ],"nMinimo" ) }
         :nWidth           := 80
         :cEditPicture     := MasUnd()
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Unidades"
         :bEditValue       := {|| hGet( ::aLines[ ::oBrowse:nArrayAt ],"nUnidades" ) }
         :cEditPicture     := MasUnd()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nEditType        := 1
         :bOnPostEdit      := {|o,x,n| hSet( ::aLines[ ::oBrowse:nArrayAt ],"nUnidades", x ) }
         :nFootStyle       := :nDataStrAlign

         :bFooter          := {|| ::nSumUnidades() }
         :cFooterPicture   := :cEditPicture
         :oFooterFont      := getBoldFont()
         :cDataType        := "N"
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Costo"
         :bEditValue       := {|| hGet( ::aLines[ ::oBrowse:nArrayAt ],"nCosto" ) }
         :cEditPicture     := MasUnd()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( hGet( ::aLines[ ::oBrowse:nArrayAt ],"nUnidades" ) * hGet( ::aLines[ ::oBrowse:nArrayAt ],"nCosto" ) ) }
         :cEditPicture     := MasUnd()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStyle       := :nDataStrAlign
         :bFooter          := {|| ::nTotalImporte() }

         :cFooterPicture   := :cEditPicture
         :oFooterFont      := getBoldFont()
         :cDataType        := "N"
      end





      ::oMetMsg := TApoloMeter():ReDefine( 300, { | u | If( PCount()==0, ::nMetMsg, ::nMetMsg:= u ) }, 100, ::oDlg, .F.,,, .T.,,,, )

      ::oMetMsg:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      ::oMetMsg:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      ::oMetMsg:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )




      TButton():ReDefine( 1, {||( ::save(), ::oDlg:End( 1 ) )}, ::oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .T. )

      ::oDlg:bStart  := {|| ::Load(), ::oBrowse:MakeTotals(), ::oBrowse:RefreshFooters() }

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   ::oBmp:End()
   ::oFontTitle:End()

RETURN ( ::oDlg:nResult == 1 )



static FUNCTION GenPedProvFromMinimo_Load( ) ; local Self AS CLASS GenPedProvFromMinimo := QSelf() AS CLASS GenPedProvFromMinimo

   local nRec        := ( D():ProveedorArticulo( ::nView ) )->( Recno() )
   local nOrdAnt     := ( D():ProveedorArticulo( ::nView ) )->( OrdSetFocus( "cCodPrv" ) )
   local hAlmacen

   ::aLines          := {}





   ::aAlmacenes      := AlmacenesModel():aAlmacenes()

   ::oMetMsg:SetTotal( ( D():ProveedorArticulo( ::nView ) )->( ordkeycount() ) )

   if ( D():ProveedorArticulo( ::nView ) )->( dbSeek( ::cCodigoProveedor ) )


      while ( D():ProveedorArticulo( ::nView ) )->cCodPrv == ::cCodigoProveedor .AND. !( D():ProveedorArticulo( ::nView ) )->( Eof() )

            for each hAlmacen in ::aAlmacenes

               ::loadRegister( ( D():ProveedorArticulo( ::nView ) )->cCodArt, hAlmacen )

            next

         ( D():ProveedorArticulo( ::nView ) )->( dbSkip() )

         ::oMetMsg:Set( ( D():ProveedorArticulo( ::nView ) )->( OrdKeyNo() ) )

      end

   end

   ::oMetMsg:SetTotal( ( D():ProveedorArticulo( ::nView ) )->( ordkeycount() ) )





   ::oMetMsg:Hide()





   ( D():ProveedorArticulo( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():ProveedorArticulo( ::nView ) )->( dbGoTo( nRec ) )

   ::oBrowse:SetArray( ::aLines, , , .F. )
   ::oBrowse:Refresh()

RETURN ( Self )



static FUNCTION GenPedProvFromMinimo_loadRegister( cCodArt, hAlmacen ) ; local Self AS CLASS GenPedProvFromMinimo := QSelf() AS CLASS GenPedProvFromMinimo

   local nStockAlmacen
   local nStockMinimo

   nStockMinimo         := ArticulosModel():getField( "nMinimo", "Codigo", ( D():ProveedorArticulo( ::nView ) )->cCodArt )

   if nStockMinimo <> 0

      nStockAlmacen     := StocksModel():nStockArticulo( cCodArt, hGet( hAlmacen, "cCodAlm" ) )

      if nStockAlmacen < nStockMinimo










         aAdd( ::aLines, { "cCodArt" => cCodArt , "cNomArt" => ArticulosModel():getNombre( cCodArt ) , "cCodAlm" => hGet( hAlmacen, "cCodAlm" ), "cNomAlm" => hGet( hAlmacen, "cNomAlm" ), "nStock"  => nStockAlmacen, "nMinimo" => nStockMinimo, "nUnidades" => ( nStockMinimo - nStockAlmacen ), "cRefPrv" => ( D():ProveedorArticulo( ::nView ) )->cRefPrv, "nCosto" => ArticulosModel():getField( "pCosto", "Codigo", cCodArt ), "lSelect" => .T. } )

      end

   end

RETURN ( Self )



static FUNCTION GenPedProvFromMinimo_Save( ) ; local Self AS CLASS GenPedProvFromMinimo := QSelf() AS CLASS GenPedProvFromMinimo

   local hLine
   local n     := 1

   ::oMetMsg:Show()
   ::oMetMsg:SetTotal( Len( ::aLines ) )

   for each hLine in ::aLines

      if hGet( hLine, "lSelect" ) .AND. ( hGet( hLine, "nUnidades" ) > 0 )

         ( ::oDbfTemporal )->( dbappend() )

         ( ::oDbfTemporal )->cRef         := hGet( hLine, "cCodArt" )
         ( ::oDbfTemporal )->cRefPrv      := hGet( hLine, "cRefPrv" )
         ( ::oDbfTemporal )->cDetalle     := hGet( hLine, "cNomArt" )
         ( ::oDbfTemporal )->nIva         := nIva( D():TiposIva( ::nView ), ArticulosModel():getField( "TipoIva", "Codigo", hGet( hLine, "cCodArt" ) ) )
         ( ::oDbfTemporal )->nReq         := nReq( D():TiposIva( ::nView ), ArticulosModel():getField( "TipoIva", "Codigo", hGet( hLine, "cCodArt" ) ) )
         ( ::oDbfTemporal )->cAlmLin      := hGet( hLine, "cCodAlm" )
         ( ::oDbfTemporal )->nStkAct      := hGet( hLine, "nStock" )
         ( ::oDbfTemporal )->nStkMin      := hGet( hLine, "nMinimo" )
         ( ::oDbfTemporal )->nCanEnt      := 1
         ( ::oDbfTemporal )->nUniCaja     := hGet( hLine, "nUnidades" )
         ( ::oDbfTemporal )->nPreDiv      := hGet( hLine, "nCosto" )
         ( ::oDbfTemporal )->nCtlStk      := 1
         ( ::oDbfTemporal )->nNumLin      := n
         ( ::oDbfTemporal )->nPosPrint    := n
         ( ::oDbfTemporal )->cCodFam      := ArticulosModel():getField( "Familia", "Codigo", hGet( hLine, "cCodArt" ) )
         ( ::oDbfTemporal )->cGrpFam      := FamiliasModel():getField( "cCodGrp", "cCodFam", ArticulosModel():getField( "Familia", "Codigo", hGet( hLine, "cCodArt" ) ) )
         ( ::oDbfTemporal )->nEstado      := 1

         n++

      end

      ::oMetMsg:AutoInc()

   next

RETURN ( Self )



static FUNCTION GenPedProvFromMinimo_nSumUnidades( ) ; local Self AS CLASS GenPedProvFromMinimo := QSelf() AS CLASS GenPedProvFromMinimo

   local nTotal   := 0

   aeval( ::aLines, {|h| if( hget( h, "lSelect" ), nTotal += hget( h, "nUnidades" ), ) } )

RETURN ( nTotal )



static FUNCTION GenPedProvFromMinimo_nTotalImporte( ) ; local Self AS CLASS GenPedProvFromMinimo := QSelf() AS CLASS GenPedProvFromMinimo

   local nTotal   := 0

   aeval( ::aLines, {|h| if( hget( h, "lSelect" ), nTotal += ( hget( h, "nUnidades" ) * hget( h, "nCosto" ) ), ) } )

RETURN ( nTotal )
