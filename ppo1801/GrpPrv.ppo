#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\GrpPrv.prg"
_HB_CLASS TGrpPrv ; function TGrpPrv ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TGrpPrv", iif( .T., { @TMant() }, { @HBObject() } ), @TGrpPrv() ) ) ;

   _HB_MEMBER { cName } ; oClass:AddMultiData(, "GruposProveedores", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_businessmen2_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )

   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 0 + ( 114 * 256 ) + ( 198 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER { cParentSelect } ; oClass:AddMultiData(, Space( 4 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cParentSelect"}, .F. )

   _HB_MEMBER { oGetCodigo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetCodigo"}, .F. )
   _HB_MEMBER { oGetNombre } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetNombre"}, .F. )

   _HB_MEMBER { oTreePadre } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTreePadre"}, .F. )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS TGrpPrv; oClass:AddMethod( "New", @TGrpPrv_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create( cPath) AS CLASS TGrpPrv; oClass:AddMethod( "Create", @TGrpPrv_Create(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TGrpPrv_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TGrpPrv_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TGrpPrv_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lSaveResource(); oClass:AddMethod( "lSaveResource", @TGrpPrv_lSaveResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER StartResource( oGet); oClass:AddMethod( "StartResource", @TGrpPrv_StartResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aChild( cCodGrupo); oClass:AddMethod( "aChild", @TGrpPrv_aChild(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER IsPadreMayor( cCodGrupo, cCodDesde); oClass:AddMethod( "IsPadreMayor", @TGrpPrv_IsPadreMayor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER IsPadreMenor( cCodGrupo, cCodDesde); oClass:AddMethod( "IsPadreMenor", @TGrpPrv_IsPadreMenor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Tree( oGet); oClass:AddMethod( "Tree", @TGrpPrv_Tree(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadTree( cCodGrupo); oClass:AddMethod( "LoadTree", @TGrpPrv_LoadTree(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ChangeTreeState( oTree, aItems); oClass:AddMethod( "ChangeTreeState", @TGrpPrv_ChangeTreeState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetTreeState( oTree, aItems); oClass:AddMethod( "GetTreeState", @TGrpPrv_GetTreeState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SetTreeState( oTree, aItems); oClass:AddMethod( "SetTreeState", @TGrpPrv_SetTreeState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TGrpPrv ;



static FUNCTION TGrpPrv_New( cPath, oWndParent, oMenuItem ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;
   If( oMenuItem == nil, oMenuItem := "01030", ) ;

   if Empty( ::nLevel )
      ::nLevel          := Auth():Level( oMenuItem )
   end





   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::lCreateShell       := .F.
   ::cHtmlHelp          := "Grupos de proveedores"

   ::cBitmap            := ( 0 + ( 114 * 256 ) + ( 198 * 65536 ) )

RETURN ( Self )



static FUNCTION TGrpPrv_Create( cPath ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



static FUNCTION TGrpPrv_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local lOpen          := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      ::CloseFiles()

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de grupos de proveedores" )

   end
   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TGrpPrv_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "GrpPrv.DBF", "GrpPrv" ):New( "GrpPrv.DBF", "GrpPrv", ( cDriver ), "Grupos de proveedores", ( cPath ) )

      ::oDbf:AddField( "CCODGRP", "C", 4, 0,,,,, "Código", .F., 80, .F., {} )
      ::oDbf:AddField( "CNOMGRP", "C", 30, 0,,,,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "CCODPDR", "C", 4, 0,,,,, "Grupo padre", .F., 80, .F., {} )

      ::oDbf:AddIndex( "CCODGRP", "GrpPrv.CDX", "CCODGRP",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "CNOMGRP", "GrpPrv.CDX", "CNOMGRP",,, .F., .F., "Nombre",,, .T., .F. )
      ::oDbf:AddIndex( "CCODPDR", "GrpPrv.CDX", "CCODPDR",,, .F., .F., "Grupo padre",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TGrpPrv_Resource( nMode ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local oDlg
   local oFld

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Grupos de proveedores", "GRPCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oFld := TFolder():ReDefine( 500, {"&General"}, { "GRPCLI_01" }, oDlg,,,,, .F., )







      ::oGetCodigo := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodGrp, ::oDbf:cCodGrp:= u ) }, oFld:aDialogs[ 1 ],, "@!", {||       NotValid( ::oGetCodigo, ::oDbf:cAlias, .T., "0" )},,,,,, .F., {||        ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )






      ::oGetNombre := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomGrp, ::oDbf:cNomGrp:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      ::oTreePadre                     := TTreeView():Redefine( 130, oFld:aDialogs[ 1 ] )
      ::oTreePadre:bItemSelectChanged  := {|| ::ChangeTreeState() }





      TButton():ReDefine( 1, {||( ::lSaveResource( nMode, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| ::lSaveResource( nMode, oDlg ) } )

   oDlg:bStart          := {|| ::StartResource() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TGrpPrv_lSaveResource( nMode, oDlg ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local aGrp

   ::oDbf:cCodPdr    := Space( 4 )

   if ( nMode == 1 .OR. nMode == 4 )

      if Empty( ::oDbf:cCodGrp )
         MsgStop( "Código de grupo de proveedores no puede estar vacío" )
         ::oGetCodigo:SetFocus()
         Return nil
      end

      if ::oDbf:SeekInOrd( ::oDbf:cCodGrp, "cCodGrp" )
         msgStop( "Código existente" )
         ::oGetCodigo:SetFocus()
         Return nil
      end

   end

   if Empty( ::oDbf:cNomGrp )
      MsgStop( "Nombre de grupo de proveedores no puede estar vacío" )
      ::oGetNombre:SetFocus()
      Return nil
   end

   ::GetTreeState( ::oTreePadre )

   if ( ::oDbf:cCodGrp == ::oDbf:cCodPdr )
      MsgStop( "Grupo padre no puede ser el mismo" )
      ::oTreePadre:SetFocus()
      Return nil
   end

   aGrp  := ::aChild( ::oDbf:cCodGrp )
   if aScan( aGrp, ::oDbf:cCodPdr ) <> 0
      MsgStop( "Grupo padre contiene referencia circular" )
      ::oTreePadre:SetFocus()
      Return nil
   end

Return oDlg:end( 1 )



static FUNCTION TGrpPrv_StartResource( ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   ::LoadTree()

   ::SetTreeState()

   ::oGetCodigo:SetFocus()

Return ( Self )



static FUNCTION TGrpPrv_aChild( cCodGrupo, aChild ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local nRec
   local nOrd

   if Empty( aChild )
      aChild   := {}
   end

   CursorWait()

   nRec        := ( ::oDbf:cAlias )->( Recno() )
   nOrd        := ( ::oDbf:cAlias )->( OrdSetFocus( "cCodPdr" ) )

   if ( ::oDbf:cAlias )->( dbSeek( cCodGrupo ) )

      while ( ( ::oDbf:cAlias )->cCodPdr == cCodGrupo .AND. !( ::oDbf:cAlias )->( Eof() ) )

         aAdd( aChild, ( ::oDbf:cAlias )->cCodGrp )

         ::aChild( ( ::oDbf:cAlias )->cCodGrp, aChild )

         ( ::oDbf:cAlias )->( dbSkip() )

      end

   end

   ( ::oDbf:cAlias )->( OrdSetFocus( nOrd ) )
   ( ::oDbf:cAlias )->( dbGoTo( nRec ) )

   CursorWE()

Return ( aChild )



static FUNCTION TGrpPrv_IsPadreMayor( cCodGrupo, cCodDesde ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local cPadre
   local aPadre

   if cCodGrupo >= cCodDesde
      Return .T.
   end

   if !Empty( cCodGrupo )

      aPadre         := ::aChild( cCodGrupo )

      for each cPadre in aPadre
         if cPadre >= cCodDesde
            Return .T.
         end
      next

   end

Return ( .F. )



static FUNCTION TGrpPrv_IsPadreMenor( cCodGrupo, cCodHasta ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local cPadre
   local aPadre

   if cCodGrupo <= cCodHasta
      Return .T.
   end

   if !Empty( cCodGrupo )

      aPadre         := ::aChild( cCodGrupo )

      for each cPadre in aPadre
         if cPadre <= cCodHasta
            Return .T.
         end
      next

   end

Return ( .F. )



static FUNCTION TGrpPrv_LoadTree( oTree, cCodGrupo ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local nRec
   local nOrd
   local oNode

   If( oTree == nil, oTree := ::oTreePadre, ) ;

   if Empty( cCodGrupo )
      cCodGrupo      := Space( 4 )
   end

   CursorWait()

   nRec              := ( ::oDbf:cAlias )->( Recno() )
   nOrd              := ( ::oDbf:cAlias )->( OrdSetFocus( "cCodPdr" ) )

   if ( ::oDbf:cAlias )->( dbSeek( cCodGrupo ) )

      while ( ( ::oDbf:cAlias )->cCodPdr == cCodGrupo .AND. !( ::oDbf:cAlias )->( Eof() ) )

         oNode       := oTree:Add( Alltrim( ( ::oDbf:cAlias )->cNomGrp ) )
         oNode:Cargo := ( ::oDbf:cAlias )->cCodGrp

         ::LoadTree( oNode, ( ::oDbf:cAlias )->cCodGrp )

         ( ::oDbf:cAlias )->( dbSkip() )

      end

   end

   ( ::oDbf:cAlias )->( OrdSetFocus( nOrd ) )
   ( ::oDbf:cAlias )->( dbGoTo( nRec ) )

   CursorWE()

   oTree:Expand()

Return ( Self )



static FUNCTION TGrpPrv_ChangeTreeState( oTree, aItems ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local oItem

   If( oTree == nil, oTree := ::oTreePadre, ) ;

   if Empty( aItems )
      aItems      := oTree:aItems
   end

   for each oItem in aItems

      SysRefresh()



      oTree:SetCheck( oItem, .F. )

      if len( oItem:aItems ) > 0
         ::ChangeTreeState( oTree, oItem:aItems )
      end

   next

Return ( Self )



static FUNCTION TGrpPrv_GetTreeState( oTree, aItems ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local oItem

   If( oTree == nil, oTree := ::oTreePadre, ) ;

   if Empty( aItems )
      aItems      := oTree:aItems
   end

   for each oItem in aItems


      if oTree:GetCheck( oItem )
         ::oDbf:cCodPdr    := oItem:Cargo
      end

      if len( oItem:aItems ) > 0
         ::GetTreeState( oTree, oItem:aItems )
      end

   next

Return ( Self )



static FUNCTION TGrpPrv_SetTreeState( oTree, aItems ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local oItem

   If( oTree == nil, oTree := ::oTreePadre, ) ;

   if Empty( aItems )
      aItems      := oTree:aItems
   end

   for each oItem in aItems

      if ( ::oDbf:cCodPdr == oItem:Cargo )



         oTree:Select( oItem )



         oTree:SetCheck( oItem, .T. )

      end

      if len( oItem:aItems ) > 0
         ::SetTreeState( oTree, oItem:aItems )
      end

   next

Return ( Self )



static FUNCTION TGrpPrv_Tree( oGet ) ; local Self AS CLASS TGrpPrv := QSelf() AS CLASS TGrpPrv

   local oDlg
   local uVal
   local oTree

   uVal                    := oGet:VarGet()





   oDlg                    := TDialog():New( , , , , "cDlgName", "TreeGruposCliente" )

   oTree                   := TTreeView():Redefine( 100, oDlg  )

   TButton():ReDefine( 1, {|| oDlg:end( 1 ) }, oDlg, , , .F. )

   TButton():ReDefine( 2, {|| oDlg:end() }, oDlg, , , .F. )

   oDlg:bStart             := {|| ::StartTree( nil, oTree ) }

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

   oDlg:Activate( , , , .T. )





   if oDlg:nResult == 1
      msgStop( "valor" )
   end

RETURN ( uVal )



function cGruPrv( cCodPrv, oDbfPrv )

   local cCodGrP  := ""

   if oDbfPrv:Seek( cCodPrv )
      cCodGrP := oDbfPrv:cCodGrp
   end

return( cCodGrP )



function cNomGrp( cCodGrc, oDbfGprPrv )

   local cNomGrP  := ""

   if oDbfGprPrv:Seek( cCodGrC )
      cNomGrP := oDbfGprPrv:cNomGrp
   end

return( cNomGrP )
