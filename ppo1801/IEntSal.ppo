#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\IEntSal.prg"
_HB_CLASS IEntSal ; function IEntSal ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "IEntSal", iif( .T., { @TInfGen() }, { @HBObject() } ), @IEntSal() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfEnt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfEnt"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @IEntSal_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @IEntSal_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @IEntSal_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @IEntSal_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @IEntSal_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS IEntSal ;



static FUNCTION IEntSal_Create( ) ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   ::AddField( "dFecEnt",  "D",  8, 0, {|| "" },   "Fecha",       .T., "Fecha",         12, .F. )
   ::AddField( "cTipEnt",  "C", 20, 0, {|| "" },   "Tipo",        .T., "Tipo",          15, .F. )
   ::AddField( "cDesEnt",  "C", 50, 0, {|| "" },   "Descripción", .T., "Descripción",   50, .F. )
   ::AddField( "nImpEnt",  "N", 16, 6, {|| "" },   "Importe",     .T., "Importe",       16, .F. )

   ::AddTmpIndex ( "dFecEnt", "dFecEnt" )

   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION IEntSal_OpenFiles( ) ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfEnt := DbfServer( "ENTSAL.DBF", ):NewOpen( "ENTSAL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfEnt:AddBag( "ENTSAL.CDX" ) ; ::oDbfEnt:AddBag( ) ; ::oDbfEnt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION IEntSal_CloseFiles( ) ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   if !Empty( ::oDbfEnt ) .AND. ::oDbfEnt:Used()
      ::oDbfEnt:End()
   end

   ::oDbfEnt  := nil

RETURN ( Self )



static FUNCTION IEntSal_lResource( cFld ) ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   if !::StdResource( "INF_ENT01" )
      return .F.
   end

   ::oMtrInf:SetTotal( ::oDbfEnt:Lastrec() )

   ::CreateFilter( aItmEntSal(), ::oDbfEnt:cAlias )

RETURN .T.






static FUNCTION IEntSal_lGenerate( ) ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) } }

   ::oDbfEnt:OrdSetFocus( "DFECENT" )

   ::oDbfEnt:GoTop()
   while !::lBreak .AND. !::oDbfEnt:Eof()

      if ::oDbfEnt:dFecEnt >= ::dIniInf .AND. ::oDbfEnt:dFecEnt <= ::dFinInf .AND. ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:dFecEnt  := ::oDbfEnt:dFecEnt
         if ::oDbfEnt:nTipEnt == 1
            ::oDbf:cTipEnt  := "Entrada"
         else
            ::oDbf:cTipEnt  := "Salida"
         end
         ::oDbf:cDesEnt  := ::oDbfEnt:cDesEnt
         ::oDbf:nImpEnt  := ::oDbfEnt:nImpEnt

         ::oDbf:Save()

      end

      ::oDbfEnt:Skip()

      ::oMtrInf:AutoInc( ::oDbfEnt:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfEnt:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
