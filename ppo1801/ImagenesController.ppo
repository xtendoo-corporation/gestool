#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ImagenesController.prg"
_HB_CLASS ImagenesController ; function ImagenesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImagenesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ImagenesController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @ImagenesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ImagenesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadedBlankBuffer(); oClass:AddMethod( "loadedBlankBuffer", @ImagenesController_loadedBlankBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadPrincipalBlankBuffer(); oClass:AddInline( "loadPrincipalBlankBuffer", {|Self | ( ( Self ) ), ( ::oModel:loadPrincipalBlankBuffer() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER insertBuffer(); oClass:AddInline( "insertBuffer", {|Self | ( ( Self ) ), ( ::oModel:insertBuffer() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadedCurrentBuffer( uuidEntidad); oClass:AddMethod( "LoadedCurrentBuffer", @ImagenesController_LoadedCurrentBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER UpdateBuffer( uuidEntidad); oClass:AddMethod( "UpdateBuffer", @ImagenesController_UpdateBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadedDuplicateCurrentBuffer( uuidEntidad); oClass:AddMethod( "loadedDuplicateCurrentBuffer", @ImagenesController_loadedDuplicateCurrentBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadedDuplicateBuffer( uuidEntidad); oClass:AddMethod( "loadedDuplicateBuffer", @ImagenesController_loadedDuplicateBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteBuffer( aUuidEntidades); oClass:AddMethod( "deleteBuffer", @ImagenesController_deleteBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImagenesController ;



static FUNCTION ImagenesController_New( oSenderController ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   ::Super:New( oSenderController )

   ::lTransactional        := .T.

   ::cTitle                := "Imagenes"

   ::cName                 := "imagenes"



   ::hImage                := {  "16" => "gc_photo_landscape_16", "32" => "gc_photo_landscape_32", "48" => "gc_photo_landscape_48" }

   ::oModel                := SQLImagenesModel():New( self )

   ::oBrowseView           := ImagenesBrowseView():New( self )

   ::oDialogView           := ImagenesView():New( self )

   ::oValidator            := ImagenesValidator():New( self, ::oDialogView )








RETURN ( Self )



static FUNCTION ImagenesController_End( ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION ImagenesController_loadedBlankBuffer( ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   local uuid        := ::getSenderController():getUuid()

   if !empty( uuid )
      hset( ::oModel:hBuffer, "parent_uuid", uuid )
   end

RETURN ( Self )



static FUNCTION ImagenesController_LoadedCurrentBuffer( uuidEntidad ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   local idImagen

   if empty( uuidEntidad )
      ::oModel:insertBuffer()
   end

   idImagen          := ::oModel:getIdWhereParentUuid( uuidEntidad )
   if empty( idImagen )
      idImagen       := ::oModel:insertPrincipalBlankBuffer()
   end

   ::oModel:loadCurrentBuffer( idImagen )

RETURN ( self )



static FUNCTION ImagenesController_UpdateBuffer( uuidEntidad ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   local idImagen

   idImagen          := ::oModel:getIdWhereParentUuid( uuidEntidad )
   if empty( idImagen )
      ::oModel:insertBuffer()
      RETURN ( self )
   end

   ::oModel:updateBuffer()

RETURN ( self )



static FUNCTION ImagenesController_loadedDuplicateCurrentBuffer( uuidEntidad ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   local idImagen

   idImagen          := ::oModel:getIdWhereParentUuid( uuidEntidad )
   if empty( idImagen )
      ::oModel:insertBuffer()
      RETURN ( self )
   end

   ::oModel:loadDuplicateBuffer( idImagen )

RETURN ( self )



static FUNCTION ImagenesController_loadedDuplicateBuffer( uuidEntidad ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   hset( ::oModel:hBuffer, "parent_uuid", uuidEntidad )

RETURN ( self )



static FUNCTION ImagenesController_deleteBuffer( aUuidEntidades ) ; local Self AS CLASS ImagenesController := QSelf() AS CLASS ImagenesController

   if empty( aUuidEntidades )
      RETURN ( self )
   end

   ::oModel:deleteWhereParentUuid( aUuidEntidades )

RETURN ( self )







_HB_CLASS ImagenesBrowseView ; function ImagenesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImagenesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ImagenesBrowseView() ) ) ;

   _HB_MEMBER Create( oWindow); oClass:AddMethod( "Create", @ImagenesBrowseView_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ImagenesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImagenesBrowseView ;



static FUNCTION ImagenesBrowseView_Create( oWindow ) ; local Self AS CLASS ImagenesBrowseView := QSelf() AS CLASS ImagenesBrowseView

   ::Super:Create( oWindow )

   ::oBrowse:nRowHeight       := 100
   ::oBrowse:nDataLines       := 2

RETURN ( ::oBrowse )



static FUNCTION ImagenesBrowseView_addColumns( ) ; local Self AS CLASS ImagenesBrowseView := QSelf() AS CLASS ImagenesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "uuid"
      :cHeader             := "Uuid"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "parent_uuid"
      :cHeader             := "Uuid entidad"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "parent_uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "imagen"
      :cHeader             := "Imagen"
      :nWidth              := 400
      :bEditValue          := {|| ::getRowSet():fieldGet( "imagen" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := ""
      :nEditType           := -1
      :lBmpStretch         := .F.
      :lBmpTransparent     := .T.
      :bStrImage           := {|| cFileBmpName( ::getRowSet():fieldGet( "imagen" ) ) }
      :nDataBmpAlign       := 2
      :nWidth              := 100
   end

RETURN ( self )







_HB_CLASS ImagenesView ; function ImagenesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImagenesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ImagenesView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ImagenesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImagenesView ;



static FUNCTION ImagenesView_Activate( ) ; local Self AS CLASS ImagenesView := QSelf() AS CLASS ImagenesView

   local oGetImagen
   local oBmpImagen



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "imagenes", "IMAGEN",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )









   oGetImagen := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "imagen" ], ::oController:oModel:hBuffer[ "imagen" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "imagen" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )}, {|nKey,nFlags,Self| ( ChgBmp( oGetImagen, oBmpImagen ) ) }, .F., .F.,,,,, {|Self|( GetBmp( oGetImagen, oBmpImagen ) )}, nil, "Folder",, )




   oBmpImagen := TImage():ReDefine( 110,, cFileBmpName( ::oController:oModel:hBuffer[ "imagen" ] ), ::oDialog,,, .F., .F.,,, .F.,,, .F. )

   oBmpImagen:setColor( , getsyscolor( 15 ) )
   oBmpImagen:bLClicked   := {|| ShowImage( oBmpImagen ) }
   oBmpImagen:bRClicked   := {|| ShowImage( oBmpImagen ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )







_HB_CLASS ImagenesValidator ; function ImagenesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImagenesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ImagenesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ImagenesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImagenesValidator ;



static FUNCTION ImagenesValidator_getValidators( ) ; local Self AS CLASS ImagenesValidator := QSelf() AS CLASS ImagenesValidator

   ::hValidators  := {  "imagen" => {  "required"  => "La imagen es un dato requerido" } }

RETURN ( ::hValidators )







_HB_CLASS SQLImagenesModel ; function SQLImagenesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLImagenesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLImagenesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "imagenes", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLImagenesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadPrincipalBlankBuffer(); oClass:AddInline( "loadPrincipalBlankBuffer", {|Self | ( ( Self ) ), ( ::loadBlankBuffer(), hset( ::hBuffer, "principal", .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertPrincipalBlankBuffer(); oClass:AddInline( "insertPrincipalBlankBuffer", {|Self | ( ( Self ) ), ( ::loadPrincipalBlankBuffer(), ::insertBuffer() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getIdWhereParentUuid(); oClass:AddInline( "getIdWhereParentUuid", {|Self, uuid | ( ( Self ) ), ( ::getField( "id", "parent_uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateImagenWhereUuid(); oClass:AddInline( "updateImagenWhereUuid", {|Self, uValue, uuid | ( ( Self ) ), ( ::updateFieldWhereUuid( uuid, "imagen", uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setImagenAttribute( uValue); oClass:AddMethod( "setImagenAttribute", @SQLImagenesModel_setImagenAttribute(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLImagenesModel ;



static FUNCTION SQLImagenesModel_getColumns( ) ; local Self AS CLASS SQLImagenesModel := QSelf() AS CLASS SQLImagenesModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",       {  "create"    => "VARCHAR( 40 ) NOT NULL "                 , "default"   => {|| ::getSenderControllerParentUuid() } } )


   hset( ::hColumns, "imagen",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "principal",         {  "create"    => "BIT"                                     , "default"   => {|| .F. } }                               )

RETURN ( ::hColumns )



static FUNCTION SQLImagenesModel_setImagenAttribute( uValue ) ; local Self AS CLASS SQLImagenesModel := QSelf() AS CLASS SQLImagenesModel

   local cNombreImagen

   if empty( uValue ) .OR. isImageInApplicationStorage( uValue )
      RETURN ( uValue )
   end

   if empty( ::oController ) .OR. empty( ::oController:oSenderController )
      RETURN ( uValue )
   end

   cNombreImagen           := alltrim( ::oController:oSenderController:getModel():hBuffer[ "nombre" ] )
   cNombreImagen           += "(" + alltrim( ::hBuffer[ "uuid" ] ) + ")" + "."
   cNombreImagen           += lower( getFileExt( uValue ) )

   if !( copyfile( uValue, cPathImageApplicationStorage() + cNombreImagen ) )
      RETURN ( uValue )
   end

RETURN ( cRelativeImageApplicationStorage() + cNombreImagen )







_HB_CLASS ImagenesRepository ; function ImagenesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImagenesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ImagenesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLImagenesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImagenesRepository ;