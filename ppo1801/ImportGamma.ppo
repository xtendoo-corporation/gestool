#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 11 ".\.\Prg\ImportGamma.prg"
FUNCTION ImpGamma( oMenuItem, oWnd )

   local oImpGamma
   local nLevel   := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return ( nil )
   end

   oImpGamma       := ImportGamma():New():Resource()

RETURN nil







_HB_CLASS ImportGamma ; function ImportGamma ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImportGamma", iif( .F., { }, { @HBObject() } ), @ImportGamma() ) ) ;

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )

   _HB_MEMBER { oDireccion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDireccion"}, .F. )
   _HB_MEMBER { oUsuario } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oUsuario"}, .F. )
   _HB_MEMBER { oClave } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oClave"}, .F. )

   _HB_MEMBER { cDireccion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDireccion"}, .F. )
   _HB_MEMBER { cUsuario } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cUsuario"}, .F. )
   _HB_MEMBER { cClave } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cClave"}, .F. )

   _HB_MEMBER { cToken } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cToken"}, .F. )

   _HB_MEMBER { oArticulos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oArticulos"}, .F. )
   _HB_MEMBER { cArticulos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cArticulos"}, .F. )

   _HB_MEMBER { oTarifas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTarifas"}, .F. )
   _HB_MEMBER { cTarifas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTarifas"}, .F. )

   _HB_MEMBER { oStock } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oStock"}, .F. )
   _HB_MEMBER { cStock } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cStock"}, .F. )

   _HB_MEMBER { oBmpCategoria } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBmpCategoria"}, .F. )
   _HB_MEMBER { oCategoria } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCategoria"}, .F. )
   _HB_MEMBER { cCategoria } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCategoria"}, .F. )

   _HB_MEMBER { oAlbaranes } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbaranes"}, .F. )
   _HB_MEMBER { cAlbaranes } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAlbaranes"}, .F. )

   _HB_MEMBER { oFacturas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacturas"}, .F. )
   _HB_MEMBER { cFacturas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFacturas"}, .F. )

   _HB_MEMBER { oSayProcess } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayProcess"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ImportGamma_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource(); oClass:AddMethod( "Resource", @ImportGamma_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToken(); oClass:AddMethod( "getToken", @ImportGamma_getToken(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ImportaArticulos(); oClass:AddMethod( "ImportaArticulos", @ImportGamma_ImportaArticulos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER IntegraArticulo( hArticulo); oClass:AddMethod( "IntegraArticulo", @ImportGamma_IntegraArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addArticulo( hArticulo); oClass:AddMethod( "addArticulo", @ImportGamma_addArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER editArticulo( hArticulo); oClass:AddMethod( "editArticulo", @ImportGamma_editArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ImportaTarifas(); oClass:AddMethod( "ImportaTarifas", @ImportGamma_ImportaTarifas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER IntegraTarifa( hTarifa); oClass:AddMethod( "IntegraTarifa", @ImportGamma_IntegraTarifa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addTarifa( hTarifa); oClass:AddMethod( "addTarifa", @ImportGamma_addTarifa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER editTarifa( hTarifa); oClass:AddMethod( "editTarifa", @ImportGamma_editTarifa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ImportaAlbaranes(); oClass:AddMethod( "ImportaAlbaranes", @ImportGamma_ImportaAlbaranes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ImportaFacturas(); oClass:AddMethod( "ImportaFacturas", @ImportGamma_ImportaFacturas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getStockProduct( cCodArt); oClass:AddMethod( "getStockProduct", @ImportGamma_getStockProduct(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setProcessText(); oClass:AddInline( "setProcessText", {|Self, cText | ( ( Self ) ), ( if( !Empty( ::oSayProcess ), ( ::oSayProcess:SetText( cText ), ::oSayProcess:Refresh(), sysrefresh() ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImportGamma ;



static FUNCTION ImportGamma_New( ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   ::cDireccion      := "http://ws.gammaasociados.com/v1/"
   ::cUsuario        := "1460webserviceG"
   ::cClave          := "QPN0Y24e8KU8Dl1bKsJf"
   ::cToken          := Space( 200 )

   ::cArticulos      := "asociado/productos"
   ::cTarifas        := "asociado/tarifas"
   ::cAlbaranes      := "asociado/albaranes"
   ::cFacturas       := "asociado/facturas"
   ::cStock          := "asociado/stock"
   ::cCategoria      := Space( 10 )

RETURN ( Self )



static FUNCTION ImportGamma_Resource( ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local oBmp

   if oWnd() <> nil
      oWnd():CloseAll()
   end

   ::oDlg = TDialog():New(,,,, "Integración de datos desde Gamma", "IMPGAMMA",, .F.,,,,, oWnd(), .F.,,,,,, .F.,, "::oDlg", nil, )

      oBmp := TBitmap():ReDefine( 600, "gamma_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )

      ::oDireccion := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cDireccion, ::cDireccion:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )
      ::oUsuario := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cUsuario, ::cUsuario:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )
      ::oClave := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::cClave, ::cClave:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      ::oArticulos := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cArticulos, ::cArticulos:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )
      TBtnBmp():ReDefine( 131, "GC_IMPORT_16",,,,,{|| ::ImportaArticulos() }, ::oDlg, .F., , .F.,  )

      ::oTarifas := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::cTarifas, ::cTarifas:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )
      TBtnBmp():ReDefine( 141, "GC_IMPORT_16",,,,,{|| ::ImportaTarifas() }, ::oDlg, .F., , .F.,  )

      ::oAlbaranes := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::cAlbaranes, ::cAlbaranes:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )
      TBtnBmp():ReDefine( 151, "GC_IMPORT_16",,,,,{|| ::ImportaAlbaranes }, ::oDlg, .F., , .F.,  )

      ::oFacturas := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cFacturas, ::cFacturas:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )
      TBtnBmp():ReDefine( 161, "GC_IMPORT_16",,,,,{|| ::ImportaFacturas() }, ::oDlg, .F., , .F.,  )

      ::oStock := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::cStock, ::cStock:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      ::oCategoria := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, ::cCategoria, ::cCategoria:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 231 )

         ::oCategoria:bHelp := {|| BrwCategoria( ::oCategoria, ::oCategoria:oHelpText, ::oBmpCategoria ) }
         ::oCategoria:bValid := {|| cCategoria( ::oCategoria, ::oCategoria:oHelpText, ::oBmpCategoria ) }




      ::oBmpCategoria := TBitmap():ReDefine( 232,,, ::oDlg,,, .F., .F.,,, .F.,,, .T. )

      ::oSayProcess := TSay():ReDefine( 700,, ::oDlg,,,, .F.,, .F., .F., )

      TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .F. )



   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   oBmp:End()

RETURN ( Self )



static FUNCTION ImportGamma_getToken( ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local oXml
   local cXml
   local oXmlId
   local oXmlIdData
   local oWebService
   local hJson

   ::setProcessText( "Pido el token para hacer la consulta" )

   cXml  := "user=" + ::cUsuario + "&password=" + ::cClave

   oWebService    := WebService():New()
   oWebService:setService( "asociado/login" )
   oWebService:setUrl( ::cDireccion )
   oWebService:setParams( "user", ::cUsuario )
   oWebService:setParams( "password", ::cClave )
   oWebService:setMethod( "POST" )
   oWebService:Open()
   oWebService:SetRequestHeader( "Content-Type", "application/x-www-form-urlencoded" )
   oWebService:SetRequestHeader( "Content-Length", len( cXml ) )

   oWebService:Send( cXml )

   hb_jsonDecode( oWebService:getResponseText(), @hJson )

   ::cToken    := hGet( hJson, "token" )

   ::setProcessText( "Token: " + ::cToken )

   oWebService:End()

RETURN ( Self )



static FUNCTION ImportGamma_getStockProduct( cCodArt ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local oWebService
   local hJson
   local hStock
   local hArticulo
   local nStock   := 0

   if Empty( cCodArt )
      return ( Self )
   end

   ::getToken()

   oWebService    := WebService():New()
   oWebService:setService( ::cStock + "/" + AllTrim( cCodArt ) )
   oWebService:setUrl( ::cDireccion )
   oWebService:setParams( "token", ::cToken )
   oWebService:setMethod( "GET" )
   oWebService:Open()
   oWebService:Send()

   if oWebService:getStatus() == 200 .OR. oWebService:getStatus() == 201

      hb_jsonDecode( oWebService:getResponseText(), @hJson )

      hStock      := hGet( hJson, "data" )
      hArticulo   := hGet( hStock, AllTrim( cCodArt ) )

   else
      ::setProcessText( "Fallo de comunicación." )
   end

   oWebService:End()

   MsgInfo( hGet( hArticulo, "Qty" ) )

RETURN ( Self )



static FUNCTION ImportGamma_ImportaArticulos( ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local oWebService
   local hJson
   local aArticulos

   if Empty( ::cCategoria )
      MsgInfo( "Tiene que seleccionar una categoría para importar artículos." )
      ::oCategoria:SetFocus()
      return ( self )
   end

   ::getToken()

   ::setProcessText( "Consultando de tabla de artículos." )

   oWebService    := WebService():New()
   oWebService:setService( ::cArticulos )
   oWebService:setUrl( ::cDireccion )
   oWebService:setParams( "token", ::cToken )
   oWebService:setMethod( "GET" )
   oWebService:Open()
   oWebService:Send()

   if oWebService:getStatus() == 200 .OR. oWebService:getStatus() == 201

      ::setProcessText( "Conexión realizada con éxito." )

      hb_jsonDecode( oWebService:getResponseText(), @hJson )

      aArticulos  := hGet( hJson, "data" )

   else

      ::setProcessText( "Fallo de comunicación." )

   end

   oWebService:End()

   ::setProcessText(  "Conexión cerrada." )

   if Len( aArticulos ) > 0
      aEval( aArticulos, {| hArticulo | ::IntegraArticulo( hArticulo ) } )
   end

   ::setProcessText(  "Importación de artículos finalizada con éxito." )

RETURN ( Self )



static FUNCTION ImportGamma_IntegraArticulo( hArticulo ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   if ArticulosModel():exist( hGet( hArticulo, "COD_ARTICULO" ) )
      ::editArticulo( hArticulo )
   else
      ::addArticulo( hArticulo )
   end

RETURN ( Self )



static FUNCTION ImportGamma_editArticulo( hArticulo ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local cArea := "EditArticuloGamma"
   local cSql

   ::oSayProcess:SetText( "Modificando artículo: " + hGet( hArticulo, "DESCRIPCION_ERP" ) )

   cSql        := "UPDATE " + ArticulosModel():getTableName() + Space( 1 )
   cSql        += "SET Nombre=" + quoted( StrTran( upper( hGet( hArticulo, "DESCRIPCION_ERP" ) ), "'", "" ) ) + ","
   cSql        += "nPesoKg=" + AllTrim( Str( hGet( hArticulo, "PESO" ) ) ) + ","
   cSql        += "lObs=.t., "
   cSql        += "cCodCate=" + quoted( ::cCategoria ) + Space( 1 )
   cSql        += "WHERE Codigo = " + quoted( hGet( hArticulo, "COD_ARTICULO" ) )

   ArticulosModel():ExecuteSqlStatement( cSql, @cArea )

RETURN ( Self )



static FUNCTION ImportGamma_addArticulo( hArticulo ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local cArea := "AddArticuloGamma"
   local cSql

   ::oSayProcess:SetText( "Añadiendo artículo: " + hGet( hArticulo, "DESCRIPCION_ERP" ) )

   cSql        := "INSERT INTO " + ArticulosModel():getTableName()
   cSql        += " ( Codigo, Nombre, TipoIva, nPesoKg, lObs, cCodCate ) VALUES "
   cSql        += " ( " + quoted( hGet( hArticulo, "COD_ARTICULO" ) )
   cSql        += ", " + quoted( strTran( upper( hGet( hArticulo, "DESCRIPCION_ERP" ) ), "'", "" ) )
   cSql        += ", 'G', " + AllTrim( Str( hGet( hArticulo, "PESO" ) ) ) + ", .t., " + quoted( ::cCategoria ) + " )"

   ArticulosModel():ExecuteSqlStatement( cSql, @cArea )

RETURN ( Self )



static FUNCTION ImportGamma_ImportaTarifas( ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local oWebService
   local hJson
   local aTarifas

   ::getToken()

   ::setProcessText( "Consultando de tabla de tarifas." )

   oWebService    := WebService():New()
   oWebService:setService( ::cTarifas )
   oWebService:setUrl( ::cDireccion )
   oWebService:setParams( "token", ::cToken )
   oWebService:setMethod( "GET" )
   oWebService:Open()
   oWebService:Send()

   if oWebService:getStatus() == 200 .OR. oWebService:getStatus() == 201

      ::setProcessText( "Conexión realizada con éxito." )

      hb_jsonDecode( oWebService:getResponseText(), @hJson )

      aTarifas  := hGet( hJson, "data" )

   else

      ::setProcessText( "Fallo de comunicación." )

   end

   oWebService:End()

   ::setProcessText(  "Conexión cerrada." )

   if Len( aTarifas ) > 0
      aEval( aTarifas, {| hTarifa | ::IntegraTarifa( hTarifa ) } )
   end

   ::setProcessText(  "Importación de tarifas finalizada con éxito." )

RETURN ( Self )



static FUNCTION ImportGamma_IntegraTarifa( hTarifa ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   if ArticulosModel():exist( hGet( hTarifa, "COD_ARTICULO" ) )
      ::editTarifa( hTarifa )
   else
      ::addTarifa( hTarifa )
   end

RETURN ( Self )



static FUNCTION ImportGamma_editTarifa( hTarifa ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local cArea := "EditTarifaGamma"
   local cSql

   ::oSayProcess:SetText( "Modificando tarifa: " + hGet( hTarifa, "DESCRIPCION" ) )

   cSql        := "UPDATE " + ArticulosModel():getTableName() + Space( 1 )
   cSql        += "SET Nombre=" + quoted( strTran( hGet( hTarifa, "DESCRIPCION" ), "'", "" ) ) + ","
   cSql        += "pCosto=" + AllTrim( Str( hGet( hTarifa, "PVP_UNIDAD" ) ) ) + Space( 1 )
   cSql        += "WHERE Codigo = " + quoted( hGet( hTarifa, "COD_ARTICULO" ) )

   ArticulosModel():ExecuteSqlStatement( cSql, @cArea )

RETURN ( Self )



static FUNCTION ImportGamma_addTarifa( hTarifa ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   local cArea := "AddTarifaGamma"
   local cSql

   ::oSayProcess:SetText( "Añadiendo tarifa: " + hGet( hTarifa, "DESCRIPCION" ) )

   cSql        := "INSERT INTO " + ArticulosModel():getTableName()
   cSql        += " ( Codigo, Nombre, TipoIva, pCosto ) VALUES "
   cSql        += " ( " + quoted( hGet( hTarifa, "COD_ARTICULO" ) )
   cSql        += ", " + quoted( strTran(hGet( hTarifa, "DESCRIPCION" ), "'", "" ) )
   cSql        += ", 'G', " + AllTrim( Str( hGet( hTarifa, "PVP_UNIDAD" ) ) ) + " )"

   ArticulosModel():ExecuteSqlStatement( cSql, @cArea )

RETURN ( Self )



static FUNCTION ImportGamma_ImportaAlbaranes( ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   MsgInfo( "Importo albaranes" )

RETURN ( Self )



static FUNCTION ImportGamma_ImportaFacturas( ) ; local Self AS CLASS ImportGamma := QSelf() AS CLASS ImportGamma

   MsgInfo( "Importo facturas" )

RETURN ( Self )
