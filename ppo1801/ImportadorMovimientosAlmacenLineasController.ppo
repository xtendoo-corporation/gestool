#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ImportadorMovimientosAlmacenLineasController.prg"
_HB_CLASS ImportadorMovimientosAlmacenLineasController ; function ImportadorMovimientosAlmacenLineasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImportadorMovimientosAlmacenLineasController", iif( .T., { @SQLBaseController() }, { @HBObject() } ), @ImportadorMovimientosAlmacenLineasController() ) ) ;

   _HB_MEMBER { oStock } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oStock"}, .F. )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @ImportadorMovimientosAlmacenLineasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ImportadorMovimientosAlmacenLineasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ImportadorMovimientosAlmacenLineasController_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER importarAlmacen(); oClass:AddMethod( "importarAlmacen", @ImportadorMovimientosAlmacenLineasController_importarAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER calculaStock( cArea); oClass:AddMethod( "calculaStock", @ImportadorMovimientosAlmacenLineasController_calculaStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER procesaStock( sStockArticulo); oClass:AddMethod( "procesaStock", @ImportadorMovimientosAlmacenLineasController_procesaStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER creaRegistro(); oClass:AddMethod( "creaRegistro", @ImportadorMovimientosAlmacenLineasController_creaRegistro(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER validateFamiliaInicio(); oClass:AddInline( "validateFamiliaInicio", {|Self | ( ( Self ) ), ( iif(  ::validate( "codigo_familia_inicio", ::oDialogView:oFamiliaInicio:varGet() ), ::stampNombreFamilia( ::oDialogView:oFamiliaInicio ), .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER stampNombreFamilia(); oClass:AddInline( "stampNombreFamilia", {|Self, oFamilia | ( ( Self ) ), ( oFamilia:oHelpText:cText( FamiliasModel():getNombre( oFamilia:varGet() ) ), .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER stampArticuloNombre(); oClass:AddInline( "stampArticuloNombre", {|Self, oArticulo | ( ( Self ) ), ( oArticulo:oHelpText:cText( ArticulosModel():getNombre( oArticulo:varGet() ) ), .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isConsolidacion(); oClass:AddInline( "isConsolidacion", {|Self | ( ( Self ) ), ( ::oSenderController:oDialogView:oRadioTipoMovimento:nOption() == 4 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUnidadesStock(); oClass:AddInline( "getUnidadesStock", {|Self, sStockArticulo | ( ( Self ) ), ( iif( ::isConsolidacion() .AND. !::oDialogView:lStockConsolidacion, 0, hGet( sStockArticulo, "unidades_articulo" ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImportadorMovimientosAlmacenLineasController ;



static FUNCTION ImportadorMovimientosAlmacenLineasController_New( oController ) ; local Self AS CLASS ImportadorMovimientosAlmacenLineasController := QSelf() AS CLASS ImportadorMovimientosAlmacenLineasController

   ::Super:New( oController )

   ::oStock             := TStock():New()

   ::cTitle             := "Importador movimientos almacen lineas"

   ::oDialogView        := ImportadorMovimientosAlmacenLineasView():New( self )

   ::oValidator         := ImportadorMovimientosAlmacenLineasValidator():New( self )

RETURN ( Self )



static FUNCTION ImportadorMovimientosAlmacenLineasController_End( ) ; local Self AS CLASS ImportadorMovimientosAlmacenLineasController := QSelf() AS CLASS ImportadorMovimientosAlmacenLineasController

   ::Super:End()

   ::oStock:End()

RETURN ( Self )



static FUNCTION ImportadorMovimientosAlmacenLineasController_Activate( ) ; local Self AS CLASS ImportadorMovimientosAlmacenLineasController := QSelf() AS CLASS ImportadorMovimientosAlmacenLineasController

   if empty( ::oSenderController:oDialogView:oGetAlmacenDestino:varGet() )
      msgStop( "Es necesario cumplimentar el almacén destino" )
      RETURN ( Self )
   end

RETURN ( ::oDialogView:Activate() )



static FUNCTION ImportadorMovimientosAlmacenLineasController_importarAlmacen( ) ; local Self AS CLASS ImportadorMovimientosAlmacenLineasController := QSelf() AS CLASS ImportadorMovimientosAlmacenLineasController

   local cArea           := "ArtToImport"

   ArticulosModel():getArticulosToImport( @cArea, ::oDialogView:getRange() )

   ::oDialogView:oMtrStock:setTotal( ( cArea )->( lastrec() ) )

   while !( cArea )->( eof() )

      ::calculaStock( cArea )

      ::oDialogView:oMtrStock:autoInc()

      ( cArea )->( dbskip() )

   end

   ( cArea )->( dbCloseArea() )

   ::oSenderController:oLineasController:oBrowseView:goTop()
   ::oSenderController:oLineasController:oBrowseView:Refresh()

RETURN ( Self )



static FUNCTION ImportadorMovimientosAlmacenLineasController_calculaStock( cArea ) ; local Self AS CLASS ImportadorMovimientosAlmacenLineasController := QSelf() AS CLASS ImportadorMovimientosAlmacenLineasController

   local aStockArticulo

   aStockArticulo       := {}

   aeval( aStockArticulo, {|sStockArticulo| ::procesaStock( sStockArticulo, cArea ) } )

RETURN ( Self )



static FUNCTION ImportadorMovimientosAlmacenLineasController_procesaStock( sStockArticulo, cArea ) ; local Self AS CLASS ImportadorMovimientosAlmacenLineasController := QSelf() AS CLASS ImportadorMovimientosAlmacenLineasController

   if hGet( sStockArticulo, "unidades_articulo" ) <> 0 .OR. ::oDialogView:lStockCero
      ::creaRegistro( cArea, sStockArticulo )
   end

RETURN ( Self )



static FUNCTION ImportadorMovimientosAlmacenLineasController_creaRegistro( cArea, sStockArticulo ) ; local Self AS CLASS ImportadorMovimientosAlmacenLineasController := QSelf() AS CLASS ImportadorMovimientosAlmacenLineasController

   local nId
   local hBuffer

   hBuffer                                := ::oSenderController:oLineasController:oModel:loadBlankBuffer()

   hBuffer[ "parent_uuid" ]               := ::getSenderController():getUuid()
   hBuffer[ "codigo_articulo" ]           := ( cArea )->Codigo
   hBuffer[ "nombre_articulo" ]           := ( cArea )->Nombre
   hBuffer[ "precio_articulo" ]           := ( cArea )->pCosto
   hBuffer[ "codigo_primera_propiedad" ]  := hGet( sStockArticulo, "codigo_primera_propiedad" )
   hBuffer[ "valor_primera_propiedad" ]   := hGet( sStockArticulo, "valor_primera_propiedad" )
   hBuffer[ "codigo_segunda_propiedad" ]  := hGet( sStockArticulo, "codigo_segunda_propiedad" )
   hBuffer[ "valor_segunda_propiedad" ]   := hGet( sStockArticulo, "valor_segunda_propiedad" )
   hBuffer[ "lote" ]                      := hGet( sStockArticulo, "lote" )

   hBuffer[ "unidades_articulo" ]         := ::getUnidadesStock( sStockArticulo )

   nId                                    := ::oSenderController:oLineasController:oModel:insertBuffer( hBuffer )

   if !empty( nId )
      ::oSenderController:oLineasController:refreshRowSetAndFindId( nId )
      ::oSenderController:oLineasController:oBrowseView:Refresh()
   end

RETURN ( Self )
