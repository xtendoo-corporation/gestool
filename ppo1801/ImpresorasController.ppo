#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ImpresorasController.prg"
_HB_CLASS ImpresorasController ; function ImpresorasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpresorasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ImpresorasController() ) ) ;

   _HB_MEMBER { oTiposImpresorasController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTiposImpresorasController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ImpresorasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ImpresorasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpresorasController ;



static FUNCTION ImpresorasController_New( oSenderController ) ; local Self AS CLASS ImpresorasController := QSelf() AS CLASS ImpresorasController

   ::Super:New( oSenderController )

   ::cTitle                         := "Impresoras"

   ::cName                          := "impresoras"



   ::hImage                         := {  "16" => "gc_printer2_16", "32" => "gc_printer2_32", "48" => "gc_printer2_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLImpresorasModel():New( self )

   ::oBrowseView                    := ImpresorasBrowseView():New( self )

   ::oDialogView                    := ImpresorasView():New( self )

   ::oValidator                     := ImpresorasValidator():New( self, ::oDialogView )

   ::oTiposImpresorasController     := TiposImpresorasController():New( self )

   ::oRepository                    := ImpresorasRepository():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )


RETURN ( Self )



static FUNCTION ImpresorasController_End( ) ; local Self AS CLASS ImpresorasController := QSelf() AS CLASS ImpresorasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::Super:End()

RETURN ( Self )








_HB_CLASS ImpresorasBrowseView ; function ImpresorasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpresorasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ImpresorasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ImpresorasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpresorasBrowseView ;



static FUNCTION ImpresorasBrowseView_addColumns( ) ; local Self AS CLASS ImpresorasBrowseView := QSelf() AS CLASS ImpresorasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "tipo_impresora"
      :cHeader             := "Tipo impresora"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "tipo_nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre_impresora"
      :cHeader             := "Nombre impresora"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre_impresora" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS ImpresorasView ; function ImpresorasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpresorasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ImpresorasView() ) ) ;

   _HB_MEMBER { oTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTipo"}, .F. )

   _HB_MEMBER { aTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTipo"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ImpresorasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OnActivate(); oClass:AddMethod( "OnActivate", @ImpresorasView_OnActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpresorasView ;








static FUNCTION ImpresorasView_Activate( ) ; local Self AS CLASS ImpresorasView := QSelf() AS CLASS ImpresorasView

   ::onActivate()



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "Impresora", "IMPRESORA",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )








::oTipo := TComboBox():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "tipo_impresora_uuid" ], ::oController:oModel:hBuffer[ "tipo_impresora_uuid" ]:= u ) }, ::aTipo, ::oDialog,, {||       ( ::oController:validate( "tipo_impresora_uuid" ) )},,,,, .F., {||        ( ::oController:isNotZoomMode() )},,,,,, "::oTipo",,,,,,, )




   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre_impresora" ], ::oController:oModel:hBuffer[ "nombre_impresora" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre_impresora" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo_corte" ], ::oController:oModel:hBuffer[ "codigo_corte" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "ruta_comandas" ], ::oController:oModel:hBuffer[ "ruta_comandas" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "ruta_anulacion" ], ::oController:oModel:hBuffer[ "ruta_anulacion" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )








   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )



static FUNCTION ImpresorasView_OnActivate( ) ; local Self AS CLASS ImpresorasView := QSelf() AS CLASS ImpresorasView

   ::aTipo        := ::oController:oTiposImpresorasController:oModel:getArrayNombres()

RETURN ( self )







_HB_CLASS ImpresorasValidator ; function ImpresorasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpresorasValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ImpresorasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ImpresorasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpresorasValidator ;



static FUNCTION ImpresorasValidator_getValidators( ) ; local Self AS CLASS ImpresorasValidator := QSelf() AS CLASS ImpresorasValidator


      ::hValidators  := {  "nombre_impresora" =>                {  "required"           => "El nombre es un dato requerido" } , "tipo_impresora_uuid"  =>            {  "required"           => "El tipo es un datos requerido"  }  }

RETURN ( ::hValidators )









_HB_CLASS SQLImpresorasModel ; function SQLImpresorasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLImpresorasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLImpresorasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "Impresoras", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLImpresorasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLImpresorasModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getTipoImpresoraUuidAttribute(); oClass:AddInline( "getTipoImpresoraUuidAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), space( 40 ), SQLTiposImpresorasModel():getNombreWhereUuid( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setTipoImpresoraUuidAttribute(); oClass:AddInline( "setTipoImpresoraUuidAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), "", SQLTiposImpresorasModel():getUuidWhereNombre( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLImpresorasModel ;



static FUNCTION SQLImpresorasModel_getInitialSelect( ) ; local Self AS CLASS SQLImpresorasModel := QSelf() AS CLASS SQLImpresorasModel











   local cSelect  := "SELECT impresoras.id,"                                                               + " " +  "impresoras.uuid,"                                                                 + " " +  "impresoras.nombre_impresora,"                                                     + " " +  "impresoras.tipo_impresora_uuid,"                                                  + " " +  "impresoras.codigo_corte,"                                                         + " " +  "impresoras.ruta_comandas,"                                                        + " " +  "impresoras.ruta_anulacion,"                                                       + " " +  "tipos_impresoras.nombre as tipo_nombre,"                                          + " " +  "tipos_impresoras.uuid"                                                           + " " +  "FROM impresoras"                                                          + " " +  "INNER JOIN tipos_impresoras ON impresoras.tipo_impresora_uuid = tipos_impresoras.uuid"  + " "

RETURN ( cSelect )



static FUNCTION SQLImpresorasModel_getColumns( ) ; local Self AS CLASS SQLImpresorasModel := QSelf() AS CLASS SQLImpresorasModel


   hset( ::hColumns, "id",                   {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                 {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } } )


   hset( ::hColumns, "parent_uuid",          {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| ::getSenderControllerParentUuid() } }  )


   hset( ::hColumns, "nombre_impresora",     {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "tipo_impresora_uuid",  {  "create"    => "VARCHAR( 40 )"                          , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "codigo_corte",         {  "create"    => "VARCHAR( 50 )"                          , "default"   => {|| space( 50 ) } }                       )


   hset( ::hColumns, "ruta_comandas",        {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "ruta_anulacion",       {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


RETURN ( ::hColumns )







_HB_CLASS ImpresorasRepository ; function ImpresorasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpresorasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ImpresorasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLImpresorasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpresorasRepository ;