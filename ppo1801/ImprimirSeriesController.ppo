#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ImprimirSeriesController.prg"
_HB_CLASS ImprimirSeriesController ; function ImprimirSeriesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImprimirSeriesController", iif( .T., { @SQLPrintController() }, { @HBObject() } ), @ImprimirSeriesController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @ImprimirSeriesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ImprimirSeriesController_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER showDocument(); oClass:AddMethod( "showDocument", @ImprimirSeriesController_showDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER newDocument(); oClass:AddMethod( "newDocument", @ImprimirSeriesController_newDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER editDocument(); oClass:AddMethod( "editDocument", @ImprimirSeriesController_editDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSortedIds(); oClass:AddMethod( "getSortedIds", @ImprimirSeriesController_getSortedIds(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImprimirSeriesController ;



static FUNCTION ImprimirSeriesController_New( oController ) ; local Self AS CLASS ImprimirSeriesController := QSelf() AS CLASS ImprimirSeriesController

   ::Super:New( oController )

   ::cDirectory                        := cPatDocuments( "Movimientos almacen" )

   ::oDialogView                       := ImprimirSeriesView():New( self )

RETURN ( Self )



static FUNCTION ImprimirSeriesController_Activate( ) ; local Self AS CLASS ImprimirSeriesController := QSelf() AS CLASS ImprimirSeriesController

   ::oDialogView:Activate()

RETURN ( Self )



static FUNCTION ImprimirSeriesController_getSortedIds( ) ; local Self AS CLASS ImprimirSeriesController := QSelf() AS CLASS ImprimirSeriesController

   if empty(::oDialogView)
      RETURN ( ::getIds() )
   end

   if ::oDialogView:lInvertirOrden
      RETURN ( asort( ::getIds(), , , {|x,y| x > y} ) )
   end

RETURN ( asort( ::getIds(), , , {|x,y| x < y} ) )



static FUNCTION ImprimirSeriesController_showDocument( nDevice, cFileName, nCopies, cPrinter ) ; local Self AS CLASS ImprimirSeriesController := QSelf() AS CLASS ImprimirSeriesController

   local nId
   local aIds
   local oReport
   local oWaitMeter

   if empty( nDevice )
      msgStop( "No hay dispositivo de salida definido" )
      RETURN ( self )
   end

   if empty( cFileName )
      msgStop( "No hay formato definido" )
      RETURN ( self )
   end

   ::setFileName( cFileName )

   aIds              := ::getSortedIds()

   oWaitMeter        := TWaitMeter():New( "Imprimiendo documento(s)", "Espere por favor..." )
   oWaitMeter:setTotal( len( aIds ) )
   oWaitMeter:Run()

   oReport           := MovimientosAlmacenReport():New( self )

   oReport:createFastReport()

   oReport:setDevice( nDevice )

   oReport:setCopies( nCopies )

   if !empty( cPrinter )
      oReport:setPrinter( cPrinter )
   end

   oReport:setDirectory( ::getDirectory() )

   oReport:setFileName( ::getFileName() )

   for each nId in aIds

      oWaitMeter:setMessage( "Imprimiendo documento " + alltrim( str( hb_enumindex() ) ) + " de " + alltrim( str( len( aIds ) ) ) )

      oReport:buildRowSet( nId )

      oReport:setUserDataSet()

      if oReport:isLoad()

         oReport:Show()

      end

      oReport:freeRowSet()

      oWaitMeter:autoInc()

   next

   oReport:DestroyFastReport()

   oWaitMeter:End()

RETURN ( Self )



static FUNCTION ImprimirSeriesController_editDocument( ) ; local Self AS CLASS ImprimirSeriesController := QSelf() AS CLASS ImprimirSeriesController

   local oReport

   ::setFileName( ::oDialogView:cListboxFile )

   if empty( ::getFileName() )
      msgStop( "No hay formato definido" )
      RETURN ( self )
   end

   oReport  := MovimientosAlmacenReport():New( self )

   oReport:createFastReport()

   oReport:setDevice( 2 )

   oReport:setDirectory( ::getDirectory() )

   oReport:setFileName( ::getFileName() )

   oReport:buildRowSet()

   oReport:setUserDataSet()

   if oReport:isLoad()

      oReport:Design()

      oReport:DestroyFastReport()

   end

RETURN ( self )



static FUNCTION ImprimirSeriesController_newDocument( ) ; local Self AS CLASS ImprimirSeriesController := QSelf() AS CLASS ImprimirSeriesController

   local oReport

   oReport  := MovimientosAlmacenReport():New( self )

   oReport:createFastReport()

   oReport:setDevice( 2 )

   oReport:setDirectory( ::getDirectory() )

   oReport:buildRowSet()

   oReport:setUserDataSet()

   oReport:Design()

   oReport:DestroyFastReport()

RETURN ( self )
