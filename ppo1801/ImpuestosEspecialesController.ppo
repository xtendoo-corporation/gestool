#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ImpuestosEspecialesController.prg"
_HB_CLASS ImpuestosEspecialesController ; function ImpuestosEspecialesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpuestosEspecialesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ImpuestosEspecialesController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ImpuestosEspecialesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ImpuestosEspecialesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpuestosEspecialesController ;



static FUNCTION ImpuestosEspecialesController_New( oSenederController ) ; local Self AS CLASS ImpuestosEspecialesController := QSelf() AS CLASS ImpuestosEspecialesController

   ::Super:New( oSenederController )

   ::cTitle                      := "Impuestos Especiales"

   ::cName                       := "impuestos_especiales"



   ::hImage                      := {  "16" => "gc_moneybag_euro_16", "32" => "gc_moneybag_euro_32", "48" => "gc_moneybag_euro_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLImpuestosEspecialesModel():New( self )

   ::oBrowseView                    := ImpuestosEspecialesBrowseView():New( self )

   ::oDialogView                    := ImpuestosEspecialesView():New( self )

   ::oValidator                     := ImpuestosEspecialesValidator():New( self, ::oDialogView )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oRepository                    := ImpuestosEspecialesRepository():New( self )

   ::oGetSelector                   := GetSelector():New( self )

RETURN ( Self )


static FUNCTION ImpuestosEspecialesController_End( ) ; local Self AS CLASS ImpuestosEspecialesController := QSelf() AS CLASS ImpuestosEspecialesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oCamposExtraValoresController:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )











_HB_CLASS ImpuestosEspecialesBrowseView ; function ImpuestosEspecialesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpuestosEspecialesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ImpuestosEspecialesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ImpuestosEspecialesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpuestosEspecialesBrowseView ;



static FUNCTION ImpuestosEspecialesBrowseView_addColumns( ) ; local Self AS CLASS ImpuestosEspecialesBrowseView := QSelf() AS CLASS ImpuestosEspecialesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "importe"
      :cHeader             := "Importe"
      :nWidth              := 120
      :bEditValue          := {|| ::getRowSet():fieldGet( "importe" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "subcuenta"
      :cHeader             := "Subcuenta"
      :nWidth              := 120
      :bEditValue          := {|| ::getRowSet():fieldGet( "subcuenta" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS ImpuestosEspecialesView ; function ImpuestosEspecialesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpuestosEspecialesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ImpuestosEspecialesView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ImpuestosEspecialesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpuestosEspecialesView ;



static FUNCTION ImpuestosEspecialesView_Activate( ) ; local Self AS CLASS ImpuestosEspecialesView := QSelf() AS CLASS ImpuestosEspecialesView

   local oBmpGeneral
   local oSayCamposExtra



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "impuesto especial", "IMPUESTO_ESPECIAL",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "importe" ], ::oController:oModel:hBuffer[ "importe" ]:= u ) }, ::oDialog,, "@! 9999999.999999",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "subcuenta" ], ::oController:oModel:hBuffer[ "subcuenta" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 131, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "subcuenta" ], ::oController:oModel:hBuffer[ "subcuenta" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TSayCheck():ReDefine( 140, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "aplicar" ], ::oController:oModel:hBuffer[ "aplicar" ]:= u ) }, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, 142 )






   ::oSayCamposExtra := TSay():ReDefine( 150, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()

RETURN ( ::oDialog:nResult )








_HB_CLASS ImpuestosEspecialesValidator ; function ImpuestosEspecialesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpuestosEspecialesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ImpuestosEspecialesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ImpuestosEspecialesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpuestosEspecialesValidator ;



static FUNCTION ImpuestosEspecialesValidator_getValidators( ) ; local Self AS CLASS ImpuestosEspecialesValidator := QSelf() AS CLASS ImpuestosEspecialesValidator




   ::hValidators  := {  "nombre" =>                {  "required"           => "El nombre es un dato requerido", "unique"             => "El nombre introducido ya existe" }, "codigo" =>                {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe"  } }
RETURN ( ::hValidators )










_HB_CLASS SQLImpuestosEspecialesModel ; function SQLImpuestosEspecialesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLImpuestosEspecialesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLImpuestosEspecialesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "impuestos_especiales", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLImpuestosEspecialesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLImpuestosEspecialesModel ;



static FUNCTION SQLImpuestosEspecialesModel_getColumns( ) ; local Self AS CLASS SQLImpuestosEspecialesModel := QSelf() AS CLASS SQLImpuestosEspecialesModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 )"                            , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "importe",           {  "create"    => "FLOAT( 14,6 )"                            , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "subcuenta",         {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "aplicar",           {  "create"    => "BIT"                                     , "default"   => {|| .F. } }                               )

RETURN ( ::hColumns )











_HB_CLASS ImpuestosEspecialesRepository ; function ImpuestosEspecialesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ImpuestosEspecialesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ImpuestosEspecialesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLRutasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ImpuestosEspecialesRepository ;