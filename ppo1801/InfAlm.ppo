#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfAlm.prg"
_HB_CLASS InfAlm ; function InfAlm ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfAlm", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfAlm() ) ) ;

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfAlm_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfAlm_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfAlm_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfAlm ;



static FUNCTION InfAlm_Create( ) ; local Self AS CLASS InfAlm := QSelf() AS CLASS InfAlm

   ::AddField( "cCodAlm",   "C",  3, 0, {|| "" },     "Cod.",              .T., "Código de almacen",                5, .F. )
   ::AddField( "cNomAlm",   "C", 20, 0, {|| "" },     "Nombre",            .T., "Nombre de almacen",               30, .F. )
   ::AddField( "cDirAlm",   "C", 50, 0, {|| "" },     "Dir.",              .T., "Domicilio de almacen",            15, .F. )
   ::AddField( "cPosAlm",   "C",  7, 0, {|| "" },     "C.P.",              .T., "Código postal de almacen",        15, .F. )
   ::AddField( "cPobAlm",   "C", 30, 0, {|| "" },     "Población",         .T., "Población de almacen",            15, .F. )
   ::AddField( "cProAlm",   "C", 20, 0, {|| "" },     "Provincia",         .T., "Provincia de almacen",            15, .F. )
   ::AddField( "cTfnAlm",   "C", 12, 0, {|| "" },     "Teléfono",          .F., "Teléfono de almacen",              6, .F. )
   ::AddField( "cFaxAlm",   "C", 12, 0, {|| "" },     "Fax",               .F., "Fax de almacen",                  15, .F. )
   ::AddField( "cPerAlm",   "C", 50, 0, {|| "" },     "Contacto",          .F., "Persona de contacto de almacen",  12, .F. )
   ::AddField( "cCodCli",   "C", 12, 0, {|| "" },     "Cliente",           .F., "Codigo del cliente",              12, .F. )
   ::AddField( "cUbiCa1",   "C",  5, 0, {|| "" },     "Cod. Ubi1",         .F., "Ubicación 1",                     12, .F. )
   ::AddField( "cNomUbi1",  "C",  5, 2, {|| "" },     "Nom. Ubi1",         .F., "Nombre ubicación 1",               6, .F. )
   ::AddField( "cUbiCa2",   "C",  5, 2, {|| "" },     "Cod. Ubi2",         .F., "Ubicación 2",                      6, .F. )
   ::AddField( "cNomUbi2",  "C", 30, 2, {|| "" },     "Nom. Ubi2",         .F., "Nombre ubicación 2",               6, .F. )
   ::AddField( "cUbiCa3",   "C", 30, 2, {|| "" },     "Cod. Ubi3",         .F., "Ubicación 3",                      6, .F. )
   ::AddField( "cNomUbi3",  "C", 30, 2, {|| "" },     "Nom. Ubi3",         .F., "Nombre ubicación 3",               6, .F. )

   ::AddTmpIndex ( "cCodAlm", "cCodAlm" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfAlm_lResource( cFld ) ; local Self AS CLASS InfAlm := QSelf() AS CLASS InfAlm

   if !::StdResource( "INF_ALM01" )
      return .F.
   end





   ::oDefAlmInf( 70, 80, 90, 100, 60 )





   ::oMtrInf:SetTotal( ::oDbfAlm:Lastrec() )

   ::CreateFilter( aItmAlm(), ::oDbfAlm:cAlias )

RETURN .T.






static FUNCTION InfAlm_lGenerate( ) ; local Self AS CLASS InfAlm := QSelf() AS CLASS InfAlm

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Almacenes : " + if( ::lAllAlm, "Todos", AllTrim( ::cAlmOrg ) + " > " + AllTrim( ::cAlmDes ) ) } }

   ::oDbfAlm:OrdSetFocus( "CCODALM" )

   ::oDbfAlm:GoTop()
   while !::lBreak .AND. !::oDbfAlm:Eof()


      if ( ::lAllAlm .OR. ( ::oDbfAlm:cCodAlm >= ::cAlmOrg .AND. ::oDbfAlm:cCodAlm <= ::cAlmDes ) ) .AND.  ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:cCodAlm     := ::oDbfAlm:cCodAlm
         ::oDbf:cNomAlm     := ::oDbfAlm:cNomAlm
         ::oDbf:cDirAlm     := ::oDbfAlm:cDirAlm
         ::oDbf:cPosAlm     := ::oDbfAlm:cPosAlm
         ::oDbf:cPobAlm     := ::oDbfAlm:cPobAlm
         ::oDbf:cProAlm     := ::oDbfAlm:cProAlm
         ::oDbf:cTfnAlm     := ::oDbfAlm:cTfnAlm
         ::oDbf:cFaxAlm     := ::oDbfAlm:cFaxAlm
         ::oDbf:cPerAlm     := ::oDbfAlm:cPerAlm
         ::oDbf:cCodCli     := ::oDbfAlm:cCodCli
         ::oDbf:cUbiCa1     := ::oDbfAlm:cUbiCa1
         ::oDbf:cNomUbi1    := ::oDbfAlm:cNomUbi1
         ::oDbf:cUbiCa2     := ::oDbfAlm:cUbiCa2
         ::oDbf:cNomUbi2    := ::oDbfAlm:cNomUbi2
         ::oDbf:cUbiCa3     := ::oDbfAlm:cUbiCa3
         ::oDbf:cNomUbi3    := ::oDbfAlm:cNomUbi3

         ::oDbf:Save()

      end

      ::oDbfAlm:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfAlm:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
