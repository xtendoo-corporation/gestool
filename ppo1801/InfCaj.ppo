#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfCaj.prg"
_HB_CLASS InfCaj ; function InfCaj ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfCaj", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfCaj() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfCaj } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCaj"}, .F. )
   _HB_MEMBER { AS CHARACTER cCajOrg } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCajOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cCajDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCajDes"}, .F. )
   _HB_MEMBER { AS LOGIC lAllCaj } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllCaj"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfCaj_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @InfCaj_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @InfCaj_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfCaj_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfCaj_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfCaj ;



static FUNCTION InfCaj_Create( ) ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   ::AddField( "CCODCAJ",      "C",  3, 0, {|| "" },   "Cod. Caj.",      .T., "Código de caja",          10, .F. )
   ::AddField( "CNOMCAJ",      "C", 30, 0, {|| "" },   "Nom. Caj.",      .T., "Nombre de la caja",       30, .F. )
   ::AddField( "CCAPCAJ",      "C",  3, 0, {|| "" },   "Captura",        .F., "Código de captura",       10, .F. )

   ::AddTmpIndex ( "CCODCAJ", "CCODCAJ" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfCaj_OpenFiles( ) ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfCaj := DbfServer( "CAJAS.DBF", ):NewOpen( "CAJAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfCaj:AddBag( "CAJAS.CDX" ) ; ::oDbfCaj:AddBag( ) ; ::oDbfCaj:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION InfCaj_CloseFiles( ) ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   if !Empty( ::oDbfCaj ) .AND. ::oDbfCaj:Used()
      ::oDbfCaj:End()
   end

   ::oDbfCaj  := nil


RETURN ( Self )



static FUNCTION InfCaj_lResource( cFld ) ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   local cSayCajOrg
   local cSayCajDes
   local oSayCajOrg
   local oSayCajDes
   local oCajOrg
   local oCajDes

   if !::StdResource( "INF_CAJ01" )
      return .F.
   end





   ::cCajOrg   := dbFirst( ::oDbfCaj, 1 )
   ::cCajDes   := dbLast(  ::oDbfCaj, 1 )
   cSayCajOrg  := dbFirst( ::oDbfCaj, 2 )
   cSayCajDes  := dbLast(  ::oDbfCaj, 2 )



   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllCaj, ::lAllCaj:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oCajOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cCajOrg, ::cCajOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllCaj )},, .F., .F.,,,,,, nil, "LUPA",, )

      oCajOrg:bValid   := {|| cCajas( oCajOrg, ::oDbfCaj:cAlias, oSayCajOrg ) }
      oCajOrg:bHelp    := {|| BrwCaj( oCajOrg, ::oDbfCaj:cAlias, oSayCajOrg ) }





   oSayCajOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayCajOrg, cSayCajOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oCajDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cCajDes, ::cCajDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllCaj )},, .F., .F.,,,,,, nil, "LUPA",, )

      oCajDes:bValid   := {|| cCajas( oCajDes, ::oDbfCaj:cAlias, oSayCajOrg ) }
      oCajDes:bHelp    := {|| BrwCaj( oCajDes, ::oDbfCaj:cAlias, oSayCajOrg ) }




   oSayCajDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayCajDes, cSayCajDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfCaj:Lastrec() )

   ::CreateFilter( aItmCaja(), ::oDbfCaj:cAlias )

RETURN .T.






static FUNCTION InfCaj_lGenerate( ) ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha : " + Dtoc( Date() ) }, {|| "Cajas : " + if( ::lAllCaj, "Todos", AllTrim( ::cCajOrg ) + " > " + AllTrim( ::cCajDes ) ) } }

   ::oDbfCaj:OrdSetFocus( "CCODCAJ" )

   ::oDbfCaj:GoTop()
   while !::lBreak .AND. !::oDbfCaj:Eof()

      if ( ::lAllCaj .OR. ( ::oDbfCaj:cCodCaj >= ::cCajOrg .AND. ::oDbfCaj:cCodCaj <= ::cCajDes ) )

         ::oDbf:Append()

         ::oDbf:cCodCaj   := ::oDbfCaj:cCodCaj
         ::oDbf:cNomCaj   := ::oDbfCaj:cNomCaj
         ::oDbf:cCapCaj   := ::oDbfCaj:cCapCaj

         ::oDbf:Save()

      end

      ::oDbfCaj:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfCaj:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
