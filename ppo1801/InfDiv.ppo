#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfDiv.prg"
_HB_CLASS InfDiv ; function InfDiv ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfDiv", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfDiv() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfDiv } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfDiv"}, .F. )
   _HB_MEMBER { AS CHARACTER cDivOrg } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDivOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cDivDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDivDes"}, .F. )
   _HB_MEMBER { AS LOGIC lAllDiv } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllDiv"}, .F. )
   _HB_MEMBER { AS OBJECT oBandera } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBandera"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfDiv_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @InfDiv_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @InfDiv_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfDiv_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfDiv_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfDiv ;



static FUNCTION InfDiv_Create( ) ; local Self AS CLASS InfDiv := QSelf() AS CLASS InfDiv

   ::AddField( "CCODDIV",      "C",  3, 0, {|| "" },                    "Código",         .T., "Código de la divisa",                                  8, .F. )
   ::AddField( "CNOMDIV",      "C", 20, 0, {|| "" },                    "Nombre",         .T., "Nombre de la divisa",                                 20, .F. )
   ::AddField( "DACTDIV",      "D",  8, 0, {|| "" },                    "Ult. camb.",     .T., "Fecha ultimo cambio de la divisa",                    12, .F. )
   ::AddField( "NPTSDIV",      "N", 16, 0, {|| "@E 999,999.999999" },   "Ptas.",          .T., "Valor en pesetas de la divisa",                       16, .F. )
   ::AddField( "NEURDIV",      "N", 16, 0, {|| "@E 999,999.999999" },   "Euros",          .T., "Valor en euros de la divisa",                         16, .F. )
   ::AddField( "NNINDIV",      "N",  2, 0, {|| "" },                    "Und. Com.",      .F., "Unidades de compra de la divisa",                      5, .F. )
   ::AddField( "NDINDIV",      "N",  1, 0, {|| "" },                    "Dec. Com.",      .F., "Decimales de compra de la divisa",                     5, .F. )
   ::AddField( "NRINDIV",      "N",  1, 0, {|| "" },                    "Red. Com.",      .F., "Decimales de redondeo de la divisa",                   5, .F. )
   ::AddField( "NNOUDIV",      "N",  2, 0, {|| "" },                    "Und. Vta.",      .F., "Unidades de venta de la divisa",                       5, .F. )
   ::AddField( "NDOUDIV",      "N",  1, 0, {|| "" },                    "Dec. Vta.",      .F., "Decimales de venta de la divisa",                      5, .F. )
   ::AddField( "NROUDIV",      "N",  1, 0, {|| "" },                    "Red. Vta.",      .F., "Decimales de redondeo de la divisa",                   5, .F. )
   ::AddField( "NNPVDIV",      "N",  2, 0, {|| "" },                    "Und. P. Ver",    .F., "Unidades de punto verde de la divisa",                 5, .F. )
   ::AddField( "NDPVDIV",      "N",  1, 0, {|| "" },                    "Dec. P. Ver",    .F., "Decimales de punto verde de la divisa",                5, .F. )
   ::AddField( "NRPVDIV",      "N",  1, 0, {|| "" },                    "Red. P. Ver",    .F., "Decimales de redondeo de punto verde  de la divisa",   5, .F. )

   ::AddTmpIndex ( "CCODDIV", "CCODDIV" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfDiv_OpenFiles( ) ; local Self AS CLASS InfDiv := QSelf() AS CLASS InfDiv

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

      ::oBandera     := TBandera():New()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION InfDiv_CloseFiles( ) ; local Self AS CLASS InfDiv := QSelf() AS CLASS InfDiv

   if !Empty( ::oDbfDiv ) .AND. ::oDbfDiv:Used()
      ::oDbfDiv:End()
   end

   ::oDbfDiv  := nil
   ::oBandera := nil


RETURN ( Self )



static FUNCTION InfDiv_lResource( cFld ) ; local Self AS CLASS InfDiv := QSelf() AS CLASS InfDiv

   local cSayDivOrg
   local cSayDivDes
   local oSayDivOrg
   local oSayDivDes
   local oDivOrg
   local oDivDes

   if !::StdResource( "INF_DIV01" )
      return .F.
   end





   ::cDivOrg   := dbFirst( ::oDbfDiv, 1 )
   ::cDivDes   := dbLast(  ::oDbfDiv, 1 )
   cSayDivOrg  := dbFirst( ::oDbfDiv, 2 )
   cSayDivDes  := dbLast(  ::oDbfDiv, 2 )



   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllDiv, ::lAllDiv:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oDivOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cDivOrg, ::cDivOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllDiv )},, .F., .F.,,,,,, nil, "LUPA",, )

      oDivOrg:bValid   := {|| cNbrDiv( oDivOrg, oSayDivOrg, ::oDbfDiv:cAlias ) }
      oDivOrg:bHelp    := {|| BrwNbrDiv( oDivOrg, oSayDivOrg, ::oDbfDiv:cAlias, ::oBandera ) }





   oSayDivOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayDivOrg, cSayDivOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oDivDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cDivDes, ::cDivDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllDiv )},, .F., .F.,,,,,, nil, "LUPA",, )

      oDivDes:bValid   := {|| cNbrDiv( oDivDes, oSayDivDes, ::oDbfDiv:cAlias ) }
      oDivDes:bHelp    := {|| BrwNbrDiv( oDivDes, oSayDivDes, ::oDbfDiv:cAlias, ::oBandera ) }




   oSayDivDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayDivDes, cSayDivDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfDiv:Lastrec() )

   ::CreateFilter( aItmDiv(), ::oDbfDiv:cAlias )

RETURN .T.






static FUNCTION InfDiv_lGenerate( ) ; local Self AS CLASS InfDiv := QSelf() AS CLASS InfDiv

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha  : " + Dtoc( Date() ) }, {|| "Divisa : " + if( ::lAllDiv, "Todos", AllTrim( ::cDivOrg ) + " > " + AllTrim( ::cDivDes ) ) } }

   ::oDbfDiv:OrdSetFocus( "CCODDIV" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfDiv:GoTop()

   while !::lBreak .AND. !::oDbfDiv:Eof()

      if ( ::lAllDiv .OR. ( ::oDbfDiv:cCodDiv >= ::cDivOrg .AND. ::oDbfDiv:cCodDiv <= ::cDivDes ) )

         ::oDbf:Append()

         ::oDbf:cCodDiv   := ::oDbfDiv:cCodDiv
         ::oDbf:cNomDiv   := ::oDbfDiv:cNomDiv
         ::oDbf:dActDiv   := ::oDbfDiv:dActDiv
         ::oDbf:nPtsDiv   := ::oDbfDiv:nPtsDiv
         ::oDbf:nEurDiv   := ::oDbfDiv:nEurDiv
         ::oDbf:nNinDiv   := ::oDbfDiv:nNinDiv
         ::oDbf:nDinDiv   := ::oDbfDiv:nDinDiv
         ::oDbf:nRinDiv   := ::oDbfDiv:nRinDiv
         ::oDbf:nNouDiv   := ::oDbfDiv:nNouDiv
         ::oDbf:nDouDiv   := ::oDbfDiv:nDouDiv
         ::oDbf:nRouDiv   := ::oDbfDiv:nRouDiv
         ::oDbf:nNpvDiv   := ::oDbfDiv:nNpvDiv
         ::oDbf:nDpvDiv   := ::oDbfDiv:nDpvDiv
         ::oDbf:nRpvDiv   := ::oDbfDiv:nRpvDiv

         ::oDbf:Save()

      end

      ::oDbfDiv:Skip()

      ::oMtrInf:AutoInc( ::oDbfDiv:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfDiv:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
