#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfFpg.prg"
_HB_CLASS InfFpg ; function InfFpg ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfFpg", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfFpg() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfBnc } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfBnc"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfFpg_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @InfFpg_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @InfFpg_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfFpg_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfFpg_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfFpg ;



static FUNCTION InfFpg_Create( ) ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   ::AddField( "CCODPAGO", "C", 2, 0, {|| "" },   "Cod.",        .T., "Código de la forma de pago",                    5, .F. )
   ::AddField( "CDESPAGO", "C",30, 0, {|| "" },   "Divisa",      .T., "Descripción de forma de pago",                 30, .F. )
   ::AddField( "CCODBNC",  "C", 4, 2, {|| "" },   "Cod. banco",  .F., "Código del banco de la forma de pago",         10, .F. )
   ::AddField( "CNOMBNC",  "C",50, 2, {|| "" },   "Banco",       .T., "Nombre del banco de la forma de pago",         35, .F. )
   ::AddField( "CTIPPGO",  "C",10, 0, {|| "" },   "Tip. Pgo.",   .T., "Tipo de la forma de pago",                     10, .F. )
   ::AddField( "NPCTCOM",  "N", 6, 2, {|| "" },   "% Comisión",  .F., "Porcentaje de comisión de la forma de pago",   10, .F. )
   ::AddField( "NPLAZOS",  "N", 3, 0, {|| "999" },"Plazos",      .T., "Números de plazos del aplazamiento",           10, .F. )
   ::AddField( "NPLAUNO",  "N", 3, 0, {|| "999" },"Día pago 1",  .T., "Días hasta el primer pago",                    10, .F. )
   ::AddField( "NDIAPLA",  "N", 3, 0, {|| "999" },"Días aplaz.", .T., "Días entre plazos",                            12, .F. )

   ::AddTmpIndex ( "CCODPAGO", "CCODPAGO" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfFpg_OpenFiles( ) ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfBnc := DbfServer( "BANCOS.DBF", ):NewOpen( "BANCOS.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfBnc:AddBag( "BANCOS.CDX" ) ; ::oDbfBnc:AddBag( ) ; ::oDbfBnc:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION InfFpg_CloseFiles( ) ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   if !Empty( ::oDbfBnc ) .AND. ::oDbfBnc:Used()
      ::oDbfBnc:End()
   end

   ::oDbfBnc := nil

RETURN ( Self )



static FUNCTION InfFpg_lResource( cFld ) ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   if !::StdResource( "INF_FPG01" )
      return .F.
   end

   ::oDefFpgInf( 70, 80, 90, 100, 60 )

   ::oMtrInf:SetTotal( ::oDbfFpg:Lastrec() )

   ::CreateFilter( aItmFPago(), ::oDbfFpg:cAlias )

RETURN .T.






static FUNCTION InfFpg_lGenerate( ) ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha         : " + Dtoc( Date() ) }, {|| "Forma de pago : " + if( ::lAllFpg, "Todas", AllTrim( ::cFpgDes ) + " > " + AllTrim( ::cFpgHas ) ) } }

   ::oDbfFpg:OrdSetFocus( "CCODPAGO" )

   ::oDbfFpg:GoTop()
   while !::lBreak .AND. !::oDbfFpg:Eof()

      if ( ::lAllFpg .OR. ( ::oDbfFpg:cCodPago >= ::cFpgDes .AND. ::oDbfFpg:cCodPago <= ::cFpgHas ) )

         ::oDbf:Append()

         ::oDbf:cCodPago  := ::oDbfFpg:cCodPago
         ::oDbf:cDesPago  := ::oDbfFpg:cDesPago
         ::oDbf:cCodBnc   := ::oDbfFpg:cBanco
         ::oDbf:cNomBnc   := oRetFld( ::oDbfFpg:cBanco, ::oDbfBnc, "cNomBnc" )

         if ::oDbfFpg:nTipPgo <= 1
            ::oDbf:cTipPgo   := "Efectivo"
         else
            ::oDbf:cTipPgo   := "Tarjeta"
         end

         ::oDbf:nPctCom   := ::oDbfFpg:nPctCom
         ::oDbf:nPlazos   := ::oDbfFpg:nPlazos
         ::oDbf:nPlaUno   := ::oDbfFpg:nPlaUno
         ::oDbf:nDiaPla   := ::oDbfFpg:nDiaPla

         ::oDbf:Save()

      end

      ::oDbfFpg:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfFpg:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
