#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfMovAlm.prg"
_HB_CLASS InfMovAlm ; function InfMovAlm ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfMovAlm", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfMovAlm() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfTMov } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfTMov"}, .F. )
   _HB_MEMBER { AS CHARACTER cTMovOrg } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTMovOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cTMovDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTMovDes"}, .F. )
   _HB_MEMBER { AS LOGIC lAllTMov } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllTMov"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfMovAlm_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @InfMovAlm_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @InfMovAlm_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfMovAlm_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfMovAlm_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfMovAlm ;



static FUNCTION InfMovAlm_Create( ) ; local Self AS CLASS InfMovAlm := QSelf() AS CLASS InfMovAlm

   ::AddField( "cCodMov",   "C",  2, 0, {|| "" },     "Código",            .T., "Tipo de movimiento",         3, .F. )
   ::AddField( "cDesMov",   "C", 20, 0, {|| "" },     "Nombre",            .T., "Descripción",               30, .F. )

   ::AddTmpIndex ( "cCodMov", "cCodMov" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfMovAlm_OpenFiles( ) ; local Self AS CLASS InfMovAlm := QSelf() AS CLASS InfMovAlm

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfTMov := DbfServer( "TMOV.DBF", ):NewOpen( "TMOV.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfTMov:AddBag( "TMOV.CDX" ) ; ::oDbfTMov:AddBag( ) ; ::oDbfTMov:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION InfMovAlm_CloseFiles( ) ; local Self AS CLASS InfMovAlm := QSelf() AS CLASS InfMovAlm

   if !Empty( ::oDbfTMov ) .AND. ::oDbfTMov:Used()
      ::oDbfTMov:End()
   end

   ::oDbfTMov := nil

RETURN ( Self )



static FUNCTION InfMovAlm_lResource( cFld ) ; local Self AS CLASS InfMovAlm := QSelf() AS CLASS InfMovAlm

   local cSayTMovOrg
   local cSayTMovDes
   local oSayTMovOrg
   local oSayTMovDes
   local oTMovOrg
   local oTMovDes

   if !::StdResource( "INF_TMOV01" )
      return .F.
   end





   ::cTMovOrg   := dbFirst( ::oDbfTMov, 1 )
   ::cTMovDes   := dbLast(  ::oDbfTMov, 1 )
   cSayTMovOrg  := dbFirst( ::oDbfTMov, 2 )
   cSayTMovDes  := dbLast(  ::oDbfTMov, 2 )



   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllTMov, ::lAllTMov:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oTMovOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cTMovOrg, ::cTMovOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllTMov )},, .F., .F.,,,,,, nil, "LUPA",, )

      oTMovOrg:bValid   := {|| cTMov( oTMovOrg, ::oDbfTMov:cAlias, oSayTMovOrg ) }
      oTMovOrg:bHelp    := {|| browseGruposMovimientos( oTMovOrg, oSayTMovOrg, ::oDbfTMov:cAlias ) }





   oSayTMovOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayTMovOrg, cSayTMovOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oTMovDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cTMovDes, ::cTMovDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllTMov )},, .F., .F.,,,,,, nil, "LUPA",, )

      oTMovDes:bValid   := {|| cTMov( oTMovDes, ::oDbfTMov:cAlias, oSayTMovDes ) }
      oTMovDes:bHelp    := {|| browseGruposMovimientos( oTMovDes, oSayTMovDes, ::oDbfTMov:cAlias ) }




   oSayTMovDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayTMovDes, cSayTMovDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfTMov:Lastrec() )

   ::CreateFilter( aItmMovAlm(), ::oDbfTMov:cAlias )

RETURN .T.






static FUNCTION InfMovAlm_lGenerate( ) ; local Self AS CLASS InfMovAlm := QSelf() AS CLASS InfMovAlm

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha        : " + Dtoc( Date() ) }, {|| "Mov. Almacén : " + if( ::lAllTMov, "Todos", AllTrim( ::cTMovOrg ) + " > " + AllTrim( ::cTMovDes ) ) } }

   ::oDbfTMov:OrdSetFocus( "CCODMOV" )

   ::oDbfTMov:GoTop()
      while !::lBreak .AND. !::oDbfTMov:Eof()


      if ( ::lAllTMov .OR. ( ::oDbfTMov:cCodMov >= ::cTMovOrg .AND. ::oDbfTMov:cCodMov <= ::cTMovDes ) ) .AND. ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:cCodMov     := ::oDbfTMov:cCodMov
         ::oDbf:cDesMov     := ::oDbfTMov:cDesMov

         ::oDbf:Save()

      end

      ::oDbfTMov:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfTMov:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
