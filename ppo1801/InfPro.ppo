#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfPro.prg"
_HB_CLASS InfPro ; function InfPro ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfPro", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfPro() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfPro } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfPro"}, .F. )
   _HB_MEMBER { AS CHARACTER cProOrg } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cProOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cProDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cProDes"}, .F. )
   _HB_MEMBER { AS LOGIC lAllPro } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllPro"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfPro_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @InfPro_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @InfPro_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfPro_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfPro_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfPro ;



static FUNCTION InfPro_Create( ) ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   ::AddField( "cCodPro",   "C",  5, 0, {|| "" },           "Cód. prm.",      .T., "Código de la promoción",   5, .F. )
   ::AddField( "cNomPro",   "C", 25, 0, {|| "" },           "Nombre",         .F., "Nombre de la promoción",  20, .F. )
   ::AddField( "cCodArt",   "C", 18, 0, {|| "" },           "Código artículo",      .T., "Código del artículo",     15, .F. )
   ::AddField( "cNomArt",   "C",100, 0, {|| "" },           "Artículo",       .T., "Nombre del artículo",     50, .F. )
   ::AddField( "dIniPro",   "D",  8, 0, {|| "" },           "Inicio",         .T., "Fecha inicio promoción",  10, .F. )
   ::AddField( "dFinPro",   "D",  8, 0, {|| "" },           "Fin",            .T., "Fecha fin promoción",     10, .F. )
   ::AddField( "nDtoPro",   "N",  5, 2, {|| "@E 99.99" },   "% Dto.",         .T., "Porcentaje de descuento",  5, .F. )
   ::AddField( "cCodTar",   "C",  5, 0, {|| "" },           "Tar.",           .F., "Código de la tarifa",      5, .F. )

   ::AddTmpIndex ( "cCodPro", "cCodPro" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfPro_OpenFiles( ) ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfPro := DbfServer( "PROMOT.DBF", ):NewOpen( "PROMOT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfPro:AddBag( "PROMOT.CDX" ) ; ::oDbfPro:AddBag( ) ; ::oDbfPro:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION InfPro_CloseFiles( ) ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   if !Empty( ::oDbfPro ) .AND. ::oDbfPro:Used()
      ::oDbfPro:End()
   end

   ::oDbfPro  := nil

RETURN ( Self )



static FUNCTION InfPro_lResource( cFld ) ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   local cSayProOrg
   local cSayProDes
   local oSayProOrg
   local oSayProDes
   local oProOrg
   local oProDes

   if !::StdResource( "INF_PRO01" )
      return .F.
   end





   ::cProOrg   := dbFirst( ::oDbfPro, 1 )
   ::cProDes   := dbLast(  ::oDbfPro, 1 )
   cSayProOrg  := dbFirst( ::oDbfPro, 2 )
   cSayProDes  := dbLast(  ::oDbfPro, 2 )



   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllPro, ::lAllPro:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oProOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cProOrg, ::cProOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllPro )},, .F., .F.,,,,,, nil, "LUPA",, )

      oProOrg:bValid   := {|| cPromo( oProOrg, ::oDbfPro:cAlias, oSayProOrg ) }
      oProOrg:bHelp    := {|| BrwPromo( oProOrg, ::oDbfPro:cAlias, oSayProOrg ) }





   oSayProOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayProOrg, cSayProOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oProDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cProDes, ::cProDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllPro )},, .F., .F.,,,,,, nil, "LUPA",, )

      oProDes:bValid   := {|| cPromo( oProDes, ::oDbfPro:cAlias, oSayProDes ) }
      oProDes:bHelp    := {|| BrwPromo( oProDes, ::oDbfPro:cAlias, oSayProDes ) }




   oSayProDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayProDes, cSayProDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfPro:Lastrec() )

   ::CreateFilter( aItmPrm(), ::oDbfPro )

RETURN .T.






static FUNCTION InfPro_lGenerate( ) ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha       : " + Dtoc( Date() ) }, {|| "Promociones : " + if( ::lAllPro, "Todos", AllTrim( ::cProOrg ) + " > " + AllTrim( ::cProDes ) ) } }

   ::oDbfPro:OrdSetFocus( "CCODPRO" )

   ::oDbfPro:GoTop()

   while !::lBreak .AND. !::oDbfPro:Eof()


      if ( ::lAllPro .OR. ( ::oDbfPro:cCodPro >= ::cProOrg .AND. ::oDbfPro:cCodPro <= ::cProDes ) ) .AND.  ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:cCodPro   := ::oDbfPro:cCodPro
         ::oDbf:cNomPro   := ::oDbfPro:cNomPro
         ::oDbf:cCodArt   := ::oDbfPro:cCodArt
         ::oDbf:cNomArt   := retArticulo( ::oDbf:cCodArt )
         ::oDbf:dIniPro   := ::oDbfPro:dIniPro
         ::oDbf:dFinPro   := ::oDbfPro:dFinPro
         ::oDbf:nDtoPro   := ::oDbfPro:nDtoPro
         ::oDbf:cCodTar   := ::oDbfPro:cCodTar

         ::oDbf:Save()

      end

      ::oDbfPro:Skip()

      ::oMtrInf:AutoInc( ::oDbfPro:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfPro:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
