#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfRut.prg"
_HB_CLASS InfRut ; function InfRut ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfRut", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfRut() ) ) ;

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfRut_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfRut_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfRut_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfRut ;



static FUNCTION InfRut_Create( ) ; local Self AS CLASS InfRut := QSelf() AS CLASS InfRut

   ::AddField( "cCodRut",       "C",  4, 0, {|| "" },     "Cod.",             .T., "Código de la ruta",          5, .F. )
   ::AddField( "cDesRut",       "C", 30, 0, {|| "" },     "Ruta",             .T., "Nombre de la ruta",         30, .F. )

   ::AddTmpIndex ( "cCodRut", "cCodRut" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfRut_lResource( cFld ) ; local Self AS CLASS InfRut := QSelf() AS CLASS InfRut

   if !::StdResource( "INF_RUT01" )
      return .F.
   end





   ::oDefRutInf( 70, 80, 90, 100, 60 )





   ::oMtrInf:SetTotal( ::oDbfRut:Lastrec() )

   ::CreateFilter( aItmRut(), ::oDbfRut:cAlias )

RETURN .T.






static FUNCTION InfRut_lGenerate( ) ; local Self AS CLASS InfRut := QSelf() AS CLASS InfRut

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha : " + Dtoc( Date() ) }, {|| "Rutas : " + if( ::lAllRut, "Todos", AllTrim( ::cRutOrg ) + " > " + AllTrim( ::cRutDes ) ) } }

   ::oDbfRut:OrdSetFocus( "CCODRUT" )

   ::oDbfRut:GoTop()

   while !::lBreak .AND. !::oDbfRut:Eof()


      if ( ::lAllRut .OR. ( ::oDbfRut:cCodRut >= ::cRutOrg .AND. ::oDbfRut:cCodRut <= ::cRutDes ) ) .AND. ::EvalFilter()

         ::oDbf:Append()
         ::oDbf:cCodRut     := ::oDbfRut:cCodRut
         ::oDbf:cDesRut     := ::oDbfRut:cDesRut
         ::oDbf:Save()

      end

      ::oDbfRut:Skip()

      ::oMtrInf:AutoInc( ::oDbfRut:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfRut:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
