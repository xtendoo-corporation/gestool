#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\InfUbi.prg"
_HB_CLASS InfUbi ; function InfUbi ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InfUbi", iif( .T., { @TInfGen() }, { @HBObject() } ), @InfUbi() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfUbiT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfUbiT"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfUbiL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfUbiL"}, .F. )
   _HB_MEMBER { AS CHARACTER cUbiOrg } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cUbiOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cUbiDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cUbiDes"}, .F. )
   _HB_MEMBER { AS LOGIC lAllUbi } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllUbi"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @InfUbi_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @InfUbi_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @InfUbi_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @InfUbi_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @InfUbi_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InfUbi ;



static FUNCTION InfUbi_Create( ) ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   ::AddField( "cCodUbi",   "C",  5, 0, {|| "" },     "Cod. ubi.",         .F., "Código de ubicación",               10, .F. )
   ::AddField( "cNomUbi",   "C", 30, 0, {|| "" },     "Nom. ubi.",         .F., "Nombre de ubicación",               10, .F. )
   ::AddField( "cUbiLin",   "C",  5, 0, {|| "" },     "Ubic.",             .T., "Ubicación",                         10, .F. )
   ::AddField( "cNomUbil",  "C", 30, 0, {|| "" },     "Descripción",       .T., "Domicilio de almacen",              30, .F. )

   ::AddTmpIndex( "CCODUBI", "CCODUBI + CUBILIN" )

   ::AddGroup( {|| ::oDbf:cCodUbi }, {|| "Cod. ubicación  : " + Rtrim( ::oDbf:cCodUbi ) + "-" + Rtrim( ::oDbf:cNomUbi ) }, {||"Total ..."} )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION InfUbi_OpenFiles( ) ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfUbiT := DbfServer( "UBICAT.DBF", ):NewOpen( "UBICAT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfUbiT:AddBag( "UBICAT.CDX" ) ; ::oDbfUbiT:AddBag( ) ; ::oDbfUbiT:AutoIndex()

   ::oDbfUbiL := DbfServer( "UBICAL.DBF", ):NewOpen( "UBICAL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfUbiL:AddBag( "UBICAL.CDX" ) ; ::oDbfUbiL:AddBag( ) ; ::oDbfUbiL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION InfUbi_CloseFiles( ) ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   if !Empty( ::oDbfUbiT ) .AND. ::oDbfUbiT:Used()
      ::oDbfUbiT:End()
   end
   if !Empty( ::oDbfUbiL ) .AND. ::oDbfUbiL:Used()
      ::oDbfUbiL:End()
   end

   ::oDbfUbiT  := nil
   ::oDbfUbiL  := nil

RETURN ( Self )



static FUNCTION InfUbi_lResource( cFld ) ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   local oUbiOrg
   local oUbiDes
   local cSayUbiOrg
   local cSayUbiDes
   local oSayUbiOrg
   local oSayUbiDes

   if !::StdResource( "INF_UBI01" )
      return .F.
   end

   ::cUbiOrg   := dbFirst( ::oDbfUbiT, 1 )
   ::cUbiDes   := dbLast(  ::oDbfUbiT, 1 )
   cSayUbiOrg  := dbFirst( ::oDbfUbiT, 2 )
   cSayUbiDes  := dbLast(  ::oDbfUbiT, 2 )







   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllUbi, ::lAllUbi:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oUbiOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cUbiOrg, ::cUbiOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllUbi )},, .F., .F.,,,,,, nil, "LUPA",, )

      oUbiOrg:bValid   := {|| cUbica( oUbiOrg, ::oDbfUbiT:cAlias, oSayUbiOrg ) }
      oUbiOrg:bHelp    := {|| BrwUbicacion( oUbiOrg, ::oDbfUbiT:cAlias, oSayUbiOrg ) }





   oSayUbiOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayUbiOrg, cSayUbiOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oUbiDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cUbiDes, ::cUbiDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllUbi )},, .F., .F.,,,,,, nil, "LUPA",, )

      oUbiDes:bValid   := {|| cUbica( oUbiDes, ::oDbfUbiT:cAlias, oSayUbiDes ) }
      oUbiDes:bHelp    := {|| BrwUbicacion( oUbiDes, ::oDbfUbiT:cAlias, oSayUbiDes ) }




   oSayUbiDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayUbiDes, cSayUbiDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfUbiT:Lastrec() )

   ::CreateFilter( aItmUbi(), ::oDbfUbiT:cAlias )

RETURN .T.






static FUNCTION InfUbi_lGenerate( ) ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Ubicación : " + if( ::lAllUbi, "Todos", AllTrim( ::cUbiOrg ) + " > " + AllTrim( ::cUbiDes ) ) } }

   ::oDbfUbiT:OrdSetFocus( "CCODUBI" )

   ::oDbfUbiT:GoTop()
   while !::lBreak .AND. !::oDbfUbiT:Eof()



      if ( ::lAllUbi .OR. ( ::oDbfUbiT:cCodUbi >= ::cUbiOrg .AND. ::oDbfUbiT:cCodUbi <= ::cUbiDes ) ) .AND. ::oDbfUbiL:Seek( ::oDbfUbiT:cCodUbi )                                                        .AND. ::EvalFilter()

         while ::oDbfUbiT:cCodUbi == ::oDbfUbiL:cCodUbi .AND. !::oDbfUbiL:Eof

            ::oDbf:Append()

            ::oDbf:cCodUbi     := ::oDbfUbiT:cCodUbi
            ::oDbf:cNomUbi     := oRetFld( ::oDbf:cCodUbi, ::oDbfUbiT )
            ::oDbf:cUbiLin     := ::oDbfUbiL:cUbiLin
            ::oDbf:cNomUbil    := ::oDbfUbiL:cNomUbil

            ::oDbf:Save()

            ::oDbfUbiL:Skip()

         end

      end

      ::oDbfUbiT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfUbiT:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
