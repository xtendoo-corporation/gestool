#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Infcli.prg"
_HB_CLASS TInfCliGrp ; function TInfCliGrp ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfCliGrp", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfCliGrp() ) ) ;

   _HB_MEMBER { AS LOGIC lOnlySelected } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lOnlySelected"}, .F. )

   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT cTipCli } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipCli"}, .F. )
   _HB_MEMBER { AS OBJECT oTipCli } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTipCli"}, .F. )

   _HB_MEMBER { AS OBJECT oGrupo } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGrupo"}, .F. )

   _HB_MEMBER { AS ARRAY aStrClients } ; oClass:AddMultiData( "ARRAY", { "Todos", "Clientes", "Clientes potenciales" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aStrClients"}, .F. )
   _HB_MEMBER { AS ARRAY aResClients } ; oClass:AddMultiData( "ARRAY", { "Cli", "Cli", "CliPot" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aResClients"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfCliGrp_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfCliGrp_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfCliGrp_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfCliGrp_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfCliGrp_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER NewGroup( lNoGroup); oClass:AddMethod( "NewGroup", @TInfCliGrp_NewGroup(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER QuiGroup( lNoGroup); oClass:AddMethod( "QuiGroup", @TInfCliGrp_QuiGroup(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfCliGrp ;



static FUNCTION TInfCliGrp_Create( lOnlySelected ) ; local Self AS CLASS TInfCliGrp := QSelf() AS CLASS TInfCliGrp

   If( lOnlySelected == nil, lOnlySelected := .F., ) ;

   ::lOnlySelected         := lOnlySelected

   ::AddField( "Cod",       "C", 12, 0, {|| "" },     "Código",                  .T., "Código",                10, .F. )
   ::AddField( "Titulo",    "C", 50, 0, {|| "" },     "Nombre",                  .T., "Nombre",                30, .F. )
   ::AddField( "Nif",       "C", 15, 0, {|| "" },     "N.I.F.",                  .F., "N.I.F.",                12, .F. )
   ::AddField( "Domicilio", "C",100, 0, {|| "" },     "Domicilio",               .T., "Domicilio",             30, .F. )
   ::AddField( "Poblacion", "C", 35, 0, {|| "" },     "Población",               .T., "Población",             30, .F. )
   ::AddField( "Provincia", "C", 20, 0, {|| "" },     "Provincia" ,              .T., "Provincia" ,            15, .F. )
   ::AddField( "CodPostal", "C",  7, 0, {|| "" },     "Cod. pos.",               .T., "Código postal",          7, .F. )
   ::AddField( "Telefono",  "C", 20, 0, {|| "" },     "Teléfono",                .T., "Teléfono",              10, .F. )
   ::AddField( "Fax",       "C", 20, 0, {|| "" },     "Fax" ,                    .F., "Fax" ,                  10, .F. )
   ::AddField( "Movil",     "C", 20, 0, {|| "" },     "Movil" ,                  .F., "Movil" ,                10, .F. )
   ::AddField( "NbrEst",    "C", 35, 0, {|| "" },     "Establecimiento" ,        .F., "Establecimiento" ,      20, .F. )
   ::AddField( "Direst",    "C", 35, 0, {|| "" },     "Dir. establecimiento",    .F., "Dir. establecimiento",  20, .F. )
   ::AddField( "Banco",     "C", 50, 0, {|| "" },     "Banco" ,                  .F., "Banco" ,                30, .F. )
   ::AddField( "DirBanco",  "C", 35, 0, {|| "" },     "Domicilio banco" ,        .F., "Domicilio banco" ,      25, .F. )
   ::AddField( "PobBanco",  "C", 25, 0, {|| "" },     "Población banco" ,        .F., "Población banco" ,      30, .F. )
   ::AddField( "cProBanco", "C", 20, 0, {|| "" },     "Provincia" ,              .F., "Provincia banco" ,      15, .F. )
   ::AddField( "Cuenta",    "C", 20, 0, {|| "" },     "Cuenta" ,                 .F., "Cuenta banco" ,         10, .F. )
   ::AddField( "CodPago",   "C",  2, 0, {|| "" },     "Pg",                      .F., "Código forma de pago",  10, .F. )
   ::AddField( "NomPago",   "C",100, 0, {|| "" },     "Forma pago",              .F., "Nombre forma de pago",  60, .F. )
   ::AddField( "cCodGrp",   "C",  4, 0, {|| "" },     "Grp.",                    .F., "Código de grupo" ,       4, .F. )
   ::AddField( "cAgente",   "C",  3, 0, {|| "" },     "Agn",                     .F., "Código agente comercial",3, .F. )
   ::AddField( "cMeiInt",   "C", 65, 0, {|| "" },     "Mail",                    .F., "dirección correo electrónico", 30, .F. )
   ::AddField( "cWebInt",   "C", 65, 0, {|| "" },     "Web",                     .F., "Página web",            30, .F. )
   ::AddField( "nRiesgo",   "N", 16, 6, {|| PicOut()},"Riesgo máximo",           .F., "Riesgo máximo",         20, .F. )
   ::AddField( "nRieReal",  "N", 16, 6, {|| PicOut()},"Riesgo real",             .F., "Riesgo real",           20, .F. )
   ::AddField( "cPerCto",   "C", 30, 0, {|| "@!" },   "Contacto",                .F., "Persona de contacto",   20, .F. )

   ::AddTmpIndex ( "cCodCod", "cCodGrp + Cod" )
   ::AddTmpIndex ( "cCodTit", "cCodGrp + Titulo" )
   ::AddTmpIndex ( "cCodPob", "cCodGrp + Poblacion" )
   ::AddTmpIndex ( "cCodPrv", "cCodGrp + Provincia" )
   ::AddTmpIndex ( "cCodCdp", "cCodGrp + CodPostal" )
   ::AddTmpIndex ( "cCodTlf", "cCodGrp + Telefono" )
   ::AddTmpIndex ( "cCodCli", "Cod" )
   ::AddTmpIndex ( "cCliTit", "Titulo" )
   ::AddTmpIndex ( "cCliPob", "Poblacion" )
   ::AddTmpIndex ( "cCliPrv", "Provincia" )
   ::AddTmpIndex ( "cCliCdp", "CodPostal" )
   ::AddTmpIndex ( "cCliTlf", "Telefono" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION TInfCliGrp_OpenFiles( ) ; local Self AS CLASS TInfCliGrp := QSelf() AS CLASS TInfCliGrp

   local lOpen       := .T.
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfFpg := DbfServer( "FPago.Dbf", ):NewOpen( "FPago.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfFpg:AddBag( "FPago.Cdx" ) ; ::oDbfFpg:AddBag( ) ; ::oDbfFpg:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      if !Empty ( ::oDbfFpg )
         ::oDbfFpg:End()
      end
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

Return ( lOpen )



static FUNCTION TInfCliGrp_CloseFiles( ) ; local Self AS CLASS TInfCliGrp := QSelf() AS CLASS TInfCliGrp

   if ::oDbfFpg <> nil .AND. ::oDbfFpg:Used()
      ::oDbfFpg:End()
   end

Return ( Self )



static FUNCTION TInfCliGrp_lResource( cFld ) ; local Self AS CLASS TInfCliGrp := QSelf() AS CLASS TInfCliGrp

   local cEstado  := "Código"
   local cTipCli  := "Todos"
   local cGrupo   := "No agrupar"

   if !::StdResource( "INF_CLI01" )
      return .F.
   end





   ::oDefGrpCli( 70, 80, 90, 100, 60 )





   ::oDefCliInf( 110, 120, 130, 140, , 600 )





   ::oGrupo := TComboBox():ReDefine( 300, { | u | If( PCount()==0, cGrupo, cGrupo:= u ) }, { "No agrupar", "Por grupo cliente", "Por nombre" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oGrupo",,,,,,, )



   TCheckBox():ReDefine( 200, { | u | If( PCount()==0, ::lSalto, ::lSalto:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   ::CreateFilter( aItmCli(), ::oDbfCli )





   ::oMtrInf:SetTotal( ::oDbfCli:Lastrec() )









   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, { "Código", "Nombre", "Población", "Provincia", "Código postal", "Teléfono" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )






   ::oTipCli := TComboBox():ReDefine( 105, { | u | If( PCount()==0, cTipCli, cTipCli:= u ) }, ::aStrClients, ::oFld:aDialogs[1],,,,,,, .F.,, ::aResClients,,,,, "::oTipCli",,,,,,, )

   ::bPreGenerate    := {|| ::NewGroup( ::lNoGroup ) }
   ::bPostGenerate   := {|| ::QuiGroup( ::lNoGroup ) }

RETURN .T.






static FUNCTION TInfCliGrp_lGenerate( ) ; local Self AS CLASS TInfCliGrp := QSelf() AS CLASS TInfCliGrp

   local bValid   := {|| .T. }

   ::oDlg:Disable()
   ::oDbf:Zap()



   ::aHeader      := {  {|| "Fecha        : " + Dtoc( Date() ) }, {|| "Grp. clientes: " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) }, {|| "Clientes     : " + if( ::lGrpAll, "Todos", AllTrim( ::cGrpOrg ) + " > " + AllTrim( ::cGrpDes ) ) } }

   do case
      case ::oTipCli:nAt == 1
         bValid   := {|| .T. }
      case ::oTipCli:nAt == 2
         bValid   := {|| ::oDbfCli:nTipCli == 1 }
      case ::oTipCli:nAt == 3
         bValid   := {|| ::oDbfCli:nTipCli == 2 }
   end

   if !::lNoGroup .AND. !Empty( ::aoGroup )
      ::aoGroup[ 1 ]:lEject   := ::lSalto
   end

   ::oDbfCli:GoTop()
   while !::oDbfCli:Eof()





      if Eval( bValid )                                                                               .AND. ( ::lGrpAll .OR. ( ::oDbfCli:cCodGrp >= ::cGrpOrg .AND. ::oDbfCli:cCodGrp <= ::cGrpDes ) )   .AND. ( ::lAllCli .OR. ( ::oDbfCli:Cod >= ::cCliOrg .AND. ::oDbfCli:Cod <= ::cCliDes ) )           .AND. ( if( ::lOnlySelected, ::oDbfCli:lLabel, .T. ) )                                             .AND. ::EvalFilter( ::oDbfCli )

         ::oDbf:Append()

         ::oDbf:Cod        := ::oDbfCli:Cod
         ::oDbf:Titulo     := ::oDbfCli:Titulo
         ::oDbf:Nif        := ::oDbfCli:Nif
         ::oDbf:Domicilio  := ::oDbfCli:Domicilio
         ::oDbf:Poblacion  := ::oDbfCli:Poblacion
         ::oDbf:Provincia  := ::oDbfCli:Provincia
         ::oDbf:CodPostal  := ::oDbfCli:CodPostal
         ::oDbf:Telefono   := ::oDbfCli:Telefono
         ::oDbf:Fax        := ::oDbfCli:Fax
         ::oDbf:Movil      := ::oDbfCli:Movil
         ::oDbf:NbrEst     := ::oDbfCli:NbrEst
         ::oDbf:Direst     := ::oDbfCli:Direst
         ::oDbf:Banco      := ::oDbfCli:Banco
         ::oDbf:DirBanco   := ::oDbfCli:DirBanco
         ::oDbf:PobBanco   := ::oDbfCli:PobBanco
         ::oDbf:cProBanco  := ::oDbfCli:cProBanco
         ::oDbf:Cuenta     := ::oDbfCli:Cuenta
         ::oDbf:CodPago    := ::oDbfCli:CodPago
         ::oDbf:cAgente    := ::oDbfCli:cAgente
         ::oDbf:NomPago    := oRetFld( ::oDbfCli:CodPago, ::oDbfFpg )
         ::oDbf:cCodGrp    := ::oDbfCli:cCodGrp
         ::oDbf:nRiesgo    := ::oDbfCli:Riesgo
         ::oDbf:nRieReal   := ::oDbfCli:nImpRie
         ::oDbf:cPerCto    := ::oDbfCli:cPerCto
         ::oDbf:cMeiInt    := ::oDbfCli:cMeiInt
         ::oDbf:cWebInt    := ::oDbfCli:cWebInt

         ::oDbf:Save()

      end

      ::oDbfCli:Skip()

      ::oMtrInf:AutoInc( ::oDbfCli:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfCli:LastRec() )

   ::oDlg:Enable()

   if ::oGrupo:nAt == 2
      ::oDbf:OrdSetFocus( ::oEstado:nAt )
   else
      ::oDbf:OrdSetFocus( ::oEstado:nAt + 6 )
   end

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TInfCliGrp_NewGroup( lNoGroup ) ; local Self AS CLASS TInfCliGrp := QSelf() AS CLASS TInfCliGrp

   do case
      case ::oGrupo:nAt == 2
         ::AddGroup( {|| ::oDbf:cCodGrp }, {|| "Grupo : " + Rtrim( ::oDbf:cCodGrp ) + "-" + oRetFld( ::oDbf:cCodGrp, ::oGrpCli:oDbf ) }, {||""} )
      case ::oGrupo:nAt == 3
         ::AddGroup( {|| Left( ::oDbf:Titulo, 1 ) }, {|| "Nombre : " + Left( ::oDbf:Titulo, 1 ) }, {||""} )
   end

RETURN ( Self )



static FUNCTION TInfCliGrp_QuiGroup( lNoGroup ) ; local Self AS CLASS TInfCliGrp := QSelf() AS CLASS TInfCliGrp

   if ::oGrupo:nAt > 1
      ::DelGroup()
   end

RETURN ( Self )
