#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\.\Prg\InfoArticulo.prg"
Static oInfoArticulo



Function CreateInfoArticulo()

   CloseInfoArticulo()

   if Empty( oInfoArticulo )
      if ConfiguracionesEmpresaModel():getLogic( "lBrowseSql", .F. )
         oInfoArticulo  := TInfoClienteArticulo():Run()
      else
         oInfoArticulo  := TInfoArticulo():New()
      end

   end

Return nil



Function CloseInfoArticulo()

   if !ConfiguracionesEmpresaModel():getLogic( "lBrowseSql", .F. )

      if oInfoArticulo <> nil
         oInfoArticulo:CloseFiles()
      end

   end

   oInfoArticulo     := nil

Return nil



_HB_CLASS TInfoArticulo ; function TInfoArticulo ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfoArticulo", iif( .F., { }, { @HBObject() } ), @TInfoArticulo() ) ) ;

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )

   _HB_MEMBER { oDbfArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArticulo"}, .F. )
   _HB_MEMBER { oDbfIva } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { oDbfKit } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfKit"}, .F. )
   _HB_MEMBER { oDbfDivisa } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfDivisa"}, .F. )
   _HB_MEMBER { oDbfArtCode } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArtCode"}, .F. )

   _HB_MEMBER { oCodigoArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodigoArticulo"}, .F. )
   _HB_MEMBER { oNombreArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oNombreArticulo"}, .F. )
   _HB_MEMBER { oPrecioArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPrecioArticulo"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TInfoArticulo_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfoArticulo_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfoArticulo_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadArticulo(); oClass:AddMethod( "LoadArticulo", @TInfoArticulo_LoadArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfoArticulo ;



static FUNCTION TInfoArticulo_OpenFiles( cPath ) ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   BEGIN SEQUENCE

      ::oDbfArticulo := DbfServer( "Articulo.Dbf", ):NewOpen( "Articulo.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArticulo:AddBag( "Articulo.Cdx" ) ; ::oDbfArticulo:AddBag( ) ; ::oDbfArticulo:AutoIndex()

      ::oDbfArtCode := DbfServer( "ArtCodebar.Dbf", ):NewOpen( "ArtCodebar.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArtCode:AddBag( "ArtCodebar.Cdx" ) ; ::oDbfArtCode:AddBag( ) ; ::oDbfArtCode:AutoIndex()

      ::oDbfIva := DbfServer( "Tiva.Dbf", ):NewOpen( "Tiva.Dbf",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "Tiva.Cdx" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

      ::oDbfDivisa := DbfServer( "Divisas.Dbf", ):NewOpen( "Divisas.Dbf",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDivisa:AddBag( "Divisas.Cdx" ) ; ::oDbfDivisa:AddBag( ) ; ::oDbfDivisa:AutoIndex()

      ::oDbfKit := DbfServer( "ArtKit.Dbf", ):NewOpen( "ArtKit.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfKit:AddBag( "ArtKit.Cdx" ) ; ::oDbfKit:AddBag( ) ; ::oDbfKit:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )







static FUNCTION TInfoArticulo_CloseFiles( ) ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   if !Empty( ::oDbfArticulo )
      ::oDbfArticulo:End()
   end

   if !Empty( ::oDbfArtCode )
      ::oDbfArtCode:End()
   end

   if !Empty( ::oDbfIva )
      ::oDbfIva:End()
   end

   if !Empty( ::oDbfDivisa )
      ::oDbfDivisa:End()
   end

   if !Empty( ::oDbfKit )
      ::oDbfKit:End()
   end

   ::oDbfArticulo    := nil
   ::oDbfArtCode     := nil
   ::oDbfIva         := nil
   ::oDbfDivisa      := nil
   ::oDbfKit         := nil

   oInfoArticulo     := nil

Return .T.



static FUNCTION TInfoArticulo_New( ) ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   local cCodigoArticulo   := Space( 18 )
   local cNombreArticulo   := Space( 100 )
   local nPrecioArticulo   := 0

   if ::OpenFiles()

      ::oDlg = TDialog():New(,,,,, "SearchArticulo",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )




      ::oCodigoArticulo := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodigoArticulo, cCodigoArticulo:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

         ::oCodigoArticulo:bValid   := {|| ::LoadArticulo() }
         ::oCodigoArticulo:bHelp    := {|| BrwArticulo( ::oCodigoArticulo, ::oNombreArticulo ) }



      ::oNombreArticulo := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cNombreArticulo, cNombreArticulo:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      ::oPrecioArticulo := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nPrecioArticulo, nPrecioArticulo:= u ) }, ::oDlg,, "@E 999,999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 130, {||( ::oDlg:end( 1 ) )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:bStart  := {|| ::oCodigoArticulo:SetFocus() }

      ::oDlg:Activate( , , , .T., {|| ::CloseFiles() }, .F. )

   end

Return ( Self )



static FUNCTION TInfoArticulo_LoadArticulo( ) ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   local cCodigoArticulo   := ::oCodigoArticulo:VarGet()

   if Empty( ::oDbfArtCode ) .OR. Empty( ::oDbfArticulo )
      Return .T.
   end





   cCodigoArticulo         := cSeekCodebar( cCodigoArticulo, ::oDbfArtCode:cAlias, ::oDbfArticulo:cAlias )





   if ::oDbfArticulo:Seek( cCodigoArticulo )

      ::oCodigoArticulo:cText( cCodigoArticulo )

      if !Empty( ::oDbfArticulo:cDesTik )
         ::oNombreArticulo:cText( ::oDbfArticulo:cDesTik )
      else
         ::oNombreArticulo:cText( ::oDbfArticulo:Nombre )
      end

      ::oPrecioArticulo:cText( nRetPreArt( 1, cDivEmp(), .T., ::oDbfArticulo:cAlias, ::oDbfDivisa:cAlias, ::oDbfKit:cAlias, ::oDbfIva:cAlias ) )

   else

      MsgStop( "Artículo no encontrado" )

   end

Return .T.







_HB_CLASS TInfoClienteArticulo ; function TInfoClienteArticulo ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfoClienteArticulo", iif( .F., { }, { @HBObject() } ), @TInfoClienteArticulo() ) ) ;

   _HB_MEMBER { oDialog } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDialog"}, .F. )
   _HB_MEMBER { oBitmap } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBitmap"}, .F. )

   _HB_MEMBER { oCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCliente"}, .F. )
   _HB_MEMBER { cCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCliente"}, .F. )

   _HB_MEMBER { nTarifa } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTarifa"}, .F. )
   _HB_MEMBER { oRiesgo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oRiesgo"}, .F. )
   _HB_MEMBER { nRiesgo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRiesgo"}, .F. )

   _HB_MEMBER { oStock } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oStock"}, .F. )
   _HB_MEMBER { nStock } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nStock"}, .F. )

   _HB_MEMBER { oArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oArticulo"}, .F. )
   _HB_MEMBER { cArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cArticulo"}, .F. )

   _HB_MEMBER { aSayPrecio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSayPrecio"}, .F. )
   _HB_MEMBER { aSayPrecioIva } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSayPrecioIva"}, .F. )

   _HB_MEMBER { aSayDto } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSayDto"}, .F. )

   _HB_MEMBER { cOldCodCli } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOldCodCli"}, .F. )

   _HB_MEMBER { cOldCodArt } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOldCodArt"}, .F. )

   _HB_MEMBER Run(); oClass:AddMethod( "Run", @TInfoClienteArticulo_Run(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TInfoClienteArticulo_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource(); oClass:AddMethod( "Resource", @TInfoClienteArticulo_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadCliente(); oClass:AddMethod( "LoadCliente", @TInfoClienteArticulo_LoadCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER LoadArticulo(); oClass:AddMethod( "LoadArticulo", @TInfoClienteArticulo_LoadArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfoClienteArticulo ;



static FUNCTION TInfoClienteArticulo_Run( ) ; local Self AS CLASS TInfoClienteArticulo := QSelf() AS CLASS TInfoClienteArticulo

   ::aSayPrecio      := Array( 6 )
   ::aSayPrecioIva   := Array( 6 )
   ::aSayDto         := Array( 5 )
   ::cCliente        := Space( 12 )
   ::cArticulo       := Space( 18 )
   ::nTarifa         := 0
   ::nRiesgo         := 0
   ::nStock          := 0

   ::cOldCodCli      := ""
   ::cOldCodArt      := ""

   ::Resource()

   ::end()

Return ( nil )



static FUNCTION TInfoClienteArticulo_End( ) ; local Self AS CLASS TInfoClienteArticulo := QSelf() AS CLASS TInfoClienteArticulo

   if !Empty( ::oBitmap )
      ::oBitmap:End()
   end

Return ( nil )



static FUNCTION TInfoClienteArticulo_Resource( ) ; local Self AS CLASS TInfoClienteArticulo := QSelf() AS CLASS TInfoClienteArticulo

   CursorWait()

   ::oDialog = TDialog():New(,,,, "", "SEARCHPRICES",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





      ::oBitmap := TBitmap():ReDefine( 600, "gc_symbol_euro_48",, ::oDialog,,, .F., .F.,,, .F.,,, .T. )





      ::oCliente := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cCliente, ::cCliente:= u ) }, ::oDialog,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 111 )

         ::oCliente:bValid    := {|| cClient( ::oCliente, , ::oCliente:oHelpText ), ::LoadCliente() }
         ::oCliente:bHelp     := {|| BrwClient( ::oCliente, ::oCliente:oHelpText ), ::LoadCliente() }




      ::oRiesgo := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::nRiesgo, ::nRiesgo:= u ) }, ::oDialog,, cPorDiv(),,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )






      ::oArticulo := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cArticulo, ::cArticulo:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( !Empty( ::oCliente:VarGet() ) )},, .F., .F.,,,,,, nil, "LUPA",, 131 )

      ::oArticulo:bValid      := {|| ::LoadArticulo() }
      ::oArticulo:bHelp       := {|| FastBrwArt( ::oArticulo, ::oArticulo:oHelpText ), ::oArticulo:lValid() }

      ::aSayPrecio[1] := TSay():ReDefine( 140,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayPrecioIva[1] := TSay():ReDefine( 141,, ::oDialog,,,, .F.,, .F., .F., )

      ::aSayPrecio[2] := TSay():ReDefine( 150,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayPrecioIva[2] := TSay():ReDefine( 151,, ::oDialog,,,, .F.,, .F., .F., )

      ::aSayPrecio[3] := TSay():ReDefine( 160,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayPrecioIva[3] := TSay():ReDefine( 161,, ::oDialog,,,, .F.,, .F., .F., )

      ::aSayPrecio[4] := TSay():ReDefine( 170,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayPrecioIva[4] := TSay():ReDefine( 171,, ::oDialog,,,, .F.,, .F., .F., )

      ::aSayPrecio[5] := TSay():ReDefine( 180,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayPrecioIva[5] := TSay():ReDefine( 181,, ::oDialog,,,, .F.,, .F., .F., )

      ::aSayPrecio[6] := TSay():ReDefine( 190,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayPrecioIva[6] := TSay():ReDefine( 191,, ::oDialog,,,, .F.,, .F., .F., )

      ::aSayDto[1] := TSay():ReDefine( 210,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayDto[2] := TSay():ReDefine( 220,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayDto[3] := TSay():ReDefine( 230,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayDto[4] := TSay():ReDefine( 240,, ::oDialog,,,, .F.,, .F., .F., )
      ::aSayDto[5] := TSay():ReDefine( 250,, ::oDialog,,,, .F.,, .F., .F., )




      ::oStock := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::nStock, ::nStock:= u ) }, ::oDialog,, MasUnd(),,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 500, {||( if( !Empty( ::oArticulo:VarGet() ), if( RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() ), msgStop( "No tiene permiso para ver los precios de costo" ), InfArticulo( ::oArticulo:VarGet() ) ), ) )}, ::oDialog,,, .F.,,,, .T. )





      TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   CursorWe()

Return ( nil )



static FUNCTION TInfoClienteArticulo_LoadCliente( ) ; local Self AS CLASS TInfoClienteArticulo := QSelf() AS CLASS TInfoClienteArticulo

   local hCliente

   if !Empty( ::oCliente:VarGet() )

      hCliente          := ClientesModel():getHash( ::oCliente:VarGet() )

      if !Empty( hCliente )

         if ::cOldCodCli <> hGet( hCliente, "cod" )

            if hGet( hCliente, "lmoscom" ) .AND. !Empty( hGet( hCliente, "mcoment" ) )
               MsgStop( hGet( hCliente, "mcoment" ), "Comentario cliente" )
            end

            showClienteRiesgo( hGet( hCliente, "cod" ), hGet( hCliente, "riesgo" ),::oRiesgo )

            ::nTarifa         := hGet( hCliente, "ntarifa" )

            aeval( ::aSayPrecio, {|a| a:SetFont( oWnd():oFont ) } )
            aeval( ::aSayPrecioIva, {|a| a:SetFont( oWnd():oFont ) } )
            aeval( ::aSayDto, {|a| a:SetFont( getBoldFont() ) } )

            ::aSayPrecio[ ::nTarifa ]:SetFont( getBoldFont() )
            ::aSayPrecioIva[ ::nTarifa ]:SetFont( getBoldFont() )

            ::aSayPrecio[2]:SetFont( getBoldFont() )
            ::aSayPrecioIva[2]:SetFont( getBoldFont() )

            aeval( ::aSayPrecio, {|a| a:Refresh() } )
            aeval( ::aSayPrecioIva, {|a| a:Refresh() } )
            aeval( ::aSayDto, {|a| a:Refresh() } )

            ::cOldCodCli      := hGet( hCliente, "cod" )

         end

      end

   else

      ::nTarifa         := 2

   end

   if Empty( ::oArticulo:VarGet() )
      FastBrwArt( ::oArticulo, ::oArticulo:oHelpText )
   end

   ::oArticulo:Refresh()
   ::oArticulo:SetFocus()
   ::oArticulo:lValid()

Return ( .T. )



static FUNCTION TInfoClienteArticulo_LoadArticulo( ) ; local Self AS CLASS TInfoClienteArticulo := QSelf() AS CLASS TInfoClienteArticulo

   local hArticulo
   local nTarifaAtipica := ::nTarifa

   if !Empty( ::oArticulo:VarGet() )

      hArticulo         := ArticulosModel():getHash( ::oArticulo:VarGet() )

      if !Empty( hArticulo )

         if ::cOldCodArt <> hGet( hArticulo, "codigo" )

            if hGet( hArticulo, "lmoscom" ) .AND. !Empty( hGet( hArticulo, "mcoment" ) )
               MsgStop( hGet( hArticulo, "mcoment" ), "Comentario artículo" )
            end

            ::oArticulo:oHelpText:cText( hGet( hArticulo, "nombre" ) )

            ::aSayPrecio[1]:SetText( Trans( hGet( hArticulo, "pventa1" ), cPorDiv() ) )
            ::aSayPrecioIva[1]:SetText( Trans( hGet( hArticulo, "pvtaiva1" ), cPorDiv() ) )

            ::aSayPrecio[2]:SetText( Trans( hGet( hArticulo, "pventa2" ), cPorDiv() ) )
            ::aSayPrecioIva[2]:SetText( Trans( hGet( hArticulo, "pvtaiva2" ), cPorDiv() ) )

            ::aSayPrecio[3]:SetText( Trans( hGet( hArticulo, "pventa3" ), cPorDiv() ) )
            ::aSayPrecioIva[3]:SetText( Trans( hGet( hArticulo, "pvtaiva3" ), cPorDiv() ) )

            ::aSayPrecio[4]:SetText( Trans( hGet( hArticulo, "pventa4" ), cPorDiv() ) )
            ::aSayPrecioIva[4]:SetText( Trans( hGet( hArticulo, "pvtaiva4" ), cPorDiv() ) )

            ::aSayPrecio[5]:SetText( Trans( hGet( hArticulo, "pventa5" ), cPorDiv() ) )
            ::aSayPrecioIva[5]:SetText( Trans( hGet( hArticulo, "pvtaiva5" ), cPorDiv() ) )

            ::aSayPrecio[6]:SetText( Trans( hGet( hArticulo, "pventa6" ), cPorDiv() ) )
            ::aSayPrecioIva[6]:SetText( Trans( hGet( hArticulo, "pvtaiva6" ), cPorDiv() ) )


            if hGet( hArticulo, "pventa1" ) == 0
               ::aSayDto[1]:SetText( "" )
               ::aSayDto[2]:SetText( "" )
               ::aSayDto[3]:SetText( "" )
               ::aSayDto[4]:SetText( "" )
               ::aSayDto[5]:SetText( "" )
            else
               ::aSayDto[1]:SetText( "Dto: " + Trans( ( 100 - ( ( hGet( hArticulo, "pventa2" ) * 100 ) / hGet( hArticulo, "pventa1" ) ) ), "999.99" ) + "%" )
               ::aSayDto[2]:SetText( "Dto: " + Trans( ( 100 - ( ( hGet( hArticulo, "pventa3" ) * 100 ) / hGet( hArticulo, "pventa1" ) ) ), "999.99" ) + "%" )
               ::aSayDto[3]:SetText( "Dto: " + Trans( ( 100 - ( ( hGet( hArticulo, "pventa4" ) * 100 ) / hGet( hArticulo, "pventa1" ) ) ), "999.99" ) + "%" )
               ::aSayDto[4]:SetText( "Dto: " + Trans( ( 100 - ( ( hGet( hArticulo, "pventa5" ) * 100 ) / hGet( hArticulo, "pventa1" ) ) ), "999.99" ) + "%" )
               ::aSayDto[5]:SetText( "Dto: " + Trans( ( 100 - ( ( hGet( hArticulo, "pventa6" ) * 100 ) / hGet( hArticulo, "pventa1" ) ) ), "999.99" ) + "%" )
            end


            ::nStock       := StocksModel():nGlobalStockArticulo( hGet( hArticulo, "codigo" ) )

            if ::nStock <= 0
               ::oStock:setColor( ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), ( 255 + ( 0 * 256 ) + ( 0 * 65536 ) ) )
            else
               ::oStock:setColor( ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), ( 0 + ( 255 * 256 ) + ( 0 * 65536 ) ) )
            end

            ::oStock:Refresh()

            if !Empty( hGet( hArticulo, "familia" ) )

               nTarifaAtipica :=  AtipicasModel():getTarifaAtipicasFromFamilia( ::oCliente:VarGet(), hGet( hArticulo, "familia" ) )

               if nTarifaAtipica > 0 .AND. nTarifaAtipica <> ::nTarifa

                  do case
                     case nTarifaAtipica == 0
                        nTarifaAtipica := 1
                     case nTarifaAtipica < 0 .OR. nTarifaAtipica > 6
                        nTarifaAtipica := ::nTarifa
                  end

               end

            end

            if nTarifaAtipica == 0
               nTarifaAtipica := ::nTarifa
            end

            aeval( ::aSayPrecio, {|a| a:SetFont( oWnd():oFont ) } )
            aeval( ::aSayPrecioIva, {|a| a:SetFont( oWnd():oFont ) } )

            ::aSayPrecio[ nTarifaAtipica ]:SetFont( getBoldFont() )
            ::aSayPrecioIva[ nTarifaAtipica ]:SetFont( getBoldFont() )

            ::aSayPrecio[2]:SetFont( getBoldFont() )
            ::aSayPrecioIva[2]:SetFont( getBoldFont() )

            aeval( ::aSayPrecio, {|a| a:Refresh() } )
            aeval( ::aSayPrecioIva, {|a| a:Refresh() } )

            ::cOldCodArt      := hGet( hArticulo, "codigo" )

         end

      end

   end

Return ( .T. )
