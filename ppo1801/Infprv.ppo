#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Infprv.prg"
_HB_CLASS TInfPrv ; function TInfPrv ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfPrv", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfPrv() ) ) ;

   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfPrv_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfPrv_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfPrv_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfPrv ;



static FUNCTION TInfPrv_Create( ) ; local Self AS CLASS TInfPrv := QSelf() AS CLASS TInfPrv

   ::AddField( "Cod",       "C",  12, 0, {|| "" },          "Código",                      .T., "Código",                    10, .F. )
   ::AddField( "Titulo",    "C",  50, 0, {|| "" },          "Nombre",                      .T., "Nombre",                    30, .F. )
   ::AddField( "Nif",       "C",  15, 0, {|| "" },          "N.I.F.",                      .F., "N.I.F.",                    12, .F. )
   ::AddField( "Domicilio", "C", 100, 0, {|| "" },          "Domicilio",                   .T., "Domicilio",                 40, .F. )
   ::AddField( "Poblacion", "C",  35, 0, {|| "" },          "Población",                   .T., "Población",                 40, .F. )
   ::AddField( "Provincia", "C",  20, 0, {|| "" },          "Provincia" ,                  .T., "Provincia" ,                15, .F. )
   ::AddField( "CodPostal", "C",   7, 0, {|| "" },          "Cod. pos.",                   .T., "Código postal",              7, .F. )
   ::AddField( "Telefono",  "C",  20, 0, {|| "" },          "Teléfono",                    .T., "Teléfono",                  10, .F. )
   ::AddField( "Fax",       "C",  20, 0, {|| "" },          "Fax" ,                        .F., "Fax" ,                      10, .F. )
   ::AddField( "Fpago",     "C",   2, 0, {|| "" },          "Pg" ,                         .F., "Forma de pago" ,            10, .F. )
   ::AddField( "Diapago",   "N",   2, 0, {|| "" },          "Dia" ,                        .F., "Dia de pago" ,              10, .F. )

   ::AddTmpIndex ( "cCodCod", "Cod" )
   ::AddTmpIndex ( "cCodTit", "Titulo" )
   ::AddTmpIndex ( "cCodPob", "Poblacion" )
   ::AddTmpIndex ( "cCodPrv", "Provincia" )
   ::AddTmpIndex ( "cCodCdp", "CodPostal" )
   ::AddTmpIndex ( "cCodTlf", "Telefono" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION TInfPrv_lResource( cFld ) ; local Self AS CLASS TInfPrv := QSelf() AS CLASS TInfPrv

   local cEstado  := "Código"

   if !::StdResource( "INF_PRV01" )
      return .F.
   end




   ::oDefPrvInf( 110, 120, 130, 140, 600 )



   TCheckBox():ReDefine( 200, { | u | If( PCount()==0, ::lSalto, ::lSalto:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   ::CreateFilter( aItmPrv(), ::oDbfPrv )




   ::oMtrInf:SetTotal( ::oDbfPrv:Lastrec() )









   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, { "Código", "Nombre", "Población", "Provincia", "Código postal", "Teléfono" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

RETURN .T.






static FUNCTION TInfPrv_lGenerate( ) ; local Self AS CLASS TInfPrv := QSelf() AS CLASS TInfPrv

   ::oDlg:Disable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha       : " + Dtoc( Date() ) }, {|| "Proveedores : " + if( ::lAllPrv, "Todos", AllTrim( ::cPrvOrg ) + " > " + AllTrim( ::cPrvDes ) ) } }

   ::oDbfPrv:GoTop()
   WHILE !::oDbfPrv:Eof()

      if ( ::lAllPrv .OR. ( ::oDbfPrv:Cod >= ::cPrvOrg .AND. ::oDbfPrv:Cod <= ::cPrvDes ) ) .AND. ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:Cod         := ::oDbfPrv:Cod
         ::oDbf:Titulo      := ::oDbfPrv:Titulo
         ::oDbf:Nif         := ::oDbfPrv:Nif
         ::oDbf:Domicilio   := ::oDbfPrv:Domicilio
         ::oDbf:Poblacion   := ::oDbfPrv:Poblacion
         ::oDbf:Provincia   := ::oDbfPrv:Provincia
         ::oDbf:CodPostal   := ::oDbfPrv:CodPostal
         ::oDbf:Telefono    := ::oDbfPrv:Telefono
         ::oDbf:Fax         := ::oDbfPrv:Fax
         ::oDbf:Fpago       := ::oDbfPrv:Fpago
         ::oDbf:Diapago     := ::oDbfPrv:Diapago

         ::oDbf:Save()

      end

      ::oDbfPrv:Skip()

      ::oMtrInf:AutoInc( ::oDbfPrv:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfPrv:LastRec() )

   ::oDlg:Enable()

   ::oDbf:OrdSetFocus( ::oEstado:nAt )

RETURN ( ::oDbf:LastRec() > 0 )
