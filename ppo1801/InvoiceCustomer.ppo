#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\Prg\tablet\presenter\documentos\ventas\InvoiceCustomer.prg"
_HB_CLASS InvoiceCustomer ; function InvoiceCustomer ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "InvoiceCustomer", iif( .T., { @DocumentsSales() }, { @HBObject() } ), @InvoiceCustomer() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @InvoiceCustomer_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create( nView); oClass:AddMethod( "Create", @InvoiceCustomer_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAppendDocumento(); oClass:AddMethod( "getAppendDocumento", @InvoiceCustomer_getAppendDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getEditDocumento(); oClass:AddMethod( "getEditDocumento", @InvoiceCustomer_getEditDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLinesDocument( id); oClass:AddMethod( "getLinesDocument", @InvoiceCustomer_getLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDocumentLine(); oClass:AddMethod( "getDocumentLine", @InvoiceCustomer_getDocumentLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLines(); oClass:AddInline( "getLines", {|Self | ( ( Self ) ), ( ::oDocumentLines:getLines() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLineDetail(); oClass:AddInline( "getLineDetail", {|Self | ( ( Self ) ), ( ::oDocumentLines:getLineDetail( ::nPosDetail ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAppendDetail(); oClass:AddMethod( "getAppendDetail", @InvoiceCustomer_getAppendDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteLinesDocument(); oClass:AddMethod( "deleteLinesDocument", @InvoiceCustomer_deleteLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER printDocument(); oClass:AddInline( "printDocument", {|Self | ( ( Self ) ), ( imprimeFacturaCliente( ::getID(), ::cFormatToPrint, ::nView ), .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPostSaveAppend(); oClass:AddInline( "onPostSaveAppend", {|Self | ( ( Self ) ), ( ::onPostSaveEdit(), ::actualizaUltimoLote(), ::saveToSDF() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER onPostSaveEdit(); oClass:AddInline( "onPostSaveEdit", {|Self | ( ( Self ) ), ( generatePagosFacturaCliente( ::getId(), ::nView ), checkPagosFacturaCliente( ::getId(), ::nView ), ::recalculateCacheStock() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER appendButtonMode(); oClass:AddInline( "appendButtonMode", {|Self | ( ( Self ) ), ( ::lAppendMode() .OR. ( ::lEditMode() .AND. accessCode():lInvoiceModify ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER editButtonMode(); oClass:AddInline( "editButtonMode", {|Self | ( ( Self ) ), ( ::appendButtonMode() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteButtonMode(); oClass:AddInline( "deleteButtonMode", {|Self | ( ( Self ) ), ( ::appendButtonMode() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER onPreEditDocumento(); oClass:AddMethod( "onPreEditDocumento", @InvoiceCustomer_onPreEditDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER actualizaUltimoLote(); oClass:AddMethod( "actualizaUltimoLote", @InvoiceCustomer_actualizaUltimoLote(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER recalculateCacheStock(); oClass:AddMethod( "recalculateCacheStock", @InvoiceCustomer_recalculateCacheStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runScriptPreSaveAppend(); oClass:AddMethod( "runScriptPreSaveAppend", @InvoiceCustomer_runScriptPreSaveAppend(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER saveToSDF(); oClass:AddMethod( "saveToSDF", @InvoiceCustomer_saveToSDF(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPreSaveDelete(); oClass:AddMethod( "onPreSaveDelete", @InvoiceCustomer_onPreSaveDelete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER actualizaStock(); oClass:AddMethod( "actualizaStock", @InvoiceCustomer_actualizaStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RollBackStock(); oClass:AddMethod( "RollBackStock", @InvoiceCustomer_RollBackStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ImportAtipicas(); oClass:AddMethod( "ImportAtipicas", @InvoiceCustomer_ImportAtipicas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CargaArticuloAtipicas(); oClass:AddMethod( "CargaArticuloAtipicas", @InvoiceCustomer_CargaArticuloAtipicas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteLinesCero(); oClass:AddMethod( "deleteLinesCero", @InvoiceCustomer_deleteLinesCero(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveNewAtipica(); oClass:AddMethod( "saveNewAtipica", @InvoiceCustomer_saveNewAtipica(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS InvoiceCustomer ;



static FUNCTION InvoiceCustomer_Create( nView ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   ::nView                 := nView

   ::super:oSender         := self

   ::oViewSearchNavigator  := DocumentSalesViewSearchNavigator():New( self )

   ::oViewEdit             := InvoiceDocumentSalesViewEdit():New( self )

   ::oViewEditResumen      := ViewEditResumen():New( self )

   ::oCliente              := Customer():init( self )

   ::oProduct              := Product():init( self )

   ::oImpuestos            := Impuestos():init( self )

   ::oProductStock         := ProductStock():init( self )

   ::oStore                := Store():init( self )

   ::oPayment              := Payment():init( self )

   ::oDirections           := Directions():init( self )

   ::oDocumentLines        := DocumentLines():New( self )

   ::oLinesDocumentsSales  := LinesDocumentsSales():New( self )

   ::oTotalDocument        := TotalDocument():New( self )

   ::lAlowEdit             := accessCode():lInvoiceModify



   ::oViewSearchNavigator:setTitleDocumento( "Facturas de clientes" )

   ::oViewEdit:setTitleDocumento( "Factura cliente" )

   ::oViewEditResumen:setTitleDocumento( "Resumen factura" )



   ::setTypePrintDocuments( "FC" )

   ::setCounterDocuments( "nFacCli" )



   ::setSentenceTable( runScript( "FacturasClientes\SQLOpen.prg" ) )

   ::setDataTable( "FacCliT" )

   ::setDataTableLine( "FacCliL" )

RETURN ( self )



static FUNCTION InvoiceCustomer_New( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   ::super:oSender         := self

   if !::openFiles()
      RETURN ( self )
   end

   ::oViewSearchNavigator  := DocumentSalesViewSearchNavigator():New( self )

   ::oViewEdit             := InvoiceDocumentSalesViewEdit():New( self )

   ::oViewEditResumen      := ViewEditResumen():New( self )

   ::oCliente              := Customer():init( self )

   ::oProduct              := Product():init( self )

   ::oImpuestos            := Impuestos():init( self )

   ::oProductStock         := ProductStock():init( self )

   ::oStore                := Store():init( self )

   ::oPayment              := Payment():init( self )

   ::oDirections           := Directions():init( self )

   ::oDocumentLines        := DocumentLines():New( self )

   ::oLinesDocumentsSales  := LinesDocumentsSales():New( self )

   ::oTotalDocument        := TotalDocument():New( self )

   ::lAlowEdit             := accessCode():lInvoiceModify



   ::oViewSearchNavigator:setTitleDocumento( "Facturas de clientes" )

   ::oViewEdit:setTitleDocumento( "Factura cliente" )

   ::oViewEditResumen:setTitleDocumento( "Resumen factura" )



   ::setTypePrintDocuments( "FC" )

   ::setCounterDocuments( "nFacCli" )



   ::setSentenceTable( runScript( "FacturasClientes\SQLOpen.prg" )  )

   ::setDataTable( "FacCliT" )

   ::setDataTableLine( "FacCliL" )

RETURN ( self )



static FUNCTION InvoiceCustomer_getAppendDocumento( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   ::hDictionaryMaster      := D():getDefaultHashFacturaCliente( ::nView )

RETURN ( self )



static FUNCTION InvoiceCustomer_getEditDocumento( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local id                := D():FacturasClientesId( ::nView )

   if Empty( id )
      RETURN .F.
   end

   ::hDictionaryMaster     := D():getHashRecordById( id, ::getWorkArea(), ::nView )

   if empty( ::hDictionaryMaster )
      RETURN .F.
   end

   ::getLinesDocument( id )

RETURN ( .T. )






static FUNCTION InvoiceCustomer_getLinesDocument( id ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   ::oDocumentLines:reset()

   D():getStatusFacturasClientesLineas( ::nView )

   ( D():FacturasClientesLineas( ::nView ) )->( ordSetFocus( 1 ) )

   if ( D():FacturasClientesLineas( ::nView ) )->( dbSeek( id ) )

      while ( D():FacturasClientesLineasId( ::nView ) == id ) .AND. !( D():FacturasClientesLineas( ::nView ) )->( eof() )

         ::addDocumentLine()

         ( D():FacturasClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

   D():setStatusFacturasClientesLineas( ::nView )

RETURN ( self )



static FUNCTION InvoiceCustomer_getDocumentLine( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local hLine    := D():GetFacturaClienteLineasHash( ::nView )

   if empty( hLine )
      RETURN ( nil )
   end

RETURN ( DictionaryDocumentLine():New( self, hLine ) )



static FUNCTION InvoiceCustomer_getAppendDetail( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local hLine             := D():GetFacturaClienteLineaDefaultValues( ::nView )

   ::oDocumentLineTemporal := DictionaryDocumentLine():New( self, hLine )

RETURN ( self )



static FUNCTION InvoiceCustomer_deleteLinesDocument( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   FacturasClientesLineasModel():deleteWherId( ::getSerie(), ::getStrNumero(), ::getSufijo() )

RETURN ( Self )



static FUNCTION InvoiceCustomer_actualizaUltimoLote( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local nRec        := ( D():FacturasClientesLineas( ::nView ) )->( Recno() )
   local nOrdAnt     := ( D():FacturasClientesLineas( ::nView ) )->( ordSetFocus( "nNumFac" ) )

   if ( D():FacturasClientesLineas( ::nView ) )->( dbSeek( ::getId() ) )

      while ( D():FacturasClientesLineasId( ::nView ) == ::getId() .AND. D():FacturasClientesLineasNotEof( ::nView ) )

         if !Empty( ( D():FacturasClientesLineas( ::nView ) )->cRef ) .AND. ( D():FacturasClientesLineas( ::nView ) )->lLote

            saveLoteActual( ( D():FacturasClientesLineas( ::nView ) )->cRef, ( D():FacturasClientesLineas( ::nView ) )->cLote, ::nView )

         end

         ( D():FacturasClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():FacturasClientesLineas( ::nView ) )->( ordSetFocus( nOrdAnt ) )
   ( D():FacturasClientesLineas( ::nView ) )->( dbGoTo( nRec ) )

RETURN ( self )



static FUNCTION InvoiceCustomer_recalculateCacheStock( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local nRec
   local nOrdAnt

   RETURN ( self )

   nRec              := ( D():FacturasClientesLineas( ::nView ) )->( recno() )
   nOrdAnt           := ( D():FacturasClientesLineas( ::nView ) )->( ordsetfocus( "nNumFac" ) )

   cursorWait()

   if ( D():FacturasClientesLineas( ::nView ) )->( dbseek( ::getId() ) )

      while ( D():FacturasClientesLineasId( ::nView ) == ::getId() .AND. D():FacturasClientesLineasNotEof( ::nView ) )

         if !empty( ( D():FacturasClientesLineas( ::nView ) )->cRef )

            ::oStock:recalculateCacheStockActual( ( D():FacturasClientesLineas( ::nView ) )->cRef, ( D():FacturasClientesLineas( ::nView ) )->cAlmLin, ( D():FacturasClientesLineas( ::nView ) )->cValPr1, ( D():FacturasClientesLineas( ::nView ) )->cValPr2, ( D():FacturasClientesLineas( ::nView ) )->cLote, ( D():FacturasClientesLineas( ::nView ) )->lKitArt, nil, ( D():FacturasClientesLineas( ::nView ) )->nCtlStk )

         end

         ( D():FacturasClientesLineas( ::nView ) )->( dbskip() )

      end

   end

   ( D():FacturasClientesLineas( ::nView ) )->( ordsetfocus( nOrdAnt ) )
   ( D():FacturasClientesLineas( ::nView ) )->( dbgoto( nRec ) )

   cursorWE()

RETURN ( self )



static FUNCTION InvoiceCustomer_onPreEditDocumento( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   ::nOrdenAnterior     := ( ::getDataTable() )->( OrdSetFocus() )

RETURN ( .T. )



static FUNCTION InvoiceCustomer_saveToSDF( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local nRecno
   local cFileSDF    := cPatSafe() + "Factura-" + ::getNumeroDocumento() + ".txt"

   nRecno            := ( D():FacturasClientes( ::nView ) )->( recno() )

   ( D():FacturasClientes( ::nView ) )->( __dbdelim( .T., cFileSDF, ";", , {|| field->cSerie + str( field->nNumFac ) + field->cSufFac == ::getID() }, , , , ,  ) )

   ( D():FacturasClientes( ::nView ) )->( dbgoto( nRecno ) )

   cFileSDF          := cPatSafe() + "Factura-Lineas-" + ::getNumeroDocumento() + ".txt"

   nRecno            := ( D():FacturasClientesLineas( ::nView ) )->( recno() )

   ( D():FacturasClientesLineas( ::nView ) )->( __dbdelim( .T., cFileSDF, ";", , {|| field->cSerie + str( field->nNumFac ) + field->cSufFac == ::getID() }, , , , ,  ) )

   ( D():FacturasClientesLineas( ::nView ) )->( dbgoto( nRecno ) )

RETURN ( .T. )



static FUNCTION InvoiceCustomer_runScriptPreSaveAppend( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   runScript( "Tablet\FacturasClientes\PreSaveAppend.prg", self )

RETURN ( .T. )



static FUNCTION InvoiceCustomer_deleteLinesCero( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local oDocumentLine
   local aTemporal      := {}

   for each oDocumentLine in ::oDocumentLines:aLines

      if oDocumentLine:getUnits() <> 0
         aAdd( aTemporal, oDocumentLine )
      end

   next

   ::oDocumentLines:aLines  := aTemporal

   ::saveNewAtipica()

RETURN ( .T. )



static FUNCTION InvoiceCustomer_saveNewAtipica( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer
















RETURN ( .T. )



static FUNCTION InvoiceCustomer_onPreSaveDelete( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local nOrdAnt





   nOrdAnt  := ( ::getDataTableLine() )->( OrdSetFocus( 1 ) )

   while ( ::getDataTableLine() )->( dbSeek( D():getId( ::getDataTable(), ::nView ) ) ) .AND. !( ::getDataTableLine() )->( eof() )
      if dbLock( ::getDataTableLine() )
         ( ::getDataTableLine() )->( dbDelete() )
         ( ::getDataTableLine() )->( dbUnLock() )
      end
   end

   ( ::getDataTableLine() )->( OrdSetFocus( nOrdAnt ) )





   nOrdAnt  := ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( 1 ) )

   while ( D():FacturasClientesCobros( ::nView ) )->( dbSeek( D():getId( ::getDataTable(), ::nView ) ) ) .AND. !( D():FacturasClientesCobros( ::nView ) )->( eof() )
      if dbLock( D():FacturasClientesCobros( ::nView ) )
         ( D():FacturasClientesCobros( ::nView ) )->( dbDelete() )
         ( D():FacturasClientesCobros( ::nView ) )->( dbUnLock() )
      end
   end

   ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( nOrdAnt ) )

Return ( .T. )



static FUNCTION InvoiceCustomer_actualizaStock( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

Return ( .T. )



static FUNCTION InvoiceCustomer_RollBackStock( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

Return ( .T. )



static FUNCTION InvoiceCustomer_ImportAtipicas( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   local nOrdAnt

   if Empty( hGet( ::hDictionaryMaster, "Cliente" ) )
      ApoloMsgStop( "Tiene que seleccionar un cliente para importar historico." )
      Return ( .T. )
   end

   if Len( ::oDocumentLines:aLines ) > 0
      ApoloMsgStop( "No se puede importar historico con lineas añadidas" )
      Return ( .T. )
   end





   nOrdAnt            := ( D():Atipicas( ::nView ) )->( OrdSetFocus( "cCodCli" ) )

   if ( D():Atipicas( ::nView ) )->( dbSeek( hGet( ::hDictionaryMaster, "Cliente" ) ) )

      while ( D():Atipicas( ::nView ) )->cCodCli == hGet( ::hDictionaryMaster, "Cliente" ) .AND. !( D():Atipicas( ::nView ) )->( Eof() )

         if lConditionAtipica( nil, D():Atipicas( ::nView ) ) .AND. ( D():Atipicas( ::nView ) )->lAplFac

            ::CargaArticuloAtipicas()

         end

         ( D():Atipicas( ::nView ) )->( dbSkip() )

      end

   end

   ( D():Atipicas( ::nView ) )->( OrdSetFocus( nOrdAnt ) )

Return ( .T. )



static FUNCTION InvoiceCustomer_CargaArticuloAtipicas( ) ; local Self AS CLASS InvoiceCustomer := QSelf() AS CLASS InvoiceCustomer

   ::getAppendDetail()

   ::oDocumentLineTemporal:hSetDetail( "Articulo", ( D():Atipicas( ::nView ) )->cCodArt )
   ::oDocumentLineTemporal:hSetDetail( "Cliente", hGet( ::hDictionaryMaster, "Cliente" ) )
   ::oDocumentLineTemporal:hSetDetail( "DescripcionArticulo", ArticulosModel():getField( "Nombre", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) )
   ::oDocumentLineTemporal:hSetDetail( "DescripcionAmpliada", ArticulosModel():getField( "Descrip", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) )
   ::oDocumentLineTemporal:hSetDetail( "Almacen", hGet( ::hDictionaryMaster, "Almacen" ) )
   ::oDocumentLineTemporal:hSetDetail( "LogicoLote", ArticulosModel():getField( "lLote", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) )
   ::oDocumentLineTemporal:hSetDetail( "Lote", Space( 14 ) )
   ::oDocumentLineTemporal:hSetDetail( "Familia", ArticulosModel():getField( "Familia", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) )
   ::oDocumentLineTemporal:hSetDetail( "TipoArticulo", ArticulosModel():getField( "CCODTIP", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) )
   ::oDocumentLineTemporal:hSetDetail( "Cajas", 0 )
   ::oDocumentLineTemporal:hSetDetail( "Unidades", 0 )
   ::oDocumentLineTemporal:hSetDetail( "PorcentajeImpuesto", nIva( D():TiposIva( ::nView ), ArticulosModel():getField( "TIPOIVA", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) ) )
   ::oDocumentLineTemporal:hSetDetail( "RecargoEquivalencia", nReq( D():TiposIva( ::nView ), ArticulosModel():getField( "TIPOIVA", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) ) )
   ::oDocumentLineTemporal:hSetDetail( "TipoStock", ArticulosModel():getField( "NCTLSTOCK", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) )
   ::oDocumentLineTemporal:hSetDetail( "FechaUltimaVenta", dFechaUltimaVenta( hGet( ::hDictionaryMaster, "Cliente" ), ( D():Articulos( ::nView ) )->Codigo, D():AlbaranesClientesLineas( ::nView ), D():FacturasClientesLineas( ::nView ) ) )
   ::oDocumentLineTemporal:hSetDetail( "PrecioUltimaVenta", nPrecioUltimaVenta( hGet( ::hDictionaryMaster, "Cliente" ), ( D():Atipicas( ::nView ) )->cCodArt, D():AlbaranesClientesLineas( ::nView ), D():FacturasClientesLineas( ::nView ) ) )
   ::oDocumentLineTemporal:hSetDetail( "NumeroTarifa", ::hGetMaster( "NumeroTarifa" ) )
   ::oDocumentLineTemporal:hSetDetail( "PrecioCosto", ArticulosModel():getField( "PCOSTO", "Codigo", ( D():Atipicas( ::nView ) )->cCodArt ) )
   ::oDocumentLineTemporal:hSetDetail( "PrecioVenta", nPrecioUltimaVenta( hGet( ::hDictionaryMaster, "Cliente" ), ( D():Atipicas( ::nView ) )->cCodArt, D():AlbaranesClientesLineas( ::nView ), D():FacturasClientesLineas( ::nView ) ) )

   ::saveAppendDetail()

Return ( .T. )
