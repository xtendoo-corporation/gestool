#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\presenter\Iva.prg"
_HB_CLASS Iva ; function Iva ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "Iva", iif( .F., { }, { @HBObject() } ), @Iva() ) ) ;

   _HB_MEMBER { aIva } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aIva"}, .F. )
   _HB_MEMBER { hIva } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hIva"}, .F. )
   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @Iva_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Reset(); oClass:AddMethod( "Reset", @Iva_Reset(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER add(); oClass:AddMethod( "add", @Iva_add(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTipoIva(); oClass:AddInline( "getTipoIva", {|Self, hIva | ( ( Self ) ), ( hGet( hIva, "PorcentajeImpuesto" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTipoRecargo(); oClass:AddInline( "getTipoRecargo", {|Self, hIva | ( ( Self ) ), ( hGet( hIva, "PorcentajeRecargo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setValue(); oClass:AddInline( "setValue", {|Self, nPosition, Field, Value | ( ( Self ) ), ( hSet( ::aIva[ nPosition ], Field, Value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getBrutoArray(); oClass:AddInline( "getBrutoArray", {|Self, nPosition | ( ( Self ) ), ( hGet( ::aIva[ nPosition ], "Bruto" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getBrutoHash(); oClass:AddInline( "getBrutoHash", {|Self, hIva | ( ( Self ) ), ( hGet( hIva, "Bruto" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Bruto( nPosition); oClass:AddMethod( "Bruto", @Iva_Bruto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setBruto(); oClass:AddInline( "setBruto", {|Self, nPosition, nValue | ( ( Self ) ), ( ::setValue( nPosition, "Bruto", nValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER sumBruto(); oClass:AddInline( "sumBruto", {|Self, nPosition, nValue | ( ( Self ) ), ( ::setBruto( nPosition, ::getBrutoArray( nPosition ) + nValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getBaseArray(); oClass:AddInline( "getBaseArray", {|Self, nPosition | ( ( Self ) ), ( hGet( ::aIva[ nPosition ], "Base" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getBaseHash(); oClass:AddInline( "getBaseHash", {|Self, hIva | ( ( Self ) ), ( hGet( hIva, "Base" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Base( nPosition); oClass:AddMethod( "Base", @Iva_Base(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setBase(); oClass:AddInline( "setBase", {|Self, nPosition, nValue | ( ( Self ) ), ( ::setValue( nPosition, "Base", nValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER sumBase(); oClass:AddInline( "sumBase", {|Self, nPosition, nValue | ( ( Self ) ), ( ::setBase( nPosition, ::getBaseArray( nPosition ) + nValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPercentageTax(); oClass:AddInline( "getPercentageTax", {|Self, nPosition | ( ( Self ) ), ( hGet( ::aIva[ nPosition ], "PorcentajeImpuesto" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getImporteImpuesto(); oClass:AddInline( "getImporteImpuesto", {|Self, nPosition | ( ( Self ) ), ( hGet( ::aIva[ nPosition ], "ImporteImpuesto" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getPorcentajeRecargo(); oClass:AddInline( "getPorcentajeRecargo", {|Self, nPosition | ( ( Self ) ), ( hGet( ::aIva[ nPosition ], "PorcentajeRecargo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getImporteRecargo(); oClass:AddInline( "getImporteRecargo", {|Self, nPosition | ( ( Self ) ), ( hGet( ::aIva[ nPosition ], "ImporteRecargo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTotal(); oClass:AddInline( "getTotal", {|Self, nPosition | ( ( Self ) ), ( hGet( ::aIva[ nPosition ], "Total" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addIva( oDocumentLine); oClass:AddMethod( "addIva", @Iva_addIva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER sumIva( nPosition, oDocumentLine); oClass:AddMethod( "sumIva", @Iva_sumIva(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ImporteImpuesto( nPosition); oClass:AddMethod( "ImporteImpuesto", @Iva_ImporteImpuesto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ImporteRecargo( nPosition); oClass:AddMethod( "ImporteRecargo", @Iva_ImporteRecargo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CalculaTotal( nPosition); oClass:AddMethod( "CalculaTotal", @Iva_CalculaTotal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ShowBruto( nPosition); oClass:AddMethod( "ShowBruto", @Iva_ShowBruto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER showBase( nPosition); oClass:AddMethod( "showBase", @Iva_showBase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ShowPorcentajes( nPosition); oClass:AddMethod( "ShowPorcentajes", @Iva_ShowPorcentajes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ShowImportes( nPosition); oClass:AddMethod( "ShowImportes", @Iva_ShowImportes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ShowTotal( nPosition); oClass:AddMethod( "ShowTotal", @Iva_ShowTotal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValueMaster(); oClass:AddInline( "getValueMaster", {|Self, cField | ( ( Self ) ), ( hGet( ::oSender:hDictionaryMaster, cField ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS Iva ;



static FUNCTION Iva_New( oSender ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   ::oSender      := oSender

   ::aIva         := {}

Return ( Self )



static FUNCTION Iva_Reset( ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   ::aIva         := {}

Return ( Self )



static FUNCTION Iva_add( oDocumentLine ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   local nPosition

   nPosition      := aScan( ::aIva, {|hIva| oDocumentLine:getPercentageTax() == ::getTipoIva( hIva ) .AND. oDocumentLine:getRecargoEquivalencia() == ::getTipoRecargo( hIva ) } )

   if nPosition <> 0
      ::sumIva( nPosition, oDocumentLine )
   else
      ::addIva( oDocumentLine )
   end

Return ( Self )



static FUNCTION Iva_addIva( oDocumentLine ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local hHash




   hHash    := {  "Bruto"              => oDocumentLine:getBruto(), "Base"               => oDocumentLine:getBase(), "PorcentajeImpuesto" => oDocumentLine:getPercentageTax(), "PorcentajeRecargo"  => oDocumentLine:getRecargoEquivalencia() }

   aadd( ::aIva, hHash )

Return ( Self )



static FUNCTION Iva_sumIva( nPosition, oDocumentLine ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   ::sumBruto( nPosition, oDocumentLine:getBruto() )
   ::sumBase( nPosition, oDocumentLine:getBase() )

Return ( Self )





static FUNCTION Iva_ImporteImpuesto( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local ImporteImpuesto      := 0

   if ::getPercentageTax( nPosition ) <> 0
      if ::getValueMaster( "ImpuestosIncluidos" )
         ImporteImpuesto      := ::getBaseArray( nPosition ) - ( ::getBaseArray( nPosition ) / ( 1 + ::getPercentageTax( nPosition ) / 100 ) )
      else
         ImporteImpuesto      := ( ::getBaseArray( nPosition ) * ::getPercentageTax( nPosition ) ) / 100
      endif

   endif

Return ( ImporteImpuesto )



static FUNCTION Iva_ImporteRecargo( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local ImporteRecargo       := 0

   if !( ::getValueMaster( "RecargoEquivalencia" ) )
      Return ImporteRecargo
   endif

   if ::getPorcentajeRecargo( nPosition ) <> 0
      if ::getValueMaster( "ImpuestosIncluidos" )
         ImporteRecargo       := ::getBaseArray( nPosition ) - ( ::getBaseArray( nPosition ) / ( 1 + ::getPorcentajeRecargo( nPosition ) / 100 ) )
      else
         ImporteRecargo       := ( ::getBaseArray( nPosition ) * ::getPorcentajeRecargo( nPosition ) ) / 100
      endif
   endif

Return ( ImporteRecargo )



static FUNCTION Iva_Bruto( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   local Bruto     := ::getBrutoArray( nPosition )

   if ::getValueMaster( "ImpuestosIncluidos" )
      Bruto        -= ::ImporteImpuesto( nPosition )
      if ( ::getValueMaster( "RecargoEquivalencia" ) )
         Bruto     -= ::ImporteRecargo( nPosition )
      endif
   endif

Return ( Bruto )



static FUNCTION Iva_Base( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   local Base     := ::getBaseArray( nPosition )

   if ::getValueMaster( "ImpuestosIncluidos" )
      Base        -= ::ImporteImpuesto( nPosition )
      if ( ::getValueMaster( "RecargoEquivalencia" ) )
         Base     -= ::ImporteRecargo( nPosition )
      endif
   endif

Return ( Base )



static FUNCTION Iva_CalculaTotal( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   local CalculaTotal

   CalculaTotal   := ::Base( nPosition )
   CalculaTotal   += ::ImporteImpuesto( nPosition )
   CalculaTotal   += ::ImporteRecargo( nPosition )

Return( CalculaTotal )



static FUNCTION Iva_ShowBruto( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local Bruto  := ""

   if !IsNil( ::Bruto( nPosition ) )
      Bruto     := Trans( ::Bruto( nPosition ), cPorDiv() )
   endif

Return( Bruto )



static FUNCTION Iva_showBase( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local Base  := ""

   if !IsNil( ::Base( nPosition ) )
      Base     := Trans( ::Base( nPosition ), cPorDiv() )
   endif

Return ( Base )



static FUNCTION Iva_ShowPorcentajes( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local Porcentaje  := ""

   if !IsNil( ::getPercentageTax( nPosition ) )
      Porcentaje     += Trans( ::getPercentageTax( nPosition ), "@E 999.99" )
   endif

   Porcentaje        += Chr(13)+Chr(10)

   if !( ::getValueMaster( "RecargoEquivalencia" ) )
      Return Porcentaje
   else
      if !IsNil( ::getPorcentajeRecargo( nPosition ) )
         Porcentaje  += Trans( ::getPorcentajeRecargo( nPosition ), "@E 999.99")
      endif
   endif

Return( Porcentaje )



static FUNCTION Iva_ShowImportes( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local Importe  := ""

   if !IsNil( ::ImporteImpuesto( nPosition ) )
      Importe     += Trans( ::ImporteImpuesto( nPosition ), cPorDiv() )
   endif

   Importe        += Chr(13)+Chr(10)

   if !( ::getValueMaster( "RecargoEquivalencia" ) )
      Return Importe
   else
      if !IsNil( ::ImporteRecargo( nPosition ) )
         Importe += Trans( ::ImporteRecargo( nPosition ), cPorDiv() )
      endif
   endif

Return ( Importe )



static FUNCTION Iva_ShowTotal( nPosition ) ; local Self AS CLASS Iva := QSelf() AS CLASS Iva

   Local Total := ""

   if !isNil( ::CalculaTotal( nPosition ) )
      Total    := Trans( ::CalculaTotal( nPosition ), cPorDiv() )
   endif

Return ( Total )
