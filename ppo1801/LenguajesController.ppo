#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\LenguajesController.prg"
_HB_CLASS LenguajesController ; function LenguajesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "LenguajesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @LenguajesController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @LenguajesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @LenguajesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetSelectorToGet( oGet, oSay); oClass:AddMethod( "SetSelectorToGet", @LenguajesController_SetSelectorToGet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validLenguajeFromGet( oGet, oSay); oClass:AddMethod( "validLenguajeFromGet", @LenguajesController_validLenguajeFromGet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS LenguajesController ;



static FUNCTION LenguajesController_New( oSenderController ) ; local Self AS CLASS LenguajesController := QSelf() AS CLASS LenguajesController

   ::Super:New( oSenderController )

   ::cTitle                   := "Lenguajes"

   ::cName                    := "lenguajes"



   ::hImage                   := {  "16" => "gc_user_message_16", "32" => "gc_user_message_32", "48" => "gc_user_message_48" }

   ::nLevel                   := Auth():Level( ::cName )

   ::oModel                   := SQLLenguajesModel():New( self )

   ::oBrowseView              := LenguajesBrowseView():New( self )

   ::oDialogView              := LenguajesView():New( self )

   ::oValidator               := LenguajesValidator():New( self, ::oDialogView )

   ::oRepository              := LenguajesRepository():New( self )

   ::oGetSelector             := GetSelector():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

RETURN ( Self )



static FUNCTION LenguajesController_End( ) ; local Self AS CLASS LenguajesController := QSelf() AS CLASS LenguajesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION LenguajesController_SetSelectorToGet( oGet, oSay ) ; local Self AS CLASS LenguajesController := QSelf() AS CLASS LenguajesController

   local hLenguaje    := ::ActivateSelectorView()

   if !empty( hLenguaje ) .AND. hhaskey( hLenguaje, "codigo" )
      oGet:cText( hget( hLenguaje, "codigo" ) )
   else
      oGet:cText( "" )
   end

   if !empty( hLenguaje ) .AND. hhaskey( hLenguaje, "codigo" )
      oSay:cText( hget( hLenguaje, "nombre" ) )
   else
      oSay:cText( "" )
   end

RETURN ( .T. )



static FUNCTION LenguajesController_validLenguajeFromGet( oGet, oSay ) ; local Self AS CLASS LenguajesController := QSelf() AS CLASS LenguajesController

   local uValue
   local cNombre

   if Empty( oGet )
      Return .T.
   end

   uValue            := oGet:VarGet()

   if Empty( uValue )
      Return .T.
   end

   cNombre           := ::oModel:getNombre( uValue )

   if Empty( cNombre )
      oSay:cText( "" )
      MsgStop( "Lenguaje no encontrado" )
      Return .F.
   end

   oSay:cText( cNombre )

return .T.










_HB_CLASS LenguajesBrowseView ; function LenguajesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "LenguajesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @LenguajesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @LenguajesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS LenguajesBrowseView ;



static FUNCTION LenguajesBrowseView_addColumns( ) ; local Self AS CLASS LenguajesBrowseView := QSelf() AS CLASS LenguajesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS LenguajesView ; function LenguajesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "LenguajesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @LenguajesView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @LenguajesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS LenguajesView ;



static FUNCTION LenguajesView_Activate( ) ; local Self AS CLASS LenguajesView := QSelf() AS CLASS LenguajesView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "lenguajes", "LENGUAJE",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBmpGeneral := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode()  )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBmpGeneral:end()

RETURN ( ::oDialog:nResult )








_HB_CLASS LenguajesValidator ; function LenguajesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "LenguajesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @LenguajesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @LenguajesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS LenguajesValidator ;



static FUNCTION LenguajesValidator_getValidators( ) ; local Self AS CLASS LenguajesValidator := QSelf() AS CLASS LenguajesValidator




   ::hValidators  := {     "codigo" =>    {  "required"     => "El código es un dato requerido", "unique"       => "El código introducido ya existe" } , "nombre" =>    {  "required"     => "El nombre es un datos requerido", "unique"       => "El nombre introducido ya existe" } }

RETURN ( ::hValidators )










_HB_CLASS SQLLenguajesModel ; function SQLLenguajesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLLenguajesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLLenguajesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "lenguajes", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getNombre( codigo); oClass:AddInline( "getNombre", {|Self , codigo| ( ( Self ) ), ( ::getField( "nombre", "codigo", codigo ) )}, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLLenguajesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLLenguajesModel ;



static FUNCTION SQLLenguajesModel_getColumns( ) ; local Self AS CLASS SQLLenguajesModel := QSelf() AS CLASS SQLLenguajesModel



   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "text"      => "Identificador"                           , "default"   => {|| 0 } }                                 )



   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "text"      => "Uuid"                                    , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 )"                          , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 20 )"                          , "default"   => {|| space( 20 ) } }                       )

RETURN ( ::hColumns )











_HB_CLASS LenguajesRepository ; function LenguajesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "LenguajesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @LenguajesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLLenguajesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS LenguajesRepository ;