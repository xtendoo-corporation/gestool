#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Linklist.prg"
_HB_CLASS TLinkList ; function TLinkList ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLinkList", iif( .F., { }, { @HBObject() } ), @TLinkList() ) ) ;

   _HB_MEMBER { oFirst, oLast } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFirst", "oLast"}, .F. )

   _HB_MEMBER New(); oClass:AddInline( "New", {|Self | ( ( Self ) ), Self }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Add( cPrompt, nLevel, hBmpOpen, hBmpClose, lOpened); oClass:AddMethod( "Add", @TLinkList_Add(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER OpenAll(); oClass:AddMethod( "OpenAll", @TLinkList_OpenAll(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetLast(); oClass:AddMethod( "GetLast", @TLinkList_GetLast(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nCount(); oClass:AddMethod( "nCount", @TLinkList_nCount(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Draw( cPrevDraw); oClass:AddMethod( "Draw", @TLinkList_Draw(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @TLinkList_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Eval(); oClass:AddMethod( "Eval", @TLinkList__Eval(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLinkList ;



static FUNCTION TLinkList_Add( cPrompt, nLevel, hBmpOpen, hBmpClose, lOpened ) ; local Self AS CLASS TLinkList := QSelf() AS CLASS TLinkList

   local oItem

   If( lOpened == nil, lOpened := .F., ) ; If( nLevel == nil, nLevel := If( ::oFirst <> nil, ::oFirst:nLevel,), );

   oItem := TTreeItem():New( cPrompt, nLevel, hBmpOpen, hBmpClose )

   if ::oFirst == nil
      ::oFirst = oItem
      ::oLast  = oItem
   else
      ::oLast:SetNext( oItem )
      oItem:oPrev   = ::oLast
      ::oLast       = oItem
   endif

   oItem:lOpened = lOpened

return oItem



static FUNCTION TLinkList_OpenAll( ) ; local Self AS CLASS TLinkList := QSelf() AS CLASS TLinkList

   local oItem := ::oFirst

   while oItem <> nil
      oItem:Open()
      oItem = oItem:GetNext()
   end

return nil



static FUNCTION TLinkList_GetLast( ) ; local Self AS CLASS TLinkList := QSelf() AS CLASS TLinkList

   if ::oLast:lOpened
      return ::oLast:oTree:GetLast()
   else
      return ::oLast
   endif

return nil



static FUNCTION TLinkList_Draw( cPrevDraw ) ; local Self AS CLASS TLinkList := QSelf() AS CLASS TLinkList

   local oItem := ::oFirst

   while oItem <> nil
      oItem:Draw( cPrevDraw )


      oItem = If( oItem:oNext <> nil .AND.  oItem:oNext:nLevel == oItem:nLevel, oItem:oNext, nil )
   end

return nil



static FUNCTION TLinkList_nCount( ) ; local Self AS CLASS TLinkList := QSelf() AS CLASS TLinkList

   local oItem  := ::oFirst
   local nItems := 0

   while oItem <> nil
      nItems++
      oItem = oItem:GetNext()
   end

return nItems



static FUNCTION TLinkList__Eval( bAction ) ; local Self AS CLASS TLinkList := QSelf() AS CLASS TLinkList

   local oItem := ::oFirst

   while oItem <> nil
      Eval( bAction, oItem )
      oItem = If( oItem:oTree <> nil, oItem:oTree:oFirst, oItem:oNext )
   end

return nil



static FUNCTION TLinkList_End( ) ; local Self AS CLASS TLinkList := QSelf() AS CLASS TLinkList

   local oItem := ::oFirst
   local aBmps, n

   while oItem <> nil
      oItem:End()
      oItem = If( oItem:oTree <> nil, oItem:oTree:oFirst, oItem:oNext )
   end

   aBmps = GetTreeBmps()
   if ValType( aBmps ) == "A"
      for n = 1 to Len( aBmps )
         DeleteObject( aBmps[ n ] )
      next
   endif

return nil
