#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\ListRem.prg"
_HB_CLASS ListRem ; function ListRem ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ListRem", iif( .T., { @TInfGen() }, { @HBObject() } ), @ListRem() ) ) ;

   _HB_MEMBER { AS OBJECT oRemCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oRemCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT cRemOrg } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cRemOrg"}, .F. )
   _HB_MEMBER { AS OBJECT cRemDes } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cRemDes"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfCli } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCli"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfDiv } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfDiv"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfCta } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCta"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @ListRem_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @ListRem_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @ListRem_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @ListRem_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @ListRem_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ListRem ;



static FUNCTION ListRem_Create( ) ; local Self AS CLASS ListRem := QSelf() AS CLASS ListRem

   ::AddField( "nNumRem",   "N",  9, 0, {|| "" },        "Num. rem.",   .F., "Número de remesa",      10, .F. )
   ::AddField( "cSufRem",   "C",  2, 0, {|| "" },        "Suf. rem.",   .F., "Sufijo de remesa",       8, .F. )
   ::AddField( "cCodRem",   "C",  3, 0, {|| "" },        "Código rem.", .F., "Código cuenta remesa",  10, .F. )
   ::AddField( "cNomRem",   "C", 40, 0, {|| "" },        "Nombre rem.", .F., "Nombre cuenta remesa",   8, .F. )
   ::AddField( "cNumFac",   "C", 16, 0, {|| "" },        "Recibo",      .T., "Número recibo",         18, .F. )
   ::AddField( "dFecRem",   "D",  8, 0, {|| "" },        "Fecha",       .T., "Fecha recibo",          12, .F. )
   ::AddField( "dFecVto",   "D",  8, 0, {|| "" },        "Vencimiento", .T., "Fecha de vencimiento",  13, .F. )
   ::AddField( "cCodCli",   "C", 12, 0, {|| "" },        "Cod. cli.",   .T., "Código del cliente",    15, .F. )
   ::AddField( "cNomCli",   "C", 50, 0, {|| "" },        "Cliente",     .T., "Nombre del cliente",    35, .F. )
   ::AddField( "cCodAge",   "C", 12, 0, {|| "" },        "Cod. Age.",   .F., "Código del agente",     15, .F. )
   ::AddField( "cNomAge",   "C", 50, 0, {|| "" },        "Agente",      .F., "Nombre del agente",     35, .F. )
   ::AddField( "cCodPgo",   "C", 12, 0, {|| "" },        "Cod. Pgo.",   .F., "Código del pago",       15, .F. )
   ::AddField( "cNomPgo",   "C", 50, 0, {|| "" },        "Forma pago",  .F., "Forma de pago",         35, .F. )
   ::AddField( "cCtaRem",   "C", 24, 0, {|| "" },        "Cuenta",      .T., "Cuenta bancaria",       30, .F. )
   ::AddField( "nTotRec",   "N", 16, 2, {|| cPorDiv() }, "Total",       .T., "Total del recibo",      20, .T. )

   ::AddTmpIndex( "nNumRem", "nNumRem" )

   ::AddGroup( {|| ::oDbf:nNumRem }, {|| "Remesa : " + AllTrim( Str( ::oDbf:nNumRem ) ) + " - " + AllTrim( ::oDbf:cSufRem ) + "  Cuenta : " + AllTrim( ::oDbf:cCodRem ) + " - " + AllTrim( ::oDbf:cNomRem ) }, {|| "Total remesa..." } )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



static FUNCTION ListRem_OpenFiles( ) ; local Self AS CLASS ListRem := QSelf() AS CLASS ListRem

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oRemCliT := DbfServer( "REMCLIT.DBF", ):NewOpen( "REMCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oRemCliT:AddBag( "REMCLIT.CDX" ) ; ::oRemCliT:AddBag( ) ; ::oRemCliT:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()
   ::oFacCliP:OrdSetFocus( "nNumRem" )

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

   ::oDbfCta := DbfServer( "CTAREM.DBF", ):NewOpen( "CTAREM.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCta:AddBag( "CTAREM.CDX" ) ; ::oDbfCta:AddBag( ) ; ::oDbfCta:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION ListRem_CloseFiles( ) ; local Self AS CLASS ListRem := QSelf() AS CLASS ListRem

   if !Empty( ::oRemCliT ) .AND. ::oRemCliT:Used()
      ::oRemCliT:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end
   if !Empty( ::oDbfDiv ) .AND. ::oDbfDiv:Used()
      ::oDbfDiv:End()
   end
   if !Empty( ::oDbfCta ) .AND. ::oDbfCta:Used()
      ::oDbfCta:End()
   end

   ::oRemCliT  := nil
   ::oFacCliP  := nil
   ::oDbfCli   := nil
   ::oDbfDiv   := nil
   ::oDbfCta   := nil

RETURN ( Self )



static FUNCTION ListRem_lResource( cFld ) ; local Self AS CLASS ListRem := QSelf() AS CLASS ListRem

   local cSayRemOrg
   local cSayRemDes
   local oSayRemOrg
   local oSayRemDes
   local oRemOrg
   local oRemDes

   if !::StdResource( "INF_REM01" )
      return .F.
   end

   ::oBtnFilter:Disable()

   ::cRemOrg   := dbFirst( ::oRemCliT, 3 )
   ::cRemDes   := dbLast(  ::oRemCliT, 3 )
   cSayRemOrg  := dbFirst( ::oRemCliT, 4 )
   cSayRemDes  := dbLast(  ::oRemCliT, 4 )






   oRemOrg := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, ::cRemOrg, ::cRemOrg:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      999999999},, nil,,, )




   oSayRemOrg := TGetHlp():ReDefine( ( 110 ), { | u | If( PCount()==0, cSayRemOrg, cSayRemOrg:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






   oRemDes := TGetHlp():ReDefine( ( 120 ), { | u | If( PCount()==0, ::cRemDes, ::cRemDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      999999999},, nil,,, )




   oSayRemDes := TGetHlp():ReDefine( ( 130 ), { | u | If( PCount()==0, cSayRemDes, cSayRemDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oRemCliT:Lastrec() )

RETURN .T.






static FUNCTION ListRem_lGenerate( ) ; local Self AS CLASS ListRem := QSelf() AS CLASS ListRem

   local cBncCli  := ""

   ::oDlg:Disable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha  : " + Dtoc( Date() ) }, {|| "Remesa : " + AllTrim( Str( ::cRemOrg ) ) + " > " + AllTrim( Str( ::cRemDes ) ) } }

   ::oRemCliT:GoTop()
   ::oFacCliP:GoTop()
   while !::oRemCliT:Eof()


      if ::oRemCliT:nNumRem >= ::cRemOrg .AND. ::oRemCliT:nNumRem <= ::cRemDes  .AND. ::oFacCliP:Seek( Str( ::oRemCliT:nNumRem ) + ::oRemCliT:cSufRem )

         while Str( ::oFacCliP:nNumRem ) + ::oFacCliP:cSufRem == Str( ::oRemCliT:nNumRem ) + ::oRemCliT:cSufRem .AND. !::oFacCliP:Eof

            ::oDbf:Append()

            ::oDbf:nNumRem  := ::oRemCliT:nNumRem
            ::oDbf:cSufRem  := ::oRemCliT:cSufRem
            ::oDbf:cCodRem  := ::oRemCliT:cCodRem
            ::oDbf:cNomRem  := oRetFld( ::oRemCliT:cCodRem, ::oDbfCta )
            ::oDbf:cNumFac  := AllTrim( ::oFacCliP:cSerie ) + "/" + AllTrim( Str( ::oFacCliP:nNumFac ) ) + "/" + AllTrim( ::oFacCliP:cSufFac ) + "/" + AllTrim( Str( ::oFacCliP:nNumRec ) )
            ::oDbf:dFecRem  := ::oFacCliP:dPreCob
            ::oDbf:dFecVto  := ::oFacCliP:dFecVto
            ::oDbf:cCodCli  := ::oFacCliP:cCodCli
            ::oDbf:cNomCli  := RetClient( ::oFacCliP:cCodCli, ::oDbfCli:cAlias )
            ::oDbf:nTotRec  := nTotRecCli( ::oFacCliP:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cDivPgo )
            ::oDbf:cCodAge  := ::oFacCliP:cCodAge
            ::oDbf:cNomAge  := RetNbrAge( ::oFacCliP:cCodAge )
            ::oDbf:cCodPgo  := ::oFacCliP:cCodPgo
            ::oDbf:cNomPgo  := cNbrFPago( ::oFacCliP:cCodPgo )

            cBncCli         := ::oFacCliP:cPaisIBAN + ::oFacCliP:cCtrlIBAN + ::oFacCliP:cEntCli + ::oFacCliP:cSucCli + ::oFacCliP:cDigCli + ::oFacCliP:cCtaCli

            if Empty( cBncCli ) .OR. Len( AllTrim( cBncCli ) ) <> 24
               cBncCli      := cClientCuenta( ::oFacCliP:cCodCli )
            end

            ::oDbf:cCtaRem  := cBncCli

            ::oDbf:Save()

            ::oFacCliP:Skip()

         end

      end

      ::oRemCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oRemCliT:LastRec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
