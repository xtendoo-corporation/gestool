#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 18 ".\.\Prg\Litem.prg"
_HB_CLASS TLItem ; function TLItem ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLItem", iif( .F., { }, { @HBObject() } ), @TLItem() ) ) ;

      _HB_MEMBER { oLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLabel"}, .F. )
      _HB_MEMBER { aData, aPicture } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aData", "aPicture"}, .F. )
      _HB_MEMBER { bDataFont } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bDataFont"}, .F. )
      _HB_MEMBER { nWidth, nDataHeight, nCol, nSize, nPad, nPen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nWidth", "nDataHeight", "nCol", "nSize", "nPad", "nPen"}, .F. )
      _HB_MEMBER { lShadow, lGrid } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lShadow", "lGrid"}, .F. )


      _HB_MEMBER New( nCol, aData, nSize, aPicture, bFont, cFmt, lShadow, lGrid, oLabel) AS CLASS TLItem; oClass:AddMethod( "New", @TLItem_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER Stabilize(); oClass:AddMethod( "Stabilize", @TLItem_Stabilize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER SayData( nRow, nCol, nLine); oClass:AddMethod( "SayData", @TLItem_SayData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLItem ;




static FUNCTION TLItem_New( nCol,    aData, nSize, aPicture,    bFont, nPen, cFmt, lShadow, lGrid, oLabel ) ; local Self AS CLASS TLItem := QSelf() AS CLASS TLItem










      If( aData == nil, aData := {{|| ""} }, ) ; If( nSize == nil, nSize := 0, ); If( aPicture == nil, aPicture := {""}, ); If( nCol == nil, nCol := 0, ); If( bFont == nil, bFont := {|| 1 }, ); If( nPen == nil, nPen := 1, ); If( lShadow == nil, lShadow := .F., ); If( lGrid == nil, lGrid := .F., ); If( cFmt == nil, cFmt := iif(Valtype(Eval(aData[1]))=="N", "RIGHT", "LEFT"), );

     ::aData      = aData
     ::nSize      = nSize
      ::aPicture   = aPicture
     ::bDataFont  = bFont
     ::lShadow    = lShadow
     ::lGrid      = lGrid
     ::nPen       = nPen
      ::oLabel     = oLabel
      ::nCol       = nCol
      ::nWidth     = 0

      IF cFmt == "LEFT"
             ::nPad = 1
      ELSEIF cFmt == "RIGHT"
             ::nPad = 2
      ELSEIF cFmt == "CENTER" .OR. cFmt == "CENTERED"
             ::nPad = 3
      ELSE
             ::nPad = 1
      ENDIF

     while len(::aPicture) < len(::aData)
             Aadd(::aPicture, "" )
     ENDDO

RETURN NIL



static FUNCTION TLItem_Stabilize( ) ; local Self AS CLASS TLItem := QSelf() AS CLASS TLItem


      ::nDataHeight  := ::oLabel:oDevice:GetTextHeight("B", ::oLabel:aFont[eval(::bDataFont)])






      IF !empty(::nSize)


             ::nWidth := ::oLabel:oDevice:GetTextWidth(Replicate("B",::nSize), ::oLabel:aFont[eval(::bDataFont)])






             IF ::nWidth > ::oLabel:nLblWidth
                     ::nWidth := ::oLabel:nLblWidth
             end

             RETU NIL

      end

      ::nWidth := ::oLabel:nLblWidth

RETURN NIL



static FUNCTION TLItem_SayData( nRow, nCol, nLine ) ; local Self AS CLASS TLItem := QSelf() AS CLASS TLItem

     LOCAL nFor
     LOCAL cText
     LOCAL cLine
     LOCAL nWidth
     LOCAL nMemLine



     If( nRow == nil, nRow := 0, ) ; If( nCol == nil, nCol := 0, ); If( nLine == nil, nLine := 1, );

     msginfo( "entro en saydata" )

     IF nLine > len(::aData)
          RETU NIL
      ENDIF

      IF ::nCol <> 0
             nCol += ::nCol
      end

     cText  := Transform(eval(::aData[nLine]),::aPicture[nLine])
     nWidth := ::oLabel:oDevice:GetTextWidth(cText,::oLabel:aFont[eval(::bDataFont)])

     DO CASE
          CASE ::nPad == 2
               nCol := nCol+::nWidth-nWidth

          CASE ::nPad == 3
               nCol := nCol+Int(::nWidth/2)-Int(nWidth/2)
     ENDCASE

     ::oLabel:oDevice:Say(nRow,nCol,cText,::oLabel:aFont[eval(::bDataFont)],::nWidth,::oLabel:aClrText[eval(::bDataFont)] )

RETURN ( cText )
