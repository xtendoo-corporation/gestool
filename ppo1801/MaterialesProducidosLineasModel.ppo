#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\MaterialesProducidosLineasModel.prg"
_HB_CLASS MaterialesProducidosLineasModel ; function MaterialesProducidosLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "MaterialesProducidosLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @MaterialesProducidosLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "ProLin" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExtraWhere(); oClass:AddInline( "getExtraWhere", {|Self | ( ( Self ) ), ( "" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFechaFieldName(); oClass:AddInline( "getFechaFieldName", {|Self | ( ( Self ) ), ( "dFecOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHoraFieldName(); oClass:AddInline( "getHoraFieldName", {|Self | ( ( Self ) ), ( "cHorIni" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getArticuloFieldName(); oClass:AddInline( "getArticuloFieldName", {|Self | ( ( Self ) ), ( "cCodArt" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setAlmacenFieldName(); oClass:AddInline( "setAlmacenFieldName", {|Self | ( ( Self ) ), ( ::cAlmacenFieldName  := "cAlmOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getAlmacenFieldName(); oClass:AddInline( "getAlmacenFieldName", {|Self | ( ( Self ) ), ( "cAlmOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCajasFieldName(); oClass:AddInline( "getCajasFieldName", {|Self | ( ( Self ) ), ( "nCajOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUnidadesFieldName(); oClass:AddInline( "getUnidadesFieldName", {|Self | ( ( Self ) ), ( "nUndOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerieFieldName(); oClass:AddInline( "getSerieFieldName", {|Self | ( ( Self ) ), ( "cSerOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroFieldName(); oClass:AddInline( "getNumeroFieldName", {|Self | ( ( Self ) ), ( "nNumOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijoFieldName(); oClass:AddInline( "getSufijoFieldName", {|Self | ( ( Self ) ), ( "cSufOrd" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTipoDocumento(); oClass:AddInline( "getTipoDocumento", {|Self | ( ( Self ) ), ( "06" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "getSQLSentenceLineasAgrupadas", @MaterialesProducidosLineasModel_getSQLSentenceLineasAgrupadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "getLineasAgrupadas", @MaterialesProducidosLineasModel_getLineasAgrupadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLineasAgrupadasUltimaConsolidacion( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote, dConsolidacion); oClass:AddMethod( "getLineasAgrupadasUltimaConsolidacion", @MaterialesProducidosLineasModel_getLineasAgrupadasUltimaConsolidacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceTotalUnidadesStock( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "getSQLSentenceTotalUnidadesStock", @MaterialesProducidosLineasModel_getSQLSentenceTotalUnidadesStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER totalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "totalUnidadesStock", @MaterialesProducidosLineasModel_totalUnidadesStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceFechaCaducidad( cCodigoArticulo, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "getSQLSentenceFechaCaducidad", @MaterialesProducidosLineasModel_getSQLSentenceFechaCaducidad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCosto( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "getCosto", @MaterialesProducidosLineasModel_getCosto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "getFechaCaducidad", @MaterialesProducidosLineasModel_getFechaCaducidad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS MaterialesProducidosLineasModel ;



static FUNCTION MaterialesProducidosLineasModel_getSQLSentenceLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel










   local cSql  := "SELECT "                                                +  "cCodArt as cCodArt, "                                +  "cAlmOrd as cCodAlm, "                                +  "cCodPr1 as cCodPr1, "                                +  "cCodPr2 as cCodPr2, "                                +  "cValPr1 as cValPr1, "                                +  "cValPr2 as cValPr2, "                                +  "cLote as cLote "                                     +  "FROM " + ::getTableName() + " "                         +  "WHERE cCodArt = " + quoted( cCodigoArticulo ) + " "

   if !Empty( cCodigoAlmacen )
      cSql     +=  "AND cAlmOrd = " + quoted( cCodigoAlmacen ) + " "
   end

   cSql        +=    "GROUP BY cCodArt, cAlmOrd, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote "

Return ( cSql )



static FUNCTION MaterialesProducidosLineasModel_getLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel

   local cStm  := "ADSLineasAgrupadas"
   local cSql  := ::getSQLSentenceLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION MaterialesProducidosLineasModel_getLineasAgrupadasUltimaConsolidacion( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote, hConsolidacion ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel

   local cStm






   local cSql  := "SELECT nCanEnt "                                     +  "  FROM " + ::getTableName()                          +  "  WHERE cCodArt = " + quoted( cCodigoArticulo )      +  " AND cAlmOrd = " + quoted( cCodigoAlmacen )    +  " AND cValPr1 = " + quoted( cValorPropiedad1 )  +  " AND cValPr2 = " + quoted( cValorPropiedad2 )  +  " AND cLote = " + quoted( cLote )

   if !empty(hConsolidacion)
      cSql     +=       " AND dFecOrd >= " + quoted( hget( hConsolidacion, "fecha" ) )
      cSql     +=       " AND cHorIni >= " + quoted( hget( hConsolidacion, "hora" ) )
   end

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION MaterialesProducidosLineasModel_getSQLSentenceTotalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel



   local cSql  := "SELECT SUM( IIF( nCajOrd = 0, 1, nCajOrd ) * nUndOrd ) as [totalUnidadesStock] , " + quoted( ::getTableName() ) + " AS Document " +  "FROM " + ::getTableName() + " "                                                 +  "WHERE cCodArt = " + quoted( cCodigoArticulo ) + " "

   if !empty( dConsolidacion )
      if !empty( tConsolidacion )
         cSql  +=    "AND CAST( dFecOrd AS SQL_CHAR ) + cHorIni >= " + quoted( dateToSQLString( dConsolidacion ) + tConsolidacion ) + " "
      else
         cSql  +=    "AND CAST( dFecOrd AS SQL_CHAR ) >= " + quoted( dateToSQLString( dConsolidacion ) ) + " "
      end
   end

   cSql  +=    "AND cAlmOrd = " + quoted( cCodigoAlmacen ) + " "
   cSql  +=    "AND cCodPr1 = " + quoted( cCodigoPropiedad1 ) + " "
   cSql  +=    "AND cCodPr2 = " + quoted( cCodigoPropiedad2 ) + " "
   cSql  +=    "AND cValPr1 = " + quoted( cValorPropiedad1 ) + " "
   cSql  +=    "AND cValPr2 = " + quoted( cValorPropiedad2 ) + " "
   cSql  +=    "AND cLote = " + quoted( cLote ) + " "

RETURN ( cSql )



static FUNCTION MaterialesProducidosLineasModel_totalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel

   local cStm
   local cSql  := ::getSQLSentenceTotalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->totalUnidadesStock )
   end

RETURN ( 0 )



static FUNCTION MaterialesProducidosLineasModel_getSQLSentenceFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel












   local cSql  := "SELECT "                                             +  "cCodArt as cCodigoArticulo, "                     +  "cCodPr1 as cCodigoPrimeraPropiedad, "             +  "cCodPr2 as cCodigoSegundaPropiedad, "             +  "cValPr1 as cValorPrimeraPropiedad, "              +  "cValPr2 as cValorSegundaPropiedad, "              +  "cLote as cLote, "                                 +  "dFecOrd as dFecDoc, "                             +  "dFecCad as dFecCad "                              +  "FROM " + ::getTableName() + " "                      +  "WHERE cCodArt = " + quoted( cCodigoArticulo ) + " "  +  "AND dFecCad IS NOT NULL "

   cSql        += "AND cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " "
   cSql        += "AND cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " "
   cSql        += "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
   cSql        += "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
   cSql        += "AND cLote = " + quoted( cLote ) + " "

RETURN ( cSql )



static FUNCTION MaterialesProducidosLineasModel_getCosto( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel

   local cStm



   local cSql  := "SELECT TOP 1 "                                                +  "nImpOrd as nCosto "                                        +  "FROM " + ::getTableName() + " "                               +  "WHERE cCodArt = " + quoted( cCodigoArticulo ) + " "

   if !empty( cCodigoPrimeraPropiedad )
      cSql     += "AND cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " "
   end

   if !empty( cValorPrimeraPropiedad )
      cSql     += "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
   end

   if !empty( cCodigoSegundaPropiedad )
      cSql     += "AND cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " "
   end

   if !empty( cValorSegundaPropiedad )
      cSql     += "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
   end

   cSql        += "AND cLote = " + quoted( cLote ) + " "

   cSql        += "ORDER BY dFecOrd DESC , cHorIni DESC"

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->nCosto )
   end

RETURN ( 0 )



static FUNCTION MaterialesProducidosLineasModel_getFechaCaducidad( cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS MaterialesProducidosLineasModel := QSelf() AS CLASS MaterialesProducidosLineasModel

   local nVal  := cTod( "" )
   local cStm



   local cSql  := "SELECT TOP 1 "                                                +  "dFecCad "                                                  +  "FROM " + ::getTableName() + " "                               +  "WHERE lLote AND cCodArt = " + quoted( cCodigoArticulo ) + " "
      cSql     +=    "AND cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " "
      cSql     +=    "AND cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " "
      cSql     +=    "AND cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " "
      cSql     +=    "AND cValPr2 = " + quoted( cValorSegundaPropiedad ) + " "
      cSql     +=    "AND cLote = " + quoted( cLote ) + " "
      cSql     +=    "ORDER BY dFecOrd DESC"

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )
      nVal     := ( ( cStm )->dFecCad )
   end

RETURN ( nVal )
