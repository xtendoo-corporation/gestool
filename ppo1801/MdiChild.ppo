#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 45 ".\.\Prg\MdiChild.prg"
_HB_CLASS TMdiChild ; function TMdiChild ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TMdiChild", iif( .T., { @TWindow() }, { @HBObject() } ), @TMdiChild() ) ) ;

   _HB_MEMBER { oWndClient, oControl } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oWndClient", "oControl"}, .F. )
   _HB_MEMBER { lKeepMenu } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lKeepMenu"}, .F. )
   _HB_MEMBER { nMenuInfo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMenuInfo"}, .F. )
   _HB_MEMBER { bPostEnd } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bPostEnd"}, .F. )

   _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )




   _HB_MEMBER New( nTop, nLeft, nBottom, nRight, cTitle, nStyle, oMenu, oWnd, oIcon, lVScroll, nClrText, nClrBack, oCursor, oBrush, lPixel, lHScroll, nHelpId, cBorder, lSysMenu, lCaption, lMin, lMax, nMenuInfo) AS CLASS TMdiChild; oClass:AddMethod( "New", @TMdiChild_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Maximize(); oClass:AddInline( "Maximize", {|Self | ( ( Self ) ), ::oWndClient:ChildMaximize( Self ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER MdiActivate( lOn, hWndAct, hWndDeAct); oClass:AddMethod( "MdiActivate", @TMdiChild_MdiActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Restore(); oClass:AddInline( "Restore", {|Self | ( ( Self ) ), ::oWndClient:ChildRestore( Self ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER Activate( cShow, bLClicked, bRClicked, bMoved, bResized, bPainted, bKeyDown, bInit, bUp, bDown, bPgUp, bPgDn, bLeft, bRight, bPgLeft, bPgRight, bValid); oClass:AddMethod( "Activate", @TMdiChild_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TMdiChild_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Center(); oClass:AddInline( "Center", {|Self | ( ( Self ) ), WndCenter( ::hWnd, ::oWndClient:hWnd ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Copy(); oClass:AddInline( "Copy", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:Copy(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Cut(); oClass:AddInline( "Cut", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:Cut(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER Delete(); oClass:AddInline( "Delete", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:Delete(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER Paste(); oClass:AddInline( "Paste", {|Self, cText | ( ( Self ) ), If( ::oControl <> nil, ::oControl:Paste( cText ), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER Find(); oClass:AddInline( "Find", {|Self, cText | ( ( Self ) ), If( ::oControl <> nil, ::oControl:Find( cText ), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER FindNext(); oClass:AddInline( "FindNext", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:FindNext(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Print( oTarget, nRow, nCol, nScale); oClass:AddMethod( "Print", @TMdiChild_Print(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER GotFocus(); oClass:AddInline( "GotFocus", {|Self | ( ( Self ) ), ::Super:GotFocus(), ::oWnd:oWndActive := Self }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER HandleEvent( nMsg, nWParam, nLParam); oClass:AddMethod( "HandleEvent", @TMdiChild_HandleEvent(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Next(); oClass:AddInline( "Next", {|Self | ( ( Self ) ), ::oWndClient:ChildNext( Self ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Prev(); oClass:AddInline( "Prev", {|Self | ( ( Self ) ), ::oWndClient:ChildNext( Self, .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER KeyDown( nKey, nFlags); oClass:AddMethod( "KeyDown", @TMdiChild_KeyDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER KeyChar( nKey, nFlags); oClass:AddMethod( "KeyChar", @TMdiChild_KeyChar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER Properties(); oClass:AddInline( "Properties", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:Properties(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER Replace(); oClass:AddInline( "Replace", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:Replace(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER SelectAll(); oClass:AddInline( "SelectAll", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:SelectAll(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER SetControl(); oClass:AddInline( "SetControl", {|Self, oCtrl | ( ( Self ) ), ::oClient := ::oControl := oCtrl, ::ReSize() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER SetMenu(); oClass:AddInline( "SetMenu", {|Self, oMenu, nMenuInfo | ( ( Self ) ), ::oMenu := oMenu, ::oWnd:SetMenu( oMenu, ::nMenuInfo := nMenuInfo ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetFocus(); oClass:AddInline( "SetFocus", {|Self | ( ( Self ) ), ::oWnd:oWndClient:ChildActivate( Self ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER ReDo(); oClass:AddInline( "ReDo", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:ReDo(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER UnDo(); oClass:AddInline( "UnDo", {|Self | ( ( Self ) ), If( ::oControl <> nil, ::oControl:UnDo(), ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER IsZoomed(); oClass:AddInline( "IsZoomed", {|Self | ( ( Self ) ), IsZoomed( ::hWnd ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER IsIconic(); oClass:AddInline( "IsIconic", {|Self | ( ( Self ) ), IsIconic( ::hWnd ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER SetSize(); oClass:AddInline( "SetSize", {|Self, nWidth, nHeight | ( ( Self ) ), ( ::Hide(), ::Super:SetSize( nWidth, nHeight, .T. ), ::Show() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TMdiChild ;






static FUNCTION TMdiChild_New( nTop, nLeft, nBottom, nRight, cTitle, nStyle, oMenu, oWnd, oIcon, lVScroll, nClrFore, nClrBack, oCursor, oBrush, lPixel, lHScroll, nHelpId, cBorder, lSysMenu, lCaption, lMin, lMax, nMenuInfo, lUnicode ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild

   local lMaximize   := .F.









   If( cTitle == nil, cTitle := "MDI Child " + AllTrim( Str( Len( oWnd:oWndClient:aWnd ) + 1 ) ), ) ; If( lVScroll == nil, lVScroll := .F., ); If( lHScroll == nil, lHScroll := .F., ); If( oWnd == nil, oWnd := GetWndFrame(), ); If( nClrFore == nil, nClrFore := oWnd:oWndClient:nClrText, ); If( nClrBack == nil, nClrBack := oWnd:oWndClient:nClrPane, ); If( nStyle == nil, nStyle := 0, ); If( cBorder == nil, cBorder := "SINGLE", ); If( lSysMenu == nil, lSysMenu := .T., ); If( lCaption == nil, lCaption := .T., ); If( lMin == nil, lMin := .T., ); If( lMax == nil, lMax := .T., ); If( lPixel == nil, lPixel := .F., ); If( lUnicode == nil, lUnicode := FW_SetUnicode(), );

   ::lUnicode := lUnicode

   if oWnd:lChildAutoSize .AND.  If( Empty( oWnd:oWndClient:aWnd ), IsZoomed( oWnd:hWnd ), IsZoomed( oWnd:oWndClient:GetActive():hWnd ) )
      lMaximize   := .T.
   endif

   if nStyle == 0









      nStyle = nOr( 33554432, 268435456,  If( cBorder == "NONE",   0, 0 ), If( cBorder == "SINGLE", 262144, 0 ), If( lCaption, 12582912, 0 ), If( lSysMenu .AND. lCaption, 524288, 0 ), If( lMin .AND. lCaption, 131072, 0 ), If( lMax .AND. lCaption, 65536, 0 ), If( lVScroll, 2097152, 0 ), If( lHScroll, 1048576, 0 ), If( lMaximize, 16777216, 0 ) )
   endif

   ::nTop       = If( nTop    <> nil, nTop * If( ! lPixel, 16, 1 ), 32768 )
   ::nLeft      = If( nLeft   <> nil, nLeft * If( ! lPixel,  8, 1 ), 32768 )
   ::nBottom    = If( nBottom <> nil, nBottom * If( ! lPixel, 16, 1 ), 32768 )
   ::nRight     = If( nRight  <> nil, nRight  * If( ! lPixel,  8, 1 ), 32768 )
   ::oWndClient = oWnd:oWndClient
   ::oWnd       = oWnd
   ::nStyle     = nStyle
   ::oIcon      = oIcon
   ::lVisible   = .T.
   ::aControls  = {}
   ::nHelpId    = nHelpId
   ::cCaption   = cTitle
   ::lKeepMenu  = .F.
   ::nMenuInfo  = nMenuInfo

   if ValType( oIcon ) == "C"
      if File( oIcon )
         oIcon := TIcon():New( ,,, oIcon, )
      else
         oIcon := TIcon():New( ,, oIcon,, )
      endif
      ::oIcon = oIcon
   endif

   ::oCursor    = oCursor

   ::SetColor( nClrFore, nClrBack, oBrush )


      If( ::lRegistered == nil, ::lRegistered := .F., ) ;


   if ! ::lRegistered


      ::lRegistered = RegisterClass( "TMDICHILD", nOR( 1, 2, 8 ), 0, 0, 0, 0, 0, "", GetMDIChlProc() )
   endif


   ::hWnd = CreateMdiWindow( "TMDICHILD", cTitle, ::nStyle, ::nTop, ::nLeft, ::nBottom, ::nRight, ::oWndClient:hWnd, GetInstance() )

   ::Link()

   if oMenu <> nil
      oMenu:lMenuBar := .T.
      ::SetMenu( oMenu, nMenuInfo )
   endif

   if lVScroll
      ::oVScroll := TScrollBar():WinNew(,,, (!.F.) .OR. .T., Self,,,,,,,,, .F.,, )
   endif
   if lHScroll
      ::oHScroll := TScrollBar():WinNew(,,, (!.T.), Self,,,,,,,,, .F.,, )
   endif

   ::GetFont()







   ::oWndClient:Add( Self )

   SetWndDefault( Self )
   ::oWnd:oWndActive = Self

   if oIcon <> nil
      ::SendMsg( 128, 0, oIcon:hIcon )
   endif

   ::SendMsg( 134, 1 )

return Self





static FUNCTION TMdiChild_Activate( cShow, bLClicked, bRClicked, bMoved, bResized, bPainted, bKeyDown, bInit, bUp, bDown, bPgUp, bPgDn, bLeft, bRight, bPgLeft, bPgRight, bValid ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild

   if cShow == nil .AND. ::oWnd:lChildAutoSize .AND. lAnd( ::nStyle, 16777216 )
      cShow    := "MAXIMIZED"
   endif

   ::oWndClient:ChildActivate( Self )



   ::Super:Activate( cShow, bLClicked, bRClicked, bMoved, bResized, bPainted, bKeyDown, bInit, bUp, bDown, bPgUp, bPgDn, bLeft, bRight, bPgLeft, bPgRight, bValid )

   ::lVisible := .T.

   If ::oControl <> nil
      ::oControl:SetFocus()
   Endif

return nil



static FUNCTION TMdiChild_End( ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild

   local lEnd  := .F.

   if ::bValid == nil .OR. Eval( ::bValid )
      if ::oMenu <> nil .AND. ! ::lKeepMenu
         ::oMenu:End()
      endif
      ::oWndClient:ChildClose( Self )
      if ValType( ::bPostEnd ) == "B"
         Eval( ::bPostEnd )
      endif
      lEnd     := .T.
   endif

return lEnd



static FUNCTION TMdiChild_KeyDown( nKey, nFlags ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild




   if nKey == 115 .AND. GetKeyState( 17 )
      ::SendMsg( 274, 61536 )
      return 0
   endif

   if nKey == 117 .AND. GetKeyState( 17 )
      ::SendMsg( 274, 61504 )
      return 0
   endif

return ::Super:KeyDown( nKey, nFlags )



static FUNCTION TMdiChild_KeyChar( nKey, nFlags ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild

   if nKey == 27
      ::End()
      return 0
   endif

return ::Super:KeyChar( nKey, nFlags )



static FUNCTION TMdiChild_HandleEvent( nMsg, nWParam, nLParam ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild







      if nMsg == 546
         return ::MdiActivate( ::hWnd == nLParam, nLParam, nWParam )
      endif


return ::Super:HandleEvent( nMsg, nWParam, nLParam )



static FUNCTION TMdiChild_MdiActivate( lOn, hWndAct, hWndDeAct ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild

   if lOn
      if ::oMenu <> nil
         ::oWnd:SetMenu( ::oMenu, ::nMenuInfo )
      endif
   else
      if ::oMenu <> nil
         ::oWnd:SetMenu( ::oWnd:oMenuStart )
      endif
   endif

return nil



static FUNCTION TMdiChild_Print( oTarget, nRow, nCol, nScale ) ; local Self AS CLASS TMdiChild := QSelf() AS CLASS TMdiChild

   if ::bPrint <> nil
      Eval( ::bPrint, Self )
      return nil
   endif

   if ::oControl <> nil
      ::oControl:Print( oTarget, nRow, nCol, nScale )
   else
      ::Super:Print( oTarget, nRow, nCol, nScale )
   endif

return nil
