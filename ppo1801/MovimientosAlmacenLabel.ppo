#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\Prg\Reports\MovimientosAlmacenLabel.prg"
_HB_CLASS MovimientosAlmacenLabelReport ; function MovimientosAlmacenLabelReport ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "MovimientosAlmacenLabelReport", iif( .T., { @SQLBaseReport() }, { @HBObject() } ), @MovimientosAlmacenLabelReport() ) ) ;

   _HB_MEMBER { oMemList } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMemList"}, .F. )

   _HB_MEMBER { nRowsToSkip } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRowsToSkip"}, .F. )

   _HB_MEMBER { nLabelsToPrint } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLabelsToPrint"}, .F. )

   _HB_MEMBER { nLabelsPrinted } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLabelsPrinted"}, .F. )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @MovimientosAlmacenLabelReport_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setRowSet(); oClass:AddInline( "setRowSet", {|Self, oRowSet | ( ( Self ) ), ( ::oMemList := oRowSet ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setUserDataSet(); oClass:AddMethod( "setUserDataSet", @MovimientosAlmacenLabelReport_setUserDataSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER skipper(); oClass:AddMethod( "skipper", @MovimientosAlmacenLabelReport_skipper(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER goTop(); oClass:AddMethod( "goTop", @MovimientosAlmacenLabelReport_goTop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER fieldGet( cField); oClass:AddMethod( "fieldGet", @MovimientosAlmacenLabelReport_fieldGet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER calculateRowsToSkip(); oClass:AddMethod( "calculateRowsToSkip", @MovimientosAlmacenLabelReport_calculateRowsToSkip(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER resetLabelsToPrint(); oClass:AddInline( "resetLabelsToPrint", {|Self | ( ( Self ) ), ( ::nLabelsPrinted := 1, ::nLabelsToPrint := ::oMemList:fieldGet( "total_unidades" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS MovimientosAlmacenLabelReport ;



static FUNCTION MovimientosAlmacenLabelReport_New( oController ) ; local Self AS CLASS MovimientosAlmacenLabelReport := QSelf() AS CLASS MovimientosAlmacenLabelReport

   ::Super:New( oController )

   ::oEvents:set( "loadedFromString", {|| ::calculateRowsToSkip() } )

RETURN ( Self )



static FUNCTION MovimientosAlmacenLabelReport_setUserDataSet( ) ; local Self AS CLASS MovimientosAlmacenLabelReport := QSelf() AS CLASS MovimientosAlmacenLabelReport

   ::oFastReport:ClearDataSets()







   ::oFastReport:setUserDataSet( "Lineas de movimientos de almacén", MovimientosAlmacenLineasRepository():getSerializedColumnsSentenceToLabels(), {|| ::goTop() }, {|| ::skipper() }, {|| ::oMemList:skip(-1) }, {|| ::oMemList:eof() }, {|cField| ::fieldGet( cField ) } )

RETURN NIL



static FUNCTION MovimientosAlmacenLabelReport_skipper( ) ; local Self AS CLASS MovimientosAlmacenLabelReport := QSelf() AS CLASS MovimientosAlmacenLabelReport

   if ::nRowsToSkip > 0

      ::nRowsToSkip--

      RETURN ( 0 )

   end

   ::nLabelsPrinted++

   if ::nLabelsPrinted > ::nLabelsToPrint

      ::oMemList:Skip( 1 )

      ::resetLabelsToPrint()

   end

RETURN ( 0 )



static FUNCTION MovimientosAlmacenLabelReport_goTop( ) ; local Self AS CLASS MovimientosAlmacenLabelReport := QSelf() AS CLASS MovimientosAlmacenLabelReport

   ::resetLabelsToPrint()

RETURN ( ::oMemList:goTop() )



static FUNCTION MovimientosAlmacenLabelReport_fieldGet( cField ) ; local Self AS CLASS MovimientosAlmacenLabelReport := QSelf() AS CLASS MovimientosAlmacenLabelReport

   if ::nRowsToSkip > 0
      RETURN ( "" )
   end

RETURN ( ::oMemList:fieldGet( cField ) )



static FUNCTION MovimientosAlmacenLabelReport_calculateRowsToSkip( ) ; local Self AS CLASS MovimientosAlmacenLabelReport := QSelf() AS CLASS MovimientosAlmacenLabelReport

   local nHeight        := ::oFastReport:GetProperty( "MasterData",  "Height" )
   local nColumns       := ::oFastReport:GetProperty( "MainPage",    "Columns" )
   local nPaperHeight   := ::oFastReport:GetProperty( "MainPage",    "PaperHeight" )

   ::nRowsToSkip        := 0

   if !empty( nPaperHeight ) .AND. !empty( nHeight ) .AND. !empty( nColumns )

      ::nRowsToSkip     := ( ::oController:getColumnaInicio() - 1 ) * int( nPaperHeight / nHeight * 3.77953 )
      ::nRowsToSkip     += ( ::oController:getFilaInicio() - 1 )

   end

RETURN NIL
