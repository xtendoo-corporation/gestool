#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Validators\MovimientosAlmacenLineasValidator.prg"
_HB_CLASS MovimientosAlmacenLineasValidator ; function MovimientosAlmacenLineasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "MovimientosAlmacenLineasValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @MovimientosAlmacenLineasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @MovimientosAlmacenLineasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isCodeGS128( value); oClass:AddMethod( "isCodeGS128", @MovimientosAlmacenLineasValidator_isCodeGS128(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER existArticulo( value); oClass:AddMethod( "existArticulo", @MovimientosAlmacenLineasValidator_existArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existPropiedad( value, propiedad); oClass:AddMethod( "existPropiedad", @MovimientosAlmacenLineasValidator_existPropiedad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER existOrEmptyPrimeraPropiedad(); oClass:AddInline( "existOrEmptyPrimeraPropiedad", {|Self, value | ( ( Self ) ), ( ::existPropiedad( value, "codigo_primera_propiedad" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER existOrEmptySegundaPropiedad(); oClass:AddInline( "existOrEmptySegundaPropiedad", {|Self, value | ( ( Self ) ), ( ::existPropiedad( value, "codigo_segunda_propiedad" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS MovimientosAlmacenLineasValidator ;



static FUNCTION MovimientosAlmacenLineasValidator_getValidators( ) ; local Self AS CLASS MovimientosAlmacenLineasValidator := QSelf() AS CLASS MovimientosAlmacenLineasValidator






   ::hValidators  := {  "codigo_articulo"          => {  "isCodeGS128"           => "", "required"              => "El artículo es un dato requerido", "existArticulo"         => "El artículo {value}, no existe" }, "nombre_articulo"          => {  "required"              => "El nombre del artículo es un dato requerido" }, "valor_primera_propiedad"  => {  "existOrEmptyPrimeraPropiedad" => "La primera propiedad no existe" }, "valor_segunda_propiedad"  => {  "existOrEmptySegundaPropiedad" => "La segunda propiedad no existe" } }

RETURN ( ::hValidators )



static FUNCTION MovimientosAlmacenLineasValidator_isCodeGS128( value ) ; local Self AS CLASS MovimientosAlmacenLineasValidator := QSelf() AS CLASS MovimientosAlmacenLineasValidator

   local hCodeGS128  := ReadCodeGS128( value )

   if empty( hCodeGS128 )
      RETURN ( .T. )
   end

   if hhaskey( hCodeGS128, "01" )
      ::setValue( hCodeGS128[ "01" ][ "Codigo" ] )
      ::oController:setModelBufferPadr( "codigo_articulo", hCodeGS128[ "01" ][ "Codigo" ] )
      ::oController:oDialogView:oGetCodigoArticulo:Refresh()
   end

   if hhaskey( hCodeGS128, "10" )
      ::oController:setModelBufferPadr( "lote", hCodeGS128[ "10" ][ "Codigo" ] )
      ::oController:oDialogView:oGetLote:Refresh()
   end

   if hhaskey( hCodeGS128, "15" )
      ::oController:setModelBuffer( "fecha_caducidad", hCodeGS128[ "15" ][ "Codigo" ] )
      ::oController:oDialogView:oGetCaducidad:Refresh()
   end

RETURN ( .T. )



static FUNCTION MovimientosAlmacenLineasValidator_existPropiedad( value, propiedad ) ; local Self AS CLASS MovimientosAlmacenLineasValidator := QSelf() AS CLASS MovimientosAlmacenLineasValidator

   if empty( value )
      RETURN ( .T. )
   end

   if empty( ::oController )
      RETURN ( .T. )
   end

   if empty( ::oController:getModelBuffer( propiedad ) )
      RETURN ( .T. )
   end

RETURN ( PropiedadesLineasModel():exist( ::oController:getModelBuffer( propiedad ), value ) )



static FUNCTION MovimientosAlmacenLineasValidator_existArticulo( value ) ; local Self AS CLASS MovimientosAlmacenLineasValidator := QSelf() AS CLASS MovimientosAlmacenLineasValidator

   local cId

   if empty( value )
      RETURN ( .T. )
   end

   if ArticulosModel():exist( value )
      RETURN ( .T. )
   end

   cId                     := ArticulosCodigosBarraModel():getCodigo( value )

   if !empty( cId )
      ::oController:setModelBufferPadr( "codigo_articulo", cId )
      ::oController:oDialogView:oGetCodigoArticulo:Refresh()
      RETURN ( .T. )
   end

RETURN ( .F. )
