#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\MovimientosAlmacenModel.prg"
_HB_CLASS MovimientosAlmacenModel ; function MovimientosAlmacenModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "MovimientosAlmacenModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @MovimientosAlmacenModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "RemMovT" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InsertFromHashSql(); oClass:AddMethod( "InsertFromHashSql", @MovimientosAlmacenModel_InsertFromHashSql(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lExisteUuid( uuid); oClass:AddMethod( "lExisteUuid", @MovimientosAlmacenModel_lExisteUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS MovimientosAlmacenModel ;



static FUNCTION MovimientosAlmacenModel_InsertFromHashSql( hHash ) ; local Self AS CLASS MovimientosAlmacenModel := QSelf() AS CLASS MovimientosAlmacenModel

    local cStm         := "InsertFromHashSql"
    local cSql         := ""

    if !Empty( hHash ) .AND. !::lExisteUuid( hGet( hHash, "uuid" ) )

       cSql         := "INSERT INTO " + ::getTableName()
       cSql         += " ( lSelDoc, nNumRem, cSufRem, nTipMov, cCodUsr, cCodDlg, dFecRem, cTimRem, cAlmOrg, cAlmDes, cCodDiv, nVdvDiv, cComMov, cGuid ) VALUES "
       cSql         += " ( .t., " + allTrim( hGet( hHash, "numero" ) )
       cSql         += ", " + quoted( RetSufEmp() )
       cSql         += ", " + AllTrim( Str( hGet( hHash, "tipo_movimiento" ) ) )
       cSql         += ", " + quoted( Auth():Codigo() )
       cSql         += ", " + quoted( RetSufEmp() )
       cSql         += ", " + quoted( dToc( hb_ttod( hGet( hHash, "fecha_hora" ) ) ) )
       cSql         += ", " + quoted( StrTran( substr( hb_tstostr( hGet( hHash, "fecha_hora" ) ), 12, 8 ), ":", "" ) )
       cSql         += ", " + quoted( hGet( hHash, "almacen_origen" ) )
       cSql         += ", " + quoted( hGet( hHash, "almacen_destino" ) )
       cSql         += ", " + quoted( hGet( hHash, "divisa" ) )
       cSql         += ", " + AllTrim( Str( hGet( hHash, "divisa_cambio" ) ) )
       cSql         += ", " + quoted( Padr( hGet( hHash, "comentarios" ), 100 ) )
       cSql         += ", " + quoted( hGet( hHash, "uuid" ) ) + " )"

       ::ExecuteSqlStatement( cSql, @cStm )

    end

Return ( nil )



static FUNCTION MovimientosAlmacenModel_lExisteUuid( uuid ) ; local Self AS CLASS MovimientosAlmacenModel := QSelf() AS CLASS MovimientosAlmacenModel

    local cStm         := "lExisteUuid"
    local cSql         := ""

    cSql     := "SELECT * FROM " + ::getTableName() + " WHERE cGuid = " + quoted( uuid )

       if ::ExecuteSqlStatement( cSql, @cStm )

          if ( cStm )->( RecCount() ) > 0
             Return ( .T. )
          end

       end

Return ( .F. )
