#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\Prg\Reports\MovimientosAlmacenReport.prg"
_HB_CLASS MovimientosAlmacenReport ; function MovimientosAlmacenReport ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "MovimientosAlmacenReport", iif( .T., { @SQLBaseReport() }, { @HBObject() } ), @MovimientosAlmacenReport() ) ) ;

   _HB_MEMBER { oMovimientosAlmacenRowSet } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMovimientosAlmacenRowSet"}, .F. )

   _HB_MEMBER { oLineasMovimientosAlmacenRowSet } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLineasMovimientosAlmacenRowSet"}, .F. )

   _HB_MEMBER buildRowSet(); oClass:AddMethod( "buildRowSet", @MovimientosAlmacenReport_buildRowSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER freeRowSet(); oClass:AddMethod( "freeRowSet", @MovimientosAlmacenReport_freeRowSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setUserDataSet(); oClass:AddMethod( "setUserDataSet", @MovimientosAlmacenReport_setUserDataSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Synchronize(); oClass:AddMethod( "Synchronize", @MovimientosAlmacenReport_Synchronize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS MovimientosAlmacenReport ;



static FUNCTION MovimientosAlmacenReport_buildRowSet( uIds ) ; local Self AS CLASS MovimientosAlmacenReport := QSelf() AS CLASS MovimientosAlmacenReport

   local oMovimientosAlmacenSelect
   local oLineasMovimientosAlmacenSelect

   If( uIds == nil, uIds := ::getIds(), ) ;



   ::oMovimientosAlmacenRowSet         := SQLRowSet() :New() :Build( MovimientosAlmacenRepository():getSqlSentenceByIdOrLast( uIds ) )



   ::oLineasMovimientosAlmacenRowSet   := SQLRowSet() :New() :Build( MovimientosAlmacenLineasRepository():getSqlSentenceWhereParentUuid( ::oMovimientosAlmacenRowSet:fieldget( "uuid" ) ) )

RETURN NIL



static FUNCTION MovimientosAlmacenReport_freeRowSet( ) ; local Self AS CLASS MovimientosAlmacenReport := QSelf() AS CLASS MovimientosAlmacenReport

   ::oMovimientosAlmacenRowSet:free()

   ::oLineasMovimientosAlmacenRowSet:free()

RETURN NIL



static FUNCTION MovimientosAlmacenReport_setUserDataSet( ) ; local Self AS CLASS MovimientosAlmacenReport := QSelf() AS CLASS MovimientosAlmacenReport

   ::oFastReport:ClearDataSets()







   ::oFastReport:setUserDataSet(    "Movimientos de almacén", SQLMovimientosAlmacenModel():getSerializeColumns(), {|| ::oMovimientosAlmacenRowSet:gotop() }, {|| ::oMovimientosAlmacenRowSet:skip(1) }, {|| ::oMovimientosAlmacenRowSet:skip(-1) }, {|| ::oMovimientosAlmacenRowSet:eof() }, {|cField| ::oMovimientosAlmacenRowSet:fieldGet( cField ) } )







   ::oFastReport:setUserDataSet(   "Lineas de movimientos de almacén", SQLMovimientosAlmacenLineasModel():getSerializeColumns(), {|| ::oLineasMovimientosAlmacenRowSet:gotop() }, {|| ::oLineasMovimientosAlmacenRowSet:skip(1) }, {|| ::oLineasMovimientosAlmacenRowSet:skip(-1) }, {|| ::oLineasMovimientosAlmacenRowSet:eof() }, {|cField| ::oLineasMovimientosAlmacenRowSet:fieldGet( cField ) } )



   ::oFastReport:SetMasterDetail(   "Movimientos de almacén", "Lineas de movimientos de almacén", {|| ::synchronize() } )

   ::oFastReport:SetResyncPair(    "Movimientos de almacén", "Lineas de movimientos de almacén" )

RETURN NIL



static FUNCTION MovimientosAlmacenReport_Synchronize( ) ; local Self AS CLASS MovimientosAlmacenReport := QSelf() AS CLASS MovimientosAlmacenReport

   msgalert( ::oMovimientosAlmacenRowSet:fieldget( "uuid" ), "uuid" )

RETURN NIL
