#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Repositories\MovimientosAlmacenRepository.prg"
_HB_CLASS MovimientosAlmacenRepository ; function MovimientosAlmacenRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "MovimientosAlmacenRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @MovimientosAlmacenRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLMovimientosAlmacenModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceByIdOrLast( id); oClass:AddMethod( "getSQLSentenceByIdOrLast", @MovimientosAlmacenRepository_getSQLSentenceByIdOrLast(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceIdByNumber( nNumber); oClass:AddMethod( "getSQLSentenceIdByNumber", @MovimientosAlmacenRepository_getSQLSentenceIdByNumber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getIdByNumber(); oClass:AddInline( "getIdByNumber", {|Self, nNumber | ( ( Self ) ), ( getSQLDataBase():getValue( ::getSQLSentenceIdByNumber( nNumber ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceIdByUuid( uuid); oClass:AddMethod( "getSQLSentenceIdByUuid", @MovimientosAlmacenRepository_getSQLSentenceIdByUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getIdByUuid(); oClass:AddInline( "getIdByUuid", {|Self, uuid | ( ( Self ) ), ( getSQLDataBase():getValue( ::getSQLSentenceIdByUuid( uuid ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNextNumber( cUser); oClass:AddMethod( "getNextNumber", @MovimientosAlmacenRepository_getNextNumber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLastNumber( cUser); oClass:AddMethod( "getLastNumber", @MovimientosAlmacenRepository_getLastNumber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLastNumberByUser( cUser); oClass:AddMethod( "getLastNumberByUser", @MovimientosAlmacenRepository_getLastNumberByUser(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceTotalsForReport( oReporting); oClass:AddMethod( "getSQLSentenceTotalsForReport", @MovimientosAlmacenRepository_getSQLSentenceTotalsForReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRowSetTotalsForReport( oReporting); oClass:AddMethod( "getRowSetTotalsForReport", @MovimientosAlmacenRepository_getRowSetTotalsForReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS MovimientosAlmacenRepository ;



static FUNCTION MovimientosAlmacenRepository_getSQLSentenceByIdOrLast( uId ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

   local cSql  := "SELECT * FROM " + ::getTableName() + " "

   if empty( uId )
      cSql     +=    "ORDER BY id DESC LIMIT 1"
      RETURN ( cSql )
   end

   if hb_isnumeric( uId )
      cSql     +=    "WHERE id = " + alltrim( str( uId ) )
   end

   if hb_isarray( uId )
      cSql     +=    "WHERE id IN ( "
      aeval( uId, {| v | cSql += if( hb_isarray( v ), toSQLString( atail( v ) ), toSQLString( v ) ) + ", " } )
      cSql     := chgAtEnd( cSql, " )", 2 )
   end

RETURN ( cSql )



static FUNCTION MovimientosAlmacenRepository_getSQLSentenceIdByNumber( nNumber ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

   local cSql  := "SELECT id FROM " + ::getTableName()         + " "

   cSql        +=    "WHERE empresa_codigo = " + quoted( cCodEmp() )  + " "

   cSql        +=       "AND numero = " + quoted( nNumber )

RETURN ( cSql )



static FUNCTION MovimientosAlmacenRepository_getSQLSentenceIdByUuid( uuid ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

   local cSql  := "SELECT id FROM " + ::getTableName()         + " "

   cSql        +=    "WHERE uuid = " + quoted( uuid )

RETURN ( cSql )



static FUNCTION MovimientosAlmacenRepository_getLastNumberByUser( cUser ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

   local cSql  := "SELECT numero FROM " + ::getTableName()        + " "

   cSql        +=    "WHERE empresa_codigo = " + quoted( cCodEmp() )     + " "

   if empty( cUser )
      cSql     +=       "AND usuario_codigo = " + quoted( cUser )        + " "
   end

   cSql        +=    "ORDER BY creado DESC, numero DESC"          + " "
   cSql        +=       "LIMIT 1"

RETURN ( cSql )



static FUNCTION MovimientosAlmacenRepository_getLastNumber( cUser ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

   local cNumero

   If( cUser == nil, cUser := Auth():Codigo(), ) ;

   cNumero        := getSqlDataBase():getValue( ::getLastNumberByUser( cUser ) )

   if empty( cNumero )
      cNumero     := getSqlDataBase():getValue( ::getLastNumberByUser() )
   end

RETURN ( cNumero )



static FUNCTION MovimientosAlmacenRepository_getNextNumber( cUser ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

   local cNumero  := ::getLastNumber( cUser )

RETURN ( nextDocumentNumber( cNumero ) )



static FUNCTION MovimientosAlmacenRepository_getSQLSentenceTotalsForReport( oReporting ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

   local cSentence























   cSentence   := "SELECT "                                                               +  "movimientos_almacen.id                         AS id, "                +  "movimientos_almacen.uuid                       AS uuid, "              +  "movimientos_almacen.numero                     AS numero, "            +  "CAST( movimientos_almacen.fecha_hora AS date ) AS fecha, "             +  "CAST( movimientos_almacen.fecha_hora AS time ) AS hora, "              +  "movimientos_almacen.tipo_movimiento            AS tipo_movimiento, "   +  SQLMovimientosAlmacenModel():getColumnMovimiento( "movimientos_almacen" ) +  "movimientos_almacen.fecha_hora                 AS fecha_hora, "        +  "movimientos_almacen.almacen_origen             AS almacen_origen, "    +  "movimientos_almacen.almacen_destino            AS almacen_destino, "   +  SQLMovimientosAlmacenLineasModel():getSQLSubSentenceSumatorioTotalPrecioLinea( "movimientos_almacen_lineas" ) + ", " + SQLMovimientosAlmacenLineasModel():getSQLSumatorioTotalVentaLinea( "movimientos_almacen_lineas" ) + ", " + "movimientos_almacen.divisa                     AS divisa, "            +  "movimientos_almacen.divisa_cambio              AS divisa_cambio, "     +  "movimientos_almacen.comentarios                AS comentarios, "       +  "movimientos_almacen.creado                     AS creado, "            +  "movimientos_almacen.modificado                 AS modificado, "        +  "movimientos_almacen.enviado                    AS enviado "            +  "FROM " + ::getTableName() + " "                                           +  "INNER JOIN movimientos_almacen_lineas "                                +  "ON movimientos_almacen.uuid = movimientos_almacen_lineas.parent_uuid " +  "WHERE movimientos_almacen.empresa_codigo = " + quoted( cCodEmp() ) + " "

   if !empty( oReporting )
      cSentence   += "AND "
      cSentence   += "( movimientos_almacen.almacen_origen >= " + quoted(  oReporting:getDesdeAlmacen() ) + " "
      cSentence   += "AND "
      cSentence   += "movimientos_almacen.almacen_origen <= " + quoted(  oReporting:getHastaAlmacen() ) + " ) "
      cSentence   += "OR "
      cSentence   += "( movimientos_almacen.almacen_destino >= " + quoted(  oReporting:getDesdeAlmacen() ) + " "
      cSentence   += "AND "
      cSentence   += "movimientos_almacen.almacen_destino <= " + quoted(  oReporting:getHastaAlmacen() ) + " ) "
   end

RETURN ( cSentence )



static FUNCTION MovimientosAlmacenRepository_getRowSetTotalsForReport( oReporting ) ; local Self AS CLASS MovimientosAlmacenRepository := QSelf() AS CLASS MovimientosAlmacenRepository

RETURN ( SQLRowSet():New():Build( ::getSQLSentenceTotalsForReport( oReporting ) ) )
