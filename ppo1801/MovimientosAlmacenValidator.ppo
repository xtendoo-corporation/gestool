#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Validators\MovimientosAlmacenValidator.prg"
_HB_CLASS MovimientosAlmacenValidator ; function MovimientosAlmacenValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "MovimientosAlmacenValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @MovimientosAlmacenValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @MovimientosAlmacenValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER requiredAlmacenOrigen(); oClass:AddMethod( "requiredAlmacenOrigen", @MovimientosAlmacenValidator_requiredAlmacenOrigen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existAlmacenOrigen( value); oClass:AddMethod( "existAlmacenOrigen", @MovimientosAlmacenValidator_existAlmacenOrigen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existAlmacen(); oClass:AddMethod( "existAlmacen", @MovimientosAlmacenValidator_existAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER diferentAlmacen(); oClass:AddMethod( "diferentAlmacen", @MovimientosAlmacenValidator_diferentAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER emptyOrExistGrupoMovimiento( value); oClass:AddMethod( "emptyOrExistGrupoMovimiento", @MovimientosAlmacenValidator_emptyOrExistGrupoMovimiento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER emptyOrExistAgente( value); oClass:AddMethod( "emptyOrExistAgente", @MovimientosAlmacenValidator_emptyOrExistAgente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existDivisa( value); oClass:AddMethod( "existDivisa", @MovimientosAlmacenValidator_existDivisa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existNumber( value); oClass:AddMethod( "existNumber", @MovimientosAlmacenValidator_existNumber(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS MovimientosAlmacenValidator ;



static FUNCTION MovimientosAlmacenValidator_getValidators( ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator










   ::hValidators  := {  "numero"             => {  "required"                    => "El número de documento es un dato requerido", "numeroDocumento"             => "El número de documento no es valido" }, "almacen_origen"     => {  "requiredAlmacenOrigen"       => "El almacén origen es un dato requerido", "existAlmacenOrigen"          => "El almacén origen no existe", "diferentAlmacen"             => "El almacén origen debe ser distinto del almacén destino" }, "almacen_destino"    => {  "required"                    => "El almacén destino es un dato requerido", "existAlmacen"                => "El almacén destino no existe", "diferentAlmacen"             => "El almacén origen debe ser distinto del almacén destino" }, "agente"             => {  "emptyOrExistAgente"          => "El agente no existe" }, "divisa"             => {  "existDivisa"                 => "La divisa no existe" } }

RETURN ( ::hValidators )



static FUNCTION MovimientosAlmacenValidator_requiredAlmacenOrigen( value ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

   if ::oController:getModelBuffer( "tipo_movimiento" ) <> 1
      RETURN .T.
   end

   if empty( value )
      RETURN .F.
   end

RETURN ( .T. )



static FUNCTION MovimientosAlmacenValidator_existAlmacenOrigen( value ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

   if ::oController:getModelBuffer( "tipo_movimiento" ) <> 1
      RETURN .T.
   end

RETURN ( AlmacenesModel():exist( value ) )



static FUNCTION MovimientosAlmacenValidator_existAlmacen( value ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

RETURN ( AlmacenesModel():exist( value ) )



static FUNCTION MovimientosAlmacenValidator_diferentAlmacen( ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

   if ::oController:getModelBuffer( "tipo_movimiento" ) <> 1
      RETURN .T.
   end

RETURN ( ::oController:getModelBuffer( "almacen_origen" ) <> ::oController:getModelBuffer( "almacen_destino" )  )



static FUNCTION MovimientosAlmacenValidator_emptyOrExistGrupoMovimiento( value ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

   if empty( value )
      RETURN .T.
   end

RETURN ( GruposMovimientosModel():exist( value ) )



static FUNCTION MovimientosAlmacenValidator_emptyOrExistAgente( value ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

   if empty( value )
      RETURN .T.
   end

RETURN ( AgentesModel():exist( value ) )



static FUNCTION MovimientosAlmacenValidator_existDivisa( value ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

RETURN ( DivisasModel():exist( value ) )



static FUNCTION MovimientosAlmacenValidator_existNumber( value ) ; local Self AS CLASS MovimientosAlmacenValidator := QSelf() AS CLASS MovimientosAlmacenValidator

   msgalert( value, "existNumber" )

RETURN ( .T. )
