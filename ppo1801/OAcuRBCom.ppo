#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\OAcuRBCom.prg"
_HB_CLASS OAcuRBCom ; function OAcuRBCom ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OAcuRBCom", iif( .T., { @TPrvArt() }, { @HBObject() } ), @OAcuRBCom() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @OAcuRBCom_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @OAcuRBCom_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @OAcuRBCom_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @OAcuRBCom_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @OAcuRBCom_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OAcuRBCom ;



static FUNCTION OAcuRBCom_Create( ) ; local Self AS CLASS OAcuRBCom := QSelf() AS CLASS OAcuRBCom

   ::AddField( "cCodPrv", "C", 12, 0, {|| "@!" },           "Prv.",          .F., "Cod. Proveedor"    ,  9, .F. )
   ::AddField( "cNomPrv", "C", 50, 0, {|| "@!" },           "Proveedor",     .F., "Nombre Proveedor"  , 35, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },           "Cod. Art",      .T., "Código artículo"         , 14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },           "Artículo",      .T., "Artículo"          , 35, .F. )
   ::AddField( "nNumUni", "N", 16, 6, {|| MasUnd() },       "Tot. und.",     .T., "Total unidades"    , 12, .T. )
   ::AddField( "nImpArt", "N", 16, 6, {|| ::cPicImp },      "Precio",        .F., "Precio"            , 12, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },      "Base",          .T., "Base"              , 12, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },       "Tot. peso",     .F., "Total peso"        , 12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },      "Pre. Kg.",      .F., "Precio kilo"       , 12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },       "Tot. volumen",  .F., "Total volumen"     , 12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },      "Pre. vol.",     .F., "Precio volumen"    , 12, .F. )
   ::AddField( "nPreMed", "N", 16, 6, {|| ::cPicImp },      "Pre. Med.",     .T., "Precio medio"      , 12, .F. )
   ::AddField( "nIvaTot", "N", 16, 6, {|| ::cPicOut },      cImp(),        .T., cImp()            , 12, .T. )
   ::AddField( "nTotFin", "N", 16, 6, {|| ::cPicOut },      "Total",         .T., "Total"             , 12, .T. )

   ::AddTmpIndex( "CCODPRV", "CCODPRV + CCODART" )

   ::AddGroup( {|| ::oDbf:cCodPrv }, {|| "Proveedor  : " + Rtrim( ::oDbf:cCodPrv ) + "-" + Rtrim( ::oDbf:cNomPrv ) }, {||"Total proveedor..."} )

RETURN ( Self )



static FUNCTION OAcuRBCom_OpenFiles( ) ; local Self AS CLASS OAcuRBCom := QSelf() AS CLASS OAcuRBCom

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbPrvT := DbfServer( "ALBPROVT.DBF", ):NewOpen( "ALBPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "ALBPROVT.CDX" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

   ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION OAcuRBCom_CloseFiles( ) ; local Self AS CLASS OAcuRBCom := QSelf() AS CLASS OAcuRBCom

   if !Empty( ::oAlbPrvT ) .AND. ::oAlbPrvT:Used()
      ::oAlbPrvT:End()
   end

   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end

   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end

   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oAlbPrvT := nil
   ::oAlbPrvL := nil
   ::oFacPrvT := nil
   ::oFacPrvL := nil
   ::oFacPrvP := nil
   ::oDbfIva  := nil

RETURN ( Self )



static FUNCTION OAcuRBCom_lResource( cFld ) ; local Self AS CLASS OAcuRBCom := QSelf() AS CLASS OAcuRBCom

   if !::StdResource( "INF_GEN12" )
      return .F.
   end





   if !::oDefPrvInf( 110, 120, 130, 140, 700 )
      return .F.
   end

   if !::lDefArtInf( 70, 80, 90, 100, 800 )
      return .F.
   end





   ::oDefExcInf( 210 )
   ::oDefExcImp( 211 )

   ::CreateFilter( aItmCompras(), { ::oAlbPrvT, ::oFacPrvT }, .T. )





   ::oMtrInf:SetTotal( ::oFacPrvT:Lastrec() )

RETURN .T.






static FUNCTION OAcuRBCom_lGenerate( ) ; local Self AS CLASS OAcuRBCom := QSelf() AS CLASS OAcuRBCom

   local cExpHead := ""
   local cExpLine := ""
   local aTot     := {}

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "Proveedor: " + if( ::lAllPrv, "Todos", AllTrim( ::cPrvOrg ) + " > " + AllTrim ( ::cPrvDes ) ) }, {|| "Artículo : " + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim ( ::cArtDes ) ) } }

   ::oAlbPrvT:OrdSetFocus( "dFecAlb" )
   ::oAlbPrvL:OrdSetFocus( "nNumAlb" )

   cExpHead          := '!lFacturado .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllPrv
      cExpHead       += ' .and. cCodPrv >= "' + Rtrim( ::cPrvOrg ) + '" .and. cCodPrv <= "' + Rtrim( ::cPrvDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ), ::oAlbPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando albaranes"
   ::oMtrInf:SetTotal( ::oAlbPrvT:OrdKeyCount() )

   if !::lAllArt
      cExpLine       += 'cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   else
      cExpLine       := ".t."
   end

   ::oAlbPrvL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbPrvL:cFile ), ::oAlbPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oAlbPrvT:GoTop()

   while !::lBreak .AND. !::oAlbPrvT:Eof()

      if lChkSer( ::oAlbPrvT:cSerAlb, ::aSer )

         if ::oAlbPrvL:Seek( ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb )

            while ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb == ::oAlbPrvL:cSerAlb + Str( ::oAlbPrvL:nNumAlb ) + ::oAlbPrvL:cSufAlb .AND. ! ::oAlbPrvL:eof()


               if !( ::lExcCero .AND. nTotNAlbPrv( ::oAlbPrvL ) == 0 )  .AND. !( ::lExcImp .AND. nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  if !::oDbf:Seek( ::oAlbPrvT:cCodPrv + ::oAlbPrvL:cRef )

                     ::oDbf:Append()

                     ::oDbf:cCodPrv      := ::oAlbPrvT:cCodPrv
                     ::oDbf:cNomPrv      := ::oAlbPrvT:cNomPrv
                     ::oDbf:cCodArt      := ::oAlbPrvL:cRef
                     ::oDbf:cNomArt      := Descrip( ::oAlbPrvL:cAlias )
                     ::oDbf:nNumUni      := nTotNAlbPrv( ::oAlbPrvL )
                     ::oDbf:nImpArt      := nTotUAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nValDiv )
                     ::oDbf:nImpTot      := nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreMed      := ::oDbf:nImpTot / ::oDbf:nNumUni
                     ::oDbf:nIvaTot      := nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nTotFin      := ::oDbf:nImpTot + ::oDbf:nIvaTot

                     ::AcuPesVol( ::oAlbPrvL:cRef, nTotNAlbPrv( ::oAlbPrvL ), ::oDbf:nImpTot, .F. )

                     ::oDbf:Save()

                  else

                     ::oDbf:Load()

                     ::oDbf:nNumUni    += nTotNAlbPrv( ::oAlbPrvL )
                     ::oDbf:nImpArt    += nTotUAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nValDiv )
                     ::oDbf:nImpTot    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
                     ::oDbf:nIvaTot    += nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nTotFin    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nTotFin    += nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                     ::AcuPesVol( ::oAlbPrvL:cRef, nTotNAlbPrv( ::oAlbPrvL ), ::oDbf:nImpTot, .T. )

                     ::oDbf:Save()

                  end

               end

               ::oAlbPrvL:Skip()

            end

         end

      end

      ::oAlbPrvT:Skip()

      ::oMtrInf:AutoInc( ::oAlbPrvT:OrdKeyNo() )

   end

   ::oAlbPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ) )
   ::oAlbPrvL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbPrvL:cFile ) )



   ::oFacPrvT:OrdSetFocus( "dFecFac" )
   ::oFacPrvL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllPrv
      cExpHead       += ' .and. cCodPrv >= "' + Rtrim( ::cPrvOrg ) + '" .and. cCodPrv <= "' + Rtrim( ::cPrvDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ), ::oFacPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando facturas"
   ::oMtrInf:SetTotal( ::oFacPrvT:OrdKeyCount() )

   if !::lAllArt
      cExpLine       := 'cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   else
      cExpLine       := ".t."
   end

   ::oFacPrvL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvL:cFile ), ::oFacPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacPrvT:GoTop()

   while !::lBreak .AND. !::oFacPrvT:Eof()

      if lChkSer( ::oFacPrvT:cSerFac, ::aSer )

         if ::oFacPrvT:lFacGas .AND. ::lAllArt

            aTot              := aTotFacPrv( ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac, ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacPrvP:cAlias, ::cDivInf )

            if !::oDbf:Seek( ::oFacPrvT:cCodPrv + Space( 18 ) )

               ::oDbf:Append()

               ::oDbf:cCodPrv    := ::oFacPrvT:cCodPrv
               ::oDbf:cNomPrv    := ::oFacPrvT:cNomPrv
               ::oDbf:cCodArt    := Space( 18 )
               ::oDbf:cNomArt    := Space( 100 )
               ::oDbf:nNumUni    := 1
               ::oDbf:nImpArt    := aTot[1]
               ::oDbf:nImpTot    := aTot[1]
               ::oDbf:nIvaTot    := aTot[2]
               ::oDbf:nTotFin    := aTot[4]

               ::oDbf:Save()

            else

               ::oDbf:Load()

               ::oDbf:nNumUni    += 1
               ::oDbf:nImpArt    += aTot[1]
               ::oDbf:nImpTot    += aTot[1]
               ::oDbf:nIvaTot    += aTot[2]
               ::oDbf:nTotFin    += aTot[4]

               ::oDbf:Save()

            end


         else

            if ::oFacPrvL:Seek( ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac )

               while ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac == ::oFacPrvL:cSerFac + Str( ::oFacPrvL:nNumFac ) + ::oFacPrvL:cSufFac .AND. ! ::oFacPrvL:eof()


                  if !( ::lExcCero .AND. nTotNFacPrv( ::oFacPrvL ) == 0 )  .AND. !( ::lExcImp .AND. nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                     if !::oDbf:Seek( ::oFacPrvT:cCodPrv + ::oFacPrvL:cRef )

                        ::oDbf:Append()

                        ::oDbf:cCodPrv      := ::oFacPrvT:cCodPrv
                        ::oDbf:cNomPrv      := ::oFacPrvT:cNomPrv
                        ::oDbf:cCodArt      := ::oFacPrvL:cRef
                        ::oDbf:cNomArt      := Descrip( ::oFacPrvL:cAlias )
                        ::oDbf:nNumUni      := nTotNFacPrv( ::oFacPrvL )
                        ::oDbf:nImpArt      := nTotUFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nValDiv )
                        ::oDbf:nImpTot      := nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                        ::oDbf:nPreMed      := ::oDbf:nImpTot / ::oDbf:nNumUni
                        ::oDbf:nIvaTot      := nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                        ::oDbf:nTotFin      := ::oDbf:nImpTot + ::oDbf:nIvaTot

                        ::AcuPesVol( ::oFacPrvL:cRef, nTotNFacPrv( ::oFacPrvL ), ::oDbf:nImpTot, .F. )

                        ::oDbf:Save()

                     else

                        ::oDbf:Load()

                        ::oDbf:nNumUni    += nTotNFacPrv( ::oFacPrvL )
                        ::oDbf:nImpArt    += nTotUFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nValDiv )
                        ::oDbf:nImpTot    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                        ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
                        ::oDbf:nIvaTot    += nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                        ::oDbf:nTotFin    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                        ::oDbf:nTotFin    += nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                        ::AcuPesVol( ::oFacPrvL:cRef, nTotNFacPrv( ::oFacPrvL ), ::oDbf:nImpTot, .T. )

                        ::oDbf:Save()

                     end

                  end

                  ::oFacPrvL:Skip()

               end

            end

         end

      end

      ::oFacPrvT:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvT:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oFacPrvT:Lastrec() )

   ::oFacPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ) )
   ::oFacPrvL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvL:cFile ) )

   if !::lExcCero
      ::IncluyeCero()
   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
