#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\OAnuGPed.prg"
_HB_CLASS oAnuGPed ; function oAnuGPed ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "oAnuGPed", iif( .T., { @TPrvGrp() }, { @HBObject() } ), @oAnuGPed() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oPedPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oPedPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedPrvL"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Parcilamente", "Entregado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @oAnuGPed_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @oAnuGPed_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @oAnuGPed_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @oAnuGPed_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @oAnuGPed_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS oAnuGPed ;



static FUNCTION oAnuGPed_Create( ) ; local Self AS CLASS oAnuGPed := QSelf() AS CLASS oAnuGPed

   ::AnuGrpFields()

   ::AddTmpIndex( "cGrpFam", "cGrpFam" )

   ::lDefFecInf   := .F.
   ::lDefGraph    := .T.

RETURN ( self )



static FUNCTION oAnuGPed_OpenFiles( ) ; local Self AS CLASS oAnuGPed := QSelf() AS CLASS oAnuGPed


   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oPedPrvT := DbfServer( "PEDPROVT.DBF", ):NewOpen( "PEDPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedPrvT:AddBag( "PEDPROVT.CDX" ) ; ::oPedPrvT:AddBag( ) ; ::oPedPrvT:AutoIndex()

   ::oPedPrvL := DbfServer( "PEDPROVL.DBF", ):NewOpen( "PEDPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedPrvL:AddBag( "PEDPROVL.CDX" ) ; ::oPedPrvL:AddBag( ) ; ::oPedPrvL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION oAnuGPed_CloseFiles( ) ; local Self AS CLASS oAnuGPed := QSelf() AS CLASS oAnuGPed

   if !Empty( ::oPedPrvT ) .AND. ::oPedPrvT:Used()
      ::oPedPrvT:End()
   end
   if !Empty( ::oPedPrvL ) .AND. ::oPedPrvL:Used()
      ::oPedPrvL:End()
   end

   ::oPedPrvT := nil
   ::oPedPrvL := nil

RETURN ( Self )



static FUNCTION oAnuGPed_lResource( cFld ) ; local Self AS CLASS oAnuGPed := QSelf() AS CLASS oAnuGPed

   local cEstado := "Todos"

   if !::StdResource( "InfAnuGrp" )
      return .F.
   end

   ::oDefYea( )

   if !::oDefGrFInf( 70, 80, 90, 100, 900 )
      return .F.
   end





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::oDefExcInf(200)

   ::oMtrInf:SetTotal( ::oPedPrvT:Lastrec() )

   ::CreateFilter( aItmPedPrv(), ::oPedPrvT:cAlias )

RETURN .T.






static FUNCTION oAnuGPed_lGenerate( ) ; local Self AS CLASS oAnuGPed := QSelf() AS CLASS oAnuGPed

   local cExpHead    := ""
   local cExpLine    := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader         := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Año     : " + AllTrim( Str( ::nYeaInf ) ) }, {|| "Grp.Fam.: " + if( ::lAllGrp, "Todos", AllTrim( ::cGruFamOrg ) + " > " + AllTrim( ::cGruFamDes ) ) } }

   ::oPedPrvT:OrdSetFocus( "dFecPed" )
   ::oPedPrvL:OrdSetFocus( "nNumPed" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := "nEstado == 1"
      case ::oEstado:nAt == 2
         cExpHead    := "nEstado == 2"
      case ::oEstado:nAt == 3
         cExpHead    := "nEstado == 3"
      case ::oEstado:nAt == 4
         cExpHead    := ".t."
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oPedPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oPedPrvT:cFile ), ::oPedPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oPedPrvT:OrdKeyCount() )

   if !::lAllGrp
      cExpLine       := 'cGrpFam >= "' + ::cGruFamOrg + '" .and. cGrpFam <= "' + ::cGruFamDes + '"'
   else
      cExpLine       := ".t."
   end

   ::oPedPrvL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oPedPrvL:cFile ), ::oPedPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oPedPrvT:GoTop()

   while !::lBreak .AND. !::oPedPrvT:Eof()


      if Year( ::oPedPrvT:dFecPed ) == ::nYeaInf                                            .AND. lChkSer( ::oPedPrvT:cSerPed, ::aSer )

         if ::oPedPrvL:Seek( ::oPedPrvT:cSerPed + Str( ::oPedPrvT:nNumPed ) + ::oPedPrvT:cSufPed )

            while ::oPedPrvT:cSerPed + Str( ::oPedPrvT:nNumPed ) + ::oPedPrvT:cSufPed == ::oPedPrvL:cSerPed + Str( ::oPedPrvL:nNumPed ) + ::oPedPrvL:cSufPed .AND. ! ::oPedPrvL:eof()

               if !( ::lExcCero .AND. nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  if !::oDbf:Seek( ::oPedPrvL:cGrpFam )
                     ::oDbf:Blank()
                     ::oDbf:cGrpFam := ::oPedPrvL:cGrpFam
                     ::oDbf:cNomGrp := oRetFld( ::oDbf:cGrpFam, ::oGruFam:oDbf )
                     ::oDbf:Insert()
                  end

                  ::AddImporte( ::oPedPrvT:dFecPed, nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) )

               end

               ::oPedPrvL:Skip()

            end

         end

      end

      ::oPedPrvT:Skip()

      ::oMtrInf:AutoInc( ::oPedPrvT:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oPedPrvT:Lastrec() )

   ::oPedPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oPedPrvT:cFile ) )
   ::oPedPrvL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oPedPrvL:cFile ) )

   if !::lExcCero
      ::IncluyeCero()
   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
