#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\OInfBRap.prg"
_HB_CLASS OInfBRap ; function OInfBRap ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OInfBRap", iif( .T., { @TPrvInf() }, { @HBObject() } ), @OInfBRap() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @OInfBRap_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @OInfBRap_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @OInfBRap_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @OInfBRap_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @OInfBRap_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OInfBRap ;



static FUNCTION OInfBRap_Create( ) ; local Self AS CLASS OInfBRap := QSelf() AS CLASS OInfBRap

   ::AddField( "cTipDoc", "C", 10, 0, {|| "@!" },       "Tipo documento",            .T., "Tipo documento",             12, .F. )
   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },       "Doc.",                      .T., "Documento",                   8, .F. )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },       "Fecha",                     .T., "Fecha",                      10, .F. )
   ::AddField( "cCodPrv", "C", 12, 0, {|| "@!" },       "Prv.",                      .F., "Cod. Proveedor",              9 )
   ::AddField( "cNomPrv", "C", 50, 0, {|| "@!" },       "Proveedor",                 .F., "Nombre Proveedor",           35 )
   ::AddField( "cNifPrv", "C", 15, 0, {|| "@!" },       "Nif",                       .F., "Nif",                        15 )
   ::AddField( "cDomPrv", "C", 35, 0, {|| "@!" },       "Domicilio",                 .F., "Domicilio",                  35 )
   ::AddField( "cPobPrv", "C", 25, 0, {|| "@!" },       "Población",                 .F., "Población",                  25 )
   ::AddField( "cProPrv", "C", 20, 0, {|| "@!" },       "Provincia",                 .F., "Provincia",                  20 )
   ::AddField( "cCdpPrv", "C",  7, 0, {|| "@!" },       "CP",                        .F., "Cod. Postal",                 7 )
   ::AddField( "cTlfPrv", "C", 12, 0, {|| "@!" },       "Tlf",                       .F., "Teléfono",                   12 )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },       "Art.",                      .T., "Cod. artículo",              14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },       "Artículo",                  .T., "Artículo",                   40, .F. )
   ::AddField( "cCodAlm", "C",  3, 0, {|| "@!" },       "Alm",                       .T., "Cod. almacén",                3, .F. )
   ::AddField( "nComRap", "N", 16, 6, {|| ::cPicOut },  "% Rap.",                    .T., "Comisión rappels",           12, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },  "Importe",                   .T., "Importe",                    12, .T. )
   ::AddField( "nTotRap", "N", 16, 6, {|| ::cPicOut },  "Total Rap.",                .T., "Total rappels",              12, .T. )

   ::AddTmpIndex( "cCodPrv", "cCodPrv + cCodArt" )
   ::AddGroup( {|| ::oDbf:cCodPrv }, {|| "Proveedor : " + Rtrim( ::oDbf:cCodPrv ) + "-" + Rtrim( ::oDbf:cNomPrv ) }, {||"Total proveedor..."} )

RETURN ( Self )



static FUNCTION OInfBRap_OpenFiles( ) ; local Self AS CLASS OInfBRap := QSelf() AS CLASS OInfBRap

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbPrvT := DbfServer( "ALBPROVT.DBF", ):NewOpen( "ALBPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "ALBPROVT.CDX" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

   ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION OInfBRap_CloseFiles( ) ; local Self AS CLASS OInfBRap := QSelf() AS CLASS OInfBRap

   if !Empty( ::oAlbPrvT ) .AND. ::oAlbPrvT:Used()
      ::oAlbPrvT:End()
   end
   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end
   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end
   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end
   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end

   ::oAlbPrvT := nil
   ::oAlbPrvL := nil
   ::oFacPrvT := nil
   ::oFacPrvL := nil
   ::oFacPrvP := nil

RETURN ( Self )



static FUNCTION OInfBRap_lResource( cFld ) ; local Self AS CLASS OInfBRap := QSelf() AS CLASS OInfBRap

   if !::StdResource( "INFRAPP" )
      return .F.
   end

   ::CreateFilter( aItmCompras(), { ::oAlbPrvT, ::oFacPrvT }, .T. )





   if !::oDefPrvInf( 70, 80, 90, 100, 600 )
      return .F.
   end





   if !::lDefArtInf( 110, 120, 130, 140, 800 )
      return .F.
   end

RETURN .T.






static FUNCTION OInfBRap_lGenerate( ) ; local Self AS CLASS OInfBRap := QSelf() AS CLASS OInfBRap

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "Proveedor : " + if( ::lAllPrv, "Todos", AllTrim( ::cPrvOrg ) + " > " + AllTrim (::cPrvDes ) ) }, {|| "Artículos : " + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim (::cArtDes ) ) } }


   ::oAlbPrvT:OrdSetFocus( "dFecAlb" )

   cExpHead          := '!lFacturado .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllPrv
      cExpHead       += ' .and. cCodPrv >= "' + ::cPrvOrg + '" .and. cCodPrv <= "' + ::cPrvDes + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ), ::oAlbPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando albaranes"
   ::oMtrInf:SetTotal( ::oAlbPrvT:OrdKeyCount() )

   ::oAlbPrvT:GoTop()

   while !::lBreak .AND. !::oAlbPrvT:Eof()

      if lChkSer( ::oAlbPrvT:cSerAlb, ::aSer )

         if ::oAlbPrvL:Seek( ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb )

            while ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb == ::oAlbPrvL:cSerAlb + Str( ::oAlbPrvL:nNumAlb ) + ::oAlbPrvL:cSufAlb .AND. ! ::oAlbPrvL:eof()

               ::oDbf:Append()

               ::oDbf:cTipDoc := "Albarán"
               ::oDbf:cDocMov := AllTrim( ::oAlbPrvT:cSerAlb ) + "/" + AllTrim( Str( ::oAlbPrvT:nNumAlb ) ) + "/" + AllTrim( ::oAlbPrvT:cSufAlb )
               ::oDbf:dFecMov := ::oAlbPrvT:dFecAlb
               ::oDbf:cCodArt := ::oAlbPrvL:cRef
               ::oDbf:cNomArt := ::oAlbPrvL:cDetalle
               ::oDbf:cCodAlm := ::oAlbPrvL:cAlmLin
               ::oDbf:nComRap := ::oAlbPrvL:nDtoRap
               ::oDbf:nImpTot := nTotLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
               ::oDbf:nTotRap := ( ::oDbf:nImpTot * ::oDbf:nComRap ) / 100
               ::AddProveedor( ::oAlbPrvT:cCodPrv )

               ::oDbf:Save()

               ::oAlbPrvL:Skip()

            end

         end

      end

      ::oAlbPrvT:Skip()

      ::oMtrInf:AutoInc( ::oAlbPrvT:OrdKeyNo() )

   end

   ::oAlbPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ) )



   ::oFacPrvT:OrdSetFocus( "dFecFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllPrv
      cExpHead       += ' .and. cCodPrv >= "' + ::cPrvOrg + '" .and. cCodPrv <= "' + ::cPrvDes + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ), ::oFacPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando facturas"
   ::oMtrInf:SetTotal( ::oFacPrvT:OrdKeyCount() )

   ::oFacPrvT:GoTop()

   while ::oFacPrvT:dFecFac <= ::dFinInf .AND. !::oFacPrvT:Eof()


      if ( ::lAllPrv .OR. ( ::oFacPrvT:cCodPrv >= ::cPrvOrg .AND. ::oFacPrvT:cCodPrv <= ::cPrvDes ) ) .AND. lChkSer( ::oFacPrvT:cSerFac, ::aSer )

         if ::oFacPrvL:Seek( ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac )

            while ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac == ::oFacPrvL:cSerFac + Str( ::oFacPrvL:nNumFac ) + ::oFacPrvL:cSufFac .AND. ! ::oFacPrvL:eof()

               if ( ::lAllPrv .OR. ( ::oFacPrvL:cRef >= ::cArtOrg .AND. ::oFacPrvL:cRef <= ::cArtDes ) )

                  ::oDbf:Append()

                  ::oDbf:cTipDoc := "Factura"
                  ::oDbf:cDocMov := AllTrim( ::oFacPrvT:cSerFac ) + "/" + AllTrim( Str( ::oFacPrvT:nNumFac ) ) + "/" + AllTrim( ::oFacPrvT:cSufFac )
                  ::oDbf:dFecMov := ::oFacPrvT:dFecFac
                  ::oDbf:cCodArt := ::oFacPrvL:cRef
                  ::oDbf:cNomArt := ::oFacPrvL:cDetalle
                  ::oDbf:cCodAlm := ::oFacPrvL:cAlmLin
                  ::oDbf:nComRap := ::oFacPrvL:nDtoRap
                  ::oDbf:nImpTot := nTotLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotRap := ( ::oDbf:nImpTot * ::oDbf:nComRap ) / 100
                  ::AddProveedor( ::oFacPrvT:cCodPrv )

                  ::oDbf:Save()

               end

               ::oFacPrvL:Skip()

            end

         end

      end

      ::oFacPrvT:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvT:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oAlbPrvT:Lastrec() )

   ::oFacPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
