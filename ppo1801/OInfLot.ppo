#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\OInfLot.prg"
_HB_CLASS OInfLot ; function OInfLot ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OInfLot", iif( .T., { @TInfGen() }, { @HBObject() } ), @OInfLot() ) ) ;

   _HB_MEMBER { cLotIni } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLotIni"}, .F. )
   _HB_MEMBER { cLotFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLotFin"}, .F. )
   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS LOGIC lFactura } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFactura"}, .F. )
   _HB_MEMBER { AS LOGIC lAlbaran } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAlbaran"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvL"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @OInfLot_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @OInfLot_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @OInfLot_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @OInfLot_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @OInfLot_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OInfLot ;



static FUNCTION OInfLot_OpenFiles( ) ; local Self AS CLASS OInfLot := QSelf() AS CLASS OInfLot

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oAlbPrvT := DbfServer( "ALBPROVT.DBF", ):NewOpen( "ALBPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "ALBPROVT.CDX" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

   ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION OInfLot_CloseFiles( ) ; local Self AS CLASS OInfLot := QSelf() AS CLASS OInfLot

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end
   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end
   if !Empty( ::oAlbPrvT ) .AND. ::oAlbPrvT:Used()
      ::oAlbPrvT:End()
   end
   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end

   ::oFacPrvT := nil
   ::oFacPrvL := nil
   ::oAlbPrvT := nil
   ::oAlbPrvL := nil

RETURN ( Self )



static FUNCTION OInfLot_Create( ) ; local Self AS CLASS OInfLot := QSelf() AS CLASS OInfLot

   ::AddField( "cLote",   "C", 64, 0, {|| "@!" },           "Lote",              .F., "Lote",             12, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },           "Código artículo",         .T., "Código artículo",  14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },           "Artículo",          .T., "Artículo",         35, .F. )
   ::AddField( "cCodFam", "C", 16, 0, {|| "@!" },           "Família",           .F., "Família",           5, .F. )
   ::AddField( "cCodPrv", "C", 18, 0, {|| "@!" },           "Cod. Prv.",         .T., "Código Proveedor", 12, .F. )
   ::AddField( "cNomPrv", "C", 50, 0, {|| "@!" },           "Proveedor",         .T., "Proveedor",        35, .F. )
   ::AddField( "nTotCaj", "N", 16, 6, {|| MasUnd() },       cNombreCajas(),      .F., cNombreCajas(),     12, .T. )
   ::AddField( "nTotUni", "N", 16, 6, {|| MasUnd() },       cNombreUnidades(),   .T., cNombreUnidades(),  12, .T. )
   ::AddField( "nTotImp", "N", 16, 6, {|| ::cPicOut },      "Tot. importe",      .T., "Tot. importe",     12, .T. )
   ::AddField( "cTipDoc", "C", 12, 0, {|| "@!" },           "Tip. doc.",         .T., "Tipo documento",   12, .F. )
   ::AddField( "cNumDoc", "C", 14, 0, {|| "@!" },           "Documento",         .T., "Documento",        15, .F. )
   ::AddField( "dFecDoc", "D",  8, 0, {|| "@!" },           "Fecha",             .T., "Fecha",            12, .F. )

   ::AddTmpIndex( "cLote", "cLote + cCodArt" )

   ::AddGroup( {|| ::oDbf:cLote }, {|| "Lote : " + ::oDbf:cLote }, {|| Space(1) } )

RETURN ( Self )



static FUNCTION OInfLot_lResource( cFld ) ; local Self AS CLASS OInfLot := QSelf() AS CLASS OInfLot

   if !::StdResource( "INF_GEN30P" )
      return .F.
   end

   ::CreateFilter( aItmCompras(), { ::oAlbPrvT, ::oFacPrvT }, .T. )

   if !::oDefPrvInf( 70, 71, 80, 81, 920 )
      return .F.
   end

   if !::lDefArtInf( 150, 160, 170, 180, 800 )
      return .F.
   end



   TGetHlp():ReDefine( ( 110 ), { | u | If( PCount()==0, ::cLotIni, ::cLotIni:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



   TGetHlp():ReDefine( ( 120 ), { | u | If( PCount()==0, ::cLotFin, ::cLotFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

   ::oDefExcInf( 200 )

   ::oDefExcImp( 210 )



   TCheckBox():ReDefine( ( 221 ), { | u | If( PCount()==0, ::lAlbaran, ::lAlbaran:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 222 ), { | u | If( PCount()==0, ::lFactura, ::lFactura:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

RETURN .T.




static FUNCTION OInfLot_lGenerate( ) ; local Self AS CLASS OInfLot := QSelf() AS CLASS OInfLot

   local cExpHead := ""
   local cExpLine := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Proveedor : " + if( ::lAllPrv, "Todas", AllTrim( ::cPrvOrg ) + " > " + AllTrim( ::cPrvDes ) ) }, {|| "Artículo  : " + if( ::lAllArt, "Todas", AllTrim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes ) ) }, {|| "Lotes     : " + AllTrim( ::cLotIni ) + " > " + AllTrim( ::cLotFin ) } }



   if ::lAlbaran

      ::oAlbPrvT:OrdSetFocus( "dFecAlb" )
      ::oAlbPrvL:OrdSetFocus( "nNumAlb" )

      cExpHead          := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

      if !::lAllPrv
         cExpHead       += ' .and. cCodPrv >= "' + Rtrim( ::cPrvOrg ) + '" .and. cCodPrv <= "' + Rtrim( ::cPrvDes ) + '"'
      end

      if !Empty( ::oFilter:cExpresionFilter )
         cExpHead       += " .and. " + ::oFilter:cExpresionFilter
      end

      ::oAlbPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ), ::oAlbPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oAlbPrvT:OrdKeyCount() )

      cExpLine          := "!lControl .and. !lKitChl"

      if !Empty( ::cLotIni ) .AND. !Empty( ::cLotFin )
         cExpLine       += ' .and. AllTrim( cLote ) >= "' + AllTrim( ::cLotIni ) + '" .and. AllTrim( cLote ) <= "' + AllTrim( ::cLotFin ) + '"'
      end

      if !::lAllArt
         cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
      end

      ::oAlbPrvL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbPrvL:cFile ), ::oAlbPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

      ::oAlbPrvT:GoTop()

      while !::lBreak .AND. !::oAlbPrvT:Eof()

         if lChkSer( ::oAlbPrvT:cSerAlb, ::aSer )

            if ::oAlbPrvL:Seek( ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb )

               while ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb == ::oAlbPrvL:cSerAlb + Str( ::oAlbPrvL:nNumAlb ) + ::oAlbPrvL:cSufAlb .AND. ! ::oAlbPrvL:eof()


                  if !( ::lExcCero .AND. ( nTotNAlbPrv( ::oAlbPrvL ) == 0 ) )                                                 .AND. !( ::lExcImp .AND. ( nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 ) )

                     ::oDbf:Append()

                     ::oDbf:cCodPrv    := ::oAlbPrvT:cCodPrv
                     ::oDbf:cNomPrv    := ::oAlbPrvT:cNomPrv
                     ::oDbf:cTipDoc    := "Alb. Prv."
                     ::oDbf:cNumDoc    := ::oAlbPrvT:cSerAlb + "/" + Str( ::oAlbPrvT:nNumAlb ) + "/" + ::oAlbPrvT:cSufAlb
                     ::oDbf:dFecDoc    := ::oAlbPrvT:dFecAlb
                     ::oDbf:cCodArt    := ::oAlbPrvL:cRef
                     ::oDbf:cNomArt    := ::oAlbPrvL:cDetalle
                     ::oDbf:cCodFam    := ::oAlbPrvL:cCodFam
                     ::oDbf:cLote      := ::oAlbPrvL:cLote
                     ::oDbf:nTotCaj    := ::oAlbPrvL:nCanEnt
                     ::oDbf:nTotUni    := nTotNAlbPrv( ::oAlbPrvL )
                     ::oDbf:nTotImp    := nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                     ::oDbf:Save()

                  end

                  ::oAlbPrvL:Skip()

               end

            end

         end

         ::oAlbPrvT:Skip()

         ::oMtrInf:AutoInc( ::oAlbPrvT:OrdKeyNo() )

      end

      ::oAlbPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ) )

      ::oAlbPrvL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbPrvL:cFile ) )

   end



   if ::lFactura

      ::oFacPrvT:OrdSetFocus( "dFecFac" )
      ::oFacPrvL:OrdSetFocus( "nNumFac" )

      cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

      if !::lAllPrv
         cExpHead       += ' .and. cCodPrv >= "' + Rtrim( ::cPrvOrg ) + '" .and. cCodPrv <= "' + Rtrim( ::cPrvDes ) + '"'
      end

      if !Empty( ::oFilter:cExpresionFilter )
         cExpHead       += " .and. " + ::oFilter:cExpresionFilter
      end

      ::oFacPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ), ::oFacPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oFacPrvT:OrdKeyCount() )

      cExpLine          := "!lControl .and. !lKitChl"

      if !Empty( ::cLotIni ) .AND. !Empty( ::cLotFin )
         cExpLine       += ' .and. cLote >= "' + ::cLotIni + '" .and. cLote <= "' + ::cLotFin + '"'
      end

      if !::lAllArt
         cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
      end

      ::oFacPrvL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvL:cFile ), ::oFacPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

      ::oFacPrvT:GoTop()

      while !::lBreak .AND. !::oFacPrvT:Eof()

         if lChkSer( ::oFacPrvT:cSerFac, ::aSer )

            if ::oFacPrvL:Seek( ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac )

               while ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac == ::oFacPrvL:cSerFac + Str( ::oFacPrvL:nNumFac ) + ::oFacPrvL:cSufFac .AND. ! ::oFacPrvL:eof()


                  if !( ::lExcCero .AND. ( nTotNFacPrv( ::oFacPrvL ) == 0 ) )                                                 .AND. !( ::lExcImp .AND. ( nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 ) )

                     ::oDbf:Append()

                     ::oDbf:cCodPrv    := ::oFacPrvT:cCodPrv
                     ::oDbf:cNomPrv    := ::oFacPrvT:cNomPrv
                     ::oDbf:cTipDoc    := "Fac. Prv."
                     ::oDbf:cNumDoc    := ::oFacPrvT:cSerFac + "/" + Str( ::oFacPrvT:nNumFac ) + "/" + ::oFacPrvT:cSufFac
                     ::oDbf:dFecDoc    := ::oFacPrvT:dFecFac
                     ::oDbf:cCodArt    := ::oFacPrvL:cRef
                     ::oDbf:cNomArt    := ::oFacPrvL:cDetalle
                     ::oDbf:cCodFam    := ::oFacPrvL:cCodFam
                     ::oDbf:cLote      := ::oFacPrvL:cLote
                     ::oDbf:nTotCaj    := ::oFacPrvL:nCanEnt
                     ::oDbf:nTotUni    := nTotNFacPrv( ::oFacPrvL )
                     ::oDbf:nTotImp    := nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                     ::oDbf:Save()

                  end

                  ::oFacPrvL:Skip()

               end

            end

         end

         ::oFacPrvT:Skip()

         ::oMtrInf:AutoInc( ::oFacPrvT:OrdKeyNo() )

      end

      ::oFacPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ) )

      ::oFacPrvL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvL:cFile ) )

   end

   ::oMtrInf:AutoInc( ::oFacPrvT:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
