#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\OInfXAlb.prg"
_HB_CLASS OInfXAlb ; function OInfXAlb ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OInfXAlb", iif( .T., { @TPrvGrpPrv() }, { @HBObject() } ), @OInfXAlb() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )

   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "No facturado", "Facturado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER Create(); oClass:AddMethod( "Create", @OInfXAlb_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @OInfXAlb_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @OInfXAlb_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @OInfXAlb_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @OInfXAlb_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OInfXAlb ;



static FUNCTION OInfXAlb_Create( ) ; local Self AS CLASS OInfXAlb := QSelf() AS CLASS OInfXAlb

   ::CreateFields()

   ::AddTmpIndex ( "cCodGrp", "cCodGrp + cCodPrv" )

   ::AddGroup( {|| ::oDbf:cCodGrp }, {|| "Grupo proveedor  : " + Rtrim( ::oDbf:cCodGrp ) + "-" + Rtrim( ::oDbf:cNomGrp ) }, {||"Total grupo proveedores..."} )
   ::AddGroup( {|| ::oDbf:cCodGrp + ::oDbf:cCodPrv },  {|| "Proveedor : " + Rtrim( ::oDbf:cCodPrv ) + " - " + Rtrim( ::oDbf:cNomPrv ) }, {|| "Total proveedor..." } )

RETURN ( self )



static FUNCTION OInfXAlb_OpenFiles( ) ; local Self AS CLASS OInfXAlb := QSelf() AS CLASS OInfXAlb

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbPrvT := DbfServer( "ALBPROVT.DBF", ):NewOpen( "ALBPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "ALBPROVT.CDX" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

   ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION OInfXAlb_CloseFiles( ) ; local Self AS CLASS OInfXAlb := QSelf() AS CLASS OInfXAlb

   if !Empty( ::oAlbPrvT ) .AND. ::oAlbPrvT:Used()
      ::oAlbPrvT:End()
   end
   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oAlbPrvT := nil
   ::oAlbPrvL := nil
   ::oDbfIva := nil

RETURN ( Self )



static FUNCTION OInfXAlb_lResource( cFld ) ; local Self AS CLASS OInfXAlb := QSelf() AS CLASS OInfXAlb

   local cEstado := "Todos"

   if !::StdResource( "INFDETGRPPRV" )
      return .F.
   end



   if !::oDefGrpPrv( 70, 71, 80, 81, 90 )
      return .F.
   end

   if !::oDefPrvInf( 150, 151, 160, 161, 170 )
      return .F.
   end





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::oMtrInf:SetTotal( ::oAlbPrvT:Lastrec() )

   ::CreateFilter( aItmAlbPrv(), ::oAlbPrvT:cAlias )

RETURN .T.






static FUNCTION OInfXAlb_lGenerate( ) ; local Self AS CLASS OInfXAlb := QSelf() AS CLASS OInfXAlb

   local cExpHead  := ""
   local cCodGrp
   local aTotAlb


   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()






   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "Grp. prov.: " + if( ::lGrpPrvAll, "Todos", AllTrim( ::cGrpPrvOrg ) + " > " + AllTrim( ::cGrpPrvDes ) ) }, {|| "Proveedor : " + if( ::lAllPrv, "Todos", AllTrim( ::cPrvOrg ) + " > " + AllTrim (::cPrvDes ) ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] } }



   ::oAlbPrvT:OrdSetFocus( "dFecAlb" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lFacturado .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lFacturado .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllPrv
      cExpHead       += ' .and. cCodPrv >= "' + Rtrim( ::cPrvOrg ) + '" .and. cCodPrv <= "' + Rtrim( ::cPrvDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ), ::oAlbPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbPrvT:OrdKeyCount() )

   ::oAlbPrvT:GoTop()

   while !::lBreak .AND. !::oAlbPrvT:Eof()


      cCodGrp        := cGruPrv( ::oAlbPrvT:cCodPrv, ::oDbfPrv )



      if ( ::lGrpPrvAll .OR. ( cCodGrp >= ::cGrpPrvOrg .AND. cCodGrp <= ::cGrpPrvDes ) ) .AND. lChkSer( ::oAlbPrvT:cSerAlb, ::aSer )

         aTotAlb        := aTotAlbPrv (::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb, ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::oDbfIva, ::oDbfDiv, nil, .F. )

         ::oDbf:Append()

         ::oDbf:cCodGrp    := cCodGrp
         ::oDbf:cNomGrp    := cNomGrp( cCodGrp, ::oGrpPrv:oDbf )
         ::oDbf:cCodPrv    := ::oAlbPrvT:cCodPrv
         ::oDbf:cNomPrv    := ::oAlbPrvT:cNomPrv
         ::oDbf:cDocMov    := AllTrim( ::oAlbPrvT:cSerAlb ) + "/" + AllTrim ( Str( ::oAlbPrvT:nNumAlb ) ) + "/" + AllTrim ( ::oAlbPrvT:cSufAlb )
         ::oDbf:dFecMov    := ::oAlbPrvT:dFecAlb
         ::oDbf:cTipDoc    := "Albarán"
         ::oDbf:nImpTot    := aTotAlb[1]
         ::oDbf:nIvaTot    := aTotAlb[2]
         ::oDbf:nTotFin    := aTotAlb[4]

         ::oDbf:Save()

      end

      ::oAlbPrvT:Skip()

      ::oMtrInf:AutoInc( ::oAlbPrvT:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oAlbPrvT:Lastrec() )


   ::oAlbPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbPrvT:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
