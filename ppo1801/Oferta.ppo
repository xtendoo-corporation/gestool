#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 48 ".\.\Prg\Oferta.prg"
static oWndBrw

static dbfOferta
static dbfArticulo
static dbfFamilia
static dbfTemporada
static dbfPro
static dbfTblPro
static dbfCodebar
static dbfDiv
static dbfIva
static dbfDoc
static dbfArtLbl
static dbfClient
static dbfArtKit
static dbfArtVta
static dbfPedCliL
static dbfAlbCliL
static dbfFacCliL
static dbfFacRecL
static dbfTikL
static dbfPedPrvL
static dbfAlbPrvL
static dbfFacPrvL
static dbfRctPrvL
static dbfProLin
static dbfProMat

static aTipoOferta   := { "Artículos", "Familias", "Tipo de artículo", "Temporadas", "Fabricantes" }
static aBmpOferta    := { "gc_object_cube_16", "gc_cubes_16", "gc_objects_16", "gc_photographic_filters_16", "gc_cloud_sun_16", "gc_bolt_16" }

static oBandera

static oGrpCli
static oNewImp
static oUndMedicion
static oTipArt
static oFabricante

static oStock

static cPouDiv
static nDecDiv

static filOferta
static tmpOferta

static oBtnAnterior
static oBtnSiguiente
static oBtnCancelar

static lOpenFiles := .F.

static nLabels    := 1

static lEuro      := .F.
static bEdit      := { |aBlank, aoGet, dbfOferta, oBrw, bWhen, bValid, nMode, cCodArt | EdtRec( aBlank, aoGet, dbfOferta, oBrw, bWhen, bValid, nMode, cCodArt ) }





STATIC FUNCTION OpenFiles()

   local oBlock
   local oError

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de ofertas" )
      Return ( .F. )
   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   lOpenFiles           := .T.

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOferta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRO.DBF" ), ( cCheckArea( "PRO", @dbfPro ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TBLPRO.DBF" ), ( cCheckArea( "TBLPRO", @dbfTblPro ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RDOCUMEN.DBF" ), ( cCheckArea( "RDOCUMEN", @dbfDoc ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "RDOCUMEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "CTIPO" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtLbl.Dbf" ), ( cCheckArea( "ArtLbl", @dbfArtLbl ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtLbl.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfArtKit ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @dbfArtVta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Temporadas.Dbf" ), ( cCheckArea( "TEMPORADA", @dbfTemporada ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "Temporadas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIT", @dbfPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIL.DBF" ), ( cCheckArea( "FACCLIL", @dbfFacCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECL.DBF" ), ( cCheckArea( "FACRECL", @dbfFacRecL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.DBF" ), ( cCheckArea( "PedPrvL", @dbfPedPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cRef" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cRef" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cRef" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.DBF" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cCodArt" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.DBF" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cCodArt" )

   oBandera             := TBandera():New

   oStock            := TStock():Create( cPatEmp() )
   if !oStock:lOpenFiles()
      lOpenFiles     := .F.
   end

   oGrpCli              := TGrpCli():Create()
   if !oGrpCli:OpenFiles()
      lOpenFiles        := .F.
   end

   oNewImp              := TNewImp():Create( cPatEmp() )
   if !oNewImp:OpenFiles()
      lOpenFiles        := .F.
   end

   oUndMedicion         := UniMedicion():Create( cPatEmp() )
   if !oUndMedicion:OpenFiles()
      lOpenFiles        := .F.
   end

   oTipArt              := TTipArt():Create( cPatEmp() )
   if !oTipArt:OpenFiles()
      lOpenFiles        := .F.
   end

   oFabricante          := TFabricantes():Create( cPatEmp() )
   if !oFabricante:OpenFiles()
      lOpenFiles        := .F.
   end

   cPouDiv              := cPouDiv( cDivEmp(), dbfDiv )
   nDecDiv              := nDouDiv( cDivEmp(), dbfDiv )

   RECOVER USING oError

      lOpenFiles        := .F.
      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

RETURN ( lOpenfiles )



Static Function CloseFiles()

   ( dbfOferta   )->( dbCloseArea() )
   ( dbfArticulo )->( dbCloseArea() )
   ( dbfDiv      )->( dbCloseArea() )
   ( dbfClient   )->( dbCloseArea() )
   ( dbfIva      )->( dbCloseArea() )
   ( dbfFamilia  )->( dbCloseArea() )
   ( dbfPro      )->( dbCloseArea() )
   ( dbfTblPro   )->( dbCloseArea() )

   if !Empty( dbfPedCliL ) .AND. ( dbfPedCliL )->( Used() )
      ( dbfPedCliL )->( dbCloseArea() )
   end

   if !Empty( dbfAlbCliL ) .AND. ( dbfAlbCliL )->( Used() )
      ( dbfAlbCliL )->( dbCloseArea() )
   end

   if !Empty( dbfFacCliL ) .AND. ( dbfFacCliL )->( Used() )
      ( dbfFacCliL )->( dbCloseArea() )
   end

   if !Empty( dbfFacRecL ) .AND. ( dbfPedCliL )->( Used() )
      ( dbfFacRecL )->( dbCloseArea() )
   end

   if !Empty( dbfTikL ) .AND. ( dbfTikL )->( Used() )
      ( dbfTikL )->( dbCloseArea() )
   end

   if !Empty( dbfPedPrvL ) .AND. ( dbfPedPrvL )->( Used() )
      ( dbfPedPrvL )->( dbCloseArea() )
   end

   if !Empty( dbfAlbPrvL ) .AND. ( dbfAlbPrvL )->( Used() )
      ( dbfAlbPrvL )->( dbCloseArea() )
   end

   if !Empty( dbfFacPrvL ) .AND. ( dbfFacPrvL )->( Used() )
      ( dbfFacPrvL )->( dbCloseArea() )
   end

   if !Empty( dbfRctPrvL ) .AND. ( dbfRctPrvL )->( Used() )
      ( dbfRctPrvL )->( dbCloseArea() )
   end

   if !Empty( dbfProLin ) .AND. ( dbfProLin )->( Used() )
      ( dbfProLin )->( dbCloseArea() )
   end

   if !Empty( dbfProMat ) .AND. ( dbfProMat )->( Used() )
      ( dbfProMat )->( dbCloseArea() )
   end

   if !Empty( dbfTemporada ) .AND. ( dbfTemporada )->( Used() )
      ( dbfTemporada )->( dbCloseArea() )
   end

   if dbfArtVta <> nil
      ( dbfArtVta )->( dbCloseArea() )
   end

   if !Empty( dbfArtKit )
      ( dbfArtKit )->( dbCloseArea() )
   end

   if !Empty( dbfArtLbl )
      ( dbfArtLbl )->( dbCloseArea() )
   end

   if !Empty( dbfDoc )
      ( dbfDoc )->( dbCloseArea() )
   end

   if dbfCodebar <> nil
      ( dbfCodebar )->( dbCloseArea() )
   end

   if !Empty( oGrpCli )
      oGrpCli:end()
   end

   if !Empty( oNewImp )
      oNewImp:end()
   end

   if !Empty( oUndMedicion )
      oUndMedicion:end()
   end

   if !Empty( oTipArt )
      oTipArt:end()
   end

   if !Empty( oFabricante )
      oFabricante:end()
   end

   if !Empty( oStock )
      oStock:end()
   end

   dbfArticulo    := nil
   dbfCodebar     := nil
   dbfOferta      := nil
   dbfDiv         := nil
   oBandera       := nil
   oGrpCli        := nil
   oNewImp        := nil
   dbfClient      := nil
   dbfIva         := nil
   dbfFamilia     := nil
   dbfTemporada   := nil
   dbfPro         := nil
   dbfTblPro      := nil
   dbfDoc         := nil

   oUndMedicion   := nil
   oStock         := nil
   oTipArt        := nil
   oFabricante    := nil

   dbfPedCliL     := nil
   dbfAlbCliL     := nil
   dbfFacCliL     := nil
   dbfFacRecL     := nil
   dbfTikL        := nil
   dbfPedPrvL     := nil
   dbfAlbPrvL     := nil
   dbfFacPrvL     := nil
   dbfRctPrvL     := nil
   dbfProLin      := nil
   dbfProMat      := nil

   lOpenFiles     := .F.

   if oWndBrw <> nil
      oWndBrw     := nil
   end

RETURN ( .T. )



FUNCTION Oferta( oMenuItem, oWnd )

   local nLevel

   If( oMenuItem == nil, oMenuItem := "01020", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

   if Empty( oWndBrw )





      nLevel            := Auth():Level( oMenuItem )

      if nAnd( nLevel, 1 ) == 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      if !OpenFiles()
         return nil
      end





      AddMnuNext( "Ofertas", ProcName() )
















      oWndBrw := TShell():New( 0, 0, 22, 80, "Ofertas",, oWnd,,, .F.,,, ( dbfOferta ),,,,, {"Código", "Nombre", "Fecha inicio", "Fecha fin"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfOferta, .F., cDefIva() ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfOferta, .F., cDefIva() ) )}, {||( dbDelRec(  oWndBrw:oBrw, dbfOferta ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfOferta, .F., cDefIva() ) )}, nil, nLevel, "gc_star2_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Origen"
         :bStrData         := {|| aTipoOferta[ Max( ( dbfOferta )->nTblOfe, 1 ) ] }
         :bBmpData         := {|| ( dbfOferta )->nTblOfe }
         :nWidth           := 110
         :AddResource( "gc_object_cube_16" )
         :AddResource( "gc_cubes_16" )
         :AddResource( "gc_objects_16" )
         :AddResource( "gc_photographic_filters_16" )
         :AddResource( "gc_cloud_sun_16" )
         :AddResource( "gc_bolt_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cArtOfe"
         :bEditValue       := {|| ( dbfOferta )->cArtOfe }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cDesOfe"
         :bEditValue       := {|| ( dbfOferta )->cDesOfe }
         :nWidth           := 170
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha inicio"
         :cSortOrder       := "dIniOfe"
         :bEditValue       := {|| Dtoc( ( dbfOferta )->dIniOfe ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha fin"
         :cSortOrder       := "dFinOfe"
         :bEditValue       := {|| Dtoc( ( dbfOferta )->dFinOfe ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "X*Y"
         :bStrData         := {|| Trans( ( dbfOferta )->nUnvOfe, "@E 999" ) + " x" + Trans( ( dbfOferta )->nUncOfe, "@E 999" ) }
         :nWidth           := 50
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bStrData         := {|| Trans( ( dbfOferta )->nPreOfe1, cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bStrData         := {|| Trans( ( dbfOferta )->nPreOfe2, cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bStrData         := {|| Trans( ( dbfOferta )->nPreOfe3, cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bStrData         := {|| Trans( ( dbfOferta )->nPreOfe4, cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bStrData         := {|| Trans( ( dbfOferta )->nPreOfe5, cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bStrData         := {|| Trans( ( dbfOferta )->nPreOfe6, cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Und. maximas"
         :bStrData         := {|| Trans( ( dbfOferta )->nMaxOfe, "@E 999,999" ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      oWndBrw:cHtmlHelp    := "Ofertas"

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfOferta ) )}, "(Z)oom", "Z",,, 8,, .F. )






        oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )






      oWndBrw:NewAt( "DEL",,, {||( DelFecha() )}, "Eliminar (f)echas", "F",,, 16,, .F. )






      oWndBrw:NewAt( "IMP",,, {||( TInfOfr():New( "Listado de ofertas" ):Play() )}, "(L)istado", "L",,, 32,, .F. )






      oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TOfertaLabelGenerator():Create() )}, "Eti(q)uetas", "Q",,, 32,, .F. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:end() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

    ELSE

        oWndBrw:SetFocus()

    end

RETURN NIL



STATIC FUNCTION EdtRec( aBlank, aoGet, dbfOferta, oBrw, lIvaInc, cTipIva, nMode, cCodArt )

    local oDlg
   local oFld
   local oBmpPrimera
   local oBmpSegunda
   local oBmpTercera
   local oGetGrp
   local oGetCli
   local oSayPr1
   local oSayPr2
   local oSayVp1
   local oSayVp2
   local cSayPr1
   local cSayPr2
   local cSayVp1
   local cSayVp2
   local nValDiv           := 1
   local oSay              := Array( 6 )
   local cSay              := Array( 6 )
   local oGetPrc           := Array( 6 )
   local oSayPrc           := Array( 6 )
   local cGetGrp           := RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CGRPOFE" ) ) ], oGrpCli:GetAlias() )
   local cGetCli           := RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CCLIOFE" ) ) ], dbfClient )
   local lCodArt           := ( nMode == 1 .OR. nMode == 4 ) .AND. ( cCodArt <> nil )
   local oTipoOferta
   local cTipoOferta

   If( cCodArt == nil, cCodArt := Space( 18 ), ) ;

   if nMode <> 3 .AND. oUser():lNotCambiarPrecio()
      MsgStop( "No tiene autorización para añadir o modificar ofertas." )
      Return .F.
   end

   if lCodArt .AND. !( dbfArticulo )->( dbSeek( cCodArt ) )
      MsgStop( "Artículo no encontrado" )
      Return .F.
   end

   do case
   case nMode == 1

      aBlank[ ( dbfOferta )->( FieldPos( "NTBLOFE" ) ) ]   := 1
      aBlank[ ( dbfOferta )->( FieldPos( "NUNVOFE" ) ) ]   := 1
        aBlank[ ( dbfOferta )->( FieldPos( "NUNCOFE" ) ) ]    := 1
      aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]   := cCodArt
      aBlank[ ( dbfOferta )->( FieldPos( "DINIOFE" ) ) ]   := Ctod( "" )
      aBlank[ ( dbfOferta )->( FieldPos( "DFINOFE" ) ) ]   := Ctod( "" )
      aBlank[ ( dbfOferta )->( FieldPos( "DFECCHG" ) ) ]   := Ctod( "" )
      cTipoOferta          := "Artículos"
      aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ]   := lIvaInc

   otherwise

      cTipoOferta          := aTipoOferta[ Max( ( dbfOferta )->nTblOfe, 1 ) ]

      if !Empty( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR1" ) ) ] )
         cSayPr1           := retProp( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR1" ) ) ], dbfPro )
         cSayVp1           := retValProp( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR1" ) ) ] + aBlank[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ], dbfTblPro )
      end

      if !Empty( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR2" ) ) ] )
         cSayPr2           := retProp( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR2" ) ) ], dbfPro )
         cSayVp2           := retValProp( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR2" ) ) ] + aBlank[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ], dbfTblPro )
      end

   end

   cPouDiv                 := cPouDiv( cDivEmp(), dbfDiv )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "ofertas", "OFERTA_00",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      oFld := TFolder():ReDefine( 300, {"&Oferta", "&Tipificación", "&Condiciones"}, { "OFERTA_01","OFERTA_03","OFERTA_04" }, oDlg,,,,, .F., )

      oFld:bChange   := {|| ChangeFolder( aBlank, aoGet, nMode, oFld ) }









      oBmpPrimera := TBitmap():ReDefine( 500, "gc_star2_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )






      oTipoOferta := TComboBox():ReDefine( 100, { | u | If( PCount()==0, cTipoOferta, cTipoOferta:= u ) }, aTipoOferta, oFld:aDialogs[ 1 ],,,,,,, .F., {||     ( nMode == 1 .AND. Empty( cCodArt ) )}, aBmpOferta,,,,, "oTipoOferta",,,,,,, )

         oTipoOferta:bChange    := {|| ChangeComboTipo( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTipoOferta, cCodArt ) }









      aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( loaArt( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2 ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. if( !Empty( cCodArt ), .F., ( nMode == 1 .OR. nMode == 4 ) .AND. cCodArt <> nil ) )},, .F., .F.,,,,, {|Self|( BrwArticulo( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] ) )}, nil, "LUPA",, )






        aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ]:= u ) }, oFld:aDialogs[1],, "@S20",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )



      oSayPr1 := TSay():ReDefine( 888, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F., )







      aoGet[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTBLOFE" ) ) ] == 1 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aoGet[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ], oSayVp1, aBlank[ ( dbfOferta )->( FieldPos( "CCODPR1" ) ) ] ) )}, nil, "LUPA",, )





      oSayVp1 := TGetHlp():ReDefine( 271, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      oSayPr2 := TSay():ReDefine( 999, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F., )







      aoGet[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTBLOFE" ) ) ] == 1 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aoGet[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ], oSayVp2, aBlank[ ( dbfOferta )->( FieldPos( "CCODPR2" ) ) ] ) )}, nil, "LUPA",, )





      oSayVp2 := TGetHlp():ReDefine( 281, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "DINIOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "DINIOFE" ) ) ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







        TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "DFINOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "DFINOFE" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( aBlank[ ( dbfOferta )->( FieldPos( "DINIOFE" ) ) ] > aBlank[ ( dbfOferta )->( FieldPos( "DFINOFE" ) ) ], ( msgStop( "Fecha de finalización debe ser mayor o igual a inicio" ), .F. ), .T. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "DFECCHG" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "DFECCHG" ) ) ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )




      TRadMenu():Redefine( { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NCLIOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NCLIOFE" ) ) ]:= u ) }, oFld:aDialogs[1],, { 150, 151, 152 },,,,, .F., {||     ( nMode <> 3 )}, )









      aoGet[ ( dbfOferta )->( FieldPos( "CGRPOFE" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "CGRPOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "CGRPOFE" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( oGetGrp:cText( retFld( aBlank[ ( dbfOferta )->( FieldPos( "CGRPOFE" ) ) ], oGrpCli:GetAlias() ) ), .T. )}, "N/W*",,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NCLIOFE" ) ) ] == 2 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( oGrpCli:Buscar( aoGet[ ( dbfOferta )->( FieldPos( "CGRPOFE" ) ) ] ) )}, nil, "LUPA",, )






      oGetGrp := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cGetGrp, cGetGrp:= u ) }, oFld:aDialogs[1],, "@!",, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "CCLIOFE" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "CCLIOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "CCLIOFE" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cClient( aoGet[ ( dbfOferta )->( FieldPos( "CCLIOFE" ) ) ], dbfClient, oGetCli ) )}, "N/W*",,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NCLIOFE" ) ) ] == 3 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwClient( aoGet[ ( dbfOferta )->( FieldPos( "CCLIOFE" ) ) ], oGetCli, .F. ) )}, nil, "LUPA",, )






      oGetCli := TGetHlp():ReDefine( 171, { | u | If( PCount()==0, cGetCli, cGetCli:= u ) }, oFld:aDialogs[1],, "@!",, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oBmpSegunda := TBitmap():ReDefine( 500, "gc_symbol_euro_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )





      aoGet[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] := TRadMenu():Redefine( { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ]:= u ) }, oFld:aDialogs[2],, { 180, 181 },,,,, .F., {||     ( nMode <> 3 )}, )







      aoGet[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ] := TCheckBox():ReDefine( 182, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, .F. )





      oSay[ 1 ] := TSay():ReDefine( 300,, oFld:aDialogs[2],,,, .F.,, .F., .F., )
      oSay[ 2 ] := TSay():ReDefine( 301,, oFld:aDialogs[2],,,, .F.,, .F., .F., )
      oSay[ 3 ] := TSay():ReDefine( 302,, oFld:aDialogs[2],,,, .F.,, .F., .F., )
      oSay[ 4 ] := TSay():ReDefine( 303,, oFld:aDialogs[2],,,, .F.,, .F., .F., )
      oSay[ 5 ] := TSay():ReDefine( 304,, oFld:aDialogs[2],,,, .F.,, .F., .F., )
      oSay[ 6 ] := TSay():ReDefine( 305,, oFld:aDialogs[2],,,, .F.,, .F., .F., )













      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ] := TGetHlp():ReDefine( 191, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ] := TGetHlp():ReDefine( 192, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ] := TGetHlp():ReDefine( 193, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ] := TGetHlp():ReDefine( 194, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ] := TGetHlp():ReDefine( 195, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalIva( aBlank[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ] ) ) }, .F., .T.,,,,,, nil,,, )













      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ] := TGetHlp():ReDefine( 251, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ] := TGetHlp():ReDefine( 252, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ] := TGetHlp():ReDefine( 253, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ] := TGetHlp():ReDefine( 254, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ] ) ) }, .F., .T.,,,,,, nil,,, )









      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ] := TGetHlp():ReDefine( 255, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ], aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ] ) )}, "N/W*",,,,, .F., {||     ( oTipoOferta:nAt == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3  )}, {|nKey,nFlags,Self| ( CalBas( aBlank[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ], aBlank[ ( dbfOferta )->( FieldPos( "LIVAINC" ) ) ], if( !Empty( cTipIva ) .AND. oTipoOferta:nAt == 1, cTipIva, RetFld( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfArticulo, "TipoIva", "Codigo" ) ), ( dbfArticulo )->cCodImp, aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ] ) ) }, .F., .T.,,,,,, nil,,, )










      aoGet[ ( dbfOferta )->( FieldPos( "NDTOPCT" ) ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NDTOPCT" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NDTOPCT" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 99.99",,,,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )










      aoGet[ ( dbfOferta )->( FieldPos( "NDTOLIN" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NDTOLIN" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NDTOLIN" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv,,,,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      TRadMenu():Redefine( { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NTIPXBY" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NTIPXBY" ) ) ]:= u ) }, oFld:aDialogs[2],, { 220, 221 },,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 2 .AND. nMode <> 3 )}, )







        TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NUNVOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NUNVOFE" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999", {||    ( isBig( aBlank[ ( dbfOferta )->( FieldPos( "NUNVOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NUNCOFE" ) ) ] ) )}, "N/W*",,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 2 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








        TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NUNCOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NUNCOFE" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999", {||    ( isBig( aBlank[ ( dbfOferta )->( FieldPos( "NUNVOFE" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NUNCOFE" ) ) ] ) )}, "N/W*",,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 2 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      oBmpTercera := TBitmap():ReDefine( 500, "gc_clipboard_check_edit_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )








      aoGet[ ( dbfOferta )->( FieldPos( "NMINCAN" ) ) ] := TRadMenu():Redefine( { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NMINCAN" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NMINCAN" ) ) ]:= u ) }, oFld:aDialogs[3],, { 100, 110 },,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. nMode <> 3 )}, )






      aoGet[ ( dbfOferta )->( FieldPos( "NIMPMIN" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NIMPMIN" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NIMPMIN" ) ) ]:= u ) }, oFld:aDialogs[3],, cPouDiv,,,,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NMINCAN" ) ) ] == 1 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aoGet[ ( dbfOferta )->( FieldPos( "NMINTIP" ) ) ] := TRadMenu():Redefine( { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NMINTIP" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NMINTIP" ) ) ]:= u ) }, oFld:aDialogs[3],, { 120, 130 },,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NMINCAN" ) ) ] == 2 .AND. nMode <> 3 )}, )






      aoGet[ ( dbfOferta )->( FieldPos( "NCAJMIN" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NCAJMIN" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NCAJMIN" ) ) ]:= u ) }, oFld:aDialogs[3],, MasUnd(),,,,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NMINCAN" ) ) ] == 2 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NMINTIP" ) ) ] == 1 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aoGet[ ( dbfOferta )->( FieldPos( "NUNDMIN" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aBlank[ ( dbfOferta )->( FieldPos( "NUNDMIN" ) ) ], aBlank[ ( dbfOferta )->( FieldPos( "NUNDMIN" ) ) ]:= u ) }, oFld:aDialogs[3],, MasUnd(),,,,,,, .F., {||     ( aBlank[ ( dbfOferta )->( FieldPos( "NTIPOFE" ) ) ] == 1 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NMINCAN" ) ) ] == 2 .AND. aBlank[ ( dbfOferta )->( FieldPos( "NMINTIP" ) ) ] == 2 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      oBtnAnterior := TButton():ReDefine( 500, {||(  BotonAnterior( oFld ) )}, oDlg,,, .F., {||         (     nMode <> 3 )},,, .F. )





      oBtnSiguiente := TButton():ReDefine( 550, {||(  BotonSiguiente( aBlank, aoGet, nMode, oBrw, oFld, oDlg, oTipoOferta, dbfOferta ) )}, oDlg,,, .F., {||         (     nMode <> 3 )},,, .F. )





      oBtnCancelar := TButton():ReDefine( 560, {||(     oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart := {|| StartEdtRec( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTipoOferta, cCodArt, oSay ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBmpPrimera:End()
   oBmpSegunda:End()
   oBmpTercera:End()

RETURN ( oDlg:nResult == 1 )



static function StartEdtRec( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTipoOferta, cCodArt, oSay )

   ChangeComboTipo( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTipoOferta, cCodArt )

   oBtnAnterior:Hide()

   if( !Empty( cCodArt ), aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:lValid(), )

   InitProp( aBlank, aoGet, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2 )

   aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:SetFocus()

   StartPrecios( oSay, aoGet )

Return .T.



static function BotonAnterior( oFld )

   do case
      case oFld:nOption == 2
           oFld:SetOption( 1 )
           oBtnAnterior:Hide()

      case oFld:nOption == 3
           oFld:SetOption( 2 )
           SetWindowText( oBtnSiguiente:hWnd, "Siguiente >" )

   end

Return .T.



static function BotonSiguiente( aBlank, aoGet, nMode, oBrw, oFld, oDlg, oTipoOferta, dbfOferta )

   do case

      case oFld:nOption == 1
           if lChkOfe( aBlank, dbfOferta, nMode, aoGet, oFld )
               oFld:SetOption( 2 )
               oBtnAnterior:Show()
           end

      case oFld:nOption == 2
           oFld:SetOption( 3 )
           SetWindowText( oBtnSiguiente:hWnd, "Terminar" )

      case oFld:nOption == 3

         if lChkOfe( aBlank, dbfOferta, nMode, aoGet, oFld )

            aBlank[ ( dbfOferta )->( FieldPos( "NTBLOFE" ) ) ]      := oTipoOferta:nAt

            WinGather( aBlank, aoGet, dbfOferta, oBrw, nMode )

            oDlg:end( 1 )

         end

   end

Return .T.



Static Function StartPrecios( oSay, aoGet )

   oSay[ 1 ]:SetText( uFieldEmpresa( "cTxtTar1", "Precio 1" ) )

   if uFieldEmpresa( "lShwTar2" )
      oSay[ 2 ]:SetText( uFieldEmpresa( "cTxtTar2", "Precio 2" ) )
   else
      oSay[ 2 ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar3" )
      oSay[ 3 ]:SetText( uFieldEmpresa( "cTxtTar3", "Precio 3" ) )
   else
      oSay[ 3 ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar4" )
      oSay[ 4 ]:SetText( uFieldEmpresa( "cTxtTar4", "Precio 4" ) )
   else
      oSay[ 4 ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar5" )
      oSay[ 5 ]:SetText( uFieldEmpresa( "cTxtTar5", "Precio 5" ) )
   else
      oSay[ 5 ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar6" )
      oSay[ 6 ]:SetText( uFieldEmpresa( "cTxtTar6", "Precio 6" ) )
   else
      oSay[ 6 ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ]:Hide()
   end

Return .T.



static function ChangeFolder( aBlank, aoGet, nMode, oFld )

   do case
      case oFld:nOption == 1
           oBtnAnterior:Hide()
           SetWindowText( oBtnSiguiente:hWnd, "Siguiente >" )

      case oFld:nOption == 2
           oBtnAnterior:Show()
           SetWindowText( oBtnSiguiente:hWnd, "Siguiente >" )

      case oFld:nOption == 3
           oBtnAnterior:Show()
           SetWindowText( oBtnSiguiente:hWnd, "Terminar" )

   end

Return .T.



Static function InitProp( aBlank, aoGet, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2 )

   if nMode == 1

      oSayPr1:Hide()
      oSayPr2:Hide()
      oSayVp1:Hide()
      oSayVp2:Hide()

      aoGet[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ]:Hide()
      aoGet[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ]:Hide()

   else

      if Empty( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR1" ) ) ] )
         oSayPr1:Hide()
         oSayVp1:Hide()
         aoGet[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ]:Hide()
      end

      if Empty( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR2" ) ) ] )
         oSayPr2:Hide()
         oSayVp2:Hide()
         aoGet[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ]:Hide()
      end

   end

RETURN nil



STATIC FUNCTION delFecha()

    local oDlg
    local dFecIni    := ctod( "01/01/" + Str( Year( Date() ) ) )
    local dFecFin    := date()

    oDlg = TDialog():New(,,,,, "DELFEC",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





        TGetHlp():ReDefine( 100, { | u | If( PCount()==0, dFecIni, dFecIni:= u ) }, oDlg,,,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )





        TGetHlp():ReDefine( 110, { | u | If( PCount()==0, dFecFin, dFecFin:= u ) }, oDlg,,,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )





        TButton():ReDefine( 502, {||(  mkdelfec( dFecIni, dFecFin ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 510, {||(     oDlg:end() )}, oDlg,,, .F.,,,, .F. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN NIL



STATIC FUNCTION mkDelFec( dFecIni, dFecFin )

    local nRec    := ( dbfOferta )->( recno() )

   CursorWait()

    ( dbfOferta )->( dbGoTop() )

    WHILE !( dbfOferta )->( eof() )


        IF ( dbfOferta )->DINIOFE >= dFecIni .AND.    ( dbfOferta )->DFINOFE <= dFecFin

            delRecno( dbfOferta, oWndBrw:oBrw )

        end

        ( dbfOferta )->( dbSkip() )

    end

    ( dbfOferta )->( dbGoTo( nRec ) )

   CursorWe()

    oWndBrw:oBrw:refresh()

RETURN NIL



FUNCTION isBig( nUndVen, nUndCob )

    IF nUndVen < nUndCob
      msgStop( "Las unidades a vender debe ser mayor o igual que ha cobrar." )
        RETURN .F.
    end

RETURN .T.



FUNCTION BrwOfe( oGet, dbfOferta, oGet2 )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
   local nOrd        := GetBrwOpt( "BrwOfe" )
    local oCbxOrd
   local aCbxOrd     := { "Código", "Nombre" }
   local cCbxOrd
   local lClose      := .F.
   local nLevelUsr   := Auth():Level( "01020" )

   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   if ( dbfOferta ) == nil
        OpenFiles()
      lClose         := .T.
   end

   nOrd              := ( dbfOferta )->( OrdSetFocus( nOrd ) )

   ( dbfOferta )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Ofertas", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfOferta ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfOferta ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfOferta )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfOferta
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Oferta"

      with object ( oBrw:AddCol() )
         :cHeader          := "Origen"
         :bStrData         := {|| aTipoOferta[ Max( ( dbfOferta )->nTblOfe, 1 ) ] }
         :bBmpData         := {|| ( dbfOferta )->nTblOfe }
         :nWidth           := 110
         :AddResource( "gc_object_cube_16" )
         :AddResource( "gc_cubes_16" )
         :AddResource( "gc_objects_16" )
         :AddResource( "gc_photographic_filters_16" )
         :AddResource( "gc_cloud_sun_16" )
         :AddResource( "gc_bolt_16" )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cArtOfe"
         :bEditValue       := {|| ( dbfOferta )->cArtOfe }
         :nWidth           := 90
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cDesOfe"
         :bEditValue       := {|| ( dbfOferta )->cDesOfe }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfOferta, .F., cDefIva() ) )}, oDlg,,, .F., {||     ( nAnd( nLevelUsr, 2 ) <> 0 )},,, .F. )





        TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfOferta, .F., cDefIva() ) )}, oDlg,,, .F., {||     ( nAnd( nLevelUsr, 4 ) <> 0 )},,, .F. )

   oDlg:AddFastKey( 113, {|| if( nAnd( nLevelUsr, 2 ) <> 0, WinAppRec( oBrw, bEdit, dbfOferta, .F., cDefIva() ), ) } )
   oDlg:AddFastKey( 114, {|| if( nAnd( nLevelUsr, 4 ) <> 0, WinEdtRec( oBrw, bEdit, dbfOferta, .F., cDefIva() ), ) } )
   oDlg:AddFastKey( 116, {|| oDlg:end(1) } )
   oDlg:AddFastKey( 13, {|| oDlg:end(1) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   If oDlg:nResult == 1

      oGet:cText( (dbfOferta)->CARTOFE )

        IF oGet2 <> NIL
         oGet2:cText( (dbfOferta)->CDESOFE )
        end

    end

   DestroyFastFilter( dbfOferta )

   SetBrwOpt( "BrwOfe", ( dbfOferta )->( OrdNumber() ) )

    IF lClose
        CloseFiles()
    ELSE
      ( dbfOferta )->( OrdSetFocus( nOrd ) )
    end

    oGet:setFocus()

RETURN ( oDlg:nResult == 1 )



FUNCTION AppOfeArt( cCodArt, lIvaInc, cTipIva, oBrw, dbfTmpOfe )

   OpenFiles()

   WinAppRec( oBrw, bEdit, dbfTmpOfe, lIvaInc, cTipIva, cCodArt )

   if oBrw <> NIL
      oBrw:Refresh()
   end

   CloseFiles()

RETURN NIL



FUNCTION EdtOfeArt( cCodArt, lIvaInc, cTipIva, oBrw, dbfTmpOfe )

   OpenFiles()

   WinEdtRec( oBrw, bEdit, dbfTmpOfe, lIvaInc, cTipIva, cCodArt )

   CloseFiles()

   if oBrw <> nil
      oBrw:Refresh()
   end

RETURN NIL



FUNCTION DelOfeArt( cCodArt, lIvaInc, cTipIva, oBrw, dbfTmpOfe )

   OpenFiles()

   dbDelRec( oBrw, dbfTmpOfe )

   CloseFiles()

   if oBrw <> nil
      oBrw:Refresh()
   end

RETURN NIL



STATIC FUNCTION lChkOfe( aBlank, dbfOferta, nMode, aGet, oFld )

   local lRet     := .T.

   if nMode == 1





      if Empty( aBlank[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ] )

         MsgStop( "Código de la oferta no puede estar vacío" )
         lRet     := .F.

      elseif Empty( aBlank[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] )

         MsgStop( "Descripción de la oferta no puede estar vacía" )
         lRet     := .F.

      end





      oFld:SetOption( 1 )
      oBtnAnterior:Hide()
      SetWindowText( oBtnSiguiente:hWnd, "Siguiente >" )
      aGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:SetFocus()

   end

   aBlank[ ( dbfOferta )->( FieldPos( "DFECCHG" ) )  ] := date()

RETURN lRet



static function loaArt( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2 )

   local lValid      := .T.
   local lMessage    := .T.
   local xValor      := aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:varGet()

   If( nValDiv == nil, nValDiv := 1, ) ;

   if Empty( xValor )
      lMessage       := .F.
   end





   xValor            := cSeekCodebar( xValor, dbfCodebar, dbfArticulo )





   if ( dbfArticulo )->( dbSeek( xValor ) )

      aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) )  ]:cText( xValor )
      aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) )  ]:cText( ( dbfArticulo )->NOMBRE )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE1") ) ]:cText( ( dbfArticulo )->PVENTA1 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE2") ) ]:cText( ( dbfArticulo )->PVENTA2 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE3") ) ]:cText( ( dbfArticulo )->PVENTA3 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE4") ) ]:cText( ( dbfArticulo )->PVENTA4 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE5") ) ]:cText( ( dbfArticulo )->PVENTA5 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREOFE6") ) ]:cText( ( dbfArticulo )->PVENTA6 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA1") ) ]:cText( ( dbfArticulo )->PVTAIVA1 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA2") ) ]:cText( ( dbfArticulo )->PVTAIVA2 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA3") ) ]:cText( ( dbfArticulo )->PVTAIVA3 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA4") ) ]:cText( ( dbfArticulo )->PVTAIVA4 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA5") ) ]:cText( ( dbfArticulo )->PVTAIVA5 / nValDiv )
      aoGet[ ( dbfOferta )->( FieldPos( "NPREIVA6") ) ]:cText( ( dbfArticulo )->PVTAIVA6 / nValDiv )

         aBlank[ ( dbfOferta )->( FieldPos( "CCODPR1" ) ) ] := ( dbfArticulo )->cCodPrp1
         aBlank[ ( dbfOferta )->( FieldPos( "CCODPR2" ) ) ] := ( dbfArticulo )->cCodPrp2

         if !empty( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR1" ) ) ] )

            oSayPr1:SetText( retProp( ( dbfArticulo )->cCodPrp1, dbfPro ) )
            oSayPr1:Show()
            aoGet[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ]:show()
            oSayVp1:show()

         else

            oSayPr1:hide()
            aoGet[ ( dbfOferta )->( FieldPos( "CVALPR1" ) ) ]:hide()
            oSayVp1:hide()

         end

         if !empty( aBlank[ ( dbfOferta )->( FieldPos( "CCODPR2" ) ) ] )

            oSayPr2:SetText( retProp( ( dbfArticulo )->cCodPrp2, dbfPro ) )
            oSayPr2:show()
            aoGet[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ]:show()
            oSayVp2:show()

         else

            oSayPr2:hide()
            aoGet[ ( dbfOferta )->( FieldPos( "CVALPR2" ) ) ]:hide()
            oSayVp2:hide()

         end

   ELSE


      if lMessage
         MsgStop( "Artículo no encontrado." )
         lValid         := .F.
      end

   end

RETURN lValid







FUNCTION EdmOfe( cCodRut, cPathTo, oStru )




















   local n           := 0
   local cChr
   local fTar
   local cFilEdm
   local cFilOdb
   local nWrote
   local nRead
   local dbfOferta

   If( cCodRut == nil, cCodRut := "001", ) ;
   If( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;

   cCodRut           := SubStr( cCodRut, -3 )

   cFilEdm           := cPathTo + "EOFER" + cCodRut + ".TXT"
   cFilOdb           := cPathTo + "EOFER" + cCodRut + ".ODB"





   IF file( cFilEdm )
      fErase( cFilEdm )
   end

   fTar     := fCreate( cFilEdm )





   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOferta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oStru:oMetUno:cText   := "Ofertas"
   oStru:oMetUno:SetTotal( ( dbfOferta )->( LastRec() ) )

   WHILE !( dbfOferta )->( eof() )

      cChr  := "+"
      if (dbfOferta)->NCLIOFE == 2
      cChr  += Space( 3 ) + Rjust( ( dbfOferta )->CGRPOFE, "0", 4 )
      else
      cChr  += Rjust( ( dbfOferta )->CCLIOFE, "0", 7 )
      end
      cChr  += Rjust( ( dbfOferta )->CARTOFE, Space(1), 13 ) + "@"
      cChr  += Rtrim( ( dbfOferta )->CARTOFE ) + "@"
      cChr  += Str( ( dbfOferta )->NTIPOFE, 1 ) + "@"
      if ( dbfOferta )->NTIPOFE == 1
      cChr  += AllTrim( Str( ( dbfOferta )->nPreOfe1, 10 ) ) + "@"
      else
      cChr  += AllTrim( Str( ( dbfOferta )->NUNVOFE, 2 ) ) + "@"
      end
      cChr  += AllTrim( Str( ( dbfOferta )->NUNCOFE, 2 ) ) + "@"
      cChr  += Dtos( ( dbfOferta )->DINIOFE ) + "@"
      cChr  += Dtos( ( dbfOferta )->DFINOFE ) + "@"
      cChr  += Rjust( ( dbfOferta )->CARTOFE, Space(1), 13 ) + "@"
      cChr  += "0"
      cChr  += Chr(13)+Chr(10)

      nWrote:= fwrite( fTar, cChr, nRead )

      oStru:oMetUno:Set( ++n )







      ( dbfOferta )->( dbSkip() )

   end

   ( dbfOferta )->( dbCloseArea() )

   fClose( fTar )

   if file( FullCurDir() + "CONVER.EXE" )
      WinExec( FullCurDir() + "CONVER.EXE " + cFilEdm + " " + cFilOdb + " 64 -x", 6 )
   end

RETURN NIL



Static Function CalIva( nPrecio, lIvaInc, cTipIva, cCodImp, oGetIva )

   local nIvaPct     := nIva( dbfIva, cTipIva )





   if !Empty( cCodImp )
      nPrecio        += oNewImp:nValImp( cCodImp, .T., nIvaPct )
   end





   nPrecio           += ( nPrecio * nIvaPct / 100 )

   if oGetIva <> NIL
      oGetIva:cText( nPrecio )
   end

Return .T.



Static Function CalBas( nPrecio, lIvaInc, cTipIva, cCodImp, oGetBas )

    local nNewPre
   local nIvaPct  := nIva( dbfIva, cTipIva )





   nNewPre        := ( nPrecio / ( 1 + nIvaPct / 100 ) )





   if !Empty( cCodImp )
      nNewPre     -= oNewImp:nValImp( cCodImp, lIvaInc , nIvaPct )
   end





   oGetBas:cText( nNewPre )

Return .T.



Function nPreOfe( cCodArt, nTarifa, dFecOfe, lIvaInc, dbfOferta )

   local nPreOfe     := 0

   If( nTarifa == nil, nTarifa := 1, ) ;
   If( dFecOfe == nil, dFecOfe := GetSysDate(), ) ;
   If( lIvaInc == nil, lIvaInc := .F., ) ;

   if ( dbfOferta )->( dbSeek( cCodArt ) )

      while ( dbfOferta )->cArtOfe == cCodArt .AND. !( dbfOferta )->( eof() )






         if ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) ) .AND.  ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )







            if lIvaInc

               do case
                  case nTarifa == 1
                     nPreOfe  := ( dbfOferta )->nPreIva1
                  case nTarifa == 2
                     nPreOfe  := ( dbfOferta )->nPreIva2
                  case nTarifa == 3
                     nPreOfe  := ( dbfOferta )->nPreIva3
                  case nTarifa == 4
                     nPreOfe  := ( dbfOferta )->nPreIva4
                  case nTarifa == 5
                     nPreOfe  := ( dbfOferta )->nPreIva5
                  case nTarifa == 6
                     nPreOfe  := ( dbfOferta )->nPreIva6
               end

            else

               do case
                  case nTarifa == 1
                     nPreOfe  := ( dbfOferta )->nPreOfe1
                  case nTarifa == 2
                     nPreOfe  := ( dbfOferta )->nPreOfe2
                  case nTarifa == 3
                     nPreOfe  := ( dbfOferta )->nPreOfe3
                  case nTarifa == 4
                     nPreOfe  := ( dbfOferta )->nPreOfe4
                  case nTarifa == 5
                     nPreOfe  := ( dbfOferta )->nPreOfe5
                  case nTarifa == 6
                     nPreOfe  := ( dbfOferta )->nPreOfe6
               end

            end

         end

        ( dbfOferta )->( dbSkip() )

      end

   end

Return ( nPreOfe )









FUNCTION nXbYOferta( cCodArt, cCodCli, cGrpCli, nCajVen, nUndVen, dFecOfe, dbfOferta, nTblOfe )

   local nModOfe     := 0
   local nTipXbY     := 0
   local nUndGrt     := 0
   local aXbYRet     := { 0, 0 }

   If( nTblOfe == nil, nTblOfe := 1, ) ;





   if ( dbfOferta )->( dbSeek( Padr( cCodArt, 18 ) ) )

      while ( dbfOferta )->cArtOfe == Padr( cCodArt, 18 ) .AND. !( dbfOferta )->( eof() )











         if ( dbfOferta )->nTblOfe  == nTblOfe                                         .AND.  ( dFecOfe >= ( dbfOferta )->DINIOFE .OR. empty( ( dbfOferta )->DINIOFE ) ) .AND.  ( dFecOfe <= ( dbfOferta )->DFINOFE .OR. empty( ( dbfOferta )->DFINOFE ) ) .AND.  ( dbfOferta )->NTIPOFE == 2                                                .AND.  (  ( ( dbfOferta )->nCliOfe == 1 )                                         .OR.  ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe ) .OR.  ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )





            if nTipXbY == 1

               if mod( nCajVen, ( dbfOferta )->nUnvOfe ) == 0





                  nModOfe     := Int( nCajVen / ( dbfOferta )->nUnvOfe )
                  nUndGrt     := ( ( dbfOferta )->nUnvOfe - ( dbfOferta )->nUncOfe ) * nModOfe
                  nTipXbY     := ( dbfOferta )->nTipXbY

                  if nUndGrt <> 0 .AND. nUndGrt > aXbYRet[ 2 ]
                     aXbYRet  := { nTipXbY, nUndGrt }
                  end



               end

            else







               if mod( nCajVen * nUndVen, ( dbfOferta )->nUnvOfe ) == 0





                  nModOfe     := Int( ( nCajVen * Abs( nUndVen ) ) / ( dbfOferta )->nUnvOfe )
                  nUndGrt     := ( ( dbfOferta )->nUnvOfe - ( dbfOferta )->nUncOfe ) * nModOfe
                  nTipXbY     := ( dbfOferta )->nTipXbY

                  if nUndGrt <> 0 .AND. nUndGrt > aXbYRet[ 2 ]
                     aXbYRet  := { nTipXbY, nUndGrt }
                  end



               end

            end

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN ( aXbYRet )



FUNCTION nDtoLineal( cCodArt, cCodCli, cGrpCli, nUndVen, dFecOfe, dbfOferta, cCodPr1, cCodPr2, cValPr1, cValPr2 )

   local nDtoLin     := 0





   IF ( dbfOferta )->( dbSeek( cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2 ) )

      WHILE ( dbfOferta )->CARTOFE + ( dbfOferta )->CCODPR1 + ( dbfOferta )->CCODPR2 + ( dbfOferta )->CVALPR1 + ( dbfOferta )->CVALPR2 == cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2










            IF ( dFecOfe >= ( dbfOferta )->DINIOFE .OR. empty( ( dbfOferta )->DINIOFE ) ) .AND.  ( dFecOfe <= ( dbfOferta )->DFINOFE .OR. empty( ( dbfOferta )->DFINOFE ) ) .AND.  ( dbfOferta )->NTIPOFE == 1                                                .AND.  (  ( ( dbfOferta )->nCliOfe == 1 )                                         .OR.  ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe ) .OR.  ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )





            IF ( dbfOferta )->NMAXOFE == 0 .OR. nUndVen <= ( dbfOferta )->NMAXOFE
               nDtoLin  := ( dbfOferta )->nDtoLin
                end

            end

         ( dbfOferta )->( dbSkip() )

        end

    end

RETURN nDtoLin



FUNCTION nDtoOferta( cCodArt, cCodCli, cGrpCli, nUndVen, dFecOfe, dbfOferta, cCodPr1, cCodPr2, cValPr1, cValPr2 )

   local nDtoOfe     := 0





   if ( dbfOferta )->( dbSeek( cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2 ) )

      while ( dbfOferta )->CARTOFE + ( dbfOferta )->CCODPR1 + ( dbfOferta )->CCODPR2 + ( dbfOferta )->CVALPR1 + ( dbfOferta )->CVALPR2 == cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2










         if ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) ) .AND.  ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) ) .AND.  ( dbfOferta )->nTipOfe == 1                                                .AND.  (  ( ( dbfOferta )->nCliOfe == 1 )                                         .OR.  ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe ) .OR.  ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )





            if ( dbfOferta )->nMaxOfe == 0 .OR. nUndVen <= ( dbfOferta )->nMaxOfe
               nDtoOfe  := ( dbfOferta )->nDtoPct
            end

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN nDtoOfe







FUNCTION nImpOferta( cCodArt, cCodCli, cGrpCli, nUndVen, dFecOfe, dbfOferta, nPrecio, lIvaInc, cCodPr1, cCodPr2, cValPr1, cValPr2, cDivPre, cDbfArticulo, cDbfDiv, cDbfKit, cDbfIva )

   local nPreOfe     := 0

   If( nPrecio == nil, nPrecio := 1, ) ;
   If( lIvaInc == nil, lIvaInc := .F., ) ;





   if ( dbfOferta )->( dbSeek( cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2 ) )

      while ( dbfOferta )->cArtOfe + ( dbfOferta )->cCodPr1 + ( dbfOferta )->cCodPr2 + ( dbfOferta )->cValPr1 + ( dbfOferta )->cValPr2 == cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2











         if ( dbfOferta )->nTblOfe < 2                                                 .AND. ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) ) .AND. ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) ) .AND. ( dbfOferta )->nTipOfe == 1                                                .AND. (  ( ( dbfOferta )->nCliOfe == 1 )                                         .OR. ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe ) .OR. ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )





            do case
               case nPrecio == 1
                  nPreOfe  :=  if( lIvaInc, ( dbfOferta )->nPreIva1, ( dbfOferta )->nPreOfe1 )
               case nPrecio == 2
                  nPreOfe  :=  if( lIvaInc, ( dbfOferta )->nPreIva2, ( dbfOferta )->nPreOfe2 )
               case nPrecio == 3
                  nPreOfe  :=  if( lIvaInc, ( dbfOferta )->nPreIva3, ( dbfOferta )->nPreOfe3 )
               case nPrecio == 4
                  nPreOfe  :=  if( lIvaInc, ( dbfOferta )->nPreIva4, ( dbfOferta )->nPreOfe4 )
               case nPrecio == 5
                  nPreOfe  :=  if( lIvaInc, ( dbfOferta )->nPreIva5, ( dbfOferta )->nPreOfe5 )
               case nPrecio == 6
                  nPreOfe  :=  if( lIvaInc, ( dbfOferta )->nPreIva6, ( dbfOferta )->nPreOfe6 )
            end

            exit

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN nPreOfe






FUNCTION sOfertaArticulo( cCodArt, cCodCli, cGrpCli, nUndVen, dFecOfe, dbfOferta, nPrecio, lIvaInc, cCodPr1, cCodPr2, cValPr1, cValPr2, nCajVen, nImpVen )

   local nPreOfe     := 0
   local nPreAnt     := 0
   local sPrecio
   local nRec        := ( dbfOferta )->( Recno() )
   local nOrdAnt     := ( dbfOferta )->( OrdSetFocus( "cArtOfe" ) )

   If( nPrecio == nil, nPrecio := 1, ) ;
   If( lIvaInc == nil, lIvaInc := .F., ) ;





   if ( dbfOferta )->( dbSeek( cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2 ) )

      while ( dbfOferta )->cArtOfe + ( dbfOferta )->cCodPr1 + ( dbfOferta )->cCodPr2 + ( dbfOferta )->cValPr1 + ( dbfOferta )->cValPr2 == cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2












         if ( dbfOferta )->nTblOfe < 2                                                    .AND. ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) )    .AND. ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )    .AND. ( dbfOferta )->nTipOfe == 1                                                   .AND. ( ( ( dbfOferta )->nCliOfe == 1 ) .OR. ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe ) .OR. ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) ) .AND. ( ( ( dbfOferta )->nMinCan == 1 .AND. ( ( dbfOferta )->nImpMin == 0 .OR. ( ( dbfOferta )->nImpMin <> 0 .AND. nImpVen >= ( dbfOferta )->nImpMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 1 .AND. ( ( dbfOferta )->nCajMin == 0 .OR. ( ( dbfOferta )->nCajMin <> 0 .AND. nCajVen >= ( dbfOferta )->nCajMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 2 .AND. ( ( dbfOferta )->nUndMin == 0 .OR. ( ( dbfOferta )->nUndMin <> 0 .AND. nUndVen >= ( dbfOferta )->nUndMin ) ) ) )





            do case
               case nPrecio == 1
                  nPreOfe              :=  if( lIvaInc, ( dbfOferta )->nPreIva1, ( dbfOferta )->nPreOfe1 )
               case nPrecio == 2
                  nPreOfe              :=  if( lIvaInc, ( dbfOferta )->nPreIva2, ( dbfOferta )->nPreOfe2 )
               case nPrecio == 3
                  nPreOfe              :=  if( lIvaInc, ( dbfOferta )->nPreIva3, ( dbfOferta )->nPreOfe3 )
               case nPrecio == 4
                  nPreOfe              :=  if( lIvaInc, ( dbfOferta )->nPreIva4, ( dbfOferta )->nPreOfe4 )
               case nPrecio == 5
                  nPreOfe              :=  if( lIvaInc, ( dbfOferta )->nPreIva5, ( dbfOferta )->nPreOfe5 )
               case nPrecio == 6
                  nPreOfe              :=  if( lIvaInc, ( dbfOferta )->nPreIva6, ( dbfOferta )->nPreOfe6 )
            end

            if nPreAnt == 0 .OR. nPreOfe < nPreAnt
               sPrecio                 := sPrecioOferta()
               sPrecio:nPrecio         := nPreOfe
               sPrecio:nDtoPorcentual  := ( dbfOferta )->nDtoPct
               sPrecio:nDtoLineal      := ( dbfOferta )->nDtoLin
            end

            nPreAnt                    := nPreOfe

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

   ( dbfOferta )->( OrdSetFocus( nOrdAnt ) )
   ( dbfOferta )->( dbGoTo( nRec ) )

RETURN ( sPrecio )






FUNCTION sOfertaFamilia( cCodFam, cCodCli, cGrpCli, dFecOfe, dbfOferta, nPrecio, cDbfArticulo, nUndVen, nCajVen, nImpVen )

   local nPreOfe     := 0
   local nPreAnt     := 0
   local sPrecio

   If( nPrecio == nil, nPrecio := 1, ) ;





   if ( dbfOferta )->( dbSeek( Padr( cCodFam, 18 ) ) )

      while ( dbfOferta )->cArtOfe  == Padr( cCodFam, 18 ) .AND. !( dbfOferta )->( Eof() )














         if ( dbfOferta )->nTblOfe == 2                                                   .AND. ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) )    .AND. ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )    .AND. ( dbfOferta )->nTipOfe == 1                                                   .AND. (  ( ( dbfOferta )->nCliOfe == 1 )                                            .OR. ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe )    .OR. ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )  .AND. ( ( ( dbfOferta )->nMinCan == 1 .AND. ( ( dbfOferta )->nImpMin == 0 .OR. ( ( dbfOferta )->nImpMin <> 0 .AND. nImpVen >= ( dbfOferta )->nImpMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 1 .AND. ( ( dbfOferta )->nCajMin == 0 .OR. ( ( dbfOferta )->nCajMin <> 0 .AND. nCajVen >= ( dbfOferta )->nCajMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 2 .AND. ( ( dbfOferta )->nUndMin == 0 .OR. ( ( dbfOferta )->nUndMin <> 0 .AND. nUndVen >= ( dbfOferta )->nUndMin ) ) ) )

            if nPreAnt == 0 .OR. ( dbfOferta )->nDtoPct > nPreAnt
               sPrecio                 := sPrecioOferta()
               sPrecio:nDtoPorcentual  := ( dbfOferta )->nDtoPct
               sPrecio:nDtoLineal      := ( dbfOferta )->nDtoLin
            end

            nPreAnt                    := ( dbfOferta )->nDtoPct

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN sPrecio



FUNCTION sOfertaTipoArticulo( cCodTip, cCodCli, cGrpCli, dFecOfe, dbfOferta, nPrecio, cDbfArticulo, nUndVen, nCajVen, nImpVen )

   local nPreOfe     := 0
   local nPreAnt     := 0
   local sPrecio

   If( nPrecio == nil, nPrecio := 1, ) ;





   if ( dbfOferta )->( dbSeek( Padr( cCodTip, 18 ) ) )

      while ( dbfOferta )->cArtOfe  == Padr( cCodTip, 18 ) .AND. !( dbfOferta )->( Eof() )














         if ( dbfOferta )->nTblOfe == 3                                                   .AND. ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) )    .AND. ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )    .AND. ( dbfOferta )->nTipOfe == 1                                                   .AND. (  ( ( dbfOferta )->nCliOfe == 1 )                                            .OR. ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe )    .OR. ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )  .AND. ( ( ( dbfOferta )->nMinCan == 1 .AND. ( ( dbfOferta )->nImpMin == 0 .OR. ( ( dbfOferta )->nImpMin <> 0 .AND. nImpVen >= ( dbfOferta )->nImpMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 1 .AND. ( ( dbfOferta )->nCajMin == 0 .OR. ( ( dbfOferta )->nCajMin <> 0 .AND. nCajVen >= ( dbfOferta )->nCajMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 2 .AND. ( ( dbfOferta )->nUndMin == 0 .OR. ( ( dbfOferta )->nUndMin <> 0 .AND. nUndVen >= ( dbfOferta )->nUndMin ) ) ) )

            if nPreAnt == 0 .OR. ( dbfOferta )->nDtoPct > nPreAnt
               sPrecio                 := sPrecioOferta()
               sPrecio:nDtoPorcentual  := ( dbfOferta )->nDtoPct
               sPrecio:nDtoLineal      := ( dbfOferta )->nDtoLin
            end

            nPreAnt                    := ( dbfOferta )->nDtoPct

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN sPrecio



FUNCTION sOfertaCategoria( cCodCat, cCodCli, cGrpCli, dFecOfe, dbfOferta, nPrecio, cDbfArticulo, nUndVen, nCajVen, nImpVen )

   local nPreOfe     := 0
   local nPreAnt     := 0
   local sPrecio

   If( nPrecio == nil, nPrecio := 1, ) ;





   if ( dbfOferta )->( dbSeek( Padr( cCodCat, 18 ) ) )

      while ( dbfOferta )->cArtOfe  == Padr( cCodCat, 18 ) .AND. !( dbfOferta )->( Eof() )














         if ( dbfOferta )->nTblOfe == 4                                                   .AND. ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) )    .AND. ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )    .AND. ( dbfOferta )->nTipOfe == 1                                                   .AND. (  ( ( dbfOferta )->nCliOfe == 1 )                                            .OR. ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe )    .OR. ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )  .AND. ( ( ( dbfOferta )->nMinCan == 1 .AND. ( ( dbfOferta )->nImpMin == 0 .OR. ( ( dbfOferta )->nImpMin <> 0 .AND. nImpVen >= ( dbfOferta )->nImpMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 1 .AND. ( ( dbfOferta )->nCajMin == 0 .OR. ( ( dbfOferta )->nCajMin <> 0 .AND. nCajVen >= ( dbfOferta )->nCajMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 2 .AND. ( ( dbfOferta )->nUndMin == 0 .OR. ( ( dbfOferta )->nUndMin <> 0 .AND. nUndVen >= ( dbfOferta )->nUndMin ) ) ) )

            if nPreAnt == 0 .OR. ( dbfOferta )->nDtoPct > nPreAnt
               sPrecio                 := sPrecioOferta()
               sPrecio:nDtoPorcentual  := ( dbfOferta )->nDtoPct
               sPrecio:nDtoLineal      := ( dbfOferta )->nDtoLin
            end

            nPreAnt                    := ( dbfOferta )->nDtoPct

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN sPrecio



FUNCTION sOfertaTemporada( cCodTem, cCodCli, cGrpCli, dFecOfe, dbfOferta, nPrecio, cDbfArticulo, nUndVen, nCajVen, nImpVen )

   local nPreOfe     := 0
   local nPreAnt     := 0
   local sPrecio

   If( nPrecio == nil, nPrecio := 1, ) ;





   if ( dbfOferta )->( dbSeek( Padr( cCodTem, 18 ) ) )

      while ( dbfOferta )->cArtOfe  == Padr( cCodTem, 18 ) .AND. !( dbfOferta )->( Eof() )














         if ( dbfOferta )->nTblOfe == 5                                                   .AND. ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) )    .AND. ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )    .AND. ( dbfOferta )->nTipOfe == 1                                                   .AND. (  ( ( dbfOferta )->nCliOfe == 1 )                                            .OR. ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe )    .OR. ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )  .AND. ( ( ( dbfOferta )->nMinCan == 1 .AND. ( ( dbfOferta )->nImpMin == 0 .OR. ( ( dbfOferta )->nImpMin <> 0 .AND. nImpVen >= ( dbfOferta )->nImpMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 1 .AND. ( ( dbfOferta )->nCajMin == 0 .OR. ( ( dbfOferta )->nCajMin <> 0 .AND. nCajVen >= ( dbfOferta )->nCajMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 2 .AND. ( ( dbfOferta )->nUndMin == 0 .OR. ( ( dbfOferta )->nUndMin <> 0 .AND. nUndVen >= ( dbfOferta )->nUndMin ) ) ) )

            if nPreAnt == 0 .OR. ( dbfOferta )->nDtoPct > nPreAnt
               sPrecio                 := sPrecioOferta()
               sPrecio:nDtoPorcentual  := ( dbfOferta )->nDtoPct
               sPrecio:nDtoLineal      := ( dbfOferta )->nDtoLin
            end

            nPreAnt                    := ( dbfOferta )->nDtoPct

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN sPrecio



FUNCTION sOfertaFabricante( cCodFab, cCodCli, cGrpCli, dFecOfe, dbfOferta, nPrecio, cDbfArticulo, nUndVen, nCajVen, nImpVen )

   local nPreOfe     := 0
   local nPreAnt     := 0
   local sPrecio

   If( nPrecio == nil, nPrecio := 1, ) ;





   if ( dbfOferta )->( dbSeek( Padr( cCodFab, 18 ) ) )

      while ( dbfOferta )->cArtOfe  == Padr( cCodFab, 18 ) .AND. !( dbfOferta )->( Eof() )














         if ( dbfOferta )->nTblOfe == 6                                                   .AND. ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) )    .AND. ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )    .AND. ( dbfOferta )->nTipOfe == 1                                                   .AND. (  ( ( dbfOferta )->nCliOfe == 1 )                                            .OR. ( ( dbfOferta )->nCliOfe == 2 .AND. cGrpCli == ( dbfOferta )->cGrpOfe )    .OR. ( ( dbfOferta )->nCliOfe == 3 .AND. cCodCli == ( dbfOferta )->cCliOfe ) )  .AND. ( ( ( dbfOferta )->nMinCan == 1 .AND. ( ( dbfOferta )->nImpMin == 0 .OR. ( ( dbfOferta )->nImpMin <> 0 .AND. nImpVen >= ( dbfOferta )->nImpMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 1 .AND. ( ( dbfOferta )->nCajMin == 0 .OR. ( ( dbfOferta )->nCajMin <> 0 .AND. nCajVen >= ( dbfOferta )->nCajMin ) ) ) .OR. ( ( dbfOferta )->nMinCan == 2 .AND. ( dbfOferta )->nMinTip == 2 .AND. ( ( dbfOferta )->nUndMin == 0 .OR. ( ( dbfOferta )->nUndMin <> 0 .AND. nUndVen >= ( dbfOferta )->nUndMin ) ) ) )

            if nPreAnt == 0 .OR. ( dbfOferta )->nDtoPct > nPreAnt
               sPrecio                 := sPrecioOferta()
               sPrecio:nDtoPorcentual  := ( dbfOferta )->nDtoPct
               sPrecio:nDtoLineal      := ( dbfOferta )->nDtoLin
            end

            nPreAnt                    := ( dbfOferta )->nDtoPct

         end

         ( dbfOferta )->( dbSkip() )

      end

   end

RETURN sPrecio



FUNCTION mkOferta( cPath, lAppend, cPathOld, oMeter )

   local dbfOfe

   If( lAppend == nil, lAppend := .F., ) ;
   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "Oferta.Dbf", cLocalDriver() )
      dbCreate( cPath + "Oferta.Dbf", aSqlStruct( aItmOfe() ), cLocalDriver() )
   end

   if lAppend .AND. !Empty( cPathOld ) .AND. lExistTable( cPathOld + "Oferta.Dbf" )

      dbUseArea( .T., cLocalDriver(), cPath + "Oferta.Dbf", cCheckArea( "Oferta", @dbfOfe ), .F. )

      if !( dbfOfe )->( neterr() )
         ( dbfOfe )->( __dbApp( cPathOld + "Oferta.Dbf" ) )
         ( dbfOfe )->( dbCloseArea() )
      end

   end

   rxOferta( cPath )

RETURN NIL



FUNCTION rxOferta( cPath, cDriver )

   local oError
   local oBlock
   local dbfOferta

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;




      if !lExistTable( cPath + "Oferta.Dbf", cDriver )
         dbCreate( cPath + "Oferta.Dbf", aSqlStruct( aItmOfe() ), cDriver )
      end

      fEraseIndex( cPath + "Oferta.CDX" )

      dbUseArea( .T., cLocalDriver(), cPath + "Oferta.Dbf", cCheckArea( "OFERTA", @dbfOferta ), .F. )
      if !( dbfOferta )->( neterr() )
         ( dbfOferta )->( __dbPack() )

         ( dbfOferta )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfOferta )->( ordCreate( cPath + "OFERTA.CDX", "CARTOFE", "CARTOFE + CCODPR1 + CCODPR2 + CVALPR1 + CVALPR2", {|| Field->CARTOFE + Field->CCODPR1 + Field->CCODPR2 + Field->CVALPR1 + Field->CVALPR2 } ) )

         ( dbfOferta )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfOferta )->( ordCreate( cPath + "OFERTA.CDX", "CDESOFE", "CDESOFE", {|| Field->CDESOFE } ) )

         ( dbfOferta )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfOferta )->( ordCreate( cPath + "OFERTA.CDX", "DINIOFE", "DTOC( DINIOFE )", {|| DTOC( Field->DINIOFE ) } ) )

         ( dbfOferta )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfOferta )->( ordCreate( cPath + "OFERTA.CDX", "DFINOFE", "DTOC( DFINOFE )", {|| DTOC( Field->DFINOFE ) } ) )

         ( dbfOferta )->( dbCloseArea() )
      else
         msgStop( "Imposible abrir en modo exclusivo la tabla de ofertas" )
      end











RETURN NIL



Function aItmOfe()

   local aBase := {}

   aAdd( aBase, { "CARTOFE",   "C",   18,    0, "Código del artículo de la oferta" }                     )
   aAdd( aBase, { "CDESOFE",   "C",   40,    0, "Descripción de la oferta" }                             )
   aAdd( aBase, { "DINIOFE",   "D",    8,    0, "Fecha inicio de la oferta" }                            )
   aAdd( aBase, { "DFINOFE",   "D",    8,    0, "Fecha final del la oferta" }                            )
   aAdd( aBase, { "NTIPOFE",   "N",    1,    0, "Tipo de oferta (1)-Precio (2)-Tipo X * Y" }             )
   aAdd( aBase, { "NMAXOFE",   "N",    6,    0, "Número de unidades maximas a vender de la oferta" }     )
   aAdd( aBase, { "NUDVOFE",   "N",    6,    0, "Número de unidades vendidas de la oferta" }             )
   aAdd( aBase, { "NPREOFE1",  "N",   16,    6, "Precio oferta 1" }                                      )
   aAdd( aBase, { "NPREOFE2",  "N",   16,    6, "Precio oferta 2" }                                      )
   aAdd( aBase, { "NPREOFE3",  "N",   16,    6, "Precio oferta 3" }                                      )
   aAdd( aBase, { "NPREOFE4",  "N",   16,    6, "Precio oferta 4" }                                      )
   aAdd( aBase, { "NPREOFE5",  "N",   16,    6, "Precio oferta 5" }                                      )
   aAdd( aBase, { "NPREOFE6",  "N",   16,    6, "Precio oferta 6" }                                      )
   aAdd( aBase, { "NPREIVA1",  "N",   16,    6, "Precio oferta con " + cImp() + " 1" }                   )
   aAdd( aBase, { "NPREIVA2",  "N",   16,    6, "Precio oferta con " + cImp() + " 2" }                   )
   aAdd( aBase, { "NPREIVA3",  "N",   16,    6, "Precio oferta con " + cImp() + " 3" }                   )
   aAdd( aBase, { "NPREIVA4",  "N",   16,    6, "Precio oferta con " + cImp() + " 4" }                   )
   aAdd( aBase, { "NPREIVA5",  "N",   16,    6, "Precio oferta con " + cImp() + " 5" }                   )
   aAdd( aBase, { "NPREIVA6",  "N",   16,    6, "Precio oferta con " + cImp() + " 6" }                   )
   aAdd( aBase, { "NUNVOFE",   "N",    3,    0, "Unidades a vender en la oferta" }                       )
   aAdd( aBase, { "NUNCOFE",   "N",    3,    0, "Unidades a cobrar en la oferta" }                       )
   aAdd( aBase, { "DFECCHG",   "D",    8,    0, "Fecha de cambio" }                                      )
   aAdd( aBase, { "NTIPXBY",   "N",    1,    0, "Tipo de oferta" }                                       )
   aAdd( aBase, { "NCLIOFE",   "N",    1,    0, "Tipo de cliente" }                                      )
   aAdd( aBase, { "CCLIOFE",   "C",   12,    0, "Código del cliente de la oferta" }                      )
   aAdd( aBase, { "CGRPOFE",   "C",    4,    0, "Código del grupo de cliente de la oferta" }             )
   aAdd( aBase, { "NDTOPCT",   "N",    6,    2, "Descuento porcentual %" }                               )
   aAdd( aBase, { "NDTOLIN",   "N",   16,    6, "Descuento lineal" }                                     )
   aAdd( aBase, { "CCODPR1",   "C",   20,    0, "Código de primera propiedad" }                          )
   aAdd( aBase, { "CCODPR2",   "C",   20,    0, "Código de segunda propiedad" }                          )
   aAdd( aBase, { "CVALPR1",   "C",   20,    0, "Valor de primera propiedad" }                           )
   aAdd( aBase, { "CVALPR2",   "C",   20,    0, "Valor de segunda propiedad" }                           )
   aAdd( aBase, { "LLABEL",    "L",    1,    0, "Lógico de selección de etiqueta"  }                     )
   aAdd( aBase, { "NLABEL",    "N",    5,    0, "Número de etiquetas a imprimir"   }                     )
   aAdd( aBase, { "LIVAINC",   "L",    1,    0, "Lógico " + cImp() + " incluido"   }                     )
   aAdd( aBase, { "NUNDMIN",   "N",   16,    6, "Unidades mínimas para aplicar la oferta"   }            )
   aAdd( aBase, { "NTBLOFE",   "N",    1,    0, "Tabla a la que aplicamos la oferta"   }                 )
   aAdd( aBase, { "NCAJMIN",   "N",   16,    6, "Cajas mínimas para aplicar la oferta" }                 )
   aAdd( aBase, { "NIMPMIN",   "N",   16,    6, "Importe mínimo para aplicar la oferta" }                )
   aAdd( aBase, { "NMINCAN",   "N",    1,    0, "aplicar por importe o por canticad"   }                 )
   aAdd( aBase, { "NMINTIP",   "N",    1,    0, "Aplicar a cajas o a unidades"   }                       )

Return ( aBase )



function ChangeComboTipo( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oCombo, cCodArt )



   if nMode == 1          .AND. !Empty( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ] ) .AND. !Empty( oCombo )





      do case
         case oCombo:nAt < 2
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bHelp  := {|| BrwArticulo( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] ) }
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bValid := {|| loaArt( aoGet, aBlank, nValDiv, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2 ) }

         case oCombo:nAt == 2
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bHelp  := {|| BrwFamilia( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) )] ) }
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bValid := {|| cFamilia( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfFamilia, aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] ) }

         case oCombo:nAt == 3
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bHelp  := {|| oTipArt:Buscar( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ] ) }
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bValid := {|| oTipArt:Existe( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] ) }

         case oCombo:nAt == 5
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bHelp  := {|| BrwTemporada( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] ) }
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bValid := {|| cTemporada( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], dbfTemporada, aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] ) }

         case oCombo:nAt == 6
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bHelp  := {|| oFabricante:Buscar( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ] ) }
            aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:bValid := {|| oFabricante:Existe( aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ], aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ] ) }

      end





      if Empty( cCodArt )
         aoGet[ ( dbfOferta )->( FieldPos( "CARTOFE" ) ) ]:cText( Space( 18 ) )
         aoGet[ ( dbfOferta )->( FieldPos( "CDESOFE" ) ) ]:cText( Space( 40 ) )
      end

   end

return .T.



Static Function CreateFiles( cPath )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   dbCreate( cPath + "OFERTA.DBF", aSqlStruct( aItmOfe() ), cLocalDriver() )

   rxOferta( cPath, cLocalDriver() )

Return nil






_HB_CLASS TOfertaLabelGenerator ; function TOfertaLabelGenerator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TOfertaLabelGenerator", iif( .F., { }, { @HBObject() } ), @TOfertaLabelGenerator() ) ) ;

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )
   _HB_MEMBER { oFld } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFld"}, .F. )

   _HB_MEMBER { oCriterio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCriterio"}, .F. )
   _HB_MEMBER { cCriterio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCriterio"}, .F. )
   _HB_MEMBER { aCriterio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCriterio"}, .F. )

   _HB_MEMBER { oFamiliaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFamiliaInicio"}, .F. )
   _HB_MEMBER { cFamiliaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFamiliaInicio"}, .F. )

   _HB_MEMBER { oFamiliaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFamiliaFin"}, .F. )
   _HB_MEMBER { cFamiliaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFamiliaFin"}, .F. )

   _HB_MEMBER { oFechaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFechaInicio"}, .F. )
   _HB_MEMBER { dFechaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFechaInicio"}, .F. )

   _HB_MEMBER { oFechaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFechaFin"}, .F. )
   _HB_MEMBER { dFechaFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFechaFin"}, .F. )

   _HB_MEMBER { oInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInicio"}, .F. )
   _HB_MEMBER { oFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFin"}, .F. )

   _HB_MEMBER { oFormatoLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFormatoLabel"}, .F. )
   _HB_MEMBER { cFormatoLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFormatoLabel"}, .F. )

   _HB_MEMBER { nFilaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFilaInicio"}, .F. )
   _HB_MEMBER { nColumnaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nColumnaInicio"}, .F. )

   _HB_MEMBER { cFileTmpLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileTmpLabel"}, .F. )
   _HB_MEMBER { cAreaTmpLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAreaTmpLabel"}, .F. )

   _HB_MEMBER { oBrwLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwLabel"}, .F. )

   _HB_MEMBER { nCantidadLabels } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCantidadLabels"}, .F. )
   _HB_MEMBER { nUnidadesLabels } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nUnidadesLabels"}, .F. )

   _HB_MEMBER { oMtrLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMtrLabel"}, .F. )
   _HB_MEMBER { nMtrLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMtrLabel"}, .F. )

   _HB_MEMBER { hBmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hBmp"}, .F. )

   _HB_MEMBER { oBtnListado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnListado"}, .F. )
   _HB_MEMBER { oBtnSiguiente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnSiguiente"}, .F. )
   _HB_MEMBER { oBtnAnterior } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnAnterior"}, .F. )
   _HB_MEMBER { oBtnCancel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnCancel"}, .F. )
   _HB_MEMBER { oBtnPropiedades } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnPropiedades"}, .F. )

   _HB_MEMBER { aSearch } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSearch"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TOfertaLabelGenerator_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @TOfertaLabelGenerator_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lDefault(); oClass:AddMethod( "lDefault", @TOfertaLabelGenerator_lDefault(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER BotonAnterior(); oClass:AddMethod( "BotonAnterior", @TOfertaLabelGenerator_BotonAnterior(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER BotonSiguiente(); oClass:AddMethod( "BotonSiguiente", @TOfertaLabelGenerator_BotonSiguiente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PutLabel(); oClass:AddMethod( "PutLabel", @TOfertaLabelGenerator_PutLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectAllLabels(); oClass:AddMethod( "SelectAllLabels", @TOfertaLabelGenerator_SelectAllLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectPropertiesLabels(); oClass:AddMethod( "SelectPropertiesLabels", @TOfertaLabelGenerator_SelectPropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SavePropertiesLabels(); oClass:AddMethod( "SavePropertiesLabels", @TOfertaLabelGenerator_SavePropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadPropertiesLabels(); oClass:AddMethod( "LoadPropertiesLabels", @TOfertaLabelGenerator_LoadPropertiesLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectCriterioLabels(); oClass:AddMethod( "SelectCriterioLabels", @TOfertaLabelGenerator_SelectCriterioLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PutStockLabels(); oClass:AddMethod( "PutStockLabels", @TOfertaLabelGenerator_PutStockLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddLabel(); oClass:AddMethod( "AddLabel", @TOfertaLabelGenerator_AddLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DelLabel(); oClass:AddMethod( "DelLabel", @TOfertaLabelGenerator_DelLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER EditLabel(); oClass:AddMethod( "EditLabel", @TOfertaLabelGenerator_EditLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ChangeCriterio(); oClass:AddMethod( "ChangeCriterio", @TOfertaLabelGenerator_ChangeCriterio(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPrintLabels(); oClass:AddMethod( "lPrintLabels", @TOfertaLabelGenerator_lPrintLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InitLabel( oLabel); oClass:AddMethod( "InitLabel", @TOfertaLabelGenerator_InitLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lCreateTemporal(); oClass:AddMethod( "lCreateTemporal", @TOfertaLabelGenerator_lCreateTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PrepareTemporal(); oClass:AddMethod( "PrepareTemporal", @TOfertaLabelGenerator_PrepareTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DestroyTemporal(); oClass:AddMethod( "DestroyTemporal", @TOfertaLabelGenerator_DestroyTemporal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectColumn( oCombo); oClass:AddMethod( "SelectColumn", @TOfertaLabelGenerator_SelectColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TOfertaLabelGenerator ;



static FUNCTION TOfertaLabelGenerator_lDefault( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local oError
   local oBlock
   local lError         := .F.

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::cCriterio          := "Ningún criterio"
   ::aCriterio          := { "Ningún criterio", "Todos los registros", "Fecha inicio", "Fecha fin" }

   ::cFamiliaInicio    := ""
   ::cFamiliaFin       := ""

   ::dFechaInicio       := Ctod( "01/" + Str( Month( Date() ), 2 ) + "/" + Str( Year( Date() ), 4 ) )
   ::dFechaFin          := GetSysDate()

   ::cFormatoLabel      := GetPvProfString( "Etiquetas", "Oferta", Space( 3 ), cIniEmpresa() )
   if len( ::cFormatoLabel ) < 3
      ::cFormatoLabel   := Space( 3 )
   end

   ::nMtrLabel          := 0

   ::nFilaInicio        := 1
   ::nColumnaInicio     := 1

   ::nCantidadLabels    := 1
   ::nUnidadesLabels    := 1

   ::aSearch            := { "Código", "Nombre" }

   RECOVER USING oError

      lError            := .T.

      msgStop( "Error en la creación de generador de etiquetas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

Return ( !lError )



static FUNCTION TOfertaLabelGenerator_Create( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local oGetOrd
   local cGetOrd     := Space( 100 )
    local oCbxOrd
   local cCbxOrd     := "Código"
   local aCbxOrd     := { "Código", "Nombre" }

   if ::lDefault()

      ::oDlg = TDialog():New(,,,,, "SelectLabels_0",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )





         ::oFld := TPages():Redefine( 10, ::oDlg, {"SelectLabels_3", "SelectLabels_2"},,,, )










         TBitmap():ReDefine( 500, "gc_portable_barcode_scanner_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )



         ::oCriterio := TComboBox():ReDefine( 90, { | u | If( PCount()==0, ::cCriterio, ::cCriterio:= u ) }, ::aCriterio, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oCriterio",,,,,,, )

         ::oCriterio:bChange        := {|| ::ChangeCriterio() }





         ::oFamiliaInicio := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cFamiliaInicio, ::cFamiliaInicio:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 101 )






         ::oInicio := TSay():ReDefine( 102,, ::oFld:aDialogs[1],,,, .F.,, .F., .F., )





         ::oFamiliaFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cFamiliaFin, ::cFamiliaFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 111 )






         ::oFin := TSay():ReDefine( 112,, ::oFld:aDialogs[1],,,, .F.,, .F., .F., )




         ::oFechaInicio := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::dFechaInicio, ::dFechaInicio:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




         ::oFechaFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::dFechaFin, ::dFechaFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





         ::oFormatoLabel := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cFormatoLabel, ::cFormatoLabel:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 161 )

            ::oFormatoLabel:bValid  := {|| cDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, dbfDoc, "OF" ) }
            ::oFormatoLabel:bHelp   := {|| BrwDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, "OF" ) }

         TBtnBmp():ReDefine( 220, "gc_document_text_pencil_12",,,,,{|| EdtDocumento( ::cFormatoLabel ) }, ::oFld:aDialogs[1], .F., , .F., "Modificar formato de etiquetas" )





         TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::nFilaInicio, ::nFilaInicio:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





         TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::nColumnaInicio, ::nColumnaInicio:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



         TRadMenu():Redefine( { | u | If( PCount()==0, ::nCantidadLabels, ::nCantidadLabels:= u ) }, ::oFld:aDialogs[1],, { 200, 201 },,,,, .F.,, )








         TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::nUnidadesLabels, ::nUnidadesLabels:= u ) }, ::oFld:aDialogs[1],, "99999",,,,,,, .F., {||     ( ::nCantidadLabels == 1 )},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )









         oGetOrd := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cGetOrd, cGetOrd:= u ) }, ::oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "FIND",, )

         oGetOrd:bChange   := {| nKey, nFlags, oGet | AutoSeek( nKey, nFlags, oGet, ::oBrwLabel, dbfOferta ) }
         oGetOrd:bValid    := {|| ( dbfOferta )->( OrdScope( 0, nil ) ), ( dbfOferta )->( OrdScope( 1, nil ) ), ::oBrwLabel:Refresh(), .T. }





         oCbxOrd := TComboBox():ReDefine( 210, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, ::oFld:aDialogs[2],,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

         oCbxOrd:bChange   := {|| ::SelectColumn( oCbxOrd ) }




         TButton():ReDefine( 100, {||( ::PutLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 110, {||( ::SelectAllLabels( .T. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 120, {||( ::SelectAllLabels( .F. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         ::oBtnPropiedades := TButton():ReDefine( 220, {||( nil )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 130, {||( ::AddLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 140, {||( ::DelLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 150, {||( ::EditLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 160, {||( WinEdtRec( ::oBrwLabel, bEdit, dbfOferta, .F., cDefIva() ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 165, {||( WinZooRec( ::oBrwLabel, bEdit, dbfOferta, .F., cDefIva() ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )

         ::oBrwLabel                 := IXBrowse():New( ::oFld:aDialogs[2] )

         ::oBrwLabel:nMarqueeStyle   := 5
         ::oBrwLabel:nColSel         := 2

         ::oBrwLabel:lHScroll        := .F.
         ::oBrwLabel:cAlias          := dbfOferta

         ::oBrwLabel:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         ::oBrwLabel:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
         ::oBrwLabel:bLDblClick      := {|| ::PutLabel() }

         ::oBrwLabel:CreateFromResource( 180 )

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Sl. Seleccionada"
            :bEditValue       := {|| ( dbfOferta )->lLabel }
            :nWidth           := 20
            :SetCheck( { "Sel16", "Nil16" } )
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Código"
            :bEditValue       := {|| ( dbfOferta )->cArtOfe }
            :nWidth           := 80
            :cSortOrder       := "cArtOfe"
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Nombre"
            :bEditValue       := {|| ( dbfOferta )->cDesOfe }
            :nWidth           := 280
            :cSortOrder       := "cDesOfe"
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "N. etiquetas"
            :bEditValue       := {|| ( dbfOferta )->nLabel }
            :cEditPicture     := "@E 99,999"
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nEditType        := 1
            :bOnPostEdit      := {|o,x| if( dbDialogLock( dbfOferta ), ( ( dbfOferta )->nLabel := x, ( dbfOferta )->( dbUnlock() ) ), ) }
         end






   ::oMtrLabel := TApoloMeter():ReDefine( 190, { | u | If( PCount()==0, ::nMtrLabel, ::nMtrLabel:= u ) }, ( dbfOferta )->( lastrec() ), ::oFld:aDialogs[2], .F.,, "", .F.,,,, )

         ::oMtrLabel:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
         ::oMtrLabel:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
         ::oMtrLabel:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )








         ::oBtnListado := TButton():ReDefine( 40, {||( nil  )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnAnterior := TButton():ReDefine( 20, {||( ::BotonAnterior() )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnSiguiente := TButton():ReDefine( 30, {||( ::BotonSiguiente() )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnCancel := TButton():ReDefine( 2, {||( ::oDlg:End() )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:bStart  := {|| ::oBtnAnterior:Hide(), ::oBtnListado:Hide(), ::oBtnPropiedades:Hide(), ::ChangeCriterio(), ::oFormatoLabel:lValid() }

      ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

      ::End()

   end

Return ( Self )



static FUNCTION TOfertaLabelGenerator_BotonAnterior( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   ::oFld:GoPrev()

   ::oBtnAnterior:Hide()

   SetWindowText( ::oBtnSiguiente:hWnd, "Siguien&te >" )

Return ( Self )



static FUNCTION TOfertaLabelGenerator_BotonSiguiente( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   do case
      case ::oFld:nOption == 1

         if Empty( ::cFormatoLabel )

            MsgStop( "Debe cumplimentar un formato de etiquetas" )

         else

            ::oFld:GoNext()
            ::oBtnAnterior:Show()

            ::SelectCriterioLabels()

            SetWindowText( ::oBtnSiguiente:hWnd, "&Terminar" )

         end

      case ::oFld:nOption == 2

         if ::lPrintLabels()

            SetWindowText( ::oBtnCancel:hWnd, "&Cerrar" )

         end

   end

Return ( Self )



static FUNCTION TOfertaLabelGenerator_End( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   WritePProString( "Etiquetas", "Oferta", ::cFormatoLabel, cIniEmpresa() )

Return ( Self )



static FUNCTION TOfertaLabelGenerator_PutLabel( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   if dbLock( dbfOferta )
      ( dbfOferta )->lLabel := !( dbfOferta )->lLabel
      ( dbfOferta )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TOfertaLabelGenerator_SelectAllLabels( lSelect ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

    local n            := 0
   local nRecno   := ( dbfOferta )->( Recno() )

    CursorWait()

   ::oDlg:Disable()

   ( dbfOferta )->( dbGoTop() )
   while !( dbfOferta )->( eof() )

      if ( dbfOferta )->lLabel <> lSelect

         if dbLock( dbfOferta )
            ( dbfOferta )->lLabel := lSelect
            ( dbfOferta )->( dbUnLock() )
         end

      end

      ( dbfOferta )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ( dbfOferta )->( dbGoTo( nRecno ) )

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

   ::oDlg:Enable()

   CursorArrow()

Return ( Self )



static FUNCTION TOfertaLabelGenerator_SelectCriterioLabels( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

    local n            := 0
   local nRecno   := ( dbfOferta )->( Recno() )

   CursorWait()

   ::oDlg:Disable()

   ( dbfOferta )->( dbGoTop() )
   while !( dbfOferta )->( eof() )

      do case
         case ::oCriterio:nAt == 2

            ::PutStockLabels()

         case ::oCriterio:nAt == 3 .AND. ( dbfOferta )->dIniOfe >= ::dFechaInicio .AND. ( dbfOferta )->dIniOfe <= ::dFechaFin

            ::PutStockLabels()

         case ::oCriterio:nAt == 4 .AND. ( dbfOferta )->dFinOfe >= ::dFechaInicio .AND. ( dbfOferta )->dFinOfe <= ::dFechaFin

            ::PutStockLabels()

         otherwise

            ::PutStockLabels()

      end

      ( dbfOferta )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

   ( dbfOferta )->( dbGoTo( nRecno ) )

    CursorArrow()

   ::oDlg:Enable()

Return ( Self )



static FUNCTION TOfertaLabelGenerator_PutStockLabels( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local nStock                        := 0

   if ( ::nCantidadLabels == 1 )
      nStock                           := ::nUnidadesLabels
   else
      nStock                           := StocksModel():nStockArticulo( ( dbfOferta )->cArtOfe, , ( dbfOferta )->cCodPr1, ( dbfOferta )->cCodPr2, ( dbfOferta )->cValPr1, ( dbfOferta )->cValPr2 )
   end

   if dbLock( dbfOferta )
      ( dbfOferta )->lLabel            := .T.
      ( dbfOferta )->nLabel            := Max( nStock, 0 )
      ( dbfOferta )->( dbUnLock() )
   end

Return ( Self )



static FUNCTION TOfertaLabelGenerator_SelectPropertiesLabels( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local n
   local oDlg
   local aTblPrp
   local oBrwPrp

   if !Empty( ( dbfOferta )->cCodPrp1 ) .OR. !Empty( ( dbfOferta )->cCodPrp2 )

      aTblPrp                       := LoadPropertiesTable( ( dbfOferta )->cArtOfe, nCosto( ( dbfOferta )->cArtOfe, dbfOferta, dbfArtKit ), ( dbfOferta )->cCodPrp1, ( dbfOferta )->cCodPrp2, dbfPro, dbfTblPro, dbfArtVta )

      ::LoadPropertiesLabels( aTblPrp )

      oDlg = TDialog():New(,,,,, "Propiedades",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

      oBrwPrp                       := IXBrowse():New( oDlg )

      oBrwPrp:nDataType             := 2

      oBrwPrp:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp:lHScroll              := .T.
      oBrwPrp:lVScroll              := .T.

      oBrwPrp:nMarqueeStyle         := 3
      oBrwPrp:lRecordSelector       := .F.
      oBrwPrp:lFastEdit             := .T.
      oBrwPrp:nFreeze               := 1
      oBrwPrp:lFooter               := .T.

      oBrwPrp:SetArray( aTblPrp )

      for n := 1 to len( aTblPrp[ 1 ] )

         with object ( oBrwPrp:aCols[ n ] )

            :cHeader          := aTblPrp[ oBrwPrp:nArrayAt, n ]:cHead

            if IsNil( aTblPrp[ oBrwPrp:nArrayAt, n ]:Value )
               :bEditValue    := bGenEditText( aTblPrp, oBrwPrp, n )
               :nWidth        := 80
               :bFooter       := {|| "Total" }
            else
               :bEditValue    := bGenEditValue( aTblPrp, oBrwPrp, n )
               :cEditPicture  := MasUnd()
               :nWidth        := 60
               :nEditType     := 1
               :nTotal        := 0
               :bOnPostEdit   := {| oCol, xVal, nKey | aTblPrp[ oBrwPrp:nArrayAt, oBrwPrp:nColSel + oBrwPrp:nColOffset - 1 ]:Value := xVal }
            end

         end

      next

      oBrwPrp:MakeTotals()

      oBrwPrp:CreateFromResource( 100 )




      TButton():ReDefine( 1, {||( ::SavePropertiesLabels( aTblPrp, oDlg ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| ::SavePropertiesLabels( aTblPrp, oDlg ) } )

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   else

      MsgStop( "Este artículo no tiene propiedades." )

   end

Return ( Self )



static FUNCTION TOfertaLabelGenerator_SavePropertiesLabels( aTblPrp, oDlg ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local o
   local a
   local n  := 0
   local c  := ""

   while ( dbfArtLbl )->( dbSeek( ( dbfOferta )->cArtOfe ) ) .AND. !( dbfArtLbl )->( eof() )
      if dbLock( dbfArtLbl )
         ( dbfArtLbl )->( dbDelete() )
         ( dbfArtLbl )->( dbUnLock() )
      end
   end

   for each a in ( aTblPrp )

      for each o in ( a )

         if IsNum( o:Value ) .AND. ( o:Value <> 0 )

            if dbAppe( dbfArtLbl )
               ( dbfArtLbl )->cCodArt  := o:cCodigo
               ( dbfArtLbl )->cCodPr1  := o:cCodigoPropiedad1
               ( dbfArtLbl )->cCodPr2  := o:cCodigoPropiedad2
               ( dbfArtLbl )->cValPr1  := o:cValorPropiedad1
               ( dbfArtLbl )->cValPr2  := o:cValorPropiedad2
               ( dbfArtLbl )->nUndLbl  := o:Value
               ( dbfArtLbl )->( dbUnLock() )
            end

            n  += o:Value

         end

      next

   next

   if dbLock( dbfOferta )
      ( dbfOferta )->nLabel := n
      ( dbfOferta )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

   oDlg:end( 1 )

Return ( .T. )



static FUNCTION TOfertaLabelGenerator_LoadPropertiesLabels( aTblPrp ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local o
   local a

   if ( dbfArtLbl )->( dbSeek( ( dbfOferta )->cArtOfe ) )

      while ( dbfArtLbl )->cCodArt == ( dbfOferta )->cArtOfe .AND. !( dbfArtLbl )->( eof() )

         for each a in ( aTblPrp )

            for each o in ( a )





               if Rtrim( o:cCodigo )            == Rtrim( ( dbfArtLbl )->cCodArt )  .AND.  Rtrim( o:cCodigoPropiedad1 )  == Rtrim( ( dbfArtLbl )->cCodPr1 )  .AND.  Rtrim( o:cCodigoPropiedad2 )  == Rtrim( ( dbfArtLbl )->cCodPr2 )  .AND.  Rtrim( o:cValorPropiedad1 )   == Rtrim( ( dbfArtLbl )->cValPr1 )  .AND.  Rtrim( o:cValorPropiedad2 )   == Rtrim( ( dbfArtLbl )->cValPr2 )

                  o:Value  := ( dbfArtLbl )->nUndLbl

               end

            next

         next

         ( dbfArtLbl )->( dbSkip() )

      end

   end

Return ( aTblPrp )



Static Function bGenEditText( aTblPrp, oBrwPrp, n )

Return ( {|| aTblPrp[ oBrwPrp:nArrayAt, n ]:cText } )



Static Function bGenEditValue( aTblPrp, oBrwPrp, n )

Return ( {|| aTblPrp[ oBrwPrp:nArrayAt, n ]:Value } )



static FUNCTION TOfertaLabelGenerator_AddLabel( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   if dbLock( dbfOferta )
      ( dbfOferta )->nLabel++
      ( dbfOferta )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TOfertaLabelGenerator_DelLabel( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   if ( dbfOferta )->nLabel > 1
      if dbLock( dbfOferta )
         ( dbfOferta )->nLabel--
         ( dbfOferta )->( dbUnLock() )
      end
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TOfertaLabelGenerator_EditLabel( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   ::oBrwLabel:aCols[ 4 ]:Edit()

Return ( Self )



static FUNCTION TOfertaLabelGenerator_ChangeCriterio( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   ::oFamiliaInicio:Hide()
   ::oFamiliaFin:Hide()

   ::oInicio:Hide()
   ::oFin:Hide()

   ::oFechaInicio:Hide()
   ::oFechaFin:Hide()

   do case
      case ::oCriterio:nAt == 3

         ::oFechaInicio:Show()
         ::oFechaFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

      case ::oCriterio:nAt == 4

         ::oFechaInicio:Show()
         ::oFechaFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

   end

Return ( Self )



static FUNCTION TOfertaLabelGenerator_lCreateTemporal( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local n
   local nRec
   local oBlock
   local oError
   local nBlancos
   local lCreateTemporal   := .T.
   local lCloseOferta      := .F.
   local lCloseLabel       := .F.

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      tmpOferta            := "LblArt"
      filOferta            := cGetNewFileName( cPatTmp() + "LblAlb" )

      dbCreate( filOferta, aSqlStruct( aItmOfe() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), filOferta, tmpOferta, .F. )

      ( tmpOferta )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpOferta )->( OrdCreate( filOferta, "Codigo", "Codigo", {|| Field->cArtOfe } ) )





      nRec                 := ( dbfOferta )->( Recno() )

      ( dbfOferta )->( dbGoTop() )
      while !( dbfOferta )->( eof() )

         if ( dbfOferta )->lLabel

            for n := 1 to ( dbfOferta )->nLabel
               dbPass( dbfOferta, tmpOferta, .T. )
            next

         end

         ( dbfOferta )->( dbSkip() )

      end

      ( dbfOferta )->( dbGoTo( nRec ) )

      ( tmpOferta )->( dbGoTop() )





   RECOVER USING oError

      lCreateTemporal      := .F.

      MsgStop( "Imposible crear tabla temporal de ofertas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lCreateTemporal )



static FUNCTION TOfertaLabelGenerator_PrepareTemporal( oFr ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local n
   local nBlancos       := 0
   local nPaperHeight   := oFr:GetProperty( "MainPage", "PaperHeight" ) * 3.77953
   local nHeight        := oFr:GetProperty( "MasterData", "Height" )
   local nColumns       := oFr:GetProperty( "MainPage", "Columns" )
   local nItemsInColumn := 0

   if !Empty( nPaperHeight ) .AND. !Empty( nHeight ) .AND. !Empty( nColumns )

      nItemsInColumn    := int( nPaperHeight / nHeight )

      nBlancos          := ( ::nColumnaInicio - 1 ) * nItemsInColumn
      nBlancos          += ( ::nFilaInicio - 1 )

   end

   for n := 1 to nBlancos
      dbPass( dbBlankRec( dbfOferta ), tmpOferta, .T. )
   next

   ( tmpOferta )->( dbGoTop() )

Return ( .T. )



static FUNCTION TOfertaLabelGenerator_DestroyTemporal( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   if ( tmpOferta )->( Used() )
      ( tmpOferta )->( dbCloseArea() )
   end

   dbfErase( filOferta )

Return ( .T. )



static FUNCTION TOfertaLabelGenerator_lPrintLabels( ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local oFr

   if !::lCreateTemporal()
      Return .F.
   end

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      ::PrepareTemporal( oFr )





      oFr:PrepareReport()





      oFr:ShowPreparedReport()

   else

      msgStop( "El informe no contiene información" )

   end





   oFr:DestroyFr()





   ::DestroyTemporal()

Return .T.



static FUNCTION TOfertaLabelGenerator_InitLabel( oLabel ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local nStartRow

   if ::nFilaInicio > 1
      nStartRow            := oLabel:nStartRow
      nStartRow            += ( ::nFilaInicio - 1 ) * ( oLabel:nLblHeight + oLabel:nVSeparator )

      if nStartRow < oLabel:nBottomRow
         oLabel:nStartRow  := nStartRow
      end
   end

   if ::nColumnaInicio > 1 .AND. ::nColumnaInicio <= oLabel:nLblOnLine
      oLabel:nLblCurrent   := ::nColumnaInicio
   end

Return ( Self )



static FUNCTION TOfertaLabelGenerator_SelectColumn( oCombo ) ; local Self AS CLASS TOfertaLabelGenerator := QSelf() AS CLASS TOfertaLabelGenerator

   local oCol
   local cOrd                    := oCombo:VarGet()

   if ::oBrwLabel <> nil

      with object ::oBrwLabel

         for each oCol in :aCols

            if Equal( cOrd, oCol:cHeader )
               oCol:cOrder       := "A"
               oCol:SetOrder()
            else
               oCol:cOrder       := " "
            end

         next

      end

      ::oBrwLabel:Refresh()

   end

Return ( Self )



Static Function lLabel( dbfTmpLbl )

   oMsgProgress():Deltapos( 1 )

Return ( ( dbfTmpLbl )->lLabel )



Static Function SkipLabel( dbfOferta, oMtr )

   if ( dbfOferta )->lLabel .AND. ( dbfOferta )->nLabel > nLabels
      ++nLabels
   else
      nLabels  := 1
      ( dbfOferta )->( dbSkip() )
   end

   if !Empty( oMtr )
      oMtr:Set( ( dbfOferta )->( ordKeyNo() ) )
   end

Return ( ( dbfOferta )->( Recno() ) )





Static Function DataReport( oFr, lTemporal )

   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   oFr:ClearDataSets()

   if lTemporal
      oFr:SetWorkArea(     "Ofertas", ( tmpOferta )->( Select() ), .F., { 0, 0, 0 } )
   else
      oFr:SetWorkArea(     "Ofertas", ( dbfOferta )->( Select() ), .F., { 0, 0, 0 } )
   end
   oFr:SetFieldAliases(    "Ofertas", cItemsToReport( aItmOfe() ) )

   oFr:SetWorkArea(        "Artículos", ( dbfArticulo )->( Select() ) )
   oFr:SetFieldAliases(    "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(        "Familias", ( dbfFamilia )->( Select() ) )
   oFr:SetFieldAliases(    "Familias", cItemsToReport( aItmFam() ) )

   oFr:SetWorkArea(        "Códigos de barras", ( dbfCodebar )->( Select() ) )
   oFr:SetFieldAliases(    "Códigos de barras", cItemsToReport( aItmBar() ) )

   oFr:SetWorkArea(        "Unidad de medición",  oUndMedicion:Select() )
   oFr:SetFieldAliases(    "Unidad de medición",  cObjectsToReport( oUndMedicion:oDbf ) )

   if lTemporal
      oFr:SetMasterDetail( "Ofertas",        "Artículos",               {|| ( tmpOferta )->cArtOfe } )
   else
      oFr:SetMasterDetail( "Ofertas",        "Artículos",               {|| ( dbfOferta )->cArtOfe } )
   end

   oFr:SetMasterDetail(    "Artículos",      "Familias",                {|| ( dbfArticulo )->Familia } )
   oFr:SetMasterDetail(    "Artículos",      "Códigos de barras",       {|| ( dbfArticulo )->Codigo } )
   oFr:SetMasterDetail(    "Artículos",      "Unidad de medición",      {|| ( dbfArticulo )->cUnidad } )

   oFr:SetResyncPair(      "Ofertas",        "Artículos" )
   oFr:SetResyncPair(      "Artículos",      "Familias" )
   oFr:SetResyncPair(      "Artículos",      "Códigos de barras" )
   oFr:SetResyncPair(      "Artículos",      "Unidad de medición" )

   RECOVER USING oError

      msgStop( "Imposible crear data report" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return nil



Static Function VariableReport( oFr )








Return nil



Function DesignReportOferta( oFr, dbfDoc )

   local oLabel
   local nOrdAnt
   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag

      nOrdAnt     := ( dbfOferta )->( OrdSetFocus( "cArtOfe" ) )

      oLabel      := TOfertaLabelGenerator()

      if oLabel:lCreateTemporal()





         DataReport( oFr, .T. )





         if !Empty( ( dbfDoc )->mReport )

            oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

         else

            oFr:AddPage(         "MainPage" )

            oFr:AddBand(         "MasterData",  "MainPage",       6 )
            oFr:SetProperty(     "MasterData",  "Top",            200 )
            oFr:SetProperty(     "MasterData",  "Height",         100 )
            oFr:SetObjProperty(  "MasterData",  "DataSet",        "Ofertas" )

         end





         VariableReport( oFr )





         oFr:DesignReport()





         oFr:DestroyFr()





         oLabel:DestroyTemporal()

      else

         lFlag    := .F.

      end

   end

   if lOpen
      CloseFiles()
   end

Return ( lFlag )



Function PrintReportOferta( nDevice, nCopies, cPrinter, dbfDoc )

   local oFr

   If( nDevice == nil, nDevice := 2, ) ;
   If( nCopies == nil, nCopies := 1, ) ;
   If( cPrinter == nil, cPrinter := ImpresoraDefectoUsuario(), ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

Return .T.



Function structOfertaArticulo( hCabecera, hLinea, nTotalLinea, nView  )

   local sOfertaArticulo
   local lOfertaArticulo   := .F.

   if empty( hLinea[ "Articulo" ] )
      return nil
   end

   if !( D():Articulos( nView ) )->( dbSeek( hLinea[ "Articulo" ] ) )
      msgStop( "Código de artículo " + alltrim( hLinea[ "Articulo" ] ) + " no encontrado", "Busqueda de ofertas" )
      Return nil
   end



   sOfertaArticulo         := hOfertaArticulo( hCabecera, hLinea, nTotalLinea, nView )

   if empty( sOfertaArticulo )
      sOfertaArticulo      := hOfertaFamilia( hCabecera, hLinea, nTotalLinea, nView )
   end

   if empty( sOfertaArticulo )
      sOfertaArticulo      := hOfertaTipoArticulo( hCabecera, hLinea, nTotalLinea, nView )
   end

   if empty( sOfertaArticulo )
      sOfertaArticulo      := hOfertaCategoria( hCabecera, hLinea, nTotalLinea, nView )
   end

   if empty( sOfertaArticulo )
      sOfertaArticulo      := hOfertaTemporada( hCabecera, hLinea, nTotalLinea, nView )
   end

   if empty( sOfertaArticulo )
      sOfertaArticulo      := hOfertaFabricante( hCabecera, hLinea, nTotalLinea, nView )
   end

Return ( sOfertaArticulo )



Static Function hOfertaArticulo( hCabecera, hLinea, nTotalLinea, nView )

   local sPrecio

   D():getStatusOfertas( nView )
   ( D():Ofertas( nView ) )->( ordSetFocus( "cArtOfe" ) )



   if ( D():Ofertas( nView ) )->( dbSeek( hLinea[ "Articulo" ] + hLinea[ "CodigoPropiedad1" ] + hLinea[ "CodigoPropiedad2" ] + hLinea[ "ValorPropiedad1" ] + hLinea[ "ValorPropiedad2" ] ) )

      while ( D():Ofertas( nView ) )->cArtOfe + ( D():Ofertas( nView ) )->cCodPr1 + ( D():Ofertas( nView ) )->cCodPr2 + ( D():Ofertas( nView ) )->cValPr1 + ( D():Ofertas( nView ) )->cValPr2 == hLinea[ "Articulo" ] + hLinea[ "CodigoPropiedad1" ] + hLinea[ "CodigoPropiedad2" ] + hLinea[ "ValorPropiedad1" ] + hLinea[ "ValorPropiedad2" ] .AND. !( D():Ofertas( nView ) )->( eof() )

         if isOfertaArticulo( nView ) .AND. isCondiconesComunes( hCabecera, hLinea, nTotalLinea, nView )



            if empty( sPrecio )

               sPrecio           := sPrecioOferta():get( hLinea, nView )

            else

               if sPrecioOferta():menor( sPrecio )
                  sPrecio        := sPrecioOferta():get( hLinea, nView )
               end

            end

         end

         ( D():Ofertas( nView ) )->( dbSkip() )

      end

   end

   D():setStatusOfertas( nView )

RETURN ( sPrecio )



FUNCTION hOfertaFamilia( hCabecera, hLinea, nTotalLinea, nView )

   local sPrecio
   local cCodigoFamilia

   cCodigoFamilia             := padr( hLinea[ "Familia" ], 18 )

   D():getStatusOfertas( nView )
   ( D():Ofertas( nView ) )->( ordSetFocus( "cArtOfe" ) )

   if ( D():Ofertas( nView ) )->( dbSeek( cCodigoFamilia ) )

      while ( D():Ofertas( nView ) )->cArtOfe == cCodigoFamilia .AND. !( D():Ofertas( nView ) )->( eof() )

         if isOfertaFamilia( nView ) .AND. isCondiconesComunes( hCabecera, hLinea, nTotalLinea, nView )

            if empty( sPrecio ) .OR. ( sPrecio:nDtoPorcentual >= sPrecioOferta():getDtoPorcentual( nView ) )
               sPrecio        := sPrecioOferta():get( hLinea, nView )
            end

         end

         ( D():Ofertas( nView ) )->( dbSkip() )

      end

   end

   D():setStatusOfertas( nView )

RETURN sPrecio



Static Function hOfertaTipoArticulo( hCabecera, hLinea, nTotalLinea, nView )

   local sPrecio
   local cCodigoTipo

   D():getStatusOfertas( nView )
   ( D():Ofertas( nView ) )->( ordSetFocus( "cArtOfe" ) )

   cCodigoTipo                := padr( hLinea[ "Tipo" ], 18 )

   if ( D():Ofertas( nView ) )->( dbSeek( cCodigoTipo ) )

      while ( D():Ofertas( nView ) )->cArtOfe  == cCodigoTipo .AND. !( D():Ofertas( nView ) )->( Eof() )

         if isOfertaTipoArticulo( nView ) .AND. isCondiconesComunes( hCabecera, hLinea, nTotalLinea, nView )

            if empty( sPrecio ) .OR. ( sPrecio:nDtoPorcentual >= sPrecioOferta():getDtoPorcentual( nView ) )
               sPrecio        := sPrecioOferta():get( hLinea, nView )
            end

         end

         ( D():Ofertas( nView ) )->( dbSkip() )

      end

   end

   D():setStatusOfertas( nView )

RETURN sPrecio



FUNCTION hOfertaCategoria( hCabecera, hLinea, nTotalLinea, nView )

   local sPrecio
   local cCodigoCategoria

   D():getStatusOfertas( nView )
   ( D():Ofertas( nView ) )->( ordSetFocus( "cArtOfe" ) )

   cCodigoCategoria           := retFld( hLinea[ "Articulo" ], D():Articulos( nView ), "cCodTemp" )

   if ( D():Ofertas( nView ) )->( dbSeek( cCodigoCategoria ) )

      while ( D():Ofertas( nView ) )->cArtOfe  == cCodigoCategoria .AND. !( D():Ofertas( nView ) )->( Eof() )

         if isOfertaTemporada( nView ) .AND. isCondiconesComunes( hCabecera, hLinea, nTotalLinea, nView )

            if empty( sPrecio ) .OR. ( sPrecio:nDtoPorcentual >= sPrecioOferta():getDtoPorcentual( nView ) )
               sPrecio        := sPrecioOferta():get( hLinea, nView )
            end

         end

         ( D():Ofertas( nView ) )->( dbSkip() )

      end

   end

   D():setStatusOfertas( nView )

RETURN sPrecio



FUNCTION hOfertaTemporada( hCabecera, hLinea, nTotalLinea, nView )

   local sPrecio
   local cCodigoTemporada

   D():getStatusOfertas( nView )
   ( D():Ofertas( nView ) )->( ordSetFocus( "cArtOfe" ) )

   cCodigoTemporada           := retFld( hLinea[ "Articulo" ], D():Articulos( nView ), "cCodTemp" )

   if ( D():Ofertas( nView ) )->( dbSeek( cCodigoTemporada ) )

      while ( D():Ofertas( nView ) )->cArtOfe  == cCodigoTemporada .AND. !( D():Ofertas( nView ) )->( Eof() )

         if isOfertaTemporada( nView ) .AND. isCondiconesComunes( hCabecera, hLinea, nTotalLinea, nView )

            if empty( sPrecio ) .OR. ( sPrecio:nDtoPorcentual >= sPrecioOferta():getDtoPorcentual( nView ) )
               sPrecio        := sPrecioOferta():get( hLinea, nView )
            end

         end

         ( D():Ofertas( nView ) )->( dbSkip() )

      end

   end

   D():setStatusOfertas( nView )

RETURN sPrecio



FUNCTION hOfertaFabricante( hCabecera, hLinea, nTotalLinea, nView )

   local sPrecio
   local cCodigoFabricante

   D():getStatusOfertas( nView )
   ( D():Ofertas( nView ) )->( ordSetFocus( "cArtOfe" ) )

   cCodigoFabricante           := retFld( hLinea[ "Articulo" ], D():Articulos( nView ), "cCodFab" )

   if ( D():Ofertas( nView ) )->( dbSeek( cCodigoFabricante ) )

      while ( D():Ofertas( nView ) )->cArtOfe  == cCodigoFabricante .AND. !( D():Ofertas( nView ) )->( Eof() )

         if isOfertaFabricante( nView ) .AND. isCondiconesComunes( hCabecera, hLinea, nTotalLinea, nView )

            if empty( sPrecio ) .OR. ( sPrecio:nDtoPorcentual >= sPrecioOferta():getDtoPorcentual( nView ) )
               sPrecio        := sPrecioOferta():get( hLinea, nView )
            end

         end

         ( D():Ofertas( nView ) )->( dbSkip() )

      end

   end

   D():setStatusOfertas( nView )

RETURN sPrecio



Static Function getPrecioOferta( nTarifa, lIvaIncluido, nView )

   local nPrecioOferta  := 0



   if ( D():Ofertas( nView ) )->nTipOfe == 2
      Return ( nPrecioOferta )
   end

   do case
      case nTarifa == 1
         nPrecioOferta  :=  if( lIvaIncluido, ( D():Ofertas( nView ) )->nPreIva1, ( D():Ofertas( nView ) )->nPreOfe1 )
      case nTarifa == 2
         nPrecioOferta  :=  if( lIvaIncluido, ( D():Ofertas( nView ) )->nPreIva2, ( D():Ofertas( nView ) )->nPreOfe2 )
      case nTarifa == 3
         nPrecioOferta  :=  if( lIvaIncluido, ( D():Ofertas( nView ) )->nPreIva3, ( D():Ofertas( nView ) )->nPreOfe3 )
      case nTarifa == 4
         nPrecioOferta  :=  if( lIvaIncluido, ( D():Ofertas( nView ) )->nPreIva4, ( D():Ofertas( nView ) )->nPreOfe4 )
      case nTarifa == 5
         nPrecioOferta  :=  if( lIvaIncluido, ( D():Ofertas( nView ) )->nPreIva5, ( D():Ofertas( nView ) )->nPreOfe5 )
      case nTarifa == 6
         nPrecioOferta  :=  if( lIvaIncluido, ( D():Ofertas( nView ) )->nPreIva6, ( D():Ofertas( nView ) )->nPreOfe6 )
   end

Return ( nPrecioOferta )



Static Function isValidClient( hCabecera, nView )

   local cGrupoCliente



   if ( D():Ofertas( nView ) )->nCliOfe == 1
      Return .T.
   end



   if ( D():Ofertas( nView ) )->nCliOfe == 3 .AND. hCabecera[ "Cliente" ] == ( D():Ofertas( nView ) )->cCliOfe
      Return .T.
   end

   cGrupoCliente           := retGrpCli( hCabecera[ "Cliente" ], D():Clientes( nView ) )
   if ( D():Ofertas( nView ) )->nCliOfe == 2 .AND. cGrupoCliente == ( D():Ofertas( nView ) )->cGrpOfe
      Return .T.
   end

Return ( .F. )



Static Function isOfertaArticulo( nView )
Return ( ( D():Ofertas( nView ) )->nTblOfe < 2 )



Static Function isOfertaFamilia( nView )
Return ( ( D():Ofertas( nView ) )->nTblOfe == 2 )



Static Function isOfertaTipoArticulo( nView )
Return ( ( D():Ofertas( nView ) )->nTblOfe == 3 )



Static Function isOfertaCategoria( nView )
Return ( ( D():Ofertas( nView ) )->nTblOfe == 4 )



Static Function isOfertaTemporada( nView )
Return ( ( D():Ofertas( nView ) )->nTblOfe == 5 )



Static Function isOfertaFabricante( nView )
Return ( ( D():Ofertas( nView ) )->nTblOfe == 6 )



Static Function isValidFecha( hCabecera, nView )

Return ( ( hCabecera[ "Fecha" ] >= ( D():Ofertas( nView ) )->dIniOfe .OR. empty( ( D():Ofertas( nView ) )->dIniOfe ) ) .AND. ( hCabecera[ "Fecha" ] <= ( D():Ofertas( nView ) )->dFinOfe .OR. empty( ( D():Ofertas( nView ) )->dFinOfe ) ) )



Static Function isOfertaPrecio( nView )
Return ( ( D():Ofertas( nView ) )->nTipOfe < 2 )



Static Function isImporteMinimo( nTotalLinea, nView )
Return ( ( D():Ofertas( nView ) )->nMinCan == 1 .AND. ( ( D():Ofertas( nView ) )->nImpMin == 0 .OR. ( ( D():Ofertas( nView ) )->nImpMin <> 0 .AND. nTotalLinea >= ( D():Ofertas( nView ) )->nImpMin ) ) )



Static Function isCajasMinimas( nTotalCajas, nView )
Return ( ( D():Ofertas( nView ) )->nMinCan == 2 .AND. ( D():Ofertas( nView ) )->nMinTip == 1 .AND. ( ( D():Ofertas( nView ) )->nCajMin == 0 .OR. ( ( D():Ofertas( nView ) )->nCajMin <> 0 .AND. nTotalCajas >= ( D():Ofertas( nView ) )->nCajMin ) ) )



Static Function isUnidadesMinimas( nTotalUnidades, nView )
Return ( ( D():Ofertas( nView ) )->nMinCan == 2 .AND. ( D():Ofertas( nView ) )->nMinTip == 2 .AND. ( ( D():Ofertas( nView ) )->nUndMin == 0 .OR. ( ( D():Ofertas( nView ) )->nUndMin <> 0 .AND. nTotalUnidades >= ( D():Ofertas( nView ) )->nUndMin ) ) )



Static Function isCondiconesComunes( hCabecera, hLinea, nTotalLinea, nView )

   local lReturn  := .F.







   lReturn        := isValidFecha( hCabecera, nView ) .AND.  isValidClient( hCabecera, nView ) .AND. if( isOfertaPrecio( nView ), (  isImporteMinimo( nTotalLinea, nView ) .OR. isCajasMinimas( hLinea[ "Cajas" ], nView ) .OR. isUnidadesMinimas( hLinea[ "Unidades" ], nView ) ), .T. )

Return ( lReturn )









_HB_CLASS sPrecioOferta ; function sPrecioOferta ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "sPrecioOferta", iif( .F., { }, { @HBObject() } ), @sPrecioOferta() ) ) ;

   _HB_MEMBER { nPrecio } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPrecio"}, .F. )
   _HB_MEMBER { nDtoPorcentual } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDtoPorcentual"}, .F. )
   _HB_MEMBER { nDtoLineal } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDtoLineal"}, .F. )
   _HB_MEMBER { nCajasGratis } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCajasGratis"}, .F. )
   _HB_MEMBER { nUnidadesGratis } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nUnidadesGratis"}, .F. )





   _HB_MEMBER say(); oClass:AddInline( "say", {|Self | ( ( Self ) ), ( "nPrecio" + str( ::nPrecio ) + Chr(13)+Chr(10) + "nDtoPorcentual" + str( ::nDtoPorcentual ) + Chr(13)+Chr(10) + "nDtoLineal" + str( ::nDtoLineal ) + Chr(13)+Chr(10) + "nCajasGratis " + str( ::nCajasGratis ) + Chr(13)+Chr(10) + "nUnidadesGratis " + str( ::nUnidadesGratis ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER get( nTarifa, nImpuestosIncluidos, nView); oClass:AddMethod( "get", @sPrecioOferta_get(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPrecio(); oClass:AddInline( "getPrecio", {|Self, hLinea, nView | ( ( Self ) ), ( getPrecioOferta( hLinea[ "NumeroTarifa" ], hLinea[ "LineaImpuestoIncluido" ], nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDtoPorcentual(); oClass:AddInline( "getDtoPorcentual", {|Self, nView | ( ( Self ) ), ( ( D():Ofertas( nView ) )->nDtoPct ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDtoLineal(); oClass:AddInline( "getDtoLineal", {|Self, nView | ( ( Self ) ), ( ( D():Ofertas( nView ) )->nDtoLin ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isImporte(); oClass:AddInline( "isImporte", {|Self | ( ( Self ) ), ( ::nPrecio <> 0 .OR. ::nDtoPorcentual <> 0 .OR. ::nDtoLineal <> 0 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER menor( sPrecio); oClass:AddMethod( "menor", @sPrecioOferta_menor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS sPrecioOferta ;



static FUNCTION sPrecioOferta_get( hLinea, nView ) ; local Self AS CLASS sPrecioOferta := QSelf() AS CLASS sPrecioOferta

   local nDifrenciaUnidades

   ::nDtoPorcentual        := ::getDtoPorcentual( nView )
   ::nDtoLineal            := ::getDtoLineal( nView )

   if ( D():Ofertas( nView ) )->nTipOfe == 1

      ::nPrecio            := ::getPrecio( hLinea, nView )

   else

      nDifrenciaUnidades   := ( D():Ofertas( nView ) )->nUnvOfe - ( D():Ofertas( nView ) )->nUncOfe

      if ( D():Ofertas( nView ) )->nTipXbY == 1
         ::nCajasGratis    := int( div( hLinea[ "Cajas" ], ( D():Ofertas( nView ) )->nUnvOfe ) ) * nDifrenciaUnidades
      end
      if ( D():Ofertas( nView ) )->nTipXbY == 2
         ::nUnidadesGratis := int( div( hLinea[ "Unidades" ], ( D():Ofertas( nView ) )->nUnvOfe ) ) * nDifrenciaUnidades
      end

   end

RETURN ( self )



static FUNCTION sPrecioOferta_menor( sPrecio ) ; local Self AS CLASS sPrecioOferta := QSelf() AS CLASS sPrecioOferta

   if ::nPrecio > 0
      return ( ::nPrecio < sPrecio:nPrecio )
   end

 return ( ::nUnidadesGratis < sPrecio:nUnidadesGratis )
