#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\OrdenComandasController.prg"
_HB_CLASS OrdenComandasController ; function OrdenComandasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OrdenComandasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @OrdenComandasController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @OrdenComandasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @OrdenComandasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER VerifyOrden(); oClass:AddMethod( "VerifyOrden", @OrdenComandasController_VerifyOrden(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OrdenComandasController ;



static FUNCTION OrdenComandasController_New( ) ; local Self AS CLASS OrdenComandasController := QSelf() AS CLASS OrdenComandasController

   ::Super:New()

   ::cTitle                      := "Ordenes de comanda"

   ::cName                       := "Orden_comandas"



   ::hImage                      := {  "16" => "gc_sort_az_descending_16", "32" => "gc_sort_az_descending_32", "48" => "gc_sort_az_descending_48" }

   ::nLevel                      := Auth():Level( ::cName )

   ::oModel                      := SQLOrdenComandasModel():New( self )

   ::oBrowseView                 := OrdenComandasBrowseView():New( self )

   ::oDialogView                 := OrdenComandasView():New( self )

   ::oValidator                  := OrdenComandasValidator():New( self, ::oDialogView )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oRepository                 := OrdenComandasRepository():New( self )

   ::setEvent( "closedDialog", {|| ::VerifyOrden() } )

RETURN ( Self )



static FUNCTION OrdenComandasController_End( ) ; local Self AS CLASS OrdenComandasController := QSelf() AS CLASS OrdenComandasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oCamposExtraValoresController:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION OrdenComandasController_VerifyOrden( ) ; local Self AS CLASS OrdenComandasController := QSelf() AS CLASS OrdenComandasController

   local cSQL           := "UPDATE orden_comandas SET orden = orden + 1 WHERE orden >= " + toSQLString( ::oModel:hBuffer[ "orden" ] )

RETURN ( getSQLDatabase():Exec( cSQL ) )










_HB_CLASS OrdenComandasBrowseView ; function OrdenComandasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OrdenComandasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @OrdenComandasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @OrdenComandasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OrdenComandasBrowseView ;



static FUNCTION OrdenComandasBrowseView_addColumns( ) ; local Self AS CLASS OrdenComandasBrowseView := QSelf() AS CLASS OrdenComandasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "descripcion"
      :cHeader             := "Descripcion"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "descripcion" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "orden"
      :cHeader             := "Orden"
      :nWidth              := 70
      :bEditValue          := {|| ::getRowSet():fieldGet( "orden" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS OrdenComandasView ; function OrdenComandasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OrdenComandasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @OrdenComandasView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @OrdenComandasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OrdenComandasView ;



static FUNCTION OrdenComandasView_Activate( ) ; local Self AS CLASS OrdenComandasView := QSelf() AS CLASS OrdenComandasView

   local oDialog
   local oSayCamposExtra



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "Orden de comanda", "ORDEN_COMANDA",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "descripcion" ], ::oController:oModel:hBuffer[ "descripcion" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "descripcion" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )







   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "orden" ], ::oController:oModel:hBuffer[ "orden" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "orden" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,, {||         1},,, nil,,, )






   ::oSayCamposExtra := TSay():ReDefine( 130, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()

RETURN ( ::oDialog:nResult )








_HB_CLASS OrdenComandasValidator ; function OrdenComandasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OrdenComandasValidator", iif( .T., { @SQLCompanyValidator() }, { @HBObject() } ), @OrdenComandasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @OrdenComandasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OrdenComandasValidator ;



static FUNCTION OrdenComandasValidator_getValidators( ) ; local Self AS CLASS OrdenComandasValidator := QSelf() AS CLASS OrdenComandasValidator





   ::hValidators  := {  "descripcion" =>           {  "required"           => "La descripcion es un dato requerido", "unique"             => "La descripcion introducido ya existe" }, "codigo" =>                {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe"  }, "orden" =>                 {  "unique"             => "El orden introducido ya existe"  } }
RETURN ( ::hValidators )










_HB_CLASS SQLOrdenComandasModel ; function SQLOrdenComandasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLOrdenComandasModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLOrdenComandasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "orden_comandas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLOrdenComandasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getOrden(); oClass:AddMethod( "getOrden", @SQLOrdenComandasModel_getOrden(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLOrdenComandasModel ;



static FUNCTION SQLOrdenComandasModel_getColumns( ) ; local Self AS CLASS SQLOrdenComandasModel := QSelf() AS CLASS SQLOrdenComandasModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"             , "default"   => {|| win_uuidcreatestring() } }            )
   ::getEmpresaColumns()


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 )"                            , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "descripcion",       {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                       )


   hset( ::hColumns, "orden",             {  "create"    => "INTEGER "                                  , "default"   => { || ::getOrden() } }                       )

   ::getTimeStampColumns()

RETURN ( ::hColumns )



static FUNCTION SQLOrdenComandasModel_getOrden( ) ; local Self AS CLASS SQLOrdenComandasModel := QSelf() AS CLASS SQLOrdenComandasModel

   local cSQL
   local nOrden

   cSQL           := "SELECT orden FROM orden_comandas ORDER BY orden DESC LIMIT 1"

   nOrden         := getSQLDatabase():getValue( cSQL )


   if hb_isnumeric( nOrden )
      RETURN ( nOrden + 1 )
   end

RETURN ( 1 )










_HB_CLASS OrdenComandasRepository ; function OrdenComandasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OrdenComandasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @OrdenComandasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLOrdenComandasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OrdenComandasRepository ;