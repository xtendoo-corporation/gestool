#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\presenter\documentos\ventas\OrderCustomer.prg"
_HB_CLASS OrderCustomer ; function OrderCustomer ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "OrderCustomer", iif( .T., { @DocumentsSales() }, { @HBObject() } ), @OrderCustomer() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @OrderCustomer_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetAppendDocumento(); oClass:AddMethod( "GetAppendDocumento", @OrderCustomer_GetAppendDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetEditDocumento(); oClass:AddMethod( "GetEditDocumento", @OrderCustomer_GetEditDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLinesDocument(); oClass:AddMethod( "getLinesDocument", @OrderCustomer_getLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDocumentLine(); oClass:AddMethod( "getDocumentLine", @OrderCustomer_getDocumentLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLines(); oClass:AddInline( "getLines", {|Self | ( ( Self ) ), ( ::oDocumentLines:getLines() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLineDetail(); oClass:AddInline( "getLineDetail", {|Self | ( ( Self ) ), ( ::oDocumentLines:getLineDetail( ::nPosDetail ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAppendDetail(); oClass:AddMethod( "getAppendDetail", @OrderCustomer_getAppendDetail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteLinesDocument(); oClass:AddMethod( "deleteLinesDocument", @OrderCustomer_deleteLinesDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER printDocument(); oClass:AddMethod( "printDocument", @OrderCustomer_printDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Build( oSender); oClass:AddMethod( "Build", @OrderCustomer_Build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS OrderCustomer ;



static FUNCTION OrderCustomer_New( ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   ::super:New( self )





   ::hTextDocuments                    := {  "textMain"     => getConfigTraslation("Pedidos de clientes"), "textShort"    => "Pedido", "textTitle"    => "lineas de pedidos", "textSummary"  => "Resumen pedido", "textGrid"     => "Grid pedido clientes" }



   ::oViewSearchNavigator:setTitleDocumento( getConfigTraslation("Pedidos de clientes") )

   ::oViewEdit:setTitleDocumento( "Pedido" )

   ::oViewEditResumen:setTitleDocumento( "Resumen pedidos" )



   ::setTypePrintDocuments( "PC" )

   ::setCounterDocuments( "nPedCli" )



   ::setDataTable( "PedCliT" )
   ::setDataTableLine( "PedCliL" )

RETURN ( self )



static FUNCTION OrderCustomer_Build( oSender ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   ::oSender               := oSender

   ::oViewSearchNavigator  := DocumentSalesViewSearchNavigator():New( self )

   ::oViewEdit             := DocumentSalesViewEdit():New( self )

   ::oViewEditResumen      := ViewEditResumen():New( self )

   ::oCliente              := Customer():init( self )

   ::oProduct              := Product():init( self )

   ::oProductStock         := ProductStock():init( self )

   ::oStore                := Store():init( self )

   ::oPayment              := Payment():init( self )

   ::oDirections           := Directions():init( self )

   ::oDocumentLines        := DocumentLines():New( self )

   ::oLinesDocumentsSales  := LinesOrderCustomer():New( self )

   ::oTotalDocument        := TotalDocument():New( self )

return ( self )



static FUNCTION OrderCustomer_GetAppendDocumento( ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   ::hDictionaryMaster      := D():getDefaultHashPedidoCliente( ::nView )

RETURN ( self )



static FUNCTION OrderCustomer_GetEditDocumento( ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   local id                := D():PedidosClientesId( ::nView )

   if Empty( id )
      RETURN .F.
   end

   ::hDictionaryMaster     := D():GetPedidoCliente( ::nView )

   if empty( ::hDictionaryMaster )
      RETURN .F.
   end

   ::getLinesDocument( id )

RETURN ( .T. )






static FUNCTION OrderCustomer_getLinesDocument( id ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   ::oDocumentLines:reset()

   D():getStatusPedidosClientesLineas( ::nView )

   ( D():PedidosClientesLineas( ::nView ) )->( ordSetFocus( 1 ) )

   if ( D():PedidosClientesLineas( ::nView ) )->( dbSeek( id ) )

      while ( D():PedidosClientesLineasId( ::nView ) == id ) .AND. !( D():PedidosClientesLineas( ::nView ) )->( eof() )

         ::addDocumentLine()

         ( D():PedidosClientesLineas( ::nView ) )->( dbSkip() )

      end

   end

   D():setStatusPedidosClientesLineas( ::nView )

RETURN ( self )



static FUNCTION OrderCustomer_getDocumentLine( ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   local hLine    := D():GetPedidoClienteLineasHash( ::nView )

RETURN ( DictionaryDocumentLine():New( self, hLine ) )



static FUNCTION OrderCustomer_getAppendDetail( ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   local hLine             := D():GetPedidoClienteLineasDefaultValue( ::nView )

   ::oDocumentLineTemporal := DictionaryDocumentLine():New( self, hLine )

RETURN ( self )



static FUNCTION OrderCustomer_deleteLinesDocument( ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   D():getStatusPedidosClientesLineas( ::nView )

   ( D():PedidosClientesLineas( ::nView ) )->( ordSetFocus( 1 ) )

   while ( D():PedidosClientesLineas( ::nView ) )->( dbSeek( ::getID() ) )
      ::delDocumentLine()
   end

   D():setStatusPedidosClientesLineas( ::nView )

RETURN ( Self )



static FUNCTION OrderCustomer_printDocument( ) ; local Self AS CLASS OrderCustomer := QSelf() AS CLASS OrderCustomer

   imprimePedidoCliente( ::getID(), ::cFormatToPrint )

RETURN ( .T. )
