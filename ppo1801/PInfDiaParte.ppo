#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\PInfDiaParte.prg"
_HB_CLASS PInfDiaParte ; function PInfDiaParte ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PInfDiaParte", iif( .T., { @TNewInfGen() }, { @HBObject() } ), @PInfDiaParte() ) ) ;

   _HB_MEMBER { AS OBJECT oProduccT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProduccT"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @PInfDiaParte_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @PInfDiaParte_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @PInfDiaParte_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @PInfDiaParte_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @PInfDiaParte_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PInfDiaParte ;



static FUNCTION PInfDiaParte_Create( ) ; local Self AS CLASS PInfDiaParte := QSelf() AS CLASS PInfDiaParte

   ::AddField( "cNumDoc",   "C", 12, 0,  {|| "@!" },        "Documento",      .T., "Número de documento"      , 14, .F. )
   ::AddField( "cCodTOpe",  "C",  3, 0,  {|| "@!" },        "Tip. Ope.",      .F., "Código del tipo operación",  5, .F. )
   ::AddField( "cNomTOpe",  "C", 35, 0,  {|| "@!" },        "Nom. Ope.",      .F., "Nombre del tipo operación", 20, .F. )
   ::AddField( "cCodOpe",   "C",  3, 0,  {|| "@!" },        "Ope.",           .T., "Código de la operación"   ,  5, .F. )
   ::AddField( "cNomOpe",   "C", 35, 0,  {|| "@!" },        "Nom. Ope.",      .F., "Nombre de la operación"   , 20, .F. )
   ::AddField( "cCodSec",   "C",  3, 0,  {|| "@!" },        "Sec.",           .T., "Código de la sección"     ,  5, .F. )
   ::AddField( "cNomSec",   "C", 35, 0,  {|| "@!" },        "Nom. Sec.",      .F., "Nombre de la sección"     , 20, .F. )
   ::AddField( "cCodAlm",   "C",  3, 0,  {|| "@!" },        "Alm.",           .T., "Código almacén"           ,  5, .F. )
   ::AddField( "cNomAlm",   "C", 20, 0,  {|| "@!" },        "Nom. Alm.",      .F., "Nombre almacén"           , 20, .F. )
   ::AddField( "dFecMov",   "D",  8, 0,  {|| "@!" },        "Fec. inicio",    .F., "Fecha de inicio"          , 12, .F. )
   ::AddField( "dFecFin",   "D",  8, 0,  {|| "@!" },        "Fec. fin",       .F., "Fecha de fin"             , 12, .F. )
   ::AddField( "cHorIni",   "C",  5, 0,  {|| "@R 99:99" },  "Hora inicio",    .F., "Hora de inicio"           , 12, .F. )
   ::AddField( "cHorFin",   "C",  5, 0,  {|| "@R 99:99" },  "Hora fin",       .F., "Hora de fin"              , 12, .F. )
   ::AddField( "nTEmpleado","N", 16, 6,  {|| "@E 9999.99" },"Horas",          .T., "Tiempo empleado"          ,  8, .T. )
   ::AddField( "nTotPro",   "N", 16, 6,  {|| ::cPicImp },   "Tot. producc.",  .T., "Tot. producido"           , 14, .T. )
   ::AddField( "nTotMat",   "N", 16, 6,  {|| ::cPicImp },   "Tot. materias",  .T., "Tot. materias primas"     , 14, .T. )
   ::AddField( "nTotPer",   "N", 16, 6,  {|| ::cPicImp },   "Tot. personal",  .T., "Tot. personal"            , 14, .T. )
   ::AddField( "nTotMaq",   "N", 16, 6,  {|| ::cPicImp },   "Tot. maquinas",  .T., "Tot. maquinaria"          , 14, .T. )
   ::AddField( "nVolumen",  "N", 16, 6,  {|| MasUnd()  },   "Tot. volumen",   .F., "Tot. volumen"             , 12, .T. )
   ::AddField( "nCosLit",   "N", 16, 6,  {|| ::cPicImp },   "Costo/litro",    .F., "Costo/litro"              , 14, .T. )

RETURN ( self )



static FUNCTION PInfDiaParte_OpenFiles( ) ; local Self AS CLASS PInfDiaParte := QSelf() AS CLASS PInfDiaParte

   local lOpen       := .T.
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oProduccT    := TProduccion():New( cPatEmp(), cDriver(), oWnd(), "04008" )
      ::oProduccT:OpenFiles()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION PInfDiaParte_CloseFiles( ) ; local Self AS CLASS PInfDiaParte := QSelf() AS CLASS PInfDiaParte

   if !Empty( ::oProduccT )
      ::oProduccT:end()
   end

   ::oProduccT := nil

RETURN ( Self )



static FUNCTION PInfDiaParte_lResource( cFld ) ; local Self AS CLASS PInfDiaParte := QSelf() AS CLASS PInfDiaParte

   ::lNewInforme  := .T.

   if !::NewResource( "INF_GEN_PRODUCCION" )
      return .F.
   end

   ::oDefHoraInicio()
   ::oDefHoraFin()

   if !::lGrupoTOperacion( .F. )
      return .F.
   end

   if !::lGrupoOperacion( .F. )
      return .F.
   end

   if !::lGrupoSeccion( .F. )
      return .F.
   end

   if !::lGrupoAlmacen( .F. )
      return .F.
   end

   ::lDefCondiciones := .F.

   ::oMtrInf:SetTotal( ::oProduccT:oDbf:Lastrec() )

   ::CreateFilter( , ::oProduccT:oDbf )

RETURN .T.



static FUNCTION PInfDiaParte_lGenerate( ) ; local Self AS CLASS PInfDiaParte := QSelf() AS CLASS PInfDiaParte

   local cExpHead          := ""
   local cCodTipoOperacion := Space( 3 )

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()






   ::aHeader   := {  {|| Padr( "Fecha", 13 ) + ": " + Dtoc( Date() ) }, {|| Padr( "Periodo", 13 ) + ": " + Dtoc( ::dIniInf ) + Space( 1 ) + Trans( ::cHoraInicio, "@R 99:99" ) + " > " + Dtoc( ::dFinInf ) + Space( 1 ) + Trans( ::cHoraFin, "@R 99:99" ) } }

   if !::oGrupoTOperacion:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Tip. operación", 13 ) + ": " + AllTrim( ::oGrupoTOperacion:Cargo:Desde ) + " > " + AllTrim( ::oGrupoTOperacion:Cargo:Hasta ) } )
   end

   if !::oGrupoOperacion:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Operación", 13 ) + ": " + AllTrim( ::oGrupoOperacion:Cargo:Desde ) + " > " + AllTrim( ::oGrupoOperacion:Cargo:Hasta ) } )
   end

   if !::oGrupoSeccion:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Sección", 13 ) + ": " + AllTrim( ::oGrupoSeccion:Cargo:Desde ) + " > " + AllTrim( ::oGrupoSeccion:Cargo:Hasta ) } )
   end

   if !::oGrupoAlmacen:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Almacén", 13 ) + ": " + AllTrim( ::oGrupoAlmacen:Cargo:Desde ) + " > " + AllTrim( ::oGrupoAlmacen:Cargo:Hasta ) } )
   end





   ::oProduccT:oDbf:OrdSetFocus( "dFecOrd" )

   cExpHead       := '( dFecOrd > Ctod( "' + Dtoc( ::dIniInf ) + '" ) .or. ( dFecOrd == Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Alltrim( cHorIni ) >= Alltrim( "' + ::cHoraInicio + '") ) ) .and. '
   cExpHead       += '( dFecFin < Ctod( "' + Dtoc( ::dFinInf ) + '" ) .or. ( dFecFin <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) .and. Alltrim( cHorFin ) <= Alltrim( "' + ::cHoraFin + '") ) )'

   if !::oGrupoOperacion:Cargo:Todos
      cExpHead    += ' .and. cCodOpe >= "' + Rtrim( ::oGrupoOperacion:Cargo:Desde ) + '" .and. cCodOpe <= "' + Rtrim( ::oGrupoOperacion:Cargo:Hasta ) + '"'
   end

   if !::oGrupoSeccion:Cargo:Todos
      cExpHead    += ' .and. cCodSec >= "' + Rtrim( ::oGrupoSeccion:Cargo:Desde ) + '" .and. cCodSec <= "' + Rtrim( ::oGrupoSeccion:Cargo:Hasta ) + '"'
   end

   if !::oGrupoAlmacen:Cargo:Todos
      cExpHead    += ' .and. cAlmOrd >= "' + Rtrim( ::oGrupoAlmacen:Cargo:Desde ) + '" .and. cAlmOrd <= "' + Rtrim( ::oGrupoAlmacen:Cargo:Hasta ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead    += " .and. " + ::oFilter:cExpresionFilter
   end


   ::oProduccT:oDbf:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDbf:cFile ), ::oProduccT:oDbf:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oProduccT:oDbf:OrdKeyCount() )

   ::oProduccT:oDbf:GoTop()

   while !::lBreak .AND. !::oProduccT:oDbf:Eof()

      cCodTipoOperacion := oRetFld( ::oProduccT:oDbf:cCodOpe, ::oProduccT:oOperacion:oDbf, "cTipOpe" )



      if lChkSer( ::oProduccT:oDbf:cSerOrd, ::aSer ) .AND. ( ::oGrupoTOperacion:Cargo:Todos .OR. ( cCodTipoOperacion >= ::oGrupoTOperacion:Cargo:Desde .AND. cCodTipoOperacion <= ::oGrupoTOperacion:Cargo:Hasta ) )

         ::oDbf:Append()

         ::oDbf:cNumDoc    := ::oProduccT:oDbf:cSerOrd + "/" + AllTrim( Str( ::oProduccT:oDbf:nNumOrd ) ) + "/" + ::oProduccT:oDbf:cSufOrd
         ::oDbf:cCodOpe    := ::oProduccT:oDbf:cCodOpe
         ::oDbf:cCodSec    := ::oProduccT:oDbf:cCodSec
         ::oDbf:cCodAlm    := ::oProduccT:oDbf:cAlmOrd
         ::oDbf:cCodTOpe   := cCodTipoOperacion
         ::oDbf:cNomTOpe   := oRetFld( cCodTipoOperacion, ::oProduccT:oOperacion:oTipOpera:oDbf, "cDesTip" )
         ::oDbf:cNomOpe    := oRetFld( ::oDbf:cCodOpe, ::oOperacion:oDbf )
         ::oDbf:cNomSec    := oRetFld( ::oDbf:cCodSec, ::oSeccion:oDbf )
         ::oDbf:cNomAlm    := oRetFld( ::oDbf:cCodAlm, ::oDbfAlm )
         ::oDbf:dFecMov    := ::oProduccT:oDbf:dFecOrd
         ::oDbf:dFecFin    := ::oProduccT:oDbf:dFecFin
         ::oDbf:cHorIni    := ::oProduccT:oDbf:cHorIni
         ::oDbf:cHorFin    := ::oProduccT:oDbf:cHorFin
         ::oDbf:nTEmpleado := nTiempoEntreFechas( ::oProduccT:oDbf:dFecOrd, ::oProduccT:oDbf:dFecFin, ::oProduccT:oDbf:cHorIni, ::oProduccT:oDbf:cHorFin )
         ::oDbf:nTotPro    := ::oProduccT:nTotalProducido( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )
         ::oDbf:nTotMat    := ::oProduccT:nTotalMaterial( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )
         ::oDbf:nTotPer    := ::oProduccT:nTotalPersonal( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )
         ::oDbf:nTotMaq    := ::oProduccT:nTotalMaquina( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )
         ::oDbf:nVolumen   := ::oProduccT:nTotalVolumen( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )
         ::oDbf:nCosLit    := ( ::oDbf:nTotMat + ::oDbf:nTotPer + ::oDbf:nTotMaq ) / ::oDbf:nVolumen

         ::oDbf:Save()

      end

      ::oProduccT:oDbf:Skip()

      ::oMtrInf:AutoInc( ::oProduccT:oDbf:OrdKeyNo() )

   end

   ::oProduccT:oDbf:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDbf:cFile ) )

   ::oMtrInf:AutoInc( ::oProduccT:oDbf:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
