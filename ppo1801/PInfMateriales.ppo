#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\PInfMateriales.prg"
_HB_CLASS PInfMateriales ; function PInfMateriales ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PInfMateriales", iif( .T., { @TInfGen() }, { @HBObject() } ), @PInfMateriales() ) ) ;

   _HB_MEMBER { AS OBJECT oProduccT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProduccT"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @PInfMateriales_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @PInfMateriales_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @PInfMateriales_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @PInfMateriales_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @PInfMateriales_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PInfMateriales ;



static FUNCTION PInfMateriales_Create( ) ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   ::AddField( "cCodOpe",  "C",  3, 0,  {|| "@!" },       "Ope",          .F., "Código de la operación"      ,  5, .F. )
   ::AddField( "cCodSec",  "C",  3, 0,  {|| "@!" },       "Sec",          .F., "Código de la sección"        ,  5, .F. )
   ::AddField( "cCodAlm",  "C",  3, 0,  {|| "@!" },       "Alm",          .F., "Código almacén"              ,  5, .F. )
   ::AddField( "dFecMov",  "D",  8, 0,  {|| "@!" },       "Fec. inicio",  .T., "Fecha de inicio"             , 12, .F. )
   ::AddField( "dFecFin",  "D",  8, 0,  {|| "@!" },       "Fec. fin",     .T., "Fecha de Fin"                , 12, .F. )
   ::AddField( "cHorIni",  "C",  5, 0,  {|| "@R 99:99"},  "Hora inicio",  .T., "Hora de inicio"              , 12, .F. )
   ::AddField( "cHorFin",  "C",  5, 0,  {|| "@R 99:99"},  "Hora fin",     .T., "Hora de fin"                 , 12, .F. )
   ::AddField( "cNumDoc",  "C", 12, 0,  {|| "@!" },       "Documento",    .T., "Número de documento"         , 20, .F. )
   ::AddField( "cCodArt",  "C", 18, 0,  {|| "@!" },       "Código artículo",    .T., "Código artículo"             , 14, .F. )
   ::AddField( "cNomArt",  "C",100, 0,  {|| "@!" },       "Artículo",     .T., "Nombre artículo"             , 35, .F. )
   ::AddField( "nCajas",   "N", 16, 6,  {|| MasUnd()},    "Cajas",        .T., "Cajas"                       , 12, .T. )
   ::AddField( "nUniCaj",  "N", 16, 6,  {|| MasUnd()},    "Uni. cajas",   .T., "Uidades por cajas"           , 12, .T. )
   ::AddField( "nUnidades","N", 16, 6,  {|| MasUnd()},    "Unidades",     .T., "Total unidades"              , 12, .T. )
   ::AddField( "nImporte", "N", 16, 6,  {|| ::cPicOut },  "Importe",      .F., "Importe"                     , 12, .T. )
   ::AddField( "nPeso",    "N", 16, 6,  {|| MasUnd() },   "Peso",         .F., "Peso"                        , 12, .T. )
   ::AddField( "nVolumen", "N", 16, 6,  {|| MasUnd() },   "Volumen",      .F., "Volumen"                     , 12, .T. )

RETURN ( self )



static FUNCTION PInfMateriales_OpenFiles( ) ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   local lOpen       := .T.
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oProduccT    :=  TProduccion():Create( cPatEmp() )
      ::oProduccT:OpenFiles()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION PInfMateriales_CloseFiles( ) ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   if !Empty( ::oProduccT )
      ::oProduccT:end()
   end

   ::oProduccT := nil

RETURN ( Self )



static FUNCTION PInfMateriales_lResource( cFld ) ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   ::lNewInforme  := .T.

   if !::StdResource( "PROINFMATERIALES" )
      return .F.
   end

   if !::oDefOpera( 100, 101, 110, 111, 120, .T. )
      return .F.
   end

   if !::oDefSeccion( 130, 131, 140, 141, 150, .T. )
      return .F.
   end

   if !::oDefAlmInf( 160, 161, 170, 171, 180 )
      return .F.
   end

   ::oMtrInf:SetTotal( ::oProduccT:oDbf:Lastrec() )

   ::CreateFilter( , ::oProduccT:oDbf )

RETURN .T.



static FUNCTION PInfMateriales_lGenerate( ) ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   local cExpHead := ""
   local cExpLine := ""

   ::oDlg:Disable()

   ::oBtnCancel:Enable()

   ::oDbf:Zap()





   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Operación : " + if( ::lOperaAll, "Todos", AllTrim( ::cOperaOrg ) + " > " + AllTrim( ::cOperaDes ) ) }, {|| "Sección   : " + if( ::lSeccionAll, "Todas", AllTrim( ::cSeccionOrg ) + " > " + AllTrim( ::cSeccionDes ) ) }, {|| "Almacén   : " + if( ::lAllAlm, "Todos", AllTrim( ::cAlmOrg ) + " > " + AllTrim( ::cAlmDes ) ) } }

   ::oProduccT:oDbf:OrdSetFocus( "dFecOrd" )
   ::oProduccT:oDetProduccion:oDbf:OrdSetFocus( "cNumOrd" )

   cExpHead       := 'dFecOrd >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFin <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lOperaAll
      cExpHead    += ' .and. cCodOpe >= "' + Rtrim( ::cOperaOrg ) + '" .and. cCodOpe <= "' + Rtrim( ::cOperaDes ) + '"'
   end

   if !::lSeccionAll
      cExpHead    += ' .and. cCodSec >= "' + Rtrim( ::cSeccionOrg ) + '" .and. cCodSec <= "' + Rtrim( ::cSeccionDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oProduccT:oDbf:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDbf:cFile ), ::oProduccT:oDbf:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oProduccT:oDbf:OrdKeyCount() )

   if !::lAllAlm
      cExpLine    += ' .and. cAlmOrd >= "' + Rtrim( ::cAlmOrg ) + '" .and. cAlmOrd <= "' + Rtrim( ::cAlmDes ) + '"'
   end

   ::oProduccT:oDetProduccion:oDbf:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDetProduccion:oDbf:cFile ), ::oProduccT:oDetProduccion:oDbf:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oProduccT:oDbf:GoTop()

   while !::lBreak .AND. !::oProduccT:oDbf:Eof()

      if lChkSer( ::oProduccT:oDbf:cSerOrd, ::aSer )

         if ::oProduccT:oDetProduccion:oDbf:Seek( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )

            while ::oProduccT:oDetProduccion:oDbf:cSerOrd + Str( ::oProduccT:oDetProduccion:oDbf:nNumOrd ) + ::oProduccT:oDetProduccion:oDbf:cSufOrd == ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd .AND. !::oProduccT:oDetProduccion:oDbf:eof()

               ::oDbf:Append()

               ::oDbf:cCodOpe    := ::oProduccT:oDbf:cCodOpe
               ::oDbf:cCodSec    := ::oProduccT:oDbf:cCodSec
               ::oDbf:cCodAlm    := ::oProduccT:oDetProduccion:oDbf:cAlmOrd
               ::oDbf:dFecMov    := ::oProduccT:oDbf:dFecOrd
               ::oDbf:dFecFin    := ::oProduccT:oDbf:dFecFin
               ::oDbf:cHorIni    := ::oProduccT:oDbf:cHorIni
               ::oDbf:cHorFin    := ::oProduccT:oDbf:cHorFin
               ::oDbf:cNumDoc    := ::oProduccT:oDbf:cSerOrd + "/" + AllTrim( Str( ::oProduccT:oDbf:nNumOrd ) ) + "/" + ::oProduccT:oDbf:cSufOrd
               ::oDbf:cCodArt    := ::oProduccT:oDetProduccion:oDbf:cCodArt
               ::oDbf:cNomArt    := ::oProduccT:oDetProduccion:oDbf:cNomArt
               ::oDbf:nCajas     := ::oProduccT:oDetProduccion:oDbf:nCajOrd
               ::oDbf:nUniCaj    := ::oProduccT:oDetProduccion:oDbf:nUndOrd
               ::oDbf:nUnidades  := NotCaja( ::oProduccT:oDetProduccion:oDbf:nCajOrd ) * ::oProduccT:oDetPRoduccion:oDbf:nUndOrd
               ::oDbf:nImporte   := ::oProduccT:oDetProduccion:oDbf:nImpOrd   * ::oDbf:nUnidades
               ::oDbf:nPeso      := ::oProduccT:oDetProduccion:oDbf:nPeso     * ::oDbf:nUnidades
               ::oDbf:nVolumen   := ::oProduccT:oDetProduccion:oDbf:nVolumen  * ::oDbf:nUnidades

               ::oDbf:Save()

               ::oProduccT:oDetProduccion:oDbf:Skip()

            end

         end

      end

      ::oProduccT:oDbf:Skip()

      ::oMtrInf:AutoInc( ::oProduccT:oDbf:OrdKeyNo() )

   end

   ::oProduccT:oDbf:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDbf:cFile ) )
   ::oProduccT:oDetProduccion:oDbf:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oProduccT:oDetProduccion:oDbf:cFile ) )

   ::oMtrInf:AutoInc( ::oProduccT:oDbf:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
