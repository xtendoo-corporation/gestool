#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Pais.prg"
_HB_CLASS TPais ; function TPais ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPais", iif( .T., { @TMant() }, { @HBObject() } ), @TPais() ) ) ;

   _HB_MEMBER { AS OBJECT oBan } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBan"}, .F. )

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_globe_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )

   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TPais_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER OpenService(); oClass:AddMethod( "OpenService", @TPais_OpenService(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TPais_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TPais_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TPais_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cNombre(); oClass:AddInline( "cNombre", {|Self, cCod | ( ( Self ) ), ( oRetFld( cCod, ::oDbf, "cNomPai" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetPais( cCodPai, oSay, oBmp); oClass:AddMethod( "GetPais", @TPais_GetPais(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave( oCmb, oDlg, nMode); oClass:AddMethod( "lPreSave", @TPais_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPais ;



static FUNCTION TPais_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   local lOpen          := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::DefineFiles()
   end

   ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      ::CloseFiles()

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de paises" )

   end

RETURN ( lOpen )



static FUNCTION TPais_OpenService( lExclusive, cPath ) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   local lOpen          := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      ::CloseFiles()

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de paises" )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TPais_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "PAIS.DBF", "Pais" ):New( "PAIS.DBF",, ( cDriver ), "Paises", ( cPath ) )

      ::oDbf:AddField( "cCodPai", "C", 4, 0,, Space( 4 ),,, "Código", .F., 80, .F., {} )
      ::oDbf:AddField( "cNomPai", "C", 35, 0,, Space( 35),,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "cCodIso", "C", 3, 0,,,,, "ISO", .F., 80, .T., {} )
      ::oDbf:AddField( "cBndPai", "C", 4, 0,,,,, "", .F., 0, .T., {} )
      ::oDbf:AddField( "cResPai", "C", 8, 0,,,,, "", .F., 0, .T., {} )

      ::oDbf:AddIndex( "CCODPAI", "Pais.CDX", "CCODPAI",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "CNOMPAI", "Pais.CDX", "CNOMPAI",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TPais_Resource( nMode ) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   local oDlg
   local oGet
   local oBmp

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "paises", "PAIS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmp := TBitmap():ReDefine( 900, "gc_globe_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )





      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:CCODPAI, ::oDbf:CCODPAI:= u ) }, oDlg,, "@!",,,,,,, .T., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:CNOMPAI, ::oDbf:CNOMPAI:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||(  ::lPreSave( oGet, oDlg, nMode ) )}, oDlg,,, .F., {||     (  nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ::lPreSave( oGet, oDlg, nMode ) } )
   end

   oDlg:AddFastKey( 112, {|| GoHelp() } )

   oDlg:bStart    := {|| oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:End()
   end

RETURN ( oDlg:nResult == 1 )



static FUNCTION TPais_lPreSave( oGet, oDlg, nMode ) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   if nMode == 1 .OR. nMode == 4

      oGet:lValid()

      if ::oDbf:SeekInOrd( ::oDbf:cCodPai, "cCodPai" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodPai ) )
         return .F.
      end

   end

   if Empty( ::oDbf:cNomPai )
      MsgStop( "La descripción del país no puede estar vacía." )
      Return .F.
   end

Return oDlg:end( 1 )



static FUNCTION TPais_CloseFiles( ) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   if !Empty( ::oDbf ) .AND. ::oDbf:Used()
      ::oDbf:end()
   end

RETURN .T.



static FUNCTION TPais_GetPais( cCodPai, oSay, oBmp ) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   if ::oDbf:Seek( cCodPai )

      oSay:cText( ::oDbf:cNomPai )

   end

RETURN ( .T. )







_HB_CLASS PaisModel ; function PaisModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PaisModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @PaisModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "Pais" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre( cCodigoPais); oClass:AddMethod( "getNombre", @PaisModel_getNombre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PaisModel ;



static FUNCTION PaisModel_getNombre( cCodigoPais ) ; local Self AS CLASS PaisModel := QSelf() AS CLASS PaisModel

   local cStm


   local cSql  := "SELECT cNomPai "                      +  "FROM " + ::getTableName() + " "             +  "WHERE cCodPai = " + quoted( cCodigoPais )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( alltrim( ( cStm )->cNomPai ) )
   end

RETURN ( "" )
