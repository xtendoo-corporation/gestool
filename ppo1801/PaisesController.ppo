#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\PaisesController.prg"
_HB_CLASS PaisesController ; function PaisesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PaisesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @PaisesController() ) ) ;


   _HB_MEMBER New(); oClass:AddMethod( "New", @PaisesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @PaisesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSelectorPais( oGet); oClass:AddMethod( "getSelectorPais", @PaisesController_getSelectorPais(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PaisesController ;



static FUNCTION PaisesController_New( ) ; local Self AS CLASS PaisesController := QSelf() AS CLASS PaisesController

   ::Super:New()

   ::cTitle                   := "Paises"

   ::cName                    := "paises"



   ::hImage                   := {  "16" => "gc_globe_16", "32" => "gc_globe_32", "48" => "gc_globe_48" }

   ::nLevel                   := Auth():Level( ::cName )

   ::oModel                   := SQLPaisesModel():New( self )

   ::oBrowseView              := PaisesBrowseView():New( self )

   ::oDialogView              := PaisesView():New( self )

   ::oValidator               := PaisesValidator():New( self )

   ::oGetSelector             := GetSelector():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

RETURN ( Self )


static FUNCTION PaisesController_End( ) ; local Self AS CLASS PaisesController := QSelf() AS CLASS PaisesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()



   ::Super:End()

RETURN ( Self )



static FUNCTION PaisesController_getSelectorPais( oGet ) ; local Self AS CLASS PaisesController := QSelf() AS CLASS PaisesController

   local hResult := ::ActivateSelectorView()

   if hb_isnil( hResult )
      RETURN ( Self )
   end

   if hHasKey( hResult, "codigo" )
      oGet:cText( hGet( hResult, "codigo" ) )
   else
      oGet:cText( "" )
   end

RETURN ( Self )










_HB_CLASS PaisesBrowseView ; function PaisesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PaisesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @PaisesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @PaisesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PaisesBrowseView ;



static FUNCTION PaisesBrowseView_addColumns( ) ; local Self AS CLASS PaisesBrowseView := QSelf() AS CLASS PaisesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código iso"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 150
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS PaisesView ; function PaisesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PaisesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @PaisesView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @PaisesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PaisesView ;



static FUNCTION PaisesView_Activate( ) ; local Self AS CLASS PaisesView := QSelf() AS CLASS PaisesView

   local oDlg
   local oBmpGeneral



   oDlg = TDialog():New(,,,, ::LblTitle() + "país", "PAIS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





   oBmpGeneral := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, oDlg,,, .F., .F.,,, .F.,,, .T. )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, oDlg,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, oDlg,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TButton():ReDefine( 1, {||( if( validateDialog( oDlg ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      oDlg:AddFastKey( 116, {|| if( validateDialog( oDlg ), oDlg:end( 1 ), ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBmpGeneral:end()

RETURN ( oDlg:nResult )








_HB_CLASS PaisesValidator ; function PaisesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PaisesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @PaisesValidator() ) ) ;

   _HB_MEMBER lenCodigo(); oClass:AddMethod( "lenCodigo", @PaisesValidator_lenCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @PaisesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PaisesValidator ;



static FUNCTION PaisesValidator_getValidators( ) ; local Self AS CLASS PaisesValidator := QSelf() AS CLASS PaisesValidator





   ::hValidators  := {     "codigo" =>          {  "required"           => "El código iso es un dato requerido", "unique"             => "El código iso introducido ya existe", "lenCodigo"          => "El código iso no puede tener más de 3 dígitos" } , "nombre" =>          {  "required"           => "El nombre es un datos requerido", "unique"             => "El nombre introducido ya existe" } }
RETURN ( ::hValidators )



static FUNCTION PaisesValidator_lenCodigo( ) ; local Self AS CLASS PaisesValidator := QSelf() AS CLASS PaisesValidator

   if len( AllTrim( ::oController:getModelBuffer( "codigo" ) ) ) > 3
      RETURN ( .F. )
   end

RETURN ( .T. )







_HB_CLASS SQLPaisesModel ; function SQLPaisesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLPaisesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLPaisesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "paises", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLPaisesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereCodigo(); oClass:AddInline( "getNombreWhereCodigo", {|Self, codigo | ( ( Self ) ), ( ::getField( "nombre", "codigo", codigo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLPaisesModel ;



static FUNCTION SQLPaisesModel_getColumns( ) ; local Self AS CLASS SQLPaisesModel := QSelf() AS CLASS SQLPaisesModel



   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"         , "text"      => "Identificador"                         , "default"   => {|| 0 } }                                )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 )"                          , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 200 )"                        , "default"   => {|| space( 200 ) } }                     )

RETURN ( ::hColumns )







Function cNombrePaisWhereCodigo( cCodPais )

Return ( SQLPaisesModel():getNombreWhereCodigo( cCodPais ) )











_HB_CLASS PaisesRepository ; function PaisesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PaisesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @PaisesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLPaisesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PaisesRepository ;