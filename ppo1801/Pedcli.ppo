#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 237 ".\.\Prg\Pedcli.prg"
memvar cDbf
memvar cDbfCol
memvar cDbfPag
memvar cCliente
memvar cDbfCli
memvar cDbfObr
memvar cAgente
memvar cDbfAge
memvar cIva
memvar cDbfIva
memvar cFPago
memvar cDbfPgo
memvar cTarPreL
memvar cTarPreS
memvar cPromoL
memvar cDbfRut
memvar cDbfTrn
memvar cDbfPro
memvar cDbfTblPro
memvar aTotIva
memvar aTotIvm
memvar cCtaCli
memvar nTotBrt
memvar nTotIva
memvar nTotIvm
memvar nTotReq
memvar nTotImp
memvar nTotDto
memvar nTotDpp
memvar nTotUno
memvar nTotDos
memvar nTotNet
memvar nTotPed
memvar nTotPag
memvar nTotPnt
memvar nTotCos
memvar nTotPes
memvar nTotAge
memvar nTotTrn
memvar nTotRnt
memvar nTotDif
memvar nTotAtp
memvar nPctRnt
memvar aIvaUno
memvar aIvaDos
memvar aIvaTre
memvar aIvmUno
memvar aIvmDos
memvar aIvmTre
memvar nVdv
memvar nVdvDivPed
memvar cPicUndPed
memvar cPouDivPed
memvar cPorDivPed
memvar cPouChgPed
memvar nDouDivPed
memvar nRouDivPed
memvar nTotArt
memvar nTotCaj
memvar nPagina
memvar lEnd
memvar cDbfEnt
memvar cDbfDiv
memvar cPorDivEnt
memvar nTotPage
memvar nTotalDto

memvar aImpVto
memvar aDatVto

memvar nNumArt
memvar nNumCaj

static bEdtRec       := { |aTmp, aGet, dbfPedCliT, oBrw, bWhen, bValid, nMode, cCodPre | EdtRec( aTmp, aGet, dbfPedCliT, oBrw, bWhen, bValid, nMode, cCodPre ) }
static bEdtDet       := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpPed | EdtDet( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpPed ) }
static bEdtRes       := { |aTmp, aGet, dbfPedCliR, oBrw, bWhen, bValid, nMode, aTmpLin | EdtRes( aTmp, aGet, dbfPedCliR, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtDoc       := { |aTmp, aGet, dbfPedCliD, oBrw, bWhen, bValid, nMode, aTmpLin | EdtDoc( aTmp, aGet, dbfPedCliD, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtTablet    := { |aTmp, aGet, dbfPedCliT, oBrw, bWhen, bValid, nMode, aNumDoc| EdtTablet( aTmp, aGet, dbfPedCliT, oBrw, bWhen, bValid, nMode, aNumDoc ) }
static bEdtEst       := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin | EdtEst( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin ) }


static lExternal     := .F.
static aTipPed       := { "Venta", "Alquiler" }

static cOldCodCli    := ""
static cOldCodArt    := ""
static cOldPrpArt    := ""
static cOldLotArt      := ""
static cOldUndMed    := ""

static dbfOferta
static lOpenFiles    := .F.

static oWndBrw

static nView

static dbfPedCliT
static dbfPedCliL
static dbfPedCliI
static dbfPedCliD
static dbfPedCliP
static dbfPreCliT
static dbfPreCliL
static dbfPreCliI
static dbfPreCliD
static dbfAlbCliT
static dbfAlbCliL
static dbfAlbCliP
static dbfAlbPrvT
static dbfAlbPrvL
static dbfClient
static dbfCliBnc
static dbfTarPreL
static dbfTarPreS
static dbfPromoT
static dbfPromoL
static dbfPromoC
static dbfAgent
static dbfCodebar
static dbfKit
static dbfArtDiv
static dbfRuta
static dbfAlm
static dbfObrasT
static oBrwIva
static dbfArtPrv
static dbfDelega
static dbfEmp
static dbfFacPrvL
static dbfRctPrvL
static dbfAntCliT
static dbfFacCliT
static dbfFacCliL
static dbfFacCliP
static dbfFacRecL
static dbfTikCliT
static dbfTikCliL
static dbfProLin
static dbfProMat
static dbfsitua
static cOrdAnt
static oBandera
static oNewImp
static oDetCamposExtra
static dbfTmpLin
static dbfTmpPedLin
static dbfTmpFin
static dbfTmpRes
static dbfTmpInc
static dbfTmpDoc
static dbfPro
static dbfPedCliE
static dbfTmpEst

static oImpuestos
static lImpuestos

static dbfAgeCom
static dbfCajT
static oStock
static cTmpLin
static cTmpRes
static cTmpInc
static cTmpDoc
static cTmpEst
static oGetNet
static oGetTrn
static oGetIvm
static oGetPnt
static oGetIva
static oGetReq
static oGetAge
static oGetRnt
static oGetTotal
static oGetTarifa
static oTotPedLin
static oGetPed
static oGetEnt
static oGetPdt
static oGetPas
static oGetNoPas
static oGetPes
static oGetDif
static nVdvDiv
static cPouDiv
static cPorDiv
static cPpvDiv
static cPicEur
static cPicUnd
static nDouDiv
static nRouDiv
static nDpvDiv
static oFont
static oMenu
static oGrpFam
static oTipArt
static oFabricante
static oUndMedicion
static oBtnPrecio

static oBtnKit
static oBtnAtp

static oDlgPedidosWeb
static oBrwPedidosWeb
static oBrwDetallesPedidos

static oComisionLinea
static nComisionLinea      := 0

static cFiltroUsuario      := ""

static oMsgAlarm

static bEdtInc             := { |aTmp, aGet, dbfPedCliI, oBrw, bWhen, bValid, nMode, aTmpLin | EdtInc( aTmp, aGet, dbfPedCliI, oBrw, bWhen, bValid, nMode, aTmpLin ) }

static aEstadoProduccion   := { "Producido", "En producción", "Pendiente de producción" }
static aEstadoPedido       := { "Pendiente", "Parcial", "Entregado" }

static oMailing

static oBrwProperties

static oTipoCtrCoste
static cTipoCtrCoste
static aTipoCtrCoste       := { "Centro de coste", "Proveedor", "Agente", "Cliente" }

static oCentroCoste

static Counter

static oTrans

static oGetCelda
static cGetCelda





FUNCTION GenPedCli( nDevice, cCaption, cCodDoc, cPrinter, nCopies )

   local oInf
   local oDevice
   local nNumPed

   if ( D():PedidosClientes( nView ) )->( Lastrec() ) == 0
      return nil
   end

   nNumPed              := ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed

   If( nDevice == nil, nDevice := 1, ) ;
   If( cCaption == nil, cCaption := "Imprimiendo pedido", ) ;
   If( cCodDoc == nil, cCodDoc := cFormatoPedidosClientes(), ) ;

   if !lExisteDocumento( cCodDoc, D():Documentos( nView ) )
      return nil
   end




   if Empty( nCopies )
      nCopies           := retfld( ( D():PedidosClientes( nView ) )->cCodCli, D():Get( "Client", nView ), "CopiasF" )
   end

   if nCopies == 0
      nCopies           := nCopiasDocumento( ( D():Get( "PedCliT", nView ) )->cSerPed, "nPedCli", D():Get( "NCount", nView ) )
   end

   if nCopies == 0
      nCopies           := 1
   end





   if lVisualDocumento( cCodDoc, D():Documentos( nView ) )
      PrintReportPedCli( nDevice, nCopies, cPrinter, cCodDoc )
   else
      msgStop( "El formato ya no es soportado" )
   end

   lChgImpDoc( D():PedidosClientes( nView ) )

RETURN NIL



Static Function PedCliReportSkipper( cPedCliL )

   ( cPedCliL )->( dbSkip() )

   nTotPage              += nTotLPedCli( cPedCliL )

Return nil



STATIC FUNCTION EPage( oInf, cCodDoc )

    private nPagina        := oInf:nPage
    private lEnd            := oInf:lFinish

   If( cCodDoc == nil, cCodDoc := "PC1", ) ;

   PrintItems( cCodDoc, oInf )

RETURN NIL



STATIC FUNCTION OpenFiles( lExt )

   local oError
   local oBlock

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de pedidos de clientes" )
      Return ( .F. )
   end

   If( lExt == nil, lExt := .F., ) ;

   lExternal            := lExt

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      DisableAcceso()





      if !lExistTable( cPatEmp() + "PedCliT.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliL.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliR.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliI.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliD.Dbf" )
         mkPedCli( cPatEmp() )
      end

      lOpenFiles        := .T.

      nView             := D():CreateView()





      D():Atipicas( nView )

      D():PedidosClientes( nView )

      D():PedidosClientesLineas( nView )

      D():PedidosClientesSituaciones( nView )

      D():PedidosClientesReservas( nView )

      D():Clientes( nView )

      D():objectGruposClientes( nView )

      D():GetObject( "UnidadMedicion", nView )

      D():ImpuestosEspeciales( nView )

      D():ArticuloStockAlmacenes( nView )

      D():Articulos( nView )

      D():ArticuloLenguaje( nView )

      D():ProveedorArticulo( nView )

      D():Familias( nView )

      D():Documentos( nView )
      ( D():Documentos( nView ) )->( OrdSetFocus( "cTipo" ) )

      D():PedidosProveedores( nView )

      D():PedidosProveedoresLineas( nView )

      D():TiposIva( nView )

      D():PropiedadesLineas( nView )

      D():Proveedores( nView )

      D():Contadores( nView )

      D():Divisas( nView )

      D():FormasPago( nView )

      D():ImpuestosEspeciales( nView )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLII.DBF" ), ( cCheckArea( "PEDCLII", @dbfPedCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLID.DBF" ), ( cCheckArea( "PEDCLID", @dbfPedCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLIL.DBF" ), ( cCheckArea( "PRECLIL", @dbfPreCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLII.DBF" ), ( cCheckArea( "PRECLII", @dbfPreCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLID.DBF" ), ( cCheckArea( "PRECLID", @dbfPreCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIP.DBF" ), ( cCheckArea( "ALBCLIP", @dbfAlbCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.DBF" ), ( cCheckArea( "ALBPROVT", @dbfAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAgent ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPREL.DBF" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPRES.DBF" ), ( cCheckArea( "TARPRES", @dbfTarPreS ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPRES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOT.DBF" ), ( cCheckArea( "PROMOT", @dbfPromoT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOL.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOC.DBF" ), ( cCheckArea( "PROMOC", @dbfPromoC ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOC.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOferta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRO.DBF" ), ( cCheckArea( "PRO", @dbfPro ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfKit ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ArtDiv.Dbf" ), ( cCheckArea( "ARTDIV", @dbfArtDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ArtDiv.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RUTA.DBF" ), ( cCheckArea( "RUTA", @dbfRuta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RUTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Cajas.Dbf" ), ( cCheckArea( "CAJAS", @dbfCajT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "Cajas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "Almacen.Dbf" ), ( cCheckArea( "ALMACEN", @dbfAlm ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "Almacen.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROVART.DBF" ), ( cCheckArea( "PROVART", @dbfArtPrv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDelega ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGECOM.DBF" ), ( cCheckArea( "AGECOM", @dbfAgeCom ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AGECOM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIL.DBF" ), ( cCheckArea( "FACCLIL", @dbfFacCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.Dbf" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacRecL.DBF" ), ( cCheckArea( "FacRecL", @dbfFacRecL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacRecL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CSTKFAST" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.DBF" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.DBF" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfCliBnc ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

       if !TDataCenter():OpenPreCliT( @dbfPreCliT )
           lOpenFiles     := .F.
       end

      if !TDataCenter():OpenAlbCliT( @dbfAlbCliT )
            lOpenFiles     := .F.
      end

      if !TDataCenter():OpenFacCliT( @dbfFacCliT )
         lOpenFiles    := .F.
      end

      if !TDataCenter():OpenFacCliP( @dbfFacCliP )
         lOpenFiles         := .F.
      end



      oUndMedicion      := UniMedicion():Create( cPatEmp() )
      if !oUndMedicion:OpenFiles()
         lOpenFiles     := .F.
      end

      oBandera          := TBandera():New()

      oStock            := TStock():Create( cPatEmp() )
      if !oStock:lOpenFiles()
         lOpenFiles     := .F.
      end

      oNewImp           := TNewImp():Create( cPatEmp() )
      if !oNewImp:OpenFiles()
         lOpenFiles     := .F.
      end

      oTrans            := TTrans():Create( cPatEmp() )
      if !oTrans:OpenFiles()
         lOpenFiles     := .F.
      end

      oTipArt           := TTipArt():Create( cPatEmp() )
      if !oTipArt:OpenFiles()
         lOpenFiles     := .F.
      end

      oFabricante          := TFabricantes():Create( cPatEmp() )
      if !oFabricante:OpenFiles()
         lOpenFiles        := .F.
      end

      oGrpFam           := TGrpFam():Create( cPatEmp() )
      if !oGrpFam:OpenFiles()
         lOpenFiles     := .F.
      end

      oCentroCoste        := TCentroCoste():Create( cPatDat() )
      if !oCentroCoste:OpenFiles()
         lOpenFiles     := .F.
      end

      CodigosPostales():GetInstance():OpenFiles()

      oMailing          := TGenmailingDatabasePedidosClientes():New( nView )

      Counter           := TCounter():New( nView, "nPedCli" )





      oFont                := TFont():New( "Arial", 8, 26, .F., .T. )





      public nTotBrt       := 0
      public nTotPed       := 0
      public nTotDto       := 0
      public nTotDPP       := 0
      public nTotNet       := 0
      public nTotIvm       := 0
      public nTotIva       := 0
      public nTotReq       := 0
      public nTotAge       := 0
      public nTotPnt       := 0
      public nTotUno       := 0
      public nTotDos       := 0
      public nTotTrn       := 0
      public nTotCos       := 0
      public nTotRnt       := 0
      public nTotAtp       := 0
      public nTotPes       := 0
      public nTotDif       := 0
      public nPctRnt       := 0










      public aTotIva := { {   "porcentajeiva" => 0, "logrecargo"   => .F., "porcentajere" => 0, "bruto"        => 0, "neto"         => 0, "impiva"    => 0, "impre"        => 0, "nivmh"        => 0, "ntransporte"  => 0, "npntver"      => 0 } }

      public aTotIvm       := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }
      public aIvmUno       := aTotIvm[ 1 ]
      public aIvmDos       := aTotIvm[ 2 ]
      public aIvmTre       := aTotIvm[ 3 ]

      public aImpVto       := {}
      public aDatVto       := {}





      if lAIS() .AND. !oUser():lAdministrador()

         cFiltroUsuario    := "Field->cSufPed == '" + Application():CodigoDelegacion() + "' .and. Field->cCodCaj == '" + Application():CodigoCaja() + "'"
         if RolesModel():getRolFiltrarVentas( Auth():rolUuid() )
            cFiltroUsuario += " .and. Field->cCodUsr == '" + Auth():Codigo()  + "'"
         end

         ( D():PedidosClientes( nView ) )->( AdsSetAOF( cFiltroUsuario ) )

      end

      EnableAcceso()





      oDetCamposExtra      := TDetCamposExtra():New()
      oDetCamposExtra:OpenFiles()
      oDetCamposExtra:SetTipoDocumento( "Pedidos a clientes" )
      oDetCamposExtra:setbId( {|| D():PedidosClientesId( nView ) } )


   RECOVER USING oError

      lOpenFiles           := .F.

      EnableAcceso()

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

RETURN ( lOpenFiles )



FUNCTION PedCli( oMenuItem, oWnd, cCodCli, cCodArt, cCodPre, lPedWeb )

   local oImp
   local oPrv
   local oSnd
   local oChangeState
   local oRpl
   local oPdf
   local oMail
   local oDup
   local oBtnEur
   local nLevel
   local lEuro          := .F.
   local oRotor
   local oPrepare
   local oScript
   local aEstGen        := {  "No" , "Parcial" , "Si" }

   If( oMenuItem == nil, oMenuItem := "pedidos_de_clientes", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;
   If( cCodCli == nil, cCodCli := "", ) ;
   If( cCodArt == nil, cCodArt := "", ) ;
   If( cCodPre == nil, cCodPre := "", ) ;
   If( lPedWeb == nil, lPedWeb := .F., ) ;

   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return .F.
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      return .F.
   end

   DisableAcceso()


























   oWndBrw := TShell():New( 0, 0, 22, 80, "Pedidos de clientes",, oWnd,,, .F.,,, ( D():PedidosClientes( nView ) ),,,,, {"Número", "Fecha", "Código", "Nombre", "Código postal", "Población", "Provincia", "Dirección", "Agente", "Entrada", "Comercio electrónico", "Situación", "Delegación"}, {||( WinAppRec( oWndBrw:oBrw, bEdtRec, D():PedidosClientes( nView ), cCodCli, cCodArt, cCodPre ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdtRec, D():PedidosClientes( nView ), cCodCli, cCodArt, cCodPre ) )}, {||( WinDelRec( oWndBrw:oBrw, D():PedidosClientes( nView ), {|| QuiPedCli() } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdtRec, D():PedidosClientes( nView ), cCodCli, cCodArt, cCodPre ) )}, nil, nLevel, "gc_clipboard_empty_user_16", ( 190 + ( 57 * 256 ) + ( 0 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEdtRec, D():PedidosClientes( nView ) ) )}, .T. )

      oWndBrw:lFechado     := .T.

      oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->lCloPed }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_lock2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cancelado"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->lCancel }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_lock2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Estado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| cEstadoPedido( ( D():PedidosClientes( nView ) )->nEstado ) }
         :bBmpData         := {|| Max( ( D():PedidosClientes( nView ) )->nEstado, 1 ) }
         :nWidth           := 20
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_trafficlight_on_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "gc_mail2_12", "Nil16" } )
         :AddResource( "gc_mail2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Incidencia"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| nEstadoIncidencia( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_document_information_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Producción"
         :nHeadBmpNo       := 4
         :bStrData         := {|| cEstadoProduccion( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) }
         :bBmpData         := {|| nEstadoProduccion( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "gc_check_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_worker2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Impreso"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->lImprimido }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_printer2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Para preparar"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->lPdtCrg }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_clipboard_checks_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Preparado"
         :nHeadBmpNo       := 5
         :bStrData         := {|| "" }
         :bBmpData         := {|| ( D():PedidosClientes( nView ) )->nPrepare }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "Nil16" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "bullet_square_blue_16" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_barcode_scanner_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Comercio electrónico"
         :cSortOrder       := "lInternet"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->lInternet }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_earth_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Generado"
         :bEditValue       := {|| aEstGen[ Max( Min( ( D():PedidosClientes( nView ) )->nGenerado, len( aEstGen ) ), 1 ) ] }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Recibido"
         :bEditValue       := {|| aEstGen[ Max( Min( ( D():PedidosClientes( nView ) )->nRecibido, len( aEstGen ) ), 1 ) ] }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Entrega"
         :cSortOrder       := "dFecEnt"
         :bEditValue       := {|| Dtoc( ( D():PedidosClientes( nView ) )->dFecEnt ) }
         :nWidth           := 80
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Inicio servicio"
         :cSortOrder       := "dFecEntr"
         :bEditValue       := {|| Dtoc( ( D():PedidosClientes( nView ) )->dFecEntr ) }
         :nWidth           := 80
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fin servicio"
         :cSortOrder       := "dFecSal"
         :bEditValue       := {|| Dtoc( ( D():PedidosClientes( nView ) )->dFecSal ) }
         :nWidth           := 80
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| aTipPed[ if( ( D():PedidosClientes( nView ) )->lAlquiler, 2, 1 ) ] }
         :nWidth           := 50
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cSerPed + "/" + AllTrim( Str( ( D():PedidosClientes( nView ) )->nNumPed ) ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cSufPed }
         :nWidth           := 40
         :lHide            := .T.
         :cSortOrder       := "cSufPed"
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| Trans( ( D():PedidosClientes( nView ) )->cTurPed, "######" ) }
         :nWidth           := 40
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecDes"
         :bEditValue       := {|| Dtoc( ( D():PedidosClientes( nView ) )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cCodCaj }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Usuario"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cCodUsr }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Situación"
         :cSortOrder       := "cSituac"
         :bEditValue       := {|| AllTrim( ( D():PedidosClientes( nView ) )->cSituac ) }
         :nWidth           := 80
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( D():PedidosClientes( nView ) )->cCodCli ) }
         :nWidth           := 70
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cNomCli }
         :nWidth           := 280
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código postal"
         :cSortOrder       := "CodPostal"
         :bEditValue       := {|| alltrim( ( D():PedidosClientes( nView ) )->cPosCli ) }
         :nWidth           := 60
         :lHide            := .T.
         :bLDClickData     := {|| oWndBrw:RecEdit() }
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Población"
         :cSortOrder       := "Poblacion"
         :bEditValue       := {|| alltrim( ( D():PedidosClientes( nView ) )->cPobCli ) }
         :nWidth           := 180
         :lHide            := .T.
         :bLDClickData     := {|| oWndBrw:RecEdit() }
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Provincia"
         :cSortOrder       := "Provincia"
         :bEditValue       := {|| alltrim( ( D():PedidosClientes( nView ) )->cPrvCli ) }
         :nWidth           := 100
         :lHide            := .T.
         :bLDClickData     := {|| oWndBrw:RecEdit() }
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Agente"
         :cSortOrder       := "cCodAge"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cCodAge }
         :nWidth           := 50
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre agente"
         :bEditValue       := {|| retNbrAge( ( D():PedidosClientes( nView ) )->cCodAge, dbfAgent )  }
         :nWidth           := 200
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Ruta"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cCodRut }
         :nWidth           := 40
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Forma pago"
         :bEditValue       := {|| if( !Empty( ( D():PedidosClientes( nView ) )->cCodPgo ), ( D():PedidosClientes( nView ) )->cCodPgo + " - " + AllTrim( RetFld( ( D():PedidosClientes( nView ) )->cCodPgo, D():FormasPago( nView ), "cDesPago" ) ), "" ) }
         :nWidth           := 200
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cCodAlm }
         :nWidth           := 60
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Dirección"
         :cSortOrder       := "cCodObr"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cCodObr }
         :nWidth           := 50
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Des. dirección"
         :bEditValue       := {|| ClientesDireccionesModel():getName( ( D():PedidosClientes( nView ) )->cCodCli, ( D():PedidosClientes( nView ) )->cCodObr ) }
         :nWidth           := 150
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| iif( ( D():PedidosClientes( nView ) )->lCancel, 0, ( D():PedidosClientes( nView ) )->nTotNet ) }
         :cEditPicture     := cPorDiv( ( D():PedidosClientes( nView ) )->cDivPed, D():Divisas( nView ) )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| iif( ( D():PedidosClientes( nView ) )->lCancel, 0, ( D():PedidosClientes( nView ) )->nTotIva ) }
         :cEditPicture     := cPorDiv( ( D():PedidosClientes( nView ) )->cDivPed, D():Divisas( nView ) )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "R.E."
         :bEditValue       := {|| iif( ( D():PedidosClientes( nView ) )->lCancel, 0, ( D():PedidosClientes( nView ) )->nTotReq ) }
         :cEditPicture     := cPorDiv( ( D():PedidosClientes( nView ) )->cDivPed, D():Divisas( nView ) )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| iif( ( D():PedidosClientes( nView ) )->lCancel, 0, ( D():PedidosClientes( nView ) )->nTotPed ) }
         :cEditPicture     := cPorDiv( ( D():PedidosClientes( nView ) )->cDivPed, D():Divisas( nView ) )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( D():PedidosClientes( nView ) )->cDivPed ), D():Divisas( nView ) ) }
         :nWidth           := 30
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Comisión agente"
         :bEditValue       := {|| sTotPedCli( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, D():PedidosClientes( nView ), D():PedidosClientesLineas( nView ), D():TiposIva( nView ), D():Divisas( nView ) ):nTotalAgente }
         :nWidth           := 100
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :cEditPicture     := cPorDiv
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Horas montaje"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->nMontaje }
         :nWidth           := 70
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :cEditPicture     := "@E 999.99"
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Su pedido"
         :bEditValue       := {|| ( D():PedidosClientes( nView ) )->cSuPed }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Condición"
         :bEditValue       := {|| AllTrim( ( D():PedidosClientes( nView ) )->cCondEnt ) }
         :nWidth           := 200
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Creación/Modificación"
         :bEditValue       := {|| dtoc( ( D():PedidosClientes( nView ) )->dFecCre ) + space( 1 ) + ( D():PedidosClientes( nView ) )->cTimCre }
         :nWidth           := 120
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre establecimiento"
         :bEditValue       := {|| retfld( ( D():PedidosClientes( nView ) )->cCodCli, D():Clientes( nView ), "NbrEst" ) }
         :nWidth           := 120
         :lHide            := .T.
      end

      oDetCamposExtra:addCamposExtra( oWndBrw )

       oWndBrw:cHtmlHelp    := "Pedidos a clientes"

    oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()







   oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







   oDup := oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",, {|This|This:Toggle()}, 2,, .F. )







    oWndBrw:NewAt( "Dup",,, {||( DupSerie( oWndBrw ) )}, "Series",,,, 2, oDup, .F. )






   oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






   oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,, 8,, .F. )







   oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )







   oImp := oWndBrw:NewAt( "IMP",,, {||( GenPedCli( 1 ), oWndBrw:Refresh() )}, "(I)mprimir", "I",, {|This|This:Toggle()}, 32,, .F. )


      lGenPedCli( oWndBrw:oBrw, oImp, 1 )





   oWndBrw:NewAt( "GC_PRINTER2_",,, {||( ImprimirSeriesPedidosClientes() )}, "Imp(r)imir series", "R",,, 32,, .F. )







   oPrv := oWndBrw:NewAt( "PREV1",,, {||( GenPedCli( 2 ), oWndBrw:Refresh() )}, "(P)revisualizar", "P",, {|This|This:Toggle()}, 32,, .F. )


      lGenPedCli( oWndBrw:oBrw, oPrv, 2 )






   oPdf := oWndBrw:NewAt( "DOCLOCK",,, {||( GenPedCli( 3 ) )}, "Pd(f)", "F",, {|This|This:Toggle()}, 32,, .F. )


      lGenPedCli( oWndBrw:oBrw, oPdf, 3 )




   oMail := oWndBrw:NewAt( "GC_MAIL_EARTH_",,, {||( oMailing:documentsDialog( oWndBrw:oBrw:aSelected ) )}, "Correo electrónico",,,, 32,, .F. )






     oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TLabelGeneratorPedidoClientes():New( nView ):Dialog() )}, "Eti(q)uetas", "Q",,, 32,, .F. )

   if RolesModel():getRolCambiarEstado( Auth():rolUuid() )







      oChangeState := oWndBrw:NewAt( "CHGSTATE",,, {||( ChgSta( oWndBrw:oBrw ) )}, "Cambiar es(t)ado", "T",, {|This|This:Toggle()}, 4,, .F. )








      oWndBrw:NewAt( "CHGSTATE",,, {||( oStock:SetEstadoPedCli( D():PedidosClientesId( nView ), oWndBrw:Refresh() ) )}, "(R)ecalcular estado", "R",,, 4, oChangeState, .F. )

   end








    oPrepare := oWndBrw:NewAt( "GC_BARCODE_SCANNER_",, "Preparar el pedido seleccionado", {||( TPrepareOrder():run( nView ) )}, "Preparar pedido", "R",, {|This|This:Toggle()},,, .F. )





          oWndBrw:NewAt( "GC_BARCODE_SCANNER_",,, {||( SelSend( oWndBrw:oBrw ) )}, "Para preparar",,,,, oPrepare, .T. )





        oWndBrw:NewAt( "GC_BARCODE_SCANNER_",,, {||( TPrepareOrder():Info( nView, oWndBrw ) )}, "Info preparación",,,,, oPrepare, .T. )







   oSnd := oWndBrw:NewAt( "LBL",, "Seleccionar pedidos para ser enviados", {||lSnd( oWndBrw, D():PedidosClientes( nView ) )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():PedidosClientes( nView ), "lSndDoc", .T., .T., .T. ) )}, "Todos",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():PedidosClientes( nView ), "lSndDoc", .F., .T., .T. ) )}, "Ninguno",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, D():PedidosClientes( nView ), "lSndDoc", .T., .F., .T. ) )}, "Abajo",,,, 4, oSnd, .F. )






   oBtnEur := oWndBrw:NewAt( "gc_currency_euro_",,, {||( lEuro := !lEuro, oWndBrw:Refresh() )}, "M(o)neda", "O",,,,, .F. )
   if RolesModel():getRolCambiarCampos( Auth():rolUuid() )






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():PedidosClientes( nView ), aItmPedCli() ) )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():PedidosClientesLineas( nView ), aColPedCli() ) )}, "Lineas",,,, 4, oRpl, .F. )

   end












   oWndBrw:NewAt( "INFO",,, {||( TTrazaDocumento():Activate( "09", ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) )}, "I(n)forme documento", "N",,, 4,, .F. )




   oWndBrw:NewAt( "gc_document_text_pencil_",,, {||( Counter:OpenDialog() )}, "Establecer contadores",,,,,, .F. )





   oScript := oWndBrw:NewAt( "gc_folder_document_",,, {||( oScript:Expand() )}, "Scripts",,,,,, .F. )
      ImportScript( oWndBrw, oScript, "PedidosClientes", nView )




   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,,,, .F. )




      oWndBrw:NewAt( "GC_USER_",,, {||( EdtCli( ( D():PedidosClientes( nView ) )->cCodCli ) )}, "Modificar cliente",,,,, oRotor, .F. )




      oWndBrw:NewAt( "INFO",,, {||( InfCliente( ( D():PedidosClientes( nView ) )->cCodCli ) )}, "Informe de cliente",,,,, oRotor, .F. )




      oWndBrw:NewAt( "gc_clipboard_empty_user_",,, {||( EdtObras( ( D():PedidosClientes( nView ) )->cCodCli, ( D():PedidosClientes( nView ) )->cCodObr, dbfObrasT ) )}, "Modificar dirección",,,,, oRotor, .F. )




      oWndBrw:NewAt( "GC_NOTEBOOK_USER_",,, {||( if( !Empty( ( D():PedidosClientes( nView ) )->cNumPre ), ZooPreCli( ( D():PedidosClientes( nView ) )->cNumPre ), MsgStop( "El pedido no proviene de presupuesto" ) ) )}, "Visualizar presupuesto",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_DOCUMENT_EMPTY_",,, {||( if( ( D():PedidosClientes( nView ) )->nEstado <> 3, if( ( ( ConfiguracionesEmpresaModel():getLogic( "lPasPrepare", .F. ) .AND. ( D():PedidosClientes( nView ) )->nPrepare < 3 ) ) , msgStop( "Pedido no preparado para albaranar" ), AlbCli( nil, nil, { "Pedido" => ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed, 9 ) + ( D():PedidosClientes( nView ) )->cSufPed } ) ), MsgInfo( "Pedido entregado o cancelado" ) ) )}, "Generar albarán",,,,, oRotor, .T. )






      oWndBrw:NewAt( "GC_DOCUMENT_EMPTY_",,, {||( Ped2AlbCli( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed, 9 ) + ( D():PedidosClientes( nView ) )->cSufPed, dbfAlbCliT ) )}, "Modificar albarán",,,,, oRotor, .F. )





      oWndBrw:NewAt( "GC_DOCUMENT_TEXT_USER_",,, {||( if( ( D():PedidosClientes( nView ) )->nEstado <= 2, FactCli( nil, nil, { "Pedido" => ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed, 9 ) + ( D():PedidosClientes( nView ) )->cSufPed } ), MsgInfo( "Pedido entregado o cancelado" ) ) )}, "Generar factura",,,,, oRotor, .T. )





      oWndBrw:NewAt( "GC_NOTE_",,, {||( PedCliNotas() )}, "Generar nota de agenda",,,,, oRotor, .T. )







      oWndBrw:NewAt( "GC_CASH_REGISTER_USER_",,, {||(  if (  ( D():PedidosClientes( nView ) )->nEstado <= 1 .AND. empty( ( D():PedidosClientes( nView ) )->cNumTik ), generateTicketFromDocument( { "Pedido" => D():PedidosClientesId( nView ) } ), msgStop( "Pedido albaranado, cancelado o convertido a ticket" ) ) )}, "Convertir a ticket",,,,, oRotor, .T. )










   oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .T. )

    oWndBrw:oActiveFilter:SetFields( aItmPedCli() )
    oWndBrw:oActiveFilter:SetFilterType( "09" )

   if lPedWeb
      ( D():PedidosClientes( nView ) )->( OrdSetFocus( "lInternet" ) )
      ( D():PedidosClientes( nView ) )->( dbGoTop() )
   end

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

   EnableAcceso()

   if !empty( oWndBrw )

      if uFieldempresa( "lFltYea" )
         oWndBrw:setYearCombobox()
      end

      if !empty( cCodCli ) .OR. !empty( cCodArt ) .OR. !empty( cCodPre )
         oWndBrw:RecAdd()
      end

      cCodCli  := nil
      cCodArt  := nil
      cCodPre  := nil

   end

Return .T.



STATIC FUNCTION EdtRec( aTmp, aGet, dbf, oBrw, cCodCli, cCodArt, nMode, cCodPre )

   local oDlg
   local oFld
   local nOrd
   local lWhen
   local oBrwLin
   local oBrwInc
   local oBrwDoc
   local oBrwEst
   local oSay           := Array( 11 )
   local cSay           := Array( 11 )
   local oSayLabels     := Array(  9 )
   local oGetMasDiv
   local cGetMasDiv     := ""
   local oBmpEmp
   local oBmpDiv
   local cEstPed        := ""
   local oRieCli
   local nRieCli        := 0
   local oSayGetRnt
   local cTipPed
   local cSerie         := cNewSer( "nPedCli", D():Contadores( nView ) )
   local oBmpGeneral
   local aPrepare         := { "No preparado", "Parcial y no albaranar", "Parcial y albaranar", "Preparado" }

   lWhen                := if( oUser():lAdministrador(), ( nMode <> 3 ), if( nMode == 2, !aTmp[ 56 ], ( nMode <> 3 ) ) )





   cOldCodCli           := aTmp[ 6 ]

   setOldPorcentajeAgente( aTmp[ 43 ] )

   do case
      case nMode == 1

         if !lCurSesion()
            msgStop( "No hay sesiones activas, imposible añadir documentos" )
            Return .F.
         end

         if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
            msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
            Return .F.
         end

         aTmp[ 4 ]     := cCurSesion()
         aTmp[ 17 ]     := Application():codigoAlmacen()
         aTmp[ 18 ]     := Application():CodigoCaja()
         aTmp[ 46 ]     := cDivEmp()
         aTmp[ 19 ]     := cDefFpg()
         aTmp[ 47 ]     := nChgDiv( aTmp[ 46 ], D():Divisas( nView ) )
         aTmp[ 3 ]     := RetSufEmp()
         aTmp[ 22 ]     := 1
         aTmp[ 57 ]     := Auth():Codigo()
         aTmp[ 68 ]     := Application():CodigoDelegacion()
         aTmp[ 51 ]     := uFieldEmpresa( "lIvaInc" )
         aTmp[ 76 ]     := padr( getConfigTraslation( "Gastos" ), 250 )
         aTmp[ 52 ]     := nIva( D():TiposIva( nView ), cDefIva() )
         aTmp[ 74]     := ctod( "" )
         aTmp[ 75 ]     := ctod( "" )

         if !empty( cCodPre )
            aTmp[ 45 ]  := cCodPre
         end

      case nMode == 4

         if !lCurSesion()
            msgStop( "No hay sesiones activas, imposible añadir documentos" )
            Return .F.
         end

         if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
            msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
            Return .F.
         end

         aTmp[ 5 ]  := GetSysDate()
         aTmp[ 4 ]  := cCurSesion()
         aTmp[ 22 ]  := 1
         aTmp[ 56 ]  := .F.
         aTmp[ 57 ]  := Auth():Codigo()
         aTmp[ 49 ]  := .F.
         aTmp[ 104 ]  := 1

      case nMode == 2

         if aTmp[ 56 ] .AND. !oUser():lAdministrador()
            msgStop( "El pedido está cerrado." )
            Return .F.
         end

         if aTmp[ 22 ] == 3 .AND. !aTmp[ 81 ]
            msgStop( "El pedido ya fue entregado." )
            Return .F.
         end

         lChangeRegIva( aTmp )

   end

   if empty( rtrim( aTmp[ 1 ] ) )
      aTmp[ 1 ]     := cSerie
   end

   if empty( aTmp[ 28 ] )
      aTmp[ 28 ]     := Max( uFieldEmpresa( "nPreVta" ), 1 )
   end

   if empty( aTmp[ 29 ] )
      aTmp[ 29 ]     := Padr( "General", 50 )
   end

   if empty( aTmp[ 31 ] )
      aTmp[ 31 ]        := Padr( "Pronto pago", 50 )
   end





   cTipPed                 := aTipPed[ if( aTmp[ 73 ], 2, 1 ) ]





   if BeginTrans( aTmp, nMode )
      Return .F.
   end





   if Empty( aTmp[ 85 ] )
      aTmp[ 85 ] := RetFld( aTmp[ 6 ], D():Clientes( nView ), "Telefono" )
   end

   nRieCli              := oStock:nRiesgo( aTmp[ 6 ] )





   nOrd                 := ( D():PedidosClientes( nView ) )->( ordSetFocus( 1 ) )

   cPouDiv              := cPouDiv( aTmp[ 46 ], D():Divisas( nView ) )
   cPorDiv              := cPorDiv( aTmp[ 46 ], D():Divisas( nView ) )
   nDouDiv              := nDouDiv( aTmp[ 46 ], D():Divisas( nView ) )
   nRouDiv              := nRouDiv( aTmp[ 46 ], D():Divisas( nView ) )
   cPpvDiv              := cPpvDiv( aTmp[ 46 ], D():Divisas( nView ) )
   nDpvDiv              := nDpvDiv( aTmp[ 46 ], D():Divisas( nView ) )
   cPicEur              := cPouDiv( "EUR", D():Divisas( nView ) )
   cPicUnd              := MasUnd()

   cEstPed              := cEstadoPedido( aTmp[ 22 ] )





   cSay[ 2 ]        := RetFld( aTmp[ 16 ], dbfTarPreS )
   cSay[ 3 ]        := RetFld( aTmp[ 6 ] + aTmp[ 15 ], dbfObrasT, "cNomObr" )
   cSay[ 4 ]        := RetFld( aTmp[ 17 ], dbfAlm )
   cSay[ 5 ]        := RetFld( aTmp[ 19 ], D():FormasPago( nView ) )
   cSay[ 6 ]        := cNbrAgent( aTmp[ 14 ], dbfAgent )
   cSay[ 7 ]        := RetFld( aTmp[ 20 ], dbfRuta )
   cSay[ 8 ]        := oTrans:cNombre( aTmp[ 54 ] )
   cSay[ 9 ]        := RetFld( aTmp[ 18 ], dbfCajT )
   cSay[10 ]        := UsuariosModel():getNombreWhereCodigo( aTmp[ 57 ] )
   cSay[11 ]        := RetFld( cCodEmp() + aTmp[ 68 ], dbfDelega, "cNomDlg" )





   InitTarifaCabecera( aTmp[ 28 ] )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Pedidos de clientes", "PEDCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )













      oFld := TFolder():ReDefine( 200, {"&Pedido", "Da&tos", "&Incidencias", "D&ocumentos", "&Situaciones"}, { "PEDCLI_1","PEDCLI_2","PEDCLI_3","PEDCLI_4","PEDCLI_5" }, oDlg,,,,, .F., )









      oBmpGeneral := TBitmap():ReDefine( 990, "gc_clipboard_empty_user_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_folders2_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_information_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_address_book_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "gc_document_attachment_48",, oFld:aDialogs[5],,, .F., .F.,,, .F.,,, .T. )







      aGet[ 6 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],,, {||    ( LoaCli( aGet, aTmp, nMode, oRieCli ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwClient( aGet[6], aGet[7] ) )}, nil, "LUPA",, )




      aGet[ 7 ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 12 ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )






      aGet[ 8 ] := TGetHlp():ReDefine( 102, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 8 ], Rtrim( aTmp[ 9 ] ) + Space( 1 ) + Rtrim( aTmp[ 10 ] ) )}, nil, "gc_earth_lupa_16",, )




      aGet[ 9 ] := TGetHlp():ReDefine( 103, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




        aGet[ 10 ] := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )





        aGet[ 11 ] := TGetHlp():ReDefine( 107, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[1],,, {||    ( CodigosPostales():GetInstance():validCodigoPostal() )},,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )



      oGetTarifa  := comboTarifa():Build( { "idCombo" => 132, "uValue" => aTmp[ 28 ] } )
      oGetTarifa:Resource( oFld:aDialogs[1] )







      oBtnPrecio := TBtnBmp():ReDefine( 174, "gc_arrow_down_16",,,,, {|Self|( ChangeTarifaCabecera( oGetTarifa:getTarifa(), dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1], .F., {||     ( nMode <> 3 .AND. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) )}, .F.,,,,,, !.T.,, .F.,,, .F., !.F.,, .F. )





      oRieCli := TGetHlp():ReDefine( 133, { | u | If( PCount()==0, nRieCli, nRieCli:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[85] := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, aTmp[85], aTmp[85]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )












      aGet[ 16 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cTarifa( aGet[16], oSay[ 2 ] ) )}, "N/W*",,,,, .F., {||     ( lWhen .AND. oUser():lAdministrador() )},, .F., .F.,,,,, {|Self|( BrwTarifa( aGet[16], oSay[ 2 ] ) )}, nil, "LUPA",, )




      oSay[ 2 ] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )












      aGet[ 15 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cObras( aGet[ 15 ], oSay[ 3 ], aTmp[ 6 ] ) )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwObras( aGet[ 15 ], oSay[ 3 ], aTmp[ 6 ], dbfObrasT ) )}, nil, "LUPA",, )




      oSay[ 3 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 17 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 17 ], , oSay[ 4 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 17 ], oSay[ 4 ] ) )}, nil, "LUPA",, )






      oSay[ 4 ] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSay[ 4 ], cSay[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ExpAlmacen( aTmp[ 17 ], dbfTmpLin, oBrwLin ) )}, nil, "Bot",, )












      aGet[ 19 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cFPago( aGet[19], , oSay[ 5 ] ) )},,,,,, .F., {||     ( if( IsMuebles(), .T., lWhen ) )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 19 ], oSay[ 5 ] ) )}, nil, "LUPA",, )




      oSay[ 5 ] := TGetHlp():ReDefine( 171, { | u | If( PCount()==0, cSay[ 5 ], cSay[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 92 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 92 ], aTmp[ 92 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwBncCli( aGet[ 92 ], aGet[ 93 ], aGet[ 94 ], aGet[ 95 ], aGet[ 96 ], aGet[ 97 ], aGet[ 98 ], aTmp[ 6 ] ) )}, nil, "LUPA",, )






      aGet[ 93 ] := TGetHlp():ReDefine( 424, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( lIbanDigit( aTmp[ 93 ], aTmp[ 95 ], aTmp[ 96 ], aTmp[ 97 ], aTmp[ 98 ], aGet[ 94 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 94 ] := TGetHlp():ReDefine( 425, { | u | If( PCount()==0, aTmp[ 94 ], aTmp[ 94 ]:= u ) }, oFld:aDialogs[1],,, {||    ( lIbanDigit( aTmp[ 93 ], aTmp[ 95 ], aTmp[ 96 ], aTmp[ 97 ], aTmp[ 98 ], aGet[ 94 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 95 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 95 ], aTmp[ 95 ]:= u ) }, oFld:aDialogs[1],,, {||    (     lCalcDC( aTmp[ 95 ], aTmp[ 96 ], aTmp[ 97 ], aTmp[ 98 ], aGet[ 97 ], aTmp[ 93 ] ),    aGet[ 93 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[ 96 ] := TGetHlp():ReDefine( 421, { | u | If( PCount()==0, aTmp[ 96 ], aTmp[ 96 ]:= u ) }, oFld:aDialogs[1],,, {||    (     lCalcDC( aTmp[ 95 ], aTmp[ 96 ], aTmp[ 97 ], aTmp[ 98 ], aGet[ 97 ], aTmp[ 93 ] ),    aGet[ 93 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[ 97 ] := TGetHlp():ReDefine( 422, { | u | If( PCount()==0, aTmp[ 97 ], aTmp[ 97 ]:= u ) }, oFld:aDialogs[1],,, {||    (     lCalcDC( aTmp[ 95 ], aTmp[ 96 ], aTmp[ 97 ], aTmp[ 98 ], aGet[ 97 ], aTmp[ 93 ] ),    aGet[ 93 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )







      aGet[ 98 ] := TGetHlp():ReDefine( 423, { | u | If( PCount()==0, aTmp[ 98 ], aTmp[ 98 ]:= u ) }, oFld:aDialogs[1],, "9999999999", {||    (     lCalcDC( aTmp[ 95 ], aTmp[ 96 ], aTmp[ 97 ], aTmp[ 98 ], aGet[ 97 ], aTmp[ 93 ] ),    aGet[ 93 ]:lValid() )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )











      aGet[ 14 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],,, {||    ( LoadAgente( aGet[ 14 ], dbfAgent, oSay[ 6 ], aGet[ 43 ], dbfAgeCom, dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 14 ], oSay[ 6 ] ) )}, nil, "LUPA",, )






      oSay[ 6 ] := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, cSay[ 6 ], cSay[ 6 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( changeAgentPercentageInAllLines(aTmp[ 43 ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, nil, "Bot",, )







      aGet[ 43 ] := TGetHlp():ReDefine( 182, { | u | If( PCount()==0, aTmp[ 43 ], aTmp[ 43 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( validateAgentPercentage( aGet[ 43 ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( !Empty( aTmp[ 14] ) .AND. lWhen )},, .F., .T.,,,,,, nil,,, )




      oGetAge := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, nTotAge, nTotAge:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )












      aGet[ 20 ] := TGetHlp():ReDefine( 185, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cRuta( aGet[ 20 ], dbfRuta, oSay[ 7 ] ) )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwRuta( aGet[ 20 ], dbfRuta, oSay[ 7 ] ) )}, nil, "LUPA",, )





      oSay[ 7 ] := TGetHlp():ReDefine( 186, { | u | If( PCount()==0, cSay[ 7 ], cSay[ 7 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )













        aGet[ 46 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    (  cDivOut( aGet[ 46 ], oBmpDiv, aGet[ 47 ], @cPouDiv, @nDouDiv, @cPorDiv, @nRouDiv, @cPpvDiv, @nDpvDiv, oGetMasDiv, D():Divisas( nView ), oBandera ) )}, "N/W*",,,,, .F., {||     (  nMode == 1 .AND. ( dbfTmpLin )->( LastRec() ) == 0 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 46 ], oBmpDiv, aGet[ 47 ], D():Divisas( nView ), oBandera )}, nil, "LUPA",, )




        oBmpDiv := TBitmap():ReDefine( 201, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )

















      oBmpEmp := TBitmap():ReDefine( 500,, "Bmp\ImgPedCli.bmp", oDlg,,, .F., .F.,,, .F.,,, .F. )




      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )

      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
      oBrwLin:bClrStd         := {|| { if( ( dbfTmpLin )->lKitChl, 8421504, 0 ), GetSysColor( 5 ) } }

      oBrwLin:cAlias          := dbfTmpLin

      oBrwLin:nMarqueeStyle   := 6
      oBrwLin:lFooter         := .T.
      oBrwLin:cName           := "Pedido a cliente.Detalle"

      oBrwLin:CreateFromResource( 210 )

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Oferta"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfTmpLin )->lLinOfe }
         :nWidth              := 50
         :lHide               := .T.
         :SetCheck( { "gc_check_12", "nil16" } )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Re. Recibido"
         :bStrData            := {|| "" }
         :bBmpData            := {|| nEstadoUnidadesRecibidasPedidosClientes( D():PedidosProveedoresLineas( nView ), dbfAlbPrvL, dbfTmpLin ) }
         :nWidth              := 20
         :lHide               := .T.
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Pr. Estado producción"
         :bStrData            := {|| "" }
         :bBmpData            := {|| Min( Max( ( dbfTmpLin )->nProduc + 1, 1 ), 3 ) }
         :nWidth              := 20
         :lHide               := .T.
         :AddResource( "gc_check_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_delete_12" )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "En. Entregado"
         :bStrData            := {|| "" }
         :bBmpData            := {|| nEstadoUnidadesEntregadasPedidosClientes( dbfTmpLin ) }
         :nWidth              := 20
         :lHide               := .T.
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Número"
         :cSortOrder          := "nNumLin"
         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :cEditPicture        := "9999"
         :nWidth              := 54
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide                     := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Número Kit"
         :bEditValue          := {|| ( dbfTmpLin )->nNumKit }
         :cEditPicture        := "9999"
         :nWidth              := 55
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Posición"
         :cSortOrder          := "nPosPrint"
         :bEditValue          := {|| ( dbfTmpLin )->nPosPrint }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :cEditPicture        := "9999"
         :nWidth              := 54
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Código"
         :cSortOrder          := "cRef"
         :bEditValue          := {|| ( dbfTmpLin )->cRef }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :nWidth              := 60
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "C. Barras"
         :bEditValue          := {|| cCodigoBarrasDefecto( ( dbfTmpLin )->cRef, dbfCodeBar ) }
         :nWidth              := 100
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Descripción"
         :cSortOrder          := "cDetalle"
         :bEditValue          := {|| if( Empty( ( dbfTmpLin )->cRef ), ( dbfTmpLin )->mLngDes, ( dbfTmpLin )->cDetalle ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         :nWidth              := 250
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Última venta"
         :cSortOrder          := "dFecUltCom"
         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecUltCom ) }
         :bClrStd             := {|| { if( ( GetSysDate() - ( dbfTmpLin )->dFecUltCom ) > 30, 255, 0 ), GetSysColor( 5 )} }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Última unidades"
         :cSortOrder          := "nUniUltCom"
         :bEditValue          := {|| ( dbfTmpLin )->nUniUltCom }
         :cEditPicture        := MasUnd()
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Último precio"
         :bEditValue          := {|| ( dbfTmpLin )->nPrcUltCom }
         :cEditPicture        := cPouDiv
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| alltrim( ( dbfTmpLin )->cValPr1 ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Valor prop. 1"
         :bEditValue          := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cValPr1, nView ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| alltrim( ( dbfTmpLin )->cValPr2 ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Valor prop. 2"
         :bEditValue          := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr2, nView ) }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfTmpLin )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Bultos"
         :bEditValue          := {|| NotBulto( ( dbfTmpLin )->nBultos ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := cNombreCajas()
         :bEditValue          := {|| NotCaja( ( dbfTmpLin )->nCanPed ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := cNombreUnidades()
         :cSortOrder          := "nUniCaja"
         :bEditValue          := {|| ( dbfTmpLin )->nUniCaja }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
         :nEditType           := 1
         :bOnPostEdit         := {|o,x,n| ChangeUnidades( o, x, n, aTmp, dbfTmpLin ) }
         :nFooterType         := 1
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Sumar unidades"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| SumaUnidadLinea( aTmp ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_navigate_plus_16" )
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Restar unidades"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| RestaUnidadLinea( aTmp ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_navigate_minus_16" )
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total " + cNombreUnidades()
         :bEditValue          := {|| nTotNPedCli( dbfTmpLin ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total entregadas"
         :bEditValue          := {|| nUnidadesRecibidasAlbaranesClientes( ( dbfTmpLin )->cSerPed + Str( ( dbfTmpLin )->nNumPed ) + ( dbfTmpLin )->cSufPed, ( dbfTmpLin )->cRef, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfAlbCliL ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Unidad de medición"
         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }
         :nWidth              := 24
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Peso"
         :bEditValue          := {|| ( dbfTmpLin )->nPesokg }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "T. Peso"
         :bEditValue          := {|| ( nTotNPedCli( dbfTmpLin ) * ( dbfTmpLin )->nPesokg ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }
         :nWidth              := 30
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Precio"
         :bEditValue          := {|| nTotUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nEditType            := 1
         :bOnPostEdit          := {|o,x,n| ChangePrecio( o, x, n, aTmp, dbfTmpLin ) }
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Dto."
         :bEditValue          := {|| ( dbfTmpLin )->nDto }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 52
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Dto. Lin."
         :bEditValue          := {|| nDtoUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Prm."
         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }
         :cEditPicture        := "@E 99.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Age"
         :bEditValue          := {|| ( dbfTmpLin )->nComAge }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% " + cImp()
         :bEditValue          := {|| ( dbfTmpLin )->nIva }
         :cEditPicture        := "@E 99.9"
         :nWidth              := 44
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Portes"
         :bEditValue          := {|| nTrnUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "P. verde"
         :bEditValue          := {|| nPntUPedCli( dbfTmpLin, nDpvDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total"
         :bEditValue          := {|| nTotLPedCli( dbfTmpLin, nDouDiv, nRouDiv, , , aTmp[ 91 ] ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFooterType         := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Dirección"
         :bEditValue          := {|| ( dbfTmpLin )->cObrLin + Space( 1 ) + RetFld( aTmp[ 6 ] + ( dbfTmpLin )->cObrLin, dbfObrasT, "cNomObr" ) }
         :nWidth              := 250
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader                := "Centro coste"
         :bEditValue             := {|| AllTrim( ( dbfTmpLin )->cCtrCoste ) + " - " + CentroCosteModel():getNombreFromCodigo( ( dbfTmpLin )->cCtrCoste ) }
         :nWidth                 := 180
         :lHide                  := .T.
      end

      if nMode <> 3
         oBrwLin:bLDblClick  := {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) }
      end








      aGet[ 29 ] := TGetHlp():ReDefine( 219, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )








      aGet[ 30 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[ 1 ],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )




      aGet[ 31 ] := TGetHlp():ReDefine( 229, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









        aGet[ 32 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )}, "N/W*",,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





        aGet[ 33 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









        aGet[ 34 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )}, "N/W*",,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )






      aGet[ 35 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[1],, "@!",, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









      aGet[ 36 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )}, "N/W*",,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oBrwIva                        := IXBrowse():New( oFld:aDialogs[ 1 ] )

      oBrwIva:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwIva:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwIva:SetArray( aTotIva, , , .F. )
      oBrwIva:lHscroll               := .F.

      oBrwIva:nMarqueeStyle          := 5
      oBrwIva:lRecordSelector        := .F.

      oBrwIva:CreateFromResource( 490 )

      with object ( oBrwIva:AddCol() )
         :cHeader          := "Base"
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "neto" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ) <> 0 ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "neto" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "%" + cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), "@E 999.99" ), "" ), "" ) }
         :bEditValue       := {|| hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) }
         :nWidth           := 44
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
         :nEditType        := 1
         :bEditWhen        := {|| !IsNil( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ) ) }
         :bOnPostEdit      := {|o,x| EdtIva( o, x, hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajeiva" ), dbfTmpLin, D():TiposIva( nView ), oBrwLin ), RecalculaTotal( aTmp ) }
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := cImp()
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ) <> nil ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impiva" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "% R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ) <> nil .AND. aTmp[ 42 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "porcentajere" ), cPicReq() ), "" ), "" ) }
         :nWidth           := 44
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "R.E."
         :bStrData         := {|| if( len( aTotIva ) > 0, if( ( hhaskey( aTotIva[ oBrwIva:nArrayAt ], "impre" ) .AND. hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ) <> nil .AND. aTmp[ 42 ] ), Trans( hGet( aTotIva[ oBrwIva:nArrayAt ], "impre" ), cPorDiv ), "" ), "" ) }
         :nWidth           := 76
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end









      aGet[ 76 ] := TGetHlp():ReDefine( 411, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









      aGet[ 52 ] := TGetHlp():ReDefine( 412, { | u | If( PCount()==0, aTmp[ 52 ], aTmp[ 52 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( D():TiposIva( nView ), aTmp[ 52 ] ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( nTotPedCli( nil, D():PedidosClientes( nView ), dbfTmpLin, D():TiposIva( nView ), D():Divisas( nView ), D():FormasPago( nView ), aTmp ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 52 ], D():TiposIva( nView ), , .T. ) )}, nil, "LUPA",, )







      aGet[ 53 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[1],, cPorDiv, {||    ( nTotPedCli( nil, D():PedidosClientes( nView ), dbfTmpLin, D():TiposIva( nView ), D():Divisas( nView ), D():FormasPago( nView ), aTmp ), .T. )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( nTotPedCli( nil, D():PedidosClientes( nView ), dbfTmpLin, D():TiposIva( nView ), D():Divisas( nView ), D():FormasPago( nView ), aTmp ) ) }, .F., .F.,,,,,, nil,,, )



      oGetNet := TSay():ReDefine( 401, {|| nTotNet}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetTrn := TSay():ReDefine( 402, {|| nTotTrn}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetIvm := TSay():ReDefine( 403, {|| nTotIvm}, oFld:aDialogs[1],,,, .F.,, .F., .F., )





      aGet[ 91 ] := TCheckBox():ReDefine( 409, { | u | If( PCount()==0, aTmp[ 91  ], aTmp[ 91  ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ), oBrwLin:Refresh() )},,,,, .F., {||     ( lWhen )}, .F. )



      oGetPnt := TSay():ReDefine( 404, {|| nTotPnt}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oSayGetRnt := TSay():ReDefine( 709,, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetRnt := TGetHlp():ReDefine( 408, { | u | If( PCount()==0, nTotRnt, nTotRnt:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      oGetIva := TSay():ReDefine( 405, {|| nTotIva}, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )





      aGet[ 42 ] := TCheckBox():ReDefine( 406, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ) )},,,,, .F., {||     ( lWhen )}, .F. )




      oImpuestos := TCheckBox():ReDefine( 711, { | u | If( PCount()==0, lImpuestos, lImpuestos:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( .F.)}, .F. )



      oGetReq := TSay():ReDefine( 407, {|| nTotReq}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oGetTotal := TSay():ReDefine( 470, {|| nTotPed}, oFld:aDialogs[1],,,, .F., oFont, .F., .F., )









      TButton():ReDefine( 515, {||( AppDeta( oBrwLin, bEdtDet, aTmp, .T. ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 500, {||( AppDeta( oBrwLin, bEdtDet, aTmp) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 501, {||( EdtDeta( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 502, {||( DelDeta( oBrwLin ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwLin, bEdtDet, dbfTmpLin, nil, nil, aTmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )





        TButton():ReDefine( 524, {||( LineUp( dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )






        TButton():ReDefine( 525, {||( LineDown( dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





      oBtnKit := TButton():ReDefine( 526, {||( lEscandalloEdtRec( .T., oBrwLin ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )




      oBtnAtp := TButton():ReDefine( 527, {||( CargaAtipicasCliente( aTmp, oBrwLin, oDlg ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )




      TButton():ReDefine( 528, {||( importarArticulosScaner() )}, oFld:aDialogs[1],,, .F.,,,, .F. )










      aGet[1] := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aTmp[1], aTmp[1]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( aTmp[1] >= "A" .AND. aTmp[1] <= "Z"  )}, "N/W*",,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .T., {||    ( UpSerie( aGet[1] ) )}, {||  ( DwSerie( aGet[ 1] ) )},,,, nil,,, )





        aGet[2] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[2], aTmp[2]:= u ) }, oFld:aDialogs[1],, "999999999",,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )




        aGet[ 3 ] := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 5 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )





      aGet[ 22 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cEstPed, cEstPed:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,, 121, )






      aGet[ 74 ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 74 ], aTmp[ 74 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 112, )






      aGet[ 75 ] := TGetHlp():ReDefine( 113, { | u | If( PCount()==0, aTmp[ 75 ], aTmp[ 75 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 114, )







      aGet[ 57 ] := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, aTmp[ 57 ], aTmp[ 57 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSay[ 10 ]:cText( UsuariosModel():getNombreWhereCodigo( aTmp[ 57 ] ) ), .T.  )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 10 ] := TGetHlp():ReDefine( 116, { | u | If( PCount()==0, cSay[ 10 ], cSay[ 10 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )










      aGet[ 45 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[1],, "@R #/#########/##", {||    ( cPreCli( aTmp, aGet, oBrwLin, nMode ), SetDialog( aGet, oSayGetRnt, oGetRnt ) )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,, {|Self|( brwPreCli( aGet[ 45 ], dbfPreCliT, dbfPreCliL, D():TiposIva( nView ), D():Divisas( nView ), D():FormasPago( nView ), aGet[ 51 ] ) )}, nil, "LUPA", 124, )






      aGet[ 71 ] := TComboBox():ReDefine( 218, { | u | If( PCount()==0, aTmp[ 71 ], aTmp[ 71 ]:= u ) }, ( SituacionesModel():getArrayNombres() ), oFld:aDialogs[1],,,,,,, .F., {||     ( lWhen )},,,,,, "aGet[ 71 ]",,,,,,, )





      aGet[ 51 ] := TCheckBox():ReDefine( 129, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( ( dbfTmpLin )->( ordKeyCount() ) == 0 )}, .F. )








      aGet[ 68 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 68 ], aTmp[ 68 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 11 ] := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSay[ 11 ], cSay[ 11 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[54] := TGetHlp():ReDefine( 235, { | u | If( PCount()==0, aTmp[54], aTmp[54]:= u ) }, oFld:aDialogs[2],,, {||    ( LoadTrans( aTmp, aGet[ 54 ], aGet[ 55 ], oSay[ 8 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( oTrans:Buscar( aGet[54] ), .T. )}, nil, "LUPA",, )




      oSay[ 8 ] := TGetHlp():ReDefine( 236, { | u | If( PCount()==0, cSay[ 8 ], cSay[ 8 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 55 ] := TGetHlp():ReDefine( 237, { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 44 ] := TGetHlp():ReDefine( 128, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[2],, "99999",,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )












      aGet[ 18 ] := TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[2],,, {||    cCajas( aGet[ 18 ], dbfCajT, oSay[ 9 ] )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 18 ], oSay[ 9 ] ) )}, nil, "LUPA",, )





      oSay[ 9 ] := TGetHlp():ReDefine( 166, { | u | If( PCount()==0, cSay[ 9 ], cSay[ 9 ]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 102 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 102 ], aTmp[ 102 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oCentroCoste:Existe( aGet[ 102 ], aGet[ 102 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 102 ] ) )}, nil, "LUPA",, 351 )





      aGet[ 61 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[60] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[60], aTmp[60]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[23] := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, aTmp[23], aTmp[23]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[21] := TGetHlp():ReDefine( 127, { | u | If( PCount()==0, aTmp[21], aTmp[21]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )




      aGet[49] := TCheckBox():ReDefine( 126, { | u | If( PCount()==0, aTmp[49], aTmp[49]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F. )









        aGet[24] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[24], aTmp[24]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[26] := TMultiGet():ReDefine( 240, { | u | If( PCount()==0, aTmp[26], aTmp[26]:= u ) }, oFld:aDialogs[2],, "N/W*",,,,, .F., {||     ( lWhen )}, .F.,, )





      aGet[25] := TMultiGet():ReDefine( 250, { | u | If( PCount()==0, aTmp[25], aTmp[25]:= u ) }, oFld:aDialogs[2],, "N/W*",,,,, .F., {||     ( lWhen )}, .F.,, )




      oGetMasDiv := TSay():ReDefine( 480, {|| cGetMasDiv}, oFld:aDialogs[1],,,, .F., oFont, .F., .F., )








      aGet[ 65 ] := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 65 ], aTmp[ 65 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 66 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 66 ], aTmp[ 66 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 67 ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 67 ], aTmp[ 67 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










      aGet[ 81 ] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 81 ], aTmp[ 81 ]:= u ) }, oFld:aDialogs[2],, {||( lChangeCancel( aGet, aTmp, dbfTmpLin ) )}, {||    ( lValidCancel( aGet, aTmp, oBrwLin ) )},,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 22 ] <> 2 )}, .F. )




      aGet[ 82 ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 82 ], aTmp[ 82 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 81 ] )},, .F., .F.,,,,,, nil,,, )




      aGet[ 83 ] := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, aTmp[ 83 ], aTmp[ 83 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 81 ] )},, .F., .F.,,,,,, nil,,, )










      aGet[ 104 ] := TComboBox():ReDefine( 590, { | u | If( PCount()==0, aTmp[ 104 ], aTmp[ 104 ]:= u ) }, ( aPrepare ), oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "aGet[ 104 ]",,,,,,, )






      oBrwInc                 := IXBrowse():New( oFld:aDialogs[ 3 ] )

      oBrwInc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwInc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwInc:cAlias          := dbfTmpInc

      oBrwInc:nMarqueeStyle   := 6
      oBrwInc:cName           := "Pedido de cliente.Incidencia"

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Resuelta"
            :bStrData         := {|| "" }
            :bEditValue       := {|| ( dbfTmpInc )->lListo }
            :nWidth           := 70
            :SetCheck( { "Sel16", "Cnt16" } )
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }
            :nWidth           := 90
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }
            :nWidth           := 470
         end

         if nMode <> 3
            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }
         end

         oBrwInc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 502, {||( WinDelRec( oBrwInc, dbfTmpInc ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F.,,,, .F. )



      oBrwDoc                 := IXBrowse():New( oFld:aDialogs[ 4 ] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc

      oBrwDoc:nMarqueeStyle   := 6
      oBrwDoc:nRowHeight      := 40
      oBrwDoc:nDataLines      := 2

         with object ( oBrwDoc:AddCol() )
            :cHeader          := "Documento"
            :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }
            :nWidth           := 850
         end

         if nMode <> 3
            oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) }
         end

         oBrwDoc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 502, {||( WinDelRec( oBrwDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )




      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )





      oBrwEst                 := IXBrowse():New( oFld:aDialogs[ 5 ] )

      oBrwEst:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwEst:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwEst:cAlias          := dbfTmpEst

      oBrwEst:nMarqueeStyle   := 6
      oBrwEst:cName           := "Pedido de cliente.Situaciones"

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Nombre"
            :bEditValue       := {|| ( dbfTmpEst )->cSitua }
            :nWidth           := 140
         end

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpEst )->dFecSit ) }
            :nWidth           := 90
             :nDataStrAlign    := 1
             :nHeadStrAlign    := 1
         end

         with object ( oBrwEst:AddCol() )
            :cHeader          := "Hora"
            :bEditValue       := {|| trans( ( dbfTmpEst )->tFecSit, "@R 99:99:99" ) }
            :nWidth           := 90
         end

         if nMode <> 3
            oBrwEst:bLDblClick   := {|| WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) }
         end

         oBrwEst:CreateFromResource( 210 )





    TButton():ReDefine( 500, {||( WinAppRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[ 5 ],,, .F., {||     ( lWhen )},,, .F. )






    TButton():ReDefine( 501, {||( WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[ 5 ],,, .F., {||     ( lWhen )},,, .F. )






    TButton():ReDefine( 502, {||( WinDelRec( oBrwEst, dbfTmpEst ) )}, oFld:aDialogs[ 5 ],,, .F., {||     ( lWhen )},,, .F. )





    TButton():ReDefine( 503, {||( WinZooRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) )}, oFld:aDialogs[ 5 ],,, .F.,,,, .F. )










      TButton():ReDefine( 3, {||( RecPedCli( aTmp ), oBrwLin:Refresh( .T. ), RecalculaTotal( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 4, {||( if( EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ), GenPedCli( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( if( exitNoSave( nMode, dbfTmpLin ), oDlg:end(), ) )}, oDlg,,, .F.,,,, .T. )

      oSayLabels[ 1 ] := TGroup():ReDefine( 700,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 2 ] := TSay():ReDefine( 703,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 3 ] := TSay():ReDefine( 704,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 4 ] := TSay():ReDefine( 705,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 5 ] := TSay():ReDefine( 706,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 6 ] := TSay():ReDefine( 708,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 7 ] := TSay():ReDefine( 710,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 9 ] := TSay():ReDefine( 712,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )

   CodigosPostales():GetInstance():setBinding( { "CodigoPostal" => aGet[ 11 ], "Poblacion" => aGet[ 9 ], "Provincia" => aGet[ 10 ] } )

   if nMode <> 3

      oFld:aDialogs[1]:AddFastKey( 113, {|| AppDeta( oBrwLin, bEdtDet, aTmp ) } )
      oFld:aDialogs[1]:AddFastKey( 114, {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) } )
      oFld:aDialogs[1]:AddFastKey( 115, {|| DelDeta( oBrwLin ), RecalculaTotal( aTmp ) } )

      oFld:aDialogs[3]:AddFastKey( 113, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 114, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 115, {|| WinDelRec( oBrwInc, dbfTmpInc ) } )

      oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 115, {|| WinDelRec( oBrwDoc, dbfTmpDoc ) } )

      oFld:aDialogs[5]:AddFastKey( 113, {|| WinAppRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) } )
      oFld:aDialogs[5]:AddFastKey( 114, {|| WinEdtRec( oBrwEst, bEdtEst, dbfTmpEst, nil, nil, aTmp ) } )
      oFld:aDialogs[5]:AddFastKey( 115, {|| WinDelRec( oBrwEst, dbfTmpEst ) } )

      oDlg:AddFastKey( 116, {|| EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ) } )
      oDlg:AddFastKey( 117, {|| if( EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ), GenPedCli( 1 ), ) } )
      oDlg:AddFastKey( 118, {|| ExcelImport( aTmp, dbfTmpLin, D():Articulos( nView ), dbfArtDiv, D():Familias( nView ), D():Divisas( nView ), oBrwLin, .T. ) } )
      oDlg:AddFastKey( 120, {|| oDetCamposExtra:Play( Space(1) ) } )

      oDlg:AddFastKey( 65,    {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )

   end

   oDlg:SetControlFastKey( "PedidosClientesLineas", nView, aGet, dbfTmpLin )

   oDlg:bStart         := {|| StartEdtRec( aTmp, aGet, oDlg, nMode, cCodArt, cCodPre, oBrwLin, cCodCli ) }




    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|(  RecalculaTotal( aTmp ) )}, .T.,,, {|Self|(  InitEdtRec( aTmp, aGet, oDlg, oBrwLin, oBrwInc ), SetDialog( aGet, oSayGetRnt, oGetRnt ) )}, oDlg:bRClicked,,, )

   oMenu:end()

   oBmpEmp:end()
   oBmpDiv:end()





   if oDlg:nResult <> 1

      if !Empty( aTmp[ 45 ] ) .AND. nMode == 1

         if ( dbfPreCliT )->( dbSeek( aTmp[ 45 ] ) )

            if dbLock( dbfPreCliT )
               ( dbfPreCliT )->lEstado := .F.
               ( dbfPreCliT )->( dbUnLock() )
            end

         end

      end

   end

   ( D():PedidosClientes( nView ) )->( ordSetFocus( nOrd ) )

   oBmpGeneral:End()





   lPedidosWeb( D():PedidosClientes( nView ) )





   oBrwLin:CloseData()
   oBrwInc:CloseData()





   KillTrans()

RETURN ( oDlg:nResult == 1 )



Static Function StartEdtRec( aTmp, aGet, oDlg, nMode, cCodArt, cCodPre, oBrwLin, cCodCli )

    lEscandalloEdtRec( .F., oBrwLin )

    if nMode == 1

        if !Empty( aGet ) .AND. !Empty( cCodCli )
           aGet[ 6 ]:cText( cCodCli )
            aGet[ 6 ]:lValid()
        end

        do case
           case lRecogerUsuario() .AND. Empty( cCodArt )

             if !lGetUsuario( aGet[ 57 ] )
                  oDlg:End()
              end

           case lRecogerUsuario() .AND. !Empty( cCodArt )

               if lGetUsuario( aGet[ 57 ] )
                  AppDeta( oBrwLin, bEdtDet, aTmp, nil, cCodArt )
               else
                  oDlg:End()
               end

           case !lRecogerUsuario() .AND. !Empty( cCodArt )

              AppDeta( oBrwLin, bEdtDet, aTmp, nil, cCodArt )

       end

       if !Empty( cCodPre )
           aGet[ 45 ]:lValid()
       end

    end

   if !Empty( aGet[ 54 ] )
      aGet[ 54 ]:lValid()
   end

   if uFieldempresa( "lServicio" )
      aGet[ 74 ]:Show()
      aGet[ 75 ]:Show()
   else
      aGet[ 74 ]:Hide()
      aGet[ 75 ]:Hide()
   end





    if !Empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )

       while !( dbfTmpInc )->( Eof() )
          if ( dbfTmpInc )->lAviso .AND. !( dbfTmpInc )->lListo
             MsgInfo( Trim( ( dbfTmpInc )->mDesInc ), "¡Incidencia!" )
          end
          ( dbfTmpInc )->( dbSkip() )
       end

       ( dbfTmpInc )->( dbGoTop() )

    end

Return ( nil )



Static Function InitEdtRec( aTmp, aGet, oDlg, oBrwLin, oBrwInc )

   edtRecMenu( aTmp, oDlg )

   oBrwLin:Load()
   oBrwLin:MakeTotals()
   oBrwLin:RefreshFooters()

   oBrwInc:Load()

Return ( nil )



Static Function EdtRecMenu( aTmp, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

            if !lExternal




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra para la familia", .F.,, {|oMenuItem|( oDetCamposExtra:Play( Space(1) ) )},, "gc_form_plus2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&2. Visualizar presupuesto", "Visualiza el presupuesto del cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 45 ] ), ZooPreCli( aTmp[ 45 ] ), MsgStop( "El pedido no proviene de presupuesto" ) ) )},, "gc_notebook_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)




            MenuAddItem( "&3. Modificar cliente", "Modificar la ficha del cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 6 ] ), EdtCli( aTmp[ 6 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "gc_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&4. Modificar cliente contactos", "Modifica la ficha del cliente en contactos", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 6 ] ), EdtCli( aTmp[ 6 ], , 5 ), MsgStop( "Código de cliente vacío" ) ) )},, "gc_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&5. Informe de cliente", "Abrir el informe del cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 6 ] ), InfCliente( aTmp[ 6 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&6. Modificar dirección", "Modifica la obra del documento", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 15 ] ), EdtObras( aTmp[ 6 ], aTmp[ 15 ], dbfObrasT ), MsgStop( "Código de obra vacío" ) ) )},, "gc_worker2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)

            end





            MenuAddItem( "&7. Informe del documento", "Informe del documento", .F.,, {|oMenuItem|( TTrazaDocumento():Activate( "09", aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&8. Firmar documento", "Firmar documento", .F.,, {|oMenuItem|( if( empty( aTmp[ 101 ] ) .OR.  msgNoYes( "El documento ya esta firmado, ¿Desea voler a firmarlo?" ), aTmp[ 101 ] := signatureToMemo(), ) )},, "gc_sign_document_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return ( oMenu )







STATIC FUNCTION EdtDet( aTmp, aGet, dbf, oBrw, lTotLin, cCodArtEnt, nMode, aTmpPed )

   local oDlg
   local oFld
   local oBtn
   local oBrwResCli
   local oBrwAlbCli
   local oBrwFacCli
   local oBrwAlbPrv
   local oGet3
   local cGet3
   local oTot               := Array( 6 )
   local oTotal
   local nTotal
   local oSayPr1
   local oSayPr2
   local cSayPr1            := ""
   local cSayPr2            := ""
   local oSayVp1
   local oSayVp2
   local cSayVp1            := ""
   local cSayVp2            := ""
   local oSayAlm
   local cSayAlm            := ""
   local nOrdAnt
   local nOrdPedPrv
   local nOrdAlbPrv
   local nTotRes            := 0
   local cNumPed            := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]
   local oStkAct
   local nStkAct            := 0
   local nTotEnt
   local dFecRes
   local cCodArt            := Padr( aTmp[ 4 ], 200 )
   local bmpImage
   local oTotUni
   local oTotPdt
   local nTotPdt            := 0
   local oTotEnt
   local oSayGrp
   local cSayGrp            := ""
   local oSayFam
   local cSayFam            := ""
   local cNumedPrv          := ""
   local oRentLin
   local cRentLin
   local cCodDiv            := aTmpPed[ 46 ]
   local oGetCaducidad
   local dGetCaducidad
   local nOrdFacCliL
   local oBtnSer
   local oEstadoProduccion
   local cEstadoProduccion
   local idPedidoCliente   := ""
   local idArticulo        := ""
   local idShortArticulo   := ""
   local cTablaLineasPedidosFactura
   local cTablaLineasPedidosAlbaran

   cGetCelda               := Space(20)

   cTipoCtrCoste           := AllTrim( aTmp[ 103 ] )

   do case
   case nMode == 1

      aTmp[ 11    ]  := 1
      aTmp[ 12   ]  := 1
      aTmp[ 88    ]  := 0
      aTmp[ 25     ]  := ctod( "" )
      aTmp[ 89    ]  := Ctod( "" )
      aTmp[ 28    ]  := lTotLin
      aTmp[ 2    ]  := aTmpPed[ 2 ]
      aTmp[ 39    ]  := aTmpPed[ 17 ]
      aTmp[ 42    ]  := aTmpPed[ 51 ]
      aTmp[ 74   ]  := aTmpPed[ 75 ]
      aTmp[ 73   ]  := aTmpPed[ 74]
      aTmp[ 81    ]  := oGetTarifa:getTarifa()
      aTmp[ 98    ]  := aTmpPed[ 15 ]

      if !Empty( cCodArtEnt )
         cCodArt            := Padr( cCodArtEnt, 200 )
      end

      cTipoCtrCoste           := "Centro de coste"

   case nMode == 2

      lTotLin               := aTmp[ 28 ]

   end

   idPedidoCliente         := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]
   idShortArticulo         := aTmp[ 4 ] + aTmp[ 7 ] + aTmp[ 8 ]
   idArticulo              := aTmp[ 4 ] + aTmp[ 5 ] + aTmp[ 6 ] + aTmp[ 7 ] + aTmp[ 8 ]





   cOldCodArt               := aTmp[ 4    ]
   cOldUndMed               := aTmp[ 22 ]
   cOldPrpArt               := aTmp[ 5 ] + aTmp[ 6 ] + aTmp[ 7 ] + aTmp[ 8 ]
   cOldLotArt               := aTmp[ 45 ]

   nOrdPedPrv               := ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( "cPedCliRef" ) )

   dFecRes                  := dTmpPdtRec( aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfTmpRes )

   nTotRes                  := AlbaranesClientesLineasModel():nUnidadesEntregadas( cNumPed, aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ] )
   nTotRes                  += FacturasClientesLineasModel():nUnidadesEntregadas( cNumPed, aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ] )

   if nMode == 2

      if nTotRes >= nTotNPedCli( aTmp )
         MsgStop( "No se puede modificar una linea entregada", "¡Atención!" )
         Return .F.
      end
   end

   if nTotRes > nTotNPedCli( aTmp )
      nTotRes               := nTotNPedCli( aTmp )
   end

   nTotEnt                  := nUnidadesRecibidasPedCli( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 70 ], aTmp[ 9 ], dbfAlbPrvL )
   nTotPdt                  := nTotNPedCli( aTmp ) - nTotEnt

   cEstadoProduccion         := aEstadoProduccion[ Min( Max( aTmp[ 88 ] + 1, 1 ), len( aEstadoProduccion ) ) ]





   cSayGrp                  := RetFld( aTmp[ 59 ], oGrpFam:GetAlias() )
   cSayFam                  := RetFld( aTmp[ 58 ], D():Familias( nView ) )



   cTablaLineasPedidosAlbaran := AlbaranesClientesLineasModel():lineasUnidadesEntregadas( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ] )
   cTablaLineasPedidosFactura := FacturasClientesLineasModel():lineasUnidadesEntregadas( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ] )

   nOrdAlbPrv               := ( dbfAlbPrvL )->( OrdSetFocus( "cPedCliRef" ) )

   ( dbfAlbPrvL )->( OrdScope( 0, idPedidoCliente + idArticulo ) )
   ( dbfAlbPrvL )->( OrdScope( 1, idPedidoCliente + idArticulo ) )
   ( dbfAlbPrvL )->( dbGoTop() )



   ( dbfTmpRes )->( OrdScope( 0, idArticulo ) )
   ( dbfTmpRes )->( OrdScope( 1, idArticulo ) )
   ( dbfTmpRes )->( dbGoTop() )



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "lineas a pedidos de clientes", "LFACCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



















      oFld := TFolder():ReDefine( 400, {"&General", "Da&tos", "R&ecepciones", "Reser&vas", "Entre&gas", "&Anular", "&Observaciones", "&Centro coste"}, { "LFACCLI_1","LPEDCLI_2","LPEDCLI_6","LPEDCLI_4","LPEDCLI_5","LPEDCLI_3","LFACCLI_3","LCTRCOSTE" }, oDlg,,,,, .F., )








      aGet[ 4 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodArt, cCodArt:= u ) }, oFld:aDialogs[1],,, {||    ( LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[ 4 ], aGet[ 9 ], .F., .T., oBtn, aGet[ 45 ], aTmp[ 5 ], aTmp[ 6 ], aGet[ 7 ], aGet[ 8 ], aGet[ 89 ], if( uFieldEmpresa( "lStockAlm" ), aTmp[ 39 ], nil ) ) )}, nil, "LUPA",, )





      aGet[ 9 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( ( lModDes() .OR. Empty( aTmp[ 9 ] ) ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )












      aGet[ 45 ] := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 113, )


           aGet[ 45 ]:bValid   := {||     StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], oStkAct ),    LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) }






      oGetCaducidad := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, dGetCaducidad, dGetCaducidad:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 341, )





      aGet[ 27 ] := TMultiGet():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( ( lModDes() .OR. Empty( aTmp[ 27 ] ) ) .AND. nMode <> 3 )}, .F.,, )



      oBrwProperties                      := IXBrowse():New( oFld:aDialogs[1] )

      oBrwProperties:nDataType            := 2

      oBrwProperties:bClrSel              := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwProperties:bClrSelFocus         := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwProperties:lHScroll             := .T.
      oBrwProperties:lVScroll             := .T.

      oBrwProperties:nMarqueeStyle        := 3
      oBrwProperties:lRecordSelector      := .F.
      oBrwProperties:lFastEdit            := .T.
      oBrwProperties:nFreeze              := 1
      oBrwProperties:lFooter              := .T.
      oBrwProperties:lFreezeLikeExcel     := .T.

      oBrwProperties:SetArray( {}, .F., 0, .F. )

      oBrwProperties:MakeTotals()

      oBrwProperties:CreateFromResource( 500 )





      oGetCelda := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, cGetCelda, cGetCelda:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 184, )

      oGetCelda:bValid              := {|| SearchProperty( oGetCelda, oBrwProperties ), .T. }










      aGet[ 7 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 7 ], oSayVp1, aTmp[ 5 ], D():PropiedadesLineas( nView ) ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ), .F. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 7 ], oSayVp1, aTmp[ 5 ] ) )}, nil, "LUPA",, )



      oSayPr1 := TSay():ReDefine( 271, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp1 := TGetHlp():ReDefine( 272, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[8] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[8], aTmp[8]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 8 ], oSayVp2, aTmp[ 6 ], D():PropiedadesLineas( nView ) ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ), .F. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[8], oSayVp2, aTmp[6 ] ) )}, nil, "LUPA",, )



      oSayPr2 := TSay():ReDefine( 281, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F., )





      oSayVp2 := TGetHlp():ReDefine( 282, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 22 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oUndMedicion:Existe( aGet[ 22 ], aGet[ 22 ]:oHelpText, "cNombre" ), ValidaMedicion( aTmp, aGet ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oUndMedicion:Buscar( aGet[ 22 ] ), ValidaMedicion( aTmp, aGet ) )}, nil, "LUPA",, 171 )











      aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] := TGetHlp():ReDefine( 520, { | u | If( PCount()==0, aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ], aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 521, )

         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ], aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 531, )

         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ], aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 541, )

         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetColor( 8388608 )












      aGet[ 10 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( D():TiposIva( nView ), aTmp[ 10 ], @aTmp[ 60 ] ) )}, "N/W*",,,,, .F., {||     ( lModIva() .AND. nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 10 ], D():TiposIva( nView ), , .T. ) )}, nil, "LUPA",, )










      aGet[ 41 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[1],, cPouDiv,,,,,,, .F., {||     ( uFieldEmpresa( "lModImp" ) .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,, {|Self|( oNewImp:nBrwImp( aGet[ 41 ] ) )}, nil,, 126, )












      aGet[ 93 ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     ( uFieldEmpresa( "lUseBultos" ) .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,, 451, )

      aGet[ 93 ]:Cargo          := "nBultos"
      aGet[ 93 ]:bPostValidate  := {| oSender | runScript( "PedidosClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpPed ) }









        aGet[11] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[11], aTmp[11]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) )},,,,,, .F., {||     ( lUseCaj() .AND. nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 131, )

      aGet[ 11 ]:Cargo          := "nCanPed"
      aGet[ 11 ]:bPostValidate  := {| oSender | runScript( "PedidosClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpPed ) }









        aGet[12] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[12], aTmp[12]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin .AND. oUser():lModificaUnidades() )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 141, )

      aGet[ 12 ]:Cargo          := "nUniCaja"
      aGet[ 12 ]:bPostValidate  := {| oSender | runScript( "PedidosClientes\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpPed ) }













      aGet[ 14 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )












      aGet[ 81 ] := TGetHlp():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 81 ], aTmp[ 81 ]:= u ) }, oFld:aDialogs[1],, "9", {||    ( aTmp[ 81 ] >= 1 .AND. aTmp[ 81 ] <= 6 )},,,,,, .F., {||     ( nMode <> 3 .AND. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) )}, {|nKey,nFlags,Self| (  changeTarifa( aTmp, aGet, aTmpPed ), loadComisionAgente( aTmp, aGet, aTmpPed ), recalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,, {||      1}, {||      6},, nil,,, )





      if aTmp[ 75 ]









         aGet[ 76 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )

      end









      aGet[ 16 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 351, )










      aGet[ 15 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],, cPpvDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 152, )











      aGet[31] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[31], aTmp[31]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, ( 255 + ( 0 * 256 ) + ( 0 * 65536 ) ),,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,, {||      0},,, nil,, 261, )





      aGet[ 30 ] := TGetHlp():ReDefine( 295, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )





      aGet[ 23 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )




      aGet[ 24 ] := TGetHlp():ReDefine( 175, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )





      aGet[ 71 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 71 ], aTmp[ 71 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )





      aGet[ 72 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 72 ], aTmp[ 72 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )




      aGet[ 94 ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ 94 ], aTmp[ 94 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









        aGet[17] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[17], aTmp[17]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )









        aGet[18] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[18], aTmp[18]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )







        aGet[19] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[19], aTmp[19]:= u ) }, oFld:aDialogs[1],, "@E 99.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .T.,,,,,, nil,,, )

      if !aTmp[ 75 ]





      oComisionLinea := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, nComisionLinea, nComisionLinea:= u ) }, oFld:aDialogs[ 1 ],, cPorDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      end






      oTotal := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nTotal, nTotal:= u ) }, oFld:aDialogs[1],, cPouDiv,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[37] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[37], aTmp[37]:= u ) }, oFld:aDialogs[1],, cPouDiv,,,,,,, .F., {||     ( RolesModel():getRolVerPreciosCosto( Auth():rolUuid() ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,, 321, )










      aGet[ 54 ] := TGetHlp():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 54 ], aTmp[ 54 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oTipArt:Existe( aGet[ 54 ], oGet3 ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )},, .F., .F.,,,,, {|Self|( oTipArt:Buscar( aGet[ 54 ] ) )}, nil, "LUPA",, )




      oGet3 := TGetHlp():ReDefine( 206, { | u | If( PCount()==0, cGet3, cGet3:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[ 39 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 39 ], , oSayAlm ), if( !uFieldEmpresa( "lNStkAct" ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], oStkAct ), .T. ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 39 ], oSayAlm ) )}, nil, "LUPA",, )




      oSayAlm := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSayAlm, cSayAlm:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 98 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 98 ], aTmp[ 98 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cObras( aGet[ 98 ], aGet[ 98 ]:oHelpText, aTmpPed[ 6 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwObras( aGet[ 98 ], aGet[ 98 ]:oHelpText, aTmpPed[ 6 ], dbfObrasT ) )}, nil, "LUPA",, 331 )





      oStkAct := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, nStkAct, nStkAct:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ 101 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 101 ], aTmp[ 101 ]:= u ) }, oFld:aDialogs[2],, "9999",,,,,,, .F., {||     ( nMode == 1 )},, .F., .T.,,,,,, nil,,, )




      aGet[ 29 ] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





      aGet[ 25 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 25 ], aTmp[ 25 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 97 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 97 ], aTmp[ 97 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ 52 ] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 52 ], aTmp[ 52 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )






      aGet[ 38 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[2],, cPouDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 65 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 65 ], aTmp[ 65 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( aGet[ 65 ], bmpImage ) ) }, .F., .F.,,,,, {|Self|( GetBmp( aGet[ 65 ], bmpImage ) )}, nil, "LUPA",, )











      aGet[ 59 ] := TGetHlp():ReDefine( ( 150 ), { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( oSayGrp:cText( RetFld( aTmp[ 59  ], oGrpFam:GetAlias() ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oGrpFam:Buscar( aGet[ 59 ] ) )}, nil, "LUPA",, )




      oSayGrp := TGetHlp():ReDefine( ( 151 ), { | u | If( PCount()==0, cSayGrp, cSayGrp:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 58 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSayFam:cText( RetFld( aTmp[ 58  ], D():Familias( nView ) ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFamilia( aGet[ 58 ], oSayFam ) )}, nil, "LUPA",, )




      oSayFam := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSayFam, cSayFam:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )




      oRentLin := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, cRentLin, cRentLin:= u ) }, oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 301, )




      aGet[ 47 ] := TCheckBox():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 48 ] := TCheckBox():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 109 ] := TCheckBox():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 109 ], aTmp[ 109 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( Auth():isSuperAdmin() .AND. nMode <> 3 )}, .F. )




      aGet[ 36 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[ 2 ],, { 350, 351, 352 },,,,, .F., {||     ( nMode <> 3 )}, )







      aGet[ 63 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 63 ], aTmp[ 63 ]:= u ) }, oFld:aDialogs[ 2 ],, ( RetPicCodPrvEmp() ),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 361 )

      aGet[ 63 ]:bValid  := {|| cProvee( aGet[ 63 ], D():Proveedores( nView ), aGet[ 63 ]:oHelpText ) }
      aGet[ 63 ]:bHelp   := {|| brwProvee( aGet[ 63 ], aGet[ 63 ]:oHelpText ) }






      oEstadoProduccion := TComboBox():ReDefine( 380, { | u | If( PCount()==0, cEstadoProduccion, cEstadoProduccion:= u ) }, aEstadoProduccion, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oEstadoProduccion",,,,,,, )






      aGet[ 74 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 74 ], aTmp[ 74 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 73 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 73 ], aTmp[ 73 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      oTotUni := TSay():ReDefine( 150, {|| nTotNPedCli( aTmp )}, oFld:aDialogs[3], cPicUnd, "B/W*",, .F.,, .F., .F., )





      oTotEnt := TSay():ReDefine( 160, {|| nTotEnt}, oFld:aDialogs[3], cPicUnd, "G/W*",, .F.,, .F., .F., )





      oTotPdt := TSay():ReDefine( 170, {|| nTotPdt}, oFld:aDialogs[3], cPicUnd, "R/W*",, .F.,, .F., .F., )

      oBrwAlbPrv                 := IXBrowse():New( oFld:aDialogs[3] )

      oBrwAlbPrv:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwAlbPrv:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwAlbPrv:cAlias          := dbfAlbPrvL

      oBrwAlbPrv:lFooter         := .F.
      oBrwAlbPrv:nMarqueeStyle   := 5

      oBrwAlbPrv:CreateFromResource( 180 )

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( dFecAlbPrv( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->cSufAlb, dbfAlbPrvT ) ) }
         :nWidth              := 70
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Albarán"
         :bEditValue          := {|| AllTrim( ( dbfAlbPrvL )->cSerAlb ) + "/" + AllTrim( Str( ( dbfAlbPrvL )->nNumAlb ) ) + "/" + AllTrim( ( dbfAlbPrvL )->cSufAlb ) }
         :nWidth              := 80
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Proveedor"
         :bEditValue          := {|| cNbrAlbPrv( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->cSufAlb, dbfAlbPrvT ) }
         :nWidth              := 210
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfAlbPrvL )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfAlbPrvL )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfAlbPrvL )->cLote }
         :nWidth              := 60
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNAlbPrv( dbfAlbPrvL ) }
         :bFooter             := {|| nTotEnt }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( dbfAlbPrvL )->cUnidad }
         :nWidth              := 25
         :lHide               := .T.
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfAlbPrvL )->cAlmLin }
         :nWidth              := 30
      end

      oBrwAlbPrv:bLDblClick     := {|| EdtAlbPrv( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->cSufAlb ), oBrwAlbPrv:Refresh(), oTotEnt:Refresh(), oTotPdt:Refresh() }










      oTot[ 4 ] := TSay():ReDefine( 190, {||   nTotRPedCli( aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfTmpRes )}, oFld:aDialogs[4], cPicUnd, "B/W*",, .F.,, .F., .F., )






      oTot[ 5 ] := TSay():ReDefine( 200, {||   nUnidadesRecibidasAlbaranesClientes( cNumPed, aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfAlbCliL )}, oFld:aDialogs[4], cPicUnd, "G/W*",, .F.,, .F., .F., )






      oTot[ 6 ] := TSay():ReDefine( 210, {||   NotMinus( nTotRPedCli( aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfTmpRes ) - nUnidadesRecibidasAlbaranesClientes( cNumPed, aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfAlbCliL ) )}, oFld:aDialogs[4], cPicUnd, "R/W*",, .F.,, .F., .F., )





      TButton():ReDefine( 501, {||( WinAppRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( WinEdtRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( WinDelRec( nil, dbfTmpRes , nil, {|| oBrwResCli:Refresh() } ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh() )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )

      oBrwResCli                 := IXBrowse():New( oFld:aDialogs[4] )

      oBrwResCli:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwResCli:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwResCli:cAlias          := dbfTmpRes

      oBrwResCli:nMarqueeStyle   := 6
      oBrwResCli:cName           := "Pedido de cliente.Detalle.Reservas"

      oBrwResCli:CreateFromResource( 220 )

      with object ( oBrwResCli:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( ( dbfTmpRes )->dFecRes ) }
         :nWidth              := 70
      end

      with object ( oBrwResCli:AddCol() )
         :cHeader             := cNombreCajas()
         :bEditValue          := {|| ( dbfTmpRes )->nCajRes }
         :cEditPicture        := cPicUnd
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwResCli:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| ( dbfTmpRes )->nUndRes }
         :cEditPicture        := cPicUnd
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwResCli:AddCol() )
         :cHeader             := "Total " + cNombreUnidades()
         :bEditValue          := {|| nTotNResCli( dbfTmpRes ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 230
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      if nMode <> 3
         oBrwResCli:bLDblClick  := {|| WinEdtRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) }
      end









      oTot[ 1 ] := TSay():ReDefine( 150, {|| nTotNPedCli( aTmp )}, oFld:aDialogs[5], cPicUnd, "B/W*",, .F.,, .F., .F., )





      oTot[ 2 ] := TSay():ReDefine( 160, {|| nTotRes}, oFld:aDialogs[5], cPicUnd, "G/W*",, .F.,, .F., .F., )





      oTot[ 3 ] := TSay():ReDefine( 170, {|| nTotNPedCli( aTmp ) - nTotRes}, oFld:aDialogs[5], cPicUnd, "R/W*",, .F.,, .F., .F., )

      oBrwAlbCli                 := IXBrowse():New( oFld:aDialogs[5] )

      oBrwAlbCli:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwAlbCli:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwAlbCli:cAlias          := cTablaLineasPedidosAlbaran

      oBrwAlbCli:lFooter         := .F.
      oBrwAlbCli:nMarqueeStyle   := 5

      oBrwAlbCli:CreateFromResource( 230 )

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( dFecAlbCli( ( cTablaLineasPedidosAlbaran )->cSerAlb + Str( ( cTablaLineasPedidosAlbaran )->nNumAlb ) + ( cTablaLineasPedidosAlbaran )->cSufAlb, dbfAlbCliT ) ) }
         :nWidth              := 70
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Albarán"
         :bEditValue          := {|| ( cTablaLineasPedidosAlbaran )->cSerAlb + "/" + AllTrim( Str( ( cTablaLineasPedidosAlbaran )->nNumAlb ) ) + "/" + ( cTablaLineasPedidosAlbaran )->cSufAlb }
         :nWidth              := 80
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Cliente"
         :bEditValue          := {|| cNbrAlbCli( ( cTablaLineasPedidosAlbaran )->cSerAlb + Str( ( cTablaLineasPedidosAlbaran )->nNumAlb ) + ( cTablaLineasPedidosAlbaran )->cSufAlb, dbfAlbCliT ) }
         :nWidth              := 210
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( cTablaLineasPedidosAlbaran )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( cTablaLineasPedidosAlbaran )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( cTablaLineasPedidosAlbaran )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNAlbCli( cTablaLineasPedidosAlbaran ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( cTablaLineasPedidosAlbaran )->cUnidad }
         :nWidth              := 25
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( cTablaLineasPedidosAlbaran )->cAlmLin }
         :nWidth              := 30
      end

      oBrwAlbCli:bLDblClick     := {|| ZooAlbCli( ( cTablaLineasPedidosAlbaran )->cSerAlb + Str( ( cTablaLineasPedidosAlbaran )->nNumAlb ) + ( cTablaLineasPedidosAlbaran )->cSufAlb ), oBrwAlbCli:Refresh() }





      oBrwFacCli                 := IXBrowse():New( oFld:aDialogs[5] )

      oBrwFacCli:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFacCli:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFacCli:cAlias          := cTablaLineasPedidosFactura

      oBrwFacCli:lFooter         := .F.
      oBrwFacCli:nMarqueeStyle   := 5

      oBrwFacCli:CreateFromResource( 240 )

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( dFecFacCli( ( cTablaLineasPedidosFactura )->cSerie + Str( ( cTablaLineasPedidosFactura )->nNumFac ) + ( cTablaLineasPedidosFactura )->cSufFac, dbfFacCliT ) ) }
         :nWidth              := 70
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Factura"
         :bEditValue          := {|| ( cTablaLineasPedidosFactura )->cSerie + "/" + AllTrim( Str( ( cTablaLineasPedidosFactura )->nNumFac ) ) + "/" + ( cTablaLineasPedidosFactura )->cSufFac }
         :nWidth              := 80
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Cliente"
         :bEditValue          := {|| cNbrFacCli( ( cTablaLineasPedidosFactura )->cSerie + Str( ( cTablaLineasPedidosFactura )->nNumFac ) + ( cTablaLineasPedidosFactura )->cSufFac, dbfFacCliT ) }
         :nWidth              := 210
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( cTablaLineasPedidosFactura )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( cTablaLineasPedidosFactura )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( cTablaLineasPedidosFactura )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNFacCli( cTablaLineasPedidosFactura ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( cTablaLineasPedidosFactura )->cUnidad }
         :nWidth              := 25
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( cTablaLineasPedidosFactura )->cAlmLin }
         :nWidth              := 30
      end

      oBrwFacCli:bLDblClick   := {|| ZooFacCli( ( cTablaLineasPedidosFactura )->cSerie + Str( ( cTablaLineasPedidosFactura )->nNumFac ) + ( cTablaLineasPedidosFactura )->cSufFac ), oBrwFacCli:Refresh() }









      aGet[55] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[55], aTmp[55]:= u ) }, oFld:aDialogs[6],, {||( CambiaAnulado( aGet, aTmp ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )






      aGet[ 56 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 56 ], aTmp[ 56 ]:= u ) }, oFld:aDialogs[6],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[57] := TMultiGet():ReDefine( 420, { | u | If( PCount()==0, aTmp[57], aTmp[57]:= u ) }, oFld:aDialogs[6],, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, .F.,, )









      aGet[ 61 ] := TMultiGet():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      aGet[ 85 ] := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 85 ], aTmp[ 85 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      bmpImage := TBitmap():ReDefine( 220,, ( cFileBitmap( cPatImg(), aTmp[ 65 ] ) ), oDlg,, { |nRow,nCol,nKeyFlags| ( bmpImage:lStretch := !bmpImage:lStretch, bmpImage:Refresh() ) }, .F., .F.,,, .F.,,, .F. )

         bmpImage:SetColor( , GetSysColor( 15 ) )












      aGet[ 102 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 102 ], aTmp[ 102 ]:= u ) }, oFld:aDialogs[8],,, {||    ( oCentroCoste:Existe( aGet[ 102 ], aGet[ 102 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 102 ] ) )}, nil, "LUPA",, 411 )






      oTipoCtrCoste := TComboBox():ReDefine( 140, { | u | If( PCount()==0, cTipoCtrCoste, cTipoCtrCoste:= u ) }, aTipoCtrCoste, oFld:aDialogs[8],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oTipoCtrCoste",,,,,,, )

         oTipoCtrCoste:bChange   := {|| clearGet( aGet[ 104 ] ), loadGet( aGet[ 104 ], cTipoCtrCoste ) }







      aGet[ 104 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 104 ], aTmp[ 104 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 160 )








      oBtnSer := TButton():ReDefine( 552, {||( nil )}, oDlg,,, .F.,,,, .F. )





      oBtn := TButton():ReDefine( 1, {||( SaveDeta( aTmp, aTmpPed, aGet, oFld, oDlg, oBrw, bmpImage, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTotal, oEstadoProduccion, oBtn ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 9, {||( ChmHelp( "Añadir_v" ) )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3

         if uFieldEmpresa( "lGetLot")
            oDlg:AddFastKey( 13,   {|| if( !Empty( aGet[ 4 ] ), aGet[ 4 ]:lValid(), ), oBtn:SetFocus(), oBtn:Click() } )
         end

         oDlg:AddFastKey( 116,             {|| oBtn:SetFocus(), oBtn:Click() } )

         oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 115, {|| DbDelRec( oBrwResCli, dbfTmpRes ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh() } )

      end

      oDlg:AddFastKey( 112, {|| ChmHelp( "Añadir_v" ) } )





      oDlg:bStart := {||   SetDlgMode( aTmp, aGet, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTotal, aTmpPed, oFld, oRentLin, oBrwAlbCli, oBrwAlbPrv, oBrwFacCli ), if( !Empty( oBtnSer ), oBtnSer:Hide(), ), if( !Empty( cCodArtEnt ), aGet[ 4 ]:lValid(), ), loadGet( aGet[ 104 ], cTipoCtrCoste ), aGet[ 104 ]:lValid(), aGet[ 22 ]:lValid(), aGet[ 63 ]:lValid(), aGet[ 98 ]:lValid() }




   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, .T.,,, {|Self|( EdtDetMenu( aGet[ 4 ], oDlg ), oBrwResCli:Load() )}, oDlg:bRClicked,,, )

   EndDetMenu()

   ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( nOrdPedPrv ) )

   ( dbfAlbPrvL )->( OrdScope( 0, nil ) )
   ( dbfAlbPrvL )->( OrdScope( 1, nil ) )
   ( dbfAlbPrvL )->( OrdSetFocus( nOrdAlbPrv ) )

   ( dbfTmpRes )->( OrdScope( 0, nil ) )
   ( dbfTmpRes )->( OrdScope( 1, nil ) )
   ( dbfTmpRes )->( dbGoTop() )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION EdtRes( aTmp, aGet, dbfTmpRes, oBrw, oTot, bValid, nMode, aTmpLin )

   local oDlg
   local oGet
   local oSay

   if nMode == 1
      aTmp[ 1 ]  := aTmpLin[ 1 ]
      aTmp[ 2 ]  := aTmpLin[ 2 ]
      aTmp[ 3 ]  := aTmpLin[ 3 ]
      aTmp[ 4    ]  := aTmpLin[ 4    ]
      aTmp[ 5 ]  := aTmpLin[ 5 ]
      aTmp[ 6 ]  := aTmpLin[ 6 ]
      aTmp[ 7 ]  := aTmpLin[ 7 ]
      aTmp[ 8 ]  := aTmpLin[ 8 ]
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "reservas a pedidos de clientes", "LRESPEDCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "DFECRES" ) ) ], aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "DFECRES" ) ) ]:= u ) }, oDlg,,,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )







      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "NCAJRES" ) ) ], aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "NCAJRES" ) ) ]:= u ) }, oDlg,, cPicUnd,, "N/W*",,,,, .F.,, {|nKey,nFlags,Self| ( oSay:Refresh() ) }, .F., .T.,,,,,, nil,,, )







      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "NUNDRES" ) ) ], aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "NUNDRES" ) ) ]:= u ) }, oDlg,, cPicUnd,, "N/W*",,,,, .F.,, {|nKey,nFlags,Self| ( oSay:Refresh() ) }, .F., .T.,,,,,, nil,,, )





      oSay := TSay():ReDefine( 130, {|| NotCaja( aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "NCAJRES" ) ) ] ) * aTmp[ ( D():PedidosClientesReservas( nView ) )->( fieldPos( "NUNDRES" ) ) ]}, oDlg, cPicUnd, "N/W*",, .F.,, .F., .F., )











        TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpRes, oBrw, nMode ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh(), oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpRes, oBrw, nMode ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh(), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( if( !lUseCaj(), oGet:hide(), ) )}, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function EdtDoc( aTmp, aGet, dbfPedCliD, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de pedidos de clientes", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | " + "*.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function PrnSerie()

    local oDlg
   local oFmtDoc
   local cFmtDoc     := cFormatoDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) )
   local oSayFmt
   local cSayFmt
   local oSerIni
   local oSerFin
   local cSerIni     := (D():PedidosClientes( nView ))->cSerPed
   local cSerFin     := (D():PedidosClientes( nView ))->cSerPed
   local nDocIni     := (D():PedidosClientes( nView ))->nNumPed
   local nDocFin     := (D():PedidosClientes( nView ))->nNumPed
   local cSufIni     := (D():PedidosClientes( nView ))->cSufPed
   local cSufFin     := (D():PedidosClientes( nView ))->cSufPed
   local dFecDesde   := CtoD( "01/01/" + Str( Year( Date() ) ) )
   local dFecHasta   := Date()
   local oRango
   local nRango      := 1
   local oPrinter
   local cPrinter    := ImpresoraDefectoUsuario()
   local lCopiasPre  := .T.
   local lInvOrden   := .F.
   local oNumCop
   local nNumCop     := if( nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) )

   if Empty( cFmtDoc )
      cFmtDoc        := cSelPrimerDoc( "PC" )
   end

   cSayFmt           := cNombreDoc( cFmtDoc )

   oDlg = TDialog():New(,,,, "Imprimir series de pedidos", "IMPSERIES",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



       oRango := TRadMenu():Redefine( { | u | If( PCount()==0, nRango, nRango:= u ) }, oDlg,, { 201, 202 },,,,, .F.,, )










       oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










       oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






       TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )






       TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )





       TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





       TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





    TGetHlp():ReDefine( 210, { | u | If( PCount()==0, dFecDesde, dFecDesde:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, dFecHasta, dFecHasta:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )



       TCheckBox():ReDefine( 500, { | u | If( PCount()==0, lInvOrden, lInvOrden:= u ) }, oDlg,,,,,,, .F.,, .F. )



       TCheckBox():ReDefine( 170, { | u | If( PCount()==0, lCopiasPre, lCopiasPre:= u ) }, oDlg,,,,,,, .F.,, .F. )









       oNumCop := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, nNumCop, nNumCop:= u ) }, oDlg,, "999999999", {||    nNumCop > 0},,,,,, .F., {||     !lCopiasPre},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )







       oFmtDoc := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cFmtDoc, cFmtDoc:= u ) }, oDlg,,, {||    ( cDocumento( oFmtDoc, oSayFmt, D():Documentos( nView ) ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oFmtDoc, oSayFmt, "PC" ) )}, nil, "LUPA",, )





       oSayFmt := TGetHlp():ReDefine( 91, { | u | If( PCount()==0, cSayFmt, cSayFmt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

       TBtnBmp():ReDefine( 92, "gc_document_text_pencil_12",,,,,{|| EdtDocumento( cFmtDoc ) }, oDlg, .F., , .F.,  )




       oPrinter := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cPrinter, cPrinter:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

       TBtnBmp():ReDefine( 161, "gc_printer2_check_16",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .F., , .F.,  )





       TButton():ReDefine( 1, {||(  StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




       TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

       oDlg:AddFastKey( 116, {|| StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) } )

       oDlg:bStart := { || oSerIni:SetFocus() }

       oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

       oWndBrw:oBrw:refresh()

RETURN NIL



STATIC FUNCTION StartPrint( cFmtDoc, cDocIni, cDocFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta )

       local nCopyClient
       local nRecno
       local nOrdAnt

       oDlg:disable()

       if nRango == 1

           nRecno      := (D():PedidosClientes( nView ))->( recno() )
           nOrdAnt     := (D():PedidosClientes( nView ))->( OrdSetFocus("NNUMPED") )

           if !lInvOrden

              ( D():PedidosClientes( nView ) )->( dbSeek( cDocIni, .T. ) )



              while ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed >= cDocIni .AND.     ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed <= cDocFin .AND.     !( D():PedidosClientes( nView ) )->( eof() )

                    lChgImpDoc( D():PedidosClientes( nView ) )

                 if lCopiasPre

                    nCopyClient := if( nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) )

                    GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nCopyClient )

                 else

                    GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nNumCop )

                 end

                 ( D():PedidosClientes( nView ) )->( dbSkip() )

              end

           else

              ( D():PedidosClientes( nView ) )->( DbSeek( cDocFin ) )



              while ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed >= cDocIni .AND.    ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed <= cDocFin .AND.    !( D():PedidosClientes( nView ) )->( Bof() )

                    lChgImpDoc( D():PedidosClientes( nView ) )

                 if lCopiasPre

                    nCopyClient := if( nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) )

                    GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nCopyClient )

                 else

                    GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nNumCop )

                 end

                 ( D():PedidosClientes( nView ) )->( dbSkip( -1 ) )

              end

           end

       else

           nRecno      := (D():PedidosClientes( nView ))->( recno() )
           nOrdAnt     := (D():PedidosClientes( nView ))->( OrdSetFocus( "DFECPED" ) )

           if !lInvOrden

              ( D():PedidosClientes( nView ) )->( dbGoTop() )

              while !( D():PedidosClientes( nView ) )->( eof() )

                if ( D():PedidosClientes( nView ) )->dFecPed >= dFecDesde .AND. ( D():PedidosClientes( nView ) )->dFecPed <= dFecHasta

                    lChgImpDoc( D():PedidosClientes( nView ) )

                     if lCopiasPre

                        nCopyClient := if( nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) )

                        GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nCopyClient )

                     else

                        GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nNumCop )

                     end

                 end

                 ( D():PedidosClientes( nView ) )->( dbSkip() )

              end

           else

              ( D():PedidosClientes( nView ) )->( dbGobottom() )

              while !( D():PedidosClientes( nView ) )->( Bof() )

                if ( D():PedidosClientes( nView ) )->dFecPed >= dFecDesde .AND. ( D():PedidosClientes( nView ) )->dFecPed <= dFecHasta

                    lChgImpDoc( D():PedidosClientes( nView ) )

                     if lCopiasPre

                        nCopyClient := if( nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosClientes( nView ) )->cCodCli, D():Clientes( nView ), "CopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) ) )

                        GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nCopyClient )

                     else

                        GenPedCli( 1, "Imprimiendo documento : " + ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, cFmtDoc, cPrinter, nNumCop )

                     end

                 end

                 ( D():PedidosClientes( nView ) )->( dbSkip( -1 ) )

              end

           end

       end

       ( D():PedidosClientes( nView ) )->( dbGoTo( nRecNo ) )
       ( D():PedidosClientes( nView ) )->( ordSetFocus( nOrdAnt ) )

       oDlg:enable()

RETURN NIL







STATIC FUNCTION DelDetalle( cNumPed )

   If( cNumPed == nil, cNumPed := ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView )  )->cSufPed, ) ;







   if ( D():PedidosClientesLineas( nView ) )->( dbSeek( cNumPed ) )
      while ( D():PedidosClientesLineas( nView ) )->cSerPed + Str( ( D():PedidosClientesLineas( nView ) )->nNumPed ) + ( D():PedidosClientesLineas( nView ) )->cSufPed == cNumPed
         if dbLock( D():PedidosClientesLineas( nView ) )
            ( D():PedidosClientesLineas( nView ) )->( dbDelete() )
            ( D():PedidosClientesLineas( nView ) )->( dbUnLock() )
         end
         ( D():PedidosClientesLineas( nView ) )->( dbSkip() )
      end
   end



   if ( D():PedidosClientesReservas( nView ) )->( dbSeek( cNumPed ) )
      while ( D():PedidosClientesReservas( nView ) )->cSerPed + Str( ( D():PedidosClientesReservas( nView ) )->nNumPed ) + ( D():PedidosClientesReservas( nView ) )->cSufPed == cNumPed
         if dbLock( D():PedidosClientesReservas( nView ) )
            ( D():PedidosClientesReservas( nView ) )->( dbDelete() )
            ( D():PedidosClientesReservas( nView ) )->( dbUnLock() )
         end
         ( D():PedidosClientesReservas( nView ) )->( dbSkip() )
      end
   end

RETURN NIL



STATIC FUNCTION ChgSta( oBrw )

   local nRec
   local nRecAlb
   local cNumPed
   local lQuit
   local nOrdAnt

   if ApoloMsgNoYes( "Al cambiar el estado perderá la referencia a cualquier documento que esté asociado.", "¿Desea cambiarlo?" )

      for each nRec in ( oBrw:aSelected )

         ( D():PedidosClientes( nView ) )->( dbGoTo( nRec ) )

         lQuit                         := .F.
         cNumPed                       := ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed





         if dbLock( D():PedidosClientes( nView ) )

            if ( D():PedidosClientes( nView ) )->nEstado == 1
               ( D():PedidosClientes( nView ) )->nEstado := 3
            else
               lQuit                   := .F.
               ( D():PedidosClientes( nView ) )->nEstado := 1
            end

            ( D():PedidosClientes( nView ) )->lSndDoc  := !( D():PedidosClientes( nView ) )->lSndDoc
            ( D():PedidosClientes( nView ) )->dFecCre  := Date()
            ( D():PedidosClientes( nView ) )->cTimCre  := Time()

            ( D():PedidosClientes( nView ) )->( dbRUnlock() )

         end

         if lQuit





            nRecAlb  := ( dbfAlbCliT )->( RecNo() )
            nOrdAnt  := ( dbfAlbCliT )->( OrdSetFocus( "cNumPed" ) )

            while ( dbfAlbCliT )->( dbSeek( cNumPed ) )  .AND. !( dbfAlbCliT )->( Eof() )

                if dbLock( dbfAlbCliT )
                   ( dbfAlbCliT )->cNumPed    := ""
                   ( dbfAlbCliT )->( dbUnLock() )
                end

            end

            ( dbfAlbCliT )->( OrdSetFocus( nOrdAnt ) )
            ( dbfAlbCliT )->( dbGoTo( nRecAlb ) )





            nRecAlb  := ( dbfAlbCliL )->( RecNo() )
            nOrdAnt  := ( dbfAlbCliL )->( OrdSetFocus( "cNumPed" ) )

            while ( dbfAlbCliL )->( dbSeek( cNumPed ) ) .AND. !( dbfAlbCliL )->( eof() )

               if dbLock( dbfAlbCliL )
                  ( dbfAlbCliL )->cNumPed    := ""
                  ( dbfAlbCliL )->( dbUnLock() )
               end

            end

            ( dbfAlbCliL )->( OrdSetFocus( nOrdAnt ) )
            ( dbfAlbCliL )->( dbGoTo( nRecAlb ) )

         end

      next

   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL



static function lGenPedCli( oBrw, oBtn, nDevice )

   local bAction

   If( nDevice == nil, nDevice := 1, ) ;

   if Empty( oBtn )
      return nil
   end

   IF !( D():Documentos( nView ) )->( dbSeek( "PC" ) )







         oWndBrw:NewAt( "GC_DOCUMENT_WHITE_",,, {||( msgStop( "No hay facturas de clientes predefinidas" ) )}, "No hay documentos",,,, 4, oBtn, .F. )

   ELSE

      WHILE ( D():Documentos( nView ) )->cTipo == "PC" .AND. !( D():Documentos( nView ) )->( eof() )

         bAction  := bGenFac( nDevice, "Imprimiendo pedidos de clientes", ( D():Documentos( nView ) )->Codigo )

         oWndBrw:NewAt( "gc_document_white_", , , bAction, Rtrim( ( D():Documentos( nView ) )->cDescrip ) , , , , , oBtn )

         ( D():Documentos( nView ) )->( dbSkip() )

      end

   end

   SysRefresh()

return nil



static function bGenFac( nDevice, cTitle, cCodDoc )

   local bGen
   local nDev  := by( nDevice )
   local cTit  := by( cTitle  )
   local cCod  := by( cCodDoc )

   if nDev == 1
      bGen     := {|| GenPedCli( nDev, cTit, cCod ) }
   else
      bGen     := {|| GenPedCli( nDev, cTit, cCod ) }
   end

return ( bGen )



STATIC FUNCTION RecPedCli( aTmpPed )

   local nDtoAge
   local nImpAtp  := 0
   local nImpOfe  := 0
   local nRecno
   local cCodFam
   local hAtipica




   if !ApoloMsgNoYes(   "¡Atención!,"                                      + Chr(13)+Chr(10) +  "todos los precios se recalcularán en función de"  + Chr(13)+Chr(10) +  "los valores en las bases de datos.", "¿Desea proceder?" )
      return nil
   end

   nRecno         := ( dbfTmpLin )->( RecNo() )

   ( D():Articulos( nView ) )->( ordSetFocus( "Codigo" ) )

   ( dbfTmpLin )->( dbGotop() )
   while !( dbfTmpLin )->( eof() )





      if ( D():Articulos( nView ) )->( dbSeek( ( dbfTmpLin )->cRef ) )

         if aTmpPed[ 50 ] <= 2
            ( dbfTmpLin )->nIva     := nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )
            ( dbfTmpLin )->nReq     := nReq( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )
         end





         if !Empty( ( D():Articulos( nView ) )->cCodImp )
            ( dbfTmpLin )->cCodImp  := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp, aTmpPed[ 51 ], ( dbfTmpLin )->nIva )
         end





         if !Empty( ( D():Articulos( nView ) )->cCodImp )
            ( dbfTmpLin )->cCodImp  := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp )
         end





         ( dbfTmpLin )->nPreDiv  := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp )





         ( dbfTmpLin )->nPvpRec  := ( D():Articulos( nView ) )->PvpRec
         ( dbfTmpLin )->nCosDiv  := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpPed[ 6 ] )





         ( dbfTmpLin )->nPntVer  := ( D():Articulos( nView ) )->nPntVer1





         do case




         case !Empty( aTmpPed[ 16 ] )

            cCodFam     := ( dbfTmpLin )->cCodFam

            nImpOfe     := RetPrcTar( ( dbfTmpLin )->cRef, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL, ( dbfTmpLin )->nTarLin )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nPreDiv  := nImpOfe
            end

            nImpOfe     := RetPctTar( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nDto     := nImpOfe
            end

            nImpOfe     := RetComTar( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpPed[ 14 ], dbfTarPreL, dbfTarPreS )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nComAge  := nImpOfe
            end






            nImpOfe     := RetDtoPrm( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpPed[ 5 ], dbfTarPreL )

            if nImpOfe  <> 0
               ( dbfTmpLin )->nDtoPrm  := nImpOfe
            end





            nDtoAge     := RetDtoAge( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpPed[ 5 ], aTmpPed[ 14 ],  dbfTarPreL, dbfTarPreS )

            if nDtoAge  <> 0
               ( dbfTmpLin )->nComAge  := nDtoAge
            end

         end





         hAtipica := hAtipica( hValue( dbfTmpLin, aTmpPed ) )

         if !Empty( hAtipica )

            if hhaskey( hAtipica, "nTarifaFamilia" ) .AND. hAtipica[ "nTarifaFamilia" ] > 0
               ( dbfTmpLin )->nPreDiv  := nRetPreArt( hAtipica[ "nTarifaFamilia" ], aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp )
            end

            if hhaskey( hAtipica, "nImporte" )
                if hAtipica[ "nImporte" ] <> 0
                   ( dbfTmpLin )->nPreDiv := hAtipica[ "nImporte" ]
               end
            end

            if hhaskey( hAtipica, "nDescuentoPorcentual" )
                if hAtipica[ "nDescuentoPorcentual" ] <> 0
                    ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
                end
            end

            if hhaskey( hAtipica, "nDescuentoPromocional" )
                if hAtipica[ "nDescuentoPromocional" ] <> 0
                    ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
                end
            end

            if hhaskey( hAtipica, "nDescuentoLineal" )
                if hAtipica[ "nDescuentoLineal" ] <> 0
                    ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
                end
            end

            if hhaskey( hAtipica, "nComisionAgente" )
                if hAtipica[ "nComisionAgente" ] <> 0
                    ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
                end
            end

         end





         nImpOfe     := nImpOferta( ( dbfTmpLin )->cRef, aTmpPed[ 6 ], aTmpPed[ 64 ], ( dbfTmpLin )->nUniCaja, aTmpPed[ 5 ], dbfOferta, ( dbfTmpLin )->nTarLin, nil, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )
         if nImpOfe  <> 0
            ( dbfTmpLin )->nPreDiv     := nCnv2Div( nImpOfe, cDivEmp(), aTmpPed[ 46 ] )
         end





         nImpOfe     := nDtoOferta( ( dbfTmpLin )->cRef, aTmpPed[ 6 ], aTmpPed[ 64 ], ( dbfTmpLin )->nUniCaja, aTmpPed[ 5 ], dbfOferta, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )
         if nImpOfe  <> 0
            ( dbfTmpLin )->nDtoPrm  := nImpOfe
         end

      end

      ( dbfTmpLin )->( dbSkip() )

   end

   ( dbfTmpLin )->( dbGoTo( nRecno ) )

return nil



Static Function lCheckGenerado( cSerie, nNumero, cSufijo, cCodArt, cCodPr1, cCodPr2, cDetalle )

   local lCheck   := .T.
   local nOrdAnt  := ( D():PedidosProveedores( nView ) )->( OrdSetFocus( "CPEDCLI" ) )
   local nOrdAnt2 := ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( "NNUMPED" ) )

   ( D():PedidosProveedores( nView ) )->( dbGoTop() )

   if ( D():PedidosProveedores( nView ) )->( dbSeek( cSerie + Str( nNumero ) + cSufijo ) )


      while ( D():PedidosProveedores( nView ) )->cNumPedCli == cSerie + Str( nNumero ) + cSufijo .AND. !( D():PedidosProveedores( nView ) )->( eof() )

          if ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed ) )


          while ( D():PedidosProveedores( nView ) )->cSerPed + str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed == ( D():PedidosProveedoresLineas( nView ) )->cSerPed + str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed .AND. !( D():PedidosProveedoresLineas( nView ) )->( eof() )

                  if ( D():PedidosProveedoresLineas( nView ) )->cRef + ( D():PedidosProveedoresLineas( nView ) )->cCodPr1 + ( D():PedidosProveedoresLineas( nView ) )->cCodPr2 + ( D():PedidosProveedoresLineas( nView ) )->cDetalle == cCodArt + cCodPr1 + cCodPr2 + cDetalle
                     lCheck   := .F.
                  end

                  ( D():PedidosProveedoresLineas( nView ) )->( dbSkip() )

              end

          end

          ( D():PedidosProveedores( nView ) )->( dbSkip() )

      end

   end

   ( D():PedidosProveedores( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAnt2 ) )
   ( D():PedidosProveedores( nView ) )->( dbGoTop() )

return lCheck



static function CambiaAnulado( aGet, aTmp )

   if aTmp[55]

      aGet[56]:cText( GetSysDate() )
      aTmp[57]   := ""

   else

      aGet[56]:cText( Ctod( "" ) )
      aTmp[57]   := ""

   end

return .T.



Static Function DesgPnt( cCodArt, aTmp, nTarifa, oPreDiv, oCosDiv, nMode )

   local oDlg
   local oPuntos
   local oValorPunto
   local oDtoPnt
   local oIncPnt
   local oImporte
   local nPuntos     := 0
   local nValorPunto := 0
   local nDtoPnt     := 0
   local nIncPnt     := 0





   if Empty( cCodArt )
      MsgInfo( "Debe seleccinar un artículo", "Código vacío" )
      return .F.
   end





   nPuntos           := aTmp[ 66 ]
   nValorPunto       := aTmp[ 67 ]
   nDtoPnt           := aTmp[ 68 ]
   nIncPnt           := aTmp[ 69 ]

   oDlg = TDialog():New(,,,, "Desglose de puntos", "DESGPUNTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







   oPuntos := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, nPuntos, nPuntos:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )







   oValorPunto := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, nValorPunto, nValorPunto:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )









   oDtoPnt := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nDtoPnt, nDtoPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )









   oIncPnt := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, nIncPnt, nIncPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )





   oImporte := TSay():ReDefine( 240, {|| nCalculoPuntos( nPuntos, nValorPunto, nDtoPnt, nIncPnt )}, oDlg, cPouDiv, "N/W*",, .F.,, .F., .F., )





   TButton():ReDefine( 500, {||( EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, D():Articulos( nView ), nDouDiv ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




   TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, D():Articulos( nView ), nDouDiv ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      aTmp[ 66 ]     := nPuntos
      aTmp[ 67 ]     := nValorPunto
      aTmp[ 68 ]     := nDtoPnt
      aTmp[ 69 ]     := nIncPnt

      oCosDiv:cText( oImporte:VarGet() )
      oCosDiv:Refresh()

   end

Return ( .T. )



Static Function PedCliNotas()

   local cObserv  := ""
   local aData    := {}

   aAdd( aData, "Pedido " + ( D():PedidosClientes( nView ) )->cSerPed + "/" + AllTrim( Str( ( D():PedidosClientes( nView ) )->nNumPed ) ) + "/" + Alltrim( ( D():PedidosClientes( nView ) )->cSufPed ) + " de " + Rtrim( ( D():PedidosClientes( nView ) )->cNomCli ) )
   aAdd( aData, "09" )
   aAdd( aData, ( D():PedidosClientes( nView ) )->cCodCli )
   aAdd( aData, ( D():PedidosClientes( nView ) )->cNomCli )
   aAdd( aData, ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed )

   if ( D():Clientes( nView ) )->( dbSeek( ( D():PedidosClientes( nView ) )->cCodCli ) )

      if !Empty( ( D():Clientes( nView ) )->cPerCto )
         cObserv  += Rtrim( ( D():Clientes( nView ) )->cPerCto ) + Space( 1 )
      end

      if !Empty( ( D():Clientes( nView ) )->Telefono )
         cObserv  += "Télefono : " + Rtrim( ( D():Clientes( nView ) )->Telefono ) + Space( 1 )
      end

      if !Empty( ( D():Clientes( nView ) )->Movil )
         cObserv  += "Móvil : " + Rtrim( ( D():Clientes( nView ) )->Movil ) + Space( 1 )
      end

      if !Empty( ( D():Clientes( nView ) )->Fax )
         cObserv  += "Fax : " + Rtrim( ( D():Clientes( nView ) )->Fax ) + Space( 1 )
      end

   end

   aAdd( aData, cObserv )

   GenerarNotas( aData )

Return ( nil )



STATIC FUNCTION DupSerie( oWndBrw )

   local oDlg
   local oSerIni
   local oSerFin
   local oTxtDup
   local nTxtDup     := 0
   local nRecno      := ( D():PedidosClientes( nView ) )->( Recno() )
   local nOrdAnt     := ( D():PedidosClientes( nView ) )->( OrdSetFocus( 1 ) )
   local oDesde      := TDesdeHasta():Init( ( D():PedidosClientes( nView ) )->cSerPed, ( D():PedidosClientes( nView ) )->nNumPed, ( D():PedidosClientes( nView ) )->cSufPed, GetSysDate() )
   local lCancel     := .F.
   local oBtnAceptar
   local oBtnCancel
   local oFecDoc
   local cFecDoc     := GetSysDate()




   oDlg = TDialog():New(,,,, "Duplicar series de pedidos", "DUPSERDOC",, .F.,,,,, oWndBrw, .F.,,,,,, .F.,, "oDlg", nil, )



   TRadMenu():Redefine( { | u | If( PCount()==0, oDesde:nRadio, oDesde:nRadio:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, oDesde:cSerieInicio, oDesde:cSerieInicio:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieInicio >= "A" .AND. oDesde:cSerieInicio <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, oDesde:cSerieFin, oDesde:cSerieFin:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieFin >= "A" .AND. oDesde:cSerieFin <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, oDesde:nNumeroInicio, oDesde:nNumeroInicio:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, oDesde:nNumeroFin, oDesde:nNumeroFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, oDesde:cSufijoInicio, oDesde:cSufijoInicio:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, oDesde:cSufijoFin, oDesde:cSufijoFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oDesde:dFechaInicio, oDesde:dFechaInicio:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, oDesde:dFechaFin, oDesde:dFechaFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )




   oFecDoc := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cFecDoc, cFecDoc:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   oBtnAceptar := TButton():ReDefine( 1, {||( DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( lCancel := .T., oDlg:end() )}, oDlg,,, .F.,,,, .T. )





   oTxtDup := TApoloMeter():ReDefine( 160, { | u | If( PCount()==0, nTxtDup, nTxtDup:= u ) }, ( D():PedidosClientes( nView ) )->( OrdKeyCount() ), oDlg, .F.,,, .T.,,,, )

      oDlg:AddFastKey( 116, {|| DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( lCancel )},,, oDlg:bRClicked,,, )

   ( D():PedidosClientes( nView ) )->( dbGoTo( nRecNo ) )
   ( D():PedidosClientes( nView ) )->( ordSetFocus( nOrdAnt ) )

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



STATIC FUNCTION DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, lCancel, cFecDoc )

   local nOrd
   local nDuplicados    := 0
   local nProcesed      := 0

   oBtnAceptar:Hide()
   oBtnCancel:bAction   := {|| lCancel := .T. }

   if oDesde:nRadio == 1

      nOrd              := ( D():PedidosClientes( nView ) )->( OrdSetFocus( "nNumPed" ) )

      ( D():PedidosClientes( nView ) )->( dbSeek( oDesde:cNumeroInicio(), .T. ) )

      while !lCancel .AND. ( D():PedidosClientes( nView ) )->( !eof() )






         if ( D():PedidosClientes( nView ) )->cSerPed >= oDesde:cSerieInicio  .AND. ( D():PedidosClientes( nView ) )->cSerPed <= oDesde:cSerieFin     .AND. ( D():PedidosClientes( nView ) )->nNumPed >= oDesde:nNumeroInicio .AND. ( D():PedidosClientes( nView ) )->nNumPed <= oDesde:nNumeroFin    .AND. ( D():PedidosClientes( nView ) )->cSufPed >= oDesde:cSufijoInicio .AND. ( D():PedidosClientes( nView ) )->cSufPed <= oDesde:cSufijoFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( D():PedidosClientes( nView ) )->cSerPed + "/" + Alltrim( Str( ( D():PedidosClientes( nView ) )->nNumPed ) ) + "/" + ( D():PedidosClientes( nView ) )->cSufPed

            DupPedido( cFecDoc )

         end

         ( D():PedidosClientes( nView ) )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( D():PedidosClientes( nView ) )->( OrdSetFocus( nOrd ) )

   else

      nOrd              := ( D():PedidosClientes( nView ) )->( OrdSetFocus( "dFecPed" ) )

      ( D():PedidosClientes( nView ) )->( dbSeek( oDesde:dFechaInicio, .T. ) )

      while !lCancel .AND. ( D():PedidosClientes( nView ) )->( !eof() )


         if ( D():PedidosClientes( nView ) )->dFecPed >= oDesde:dFechaInicio  .AND. ( D():PedidosClientes( nView ) )->dFecPed <= oDesde:dFechaFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( D():PedidosClientes( nView ) )->cSerPed + "/" + Alltrim( Str( ( D():PedidosClientes( nView ) )->nNumPed ) ) + "/" + ( D():PedidosClientes( nView ) )->cSufPed

            DupPedido( cFecDoc )

         end

         ( D():PedidosClientes( nView ) )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( D():PedidosClientes( nView ) )->( OrdSetFocus( nOrd ) )

   end

   lCancel              := .T.

   oBtnAceptar:Show()

   if lCancel
      msgStop( "Total de registros duplicados : " + Str( nDuplicados ), "Proceso cancelado" )
   else
      msgInfo( "Total de registros duplicados : " + Str( nDuplicados ), "Proceso finalizado" )
   end

RETURN ( oDlg:End() )



STATIC FUNCTION PedRecDup( cDbf, xField1, xField2, xField3, lCab, cFecDoc )

   local nRec           := ( cDbf )->( Recno() )
   local aTabla         := {}
   local nOrdAnt

   If( lCab == nil, lCab := .F., ) ;

   aTabla               := DBScatter( cDbf )
   aTabla[ 1 ]   := xField1
   aTabla[ 2 ]   := xField2
   aTabla[ 3 ]   := xField3

   if lCab

      aTabla[ 4     ]  := cCurSesion()
      if !Empty( cFecDoc )
         aTabla[ 5  ]  := cFecDoc
      end
      aTabla[ 18     ]  := Application():CodigoCaja()
      aTabla[ 21     ]  := Ctod("")
      aTabla[ 45     ]  := Space( 12 )
      aTabla[ 48     ]  := .T.
      aTabla[ 56     ]  := .F.
      aTabla[ 57     ]  := Auth():Codigo()
      aTabla[ 58     ]  := GetSysDate()
      aTabla[ 59     ]  := Time()
      aTabla[ 65  ]  := .F.
      aTabla[ 66     ]  := Ctod("")
      aTabla[ 67     ]  := Space( 5 )
      aTabla[ 68     ]  := Application():CodigoDelegacion()
      aTabla[ 22     ]  := 1

      nOrdAnt                 := ( cDbf )->( OrdSetFocus( "NNUMPED" ) )

   end

   if dbDialogLock( cDbf, .T. )
      aEval( aTabla, { | uTmp, n | ( cDbf )->( fieldPut( n, uTmp ) ) } )
      ( cDbf )->( dbUnLock() )
   end

   if lCab
      ( cDbf )->( OrdSetFocus( nOrdAnt ) )
   end

   ( cDbf )->( dbGoTo( nRec ) )

RETURN ( .T. )



STATIC FUNCTION DupPedido( cFecDoc )

   local nNewNumPed  := 0



   nNewNumPed  := nNewDoc( ( D():PedidosClientes( nView ) )->cSerPed, D():PedidosClientes( nView ), "NPEDCLI", , D():Contadores( nView ) )



   PedRecDup( D():PedidosClientes( nView ), ( D():PedidosClientes( nView ) )->cSerPed, nNewNumPed, ( D():PedidosClientes( nView ) )->cSufPed, .T., cFecDoc )



   if ( D():PedidosClientesLineas( nView ) )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) )


      while D():PedidosClientesId( nView ) == D():PedidosClientesLineasId( nView ) .AND.  !( D():PedidosClientesLineas( nView ) )->( Eof() )

            PedRecDup( D():PedidosClientesLineas( nView ), ( D():PedidosClientes( nView ) )->cSerPed, nNewNumPed, ( D():PedidosClientes( nView ) )->cSufPed, .F. )

         ( D():PedidosClientesLineas( nView ) )->( dbSkip() )

      end

   end



   if ( dbfPedCliD )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) )


      while ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed == ( dbfPedCliD )->cSerPed + Str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed .AND.  !( dbfPedCliD )->( Eof() )

            PedRecDup( dbfPedCliD, ( D():PedidosClientes( nView ) )->cSerPed, nNewNumPed, ( D():PedidosClientes( nView ) )->cSufPed, .F. )

         ( dbfPedCliD )->( dbSkip() )

      end

   end

RETURN ( .T. )



STATIC FUNCTION SetDialog( aGet, oSayGetRnt, oGetRnt )

   aGet[ 22 ]:Refresh()

   if RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )

      if !Empty( oSayGetRnt )
         oSayGetRnt:Hide()
      end

      if !Empty( oGetRnt )
         oGetRnt:Hide()
      end

   end

Return .T.



STATIC FUNCTION ValidaMedicion( aTmp, aGet )

   local cNewUndMed  := aGet[ 22 ]:VarGet





   if ( Empty( cOldUndMed ) .OR. cOldUndMed <> cNewUndMed )

      if oUndMedicion:oDbf:Seek( aTmp[ 22 ] )

         if oUndMedicion:oDbf:nDimension >= 1 .AND. !Empty( oUndMedicion:oDbf:cTextoDim1 )
            if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( ( D():Articulos( nView ) )->nLngArt )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
            else
               aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := ( D():Articulos( nView ) )->nLngArt
            end
         else
            if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            else
               aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 2 .AND. !Empty( oUndMedicion:oDbf:cTextoDim2 )
            if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( ( D():Articulos( nView ) )->nAltArt )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
            else
               aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := ( D():Articulos( nView ) )->nAltArt
            end

         else
            if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            else
                 aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 3 .AND. !Empty( oUndMedicion:oDbf:cTextoDim3 )
            if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( ( D():Articulos( nView ) ) ->nAncArt )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
            else
               aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := ( D():Articulos( nView ) )->nAncArt
            end
         else
            if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
               aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            else
               aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := 0
            end
         end

      else

         if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
            aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
         end

         if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
            aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
         end

         if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
            aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
         end

      end

      cOldUndMed := cNewUndMed

   end

RETURN .T.



Static Function ChangeTarifa( aTmp, aGet, aTmpPed )

   local nPrePro  := 0

   nPrePro     := nPrePro( aTmp[ 4 ], aTmp[ 5 ], aTmp[ 7 ], aTmp[ 6 ], aTmp[ 8 ], aTmp[ 81 ], aTmpPed[ 51 ], dbfArtDiv, aTmpPed[ 16 ] )

   if nPrePro == 0
      nPrePro  := nRetPreArt( aTmp[ 81 ], aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp )
   end

   if !Empty( aTmpPed[ 16 ] )
      nPrePro  := RetPrcTar( aTmp[ 4 ], aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dbfTarPreL, aTmp[ 81 ] )
   end

   if nPrePro <> 0
      aGet[ 14 ]:cText( nPrePro )
   end

Return .T.



STATIC function Calculaunidades( nCantidad, nStockDis, nStockMinMax )

   local nUnidades

   do case
      case nStockDis < 0
         nUnidades   := ( 0 - nStockDis ) + nCantidad + nStockMinMax
      case nStockDis == 0
         nUnidades   := nCantidad + nStockMinMax
      case nStockDis > 0
         nUnidades   := ( nCantidad - nStockDis ) + nStockMinMax
   end

   if nUnidades < 0
      nUnidades      := 0
   end

return nUnidades



STATIC FUNCTION SelSend( oBrw )

    local nRecAct
    local nRecOld         := ( D():PedidosClientes( nView ) )->( Recno() )

       for each nRecAct in ( oBrw:aSelected )

          ( D():PedidosClientes( nView ) )->( dbGoTo( nRecAct ) )

           if dbDialogLock( D():PedidosClientes( nView ) )
              ( D():PedidosClientes( nView ) )->lPdtCrg := !( D():PedidosClientes( nView ) )->lPdtCrg
              ( D():PedidosClientes( nView ) )->( dbUnLock() )
           end

    next

   ( D():PedidosClientes( nView ) )->( dbGoTo( nRecOld ) )

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL



Static Function loadComisionAgente( aTmp, aGet, aTmpPed )

   local nComisionAgenteTarifa

   nComisionAgenteTarifa         := nComisionAgenteTarifa( aTmpPed[ 14 ], aTmp[ 81 ], nView )
   if nComisionAgenteTarifa == 0
      nComisionAgenteTarifa      := aTmpPed[ 43 ]
   end

   if !empty( aGet[ 19 ] )
      aGet[ 19 ]:cText( nComisionAgenteTarifa )
   else
      aTmp[ 19 ]        := nComisionAgenteTarifa
   end

return .T.
#line 6473 ".\.\Prg\Pedcli.prg"
Static Function DataReport( oFr )

   local np





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Pedidos", ( D():PedidosClientes( nView ) )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Pedidos", cItemsToReport( aItmPedCli() ) )

   oFr:SetWorkArea(     "Lineas de pedidos", ( D():PedidosClientesLineas( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de pedidos", cItemsToReport( aColPedCli() ) )

   oFr:SetWorkArea(     "Incidencias de pedidos", ( dbfPedCliI )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de pedidos", cItemsToReport( aIncPedCli() ) )

   oFr:SetWorkArea(     "Documentos de pedidos", ( dbfPedCliD )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de pedidos", cItemsToReport( aPedCliDoc() ) )

   oFr:SetWorkArea(     "Situaciones de pedidos", ( D():PedidosClientesSituaciones( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Situaciones de pedidos", cItemsToReport( aPedCliEst() ) )

   oFr:SetWorkArea(     "Empresa", ( dbfEmp )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Obras", ( dbfObrasT )->( Select() ) )
   oFr:SetFieldAliases( "Obras",  cItemsToReport( aItmObr() ) )

   oFr:SetWorkArea(     "Almacenes", ( dbfAlm )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Rutas", ( dbfRuta )->( Select() ) )
   oFr:SetFieldAliases( "Rutas", cItemsToReport( aItmRut() ) )

   oFr:SetWorkArea(     "Agentes", ( dbfAgent )->( Select() ) )
   oFr:SetFieldAliases( "Agentes", cItemsToReport( aItmAge() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Ofertas", ( dbfOferta )->( Select() ) )
   oFr:SetFieldAliases( "Ofertas", cItemsToReport( aItmOfe() ) )

   if !empty(oUndMedicion)
      oFr:SetWorkArea(     "Unidades de medición",  oUndMedicion:Select() )
      oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( oUndMedicion:oDbf ) )
   end

   if !empty(oNewImp)
      oFr:SetWorkArea(     "Impuestos especiales",  oNewImp:Select() )
      oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( oNewImp:oDbf ) )
   end

   oFr:SetWorkArea(     "Transportistas", oTrans:Select() )
   oFr:SetFieldAliases( "Transportistas", cObjectsToReport( oTrans:oDbf ) )







   oFr:setUserDataSet( "Impuestos pedido", "porcentajeiva;logrecargo;porcentajere;bruto;neto;impiva;impre;nivmh;ntransporte;npntver", {||np := 1}, {||np := np + 1}, {||np := np - 1}, {||np > Len( aTotIva )}, {|key| hGet( aTotIva[np], key ) } )

   oFr:SetMasterDetail( "Pedidos", "Lineas de pedidos",                 {|| ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Incidencias de pedidos",            {|| ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Documentos de pedidos",             {|| ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Empresa",                           {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Pedidos", "Clientes",                          {|| ( D():PedidosClientes( nView ) )->cCodCli } )
   oFr:SetMasterDetail( "Pedidos", "Obras",                             {|| ( D():PedidosClientes( nView ) )->cCodCli + ( D():PedidosClientes( nView ) )->cCodObr } )
   oFr:SetMasterDetail( "Pedidos", "Almacenes",                         {|| ( D():PedidosClientes( nView ) )->cCodAlm } )
   oFr:SetMasterDetail( "Pedidos", "Rutas",                             {|| ( D():PedidosClientes( nView ) )->cCodRut } )
   oFr:SetMasterDetail( "Pedidos", "Agentes",                           {|| ( D():PedidosClientes( nView ) )->cCodAge } )
   oFr:SetMasterDetail( "Pedidos", "Formas de pago",                    {|| ( D():PedidosClientes( nView ) )->cCodPgo } )
   oFr:SetMasterDetail( "Pedidos", "Usuarios",                            {|| ( D():PedidosClientes( nView ) )->cCodUsr } )
   oFr:SetMasterDetail( "Pedidos", "Transportistas",                      {|| ( D():PedidosClientes( nView ) )->cCodTrn } )

   oFr:SetMasterDetail( "Lineas de pedidos", "Artículos",               {|| SynchronizeDetails() } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Ofertas",                 {|| ( D():PedidosClientesLineas( nView ) )->cRef } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Unidades de medición",    {|| ( D():PedidosClientesLineas( nView ) )->cUnidad } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Impuestos especiales",    {|| ( D():PedidosClientesLineas( nView ) )->cCodImp } )

   oFr:SetResyncPair( "Pedidos", "Lineas de pedidos" )
   oFr:SetResyncPair( "Pedidos", "Incidencias de pedidos" )
   oFr:SetResyncPair( "Pedidos", "Documentos de pedidos" )
   oFr:SetResyncPair( "Pedidos", "Empresa" )
   oFr:SetResyncPair( "Pedidos", "Clientes" )
   oFr:SetResyncPair( "Pedidos", "Obras" )
   oFr:SetResyncPair( "Pedidos", "Almacenes" )
   oFr:SetResyncPair( "Pedidos", "Rutas" )
   oFr:SetResyncPair( "Pedidos", "Agentes" )
   oFr:SetResyncPair( "Pedidos", "Formas de pago" )
   oFr:SetResyncPair( "Pedidos", "Usuarios" )
   oFr:SetResyncPair( "Pedidos", "Transportistas" )

   oFr:SetResyncPair( "Lineas de pedidos", "Artículos" )
   oFr:SetResyncPair( "Lineas de pedidos", "Ofertas" )
   oFr:SetResyncPair( "Lineas de pedidos", "Unidades de medición" )
   oFr:SetResyncPair( "Lineas de pedidos", "Impuestos especiales" )

Return nil



Static Function SynchronizeDetails()

Return ( ( D():PedidosClientesLineas( nView ) )->cRef )



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Pedidos" )
   oFr:DeleteCategory(  "Lineas de Pedidos" )





   oFr:AddVariable(     "Pedidos",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Pedidos",             "Total pedido",                        "GetHbVar('nTotPed')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Pedidos",             "Total descuentos",                    "GetHbVar('nTotalDto')" )
   oFr:AddVariable(     "Pedidos",             "Total neto",                          "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Pedidos",             "Total primer descuento definible",    "GetHbVar('nTotUno')" )
   oFr:AddVariable(     "Pedidos",             "Total segundo descuento definible",   "GetHbVar('nTotDos')" )
   oFr:AddVariable(     "Pedidos",             "Total " + cImp(),                     "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Pedidos",             "Total RE",                            "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Pedidos",             "Total página",                        "GetHbVar('nTotPag')" )
   oFr:AddVariable(     "Pedidos",             "Total peso",                          "GetHbVar('nTotPes')" )
   oFr:AddVariable(     "Pedidos",             "Total costo",                         "GetHbVar('nTotCos')" )
   oFr:AddVariable(     "Pedidos",             "Total artículos",                     "GetHbVar('nTotArt')" )
   oFr:AddVariable(     "Pedidos",             "Total cajas",                         "GetHbVar('nTotCaj')" )
   oFr:AddVariable(     "Pedidos",             "Cuenta por defecto del cliente",      "GetHbVar('cCtaCli')" )

   oFr:AddVariable(     "Pedidos",             "Total unidades primer tipo de impuestos especiales",            "GetHbArrayVar('aIvmUno',1 )" )
   oFr:AddVariable(     "Pedidos",             "Total unidades segundo tipo de impuestos especiales",           "GetHbArrayVar('aIvmDos',1 )" )
   oFr:AddVariable(     "Pedidos",             "Total unidades tercer tipo de impuestos especiales",            "GetHbArrayVar('aIvmTre',1 )" )
   oFr:AddVariable(     "Pedidos",             "Importe del primer tipo de impuestos especiales",               "GetHbArrayVar('aIvmUno',2 )" )
   oFr:AddVariable(     "Pedidos",             "Importe del segundo tipo de impuestos especiales",              "GetHbArrayVar('aIvmDos',2 )" )
   oFr:AddVariable(     "Pedidos",             "Importe del tercer tipo de impuestos especiales",               "GetHbArrayVar('aIvmTre',2 )" )
   oFr:AddVariable(     "Pedidos",             "Total importe primer tipo de impuestos especiales",             "GetHbArrayVar('aIvmUno',3 )" )
   oFr:AddVariable(     "Pedidos",             "Total importe segundo tipo de impuestos especiales",            "GetHbArrayVar('aIvmDos',3 )" )
   oFr:AddVariable(     "Pedidos",             "Total importe tercer tipo de impuestos especiales",             "GetHbArrayVar('aIvmTre',3 )" )

   oFr:AddVariable(     "Pedidos",             "Fecha del primer vencimiento",              "GetHbArrayVar('aDatVto',1)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del segundo vencimiento",             "GetHbArrayVar('aDatVto',2)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del tercer vencimiento",              "GetHbArrayVar('aDatVto',3)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del cuarto vencimiento",              "GetHbArrayVar('aDatVto',4)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del quinto vencimiento",              "GetHbArrayVar('aDatVto',5)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del sexto vencimiento",               "GetHbArrayVar('aDatVto',6)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del septimo vencimiento",             "GetHbArrayVar('aDatVto',7)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del octavovencimiento",               "GetHbArrayVar('aDatVto',8)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del noveno vencimiento",              "GetHbArrayVar('aDatVto',9)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del decimo vencimiento",              "GetHbArrayVar('aDatVto',10)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del undecimo vencimiento",            "GetHbArrayVar('aDatVto',11)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del duodecimo vencimiento",           "GetHbArrayVar('aDatVto',12)" )

   oFr:AddVariable(     "Pedidos",             "Importe del primer vencimiento",            "GetHbArrayVar('aImpVto',1)" )
   oFr:AddVariable(     "Pedidos",             "Importe del segundo vencimiento",           "GetHbArrayVar('aImpVto',2)" )
   oFr:AddVariable(     "Pedidos",             "Importe del tercero vencimiento",           "GetHbArrayVar('aImpVto',3)" )
   oFr:AddVariable(     "Pedidos",             "Importe del cuarto vencimiento",            "GetHbArrayVar('aImpVto',4)" )
   oFr:AddVariable(     "Pedidos",             "Importe del quinto vencimiento",            "GetHbArrayVar('aImpVto',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe del sexto vencimiento",             "GetHbArrayVar('aImpVto',6)" )
   oFr:AddVariable(     "Pedidos",             "Importe del septimo vencimiento",           "GetHbArrayVar('aImpVto',7)" )
   oFr:AddVariable(     "Pedidos",             "Importe del octavo vencimiento",            "GetHbArrayVar('aImpVto',8)" )
   oFr:AddVariable(     "Pedidos",             "Importe del noveno vencimiento",            "GetHbArrayVar('aImpVto',9)" )
   oFr:AddVariable(     "Pedidos",             "Importe del decimo vencimiento",            "GetHbArrayVar('aImpVto',10)" )
   oFr:AddVariable(     "Pedidos",             "Importe del undecimo vencimiento",          "GetHbArrayVar('aImpVto',11)" )
   oFr:AddVariable(     "Pedidos",             "Importe del duodecimo vencimiento",         "GetHbArrayVar('aImpVto',12)" )

   oFr:AddVariable(     "Lineas de Pedidos",   "Detalle del artículo",                       "CallHbFunc('cDesPedCli')"  )
   oFr:AddVariable(     "Lineas de Pedidos",   "Detalle del artículo otro lenguaje",         "CallHbFunc('cDesPedCliLeng')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total unidades artículo",                    "CallHbFunc('nTotNPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Precio unitario del artículo",               "CallHbFunc('nTotUPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total línea de pedido",                      "CallHbFunc('nTotLPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total peso por línea",                       "CallHbFunc('nPesLPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total final línea del pedido",               "CallHbFunc('nTotFPedCli')" )

   oFr:AddVariable(     "Lineas de Pedidos",   "Nombre primera propiedad línea del pedido",  "CallHbFunc('nombrePrimeraPropiedadPedidosClientesLineas')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Nombre segunda propiedad línea del pedido",  "CallHbFunc('nombreSegundaPropiedadPedidosClientesLineas')" )

Return nil



STATIC FUNCTION CreateFiles( cPath )

   if !lExistTable( cPath + "PedCliT.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedCliT.Dbf", aSqlStruct( aItmPedCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedCliL.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedCliL.Dbf", aSqlStruct( aColPedCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedCliR.DBF", cLocalDriver() )
      dbCreate( cPath + "PedCliR.Dbf", aSqlStruct( aPedCliRes() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedCliI.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedCliI.Dbf", aSqlStruct( aIncPedCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedCliD.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedCliD.Dbf", aSqlStruct( aPedCliDoc() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedCliP.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedCliP.Dbf", aSqlStruct( aPedCliPgo() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedCliE.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedCliE.Dbf", aSqlStruct( aPedCliEst() ), cLocalDriver() )
   end

RETURN NIL



Static Function aPedCliRes()

   local aPedCliRes  := {}

   aAdd( aPedCliRes, { "cSerPed", "C",    1,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "nNumPed", "N",    9,  0, "",                                "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "cSufPed", "C",    2,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "cRef",    "C",   18,  0, "Referencia del artículo",         "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "cCodPr1", "C",   20,  0, "Código de la primera propiedad",  "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "cCodPr2", "C",   20,  0, "Código de la segunda propiedad",  "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "cValPr1", "C",   20,  0, "Valor de la primera propiedad",   "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "cValPr2", "C",   20,  0, "Valor de la segunda propiedad",   "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "dFecRes", "D",    8,  0, "Fecha de la reserva",             "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "nCajRes", "N",   16,  6, "Cajas reservadas",                "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "nUndRes", "N",   16,  6, "Unidades reservadas",             "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "nLote",   "N",    9,  0, "",                                "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "cLote",   "C",   64,  0, "Número del lote",                 "",                   "", "( cDbfCol )", nil } )

return ( aPedCliRes )



STATIC FUNCTION CloseFiles()

   disableAcceso()

   lPedidosWeb( D():PedidosClientes( nView ) )

   destroyFastFilter( D():PedidosClientes( nView ), .T., .T. )

   if !Empty( oFont )
      oFont:end()
   end

   if( !Empty( dbfPedCliI ), ( dbfPedCliI )->( dbCloseArea() ), )
   if( !Empty( dbfPedCliD ), ( dbfPedCliD )->( dbCloseArea() ), )
   if( !Empty( dbfPedCliP ), ( dbfPedCliP )->( dbCloseArea() ), )
   if( !Empty( dbfPreCliT ), ( dbfPreCliT )->( dbCloseArea() ), )
   if( !Empty( dbfPreCliL ), ( dbfPreCliL )->( dbCloseArea() ), )
   if( !Empty( dbfPreCliI ), ( dbfPreCliI )->( dbCloseArea() ), )
   if( !Empty( dbfPreCliD ), ( dbfPreCliD )->( dbCloseArea() ), )
   if( !Empty( dbfAlbCliT ), ( dbfAlbCliT )->( dbCloseArea() ), )
   if( !Empty( dbfAlbCliL ), ( dbfAlbCliL )->( dbCloseArea() ), )
   if( !Empty( dbfAlbCliP ), ( dbfAlbCliP )->( dbCloseArea() ), )
   if( !Empty( dbfAlbPrvT ), ( dbfAlbPrvT )->( dbCloseArea() ), )
   if( !Empty( dbfAlbPrvL ), ( dbfAlbPrvL )->( dbCloseArea() ), )
   if( !Empty( dbfTarPreL ), ( dbfTarPreL )->( dbCloseArea() ), )
   if( !Empty( dbfTarPreS ), ( dbfTarPreS )->( dbCloseArea() ), )
   if( !Empty( dbfPromoT  ), ( dbfPromoT  )->( dbCloseArea() ), )
   if( !Empty( dbfPromoL  ), ( dbfPromoL  )->( dbCloseArea() ), )
   if( !Empty( dbfPromoC  ), ( dbfPromoC  )->( dbCloseArea() ), )
   if( !Empty( dbfAgent   ), ( dbfAgent   )->( dbCloseArea() ), )
   if( !Empty( dbfCodebar ), ( dbfCodebar )->( dbCloseArea() ), )
   if( !Empty( dbfObrasT  ), ( dbfObrasT  )->( dbCloseArea() ), )
   if( !Empty( dbfOferta  ), ( dbfOferta  )->( dbCloseArea() ), )
   if( !Empty( dbfPro     ), ( dbfPro     )->( dbCloseArea() ), )
   if( !Empty( dbfKit     ), ( dbfKit     )->( dbCloseArea() ), )
   if( !Empty( dbfRuta    ), ( dbfRuta    )->( dbCloseArea() ), )
   if( !Empty( dbfAlm     ), ( dbfAlm     )->( dbCloseArea() ), )
   if( !Empty( dbfArtDiv  ), ( dbfArtDiv  )->( dbCloseArea() ), )
   if( !Empty( dbfCajT    ), ( dbfCajT    )->( dbCloseArea() ), )
   if( !Empty( dbfArtPrv  ), ( dbfArtPrv  )->( dbCloseArea() ), )
   if( !Empty( dbfDelega  ), ( dbfDelega  )->( dbCloseArea() ), )
   if( !Empty( dbfAgeCom  ), ( dbfAgeCom  )->( dbCloseArea() ), )
   if( !Empty( dbfEmp     ), ( dbfEmp     )->( dbCloseArea() ), )
   if( !Empty( dbfFacPrvL ), ( dbfFacPrvL )->( dbCloseArea() ), )
   if( !Empty( dbfRctPrvL ), ( dbfRctPrvL )->( dbCloseArea() ), )
   if( !Empty( dbfAntCliT ), ( dbfAntCliT )->( dbCloseArea() ), )
   if( !Empty( dbfFacCliT ), ( dbfFacCliT )->( dbCloseArea() ), )
   if( !Empty( dbfFacCliL ), ( dbfFacCliL )->( dbCloseArea() ), )
   if( !Empty( dbfFacRecL ), ( dbfFacRecL )->( dbCloseArea() ), )
   if( !Empty( dbfFacCliP ), ( dbfFacCliP )->( dbCloseArea() ), )
   if( !Empty( dbfTikCliT ), ( dbfTikCliT )->( dbCloseArea() ), )
   if( !Empty( dbfTikCliL ), ( dbfTikCliL )->( dbCloseArea() ), )
   if( !Empty( dbfProLin  ), ( dbfProLin  )->( dbCloseArea() ), )
   if( !Empty( dbfProMat  ), ( dbfProMat  )->( dbCloseArea() ), )
   if( !Empty( dbfCliBnc  ), ( dbfCliBnc  )->( dbCloseArea() ), )


   if( !Empty( oStock     ), oStock:end(),  )
   if( !Empty( oNewImp    ), oNewImp:end(), )
   if( !Empty( oTipArt    ), oTipArt:end(), )
   if( !Empty( oFabricante), oFabricante:end(), )
   if( !Empty( oGrpFam    ), oGrpFam:end(), )
   if( !Empty( oCentroCoste), oCentroCoste:end(), )
   if( !Empty( oTrans     ), oTrans:end(),  )

   if !Empty( oUndMedicion )
      oUndMedicion:end()
   end

   if !Empty( oDetCamposExtra )
      oDetCamposExtra:CloseFiles()
   end

   if !empty( oMailing )
      oMailing:end()
   end

   D():DeleteView( nView )

   CodigosPostales():GetInstance():CloseFiles()

   dbfPedCliI     := nil
   dbfPedCliD     := nil
   dbfPedCliP     := nil
   dbfPreCliT     := nil
   dbfPreCliL     := nil
   dbfPreCliI     := nil
   dbfPreCliD     := nil
   dbfAlbCliT     := nil
   dbfAlbCliL     := nil
   dbfAlbCliP     := nil
   dbfAlbPrvT     := nil
   dbfAlbPrvL     := nil
   dbfTarPreL     := nil
   dbfTarPreS     := nil
   dbfPromoT      := nil
   dbfPromoL      := nil
   dbfPromoC      := nil
   dbfAgent       := nil
   dbfArtPrv      := nil
   dbfCodebar     := nil
   dbfObrasT      := nil
   dbfOferta      := nil
   dbfPro         := nil
   dbfKit         := nil
   dbfRuta        := nil
   dbfAlm         := nil
   dbfArtDiv      := nil
   dbfCajT        := nil
   dbfAgeCom      := nil
   dbfEmp         := nil
   dbfFacPrvL     := nil
   dbfRctPrvL     := nil
   dbfAntCliT     := nil
   dbfFacCliT     := nil
   dbfFacCliL     := nil
   dbfFacRecL     := nil
   dbfFacCliP     := nil
   dbfTikCliT     := nil
   dbfTikCliL     := nil
   dbfProLin      := nil
   dbfProMat      := nil
   dbfCliBnc      := nil
   oTrans           := nil
   nView          := nil

   oStock         := nil
   oBandera       := nil
   oNewImp        := nil
   oTipArt        := nil
   oFabricante    := nil
   oGrpFam        := nil

   oCentroCoste   := nil

   lOpenFiles     := .F.

   oWndBrw        := nil

   EnableAcceso()

RETURN .T.



Static Function KillTrans()





   if !Empty( dbfTmpLin ) .AND. ( dbfTmpLin )->( Used() )
      ( dbfTmpLin )->( dbCloseArea() )
   end

   if !Empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )
      ( dbfTmpInc )->( dbCloseArea() )
   end

   if !Empty( dbfTmpDoc ) .AND. ( dbfTmpDoc )->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end

   if !Empty( dbfTmpRes ) .AND. ( dbfTmpRes )->( Used() )
      ( dbfTmpRes )->( dbCloseArea() )
   end

   if !Empty( dbfTmpEst ) .AND. ( dbfTmpEst )->( Used() )
      ( dbfTmpEst )->( dbCloseArea() )
   end





   dbfErase( cTmpLin )
   dbfErase( cTmpInc )
   dbfErase( cTmpDoc )
   dbfErase( cTmpRes )
   dbfErase( cTmpEst )

Return .T.



STATIC FUNCTION EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg, lActualizaWeb )

   local oError
   local oBlock
   local aTabla
   local cSerPed
   local nNumPed
   local cSufPed
   local cCodCli

   If( lActualizaWeb == nil, lActualizaWeb := .F., ) ;

   if Empty( aTmp[ 1 ] )
      aTmp[ 1 ]  := "A"
   end

   cSerPed              := aTmp[ 1 ]
   nNumPed              := aTmp[ 2 ]
   cSufPed              := aTmp[ 3 ]
   cCodCli                 := atmp[ 6 ]

   aTmp[ 48 ]     := .T.




   if !lValidaOperacion( aTmp[ 5 ] )
      Return .F.
   end

   if !lValidaSerie( aTmp[ 1 ] )
      Return .F.
   end





   if Empty( aTmp[ 6 ] )
      msgStop( "Código de cliente no puede estar vacío." )
      aGet[ 6 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 17 ] )
      msgStop( "Almacén no puede estar vacío." )
      aGet[ 17 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 18 ] )
      msgStop( "Caja no puede estar vacía." )
      aGet[ 18 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 46 ] )
      MsgStop( "No puede almacenar documento sin código de divisa." )
      aGet[ 46 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 14 ] ) .AND. lRecogerAgentes()
      msgStop( "Agente no puede estar vacío." )
      aGet[ 14 ]:SetFocus()
      return .F.
   end



   if uFieldempresa( "lServicio" )

      if empty( aTmp[ 74 ] )
         msgStop( "Fecha inicio servicio no puede estar vacía" )
         return .F.
      end

      if empty( aTmp[ 75 ] )
         msgStop( "Fecha fin servicio no puede estar vacía" )
         return .F.
      end

   end

   if ( dbfTmpLin )->( eof() )
      MsgStop( "No puede almacenar un documento sin líneas." )
      return .F.
   end



   if isAppendOrDuplicateMode( nMode )
      if isfalse( runEventScript( "PedidosClientes\beforeAppend", aTmp, nView, dbfTmpLin ) )
         return .F.
      end
   end

   if isEditMode( nMode )
      if isfalse( runEventScript( "PedidosClientes\beforeEdit", aTmp, nView, dbfTmpLin ) )
         return .F.
      end
   end

   oDlg:Disable()

   oMsgText( "Archivando" )

   oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   BeginTransaction()





   ( dbfTmpLin )->( dbClearFilter() )





   aTmp[ 58 ]     := Date()
   aTmp[ 59 ]     := Time()
   aTmp[ 28 ]        := oGetTarifa:getTarifa()
   aTmp[ 73 ]   := .F.

   do case
   case isAppendOrDuplicateMode( nMode )

      nNumPed           := nNewDoc( cSerPed, D():PedidosClientes( nView ), "NPEDCLI", , D():Contadores( nView ) )
      aTmp[ 2 ]  := nNumPed
      cSufPed           := retSufEmp()
      aTmp[ 3 ]  := cSufPed

   case isEditMode( nMode )

      if nNumPed <> 0

         while ( D():PedidosClientesLineas( nView ) )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )

            if dbLock( D():PedidosClientesLineas( nView ) )
               ( D():PedidosClientesLineas( nView ) )->( dbDelete() )
               ( D():PedidosClientesLineas( nView ) )->( dbUnLock() )
            end

         end

         while ( dbfPedCliI )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
            if dbLock( dbfPedCliI )
               ( dbfPedCliI )->( dbDelete() )
               ( dbfPedCliI )->( dbUnLock() )
            end
         end

         while ( dbfPedCliD )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
               if dbLock( dbfPedCliD )
                  ( dbfPedCliD )->( dbDelete() )
                  ( dbfPedCliD )->( dbUnLock() )
               end
         end

         while ( D():PedidosClientesPagos( nView ) )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
            if dbLock( D():PedidosClientesPagos( nView ) )
               ( D():PedidosClientesPagos( nView ) )->( dbDelete() )
               ( D():PedidosClientesPagos( nView ) )->( dbUnLock() )
            end
         end

         while ( D():PedidosClientesSituaciones( nView ) )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
            if dbLock( D():PedidosClientesSituaciones( nView ) )
               ( D():PedidosClientesSituaciones( nView ) )->( dbDelete() )
               ( D():PedidosClientesSituaciones( nView ) )->( dbUnLock() )
            end
         end

      end

   end

   if !( "PDA" $ appParamsMain() )
      oMsgProgress()
      oMsgProgress():SetRange( 0, ( dbfTmpLin )->( LastRec() ) )
   end







   ( dbfTmpLin )->( dbGoTop() )

   while ( dbfTmpLin )->( !eof() )

      if nMode == 1 .AND. dbLock( dbfTmpLin )

         ( dbfTmpLin )->nRegIva     := aTmp[ 50 ]

         if empty( ( dbfTmpLin )->dFecEnt )
            ( dbfTmpLin )->dFecEnt  := aTmp[ 75 ]
         end

         if empty( ( dbfTmpLin )->dFecSal )
            ( dbfTmpLin )->dFecSal  := aTmp[ 75 ]
         end

         ( dbfTmpLin )->lAnulado    := aTmp[ 81 ]
         ( dbfTmpLin )->dAnulado    := aTmp[ 82 ]
         ( dbfTmpLin )->mAnulado    := aTmp[ 83 ]
         ( dbfTmpLin )->nProduc     := 2
         ( dbfTmpLin )->( dbUnLock() )

      end

      if !( ( dbfTmpLin )->nUniCaja == 0 .AND. ( dbfTmpLin )->lFromAtp )
          dbPass( dbfTmpLin, D():PedidosClientesLineas( nView ), .T., cSerPed, nNumPed, cSufPed )
      end

      ( dbfTmpLin )->( dbSkip() )

      oMsgProgress():Deltapos(1)

   end





   ( dbfTmpInc )->( dbGoTop() )
   while ( dbfTmpInc )->( !eof() )
      dbPass( dbfTmpInc, dbfPedCliI, .T., cSerPed, nNumPed, cSufPed )
      ( dbfTmpInc )->( dbSkip() )
   end





   ( dbfTmpDoc )->( dbGoTop() )
   while ( dbfTmpDoc )->( !eof() )
      dbPass( dbfTmpDoc, dbfPedCliD, .T., cSerPed, nNumPed, cSufPed )
      ( dbfTmpDoc )->( dbSkip() )
   end





   ( dbfTmpRes )->( dbgotop() )
   while ( dbfTmpRes )->( !eof() )
      dbPass( dbfTmpRes, D():PedidosClientesReservas( nView ), .T., cSerPed, nNumPed, cSufPed )
      ( dbfTmpRes )->( dbSkip() )
   end





   ( dbfTmpEst )->( dbgotop() )
   while ( dbfTmpEst )->( !eof() )
         dbPass( dbfTmpEst, D():PedidosClientesSituaciones( nView ), .T., cSerPed, nNumPed, cSufPed )
         ( dbfTmpEst )->( dbSkip() )
   end





   if aTmp[ 81 ]
      aTmp[ 22 ]  := 3
   end





   aTmp[ 86 ]     := nTotNet
   aTmp[ 87 ]     := nTotIva
   aTmp[ 88 ]     := nTotReq
   aTmp[ 89 ]     := nTotPed

   oDetCamposExtra:saveExtraField( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "" )





   WinGather( aTmp, aGet, D():PedidosClientes( nView ), , nMode )





   if uFieldempresa( "lAddAtp" )

      ( dbfTmpLin )->( dbGoTop() )

      while !( dbfTmpLin )->( Eof() )

        if !Empty( ( dbfTmpLin )->cRef )




             AtipicasModel():AddArticulo( {   "cCodCli"   => cCodCli, "cCodArt"   => ( dbfTmpLin )->cRef, "cNomArt"   => ( dbfTmpLin )->cDetalle, "nPreUnit"  => ( dbfTmpLin )->nPreDiv } )

        end

         ( dbfTmpLin )->( dbSkip() )

      end

      ( dbfTmpLin )->( dbGoTop() )

   end





   if !Empty( oStock )
      oStock:SetRecibidoPedCli( cSerPed + Str( nNumPed ) + cSufPed )
   end





   if !Empty( oStock )
      oStock:SetGeneradoPedCli( cSerPed + Str( nNumPed ) + cSufPed )
   end






    if uFieldempresa( "lRealWeb" ) .AND. ( !empty( ( D():PedidosClientes( nView ) )->cCodWeb ) )
        with object ( TComercio():New() )
            :syncSituacionesPedidoPrestashop( ( D():PedidosClientes( nView ) )->cCodWeb, ( D():PedidosClientes( nView ) )->cSerPed, ( D():PedidosClientes( nView ) )->nNumPed, ( D():PedidosClientes( nView ) )->cSufPed )
        end
    end





   dbCommitAll()

   CommitTransaction()

   RECOVER USING oError

      RollBackTransaction()
      msgStop( "Imposible almacenar documento" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

   oMsgText()

   endProgress()





   oDlg:Enable()

   oDlg:end( 1 )

Return .T.



Static Function RecalculaTotal( aTmp )

   local nTotPedCli      := nTotPedCli( nil, D():PedidosClientes( nView ), dbfTmpLin, D():TiposIva( nView ), D():Divisas( nView ), D():FormasPago( nView ), aTmp, nil, .F. )
   local nEntPedCli      := 0
   local nPasEntPedCli     := 0

   if oBrwIva <> nil
      oBrwIva:SetArray( aTotIva, , , .F. )
      oBrwIva:Refresh()
   end





   if oGetNet <> nil
      oGetNet:SetText( Trans( nTotNet, cPorDiv ) )
   end

   if oGetIvm <> nil
      oGetIvm:SetText( Trans( nTotIvm, cPorDiv ) )
   end

   if oGetRnt <> nil
      oGetRnt:SetText( AllTrim( Trans( nTotRnt, cPorDiv ) + Space( 1 ) +  AllTrim( cSimDiv( aTmp[ 46 ], D():Divisas( nView ) ) ) + " : " + AllTrim( Trans( nPctRnt, "999.99" ) ) + "%" ) )
   end

   if oGetIva <> nil
      oGetIva:SetText( Trans( nTotIva, cPorDiv ) )
   end

   if oGetReq <> nil
      oGetReq:SetText( Trans( nTotReq, cPorDiv ) )
   end

   if oGetPnt <> nil
      oGetPnt:SetText( Trans( nTotPnt, cPorDiv ) )
   end

   if oGetTrn <> nil
      oGetTrn:SetText( Trans( nTotTrn, cPorDiv ) )
   end

   if oGetTotal <> nil
      oGetTotal:SetText( Trans( nTotPed, cPorDiv ) )
   end

   if oTotPedLin <> nil
      oTotPedLin:SetText( Trans( nTotPed, cPorDiv ) )
   end

   if oGetAge <> nil
      oGetAge:SetText( Trans( nTotAge, cPorDiv ) )
   end

   if oGetPed <> nil
      oGetPed:SetText( Trans( nTotPedCli, cPorDiv ) )
   end

   if oGetEnt <> nil
      oGetEnt:SetText( "" )
   end

   if oGetPdt <> nil
      oGetPdt:SetText( "" )
   end

   if oGetPas <> nil
      oGetPas:SetText( "" )
   end

   if oGetNoPas <> nil
      oGetNoPas:SetText( Trans( nPasEntPedCli, cPorDiv ) )
   end


   if oGetPes <> nil
      oGetPes:cText( nTotPes )
   end

   if oGetDif <> nil
      oGetDif:cText( nTotDif )
   end

Return .T.







STATIC FUNCTION DelDeta( oBrwLin )

   local lKitArt  := ( dbfTmpLin )->lKitArt
   local nNumLin  := ( dbfTmpLin )->nNumLin

   WinDelRec( oBrwLin, dbfTmpLin, , {|| if( lKitArt, DbDelKit( oBrwLin, dbfTmpLin, nNumLin ), ) } )

RETURN ( .T. )







STATIC FUNCTION AppDeta( oBrwLin, bEdtDet, aTmp, lTot, cCodArt )

   If( lTot == nil, lTot := .F., ) ;

   WinAppRec( oBrwLin, bEdtDet, dbfTmpLin, lTot, cCodArt, aTmp )

RETURN RecalculaTotal( aTmp )






STATIC FUNCTION EdtDeta( oBrwLin, bEdtDet, aTmp )

   WinEdtRec( oBrwLin, bEdtDet, dbfTmpLin, nil, nil, aTmp )

RETURN RecalculaTotal( aTmp )



STATIC FUNCTION LoaCli( aGet, aTmp, nMode, oRieCli, oTlfCli )

   local lValid         := .T.
   local cNewCodCli  := aGet[ 6 ]:varGet()
   local lChgCodCli

   if Empty( cNewCodCli )
      Return .T.
   elseif At( ".", cNewCodCli ) <> 0
      cNewCodCli     := PntReplace( aGet[ 6 ], "0", RetNumCodCliEmp() )
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodCliEmp() )
   end

   lChgCodCli  := ( Empty( cOldCodCli ) .OR. cOldCodCli <> cNewCodCli )

   if ( D():Clientes( nView ) )->( dbSeek( cNewCodCli ) )

         if !( isAviableClient( nView, nMode ) )
             aGet[ 6 ]:SetFocus()
        return .F.
      end

         if isfalse( runEventScript( "PedidosClientes\loaCli", aGet, aTmp, nView, dbfTmpLin ) )
           return .F.
      end





      aGet[ 6 ]:cText( ( D():Clientes( nView ) )->Cod )





      if ( D():Clientes( nView ) )->nColor <> 0
         aGet[ 7 ]:SetColor( , ( D():Clientes( nView ) )->nColor )
      end

      if empty( aGet[ 7 ]:varGet() ) .OR. lChgCodCli
         aGet[ 7 ]:cText( ( D():Clientes( nView ) )->Titulo )
      end

      if empty( aGet[ 8 ]:varGet() ) .OR. lChgCodCli
         aGet[ 8 ]:cText( ( D():Clientes( nView ) )->Domicilio )
      end

      if empty( aGet[ 9 ]:varGet() ) .OR. lChgCodCli
         aGet[ 9 ]:cText( ( D():Clientes( nView ) )->Poblacion )
      end

      if !empty( aGet[ 10 ] )
         if empty( aGet[ 10 ]:varGet() ) .OR. lChgCodCli
            aGet[ 10 ]:cText( ( D():Clientes( nView ) )->Provincia )
         end
      end

      if empty( aGet[ 11 ]:varGet() ) .OR. lChgCodCli
         aGet[ 11 ]:cText( ( D():Clientes( nView ) )->CodPostal )
      end

      if empty( aGet[ 85 ]:varGet() ) .OR. lChgCodCli
         aGet[ 85 ]:cText( ( D():Clientes( nView ) )->Telefono )
      end

      if !empty( aGet[ 12 ] )
         if empty( aGet[ 12 ]:varGet() ) .OR. lChgCodCli
            aGet[ 12 ]:cText( ( D():Clientes( nView ) )->Nif )
         end
      else
         if Empty( aTmp[ 12 ] ) .OR. lChgCodCli
            aTmp[ 12 ]  := ( D():Clientes( nView ) )->Nif
         end
      end

      if Empty( aTmp[ 64 ] ) .OR. lChgCodCli
         aTmp[ 64 ]     := ( D():Clientes( nView ) )->cCodGrp
      end





      if ( lChgCodCli )



         if !empty( aGet[ 15 ] )

            if dbSeekInOrd( cNewCodCli, "lDefObr", dbfObrasT )
               aGet[ 15 ]:cText( ( dbfObrasT )->cCodObr )
            else
               aGet[ 15 ]:cText( Space( 10 ) )
            end

            aGet[ 15 ]:lValid()

         end



         if oRieCli <> nil
            oStock:SetRiesgo( cNewCodCli, oRieCli, ( D():Clientes( nView ) )->Riesgo )
         end

         aTmp[ 13 ]     := ( D():Clientes( nView ) )->lModDat
         aTmp[ 91 ]     := ( D():Clientes( nView ) )->lPntVer

      end

      if nMode == 1

         aTmp[50 ]      := ( D():Clientes( nView ) )->nRegIva





         if Empty( aTmp[ 1 ] )

            if !Empty( ( D():Clientes( nView ) )->Serie )
               aGet[ 1 ]:cText( ( D():Clientes( nView ) )->Serie )
            end

         else



            if !Empty( ( D():Clientes( nView ) )->Serie )                .AND. aTmp[ 1 ] <> ( D():Clientes( nView ) )->Serie      .AND. ApoloMsgNoYes( "La serie del cliente seleccionado es distinta a la anterior.", "¿Desea cambiar la serie?" )
               aGet[ 1 ]:cText( ( D():Clientes( nView ) )->Serie )
            end

         end

         if aGet[ 17 ] <> nil

            if ( Empty( aGet[ 17 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( D():Clientes( nView ) )->cCodAlm )
               aGet[ 17 ]:cText( ( D():Clientes( nView ) )->cCodAlm )
               aGet[ 17 ]:lValid()
            end

         end

         if aGet[ 16 ] <> nil

            if ( Empty( aGet[ 16 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( D():Clientes( nView ) )->cCodTar )
               aGet[ 16 ]:cText( ( D():Clientes( nView ) )->CCODTAR )
               aGet[ 16 ]:lValid()
            end

         end

         if ( Empty( aGet[ 19 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( D():Clientes( nView ) )->CodPago )
            aGet[ 19 ]:cText( ( D():Clientes( nView ) )->CodPago )
            aGet[ 19 ]:lValid()
         end





         if ( lChgCodCli .AND. lBancoDefecto( ( D():Clientes( nView ) )->Cod, dbfCliBnc ) )

            if !Empty( aGet[ 92 ] )
               aGet[ 92 ]:cText( ( dbfCliBnc )->cCodBnc )
               aGet[ 92 ]:lValid()
            end

            if !Empty( aGet[ 93 ] )
               aGet[ 93 ]:cText( ( dbfCliBnc )->cPaisIBAN )
               aGet[ 93 ]:lValid()
            end

            if !Empty( aGet[ 94 ] )
               aGet[ 94 ]:cText( ( dbfCliBnc )->cCtrlIBAN )
               aGet[ 94 ]:lValid()
            end

            if !Empty( aGet[ 95 ] )
               aGet[ 95 ]:cText( ( dbfCliBnc )->cEntBnc )
               aGet[ 95 ]:lValid()
            end

            if !Empty( aGet[ 96 ] )
               aGet[ 96 ]:cText( ( dbfCliBnc )->cSucBnc )
               aGet[ 96 ]:lValid()
            end

            if !Empty( aGet[ 97 ] )
               aGet[ 97 ]:cText( ( dbfCliBnc )->cDigBnc )
               aGet[ 97 ]:lValid()
            end

            if !Empty( aGet[ 98 ] )
               aGet[ 98 ]:cText( ( dbfCliBnc )->cCtaBnc )
               aGet[ 98 ]:lValid()
            end

         end

         if !Empty( aGet[ 14 ] )
            if ( Empty( aGet[ 14 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( D():Clientes( nView ) )->cAgente )
               aGet[ 14 ]:cText( ( D():Clientes( nView ) )->cAgente )
               aGet[ 14 ]:lValid()
            end
         end

         if ( Empty( aGet[ 20 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( D():Clientes( nView ) )->cCodRut )
            aGet[ 20 ]:cText( ( D():Clientes( nView ))->CCODRUT )
            aGet[ 20 ]:lValid()
         end

         if !empty( oGetTarifa )
             if ( Empty( oGetTarifa:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( D():Clientes( nView ) )->nTarifa )
                oGetTarifa:setTarifa( ( D():Clientes( nView ) )->nTarifa )
             end
         else
              aTmp[ 28 ]     := ( D():Clientes( nView ) )->nTarifa
         end

         if ( Empty( aTmp[ 100 ] ) .OR. lChgCodCli )
             aTmp[ 100 ]    := ( D():Clientes( nView ) )->nDtoArt
         end

         if !Empty( aGet[ 54 ] ) .AND. ( Empty( aGet[ 54 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( D():Clientes( nView ) )->cCodTrn )
            aGet[ 54 ]:cText( ( D():Clientes( nView ) )->cCodTrn )
            aGet[ 54 ]:lValid()
         end

      end

      if lChgCodCli

         aGet[ 42 ]:Click( ( D():Clientes( nView ) )->lReq ):Refresh()

         aGet[ 91  ]:Click( ( D():Clientes( nView ) )->lPntVer ):Refresh()





         if !uFieldempresa( "lDtoCliLin" )
             aGet[ 29 ]:cText( ( D():Clientes( nView ) )->cDtoEsp )
             aGet[ 30 ]:cText( ( D():Clientes( nView ) )->nDtoEsp )
         end

         aGet[ 31    ]:cText( ( D():Clientes( nView ) )->cDpp )

         aGet[ 32    ]:cText( ( D():Clientes( nView ) )->nDpp )

         aGet[ 33 ]:cText( ( D():Clientes( nView ) )->cDtoUno )

         aGet[ 35 ]:cText( ( D():Clientes( nView ) )->cDtoDos )

         aGet[ 34 ]:cText( ( D():Clientes( nView ) )->nDtoCnt )

         aGet[ 36 ]:cText( ( D():Clientes( nView ) )->nDtoRap )

         aTmp[ 69 ] := ( D():Clientes( nView ) )->nDtoAtp

         aTmp[ 70 ] := ( D():Clientes( nView ) )->nSbrAtp

      end

      cOldCodCli  := ( D():Clientes( nView ) )->Cod

      if ( D():Clientes( nView ) )->lMosCom .AND. !Empty( ( D():Clientes( nView ) )->mComent ) .AND. lChgCodCli
         MsgStop( Trim( ( D():Clientes( nView ) )->mComent ) )
      end

      ShowIncidenciaCliente( ( D():Clientes( nView ) )->Cod, nView )

      lValid      := .T.

    ELSE

        msgStop( "Cliente no encontrado" )
        lValid := .F.

    end

RETURN lValid



STATIC FUNCTION BeginTrans( aTmp, nMode )

   local oError
   local oBlock
   local lErrors  := .F.
   local cDbfLin  := "PCliL"
   local cDbfInc  := "PCliI"
   local cDbfDoc  := "PCliD"
   local cDbfRes  := "PCliR"
   local cDbfPgo  := "PCliP"
   local cDbfEst  := "PCliE"
   local cPedido  := ""
   local nOrd

   if nMode <> 1
      cPedido     := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]
   end

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   cTmpLin        := cGetNewFileName( cPatTmp() + cDbfLin )
   cTmpRes        := cGetNewFileName( cPatTmp() + cDbfRes )
   cTmpInc        := cGetNewFileName( cPatTmp() + cDbfInc )
   cTmpDoc        := cGetNewFileName( cPatTmp() + cDbfDoc )
   cTmpEst        := cGetNewFileName( cPatTmp() + cDbfEst )






   dbCreate( cTmpLin, aSqlStruct( aColPedCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpLin, cCheckArea( cDbfLin, @dbfTmpLin ), .F. )

   if !NetErr()

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "nNumLin", "Str( nNumLin, 4 )", {|| Str( Field->nNumLin ) } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "cRef", "cRef", {|| Field->cRef } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "cDetalle", "Left( cDetalle, 100 )", {|| Left( Field->cDetalle, 100 ) } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "nUniCaja", "nUniCaja", {|| Field->nUniCaja } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "nPosPrint", "Str( nPosPrint, 4 )", {|| Str( Field->nPosPrint ) } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "dFecUltCom", "dFecUltCom", {|| Field->dFecUltCom } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "nUniUltCom", "nUniUltCom", {|| Field->nUniUltCom } ) )

   else

      lErrors     := .T.

   end

   dbCreate( cTmpInc, aSqlStruct( aIncPedCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpInc, cCheckArea( cDbfInc, @dbfTmpInc ), .F. )
   if !NetErr()

      ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpInc )->( ordCreate( cTmpInc, "Recno", "Recno()", {|| Recno() } ) )

   else

      lErrors     := .T.

   end

   dbCreate( cTmpDoc, aSqlStruct( aPedCliDoc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpDoc, cCheckArea( cDbfDoc, @dbfTmpDoc ), .F. )
   if !NetErr()

      ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpDoc )->( ordCreate( cTmpDoc, "Recno", "Recno()", {|| Recno() } ) )

   else

      lErrors     := .T.

   end

   dbCreate( cTmpRes, aSqlStruct( aPedCliRes() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpRes, cCheckArea( cDbfRes, @dbfTmpRes ), .F. )
   if !NetErr()

      ( dbfTmpRes )->( ordCreate( cTmpRes, "cRef", "cRef + cCodPr1 + cCodPR2 + cValPr1 + cValPr2", {|| Field->CREF + Field->CCODPR1 + Field->CCODPR2 + Field->CVALPR1 + Field->CVALPR2 } ) )
      ( dbfTmpRes )->( ordListAdd( cTmpRes ) )

   else

      lErrors     := .T.

   end

      dbCreate( cTmpEst, aSqlStruct( aPedCliEst() ), cLocalDriver() )
       dbUseArea( .T., cLocalDriver(), cTmpEst, cCheckArea( cDbfEst, @dbfTmpEst ), .F. )
      if !NetErr()

          ( dbfTmpEst )->( ordCreate( cTmpEst, "nNumPed", "cSerPed + str( nNumPed ) + cSufPed + dtos( dFecSit )  + tFecSit", {|| Field->cSerPed + str( Field->nNumPed ) + Field->cSufPed + dtos( Field->dFecSit )  + Field->tFecSit } ) )
          ( dbfTmpEst )->( ordListAdd( cTmpEst ) )

      else

          lErrors     := .T.

      end





   if ( D():PedidosClientesLineas( nView ) )->( dbSeek( cPedido ) )

      while ( D():PedidosClientesLineasId( nView ) == cPedido ) .AND. ( D():PedidosClientesLineas( nView ) )->( !eof() )

        ( dbfTmpLin )->( dbAppend() )

        if ( D():PedidosClientesLineas( nView ) )->nNumLin == 0 .AND. dbLock( D():PedidosClientesLineas( nView ) )
            ( D():PedidosClientesLineas( nView ) )->nNumLin := ( dbfTmpLin )->( Recno() )
            ( D():PedidosClientesLineas( nView ) )->( dbRUnLock() )
        end

        dbPass( D():PedidosClientesLineas( nView ), dbfTmpLin )

        ( D():PedidosClientesLineas( nView ) )->( dbSkip() )

      end

   end

   ( dbfTmpLin )->( dbGoTop() )





   if ( nMode <> 4 ) .AND. ( dbfPedCliI )->( dbSeek( cPedido ) )

      while ( ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cPedido ) .AND. ( dbfPedCliI )->( !eof() )

         dbPass( dbfPedCliI, dbfTmpInc, .T. )
         ( dbfPedCliI )->( dbSkip() )

      end

   end

   ( dbfTmpInc )->( dbGoTop() )



    if ( nMode <> 4 ) .AND. ( D():PedidosClientesSituaciones( nView ) )->( dbSeek( cPedido ) )

          while ( ( D():PedidosClientesSituaciones( nView ) )->cSerPed + Str( ( D():PedidosClientesSituaciones( nView ) )->nNumPed ) + ( D():PedidosClientesSituaciones( nView ) )->cSufPed == cPedido ) .AND. ( D():PedidosClientesSituaciones( nView ) )->( !eof() )

         dbPass( D():PedidosClientesSituaciones( nView ), dbfTmpEst, .T. )
         ( D():PedidosClientesSituaciones( nView ) )->( dbSkip() )

        end

      end

      ( dbfTmpEst )->( dbGoTop() )





   if ( nMode <> 4 ) .AND. ( dbfPedCliD )->( dbSeek( cPedido ) )

      while ( ( dbfPedCliD )->cSerPed + Str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed == cPedido ) .AND. ( dbfPedCliD )->( !eof() )

         dbPass( dbfPedCliD, dbfTmpDoc, .T. )
         ( dbfPedCliD )->( dbSkip() )

      end

   end

   ( dbfTmpDoc )->( dbGoTop() )





   if ( nMode <> 4 ) .AND. ( D():PedidosClientesReservas( nView ) )->( DbSeek( cPedido ) )

      while ( ( D():PedidosClientesReservas( nView ) )->cSerPed + Str( ( D():PedidosClientesReservas( nView ) )->nNumPed ) + ( D():PedidosClientesReservas( nView ) )->cSufPed == cPedido ) .AND. ( D():PedidosClientesReservas( nView ) )->( !eof() )

         dbPass( D():PedidosClientesReservas( nView ), dbfTmpRes, .T. )
         ( D():PedidosClientesReservas( nView ) )->( DbSkip() )

      end

   end

   ( dbfTmpRes )->( dbGoTop() )

   oDetCamposExtra:SetTemporal( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "", nMode )

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

RETURN lErrors



Static Function EdtInc( aTmp, aGet, dbfPedCliI, oBrw, bWhen, bValid, nMode, aTmpPed )

       local oDlg
       local oNomInci

       if nMode == 1
          aTmp[ 1  ]    := aTmpPed[ 1 ]
          aTmp[ 2  ]    := aTmpPed[ 2 ]
          aTmp[ 3  ]    := aTmpPed[ 3 ]
       end

       oDlg = TDialog():New(,,,, LblTitle( nMode ) + "incidencias de presupuestos a clientes", "INCIDENCIA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





          TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




         TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )





      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





          TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

       if nMode <> 3
          oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) } )
       end

       oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function EdtEst( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpPed )

       local oDlg

       if nMode == 1

          aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("tFecSit")) ]    := GetSysTime()

    end

       oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Situación del documento del cliente", "SITUACION_ESTADO",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






           aGet[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("cSitua")) ] := TComboBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("cSitua")) ], aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("cSitua")) ]:= u ) }, ( SituacionesModel():getArrayNombres() ), oDlg,,,,,,, .F., {||     ( nMode <> 3 )},,,,,, 'aGet[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("cSitua")) ]',,,,,,, )







        aGet[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("dFecSit")) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("dFecSit")) ], aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("dFecSit")) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,, {|Self|aGet[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("dFecSit")) ]:cText( Calendario( aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("dFecSit")) ] ) )}, nil,,, )









          aGet[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("tFecSit")) ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("tFecSit")) ], aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("tFecSit")) ]:= u ) }, oDlg,, "@R 99:99:99", {||    ( iif( !validTime( aTmp[ (D():PedidosClientesSituaciones( nView ))->(fieldpos("tFecSit")) ] ), ( msgStop( "El formato de la hora no es correcto" ), .F. ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





          TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpEst, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





          TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

       if nMode <> 3
        oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpEst, oBrw, nMode ), oDlg:end( 1 ) } )
       end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( .T. )







STATIC FUNCTION SetDlgMode( aTmp, aGet, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTotal, aTmpPed, oFld, oRentLin, oBrwAlbCli, oBrwAlbPrv, oBrwFacCli )

   local cCodArt        := Left( aGet[ 4 ]:VarGet(), 18 )

   if !Empty( aGet[ 93 ] )
      if !uFieldEmpresa( "lUseBultos" )
         aGet[ 93 ]:Hide()
      else
         aGet[ 93 ]:SetText( uFieldempresa( "cNbrBultos" ) )
      end
   end

   if !lUseCaj()
      aGet[ 11 ]:Hide()
   else
      aGet[ 11 ]:SetText( cNombreCajas() )
   end

   if uFieldempresa( "lServicio" )
      aGet[ 73 ]:Show()
      aGet[ 74 ]:Show()
   else
      aGet[ 73 ]:Hide()
      aGet[ 74 ]:Hide()
   end

   if nMode == 1

      if !Empty( aGet[ 25 ] )
         aTmp[ 25 ]   := Ctod( "" )
         aGet[ 25 ]:Refresh()
      end

   end

   aGet[ 12 ]:SetText( cNombreUnidades() )

   if aGet[ 41 ] <> nil
      if !uFieldEmpresa( "lUseImp", .F. )
         aGet[ 41 ]:Hide()
      else
         if !uFieldEmpresa( "lModImp", .F. )
            aGet[ 41 ]:Disable()
         end
      end
   end

   if aGet[ 16 ] <> nil
      if !uFieldEmpresa( "lUsePor", .F. )
         aGet[ 16 ]:Hide()
      end
   end

   if aGet[ 15 ] <> nil
      if !uFieldEmpresa( "lUsePnt", .F. ) .OR. !aTmpPed[ 91 ]
         aGet[ 15 ]:Hide()
      end
   end

   if aGet[ 31 ] <> nil
      if !uFieldEmpresa( "lDtoLin", .F. )
         aGet[ 31 ]:Hide()
      end
   end

   if oRentLin <> nil .AND. RolesModel():getRolNoMostrarRentabilidad( Auth():rolUuid() )
      oRentLin:Hide()
   end

   if aTmp[ 75 ]
      aGet[ 14 ]:Hide()
      aGet[ 76 ]:Show()
   end

   do case
   case nMode == 1

      aGet[ 4    ]:cText( Space( 200 ) )

      aTmp[ 42 ]     := aTmpPed[ 51 ]

      aGet[ 11  ]:cText( 1 )
      aGet[ 12 ]:cText( 1 )
      aTmp[ 35  ] := nLastNum( dbfTmpLin )

      if !Empty( aGet[ 101  ] )
         aGet[ 101  ]:cText( nLastNum( dbfTmpLin, ( "nPosPrint" ) ) )
      else
         aTmp[ 101  ] := nLastNum( dbfTmpLin, ( "nPosPrint" ) )
      end

      aGet[ 39  ]:cText( aTmpPed[ 17 ])

      if !Empty( aGet[ 56  ] )
         aGet[ 56 ]:cText( Ctod( "" ) )
      else
         aTmp[ 56 ] := Ctod( "" )
      end

      if !Empty( aGet[ 55 ] )
         aGet[ 55 ]:Click( .F. )
      end

      aGet[ 4     ]:show()
      aGet[ 9 ]:show()
      aGet[ 27  ]:hide()

      if !Empty( aGet[ 45 ] )
         aGet[ 45 ]:hide()
      end

      if !empty( aGet[ 102 ] )
         aGet[ 102 ]:cText( aTmpPed[ 102 ] )
         aGet[ 102 ]:lValid()
      endif

      cTipoCtrCoste        := "Centro de coste"
      oTipoCtrCoste:Refresh()
      clearGet( aGet[ 104 ] )

      if aTmpPed[ 50 ] <= 2
         if !empty( aGet[ 10 ] )
            aGet[ 10 ]:cText( nIva( D():TiposIva( nView ), cDefIva() ) )
         else
            aTmp[ 10 ]  := nIva( D():TiposIva( nView ), cDefIva() )
         end

         aTmp[ 60 ]     := nReq( D():TiposIva( nView ), cDefIva() )
      end

   case nMode <> 1 .AND. empty( cCodArt )

      aGet[ 4     ]:hide()
      aGet[ 9 ]:hide()
      aGet[ 27  ]:show()

      if !Empty( aGet[ 45 ] )
         if aTmp[ 43 ]
            aGet[ 45 ]:Show()
         else
            aGet[ 45 ]:Hide()
         end
      end

   case nMode <> 1 .AND. !empty( cCodArt )

      aGet[ 4     ]:show()
      aGet[ 9 ]:show()
      aGet[ 27  ]:hide()

      if !Empty( aGet[ 45 ] )
         if aTmp[ 43 ]
            aGet[ 45 ]:Show()
         else
            aGet[ 45 ]:Hide()
         end
      end

      StocksModel():lPutStockActual( cCodArt, aTmp[ 39 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], oStkAct )

      if !Empty( aGet[ 63 ] )
         aGet[ 63 ]:lValid()
      end

   end

   if !empty( aGet[ 102 ] )
      aGet[ 102 ]:lValid()
   endif

   if !Empty( oStkAct )

      if !uFieldEmpresa( "lNStkAct" )
         oStkAct:Show()
      else
         oStkAct:Hide()
      end

   end

   if !aTmp[ 75 ]

      if !Empty( aTmp[ 5 ] )

         if !Empty( aGet[ 7 ] )
            aGet[ 7 ]:Show()
            aGet[ 7 ]:lValid()
         end

         if !Empty( oSayPr1 )
            oSayPr1:Show()
            oSayPr1:SetText( retProp( aTmp[ 5 ], dbfPro ) )
         end

         if !Empty( oSayVp1 )
            oSayVp1:Show()
         end

      else

         if !Empty( aGet[7 ] )
            aGet[ 7 ]:hide()
         end

         if !Empty( oSayPr1 )
            oSayPr1:hide()
         end

         if !Empty( oSayVp1 )
            oSayVp1:hide()
         end

      end

      if !Empty( aTmp[ 6 ] )

         if !Empty( aGet[ 8 ] )
            aGet[ 8 ]:Show()
            aGet[ 8 ]:lValid()
         end

         if !Empty( oSayPr2 )
            oSayPr2:Show()
            oSayPr2:SetText( retProp( aTmp[ 6 ], dbfPro ) )
         end

         if !Empty( oSayVp2 )
            oSayVp2:Show()
         end

      else

         if !Empty( aGet[ 8 ] )
            aGet[ 8 ]:hide()
         end

         if !Empty( oSayPr2 )
            oSayPr2:hide()
         end

         if !Empty( oSayVp2 )
            oSayVp2:hide()
         end

      end

   end





   if Empty( aTmp[ 81 ] )
      if !Empty( aGet[ 81 ] )
         aGet[ 81 ]:cText( oGetTarifa:getTarifa() )
      else
         aTmp[ 81 ]     := oGetTarifa:getTarifa()
      end
   end

   if !Empty( aGet[ 81 ] )
      if !uFieldEmpresa( "lPreLin" )
         aGet[ 81 ]:Hide()
      else
         aGet[ 81 ]:Show()
      end
   end





   aGet[ 39 ]:lValid()

   if !lAccArticulo() .AND. RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() )

      if !Empty( oRentLin )
         oRentLin:Hide()
      end

      if !Empty( aGet[ 37 ] )
         aGet[ 37 ]:Hide()
      end

   end





   if ( empty( aTmp[ 14 ] ) .OR. RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) ) .AND. nMode <> 3

      aGet[ 14 ]:HardEnable()
      aGet[ 16 ]:HardEnable()

      if !Empty( aGet[ 15 ] )
          aGet[ 15 ]:HardEnable()
      end

      aGet[ 17    ]:HardEnable()
      aGet[ 18 ]:HardEnable()

      if !Empty( aGet[ 31 ] )
         aGet[ 31 ]:HardEnable()
      end

   else

      aGet[ 14 ]:HardDisable()
      aGet[ 16 ]:HardDisable()

      if !Empty( aGet[ 15 ] )
         aGet[ 15 ]:HardDisable()
      end

      aGet[ 17    ]:HardDisable()
      aGet[ 18 ]:HardDisable()

      if !Empty( aGet[ 31 ] )
         aGet[ 31 ]:HardDisable()
      end

   end



   if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
      aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
   end

   if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
      aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
   end

   if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
      aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
   end

   if oUndMedicion:oDbf:Seek(  aTmp[ 22 ] )

      if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 1 .AND. !Empty( oUndMedicion:oDbf:cTextoDim1 )
         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
      end

      if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 2 .AND. !Empty( oUndMedicion:oDbf:cTextoDim2 )
         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
      end

      if !Empty( aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 3 .AND. !Empty( oUndMedicion:oDbf:cTextoDim3 )
         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
         aGet[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
      end

   end



   if !Empty( oBrwAlbCli )
      oBrwAlbCli:GoTop()
      oBrwAlbCli:Refresh()
   end

   if !Empty( oBrwFacCli )
      oBrwFacCli:GoTop()
      oBrwFacCli:Refresh()
   end

   if !Empty( oBrwAlbPrv )
      oBrwAlbPrv:GoTop()
      oBrwAlbPrv:Refresh()
   end



   if !Empty( oFld )
      oFld:SetOption( 1 )
   end



   if !empty(oBrwProperties)
      oBrwProperties:Hide()
      oBrwProperties:Cargo    := nil
   end

       if !Empty( oGetCelda )
           oGetCelda:Hide()
    end



   aGet[ 4 ]:SetFocus()

Return nil



STATIC FUNCTION SaveDeta( aTmp, aTmpPed, aGet, oFld, oDlg2, oBrw, bmpImage, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTotal, oEstadoProduccion, oBtn )

   local n
   local i
   local aClo
   local nRec
   local hAtipica
   local nPrecioPropiedades   := 0

   oBtn:SetFocus()

   if !aGet[ 4 ]:lValid()
      return nil
   end






   if Empty( aTmp[ 39 ] ) .AND. !Empty( aTmp[ 4 ] )
      msgStop( "Código de almacén no puede estar vacío", "Atención" )
      return nil
   end

   if !cAlmacen( aGet[ 39 ], dbfAlm )
      return nil
   end



   if lPrecioMinimo( aTmp[ 4 ], aTmp[ 14 ], nMode, D():Articulos( nView ) )
      msgStop( "El precio de venta es inferior al precio mínimo.")
      return nil
   end



   CursorWait()

   nRec                          := ( dbfTmpLin )->( RecNo() )

   aTmp[ 103 ]              := cTipoCtrCoste
   aTmp[ 60 ]                 := nPReq( D():TiposIva( nView ), aTmp[ 10 ] )
   aTmp[ 88 ]              := oEstadoProduccion:nAt - 1

   aClo                          := aClone( aTmp )

   if nMode == 1

      if aTmp[ 43 ]
         saveLoteActual( aTmp[ 4 ], aTmp[ 45 ], nView )
      end



      if !empty( oBrwProperties:Cargo )

         for n := 1 to len( oBrwProperties:Cargo )

            for i := 1 to len( oBrwProperties:Cargo[ n ] )

                if !Empty( oBrwProperties:Cargo[ n, i ] )

                   if isNum( oBrwProperties:Cargo[ n, i ]:Value ) .AND. oBrwProperties:Cargo[ n, i ]:Value <> 0

                      aTmp[ 35 ]     := nLastNum( dbfTmpLin )
                      aTmp[ 101 ]   := nLastNum( dbfTmpLin, "nPosPrint" )
                      aTmp[ 12]     := oBrwProperties:Cargo[ n, i ]:Value
                      aTmp[ 5 ]     := oBrwProperties:Cargo[ n, i ]:cCodigoPropiedad1
                      aTmp[ 7 ]     := oBrwProperties:Cargo[ n, i ]:cValorPropiedad1
                      aTmp[ 6 ]     := oBrwProperties:Cargo[ n, i ]:cCodigoPropiedad2
                      aTmp[ 8 ]     := oBrwProperties:Cargo[ n, i ]:cValorPropiedad2



                      nPrecioPropiedades   := nPrePro( aTmp[ 4 ], aTmp[ 5 ], aTmp[ 7 ], aTmp[ 6 ], aTmp[ 8 ], aTmp[ 81 ], aTmpPed[ 51 ], dbfArtDiv, dbfTarPreL, aTmpPed[ 16 ] )
                      if !empty(nPrecioPropiedades)
                         aTmp[ 14 ]  := nPrecioPropiedades
                      end

                      saveDetail( aTmp, aClo, aGet, aTmpPed, dbfTmpLin, oBrw, nMode )

                   end

                end

            next

         next

      else

         saveDetail( aTmp, aClo, aGet, aTmpPed, dbfTmpLin, oBrw, nMode )



      end

   else

      WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

   end

   ( dbfTmpLin )->( dbGoTo( nRec ) )



   cOldCodArt                          := ""
   cOldUndMed                          := ""



   if !empty( bmpImage )
      bmpImage:Hide()
      palBmpFree( bmpImage:hBitmap, bmpImage:hPalette )
   end



   if nMode == 1 .AND. lEntCon()

      recalculaTotal( aTmpPed )

      aCopy( dbBlankRec( dbfTmpLin ), aTmp )
      aEval( aGet, {| o, i | if( "GET" $ o:ClassName(), o:cText( aTmp[ i ] ), ) } )

      setDlgMode( aTmp, aGet, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oTotal, aTmpPed, oFld )

      sysRefresh()

   else

      oDlg2:end( 1 )

   end

   CursorWE()

Return nil



Static Function saveDetail( aTmp, aClo, aGet, aTmpPed, dbfTmpLin, oBrw, nMode )

   local hAtipica
   local sOfertaArticulo
   local nCajasGratis         := 0
   local nUnidadesGratis      := 0



   hAtipica                   := hAtipica( hValue( aTmp, aTmpPed ) )
   if !empty( hAtipica )
      if hhaskey( hAtipica, "nCajasGratis" ) .AND. hget( hAtipica, "nCajasGratis" ) <> 0
         nCajasGratis         := hget( hAtipica, "nCajasGratis" )
      end
      if hhaskey( hAtipica, "nUnidadesGratis" ) .AND. hget( hAtipica, "nUnidadesGratis" ) <> 0
         nUnidadesGratis      := hget( hAtipica, "nUnidadesGratis" )
      end
   end



   if empty( nCajasGratis ) .AND. empty( nUnidadesGratis )

      sOfertaArticulo         := structOfertaArticulo( D():getHashArray( aTmpPed, "PedCliT", nView ), D():getHashArray( aTmp, "PedCliL", nView ), nTotLPedCli( aTmp ), nView )

      if !empty( sOfertaArticulo )
         nCajasGratis         := sOfertaArticulo:nCajasGratis
         nUnidadesGratis      := sOfertaArticulo:nUnidadesGratis
      end
   end



   if nCajasGratis <> 0
      aTmp[ 86 ]        := .T.
      aTmp[ 11 ]        -= nCajasGratis
      commitDetail( aTmp, aClo, nil, aTmpPed, dbfTmpLin, oBrw, nMode, .F. )

      aTmp[ 86 ]        := .T.
      aTmp[ 11 ]        := nCajasGratis
      aTmp[ 14 ]        := 0
      aTmp[ 17    ]        := 0
      aTmp[ 31 ]        := 0
      aTmp[ 18 ]        := 0
      aTmp[ 19 ]        := 0
   end



   if nUnidadesGratis <> 0
      aTmp[ 86 ]        := .T.
      aTmp[ 12]        -= nUnidadesGratis

      commitDetail( aTmp, aClo, nil, aTmpPed, dbfTmpLin, oBrw, nMode, .F. )

      aTmp[ 86 ]        := .T.
      aTmp[ 12]        := nUnidadesGratis
      aTmp[ 14 ]        := 0
      aTmp[ 17    ]        := 0
      aTmp[ 31 ]        := 0
      aTmp[ 18 ]        := 0
      aTmp[ 19 ]        := 0
   end

   commitDetail( aTmp, aClo, aGet, aTmpPed, dbfTmpLin, oBrw, nMode, .T. )

Return nil



Static Function commitDetail( aTmp, aClo, aGet, aTmpPed, dbfTmpLin, oBrw, nMode, lEmpty )

   winGather( aTmp, aGet, dbfTmpLin, oBrw, nMode, nil, .F. )

   appendAsociado( aClo, aTmpPed )

   if ( nMode == 1 ) .AND. ( aClo[ 46 ] )
      appendKit( aClo, aTmpPed )
   end

Return nil



STATIC FUNCTION appendAsociado( uTmpLin, aTmpPed )

   local cCodArt
   local cSerPed
   local nNumPed
   local cSufPed
   local nCanEnt
   local dFecPed
   local cTipMov
   local cAlmLin
   local nIvaLin
   local lIvaLin
   local nComAge
   local nUniCaj
   local nDtoGrl
   local nDtoPrm
   local nDtoDiv
   local cNumPed
   local nTarLin
   local nRecAct                       := ( ( D():Asociado( nView ) ) )->( RecNo() )
   local nRecLin                       := ( dbfTmpLin )->( RecNo() )
   local nNumLin                       := ( dbfTmpLin )->nNumLin
   local nPosPrint
   local nUnidades                     := 0
   local nStkActual                    := 0
   local nStockMinimo                  := 0
   local nOrdAnt                    := ( D():Asociado( nView ) )->( OrdSetFocus( "cCodArt" ) )

   if isArray( uTmpLin )
      cCodArt                          := uTmpLin[ 4    ]
      cSerPed                          := uTmpLin[ 1 ]
      nNumPed                          := uTmpLin[ 2 ]
      cSufPed                          := uTmpLin[ 3 ]
      nCanEnt                          := uTmpLin[ 20 ]
      dFecPed                          := uTmpLin[ 25  ]
      cTipMov                          := uTmpLin[ 26 ]
      cAlmLin                          := uTmpLin[ 39 ]
      nIvaLin                          := uTmpLin[ 10    ]
      lIvaLin                          := uTmpLin[ 42 ]
      nComAge                          := uTmpLin[ 19 ]
      nUniCaj                          := uTmpLin[ 12]
      nDtoGrl                          := uTmpLin[ 17    ]
      nDtoPrm                          := uTmpLin[ 18 ]
      nDtoDiv                          := uTmpLin[ 31 ]
      nNumLin                          := uTmpLin[ 35 ]
      nPosPrint                        := uTmpLin[ 101 ]
      nTarLin                          := uTmpLin[ 81 ]
   else
      cCodArt                          := ( uTmpLin )->cRef
      cSerPed                          := ( uTmpLin )->cSerPed
      nNumPed                          := ( uTmpLin )->nNumPed
      cSufPed                          := ( uTmpLin )->cSufPed
      nCanEnt                          := ( uTmpLin )->nCanEnt
      dFecPed                          := ( uTmpLin )->dFecha
      cTipMov                          := ( uTmpLin )->cTipMov
      cAlmLin                          := ( uTmpLin )->cAlmLin
      nIvaLin                          := ( uTmpLin )->nIva
      lIvaLin                          := ( uTmpLin )->lIvaLin
      nComAge                          := ( uTmpLin )->nComAge
      nUniCaj                          := ( uTmpLin )->nUniCaja
      nDtoGrl                          := ( uTmpLin )->nDto
      nDtoPrm                          := ( uTmpLin )->nDtoPrm
      nDtoDiv                          := ( uTmpLin )->nDtoDiv
      nNumLin                          := ( uTmpLin )->nNumLin
      nPosPrint                        := ( uTmpLin )->nPosPrint
      nTarLin                          := ( uTmpLin )->nTarLin
   end





   if ( D():Asociado( nView ) )->( dbSeek( cCodArt ) )

      while ( D():Asociado( nView ) )->cCodArt == cCodArt .AND. !( D():Asociado( nView ) )->( eof() )

         if ( D():Articulos( nView ) )->( dbSeek( ( D():Asociado( nView ) )->cRefAsc ) )

            ( dbfTmpLin )->( dbAppend() )

            ( dbfTmpLin )->nNumLin     := nNumLin
            ( dbfTmpLin )->nPosPrint   := nPosPrint

            ( dbfTmpLin )->nNumKit     := nLastNum( dbfTmpLin, "nNumKit" )
            ( dbfTmpLin )->cRef        := ( D():Asociado( nView ) )->cRefAsc
            ( dbfTmpLin )->cDetalle    := ( D():Articulos( nView ) )->Nombre
            ( dbfTmpLin )->nPntVer     := ( D():Articulos( nView ) )->nPntVer1
            ( dbfTmpLin )->nPesokg     := ( D():Articulos( nView ) )->nPesoKg
            ( dbfTmpLin )->cPesokg     := ( D():Articulos( nView ) )->cUndDim
            ( dbfTmpLin )->cUnidad     := ( D():Articulos( nView ) )->cUnidad
            ( dbfTmpLin )->nVolumen    := ( D():Articulos( nView ) )->nVolumen
            ( dbfTmpLin )->cVolumen    := ( D():Articulos( nView ) )->cVolumen
            ( dbfTmpLin )->nCtlStk     := ( D():Articulos( nView ) )->nCtlStock
            ( dbfTmpLin )->nPvpRec     := ( D():Articulos( nView ) )->PvpRec
            ( dbfTmpLin )->cCodImp     := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->lLote       := ( D():Articulos( nView ) )->lLote
            ( dbfTmpLin )->cLote       := ( D():Articulos( nView ) )->cLote

            ( dbfTmpLin )->nCosDiv     := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpPed[ 6 ] )





            ( dbfTmpLin )->cCodFam     := ( D():Articulos( nView ) )->Familia
            ( dbfTmpLin )->cGrpFam     := cGruFam( ( dbfTmpLin )->cCodFam, D():Familias( nView ) )





            ( dbfTmpLin )->cSerPed     := cSerPed
            ( dbfTmpLin )->nNumPed     := nNumPed
            ( dbfTmpLin )->cSufPed     := cSufPed
            ( dbfTmpLin )->nCanEnt     := nCanEnt
            ( dbfTmpLin )->dFecha      := dFecPed
            ( dbfTmpLin )->cTipMov     := cTipMov
            ( dbfTmpLin )->cAlmLin     := cAlmLin
            ( dbfTmpLin )->lIvaLin     := lIvaLin





            ( dbfTmpLin )->nUniCaja    := nUniCaj * ( D():Asociado( nView ) )->nUndAsc





            ( dbfTmpLin )->nIva     := nIva( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )
            ( dbfTmpLin )->nReq     := nReq( D():Get( "TIva", nView ), ( D():Articulos( nView ) )->TipoIva )





            ( dbfTmpLin )->nPreDiv := nRetPreArt( nTarLin, aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Get( "Divisas", nView ), dbfKit, D():Get( "TIva", nView ), , , oNewImp )





            ( dbfTmpLin )->nCtlStk  := ( D():Articulos( nView ) )->nCtlStock

         end

         ( D():Asociado( nView ) )->( dbSkip() )

      end

   end

   ( D():Asociado( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():Asociado( nView ) )->( dbGoTo( nRecAct ) )
   ( dbfTmpLin )->( dbGoTo( nRecLin ) )

RETURN NIL



Static Function AppendKit( uTmpLin, aTmpPed )

   local cCodArt
   local cSerPed
   local nNumPed
   local cSufPed
   local nCanPed
   local dFecPed
   local cAlmLin
   local nIvaLin
   local lIvaLin
   local nComAge
   local nUniCaj
   local nDtoGrl
   local nDtoPrm
   local nDtoDiv
   local nNumLin
   local nPosPrint
   local nTarLin
   local nUnidades                     := 0
   local nStkActual                    := 0
   local nStockMinimo                  := 0
   local nRecAct                       := ( dbfKit     )->( Recno() )
   local nRecLin                                 := ( dbfTmpLin )->( Recno() )

   if IsArray( uTmpLin )
      cCodArt                          := uTmpLin[ 4    ]
      cSerPed                          := uTmpLin[ 1 ]
      nNumPed                          := uTmpLin[ 2 ]
      cSufPed                          := uTmpLin[ 3 ]
      nCanPed                          := uTmpLin[ 11 ]
      dFecPed                          := uTmpLin[ 25  ]
      cAlmLin                          := uTmpLin[ 39 ]
      nIvaLin                          := uTmpLin[ 10    ]
      lIvaLin                          := uTmpLin[ 42 ]
      nComAge                          := uTmpLin[ 19 ]
      nUniCaj                          := uTmpLin[ 12]
      nDtoGrl                          := uTmpLin[ 17    ]
      nDtoPrm                          := uTmpLin[ 18 ]
      nDtoDiv                          := uTmpLin[ 31 ]
      nNumLin                          := uTmpLin[ 35 ]
      nPosPrint                        := uTmpLin[ 101 ]
      nTarLin                          := uTmpLin[ 81 ]
   else
      cCodArt                          := ( uTmpLin )->cRef
      cSerPed                          := ( uTmpLin )->cSerPed
      nNumPed                          := ( uTmpLin )->nNumPed
      cSufPed                          := ( uTmpLin )->cSufPed
      nCanPed                          := ( uTmpLin )->nCanPed
      dFecPed                          := ( uTmpLin )->dFecha
      cAlmLin                          := ( uTmpLin )->cAlmLin
      nIvaLin                          := ( uTmpLin )->nIva
      lIvaLin                          := ( uTmpLin )->lIvaLin
      nComAge                          := ( uTmpLin )->nComAge
      nUniCaj                          := ( uTmpLin )->nUniCaja
      nDtoGrl                          := ( uTmpLin )->nDto
      nDtoPrm                          := ( uTmpLin )->nDtoPrm
      nDtoDiv                          := ( uTmpLin )->nDtoDiv
      nNumLin                          := ( uTmpLin )->nNumLin
      nPosPrint                        := ( uTmpLin )->nPosPrint
      nTarLin                          := ( uTmpLin )->nTarLin
   end

   if ( dbfKit )->( dbSeek( cCodArt ) )

      while ( dbfKit )->cCodKit == cCodArt .AND. !( dbfKit )->( eof() )

         if ( D():Articulos( nView ) )->( dbSeek( ( dbfKit )->cRefKit ) )

            ( dbfTmpLin )->( dbAppend() )

            ( dbfTmpLin )->nNumLin      := nNumLin
            ( dbfTmpLin )->nPosPrint   := nPosPrint
            ( dbfTmpLin )->lKitChl      := .T.

            ( dbfTmpLin )->nNumKit     := nLastNum( dbfTmpLin, "nNumKit" )
            ( dbfTmpLin )->cRef        := ( dbfkit      )->cRefKit
            ( dbfTmpLin )->cDetalle    := ( D():Articulos( nView ) )->Nombre
            ( dbfTmpLin )->nPntVer     := ( D():Articulos( nView ) )->nPntVer1
            ( dbfTmpLin )->nPesoKg     := ( D():Articulos( nView ) )->nPesoKg
            ( dbfTmpLin )->cPesoKg     := ( D():Articulos( nView ) )->cUndDim
            ( dbfTmpLin )->cUnidad     := ( D():Articulos( nView ) )->cUnidad
            ( dbfTmpLin )->nVolumen    := ( D():Articulos( nView ) )->nVolumen
            ( dbfTmpLin )->cVolumen    := ( D():Articulos( nView ) )->cVolumen

            ( dbfTmpLin )->nPvpRec     := ( D():Articulos( nView ) )->PvpRec
            ( dbfTmpLin )->cCodImp     := ( D():Articulos( nView ) )->cCodImp
            ( dbfTmpLin )->lLote       := ( D():Articulos( nView ) )->lLote
            ( dbfTmpLin )->nLote       := ( D():Articulos( nView ) )->nLote
            ( dbfTmpLin )->cLote       := ( D():Articulos( nView ) )->cLote

            ( dbfTmpLin )->nValImp     := oNewImp:nValImp( ( D():Articulos( nView ) )->cCodImp )
            ( dbfTmpLin )->nCosDiv     := nCosto( nil, D():Articulos( nView ), dbfKit, , , , aTmpPed[ 6 ] )

            if ( D():Articulos( nView ) )->lFacCnv
               ( dbfTmpLin )->nFacCnv  := ( D():Articulos( nView ) )->nFacCnv
            end





            ( dbfTmpLin )->cCodFam         := ( D():Articulos( nView ) )->Familia
            ( dbfTmpLin )->cGrpFam         := cGruFam( ( dbfTmpLin )->cCodFam, D():Familias( nView ) )





            ( dbfTmpLin )->cSerPed     := cSerPed
            ( dbfTmpLin )->nNumPed     := nNumPed
            ( dbfTmpLin )->cSufPed     := cSufPed
            ( dbfTmpLin )->nCanPed     := nCanPed
            ( dbfTmpLin )->dFecha      := dFecPed
            ( dbfTmpLin )->cAlmLin     := cAlmLin
            ( dbfTmpLin )->lIvaLin     := lIvaLin
            ( dbfTmpLin )->nComAge     := nComAge





            if !Empty( nIvaLin )
               ( dbfTmpLin )->nIva     := nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )
               ( dbfTmpLin )->nReq     := nReq( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )
            else
               ( dbfTmpLin )->nIva     := 0
               ( dbfTmpLin )->nReq     := 0
            end





            ( dbfTmpLin )->lImpLin     := lImprimirComponente( cCodArt, D():Articulos( nView ) )
            ( dbfTmpLin )->lKitPrc     := lPreciosComponentes( cCodArt, D():Articulos( nView ) )

            ( dbfTmpLin )->nUniCaja    := nUniCaj * ( dbfKit )->nUndKit

            if ( dbfTmpLin )->lKitPrc
               ( dbfTmpLin )->nPreDiv  := nRetPreArt( nTarLin, aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp )
            end

            if lStockComponentes( cCodArt, D():Articulos( nView ) )
               ( dbfTmpLin )->nCtlStk  := ( D():Articulos( nView ) )->nCtlStock
            else
               ( dbfTmpLin )->nCtlstk  := 3
            end





            if ( dbfKit )->lAplDto
               ( dbfTmpLin )->nDto     := nDtoGrl
               ( dbfTmpLin )->nDtoPrm  := nDtoPrm
               ( dbfTmpLin )->nDtoDiv  := nDtoDiv
            end

            if ( D():Articulos( nView ) )->lKitArt
               AppendKit( dbfTmpLin, aTmpPed )
            end





            nStockMinimo      := nStockMinimo( cCodArt, cAlmLin, nView )

            if ( D():Articulos( nView ))->lMsgVta .AND. !uFieldEmpresa( "lNStkAct" ) .AND. nStockMinimo > 0

               nStkActual     := StocksModel():nStockArticulo( ( dbfKit )->cRefKit, cAlmLin )
               nUnidades      := nUniCaj * ( dbfKit )->nUndKit

               do case
                  case nStkActual - nUnidades < 0



                       MsgStop(     "No hay stock suficiente para realizar la venta" + Chr(13)+Chr(10) +  "del componente " + AllTrim( ( dbfKit )->cRefKit ) + " - " + AllTrim( ( D():Articulos( nView ) )->Nombre ), "¡Atención!" )

                  case nStkActual - nUnidades < nStockMinimo






                       MsgStop(     "El stock del componente " + AllTrim( ( dbfKit )->cRefKit ) + " - " + AllTrim( ( D():Articulos( nView ) )->Nombre ) + Chr(13)+Chr(10) +  "está bajo minimo." + Chr(13)+Chr(10) +  "Unidades a vender : " + AllTrim( Trans( nUnidades, MasUnd() ) ) + Chr(13)+Chr(10) +  "Stock minimo : " + AllTrim( Trans( nStockMinimo, MasUnd() ) ) + Chr(13)+Chr(10) +  "Stock actual : " + AllTrim( Trans( nStkActual, MasUnd() ) ), "¡Atención!" )

               end

            end

         end

         ( dbfKit )->( dbSkip() )

      end

   end

   ( dbfKit     )->( dbGoTo( nRecAct ) )
   ( dbfTmpLin )->( dbGoTo( nRecLin ) )

Return ( nil )

























STATIC FUNCTION RecalculaLinea( aTmp, aTmpPed, nDec, oTotal, oTot, oMargen, cCodDiv, lTotal )

   local nCalculo
   local nUnidades
   local nMargen
   local nCosto
   local nRentabilidad
   local nBase       := 0

   If( lTotal == nil, lTotal := .F., ) ;

   nUnidades         := nTotNPedCli( aTmp )

   if aTmp[ 75 ]
      nCalculo       := aTmp[ 76  ]
   else
      nCalculo       := aTmp[ 14  ]
   end

   nCalculo          -= aTmp[ 31  ]





   if !aTmp[ 42 ]

      if aTmp[ 87 ]
         nCalculo    += aTmp[ 41 ] * NotCero( aTmp[ 71 ] )
      else
         nCalculo    += aTmp[ 41 ]
      end

   end

   nCalculo          *= nUnidades






   if aTmp[ 16 ] <> 0
      nCalculo       += aTmp[ 16 ] * nUnidades
   end





   if aTmp[ 17 ] <> 0
      nCalculo       -= nCalculo * aTmp[ 17    ] / 100
   end

   if aTmp[ 18 ] <> 0
      nCalculo       -= nCalculo * aTmp[ 18 ] / 100
   end





   nCosto            := nUnidades * aTmp[ 37 ]

   if aTmp[ 42 ] .AND. aTmp[ 10 ] <> 0
      nMargen        := nCalculo - Round( nCalculo / ( 100 / aTmp[ 10 ] + 1 ), nRouDiv )
   else
      nMargen        := nCalculo
   end

   nBase             := nMargen

   nMargen           -= nCosto

   if nCalculo == 0
      nRentabilidad  := 0
   else
      nRentabilidad  := nRentabilidad( nCalculo, 0, nCosto )
   end





   if aTmpPed[ 91 ]
      nCalculo       += aTmp[ 15 ] * nUnidades
   end

   nCalculo          := Round( nCalculo, nDec )

   if !Empty( oTotal )
      oTotal:cText( nCalculo )
   end

   if oTot <> nil
      aEval( oTot, {|o| o:Refresh() } )
   end

   if oMargen <> nil
      oMargen:cText( AllTrim( Trans( nMargen, cPorDiv ) + Space( 1 ) + AllTrim( cSimDiv( cCodDiv, D():Divisas( nView ) ) ) + " : " + AllTrim( Trans( nRentabilidad, "999.99" ) ) + "%" ) )
   end

   if !Empty( oComisionLinea )
      oComisionLinea:cText( Round( ( nBase * aTmp[ 19 ] / 100 ), nRouDiv ) )
   end

RETURN ( if( !lTotal, .T., nCalculo ) )



STATIC FUNCTION LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, lFocused )

   local hHas128
   local cLote
   local nCosPro
   local nDtoAge
   local cCodFam
   local cPrpArt
   local cLotArt
   local nImpAtp              := 0
   local nImpOfe              := 0
   local nPrePro              := 0
   local nDescuentoArticulo   := 0
   local sOfertaArticulo
   local cProveedor
   local lChgCodArt           := ( Empty( cOldCodArt ) .OR. Rtrim( cOldCodArt ) <> Rtrim( cCodArt ) )
   local nTarOld              := aTmp[ 81 ]
   local dFecPed              := aTmpPed[ 5 ]
   local hAtipica
   local nUnidades            := 0

   If( lFocused == nil, lFocused := .T., ) ;

   if !Empty( aTmpPed[ 21 ] )
       dFecPed                      := aTmpPed[ 21 ]
   end

   if Empty( cCodArt )

      if lRetCodArt()
         MsgStop( "No se pueden añadir líneas sin codificar" )
         return .F.
      end

      if Empty( aTmp[ 10 ] )
         aGet[ 10 ]:bWhen      := {|| .T. }
      end

      if  !Empty( aGet[ 41 ] )
         aGet[ 41 ]:bWhen  := {|| .T. }
      end

      aGet[ 9 ]:hide()

      if !Empty( aGet[ 27 ] )
          aGet[ 27 ]:Show()
      end

      if lFocused .AND. !Empty( aGet[ 27 ] )
        aGet[ 27 ]:SetFocus()
      end

      if !empty( oBrwProperties )
         oBrwProperties:Hide()
      end

      if !Empty( oGetCelda )
           oGetCelda:Hide()
      end

   else

      if lModIva()
         aGet[ 10 ]:bWhen     := {|| .T. }
      else
         aGet[ 10 ]:bWhen     := {|| .F. }
      end

      if !Empty( aGet[ 41 ] )
         if uFieldEmpresa( "lModImp" )
            aGet[ 41 ]:bWhen   := {|| .T. }
         else
            aGet[ 41 ]:bWhen   := {|| .F. }
         end
      end

      aGet[ 9 ]:Show()

      if !Empty( aGet[ 41 ] )
          aGet[ 27 ]:hide()
      end





      if Len( Alltrim( cCodArt ) ) > 18

         hHas128                 := GetHashGs128( cCodArt )
         if !Empty( hHas128 )

            cCodArt              := uGetCodigo( hHas128, "00" )

            if Empty( cCodArt )
               cCodArt           := uGetCodigo( hHas128, "01" )
            end

         end

      end

      cCodArt                    := cSeekCodebar( cCodArt, dbfCodebar, D():Articulos( nView ) )

      if ( D():Articulos( nView ) )->( dbSeek( cCodArt ) ) .OR. ( D():Articulos( nView ) )->( dbSeek( Upper( cCodArt ) ) )

         if ( D():Articulos( nView ) )->lObs
            MsgStop( "Artículo catalogado como obsoleto" )
            return .F.
         end



         if ( lChgCodArt )

            cCodArt              := ( D():Articulos( nView ) )->Codigo

            aGet[ 4 ]:cText( Padr( cCodArt, 200 ) )
            aTmp[ 4 ]        := cCodArt



            aTmp[ 99 ]     := ( D():Articulos( nView ) )->cRefAux
            aTmp[ 100 ]    := ( D():Articulos( nView ) )->cRefAux2

            if ( D():Articulos( nView ) )->lMosCom .AND. !Empty( ( D():Articulos( nView ) )->mComent )
               MsgStop( Trim( ( D():Articulos( nView ) )->mComent ) )
            end





            if !Empty( aGet[ 63 ] )
                aGet[ 63 ]:cText( ( D():Articulos( nView ) )->cPrvHab )
                aGet[ 63 ]:lValid()
            end

            aTmp[ 70 ]  := Padr( cRefPrvArt( aTmp[ 4 ], ( D():Articulos( nView ) )->cPrvHab , dbfArtPrv ) , 18 )





            if !Empty( aGet[ 85 ] )
               aGet[ 85 ]:cText( ( D():Articulos( nView ) )->Descrip )
            else
               aTmp[ 85 ]     := ( D():Articulos( nView ) )->Descrip
            end






            if ( D():Articulos( nView ) )->lLote

                aTmp[ 43 ]  := ( D():Articulos( nView ) )->lLote

               if Empty( cLote )
                  cLote              := ( D():Articulos( nView ) )->cLote
               end

               if !Empty( aGet[ 45 ] )

                  aGet[ 45 ]:show()

                  if uFieldempresa( "lLoaUltLot" )
                      aGet[ 45 ]:cText( cLote )
                  end

               else

                  if uFieldempresa( "lLoaUltLot" )
                      aTmp[ 45 ] := cLote
                  else
                     aTmp[ 45 ] := Space( 64 )
                  end

               end

            else

               if !Empty( aGet[ 45 ] )
                  aTmp[ 45 ]     := Space( 14 )
                  aGet[ 45 ]:cText( Space( 14 ) )
                  aGet[ 45 ]:hide()
               end

            end





            if ( D():Articulos( nView ) )->lKitArt

               aTmp[ 46 ]        := ( D():Articulos( nView ) )->lKitArt
               aTmp[ 29 ]        := lImprimirCompuesto( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
               aTmp[ 48 ]        := lPreciosCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )

               if lStockCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )

                  if aGet[ 36 ] <> nil
                     aGet[ 36 ]:SetOption( ( D():Articulos( nView ) )->nCtlStock )
                  else
                     aTmp[ 36 ]  := ( D():Articulos( nView ) )->nCtlStock
                  end

               else

                  if aGet[ 36 ] <> nil
                     aGet[ 36 ]:SetOption( 3 )
                  else
                     aTmp[ 36 ]  := 3
                  end

               end

            else

               aTmp[ 29 ]     := .F.

               if aGet[ 36 ] <> nil
                  aGet[ 36 ]:SetOption( ( D():Articulos( nView ) )->nCtlStock )
               else
                  aTmp[ 36 ]  := ( D():Articulos( nView ) )->nCtlStock
               end

            end





            aTmp[ 50 ]        := ( D():Articulos( nView ) )->lMsgVta
            aTmp[ 51 ]        := ( D():Articulos( nView ) )->lNotVta





            cCodFam                   := ( D():Articulos( nView ) )->Familia
            if !Empty( cCodFam )

               if !Empty( aGet[ 58 ] )
                  aGet[ 58 ]:cText( cCodFam )
                  aGet[ 58 ]:lValid()
               else
                  aTmp[ 58 ]  := cCodFam
               end

               if !Empty( aGet[ 59 ] )
                  aGet[ 59 ]:cText( cGruFam( cCodFam, D():Familias( nView ) ) )
                  aGet[ 59 ]:lValid()
               else
                  aTmp[ 59 ]  := cGruFam( cCodFam, D():Familias( nView ) )
               end

            else

               if !Empty( aGet[ 58 ] )
                  aGet[ 58 ]:cText( Space( 8 ) )
                  aGet[ 58 ]:lValid()
               else
                  aTmp[ 58 ]  := Space( 8 )
               end

               if !Empty( aGet[ 59 ] )
                  aGet[ 59 ]:cText( Space( 3 ) )
                  aGet[ 59 ]:lValid()
               else
                  aTmp[ 59 ]  := Space( 3 )
               end

            end





            if aGet[ 9 ] <> nil
               aGet[ 9 ]:cText( ( D():Articulos( nView ) )->Nombre )
            else
               aTmp[ 9 ] := ( D():Articulos( nView ) )->Nombre
            end

            if aGet[ 27 ] <> nil
               aGet[ 27 ]:cText( ( D():Articulos( nView ) )->Descrip )
            else
               aTmp[ 27 ] := ( D():Articulos( nView ) )->Descrip
            end






            if !Empty( aGet[ 23 ] )
               aGet[ 23  ]:cText( ( D():Articulos( nView ) )->nPesoKg )
            else
               aGet[ 23  ] := ( D():Articulos( nView ) )->nPesoKg
            end

            if !Empty( aGet[ 24 ] )
               aGet[ 24  ]:cText( ( D():Articulos( nView ) )->cUndDim )
            else
               aGet[ 24  ] := ( D():Articulos( nView ) )->cUndDim
            end

            if !Empty( aGet[ 71 ] )
               aGet[ 71 ]:cText( ( D():Articulos( nView ) )->nVolumen )
            else
               aGet[ 71 ] := ( D():Articulos( nView ) )->nVolumen
            end

            if !Empty( aGet[ 22 ] )
                aGet[ 22 ]:cText( ( D():Articulos( nView ) )->cUnidad )
                aGet[ 22 ]:lValid()
            else
                aTmp[ 22 ] := ( D():Articulos( nView ) )->cUnidad
            end

            if !Empty( aGet[ 72 ] )
                aGet[ 72 ]:cText( ( D():Articulos( nView ) )->cVolumen )
            else
                aTmp[ 72 ]:= ( D():Articulos( nView ) )->cVolumen
            end





            if !Empty( aGet[ 54 ] )
               aGet[ 54 ]:cText( ( D():Articulos( nView ) )->cCodTip )
            else
               aTmp[ 54 ] := ( D():Articulos( nView ) )->cCodTip
            end

            if ( D():Articulos( nView ) )->nBulEnt <> 0
               if !empty( aGet )
                  aGet[ 93 ]:cText( ( D():Articulos( nView ) )->nBulEnt )
               else
                  aTmp[ 93 ]  := ( D():Articulos( nView ) )->nBulEnt
               end
            end

            if (D():Articulos( nView ))->nCajEnt <> 0
               aGet[ 11 ]:cText( (D():Articulos( nView ))->nCajEnt )
            end

            if ( D():Articulos( nView ) )->nUniCaja <> 0
               aGet[ 12 ]:cText( ( D():Articulos( nView ) )->nUniCaja )
            end





            if aTmpPed[ 50 ] <= 2
               aGet[ 10 ]:cText( nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) )
               aTmp[ 60 ]     := nReq( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )
            end





            aTmp[ 40 ]     := ( D():Articulos( nView ) )->cCodImp
            oNewImp:setCodeAndValue( aTmp[ 40 ], aGet[ 41 ] )

            if !Empty( ( D():Articulos( nView ) )->cCodImp )
               aTmp[ 87 ]     := RetFld( ( D():Articulos( nView ) )->cCodImp, oNewImp:oDbf:cAlias, "lIvaVol" )
            end





            if ( D():Articulos( nView ) )->lFacCnv
               aTmp[ 30 ]     := ( D():Articulos( nView ) )->nFacCnv
            end



            loadComisionAgente( aTmp, aGet, aTmpPed )



            if !Empty( aGet[ 65 ] )
               aGet[ 65 ]:cText( ( D():Articulos( nView ) )->cImagen )
            else
               aTmp[ 65 ]     := ( D():Articulos( nView ) )->cImagen
            end

            if !Empty( bmpImage )
               if !Empty( aTmp[ 65 ] )
                  bmpImage:Show()
                  bmpImage:LoadBmp( cFileBitmap( cPatImg(), aTmp[ 65 ] ) )
               else
                  bmpImage:Hide()
               end
            end





            if oStkAct <> nil .AND. !uFieldEmpresa( "lNStkAct" ) .AND. aTmp[ 36 ] <= 1
               StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], oStkAct )
            end





            aTmp[ 5 ]  := ( D():Articulos( nView ) )->cCodPrp1
            aTmp[ 6 ]  := ( D():Articulos( nView ) )->cCodPrp2

            if ( !Empty( aTmp[ 5 ] ) .OR. !Empty( aTmp[ 6 ] ) ) .AND. ( uFieldEmpresa( "lUseTbl" ) .AND. ( nMode == 1 ) )

               aGet[ 11  ]:cText( 0 )
               aGet[ 12 ]:cText( 0 )

               setPropertiesTable( cCodArt,  aTmp[ 5 ], aTmp[ 6 ], 0, aGet[ 12 ], oBrwProperties, nView )

                   if !Empty( oGetCelda )
                       oGetCelda:Show()
                end

            else

                hidePropertiesTable( oBrwProperties )

                   if !Empty( oGetCelda )
                      oGetCelda:Hide()
                  end

               if !empty( aTmp[ 5 ] )

                  if aGet[ 7 ] <> nil
                     aGet[ 7 ]:Show()
                     if lFocused
                        aGet[ 7 ]:SetFocus()
                     end
                  end

                  if oSayPr1 <> nil
                     oSayPr1:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp1, dbfPro ) )
                     oSayPr1:show()
                  end

                  if oSayVp1 <> nil
                      oSayVp1:SetText( "" )
                      oSayVp1:Show()
                  end

               else

                  if !empty( aGet[ 7 ] )
                     aGet[7 ]:cText( Space( 20 ) )
                     aTmp[7 ] := Space( 20 )
                     aGet[7 ]:hide()
                  end

                  if !empty( oSayPr1 )
                     oSayPr1:SetText( "" )
                     oSayPr1:hide()
                  end

                  if !empty( oSayVp1 )
                     oSayVp1:hide()
                  end

               end

               if !empty( aTmp[6 ] )

                  if aGet[ 8 ] <> nil
                     aGet[ 8 ]:show()
                  end

                  if oSayPr2 <> nil
                     oSayPr2:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp2, dbfPro ) )
                     oSayPr2:show()
                  end

                  if oSayVp2 <> nil
                      oSayVp2:SetText( "" )
                      oSayVp2:Show()
                  end

               else

                  if !empty( aGet[ 8 ] )
                     aGet[8 ]:cText( Space( 20 ) )
                     aGet[8 ]:hide()
                  end

                  if !empty( oSayPr2 )
                     oSayPr2:hide()
                  end

                  if !empty( oSayVp2 )
                     oSayVp2:hide()
                  end

               end

            end

         end





         cPrpArt              := aTmp[ 5 ] + aTmp[ 6 ] + aTmp[ 7 ] + aTmp[ 8 ]
         cLotArt               := aTmp[ 45 ]

         if ( lChgCodArt ) .OR. ( cPrpArt <> cOldPrpArt ) .OR. ( cLotArt <> cOldLotArt )





            if oStkAct <> nil .AND. !uFieldEmpresa( "lNStkAct" ) .AND. aTmp[ 36 ] <= 1
               StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], oStkAct )
            end

            if nMode == 1
               cCodFam        := RetFamArt( aTmp[ 4 ], D():Articulos( nView ) )
            else
               cCodFam        := aTmp[ 58 ]
            end




            if !Empty( aGet[ 17 ] )
               aGet[ 17 ]:cText( 0 )
            else
               aTmp[ 17 ] := 0
            end

            if !Empty( aGet[ 31 ] )
               aGet[ 31 ]:cText( 0 )
            else
               aTmp[ 31 ] := 0
            end

            if !Empty( aGet[ 18 ] )
               aGet[ 18 ]:cText( 0 )
            else
               aTmp[ 18 ]:= 0
            end

            aTmp[ 86  ] := .F.





            aTmp[ 38 ] := (D():Articulos( nView ))->PvpRec

            if !Empty( aGet[ 15 ] )
               aGet[ 15 ]:cText( ( D():Articulos( nView ) )->NPNTVER1 )
            else
               aTmp [ 15 ] :=  ( D():Articulos( nView ) )->NPNTVER1
            end





            do case
               case uFieldEmpresa( "nCosVta" ) < 2

                  nCosPro           := oStock:nCostoMedio( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ] )

                  if nCosPro == 0
                     nCosPro        := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpPed[ 6 ] )
                  end

               case uFieldEmpresa( "nCosVta" ) == 2

                  nCosPro           := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpPed[ 6 ] )

               case uFieldEmpresa( "nCosVta" ) == 3

                  nCosPro           := MaterialesProducidosLineasModel():getCosto(  aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ] )

                  if nCosPro == 0
                     nCosPro        := nCosto( aTmp[ 4 ], D():Articulos( nView ), dbfKit, .F., , D():Get( "Divisas", nView ), aTmpPed[ 6 ] )
                  end

            end











            if aGet[ 37 ] <> nil
               aGet[ 37 ]:cText( nCosPro )
            else
               aTmp[ 37 ]  := nCosPro
            end





            if uFieldempresa( "lDtoCliLin" )

               if !empty( aGet ) .AND. !empty( aGet[ 17 ] )
                  aGet[ 17 ]:cText( retFld( aTmpPed[ 6 ], D():Clientes( nView ), "nDtoEsp" ) )
                  aTmp[ 17 ]     := retFld( aTmpPed[ 6 ], D():Clientes( nView ), "nDtoEsp" )
               else
                  aTmp[ 17 ]     := retFld( aTmpPed[ 6 ], D():Clientes( nView ), "nDtoEsp" )
               end

            end



            nDescuentoArticulo   := nDescuentoArticulo( cCodArt, aTmpPed[ 6 ], nView )
            if nDescuentoArticulo <> 0
               if !Empty( aGet[ 17 ] )
                  aGet[ 17 ]:cText( nDescuentoArticulo )
               else
                  aTmp[ 17 ]  := nDescuentoArticulo
               end
            end



            if aTmp[ 17 ] == 0
               if !Empty( aGet[ 17 ] )
                  aGet[ 17 ]:cText( nDescuentoFamilia( cCodFam, D():Familias( nView ) ) )
               else
                  aTmp[ 17 ]     := nDescuentoFamilia( cCodFam, D():Familias( nView ) )
               end
            end



            if !Empty( aGet[ 22 ] )
               aGet[ 22 ]:cText( ( D():Articulos( nView ) )->cUnidad )
            else
               aTmp[ 22 ]  := ( D():Articulos( nView ) )->cUnidad
            end



            nPrePro           := nPrePro( aTmp[ 4 ], aTmp[ 5 ], aTmp[ 7 ], aTmp[ 6 ], aTmp[ 8 ], aTmp[ 81 ], aTmpPed[ 51 ], dbfArtDiv, dbfTarPreL, aTmpPed[ 16 ] )
            if nPrePro == 0
               aGet[ 14 ]:cText( nRetPreArt( aTmp[ 81 ], aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp ) )
            else
               aGet[ 14 ]:cText( nPrePro )
            end



            if !Empty( aTmpPed[ 16 ] )



               nImpOfe     := RetPrcTar( aTmp[ 4 ], aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dbfTarPreL, aTmp[ 81 ] )
               if nImpOfe  <> 0
                  aGet[ 14 ]:cText( nImpOfe )
               end



               nImpOfe  := RetPctTar( aTmp[ 4 ], cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dbfTarPreL )
               if nImpOfe  <> 0
                  aGet[ 17   ]:cText( nImpOfe )
               end


               nImpOfe  := RetLinTar( aTmp[ 4 ], cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dbfTarPreL )
               if nImpOfe <> 0
                  aGet[ 31 ]:cText( nImpOfe )
               end


               nImpOfe  := RetComTar( aTmp[ 4 ], cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], aTmpPed[14], dbfTarPreL, dbfTarPreS )
               if nImpOfe <> 0
                  aGet[ 19 ]:cText( nImpOfe )
               end



               nImpOfe  := RetDtoPrm( aTmp[ 4 ], cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dFecPed, dbfTarPreL )
               if nImpOfe  <> 0
                  aGet[ 18 ]:cText( nImpOfe )
               end



               nDtoAge  := RetDtoAge( aTmp[ 4 ], cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dFecPed, aTmpPed[14], dbfTarPreL, dbfTarPreS )
               if nDtoAge  <> 0
                  aGet[ 19 ]:cText( nDtoAge )
               end

            end



            hAtipica          := hAtipica( hValue( aTmp, aTmpPed ) )

            if !empty( hAtipica )

               if hhaskey( hAtipica, "nTarifaFamilia" ) .AND. hAtipica[ "nTarifaFamilia" ] > 0
                  aGet[ 14 ]:cText( nRetPreArt( hAtipica[ "nTarifaFamilia" ], aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp ) )
               end

               if hhaskey( hAtipica, "nImporte" ) .AND. hAtipica[ "nImporte" ] <> 0
                  aGet[ 14 ]:cText( hAtipica[ "nImporte" ] )
               end

               if hhaskey( hAtipica, "nDescuentoPorcentual" )
                  aGet[ 17 ]:cText( hAtipica[ "nDescuentoPorcentual"] )
               end

               if hhaskey( hAtipica, "nDescuentoPromocional" )
                  aGet[ 18 ]:cText( hAtipica[ "nDescuentoPromocional" ] )
               end

               if hhaskey( hAtipica, "nComisionAgente" )
                  aGet[ 19 ]:cText( hAtipica[ "nComisionAgente" ] )
               end

               if hhaskey( hAtipica, "nDescuentoLineal" )
                  aGet[ 31 ]:cText( hAtipica[ "nDescuentoLineal" ] )
               end

            end

























            ValidaMedicion( aTmp, aGet )

         end





         cOldPrpArt := cPrpArt
         cOldCodArt := cCodArt
         cOldLotArt := cLotArt





         if Empty( aTmp[ 14 ] ) .OR. ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) )

            aGet[ 14 ]:HardEnable()
            aGet[ 16 ]:HardEnable()

            if !Empty( aGet[ 15 ] )
               aGet[ 15 ]:HardEnable()
            end

            aGet[ 17    ]:HardEnable()
            aGet[ 18 ]:HardEnable()

            if !Empty( aGet[ 31 ] )
               aGet[ 31 ]:HardEnable()
            end

         else

            aGet[ 14 ]:HardDisable()
            aGet[ 16 ]:HardDisable()

            if !Empty( aGet[ 15 ] )
               aGet[ 15 ]:HardEnable()
            end
            aGet[ 17    ]:HardDisable()
            aGet[ 18 ]:HardDisable()

            if !Empty( aGet[ 31 ] )
               aGet[ 31 ]:HardEnable()
            end

         end

      else

         MsgStop( "Artículo no encontrado" )
         Return .F.

      end

   end

RETURN .T.



Static Function nEstadoIncidencia( cNumPed )

   local nEstado  := 0
   local aBmp     := ""

   if ( dbfPedCliI )->( dbSeek( cNumPed ) )

      while ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cNumPed .AND. !( dbfPedCliI )->( Eof() )

         if ( dbfPedCliI )->lListo
            do case
               case nEstado == 0 .OR. nEstado == 3
                    nEstado := 3
               case nEstado == 1
                    nEstado := 2
            end
         else
            do case
               case nEstado == 0
                    nEstado := 1
               case nEstado == 3
                    nEstado := 2
            end
         end

         ( dbfPedCliI )->( dbSkip() )

      end

   end

Return ( nEstado )



Static Function nEstadoProduccion( cNumPed )

   local nEstado                := 1

   if ( D():PedidosClientesLineas( nView ) )->( dbSeek( cNumPed ) )

      while D():PedidosClientesLineasId( nView ) == cNumPed .AND. !( D():PedidosClientesLineas( nView ) )->( Eof() )





           if !( D():PedidosClientesLineas( nView ) )->lKitChl

             do case
                case ( D():PedidosClientesLineas( nView ) )->nProduc == 0

                    if nEstado == 3
                         nEstado  := 2
                         exit
                     end

                case ( D():PedidosClientesLineas( nView ) )->nProduc == 1

                     nEstado      := 2
                     exit

                case ( D():PedidosClientesLineas( nView ) )->nProduc == 2

                   nEstado      := 3

             end

         end

         ( D():PedidosClientesLineas( nView ) )->( dbSkip() )

      end

   end

Return ( nEstado )



Static Function cEstadoProduccion( cNumPed )

Return ( aEstadoProduccion[ Max( Min( nEstadoProduccion( cNumPed ), 3 ), 1 ) ] )



Static Function cEstadoPedido( nEstado )

Return ( aEstadoPedido[ Max( Min( nEstado, 3 ), 1 ) ] )



Static Function ChangePedidosWeb()





   ( dbfTmpLin )->( __dbZap() )

   if ( D():PedidosClientesLineas( nView ) )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) )

      while ( D():PedidosClientesLineasId( nView ) == D():PedidosClientesId( nView ) ) .AND. ( D():PedidosClientesLineas( nView ) )->( !eof() )

         dbPass( D():PedidosClientesLineas( nView ), dbfTmpLin, .T. )

         ( D():PedidosClientesLineas( nView ) )->( dbSkip() )

      end

   end

   ( dbfTmpLin )->( dbGoTop() )





   oBrwDetallesPedidos:GoTop()
   oBrwDetallesPedidos:Refresh( .T. )

return nil



Static Function StartPedidosWeb( oDlgPedidosWeb )

   local oBoton
   local oGrupo
   local oCarpeta
   local oOfficeBar

   lStopAvisoPedidos()

   oOfficeBar                 := TDotNetBar():New( 0, 0, 1008, 100, oDlgPedidosWeb, 1 )
   oOfficeBar:nHTabs          := 4
   oOfficeBar:lPaintAll       := .F.
   oOfficeBar:lDisenio        := .F.

   oOfficeBar:SetStyle( 1 )

   oDlgPedidosWeb:oTop        := oOfficeBar

   oCarpeta                   := TCarpeta():New( oOfficeBar, "" )

   oGrupo                     := TDotNetGroup():New( oCarpeta, 126, "Lineas", .F. )

   oBoton                     := TDotNetButton():New( 60, oGrupo, "Up32",              "Arriba",         1, {|| oBrwPedidosWeb:GoUp() }, , , .F., .F., .F. )
   oBoton                     := TDotNetButton():New( 60, oGrupo, "Down32",            "Abajo",          2, {|| oBrwPedidosWeb:GoDown() }, , , .F., .F., .F. )

   oGrupo                     := TDotNetGroup():New( oCarpeta, 126, "Acciones", .F. )

   oBoton                     := TDotNetButton():New( 60, oGrupo, "gc_gearwheel_run_32",        "Procesar",       1, {|| oDlgPedidosWeb:End( 1 ) }, , , .F., .F., .F. )
   oBoton                     := TDotNetButton():New( 60, oGrupo, "gc_garbage_full_32",  "Eliminar",       2, {|| WinDelRec( oBrwPedidosWeb, D():PedidosClientes( nView ), {|| QuiPedCli() } ), ChangePedidosWeb() } , , , .F., .F., .F. )

   oGrupo                     := TDotNetGroup():New( oCarpeta, 66, "Salir", .F. )

   oBoton                     := TDotNetButton():New( 60, oGrupo, "End32",             "Salida",         1, {|| oDlgPedidosWeb:End() }, , , .F., .F., .F. )

   ChangePedidosWeb()

Return ( nil )



Static Function YearComboBoxChange()

   if ( oWndBrw:oWndBar:cYearComboBox() <> "[Todos]" )
      oWndBrw:oWndBar:setYearComboBoxExpression( "Year( Field->dFecPed ) == " + oWndBrw:oWndBar:cYearComboBox() )
   else
      oWndBrw:oWndBar:setYearComboBoxExpression( "" )
   end

   oWndBrw:chgFilter()

Return nil



Static function lChangeCancel( aGet, aTmp, dbfTmpLin )

   if aTmp[ 81 ]
      aTmp[ 82 ]  := GetSysDate()
   else
      aTmp[ 82 ]  := CtoD( "" )
      aTmp[ 83 ]  := Space( 100 )
   end

   if !Empty( aGet[ 82 ] )
      aGet[ 82 ]:Refresh()
   end

   if !Empty( aGet[ 83 ] )
      aGet[ 83 ]:Refresh()
   end

return ( .T. )



Static function lValidCancel( aGet, aTmp, oBrwLin )

   if aTmp[ 81 ]
      oBrwLin:Hide()
   else
      oBrwLin:Show()
   end

return ( .T. )



static function lBuscaOferta( cCodArt, aGet, aTmp, aTmpPed, dbfOferta, dbfDiv, dbfKit, dbfIva  )

   local sOfeArt
   local nTotalLinea    := 0
   local dFecPed             := aTmpPed[ 5 ]

   if !Empty( aTmpPed[ 21 ] )
       dFecPed                 := aTmpPed[ 21 ]
   end

   if ( D():Articulos( nView ) )->Codigo == cCodArt .OR. ( D():Articulos( nView ) )->( dbSeek( cCodArt ) )





      nTotalLinea := RecalculaLinea( aTmp, aTmpPed, nDouDiv, , , , aTmpPed[ 46 ], .T. )

      sOfeArt     := sOfertaArticulo( cCodArt, aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 12 ], dFecPed, dbfOferta, aTmp[ 81 ], aTmpPed[ 51 ], aTmp[5], aTmp[6], aTmp[7], aTmp[8], aTmp[ 46 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), aTmp[ 11 ], nTotalLinea )

      if !Empty( sOfeArt )
         if ( sOfeArt:nPrecio <> 0 )
            aGet[ 14 ]:cText( sOfeArt:nPrecio )
         end
         if ( sOfeArt:nDtoPorcentual <> 0 )
            aGet[ 17    ]:cText( sOfeArt:nDtoPorcentual )
         end
         if ( sOfeArt:nDtoLineal <> 0)
            aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
         end
         aTmp[ 86  ] := .T.
      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaFamilia( ( D():Articulos( nView ) )->Familia, aTmpPed[ 6 ], aTmpPed[ 64 ], dFecPed, dbfOferta, aTmp[ 81 ], D():Articulos( nView ), aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 17    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaTipoArticulo( ( D():Articulos( nView ) )->cCodTip, aTmpPed[ 6 ], aTmpPed[ 64 ], dFecPed, dbfOferta, aTmp[ 81 ], D():Articulos( nView ), aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 17    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaCategoria( ( D():Articulos( nView ) )->cCodCate, aTmpPed[ 6 ], aTmpPed[ 64 ], dFecPed, dbfOferta, aTmp[ 81 ], D():Articulos( nView ), aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 17    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaTemporada( ( D():Articulos( nView ) )->cCodTemp, aTmpPed[ 6 ], aTmpPed[ 64 ], dFecPed, dbfOferta, aTmp[ 81 ], D():Articulos( nView ), aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 17    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaFabricante( ( D():Articulos( nView ) )->cCodFab, aTmpPed[ 6 ], aTmpPed[ 64 ], dFecPed, dbfOferta, aTmp[ 81 ], D():Articulos( nView ), aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt )
            if ( sOfeArt:nDtoPorcentual <> 0 )
               aGet[ 17    ]:cText( sOfeArt:nDtoPorcentual )
            end
            if ( sOfeArt:nDtoLineal <> 0 )
               aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            end
            aTmp[ 86 ]  := .T.
         end

      end

   end

return .T.



Static Function lEscandalloEdtRec( lSet, oBrwLin )

   local lShwKit     := lShwKit()

   if lSet
      lShwKit        := !lShwKit
   end

   if lShwKit
      SetWindowText( oBtnKit:hWnd, "Ocultar Esc&ll." )
      if ( dbfTmpLin )->( Used() )
         ( dbfTmpLin )->( dbClearFilter() )
      end
   else
      SetWindowText( oBtnKit:hWnd, "Mostrar Esc&ll." )
      if ( dbfTmpLin )->( Used() )
         ( dbfTmpLin )->( dbSetFilter( {|| ! Field->lKitChl }, "!lKitChl" ) )
      end
   end

   if lSet
      lShwKit( lShwKit )
   end

   if !Empty( oBrwLin )
      oBrwLin:Refresh()
   end

Return ( nil )



Static Function CargaAtipicasCliente( aTmpPed, oBrwLin, oDlg )

    local nOrder
   local lSearch     := .F.





   if Empty( aTmpPed[ 6 ] )
      MsgStop( "Código de cliente no puede estar vacío para utilizar el asistente." )
      Return .F.
   end





   nOrder            := ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodCli" ) )

   if ( D():Atipicas( nView ) )->( dbSeek( aTmpPed[ 6 ] ) )

      AutoMeterDialog( oDlg )

      SetTotalAutoMeterDialog( ( D():Atipicas( nView ) )->( LastRec() ) )

      while ( D():Atipicas( nView ) )->cCodCli == aTmpPed[ 6 ] .AND. !( D():Atipicas( nView ) )->( Eof() )

         if lConditionAtipica( nil, D():Atipicas( nView ) ) .AND. ( D():Atipicas( nView ) )->lAplPed

            AppendDatosAtipicas( aTmpPed )

         end

         SetAutoMeterDialog( ( D():Atipicas( nView ) )->( Recno() ) )

         ( D():Atipicas( nView ) )->( dbSkip() )

      end

      EndAutoMeterDialog( oDlg )

   end





   if !lSearch

      if !Empty( aTmpPed[ 64 ] )

         ( D():Atipicas( nView ) )->( OrdSetFocus( "cCodGrp" ) )

         if ( D():Atipicas( nView ) )->( dbSeek( aTmpPed[ 64 ] ) )

            AutoMeterDialog( oDlg )

            SetTotalAutoMeterDialog( ( D():Atipicas( nView ) )->( LastRec() ) )

            while ( D():Atipicas( nView ) )->cCodGrp == aTmpPed[ 64 ] .AND. !( D():Atipicas( nView ) )->( Eof() )

               if lConditionAtipica( nil, D():Atipicas( nView ) ) .AND. ( D():Atipicas( nView ) )->lAplAlb

                  AppendDatosAtipicas( aTmpPed )

               end

               SetAutoMeterDialog( ( D():Atipicas( nView ) )->( Recno() ) )

               ( D():Atipicas( nView ) )->( dbSkip() )

            end

            EndAutoMeterDialog( oDlg )

         end

         ( D():Atipicas( nView ) )->( OrdSetFocus( nOrder ) )

      end

   end



   RecalculaTotal( aTmpPed )

   if !Empty( oBrwLin )
      oBrwLin:GoTop()
      oBrwLin:Refresh()
   end

Return .T.



Static Function AppendDatosAtipicas( aTmpPed )

   local nPrecioAtipica
   local hAtipica

   if !dbSeekInOrd( ( D():Atipicas( nView ) )->cCodArt, "cRef", dbfTmpLin )


      if ( D():Articulos( nView ) )->( dbSeek( ( D():Atipicas( nView ) )->cCodArt ) ) .AND. !( D():Articulos( nView ) )->lObs

         ( dbfTmpLin )->( dbAppend() )

         ( dbfTmpLin )->nNumLin        := nLastNum( dbfTmpLin )
         ( dbfTmpLin )->cRef           := ( D():Atipicas( nView ) )->cCodArt
         ( dbfTmpLin )->cCodPr1        := ( D():Atipicas( nView ) )->cCodPr1
         ( dbfTmpLin )->cCodPr2        := ( D():Atipicas( nView ) )->cCodPr2
         ( dbfTmpLin )->cValPr1        := ( D():Atipicas( nView ) )->cValPr1
         ( dbfTmpLin )->cValPr2        := ( D():Atipicas( nView ) )->cValPr2
         ( dbfTmpLin )->nCosDiv        := ( D():Atipicas( nView ) )->nPrcCom
         ( dbfTmpLin )->cAlmLin        := aTmpPed[ 17 ]
         ( dbfTmpLin )->lIvaLin        := aTmpPed[ 51 ]
         ( dbfTmpLin )->nTarLin        := oGetTarifa:getTarifa()
         ( dbfTmpLin )->nCanEnt        := 1
         ( dbfTmpLin )->nUniCaja       := 0
         ( dbfTmpLin )->lFromAtp       := .T.



         ( dbfTmpLin )->cDetalle       := ( D():Articulos( nView ) )->Nombre

         if aTmpPed[ 50 ] <= 2
            ( dbfTmpLin )->nIva        := nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )
         end

         ( dbfTmpLin )->cUnidad        := ( D():Articulos( nView ) )->cUnidad
         ( dbfTmpLin )->nCtlStk        := ( D():Articulos( nView ) )->nCtlStock
         ( dbfTmpLin )->lLote          := ( D():Articulos( nView ) )->lLote
         ( dbfTmpLin )->lMsgVta        := ( D():Articulos( nView ) )->lMsgVta
         ( dbfTmpLin )->lNotVta        := ( D():Articulos( nView ) )->lNotVta
         ( dbfTmpLin )->cCodTip        := ( D():Articulos( nView ) )->cCodTip
         ( dbfTmpLin )->cCodFam        := ( D():Articulos( nView ) )->Familia
         ( dbfTmpLin )->nPesoKg        := ( D():Articulos( nView ) )->nPesoKg

         ( dbfTmpLin )->dFecUltCom     := dFechaUltimaVenta( aTmpPed[ 6 ], ( D():Atipicas( nView ) )->cCodArt, dbfAlbCliL, dbfFacCliL )
         ( dbfTmpLin )->nUniUltCom     := nUnidadesUltimaVenta( aTmpPed[ 6 ], ( D():Atipicas( nView ) )->cCodArt, dbfAlbCliL, dbfFacCliL )
         ( dbfTmpLin )->nPrcUltCom     := nPrecioUltimaVenta( aTmpPed[ 6 ], ( D():Atipicas( nView ) )->cCodArt, dbfAlbCliL, dbfFacCliL )





         hAtipica := hAtipica( hValue( dbfTmpLin, aTmpPed ) )

         if !Empty( hAtipica )

            if hhaskey( hAtipica, "nImporte" )
               if hAtipica[ "nImporte" ] <> 0
                  ( dbfTmpLin )->nPreDiv    := hAtipica[ "nImporte" ]
               else
                  ( dbfTmpLin )->nPreDiv    := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp )
               end
            end

            if hhaskey( hAtipica, "nDescuentoPorcentual" )
               ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
            end

            if hhaskey( hAtipica, "nDescuentoPromocional" )
               ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
            end

            if hhaskey( hAtipica, "nDescuentoLineal" )
               ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
            end

            if hhaskey( hAtipica, "nComisionAgente" )
               ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
            end

         end

      end

   else





      hAtipica := hAtipica( hValue( dbfTmpLin, aTmpPed ) )

      if !Empty( hAtipica )

         if hhaskey( hAtipica, "nImporte" )
            if hAtipica[ "nImporte" ] <> 0
                ( dbfTmpLin )->nPreDiv  := hAtipica[ "nImporte" ]
            else
                nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpPed[ 46 ], aTmpPed[ 51 ], D():Articulos( nView ), D():Divisas( nView ), dbfKit, D():TiposIva( nView ), , , oNewImp )
            end
         end

         if hhaskey( hAtipica, "nDescuentoPorcentual" )
            ( dbfTmpLin )->nDto     := hAtipica[ "nDescuentoPorcentual" ]
         end

         if hhaskey( hAtipica, "nDescuentoPromocional" )
            ( dbfTmpLin )->nDtoPrm  := hAtipica[ "nDescuentoPromocional" ]
         end

         if hhaskey( hAtipica, "nDescuentoLineal" )
            ( dbfTmpLin )->nDtoDiv  := hAtipica[ "nDescuentoLineal" ]
         end

         if hhaskey( hAtipica, "nComisionAgente" )
            ( dbfTmpLin )->nComAge  := hAtipica[ "nComisionAgente" ]
         end

      end

   end

Return ( nil )



Static Function ChangeUnidades( oCol, uNewValue, nKey, aTmp, dbfTmpLin )





    if IsNum( nKey ) .AND. ( nKey <> 27 )

      if !IsNil( uNewValue )

              ( dbfTmpLin )->nUnicaja     := uNewValue

              RecalculaTotal( aTmp )

      end

    end

Return .T.



Static Function SumaUnidadLinea( aTmp )





    ( dbfTmpLin )->nUniCaja += 1

    RecalculaTotal( aTmp )

Return .T.



Static Function RestaUnidadLinea( aTmp )





    ( dbfTmpLin )->nUniCaja -= 1

    RecalculaTotal( aTmp )

Return .T.



Static Function ChangePrecio( oCol, uNewValue, nKey, aTmp, dbfTmpLin )





    if IsNum( nKey ) .AND. ( nKey <> 27 )

      if !IsNil( uNewValue )

              SetUPedCli( dbfTmpLin, uNewValue )

              RecalculaTotal( aTmp )

      end

    end

Return .T.



Static Function hValue( aTmp, aTmpPed )

   local hValue                  := {=>}

   do case
      case ValType( aTmp ) == "A"

         hValue[ "cCodigoArticulo"   ] := aTmp[ 4 ]
         hValue[ "cCodigoPropiedad1" ] := aTmp[ 5 ]
         hValue[ "cCodigoPropiedad2" ] := aTmp[ 6 ]
         hValue[ "cValorPropiedad1"  ] := aTmp[ 7 ]
         hValue[ "cValorPropiedad2"  ] := aTmp[ 8 ]
         hValue[ "cCodigoFamilia"    ] := aTmp[ 58 ]
         hValue[ "nTarifaPrecio"     ] := aTmp[ 81 ]
         hValue[ "nCajas"            ] := aTmp[ 11 ]
         hValue[ "nUnidades"         ] := aTmp[ 12 ]

      case ValType( aTmp ) == "C"

         hValue[ "cCodigoArticulo"   ] := ( aTmp )->cRef
         hValue[ "cCodigoPropiedad1" ] := ( aTmp )->cCodPr1
         hValue[ "cCodigoPropiedad2" ] := ( aTmp )->cCodPr2
         hValue[ "cValorPropiedad1"  ] := ( aTmp )->cValPr1
         hValue[ "cValorPropiedad2"  ] := ( aTmp )->cValPr2
         hValue[ "cCodigoFamilia"    ] := ( aTmp )->cCodFam
         hValue[ "nTarifaPrecio"     ] := ( aTmp )->nTarLin
         hValue[ "nCajas"            ] := ( aTmp )->nCanPed
         hValue[ "nUnidades"         ] := ( aTmp )->nUniCaja

   end

   do case
      case ValType( aTmpPed ) == "A"

         hValue[ "cCodigoCliente"    ] := aTmpPed[ 6 ]
         hValue[ "cCodigoGrupo"      ] := aTmpPed[ 64 ]
         hValue[ "lIvaIncluido"      ] := aTmpPed[ 51 ]
         hValue[ "dFecha"            ] := aTmpPed[ 5 ]
         hValue[ "nDescuentoTarifa"  ] := aTmpPed[ 100 ]

      case ValType( aTmpPed ) == "C"

         hValue[ "cCodigoCliente"    ] := ( aTmpPed )->cCodCli
         hValue[ "cCodigoGrupo"      ] := ( aTmpPed )->cCodGrp
         hValue[ "lIvaIncluido"      ] := ( aTmpPed )->lIvaInc
         hValue[ "dFecha"            ] := ( aTmpPed )->dFecPed
         hValue[ "nDescuentoTarifa"  ] := ( aTmpPed )->nDtoTarifa

   end

   hValue[ "nTipoDocumento"         ] := "09"
   hValue[ "nView"                  ] := nView

Return ( hValue )



Static Function ImprimirSeriesPedidosClientes( nDevice, lExt )

   local aStatus
   local oPrinter
   local cFormato

   If( nDevice == nil, nDevice := 1, ) ;
   If( lExt == nil, lExt := .F., ) ;



   oPrinter          := PrintSeries():New( nView ):SetVentas()



   oPrinter:Serie(      ( D():PedidosClientes( nView ) )->cSerPed )
   oPrinter:Documento(  ( D():PedidosClientes( nView ) )->nNumPed )
   oPrinter:Sufijo(     ( D():PedidosClientes( nView ) )->cSufPed )

   if lExt

      oPrinter:oFechaInicio:cText( ( D():PedidosClientes( nView ) )->dFecPed )
      oPrinter:oFechaFin:cText( ( D():PedidosClientes( nView ) )->dFecPed )

   end

   oPrinter:oFormatoDocumento:TypeDocumento( "PC" )



   cFormato          := cFormatoDocumento( ( D():PedidosClientes( nView ) )->cSerPed, "nPedCli", D():Contadores( nView ) )
   if empty( cFormato )
      cFormato       := cFirstDoc( "PC", D():Documentos( nView ) )
   end
   oPrinter:oFormatoDocumento:cText( cFormato )



   aStatus           := D():GetInitStatus( "PedCliT", nView )

   oPrinter:bInit    := {||   ( D():PedidosClientes( nView ) )->( dbSeek( oPrinter:DocumentoInicio(), .T. ) ) }


   oPrinter:bWhile   := {||   oPrinter:InRangeDocumento( D():PedidosClientesId( nView ) )                  .AND.  ( D():PedidosClientes( nView ) )->( !eof() ) }




   oPrinter:bFor     := {||   oPrinter:InRangeFecha( ( D():PedidosClientes( nView ) )->dFecPed )           .AND.  oPrinter:InRangeCliente( ( D():PedidosClientes( nView ) )->cCodCli )         .AND.  oPrinter:InRangeAgente( ( D():PedidosClientes( nView ) )->cCodAge )         .AND.  oPrinter:InRangeGrupoCliente( retGrpCli( ( D():PedidosClientes( nView ) )->cCodCli, D():Clientes( nView ) ) ) }

   oPrinter:bSkip    := {||   ( D():PedidosClientes( nView ) )->( dbSkip() ) }





   oPrinter:bAction  := {||   GenPedCli(  nDevice, "Imprimiendo documento : " + D():PedidosClientesId( nView ), oPrinter:oFormatoDocumento:uGetValue, oPrinter:oImpresora:uGetValue, if( !oPrinter:oCopias:lCopiasPredeterminadas, oPrinter:oCopias:uGetValue, ) ) }

   oPrinter:bStart   := {||   if( lExt, oPrinter:DisableRange(), ) }



   oPrinter:Resource():End()



   D():SetStatus( "PedCliT", nView, aStatus )

   if !Empty( oWndBrw )
      oWndBrw:Refresh()
   end

Return .T.












FUNCTION PedCliWeb()

   PedCli( "01056", oWnd(), nil, nil, nil, .T. )

Return .T.



FUNCTION aTotPedCli( cPedido, cPedCliT, cPedCliL, cIva, cDiv, cFormaPago, cDivRet )

   nTotPedCli( cPedido, cPedCliT, cPedCliL, cIva, cDiv, cFormaPago, nil, cDivRet, .F. )

RETURN ( { nTotNet, nTotIva, nTotReq, nTotPed, nTotPnt, nTotTrn, nTotAge, nTotCos } )



FUNCTION BrwPedCli( oGet, cPedCliT, cPedCliL, cdbfIva, cdbfDiv, dbfFPago, oIva )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
    local nOrd     := GetBrwOpt( "BrwPedCli" )
    local nOrdAnt
    local nRecAnt
    local oCbxOrd
    local aCbxOrd  := { "Número", "Fecha", "Cliente", "Nombre" }
    local cCbxOrd

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]
   nOrdAnt        := ( cPedCliT )->( OrdSetFocus( nOrd ) )
   nRecAnt        := ( cPedCliT )->( Recno() )

   ( cPedCliT )->( dbSetFilter( {|| Field->nEstado <= 2 }, "nEstado <= 2" ) )
   ( cPedCliT )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Pedidos de clientes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, cPedCliT ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cPedCliT, .T., nil, .F. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( cPedCliT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := cPedCliT
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Pedido de cliente.Browse"

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Es.Estado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( ( cPedCliT )->nEstado == 1 ) }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_shape_square_12", "gc_delete_12" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| aTipPed[ if( ( cPedCliT )->lAlquiler, 2, 1  ) ] }
         :nWidth           := 50
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( cPedCliT )->cSerPed + "/" + Alltrim( Str( ( cPedCliT )->nNumPed ) ) + "/" + ( cPedCliT )->cSufPed }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecPed"
         :bEditValue       := {|| dtoc( ( cPedCliT )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( cPedCliT )->cCodCli ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| AllTrim( ( cPedCliT )->cNomCli ) }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| ( cPedCliT )->nTotPed }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 500,, oDlg,,, .F., {||     .F.},,, .F. )




        TButton():ReDefine( 501,, oDlg,,, .F., {||     .F.},,, .F. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13, {|| oDlg:end( 1 ) } )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBrw:Load() )}, oDlg:bRClicked,,, )

   DestroyFastFilter( cPedCliT )

   SetBrwOpt( "BrwPedCli", ( cPedCliT )->( OrdNumber() ) )

   if oDlg:nResult == 1
      oGet:cText( ( cPedCliT )->cSerPed + Str( ( cPedCliT )->nNumPed ) + ( cPedCliT )->cSufPed )
      oGet:lValid()
      oIva:Click( ( cPedCliT )->lIvaInc ):Refresh()
   end

   ( cPedCliT )->( dbClearFilter() )
   ( cPedCliT )->( OrdSetFocus( nOrdAnt ) )
   ( cPedCliT )->( dbGoTo( nRecAnt ) )

RETURN ( oDlg:nResult == 1 )



FUNCTION nImpUPedCli( uPedCliT, cPedCliL, nDec, nVdv, cPouDiv )

   local nCalculo
   local lIvaInc

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotUPedCli( cPedCliL, nDec, nVdv )

   if IsArray( uPedCliT )

      nCalculo       -= Round( nCalculo * uPedCliT[ 30 ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uPedCliT[ 32    ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uPedCliT[ 34 ]  / 100, nDec )
      nCalculo       -= Round( nCalculo * uPedCliT[ 36 ]  / 100, nDec )

      lIvaInc        := uPedCliT[ 51 ]

   else

      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoEsp / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDpp    / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoUno / 100, nDec )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoDos / 100, nDec )

      lIvaInc        := ( uPedCliT )->lIvaInc

   end

   if ( cPedCliL )->nIva <> 0 .AND. !lIvaInc
      nCalculo         += Round( nCalculo * ( cPedCliL )->nIva / 100, nDec )
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nBrtLPedCli( uPedCliT, uTmpLin, nDec, nRec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( nDec == nil, nDec := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nImpUPedCli( uPedCliT, uTmpLin, nDec, nVdv, cPorDiv )
   nCalculo          *= nTotNPedCli( uTmpLin )

   nCalculo          := Round( nCalculo / nVdv, nRec )

Return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nIvaUPedCli( dbfTmpLin, nDec, nVdv )

   local nCalculo

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUPedCli( dbfTmpLin, nDec, nVdv )
   nCalculo       := nCalculo * ( dbfTmpLin )->nIva / 100

   if nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION cDesPedCli( cPedCliL )

   If( cPedCliL == nil, cPedCliL := D():PedidosClientesLineas( nView ), ) ;

RETURN ( Descrip( cPedCliL ) )



FUNCTION cDesPedCliLeng( cPedCliL, cArtLeng )

   If( cPedCliL == nil, cPedCliL := D():PedidosClientesLineas( nView ), ) ;
   If( cArtLeng == nil, cArtLeng := D():ArticuloLenguaje( nView ), ) ;

RETURN ( DescripLeng( cPedCliL, , cArtLeng ) )



FUNCTION nIvaLPedCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo    := 0

   if ( dbfLin )->nRegIva <= 1

      nCalculo          := nTotLPedCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

      if !( dbfLin )->lIvaLin
         nCalculo       := nCalculo * ( dbfLin )->nIva / 100
      else
         nCalculo       -= nCalculo / ( 1 + ( dbfLin )->nIva / 100 )
      end

   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION Pre2Ped( cNumPre )

   local cNumPed

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.Dbf" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   ( dbfPedCliT )->( OrdSetFocus( 6 ) )

   if ( dbfPedCliT )->( dbSeek( cNumPre ) )
      cNumPed     := ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed
   end

   if !Empty( cNumPed )
      EdtPedCli( cNumPed )
   else
      msgStop( "No hay pedido asociado" )
   end

   ( dbfPedCliT )->( dbCloseArea() )

RETURN NIL



STATIC FUNCTION cPreCli( aTmp, aGet, oBrw, nMode )

   local lValid   := .F.
   local cNumPre  := aGet[ 45 ]:varGet()

   if nMode <> 1 .OR. Empty( cNumPre )
      return .T.
   end

   IF ( dbfPreCLiT )->( dbSeek( cNumPre ) )

      IF ( dbfPreCLiT )->lEstado

         MsgStop( "Pesupuesto ya en pedidos" )
         lValid   := .F.

        ELSE

         aGet[45]:bWhen := {|| .F. }

         aGet[6]:cText( ( dbfPreCLiT )->CCODCLI )
            aGet[6]:bWhen    := {|| .F. }

         aGet[7]:cText( ( dbfPreCLiT )->CNOMCLI )
         aGet[8]:cText( ( dbfPreCLiT )->CDIRCLI )
         aGet[9]:cText( ( dbfPreCLiT )->CPOBCLI )
         aGet[10]:cText( ( dbfPreCLiT )->CPRVCLI )
         aGet[11]:cText( ( dbfPreCLiT )->CPOSCLI )
         aGet[12]:cText( ( dbfPreCLiT )->CDNICLI )
         aGet[85]:cText( ( dbfPreCLiT )->CTLFCLI )

         aGet[18]:cText( ( dbfPreCLiT )->cCodCaj )
         aGet[18]:lValid()

         aGet[17]:cText( ( dbfPreCLiT )->CCODALM )
            aGet[17]:lValid()

         aGet[19]:cText( ( dbfPreCLiT )->CCODPGO )
         aGet[19]:lValid()

         aGet[14]:cText( ( dbfPreCLiT )->CCODAGE )
            aGet[14]:lValid()

         aGet[43]:cText( ( dbfPreCliT )->nPctComAge )

         aGet[16]:cText( ( dbfPreCLiT)->CCODTAR )
            aGet[16]:lValid()

         aGet[15]:cText( ( dbfPreCLiT)->CCODOBR )
            aGet[15]:lValid()

         aGet[42]:Click( ( dbfPreCLiT )->lRecargo ):Refresh()
         aGet[91 ]:Click( ( dbfPreCLiT )->lOperPv ):Refresh()
         aGet[51 ]:Click( ( dbfPreCliT )->lIvaInc ):Refresh()





         aGet[60]:cText( ( dbfPreCLiT )->cRetMat )
         aGet[24]:cText( ( dbfPreCliT )->cCondEnt )
         aGet[25]:cText( ( dbfPreCLiT )->mComEnt )
         aGet[26]:cText( ( dbfPreCLiT )->mObserv )





         aGet[ 29 ]:cText( ( dbfPreCLiT )->cDtoEsp )
         aGet[ 31    ]:cText( ( dbfPreCLiT )->cDpp    )
         aGet[ 30 ]:cText( ( dbfPreCLiT )->nDtoEsp )
         aGet[ 32    ]:cText( ( dbfPreCLiT )->nDpp    )
         aGet[ 33 ]:cText( ( dbfPreCLiT )->cDtoUno )
         aGet[ 34 ]:cText( ( dbfPreCLiT )->nDtoUno )
         aGet[ 35 ]:cText( ( dbfPreCLiT )->cDtoDos )
         aGet[ 36 ]:cText( ( dbfPreCLiT )->nDtoDos )
         aGet[ 76 ]:cText( ( dbfPreCLiT )->cManObr )
         aGet[ 52 ]:cText( ( dbfPreCLiT )->nIvaMan )
         aGet[ 53 ]:cText( ( dbfPreCLiT )->nManObr )
         aGet[ 44 ]:cText( ( dbfPreCliT )->nBultos )





         aTmp[ 64 ]     := ( dbfPreCliT )->cCodGrp
         aTmp[ 13 ]     := ( dbfPreCliT )->lModCli
         aTmp[ 91 ]     := ( dbfPreCliT )->lOperPv





         aTmp[ 73 ]   := ( dbfPreCliT )->lAlquiler
         aTmp[ 74  ]   := ( dbfPreCliT )->dFecEntr
         aTmp[ 75   ]   := ( dbfPreCliT )->dFecSal

         aTmp[ 50   ]   := ( dbfPreCliT )->nRegIva





         if dbLock( dbfPreCLiT )
            ( dbfPreCLiT )->lEstado := .T.
            ( dbfPreCLiT )->( dbUnLock() )
         end

         if ( dbfPreCLiL )->( dbSeek( cNumPre ) )

            while ( ( dbfPreCLiL )->cSerPre + Str( ( dbfPreCLiL )->nNumPre ) + ( dbfPreCLiL )->cSufPre == cNumPre )

               (dbfTmpLin)->( dbAppend() )

               (dbfTmpLin)->nNumPed    := 0
               (dbfTmpLin)->nNumLin    := (dbfPreCLiL)->nNumLin
               (dbfTmpLin)->nPosPrint  := (dbfPreCLiL)->nPosPrint
               (dbfTmpLin)->cRef       := (dbfPreCliL)->cRef
               (dbfTmpLin)->cDetalle   := (dbfPreCLiL)->cDetalle
               (dbfTmpLin)->mLngDes    := (dbfPreCLiL)->mLngDes
               (dbfTmpLin)->mNumSer    := (dbfPreCLiL)->mNumSer
               (dbfTmpLin)->nPreDiv    := (dbfPreCLiL)->nPreDiv
               (dbfTmpLin)->nPntVer    := (dbfPreCLiL)->nPntVer
               (dbfTmpLin)->nImpTrn    := (dbfPreCLiL)->nImpTrn
               (dbfTmpLin)->nCanPed    := (dbfPreCLiL)->nCanPre
               (dbfTmpLin)->nUniCaja   := (dbfPreCLiL)->nUniCaja
               (dbfTmpLin)->nUndKit    := (dbfPreCLiL)->nUndKit
               (dbfTmpLin)->nPesOkg    := (dbfPreCLiL)->nPesOkg
               (dbfTmpLin)->cPesoKg    := (dbfPreCLiL)->cPesoKg
               (dbfTmpLin)->cUnidad    := (dbfPreCLiL)->cUnidad
               (dbfTmpLin)->nVolumen   := (dbfPreCLiL)->nVolumen
               (dbfTmpLin)->cVolumen   := (dbfPreCLiL)->cVolumen
               (dbfTmpLin)->nCanEnt    := (dbfPreCLiL)->nCanEnt
               (dbfTmpLin)->nIva       := (dbfpreclil)->nIva
               (dbfTmpLin)->nReq       := (dbfpreclil)->nReq
               (dbfTmpLin)->cUniDad    := (dbfPreCLiL)->cUniDad
               (dbfTmpLin)->nDto       := (dbfPreCliL)->nDto
               (dbfTmpLin)->nDtoPrm    := (dbfPreCLiL)->nDtoPrm
               (dbfTmpLin)->nComAge    := (dbfPreCLiL)->nComAge
               (dbfTmpLin)->lTotLin    := (dbfPreCLiL)->lTotLin
               (dbfTmpLin)->nDtoDiv    := (dbfPreCLiL)->nDtoDiv
               (dbfTmpLin)->nCtlStk    := (dbfPreCLiL)->nCtlStk
               (dbfTmpLin)->dFecHa     := (dbfPreCLiL)->dFecHa
               (dbfTmpLin)->cAlmLin    := (dbfPreCLiL)->cAlmLin
               (dbfTmpLin)->nValImp    := (dbfPreCLiL)->nValImp
               (dbfTmpLin)->cCodImp    := (dbfPreCLiL)->cCodImp
               (dbfTmpLin)->lIvaLin    := (dbfPreCLiL)->lIvaLin
               (dbfTmpLin)->cCodPr1    := (dbfPreCliL)->cCodPr1
               (dbfTmpLin)->cCodPr2    := (dbfPreCliL)->cCodPr2
               (dbfTmpLin)->cValPr1    := (dbfPreCliL)->cValPr1
               (dbfTmpLin)->cValPr2    := (dbfPreCliL)->cValPr2
               (dbfTmpLin)->nCosDiv    := (dbfPreCliL)->nCosDiv
               (dbfTmpLin)->lLote      := (dbfPreclil)->llote
               (dbfTmpLin)->nLote      := (dbfPreclil)->nlote
               (dbfTmpLin)->cLote      := (dbfPreclil)->clote
               (dbfTmpLin)->lKitArt    := (dbfPreCliL)->lKitArt
               (dbfTmpLin)->lKitChl    := (dbfPreCliL)->lKitChl
               (dbfTmpLin)->lKitPrc    := (dbfPreCliL)->lKitPrc
               (dbfTmpLin)->lMsgVta    := (dbfPreCliL)->lMsgVta
               (dbfTmpLin)->lNotVta    := (dbfPreCliL)->lNotVta
               (dbfTmpLin)->lImpLin    := (dbfPreCliL)->lImpLin
               (dbfTmpLin)->cCodTip    := (dbfPreCliL)->cCodTip
               (dbfTmpLin)->mObsLin    := (dbfPreCliL)->mObsLin
               (dbfTmpLin)->Descrip    := (dbfPreCliL)->Descrip
               (dbfTmpLin)->cCodPrv    := (dbfPreCliL)->cCodPrv
               (dbfTmpLin)->cImagen    := (dbfPreCliL)->cImagen
               (dbfTmpLin)->cCodFam    := (dbfPreCliL)->cCodFam
               (dbfTmpLin)->cGrpFam    := (dbfPreCliL)->cGrpFam
               (dbfTmpLin)->cRefPrv    := (dbfPreCliL)->cRefPrv
               (dbfTmpLin)->dFecEnt    := (dbfPreCliL)->dFecEnt
               (dbfTmpLin)->dFecSal    := (dbfPreCliL)->dFecSal
               (dbfTmpLin)->nPreAlq    := (dbfPreCliL)->nPreAlq
               (dbfTmpLin)->lAlquiler  := (dbfPreCliL)->lAlquiler
               (dbfTmpLin)->cUnidad    := (dbfPreCliL)->cUnidad
               (dbfTmpLin)->nNumMed    := (dbfPreCliL)->nNumMed
               (dbfTmpLin)->nMedUno    := (dbfPreCliL)->nMedUno
               (dbfTmpLin)->nMedDos    := (dbfPreCliL)->nMedDos
               (dbfTmpLin)->nMedTre    := (dbfPreCliL)->nMedTre
               (dbfTmpLin)->nPuntos    := (dbfPreCliL)->nPuntos
               (dbfTmpLin)->nValPnt    := (dbfPreCliL)->nValPnt
               (dbfTmpLin)->nDtoPnt    := (dbfPreCliL)->nDtoPnt
               (dbfTmpLin)->nIncPnt    := (dbfPreCliL)->nIncPnt
               (dbfTmpLin)->lLinOfe    := (dbfPreCliL)->lLinOfe
               (dbfTmpLin)->nBultos     := (dbfPreCliL)->nBultos
               (dbfTmpLin)->cFormato     := (dbfPreCliL)->cFormato
               (dbfTmpLin)->cObrLin    := (dbfPreCliL)->cObrLin
               (dbfTmpLin)->cRefAux    := (dbfPreCliL)->cRefAux
               (dbfTmpLin)->cRefAux2   := (dbfPreCliL)->cRefAux2
               (dbfTmpLin)->cCtrCoste  := (dbfPreCliL)->cCtrCoste
               (dbfTmpLin)->cTipCtr    := (dbfPreCliL)->cTipCtr
               (dbfTmpLin)->cTerCtr    := (dbfPreCliL)->cTerCtr

               (dbfPreCliL)->( dbSkip() )

            end

            ( dbfTmpLin )->( dbGoTop() )





            if ( dbfPreCliI )->( dbSeek( cNumPre ) )

               while ( dbfPreCliI )->cSerPre + Str( ( dbfPreCliI )->nNumPre ) + ( dbfPreCliI )->cSufPre == cNumPre .AND. !( dbfPreCliI )->( Eof() )
                  dbPass( dbfPreCliI, dbfTmpInc, .T. )
                  ( dbfPreCliI )->( dbSkip() )
               end

            end

            ( dbfPreCliI )->( dbGoTop() )



            if ( dbfPreCliD )->( dbSeek( cNumPre ) )

               while ( dbfPreCliD )->cSerPre + Str( ( dbfPreCliD )->nNumPre ) + ( dbfPreCliD )->cSufPre == cNumPre .AND. !( dbfPreCliD )->( Eof() )
                  dbPass( dbfPreCliD, dbfTmpDoc, .T. )
                  ( dbfPreCliD )->( dbSkip() )
               end

            end

            ( dbfPreCliD )->( dbGoTop() )

            oBrw:Refresh()
            oBrw:SetFocus()

         end

         lValid   := .T.

      end

   else

      msgStop( "Presupuesto no existe" )

   end

   RecalculaTotal( aTmp )

RETURN lValid



FUNCTION EdmPedCli( cCodRut, cPathTo, oStru, aSucces )

   local cLine
   local cFilEdm
   local oFilEdm
   local dFecPed
   local cCodCli
   local nNumPed

   If( cCodRut == nil, cCodRut := "001", ) ;
   If( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;

   cCodRut           := SubStr( cCodRut, -3 )

   cFilEdm           := cPathTo + "PEDID" + cCodRut + ".PSI"





   if !file( cFilEdm )
      msgWait( "No existe el fichero " + cFilEdm, "Atención", 1 )
      return nil
   end

   oFilEdm           := TTxtFile():New( cFilEdm )





   OpenFiles()

   oStru:oMetDos:cText   := "Ped. Clientes"
   oStru:oMetDos:SetTotal( oFilEdm:nTLines )





   cLine    := oFilEdm:cLine





   while ! oFilEdm:lEoF()





      dFecPed  := Ctod( SubStr( cLine,  1, 10 ) )
      cCodCli  := SubStr( cLine, 11,  7 )

      if ( D():Clientes( nView ) )->( dbSeek( cCodCli ) )

         nNumPed                    := nNewDoc( ( D():Clientes( nView ) )->Serie, D():PedidosClientes( nView ), "NPEDCLI", , D():Contadores( nView ) )
         ( D():PedidosClientes( nView ) )->( dbAppend() )
         ( D():PedidosClientes( nView ) )->cSerPed    := ( D():Clientes( nView ) )->Serie
         ( D():PedidosClientes( nView ) )->cSufPed    := RetSufEmp()
         ( D():PedidosClientes( nView ) )->nNumPed    := nNumPed
         ( D():PedidosClientes( nView ) )->dFecPed    := dFecPed
         ( D():PedidosClientes( nView ) )->cCodAlm    := Application():codigoAlmacen()
         ( D():PedidosClientes( nView ) )->cDivPed    := cDivEmp()
         ( D():PedidosClientes( nView ) )->nVdvPed    := nChgDiv( ( D():PedidosClientes( nView ) )->cDivPed, D():Divisas( nView ) )
         ( D():PedidosClientes( nView ) )->nEstado    := 1
         ( D():PedidosClientes( nView ) )->cCodCli    := ( D():Clientes( nView ) )->Cod
         ( D():PedidosClientes( nView ) )->cNomCli    := ( D():Clientes( nView ) )->Titulo
         ( D():PedidosClientes( nView ) )->cDirCli    := ( D():Clientes( nView ) )->Domicilio
         ( D():PedidosClientes( nView ) )->cPobCli    := ( D():Clientes( nView ) )->Poblacion
         ( D():PedidosClientes( nView ) )->cPrvCli    := ( D():Clientes( nView ) )->Provincia
         ( D():PedidosClientes( nView ) )->cPosCli    := ( D():Clientes( nView ) )->CodPostal
         ( D():PedidosClientes( nView ) )->cDniCli    := ( D():Clientes( nView ) )->Nif
         ( D():PedidosClientes( nView ) )->cCodTar    := ( D():Clientes( nView ) )->cCodTar
         ( D():PedidosClientes( nView ) )->cCodPgo    := ( D():Clientes( nView ) )->CodPago
         ( D():PedidosClientes( nView ) )->cCodAge    := ( D():Clientes( nView ) )->cAgente
         ( D():PedidosClientes( nView ) )->cCodRut    := ( D():Clientes( nView ) )->cCodRut
         ( D():PedidosClientes( nView ) )->nTarifa    := ( D():Clientes( nView ) )->nTarifa
         ( D():PedidosClientes( nView ) )->lRecargo   := ( D():Clientes( nView ) )->lReq
         ( D():PedidosClientes( nView ) )->lOperPv    := ( D():Clientes( nView ) )->lPntVer
         ( D():PedidosClientes( nView ) )->cDtoEsp    := ( D():Clientes( nView ) )->cDtoEsp
         ( D():PedidosClientes( nView ) )->cDpp       := ( D():Clientes( nView ) )->cDpp
         ( D():PedidosClientes( nView ) )->nDtoEsp    := ( D():Clientes( nView ) )->nDtoEsp
         ( D():PedidosClientes( nView ) )->nDpp       := ( D():Clientes( nView ) )->nDpp
         ( D():PedidosClientes( nView ) )->nDtoCnt    := ( D():Clientes( nView ) )->nDtoCnt
         ( D():PedidosClientes( nView ) )->nDtoRap    := ( D():Clientes( nView ) )->nDtoRap
         ( D():PedidosClientes( nView ) )->nDtoUno    := ( D():Clientes( nView ) )->nDtoCnt
         ( D():PedidosClientes( nView ) )->nDtoDos    := ( D():Clientes( nView ) )->nDtoRap

         aAdd( aSucces, { .F., "Nuevo pedido de clientes " + ( D():PedidosClientes( nView ) )->cSerPed + "/" + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + "/" + ( D():PedidosClientes( nView ) )->cSufPed } )

      end







      while dFecPed  == Ctod( SubStr( cLine, 1, 10 ) )      .AND. cCodCli  == SubStr( cLine, 11,  7 )             .AND. ! oFilEdm:lEoF()





         ( D():PedidosClientesLineas( nView ) )->( dbAppend() )
         ( D():PedidosClientesLineas( nView ) )->cSerPed := ( D():PedidosClientes( nView ) )->cSerPed
         ( D():PedidosClientesLineas( nView ) )->nNumPed := ( D():PedidosClientes( nView ) )->nNumPed
         ( D():PedidosClientesLineas( nView ) )->cSufPed := ( D():PedidosClientes( nView ) )->cSufPed
         ( D():PedidosClientesLineas( nView ) )->cRef    := Ltrim( SubStr( cLine, 18, 13 ) )
         ( D():PedidosClientesLineas( nView ) )->cDetalle:= RetFld( ( D():PedidosClientesLineas( nView ) )->cRef, D():Articulos( nView ) )
         ( D():PedidosClientesLineas( nView ) )->nPreDiv := Val( SubStr( cLine, 31,  7 ) )
         ( D():PedidosClientesLineas( nView ) )->nDtoDiv := Val( SubStr( cLine, 38,  4 ) )
         ( D():PedidosClientesLineas( nView ) )->nDto    := Val( SubStr( cLine, 42,  5 ) )
         ( D():PedidosClientesLineas( nView ) )->nCanPed := Val( SubStr( cLine, 47,  4 ) )
         ( D():PedidosClientesLineas( nView ) )->nUniCaja:= Val( SubStr( cLine, 51,  7 ) )

         oFilEdm:Skip()

         oStru:oMetDos:SetTotal( oFilEdm:nLine )





         cLine    := oFilEdm:cLine

      end

   end

   CloseFiles()

   oFilEdm:Close()

RETURN ( aSucces )



FUNCTION nDtoAtpPedCli( uPedCliT, cPedCliL, nDec, nRou, nVdv, lPntVer, lImpTrn )

   local nCalculo
   local nDtoAtp     := 0

   If( nDec == nil, nDec := 0, ) ;
   If( nRou == nil, nRou := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo          := nTotLPedCli( cPedCliL, nDec, nRou, nVdv, .T., lImpTrn, lPntVer )

   if ( uPedCliT )->nSbrAtp <= 1 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoEsp / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 2 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDpp    / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 3 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoUno / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 4 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoDos / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 5 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

RETURN ( nDtoAtp )







function nTotPdtRec( cPedido, cRef, cValPr1, cValPr2, dbfPedCliR )

   local nRec
   local bWhile
   local nTotRes        := 0

   If( dbfPedCliR == nil, dbfPedCliR := D():PedidosClientesReservas( nView ), ) ;

   nRec                 := ( dbfPedCliR )->( recno() )

   if cPedido == nil
      bWhile            := {|| !( dbfPedCliR )->( eof() ) }
      ( dbfPedCliR )->( dbgotop() )
   else
      bWhile            := {|| cPedido + ( dbfPedCliR )->cRef + ( dbfPedCliR )->cValPr1 + ( dbfPedCliR )->cValPr2 == cPedido + cRef + cValPr1 + cValPr2 .AND. !( dbfPedCliR )->( eof() ) }
      ( dbfPedCliR )->( dbseek( cPedido + cRef + cValPr1 + cValPr2 ) )
   end

   while Eval( bWhile )

      nTotRes           += nTotNResCli( dbfPedCliR )

      ( dbfPedCliR )->( dbskip() )

   end

   ( dbfPedCliR )->( dbgoto( nRec ) )

return ( nTotRes )



function dFecPdtRec( cPedido, cRef, cValPr1, cValPr2, dbfPedCliR )

   local nRec
   local dFecAct        := ctod( "" )

   If( cPedido == nil, cPedido := ( D():PedidosClientesLineas( nView ) )->cSerPed + str( ( D():PedidosClientesLineas( nView ) )->nNumPed ) + ( D():PedidosClientesLineas( nView ) )->cSufPed, ) ;
   If( cRef == nil, cRef := ( D():PedidosClientesLineas( nView ) )->cRef, ) ;
   If( cValPr1 == nil, cValPr1 := ( D():PedidosClientesLineas( nView ) )->cValPr1, ) ;
   If( cValPr2 == nil, cValPr2 := ( D():PedidosClientesLineas( nView ) )->cValPr2, ) ;
   If( dbfPedCliR == nil, dbfPedCliR := D():PedidosClientesReservas( nView ), ) ;

   nRec                 := ( dbfPedCliR )->( recno() )

   if ( dbfPedCliR )->( dbseek( cPedido + cRef + cValPr1 + cValPr2 ) )

      while ( dbfPedCliR )->cSerPed + Str( ( dbfPedCliR )->nNumPed ) + ( dbfPedCliR )->cSufPed == cPedido .AND. !( dbfPedCliR )->( eof() )

         if empty( dFecAct ) .OR. dFecAct > ( dbfPedCliR )->dFecRes
            dFecAct     := ( dbfPedCliR )->dFecRes
         end

         ( dbfPedCliR )->( dbskip() )

      end

   end

   ( dbfPedCliR )->( dbgoto( nRec ) )

return ( dFecAct )






Function nUnidadesRecibidasAlbaranesClientes( cNumPed, cCodArt, cValPr1, cValPr2, cAlbCliL )

   local aStatus
   local nUnidadades    := 0

   If( cNumPed == nil, cNumPed := ( D():PedidosClientesLineas( nView ) )->cSerPed + str( ( D():PedidosClientesLineas( nView ) )->nNumPed ) + ( D():PedidosClientesLineas( nView ) )->cSufPed, ) ;
   If( cCodArt == nil, cCodArt := ( D():PedidosClientesLineas( nView ) )->cRef, ) ;
   If( cValPr1 == nil, cValPr1 := ( D():PedidosClientesLineas( nView ) )->cValPr1, ) ;
   If( cValPr2 == nil, cValPr2 := ( D():PedidosClientesLineas( nView ) )->cValPr2, ) ;
   If( cAlbCliL == nil, cAlbCliL := D():AlbaranesClientesLineas( nView ), ) ;

   aStatus              := aGetStatus( cAlbCliL, .F. )

   ( cAlbCliL )->( ordsetfocus( "cNumPedRef" ) )
   if ( cAlbCliL )->( dbseek( cNumPed + cCodArt + cValPr1 + cValPr2 ) )

      while ( cAlbCliL )->cNumPed + ( cAlbCliL )->cRef + ( cAlbCliL )->cValPr1 + ( cAlbCliL )->cValPr2 == cNumPed + cCodArt + cValPr1 + cValPr2 .AND. !( cAlbCliL )->( eof() )

         nUnidadades    += nTotNAlbCli( cAlbCliL )

         ( cAlbCliL )->( dbskip() )

      end

   end

   SetStatus( cAlbCliL, aStatus )

Return ( nUnidadades )



Function dTmpPdtRec( cRef, cValPr1, cValPr2, dbfPedCliR )

   local nRec
   local dFecAct        := Ctod( "" )

   If( dbfPedCliR == nil, dbfPedCliR := D():PedidosClientesReservas( nView ), ) ;

   nRec                 := ( dbfPedCliR )->( Recno() )

   ( dbfPedCliR )->( dbgotop() )
   while !( dbfPedCliR )->( eof() )

      if ( dbfPedCliR )->cRef == cRef .AND. ( dbfPedCliR )->cValPr1 == cValPr1 .AND. ( dbfPedCliR )->cValPr2 == cValPr2

         if Empty( dFecAct ) .OR. dFecAct > ( dbfPedCliR )->dFecRes
            dFecAct     := ( dbfPedCliR )->dFecRes
         end

      end

      ( dbfPedCliR )->( dbskip() )

   end

   ( dbfPedCliR )->( dbgoto( nRec ) )

Return ( dFecAct )



Function dFecPedCli( cPedCli, cPedCliT )

   local dFecPed  := CtoD("")

   IF ( cPedCliT )->( dbSeek( cPedCli ) )
      dFecPed  := ( cPedCliT )->dFecPed
   end

Return ( dFecPed )



FUNCTION cNbrPedCli( cPedCli, cPedCliT )

   local cNomCli  := ""

   IF ( cPedCliT )->( dbSeek( cPedCli ) )
      cNomCli  := ( cPedCliT )->CNOMCLI
    end

RETURN ( cNomCli )






function nTotVPedCli( cCodArt, cPedCliL, nDec, nDor )

   local nTotVta  := 0
   local nRecno   := ( cPedCliL )->( Recno() )

   if ( cPedCliL )->( dbSeek( cCodArt ) )

      while ( cPedCliL )->CREF == cCodArt .AND. !( cPedCliL )->( eof() )

         if !( cPedCliL )->LTOTLIN
            nTotVta += nTotLPedCli( cPedCliL, nDec, nDor )
         end

         ( cPedCliL )->( dbSkip() )

      end

   end

   ( cPedCliL )->( dbGoTo( nRecno ) )

return ( nTotVta )



FUNCTION aDocPedCli( lEntregas )

   local aDoc        := {}

   If( lEntregas == nil, lEntregas := .F., ) ;





   aAdd( aDoc, { "Empresa",         "EM" } )
   aAdd( aDoc, { "Pedido",          "PC" } )

   if lEntregas
      aAdd( aDoc, { "Entregas a cuenta",  "EP" } )
   end

   aAdd( aDoc, { "Cliente",         "CL" } )
   aAdd( aDoc, { "Almacen",         "AL" } )
   aAdd( aDoc, { "Obras",           "OB" } )
   aAdd( aDoc, { "Rutas",           "RT" } )
   aAdd( aDoc, { "Agentes",         "AG" } )
   aAdd( aDoc, { "Divisas",         "DV" } )
   aAdd( aDoc, { "Formas de pago",  "PG" } )
   aAdd( aDoc, { "Transportistas",  "TR" } )

RETURN ( aDoc )



function aCalPedCli()




































   local aCalPedCli :=  {{"nTotArt",                                                   "N", 16,  6, "Total artículos",             "cPicUndPed",  "" }, { "nTotCaj",                                                   "N", 16,  6, "Total cajas",                 "cPicUndPed",  "" }, { "aTotIva[1,1]",                                              "N", 16,  6, "Bruto primer tipo de " + cImp(),    "cPorDivPed",  "aTotIva[1,1] != 0" }, { "aTotIva[2,1]",                                              "N", 16,  6, "Bruto segundo tipo de " + cImp(),   "cPorDivPed",  "aTotIva[2,1] != 0" }, { "aTotIva[3,1]",                                              "N", 16,  6, "Bruto tercer tipo de " + cImp(),    "cPorDivPed",  "aTotIva[3,1] != 0" }, { "aTotIva[1,2]",                                              "N", 16,  6, "Base primer tipo de " + cImp(),     "cPorDivPed",  "aTotIva[1,2] != 0" }, { "aTotIva[2,2]",                                              "N", 16,  6, "Base segundo tipo de " + cImp(),    "cPorDivPed",  "aTotIva[2,2] != 0" }, { "aTotIva[3,2]",                                              "N", 16,  6, "Base tercer tipo de " + cImp(),     "cPorDivPed",  "aTotIva[3,2] != 0" }, { "aTotIva[1,3]",                                              "N",  5,  2, "Porcentaje primer tipo " + cImp(),  "'@R 99.99%'", "aTotIva[1,3] != 0" }, { "aTotIva[2,3]",                                              "N",  5,  2, "Porcentaje segundo tipo " + cImp(), "'@R 99.99%'", "aTotIva[2,3] != 0" }, { "aTotIva[3,3]",                                              "N",  5,  2, "Porcentaje tercer tipo " + cImp(),  "'@R 99.99%'", "aTotIva[3,3] != 0" }, { "aTotIva[1,4]",                                              "N",  5,  2, "Porcentaje primer tipo RE",   "'@R 99.99%'", "aTotIva[1,4] != 0" }, { "aTotIva[2,4]",                                              "N",  5,  2, "Porcentaje segundo tipo RE",  "'@R 99.99%'", "aTotIva[2,4] != 0" }, { "aTotIva[3,4]",                                              "N",  5,  2, "Porcentaje tercer tipo RE",   "'@R 99.99%'", "aTotIva[3,4] != 0" }, { "round( aTotIva[1,2] * aTotIva[1,3] / 100, nDouDivPed )",    "N", 16,  6, "Importe primer tipo " + cImp(),     "cPorDivPed",  "aTotIva[1,2] != 0" }, { "round( aTotIva[2,2] * aTotIva[2,3] / 100, nDouDivPed )",    "N", 16,  6, "Importe segundo tipo " + cImp(),    "cPorDivPed",  "aTotIva[2,2] != 0" }, { "round( aTotIva[3,2] * aTotIva[3,3] / 100, nDouDivPed )",    "N", 16,  6, "Importe tercer tipo " + cImp(),     "cPorDivPed",  "aTotIva[3,2] != 0" }, { "round( aTotIva[1,2] * aTotIva[1,4] / 100, nDouDivPed )",    "N", 16,  6, "Importe primer RE",           "cPorDivPed",  "aTotIva[1,2] != 0" }, { "round( aTotIva[2,2] * aTotIva[2,4] / 100, nDouDivPed )",    "N", 16,  6, "Importe segundo RE",          "cPorDivPed",  "aTotIva[2,2] != 0" }, { "round( aTotIva[3,2] * aTotIva[3,4] / 100, nDouDivPed )",    "N", 16,  6, "Importe tercer RE",           "cPorDivPed",  "aTotIva[3,2] != 0" }, { "nTotBrt",                                                   "N", 16,  6, "Total bruto",                 "cPorDivPed",  "lEnd" }, { "nTotDto",                                                   "N", 16,  6, "Total descuento",             "cPorDivPed",  "lEnd" }, { "nTotDpp",                                                   "N", 16,  6, "Total descuento pronto pago", "cPorDivPed",  "lEnd" }, { "nTotNet",                                                   "N", 16,  6, "Total neto",                  "cPorDivPed",  "lEnd" }, { "nTotIva",                                                   "N", 16,  6, "Total " + cImp(),                   "cPorDivPed",  "lEnd" }, { "nTotIvm",                                                   "N", 16,  6, "Total IVMH",                  "cPorDivPed",  "lEnd" }, { "nTotReq",                                                   "N", 16,  6, "Total RE",                    "cPorDivPed",  "lEnd" }, { "nTotPed",                                                   "N", 16,  6, "Total pedido",                "cPorDivPed",  "lEnd" }, { "nTotPag",                                                   "N", 16,  6, "Total entregas a cuenta",     "cPorDivPed",  "lEnd" }, { "nTotCos",                                                   "N", 16,  6, "Total costo",                 "cPorDivPed",  "lEnd" }, { "nTotPes",                                                   "N", 16,  6, "Total peso",                  "'@E 99,999.99'","lEnd" }, { "nTotPage",                                                  "N", 16,  6, "Total página",                "'cPorDivPed'", "!lEnd" }, { "nImpEuros( nTotPed, (cDbf)->cDivPed, cDbfDiv )",            "N", 16,  6, "Total pedido (Euros)",        "",            "lEnd" }, { "nImpPesetas( nTotPed, (cDbf)->cDivPed, cDbfDiv )",          "N", 16,  6, "Total pedido (Pesetas)",      "",            "lEnd" }, { "nPagina",                                                   "N",  2,  0, "Numero de página",            "'99'",        "" }, { "lEnd",                                                      "L",  1,  0, "Fin del documento",           "",            "" } }

return ( aCalPedCli )



function aCocPedCli()






   local aCocPedCli  := {{"Descrip( cDbfCol )",                                         "C", 50, 0, "Detalle del artículo",       "",            "Descripción", "" }, { "nTotNPedCli( cDbfCol ) )",                                   "N", 16, 6, "Total unidades",             "cPicUndPed",  "Unds.",       "" }, { "nTotUPedCli( cDbfCol, nRouDivPed, nVdvDivPed )",             "N", 16, 6, "Precio unitario de pedido",  "cPouDivPed",  "Importe",     "" }, { "nTotLPedCli( cDbfCol, nDouDivPed, nRouDivPed )",             "N", 16, 6, "Total línea de pedido",      "cPorDivPed",  "Total",       "" }, { "nTotFPedCli( cDbfCol, nDouDivPed, nRouDivPed )",             "N", 16, 6, "Total final línea de pedido","cPorDivPed",  "Total",       "" }, { "cFrasePublicitaria( cDbfCol )",                              "C", 50, 0, "Texto de frase publicitaria","",            "Publicidad",  "" } }


return ( aCocPedCli )



FUNCTION QuiPedCli()

   local nOrdDet
   local nOrdPgo
   local nOrdRes
   local nOrdInc
   local nOrdDoc
   local nOrdEst

   if ( D():PedidosClientes( nView ) )->lCloPed .AND. !oUser():lAdministrador()
      msgStop( "Solo puede eliminar pedidos cerrados los administradores." )
      Return .F.
   end

   nOrdDet            := ( D():PedidosClientesLineas( nView ) )->( OrdSetFocus( "NNUMPED" ) )
   nOrdPgo            := ( D():PedidosClientesPagos( nView ) )->( OrdSetFocus( "NNUMPED" ) )
   nOrdRes            := ( D():PedidosClientesReservas( nView ) )->( OrdSetFocus( "NNUMPED" ) )
   nOrdInc            := ( dbfPedCliI )->( OrdSetFocus( "NNUMPED" ) )
   nOrdDoc           := ( dbfPedCliD )->( OrdSetFocus( "NNUMPED" ) )
   nOrdEst           := ( D():PedidosClientesSituaciones( nView ) )->( OrdSetFocus( "NNUMPED" ) )





   if !Empty( dbfPreCliT )
      if dbSeekInOrd( ( D():PedidosClientes( nView ) )->cNumPre, "nNumPre", dbfPreCliT ) .AND. ( dbfPreCliT )->( dbRLock() )
         ( dbfPreCliT )->lEstado := .F.
         ( dbfPreCliT )->( dbUnLock() )
      end
   end





   while ( D():PedidosClientesLineas( nView ) )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) ) .AND. !( D():PedidosClientesLineas( nView ) )->( eof() )

      if dbLock( D():PedidosClientesLineas( nView ) )
         ( D():PedidosClientesLineas( nView ) )->( dbDelete() )
         ( D():PedidosClientesLineas( nView ) )->( dbUnLock() )
      end

   end





   while ( D():PedidosClientesReservas( nView ) )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) ) .AND. !( D():PedidosClientesReservas( nView ) )->( eof() )
      if dbLock( D():PedidosClientesReservas( nView ) )
         ( D():PedidosClientesReservas( nView ) )->( dbDelete() )
         ( D():PedidosClientesReservas( nView ) )->( dbUnLock() )
      end
   end





   while ( D():PedidosClientesPagos( nView ) )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed ) ) .AND. !( D():PedidosClientesPagos( nView ) )->( eof() )
      if dbDialogLock( D():PedidosClientesPagos( nView ) )
         ( D():PedidosClientesPagos( nView ) )->( dbDelete() )
         ( D():PedidosClientesPagos( nView ) )->( dbUnLock() )
      end
   end





   while ( dbfPedCliI )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView )  )->cSufPed ) ) .AND. !( dbfPedCliI )->( eof() )
      if dbLock( dbfPedCliI )
         ( dbfPedCliI )->( dbDelete() )
         ( dbfPedCliI )->( dbUnLock() )
      end
   end





   while ( dbfPedCliD )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView )  )->cSufPed ) ) .AND. !( dbfPedCliD )->( eof() )
      if dbLock( dbfPedCliD )
         ( dbfPedCliD )->( dbDelete() )
         ( dbfPedCliD )->( dbUnLock() )
      end
   end





       while ( D():PedidosClientesSituaciones( nView ) )->( dbSeek( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView )  )->cSufPed ) ) .AND. !( D():PedidosClientesSituaciones( nView ) )->( eof() )
         if dbLock( D():PedidosClientesSituaciones( nView ) )
             ( D():PedidosClientesSituaciones( nView ) )->( dbDelete() )
             ( D():PedidosClientesSituaciones( nView ) )->( dbUnLock() )
          end
       end


   ( D():PedidosClientesLineas( nView ) )->( OrdSetFocus( nOrdDet ) )
   ( D():PedidosClientesPagos( nView ) )->( OrdSetFocus( nOrdPgo ) )
   ( D():PedidosClientesReservas( nView ) )->( OrdSetFocus( nOrdRes ) )
   ( dbfPedCliI )->( OrdSetFocus( nOrdInc ) )
   ( dbfPedCliD )->( OrdSetFocus( nOrdDoc ) )
   ( D():PedidosClientesSituaciones( nView ) )->( OrdSetFocus( nOrdEst ) )

Return ( .T. )



Function SynPedCli( cPath )

   local oError
   local oBlock
   local nOrdAnt
   local aTotPed
   local dbfArticulo
   local cdbfIva
   local dbfFamilia
   local cDbfPago
   local cDbfDiv
   local dbfPedCliR

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIL", @dbfPedCliL ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIR.DBF" ), ( cCheckArea( "PEDCLIR", @dbfPedCliR ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLII.DBF" ), ( cCheckArea( "PEDCLII", @dbfPedCliI ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIE.DBF" ), ( cCheckArea( "PEDCLIE", @dbfPedCliE ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIE.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLID.DBF" ), ( cCheckArea( "PEDCLID", @dbfPedCliD ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @cDbfPago ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @cdbfIva ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @cdbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   ( dbfPedCliT )->( ordSetFocus( 0 ) )
   ( dbfPedCliT )->( dbGoTop() )

   while !( dbfPedCliT )->( eof() )

      if Empty( ( dbfPedCliT )->cSufPed )
         ( dbfPedCliT )->cSufPed := "00"
      end

      if !Empty( ( dbfPedCliT )->cNumPre ) .AND. Len( AllTrim( ( dbfPedCliT )->cNumPre ) ) <> 12
          ( dbfPedCliT )->cNumPre := AllTrim( ( dbfPedCliT )->cNumPre ) + "00"
      end

      if !Empty( ( dbfPedCliT )->cNumAlb ) .AND. Len( AllTrim( ( dbfPedCliT )->cNumAlb ) ) <> 12
          ( dbfPedCliT )->cNumAlb := AllTrim( ( dbfPedCliT )->cNumAlb ) + "00"
      end

      if Empty( ( dbfPedCliT )->cCodCaj )
          ( dbfPedCliT )->cCodCaj := "000"
      end

      ( dbfPedCliT )->( dbSkip() )

   end


   ( dbfPedCliT )->( ordSetFocus( 1 ) )
     ( dbfPedCliT )->( dbGoTop() )

   while !( dbfPedCliT )->( eof() )





      if ( dbfPedCliT )->nTotPed == 0 .AND. dbLock( dbfPedCliT )

         aTotPed                 := aTotPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliT, dbfPedCliL, cdbfIva, cdbfDiv, cDbfPago, ( dbfPedCliT )->cDivPed )

         ( dbfPedCliT )->nTotNet := aTotPed[ 1 ]
         ( dbfPedCliT )->nTotIva := aTotPed[ 2 ]
         ( dbfPedCliT )->nTotReq := aTotPed[ 3 ]
         ( dbfPedCliT )->nTotPed := aTotPed[ 4 ]

         ( dbfPedCliT )->( dbUnLock() )

      end

      ( dbfPedCliT )->( dbSkip() )

   end



   ( dbfPedCliL )->( ordSetFocus( 0 ) )
   ( dbfPedCliL )->( dbGoTop() )

   while !( dbfPedCliL )->( eof() )

      if Empty( ( dbfPedCliL )->cSufPed )
         ( dbfPedCliL )->cSufPed := "00"
      end

      if Empty( ( dbfPedCliL )->cLote ) .AND. !Empty( ( dbfPedCliL )->nLote )
         ( dbfPedCliL )->cLote   := AllTrim( Str( ( dbfPedCliL )->nLote ) )
      end

      if ( dbfPedCliL )->lIvaLin <> RetFld( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed, dbfPedCliT, "lIvaInc" )
         ( dbfPedCliL )->lIvaLin := RetFld( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed, dbfPedCliT, "lIvaInc" )
      end

      if ( dbfPedCliL )->cCodTip <> retFld( ( dbfPedCliL )->cRef, dbfArticulo, "cCodTip", "Codigo" )
         ( dbfPedCliL )->cCodTip := retFld( ( dbfPedCliL )->cRef, dbfArticulo, "cCodTip", "Codigo" )
      end

      if Empty( ( dbfPedCliL )->cAlmLin )
         ( dbfPedCliL )->cAlmLin := RetFld( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed, dbfPedCliT, "cCodAlm" )
      end

      if !Empty( ( dbfPedCliL )->cRef ) .AND. Empty( ( dbfPedCliL )->cCodFam )
         ( dbfPedCliL )->cCodFam := RetFamArt( ( dbfPedCliL )->cRef, dbfArticulo )
      end

      if !Empty( ( dbfPedCliL )->cRef ) .AND. !Empty( ( dbfPedCliL )->cGrpFam )
         ( dbfPedCliL )->cGrpFam := cGruFam( ( dbfPedCliL )->cCodFam, dbfFamilia )
      end

      if Empty( ( dbfPedCliL )->nReq )
         ( dbfPedCliL )->nReq    := nPReq( cdbfIva, ( dbfPedCliL )->nIva )
      end

      if Empty( ( dbfPedCliL )->nPosPrint )
         ( dbfPedCliL )->nPosPrint    := ( dbfPedCliL )->nNumLin
      end

      if ( dbfPedCliL )->nRegIva <> RetFld( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed, dbfPedCliT, "nRegIva" )
         if dbLock( dbfPedCliL )
            ( dbfPedCliL )->nRegIva := RetFld( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed, dbfPedCliT, "nRegIva" )
            ( dbfPedCliL )->( dbUnlock() )
         end
      end

      ( dbfPedCliL )->( dbSkip() )

      SysRefresh()

   end

    ( dbfPedCliL )->( ordSetFocus( 1 ) )



   ( dbfPedCliI )->( ordSetFocus( 0 ) )
    ( dbfPedCliI )->( dbGoTop() )

   while !( dbfPedCliI )->( eof() )

      if Empty( ( dbfPedCliI )->cSufPed )
         ( dbfPedCliI )->cSufPed := "00"
      end

      ( dbfPedCliI )->( dbSkip() )

      SysRefresh()

   end

     ( dbfPedCliI )->( ordSetFocus( 1 ) )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfPedCliT )->( dbCloseArea() )
   ( dbfPedCliL )->( dbCloseArea() )
   ( dbfPedCliI )->( dbCloseArea() )
   ( dbfPedCliR )->( dbCloseArea() )
   ( dbfPedCliD )->( dbCloseArea() )
   ( dbfPedCliP )->( dbCloseArea() )
   ( dbfArticulo)->( dbCloseArea() )
   ( dbfFamilia )->( dbCloseArea() )
   ( cdbfIva    )->( dbCloseArea() )
   ( cdbfDiv    )->( dbCloseArea() )
   ( cDbfPago   )->( dbCloseArea() )
   ( dbfPedCliE )->( dbCloseArea() )

Return nil








_HB_CLASS TPedidosClientesSenderReciver ; function TPedidosClientesSenderReciver ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPedidosClientesSenderReciver", iif( .T., { @TSenderReciverItem() }, { @HBObject() } ), @TPedidosClientesSenderReciver() ) ) ;

   _HB_MEMBER { cFileName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileName"}, .F. )

   _HB_MEMBER CreateData(); oClass:AddMethod( "CreateData", @TPedidosClientesSenderReciver_CreateData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RestoreData(); oClass:AddMethod( "RestoreData", @TPedidosClientesSenderReciver_RestoreData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SendData(); oClass:AddMethod( "SendData", @TPedidosClientesSenderReciver_SendData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReciveData(); oClass:AddMethod( "ReciveData", @TPedidosClientesSenderReciver_ReciveData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TPedidosClientesSenderReciver_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validateRecepcion(); oClass:AddMethod( "validateRecepcion", @TPedidosClientesSenderReciver_validateRecepcion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPedidosClientesSenderReciver ;



static FUNCTION TPedidosClientesSenderReciver_CreateData( ) ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local lSnd              := .F.
   local cPedCliT
   local dbfPedCliL
   local dbfPedCliI
   local tmpPedCliT
   local tmpPedCliL
   local tmpPedCliI

   if ::oSender:lServer
      ::cFileName         := "PedCli" + win_uuidcreatestring() + ".All"
   else
      ::cFileName         := "PedCli" + win_uuidcreatestring() + "." + RetSufEmp()
   end

   ::oSender:SetText( "Enviando pedidos de clientes" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.Dbf" ), ( cCheckArea( "PedCliT", @cPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @dbfPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @dbfPedCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   mkPedCli( cPatSnd() )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @tmpPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "PedCliT.CDX" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @tmpPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "PedCliL.CDX" ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @tmpPedCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "PedCliI.CDX" ) )

   if !Empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( cPedCliT )->( LastRec() )
   end

   while !( cPedCliT )->( eof() )

      if ( cPedCliT )->lSndDoc

         lSnd  := .T.

         dbPass( cPedCliT, tmpPedCliT, .T. )
         ::oSender:SetText( ( cPedCliT )->cSerPed + "/" + AllTrim( Str( ( cPedCliT )->nNumPed ) ) + "/" + AllTrim( ( cPedCliT )->cSufPed ) + "; " + Dtoc( ( cPedCliT )->dFecPed ) + "; " + AllTrim( ( cPedCliT )->cCodCli ) + "; " + ( cPedCliT )->cNomCli )

         if ( dbfPedCliL )->( dbSeek( ( cPedCliT )->cSerPed + Str( ( cPedCliT )->nNumPed ) + ( cPedCliT )->cSufPed ) )
            while ( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed ) == ( ( cPedCliT )->cSerPed + Str( ( cPedCliT )->nNumPed ) + ( cPedCliT )->cSufPed ) .AND. !( dbfPedCliL )->( eof() )
               dbPass( dbfPedCliL, tmpPedCliL, .T. )
               ( dbfPedCliL )->( dbSkip() )
            end
         end

         if ( dbfPedCliI )->( dbSeek( ( cPedCliT )->cSerPed + Str( ( cPedCliT )->nNumPed ) + ( cPedCliT )->cSufPed ) )
            while ( ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed ) == ( ( cPedCliT )->cSerPed + Str( ( cPedCliT )->nNumPed ) + ( cPedCliT )->cSufPed ) .AND. !( dbfPedCliI )->( eof() )
               dbPass( dbfPedCliI, tmpPedCliI, .T. )
               ( dbfPedCliI )->( dbSkip() )
            end
         end

      end

      ( cPedCliT )->( dbSkip() )

      if !Empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( cPedCliT )->( OrdKeyNo() ) )
      end

   end

   ( cPedCliT )->( dbCloseArea() )
   ( dbfPedCliL )->( dbCloseArea() )
   ( dbfPedCliI )->( dbCloseArea() )
   ( tmpPedCliT )->( dbCloseArea() )
   ( tmpPedCliL )->( dbCloseArea() )
   ( tmpPedCliI )->( dbCloseArea() )



   if lSnd

      ::oSender:SetText( "Comprimiendo pedidos de clientes" )

      if ::oSender:lZipData( ::cFileName )
         ::oSender:SetText( "Ficheros comprimidos en " + ::cFileName )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay pedidos de clientes para enviar" )

   end

Return ( Self )



static FUNCTION TPedidosClientesSenderReciver_RestoreData( ) ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local cPedCliT

   if ::lSuccesfullSend





      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIT.DBF" ), ( cCheckArea( "PEDCLIT", @cPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( cPedCliT )->( OrdSetFocus( "lSndDoc" ) )

      while ( cPedCliT )->( dbSeek( .T. ) ) .AND. !( cPedCliT )->( eof() )
         if ( cPedCliT )->( dbRLock() )
            ( cPedCliT )->lSndDoc := .F.
            ( cPedCliT )->( dbRUnlock() )
         end
      end

      ( cPedCliT )->( dbCloseArea() )

   end

Return ( Self )


static FUNCTION TPedidosClientesSenderReciver_SendData( ) ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   if !file( cPatOut() + ::cFileName )
      ::oSender:SetText( "No existe el fichero " + cPatOut() + ::cFileName )
      Return (  Self )
   end



   if ::oSender:SendFiles( cPatOut() + ::cFileName, ::cFileName )
      ::lSuccesfullSend := .T.
      ::oSender:SetText( "Fichero enviado " + cPatOut() + ::cFileName )
   else
      ::oSender:SetText( "ERROR al enviar fichero" )
   end

Return ( Self )



static FUNCTION TPedidosClientesSenderReciver_ReciveData( ) ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

       local n
       local aExt

      aExt     := ::oSender:aExtensions()





       ::oSender:SetText( "Recibiendo pedidos de clientes" )

       if !::oSender:lFranquiciado

           for n := 1 to len( aExt )
              ::oSender:GetFiles( "PedCli*." + aExt[ n ], cPatIn() )
           next

       else

        for n := 1 to len( aExt )
              ::oSender:GetFiles( "PedPrv*." + aExt[ n ], cPatIn() )
           next

       end

   ::oSender:SetText( "Pedidos de clientes recibidos" )

Return Self



static FUNCTION TPedidosClientesSenderReciver_Process( ) ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local m
   local oBlock
   local oError
   local aFiles
   local cSerie
   local nNumero
   local cSufijo
   local dbfCount
   local dbfPedCliT
   local dbfPedCliL
   local dbfPedCliI
   local tmpPedCliT
   local tmpPedCliL
   local tmpPedCliI

   aFiles            := directory( cPatIn() + "PedCli*.*" )

   for m := 1 to len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ], .F. )





             if file( cPatSnd() + "PedCliT.DBF" ) .AND.  file( cPatSnd() + "PedCliL.DBF" ) .AND.  file( cPatSnd() + "PedCliI.DBF" )

               dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @tmpPedCliT ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
               if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "PedCliT.CDX" ) )

               dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @tmpPedCliL ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
               if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "PedCliL.CDX" ) )

               dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @tmpPedCliI ) ), iif( .F. .OR. .F., ! .F., NIL ), .T. )
               if ! .T. ; ordListClear() ; end ; ordListAdd( ( cPatSnd() + "PedCliI.CDX" ) )

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @dbfPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @dbfPedCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               ( tmpPedCliT )->( dbgotop() )
               while ( tmpPedCliT )->( !eof() )

                   if ::validateRecepcion( tmpPedCliT, dbfPedCliT )



                     while ( dbfPedCliT )->( dbseek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )
                        dbLockDelete( dbfPedCliT )
                     end

                     while ( dbfPedCliL )->( dbseek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )
                        dbLockDelete( dbfPedCliL )
                     end

                     while ( dbfPedCliI )->( dbseek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )
                        dbLockDelete( dbfPedCliI )
                     end



                       dbPass( tmpPedCliT, dbfPedCliT, .T. )

                     if dbLock( dbfPedCliT )
                        ( dbfPedCliT )->lSndDoc := .F.
                        ( dbfPedCliT )->( dbUnLock() )
                     end

                       ::oSender:SetText( "Añadido : " + ( tmpPedCliT )->cSerPed + "/" + AllTrim( Str( ( tmpPedCliT )->nNumPed ) ) + "/" + AllTrim( ( tmpPedCliT )->cSufPed ) + "; " + Dtoc( ( tmpPedCliT )->dFecPed ) + "; " + AllTrim( ( tmpPedCliT )->cCodCli ) + "; " + ( tmpPedCliT )->cNomCli )

                       if ( tmpPedCliL )->( dbSeek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )
                          while ( tmpPedCliL )->cSerPed + Str( ( tmpPedCliL )->nNumPed ) + ( tmpPedCliL )->cSufPed == ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed .AND. !( tmpPedCliL )->( eof() )
                              dbPass( tmpPedCliL, dbfPedCliL, .T. )
                              ( tmpPedCliL )->( dbSkip() )
                          end
                       end

                       if ( tmpPedCliI )->( dbSeek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )
                          while ( tmpPedCliI )->cSerPed + Str( ( tmpPedCliI )->nNumPed ) + ( tmpPedCliI )->cSufPed == ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed .AND. !( tmpPedCliI )->( eof() )
                              dbPass( tmpPedCliI, dbfPedCliI, .T. )
                              ( tmpPedCliI )->( dbSkip() )
                          end
                       end

                   else

                       ::oSender:SetText( ::cErrorRecepcion  )

                   end

                   ( tmpPedCliT )->( dbSkip() )

               end

               ( dbfPedCliT )->( dbCloseArea() )
               ( dbfPedCliL )->( dbCloseArea() )
               ( dbfPedCliI )->( dbCloseArea() )
               ( tmpPedCliT )->( dbCloseArea() )
               ( tmpPedCliL )->( dbCloseArea() )
               ( tmpPedCliI )->( dbCloseArea() )

             else

                ::oSender:SetText( "Faltan ficheros" )

               if !file( cPatSnd() + "PedCliT.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "PedCliT.Dbf" )
               end

               if !file( cPatSnd() + "PedCliL.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "PedCliL.Dbf" )
               end

               if !file( cPatSnd() + "PedCliI.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "PedCliI.Dbf" )
               end

             end

             fErase( cPatSnd() + "PedCliT.Dbf" )
             fErase( cPatSnd() + "PedCliL.Dbf" )
             fErase( cPatSnd() + "PedCliI.Dbf" )

         else

               ::oSender:SetText( "Error al descomprimir los ficheros" )

         end

         ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

      RECOVER USING oError

         ( dbfPedCliT )->( dbCloseArea() )
         ( dbfPedCliL )->( dbCloseArea() )
         ( dbfPedCliI )->( dbCloseArea() )
         ( tmpPedCliT )->( dbCloseArea() )
         ( tmpPedCliL )->( dbCloseArea() )
         ( tmpPedCliI )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next

Return Self



static FUNCTION TPedidosClientesSenderReciver_validateRecepcion( tmpPedCliT, dbfPedCliT ) ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   ::cErrorRecepcion       := "Pocesando pedido de cliente número " + ( dbfPedCliT )->cSerPed + "/" + alltrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + alltrim( ( dbfPedCliT )->cSufPed ) + " "

   if !( lValidaOperacion( ( tmpPedCliT )->dFecPed, .F. ) )
      ::cErrorRecepcion    += "la fecha " + dtoc( ( tmpPedCliT )->dFecPed ) + " no es valida en esta empresa"
      Return .F.
   end

   if !( ( dbfPedCliT )->( dbSeek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) ) )
      Return .T.
   end

   if !Empty( ( tmpPedCliT )->dFecCre ) .AND. ( dtos( ( dbfPedCliT )->dFecCre ) + ( dbfPedCliT )->cTimCre >= dtos( ( tmpPedCliT )->dFecCre ) + ( tmpPedCliT )->cTimCre  )
      ::cErrorRecepcion    += "la fecha en la empresa " + dtoc( ( dbfPedCliT )->dFecCre ) + " " + ( dbfPedCliT )->cTimCre + " es más reciente que la recepción " + dtoc( ( tmpPedCliT )->dFecCre ) + " " + ( tmpPedCliT )->cTimCre
      Return .F.
   end

Return ( .T. )



function aColTmpLin()

   local aColTmpLin  := {}

   aAdd( aColTmpLin, { "cSerPed", "C",    1,  0, "Serie del pedido",                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nNumPed", "N",    9,  0, "Número del pedido",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cSufPed", "C",    2,  0, "Sufijo del pedido",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cRef",    "C",   18,  0, "Referencia del artículo",         "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cDetalle","C",  250,  0, "Nombre del artículo",             "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "mLngDes", "M",   10,  0, "Descripciones largas",            "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "lSelArt", "L",    1,  0, "Lógico de selección de artículo", "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cCodPrv", "C",   12,  0, "Código de proveedor",             "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cCodPr1", "C",   20,  0, "Código propiedad 1",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cCodPr2", "C",   20,  0, "Código propiedad 2",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cValPr1", "C",   20,  0, "Valor propiedad 1",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cValPr2", "C",   20,  0, "Valor propiedad 2",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nNumUni", "N",   16,  6, "Unidades pedidas",                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nNumCaj", "N",   16,  6, "Cajas pedidas",                   "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nStkFis", "N",   16,  6, "Stock fisico",                    "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nStkDis", "N",   16,  6, "Stock disponible",                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "lShow",   "L",    1,  0, "Lógico de mostrar",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nIva",    "N",   16,  6, "Porcentaje de " + cImp(),         "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nReq",    "N",   16,  6, "Porcentaje de recargo",           "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nPreDiv", "N",   16,  6, "Precio del artículo",             "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nDto",    "N",    6,  2, "Descuento del producto",          "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nDtoPrm", "N",    6,  2, "Descuento de promoción",          "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cUnidad", "C",    2,  0, "Unidad de medición",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "lLote",   "L",    1,  0, "",                                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nLote",   "N",    9,  0, "",                                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cLote",   "C",   64,  0, "Número de lote",                  "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "mObsLin", "M",   10,  0, "Observaciones de lineas",         "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cRefPrv", "C",   18,  0, "Referencia proveedor",            "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cUnidad", "C",    2,  0, "Unidad de medición",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nMedUno", "N",   16,  6, "Primera unidad de medición",      "MasUnd()", "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nMedDos", "N",   16,  6, "Segunda unidad de medición",      "MasUnd()", "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nMedTre", "N",   16,  6, "Tercera unidad de medición",      "MasUnd()", "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nNumLin", "N",    4,  0, "Número de línea",                     "",            "", "( cDbfCol )" } )

return ( aColTmpLin )



function aColTmpFin()

   local aColTmpFin  := {}

   aAdd( aColTmpFin, { "cSerie",  "C",    1,  0, "Serie del documento",             "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "nNumero", "N",    9,  0, "Número del documento",            "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "cSufijo", "C",    2,  0, "Sufijo del documento",            "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "dFecDoc", "D",    8,  0, "Fecha del documento",             "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "cCodPrv", "C",   12,  0, "Código de proveedor",             "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "cNomPrv", "C",   30,  0, "Nombre de proveedor",             "",  "", "( cDbfCol )" } )

return ( aColTmpFin )



FUNCTION BrwArtPed( aGet, dbfTmpPedLin, cdbfDiv, cdbfIva )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
    local oCbxOrd
   local cCbxOrd     := "Código"
   local aCbxOrd     := { "Código", "Nombre" }
   local nRecAnt     := ( dbfTmpPedLin )->( recno() )
   local nOrdAnt     := ( dbfTmpPedLin )->( OrdSetFocus( 1 ) )

   ( dbfTmpPedLin )->( DbGoTop() )

   oDlg = TDialog():New(,,,, "Artículos", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,, "@!", {||    ( OrdClearScope( oBrw, dbfTmpPedLin ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfTmpPedLin, .T. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfTmpPedLin )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )













      oBrw := TWBrowse():ReDefine( 105, {|| { (dbfTmpPedLin)->cRef, (dbfTmpPedLin)->cDetalle } }, oDlg, {"Código" , "Nombre"}, {90 , 300},,,,,,,,,,,, .F., ( dbfTmpPedLin ),,,, )

         oBrw:aActions     := {| nCol | lPressCol( nCol, oBrw, oCbxOrd, aCbxOrd, dbfTmpPedLin ) }
         oBrw:aJustify     := { .F., .F. }
         oBrw:bLDblClick   := {|| oDlg:end( 1 ) }





      TButton():ReDefine( 500, {||( oDlg:end() )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





      TButton():ReDefine( 501, {||( oDlg:end() )}, oDlg,,, .F., {||     ( .F. )},,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13, {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      aGet:cText( ( dbfTmpPedLin )->cRef )
      aGet:lValid()
   end

   ( dbfTmpPedLin )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTmpPedLin )->( dbGoTo( nRecAnt ) )

RETURN oDlg:nResult == 1



Function AppPedCli( cCodCli, cCodArt, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli( nil, nil, cCodCli, cCodArt )
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( .T. )
         nTotPedCli()
         WinAppRec( nil, bEdtRec, D():PedidosClientes( nView ), cCodCli, cCodArt )
         CloseFiles()
      end

   end

RETURN .T.



Function EdtPedCli( cNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            nTotPedCli()
            WinEdtRec( nil, bEdtRec, D():PedidosClientes( nView ) )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION ZooPedCli( cNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            nTotPedCli()
            WinZooRec( nil, bEdtRec, D():PedidosClientes( nView ) )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION DelPedCli( cNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            WinDelRec( nil, D():PedidosClientes( nView ), {|| QuiPedCli() } )
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            nTotPedCli()
            WinDelRec( nil, D():PedidosClientes( nView ), {|| QuiPedCli() } )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION PrnPedCli( cNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            ImprimirSeriesPedidosClientes( 1, .T. )

         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            nTotPedCli()
            ImprimirSeriesPedidosClientes( 1, .T. )

         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION VisPedCli( cNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            ImprimirSeriesPedidosClientes( 2, .T. )

         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", D():PedidosClientes( nView ) )
            nTotPedCli()
            ImprimirSeriesPedidosClientes( 2, .T. )

         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION visualizaPedidoCliente( cNumeroPedido, cFormatoDocumento )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if OpenFiles( .T. )

      if dbSeekInOrd( cNumeroPedido, "nNumPed", D():PedidosClientes( nView ) )
         nTotPedCli()
         genPedCli( 2, nil, cFormatoDocumento )
      else
         msgStop( "Número de pedido " + alltrim(  cNumeroPedido ) + " no encontrado" )
      end

      CloseFiles()

   end

Return .T.



FUNCTION imprimePedidoCliente( cNumeroPedido, cFormatoDocumento, cPrinter, nCopies )

   local nLevel         := Auth():Level( "pedidos_de_clientes" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if OpenFiles( .T. )

      if dbSeekInOrd( cNumeroPedido, "nNumPed", D():PedidosClientes( nView ) )

         nTotPedCli()

         genPedCli( 1, nil, cFormatoDocumento, cPrinter, nCopies )

      else

         msgStop( "Número de pedido " + alltrim(  cNumeroPedido ) + " no encontrado" )

      end

      CloseFiles()

   end

Return .T.



FUNCTION PrnEntPed( cNumEnt, lPrint, dbfPedCliP )

Return .T.



function nTotReserva( cCodArt )

   local nTotal := 0

   ( D():PedidosClientesReservas( nView ) )->( ordsetfocus( "cRef" ) )

   if ( D():PedidosClientesReservas( nView ) )->( dbseek( cCodArt ) )

      while ( D():PedidosClientesReservas( nView ) )->cRef == cCodArt .AND. ! ( D():PedidosClientesReservas( nView ) )->( eof() )

         nTotal += nUnidadesReservadasEnPedidosCliente( D():PedidosClientesReservasId( nView ), ( D():PedidosClientesReservas( nView ) )->cRef, ( D():PedidosClientesReservas( nView ) )->cValPr1, ( D():PedidosClientesReservas( nView ) )->cValPr2, D():PedidosClientesReservas( nView ) )

         ( D():PedidosClientesReservas( nView ) )->( dbskip() )

      end

   end

return ( nTotal )






function nEstadoUnidadesRecibidasPedidosClientes( cPedPrvL, cAlbPrvL, cTmpLin )

   local nTotUni
   local nEstado     := 3
   local nTotRec     := 0

   nTotUni           := nTotNPedCli( cTmpLin )

   if nTotUni == 0
      Return ( nEstado )
   end

   nTotRec           := nTotalUnidadesRecibidasPedidosProveedor( cPedPrvL, cAlbPrvL, cTmpLin )

   do case
      case nTotRec == 0
         nEstado     := 1
      case nTotRec < nTotUni
         nEstado     := 2
      case nTotRec >= nTotUni
         nEstado     := 3
   end

Return ( nEstado )



Static Function nTotalUnidadesRecibidasPedidosProveedor( cPedPrvL, cAlbPrvL, cTmpLin )

   local nOrden
   local nUnidadesRecibidas   := 0

   nOrden                     := ( cPedPrvL )->( ordsetfocus( "cPedCliRef" ) )
   if ( cPedPrvL )->( dbseek( ( cTmpLin )->cSerPed + Str( ( cTmpLin )->nNumPed ) + ( cTmpLin )->cSufPed + ( cTmpLin )->cRef + ( cTmpLin )->cValPr1 + ( cTmpLin )->cValPr2 ) )
      nUnidadesRecibidas      := nUnidadesRecibidasPedPrv( ( cPedPrvL )->cSerPed + Str( ( cPedPrvL )->nNumPed ) + ( cPedPrvL )->cSufPed, ( cTmpLin)->cRef, ( cTmpLin )->cValPr1, ( cTmpLin )->cValPr2, ( cTmpLin )->cRefPrv, cAlbPrvL )
   end
   ( cPedPrvL )->( ordsetfocus( nOrden ) )

Return ( nUnidadesRecibidas )







function nEstadoUnidadesEntregadasPedidosClientes( cTmpLin )

       local nEstado                  := 1
       local nUnidadesPedidas         := nTotNPedCli( cTmpLin )
       local nUnidadesRecibidas







     nUnidadesRecibidas           := AlbaranesClientesLineasModel():nUnidadesEntregadas(     ( dbfTmpLin )->cSerPed + Str( ( dbfTmpLin )->nNumPed ) + ( dbfTmpLin )->cSufPed,    ( dbfTmpLin )->cRef,    ( dbfTmpLin )->cCodPr1,    ( dbfTmpLin )->cCodPr2,    ( dbfTmpLin )->cValPr1,    ( dbfTmpLin )->cValPr2,    ( dbfTmpLin )->cLote )







     nUnidadesRecibidas           += FacturasClientesLineasModel():nUnidadesEntregadas(     ( dbfTmpLin )->cSerPed + Str( ( dbfTmpLin )->nNumPed ) + ( dbfTmpLin )->cSufPed,    ( dbfTmpLin )->cRef,    ( dbfTmpLin )->cCodPr1,    ( dbfTmpLin )->cCodPr2,    ( dbfTmpLin )->cValPr1,    ( dbfTmpLin )->cValPr2,    ( dbfTmpLin )->cLote )

       do case
      case nUnidadesRecibidas == 0
         nEstado                  := 1
      case nUnidadesRecibidas < nUnidadesPedidas
         nEstado                  := 2
      case nUnidadesRecibidas >= nUnidadesPedidas
         nEstado                  := 3
       end

Return ( nEstado )



Function DesignReportPedCli( oFr, dbfDoc )

   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag





      DataReport( oFr )





      if !Empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "   CallHbFunc('nTotPedCli');"                              + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "MasterData",  "MainPage", 6 )
         oFr:SetProperty(     "MasterData",  "Top", 200 )
         oFr:SetProperty(     "MasterData",  "Height", 0 )
         oFr:SetProperty(     "MasterData",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "MasterData",  "DataSet", "Pedidos" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de pedidos" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lOpen
         CloseFiles()
      end

   else

      Return .F.

   end

Return .T.



Function mailReportPedCli( cCodigoDocumento )

Return ( printReportPedCli( 6, 1, ImpresoraDefectoUsuario(), cCodigoDocumento ) )



Static Function printReportPedCli( nDevice, nCopies, cPrinter, cCodigoDocumento )

   local oFr
   local cFilePdf             := cPatOut() + "PedidoCliente" + StrTran( ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed, " ", "" ) + ".Pdf"
   local nOrd

   If( nDevice == nil, nDevice := 2, ) ;
   If( nCopies == nil, nCopies := 1, ) ;
   If( cCodigoDocumento == nil, cCodigoDocumento := cFormatoPedidosClientes(), ) ;

   if empty( cCodigoDocumento )
      msgStop( "El código del documento esta vacio" )
      Return ( nil )
   end

   if Empty( cPrinter )
      cPrinter                := ImpresoraDefectoUsuario()
   end

   SysRefresh()

   nOrd                                 := ( D():PedidosClientesLineas( nView ) )->( ordSetFocus( "nPosPrint" ) )

   oFr                        := frReportManager():New()

   oFr:LoadLangRes( "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle( "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( D():Documentos( nView ) )->( Select() ), "mReport" ) } )





   DataReport( oFr )





   if lMemoDocumento( cCodigoDocumento, D():Documentos( nView ) )

      oFr:LoadFromBlob( ( D():Documentos( nView ) )->( Select() ), "mReport")





      VariableReport( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1
            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3
            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
            oFr:DoExport(     "PDFExport" )

         case nDevice == 6

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .F. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

   ( D():PedidosClientesLineas( nView ) )->( ordSetFocus( nOrd ) )

Return ( cFilePdf )



Function DesignReportEntPedCli( oFr, dbfDoc )


Return .T.



Function PrintReportEntPedCli( nDevice, nCopies, cPrinter, dbfDoc, cPedCliP )


Return .T.



FUNCTION IsPedCli( cPath )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "PedCliT.Dbf" )
      dbCreate( cPath + "PedCliT.Dbf", aSqlStruct( aItmPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliL.Dbf" )
      dbCreate( cPath + "PedCliL.Dbf", aSqlStruct( aColPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliR.DBF" )
      dbCreate( cPath + "PedCliR.Dbf", aSqlStruct( aPedCliRes() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliI.Dbf" )
      dbCreate( cPath + "PedCliI.Dbf", aSqlStruct( aIncPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliD.Dbf" )
      dbCreate( cPath + "PedCliD.Dbf", aSqlStruct( aPedCliDoc() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliP.Dbf" )
      dbCreate( cPath + "PedCliP.Dbf", aSqlStruct( aPedCliPgo() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliE.Dbf" )
      dbCreate( cPath + "PedCliE.Dbf", aSqlStruct( aPedCliEst() ), cDriver() )
   end







   if !lExistIndex( cPath + "PedCliT.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliL.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliR.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliI.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliP.Cdx" ) .OR.  !lExistTable( cPath + "PedCliD.Cdx" ) .OR.  !lExistTable( cPath + "PedCliE.Cdx" )

      rxPedCli( cPath )

   end

Return ( nil )



FUNCTION mkPedCli( cPath, lAppend, cPathOld, oMeter, bFor )

   local oldPedCliT
   local oldPedCliL
   local oldPedCliI
   local oldPedCliD
   local oldPedCliP
   local oldAlbCliT
   local oldAlbCliL
   local oldPedCliE

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( lAppend == nil, lAppend := .F., ) ;
   If( bFor == nil, bFor := {|| .T. }, ) ;

    IF oMeter <> NIL
        oMeter:cText    := "Generando Bases"
        sysrefresh()
    end

   createFiles( cPath )

   rxPedCli( cPath, cLocalDriver() )

   IF lAppend .AND. lIsDir( cPathOld )

      dbUseArea( .T., cDriver(), cPath + "PEDCLIT.DBF", cCheckArea( "PEDCLIT", @dbfPedCliT ), .F. )
      ( dbfPedCliT )->( ordListAdd( cPath + "PedCliT.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PEDCLIL.DBF", cCheckArea( "PEDCLIL", @dbfPedCliL ), .F. )
      ( dbfPedCliL )->( ordListAdd( cPath + "PedCliL.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PedCliI.Dbf", cCheckArea( "PedCliI", @dbfPedCliI ), .F. )
      ( dbfPedCliI )->( ordListAdd( cPath + "PedCliI.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PedCliD.Dbf", cCheckArea( "PedCliD", @dbfPedCliD ), .F. )
      ( dbfPedCliD )->( ordListAdd( cPath + "PedCliD.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PedCliP.Dbf", cCheckArea( "PedCliP", @dbfPedCliP ), .F. )
      ( dbfPedCliP )->( ordListAdd( cPath + "PedCliP.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PedCliT.Dbf", cCheckArea( "PEDCLIT", @oldPedCliT ), .F. )
      ( oldPedCliT )->( ordListAdd( cPathOld + "PedCliT.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLIL.DBF", cCheckArea( "PEDCLIL", @oldPedCliL ), .F. )
      ( oldPedCliL )->( ordListAdd( cPathOld + "PEDCLIL.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLII.DBF", cCheckArea( "PEDCLII", @oldPedCliI ), .F. )
      ( oldPedCliI )->( ordListAdd( cPathOld + "PEDCLII.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLID.DBF", cCheckArea( "PEDCLID", @oldPedCliD ), .F. )
      ( oldPedCliD )->( ordListAdd( cPathOld + "PEDCLID.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLIP.DBF", cCheckArea( "PEDCLIP", @oldPedCliP ), .F. )
      ( oldPedCliP )->( ordListAdd( cPathOld + "PEDCLIP.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCliT.DBF", cCheckArea( "AlbCliT", @oldAlbCliT ), .F. )
      ( oldAlbCliT )->( ordListAdd( cPathOld + "AlbCliT.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCliL.DBF", cCheckArea( "AlbCliL", @oldAlbCliL ), .F. )
      ( oldAlbCliL )->( ordListAdd( cPathOld + "AlbCliL.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PedCliE.DBF", cCheckArea( "PedCliE", @oldPedCliE ), .F. )
      ( oldPedCliE )->( ordListAdd( cPathOld + "PedCliE.CDX" ) )

      while !( oldPedCliT )->( eof() )

         if eval( bFor, oldPedCliT )

            dbCopy( oldPedCliT, dbfPedCliT, .T. )

            if ( dbfPedCliT )->( dbRLock() )
               ( dbfPedCliT )->cTurPed    := Padl( "1", 6 )
               ( dbfPedCliT )->( dbRUnlock() )
            end

            if ( oldPedCliL )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliL )->cSerPed + Str( ( oldPedCliL )->NNUMPED ) + ( oldPedCliL )->CSUFPED == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED .AND. !( oldPedCliL )->( eof() )


                  dbCopy( oldPedCliL, dbfPedCliL, .T. )
                  ( dbfPedCliL )->nUniCaja   := nTotNPedCli( oldPedCliL )
                  ( dbfPedCliL )->nUniCaja   -= nUnidadesRecibidasAlbaranesClientes( ( oldPedCliL )->cSerPed + Str( ( oldPedCliL )->nNumPed ) + ( oldPedCliL )->cSufPed, ( oldPedCliL )->cRef, ( oldPedCliL )->cValPr1, ( oldPedCliL )->cValPr2, oldAlbCliL )
                  ( dbfPedCliL )->nUniEnt    := 0


                  ( oldPedCliL )->( dbSkip() )

               end
            end

            if ( oldPedCliI )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliI )->cSerPed + Str( ( oldPedCliI )->nNumPed ) + ( oldPedCliI )->cSufPed == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->nNumPed ) + ( oldPedCliT )->cSufPed .AND. !( oldPedCliI )->( eof() )

                  dbCopy( oldPedCliI, dbfPedCliI, .T. )
                  ( oldPedCliI )->( dbSkip() )

               end
            end

            if ( oldPedCliD )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliD )->cSerPed + Str( ( oldPedCliD )->nNumPed ) + ( oldPedCliD )->cSufPed == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->nNumPed ) + ( oldPedCliT )->cSufPed .AND. !( oldPedCliD )->( eof() )

                  dbCopy( oldPedCliD, dbfPedCliD, .T. )
                  ( oldPedCliD )->( dbSkip() )

               end
            end

            if ( oldPedCliP )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliP )->cSerPed + Str( ( oldPedCliP )->nNumPed ) + ( oldPedCliP )->cSufPed == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->nNumPed ) + ( oldPedCliT )->cSufPed .AND. !( oldPedCliP )->( eof() )

                  dbCopy( oldPedCliP, dbfPedCliP, .T. )
                  ( oldPedCliP )->( dbSkip() )

               end
            end

         end

         SysRefresh()

         ( oldPedCliT )->( dbSkip() )

      end

      ( dbfPedCliT )->( dbCloseArea() )
      ( dbfPedCliL )->( dbCloseArea() )
      ( dbfPedCliI )->( dbCloseArea() )
      ( dbfPedCliD )->( dbCloseArea() )
      ( dbfPedCliP )->( dbCloseArea() )

      ( oldPedCliT )->( dbCloseArea() )
      ( oldPedCliL )->( dbCloseArea() )
      ( oldPedCliI )->( dbCloseArea() )
      ( oldPedCliD )->( dbCloseArea() )
      ( oldPedCliP )->( dbCloseArea() )
      ( oldPedCliE )->( dbCloseArea() )

      ( oldAlbCliT )->( dbCloseArea() )
      ( oldAlbCliL )->( dbCloseArea() )

    end

RETURN .T.



FUNCTION rxPedCli( cPath, cDriver )

    local cPedCliT

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;







   if !lExistTable( cPath + "PedCliT.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedCliL.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedCliR.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedCliI.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedCliD.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedCliP.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedCliE.Dbf", cDriver )

      CreateFiles( cPath )

   end

   fEraseIndex( cPath + "PedCliT.Cdx", cDriver )
   fEraseIndex( cPath + "PedCliL.Cdx", cDriver )
   fEraseIndex( cPath + "PedCliR.Cdx", cDriver )
   fEraseIndex( cPath + "PedCliI.Cdx", cDriver )
   fEraseIndex( cPath + "PedCliD.Cdx", cDriver )
   fEraseIndex( cPath + "PedCliP.Cdx", cDriver )
   fEraseIndex( cPath + "PedCliE.Cdx", cDriver )

   dbUseArea( .T., cDriver, cPath + "PEDCLIT.DBF", cCheckArea( "PEDCLIT", @cPedCliT ), .F. )
   if !( cPedCliT )->( neterr() )
      ( cPedCliT )->( __dbPack() )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "NNUMPED", "Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "DFECPED", "Field->DFECPED", {|| Field->DFECPED } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "CCODCLI", "Field->CCODCLI", {|| Field->CCODCLI } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "CNOMCLI", "Upper( Field->CNOMCLI )", {|| Upper( Field->CNOMCLI ) } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "cCodObr", "Field->cCodObr + Dtos( Field->dFecPed )", {|| Field->cCodObr + Dtos( Field->dFecPed ) } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "cCodAge", "Field->cCodAge + Dtos( Field->dFecPed )", {|| Field->cCodAge + Dtos( Field->dFecPed ) } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "dFecEnt", "Dtos( Field->dFecEnt )", {|| Dtos( Field->dFecEnt ) } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted() .and. lInternet", {||!Deleted() .AND. Field->lInternet } ) )
      ( cPedCliT )->( ordCreate( cPath + "ped.Cdx", "lInternet", "Dtos( Field->dFecCre ) + Field->cTimCre", {|| Dtos( Field->dFecCre ) + Field->cTimCre } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "CTURPED", "Field->CTURPED + Field->CSUFPED + Field->CCODCAJ", {|| Field->CTURPED + Field->CSUFPED + Field->CCODCAJ} ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "cNumPre", "Field->cNumPre", {|| Field->cNumPre } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ))
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "lSndDoc", "Field->lSndDoc", {|| Field->lSndDoc } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cCodUsr", "Field->cCodUsr + Dtos( Field->dFecCre ) + Field->cTimCre", {|| Field->cCodUsr + Dtos( Field->dFecCre ) + Field->cTimCre } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted() .and. lInternet .and. nEstado != 3", {|| !Deleted() .AND. Field->lInternet .AND. Field->nEstado <> 3 } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "lIntPedCli", "Dtos( Field->dFecPed )", {|| Dtos( Field->dFecPed ) } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cNumAlb", "Field->cNumAlb", {|| Field->cNumAlb } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cCodWeb", "Str( Field->cCodWeb )", {|| Str( Field->cCodWeb ) } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "iNumPed", "'09' + Field->cSerPed + Str( Field->nNumPed ) + Space( 1 ) + Field->cSufPed", {|| "09" + Field->cSerPed + Str( Field->nNumPed ) + Space( 1 ) + Field->cSufPed } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()} ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cSuPed", "Field->cSuPed", {|| Field->cSuPed } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }, , , , , , , , , .T. ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "dFecDes", "Field->dFecPed", {|| Field->dFecPed } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()} ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cSituac", "Field->cSituac", {|| Field->cSituac } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()} ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cSufPed", "Field->cSufPed", {|| Field->cSufPed } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.CDX", "Poblacion", "UPPER( Field->cPobCli )", {|| UPPER( Field->cPobCli ) } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.CDX", "Provincia", "UPPER( Field->cPrvCli )", {|| UPPER( Field->cPrvCli ) } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.CDX", "CodPostal", "Field->cPosCli", {|| Field->cPosCli } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "dFecGen", "dtos( Field->dFecPed ) + Field->cCodCli", {|| Dtos( Field->dFecPed ) + Field->cCodCli } ) )


      ( cPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "PedCliL.DBF", cCheckArea( "PedCliL", @cPedCliT ), .F. )
   if !( cPedCliT )->( neterr() )
      ( cPedCliT )->( __dbPack() )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliL.Cdx", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliL.Cdx", "cRef", "cRef", {|| Field->CREF } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliL.Cdx", "Lote", "cLote", {|| Field->cLote } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliL.Cdx", "iNumPed", "'09' + cSerPed + Str( nNumPed ) + Space( 1 ) + cSufPed + Str( nNumLin )", {|| "09" + Field->cSerPed + Str( Field->nNumPed ) + Space( 1 ) + Field->cSufPed + Str( Field->nNumLin ) } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliL.Cdx", "nPosPrint", "cSerPed + Str( nNumPed ) + cSufPed + Str( nPosPrint )", {|| Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed + Str( Field->nPosPrint )}, ) )



      ( cPedCliT )->( ordCondSet( "nCtlStk < 2 .and. !Deleted()", {|| Field->nCtlStk < 2 .AND. !Deleted() }, , , , , , , , , .T. ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliL.Cdx", "cStkFast", "cRef + cAlmLin", {|| Field->cRef + Field->cAlmLin } ) )

      ( cPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "PEDCLIR.DBF", cCheckArea( "PEDCLIR", @cPedCliT ), .F. )
   if !( cPedCliT )->( neterr() )
      ( cPedCliT )->( __dbPack() )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIR.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED + CREF + CVALPR1 + CVALPR2", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED + Field->CREF + Field->CVALPR1 + Field->CVALPR2 } ) )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PEDCLIR.CDX", "CREF", "CREF + CVALPR1 + CVALPR2", {|| Field->CREF + Field->CVALPR1 + Field->CVALPR2 } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliR.Cdx", "iNumPed", "'09' + cSerPed + Str( nNumPed ) + Space( 1 ) + cSufPed", {|| "09" + Field->cSerPed + Str( Field->nNumPed ) + Space( 1 ) + Field->cSufPed } ) )

      ( cPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "PedCliI.DBF", cCheckArea( "PedCliI", @cPedCliT ), .F. )
   if !( cPedCliT )->( neterr() )
      ( cPedCliT )->( __dbPack() )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliI.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( cPedCliT )->( ordCondSet("!Deleted() .and. !lSndWeb ", {||!Deleted() .AND. !Field->lSndWeb }  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliI.CDX", "lSndWeb", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliI.Cdx", "iNumPed", "'09' + cSerPed + Str( nNumPed ) + Space( 1 ) + cSufPed", {|| "09" + Field->cSerPed + Str( Field->nNumPed ) + Space( 1 ) + Field->cSufPed } ) )

      ( cPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver, cPath + "PedCliD.DBF", cCheckArea( "PedCliD", @cPedCliT ), .F. )

   if !( cPedCliT )->( neterr() )

      ( cPedCliT )->( __dbPack() )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliD.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliD.Cdx", "iNumPed", "'09' + cSerPed + Str( nNumPed ) + Space( 1 ) + cSufPed", {|| "09" + Field->cSerPed + Str( Field->nNumPed ) + Space( 1 ) + Field->cSufPed } ) )

      ( cPedCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )

   end

   dbUseArea( .T., cDriver, cPath + "PedCliP.DBF", cCheckArea( "PedCliP", @cPedCliT ), .F. )

   if !( cPedCliT )->( neterr() )

      ( cPedCliT )->( __dbPack() )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "nNumPed", "cSerPed + Str( nNumPed ) + cSufPed + Str( nNumRec )", {|| Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed + Str( Field->nNumRec ) } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "cTurRec", "cTurRec + cSufPed + cCodCaj", {|| Field->cTurRec + Field->cSufPed + Field->cCodCaj } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "cCodCli", "cCodCli", {|| Field->cCodCli } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "dEntrega", "dEntrega", {|| Field->dEntrega } ) )

      ( cPedCliT )->( ordCondSet("!Deleted() .and. !Field->lPasado", {|| !Deleted() .AND. !Field->lPasado } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "lCtaBnc", "cEPaisIBAN + cECtrlIBAN + cEntEmp + cSucEmp + cDigEmp + cCtaEmp", {|| Field->cEPaisIBAN + Field->cECtrlIBAN + Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp } ) )

      ( cPedCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )

   end

   dbUseArea( .T., cDriver, cPath + "PedCliE.DBF", cCheckArea( "PedCliE", @cPedCliT ), .F. )

   if !( cPedCliT )->( neterr() )

      ( cPedCliT )->( __dbPack() )

      ( cPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliE.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliE.Cdx", "cSitua", "cSitua", {|| Field->cSitua } ) )

      ( cPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedCliT )->( ordCreate( cPath + "PedCliE.Cdx", "idPs", "str( idPs )", {|| str( Field->idPs ) } ) )

      ( cPedCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )

   end


RETURN NIL



function aItmPedCli()

   local aItmPedCli := {}

   aAdd( aItmPedCli, { "cSerPed",   "C",    1,  0, "Serie del pedido",                                        "Serie",                   "", "( cDbf )", {|| "A" } } )
   aAdd( aItmPedCli, { "nNumPed",   "N",    9,  0, "Número del pedido",                                       "Numero",                  "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cSufPed",   "C",    2,  0, "Sufijo de pedido",                                        "Sufijo",                  "", "( cDbf )", {|| retSufEmp() } } )
   aAdd( aItmPedCli, { "cTurPed",   "C",    6,  0, "Sesión del pedido",                                       "Turno",                   "", "( cDbf )", {|| cCurSesion( nil, .F.) } } )
   aAdd( aItmPedCli, { "dFecPed",   "D",    8,  0, "Fecha del pedido",                                        "Fecha",                   "", "( cDbf )", {|| getSysDate() } } )
   aAdd( aItmPedCli, { "cCodCli",   "C",   12,  0, "Código del cliente",                                      "Cliente",                 "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cNomCli",   "C",   80,  0, "Nombre del cliente",                                      "NombreCliente",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDirCli",   "C",  200,  0, "Domicilio del cliente",                                   "DomicilioCliente",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cPobCli",   "C",  200,  0, "Población del cliente",                                   "PoblacionCliente",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cPrvCli",   "C",  100,  0, "Provincia del cliente",                                   "ProvinciaCliente",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cPosCli",   "C",   15,  0, "Código postal del cliente",                               "CodigoPostalCliente",     "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDniCli",   "C",   30,  0, "DNI del cliente",                                         "DniCliente",              "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lModCli",   "L",    1,  0, "Modificar datos del cliente",                             "ModificarDatosCliente",   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodAge",   "C",    3,  0, "Código del agente",                                       "Agente",                  "", "( cDbf )", {|| cCodigoAgente() } } )
   aAdd( aItmPedCli, { "cCodObr",   "C",   10,  0, "Código de dirección",                                     "Direccion",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodTar",   "C",    5,  0, "Código de tarifa",                                        "Tarifa",                  "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodAlm",   "C",   16,  0, "Código del almacen",                                      "Almacen",                 "", "( cDbf )", {|| Application():codigoAlmacen() } } )
   aAdd( aItmPedCli, { "cCodCaj",   "C",    3,  0, "Código de caja",                                          "Caja",                    "", "( cDbf )", {|| Application():CodigoCaja() } } )
   aAdd( aItmPedCli, { "cCodPgo",   "C",    2,  0, "Código de pago",                                          "Pago",                    "", "( cDbf )", {|| cDefFpg() } } )
   aAdd( aItmPedCli, { "cCodRut",   "C",    4,  0, "Código de la ruta",                                       "Ruta",                    "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "dFecEnt",   "D",    8,  0, "Fecha de salida",                                         "FechaSalida",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nEstado",   "N",    1,  0, "Estado del pedido",                                       "Estado",                  "", "( cDbf )", {|| 1 } } )
   aAdd( aItmPedCli, { "cSuPed",    "C",   35,  0, "Su pedido",                                               "DocumentoOrigen",         "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCondent",  "C",  100,  0, "Condiciones del pedido",                                  "Condiciones",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "mComent",   "M",   10,  0, "Comentarios",                                             "Comentarios",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "mObserv",   "M",   10,  0, "Observaciones",                                           "Observaciones",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lMayor",    "L",    1,  0, "",                                                        "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTarifa",   "N",    1,  0, "Tarifa de precio aplicada",                               "NumeroTarifa",            "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDtoEsp",   "C",   50,  0, "Descripción de porcentaje de descuento",                  "DescripcionDescuento1",   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoEsp",   "N",    5,  2, "Porcentaje de descuento",                                 "PorcentajeDescuento1",    "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDpp",      "C",   50,  0, "Descripción porcentaje de descuento por pronto pago",     "DescripcionDescuento2",   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDpp",      "N",    5,  2, "Pct. de dto. por pronto pago",                            "PorcentajeDescuento2",    "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDtoUno",   "C",   25,  0, "Desc. del primer descuento pers.",                        "DescripcionDescuento3",   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoUno",   "N",    5,  2, "Pct. del primer descuento pers.",                         "PorcentajeDescuento3",    "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDtoDos",   "C",   25,  0, "Desc. del segundo descuento pers.",                       "DescripcionDescuento4",   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoDos",   "N",    5,  2, "Pct. del segundo descuento pers.",                        "PorcentajeDescuento4",    "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoCnt",   "N",    5,  2, "Pct. de dto. por pago contado",                           "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoRap",   "N",    5,  2, "Pct. de dto. por rappel",                                 "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoPub",   "N",    5,  2, "Pct. de dto. por publicidad",                             "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoPgo",   "N",    5,  2, "Pct. de dto. por pago centralizado",                      "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoPtf",   "N",    7,  2, "",                                                        "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lRecargo",  "L",    1,  0, "Aplicar recargo de equivalencia",                         "RecargoEquivalencia",     "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nPctComAge","N",    5,  2, "Pct. de comisión del agente",                             "ComisionAgente",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nBultos",   "N",    5,  0, "Número de bultos",                                        "Bultos",                  "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cNumPre",   "C",   12,  0, "",                                                        "NumeroPresupuesto",       "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDivPed",   "C",    3,  0, "Código de divisa",                                        "Divisa",                  "", "( cDbf )", {|| cDivEmp() } } )
   aAdd( aItmPedCli, { "nVdvPed",   "N",   10,  4, "Valor del cambio de la divisa",                           "ValorDivisa",             "", "( cDbf )", {|| nChgDiv() } } )
   aAdd( aItmPedCli, { "lSndDoc",   "L",    1,  0, "Valor lógico documento enviado",                          "Envio",                   "", "( cDbf )", {|| .T. } } )
   aAdd( aItmPedCli, { "lPdtCrg",   "L",    1,  0, "Lógico para ser preparado",                               "LogicoPreparado",         "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nRegIva",   "N",    1,  0, "Regimen de " + cImp() ,                                   "TipoImpuesto",            "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lIvaInc",   "L",    1,  0, "impuestos incluido" ,                                     "ImpuestosIncluidos",      "", "( cDbf )", {|| uFieldEmpresa( "lIvaInc" ) } } )
   aAdd( aItmPedCli, { "nIvaMan",   "N",    6,  2, "Porcentaje de " + cImp() + " del gasto" ,                 "ImpuestoGastos",          "", "( cDbf )", {|| nIva( nil, cDefIva() ) } } )
   aAdd( aItmPedCli, { "nManObr",   "N",   16,  6, "Gastos" ,                                                 "Gastos",                  "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodTrn",   "C",    9,  0, "Código de transportista" ,                                "Transportista",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nKgsTrn",   "N",   16,  6, "TARA del transportista" ,                                 "TaraTransportista",       "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lCloPed",   "L",    1,  0, "Lógico de pedido cerrado" ,                               "DocumentoCerrado",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodUsr",   "C",    3,  0, "Código de usuario",                                       "Usuario",                 "", "( cDbf )", {|| Auth():Codigo() } } )
   aAdd( aItmPedCli, { "dFecCre",   "D",    8,  0, "Fecha de creación del documento",                         "FechaCreacion",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cTimCre",   "C",    5,  0, "Hora de creación del documento",                          "HoraCreacion",            "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cRetMat",   "C",   20,  0, "Matricula",                                               "Matricula",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cRetPor",   "C",   20,  0, "Retirado por",                                            "RetiradoPor",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nPedProV",  "N",    1,  0, "",                                                        "NumeroPedidoProveedor",   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nMonTaje",  "N",    6 , 2, "Horas de montaje",                                        "Montaje",                 "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodGrp",   "C",    4,  0, "Código de grupo de cliente",                              "GrupoCliente",            "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lImpRimido","L",    1,  0, "Lógico de imprimido",                                     "Imprimido",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "dFecImp",   "D",    8,  0, "Última fecha de impresión",                               "FechaImpresion",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cHorImp",   "C",    5,  0, "Hora de la última impresión",                             "HoraImpresion",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodDlg",   "C",    2,  0, "Código delegación" ,                                      "Delegacion",              "", "( cDbf )", {|| Application():CodigoDelegacion() } } )
   aAdd( aItmPedCli, { "nDtoAtp",   "N",    6,  2, "Porcentaje de descuento atípico",                         "DescuentoAtipico",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nSbrAtp",   "N",    1,  0, "Lugar donde aplicar dto atípico",                         "LugarAplicarDescuentoAtipico","", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cSituac",   "C",   20,  0, "Situación del documento",                                 "Situacion",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lWeb",      "L",    1,  0, "Lógico de recibido por web",                              "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lAlquiler", "L",    1,  0, "Lógico de alquiler",                                      "Alquiler",                "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "dFecEntr",  "D",    8,  0, "Fecha inicio servicio",                                   "InicioServicio",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "dFecSal",   "D",    8,  0, "Fecha fin de servicio",                                   "FinServicio",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cManObr",   "C",  250,  0, "Literal de gastos" ,                                      "LiteralGastos",           "", "( cDbf )", {|| padr( getConfigTraslation( "Gastos" ), 250 ) } } )
   aAdd( aItmPedCli, { "nGenerado", "N",    1,  0, "Estado generado" ,                                        "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nRecibido", "N",    1,  0, "Estado recibido" ,                                        "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lInternet", "L",    1,  0, "Pedido desde internet" ,                                  "",                        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cNumTik",   "C",   13,  0, "Número del ticket generado" ,                             "NumeroTicket",            "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lCancel",   "L",    1,  0, "Lógico pedido cancelado" ,                                "Cancelado",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "dCancel",   "D",    8,  0, "Fecha cancelación" ,                                      "FechaCancelado",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCancel",   "C",  100,  0, "Motivo cancelación" ,                                     "MotivoCancelado",         "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodWeb",   "N",   11,  0, "Codigo del pedido en la web" ,                            "CodigoWeb",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cTlfCli",   "C",   20,  0, "Teléfono del cliente" ,                                   "TelefonoCliente",         "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotNet",   "N",   16,  6, "Total neto" ,                                             "TotalNeto",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotIva",   "N",   16,  6, "Total " + cImp() ,                                        "TotalImpuesto",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotReq",   "N",   16,  6, "Total recago" ,                                           "TotalRecargo",            "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotPed",   "N",   16,  6, "Total pedido" ,                                           "TotalDocumento",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cNumAlb",   "C",   12,  0, "Número del albarán donde se agrupa" ,                     "NumeroAlbaran",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lOperPV",   "L",    1,  0, "Lógico para operar con punto verde" ,                     "OperarPuntoVerde",        "", "( cDbf )", {|| .F. } } )
   aAdd( aItmPedCli, { "cBanco",    "C",   50,  0, "Nombre del banco del cliente",                            "NombreBanco",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cPaisIBAN", "C",    2,  0, "País IBAN de la cuenta bancaria del cliente",             "CuentaIBAN",              "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCtrlIBAN", "C",    2,  0, "Dígito de control IBAN de la cuenta bancaria del cliente","DigitoControlIBAN",       "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cEntBnc",   "C",    4,  0, "Entidad de la cuenta bancaria del cliente",               "EntidadCuenta",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cSucBnc",   "C",    4,  0, "Sucursal de la cuenta bancaria del cliente",              "SucursalCuenta",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDigBnc",   "C",    2,  0, "Dígito de control de la cuenta bancaria del cliente",     "DigitoControlCuenta",     "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCtaBnc",   "C",   10,  0, "Cuenta bancaria del cliente",                             "CuentaBancaria",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lProduc",   "L",    1,  0, "Lógico para incluir en producción" ,                      "IncluirEnProduccion",     "", "( cDbf )", {|| .T. } } )
   aAdd( aItmPedCli, { "nDtoTarifa","N",    6,  2, "Descuentos de tarifa",                                        "DescuentoTarifa",          "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "mFirma",    "M",   10,  2, "Firma",                                                   "Firma",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCtrCoste", "C",    9,  0, "Código del centro de coste" ,                             "CentroCoste",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lFirma",    "L",    1,  0, "Confirmación firma" ,                                     "ConfirmaFirma",           "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nPrepare",  "N",    1,  0, "Estado pedido preparado" ,                                "EstadoPreparado",         "", "( cDbf )", 1 } )
   aAdd( aItmPedCli, { "cIdWP",     "C",   40,  0, "Id relación con WordPress" ,                              "",                        "", "( cDbf )", nil } )


return ( aItmPedCli )



function aColPedCli()

   local aColPedCli  := {}

   aAdd( aColPedCli, { "cSerPed",   "C",    1,  0, "",                                                "Serie",                      "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nNumPed",   "N",    9,  0, "",                                                "Numero",                     "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cSufPed",   "C",    2,  0, "",                                                "Sufijo",                     "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cRef",      "C",   18,  0, "Referencia del artículo",                         "Articulo",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodPr1",   "C",   20,  0, "Código de la primera propiedad",                  "CodigoPropiedad1",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodPr2",   "C",   20,  0, "Código de la segunda propiedad",                  "CodigoPropiedad2",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cValPr1",   "C",   20,  0, "Valor de la primera propiedad",                   "ValorPropiedad1",            "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cValPr2",   "C",   20,  0, "Valor de la segunda propiedad",                   "ValorPropiedad2",            "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cDetalle",  "C",  250,  0, "Descripción de artículo",                         "DescripcionArticulo",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nIva"    ,  "N",    6,  2, "Porcentaje de impuesto",                          "PorcentajeImpuesto",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nCanPed" ,  "N",   16,  6, cNombreCajas(),                                    "Cajas",                      "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nUniCaja",  "N",   16,  6, cNombreUnidades(),                                 "Unidades",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nUndKit",   "N",   16,  6, "Unidades del producto kit",                       "UnidadesKit",                "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPreDiv" ,  "N",   16,  6, "Precio del artículo",                             "PrecioVenta",                "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPntVer",   "N",   16,  6, "Importe punto verde",                             "PuntoVerde",                 "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nImpTrn",   "N",   16,  6, "Importe de portes",                               "Portes",                     "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nDto",      "N",    6,  2, "Descuento del producto",                          "DescuentoPorcentual",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nDtoPrm",   "N",    6,  2, "Descuento de la promoción",                       "DescuentoPromocion",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nComAge",   "N",    6,  2, "Comisión del agente",                             "ComisionAgente",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nCanEnt",   "N",   16,  6, "",                                                "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nUniEnt",   "N",   16,  6, "",                                                "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cUnidad",   "C",   2,   0, "Unidad de medición",                              "UnidadMedicion",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPesokg",   "N",   16,  6, "Peso del producto",                               "Peso",                       "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cPesokg",   "C",    2,  0, "Unidad de peso del producto",                     "UnidadMedicionPeso",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "dFecha",    "D",    8,  0, "Fecha de entrega",                                "FechaEntrega",               "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cTipMov",   "C",    2,  0, "Tipo de movimiento",                              "Tipo",                       "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "mLngDes",   "M",   10,  0, "Descripción de artículo sin codificar",           "DescripcionAmpliada",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lTotLin",   "L",    1,  0, "Línea de total",                                  "LineaTotal",                 "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lImpLin",   "L",    1,  0, "Línea no imprimible",                             "LineaNoImprimible",          "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nFacCnv",   "N",   13,  4, "",                                                "FactorConversion",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nDtoDiv",   "N",   16,  6, "Descuento lineal de la compra",                   "DescuentoLineal",            "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lResUnd",   "L",    1,  0, "Reservar unidades del stock",                     "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nResUnd",   "N",   16,  6, "Unidades reservadas de del stock",                "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nRetUnd",   "N",   16,  6, "Und. entregadas de las reservadas",               "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nNumLin",   "N",    4,  0, "Numero de la línea",                              "NumeroLinea",                "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nCtlStk",   "N",    1,  0, "Tipo de stock de la linea",                       "TipoStock",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nCosDiv",   "N",   16,  6, "Costo del producto" ,                             "PrecioCosto",                "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPvpRec",   "N",   16,  6, "Precio de venta recomendado" ,                    "PrecioVentaRecomendado",     "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cAlmLin",   "C",   16,  0, "Código de almacén" ,                              "Almacen",                    "", "( cDbfCol )", {|| Application():codigoAlmacen() } } )
   aAdd( aColPedCli, { "cCodImp",   "C",    3,  0, "Código del IVMH",                                 "ImpuestoEspecial",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nValImp",   "N",   16,  6, "Importe de impuesto",                             "ImporteImpuestoEspecial",    "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lIvaLin",   "L",    1,  0, "Línea con impuesto incluido",                     "LineaImpuestoIncluido",      "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lLote",     "L",    1,  0, "",                                                "LogicoLote",                 "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nLote",     "N",    9,  0, "",                                                "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cLote",     "C",   64,  0, "Número de lote",                                  "Lote",                       "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lKitArt",   "L",    1,  0, "Línea con escandallo",                            "LineaEscandallo",            "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lKitChl",   "L",    1,  0, "Línea pertenciente a escandallo",                 "LineaPerteneceEscandallo",   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lKitPrc",   "L",    1,  0, "Línea de escandallos con precio",                 "LineaEscandalloPrecio",      "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nMesGrt",   "N",    2,  0, "Meses de garantía",                               "MesesGarantia",              "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lMsgVta",   "L",    1,  0, "Avisar en venta sin stocks",                      "AvisarSinStock",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lNotVta",   "L",    1,  0, "No permitir venta sin stocks",                    "NoPermitirSinStock",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lConTrol",  "L",    1,  0, "" ,                                               "LineaControl",               "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "mNumSer",   "M",   10,  0, "" ,                                               "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodTip",   "C",    4,  0, "Código del tipo de artículo",                     "TipoArticulo",               "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lAnulado",  "L",    1,  0, "Anular linea",                                    "AnularLinea",                "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "dAnulado",  "D",    8,  0, "Fecha de anulacion",                              "FechaAnulacion",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "mAnulado",  "M",  100,  0, "Motivo anulacion",                                "MotivoAnulacion",            "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodFam",   "C",   16,  0, "Código de familia",                               "Familia",                    "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cGrpFam",   "C",    3,  0, "Código de grupo de familia",                      "GrupoFamilia",               "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nReq",      "N",   16,  6, "Recargo de equivalencia",                         "RecargoEquivalencia",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "mObsLin",   "M",   10,  0, "Observaciones de linea",                          "Observaciones",              "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nRecibida", "N",    1,  0, "Estado si recibido del artículo",                 "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodPrv",   "C",   12,  0, "Código del proveedor",                            "Proveedor",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cNomPrv",   "C",   30,  0, "Nombre del proveedor",                            "NombreProveedor",            "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cImagen",   "C",  250,  0, "Fichero de imagen" ,                              "Imagen",                     "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPuntos",   "N",   15,  6, "Puntos del artículo",                             "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nValPnt",   "N",   16,  6, "Valor del punto",                                 "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nDtoPnt",   "N",    6,  2, "Descuento puntos",                                "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nIncPnt",   "N",    6,  2, "Incremento porcentual",                           "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cRefPrv",   "C",   18,  0, "Referencia proveedor",                            "ReferenciaProveedor",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nVolumen",  "N",   16,  6, "Volumen del producto" ,                           "Volumen",                    "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cVolumen",  "C",    2,  0, "Unidad del volumen" ,                             "UnidadMedicionVolumen",      "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "dFecEnt" ,  "D",    8,  0, "Fecha inicio de servicio",                        "InicioServicio",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "dFecSal" ,  "D",    8,  0, "Fecha fin de servicio",                           "FinServicio",                "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lAlquiler" ,"L",    1,  0, "Lógico de alquiler",                              "Alquiler",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPreAlq",   "N",   16,  6, "Precio de alquiler",                              "PrecioAlquiler",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nNumMed",   "N",    1,  0, "Número de mediciones",                            "NumeroMedidiones",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nMedUno",   "N",   16,  6, "Primera unidad de medición",                      "Medicion1",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nMedDos",   "N",   16,  6, "Segunda unidad de medición",                      "Medicion2",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nMedTre",   "N",   16,  6, "Tercera unidad de medición",                      "Medicion3",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nTarLin",   "N",    1,  0, "Tarifa de precio aplicada" ,                      "NumeroTarifa",               "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lImpFra",   "L",    1,  0, "Lógico de imprimir frase publicitaria",           "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodFra",   "C",    3,  0, "Código de frase publicitaria",                    "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cTxtFra",   "C",  250,  0, "",                                                "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "Descrip",   "M",   10,  0, "Descripción larga",                               "DescripcionTecnica",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lLinOfe",   "L",    1,  0, "Linea con oferta",                                "LineaOferta",                "", "( cDbfCol )", .F. } )
   aAdd( aColPedCli, { "lVolImp",   "L",    1,  0, "Lógico aplicar volumen con impuestos especiales", "VolumenImpuestosEspeciales", "", "( cDbfCol )", .F. } )
   aAdd( aColPedCli, { "nProduc",   "N",    1,  0, "Lógico de producido",                             "EstadoProducido",            "", "( cDbfCol )", .F. } )
   aAdd( aColPedCli, { "dFecCad",   "D",    8,  0, "Fecha de caducidad",                              "FechaCaducidad",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "dFecUltCom","D",    8,  0, "Fecha ultima venta",                              "FechaUltimaVenta",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lFromAtp"  ,"L",    1,  0, "",                                                   "",                              "", "( cDbfCol )", .F. } )
   aAdd( aColPedCli, { "nUniUltCom","N",   16,  6, "Unidades última compra",                          "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nBultos",   "N",   16,  6, "Numero de bultos en líneas",                       "Bultos",                        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cFormato",  "C",  100,  0, "Formato de venta",                                "Formato",                       "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lLabel",    "L",    1,  0, "Lógico para marca de etiqueta",                      "LogicoEtiqueta",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nLabel",    "N",    6,  0, "Unidades de etiquetas a imprimir",                "NumeroEtiqueta",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "dFecFin",   "D",    8,  0, "Fecha fin de entrega",                            "FechaEntregaFin",            "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cObrLin",   "C",   10,  0, "Dirección de la linea",                           "Direccion",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cRefAux",   "C",   18,  0, "Referencia auxiliar",                             "ReferenciaAuxiliar",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cRefAux2",  "C",   18,  0, "Segunda referencia auxiliar",                     "ReferenciaAuxiliar2",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPosPrint", "N",    4,  0, "Posición de impresión",                           "PosicionImpresion",          "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCtrCoste", "C",    9,  0, "Código del centro de coste",                      "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cTipCtr",   "C",   20,  0, "Tipo tercero centro de coste",                    "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cTerCtr",   "C",   20,  0, "Tercero centro de coste",                         "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nNumKit",   "N",    4,  0, "Número de línea de escandallo",                   "",                           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "id_tipo_v", "N",   16,  0, "Identificador tipo de venta",                     "IdentificadorTipoVenta",     "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nRegIva",   "N",    1,  0, "Régimen de " + cImp(),                            "TipoImpuesto",               "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPrcUltCom","N",   16,  6, "Precio última compra",                            "PrecioUltimaVenta",          "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lPreparado","L",    1,  0, "Lógico línea preparada",                             "LogicoPreparado",            "", "( cDbfCol )", .F. } )

return ( aColPedCli )



function aIncPedCli()

   local aIncPedCli  := {}

   aAdd( aIncPedCli, { "cSerPed", "C",    1,  0, "Serie de pedido" ,                      "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "nNumPed", "N",    9,  0, "Número de pedido" ,                     "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "cSufPed", "C",    2,  0, "Sufijo de pedido" ,                     "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "cCodTip", "C",    3,  0, "Tipo de incidencia" ,                   "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "dFecInc", "D",    8,  0, "Fecha de la incidencia" ,               "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "mDesInc", "M",   10,  0, "Descripción de la incidencia" ,         "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "lListo",  "L",    1,  0, "Lógico de listo" ,                      "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "lAviso",  "L",    1,  0, "Lógico de aviso" ,                      "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "lSndWeb", "L",    1,  0, "Lógico de incidencia subia a la web" ,  "",                   "", "( cDbfCol )", nil } )

return ( aIncPedCli )



function aPedCliDoc()

   local aPedCliDoc  := {}

   aAdd( aPedCliDoc, { "cSerPed", "C",    1,  0, "Serie de pedido" ,            "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "nNumPed", "N",    9,  0, "Numero de pedido" ,           "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "cSufPed", "C",    2,  0, "Sufijo de pedido" ,           "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "cNombre", "C",  250,  0, "Nombre del documento" ,       "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "cRuta",   "C",  250,  0, "Ruta del documento" ,         "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento", "",                   "", "( cDbfCol )", nil } )

return ( aPedCliDoc )



function aPedCliEst()

   local aPedCliEst  := {}

   aAdd( aPedCliEst, { "cSerPed", "C",    1,  0, "Serie de pedido" ,            "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliEst, { "nNumPed", "N",    9,  0, "Numero de pedido" ,           "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aPedCliEst, { "cSufPed", "C",    2,  0, "Sufijo de pedido" ,           "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliEst, { "cSitua",  "C",  140,  0, "Situación" ,                        "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliEst, { "dFecSit", "D",    8,  0, "Fecha de la situación" ,      "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliEst, { "tFecSit", "C",    6,  0, "Hora de la situación" ,       "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliEst, { "idPs",    "N",   11,  0, "Id prestashop" ,              "",                   "", "( cDbfCol )", nil } )

return ( aPedCliEst )



function aPedCliPgo()

   local aPedCliPgo  := {}

   aAdd( aPedCliPgo, {"cSerPed"     ,"C",  1, 0, "Serie de pedido" ,            "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nNumPed"     ,"N",  9, 0, "Numero de pedido" ,           "'999999999'",        "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cSufPed"     ,"C",  2, 0, "Sufijo de pedido" ,           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nNumRec"     ,"N",  2, 0, "Numero del recibo",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodCaj"     ,"C",  3, 0, "Código de caja",              "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cTurRec"     ,"C",  6, 0, "Sesión del recibo",           "######",             "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodCli"     ,"C", 12, 0, "Código de cliente",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"dEntrega"    ,"D",  8, 0, "Fecha de cobro",              "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nImporte"    ,"N", 16, 6, "Importe",                     "cPorDivEnt",         "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDescrip"    ,"C",100, 0, "Concepto del pago",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cPgdoPor"    ,"C", 50, 0, "Pagado por",                  "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDocPgo"     ,"C", 50, 0, "Documento de pago",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDivPgo"     ,"C",  3, 0, "Código de la divisa",         "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nVdvPgo"     ,"N", 10, 6, "Valor de la divisa",          "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodAge"     ,"C",  3, 0, "Código del agente",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodPgo"     ,"C",  2, 0, "Código de pago",              "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"lCloPgo"     ,"L",  1, 0, "Lógico cerrado turno",        "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"lPasado"     ,"L",  1, 0, "Lógico pasado albarán",       "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cBncEmp"     ,"C", 50, 0, "Banco de la empresa para el recibo" ,"",            "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cBncCli"     ,"C", 50, 0, "Banco del cliente para el recibo" ,"",              "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cEPaisIBAN"  ,"C",  2, 0, "País IBAN de la cuenta de la empresa",  "",            "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cECtrlIBAN"  ,"C",  2, 0, "Digito de control IBAN de la cuenta de la empresa", "", "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cEntEmp"     ,"C",  4, 0, "Entidad de la cuenta de la empresa",  "",           "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cSucEmp"     ,"C",  4, 0, "Sucursal de la cuenta de la empresa",  "",          "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDigEmp"     ,"C",  2, 0, "Dígito de control de la cuenta de la empresa", "",  "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCtaEmp"     ,"C", 10, 0, "Cuenta bancaria de la empresa",  "",                "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cPaisIBAN"   ,"C",  2, 0, "País IBAN de la cuenta del cliente",  "",            "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCtrlIBAN"   ,"C",  2, 0, "Digito de control IBAN de la cuenta del cliente", "", "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cEntCli"     ,"C",  4, 0, "Entidad de la cuenta del cliente",  "",             "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cSucCli"     ,"C",  4, 0, "Sucursal de la cuenta del cliente",  "",            "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDigCli"     ,"C",  2, 0, "Dígito de control de la cuenta del cliente", "",    "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCtaCli"     ,"C", 10, 0, "Cuenta bancaria del cliente",  "",                  "", "( cDbfEnt )", nil } )

return ( aPedCliPgo )



Function nombrePrimeraPropiedadPedidosClientesLineas( )

Return ( nombrePropiedad( ( D():PedidosClientesLineas( nView ) )->cCodPr1, ( D():PedidosClientesLineas( nView ) )->cValPr1, nView ) )



Function nombreSegundaPropiedadPedidosClientesLineas()

Return ( nombrePropiedad( ( D():PedidosClientesLineas( nView ) )->cCodPr2, ( D():PedidosClientesLineas( nView ) )->cValPr2, nView ) )



Function unidadesRecibidasPedidosClientesLineas()

Return ( nUnidadesRecibidasAlbaranesClientes( D():PedidosClientesLineasId( nView ), ( D():PedidosClientesLineas( nView ) )->cRef, ( D():PedidosClientesLineas( nView ) )->cValPr1, ( D():PedidosClientesLineas( nView ) )->cValPr2, D():AlbaranesClientesLineas( nView ) ) )






function nTotNPedCli( uDbf )

   local nTotUnd

   If( uDbf == nil, uDbf := D():PedidosClientesLineas( nView ), ) ;

   do case
   case ValType( uDbf ) == "A"

      nTotUnd  := NotBulto( uDbf[ 93 ] )
      nTotUnd  *= NotCaja( uDbf[ 11 ] )
      nTotUnd  *= uDbf[ 12 ]
      nTotUnd  *= NotCero( uDbf[ 13 ] )
      nTotUnd  *= NotCero( uDbf[ 78 ] )
      nTotUnd  *= NotCero( uDbf[ 79 ] )
      nTotUnd  *= NotCero( uDbf[ 80 ] )

   case ValType( uDbf ) == "O"

      nTotUnd  := NotBulto( uDbf:nBultos )
      nTotUnd  *= NotCaja( uDbf:nCanPed )
      nTotUnd  *= uDbf:nUniCaja
      nTotUnd  *= NotCero( uDbf:nUndKit )
      nTotUnd  *= NotCero( uDbf:nMedUno )
      nTotUnd  *= NotCero( uDbf:nMedDos )
      nTotUnd  *= NotCero( uDbf:nMedTre )

   case ValType( uDbf ) == "H"

      nTotUnd  := NotBulto( hGet( uDbf, "Bultos" ) )
      nTotUnd  *= NotCaja( hGet( uDbf, "Cajas" ) )
      nTotUnd  *= hGet( uDbf, "Unidades" )
      nTotUnd  *= NotCero( hGet( uDbf, "UnidadesKit" ) )
      nTotUnd  *= NotCero( hGet( uDbf, "Medicion1" ) )
      nTotUnd  *= NotCero( hGet( uDbf, "Medicion2" ) )
      nTotUnd  *= NotCero( hGet( uDbf, "Medicion3" ) )

   otherwise

      nTotUnd  := NotBulto( ( uDbf )->nBultos )
      nTotUnd  *= NotCaja( ( uDbf )->nCanPed )
      nTotUnd  *= ( uDbf )->nUniCaja
      nTotUnd  *= NotCero( ( uDbf )->nUndKit )
      nTotUnd  *= NotCero( ( uDbf )->nMedUno )
      nTotUnd  *= NotCero( ( uDbf )->nMedDos )
      nTotUnd  *= NotCero( ( uDbf )->nMedTre )

   end

return ( nTotUnd )



FUNCTION nTotRPedCli( cRef, cValPr1, cValPr2, dbfPedCliR )

   local nOrd
   local nRec
   local nTotRes        := 0

   If( cValPr1 == nil, cValPr1 := space( 20 ), ) ;
   If( cValPr2 == nil, cValPr2 := space( 20 ), ) ;
   If( dbfPedCliR == nil, dbfPedCliR := D():PedidosClientesReservas( nView ), ) ;

   nRec                 := ( dbfPedCliR )->( recno() )
   nOrd                 := ( dbfPedCliR )->( ordsetfocus( "cRef" ) )

   if ( dbfPedCliR )->( dbseek( cRef + cValPr1 + cValPr2 ) )
      while ( dbfPedCliR )->cRef + ( dbfPedCliR )->cValPr1 + ( dbfPedCliR )->cValPr2 == cRef + cValPr1 + cValPr2 .AND. !( dbfPedCliR )->( eof() )

         nTotRes        += nTotNResCli( dbfPedCliR )

         ( dbfPedCliR )->( dbskip() )

      end
   end

   ( dbfPedCliR )->( ordsetfocus( nOrd ) )
   ( dbfPedCliR )->( dbgoto( nRec ) )

return ( nTotRes )



FUNCTION nUnidadesReservadasEnPedidosCliente( nNumPed, cCodArt, cValPr1, cValPr2, dbfPedCliR )

   local nOrd
   local nRec
   local nUnidades      := 0

   If( nNumPed == nil, nNumPed := ( D():PedidosClientesLineas( nView ) )->cSerPed + str( ( D():PedidosClientesLineas( nView ) )->nNumPed ) + ( D():PedidosClientesLineas( nView ) )->cSufPed, ) ;
   If( cCodArt == nil, cCodArt := ( D():PedidosClientesLineas( nView ) )->cRef, ) ;
   If( cValPr1 == nil, cValPr1 := ( D():PedidosClientesLineas( nView ) )->cValPr1, ) ;
   If( cValPr2 == nil, cValPr2 := ( D():PedidosClientesLineas( nView ) )->cValPr2, ) ;
   If( dbfPedCliR == nil, dbfPedCliR := D():PedidosClientesReservas( nView ), ) ;

   nRec                 := ( dbfPedCliR )->( recno() )
   nOrd                 := ( dbfPedCliR )->( ordsetfocus( "nNumPed" ) )

   if ( dbfPedCliR )->( dbseek( nNumPed + cCodArt + cValPr1 + cValPr2 ) )
      while ( dbfPedCliR )->cSerPed + str( ( dbfPedCliR )->nNumPed ) + ( dbfPedCliR )->cSufPed + ( dbfPedCliR )->cRef + ( dbfPedCliR )->cValPr1 + ( dbfPedCliR )->cValPr2 == nNumPed + cCodArt + cValPr1 + cValPr2 .AND. !( dbfPedCliR )->( eof() )

         nUnidades      += nTotNResCli( dbfPedCliR )

         ( dbfPedCliR )->( dbskip() )

      end
   end

   ( dbfPedCliR )->( ordsetfocus( nOrd ) )
   ( dbfPedCliR )->( dbgoto( nRec ) )

return ( nUnidades )








FUNCTION nTotPedCli( cPedido, cPedCliT, cPedCliL, cIva, cDiv, cFpago, aTmp, cDivRet, lPic, cClient )

   local n
   local nRecno
   local cCodDiv
   local cPouDiv
   local dFecPed
   local bCondition
   local nDtoEsp
   local nDtoPP
   local nDtoUno
   local nDtoDos
   local lIvaInc
   local nIvaMan
   local nManObr
   local nSbrAtp
   local nDtoAtp
   local nKgsTrn
   local nTotLin           := 0
   local nTotUnd           := 0
   local aTotalDto         := { 0, 0, 0 }
   local aTotalDPP         := { 0, 0, 0 }
   local aTotalUno         := { 0, 0, 0 }
   local aTotalDos         := { 0, 0, 0 }
   local aTotalAtp         := { 0, 0, 0 }
   local lRecargo
   local nTotAcu           := 0
   local nDescuentosLineas := 0
   local lPntVer           := .F.
   local nRegIva
   local nBaseGasto
   local nIvaGasto

   local oTotalDoc         := nTotalDocumento():new( nView )

    if !empty( nView )
      If( cPedCliT == nil, cPedCliT := D():PedidosClientes( nView ), ) ;
      If( cPedCliL == nil, cPedCliL := D():PedidosClientesLineas( nView ), ) ;
      If( cClient == nil, cClient := D():Clientes( nView ), ) ;
      If( cIva == nil, cIva := D():TiposIva( nView ), ) ;
      If( cDiv == nil, cDiv := D():Divisas( nView ), ) ;
      If( cFPago == nil, cFPago := D():FormasPago( nView ), ) ;
   end

    If( cPedido == nil, cPedido := ( cPedCliT )->cSerPed + Str( ( cPedCliT )->nNumPed ) + ( cPedCliT )->cSufPed, ) ;
    If( lPic == nil, lPic := .F., ) ;

    if Empty( Select( cPedCliT ) )
       Return ( 0 )
    end

    if Empty( Select( cPedCliL ) )
       Return ( 0 )
    end

    if Empty( Select( cIva ) )
       Return ( 0 )
    end

    if Empty( Select( cDiv ) )
       Return ( 0 )
   end

   public nTotPed       := 0
   public nTotDto       := 0
   public nTotDPP       := 0
   public nTotNet       := 0
   public nTotIvm       := 0
   public nTotIva       := 0
   public nTotReq       := 0
   public nTotAge       := 0
   public nTotPnt       := 0
   public nTotUno       := 0
   public nTotDos       := 0
   public nTotTrn       := 0
   public nTotCos       := 0
   public nTotRnt       := 0
   public nTotAtp       := 0
   public nTotPes       := 0
   public nTotDif       := 0
   public nPctRnt       := 0
   public nTotBrt       := 0










   public aTotIva       := {{    "porcentajeiva"   => nil, "logrecargo"      => .F., "porcentajere"    => nil, "bruto"           => nil, "neto"            => nil, "impiva"          => nil, "impre"           => nil, "nivmh"           => nil, "ntransporte"     => nil, "npntver"         => nil }}

   public aIvaUno       := {}
   public aIvaDos       := {}
   public aIvaTre       := {}

   public aTotIvm       := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }
   public aIvmUno       := aTotIvm[ 1 ]
   public aIvmDos       := aTotIvm[ 2 ]
   public aIvmTre       := aTotIvm[ 3 ]

   public aImpVto       := {}
   public aDatVto       := {}

   public nNumArt       := 0
   public nNumCaj       := 0

   public nTotArt       := nNumArt
   public nTotCaj       := nNumCaj

   public nTotalDto     := 0

   public cCtaCli       := cClientCuenta( ( cPedCliT )->cCodCli )

   nRecno               := ( cPedCliL )->( RecNo() )

   if aTmp <> nil

      lRecargo          := aTmp[ 42]
      dFecPed           := aTmp[ 5 ]
      nDtoEsp           := aTmp[ 30 ]
      nDtoPP            := aTmp[ 32    ]
      nDtoUno           := aTmp[ 34 ]
      nDtoDos           := aTmp[ 36 ]
      cCodDiv           := aTmp[ 46 ]
      nVdvDiv           := aTmp[ 47 ]
      lIvaInc           := aTmp[ 51 ]
      nIvaMan           := aTmp[ 52 ]
      nManObr           := aTmp[ 53 ]
      nSbrAtp           := aTmp[ 70 ]
      nDtoAtp           := aTmp[ 69 ]
      nKgsTrn           := aTmp[ 55 ]
      lPntVer           := aTmp[ 91 ]
      nRegIva           := aTmp[ 50 ]
      bCondition        := {|| ( cPedCliL )->( !eof() ) }
      ( cPedCliL )->( dbGoTop() )

   else

      lRecargo          := ( cPedCliT )->lRecargo
      dFecPed           := ( cPedCliT )->dFecPed
      nDtoEsp           := ( cPedCliT )->nDtoEsp
      nDtoPP            := ( cPedCliT )->nDpp
      nDtoUno           := ( cPedCliT )->nDtoUno
      nDtoDos           := ( cPedCliT )->nDtoDos
      cCodDiv           := ( cPedCliT )->cDivPed
      nVdvDiv           := ( cPedCliT )->nVdvPed
      lIvaInc           := ( cPedCliT )->lIvaInc
      nIvaMan           := ( cPedCliT )->nIvaMan
      nManObr           := ( cPedCliT )->nManObr
      nSbrAtp           := ( cPedCliT )->nSbrAtp
      nDtoAtp           := ( cPedCliT )->nDtoAtp
      nKgsTrn           := ( cPedCliT )->nKgsTrn
      lPntVer           := ( cPedCliT )->lOperPv
      nRegIva           := ( cPedCliT )->nRegIva
      bCondition        := {|| ( cPedCliL )->cSerPed + Str( ( cPedCliL )->nNumPed ) + ( cPedCliL )->cSufPed == cPedido .AND. ( cPedCliL )->( !eof() ) }
      ( cPedCliL )->( dbSeek( cPedido ) )

   end





   cPouDiv              := cPouDiv( cCodDiv, cDiv )
   cPorDiv              := cPorDiv( cCodDiv, cDiv )
   cPpvDiv              := cPpvDiv( cCodDiv, cDiv )
   nDouDiv              := nDouDiv( cCodDiv, cDiv )
   nRouDiv              := nRouDiv( cCodDiv, cDiv )
   nDpvDiv              := nDpvDiv( cCodDiv, cDiv )

   while Eval( bCondition )

      if lValLine( cPedCliL )

         if ( cPedCliL )->lTotLin





            if ( cPedCliL )->nPreDiv <> nTotLin .OR. ( cPedCliL )->nUniCaja <> nTotUnd

               if dbLock( cPedCliL )
                  ( cPedCliL )->nPreDiv    := nTotLin
                  ( cPedCliL )->nUniCaja   := nTotUnd
                  ( cPedCliL )->( dbUnLock() )
               end

            end





            nTotLin           := 0
            nTotUnd           := 0

         else

            nTotArt           := nTotLPedCli( cPedCliL, nDouDiv, nRouDiv, , , .F., .F., )
            nTotPnt           := if( lPntVer, nPntLPedCli( cPedCliL, nDpvDiv ), 0 )
            nTotTrn           := nTrnLPedCli( cPedCliL, nDouDiv )
            nTotIvm           := nTotIPedCli( cPedCliL, nDouDiv, nRouDiv )
            nTotCos           += nTotCPedCli( cPedCliL, nDouDiv, nRouDiv )
            nTotPes           += nPesLPedCli( cPedCliL )
            nDescuentosLineas += nTotDtoLPedCli( cPedCliL, nDouDiv )

            if aTmp <> nil
               nTotAge        += nComLPedCli( aTmp, cPedCliL, nDouDiv, nRouDiv )
            else
               nTotAge        += nComLPedCli( cPedCliT, cPedCliL, nDouDiv, nRouDiv )
            end



            nTotLin           += nTotArt
            nTotUnd           += nTotNPedCli( cPedCliL )

            nNumArt           += nTotNPedCli( cPedCliL )
            nNumCaj           += ( cPedCliL )->nCanPed





            oTotalDoc:setArrayImpuesto( ( cPedCliL )->nIva, lRecargo, ( cPedCliL )->nReq, nTotArt, nTotIvm, nTotTrn, nTotPnt )
































            if ( cPedCliL )->nValImp <> 0

               do case
                  case aTotIvm[ 1, 2 ] == nil .OR. aTotIvm[ 1, 2 ] == ( cPedCliL )->nValImp
                     aTotIvm[ 1, 1 ]      += nTotNPedCli( cPedCliL ) * if( ( cPedCliL )->lVolImp, NotCero( ( cPedCliL )->nVolumen ), 1 )
                     aTotIvm[ 1, 2 ]      := ( cPedCliL )->nValImp
                     aTotIvm[ 1, 3 ]      := aTotIvm[ 1, 1 ] * aTotIvm[ 1, 2 ]

                  case aTotIvm[ 2, 2 ] == nil .OR. aTotIvm[ 2, 2 ] == ( cPedCliL )->nValImp
                     aTotIvm[ 2, 1 ]      += nTotNPedCli( cPedCliL ) * if( ( cPedCliL )->lVolImp, NotCero( ( cPedCliL )->nVolumen ), 1 )
                     aTotIvm[ 2, 2 ]      := ( cPedCliL )->nValImp
                     aTotIvm[ 2, 3 ]      := aTotIvm[ 2, 1 ] * aTotIvm[ 2, 2 ]

                  case aTotIvm[ 3, 2 ] == nil .OR. aTotIvm[ 3, 2 ] == ( cPedCliL )->nValImp
                     aTotIvm[ 3, 1 ]      += nTotNPedCli( cPedCliL ) * if( ( cPedCliL )->lVolImp, NotCero( ( cPedCliL )->nVolumen ), 1 )
                     aTotIvm[ 3, 2 ]      := ( cPedCliL )->nValImp
                     aTotIvm[ 3, 3 ]      := aTotIvm[ 3, 1 ] * aTotIvm[ 3, 2 ]

               end

            end

         end

      end

      ( cPedCliL )->( dbSkip() )

   end

   ( cPedCliL )->( dbGoto( nRecno ) )







   aTotIva           := oTotalDoc:getArrayImpuesto()
   aTotIva           := aSort( aTotIva,,, {|x,y| hGet( x, "porcentajeiva" ) > hGet( y, "porcentajeiva" ) } )

   nTotBrt         := oTotalDoc:getTotalBruto()

   if nDtoEsp <> 0
      nTotDto := oTotalDoc:setDescuentoEspecial( nDtoEsp )
   end
   if nDtoPP <> 0
      nTotDPP := oTotalDoc:setDescuentoProntoPago( nDtoPP )
   end
   if nDtoUno <> 0
      nTotUno := oTotalDoc:setDescuentoUno( nDtoUno )
   end
   if nDtoDos <> 0
      nTotDos := oTotalDoc:setDescuentoDos( nDtoDos )
   end

























































































































































































































































   oTotalDoc:setImportesImpuesto( lIvaInc, nRegIva, nRouDiv )

   if lRecargo .AND. lIvaInc
      nTotBrt         := oTotalDoc:getTotalBruto()
   end



   if nManObr <> 0

      if lIvaInc
         nIvaGasto   := Round( nManObr / ( 100 / nIvaMan + 1 ), nRouDiv )
         nBaseGasto  := nManObr - nIvaGasto
      else
         nBaseGasto  := nManObr
         nIvaGasto   := Round( nManObr * nIvaMan / 100, nRouDiv )
      end



















      oTotalDoc:setGastos( nIvaMan, nBaseGasto, nIvaGasto )

   end






   nTotNet           := oTotalDoc:getTotalNeto()






   nTotIvm           := oTotalDoc:getTotalIvmh()






   nTotTrn           := oTotalDoc:getTotalTrn()






   nTotPnt           := oTotalDoc:getTotalPntVer()






   nTotIva           := oTotalDoc:getTotalIva()






   nTotReq           := oTotalDoc:getTotalRE()





   nTotImp           := Round( nTotIva + nTotReq + nTotIvm , nRouDiv )





   nTotRnt           := Round(         nTotNet - nManObr - nTotAge - nTotPnt - nTotAtp - nTotCos, nRouDiv )

   nPctRnt           := nRentabilidad( nTotNet - nManObr - nTotAge - nTotPnt, nTotAtp, nTotCos )





   if nKgsTrn <> 0
      nTotDif        := nKgsTrn - nTotPes
   else
      nTotDif        := 0
   end





   nTotPed           := nTotNet + nTotImp





   nTotalDto         := nDescuentosLineas + nTotDto + nTotDpp + nTotUno + nTotDos + nTotAtp





   if !Empty( cFpago ) .AND. ( cFpago )->( dbSeek( ( cPedCliT )->cCodPgo ) )

      nTotAcu        := nTotPed

      for n := 1 to ( cFPago )->nPlazos

         if n <> ( cFPago )->nPlazos
            nTotAcu  -= Round( nTotPed / ( cFPago )->nPlazos, nRouDiv )
         end

         aAdd( aImpVto, if( n <> ( cFPago )->nPlazos, Round( nTotPed / ( cFPago )->nPlazos, nRouDiv ), Round( nTotAcu, nRouDiv ) ) )

         aAdd( aDatVto, dNexDay( dFecPed + ( cFPago )->nPlaUno + ( ( cFPago )->nDiaPla * ( n - 1 ) ), cClient ) )

      next

   end

   ( cPedCliL )->( dbGoTo( nRecno) )





   if cDivRet <> nil .AND. cDivRet <> cCodDiv
      nTotNet     := nCnv2Div( nTotNet, cCodDiv, cDivRet )
      nTotIvm     := nCnv2Div( nTotIvm, cCodDiv, cDivRet )
      nTotIva     := nCnv2Div( nTotIva, cCodDiv, cDivRet )
      nTotReq     := nCnv2Div( nTotReq, cCodDiv, cDivRet )
      nTotPed     := nCnv2Div( nTotPed, cCodDiv, cDivRet )
      nTotPnt     := nCnv2Div( nTotPnt, cCodDiv, cDivRet )
      nTotTrn     := nCnv2Div( nTotTrn, cCodDiv, cDivRet )
      cPorDiv     := cPorDiv( cDivRet, cDiv )
   end

RETURN ( if( lPic, Trans( nTotPed, cPorDiv ), nTotPed ) )



Function nPntUPedCli( dbfTmpLin, nDec, nVdv )

   local nCalculo := ( dbfTmpLin )->NPNTVER

   If( nDec == nil, nDec := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

    IF nVdv <> 0
      nCalculo    /= nVdv
    end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nTrnUPedCli( dbfTmpLin, nDec, nVdv )

    local nCalculo

   If( nDec == nil, nDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := ( dbfTmpLin )->nImpTrn

    IF nVdv <> 0
      nCalculo    := nCalculo / nVdv
    end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nDtoUPedCli( dbfTmpLin, nDec, nVdv )

   local nCalculo := ( dbfTmpLin )->nDtoDiv

   If( nDec == nil, nDec := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

    IF nVdv <> 0
      nCalculo    /= nVdv
    end

RETURN ( round( nCalculo, nDec ) )




FUNCTION nTotFPedCli( cPedCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )

   local nCalculo := 0

   nCalculo       += nTotLPedCli( cPedCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )
   nCalculo       += nIvaLPedCli( cPedCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )

return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nTotUPedCli( uTmpLin, nDec, nVdv )

   local nCalculo       := 0

   if !Empty( nView )
      If( uTmpLin == nil, uTmpLin := D():PedidosClientesLineas( nView ), ) ;
   end

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   do case
      case Valtype( uTmpLin ) == "C"

         if ( uTmpLin )->lAlquiler
            nCalculo    := ( uTmpLin )->nPreAlq
         else
            nCalculo    := ( uTmpLin )->nPreDiv
         end

      case Valtype( uTmpLin ) == "O"

         if uTmpLin:lAlquiler
            nCalculo    := uTmpLin:nPreAlq
         else
            nCalculo    := uTmpLin:nPreDiv
         end

      case Valtype( uTmpLin ) == "H"
         nCalculo       := hGet( uTmpLin, "PrecioVenta" )

   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



function nEntPedCli( uPedCliP, cDbfDiv, cDivRet, lPic )

   local cDivPgo
   local nRouDiv
   local cPorDiv
   local nTotRec

   If( uPedCliP == nil, uPedCliP := D():PedidosClientesPagos( nView ), ) ;
   If( cDbfDiv == nil, cDbfDiv := D():Divisas( nView ), ) ;
   If( cDivRet == nil, cDivRet := cDivEmp(), ) ;
   If( lPic == nil, lPic := .F., ) ;

   if ValType( uPedCliP ) == "O"
      cDivPgo        := uPedCliP:cDivPgo
      nTotRec        := uPedCliP:nImporte
   else
      cDivPgo        := ( uPedCliP )->cDivPgo
      nTotRec        := ( uPedCliP )->nImporte
   end

   nRouDiv           := nRouDiv( cDivPgo, cDbfDiv )
   cPorDiv           := cPorDiv( cDivPgo, cDbfDiv )

   nTotRec           := Round( nTotRec, nRouDiv )

   if cDivRet <> cDivPgo
      nRouDiv        := nRouDiv( cDivRet, cDbfDiv )
      cPorDiv        := cPorDiv( cDivRet, cDbfDiv )
      nTotRec        := nCnv2Div( nTotRec, cDivPgo, cDivRet )
   end

RETURN if( lPic, Trans( nTotRec, cPorDiv ), nTotRec )



FUNCTION nComLPedCli( uPedCliT, cPedCliL, nDecOut, nDerOut )

   local nImpLPedCli := nImpLPedCli( uPedCliT, cPedCliL, nDecOut, nDerOut, , .F., .T., .F. )

RETURN ( nImpLPedCli * ( cPedCliL )->nComAge / 100 )







FUNCTION nImpLPedCli( uPedCliT, cPedCliL, nDec, nRou, nVdv, lIva, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo
   local lIvaInc

   If( nDec == nil, nDec := 0, ) ;
   If( nRou == nil, nRou := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .F., ) ;
   If( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo          := nTotLPedCli( cPedCliL, nDec, nRou, nVdv, .T., lImpTrn, lPntVer )

   if IsArray( uPedCliT )

      nCalculo       -= Round( nCalculo * uPedCliT[ 30 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uPedCliT[ 32    ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uPedCliT[ 34 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uPedCliT[ 36 ]  / 100, nRou )

      lIvaInc        := uPedCliT[ 51 ]

   else

      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoEsp / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDpp    / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoUno / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoDos / 100, nRou )

      lIvaInc        := ( uPedCliT )->lIvaInc

   end

   if ( cPedCliL )->nIva <> 0
      if lIva
         if !lIvaInc
            nCalculo += Round( nCalculo * ( cPedCliL )->nIva / 100, nRou )
         end
      else
         if lIvaInc
            nCalculo -= Round( nCalculo / ( 100 / ( cPedCliL )->nIva  + 1 ), nRou )
         end
      end
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nPesLPedCli( cPedCliL )

    local nCalculo

   if !Empty( nView )
      If( cPedCliL == nil, cPedCliL := D():PedidosClientesLineas( nView ), ) ;
   end

   if !( cPedCliL )->lTotLin
      nCalculo       := Abs( nTotNPedCli( cPedCliL ) ) * ( cPedCliL )->nPesoKg
   end

RETURN ( nCalculo )



FUNCTION nTotCPedCli( dbfLine, nDec, nRec, nVdv, cPouDiv )

   local nCalculo       := 0

   If( nDec == nil, nDec := 0, ) ;
   If( nRec == nil, nRec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if !( dbfLine )->lKitChl
      nCalculo          := nTotNPedCli( dbfLine )
      nCalculo          *= ( dbfLine )->nCosDiv
   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

   nCalculo             := Round( nCalculo, nRec )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nTotIPedCli( dbfLin, nDec, nRouDec, nVdv, cPorDiv )

   local nCalculo       := 0

   if !Empty( nView )
      If( dbfLin == nil, dbfLin := D():PedidosClientesLineas( nView ), ) ;
   end

   If( nDec == nil, nDec := 0, ) ;
   If( nRouDec == nil, nRouDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   IF !( dbfLin )->lTotLin





      nCalculo       := Round( ( dbfLin )->nValImp, nDec )





      nCalculo       *= nTotNPedCli( dbfLin )

         if ( dbfLin )->LVOLIMP
            nCalculo *= NotCero( ( dbfLin )->nVolumen )
         end

      nCalculo       := Round( nCalculo / nVdv, nRouDec )

   end

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nTrnLPedCli( dbfLin, nDec, nRou, nVdv )

   local nImpTrn

   if !Empty( nView )
      If( dbfLin == nil, dbfLin := D():PedidosClientesLineas( nView ), ) ;
   end

   If( nDec == nil, nDec := 2, ) ;
   If( nRou == nil, nRou := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;





   nImpTrn           := nTrnUPedCli( dbfLin, nDec ) * nTotNPedCli( dbfLin )

   IF nVdv <> 0
      nImpTrn        := nImpTrn / nVdv
    end

RETURN ( Round( nImpTrn, nRou ) )



FUNCTION nPntLPedCli( dbfLin, nDec, nVdv )

   local nPntVer

   if !Empty( nView )
      If( dbfLin == nil, dbfLin := D():PedidosClientesLineas( nView ), ) ;
   end

   If( nDec == nil, nDec := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;





   nPntVer              := ( dbfLin )->nPntVer / nVdv
   nPntVer              *= nTotNPedCli( dbfLin )

RETURN ( Round( nPntVer, nDec ) )



Function isLineaTotalPedCli( uPedCliL )

   if isArray( uPedCliL )
      Return ( uPedCliL[ 28 ] )
   end

Return ( ( uPedCliL )->lTotLin )



Function nDescuentoLinealPedCli( uPedCliL, nDec, nVdv )

   local nDescuentoLineal

   if isArray( uPedCliL )
      nDescuentoLineal  := uPedCliL[ 31 ]
   else
      nDescuentoLineal  := ( uPedCliL )->nDtoDiv
   end

Return ( Round( nDescuentoLineal / nVdv, nDec ) )



Function nDescuentoPorcentualPedCli( uPedCliL )

   local nDescuentoPorcentual

   if isArray( uPedCliL )
      nDescuentoPorcentual  := uPedCliL[ 17 ]
   else
      nDescuentoPorcentual  := ( uPedCliL )->nDto
   end

Return ( nDescuentoPorcentual )



Function nDescuentoPromocionPedCli( uPedCliL )

   local nDescuentoPromocion

   if isArray( uPedCliL )
      nDescuentoPromocion  := uPedCliL[ 18 ]
   else
      nDescuentoPromocion  := ( uPedCliL )->nDtoPrm
   end

Return ( nDescuentoPromocion )



Function nPuntoVerdePedCli( uPedCliL )

   local nPuntoVerde

   if isArray( uPedCliL )
      nPuntoVerde  := uPedCliL[ 15 ]
   else
      nPuntoVerde  := ( uPedCliL )->nPntVer
   end

Return ( nPuntoVerde )



Function nTransportePedCli( uPedCliL )

   local nTransporte

   if isArray( uPedCliL )
      nTransporte  := uPedCliL[ 16 ]
   else
      nTransporte  := ( uPedCliL )->nImpTrn
   end

Return ( nTransporte )



FUNCTION nTotLPedCli( uPedCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo
   local nUnidades

   if empty( uPedCliL ) .AND. !empty( nView )
      uPedCliL       := D():PedidosClientesLineas( nView )
   end

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   if isLineaTotalPedCli( uPedCliL )

      nCalculo       := nTotUPedCli( uPedCliL, nDec, nVdv )

   else

      nUnidades      := nTotNPedCli( uPedCliL )
      nCalculo       := nTotUPedCli( uPedCliL, nDec, nVdv ) * nUnidades





      nCalculo        -= nDescuentoLinealPedCli( uPedCliL, nDec, nVdv ) * nUnidades

      if lDto .AND. nDescuentoPorcentualPedCli( uPedCliL ) <> 0
         nCalculo    -= nCalculo * nDescuentoPorcentualPedCli( uPedCliL ) / 100
      end

      if lDto .AND. nDescuentoPromocionPedCli( uPedCliL ) <> 0
         nCalculo    -= nCalculo * nDescuentoPromocionPedCli( uPedCliL ) / 100
      end





      if lPntVer .AND. nPuntoVerdePedCli( uPedCliL ) <> 0
         nCalculo    += nPuntoVerdePedCli( uPedCliL ) * nUnidades
      end





      if lImpTrn .AND. nTransportePedCli( uPedCliL ) <> 0
         nCalculo    += nTransportePedCli( uPedCliL ) * nUnidades
      end

   end

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

   if nRou <> nil
      nCalculo       := Round( Div( nCalculo, nVdv ), nRou )
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )






FUNCTION nDtoLPedCli( cPedCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   if !Empty( nView )
      If( cPedCliL == nil, cPedCliL := D():PedidosClientesLineas( nView ), ) ;
   end

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cPedCliL )->nDto <> 0 .AND. !( cPedCliL )->lTotLin

      nCalculo          := nTotUPedCli( cPedCliL, nDec ) * nTotNPedCli( cPedCliL )





      nCalculo          -= Round( ( cPedCliL )->nDtoDiv / nVdv , nDec )

      nCalculo          := nCalculo * ( cPedCliL )->nDto / 100


      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )






FUNCTION nPrmLPedCli( cPedCliL, nDec, nRou, nVdv )

   local nCalculo       := 0

   if !Empty( nView )
      If( cPedCliL == nil, cPedCliL := D():PedidosClientesLineas( nView ), ) ;
   end

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cPedCliL )->nDtoPrm <> 0 .AND. !( cPedCliL )->lTotLin

      nCalculo          := nTotUPedCli( cPedCliL, nDec ) * nTotNPedCli( cPedCliL )





      nCalculo          -= Round( ( cPedCliL )->nDtoDiv / nVdv , nDec )

      if ( cPedCliL )->nDto <> 0
         nCalculo       -= nCalculo * ( cPedCliL )->nDto / 100
      end

      nCalculo          := nCalculo * ( cPedCliL )->nDtoPrm / 100

      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )



Function nTotDtoLPedCli( dbfLin, nDec, nVdv, cPorDiv )

   local nCalculo

   if !Empty( nView )
      If( dbfLin == nil, dbfLin := D():PedidosClientesLineas( nView ), ) ;
   end

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nDtoLPedCli( dbfLin, nDec, nVdv ) * nTotNPedCli( dbfLin )

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

   nCalculo          := Round( nCalculo, nDec )

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



Function oPedidosWeb()

   if !Empty( oDlgPedidosWeb ) .AND. !Empty( oBrwPedidosWeb )
      oBrwPedidosWeb:Refresh()
   else
      MuestraPedidosWeb()
   end

Return nil



Function MuestraPedidosWeb( oBtnPedidos, lGoPedCli )

   local oError
   local oBlock
    local oCbxOrd
    local cNumPed
   local cDbfIva
   local cDbfDiv
   local cDbfPago
   local dbfPedCliR

   If( lGoPedCli == nil, lGoPedCli := .F., ) ;

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de pedidos de clientes" )
      Return ( .F. )
   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      TDataCenter():OpenPedCliT( @dbfPedCliT )
      ( dbfPedCliT )->( OrdSetFocus( "lInternet" ) )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIL", @dbfPedCliL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIR.DBF" ), ( cCheckArea( "PEDCLIR", @dbfPedCliR ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLII.DBF" ), ( cCheckArea( "PEDCLII", @dbfPedCliI ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLID.DBF" ), ( cCheckArea( "PEDCLID", @dbfPedCliD ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @cdbfIva ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @cDbfPago ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @cdbfDiv ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





      cTmpLin        := cGetNewFileName( cPatTmp() + "cPedLin" )

      dbCreate( cTmpLin, aSqlStruct( aColPedCli() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpLin, cCheckArea( "PedCliL", @dbfTmpLin ), .F. )

      if !NetErr()

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "nNumLin", "Str( nNumLin, 4 )", {|| Str( Field->nNumLin ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

      end

      oDlgPedidosWeb = TDialog():New(,,,,, "PEDIDOS_INTERNET",, .F.,,,,,, .F.,,,,,, .F.,, "oDlgPedidosWeb", nil, )

      oBrwPedidosWeb                 := IXBrowse():New( oDlgPedidosWeb )

      oBrwPedidosWeb:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPedidosWeb:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPedidosWeb:cAlias          := dbfPedCliT
      oBrwPedidosWeb:nMarqueeStyle   := 6
      oBrwPedidosWeb:cName           := "Pedido de cliente.Web"
      oBrwPedidosWeb:nRowHeight      := 40

      oBrwPedidosWeb:bLDblClick      := {|| oDlgPedidosWeb:end( 1 ) }

      oBrwPedidosWeb:bChange         := {|| ChangePedidosWeb() }

      oBrwPedidosWeb:CreateFromResource( 100 )

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Es.Estado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( ( dbfPedCliT )->nEstado == 1 ) }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_shape_square_12", "gc_delete_12" } )
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( dbfPedCliT )->cSerPed + "/" + Alltrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + ( dbfPedCliT )->cSufPed }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecPed"
         :bEditValue       := {|| dtoc( ( dbfPedCliT )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Hora"
         :bEditValue       := {|| ( dbfPedCliT )->cTimCre }
         :nWidth           := 40
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cCodCli ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cNomCli ) }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Telefono"
         :bEditValue       := {|| RetFld( ( dbfPedCliT )->cCodCli, dbfClient, "Telefono" ) }
         :nWidth           := 80
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliT, dbfPedCliL, cdbfIva, cdbfDiv, cDbfPago, nil, cDivEmp(), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end


      oBrwDetallesPedidos                 := IXBrowse():New( oDlgPedidosWeb )

      oBrwDetallesPedidos:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDetallesPedidos:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDetallesPedidos:cAlias          := dbfTmpLin
      oBrwDetallesPedidos:nMarqueeStyle   := 6
      oBrwDetallesPedidos:cName           := "Pedido de cliente lineas.Web"





      oBrwDetallesPedidos:CreateFromResource( 110 )

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Num."
         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }
         :cEditPicture        := "9999"
         :nWidth              := 35
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Código"
         :bEditValue          := {|| ( dbfTmpLin )->cRef }
         :nWidth              := 70
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| if( Empty( ( dbfTmpLin )->cRef ), ( dbfTmpLin )->mLngDes, ( dbfTmpLin )->cDetalle ) }
         :nWidth              := 215
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfTmpLin )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNPedCli( dbfTmpLin ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }
         :nWidth              := 25
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }
         :nWidth              := 30
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Precio"
         :bEditValue          := {|| nTotUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% Dto."
         :bEditValue          := {|| ( dbfTmpLin )->nDto }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Dto. Lin."
         :bEditValue          := {|| nDtoUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% Prm."
         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }
         :cEditPicture        := "@E 99.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% Age"
         :bEditValue          := {|| ( dbfTmpLin )->nComAge }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% " + cImp()
         :bEditValue          := {|| ( dbfTmpLin )->nIva }
         :cEditPicture        := "@E 99.9"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Portes"
         :bEditValue          := {|| nTrnUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "P. verde"
         :bEditValue          := {|| nPntUPedCli( dbfTmpLin, nDpvDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Total"
         :bEditValue          := {|| nTotLPedCli( dbfTmpLin, nDouDiv, nRouDiv ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      oDlgPedidosWeb:bStart   := {|| StartPedidosWeb( oDlgPedidosWeb ) }

      oDlgPedidosWeb:Activate( oDlgPedidosWeb:bLClicked, oDlgPedidosWeb:bMoved, oDlgPedidosWeb:bPainted, .T.,,,, oDlgPedidosWeb:bRClicked,,, )





      if oDlgPedidosWeb:nResult == 1
         cNumPed              := ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed
      end





      if dbSeekInOrd( .T., "lIntPedCli", dbfPedCliT )
         lStartAvisoPedidos()
      else
         lStopAvisoPedidos()
      end

      if !Empty( oBtnPedidos )
         oBtnPedidos:lSelected   := .F.
         oBtnPedidos:Refresh()
      end

   RECOVER USING oError

      msgStop( "Imposible abrir ficheros de pedidos de clientes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfPedCliT )->( dbCloseArea() )
   ( dbfPedCliL )->( dbCloseArea() )
   ( dbfPedCliP )->( dbCloseArea() )
   ( dbfPedCliR )->( dbCloseArea() )
   ( dbfPedCliI )->( dbCloseArea() )
   ( dbfPedCliD )->( dbCloseArea() )
   ( cDbfPago   )->( dbCloseArea() )
   ( cdbfDiv    )->( dbCloseArea() )
   ( cdbfIva    )->( dbCloseArea() )
   ( dbfClient  )->( dbCloseArea() )
   ( dbfTmpLin  )->( dbCloseArea() )

   oDlgPedidosWeb          := nil
   oBrwPedidosWeb          := nil
   oBrwDetallesPedidos     := nil

   dbfErase( cTmpLin )

Return ( cNumPed )



Function lPedidosWeb()

   local nRec
   local oBlock
   local oError
   local dbfPedCliT

   oBlock                     := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.Dbf" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      if dbSeekInOrd( .T., "lIntPedCli", dbfPedCliT )

         lStartAvisoPedidos()



         if Empty( oMsgAlarm )
            oMsgAlarm         := TMsgItem():New( oWnd():oMsgBar,,24,,,,.T.,, "gc_earth_16",, "Nuevos pedidos recibidos"  )
            oMsgAlarm:bAction := {|| PedCli() }
         end

      else

         lStopAvisoPedidos()



         if !Empty( oMsgAlarm )
            oWnd():oMsgBar:DelItem( oMsgAlarm )
         end

      end

   RECOVER USING oError

      msgStop( "Imposible comprobar los pedidos recibidos por internet" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if ( dbfPedCliT )->( Used() )
      ( dbfPedCliT )->( dbCloseArea() )
   end

Return nil







FUNCTION SetUPedCli( dbfLin, nNewVal )

   if !Empty( nView )
      If( dbfLin == nil, dbfLin := D():PedidosClientesLineas( nView ), ) ;
   end

   if ( dbfLin )->lAlquiler
      ( dbfLin )->nPreAlq         := nNewVal
   else
      ( dbfLin )->nPreDiv      := nNewVal
   end

RETURN ( nil )



Function sTotPedCli( cPedido, dbfMaster, dbfLine, cdbfIva, cdbfDiv, cDivRet )

   local sTotal

   nTotPedCli( cPedido, dbfMaster, dbfLine, cdbfIva, cdbfDiv, nil, nil, cDivRet, .F. )

   sTotal                                 := sTotal()
   sTotal:nTotalBruto                     := nTotBrt
   sTotal:nTotalNeto                      := nTotNet
   sTotal:nTotalIva                       := nTotIva
   sTotal:aTotalIva                       := aTotIva
   sTotal:nTotalRecargoEquivalencia       := nTotReq
   sTotal:nTotalDocumento                 := nTotPed
   sTotal:nTotalPuntoVerde                := nTotPnt
   sTotal:nTotalTransporte                := nTotTrn
   sTotal:nTotalAgente                    := nTotAge
   sTotal:nTotalCosto                     := nTotCos
   sTotal:nTotalImpuestoHidrocarburos     := nTotIvm
   sTotal:nTotalRentabilidad              := nTotRnt
   sTotal:nTotalDescuentoGeneral          := nTotDto
   sTotal:nTotalDescuentoProntoPago       := nTotDpp
   sTotal:nTotalDescuentoUno              := nTotUno
   sTotal:nTotalDescuentoDos              := nTotDos

Return ( sTotal )



STATIC FUNCTION EdtTablet( aTmp, aGet, dbf, oBrw, hHash, bValid, nMode )

   OrderCustomer():Resource()

RETURN ( .T. )



static function isChangeSerieTablet( lReadyToSend, getSerie )

   if lReadyToSend
      ChangeSerieTablet(getSerie)
   end

Return ( nil )



static function ChangeSerieTablet( getSerie )

   local cSerie   := getSerie:VarGet()

   do case
      case cSerie == "A"
         getSerie:cText( "B" )

      case cSerie == "B"
         getSerie:cText( "A" )

      otherwise
         getSerie:cText( "A" )

   end

Return ( nil )



function defineGetSerie( lSndDoc, cSerDoc, oDlg )

   local getSerie










   TGridUrllink():Build(            {  "nTop"      => 40, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "cURL"      => "Serie", "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| isChangeSerieTablet( lSndDoc, getSerie ) } } )








   getSerie    := TGridGet():Build( {  "nRow"      => 40, "nCol"      => {|| GridWidth( 2.5, oDlg ) }, "bSetGet"   => {|u| if( PCount() == 0, cSerDoc, cSerDoc := u ) }, "oWnd"      => oDlg, "nWidth"    => {|| GridWidth( 2, oDlg ) }, "nHeight"   => 23, "cPict"     => "@!", "lPixels"   => .T. } )

Return ( nil )



function defineGetCliente( aGet, aTmp, getCodCli, getNomCli, nMode, oDlg )










   TGridUrllink():Build({  "nTop"      => 95, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "cURL"      => "Cliente", "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| Prueba() } } )








   getCodCli         := TGridGet():Build( {  "nRow"      => 95, "nCol"      => {|| GridWidth( 2.5, oDlg ) }, "bSetGet"   => {|u| if( PCount() == 0, aTmp[ 6 ], aTmp[ 6 ] := u ) }, "oWnd"      => oDlg, "nWidth"    => {|| GridWidth( 2, oDlg ) }, "nHeight"   => 23, "lPixels"   => .T., "bValid"    => {|| loaCli( aGet, aTmp, nMode ) } } )







   getNomCli         := TGridGet():Build( {  "nRow"      => 95, "nCol"      => {|| GridWidth( 4.5, oDlg ) }, "bSetGet"   => {|u| if( PCount() == 0, aTmp[ 7 ], aTmp[ 7 ] := u ) }, "oWnd"      => oDlg, "lPixels"   => .T., "nWidth"    => {|| GridWidth( 7, oDlg ) }, "nHeight"   => 23 } )

Return ( nil )



function Prueba()

   local hashDictionaryCabecera
   local hashDictionaryLineas





   hashDictionaryCabecera     := D():GetPedidoCliente( nView )

   MsgInfo( ValToPrg( hashDictionaryCabecera ), Len( hashDictionaryCabecera ) )


   hashDictionaryCabecera     := D():GetPedidoClienteById( D():PedidosClientesId( nView ), nView )
   MsgInfo( ValToPrg( hashDictionaryCabecera ), Len( hashDictionaryCabecera ) )





   hashDictionaryCabecera     := D():GetPedidoClienteBlank( nView )

   MsgInfo( ValToPrg( hashDictionaryCabecera ), Len( hashDictionaryCabecera ) )





   hashDictionaryLineas     := D():GetPedidoClienteLineas( nView )

   MsgInfo( ValToPrg( hashDictionaryLineas ), Len( hashDictionaryLineas ) )





   hashDictionaryLineas     := D():GetPedidoClienteLineaBlank( nView )

   MsgInfo( ValToPrg( hashDictionaryLineas ), Len( hashDictionaryLineas ) )

Return ( nil )



Function nTotalLineaPedidoCliente( hHash, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo

   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lDto == nil, lDto := .T., ) ;
   If( lPntVer == nil, lPntVer := .T., ) ;
   If( lImpTrn == nil, lImpTrn := .T., ) ;

   if hGet( hHash, "LineaTotal" )

      nCalculo       := nTotUPedCli( hHash )

   else

      nCalculo       := nTotUPedCli( hHash )





      if lDto

         nCalculo    -= Round( hGet( hHash, "DescuentoLineal" ) / nVdv , nDec )

         if hGet( hHash, "DescuentoPorcentual" ) <> 0
            nCalculo -= nCalculo * hGet( hHash, "DescuentoPorcentual" )    / 100
         end

         if hGet( hHash, "DescuentoPromocion" ) <> 0
            nCalculo -= nCalculo * hGet( hHash, "DescuentoPromocion" ) / 100
         end

      end





      if lPntVer
         nCalculo    += hGet( hHash, "PuntoVerde" )
      end





      if lImpTrn
         nCalculo    += hGet( hHash, "Portes" )
      end





      nCalculo       *= nTotNPedCli( hHash )

   end

   if nRou <> nil
      nCalculo       := Round( Div( nCalculo, nVdv ), nRou )
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



Static Function cFormatoPedidosClientes( cSerie )

   local cFormato

   If( cSerie == nil, cSerie := ( D():PedidosClientes( nView ) )->cSerPed, ) ;

   cFormato          := cFormatoDocumento( cSerie, "nPedCli", D():Contadores( nView ) )

   if Empty( cFormato )
      cFormato       := cFirstDoc( "PC", D():Documentos( nView ) )
   end

Return ( cFormato )



Function DesignLabelPedidoClientes( oFr, dbfDoc )

   local oLabel
   local lOpenFiles  := empty( nView )

   if lOpenFiles .AND. !Openfiles()
      Return .F.
   endif

   oLabel            := TLabelGeneratorPedidoClientes():New( nView )



   oLabel:createTempLabelReport()
   oLabel:loadTempLabelReport()
   oLabel:dataLabel( oFr )



   if !empty( ( dbfDoc )->mReport )
      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")
   else
      oFr:AddPage(         "MainPage" )
      oFr:AddBand(         "MasterData",  "MainPage",       6 )
      oFr:SetProperty(     "MasterData",  "Top",            200 )
      oFr:SetProperty(     "MasterData",  "Height",         100 )
      oFr:SetObjProperty(  "MasterData",  "DataSet",        "Lineas de pedidos" )
   end



   variableReport( oFr )



   oFr:DesignReport()
   oFr:DestroyFr()

   oLabel:DestroyTempReport()
   oLabel:End()

   if lOpenFiles
      closeFiles()
   end

Return .T.



Function getExtraFieldPedidoCliente( cFieldName )

Return ( getExtraField( cFieldName, oDetCamposExtra, D():PedidosClientesId( nView ) ) )



Static Function lChangeRegIva( aTmp )

   lImpuestos     := ( aTmp[ 50 ] <= 1 )

   if !Empty( oImpuestos )
      oImpuestos:Refresh()
   end

return ( .T. )



Function lEntregadoPedidoCliente( cNumeroPedido, cPedCliT )

   local lEntregadoPedidoCliente    := .F.

   if dbSeekInOrd( cNumeroPedido, "nNumPed", cPedCliT )
      lEntregadoPedidoCliente       := ( cPedCliT )->nEstado == 3 .OR. ( cPedCliT )->lCancel
   end

Return ( lEntregadoPedidoCliente )



Static Function importarArticulosScaner()

   local memoArticulos

   memoArticulos  := dialogArticulosScaner()

   if memoArticulos <> nil
      msgStop( memoArticulos, "procesar")
   end

Return nil



Function setPedidosClientesExternalView( nExternalView )

   nView          := nExternalView

Return nil



Function nTotalUnidadesPedidasClientes( nMes, nYear, cCodCli )

    local nTotalUnd     := 0
    local cStm             := "LineasPedidos"


















    local cSql          := "SELECT cabecerapedidos.cSerPed, "                                      +     "cabecerapedidos.nNumPed, "                                        +     "cabecerapedidos.cSufPed, "                                        +     "cabecerapedidos.cCodCli, "                                        +     "cabecerapedidos.dFecPed, "                                        +     "lineaspedidos.cRef, "                                             +     "lineaspedidos.cDetalle, "                                         +     "lineaspedidos.nCanPed, "                                          +     "lineaspedidos.nUniCaja, "                                         +     "lineaspedidos.nUndKit, "                                          +     "lineaspedidos.nMedUno, "                                          +     "lineaspedidos.nMedDos, "                                          +     "lineaspedidos.nMedTre "                                           +     "FROM " + cPatEmp() + "PedCliT AS cabecerapedidos "                  +     "INNER JOIN " + cPatEmp() + "PedCliL AS lineaspedidos "      +     "ON cabecerapedidos.cSerPed = lineaspedidos.cSerPed AND "      +     "cabecerapedidos.nNumPed = lineaspedidos.nNumPed AND "         +     "cabecerapedidos.cSufPed = lineaspedidos.cSufPed "                +     "WHERE"

    if !Empty( cCodCli )
        cSql             +=             " cCodCli = " + quoted( cCodCli ) + " AND"
    end


    cSql                 +=          " MONTH( dFecPed ) = " +  AllTrim( Str( Int( nMes ) ) )        +     " AND YEAR( dFecPed ) = " +  AllTrim( Str( Int( nYear ) - 1 ) )

       ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

       ( cStm )->( dbGoTop() )

       while !( cStm )->( Eof() )

           nTotalUnd += nTotNPedCli( cStm )

        ( cStm )->( dbSkip() )

    end

Return nTotalUnd



Function nTotalImportePedidosClientes( nMes, nYear, cCodCli )

    local nTotalImp     := 0
    local cPedCliL
    local cStmHead        := "CabecerasPedidos"






    local cSql          := "SELECT cSerPed, "                                      +     "nNumPed, "                                        +     "cSufPed, "                                        +     "cCodCli, "                                        +     "dFecPed "                                        +     "FROM " + cPatEmp() + "PedCliT "                      +     "WHERE"

    if !Empty( cCodCli )
        cSql             +=             " cCodCli = " + quoted( cCodCli ) + " AND"
    end


    cSql                 +=          " MONTH( dFecPed ) = " +  AllTrim( Str( Int( nMes ) ) )        +     " AND YEAR( dFecPed ) = " +  AllTrim( Str( Int( nYear ) - 1 ) )

    dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIL", @cPedCliL ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
       if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
       ordSetFocus( "NNUMPED" )

       ADSBaseModel():ExecuteSqlStatement( cSql, @cStmHead )

       ( cStmHead )->( dbGoTop() )

       while !( cStmHead )->( Eof() )

           if ( cPedCliL )->( dbSeek( ( cStmHead )->cSerPed + Str( ( cStmHead )->nNumPed ) + ( cStmHead )->cSufPed ) )


               while ( cPedCliL )->cSerPed + Str( ( cPedCliL )->nNumPed ) + ( cPedCliL )->cSufPed == ( cStmHead )->cSerPed + Str( ( cStmHead )->nNumPed ) + ( cStmHead )->cSufPed .AND.    !( cPedCliL )->( Eof() )

                       nTotalImp += nTotLPedCli( cPedCliL )

                   ( cPedCliL )->( dbSkip() )

               end

           end

        ( cStmHead )->( dbSkip() )

    end

    if( !Empty( cPedCliL ), ( cPedCliL )->( dbCloseArea() ), )

Return nTotalImp



FUNCTION hStockBufferPedCli( aTmp, lDel )

   local hBuffer         := {=>}
   local nEntregadas     := 0

   If( lDel == nil, lDel := .F., ) ;

   do case
      case hb_isArray( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
         hset( hBuffer, "lote", AllTrim( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "clote" ) ) ] ) )

         if !lDel

            hset( hBuffer, "pendiente_entregar", nTotNPedPrv( aTmp ) )

         else









             nEntregadas     += AlbaranesClientesLineasModel():nUnidadesEntregadas(     aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cSerPed" ) ) ] +    Str( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nNumPed" ) ) ] ) +    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cSufPed" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cRef" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cValPr1" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cValPr2" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cLote" ) ) ] )








             nEntregadas     += FacturasClientesLineasModel():nUnidadesEntregadas(      aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cSerPed" ) ) ] +    Str( aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "nNumPed" ) ) ] ) +    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cSufPed" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cRef" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cValPr1" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cValPr2" ) ) ],    aTmp[ ( D():PedidosClientesLineas( nView ) )->( fieldpos( "cLote" ) ) ] )

            hset( hBuffer, "pendiente_entregar", nTotNPedPrv( aTmp ) - nEntregadas )

         end

      case hb_isChar( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmLin ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
         hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )

         if !lDel

            hset( hBuffer, "pendiente_entregar", nTotNPedPrv( aTmp ) )

         else







             nEntregadas     += AlbaranesClientesLineasModel():nUnidadesEntregadas(     ( aTmp )->cSerPed + Str( ( aTmp )->nNumPed ) + ( aTmp )->cSufPed,    ( aTmp )->cRef,    ( aTmp )->cCodPr1,    ( aTmp )->cCodPr2,    ( aTmp )->cValPr1,    ( aTmp )->cValPr2,    ( aTmp )->cLote )






             nEntregadas     += FacturasClientesLineasModel():nUnidadesEntregadas(     ( aTmp )->cSerPed + Str( ( aTmp )->nNumPed ) + ( aTmp )->cSufPed,    ( aTmp )->cRef,    ( aTmp )->cCodPr1,    ( aTmp )->cCodPr2,    ( aTmp )->cValPr1,    ( aTmp )->cValPr2,    ( aTmp )->cLote )

            hset( hBuffer, "pendiente_entregar", nTotNPedPrv( aTmp ) - nEntregadas )

         end

   end

RETURN ( hBuffer )



Static Function LoadTrans( aTmp, oGetCod, oGetKgs, oSayTrn )

   local uValor   := oGetCod:VarGet()

   if Empty( uValor )

      oSayTrn:cText( "" )
      oGetKgs:cText( 0 )

   else

      if oTrans:oDbf:SeekInOrd( uValor, "cCodTrn" )
         oGetCod:cText( uValor )
         oSayTrn:cText( oTrans:oDbf:cNomTrn )
         oGetKgs:cText( oTrans:oDbf:nKgsTrn )
      else
         msgStop( "Código de transportista no encontrado." )
         Return .F.
      end

   end

   RecalculaTotal( aTmp )

Return .T.



Function getFieldPedCli( cNumPed, cField )

    local value     := ""
    local cSerie
    local nNumero
    local cSufijo

    if Empty( cField )
        Return value
    end

    cSerie             := SubStr( cNumPed, 1, 1 )
    nNumero         := val( AllTrim( SubStr( cNumPed, 2, 9 ) ) )
    cSufijo            := AllTrim( SubStr( cNumPed, 11, 2 ) )
    value             := PedidosClientesModel():getField( cSerie, nNumero, cSufijo, cField )

Return value



Function CreatePedCliQrCode()

    local cText := ( D():PedidosClientes( nView ) )->cSerPed + Str( ( D():PedidosClientes( nView ) )->nNumPed ) + ( D():PedidosClientes( nView ) )->cSufPed

    CreateQrCode( cText, "Pedcli" + ( D():PedidosClientes( nView ) )->cSerPed + AllTrim( Str( ( D():PedidosClientes( nView ) )->nNumPed ) ) + ( D():PedidosClientes( nView ) )->cSufPed )

Return .T.



Function cNamePedCliQrCode()

Return ( FullQrDir() + "Pedcli" + ( D():PedidosClientes( nView ) )->cSerPed + AllTrim( Str( ( D():PedidosClientes( nView ) )->nNumPed ) ) + ( D():PedidosClientes( nView ) )->cSufPed + ".bmp" )
