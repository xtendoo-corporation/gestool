#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\PedidosClientesLineasModel.prg"
_HB_CLASS PedidosClientesLineasModel ; function PedidosClientesLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PedidosClientesLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @PedidosClientesLineasModel() ) ) ;

    _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "PedCliL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER ExisteLinea( cNumPed, cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote); oClass:AddMethod( "ExisteLinea", @PedidosClientesLineasModel_ExisteLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER getLinesFromDocument( cSerie, nNumero, cSufijo, lPrepare); oClass:AddMethod( "getLinesFromDocument", @PedidosClientesLineasModel_getLinesFromDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER getLinesKitsFromDocument( cSerie, nNumero, cSufijo); oClass:AddMethod( "getLinesKitsFromDocument", @PedidosClientesLineasModel_getLinesKitsFromDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

  _HB_MEMBER getInfoPdtEntregar( cCodigoArticulo, cCodigoAlmacen, dFechaHasta); oClass:AddMethod( "getInfoPdtEntregar", @PedidosClientesLineasModel_getInfoPdtEntregar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PedidosClientesLineasModel ;



static FUNCTION PedidosClientesLineasModel_ExisteLinea( cNumPed, cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS PedidosClientesLineasModel := QSelf() AS CLASS PedidosClientesLineasModel

      local lExiste  := .F.
       local cStm          := "existePedCliL"
       local cSql       := ""

      cSql                 += "SELECT * "
    cSql                 += "FROM " + ::getTableName() + " "
    cSql                 += "WHERE cSerPed = " + quoted( SubStr( cNumPed, 1, 1 ) ) + " AND "
    cSql                += "nNumPed = " + AllTrim( SubStr( cNumPed, 2, 9 ) ) + " AND "
    cSql                += "cSufPed = " + quoted( SubStr( cNumPed, 11, 2 ) ) + " AND "
    cSql                += "cRef = " + quoted( cCodigoArticulo ) + " AND "
    cSql                += "cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " AND "
    cSql                += "cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " AND "
    cSql                += "cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " AND "
    cSql                += "cValPr2 = " + quoted( cValorSegundaPropiedad ) + " AND "
    cSql                += "cLote = " + quoted( cLote )

    if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )
        lExiste      :=  ( cStm )->( OrdKeyCount() ) > 0
    end

RETURN lExiste



static FUNCTION PedidosClientesLineasModel_getLinesFromDocument( cSerie, nNumero, cSufijo, lPrepare ) ; local Self AS CLASS PedidosClientesLineasModel := QSelf() AS CLASS PedidosClientesLineasModel

  local aLines      := {}
  local cStm        := "PrepareLineasPedCli"
  local cSql        := ""

  If( lPrepare == nil, lPrepare := .F., ) ;

  cSql              += "SELECT * "
  cSql              += "FROM " + ::getTableName() + Space( 1 )
  cSql              += "WHERE cSerPed = " + quoted( cSerie ) + " AND "
  cSql              += "nNumPed = " + Str( nNumero ) + " AND "
  cSql              += "cSufPed = " + quoted( cSufijo ) + " AND "
  cSql              += "NOT lKitChl AND "

  if lPrepare
    cSql            += "lPreparado"
  else
    cSql            += "NOT lPreparado"
  end

  if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )

        aAdd( aLines, DBScatter( cStm ) )

        ( cStm )->( dbSkip() )

      end

  end

Return ( aLines )




static FUNCTION PedidosClientesLineasModel_getLinesKitsFromDocument( cSerie, nNumero, cSufijo ) ; local Self AS CLASS PedidosClientesLineasModel := QSelf() AS CLASS PedidosClientesLineasModel

  local aLines      := {}
  local cStm        := "PrepareLineasPedCli"
  local cSql        := ""

  cSql              += "SELECT * "
  cSql              += "FROM " + ::getTableName() + Space( 1 )
  cSql              += "WHERE cSerPed = " + quoted( cSerie ) + " AND "
  cSql              += "nNumPed = " + Str( nNumero ) + " AND "
  cSql              += "cSufPed = " + quoted( cSufijo ) + " AND "
  cSql              += "lKitChl"

  if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )

        aAdd( aLines, DBScatter( cStm ) )

        ( cStm )->( dbSkip() )

      end

  end

Return ( aLines )



static FUNCTION PedidosClientesLineasModel_getInfoPdtEntregar( cCodigoArticulo, cCodigoAlmacen, dFechaHasta ) ; local Self AS CLASS PedidosClientesLineasModel := QSelf() AS CLASS PedidosClientesLineasModel

    local cSql        := ""

    cSql              := "SELECT "
    cSql              += "0 as pdtrecibir, "
    do case
      case lCalCaj() .AND. lCalBul()
         cSql         += "( TablaLineas.nBultos * TablaLineas.nCanPed * TablaLineas.nUniCaja ) AS pdtentrega, "

      case lCalCaj() .AND. !lCalBul()
         cSql         += "( TablaLineas.nCanPed * TablaLineas.nUniCaja ) AS pdtentrega, "

      case !lCalCaj() .AND. lCalBul()
         cSql         += "( TablaLineas.nBultos * TablaLineas.nUniCaja ) AS pdtentrega, "

      case !lCalCaj() .AND. !lCalBul()
         cSql            += " TablaLineas.nUniCaja AS pdtentrega, "

    end
    cSql              += quoted( "09" ) + " AS Document, "
    cSql              += "TablaCabecera.dFecPed AS Fecha, "
    cSql              += "'' AS Hora, "
    cSql              += "TablaLineas.cSerPed AS Serie, "
    cSql              += "CAST( TablaLineas.nNumPed AS SQL_INTEGER ) AS Numero, "
    cSql              += "TablaLineas.cSufPed AS Sufijo, "
    cSql              += "CAST( TablaLineas.nNumLin AS SQL_INTEGER ) AS nNumLin, "
    cSql              += "TablaLineas.cRef AS Articulo, "
    cSql              += "TablaLineas.cAlmLin AS Almacen "
    cSql              += "FROM " + ::getTableName() + " TablaLineas "
    cSql              += "INNER JOIN " + ::getEmpresaTableName( "PedCliT" ) + " AS TablaCabecera ON TablaCabecera.cSerPed = TablaLineas.cSerPed AND TablaCabecera.nNumPed = TablaLineas.nNumPed AND TablaCabecera.cSufPed = TablaLineas.cSufPed "
    cSql              += "WHERE TablaLineas.cRef = " + quoted( cCodigoArticulo ) + " "

    if !empty( cCodigoAlmacen )
      cSql            += "AND TablaLineas.cAlmLin = " + quoted( cCodigoAlmacen ) + " "
    end

    if hb_isdate( dFechaHasta )
      cSql            += "AND CAST( TablaCabecera.dFecPed AS SQL_CHAR ) <= " + formatoFechaSql( dFechaHasta ) + " "
    end

RETURN ( cSql )
