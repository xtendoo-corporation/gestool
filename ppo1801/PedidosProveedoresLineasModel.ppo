#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\PedidosProveedoresLineasModel.prg"
_HB_CLASS PedidosProveedoresLineasModel ; function PedidosProveedoresLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PedidosProveedoresLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @PedidosProveedoresLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "PedProvL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ExisteLinea(); oClass:AddMethod( "ExisteLinea", @PedidosProveedoresLineasModel_ExisteLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInfoPdtRecibir( cCodigoArticulo, cCodigoAlmacen, dFechaHasta); oClass:AddMethod( "getInfoPdtRecibir", @PedidosProveedoresLineasModel_getInfoPdtRecibir(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PedidosProveedoresLineasModel ;



static FUNCTION PedidosProveedoresLineasModel_ExisteLinea( cNumPed, cCodigoArticulo, cCodigoPrimeraPropiedad, cCodigoSegundaPropiedad, cValorPrimeraPropiedad, cValorSegundaPropiedad, cLote ) ; local Self AS CLASS PedidosProveedoresLineasModel := QSelf() AS CLASS PedidosProveedoresLineasModel

      local lExiste      := .F.
       local cStm
       local cSql         := ""

      cSql              += "SELECT * "
    cSql              += "FROM " + ::getTableName() + " "
    cSql              += "WHERE cSerPed = " + quoted( SubStr( cNumPed, 1, 1 ) ) + " AND "
    cSql             += "nNumPed = " + AllTrim( SubStr( cNumPed, 2, 9 ) ) + " AND "
    cSql             += "cSufPed = " + quoted( SubStr( cNumPed, 11, 2 ) ) + " AND "
    cSql             += "cRef = " + quoted( cCodigoArticulo ) + " AND "
    cSql             += "cCodPr1 = " + quoted( cCodigoPrimeraPropiedad ) + " AND "
    cSql             += "cCodPr2 = " + quoted( cCodigoSegundaPropiedad ) + " AND "
    cSql             += "cValPr1 = " + quoted( cValorPrimeraPropiedad ) + " AND "
    cSql             += "cValPr2 = " + quoted( cValorSegundaPropiedad ) + " AND "
    cSql             += "cLote = " + quoted( cLote )

   if ADSBaseModel():ExecuteSqlStatement( cSql, @cStm )
      lExiste         :=  ( cStm )->( OrdKeyCount() ) > 0
   end

RETURN lExiste



static FUNCTION PedidosProveedoresLineasModel_getInfoPdtRecibir( cCodigoArticulo, cCodigoAlmacen, dFechaHasta ) ; local Self AS CLASS PedidosProveedoresLineasModel := QSelf() AS CLASS PedidosProveedoresLineasModel

    local cSql        := ""

    cSql              := "SELECT "
    do case
      case lCalCaj() .AND. lCalBul()
         cSql         += "( TablaLineas.nBultos * TablaLineas.nCanPed * TablaLineas.nUniCaja ) AS pdtrecibir, "

      case lCalCaj() .AND. !lCalBul()
         cSql         += "( TablaLineas.nCanPed * TablaLineas.nUniCaja ) AS pdtrecibir, "

      case !lCalCaj() .AND. lCalBul()
         cSql         += "( TablaLineas.nBultos * TablaLineas.nUniCaja ) AS pdtrecibir, "

      case !lCalCaj() .AND. !lCalBul()
         cSql            += " TablaLineas.nUniCaja AS pdtrecibir, "

    end
    cSql              += "0 as pdtentrega, "
    cSql              += quoted( "01" ) + " AS Document, "
    cSql              += "TablaCabecera.dFecPed AS Fecha, "
    cSql              += "'' AS Hora, "
    cSql              += "TablaLineas.cSerPed AS Serie, "
    cSql              += "CAST( TablaLineas.nNumPed AS SQL_INTEGER ) AS Numero, "
    cSql              += "TablaLineas.cSufPed AS Sufijo, "
    cSql              += "CAST( TablaLineas.nNumLin AS SQL_INTEGER ) AS nNumLin, "
    cSql              += "TablaLineas.cRef AS Articulo, "
    cSql              += "TablaLineas.cAlmLin AS Almacen "
    cSql              += "FROM " + ::getTableName() + " TablaLineas "
    cSql              += "INNER JOIN " + ::getEmpresaTableName( "PedProvT" ) + " AS TablaCabecera ON TablaCabecera.cSerPed = TablaLineas.cSerPed AND TablaCabecera.nNumPed = TablaLineas.nNumPed AND TablaCabecera.cSufPed = TablaLineas.cSufPed "
    cSql              += "WHERE TablaLineas.cRef = " + quoted( cCodigoArticulo ) + " "
    cSql              += "AND NOT TablaLineas.lAnulado "

    if !empty( cCodigoAlmacen )
      cSql            += "AND TablaLineas.cAlmLin = " + quoted( cCodigoAlmacen ) + " "
    end

    if hb_isdate( dFechaHasta )
      cSql            += "AND CAST( TablaCabecera.dFecPed AS SQL_CHAR ) <= " + formatoFechaSql( dFechaHasta ) + " "
    end

RETURN ( cSql )
