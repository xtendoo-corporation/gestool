#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\PedidosProveedoresModel.prg"
_HB_CLASS PedidosProveedoresModel ; function PedidosProveedoresModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PedidosProveedoresModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @PedidosProveedoresModel() ) ) ;

   _HB_MEMBER { cHeader } ; oClass:AddMultiClsData(, "Header", nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cHeader"}, .F. )

   _HB_MEMBER getHeaderTableName(); oClass:AddInline( "getHeaderTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "PedProvT" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLineTableName(); oClass:AddInline( "getLineTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "PedProvL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getIncidenceTableName(); oClass:AddInline( "getIncidenceTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "PedPrvI" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDocumentsTableName(); oClass:AddInline( "getDocumentsTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "PedPrvD" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectLineasEmpty( cArea); oClass:AddMethod( "selectLineasEmpty", @PedidosProveedoresModel_selectLineasEmpty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectDocumentosEmpty( cArea); oClass:AddMethod( "selectDocumentosEmpty", @PedidosProveedoresModel_selectDocumentosEmpty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER selectLineasById(); oClass:AddInline( "selectLineasById", {|Self, cSerie, nNumero, cSufijo, cArea | ( ( Self ) ), ::selectById( cSerie, nNumero, cSufijo, ::getLineTableName(), @cArea ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER selectDocumentosById(); oClass:AddInline( "selectDocumentosById", {|Self, cSerie, nNumero, cSufijo, cArea | ( ( Self ) ), ::selectById( cSerie, nNumero, cSufijo, ::getDocumentsTableName(), @cArea ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectById( cSerie, nNumero, cSufijo, cTableName); oClass:AddMethod( "selectById", @PedidosProveedoresModel_selectById(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER deleteLineasById(); oClass:AddInline( "deleteLineasById", {|Self, cSerie, nNumero, cSufijo | ( ( Self ) ), ::deleteById( cSerie, nNumero, cSufijo, ::getLineTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER deleteIncidenciasById(); oClass:AddInline( "deleteIncidenciasById", {|Self, cSerie, nNumero, cSufijo | ( ( Self ) ), ::deleteById( cSerie, nNumero, cSufijo, ::getIncidenceTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER deleteDocumentosById(); oClass:AddInline( "deleteDocumentosById", {|Self, cSerie, nNumero, cSufijo | ( ( Self ) ), ::deleteById( cSerie, nNumero, cSufijo, ::getDocumentsTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER deleteById( cSerie, nNumero, cSufijo, cTableName); oClass:AddMethod( "deleteById", @PedidosProveedoresModel_deleteById(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getField( cSerie, nNumero, cSufijo, cField); oClass:AddMethod( "getField", @PedidosProveedoresModel_getField(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )





   _HB_MEMBER generateWhere(); oClass:AddInline( "generateWhere", {|Self, cSerie, nNumero, cSufijo | ( ( Self ) ), ( "WHERE " +  "cSerPed = " + quoted( cSerie )  + " AND " +  "nNumPed = " + quoted( nNumero ) + " AND " +  "cSufPed = " + quoted( cSufijo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PedidosProveedoresModel ;



static FUNCTION PedidosProveedoresModel_getField( cSerie, nNumero, cSufijo, cField ) ; local Self AS CLASS PedidosProveedoresModel := QSelf() AS CLASS PedidosProveedoresModel

   local cStm
   local cSql

   cSql              := "SELECT " + cField + " "
   cSql              +=    "FROM " + ::getHeaderTableName() + " "
   cSql              +=    "WHERE cSerPed = " + quoted( cSerie ) + " AND nNumPed = " + AllTrim( Str( nNumero ) ) + " AND cSufPed = " + + quoted( cSufijo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( fieldpos( cField ) ) ) )
   end

RETURN ( nil )



static FUNCTION PedidosProveedoresModel_selectLineasEmpty( cArea ) ; local Self AS CLASS PedidosProveedoresModel := QSelf() AS CLASS PedidosProveedoresModel

   local cSql  := "SELECT * FROM " + ::getLineTableName() + " WHERE cSerPed = ''"

Return ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION PedidosProveedoresModel_selectDocumentosEmpty( cArea ) ; local Self AS CLASS PedidosProveedoresModel := QSelf() AS CLASS PedidosProveedoresModel

   local cSql  := "SELECT * FROM " + ::getDocumentsTableName() + " WHERE cSerPed = ''"

Return ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION PedidosProveedoresModel_selectById( cSerie, nNumero, cSufijo, cTableName, cArea ) ; local Self AS CLASS PedidosProveedoresModel := QSelf() AS CLASS PedidosProveedoresModel

   local cSql  := "SELECT * FROM " + cTableName + " " + ::generateWhere( cSerie, nNumero, cSufijo )

Return ( ::ExecuteSqlStatement( cSql, @cArea ) )



static FUNCTION PedidosProveedoresModel_deleteById( cSerie, nNumero, cSufijo, cTableName ) ; local Self AS CLASS PedidosProveedoresModel := QSelf() AS CLASS PedidosProveedoresModel

   local cSql  := "DELETE FROM " + cTableName + " " + + ::generateWhere( cSerie, nNumero, cSufijo )

Return ( ::ExecuteSqlStatement( cSql ) )
