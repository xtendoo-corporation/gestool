#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 137 ".\.\Prg\Pedprov.prg"
memvar cDbf
memvar cDbfCol
memvar cDbfPrv
memvar cDbfPgo
memvar cDbfIva
memvar cDbfAlm
memvar cDbfDiv
memvar cDbfArt
memvar cDbfKit
memvar cDbfPro
memvar cDbfUsr
memvar cDbfTblPro
memvar aTotIva
memvar aIvaUno
memvar aIvaDos
memvar aIvaTre
memvar nTotBrt
memvar nTotDto
memvar nTotDpp
memvar nTotNet
memvar nTotIva
memvar nTotReq
memvar nTotIvm
memvar nTotPed
memvar nTotImp
memvar nTotUno
memvar nTotDos

memvar cPicUndPed
memvar cPinDivPed
memvar cPirDivPed
memvar nDinDivPed
memvar nDirDivPed
memvar nVdvDivPed
memvar nPagina
memvar lEnd

static oWndBrw
static oBrwIva
static dbfPedPrvT
static dbfPedPrvL
static dbfPedPrvI
static dbfPedPrvD
static dbfPedPrvS
static dbfAlbPrvT
static dbfPedCliT
static dbfPrv
static dbfIva
static dbfTmp
static dbfDiv
static dbfArticulo
static dbfTmpInc
static dbfTmpDoc
static dbfTmpArt
static dbfTmpLin
static dbfTmpSer
static cTmpArt
static cTmpSer
static cTmpPed
static tmpPedidosIncidencias
static tmpPedidosLineas
static tmpPedidosDocumentos
static dbfFamilia
static dbfArtPrv

static oMailing

static dbfClient
static oGetNet
static oGetIva
static oGetIvm
static oGetReq
static oGetTotal
static oUsr
static cUsr
static cPirDiv
static cPinDiv
static cPicUnd
static nDinDiv
static nDirDiv
static nGetNeto         := 0
static nGetIva          := 0
static nGetReq          := 0
static nVdvDiv          := 1
static oFont
static oMenu
static oDetMenu
static cOldCodCli       := ""
static cOldCodArt       := ""
static cOldPrpArt       := ""
static cOldUndMed       := ""
static lOpenFiles       := .F.
static lExternal        := .F.
static cFiltroUsuario   := ""
static bEdtRec          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode ) }
static bEdtDet          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aPedPrv | EdtDet( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aPedPrv ) }
static bEdtInc          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin | EdtInc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtDoc          := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin | EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin ) }

static nView

static oTipoCtrCoste
static cTipoCtrCoste
static aTipoCtrCoste   := { "Centro de coste", "Proveedor", "Agente", "Cliente" }

static oGetCelda
static cGetCelda



static Function initPublics()

   public nTotPed    := 0
   public nTotBrt    := 0
   public nTotDto    := 0
   public nTotDPP    := 0
   public nTotNet    := 0
   public nTotIva    := 0
   public nTotReq    := 0
   public nTotImp    := 0
   public nTotIvm    := 0
   public aTotIva    := { { 0,0,nil,0,0,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0,0,0 } }
   public aIvaUno    := aTotIva[ 1 ]
   public aIvaDos    := aTotIva[ 2 ]
   public aIvaTre    := aTotIva[ 3 ]
   public nTotUno    := 0
   public nTotDos    := 0

Return ( nil )



STATIC FUNCTION OpenFiles( lExt )

   local oBlock
   local oError

   if lOpenFiles
      MsgStop( "Ficheros de pedidos a proveedores abiertos previamente" )
      Return ( .F. )
   end

   If( lExt == nil, lExt := .F., ) ;

   lExternal            := lExt

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      DisableAcceso()

      lOpenFiles        := .T.

      nView             := D():CreateView()

      D():PedidosProveedores( nView )

      D():Proveedores( nView )

      D():GruposProveedores( nView )

      D():Clientes( nView )

      D():PedidosProveedoresLineas( nView )

      D():PedidosProveedoresIncidencias( nView )

      D():PedidosProveedoresDocumentos( nView )

      D():AlbaranesProveedores( nView )

      D():AlbaranesProveedoresLineas( nView )

      D():TiposIva( nView )

      D():FormasPago( nView )

      D():Divisas( nView )

      D():ProveedorArticulo( nView )
      ( D():ProveedorArticulo( nView ) )->( ordSetFocus( "cCodPrv" ) )

      D():ArticuloPrecioPropiedades( nView )

      D():Articulos( nView )

      D():ArticulosCodigosBarras( nView )

      D():ArticuloLenguaje( nView )

      D():Familias( nView )

      D():Almacen( nView )

      D():Kit( nView )

      D():Documentos( nView )
      ( D():Documentos( nView ) )->( ordSetFocus( "cTipo" ) )

      D():Cajas( nView )

      D():PedidosClientesReservas( nView )

      D():Propiedades( nView )

      D():PropiedadesLineas( nView )

      D():Delegaciones( nView )

      D():Contadores( nView )

      D():Empresa( nView )

      D():UnidadMedicion( nView )

      D():ImpuestosEspeciales( nView )

      D():CamposExtraHeader( nView ):setTipoDocumento( "Pedidos a proveedores" )
      D():CamposExtraHeader( nView ):setbId( {|| D():PedidosProveedoresId( nView ) } )

      D():CamposExtraLine( nView ):setTipoDocumento( "Lineas pedidos a proveedores" )
      D():CamposExtraLine( nView ):setbId( {|| D():PedidosProveedoresLineasId( nView ) } )

      D():CentroCoste( nView )

      D():Stocks( nView )

      D():Banderas( nView )





      oMailing          := TGenmailingDatabasePedidosProveedor():New( nView )

      oFont             := TFont():New( "Arial", 8, 26, .F., .T. )

      initPublics()

   RECOVER USING oError

      lOpenFiles        := .F.

      MsgStop( ErrorMessage( oError ), "Imposible abrir ficheros de pedidos a proveedores" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

   EnableAcceso()

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles()

   DisableAcceso()

   DestroyFastFilter( D():PedidosProveedores( nView ), .T., .T. )

   if !empty( oFont )
      oFont:end()
   end

   if !empty(oMailing)
      oMailing:end()
   end

   D():DeleteView( nView )

   lOpenFiles           := .F.

   oWndBrw              := nil

   EnableAcceso()

RETURN .T.



FUNCTION PedPrv( oMenuItem, oWnd, cCodPrv, cCodArt )

   local oPrv
   local oImp
   local oSnd
   local oDel
   local oRpl
   local oPdf
   local oMail
   local oRotor
   local oScript
   local oBtnEur
   local nLevel
   local LabelGeneratorPedidoProveedores
   local lEuro          := .F.

   If( oMenuItem == nil, oMenuItem := "pedidos_de_proveedores", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;
   If( cCodPrv == nil, cCodPrv := "", ) ;
   If( cCodArt == nil, cCodArt := "", ) ;





   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return .F.
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      return .F.
   end

   DisableAcceso()

















   oWndBrw := TShell():New( 0, 0, 22, 80, "Pedidos a proveedores",, oWnd,,, .F.,,, ( D():PedidosProveedores( nView ) ),,,,, {"Número", "Fecha", "Código", "Nombre proveedor"}, {||( WinAppRec( oWndBrw:oBrw, bEdtRec, D():PedidosProveedores( nView ), cCodPrv, cCodArt ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdtRec, D():PedidosProveedores( nView ), cCodPrv, cCodArt ) )}, {||( WinDelRec( oWndBrw:oBrw, D():PedidosProveedores( nView ), {|| QuiPedPrv() } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdtRec, D():PedidosProveedores( nView ), cCodPrv, cCodArt ) )}, nil, nLevel, "gc_clipboard_empty_businessman_16", ( 0 + ( 114 * 256 ) + ( 198 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEdtRec, D():PedidosProveedores( nView ) ) )}, .T. )

    oWndBrw:lFechado     := .T.
      oWndBrw:bChgIndex    := {|| if( RolesModel():getRolFiltrarVentas( Auth():rolUuid() ), CreateFastFilter( cFiltroUsuario, D():PedidosProveedores( nView ), .F., , cFiltroUsuario ), CreateFastFilter( "", D():PedidosProveedores( nView ), .F. ) ) }
    oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->lCloPed }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_lock2_12", "Nil16" } )
         :AddResource( "gc_lock2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "gc_mail2_12", "Nil16" } )
         :AddResource( "gc_mail2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Estado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| Max( ( D():PedidosProveedores( nView ) )->nEstado, 1 ) }
         :nWidth           := 20
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_trafficlight_on_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Incidencia"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| nEstadoIncidencia( ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
         :AddResource( "gc_document_information_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Impreso"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->lImprimido }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "gc_printer2_12", "Nil16" } )
         :AddResource( "gc_printer2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->cSerPed + "/" + Alltrim( Str( ( D():PedidosProveedores( nView ) )->nNumPed ) ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->cSufPed }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| Trans( ( D():PedidosProveedores( nView ) )->cTurPed, "######" ) }
         :nWidth           := 60
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dDesPed"
         :bEditValue       := {|| Dtoc( ( D():PedidosProveedores( nView ) )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->cCodCaj }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Usuario"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->cCodUsr }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Entrada"
         :bEditValue       := {|| Dtoc( ( D():PedidosProveedores( nView ) )->dFecEnt ) }
         :nWidth           := 80
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Situación"
         :cSortOrder       := "cSituac"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->cSituac }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodPrv"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->cCodPrv }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre proveedor"
         :cSortOrder       := "cNomPrv"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->cNomPrv }
         :nWidth           := 280
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| alltrim( ( D():PedidosProveedores( nView ) )->cPosPrv ) }
         :nWidth           := 80
         :lHide            := .T.
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| alltrim( ( D():PedidosProveedores( nView ) )->cPobPrv ) }
         :nWidth           := 180
         :lHide            := .T.
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| alltrim( ( D():PedidosProveedores( nView ) )->cProPrv ) }
         :nWidth           := 180
         :lHide            := .T.
         :bLDClickData     := {|| oWndBrw:RecEdit() }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->nTotNet }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->nTotIva }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "R.E."
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->nTotReq }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( D():PedidosProveedores( nView ) )->nTotPed }
         :cEditPicture     := cPirDiv()
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( D():PedidosProveedores( nView ) )->cDivPed ), D():Divisas( nView ) ) }
         :nWidth           := 30
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cliente"
         :bEditValue       := {|| if( !empty( ( D():PedidosProveedores( nView ) )->cNumPedCli ), AllTrim( GetCodCli( ( D():PedidosProveedores( nView ) )->cNumPedCli ) ) + " - " + AllTrim( GetNomCli( ( D():PedidosProveedores( nView ) )->cNumPedCli ) ), "" ) }
         :nWidth           := 280
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Creación/Modificación"
         :bEditValue       := {|| dtoc( ( D():PedidosProveedores( nView ) )->dFecChg ) + space( 1 ) + ( D():PedidosProveedores( nView ) )->cTimChg }
         :nWidth           := 120
         :lHide            := .T.
      end

      D():CamposExtraHeader( nView ):addCamposExtra( oWndBrw )

      oWndBrw:cHtmlHelp    := "Pedido a proveedor"

      oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()








   oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






   oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






   oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






   oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,, 8,, .F. )







   oDel := oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )







   oPrv := oWndBrw:NewAt( "GC_PRINTER2_",,, {||( GenPedPrv( 1 ) )}, "(I)mprimir", "I",, {|This|This:Toggle()}, 32,, .F. )


      lGenPed( oWndBrw:oBrw, oPrv, 1 )





   oWndBrw:NewAt( "GC_PRINTER2_",,, {||( ImprimirSeriesPedidosProveedores() )}, "Imp(r)imir series", "R",,, 32,, .F. )







   oImp := oWndBrw:NewAt( "GC_MONITOR_",,, {||( GenPedPrv( 2 ), oWndBrw:Refresh() )}, "(P)revisualizar", "P",, {|This|This:Toggle()}, 32,, .F. )


      lGenPed( oWndBrw:oBrw, oImp, 2 )






   oPdf := oWndBrw:NewAt( "DOCLOCK",,, {||( GenPedPrv( 3 ) )}, "Pd(f)", "F",, {|This|This:Toggle()}, 32,, .F. )


      lGenPed( oWndBrw:oBrw, oPdf, 3 )





   oMail := oWndBrw:NewAt( "GC_MAIL_EARTH_",,, {||( oMailing:documentsDialog( oWndBrw:oBrw:aSelected ) )}, "Correo electrónico",,, {|This|This:Toggle()}, 32,, .F. )






   oWndBrw:NewAt( "gc_portable_barcode_scanner_",,, {||( TLabelGeneratorPedidoProveedores():New( nView ):Dialog() )}, "Eti(q)uetas", "Q",,, 32,, .F. )

   if RolesModel():getRolCambiarEstado( Auth():rolUuid() )






      oWndBrw:NewAt( "ChgState",,, {||( ChgState( oWndBrw:oBrw ) )}, "Cambiar Es(t)ado", "T",,, 4,, .F. )

   end








   oSnd := oWndBrw:NewAt( "Lbl",, "Seleccionar pedidos para ser enviados", {||lSnd( oWndBrw, D():PedidosProveedores( nView ) )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )






   oBtnEur := oWndBrw:NewAt( "gc_currency_euro_",,, {||( lEuro := !lEuro, oWndBrw:Refresh() )}, "M(o)neda", "O",,,,, .F. )
  if RolesModel():getRolCambiarCampos( Auth():rolUuid() )






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():PedidosProveedores( nView ), aItmPedPrv() ) )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():PedidosProveedoresLineas( nView ), aColPedPrv() ) )}, "Lineas",,,, 4, oRpl, .F. )

   end






   oWndBrw:NewAt( "GC_SHOPPING_CART_",,, {||( Generador( oWndBrw:oBrw ) )}, "(G)enerar", "G",,,,, .F. )





   oWndBrw:NewAt( "INFO",,, {||( TTrazaDocumento():Activate( "01", ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed ) )}, "I(n)forme documento", "N",,, 4,, .F. )




   oWndBrw:NewAt( "gc_document_text_pencil_",,, {||( TCounter():New( nView, "nPedPrv" ):OpenDialog() )}, "Establecer contadores",,,,,, .F. )





   oScript := oWndBrw:NewAt( "gc_folder_document_",,, {||( oScript:Expand() )}, "Scripts",,,,,, .F. )
      ImportScript( oWndBrw, oScript, "PedidosProveedores", nView )






   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "gc_businessman_",,, {||( EdtPrv( ( D():PedidosProveedores( nView ) )->cCodPrv ) )}, "Modificar proveedor",,,, 4, oRotor, .T. )







      oWndBrw:NewAt( "INFO",,, {||( InfProveedor( ( D():PedidosProveedores( nView ) )->cCodPrv ) )}, "Informe proveedor",,,, 4, oRotor, .F. )






      oWndBrw:NewAt( "gc_document_empty_businessman_",,, {||( if( ( D():PedidosProveedores( nView ) )->nEstado == 3, MsgStop( "Pedido recibido" ), AlbPrv( nil, oWnd, nil, nil, ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed ) ) )}, "Generar albarán",,,, 4, oRotor, .T. )





      oWndBrw:NewAt( "gc_document_empty_businessman_",,, {||( Ped2Alb( ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed ) )}, "Modificar albarán",,,, 4, oRotor, .F. )





   oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

   oWndBrw:oActiveFilter:SetFields( aItmPedPrv() )
   oWndBrw:oActiveFilter:SetFilterType( "01" )

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

   EnableAcceso()

   if !empty( oWndBrw )

      if uFieldempresa( "lFltYea" )
         oWndBrw:setYearCombobox()
      end

      if !empty( cCodPrv ) .OR. !empty( cCodArt )
         oWndBrw:recAdd()
      end

      cCodPrv  := nil
      cCodArt  := nil

   end

Return .T.



STATIC FUNCTION EdtRec( aTmp, aGet, dbf, oBrw, cCodPrv, cCodArt, nMode )

   local oDlg
   local oFld
   local oBrwLin
   local oBrwInc
   local oBrwDoc
   local oSay                 := Array( 5 )
   local cSay                 := Array( 5 )
   local oSayLabels           := Array( 7 )
   local oBtnAtp
   local oBtnMin
   local oBmpDiv
   local oBmpEmp
   local cEstPed
   local oGetMasDiv
   local cGetMasDiv           := ""
   local cTlfPrv
   local oTlfPrv
   local oPedCli
   local oCodCli
   local oNomCli
   local cCodCli              := GetCodCli( aTmp[ 38 ] )
   local cNomCli              := GetNomCli( aTmp[ 38 ] )
   local oBmpGeneral
   local oBmpDatos
   local oBmpIncidencias
   local oBmpDocumentos





   cOldCodCli                 := aTmp[ 6 ]
   cPicUnd                    := MasUnd()

   do case
   case nMode == 1

      if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
         msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
         Return .F.
      end

      aTmp[ 1 ]        := cNewSer( "nPedPrv" )
      aTmp[ 4 ]        := cCurSesion()
      aTmp[ 8 ]        := Application():CodigoCaja()
      aTmp[ 7 ]        := Application():codigoAlmacen()
      aTmp[ 29 ]        := cDivEmp()
      aTmp[ 30 ]        := nChgDiv( aTmp[ 29 ], D():Divisas( nView ) )
      aTmp[ 3 ]        := RetSufEmp()
      aTmp[ 31 ]        := .T.
      aTmp[ 16 ]        := 1
      aTmp[ 37 ]        := Auth():Codigo()
      aTmp[ 44 ]        := Application():CodigoDelegacion()
      if !empty( cCodPrv )
         aTmp[ 6 ]     := cCodPrv
      end

   case nMode == 4

      if !lCajaOpen( Application():CodigoCaja() ) .AND. !oUser():lAdministrador()
         msgStop( "Esta caja " + Application():CodigoCaja() + " esta cerrada." )
         Return .F.
      end

      aTmp[ 4 ]        := cCurSesion()
      aTmp[ 8 ]        := Application():CodigoCaja()
      aTmp[ 31 ]        := .T.
      aTmp[ 36 ]        := .F.
      aTmp[ 16 ]        := 1
      aTmp[ 37 ]        := Auth():Codigo()

   case nMode == 2

      if aTmp[ 16 ] == 3
         msgStop( "El pedido ya fue recibido." )
         Return .F.
      end

      if aTmp[ 36 ] .AND. !oUser():lAdministrador()
         msgStop( "Solo puede modificar los pedidos cerrados los administradores." )
         Return .F.
      end

   end





   if BeginTrans( aTmp, nMode )
      Return .F.
   end

   if aTmp[ 16 ] == 0
      aTmp[ 16 ]  := 1
   end

   do case
   case  aTmp[ 16 ] == 1
      cEstPed           := "Pendiente"
   case  aTmp[ 16 ] == 2
      cEstPed           := "Parcial"
   case  aTmp[ 16 ] == 3
      cEstPed           := "Recibido"
   end

   if empty( aTmp[ 21 ] )
      aTmp[ 21 ]  := Padr( "General", 50 )
   end

   if empty( aTmp[ 23 ] )
      aTmp[ 23 ]     := Padr( "Pronto pago", 50 )
   end





   cSay[ 1 ]         := RetFld( aTmp[ 7 ], D():Almacen( nView ) )
   cSay[ 2 ]         := RetFld( aTmp[ 18 ], D():FormasPago( nView ) )
   cSay[ 3 ]         := RetFld( aTmp[ 8 ], D():Cajas( nView ) )
   cSay[ 4 ]         := RetFld( aTmp[ 6 ], D():Proveedores( nView ) )
   cSay[ 5 ]         := RetFld( cCodEmp() + aTmp[ 44 ], D():Delegaciones( nView ), "cNomDlg" )
   cTlfPrv           := RetFld( aTmp[ 6 ], D():Proveedores( nView ), "Telefono" )
   cUsr              := UsuariosModel():getNombreWhereCodigo( aTmp[ 37 ] )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "pedidos a proveedores", "PEDPRV",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )











    oFld := TFolder():ReDefine( 400, {"&Pedido", "Da&tos", "I&ncidencias", "D&ocumentos"}, { "PEDPRV_1","PEDPRV_2","PEDCLI_3","PEDCLI_4" }, oDlg,,,,, .F., )








      aGet[ 37 ] := TGetHlp():ReDefine( 215, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[2],,, {||       ( oUsr:cText( UsuariosModel():getNombreWhereCodigo( aTmp[ 37 ] ) ), .T.  )},,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )





      oUsr := TGetHlp():ReDefine( 216, { | u | If( PCount()==0, cUsr, cUsr:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )







      oBmpGeneral := TBitmap():ReDefine( 990, "gc_clipboard_empty_businessman_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )





      oBmpDatos := TBitmap():ReDefine( 990, "gc_folders2_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )





      oBmpIncidencias := TBitmap():ReDefine( 990, "gc_information_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )





      oBmpDocumentos := TBitmap():ReDefine( 990, "gc_address_book_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )









      aGet[ 6 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],, ( RetPicCodPrvEmp() ), {||       ( LoaPrv( aGet, aTmp, D():Proveedores( nView ), nMode, oSay[ 4 ], oTlfPrv ) )},,,,,, .F., {||           ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwProvee( aGet[ 6 ], oSay[ 4 ] ) )}, nil, "LUPA",, )







      aGet[ 9 ] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[14] := TGetHlp():ReDefine( 145, { | u | If( PCount()==0, aTmp[14], aTmp[14]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oTlfPrv := TGetHlp():ReDefine( 146, { | u | If( PCount()==0, cTlfPrv, cTlfPrv:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 10 ] := TGetHlp():ReDefine( 142, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 10 ], Rtrim( aTmp[ 11 ] ) + Space( 1 ) + Rtrim( aTmp[ 12 ] ) )}, nil, "gc_earth_lupa_16",, )




      aGet[ 13 ] := TGetHlp():ReDefine( 143, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 11 ] := TGetHlp():ReDefine( 144, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 12 ] := TGetHlp():ReDefine( 147, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







        aGet[ 7 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 7 ], , oSay[ 1 ] ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 7 ], oSay[ 1 ] ) )}, nil, "Lupa",, )







      oSay[ 1 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cSay[ 1 ], cSay[ 1 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ExpAlmacen( aTmp[ 7 ], dbfTmpLin, oBrwLin ) )}, nil, "Bot",, )







      aGet[ 18 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    cFPago( aGet[ 18 ], D():FormasPago( nView ), oSay[ 2 ] )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|brwFPago( aGet[ 18 ], oSay[ 2 ])}, nil, "Lupa",, )




      oSay[ 2 ] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 8 ] := TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],,, {||    cCajas( aGet[ 8 ], D():Cajas( nView ), oSay[ 3 ] )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 8 ], oSay[ 3 ] ) )}, nil, "LUPA",, )




      oSay[ 3 ] := TGetHlp():ReDefine( 166, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )












        aGet[ 29 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDivIn( aGet[ 29 ], oBmpDiv, aGet[ 30 ], @cPinDiv, @nDinDiv, @cPirDiv, @nDirDiv, oGetMasDiv, D():Divisas( nView ), D():Banderas( nView ) ) )},,,,,, .F., {||     ( nMode == 1 .AND. ( dbfTmpLin )->( LastRec() ) == 0 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 29 ], oBmpDiv, aGet[ 30 ], D():Divisas( nView ), D():Banderas( nView ) )}, nil, "LUPA",, )




        oBmpDiv := TBitmap():ReDefine( 171, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )





        aGet[ 30 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.9999",,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )









      oBmpEmp := TBitmap():ReDefine( 500,, "Bmp\ImgPedPrv.bmp", oDlg,,, .F., .F.,,, .F.,,, .F. )




      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )

      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLin:cAlias          := dbfTmpLin

      oBrwLin:nMarqueeStyle   := 6
      oBrwLin:lFooter         := .T.
      oBrwLin:cName           := "Lineas de pedidos a proveedor"

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Número"
            :cSortOrder       := "nNumLin"
            :bEditValue       := {|| if( ( dbfTmpLin )->lKitChl, "", Trans( ( dbfTmpLin )->nNumLin, "9999" ) ) }
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
            :nWidth           := 65
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Posición"
            :cSortOrder       := "nPosPrint"
            :bEditValue       := {|| ( dbfTmpLin )->nPosPrint }
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
            :cEditPicture     := "9999"
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Es. Estado"
            :bStrData         := {|| "" }
            :bBmpData         := {|| ( dbfTmpLin )->nEstado }
            :nWidth           := 20
            :AddResource( "gc_delete_12" )
            :AddResource( "gc_shape_square_12" )
            :AddResource( "gc_check_12" )
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Código"
            :cSortOrder       := "cRef"
            :bEditValue       := {|| ( dbfTmpLin )->cRef }
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
            :nWidth           := 80
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "C. Barras"
            :bEditValue       := {|| cCodigoBarrasDefecto( ( dbfTmpLin )->cRef, D():ArticulosCodigosBarras( nView ) ) }
            :nWidth           := 100
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Código proveedor"
            :cSortOrder       := "cRefPrv"
            :bEditValue       := {|| ( dbfTmpLin )->cRefPrv }
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
            :nWidth           := 80
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Descripción"
            :cSortOrder       := "cDetalle"
            :bEditValue       := {|| if( empty( ( dbfTmpLin )->cRef ), ( dbfTmpLin )->mLngDes, ( dbfTmpLin )->cDetalle ) }
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
            :nWidth           := 280
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Prop. 1"
            :bEditValue       := {|| ( dbfTmpLin )->cValPr1 }
            :nWidth           := 60
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Valor prop. 1"
            :bEditValue       := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cValPr1, nView ) }
            :nWidth           := 40
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Prop. 2"
            :bEditValue       := {|| ( dbfTmpLin )->cValPr2 }
            :nWidth           := 60
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Valor prop. 2"
            :bEditValue       := {|| nombrePropiedad( ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr2, nView ) }
            :nWidth           := 40
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Lote"
            :bEditValue       := {|| ( dbfTmpLin )->cLote }
            :nWidth           := 80
            :lHide            := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Bultos"
            :bEditValue       := {|| ( dbfTmpLin )->nBultos }
            :cEditPicture     := MasUnd()
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :lHide            := .T.
            :nFooterType      := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := cNombreCajas()
            :bEditValue       := {|| ( dbfTmpLin )->nCanPed }
            :cEditPicture     := MasUnd()
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :lHide            := .T.
            :nFooterType      := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := cNombreUnidades()
            :cSortOrder       := "nUniCaja"
            :bEditValue       := {|| ( dbfTmpLin )->nUniCaja }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :lHide            := .T.
            :nEditType        := 1
            :nFooterType      := 1
            :bOnPostEdit      := {|o,x,n| ChangeUnidades( o, x, n, aTmp ) }
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | if( !empty( oCol ), oCol:SetOrder(), ) }
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Sumar unidades"
            :bStrData         := {|| "" }
            :bOnPostEdit      := {|| .T. }
            :bEditBlock       := {|| SumaUnidadLinea( aTmp ) }
            :nEditType        := 5
            :nWidth           := 20
            :nHeadBmpNo       := 1
            :nBtnBmp          := 1
            :nHeadBmpAlign    := 1
            :AddResource( "gc_navigate_plus_16" )
            :lHide               := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader             := "Restar unidades"
            :bStrData            := {|| "" }
            :bOnPostEdit         := {|| .T. }
            :bEditBlock          := {|| RestaUnidadLinea( aTmp ) }
            :nEditType           := 5
            :nWidth              := 20
            :nHeadBmpNo          := 1
            :nBtnBmp             := 1
            :nHeadBmpAlign       := 1
            :AddResource( "gc_navigate_minus_16" )
            :lHide               := .T.
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Total " + cNombreUnidades()
            :bEditValue       := {|| nTotNPedPrv( dbfTmpLin ) }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nFooterType      := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "UM. Unidad de medición"
            :bEditValue       := {|| ( dbfTmpLin )->cUnidad }
            :nWidth           := 25
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Almacen"
            :bEditValue       := {|| ( dbfTmpLin )->cAlmLin }
            :nWidth           := 60
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Importe"
            :bEditValue       := {|| nTotUPedPrv( dbfTmpLin, nDinDiv ) }
            :cEditPicture     := cPinDiv
            :nWidth           := 90
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "% Dto."
            :bEditValue       := {|| ( dbfTmpLin )->nDtoLin }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 50
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "% Prm."
            :bEditValue       := {|| ( dbfTmpLin )->nDtoPrm }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 40
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Stock actual"
            :bEditValue       := {|| ( dbfTmpLin )->nStkAct }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Pendiente recibir"
            :bEditValue       := {|| nTotPdtRecTmp( dbfTmpLin ) }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end



         with object ( oBrwLin:AddCol() )
            :cHeader          := "Stock mínimo"
            :bEditValue       := {|| ( dbfTmpLin )->nStkMin }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Consumo"
            :bEditValue       := {|| ( dbfTmpLin )->nConRea }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "7 dias"
            :bEditValue       := {|| ( dbfTmpLin )->nConSem }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "15 dias"
            :bEditValue       := {|| ( dbfTmpLin )->nConQui }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "30 dias"
            :bEditValue       := {|| ( dbfTmpLin )->nConMes }
            :cEditPicture     := cPicUnd
            :nWidth           := 60
            :lHide            := .T.
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end


         with object ( oBrwLin:AddCol() )
            :cHeader          := "% " + cImp()
            :bEditValue       := {|| ( dbfTmpLin )->nIva }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 50
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Total"
            :bEditValue       := {|| nTotLPedPrv( dbfTmpLin, nDinDiv, nDirDiv ) }
            :cEditPicture     := cPirDiv
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nFooterType      := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Comentario"
            :bEditValue       := {|| Padr( RetFld( ( dbfTmpLin )->cRef, D():Articulos( nView ), "mComent" ), 100 ) }
            :nWidth           := 180
            :lHide            := .T.
            :nEditType        := 1
            :cEditPicture     := "@S180"
            :bOnPostEdit      := {|o,x,n| ChangeComentario( o, x, n, aTmp ) }
         end

         with object ( oBrwLin:AddCol() )
            :cHeader          := "Centro coste"
            :bEditValue       := {|| AllTrim( ( dbfTmpLin )->cCtrCoste ) + " - " + CentroCosteModel():getNombreFromCodigo( ( dbfTmpLin )->cCtrCoste ) }
            :nWidth           := 180
            :lHide            := .T.
         end

         if nMode <> 3
            oBrwLin:bLDblClick   := {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) }
         end

         oBrwLin:CreateFromResource( 190 )





      TButton():ReDefine( 500, {||( AppDeta( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F., {||        ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 501, {||( EdtDeta( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F., {||           ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwLin, dbfTmpLin, {|| delDeta() }, {|| RecalculaTotal( aTmp ) } ) )}, oFld:aDialogs[1],,, .F., {||        ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( EdtZoom( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )





      TButton():ReDefine( 524, {||( LineUp( dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 525, {||( LineDown( dbfTmpLin, oBrwLin ) )}, oFld:aDialogs[1],,, .F., {||     ( nMode <> 3 )},,, .F. )





      oBtnMin := TButton():ReDefine( 527, {||( if( GenPedProvFromMinimo():New( nView, aGet[ 6 ], aGet[ 9 ], dbfTmpLin ):Activate(), ( oBtnMin:Hide(), RecalculaTotal( aTmp ), oBrwLin:Refresh() ), ) )}, oFld:aDialogs[1],,, .F., {||     ( nMode <> 3 )},,, .F. )









   aGet[ 21 ] := TGetHlp():ReDefine( 199, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .F.,,,,,, nil,,, )







    aGet[ 22 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





   aGet[ 23 ] := TGetHlp():ReDefine( 209, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .F.,,,,,, nil,,, )







        aGet[ 24 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      aGet[ 32 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 33 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      aGet[ 34 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 35 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oBrwIva                        := IXBrowse():New( oFld:aDialogs[ 1 ] )

      oBrwIva:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwIva:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwIva:SetArray( aTotIva )

      oBrwIva:lHScroll               := .F.
      oBrwIva:lVScroll               := .F.
      oBrwIva:nMarqueeStyle          := 5
      oBrwIva:lRecordSelector        := .F.

      oBrwIva:CreateFromResource( 490 )

      with object ( oBrwIva:aCols[ 1 ] )
         :cHeader       := "Bruto"
         :bStrData      := {|| if( !empty( aTotIva[ oBrwIva:nArrayAt, 1 ] ), Trans( aTotIva[ oBrwIva:nArrayAt, 2 ], cPirDiv ), "" ) }
         :nWidth        := 106
         :nDataStrAlign := 1
         :nHeadStrAlign := 1
         :nFootStrAlign := 1
      end

      with object ( oBrwIva:aCols[ 2 ] )
         :cHeader       := "Base"
         :bStrData      := {|| if( !empty( aTotIva[ oBrwIva:nArrayAt, 2 ] ), Trans( aTotIva[ oBrwIva:nArrayAt, 2 ], cPirDiv ), "" ) }
         :nWidth        := 106
         :cEditPicture  := cPirDiv
         :nDataStrAlign := 1
         :nHeadStrAlign := 1
         :nFootStrAlign := 1
      end

      with object ( oBrwIva:aCols[ 3 ] )
         :cHeader       := "%" + cImp()
         :bStrData      := {|| if( !IsNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ), aTotIva[ oBrwIva:nArrayAt, 3 ], "" ) }
         :bEditValue    := {|| aTotIva[ oBrwIva:nArrayAt, 3 ] }
         :nWidth        := 55
         :cEditPicture  := "@E 999.99"
         :nDataStrAlign := 1
         :nHeadStrAlign := 1
         :nFootStrAlign := 1
         :nEditType     := 1
         :bEditWhen     := {|| !isNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ) }
         :bOnPostEdit   := {|o,x| EdtIva( o, x, aTotIva[ oBrwIva:nArrayAt, 3 ], dbfTmpLin, D():TiposIva( nView ), oBrwLin ), RecalculaTotal( aTmp ) }
      end

      with object ( oBrwIva:aCols[ 4 ] )
         :cHeader       := "%R.E."
         :bStrData      := {|| if( !empty( aTotIva[ oBrwIva:nArrayAt, 4 ] ) .AND. aTmp[ 25 ], Trans( aTotIva[ oBrwIva:nArrayAt, 4 ], "@E 99.9" ), "" ) }
         :nWidth        := 55
         :nDataStrAlign := 1
         :nHeadStrAlign := 1
         :nFootStrAlign := 1
      end

      with object ( oBrwIva:aCols[ 5 ] )
         :cHeader       := cImp()
         :bStrData      := {|| if( !empty( aTotIva[ oBrwIva:nArrayAt, 5 ] ), Trans( aTotIva[ oBrwIva:nArrayAt, 5 ], cPirDiv ), "" ) }
         :nWidth        := 80
         :nDataStrAlign := 1
         :nHeadStrAlign := 1
         :nFootStrAlign := 1
      end

      with object ( oBrwIva:aCols[ 6 ] )
         :cHeader       := "R.E."
         :bStrData      := {|| if( !empty( aTotIva[ oBrwIva:nArrayAt, 6 ] ) .AND. aTmp[ 25 ], Trans( aTotIva[ oBrwIva:nArrayAt, 6 ], cPirDiv ), "" ) }
         :nWidth        := 80
         :cEditPicture  := cPirDiv
         :nDataStrAlign := 1
         :nHeadStrAlign := 1
      end








        oGetNet := TSay():ReDefine( 370, {|| nGetNeto}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



        oGetIva := TSay():ReDefine( 380, {|| nGetIva}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



        oGetReq := TSay():ReDefine( 390, {|| nGetReq}, oFld:aDialogs[1],,,, .F.,, .F., .F., )



      oGetIvm := TSay():ReDefine( 403, {|| nTotIvm}, oFld:aDialogs[1],,,, .F.,, .F., .F., )





      aGet[ 25 ] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 25 ], aTmp[ 25 ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ) )},,,,, .F., {||         ( nMode <> 3 )}, .F. )




      oGetTotal := TSay():ReDefine( 410, {|| nTotPed}, oFld:aDialogs[1],,,, .F., oFont, .F., .F., )




      oGetMasDiv := TSay():ReDefine( 420, {|| cGetMasDiv}, oFld:aDialogs[1],,,, .F., oFont, .F., .F., )









      aGet[ 1 ] := TGetHlp():ReDefine( 690, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( aTmp[1] >= "A" .AND. aTmp[1] <= "Z"  )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .T., {||    ( UpSerie( aGet[1] ) )}, {||  ( DwSerie( aGet[1] ) )},,,, nil,,, )





        aGet[2] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[2], aTmp[2]:= u ) }, oFld:aDialogs[1],, "999999999",,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )




        aGet[3] := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[3], aTmp[3]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





        aGet[5] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[5], aTmp[5]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[16] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cEstPed, cEstPed:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 15 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ 45 ] := TComboBox():ReDefine( 218, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, ( SituacionesModel():getArrayNombres() ), oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "aGet[ 45 ]",,,,,,, )








      aGet[ 53 ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[1],,, {||    ( D():CentroCoste( nView ):Existe( aGet[ 53 ], aGet[ 53 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( D():CentroCoste( nView ):Buscar( aGet[ 53 ] ) )}, nil, "LUPA",, 511 )




      aGet[ 46 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[2],, { 270, 271, 272, 273 },,,,, .F., {||     ( .F. )}, )







      aGet[ 19 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[2],, "@E 999,999",, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 44 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 5 ] := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSay[ 5 ], cSay[ 5 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[17] := TGetHlp():ReDefine( 235, { | u | If( PCount()==0, aTmp[17], aTmp[17]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      oSayLabels[ 1 ] := TGroup():ReDefine( 700,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 2 ] := TSay():ReDefine( 701,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 3 ] := TSay():ReDefine( 702,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 4 ] := TSay():ReDefine( 703,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 5 ] := TSay():ReDefine( 704,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 6 ] := TSay():ReDefine( 705,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )
      oSayLabels[ 7 ] := TSay():ReDefine( 706,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F., )









      aGet[27] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[27], aTmp[27]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










      aGet[28] := TMultiGet():ReDefine( 200, { | u | If( PCount()==0, aTmp[28], aTmp[28]:= u ) }, oFld:aDialogs[2],, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, .F.,, )





      oPedCli := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[38], aTmp[38]:= u ) }, oFld:aDialogs[2],, "@R #/#########/##",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oCodCli := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, cCodCli, cCodCli:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oNomCli := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, cNomCli, cNomCli:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 39 ] := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 40 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 41 ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oBrwInc                 := IXBrowse():New( oFld:aDialogs[ 3 ] )

      oBrwInc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwInc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwInc:cAlias          := dbfTmpInc

      oBrwInc:nMarqueeStyle   := 5
      oBrwInc:cName           := "Incidencias de pedidos a proveedor"

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Resuelta"
            :bStrData         := {|| "" }
            :bEditValue       := {|| ( dbfTmpInc )->lListo }
            :nWidth           := 65
            :SetCheck( { "Sel16", "Cnt16" } )
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }
            :nWidth           := 90
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }
            :nWidth           := 390
         end

         if nMode <> 3
            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }
         end

         oBrwInc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 502, {||( DbDelRec( oBrwInc, dbfTmpInc, nil, nil, .T. ) )}, oFld:aDialogs[ 3 ],,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) )}, oFld:aDialogs[ 3 ],,, .F.,,,, .F. )

      oBrwDoc                 := IXBrowse():New( oFld:aDialogs[ 4 ] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc

      oBrwDoc:nMarqueeStyle   := 5
      oBrwDoc:nRowHeight      := 40
      oBrwDoc:nDataLines      := 2

         with object ( oBrwDoc:AddCol() )
            :cHeader          := "Documento"
            :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }
            :nWidth           := 885
         end

         if nMode <> 3
            oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) }
         end

         oBrwDoc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 502, {||( DbDelRec( oBrwDoc, dbfTmpDoc, nil, nil, .F. ) )}, oFld:aDialogs[ 4 ],,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )




      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )









     TButton():ReDefine( 4, {||( RecalculaPedidoProveedores( aTmp, oDlg ), ( oBrwLin:Refresh() ), RecalculaTotal( aTmp ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





     TButton():ReDefine( 1, {||( EndTrans( aGet, aTmp, oBrw, nMode, oDlg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 3, {||( if( EndTrans( aGet, aTmp, oBrw, nMode, oDlg ), GenPedPrv( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( If( ExitNoSave( nMode, dbfTmpLin ), ( oDlg:end() ), ) )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oFld:aDialogs[1]:AddFastKey( 113, {|| AppDeta( oBrwLin, bEdtDet, aTmp ) } )
         oFld:aDialogs[1]:AddFastKey( 114, {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) } )
         oFld:aDialogs[1]:AddFastKey( 115, {|| WinDelRec( oBrwLin, dbfTmpLin, {|| DelDeta() }, {|| RecalculaTotal( aTmp ) } ) } )

         oFld:aDialogs[3]:AddFastKey( 113, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
         oFld:aDialogs[3]:AddFastKey( 114, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
         oFld:aDialogs[3]:AddFastKey( 115, {|| DbDelRec( oBrwInc, dbfTmpInc, nil, nil, .T. ) } )

         oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 115, {|| DbDelRec( oBrwDoc, dbfTmpDoc, nil, nil, .F. ) } )

         oDlg:AddFastKey( 116, {|| EndTrans( aGet, aTmp, oBrw, nMode, oDlg ) } )
         oDlg:AddFastKey( 117, {|| if( EndTrans( aGet, aTmp, oBrw, nMode, oDlg ), GenPedPrv( 1 ), ) } )
         oDlg:AddFastKey( 120, {|| D():CamposExtraHeader( nView ):Play( space(1) ) } )
         oDlg:AddFastKey( 65,    {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )
      end

      oDlg:AddFastKey ( 112, {|| GoHelp() } )

      do case
         case nMode == 1 .AND. lRecogerUsuario() .AND. empty( cCodArt )
            oDlg:bStart := {|| if( lGetUsuario( aGet[ 37 ] ), , oDlg:end() ), StartEdtRec( aGet ) }

         case nMode == 1 .AND. lRecogerUsuario() .AND. !empty( cCodArt )
            oDlg:bStart := {|| if( lGetUsuario( aGet[ 37 ] ), AppDeta( oBrwLin, bEdtDet, aTmp, cCodArt ), oDlg:end() ), StartEdtRec( aGet ) }

         case nMode == 1 .AND. !lRecogerUsuario() .AND. !empty( cCodArt )
            oDlg:bStart := {|| AppDeta( oBrwLin, bEdtDet, aTmp, cCodArt ), StartEdtRec( aGet ) }
         otherwise
            oDlg:bStart := {|| StartEdtRec( aGet ) }
      end




    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|(  recalculaTotal( aTmp ) )}, .T.,,, {|Self|(  initEdtRec( aGet, aTmp, oBrw, oBrwLin, oBrwInc, nMode, cCodPrv, oDlg ) )}, oDlg:bRClicked,,, )

   killTrans( oBrwLin )

   endEdtRecMenu()

   oBmpDiv:end()
   oBmpEmp:end()
   oBmpGeneral:end()
   oBmpIncidencias:end()
   oBmpDatos:end()
   oBmpDocumentos:end()

RETURN ( oDlg:nResult == 1 )



Static function StartEdtRec( aGet )

   if !empty( aGet[ 53 ] )
      aGet[ 53 ]:lValid()
   endif

return .T.



static function nTotPdtRecTmp( dbfTmp )

   local nTotRes     := 0








   nTotRes           := AlbaranesProveedoresLineasModel():nUnidadesRecibidas( ( dbfTmp )->cSerPed + Str( ( dbfTmp )->nNumPed ) + ( dbfTmp )->cSufPed, ( dbfTmp )->cRef, ( dbfTmp )->cCodPr1, ( dbfTmp )->cCodPr2, ( dbfTmp )->cValPr1, ( dbfTmp )->cValPr2, ( dbfTmp )->cLote )



return if( ( nTotRes > nTotNPedPrv( dbfTmp ) ), 0, nTotNPedPrv( dbfTmp ) - nTotRes )



static Function initEdtRec( aGet, aTmp, oBrw, oBrwLin, oBrwInc, nMode, cCodPrv, oDlg )

   edtRecMenu( aGet, aTmp, oBrw, oBrwLin, nMode, oDlg )

   showKitCom( D():PedidosProveedores( nView ), dbfTmpLin, oBrwLin, cCodPrv, dbfTmpInc, aGet )

   oBrwLin:Load()
   oBrwLin:MakeTotals()
   oBrwLin:RefreshFooters()

   oBrwInc:Load()

RETURN ( .T. )



Static Function EdtRecMenu( aGet, aTmp, oBrw, oBrwLin, nMode, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

            if !lExternal




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra para la familia", .F.,, {|oMenuItem|( D():CamposExtraHeader( nView ):Play( space(1) ) )},, "gc_form_plus2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&2. Modificar proveedor", "Modificar la ficha del proveedor", .F.,, {|oMenuItem|( EdtPrv( aTmp[ 6 ] ) )},, "gc_businessmen2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&3. Informe de proveedor", "Abrir el informe del proveedor", .F.,, {|oMenuItem|( InfProveedor( aTmp[ 6 ] ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)

            end




            MenuAddItem( "&4. Informe del documento", "Abrir el informe del documento", .F.,, {|oMenuItem|( TTrazaDocumento():Activate( "01", aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )



         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return ( oMenu )



Static Function EndEdtRecMenu()

Return ( if( oMenu <> nil, oMenu:End(), ) )



Static Function RecalculaPedidoProveedores( aTmp, oDlg )

   local nRecNum
   local nPreCom




   if !ApoloMsgNoYes( "¡Atención!,"                                      + Chr(13)+Chr(10) +  "todos los precios se recalcularán en función de"  + Chr(13)+Chr(10) +  "los valores en las bases de datos.", "¿ Desea proceder ?" )
      return nil
   end

   oDlg:Disable()

   ( D():Articulos( nView ) )->( ordSetFocus( "Codigo" ) )

   nRecNum                          := ( dbfTmpLin )->( RecNo() )

   ( dbfTmpLin )->( dbGotop() )
   while !( dbfTmpLin )->( eof() )





      nPreCom                       := nComPro( ( dbfTmpLin )->cRef, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr2, D():ArticuloPrecioPropiedades( nView ) )

      if nPrecom  <> 0

         ( dbfTmpLin )->nPreDiv     := nPreCom

      else

         if uFieldEmpresa( "lCosPrv", .F. )
            nPreCom                 := nPrecioReferenciaProveedor( aTmp[ 6 ], ( dbfTmpLin )->cRef, D():ProveedorArticulo( nView ) )
         end

         if nPreCom <> 0
            ( dbfTmpLin )->nPreDiv  := nPreCom
         else
            ( dbfTmpLin )->nPreDiv  := nCosto( ( dbfTmpLin )->cRef, D():Articulos( nView ), D():Kit( nView ), .F., aTmp[ 29 ], D():Divisas( nView ) )
         end





         if uFieldEmpresa( "lCosPrv", .F. )

            nPreCom                    := nDescuentoReferenciaProveedor( aTmp[ 6 ], ( dbfTmpLin )->cRef, D():ProveedorArticulo( nView ) )

            if nPreCom <> 0
               ( dbfTmpLin )->nDtoLin  := nPreCom
            end





            nPreCom                    := nPromocionReferenciaProveedor( aTmp[ 6 ], ( dbfTmpLin )->cRef, D():ProveedorArticulo( nView ) )

            if nPreCom <> 0
               ( dbfTmpLin )->nDtoPrm  := nPreCom
            end

         end

      end

      ( dbfTmpLin )->( dbSkip() )

   end

   ( dbfTmpLin )->( dbGoTo( nRecNum ) )

   oDlg:Enable()

Return nil



Static Function EdtDoc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de pedido a proveedor", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | " + "*.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function EdtInc( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg

   if nMode == 1
      aTmp[ 1  ] := aTmpLin[ 1 ]
      aTmp[ 2  ] := aTmpLin[ 2 ]
      aTmp[ 3  ] := aTmpLin[ 3 ]
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "incidencias de pedido a proveedor", "INCIDENCIA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )







STATIC FUNCTION AppDeta( oBrwLin, bEdtDet, aTmp, cCodArt )

   WinAppRec( oBrwLin, bEdtDet, dbfTmpLin, aTmp, cCodArt )

Return ( RecalculaTotal( aTmp ) )






STATIC FUNCTION EdtDeta( oBrwLin, bEdtDet, aTmp )

   WinEdtRec( oBrwLin, bEdtDet, dbfTmpLin, aTmp )

Return ( RecalculaTotal( aTmp ) )







STATIC FUNCTION DelDeta()

   if ( dbfTmpLin )->lKitArt
      dbDelKit( , dbfTmpLin, ( dbfTmpLin )->nNumLin )
   end

Return ( .T. )







STATIC FUNCTION EdtZoom( oBrwLin, bEdtDet, aTmp )

   WinZooRec( oBrwLin, bEdtDet, dbfTmpLin, aTmp )

RETURN NIL







STATIC FUNCTION EdtDet( aTmp, aGet, dbf, oBrw, aTmpPed, cCodArt, nMode )

   local oDlg
   local oFld
   local oBmp
   local oBtn
   local oSay2
   local cSay2
   local oSayFam
   local cSayFam        := ""
   local oSayPr1
   local oSayPr2
   local cSayPr1        := ""
   local cSayPr2        := ""
   local oSayVp1
   local oSayVp2
   local cSayVp1        := ""
   local cSayVp2        := ""
   local oTotal
   local nTotal         := 0
   local oGet1
   local oGetStk
   local nGetStk        := 0
   local oSayLote
   local nTotRes
   local oTotUni
   local oTotEnt
   local oTotPdt
   local oBrwAlb
   local nOrdAnt
   local oBrwPrp
   local cNumPed        := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]

   cOldCodArt           := aTmp[ 4 ]
   cOldUndMed           := aTmp[ 13 ]
   cTipoCtrCoste        := alltrim( aTmp[ 68 ] )
   cGetCelda            := Space(20)

   if nMode == 1

      if file( cPatScriptEmp() + "PedidosProveedores\Lineas\validCamposObligatorios.prg" )
         if !runScript( "PedidosProveedores\Lineas\validCamposObligatorios.prg", aTmpPed, nView )
            Return .F.
         end
      end

      aTmp[9]   := 1
      aTmp[24 ]   := aTmpPed[ 7 ]

      if !empty( cCodArt )
         aTmp[ 4 ]  := cCodArt
      end

      cTipoCtrCoste     := "Centro de coste"

      aTmp[56]   := 1

   else

      nGetStk           := StocksModel():nStockArticulo( aTmp[ 5 ], aTmp[ 24 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ] )

   end







   nTotRes              := AlbaranesProveedoresLineasModel():nUnidadesRecibidas( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], aTmp[ 4 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ] )
   if nMode == 2
      if nTotRes >= nTotNPedPrv( aTmp )
         MsgStop( "No se puede modificar una linea recibida", "¡Atención!" )
         Return .F.
      end
   end





   nOrdAnt              := ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( "cPedPrvRef" ) )

   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdScope( 0, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] + aTmp[ 20 ] + aTmp[ 21 ] ) )
   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdScope( 1, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] + aTmp[ 20 ] + aTmp[ 21 ] ) )
   ( D():AlbaranesProveedoresLineas( nView ) )->( dbGoTop() )



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "líneas a pedidos de proveedores", "LPEDPRV",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )











      oFld := TFolder():ReDefine( 400, {"&General", "Da&tos", "&Anular", "&Observaciones", "&Centro coste"}, { "LPEDPRV_1","LPEDPRV_2","LFACPRV_4","LFACPRV_6","LCTRCOSTE" }, oDlg,,,,, .F., )







      aGet[ 4 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 4 ], aTmp[ 4 ]:= u ) }, oFld:aDialogs[1],,, {||    ( LoaArt( aGet, aTmp, nMode, aTmpPed, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayLote, oBrwPrp, oDlg, oBmp, oGetStk ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[ 4 ], aGet[ 6 ], .F., .T., oBtn, aGet[ 27 ], aTmp[ 18 ], aTmp[ 19 ], aGet[ 20 ], aGet[ 21 ], , if( uFieldEmpresa( "lStockAlm" ), aTmp[ 24 ], nil ) ) )}, nil, "LUPA",, )








      oSayLote := TSay():ReDefine( 111,, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      aGet[ 27 ] := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

         aGet[ 27 ]:bChange   := {|| aGet[ 27 ]:Assign(), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 24 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ], oGetStk ) }





      aGet[6] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[6], aTmp[6]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( ( lModDes() .OR. empty( aTmp[ 6 ] ) ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






        aGet[14] := TMultiGet():ReDefine( 121, { | u | If( PCount()==0, aTmp[14], aTmp[14]:= u ) }, oFld:aDialogs[1],, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, .F.,, )















      aGet[ 20 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aGet[ 20 ], oSayVp1, aTmp[ 18 ], D():PropiedadesLineas( nView ) ), LoaArt( aGet, aTmp, nMode, aTmpPed, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayLote, oBrwPrp, oDlg, oBmp, oGetStk ), .F. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 20 ], oSayVp1, aTmp[18 ] ) )}, nil, "LUPA",, )

         aGet[ 20 ]:bChange   := {|| aGet[ 20 ]:Assign(), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 24 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ], oGetStk ) }



      oSayPr1 := TSay():ReDefine( 221, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F., )





      oSayVp1 := TGetHlp():ReDefine( 222, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ 21 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aGet[ 21 ], oSayVp2, aTmp[ 19 ], D():PropiedadesLineas( nView ) ), LoaArt( aGet, aTmp, nMode, aTmpPed, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayLote, oBrwPrp, oDlg, oBmp, oGetStk ), .F. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPropiedadActual( aGet[ 21 ], oSayVp2, aTmp[ 19 ] ) )}, nil, "LUPA",, )

         aGet[ 21 ]:bChange   := {|| aGet[ 21 ]:Assign(), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 24 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ], oGetStk ) }



      oSayPr2 := TSay():ReDefine( 231, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F., )




      oSayVp2 := TGetHlp():ReDefine( 232, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 24 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[1],,, {||    (  cAlmacen( aGet[ 24 ], , oSay2 ), StocksModel():lPutStockActual( aTmp[ 4 ], aTmp[ 24 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ], oGetStk ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( Self, oSay2 ) )}, nil, "LUPA",, )




        oSay2 := TGetHlp():ReDefine( 241, { | u | If( PCount()==0, cSay2, cSay2:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ 39 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[ 1 ],,, {||       ( oSayFam:cText( RetFld( aTmp[ 39  ], D():Familias( nView ) ) ), .T. )},,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwFamilia( aGet[ 39 ], oSayFam ) )}, nil, "LUPA",, )





      oSayFam := TGetHlp():ReDefine( 271, { | u | If( PCount()==0, cSayFam, cSayFam:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )



      oBrwPrp                       := IXBrowse():New( oFld:aDialogs[1] )

      oBrwPrp:nDataType             := 2

      oBrwPrp:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp:lHScroll              := .T.
      oBrwPrp:lVScroll              := .T.

      oBrwPrp:nMarqueeStyle         := 3
      oBrwPrp:lRecordSelector       := .F.
      oBrwPrp:lFastEdit             := .T.
      oBrwPrp:nFreeze               := 1
      oBrwPrp:lFooter               := .T.

      oBrwPrp:SetArray( {}, .F., 0, .F. )

      oBrwPrp:MakeTotals()

      oBrwPrp:CreateFromResource( 100 )





      oGetCelda := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, cGetCelda, cGetCelda:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 184, )

      oGetCelda:bValid              := {|| SearchProperty( oGetCelda, oBrwPrp ), .T. }














      aGet[ 7 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( D():TiposIva( nView ), aTmp[ 7 ], @aTmp[ 41 ] ) )},,,,,, .F., {||     ( lModIva() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 7 ], D():TiposIva( nView ), , .T. ) )}, nil, "LUPA",, )










      aGet[ 61 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[1],, cPinDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,, 126, )










      aGet[ 58 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||        ( uFieldEmpresa( "lUseBultos" ) .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,, 421, )

      aGet[ 58 ]:Cargo          := "nBultos"
      aGet[ 58 ]:bPostValidate  := {| oSender | runScript( "PedidosProveedores\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpPed ) }









      aGet[ 8 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||        ( lUseCaj() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,, 141, )

      aGet[ 8 ]:Cargo          := "nCanPed"
      aGet[ 8 ]:bPostValidate  := {| oSender | runScript( "PedidosProveedores\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpPed ) }











      aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ], aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,, 301, )

      aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ], aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,, 311, )

      aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ], aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,, 321, )

      aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ 9 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,, 151, )

         aGet[ 9 ]:Cargo          := "nUniCaja"
         aGet[ 9 ]:bPostValidate  := {| oSender | runScript( "PedidosProveedores\Lineas\validControl.prg", oSender, aGet, nView, nMode, aTmpPed ) }








      aGet[ 10 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],, cPinDiv,,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )












      aGet[ 13 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[1],,, {||       ( D():UnidadMedicion( nView ):Existe( aGet[ 13 ], aGet[ 13 ]:oHelpText, "cNombre" ), ValidaMedicion( aTmp, aGet) )},,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( D():UnidadMedicion( nView ):Buscar( aGet[ 13 ] ), ValidaMedicion( aTmp, aGet ) )}, nil, "LUPA",, 171 )








        aGet[ 15 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99",,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 16 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99",,,,,,, .F., {||        ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )







      aGet[ 17 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99",,,,,,, .F., {||        ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ 59 ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oGetStk := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, nGetStk, nGetStk:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 5 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





        oTotal := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, nTotal, nTotal:= u ) }, oFld:aDialogs[1],, cPirDiv,,,,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )



      oBmp := TBitmap():ReDefine( 100,,, oDlg,,, .F., .F.,,, .F.,,, .F. )

      oBmp:SetColor( , GetSysColor( 15 ) )










      oTotUni := TSay():ReDefine( 150, {||      nTotNPedPrv( aTmp )}, oFld:aDialogs[2], cPicUnd, "B/W*",, .F.,, .F., .F., )






      oTotEnt := TSay():ReDefine( 160, {||      nTotRes}, oFld:aDialogs[2], cPicUnd, "G/W*",, .F.,, .F., .F., )






      oTotPdt := TSay():ReDefine( 170, {||      if( ( nTotRes > nTotNPedPrv( aTmp ) ), 0, nTotNPedPrv( aTmp ) - nTotRes )}, oFld:aDialogs[2], cPicUnd, "R/W*",, .F.,, .F., .F., )





      oBrwAlb                 := IXBrowse():New( oFld:aDialogs[ 2 ] )

      oBrwAlb:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwAlb:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwAlb:cAlias          := D():AlbaranesProveedoresLineas( nView )

      oBrwAlb:lFooter         := .F.
      oBrwAlb:nMarqueeStyle   := 5

      oBrwAlb:CreateFromResource( 180 )

         with object ( oBrwAlb:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( dFecAlbPrv( ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb + Str( ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb ) + ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb, D():AlbaranesProveedores( nView ) ) ) }
            :nWidth           := 80
         end

         with object ( oBrwAlb:AddCol() )
            :cHeader          := "Albarán"
            :bEditValue       := {|| AllTrim( ( D():AlbaranesProveedoresLineas( nView ) )->cSerAlb ) + "/" + AllTrim( Str( ( D():AlbaranesProveedoresLineas( nView ) )->nNumAlb ) ) + "/" + AllTrim( ( D():AlbaranesProveedoresLineas( nView ) )->cSufAlb ) }
            :nWidth           := 80
         end

         with object ( oBrwAlb:AddCol() )
            :cHeader          := "Prop. 1"
            :bEditValue       := {|| AllTrim( ( D():AlbaranesProveedoresLineas( nView ) )->cValPr1 ) }
            :nWidth           := 40
            :lHide            := .T.
         end

         with object ( oBrwAlb:AddCol() )
            :cHeader          := "Prop. 2"
            :bEditValue       := {|| AllTrim( ( D():AlbaranesProveedoresLineas( nView ) )->cValPr2 ) }
            :nWidth           := 40
            :lHide            := .T.
         end

         with object ( oBrwAlb:AddCol() )
            :cHeader          := "Lote"
            :bEditValue       := {|| AllTrim( ( D():AlbaranesProveedoresLineas( nView ) )->cLote ) }
            :nWidth           := 60
         end

         with object ( oBrwAlb:AddCol() )
            :cHeader          := "Proveedor"
            :bEditValue       := {|| AllTrim( aTmpPed[ 6 ] ) + " - " + AllTrim( aTmpPed[ 9 ] ) }
            :nWidth           := 240
         end

         with object ( oBrwAlb:AddCol() )
            :cHeader          := "Total unidades"
            :bEditValue       := {|| nTotNAlbPrv( D():AlbaranesProveedoresLineas( nView ) ) }
            :bFooter          := {|| nTotRes }
            :cEditPicture     := cPicUnd
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end












      aGet[ 67 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 67 ], aTmp[ 67 ]:= u ) }, oFld:aDialogs[5],,, {||    ( D():CentroCoste( nView ):Existe( aGet[ 67 ], aGet[ 67 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( D():CentroCoste( nView ):Buscar( aGet[ 67 ] ) )}, nil, "LUPA",, 411 )






      oTipoCtrCoste := TComboBox():ReDefine( 140, { | u | If( PCount()==0, cTipoCtrCoste, cTipoCtrCoste:= u ) }, aTipoCtrCoste, oFld:aDialogs[5],,,,,,, .F., {||     ( nMode <> 3 )},,,,,, "oTipoCtrCoste",,,,,,, )

         oTipoCtrCoste:bChange   := {|| clearGet( aGet[ 69 ] ), loadGet( aGet[ 69 ], cTipoCtrCoste ) }







      aGet[ 69 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 69 ], aTmp[ 69 ]:= u ) }, oFld:aDialogs[5],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 160 )





      oBtn := TButton():ReDefine( 1, {||( SaveDeta( aTmp, aGet, oBrwPrp, oFld, oDlg, oBrw, nMode, oTotal, oGet1, aTmpPed, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetStk, oSayLote, oBtn ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 9, {||( GoHelp() )}, oDlg,,, .F.,,,, .F. )





      aGet[36] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[36], aTmp[36]:= u ) }, oFld:aDialogs[3],, {||( CambiaAnulado( aGet, aTmp ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )





      aGet[37] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[37], aTmp[37]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 38 ] := TMultiGet():ReDefine( 420, { | u | If( PCount()==0, aTmp[38], aTmp[38]:= u ) }, oFld:aDialogs[3],, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      aGet[42] := TMultiGet():ReDefine( 100, { | u | If( PCount()==0, aTmp[42], aTmp[42]:= u ) }, oFld:aDialogs[4],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| SaveDeta( aTmp, aGet, oBrwPrp, oFld, oDlg, oBrw, nMode, oTotal, oGet1, aTmpPed, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetStk, oSayLote, oBtn ) } )
      oDlg:AddFastKey( 120, {|| D():CamposExtraLine( nView ):Play( if( nMode == 1, "", Str( ( dbfTmpLin )->( OrdKeyNo() ) ) ) ) } )
   end

   oDlg:SetControlFastKey( "PedidosProveedoresLineas", nView, aGet )






   oDlg:bStart    := {||   aGet[ 13 ]:lValid(), loadGet( aGet[ 69 ], cTipoCtrCoste ), aGet[ 69 ]:lValid(), if( !empty( cCodArt ), aGet[ 4 ]:lValid(), ), SetDlgMode( aGet, aTmp, aTmpPed, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayLote, oBrwPrp, oFld, oDlg, oTotal, oGetStk ), lCalcDeta( aTmp, oTotal ), oBrwAlb:GoTop(), oBrwAlb:Refresh() }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( MenuEdtDet( aGet[ 4 ], oDlg, , if( nMode == 1, "", Str( ( dbfTmpLin )->( OrdKeyNo() ) ) ) ) )}, oDlg:bRClicked,,, )

   if !Empty( oDetMenu )
      oDetMenu:End()
   end

   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdScope( 0, nil ) )
   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdScope( 1, nil ) )
   ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAnt ) )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION SetDlgMode( aGet, aTmp, aTmpPed, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayLote, oBrwPrp, oFld, oDlg, oTotal )

   local cCodArt        := aGet[ 4 ]:VarGet()

   if !uFieldEmpresa( "lUseBultos" )
      aGet[ 58 ]:Hide()
   else
      if !empty( aGet[ 58 ] )
         aGet[ 58 ]:SetText( uFieldempresa( "cNbrBultos" ) )
      end
   end

   if !lUseCaj()
      aGet[ 8 ]:Hide()
   else
      aGet[ 8 ]:SetText( cNombreCajas() )
   end

   aGet[ 9 ]:SetText( cNombreUnidades() )

   if empty( aTmp[ 24 ] )
      aTmp[ 24 ]  := aTmpPed[ 7 ]
   end

   oBrwPrp:Hide()
   oGetCelda:Hide()

   oSayPr1:SetText( "" )
   oSayVp1:SetText( "" )

   oSayPr2:SetText( "" )
   oSayVp2:SetText( "" )

   runScript( "PedidosProveedores\Lineas\beforeAppendLine.prg", aTmp, aGet, nView, nMode, ( ( dbfTmpLin )->( ordKeyCount() ) == 0 ), aTmpPed )

   do case
   case nMode == 1

      aGet[ 4    ]:show()
      aGet[ 6]:show()
      aGet[ 14 ]:hide()
      aGet[ 27   ]:hide()
      aGet[ 9]:cText( 1 )
      aGet[ 8 ]:cText( 1 )
      aGet[ 24 ]:cText( aTmpPed[ 7 ] )
      aGet[ 37]:cText( Ctod( "" ) )
      aGet[ 36]:Click( .F. )
      aGet[ 7    ]:cText( nIva( D():TiposIva( nView ), cDefIva() ) )

      aTmp[ 41    ]     := nReq( D():TiposIva( nView ), cDefIva() )

      aTmp[ 28 ]     := nLastNum( dbfTmpLin )
      aTmp[ 66 ]   := nLastNum( dbfTmpLin, "nPosPrint" )

      oSayLote:hide()

      aGet[ 67 ]:cText( aTmpPed[ 53 ] )

      if !empty( aGet[ 67 ] )
         aGet[ 67 ]:lValid()
      endif

      D():CamposExtraLine( nView ):setTemporalAppend()

   case nMode <> 1 .AND. empty( cCodArt )

      aGet[4    ]:hide()
        aGet[6]:hide()
        aGet[14 ]:show()
      aGet[27   ]:hide()

      oSayLote:hide()

      aGet[ 67 ]:cText( aTmpPed[ 53 ] )

      if !empty( aGet[ 67 ] )
         aGet[ 67 ]:lValid()
      endif

   case nMode <> 1 .AND. !empty( cCodArt )

      aGet[4    ]:show()
        aGet[6]:show()
        aGet[14 ]:hide()

      if aTmp[25]
         aGet[27   ]:Show()
         oSayLote:Show()
      else
         aGet[27   ]:Hide()
         oSayLote:Hide()
      end

      aGet[ 67 ]:cText( aTmpPed[ 53 ] )

      if !empty( aGet[ 67 ] )
         aGet[ 67 ]:lValid()
      endif

   end

   if !empty( aTmp[ 18 ] )
      aGet[ 20 ]:Show()

      oSayPr1:SetText( retProp( aTmp[ 18 ], D():Propiedades( nView ) ) )
      oSayPr1:Show()
      oSayVp1:Show()
      oSayVp1:cText( cNombrePropiedad( aTmp[ 18 ], aTmp[ 20 ], D():PropiedadesLineas( nView ) ) )
      oSayVp1:Refresh()
      aGet[ 20 ]:Refresh()
   else
      aGet[ 20 ]:Hide()
      oSayPr1:Hide()
      oSayVp1:Hide()
   end

   if !empty( aTmp[ 19 ] )
      aGet[ 21 ]:Show()

      oSayPr2:SetText( retProp( aTmp[ 19 ], D():Propiedades( nView ) ) )
      oSayPr2:Show()
      oSayVp2:Show()
      oSayVp2:cText( cNombrePropiedad( aTmp[ 19 ], aTmp[ 21 ], D():PropiedadesLineas( nView ) ) )
      oSayVp2:Refresh()
      aGet[ 21 ]:Refresh()
   else
      aGet[ 21 ]:hide()
      oSayPr2:Hide()
      oSayVp2:Hide()
   end



   aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
   aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
   aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()

   if D():UnidadMedicion( nView ):oDbf:Seek(  aTmp[ 13 ] )

      if D():UnidadMedicion( nView ):oDbf:nDimension >= 1 .AND. !empty( D():UnidadMedicion( nView ):oDbf:cTextoDim1 )
         aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( D():UnidadMedicion( nView ):oDbf:cTextoDim1 )
         aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
      end

      if D():UnidadMedicion( nView ):oDbf:nDimension >= 2 .AND. !empty( D():UnidadMedicion( nView ):oDbf:cTextoDim2 )
         aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( D():UnidadMedicion( nView ):oDbf:cTextoDim2 )
         aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
      end

      if D():UnidadMedicion( nView ):oDbf:nDimension >= 3 .AND. !empty( D():D():UnidadMedicion( nView ):oDbf:cTextoDim3 )
         aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( D():UnidadMedicion( nView ):oDbf:cTextoDim3 )
         aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
      end

   end



   oFld:SetOption( 1 )

   aGet[ 24 ]:lValid()
   aGet[ 39 ]:lValid()

   oTotal:cText( 0 )

   aGet[ 4    ]:SetFocus()

RETURN .T.



STATIC FUNCTION LoaArt( aGet, aTmp, nMode, aTmpPed, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayLote, oBrwPrp, oDlg, oBmp, oGetStk )

   local nOrdAnt
   local cCodFam
   local cCodPrv
   local cPrpArt
   local cCodArt
   local nUnidad
   local nPreCom
   local lChgCodArt
   local lSeek       := .F.

   nPreCom           := 0
   cCodPrv           := aTmpPed[ 6 ]
   cCodArt           := aGet[ 4 ]:varGet()
   cPrpArt           := aTmp[ 18 ] + aTmp[ 19 ] + aTmp[ 20 ] + aTmp[ 21 ]
   lChgCodArt        := ( Rtrim( cOldCodArt ) <> Rtrim( cCodArt ) .OR. Rtrim( cOldPrpArt ) <> Rtrim( cPrpArt ) )

   if empty( cCodArt )

      if lRetCodArt()
         MsgStop( "No se pueden añadir lineas sin codificar" )
         return .F.
      end

      aGet[ 7     ]:bWhen := {|| .T. }
      aGet[ 6 ]:Hide()
      aGet[ 27    ]:Hide()

      oSayLote:Hide()

      aGet[ 14  ]:Show()
      aGet[ 14  ]:SetFocus()

      if !empty( oBrwPrp )
         oBrwPrp:Hide()
      end

      if !Empty( oGetCelda )
         oGetCelda:Hide()
      end

   else

      if lModIva()
         aGet[ 7  ]:bWhen := {|| .T. }
      else
         aGet[ 7  ]:bWhen := {|| .F. }
      end

      aGet[ 4     ]:Show()
      aGet[ 6 ]:Show()
      aGet[ 14  ]:Hide()

      if lIntelliArtciculoSearch( cCodArt, cCodPrv, D():Articulos( nView ), D():ProveedorArticulo( nView ), D():ArticulosCodigosBarras( nView ) )

         if ( lChgCodArt )

            if ( D():Articulos( nView ) )->lObs
               MsgStop( "Artículo catalogado como obsoleto" )
               return .F.
            end

            aGet[ 4     ]:cText( ( D():Articulos( nView ) )->Codigo )
            aGet[ 6 ]:cText( ( D():Articulos( nView ) )->Nombre )



            aTmp[ 64 ]     := ( D():Articulos( nView ) )->cRefAux
            aTmp[ 65 ]    := ( D():Articulos( nView ) )->cRefAux2

            if ( D():Articulos( nView ) )->lMosCom .AND. !empty( ( D():Articulos( nView ) )->mComent )
               MsgStop( Trim( ( D():Articulos( nView ) )->mComent ) )
            end



            aTmp[ 60 ]  := ( D():Articulos( nView ) )->cCodImp

            D():ImpuestosEspeciales( nView ):setCodeAndValue( aTmp[ 60 ], aGet[ 61 ] )



            if aTmpPed[ 46 ] <= 1
               aGet[ 7 ]:cText( nIva( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva ) )
               aTmp[ 41 ]     := nReq( D():TiposIva( nView ), ( D():Articulos( nView ) )->TipoIva )
            end

            if ( D():Articulos( nView ) )->nCajEnt <> 0
               aGet[ 8 ]:cText( ( D():Articulos( nView ) )->nCajEnt )
            end

            if ( D():Articulos( nView ) )->nUniCaja <> 0
               aGet[ 9 ]:cText( ( D():Articulos( nView ) )->nUniCaja )
            end



            aTmp[ 25 ]    := ( D():Articulos( nView ) )->lLote

            if ( D():Articulos( nView ) )->lLote
               oSayLote:Show()
               aGet[ 27 ]:Show()
               aGet[ 27 ]:cText( Space( 64 ) )
            else
               oSayLote:Hide()
               aGet[ 27 ]:Hide()
            end





            nOrdAnt                 := ( D():ProveedorArticulo( nView ) )->( OrdSetFocus( "cCodPrv" ) )

            if ( D():ProveedorArticulo( nView ) )->( dbSeek( cCodPrv + cCodArt ) )

               if !empty( aGet[ 5 ] )
                  aGet[ 5 ]:cText( ( D():ProveedorArticulo( nView ) )->cRefPrv )
               end

            else

               if !empty( aGet[ 5 ] )
                  aGet[ 5 ]:cText( Space( 20 ) )
               end

            end

            ( D():ProveedorArticulo( nView ) )->( ordSetFocus( nOrdAnt ) )





            aTmp[ 23 ]        := ( D():Articulos( nView ) )->nCtlStock





            if ( D():Articulos( nView ) )->lKitArt
               aTmp[ 30 ]     := ( D():Articulos( nView ) )->lKitArt
               aTmp[ 33 ]     := lImprimirCompuesto( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
               aTmp[ 32 ]     := lPreciosCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
               if lStockCompuestos( ( D():Articulos( nView ) )->Codigo, D():Articulos( nView ) )
                  aTmp[ 23 ]  := ( D():Articulos( nView ) )->nCtlStock
               else
                  aTmp[ 23 ]  := 3
               end
            else
               aTmp[ 33 ]     := .F.
               aTmp[ 23 ]     := ( D():Articulos( nView ) )->nCtlStock
            end



            aTmp[ 18 ]        := ( D():Articulos( nView ) )->cCodPrp1
            aTmp[ 19 ]        := ( D():Articulos( nView ) )->cCodPrp2

            if ( !empty( aTmp[ 18 ] ) .OR. !empty( aTmp[ 19 ] ) ) .AND. ( uFieldEmpresa( "lUseTbl" ) .AND. ( nMode == 1 ) )

               nPreCom              := nCosto( nil, D():Articulos( nView ), D():Kit( nView ), .F., aTmpPed[ 29 ], D():Divisas( nView ) )

               setPropertiesTable( cCodArt, aTmp[ 18 ], aTmp[ 19 ], aGet[ 10 ], aGet[ 9 ], oBrwPrp, nView )

               if !Empty( oGetCelda )
                  oGetCelda:Show()
               end

            else

               hidePropertiesTable( oBrwPrp )

               if !empty( aTmp[ 18 ] )

                  if aGet[ 20 ] <> nil
                     aGet[ 20 ]:Show()
                     aGet[ 20 ]:SetFocus()
                  end

                  if oSayPr1 <> nil
                     oSayPr1:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp1, D():Propiedades( nView ) ) )
                     oSayPr1:Show()
                  end

                  if oSayVp1 <> nil
                     oSayVp1:Show()
                  end

               else

                  if aGet[ 20 ] <>  nil
                     aGet[ 20 ]:Hide()
                  end

                  if oSayPr1 <> nil
                     oSayPr1:Hide()
                  end

                  if oSayVp1 <> nil
                     oSayVp1:Hide()
                  end

               end

               if !empty( aTmp[ 19 ] )

                  if aGet[ 21 ] <> nil
                     aGet[ 21 ]:show()
                  end

                  if oSayPr2 <> nil
                     oSayPr2:SetText( retProp( ( D():Articulos( nView ) )->cCodPrp2, D():Propiedades( nView ) ) )
                     oSayPr2:Show()
                  end

                  if oSayVp2 <> nil
                     oSayVp2:Show()
                  end

               else

                  if aGet[ 21 ] <> nil
                     aGet[ 21 ]:Hide()
                  end

                  if oSayPr2 <> nil
                     oSayPr2:Hide()
                  end

                  if oSayVp2 <> nil
                     oSayVp2:Hide()
                  end

               end

            end



            nPreCom           := nComPro( aTmp[ 4 ], aTmp[ 18 ], aTmp[ 20 ], aTmp[ 19 ], aTmp[ 21 ], D():ArticuloPrecioPropiedades( nView ) )

            if nPrecom  <> 0

               aGet[ 10 ]:cText( nPreCom )

            else

               if uFieldEmpresa( "lCosPrv", .F. )
                  nPreCom     := nPrecioReferenciaProveedor( cCodPrv, cCodArt, D():ProveedorArticulo( nView ) )
               end

               if nPreCom <> 0
                  aGet[ 10 ]:cText( nPreCom )
               else
                  aGet[ 10 ]:cText( nCosto( nil, D():Articulos( nView ), D():Kit( nView ), .F., aTmpPed[ 29 ], D():Divisas( nView ) ) )
               end



               if uFieldEmpresa( "lCosPrv", .F. )

                  nPreCom     := nDescuentoReferenciaProveedor( cCodPrv, cCodArt, D():ProveedorArticulo( nView ) )
                  if nPreCom <> 0
                     aGet[ 15 ]:cText( nPreCom )
                  end



                  nPreCom     := nPromocionReferenciaProveedor( cCodPrv, cCodArt, D():ProveedorArticulo( nView ) )
                  if nPreCom <> 0
                     aGet[ 16 ]:cText( nPreCom )
                  end

               end

            end



            cCodFam              := ( D():Articulos( nView ) )->Familia
            if !empty( cCodFam )
               aTmp[ 39 ]  := cCodFam
               aTmp[ 40 ]  := cGruFam( cCodFam, D():Familias( nView ) )
            end



            aTmp[ 44  ]    := ( D():Articulos( nView ) )->PvpRec



            if oGetStk <> nil .AND. aTmp[ 23 ] <= 1
               StocksModel():lPutStockActual( cCodArt, aTmp[ 24 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ], oGetStk )
            end

            if !empty( aGet[ 13 ] )
                aGet[ 13 ]:cText( ( D():Articulos( nView ) )->cUnidad )
                aGet[ 13 ]:lValid()
            else
                aTmp[ 13 ]    := ( D():Articulos( nView ) )->cUnidad
            end

            ValidaMedicion( aTmp, aGet )

         end

      else

         msgStop( "Artículo no encontrado" )

         Return .F.

      end

   end

   cOldCodArt        := cCodArt
   cOldPrpArt        := cPrpArt

Return .T.



STATIC FUNCTION GetArtPrv( cRefPrv, cCodPrv, aGet )

    local nOrdAnt

   if empty( cRefPrv )
      Return .T.
   end

   nOrdAnt  := ( D():ProveedorArticulo( nView ) )->( ordSetFocus( "cRefPrv" ) )

   if ( D():ProveedorArticulo( nView ) )->( dbSeek( cCodPrv + cRefPrv ) )
      aGet[ 4 ]:cText( ( D():ProveedorArticulo( nView ) )->cCodArt )
        aGet[ 4 ]:lValid()
   else
      msgStop( "Referencia de proveedor no encontrada" )
   end

    ( D():ProveedorArticulo( nView ) )->( ordSetFocus( nOrdAnt ) )

Return .T.



STATIC FUNCTION SaveDeta( aTmp, aGet, oBrwPrp, oFld, oDlg, oBrw, nMode, oTotal, oGet, aTmpPed, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetStk, oSayLote, oBtn )

   local n, i

   if !lMoreIva( aTmp[ 7 ] )
      Return nil
   end

   if empty( aTmp[ 24 ] ) .AND. !empty( aTmp[ 4 ] )
      msgStop( "Código de almacén no puede estar vacío", "Atención" )
      Return nil
   end

   if !cAlmacen( aGet[ 24 ] )
      Return nil
   end





   aTmp[ 68 ]  := cTipoCtrCoste

   if nMode == 1

      if aTmp[ 25 ]
         saveLoteActual( aTmp[ 4 ], aTmp[ 27 ], nView )
      end

      if !empty( oBrwPrp:Cargo )

         for n := 1 to len( oBrwPrp:Cargo )

            for i := 1 to len( oBrwPrp:Cargo[ n ] )

               if !Empty( oBrwPrp:Cargo[ n, i ] )

                  if oBrwPrp:Cargo[ n, i ]:Value <> nil .AND. oBrwPrp:Cargo[ n, i ]:Value <> 0

                     aTmp[ 28 ]     := nLastNum( dbfTmpLin )
                     aTmp[ 66 ]   := nLastNum( dbfTmpLin, "nPosPrint" )
                     aTmp[ 9]     := oBrwPrp:Cargo[ n, i ]:Value
                     aTmp[ 18 ]     := oBrwPrp:Cargo[ n, i ]:cCodigoPropiedad1
                     aTmp[ 20 ]     := oBrwPrp:Cargo[ n, i ]:cValorPropiedad1
                     aTmp[ 19 ]     := oBrwPrp:Cargo[ n, i ]:cCodigoPropiedad2
                     aTmp[ 21 ]     := oBrwPrp:Cargo[ n, i ]:cValorPropiedad2

                     if isNum( oBrwPrp:Cargo[ n, i ]:nPrecioCompra ) .AND. ( oBrwPrp:Cargo[ n, i ]:nPrecioCompra <> 0 )
                        aTmp[ 10 ]  := oBrwPrp:Cargo[ n, i ]:nPrecioCompra
                     end

                     winGather( aTmp, aGet, dbfTmpLin, oBrw, nMode, nil, .F. )

                  end

               end

            next

         next

         aCopy( dbBlankRec( dbfTmpLin ), aTmp )

         aEval( aGet, {| o, i | if( "GET" $ o:ClassName(), o:cText( aTmp[ i ] ), ) } )

      else

         WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

      end

      if lEntCon()





         SetDlgMode( aGet, aTmp, aTmpPed, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayLote, oBrwPrp, oFld, oDlg, oTotal, oGetStk )

         nTotPedPrv( nil, D():PedidosProveedores( nView ), dbfTmpLin, D():TiposIva( nView ), D():Divisas( nView ), aTmpPed )

      else

         oDlg:end( 1 )

      end

   else

      WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

      oDlg:end( 1 )

   end

   runScript( "PedidosProveedores\Lineas\afterSaveLine.prg", nView, nMode, aTmpPed, dbfTmpLin )

   if nMode == 1
      D():CamposExtraLine( nView ):SaveTemporalAppend( ( dbfTmpLin )->( OrdKeyNo() ) )
   end

   aTmp[ 35 ]                 := ""
   cOldCodArt                       := ""
   cOldUndMed                       := ""

   if !empty( aGet[ 13 ] )
      aGet[ 13 ]:lValid()
   end

   if !empty( oBrwPrp )
      oBrwPrp:Cargo                 := nil
   end

   if oGet <> nil
      oGet:cText( Space( 14 ) )
      oGet:SetFocus()
   end

   if oGetStk <> nil
      oGetStk:cText( 0 )
   end

Return nil



STATIC FUNCTION lMoreIva( nCodIva )





    IF aTotIva[ 1, 3 ] == NIL .OR. aTotIva[ 2, 3 ] == NIL .OR. aTotIva[ 3, 3 ] == NIL
        RETURN .T.
    end

    IF aTotIva[ 1, 3 ] == nCodIva .OR. aTotIva[ 2, 3 ] == nCodIva .OR. aTotIva[ 3, 3 ] == nCodIva
        RETURN .T.
    end

   MsgStop( "Pedido con mas de 3 tipos de " + cImp(), "Imposible añadir" )

Return .F.



STATIC FUNCTION PrnSerie( oBrw )

   local oDlg
   local oFmtDoc
   local cFmtDoc     := cFormatoDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) )
   local oSayFmt
   local cSayFmt
   local oSerIni
   local oSerFin
   local cSerIni     := ( D():PedidosProveedores( nView ) )->cSerPed
   local cSerFin     := ( D():PedidosProveedores( nView ) )->cSerPed
   local nDocIni     := ( D():PedidosProveedores( nView ) )->nNumPed
   local nDocFin     := ( D():PedidosProveedores( nView ) )->nNumPed
   local cSufIni     := ( D():PedidosProveedores( nView ) )->cSufPed
   local cSufFin     := ( D():PedidosProveedores( nView ) )->cSufPed
   local oPrinter
   local cPrinter    := ImpresoraDefectoUsuario()
   local lCopiasPre  := .T.
   local lInvOrden   := .F.
   local oNumCop
   local nNumCop     := if( nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) )
   local oRango
   local nRango      := 1
   local dFecDesde   := CtoD( "01/01/" + Str( Year( Date() ) ) )
   local dFecHasta   := Date()

   if empty( cFmtDoc )
      cFmtDoc        := cSelPrimerDoc( "PP" )
   end

   cSayFmt           := cNombreDoc( cFmtDoc )

   oDlg = TDialog():New(,,,, "Imprimir series de pedidos", "IMPSERIES",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



   oRango := TRadMenu():Redefine( { | u | If( PCount()==0, nRango, nRango:= u ) }, oDlg,, { 201, 202 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z"  )},,,,,, .T., {||     ( nRango == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRango == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRango == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, dFecDesde, dFecDesde:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, dFecHasta, dFecHasta:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRango == 2 )},, .F., .T.,,,,,, nil,,, )



   TCheckBox():ReDefine( 500, { | u | If( PCount()==0, lInvOrden, lInvOrden:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 170, { | u | If( PCount()==0, lCopiasPre, lCopiasPre:= u ) }, oDlg,,,,,,, .F.,, .F. )









   oNumCop := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, nNumCop, nNumCop:= u ) }, oDlg,, "999999999", {||    nNumCop > 0},,,,,, .F., {||     !lCopiasPre},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )







   oFmtDoc := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cFmtDoc, cFmtDoc:= u ) }, oDlg,,, {||    ( cDocumento( oFmtDoc, oSayFmt, D():Documentos( nView ) ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oFmtDoc, oSayFmt, "PP" ) )}, nil, "LUPA",, )





   oSayFmt := TGetHlp():ReDefine( 91, { | u | If( PCount()==0, cSayFmt, cSayFmt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 92, "gc_document_text_pencil_12",,,,,{|| EdtDocumento( cFmtDoc ) }, oDlg, .F., , .F.,  )




   oPrinter := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cPrinter, cPrinter:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 161, "gc_printer2_check_16",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .F., , .F.,  )





   TButton():ReDefine( 1, {||(  StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( 1 ) } )

   oDlg:bStart := { || oSerIni:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBrw:refresh()

RETURN NIL



STATIC FUNCTION StartPrint( cFmtDoc, cDocIni, cDocFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta )

   local nCopyProvee
   local nRecno
   local nOrdAnt

   oDlg:disable()

   if nRango == 1

      nRecno            := ( D():PedidosProveedores( nView ) )->( Recno() )
      nOrdAnt           := ( D():PedidosProveedores( nView ) )->( OrdSetFocus( "NNUMPED" ) )

      if !lInvOrden

            ( D():PedidosProveedores( nView ) )->( dbSeek( cDocIni, .T. ) )


            while ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed >= cDocIni .AND.  ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed <= cDocFin

                  lChgImpDoc( D():PedidosProveedores( nView ) )

            if lCopiasPre

                  nCopyProvee := if( nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) )

                  GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nCopyProvee )

            else

                  GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nNumCop )

            end

            ( D():PedidosProveedores( nView ) )->( dbSkip() )

            end

      else

      ( D():PedidosProveedores( nView ) )->( dbSeek( cDocFin ) )



         while ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed >= cDocIni .AND. ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed <= cDocFin .AND. !( D():PedidosProveedores( nView ) )->( Bof() )

               lChgImpDoc( D():PedidosProveedores( nView ) )

         if lCopiasPre

               nCopyProvee := if( nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) )

               GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nCopyProvee )

         else

               GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nNumCop )

         end

         ( D():PedidosProveedores( nView ) )->( dbSkip( -1 ) )

         end

      end

   else

      nRecno            := ( D():PedidosProveedores( nView ) )->( Recno() )
      nOrdAnt           := ( D():PedidosProveedores( nView ) )->( OrdSetFocus( "DFECPED" ) )

      if !lInvOrden

            ( D():PedidosProveedores( nView ) )->( dbGoTop() )

            while !( D():PedidosProveedores( nView ) )->( Eof() )

               if ( D():PedidosProveedores( nView ) )->dFecPed >= dFecDesde .AND. ( D():PedidosProveedores( nView ) )->dFecPed <= dFecHasta

                  lChgImpDoc( D():PedidosProveedores( nView ) )

                  if lCopiasPre

                        nCopyProvee := if( nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) )

                        GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nCopyProvee )

                  else

                        GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nNumCop )

                  end

               end

            ( D():PedidosProveedores( nView ) )->( dbSkip() )

            end

      else

         ( D():PedidosProveedores( nView ) )->( dbGoBottom() )

         while !( D():PedidosProveedores( nView ) )->( Bof() )

            if ( D():PedidosProveedores( nView ) )->dFecPed >= dFecDesde .AND. ( D():PedidosProveedores( nView ) )->dFecPed <= dFecHasta

               lChgImpDoc( D():PedidosProveedores( nView ) )

               if lCopiasPre

                  nCopyProvee := if( nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) )

                  GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nCopyProvee )

               else

                  GenPedPrv( 1, "Imprimiendo documento : " + ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + (D():PedidosProveedores( nView ))->cSufPed, cFmtDoc, cPrinter, nNumCop )

               end

            end

         ( D():PedidosProveedores( nView ) )->( dbSkip( -1 ) )

         end

      end

   end

   ( D():PedidosProveedores( nView ) )->( ordSetFocus( nOrdAnt ) )
   ( D():PedidosProveedores( nView ) )->( dbGoTo( nRecNo ) )

   oDlg:enable()

RETURN NIL



FUNCTION GenPedPrv( nDevice, cCaption, cCodDoc, cPrinter, nCopies )

   local oInf
   local oDevice
   local nPedido

   if ( D():PedidosProveedores( nView ) )->( Lastrec() ) == 0
      return nil
   end

   nPedido              := ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed

   If( nDevice == nil, nDevice := 1, ) ;
   If( cCaption == nil, cCaption := "Imprimiendo pedido", ) ;
   If( cCodDoc == nil, cCodDoc := cFormatoDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ), ) ;
   If( nCopies == nil, nCopies := if( nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) == 0, Max( Retfld( ( D():PedidosProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "nCopiasF" ), 1 ), nCopiasDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) ) ), ) ;

   if empty( cCodDoc )
      cCodDoc           := cFirstDoc( "PP", D():Documentos( nView ) )
   end

   if !lExisteDocumento( cCodDoc, D():Documentos( nView ) )
      return nil
   end





   if lVisualDocumento( cCodDoc, D():Documentos( nView ) )
      PrintReportPedPrv( nDevice, nCopies, cPrinter, cCodDoc )
   else
      msgStop( "El formato ya no es soportado" )
   end

   lChgImpDoc( D():PedidosProveedores( nView ) )

RETURN NIL



STATIC FUNCTION EPage( oInf, cCodDoc )

   private nPagina      := oInf:nPage
    private lEnd            := oInf:lFinish

   PrintItems( cCodDoc, oInf )

RETURN NIL



Static Function RecalculaTotal( aTmp )

   nTotPedPrv( nil, D():PedidosProveedores( nView ), dbfTmpLin, D():TiposIva( nView ), D():Divisas( nView ), aTmp )

   oBrwIva:Refresh()

   oGetNet:SetText( Trans( nTotNet, cPirDiv ) )

   oGetIva:SetText( Trans( nTotIva, cPirDiv ) )

   oGetIvm:SetText( Trans( nTotIvm, cPirDiv ) )

   oGetReq:SetText( Trans( nTotReq, cPirDiv ) )

   oGetTotal:SetText( Trans( nTotPed, cPirDiv ) )

Return .T.







STATIC FUNCTION LoaPrv( aGet, aTmp, dbf, nMode, oSay, oTlfPrv )

   local lValid      := .F.
   local cNewCodCli  := aGet[ 6 ]:VarGet()
   local lChgCodCli  := ( empty( cOldCodCli ) .OR. cOldCodCli <> cNewCodCli )

   if empty( cNewCodCli )
      Return .T.
   elseif At( ".", cNewCodCli ) <> 0
      cNewCodCli     := PntReplace( aGet[ 6 ], "0", RetNumCodPrvEmp() )
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodPrvEmp() )
   end

   if ( D():Proveedores( nView ) )->( dbSeek( cNewCodCli ) )

      if ( D():Proveedores( nView ) )->lBlqPrv
         msgStop( "Proveedor bloqueado, no se pueden realizar operaciones de compra" )
         return .F.
      end

      aGet[ 6 ]:cText( ( D():Proveedores( nView ) )->Cod )

      if empty( aGet[ 9 ]:varGet() ) .OR. lChgCodCli
         aGet[ 9 ]:cText( ( D():Proveedores( nView ) )->Titulo )
      end

      if oTlfPrv <> nil
         oTlfPrv:SetText( ( D():Proveedores( nView ) )->Telefono )
      end

      if empty( aGet[ 10 ]:varGet() ) .OR. lChgCodCli
         aGet[ 10 ]:cText( ( D():Proveedores( nView ) )->Domicilio )
      endif

      if empty( aGet[ 11 ]:varGet() ) .OR. lChgCodCli
         aGet[ 11 ]:cText( ( D():Proveedores( nView ) )->Poblacion )
      endif

      if empty( aGet[ 12 ]:varGet() ) .OR. lChgCodCli
         aGet[ 12 ]:cText( ( D():Proveedores( nView ) )->Provincia )
      endif

      if empty( aGet[ 13 ]:varGet() ) .OR. lChgCodCli
         aGet[ 13 ]:cText( ( D():Proveedores( nView ) )->CodPostal )
      endif

      if empty( aGet[ 14 ]:varGet() ) .OR. lChgCodCli
         aGet[ 14 ]:cText( ( D():Proveedores( nView ) )->Nif )
      endif





      if lChgCodCli
         aGet[ 21 ]:cText( ( D():Proveedores( nView ) )->cDtoEsp )
         aGet[ 22 ]:cText( ( D():Proveedores( nView ) )->nDtoEsp )
         aGet[ 23    ]:cText( ( D():Proveedores( nView ) )->cDtoPp  )
         aGet[ 24    ]:cText( ( D():Proveedores( nView ) )->DtoPp   )
      end

      if empty( aGet[ 18 ]:VarGet() )
         aGet[ 18 ]:cText( ( D():Proveedores( nView ) )->fPago )
         aGet[ 18 ]:lValid()
      end





      if lChgCodCli
         if ( D():Proveedores( nView ) )->nPlzEnt <> 0
            aGet[ 15 ]:cText( GetSysDate() + ( D():Proveedores( nView ) )->nPlzEnt )
         else
            aGet[ 15 ]:cText( Ctod( "" ) )
         end
      end

      if nMode == 1

         aGet[ 46 ]:nOption( Max( ( D():Proveedores( nView ) )->nRegIva, 1 ) )
         aGet[ 46 ]:Refresh()

         if empty( aTmp[ 1 ] )

            if !empty( ( D():Proveedores( nView ) )->Serie )
               aGet[ 1 ]:cText( ( D():Proveedores( nView ) )->Serie )
            end

         else

            if !empty( ( D():Proveedores( nView ) )->Serie ) .AND. aTmp[ 1 ] <> ( D():Proveedores( nView ) )->Serie .AND. ApoloMsgNoYes( "La serie del proveedor seleccionado es distinta a la anterior.", "¿Desea cambiar la serie?" )
               aGet[ 1 ]:cText( ( D():Proveedores( nView ) )->Serie )
            end

         end

      end

      if lChgCodCli
         aTmp[ 25 ] := ( D():Proveedores( nView ) )->lReq
         aGet[ 25 ]:Refresh()
      end

      if ( D():Proveedores( nView ) )->lMosCom .AND. !empty( ( D():Proveedores( nView ) )->mComent ) .AND. lChgCodCli
         MsgStop( AllTrim( ( D():Proveedores( nView ) )->mComent ) )
      end

      cOldCodCli     := ( D():Proveedores( nView ) )->Cod

      lValid         := .T.

   else

        msgStop( "Proveedor no encontrado" )

   end

RETURN lValid







STATIC FUNCTION lCalcDeta( aTmp, oTotal )

   local nCalculo := nTotUPedPrv( aTmp, nDinDiv )

    IF aTmp[ 15 ] <> 0
      nCalculo    -= nCalculo * aTmp[ 15 ] / 100
    end

   IF aTmp[ 16 ] <> 0
        nCalculo     -= nCalculo * aTmp[ 16 ] / 100
    end

   nCalculo       *= nTotNPedPrv( aTmp )

   nCalculo       := Round( nCalculo, nDinDiv )

    oTotal:cText( nCalculo )

RETURN .T.



STATIC FUNCTION BeginTrans( aTmp, nMode )

   local lErrors     := .F.
   local cDbfLin     := "PProL"
   local cDbfInc     := "PProI"
   local cDbfDoc     := "PProD"
   local nPedido     := aTmp[ 1 ] +  Str( aTmp[ 2 ] ) + aTmp[ 3 ]
   local oError
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      tmpPedidosLineas        := cGetNewFileName( cPatTmp() + cDbfLin )
      tmpPedidosIncidencias   := cGetNewFileName( cPatTmp() + cDbfInc )
      tmpPedidosDocumentos    := cGetNewFileName( cPatTmp() + cDbfDoc )





      dbCreate( tmpPedidosLineas, aSqlStruct( aColPedPrv() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), tmpPedidosLineas, cCheckArea( cDbfLin, @dbfTmpLin ), .F. )

      if !( dbfTmpLin )->( neterr() )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( tmpPedidosLineas, "nNumLin", "Str( nNumLin, 4 )", {|| Str( Field->nNumLin, 4 ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( tmpPedidosLineas, "cRef", "cRef", {|| Field->cRef } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( tmpPedidosLineas, "cDetalle", "Left( cDetalle, 100 )", {|| Left( Field->cDetalle, 100 ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( tmpPedidosLineas, "nUniCaja", "nUniCaja", {|| Field->nUniCaja } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( tmpPedidosLineas, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( tmpPedidosLineas, "cRefPrv", "cRefPrv", {|| Field->cRefPrv } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( tmpPedidosLineas, "nPosPrint", "Str( nPosPrint, 4 )", {|| Str( Field->nPosPrint ) } ) )

      end





      dbCreate( tmpPedidosIncidencias, aSqlStruct( aIncPedPrv() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), tmpPedidosIncidencias, cCheckArea( cDbfInc, @dbfTmpInc ), .F. )

      if !( dbfTmpInc )->( neterr() )
         ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpInc )->( ordCreate( tmpPedidosIncidencias, "Recno", "Recno()", {|| Recno() } ) )
      end





      dbCreate( tmpPedidosDocumentos, aSqlStruct( aPedPrvDoc() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), tmpPedidosDocumentos, cCheckArea( cDbfDoc, @dbfTmpDoc ), .F. )
      if !( dbfTmpDoc )->( neterr() )
         ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpDoc )->( ordCreate( tmpPedidosDocumentos, "Recno", "Recno()", {|| Recno() } ) )
      end





      D():CamposExtraLine( nView ):initArrayValue()

      if ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( nPedido ) )

         while ( ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed == nPedido .AND. ( D():PedidosProveedoresLineas( nView ) )->( !eof() ) )

            dbPass( D():PedidosProveedoresLineas( nView ), dbfTmpLin, .T. )

            D():CamposExtraLine( nView ):SetTemporalLines( ( dbfTmpLin )->cSerPed + str( ( dbfTmpLin )->nNumPed ) + ( dbfTmpLin )->cSufPed + str( ( dbfTmpLin )->nNumLin ), ( dbfTmpLin )->( OrdKeyNo() ), nMode )

            ( D():PedidosProveedoresLineas( nView ) )->( dbSkip() )

         end

      end

      ( dbfTmpLin )->( dbgotop() )





      if ( nMode <> 4 ) .AND. ( D():PedidosProveedoresIncidencias( nView ) )->( dbSeek( nPedido ) )

         while ( ( D():PedidosProveedoresIncidencias( nView ) )->cSerPed + Str( ( D():PedidosProveedoresIncidencias( nView ) )->nNumPed ) + ( D():PedidosProveedoresIncidencias( nView ) )->cSufPed == nPedido ) .AND. ( D():PedidosProveedoresIncidencias( nView ) )->( !eof() )

            dbPass( D():PedidosProveedoresIncidencias( nView ), dbfTmpInc, .T. )

            ( D():PedidosProveedoresIncidencias( nView ) )->( dbSkip() )

         end

      end

      ( dbfTmpInc )->( dbgotop() )





      if ( nMode <> 4 ) .AND. ( D():PedidosProveedoresDocumentos( nView ) )->( dbSeek( nPedido ) )

         while ( ( D():PedidosProveedoresDocumentos( nView ) )->cSerPed + Str( ( D():PedidosProveedoresDocumentos( nView ) )->nNumPed ) + ( D():PedidosProveedoresDocumentos( nView ) )->cSufPed == nPedido ) .AND. ( D():PedidosProveedoresDocumentos( nView ) )->( !eof() )

            dbPass( D():PedidosProveedoresDocumentos( nView ), dbfTmpDoc, .T. )

            ( D():PedidosProveedoresDocumentos( nView ) )->( dbSkip() )

         end

      end

      ( dbfTmpDoc )->( dbgotop() )





      D():CamposExtraHeader( nView ):SetTemporal( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], "", nMode )

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

RETURN ( lErrors )



STATIC FUNCTION EndTrans( aGet, aTmp, oBrw, nMode, oDlg )

   local oError
   local oBlock
   local aTabla
   local cSerie
   local nPedido
   local cSufijo
   local nNumLin
   local cNumPedCli

   if empty( aTmp[ 1 ] )
      aTmp[ 1 ]  := "A"
   end



   if !lValidaOperacion( aTmp[ 5 ] )
      Return .F.
   end

   if !lValidaSerie( aTmp[ 1 ] )
      Return .F.
   end



   if empty( aTmp[ 6 ] )
      msgStop( "Proveedor no puede estar vacío." )
      aGet[ 6 ]:SetFocus()
      return .F.
   end

   if empty( aTmp[ 7 ] )
      msgStop( "Almacen no puede estar vacío." )
      aGet[ 7 ]:SetFocus()
      return .F.
   end

   if empty( aTmp[ 8 ] )
      msgStop( "Caja no puede estar vacía." )
      aGet[ 8 ]:SetFocus()
      return .F.
   end

   if ( dbfTmpLin )->( eof() )
      MsgStop( "No puede almacenar un documento sin líneas." )
      return .F.
   end

   oDlg:Disable()

   oMsgText( "Archivando" )



   nNumLin              := 1

   cSerie               := aTmp[ 1 ]
   nPedido              := aTmp[ 2 ]
   cSufijo              := aTmp[ 3 ]
   cNumPedCli           := aTmp[ 38 ]

   aTmp[ 42 ]     := getSysDate()
   aTmp[ 43 ]     := time()
   aTmp[ 47 ]     := nTotNet
   aTmp[ 48 ]     := nTotIva
   aTmp[ 49 ]     := nTotReq
   aTmp[ 50 ]     := nTotPed



   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   beginTransaction()

   do case
   case isAppendOrDuplicateMode( nMode )

      oMsgText( "Obteniendo nuevo número" )

      nPedido           := aTmp[ 2 ]  := nNewDoc( cSerie, D():PedidosProveedores( nView ), "nPedPrv", , D():Contadores( nView ) )
      cSufijo           := aTmp[ 3 ]  := retSufEmp()

   case isEditMode( nMode ) .AND. ( nPedido <> 0 )

      oMsgText( "Eliminando registros anteriores" )



      while ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( cSerie + Str( nPedido ) + cSufijo ) ) .AND. !( D():PedidosProveedoresLineas( nView ) )->( eof() )

         if dbLock( D():PedidosProveedoresLineas( nView ) )
            ( D():PedidosProveedoresLineas( nView ) )->( dbDelete() )
            ( D():PedidosProveedoresLineas( nView ) )->( dbUnLock() )
         end

         SysRefresh()

      end



      PedidosProveedoresModel():deleteIncidenciasById( cSerie, nPedido, cSufijo )



      PedidosProveedoresModel():deleteDocumentosById( cSerie, nPedido, cSufijo )

   end



   ( dbfTmpLin )->( dbClearFilter() )

   oMsgText( "Escribiendo lineas de pedidos" )

   oMsgProgress():SetRange( 0, ( dbfTmpLin )->( LastRec() ) )



   ( dbfTmpLin )->( dbgotop() )
   while !( dbfTmpLin )->( eof() )

      if !( ( dbfTmpLin )->nUniCaja == 0 .AND. ( dbfTmpLin )->lFromImp )

         dbPass( dbfTmpLin, D():PedidosProveedoresLineas( nView ), .T., cSerie, nPedido, cSufijo )

      end

      D():CamposExtraLine( nView ):saveExtraField( cSerie + Str( nPedido ) + cSufijo + Str( ( dbfTmpLin )->nNumLin ), ( dbfTmpLin )->( ordkeyno() ) )

      ( dbfTmpLin )->( dbSkip() )

      oMsgProgress():Deltapos(1)

   end



   oMsgText( "Escribiendo incidencias de pedidos" )

   oMsgProgress():SetRange( 0, ( dbfTmpInc )->( LastRec() ) )

   ( dbfTmpInc )->( dbGoTop() )
   while ( dbfTmpInc )->( !eof() )

      dbPass( dbfTmpInc, D():PedidosProveedoresIncidencias( nView ), .T., cSerie, nPedido, cSufijo )

      ( dbfTmpInc )->( dbSkip() )

      oMsgProgress():Deltapos(1)

   end



   oMsgText( "Escribiendo documentos de pedidos" )

   oMsgProgress():SetRange( 0, ( dbfTmpDoc )->( LastRec() ) )

   ( dbfTmpDoc )->( dbGoTop() )
   while ( dbfTmpDoc )->( !eof() )

      dbPass( dbfTmpDoc, D():PedidosProveedoresDocumentos( nView ), .T., cSerie, nPedido, cSufijo )

      ( dbfTmpDoc )->( dbSkip() )

      oMsgProgress():Deltapos(1)

   end



   oMsgText( "Escribiendo campos extras de pedidos" )

   D():CamposExtraHeader( nView ):saveExtraField( cSerie + str( nPedido ) + cSufijo, "", nMode )



   oMsgText( "Escribiendo pedido" )

   WinGather( aTmp, , D():PedidosProveedores( nView ), oBrw, nMode )



   oMsgText( "Actualizando estado del pedido" )

   D():Stocks( nView ):SetPedPrv( cSerie + str( nPedido ) + cSufijo )

   dbCommitAll()

   CommitTransaction()

   RECOVER USING oError
      RollBackTransaction()
      msgStop( "Imposible almacenar pedido" + Chr(13)+Chr(10) + ErrorMessage( oError ) )
   end
   ErrorBlock( oBlock )

   oMsgText()
   endProgress()

   oDlg:Enable()

   runEventScript( "PedidosProveedores\AfterSave", nView, cSerie, nPedido, cSufijo, nMode )

   oDlg:End( 1 )

Return .T.



STATIC FUNCTION KillTrans( oBrwLin )





   if !empty( dbfTmpLin ) .AND. ( dbfTmpLin )->( Used() )
      ( dbfTmpLin )->( dbCloseArea() )
   end

   if !empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )
      ( dbfTmpInc )->( dbCloseArea() )
   end

   if !empty( dbfTmpDoc ) .AND. ( dbfTmpDoc )->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end

   dbfErase( tmpPedidosLineas )
   dbfErase( tmpPedidosIncidencias )
   dbfErase( tmpPedidosDocumentos )





   if oBrwLin <> nil
      oBrwLin:CloseData()
   end

RETURN .T.



STATIC FUNCTION CreateFiles( cPath )

   if !lExistTable( cPath + "PedProvT.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedProvT.Dbf", aSqlStruct( aItmPedPrv() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedProvL.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedProvL.Dbf", aSqlStruct( aColPedPrv() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedPrvI.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedPrvI.Dbf", aSqlStruct( aIncPedPrv() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "PedPrvD.Dbf", cLocalDriver() )
      dbCreate( cPath + "PedPrvD.Dbf", aSqlStruct( aPedPrvDoc() ), cLocalDriver() )
   end

RETURN NIL






STATIC FUNCTION ChgState( oBrw )

   local nRec
   local nRecAlb
   local nOrdAlb
   local cNumPed
   local lQuit
   local nTotRec
   local nTotUni

   CursorWait()

   SysRefresh()

   if apoloMsgNoYes( "Al cambiar el estado perderá la referencia a cualquier documento que esté asociado.", "¿Desea cambiarlo?" )





      for each nRec in ( oBrw:aSelected )

         ( D():PedidosProveedores( nView ) )->( dbGoTo( nRec ) )

         lQuit                         := .F.

         cNumPed                       := ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView )  )->cSufPed





         if dbLock( D():PedidosProveedores( nView ) )

            if ( D():PedidosProveedores( nView ) )->nEstado == 1
               ( D():PedidosProveedores( nView ) )->nEstado := 3
            else
               lQuit                   := .T.
               ( D():PedidosProveedores( nView ) )->nEstado := 1
               ( D():PedidosProveedores( nView ) )->cNumAlb := ""
            end

            ( D():PedidosProveedores( nView ) )->( dbRUnlock() )

         end





         if ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( cNumPed ) )


            while ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView )  )->cSufPed == cNumPed .AND. !( D():PedidosProveedoresLineas( nView ) )->( Eof() )

               if dbLock( D():PedidosProveedoresLineas( nView ) )
                  ( D():PedidosProveedoresLineas( nView ) )->nEstado := ( D():PedidosProveedores( nView ) )->nEstado
                  ( D():PedidosProveedoresLineas( nView ) )->( dbRUnlock() )
               end











               nTotRec           := AlbaranesProveedoresLineasModel():nUnidadesRecibidas( ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed, ( D():PedidosProveedoresLineas( nView ) )->cRef, ( D():PedidosProveedoresLineas( nView ) )->cCodPr1, ( D():PedidosProveedoresLineas( nView ) )->cCodPr2, ( D():PedidosProveedoresLineas( nView ) )->cValPr1, ( D():PedidosProveedoresLineas( nView ) )->cValPr2, ( D():PedidosProveedoresLineas( nView ) )->cLote )

               nTotUni           := nTotNPedPrv( D():PedidosProveedoresLineas( nView ) )

               ( D():PedidosProveedoresLineas( nView ) )->( dbSkip() )

            end

         end

         if lQuit





            nRecAlb  := ( D():AlbaranesProveedores( nView ) )->( RecNo() )
            nOrdAlb  := ( D():AlbaranesProveedores( nView ) )->( OrdSetFocus( "CNUMPED" ) )


            if ( D():AlbaranesProveedores( nView ) )->( dbSeek( cNumPed ) )

               while ( D():AlbaranesProveedores( nView ) )->cNumPed == cNumPed  .AND. !( D():AlbaranesProveedores( nView ) )->( Eof() )

                  if dbLock( D():AlbaranesProveedores( nView ) )
                     ( D():AlbaranesProveedores( nView ) )->cNumPed    := ""
                     ( D():AlbaranesProveedores( nView ) )->( dbUnLock() )
                  end

                  ( D():AlbaranesProveedores( nView ) )->( dbSkip() )

               end

            end

            ( D():AlbaranesProveedores( nView ) )->( OrdSetFocus( nOrdAlb ) )
            ( D():AlbaranesProveedores( nView ) )->( dbGoTo( nRecAlb ) )





            nRecAlb  := ( D():AlbaranesProveedoresLineas( nView ) )->( RecNo() )
            nOrdAlb  := ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( "cCodPed" ) )

            if ( D():AlbaranesProveedoresLineas( nView ) )->( dbSeek( cNumPed ) )

               while ( D():AlbaranesProveedoresLineas( nView ) )->cCodPed == cNumPed  .AND. !( D():AlbaranesProveedoresLineas( nView ) )->( Eof() )

                  if dbLock( D():AlbaranesProveedoresLineas( nView ) )
                     ( D():AlbaranesProveedoresLineas( nView ) )->cCodPed    := ""
                     ( D():AlbaranesProveedoresLineas( nView ) )->( dbUnLock() )
                  end

                  ( D():AlbaranesProveedoresLineas( nView ) )->( dbSkip() )

               end

            end

            ( D():AlbaranesProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAlb ) )
            ( D():AlbaranesProveedoresLineas( nView ) )->( dbGoTo( nRecAlb ) )

         end

      next

    end

    oBrw:Refresh()
    oBrw:SetFocus()

   CursorArrow()
   SysRefresh()

RETURN NIL



Static Function lNotOpen()

   if NetErr()
      msgStop( "Imposible abrir ficheros." )
      CloseFiles()
      return .T.
   end

return .F.



static function lGenPed( oBrw, oBtn, nDevice )

   local bAction

   If( nDevice == nil, nDevice := 1, ) ;

   if empty( oBtn )
      return nil
   end

   if !( D():Documentos( nView ) )->( dbSeek( "PP" ) )








      oWndBrw:NewAt( "gc_document_white_",,, {||( msgStop( "No hay pedidos de proveedores predefinidos" ) )}, "No hay documentos", "N",,, 4, oBtn, .F. )

   else

      while ( D():Documentos( nView ) )->cTipo == "PP" .AND. !( D():Documentos( nView ) )->( eof() )

         bAction  := bGenPed( nDevice, "Imprimiendo pedidos de proveedores", ( D():Documentos( nView ) )->CODIGO )

         oWndBrw:NewAt( "gc_document_white_", , , bAction, Rtrim( ( D():Documentos( nView ) )->cDescrip ) , , , , , oBtn )

         ( D():Documentos( nView ) )->( dbSkip() )

      end

   end

   SysRefresh()

return nil



static function bGenPed( nDevice, cTitle, cCodDoc )

   local bGen
   local nDev  := by( nDevice )
   local cTit  := by( cTitle    )
   local cCod  := by( cCodDoc   )

   if nDev == 1
      bGen     := {|| GenPedPrv( nDevice, cTit, cCod ) }
   else
      bGen     := {|| GenPedPrv( nDevice, cTit, cCod ) }
   end

return bGen



STATIC FUNCTION QuiPedPrv( lDetail )

   local cPedido

   If( lDetail == nil, lDetail := .T., ) ;

   if ( D():PedidosProveedores( nView ) )->lCloPed .AND. !oUser():lAdministrador()
      msgStop( "Solo puede eliminar los pedidos cerrados los administradores." )
      Return .F.
   end

   CursorWait()

   cPedido           := ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed

   if lDetail
      DelDetalle( cPedido )
   end





   if !empty( ( D():PedidosProveedores( nView ) )->cNumPedCli )
      D():Stocks( nView ):SetGeneradoPedCli( ( D():PedidosProveedores( nView ) )->cNumPedCli )
   end

   CursorWe()

Return ( .T. )



Static Function DelDetalle( cPedido )

   local nOrdAnt

   If( cPedido == nil, cPedido := ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed, ) ;

   CursorWait()

   nOrdAnt           := ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( "nNumPed" ) )

   while ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( cPedido ) ) .AND. !( D():PedidosProveedoresLineas( nView ) )->( eof() )

      if dbDialogLock( D():PedidosProveedoresLineas( nView ) )
         ( D():PedidosProveedoresLineas( nView ) )->( dbDelete() )
         ( D():PedidosProveedoresLineas( nView ) )->( dbUnLock() )
      end

   end

   ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAnt ) )

   while ( D():PedidosProveedoresIncidencias( nView ) )->( dbSeek( cPedido ) .AND. !( D():PedidosProveedoresIncidencias( nView ) )->( eof() ) )
      if dbLock( D():PedidosProveedoresIncidencias( nView ) )
         ( D():PedidosProveedoresIncidencias( nView ) )->( dbDelete() )
         ( D():PedidosProveedoresIncidencias( nView ) )->( dbUnLock() )
      end
   end

   while ( D():PedidosProveedoresDocumentos( nView ) )->( dbSeek( cPedido ) .AND. !( D():PedidosProveedoresDocumentos( nView ) )->( eof() ) )
      if dbLock( D():PedidosProveedoresDocumentos( nView ) )
         ( D():PedidosProveedoresDocumentos( nView ) )->( dbDelete() )
         ( D():PedidosProveedoresDocumentos( nView ) )->( dbUnLock() )
      end
   end

   CursorWe()

RETURN NIL



Static Function mSer2Mem( aNumSer, nTotUnd )

   local n
   local mNumSer     := ""

   for n := 1 to nTotUnd
      mNumSer        += AllTrim( aNumSer[ n ] ) + ","
   next

Return ( mNumSer )



static function CambiaAnulado( aGet, aTmp )

   if aTmp[36]

      aGet[ 37 ]:cText( GetSysDate() )
      aTmp[ 38 ]    := ""
      aTmp[ 56 ]    := 3

   else

      aGet[ 37 ]:cText( Ctod( "" ) )
      aTmp[ 38 ]    := ""
      aTmp[ 56 ]    := 1

   end

return .T.



Static Function TrazaPedidoProveedor( cNumDoc )

   local oDlg
   local oTree

   oDlg = TDialog():New(,,,,, "TrazaDocumentos",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

      oTree          := TTreeView():Redefine( 100, oDlg  )




      TButton():ReDefine( 560, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 561, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( InitTrazaPedidoProveedor( cNumDoc, oTree ) )}, oDlg:bRClicked,,, )

Return nil



Static Function InitTrazaPedidoProveedor( cNumDoc, oTree )

   local n
   local aDocumentsPedidoProveedor  := aDocumentsPedidoProveedor( cNumDoc )

   for n := 1 to len( aDocumentsPedidoProveedor )




      oTree:Add(  aDocumentsPedidoProveedor[ n, 1 ] + " / " +  aDocumentsPedidoProveedor[ n, 2 ] + " / " +  aDocumentsPedidoProveedor[ n, 3 ] + " / " +  aDocumentsPedidoProveedor[ n, 4 ] + " / " +  aDocumentsPedidoProveedor[ n, 5 ] )
   next

Return ( aDocumentsPedidoProveedor )



Static Function nEstadoIncidencia( cNumPed )

   local nEstado  := 0

   if ( D():PedidosProveedoresIncidencias( nView ) )->( dbSeek( cNumPed ) )

      while ( D():PedidosProveedoresIncidencias( nView ) )->cSerPed + Str( ( D():PedidosProveedoresIncidencias( nView ) )->nNumPed ) + ( D():PedidosProveedoresIncidencias( nView ) )->cSufPed == cNumPed .AND. !( D():PedidosProveedoresIncidencias( nView ) )->( Eof() )

         if ( D():PedidosProveedoresIncidencias( nView ) )->lListo
            do case
               case nEstado == 0 .OR. nEstado == 3
                    nEstado := 3
               case nEstado == 1
                    nEstado := 2
            end
         else
            do case
               case nEstado == 0
                    nEstado := 1
               case nEstado == 3
                    nEstado := 2
            end
         end

         ( D():PedidosProveedoresIncidencias( nView ) )->( dbSkip() )

      end

   end

Return ( nEstado )







Static Function BtnAnt( oPag, oBtnNxt, oBtnAnt )

   if oPag:nOption == 2





      ( dbfTmpArt )->( __dbZap() )
      oPag:GoPrev()
      SetWindowText( oBtnNxt:hWnd, "Siguien&te >" )

      oBtnAnt:Hide()

   end

RETURN ( .T. )






static function BtnNxt( oPag, oBtnNxt, oBtnAnt, oDlg, oProvee, cProvee, cArtOrg, cArtDes, nStockDis, nStockFin, oMtr, oBrw, cCodAlm )

   do case
      case oPag:nOption == 1





         if empty( cProvee )
            MsgStop( "Tiene que seleccionar un proveedor para generar el pedido" )
            oProvee:SetFocus()
            Return .F.
         end





         LlenaTemporal( cProvee, cArtOrg, cArtDes, nStockDis, nStockFin, cCodAlm, oMtr )

         oBrw:Refresh()

         oPag:GoNext()

         oBtnAnt:Show()

         SetWindowText( oBtnNxt:hWnd, "&Terminar" )

      case oPag:nOption == 2





         CreaPedido( cProvee, cCodAlm )





         KillTemporal()

         oDlg:end( 1 )

   end

RETURN ( .T. )






Static Function CreaTemporal()

   local cDbfArt  := "PArt"
   local cDbfPed  := "PPed"

   cTmpArt        := cGetNewFileName( cPatTmp() + cDbfArt )
   cTmpPed        := cGetNewFileName( cPatTmp() + cDbfPed )

   dbCreate( cTmpArt, aSqlStruct( aColTmpArt() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpArt, cCheckArea( cDbfArt, @dbfTmpArt ), .F. )
   if !( dbfTmpArt )->( neterr() )
      ( dbfTmpArt )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTmpArt )->( ordCreate( cTmpArt, "cRef", "cRef", {|| Field->cRef } ) )
   end

   dbCreate( cTmpPed, aSqlStruct( aColPedPrv() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpPed, cCheckArea( cDbfPed, @dbfTmpLin ), .F. )
   if !( dbfTmpLin )->( neterr() )
      ( dbfTmpLin )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTmpLin )->( ordCreate( cTmpPed, "cRef", "cRef", {|| Field->cRef } ) )
   end

Return nil






Static Function LlenaTemporal( cProvee, cArtOrg, cArtDes, nStockDis, nStockFin, cCodAlm, oMtr )

   local nStkFisico
   local nStkDisponible
   local nStkMinimo
   local nStkMaximo

   ( D():Articulos( nView ) )->( dbGoTop() )

   while !( D():Articulos( nView ) )->( Eof() )

      nStkFisico                    := StocksModel():nGlobalStockArticulo( ( D():Articulos( nView ) )->Codigo )
      nStkDisponible                := nStkFisico - nReservado( ( D():Articulos( nView ) )->Codigo )
      nStkMinimo                    := nStockMinimo( ( D():Articulos( nView ) )->Codigo, cCodAlm, nView )
      nStkMaximo                    := nStockMaximo( ( D():Articulos( nView ) )->Codigo, cCodAlm, nView )



      if ( D():Articulos( nView ) )->cPrvHab == cProvee .AND. ( D():Articulos( nView ) )->Codigo >= cArtOrg  .AND. ( D():Articulos( nView ) )->Codigo <= cArtDes

         do case
            case nStockDis == 1 .AND. nStkDisponible < 0

               AppTemporal( nStockFin, nStkFisico, nStkDisponible, nStkMinimo, nStkMaximo )

            case nStockDis == 2 .AND. nStkDisponible <= 0

               AppTemporal( nStockFin, nStkFisico, nStkDisponible, nStkMinimo, nStkMaximo )

            case nStockDis == 3 .AND. nStkDisponible < nStkMinimo

               AppTemporal( nStockFin, nStkFisico, nStkDisponible, nStkMinimo, nStkMaximo )

            otherwise

               AppTemporal( nStockFin, nStkFisico, nStkDisponible, nStkMinimo, nStkMaximo )

         end

      end

      ( D():Articulos( nView ) )->( dbSkip() )

      oMtr:Set( ( D():Articulos( nView ) )->( OrdKeyNo() ) )

   end

   oMtr:Set( 0 )

   ( dbfTmpArt )->( dbGoTop() )

Return nil






static function AppTemporal( nStockFin, nStkFisico, nStkDisponible, nStkMinimo, nStkMaximo )

   ( dbfTmpArt )->( dbAppend() )

   ( dbfTmpArt )->cRef                 := ( D():Articulos( nView ) )->Codigo
   ( dbfTmpArt )->cDetalle             := ( D():Articulos( nView ) )->Nombre
   ( dbfTmpArt )->nStkFis              := nStkFisico
   ( dbfTmpArt )->nStkDis              := nStkDisponible

   do case
      case nStockFin == 1

         if nStkMinimo <> 0
            ( dbfTmpArt )->nObjUni     := nStkMinimo
            ( dbfTmpArt )->nNumUni     := nCalculaUnidades( nStkMinimo )
            ( dbfTmpArt )->lSelArt     := nCalculaUnidades( nStkMinimo ) <> 0

         else

            ( dbfTmpArt )->nObjUni     := 1
            ( dbfTmpArt )->nNumUni     := nCalculaUnidades( 1 )
            ( dbfTmpArt )->lSelArt     := nCalculaUnidades( 1 ) <> 0

         end

      case nStockFin == 2

         if nStkMaximo <> 0

            ( dbfTmpArt )->nObjUni     := nStkMaximo
            ( dbfTmpArt )->nNumUni     := nCalculaUnidades( nStkMaximo )
            ( dbfTmpArt )->lSelArt     := nCalculaUnidades( nStkMaximo ) <> 0

         else

            ( dbfTmpArt )->nObjUni     := 1
            ( dbfTmpArt )->nNumUni     := nCalculaUnidades( 1 )
            ( dbfTmpArt )->lSelArt     := nCalculaUnidades( 1 ) <> 0

         end

   end

return ( nil )






Static Function KillTemporal()

   if !empty( dbfTmpArt ) .AND. ( dbfTmpArt )->( Used() )
      ( dbfTmpArt )->( dbCloseArea() )
   end

   if !empty( dbfTmpLin ) .AND. ( dbfTmpLin )->( Used() )
      ( dbfTmpLin )->( dbCloseArea() )
   end

   dbfErase( cTmpArt )
   dbfErase( cTmpPed )

Return nil




Static Function aColTmpArt()

   local aColTmpArt  := {}

      aAdd( aColTmpArt, { "CREF",    "C",   18,  0, "Referencia del artículo",         "",  "", "( cDbfCol )" } )
      aAdd( aColTmpArt, { "CDETALLE","C",  250,  0, "Nombre del artículo",             "",  "", "( cDbfCol )" } )
      aAdd( aColTmpArt, { "LSELART", "L",    1,  0, "Lógico de selección de artículo", "",  "", "( cDbfCol )" } )
      aAdd( aColTmpArt, { "NNUMUNI", "N",   16,  6, "Unidades pedidas",                "",  "", "( cDbfCol )" } )
      aAdd( aColTmpArt, { "NOBJUNI", "N",   16,  6, "Objetivo a llegar",               "",  "", "( cDbfCol )" } )
      aAdd( aColTmpArt, { "NSTKFIS", "N",   16,  6, "Stock fisico",                    "",  "", "( cDbfCol )" } )
      aAdd( aColTmpArt, { "NSTKDIS", "N",   16,  6, "Stock disponible",                "",  "", "( cDbfCol )" } )

return ( aColTmpArt )






Static Function SelArt( dbfTmpArt, oBrw )

   ( dbfTmpArt )->lSelArt := !( dbfTmpArt )->lSelArt

   oBrw:Refresh()

return nil




static function SelAllArt( dbfTmpArt, oBrw, lSel )

   local nRec  := ( dbfTmpArt )->( Recno() )

   ( dbfTmpArt )->( dbGoTop() )
   while !( dbfTmpArt )->( eof() )

      ( dbfTmpArt )->lSelArt := lSel

      ( dbfTmpArt )->( dbSkip() )

   end

   ( dbfTmpArt )->( dbGoTo( nRec ) )

   oBrw:Refresh()

return nil




Static Function nReservado( cCodArt )

   local nTotal := 0

   ( D():PedidosClientesReservas( nView ) )->( dbGoTop() )

   ( D():PedidosClientesReservas( nView ) )->( OrdSetFocus( "cRef" ) )

   if ( D():PedidosClientesReservas( nView ) )->( dbSeek( cCodArt ) )

      while ( D():PedidosClientesReservas( nView ) )->cRef == cCodArt .AND. !( D():PedidosClientesReservas( nView ) )->( Eof() )

         nTotal += nUnidadesReservadasEnPedidosCliente( D():PedidosClientesReservasId( nView ), ( D():PedidosClientesReservas( nView ) )->cRef, ( D():PedidosClientesReservas( nView ) )->cValPr1, ( D():PedidosClientesReservas( nView ) )->cValPr2, D():PedidosClientesReservas( nView ) )

      ( D():PedidosClientesReservas( nView ) )->( dbSkip() )

      end

   end

return ( nTotal )




Static Function CreaPedido( cCodPrv, cCodAlm )

   local cSeriePedido
   local nNumeroPedido
   local cSufijoPedido





   AppTemPedL( cCodAlm )

   if !( dbfTmpLin )->( Eof() )



      ( D():Proveedores( nView ) )->( dbSeek( cCodPrv ) )



      cSeriePedido               := cNewSer( "nPedPrv" )
      nNumeroPedido              := nNewDoc( cSeriePedido, D():PedidosProveedores( nView ), "nPedPrv", , D():Contadores( nView ) )
      cSufijoPedido              := RetSufEmp()

      ( D():PedidosProveedores( nView ) )->( dbAppend())
      ( D():PedidosProveedores( nView ) )->cSerPed    := cSeriePedido
      ( D():PedidosProveedores( nView ) )->nNumPed    := nNumeroPedido
      ( D():PedidosProveedores( nView ) )->cSufPed    := cSufijoPedido
      ( D():PedidosProveedores( nView ) )->cTurPed    := cCurSesion()
      ( D():PedidosProveedores( nView ) )->dFecPed    := GetSysDate()
      ( D():PedidosProveedores( nView ) )->cCodPrv    := cCodPrv
      if !empty( cCodAlm )
         ( D():PedidosProveedores( nView ) )->cCodAlm := cCodAlm
      else
         ( D():PedidosProveedores( nView ) )->cCodAlm := cDefAlm()
      end
      ( D():PedidosProveedores( nView ) )->cCodCaj    := Application():CodigoCaja()
      ( D():PedidosProveedores( nView ) )->cNomPrv    := ( D():Proveedores( nView ) )->Titulo
      ( D():PedidosProveedores( nView ) )->cDirPrv    := ( D():Proveedores( nView ) )->Domicilio
      ( D():PedidosProveedores( nView ) )->cPobPrv    := ( D():Proveedores( nView ) )->Poblacion
      ( D():PedidosProveedores( nView ) )->cProPrv    := ( D():Proveedores( nView ) )->Provincia
      ( D():PedidosProveedores( nView ) )->cPosPrv    := ( D():Proveedores( nView ) )->CodPostal
      ( D():PedidosProveedores( nView ) )->cDniPrv    := ( D():Proveedores( nView ) )->Nif
      ( D():PedidosProveedores( nView ) )->dFecEnt    := GetSysDate() + ( D():Proveedores( nView ) )->nPlzEnt
      ( D():PedidosProveedores( nView ) )->nEstado    := 1
      ( D():PedidosProveedores( nView ) )->cDivPed    := cDivEmp()
      ( D():PedidosProveedores( nView ) )->nVdvPed    := nChgDiv( cDivEmp(), D():Divisas( nView ) )
      ( D():PedidosProveedores( nView ) )->lSndDoc    := .T.
      ( D():PedidosProveedores( nView ) )->cCodUsr    := Auth():Codigo()
      ( D():PedidosProveedores( nView ) )->( dbRUnLock() )





      while !( dbfTmpLin )->( Eof() )

         ( D():PedidosProveedoresLineas( nView ) )->( dbAppend() )

         ( D():PedidosProveedoresLineas( nView ) )->cSerPed          := cSeriePedido
         ( D():PedidosProveedoresLineas( nView ) )->nNumPed          := nNumeroPedido
         ( D():PedidosProveedoresLineas( nView ) )->cSufPed          := cSufijoPedido
         ( D():PedidosProveedoresLineas( nView ) )->cRef             := ( dbfTmpLin )->cRef
         ( D():PedidosProveedoresLineas( nView ) )->cDetalle         := ( dbfTmpLin )->cDetalle
         ( D():PedidosProveedoresLineas( nView ) )->nIva             := ( dbfTmpLin )->nIva
         ( D():PedidosProveedoresLineas( nView ) )->nReq             := ( dbfTmpLin )->nReq
         ( D():PedidosProveedoresLineas( nView ) )->nCanPed          := ( dbfTmpLin )->nCanPed
         ( D():PedidosProveedoresLineas( nView ) )->nUniCaja         := ( dbfTmpLin )->nUniCaja
         ( D():PedidosProveedoresLineas( nView ) )->cUniDad          := ( dbfTmpLin )->cUniDad
         ( D():PedidosProveedoresLineas( nView ) )->nPreDiv          := ( dbfTmpLin )->nPreDiv
         ( D():PedidosProveedoresLineas( nView ) )->lLote            := ( dbfTmpLin )->lLote
         ( D():PedidosProveedoresLineas( nView ) )->nLote            := ( dbfTmpLin )->nLote
         ( D():PedidosProveedoresLineas( nView ) )->cLote            := ( dbfTmpLin )->cLote
         ( D():PedidosProveedoresLineas( nView ) )->cAlmLin          := ( dbfTmpLin )->cAlmLin

         ( D():PedidosProveedoresLineas( nView ) )->( dbRUnLock() )

      ( dbfTmpLin )->( dbSkip() )

      end

      MsgInfo( "El pedido a proveedores " + AllTrim( cSeriePedido ) + "/" + AllTrim( Str( nNumeroPedido ) ) + "/" + AllTrim( cSufijoPedido ) + " se ha creado satisfactoriamente", "Información" )

   else

      MsgInfo( "No hay líneas para crear su pedido", "Información" )

   end

return nil




Static function nCalculaUnidades( nObjetivo )

   local nUnidades := 0

   do case
      case ( dbfTmpArt )->nStkFis <= 0
         nUnidades   := Abs( ( dbfTmpArt )->nStkFis ) + nObjetivo
      case ( dbfTmpArt )->nStkFis > 0 .AND. ( dbfTmpArt )->nStkFis < nObjetivo
         nUnidades   := nObjetivo - ( dbfTmpArt )->nStkFis
      case ( dbfTmpArt )->nStkFis > 0 .AND. ( dbfTmpArt )->nStkFis > nObjetivo
         nUnidades   := 0
   end

Return ( nUnidades )





Static Function AppTemPedL( cCodAlm )

   ( dbfTmpArt )->( dbGoTop() )

   while !( dbfTmpArt )->( Eof() )

      ( D():Articulos( nView ) )->( dbGotop() )
      ( D():Articulos( nView ) )->( dbSeek( ( dbfTmpArt )->cRef ) )
      ( D():TiposIva( nView ) )->( dbSeek( ( D():Articulos( nView ) )->TipoIva ) )

      if ( dbfTmpArt )->lSelArt .AND. ( dbfTmpArt )->nNumUni <> 0

         ( dbfTmpLin )->( dbAppend() )
         ( dbfTmpLin )->cRef             := ( dbfTmpArt )->cRef
         ( dbfTmpLin )->cDetalle         := ( dbfTmpArt )->cDetalle
         ( dbfTmpLin )->nIva             := ( D():TiposIva( nView ) )->TPIva
         ( dbfTmpLin )->nReq             := ( D():TiposIva( nView ) )->nRecEq
         ( dbfTmpLin )->nCanPed          := 1
         ( dbfTmpLin )->nUniCaja         := ( dbfTmpArt )->nNumUni
         ( dbfTmpLin )->cUniDad          := ( D():Articulos( nView ) )->cUniDad
         ( dbfTmpLin )->nPreDiv          := ( D():Articulos( nView ) )->pCosto
         ( dbfTmpLin )->lLote            := ( D():Articulos( nView ) )->lLote
         ( dbfTmpLin )->nLote            := ( D():Articulos( nView ) )->nLote
         ( dbfTmpLin )->cLote            := ( D():Articulos( nView ) )->cLote

         if !empty( cCodAlm )
            ( dbfTmpLin )->cAlmLin       := cCodAlm
         else
            ( dbfTmpLin )->cAlmLin       := cDefAlm()
         end

         ( dbfTmpLin )->( dbRUnLock() )

      end

   ( dbfTmpArt )->( dbSkip() )

   end

   ( dbfTmpLin )->( dbGoTop() )

Return ( .T. )



STATIC FUNCTION ValidaMedicion( aTmp, aGet )

   local cNewUndMed  := aGet[ 13 ]:VarGet





   if ( empty( cOldUndMed ) .OR. cOldUndMed <> cNewUndMed )

      if D():UnidadMedicion( nView ):oDbf:Seek( aTmp[ 13 ] )

         if D():UnidadMedicion( nView ):oDbf:nDimension >= 1 .AND. !empty( D():UnidadMedicion( nView ):oDbf:cTextoDim1 )
            if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( D():UnidadMedicion( nView ):oDbf:cTextoDim1 )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( ( D():Articulos( nView ) )->nLngArt )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Show()
            else
               aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := ( D():Articulos( nView ) )->nLngArt
            end
         else
            if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            else
               aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]  := 0
            end
         end

         if D():UnidadMedicion( nView ):oDbf:nDimension >= 2 .AND. !empty( D():UnidadMedicion( nView ):oDbf:cTextoDim2 )
            if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( D():UnidadMedicion( nView ):oDbf:cTextoDim2 )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( ( D():Articulos( nView ) )->nAltArt )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Show()
            else
               aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := ( D():Articulos( nView ) )->nAltArt
            end

         else
            if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            else
                 aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]  := 0
            end
         end

         if D():UnidadMedicion( nView ):oDbf:nDimension >= 3 .AND. !empty( D():UnidadMedicion( nView ):oDbf:cTextoDim3 )
            if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( D():UnidadMedicion( nView ):oDbf:cTextoDim3 )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( ( D():Articulos( nView ) ) ->nAncArt )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Show()
            else
               aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := ( D():Articulos( nView ) )->nAncArt
            end
         else
            if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
               aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            else
               aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]  := 0
            end
         end

      else

         if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ] )
            aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:Hide()
            aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
         end

         if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ] )
            aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:Hide()
            aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
         end

         if !empty( aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ] )
            aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:Hide()
            aGet[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
         end

      end

      cOldUndMed := cNewUndMed

   end

RETURN .T.


Static Function nEstadoRecibido( dbfLin )

   local nTotRec
   local nTotUni
   local nEstado     := 1







   nTotRec           := AlbaranesProveedoresLineasModel():nUnidadesRecibidas( ( dbfLin )->cSerPed + Str( ( dbfLin )->nNumPed ) + ( dbfLin )->cSufPed, ( dbfLin )->cRef, ( dbfLin )->cCodPr1, ( dbfLin )->cCodPr2, ( dbfLin )->cValPr1, ( dbfLin )->cValPr2, ( dbfLin )->cLote )

   nTotUni           := nTotNPedPrv( dbfLin )

   do case
      case nTotRec == 0
         nEstado     := 1
      case nTotRec < nTotUni
         nEstado     := 2
      case nTotRec >= nTotUni
         nEstado     := 3
   end

RETURN ( nEstado )
#line 5735 ".\.\Prg\Pedprov.prg"
Static Function DataReport( oFr )





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Pedidos", ( D():PedidosProveedores( nView ) )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Pedidos", cItemsToReport( aItmPedPrv() ) )

   ( D():PedidosProveedoresLineas( nView ) )->( ordsetfocus( "nPosPrint" ) )
   oFr:SetWorkArea(     "Lineas de pedidos", ( D():PedidosProveedoresLineas( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de pedidos", cItemsToReport( aColPedPrv() ) )

   oFr:SetWorkArea(     "Incidencias de pedidos", ( D():PedidosProveedoresIncidencias( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de pedidos", cItemsToReport( aIncPedPrv() ) )

   oFr:SetWorkArea(     "Documentos de pedidos", ( D():PedidosProveedoresDocumentos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de pedidos", cItemsToReport( aPedPrvDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Proveedor", ( D():Proveedores( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Proveedor", cItemsToReport( aItmPrv() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Familias", ( D():Familias( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Familias", cItemsToReport( aItmFam() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():UnidadMedicion( nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():UnidadMedicion( nView ):oDbf ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( nView ):oDbf ) )

   oFr:SetWorkArea(     "Centro de coste",  D():CentroCoste( nView ):Select() )
   oFr:SetFieldAliases( "Centro de coste",  cObjectsToReport( D():CentroCoste( nView ):oDbf ) )

   oFr:SetMasterDetail( "Pedidos", "Lineas de pedidos",        {|| ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Incidencias de pedidos",   {|| ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Documentos de pedidos",    {|| ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Proveedor",                {|| ( D():PedidosProveedores( nView ) )->cCodPrv } )
   oFr:SetMasterDetail( "Pedidos", "Almacenes",                {|| ( D():PedidosProveedores( nView ) )->cCodAlm } )
   oFr:SetMasterDetail( "Pedidos", "Formas de pago",           {|| ( D():PedidosProveedores( nView ) )->cCodPgo } )
   oFr:SetMasterDetail( "Pedidos", "Empresa",                  {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Pedidos", "Clientes",                 {|| GetCodCli( ( D():PedidosProveedores( nView ) )->cNumPedCli ) } )
   oFr:SetMasterDetail( "Pedidos", "Centro de coste",          {|| ( D():PedidosProveedores( nView ) )->cCtrCoste } )

   oFr:SetMasterDetail( "Lineas de pedidos", "Artículos",               {|| ( D():PedidosProveedoresLineas( nView ) )->cRef } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Familias",                {|| ( D():PedidosProveedoresLineas( nView ) )->cCodFam } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Código de proveedores",   {|| ( D():PedidosProveedores( nView ) )->cCodPrv + ( D():PedidosProveedoresLineas( nView ) )->cRef } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Unidades de medición",    {|| ( D():PedidosProveedoresLineas( nView ) )->cUnidad } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Impuestos especiales",    {|| ( D():PedidosProveedoresLineas( nView ) )->cCodImp } )

   oFr:SetResyncPair(   "Pedidos", "Lineas de pedidos" )
   oFr:SetResyncPair(   "Pedidos", "Incidencias de pedidos" )
   oFr:SetResyncPair(   "Pedidos", "Documentos de pedidos" )
   oFr:SetResyncPair(   "Pedidos", "Empresa" )
   oFr:SetResyncPair(   "Pedidos", "Proveedor" )
   oFr:SetResyncPair(   "Pedidos", "Almacenes" )
   oFr:SetResyncPair(   "Pedidos", "Formas de pago" )
   oFr:SetResyncPair(   "Pedidos", "Clientes" )
   oFr:SetResyncPair(   "Pedidos", "Centro de coste" )

   oFr:SetResyncPair(   "Lineas de pedidos", "Artículos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Familias" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Código de proveedores" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Unidades de medición" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Impuestos especiales" )

Return nil



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Pedidos" )
   oFr:DeleteCategory(  "Lineas de pedidos" )





   oFr:AddVariable(     "Pedidos",             "Total pedido",                        "GetHbVar('nTotPed')" )
   oFr:AddVariable(     "Pedidos",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Pedidos",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Pedidos",             "Total neto",                          "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Pedidos",             "Total primer descuento definible",    "GetHbVar('nTotUno')" )
   oFr:AddVariable(     "Pedidos",             "Total segundo descuento definible",   "GetHbVar('nTotDos')" )
   oFr:AddVariable(     "Pedidos",             "Total " + cImp(),                     "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Pedidos",             "Total impuestos especiales",          "GetHbVar('nTotIvm')" )
   oFr:AddVariable(     "Pedidos",             "Total RE",                            "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Pedidos",             "Total retención",                     "GetHbVar('nTotRet')" )
   oFr:AddVariable(     "Pedidos",             "Bruto primer tipo de " + cImp(),      "GetHbArrayVar('aIvaUno',1)" )
   oFr:AddVariable(     "Pedidos",             "Bruto segundo tipo de " + cImp(),     "GetHbArrayVar('aIvaDos',1)" )
   oFr:AddVariable(     "Pedidos",             "Bruto tercer tipo de " + cImp(),      "GetHbArrayVar('aIvaTre',1)" )
   oFr:AddVariable(     "Pedidos",             "Base primer tipo de " + cImp(),       "GetHbArrayVar('aIvaUno',2)" )
   oFr:AddVariable(     "Pedidos",             "Base segundo tipo de " + cImp(),      "GetHbArrayVar('aIvaDos',2)" )
   oFr:AddVariable(     "Pedidos",             "Base tercer tipo de " + cImp(),       "GetHbArrayVar('aIvaTre',2)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje primer tipo " + cImp(),    "GetHbArrayVar('aIvaUno',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje segundo tipo " + cImp(),   "GetHbArrayVar('aIvaDos',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje tercer tipo " + cImp(),    "GetHbArrayVar('aIvaTre',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje primer tipo RE",           "GetHbArrayVar('aIvaUno',4)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje segundo tipo RE",          "GetHbArrayVar('aIvaDos',4)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje tercer tipo RE",           "GetHbArrayVar('aIvaTre',4)" )
   oFr:AddVariable(     "Pedidos",             "Importe primer tipo " + cImp(),       "GetHbArrayVar('aIvaUno',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe segundo tipo " + cImp(),      "GetHbArrayVar('aIvaDos',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe tercer tipo " + cImp(),       "GetHbArrayVar('aIvaTre',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe primer RE",                   "GetHbArrayVar('aIvaUno',6)" )
   oFr:AddVariable(     "Pedidos",             "Importe segundo RE",                  "GetHbArrayVar('aIvaDos',6)" )
   oFr:AddVariable(     "Pedidos",             "Importe tercer RE",                   "GetHbArrayVar('aIvaTre',6)" )

   oFr:AddVariable(     "Lineas de pedidos",   "Detalle del artículo",                "CallHbFunc('cDesPedPrv')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Detalle del artículo otro lenguaje",  "CallHbFunc('cDesPedPrvLeng')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Total unidades artículo",             "CallHbFunc('nTotNPedPrv')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Precio unitario del artículo",        "CallHbFunc('nTotUPedPrv')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Total línea de pedido",               "CallHbFunc('nTotLPedPrv')" )

   oFr:AddVariable(     "Lineas de pedidos",   "Nombre primera propiedad",            "CallHbFunc('nombrePrimeraPropiedad')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Nombre segunda propiedad",            "CallHbFunc('nombreSegundaPropiedad')" )

Return nil



Static Function MailingReport( oFr )





   oFr:AddVariable(     "Pedidos",             "Total pedido",                        "GetHbVar('nTotPed')" )
   oFr:AddVariable(     "Pedidos",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Pedidos",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Pedidos",             "Total neto",                          "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Pedidos",             "Total primer descuento definible",    "GetHbVar('nTotUno')" )
   oFr:AddVariable(     "Pedidos",             "Total segundo descuento definible",   "GetHbVar('nTotDos')" )
   oFr:AddVariable(     "Pedidos",             "Total " + cImp(),                     "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Pedidos",             "Total RE",                            "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Pedidos",             "Total retención",                     "GetHbVar('nTotRet')" )
   oFr:AddVariable(     "Pedidos",             "Bruto primer tipo de " + cImp(),      "GetHbArrayVar('aIvaUno',1)" )
   oFr:AddVariable(     "Pedidos",             "Bruto segundo tipo de " + cImp(),     "GetHbArrayVar('aIvaDos',1)" )
   oFr:AddVariable(     "Pedidos",             "Bruto tercer tipo de " + cImp(),      "GetHbArrayVar('aIvaTre',1)" )
   oFr:AddVariable(     "Pedidos",             "Base primer tipo de " + cImp(),       "GetHbArrayVar('aIvaUno',2)" )
   oFr:AddVariable(     "Pedidos",             "Base segundo tipo de " + cImp(),      "GetHbArrayVar('aIvaDos',2)" )
   oFr:AddVariable(     "Pedidos",             "Base tercer tipo de " + cImp(),       "GetHbArrayVar('aIvaTre',2)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje primer tipo " + cImp(),    "GetHbArrayVar('aIvaUno',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje segundo tipo " + cImp(),   "GetHbArrayVar('aIvaDos',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje tercer tipo " + cImp(),    "GetHbArrayVar('aIvaTre',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje primer tipo RE",           "GetHbArrayVar('aIvaUno',4)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje segundo tipo RE",          "GetHbArrayVar('aIvaDos',4)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje tercer tipo RE",           "GetHbArrayVar('aIvaTre',4)" )
   oFr:AddVariable(     "Pedidos",             "Importe primer tipo " + cImp(),       "GetHbArrayVar('aIvaUno',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe segundo tipo " + cImp(),      "GetHbArrayVar('aIvaDos',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe tercer tipo " + cImp(),       "GetHbArrayVar('aIvaTre',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe primer RE",                   "GetHbArrayVar('aIvaUno',6)" )
   oFr:AddVariable(     "Pedidos",             "Importe segundo RE",                  "GetHbArrayVar('aIvaDos',6)" )
   oFr:AddVariable(     "Pedidos",             "Importe tercer RE",                   "GetHbArrayVar('aIvaTre',6)" )

   oFr:AddVariable(     "Lineas de pedidos",   "Detalle del artículo",                "CallHbFunc('cDesPedPrv')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Total unidades artículo",             "CallHbFunc('nTotNPedPrv')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Precio unitario del artículo",        "CallHbFunc('nTotUPedPrv')" )
   oFr:AddVariable(     "Lineas de pedidos",   "Total línea de pedido",               "CallHbFunc('nTotLPedPrv')" )

Return nil



Static Function YearComboBoxChange()

   if ( oWndBrw:oWndBar:cYearComboBox() <> "[Todos]" )
      oWndBrw:oWndBar:setYearComboBoxExpression( "Year( Field->dFecPed ) == " + oWndBrw:oWndBar:cYearComboBox() )
   else
      oWndBrw:oWndBar:setYearComboBoxExpression( "" )
   end

   oWndBrw:chgFilter()

Return nil



Static Function ChangeUnidades( oCol, uNewValue, nKey, aTmp )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      ( dbfTmpLin )->nUnicaja       := uNewValue

      RecalculaTotal( aTmp )

   end

Return .T.



Static Function ChangeComentario( oCol, uNewValue, nKey, aTmp )





   if IsNum( nKey ) .AND. ( nKey <> 27 ) .AND. !IsNil( uNewValue )

      if dbSeekInOrd( ( dbfTmpLin )->cRef, "Codigo", D():Articulos( nView ) )

            if dbLock( D():Articulos( nView ) )
                  ( D():Articulos( nView ) )->mComent      := uNewValue
                  ( D():Articulos( nView ) )->( dbUnlock() )
            end

      end

   end

Return .T.








Static Function SumaUnidadLinea( aTmp )

   ( dbfTmpLin )->nUniCaja++

   RecalculaTotal( aTmp )

Return .T.






Static Function RestaUnidadLinea( aTmp )

   ( dbfTmpLin )->nUniCaja--

   RecalculaTotal( aTmp )

Return .T.



Static Function ImprimirSeriesPedidosProveedores( nDevice, lExt )

   local aStatus
   local oPrinter
   local cFormato

   If( nDevice == nil, nDevice := 1, ) ;
   If( lExt == nil, lExt := .F., ) ;



   oPrinter          := PrintSeries():New( nView ):SetCompras()



   oPrinter:Serie(      ( D():PedidosProveedores( nView ) )->cSerPed )
   oPrinter:Documento(  ( D():PedidosProveedores( nView ) )->nNumPed )
   oPrinter:Sufijo(     ( D():PedidosProveedores( nView ) )->cSufPed )

   if lExt

      oPrinter:oFechaInicio:cText( ( D():PedidosProveedores( nView ) )->dFecPed )
      oPrinter:oFechaFin:cText( ( D():PedidosProveedores( nView ) )->dFecPed )

   end

   oPrinter:oFormatoDocumento:TypeDocumento( "PP" )



   cFormato          := cFormatoDocumento( ( D():PedidosProveedores( nView ) )->cSerPed, "nPedPrv", D():Contadores( nView ) )
   if empty( cFormato )
      cFormato       := cFirstDoc( "PP", D():Documentos( nView ) )
   end
   oPrinter:oFormatoDocumento:cText( cFormato )



   aStatus           := D():GetInitStatus( "PedPROVT", nView )

   oPrinter:bInit    := {||   ( D():PedidosProveedores( nView ) )->( dbSeek( oPrinter:DocumentoInicio(), .T. ) ) }


   oPrinter:bWhile   := {||   oPrinter:InRangeDocumento( D():PedidosProveedoresId( nView ) )                  .AND.  ( D():PedidosProveedores( nView ) )->( !eof() ) }



   oPrinter:bFor     := {||   oPrinter:InRangeFecha( ( D():PedidosProveedores( nView ) )->dFecPed )           .AND.  oPrinter:InRangeProveedor( ( D():PedidosProveedores( nView ) )->cCodPrv )         .AND.  oPrinter:InRangeGrupoProveedor( RetFld( ( D():PedidosProveedores( nView ) )->cCodPrv, D():Proveedores( nView ), "cCodGrp" ) ) }

   oPrinter:bSkip    := {||   ( D():PedidosProveedores( nView ) )->( dbSkip() ) }

   oPrinter:bAction  := {||   GenPedPrv( nDevice, "Imprimiendo documento : " + D():PedidosProveedoresId( nView ), oPrinter:oFormatoDocumento:uGetValue, oPrinter:oImpresora:uGetValue, oPrinter:oCopias:uGetValue ) }

   oPrinter:bStart   := {||   if( lExt, oPrinter:DisableRange(), ) }



   oPrinter:Resource():End()



   D():SetStatus( "PedPROVT", nView, aStatus )

   if !empty( oWndBrw )
      oWndBrw:Refresh()
   end

Return .T.













FUNCTION nTotPedPrv( cPedido, cPedPrvT, cPedPrvL, cIva, cDiv, aTmp, cDivRet, lPic )

   local nRec
   local nOrdAnt
   local nTotArt
   local nImpuestoEspecial
   local dFecFac
   local lRecargo
   local nDtoEsp
   local nDtoPP
   local nDtoUno
   local nDtoDos
   local nPorte
   local cCodDiv
   local nRegIva
   local aTotDto     := { 0, 0, 0 }
   local aTotDPP     := { 0, 0, 0 }
   local aTotUno     := { 0, 0, 0 }
   local aTotDos     := { 0, 0, 0 }
   local bCondition

   If( cPedPrvT == nil, cPedPrvT := D():PedidosProveedores( nView ), ) ;
   If( cPedPrvL == nil, cPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;
   If( cIva == nil, cIva := D():TiposIva( nView ), ) ;
   If( cDiv == nil, cDiv := D():Divisas( nView ), ) ;
   If( lPic == nil, lPic := .F., ) ;
   If( cPedido == nil, cPedido := ( cPedPrvT )->cSerPed + Str( ( cPedPrvT )->nNumPed ) + ( cPedPrvT )->cSufPed, ) ;



   initPublics()

   nRec              := ( cPedPrvL )->( Recno() )
   nOrdAnt           := ( cPedPrvL )->( OrdSetFocus( "nNumPed" ) )

   if aTmp <> nil
      dFecFac        := aTmp[ 5 ]
      lRecargo       := aTmp[ 25]
      nDtoEsp        := aTmp[ 22 ]
      nDtoPP         := aTmp[ 24    ]
      nDtoUno        := aTmp[ 33 ]
      nDtoDos        := aTmp[ 35 ]
      nPorte         := aTmp[ 20 ]
      cCodDiv        := aTmp[ 29 ]
      nVdvDiv        := aTmp[ 30 ]
      nRegIva        := aTmp[ 46 ]
      bCondition     := {|| ( cPedPrvL )->( !eof() ) }
      ( cPedPrvL )->( dbGoTop() )
   else
      dFecFac        := ( cPedPrvT )->dFecPed
      lRecargo       := ( cPedPrvT )->lRecargo
      nDtoEsp        := ( cPedPrvT )->nDtoEsp
      nDtoPP         := ( cPedPrvT )->nDpp
      nDtoUno        := ( cPedPrvT )->nDtoUno
      nDtoDos        := ( cPedPrvT )->nDtoDos
      nPorte         := ( cPedPrvT )->nPortes
      cCodDiv        := ( cPedPrvT )->cDivPed
      nVdvDiv        := ( cPedPrvT )->nVdvPed
      nRegIva        := ( cPedPrvT )->nRegIva
      bCondition     := {|| ( cPedPrvL )->cSerPed + Str( ( cPedPrvL )->nNumPed ) + ( cPedPrvL )->cSufPed == cPedido .AND. ( cPedPrvL )->( !eof() ) }
      ( cPedPrvL )->( dbSeek( cPedido ) )
   end

   if Empty( cCodDiv )
      cCodDiv        := cDivEmp()
   end

   cPinDiv           := cPinDiv( cCodDiv, cDiv )
   cPirDiv           := cPirDiv( cCodDiv, cDiv )
   nDinDiv           := nDinDiv( cCodDiv, cDiv )
   nDirDiv           := nRinDiv( cCodDiv, cDiv )

   while Eval( bCondition )

      if lValLine( cPedPrvL )





         nTotArt           := nTotLPedPrv( cPedPrvL, nDinDiv, nDirDiv )
         nImpuestoEspecial := nTotIPedPrv( cPedPrvL, nDinDiv, nDirDiv )

         if nTotArt <> 0





            do case
            case aTotIva[ 1, 3 ] == NIL .OR. aTotIva[ 1, 3 ] == ( cPedPrvL )->nIva
               aTotIva[ 1, 3 ]   := (cPedPrvL)->NIVA
               aTotIva[ 1, 4 ]   := (cPedPrvL)->NREQ
               aTotIva[ 1, 1 ]   += nTotArt
               aTotIva[ 1, 6 ]   += nImpuestoEspecial

            case aTotIva[ 2, 3 ] == NIL .OR. aTotIva[ 2, 3 ] == ( cPedPrvL )->nIva
               aTotIva[ 2, 3 ]   := (cPedPrvL)->NIVA
               aTotIva[ 2, 4 ]   := (cPedPrvL)->NREQ
               aTotIva[ 2, 1 ]   += nTotArt
               aTotIva[ 2, 6 ]   += nImpuestoEspecial

            case aTotIva[ 3, 3 ] == NIL .OR. aTotIva[ 3, 3 ] == ( cPedPrvL )->nIva
               aTotIva[ 3, 3 ]   := (cPedPrvL)->NIVA
               aTotIva[ 3, 4 ]   := (cPedPrvL)->NREQ
               aTotIva[ 3, 1 ]   += nTotArt
               aTotIva[ 3, 6 ]   += nImpuestoEspecial

            end

         end

      end

      ( cPedPrvL )->( dbSkip() )

   end

   if !Empty( nOrdAnt )
      ( cPedPrvL )->( OrdSetFocus( nOrdAnt ) )
   end

   ( cPedPrvL )->( dbGoTo( nRec ) )



   nTotBrt           := aTotIva[ 1, 1 ] + aTotIva[ 2, 1 ] + aTotIva[ 3, 1 ]



   nTotBrt           += nPorte

   aTotIva[ 1, 2 ]         := aTotIva[ 1, 1 ]
   aTotIva[ 2, 2 ]         := aTotIva[ 2, 1 ]
   aTotIva[ 3, 2 ]         := aTotIva[ 3, 1 ]





   IF nDtoEsp <> 0

      aTotDto[1]     := Round( aTotIva[ 1, 2 ] * nDtoEsp / 100, nDirDiv )
      aTotDto[2]     := Round( aTotIva[ 2, 2 ] * nDtoEsp / 100, nDirDiv )
      aTotDto[3]     := Round( aTotIva[ 3, 2 ] * nDtoEsp / 100, nDirDiv )

      nTotDto        := aTotDto[1] + aTotDto[2] + aTotDto[3]

      aTotIva[ 1, 2 ]      -= aTotDto[1]
      aTotIva[ 2, 2 ]      -= aTotDto[2]
      aTotIva[ 3, 2 ]      -= aTotDto[3]

   end

   IF nDtoPP <> 0

      aTotDPP[1]     := Round( aTotIva[ 1, 2 ] * nDtoPP / 100, nDirDiv )
      aTotDPP[2]     := Round( aTotIva[ 2, 2 ] * nDtoPP / 100, nDirDiv )
      aTotDPP[3]     := Round( aTotIva[ 3, 2 ] * nDtoPP / 100, nDirDiv )

      nTotDPP        := aTotDPP[1] + aTotDPP[2] + aTotDPP[3]

      aTotIva[ 1, 2 ]      -= aTotDPP[1]
      aTotIva[ 2, 2 ]      -= aTotDPP[2]
      aTotIva[ 3, 2 ]      -= aTotDPP[3]

   end

   IF nDtoUno <> 0

      aTotUno[1]     := Round( aTotIva[ 1, 2 ] * nDtoUno / 100, nDirDiv )
      aTotUno[2]     := Round( aTotIva[ 2, 2 ] * nDtoUno / 100, nDirDiv )
      aTotUno[3]     := Round( aTotIva[ 3, 2 ] * nDtoUno / 100, nDirDiv )

      nTotUno        := aTotDPP[1] + aTotDPP[2] + aTotDPP[3]

      aTotIva[ 1, 2 ]      -= aTotUno[1]
      aTotIva[ 2, 2 ]      -= aTotUno[2]
      aTotIva[ 3, 2 ]      -= aTotUno[3]

   end

   IF nDtoDos <> 0

      aTotDos[1]     := Round( aTotIva[ 1, 2 ] * nDtoDos / 100, nDirDiv )
      aTotDos[2]     := Round( aTotIva[ 2, 2 ] * nDtoDos / 100, nDirDiv )
      aTotDos[3]     := Round( aTotIva[ 3, 2 ] * nDtoDos / 100, nDirDiv )

      nTotDos        := aTotDPP[1] + aTotDPP[2] + aTotDPP[3]

      aTotIva[ 1, 2 ]      -= aTotDos[1]
      aTotIva[ 2, 2 ]      -= aTotDos[2]
      aTotIva[ 3, 2 ]      -= aTotDos[3]

   end

   if uFieldEmpresa( "lIvaImpEsp" )
      aTotIva[ 1, 2 ]      += aTotIva[ 1, 6 ]
      aTotIva[ 2, 2 ]      += aTotIva[ 2, 6 ]
      aTotIva[ 3, 2 ]      += aTotIva[ 3, 6 ]
   end



   nTotNet           := Round( aTotIva[ 1, 2 ] + aTotIva[ 2, 2 ] + aTotIva[ 3, 2 ], nDirDiv )



   if nRegIva <= 1

      aTotIva[ 1, 8 ]      := if( aTotIva[ 1, 3 ] <> NIL, Round( aTotIva[ 1, 2 ] * aTotIva[ 1, 3 ] / 100, nDirDiv ), 0 )
      aTotIva[ 2, 8 ]      := if( aTotIva[ 2, 3 ] <> NIL, Round( aTotIva[ 2, 2 ] * aTotIva[ 2, 3 ] / 100, nDirDiv ), 0 )
      aTotIva[ 3, 8 ]      := if( aTotIva[ 3, 3 ] <> NIL, Round( aTotIva[ 3, 2 ] * aTotIva[ 3, 3 ] / 100, nDirDiv ), 0 )



      if lRecargo
         aTotIva[ 1, 9 ]   := if( aTotIva[ 1, 3 ] <> NIL, Round( aTotIva[ 1, 2 ] * aTotIva[ 1, 4 ] / 100, nDirDiv ), 0 )
         aTotIva[ 2, 9 ]   := if( aTotIva[ 2, 3 ] <> NIL, Round( aTotIva[ 2, 2 ] * aTotIva[ 2, 4 ] / 100, nDirDiv ), 0 )
         aTotIva[ 3, 9 ]   := if( aTotIva[ 3, 3 ] <> NIL, Round( aTotIva[ 3, 2 ] * aTotIva[ 3, 4 ] / 100, nDirDiv ), 0 )
      end

   end



   nTotIva           := Round( aTotIva[ 1, 8 ] + aTotIva[ 2, 8 ] + aTotIva[ 3, 8 ], nDirDiv )



   nTotReq           := Round( aTotIva[ 1, 9 ] + aTotIva[ 2, 9 ] + aTotIva[ 3, 9 ], nDirDiv )




   nTotIvm           := Round( aTotIva[ 1, 6 ] + aTotIva[ 2, 6 ] + aTotIva[ 3, 6 ], nDirDiv )



   nTotImp           := Round( nTotIva + nTotReq , nDirDiv )
   if !uFieldEmpresa( "lIvaImpEsp" )
      nTotImp        += Round( nTotIvm , nDirDiv )
   end



   nTotPed           := nTotNet + nTotImp



   aTotIva           := aSort( aTotIva,,, {|x,y| abs( x[1] ) > abs( y[1] ) } )



   if cDivRet <> nil .AND. cDivRet <> cCodDiv
      nTotNet        := nCnv2Div( nTotNet, cCodDiv, cDivRet )
      nTotIva        := nCnv2Div( nTotIva, cCodDiv, cDivRet )
      nTotReq        := nCnv2Div( nTotReq, cCodDiv, cDivRet )
      nTotPed        := nCnv2Div( nTotPed, cCodDiv, cDivRet )
      cPirDiv        := cPirDiv( cDivRet, cDiv )
   end

RETURN ( if( lPic, Trans( nTotPed, cPirDiv ), nTotPed ) )



FUNCTION aTotPedPrv( cPedido, cPedPrvT, cPedPrvL, cIva, cDiv, cDivRet )

   nTotPedPrv( cPedido, cPedPrvT, cPedPrvL, cIva, cDiv, nil, cDivRet, .F. )

RETURN ( { nTotNet, nTotIva, nTotReq, nTotPed, aTotIva } )



Function sTotPedPrv( cPedido, dbfMaster, dbfLine, cIva, cDiv, cDivRet )

   local sTotal

   nTotPedPrv( cPedido, dbfMaster, dbfLine, cIva, cDiv, nil, cDivRet, .F. )

   sTotal                                 := sTotal()
   sTotal:nTotalBruto                     := nTotBrt
   sTotal:nTotalNeto                      := nTotNet
   sTotal:nTotalIva                       := nTotIva
   sTotal:aTotalIva                       := aTotIva
   sTotal:nTotalRecargoEquivalencia       := nTotReq
   sTotal:nTotalDocumento                 := nTotPed
   sTotal:nTotalDescuentoGeneral          := nTotDto
   sTotal:nTotalDescuentoProntoPago       := nTotDpp
   sTotal:nTotalDescuentoUno              := nTotUno
   sTotal:nTotalDescuentoDos              := nTotDos

Return ( sTotal )



FUNCTION BrwPedPrv( oGetNum, cPedPrvT, cPedPrvL, cIva, cDiv, cFPago )

   local oDlg
   local oBrw
   local oGet1
   local cGet1
   local nOrd     := GetBrwOpt( "BrwPedPrv" )
   local oCbxOrd
   local aCbxOrd  := { "Número", "Fecha", "Código", "Nombre" }
   local cCbxOrd

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]
   nOrd           := ( cPedPrvT )->( OrdSetFocus( nOrd ) )

   oDlg = TDialog():New(,,,, "Pedido a proveedores", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, cPedPrvT ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cPedPrvT, .T., nil, .F. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( cPedPrvT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := cPedPrvT
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Pedido a proveedor.Browse"

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Es. Estado"
         :bStrData         := {|| "" }
         :bBmpData         := {|| ( cPedPrvT )->nEstado }
         :nWidth           := 20
         :AddResource( "gc_delete_12" )
         :AddResource( "gc_shape_square_12" )
         :AddResource( "gc_check_12" )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( cPedPrvT )->cSerPed + "/" + Str( ( cPedPrvT )->nNumPed ) + "/" + ( cPedPrvT )->cSufPed }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecPed"
         :bEditValue       := {|| dToc( ( cPedPrvT )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodPrv"
         :bEditValue       := {|| Rtrim( ( cPedPrvT )->cCodPrv ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomPrv"
         :bEditValue       := {|| Rtrim( ( cPedPrvT )->cNomPrv ) }
         :nWidth           := 400
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( cPedPrvT )->nTotPed }
         :cEditPicture     := cPirDiv()
         :nWidth           := 120
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 500,, oDlg,,, .F., {||     .F.},,, .F. )




      TButton():ReDefine( 501,, oDlg,,, .F., {||     .F.},,, .F. )

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:bStart    := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if ( cPedPrvT )->nEstado <> 3
         oGetNum:cText( ( cPedPrvT )->cSerPed + Str( ( cPedPrvT )->nNumPed ) + ( cPedPrvT )->cSufPed )
         oGetNum:Disable()
      else
         msgStop( "El pedido ya fue entregado." )
      end
   end

   DestroyFastFilter( cPedPrvT )

   SetBrwOpt( "BrwPedPrv", ( cPedPrvT )->( OrdNumber() ) )

   ( cPedPrvT )->( OrdSetFocus( nOrd ) )





   oBrw:CloseData()

RETURN ( oDlg:nResult == 1 )



FUNCTION ChgPedPrv( nPedido, nMode, cPedPrvT )

   local oBlock
   local oError
   local lExito   := .T.
   local lClose   := .F.

   if nMode <> 1 .OR. empty( nPedido )
      return nil
   end

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if empty( cPedPrvT )
      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedProvT.Dbf" ), ( cCheckArea( "PEDPROVT", @cPedPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PedProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if ( cPedPrvT )->( dbSeek( nPedido ) )
      if dbDialogLock( cPedPrvT )
         ( cPedPrvT )->nEstado    := 1
      end
   else
      lExito      := .F.
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( cPedPrvT )->( dbCloseArea() )
   end

RETURN lExito



FUNCTION nTotEPedPrv( uTmp )

   local nCalculo := 0

   do case
   case ValType( uTmp ) == "C"
      nCalculo    := NotBulto( ( uTmp )->nBultos ) * NotCaja( (uTmp)->nCanEnt ) * (uTmp)->nUniEnt
   case ValType( uTmp ) == "O"
      nCalculo    := NotBulto( uTmp:nBultos ) * NotCaja( uTmp:nCanEnt ) * uTmp:nUniEnt
   case ValType( uTmp ) == "A"
      nCalculo    := NotBulto( uTmp[ 58 ] ) * NotCaja( uTmp[ 11 ] * uTmp[ 12 ] )
   end

RETURN ( nCalculo )



FUNCTION nTotNPedPrv( uTmp )

   local nCalculo := 0

   If( uTmp == nil, uTmp := D():PedidosProveedoresLineas( nView ), ) ;

   do case
   case ValType( uTmp ) == "C"
      nCalculo    := ( uTmp )->nUniCaja
      nCalculo    *= NotBulto( ( uTmp )->nBultos )
      nCalculo    *= NotCaja( ( uTmp )->nCanPed )
      nCalculo    *= NotCero( ( uTmp )->nUndKit )
      nCalculo    *= NotCero( ( uTmp )->nMedUno )
      nCalculo    *= NotCero( ( uTmp )->nMedDos )
      nCalculo    *= NotCero( ( uTmp )->nMedTre )

   case ValType( uTmp ) == "O"
      nCalculo    := uTmp:nUniCaja
      nCalculo    *= NotBulto( uTmp:nBultos )
      nCalculo    *= NotCaja( uTmp:nCanPed )
      nCalculo    *= NotCero( uTmp:nUndKit )
      nCalculo    *= NotCero( uTmp:nMedUno )
      nCalculo    *= NotCero( uTmp:nMedDos )
      nCalculo    *= NotCero( uTmp:nMedTre )

   case ValType( uTmp ) == "A"
      nCalculo    := uTmp[ 9 ]
      nCalculo    *= NotBulto( uTmp[ 58 ] )
      nCalculo    *= NotCaja( uTmp[ 8 ] )
      nCalculo    *= NotCero( uTmp[ 29 ] )
      nCalculo    *= NotCero( uTmp[ 46 ] )
      nCalculo    *= NotCero( uTmp[ 47 ] )
      nCalculo    *= NotCero( uTmp[ 48 ] )

   end

RETURN ( nCalculo )




FUNCTION nTotFPedPrv( cPedPrvL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )

   local nCalculo := 0

   nCalculo       += nTotLPedPrv( cPedPrvL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )
   nCalculo       += nIvaLPedPrv( cPedPrvL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )

return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nTotUPedPrv( uTmp, nDec, nVdv )

   local nCalculo := 0

   If( uTmp == nil, uTmp := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   do case
      case ValType( uTmp ) == "C"
         nCalculo := ( uTmp )->nPreDiv

      case ValType( uTmp ) == "O"
         nCalculo := uTmp:nPreDiv

      case ValType( uTmp ) == "A"
         nCalculo := uTmp[ 10 ]

   end

   if nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nImpUPedPrv( uPedPrvT, uPedPrvL, nDec, nVdv, cPorDiv )

   local nCalculo       := 0

   If( uPedPrvT == nil, uPedPrvT := D():PedidosProveedores( nView ), ) ;
   If( uPedPrvL == nil, uPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo             := nTotUPedPrv( uPedPrvL, nDec, nVdv )

   if IsArray( uPedPrvT )

      nCalculo          -= Round( nCalculo * uPedPrvT[ 22 ]  / 100, nDec )
      nCalculo          -= Round( nCalculo * uPedPrvT[ 24    ]  / 100, nDec )
      nCalculo          -= Round( nCalculo * uPedPrvT[ 33 ]  / 100, nDec )
      nCalculo          -= Round( nCalculo * uPedPrvT[ 35 ]  / 100, nDec )

   else

      nCalculo          -= Round( nCalculo * ( uPedPrvT )->nDtoEsp / 100, nDec )
      nCalculo          -= Round( nCalculo * ( uPedPrvT )->nDpp    / 100, nDec )
      nCalculo          -= Round( nCalculo * ( uPedPrvT )->nDtoUno / 100, nDec )
      nCalculo          -= Round( nCalculo * ( uPedPrvT )->nDtoDos / 100, nDec )

   end

Return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nIvaUPedPrv( uTmp, nDec, nVdv )

   local nCalculo

   If( uTmp == nil, uTmp := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUPedPrv( uTmp, nDec, nVdv )
   nCalculo       := nCalculo * ( uTmp )->nIva / 100

   if nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nTotLPedPrv( uTmp, nDec, nRec, nVdv, cPouDiv )

   local nCalculo

   If( uTmp == nil, uTmp := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nRec == nil, nRec := nRinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;



   nCalculo       := nTotUPedPrv( uTmp, nDec, nVdv )

   do case
      case ValType( uTmp ) == "C"

         if ( uTmp )->nDtoLin <> 0
            nCalculo    -= nCalculo * ( uTmp )->nDtoLin / 100
         end

         if ( uTmp )->nDtoPrm <> 0
            nCalculo    -= nCalculo * ( uTmp )->nDtoPrm / 100
         end

      case ValType( uTmp ) == "O"

         if uTmp:nDtoLin <> 0
            nCalculo    -= nCalculo * uTmp:nDtoLin / 100
         end

         if uTmp:nDtoPrm <> 0
            nCalculo    -= nCalculo * uTmp:nDtoPrm / 100
         end

   end



   nCalculo       *= nTotNPedPrv( uTmp )

   if nRec <> nil
      nCalculo    := Round( nCalculo, nRec )
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nTotIPedPrv( dbfLin, nDec, nRouDec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( dbfLin == nil, dbfLin := D():Get( "PedPrvL", nView ), ) ;
   If( nDec == nil, nDec := 0, ) ;
   If( nRouDec == nil, nRouDec := 0, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := Round( ( dbfLin )->nValImp, nDec )
   nCalculo          *= nTotNPedPrv( dbfLin )
   nCalculo          := Round( nCalculo / nVdv, nRouDec )

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )







FUNCTION nDtoLPedPrv( cPedPrvL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cPedPrvL == nil, cPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cPedPrvL )->nDtoLin <> 0

      nCalculo          := nTotUPedPrv( cPedPrvL, nDec ) * nTotNPedPrv( cPedPrvL )





      nCalculo          := nCalculo * ( cPedPrvL )->nDtoLin / 100


      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )






FUNCTION nPrmLPedPrv( cPedPrvL, nDec, nRou, nVdv )

   local nCalculo       := 0

   If( cPedPrvL == nil, cPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDouDiv(), ) ;
   If( nRou == nil, nRou := nRouDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   if ( cPedPrvL )->nDtoPrm <> 0

      nCalculo          := nTotUPedPrv( cPedPrvL, nDec ) * nTotNPedPrv( cPedPrvL )





      if ( cPedPrvL )->nDtoLin <> 0
         nCalculo       -= nCalculo * ( cPedPrvL )->nDtoLin / 100
      end

      nCalculo          := nCalculo * ( cPedPrvL )->nDtoPrm / 100

      if nVdv <> 0
         nCalculo       := nCalculo / nVdv
      end

      if nRou <> nil
         nCalculo       := Round( nCalculo, nRou )
      end

   end

RETURN ( nCalculo )



FUNCTION nIvaLPedPrv( uPedPrvL, nDec, nRec, nVdv, cPouDiv )

   local nCalculo

   If( uPedPrvL == nil, uPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nRec == nil, nRec := nRinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotLPedPrv( uPedPrvL, nDec, nRec, nVdv, cPouDiv )

   nCalculo          := Round( nCalculo * ( uPedPrvL )->nIva / 100, nRec )

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nImpLPedPrv( uPedPrvT, uPedPrvL, nDec, nRec, nVdv, lIva, cPouDiv )

   local nCalculo

   If( uPedPrvT == nil, uPedPrvT := D():PedidosProveedores( nView ), ) ;
   If( uPedPrvL == nil, uPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;
   If( nDec == nil, nDec := nDinDiv(), ) ;
   If( nRec == nil, nRec := nRinDiv(), ) ;
   If( nVdv == nil, nVdv := 1, ) ;
   If( lIva == nil, lIva := .F., ) ;

   nCalculo          := nTotLPedPrv( uPedPrvL, nDec, nRec, nVdv )

   if ValType( uPedPrvT ) == "A"
      nCalculo    -= Round( nCalculo * uPedPrvT[ 22 ]  / 100, nRec )
      nCalculo    -= Round( nCalculo * uPedPrvT[ 24    ]  / 100, nRec )
      nCalculo    -= Round( nCalculo * uPedPrvT[ 33 ]  / 100, nRec )
      nCalculo    -= Round( nCalculo * uPedPrvT[ 35 ]  / 100, nRec )
   else
      nCalculo    -= Round( nCalculo * ( uPedPrvT )->nDtoEsp / 100, nRec )
      nCalculo    -= Round( nCalculo * ( uPedPrvT )->nDpp    / 100, nRec )
      nCalculo    -= Round( nCalculo * ( uPedPrvT )->nDtoUno / 100, nRec )
      nCalculo    -= Round( nCalculo * ( uPedPrvT )->nDtoDos / 100, nRec )
   end

   if lIva .AND. ( D():PedidosProveedoresLineas( nView ) )->nIva <> 0
      nCalculo    += nCalculo * ( uPedPrvL )->nIva / 100
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nBrtLPedPrv( uTmpLin, nDec, nRec, nVdv, cPorDiv )

   local nCalculo    := 0

   If( nDec == nil, nDec := 2, ) ;
   If( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotUPedPrv( uTmpLin, nDec, nVdv, cPorDiv )
   nCalculo          *= nTotNPedPrv( uTmpLin )

   nCalculo          := Round( nCalculo / nVdv, nRec )

Return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION mkPedPrv( cPath, lAppend, cPathOld, oMeter, bFor )

   local oBlock
   local oError
   local oldPedPrvT
   local oldPedPrvL
   local oldPedPrvI
   local oldPedPrvD

   If( lAppend == nil, lAppend := .F., ) ;
   If( bFor == nil, bFor := {|| .T. }, ) ;

   if oMeter <> NIL
      oMeter:cText   := "Generando bases"
      SysRefresh()
   end

   createFiles( cPath )

   rxPedPrv( cPath, cLocalDriver() )

   if lAppend .AND. lIsDir( cPathOld )

      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      dbUseArea( .T., cDriver(), cPath + "PedProvT.Dbf", cCheckArea( "PedProvT", @dbfPedPrvT ), .F. )
      if !( dbfPedPrvT )->( neterr() )
         ( dbfPedPrvT )->( ordListAdd( cPath + "PedProvT.Cdx" ) )
      end

      dbUseArea( .T., cDriver(), cPath + "PedProvL.Dbf", cCheckArea( "PedProvL", @dbfPedPrvL ), .F. )
      if !( dbfPedPrvL )->( neterr() )
         ( dbfPedPrvL )->( ordListAdd( cPath + "PedProvL.Cdx" ) )
      end

      dbUseArea( .T., cDriver(), cPath + "PedPrvI.Dbf", cCheckArea( "PedPrvI", @dbfPedPrvI ), .F. )
      if !( dbfPedPrvI )->( neterr() )
         ( dbfPedPrvI )->( ordListAdd( cPath + "PedPrvI.Cdx" ) )
      end

      dbUseArea( .T., cDriver(), cPath + "PedPrvD.Dbf", cCheckArea( "PedPrvD", @dbfPedPrvD ), .F. )
      if !( dbfPedPrvD )->( neterr() )
         ( dbfPedPrvD )->( ordListAdd( cPath + "PedPrvD.Cdx" ) )
      end

      dbUseArea( .T., cDriver(), cPathOld + "PedProvT.Dbf", cCheckArea( "PEDPROVT", @oldPedPrvT ), .F. )
      if !( oldPedPrvT )->( neterr() )
         ( oldPedPrvT )->( ordListAdd( cPathOld + "PedProvT.Cdx" ) )
      end

       dbUseArea( .T., cDriver(), cPathOld + "PedProvL.Dbf", cCheckArea( "PEDPROVL", @oldPedPrvL ), .F. )
      if !( oldPedPrvL )->( neterr() )
         ( oldPedPrvL )->( ordListAdd( cPathOld + "PedProvL.Cdx" ) )
      end

      dbUseArea( .T., cDriver(), cPathOld + "PedPrvI.Dbf", cCheckArea( "PEDPRVI", @oldPedPrvI ), .F. )
      if !( oldPedPrvI )->( neterr() )
         ( oldPedPrvI )->( ordListAdd( cPathOld + "PedPrvI.Cdx" ) )
      end

      dbUseArea( .T., cDriver(), cPathOld + "PEDPRVD.DBF", cCheckArea( "PEDPRVD", @oldPedPrvD ), .F. )
      if !( oldPedPrvD )->( neterr() )
         ( oldPedPrvD )->( ordListAdd( cPathOld + "PEDPRVD.CDX" ) )
      end

      while !( oldPedPrvT )->( eof() )

         if eval( bFor, oldPedPrvT )
            dbCopy( oldPedPrvT, dbfPedPrvT, .T. )

            if ( dbfPedPrvT )->( dbRLock() )
               ( dbfPedPrvT )->cTurPed    := Padl( "1", 6 )
               ( dbfPedPrvT )->( dbRUnlock() )
            end

            if ( oldPedPrvL )->( dbSeek( (oldPedPrvT)->CSERPED + Str( (oldPedPrvT)->nNumPed ) + (oldPedPrvT)->cSufPed ) )
               while (oldPedPrvT)->CSERPED + Str( (oldPedPrvL)->nNumPed ) + (oldPedPrvL)->cSufPed == (oldPedPrvT)->CSERPED + Str( (dbfPedPrvT)->nNumPed ) + (dbfPedPrvT)->cSufPed .AND. !(oldPedPrvL)->( eof() )
                  dbCopy( oldPedPrvL, dbfPedPrvL, .T. )
                  ( oldPedPrvL )->( dbSkip() )
               end
            end

            if ( oldPedPrvI )->( dbSeek( ( oldPedPrvT )->cSerPed + Str( ( oldPedPrvT )->nNumPed ) + ( oldPedPrvT )->cSufPed ) )
               while ( oldPedPrvI )->cSerPed + Str( ( oldPedPrvI )->nNumPed ) + ( oldPedPrvI )->cSufPed == ( oldPedPrvT )->cSerPed + Str( ( oldPedPrvT )->nNumPed ) + ( oldPedPrvT )->cSufPed .AND. !( oldPedPrvI )->( eof() )
                  dbCopy( oldPedPrvI, dbfPedPrvI, .T. )
                  ( oldPedPrvI )->( dbSkip() )
               end
            end

            if ( oldPedPrvD )->( dbSeek( ( oldPedPrvT )->cSerPed + Str( ( oldPedPrvT )->nNumPed ) + ( oldPedPrvT )->cSufPed ) )
               while ( oldPedPrvD )->cSerPed + Str( ( oldPedPrvD )->nNumPed ) + ( oldPedPrvD )->cSufPed == ( oldPedPrvT )->cSerPed + Str( ( oldPedPrvT )->nNumPed ) + ( oldPedPrvT )->cSufPed .AND. !( oldPedPrvD )->( eof() )
                  dbCopy( oldPedPrvD, dbfPedPrvD, .T. )
                  ( oldPedPrvD )->( dbSkip() )
               end
            end

         end

         ( oldPedPrvT )->( dbSkip() )

      end

      ( dbfPedPrvT )->( dbCloseArea() )
      ( dbfPedPrvL )->( dbCloseArea() )
      ( dbfPedPrvI )->( dbCloseArea() )
      ( dbfPedPrvD )->( dbCloseArea() )

      ( oldPedPrvT )->( dbCloseArea() )
      ( oldPedPrvL )->( dbCloseArea() )
      ( oldPedPrvI )->( dbCloseArea() )
      ( oldPedPrvD )->( dbCloseArea() )

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )


   end

Return nil



FUNCTION rxPedPrv( cPath, cDriver )

   local cPedPrvT

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;




   if !lExistTable( cPath + "PedProvT.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedProvL.Dbf", cDriver ) .OR.  !lExistTable( cPath + "PedPrvI.Dbf", cDriver )  .OR.  !lExistTable( cPath + "PedPrvD.Dbf", cDriver )
      createFiles( cPath, cDriver )
   end



   fEraseIndex( cPath + "PedProvT.Cdx", cDriver )
   fEraseIndex( cPath + "PedProvL.Cdx", cDriver )
   fEraseIndex( cPath + "PedPrvI.Cdx", cDriver )
   fEraseIndex( cPath + "PedPrvD.Cdx", cDriver )

   dbUseArea( .T., cDriver, cPath + "PedProvT.DBF", cCheckArea( "PedProvT", @cPedPrvT ), .F. )

   if !( cPedPrvT )->( neterr() )
      ( cPedPrvT )->( __dbPack() )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "nNumPed", "cSerPed + str( nNumPed ) + cSufPed", {|| Field->cSerPed + str( Field->nNumPed ) + Field->cSufPed } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "dFecPed", "dFecPed", {|| Field->dFecPed } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "cCodPrv", "cCodPrv", {|| Field->cCodPrv } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "cNomPrv", "cNomPrv", {|| Field->cNomPrv } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "cTurPed", "cTurPed + cCodCaj", {|| Field->cTurPed + Field->cCodCaj } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "cPedCli", "cNumPedCli", {|| Field->cNumPedCli } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "iNumPed", "'01' + cSerPed + str( nNumPed ) + Space(1) + cSufPed", {|| "01" + Field->cSerPed + str( Field->nNumPed ) + Space(1) + Field->cSufPed } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted() }  , , , , , , , , , .T. ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvT.Cdx", "dDesPed", "dFecPed", {|| Field->dFecPed } ) )

      ( cPedPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de proveedores" )
   end

   dbUseArea( .T., cDriver, cPath + "PedProvL.Dbf", cCheckArea( "PEDPROVL", @cPedPrvT ), .F. )
   if !( cPedPrvT )->( neterr() )
      ( cPedPrvT )->( __dbPack() )

      ( cPedPrvT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvL.Cdx", "nNumPed", "cSerPed + Str( nNumPed ) + cSufPed", {|| Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed } ) )

      ( cPedPrvT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvL.Cdx", "cRef", "cRef", {|| Field->cRef }, ) )

      ( cPedPrvT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvL.Cdx", "cPedCliRef", "cPedCli + cRef + cValPr1 + cValPr2", {|| Field->cPedCli + Field->cRef + Field->cValPr1 + Field->cValPr2 } ) )

      ( cPedPrvT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvL.Cdx", "iNumPed", "'01' + cSerPed + Str( nNumPed ) + Space( 1 ) + cSufPed", {|| "01" + Field->cSerPed + Str( Field->nNumPed ) + Space( 1 ) + Field->cSufPed } ) )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedProvL.Cdx", "nPosPrint", "cSerPed + Str( nNumPed ) + cSufPed + Str( nPosPrint )", {|| Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed + Str( Field->nPosPrint ) } ) )

      ( cPedPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de proveedores" )
   end

   dbUseArea( .T., cDriver, cPath + "PedPrvI.Dbf", cCheckArea( "PedPrvI", @cPedPrvT ), .F. )
   if !( cPedPrvT )->( neterr() )
      ( cPedPrvT )->( __dbPack() )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedPrvI.Cdx", "nNumPed", "cSerPed + Str( nNumPed ) + cSufPed", {|| Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed } ) )

      ( cPedPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de proveedores" )
   end

   dbUseArea( .T., cDriver, cPath + "PedPrvD.DBF", cCheckArea( "PedPrvD", @cPedPrvT ), .F. )
   if !( cPedPrvT )->( neterr() )
      ( cPedPrvT )->( __dbPack() )

      ( cPedPrvT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( cPedPrvT )->( ordCreate( cPath + "PedPrvD.Cdx", "nNumPed", "cSerPed + Str( nNumPed ) + cSufPed", {|| Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed } ) )

      ( cPedPrvT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de proveedores" )
   end

Return nil



function aIncPedPrv()

   local aIncPedPrv  := {}

   aAdd( aIncPedPrv, { "cSerPed", "C",    1,  0, "Serie de pedido" ,                 "",                   "", "( cDbfCol )" } )
   aAdd( aIncPedPrv, { "nNumPed", "N",    9,  0, "Número de pedido" ,                "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aIncPedPrv, { "cSufPed", "C",    2,  0, "Sufijo de pedido" ,                "",                   "", "( cDbfCol )" } )
   aAdd( aIncPedPrv, { "cCodTip", "C",    3,  0, "Tipo de incidencia" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aIncPedPrv, { "dFecInc", "D",    8,  0, "Fecha de la incidencia" ,          "",                   "", "( cDbfCol )" } )
   aAdd( aIncPedPrv, { "mDesInc", "M",   10,  0, "Descripción de la incidencia" ,    "",                   "", "( cDbfCol )" } )
   aAdd( aIncPedPrv, { "lListo",  "L",    1,  0, "Lógico de listo" ,                 "",                   "", "( cDbfCol )" } )
   aAdd( aIncPedPrv, { "lAviso",  "L",    1,  0, "Lógico de Aviso" ,                 "",                   "", "( cDbfCol )" } )

return ( aIncPedPrv )



function aPedPrvDoc()

   local aPedPrvDoc  := {}

   aAdd( aPedPrvDoc, { "cSerPed", "C",    1,  0, "Serie de pedido" ,                 "",                   "", "( cDbfCol )" } )
   aAdd( aPedPrvDoc, { "nNumPed", "N",    9,  0, "Número de pedido" ,                "'999999999'",        "", "( cDbfCol )" } )
   aAdd( aPedPrvDoc, { "cSufPed", "C",    2,  0, "Sufijo de pedido" ,                "",                   "", "( cDbfCol )" } )
   aAdd( aPedPrvDoc, { "cNombre", "C",  250,  0, "Nombre del documento" ,            "",                   "", "( cDbfCol )" } )
   aAdd( aPedPrvDoc, { "cRuta",   "M",   10,  0, "Ruta del documento" ,              "",                   "", "( cDbfCol )" } )
   aAdd( aPedPrvDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento" ,     "",                   "", "( cDbfCol )" } )

return ( aPedPrvDoc )



FUNCTION lSnd( oWndBrw, dbf )

   local nRecAct
   local nRecOld              := ( dbf )->( Recno() )

   for each nRecAct in ( oWndBrw:oBrw:aSelected )

      ( dbf )->( dbGoTo( nRecAct ) )

      if dbDialogLock( dbf )

         ( dbf )->lSndDoc     := !( dbf )->lSndDoc

         if ( dbf )->( fieldPos( "dFecChg" ) ) <> 0
            ( dbf )->dFecChg  := Date()
         end
         if ( dbf )->( fieldPos( "cTimChg" ) ) <> 0
            ( dbf )->cTimChg  := Time()
         end

         ( dbf )->( dbUnlock() )

      end

   next

   ( dbf )->( dbGoTo( nRecOld ) )

    oWndBrw:Refresh()

    oWndBrw:SetFocus()

Return nil



Function AppPedPrv( cCodPrv, cCodArt, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedPrv( nil, nil, cCodPrv, cCodArt )
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( .T. )
         WinAppRec( nil, bEdtRec, D():PedidosProveedores( nView ), cCodPrv, cCodArt )
         CloseFiles()
      end

   end

RETURN .T.



FUNCTION EdtPedPrv( nNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedPrv()
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            WinEdtRec( nil, bEdtRec, D():PedidosProveedores( nView ) )
         else
            MsgStop( "No se encuentra pedido" )
         end
         CloseFiles()
      end

   end

RETURN NIL



FUNCTION ZooPedPrv( nNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedPrv()
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            WinZooRec( nil, bEdtRec, D():PedidosProveedores( nView ) )
         else
            MsgStop( "No se encuentra pedido" )
         end
         CloseFiles()
      end

   end

RETURN NIL



FUNCTION DelPedPrv( nNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedPrv()
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            WinDelRec( nil, D():PedidosProveedores( nView ), {|| QuiPedPrv() } )
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            WinDelRec( nil, D():PedidosProveedores( nView ), {|| QuiPedPrv() } )
         else
            MsgStop( "No se encuentra pedido" )
         end
         CloseFiles()
      end

   end

Return nil



FUNCTION PrnPedPrv( nNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedPrv()
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            GenPedPrv( 1 )
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            GenPedPrv( 1 )
         else
            MsgStop( "No se encuentra pedido" )
         end
         CloseFiles()
      end

   end

RETURN NIL



FUNCTION VisPedPrv( nNumPed, lOpenBrowse )

   local nLevel         := Auth():Level( "pedidos_de_proveedores" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedPrv()
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            GenPedPrv( 2 )
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( nNumPed, "nNumPed", D():PedidosProveedores( nView ) )
            GenPedPrv( 2 )
         else
            MsgStop( "No se encuentra pedido" )
         end
         CloseFiles()
      end

   end

Return nil



function nVtaPedPrv( cCodPrv, dDesde, dHasta, cPedPrvT, cPedPrvL, cIva, cDiv )

   local nCon     := 0
   local nRec     := ( cPedPrvT )->( Recno() )





   if ( cPedPrvT )->( dbSeek( cCodPrv ) )

      while ( cPedPrvT )->cCodPrv == cCodPrv .AND. !( cPedPrvT )->( Eof() )


         if ( dDesde == nil .OR. ( cPedPrvT )->dFecPed >= dDesde )    .AND. ( dHasta == nil .OR. ( cPedPrvT )->dFecPed <= dHasta )

            nCon  += nTotPedPrv( ( cPedPrvT )->cSerPed + Str( ( cPedPrvT )->nNumPed ) + ( cPedPrvT )->cSufPed, cPedPrvT, cPedPrvL, cIva, cDiv, nil, cDivEmp(), .F. )

         end

         ( cPedPrvT )->( dbSkip() )

      end

   end

   ( cPedPrvT )->( dbGoTo( nRec ) )

return nCon



FUNCTION aDocPedPrv( dbfDocFld, dbfDocCol )

   local aDoc  := {}





   aAdd( aDoc, { "Empresa",         "EM" } )
   aAdd( aDoc, { "Pedido",          "PP" } )
   aAdd( aDoc, { "Proveedor",       "PR" } )
   aAdd( aDoc, { "Almacen",         "AL" } )
   aAdd( aDoc, { "Divisas",         "DV" } )
   aAdd( aDoc, { "Formas de pago",  "PG" } )

RETURN ( aDoc )



FUNCTION dFecPedPrv( cPedPrv, cPedPrvT )

   local dFecPed  := CtoD("")

   IF ( cPedPrvT )->( dbSeek( cPedPrv ) )
      dFecPed  := ( cPedPrvT )->dFecPed
   end

RETURN ( dFecPed )



FUNCTION nEstPedPrv( cPedPrv, cPedPrvT )

   local nEstPed  := 1

   IF ( cPedPrvT )->( dbSeek( cPedPrv ) )
      nEstPed     := ( cPedPrvT )->nEstado
   end

RETURN ( nEstPed )



FUNCTION cNbrPedPrv( cPedPrv, cPedPrvT )

   local cNomPrv  := ""

   IF ( cPedPrvT )->( dbSeek( cPedPrv ) )
      cNomPrv  := ( cPedPrvT )->cNomPrv
      end

RETURN ( cNomPrv )



function nTotDPedPrv( cCodArt, cPedPrvL, cPedPrvT, cCodAlm )

   local nTotVta  := 0
   local nRecno   := ( cPedPrvL )->( Recno() )

   if ( cPedPrvL )->( dbSeek( cCodArt ) )

      while ( cPedPrvL )->cRef == cCodArt .AND. !( cPedPrvL )->( eof() )

        if cCodAlm <> nil
           if cCodAlm == ( cPedPrvL )->cAlmLin
              nTotVta  += nTotNPedPrv( cPedPrvL )
           end
        else
           nTotVta     += nTotNPedPrv( cPedPrvL )
        end

        ( cPedPrvL )->( dbSkip() )

      end

   end

   ( cPedPrvL )->( dbGoTo( nRecno ) )

return ( nTotVta )



function nTotVPedPrv( cCodArt, cPedPrvL, nDec, nDor )

   local nTotVta  := 0
   local nRecno   := ( cPedPrvL )->( Recno() )

   if ( cPedPrvL )->( dbSeek( cCodArt ) )

      while ( cPedPrvL )->CREF == cCodArt .AND. !( cPedPrvL )->( eof() )

         nTotVta += nTotLPedPrv( cPedPrvL, nDec, nDor )

         ( cPedPrvL )->( dbSkip() )

      end

   end

   ( cPedPrvL )->( dbGoTo( nRecno ) )

return ( nTotVta )



function aItmPedPrv()





















































   local aBase := {  { "cSerPed",   "C",  1,   0, "Serie del pedido",                                            "Serie",                      "", "( cDbf )", nil }, { "nNumPed",   "N",  9,   0, "Número del pedido",                                           "Numero",                     "", "( cDbf )", nil }, { "cSufPed",   "C",  2,   0, "Sufijo del pedido",                                           "Sufijo",                     "", "( cDbf )", nil }, { "cTurPed",   "C",  6,   0, "Sesión del pedido",                                           "Turno",                      "", "( cDbf )", nil }, { "dFecPed",   "D",  8,   0, "Fecha del pedido",                                            "Fecha",                      "", "( cDbf )", nil }, { "cCodPrv",   "C", 12,   0, "Codigo del proveedor",                                        "Cliente",                    "", "( cDbf )", nil }, { "cCodAlm",   "C", 16,   0, "Código de almacen",                                           "Almacen",                    "", "( cDbf )", nil }, { "cCodCaj",   "C",  3,   0, "Código de caja",                                              "Caja",                       "", "( cDbf )", nil }, { "cNomPrv",   "C",150,   0, "Nombre del proveedor",                                        "NombreCliente",              "", "( cDbf )", nil }, { "cDirPrv",   "C",200,   0, "Domicilio del proveedor",                                     "DomicilioCliente",           "", "( cDbf )", nil }, { "cPobPrv",   "C",200,   0, "Población del proveedor",                                     "PoblacionCliente",           "", "( cDbf )", nil }, { "cProPrv",   "C",100,   0, "Provincia del proveedor",                                     "ProvinciaCliente",           "", "( cDbf )", nil }, { "cPosPrv",   "C",  5,   0, "Código postal del proveedor",                                 "CodigoPostalCliente",        "", "( cDbf )", nil }, { "cDniPrv",   "C", 30,   0, "D.N.I. del proveedor",                                        "DniCliente",                 "", "( cDbf )", nil }, { "dFecEnt",   "D",  8,   0, "Fecha de entrada",                                            "",                           "", "( cDbf )", nil }, { "nEstado",   "N",  1,   0, "Estado del pedido",                                           "",                           "", "( cDbf )", nil }, { "cSuped",    "C", 10,   0, "Comentario su pedido",                                        "",                           "", "( cDbf )", nil }, { "cCodPgo",   "C",  2,   0, "Codigo de la forma de pago",                                  "",                           "", "( cDbf )", nil }, { "nBulTos",   "N",  3,   0, "Número de bultos",                                            "",                           "", "( cDbf )", nil }, { "nPorTes",   "N",  6,   0, "Precio de los portes",                                        "",                           "", "( cDbf )", nil }, { "cDtoEsp",   "C", 50,   0, "Descripción descuento especial",                              "",                           "", "( cDbf )", nil }, { "nDtoEsp",   "N",  5,   2, "Descuento factura",                                           "",                           "", "( cDbf )", nil }, { "cDpp",      "C", 50,   0, "Descripción descuento pronto pago",                           "",                           "", "( cDbf )", nil }, { "nDpp",      "N",  5,   2, "Descuento pronto pago",                                       "",                           "", "( cDbf )", nil }, { "lRecargo",  "L",  1,   0, "Recargo de equivalencia",                                     "",                           "", "( cDbf )", nil }, { "cCondEnt",  "C", 20,   0, "Comentarios del pedido",                                      "",                           "", "( cDbf )", nil }, { "cExped",    "C", 20,   0, "Expedición",                                                  "",                           "", "( cDbf )", nil }, { "cObserv",   "M", 10,   0, "Observaciones",                                               "",                           "", "( cDbf )", nil }, { "cDivPed",   "C",  3,   0, "Codigo de divisa",                                            "",                           "", "( cDbf )", nil }, { "nVdvPed",   "N", 10,   4, "Valor de la divisa",                                          "",                           "", "( cDbf )", nil }, { "lSndDoc",   "L",  1,   0, "Enviar documento",                                            "",                           "", "( cDbf )", nil }, { "cDtoUno",   "C", 25,   0, "Descripción de primer descuento personalizado",               "",                           "", "( cDbf )", nil }, { "nDtoUno",   "N",  5,   2, "Porcentaje de primer descuento personalizado",                "",                           "", "( cDbf )", nil }, { "cDtoDos",   "C", 25,   0, "Descripción de segundo descuento personalizado",              "",                           "", "( cDbf )", nil }, { "nDtoDos",   "N",  5,   2, "Porcentaje de segundo descuento personalizado",               "",                           "", "( cDbf )", nil }, { "lCloPed",   "L",  1,   0, "",                                                            "",                           "", "( cDbf )", nil }, { "cCodUsr",   "C",  3,   0, "Código de usuario",                                           "",                           "", "( cDbf )", nil }, { "cNumPedCli","C", 12,   0, "Número del pedido del cliente del que viene",                 "",                           "", "( cDbf )", nil }, { "lImprimido","L",  1,   0, "Lógico de imprimido del documento",                           "",                           "", "( cDbf )", nil }, { "dFecImp",   "D",  8,   0, "Última fecha de impresión del documento",                     "",                           "", "( cDbf )", nil }, { "cHorImp",   "C",  5,   0, "Hora de la última impresión del documento",                   "",                           "", "( cDbf )", nil }, { "dFecChg",   "D",  8,   0, "Fecha de modificación del documento",                         "",                           "", "( cDbf )", nil }, { "cTimChg",   "C",  5,   0, "Hora de modificación del documento",                          "",                           "", "( cDbf )", nil }, { "cCodDlg",   "C",  2,   0, "Código delegación",                                           "",                           "", "( cDbf )", nil }, { "cSituac",   "C", 20,   0, "Situación del documento",                                     "",                           "", "( cDbf )", nil }, { "nRegIva",   "N",  1,   0, "Regimen de " + cImp(),                                        "",                           "", "( cDbf )", nil }, { "nTotNet",   "N", 16,   6, "Total neto",                                                  "TotalNeto",                  "", "( cDbf )", nil }, { "nTotIva",   "N", 16,   6, "Total " + cImp(),                                             "TotalImpuesto",              "", "( cDbf )", nil }, { "nTotReq",   "N", 16,   6, "Total recargo equivalencia",                                  "TotalRecargo",               "", "( cDbf )", nil }, { "nTotPed",   "N", 16,   6, "Total pedido",                                                "TotalDocumento",             "", "( cDbf )", nil }, { "cNumAlb",   "C", 12,   0, "Número del albarán en el se ha agrupado",                     "",                           "", "( cDbf )", nil }, { "lRECC",     "L",  1,   0, "Lógico régimen especial del criterio de caja",                "",                           "", "( cDbf )", nil }, { "cCtrCoste", "C",  9,   0, "Código del centro de coste",                                  "",                           "", "( cDbf )", nil } }

return ( aBase )



Function aCalPedPrv()





























   local aCalPedPrv  := {  { "aTotIva[1,1]",                                              "N", 16,  6, "Bruto primer tipo de " + cImp(),    "cPirDivPed",  "!empty( aTotIva[1,1] ) .and. lEnd" }, { "aTotIva[2,1]",                                              "N", 16,  6, "Bruto segundo tipo de " + cImp(),   "cPirDivPed",  "!empty( aTotIva[2,1] ) .and. lEnd" }, { "aTotIva[3,1]",                                              "N", 16,  6, "Bruto tercer tipo de " + cImp(),    "cPirDivPed",  "!empty( aTotIva[3,1] ) .and. lEnd" }, { "aTotIva[1,2]",                                              "N", 16,  6, "Base primer tipo de " + cImp(),     "cPirDivPed",  "!empty( aTotIva[1,2] ) .and. lEnd" }, { "aTotIva[2,2]",                                              "N", 16,  6, "Base segundo tipo de " + cImp(),    "cPirDivPed",  "!empty( aTotIva[2,2] ) .and. lEnd" }, { "aTotIva[3,2]",                                              "N", 16,  6, "Base tercer tipo de " + cImp(),     "cPirDivPed",  "!empty( aTotIva[3,2] ) .and. lEnd" }, { "aTotIva[1,3]",                                              "N",  5,  2, "Porcentaje primer tipo " + cImp(),  "'@R 99.99%'", "!empty( aTotIva[1,3] ) .and. lEnd" }, { "aTotIva[2,3]",                                              "N",  5,  2, "Porcentaje segundo tipo " + cImp(), "'@R 99.99%'", "!empty( aTotIva[2,3] ) .and. lEnd" }, { "aTotIva[3,3]",                                              "N",  5,  2, "Porcentaje tercer tipo " + cImp(),  "'@R 99.99%'", "!empty( aTotIva[3,3] ) .and. lEnd" }, { "aTotIva[1,4]",                                              "N",  5,  2, "Porcentaje primer tipo RE",   "'@R 99.99%'", "!empty( aTotIva[1,4] ) .and. lEnd" }, { "aTotIva[2,4]",                                              "N",  5,  2, "Porcentaje segundo tipo RE",  "'@R 99.99%'", "!empty( aTotIva[2,4] ) .and. lEnd" }, { "aTotIva[3,4]",                                              "N",  5,  2, "Porcentaje tercer tipo RE",   "'@R 99.99%'", "!empty( aTotIva[3,4] ) .and. lEnd" }, { "round( aTotIva[1,2] * aTotIva[1,3] / 100, nDinDivPed )",    "N", 16,  6, "Importe primer tipo " + cImp(),     "cPinDivPed",  "!empty( aTotIva[1,2] ) .and. lEnd" }, { "round( aTotIva[2,2] * aTotIva[2,3] / 100, nDinDivPed )",    "N", 16,  6, "Importe segundo tipo " + cImp(),    "cPinDivPed",  "!empty( aTotIva[2,2] ) .and. lEnd" }, { "round( aTotIva[3,2] * aTotIva[3,3] / 100, nDinDivPed )",    "N", 16,  6, "Importe tercer tipo " + cImp(),     "cPinDivPed",  "!empty( aTotIva[3,2] ) .and. lEnd" }, { "round( aTotIva[1,2] * aTotIva[1,4] / 100, nDinDivPed )",    "N", 16,  6, "Importe primer RE",           "cPinDivPed",  "!empty( aTotIva[1,2] ) .and. lEnd" }, { "round( aTotIva[2,2] * aTotIva[2,4] / 100, nDinDivPed )",    "N", 16,  6, "Importe segundo RE",          "cPinDivPed",  "!empty( aTotIva[2,2] ) .and. lEnd" }, { "round( aTotIva[3,2] * aTotIva[3,4] / 100, nDinDivPed )",    "N", 16,  6, "Importe tercer RE",           "cPinDivPed",  "!empty( aTotIva[3,2] ) .and. lEnd" }, { "nTotBrt",                                                   "N", 16,  6, "Total bruto",                 "cPirDivPed",  "lEnd" }, { "nTotDto",                                                   "N", 16,  6, "Total descuento",             "cPirDivPed",  "lEnd" }, { "nTotDpp",                                                   "N", 16,  6, "Total descuento pronto pago", "cPirDivPed",  "lEnd" }, { "nTotNet",                                                   "N", 16,  6, "Total neto",                  "cPirDivPed",  "lEnd" }, { "nTotIva",                                                   "N", 16,  6, "Total " + cImp(),                   "cPirDivPed",  "lEnd" }, { "nTotReq",                                                   "N", 16,  6, "Total RE",                    "cPirDivPed",  "lEnd" }, { "nTotPed",                                                   "N", 16,  6, "Total pedido",                "cPirDivPed",  "lEnd" }, { "nImpEuros( nTotPed, (cDbf)->CDIVPED, cDbfDiv )",            "N", 16,  6, "Total pedido (Euros)",        "",            "lEnd" }, { "nImpPesetas( nTotPed, (cDbf)->CDIVPED, cDbfDiv )",          "N", 16,  6, "Total pedido (Pesetas)",      "",            "lEnd" }, { "nPagina",                                                   "N",  2,  0, "Número de página",            "'99'",        "" }, { "lEnd",                                                      "L",  1,  0, "Fin del documento",           "",            "" } }

return ( aCalPedPrv )



function aColPedPrv()

   local aColPedPrv  := {}

   aAdd( aColPedPrv,  { "cSerPed",   "C",  1,   0, "",                                 "Serie",                      "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nNumPed",   "N",  9,   0, "",                                 "Numero",                     "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cSufPed",   "C",  2,   0, "",                                 "Sufijo",                     "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cRef",      "C", 18,   0, "Referencia del artículo",          "Articulo",                   "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cRefPrv",   "C", 18,   0, "Referencia del proveedor",         "CodigoArticuloProveedor",    "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cDetalle",  "C",250,   0, "Nombre del artículo",              "DescripcionArticulo",        "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nIva",      "N",  6,   2, "Porcentaje de " + cImp(),          "PorcentajeImpuesto",         "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nCanPed",   "N", 16,   6, "Cantidad pedida",                  "Cajas",                      "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nUniCaja",  "N", 16,   6, "Unidades por caja",                "Unidades",                   "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nPreDiv",   "N", 16,   6, "Precio",                           "PrecioVenta",                "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nCanEnt",   "N", 16,   6, "Cajas recibidas",                  "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nUniEnt",   "N", 16,   6, "Unidades recibidas",               "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cUnidad",   "C",  2,   0, cNombreUnidades(),                  "UnidadMedicion",             "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "mLngDes",   "M", 10,   0, "Descripción larga",                "DescripcionAmpliada",        "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nDtoLin",   "N",  6,   2, "Descuento en lineas",              "DescuentoPorcentual",        "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nDtoPrm",   "N",  6,   2, "Descuento pormociones",            "DescuentoPromocion",         "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nDtoRap",   "N",  6,   2, "Descuento por rappels",            "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cCodPr1",   "C", 20,   0, "Código de la primera propiedad",   "CodigoPropiedad1",           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cCodPr2",   "C", 20,   0, "Código de la segunda propiedad",   "CodigoPropiedad2",           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cValPr1",   "C", 20,   0, "Valor de la primera propiedad",    "ValorPropiedad1",            "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cValPr2",   "C", 20,   0, "Valor de la segunda propiedad",    "ValorPropiedad2",            "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nFacCnv",   "N", 13,   4, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nCtlStk",   "N",  1,   0, "Control de stock (1,2,3)",         "ControlStock",               "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cAlmLin" ,  "C", 16,   0, "Código de almacén" ,               "Almacen",                    "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lLote",     "L",  1,   0, "",                                 "LogicoLote",                 "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nLote",     "N",  9,   0, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cLote",     "C", 64,   0, "Número de lote",                   "Lote",                       "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nNumLin",   "N",  4,   0, "Número de la línea",               "NumeroLinea",                "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nUndKit",   "N", 16,   6, "Unidades del producto kit",        "UnidadesKit",                "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lKitArt",   "L",  1,   0, "Línea con escandallo",             "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lKitChl",   "L",  1,   0, "Línea pertenciente a escandallo",  "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lKitPrc",   "L",  1,   0, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lImpLin",   "L",  1,   0, "Imprimir linea",                   "Imprimir",                   "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lControl",  "L",  1,   0, "" ,                                "Control",                    "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "mNumSer",   "M", 10,   0, "" ,                                "NumerosSerie",               "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lAnulado",  "L",  1,   0, "Anular linea",                     "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "dAnulado",  "D",  8,   0, "Fecha de anulación",               "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "mAnulado",  "M",100,   0, "Motivo anulación",                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cCodFam",   "C", 16,   0, "Código de familia",                "Familia",                    "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cGrpFam",   "C",  3,   0, "Código del grupo de familia",      "GrupoFamilia",               "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nReq",      "N", 16,   6, "Recargo de equivalencia",          "PorcentajeRecargo",          "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "mObsLin",   "M", 10,   6, "Observaciones de la linea",        "Observaciones",              "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cPedCli",   "C", 12,   0, "Número del pedido del cliente",    "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nPvpRec",   "N", 16,   6, "Precio de venta recomendado",      "PrecioVentaRecomendado",     "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nNumMed",   "N",  1,   0, "Número de mediciones",             "NumeroMediciones",           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nMedUno",   "N", 16,   6, "Primera unidad de medición",       "Medicion1",                  "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nMedDos",   "N", 16,   6, "Segunda unidad de medición",       "Medicion2",                  "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nMedTre",   "N", 16,   6, "Tercera unidad de medición",       "Medicion3",                  "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nStkAct",   "N", 16,   6, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nStkMin",   "N", 16,   6, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nPdtRec",   "N", 16,   6, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nConRea",   "N", 16,   6, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nConSem",   "N", 16,   6, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nConQui",   "N", 16,   6, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nConMes",   "N", 16,   6, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nEstado",   "N",  1,   0, "Estado del pedido",                "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lFromImp",  "L",  1,   0, "",                                 "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nBultos",   "N", 16,   6, "Numero de bultos en líneas",       "NumeroBultos",               "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cFormato",  "C",100,   0, "Formato de compra",                "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cCodImp",   "C",  3,   0, "Código de impuesto especial",      "ImpuestoEspecial",           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nValImp",   "N", 16,   6, "Importe de impuesto especial",     "ImporteImpuestoEspecial",    "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "lLabel",    "L",  1,   0, "Lógico para marca de etiqueta",    "LogicoEtiqueta",             "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nLabel",    "N",  6,   0, "Unidades de etiquetas a imprimir", "NumeroEtiqueta",             "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cRefAux",   "C", 18,   0, "Referencia auxiliar",              "CodigoAuxiliar1",            "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cRefAux2",  "C", 18,   0, "Segunda referencia auxiliar",      "CodigoAuxiliar2",            "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "nPosPrint", "N",  4,   0, "Posición de impresión",            "PosicionImpresion",          "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cCtrCoste", "C",  9,   0, "Codig del centro de coste" ,       "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cTipCtr",   "C", 20,   0, "Tipo tercero centro de coste",     "",                           "", "(cDbfCol)", nil } )
   aAdd( aColPedPrv,  { "cTerCtr",   "C", 20,   0, "Tercero centro de coste" ,         "",                           "", "(cDbfCol)", nil } )

Return ( aColPedPrv )



function aCocPedPrv()




   local aCocPedPrv  := {  { "Descrip( cDbfCol )",                                           "C", 50, 0, "Detalle del artículo",       "",            "Descripción", "" }, { "nTotNPedPrv( cDbfCol )",                                       "N", 16, 6, "Total unidades",             "cPicUndPed",  cNombreUnidades(),    "" }, { "nTotUPedPrv( cDbfCol, nDinDivPed, nVdvDivPed )",               "N", 16, 6, "Precio unitario de pedido",  "cPinDivPed",  "Precio",      "" }, { "nTotLPedPrv( cDbfCol, nDinDivPed, nDirDivPed, nVdvDivPed )",   "N", 16, 6, "Total linea de pedido",      "cPirDivPed",  "Total",       "" } }

return ( aCocPedPrv )



Static Function nClrText( dbfTmpLin )

Return ( if ( ( dbfTmpLin )->lKitChl, 8421504, 0 ) )



Function EdtNumSer( mNumSer, nTotUnd, nMode )

   local oDlg
   local oBrwSer
   local oProSer
   local nProSer
   local aNumSer
   local cPreFix  := Space( 18 )
   local oSerIni
   local nSerIni  := 0
   local oSerFin
   local nSerFin  := 0
   local oNumGen
   local nNumGen  := 0

   if nTotUnd == 0
      MsgStop( "No hay unidades para asignar números de serie." )
      Return ( mNumSer )
   end

   If( nMode == nil, nMode := 1, ) ;

   nTotUnd        := abs( nTotUnd )
   aNumSer        := Afill( Array( nTotUnd ), Space( 30 ) )

   if nMode <> 1
      aMem2Ser( mNumSer, nTotUnd )
   end

   oDlg = TDialog():New(,,,,, "VtaNumSer",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, nTotUnd, nTotUnd:= u ) }, oDlg,, MasUnd(),,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cPreFix, cPreFix:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      oSerIni := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nSerIni, nSerIni:= u ) }, oDlg,, "99999999999999999999", {||    ( oSerFin:cText( nSerIni + nTotUnd ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      oSerFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nSerFin, nSerFin:= u ) }, oDlg,, "99999999999999999999",,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      oNumGen := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nNumGen, nNumGen:= u ) }, oDlg,, "99999999999999999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 500, {||( GenNumSer( cPreFix, aNumSer, nSerIni, nNumGen, oBrwSer ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )

      oBrwSer                 := IXBrowse():New( oDlg )

      oBrwSer:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwSer:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwSer:lHScroll        := .F.
      oBrwSer:lRecordSelector := .T.
      oBrwSer:lFastEdit       := .T.

      oBrwSer:nMarqueeStyle   := 3

      oBrwSer:SetArray( aNumSer, , , .F. )

      oBrwSer:nColSel         := 2

      with object ( oBrwSer:addCol() )
         :cHeader       := "N."
         :bStrData      := {|| Trans( oBrwSer:nArrayAt, "999999999" ) }
         :nWidth        := 60
         :nDataStrAlign := 1
         :nHeadStrAlign := 1
      end

      with object ( oBrwSer:addCol() )
         :cHeader       := "Serie"
         :bEditValue    := {|| aNumSer[ oBrwSer:nArrayAt ] }
         :nWidth        := 240
         :nEditType     := 1
         :bOnPostEdit   := {|o,x| aNumSer[ oBrwSer:nArrayAt ] := x }
      end

      oBrwSer:CreateFromResource( 150 )

      oProSer     := TApoloMeter():ReDefine( 240, { | u | if( pCount() == 0, nProSer, nProSer := u ) }, 10, oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )





      TButton():ReDefine( 510, {||( mNumSer   := mSer2Mem( aNumSer, nTotUnd ), oDlg:End() )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 520, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

      oDlg:AddFastKey( 116, {|| mNumSer := mSer2Mem( aNumSer, nTotUnd ), oDlg:End() } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( mNumSer )



Function GenNumSer( cPreFix, aNumSer, nSerIni, nNumGen, oBrwSer )

   local n
   local nChg  := 1

   CursorWait()

   if empty( nNumGen )
      aEval( aNumSer, {| a, n | aNumSer[ n ] := Padr( Rtrim( cPreFix ) + Ltrim( Str( nSerIni + n - 1 ) ), 30 ) } )
   else
      for n := 1 to len( aNumSer )
         if empty( aNumSer[ n ] )
            aNumSer[ n ]                     := Padr( Rtrim( cPreFix ) + Ltrim( Str( nSerIni + nChg - 1 ) ), 30 )
            nChg++
         end
         if nChg == nNumGen
            exit
         end
      next
   end

   CursorWE()

   if !empty( oBrwSer )
      oBrwSer:Refresh()
   end

Return nil



Function aMem2Ser( mNumSer, nTotUnd )

   local n
   local nPosSer
   local aMemSer

   CursorWait()

   aMemSer           := Afill( Array( nTotUnd ), Space( 40 ) )

   for n := 1 to nTotUnd

      nPosSer        := At( ",", mNumSer )
      if nPosSer <> 0
         aMemSer[ n ]:= Padr( SubStr( mNumSer, 1, nPosSer - 1 ), 40 )
         mNumSer     := SubStr( mNumSer, nPosSer + 1 )
      end
   next

   CursorWE()

Return ( aMemSer )



Function SynPedPrv( cPath )

   local oError
   local oBlock
   local aTotPed
   local nEstado
   local nEntregado

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., cDriver(), cPath + "PedProvT.Dbf", cCheckArea( "PedPROVT", @dbfPedPrvT ), .F. )
   if !lAIS(); ordListAdd( cPath + "PedProvT.Cdx" ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPath + "PedProvL.Dbf", cCheckArea( "PedPROVL", @dbfPedPrvL ), .F. )
   if !lAIS(); ordListAdd( cPath + "PedProvL.Cdx" ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPath + "PedPrvI.Dbf", cCheckArea( "PedPRVI", @dbfPedPrvI ), .F. )
   if !lAIS(); ordListAdd( cPath + "PedPrvI.Cdx" ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatEmp() + "FAMILIAS.DBF", cCheckArea( "FAMILIAS", @dbfFamilia ), .F. )
   if !lAIS(); ordListAdd( cPatEmp() + "FAMILIAS.CDX" ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatEmp() + "ARTICULO.DBF", cCheckArea( "ARTICULO", @dbfArticulo ), .F. )
   if !lAIS(); ordListAdd( cPatEmp() + "ARTICULO.CDX" ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatEmp() + "PROVART.DBF", cCheckArea( "PROVART", @dbfArtPrv ), .F. )
   if !lAIS(); ordListAdd( cPatEmp() + "PROVART.CDX" ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatDat() + "TIVA.DBF", cCheckArea( "TIVA", @dbfIva ), .T. )
   if !lAIS(); ordListAdd( cPatDat() + "TIVA.CDX" ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatDat() + "DIVISAS.DBF", cCheckArea( "DIVISAS", @dbfDiv ), .T. )
   if !lAIS(); ordListAdd( cPatDat() + "DIVISAS.CDX" ); else ; ordSetFocus( 1 ) ; end

   ( dbfPedPrvT )->( OrdSetFocus( 0 ) )
   ( dbfPedPrvT )->( dbGoTop() )

   while !( dbfPedPrvT )->( eof() )

      if empty( ( dbfPedPrvT )->cSufPed )
         ( dbfPedPrvT )->cSufPed    := "00"
      end

      if empty( ( dbfPedPrvT )->cCodCaj )
         ( dbfPedPrvT )->cCodCaj    := "000"
      end

      if !empty( ( dbfPedPrvT )->cNumPedCli ) .AND. Len( AllTrim( ( dbfPedPrvT )->cNumPedCli ) ) <> 12
         ( dbfPedPrvT )->cNumPedCli := AllTrim( ( dbfPedPrvT )->cNumPedCli ) + "00"
      end

      if !empty( ( dbfPedPrvT )->cNumAlb ) .AND. Len( AllTrim( ( dbfPedPrvT )->cNumAlb ) ) <> 12
         ( dbfPedPrvT )->cNumAlb    := AllTrim( ( dbfPedPrvT )->cNumAlb ) + "00"
      end





      if ( dbfPedPrvT )->nTotPed == 0

         aTotPed                    := aTotPedPrv( ( dbfPedPrvT )->cSerPed + Str( ( dbfPedPrvT )->nNumPed ) + ( dbfPedPrvT )->cSufPed, dbfPedPrvT, dbfPedPrvL, dbfIva, dbfDiv, ( dbfPedPrvT )->cDivPed )

         ( dbfPedPrvT )->nTotNet    := aTotPed[1]
         ( dbfPedPrvT )->nTotIva    := aTotPed[2]
         ( dbfPedPrvT )->nTotReq    := aTotPed[3]
         ( dbfPedPrvT )->nTotPed    := aTotPed[4]

      end

      ( dbfPedPrvT )->( dbSkip() )

   end

   ( dbfPedPrvT )->( OrdSetFocus( 1 ) )



   ( dbfPedPrvL )->( OrdSetFocus( 0 ) )
   ( dbfPedPrvL )->( dbGoTop() )

   while !( dbfPedPrvL )->( eof() )

      if empty( ( dbfPedPrvL )->cSufPed )
         ( dbfPedPrvL )->cSufPed := "00"
      end

      if !empty( ( dbfPedPrvL )->cPedCli ) .AND. Len( AllTrim( ( dbfPedPrvL )->cPedCli ) ) <> 12
         ( dbfPedPrvL )->cPedCli := AllTrim( ( dbfPedPrvL )->cPedCli ) + "00"
      end

      if empty( ( dbfPedPrvL )->cLote ) .AND. !empty( ( dbfPedPrvL )->nLote )
         ( dbfPedPrvL )->cLote   := AllTrim( Str( ( dbfPedPrvL )->nLote ) )
      end

      if !empty( ( dbfPedPrvL )->cRef ) .AND. empty( ( dbfPedPrvL )->cCodFam )
         ( dbfPedPrvL )->cCodFam := RetFamArt( ( dbfPedPrvL )->cRef, dbfArticulo )
      end

      if !empty( ( dbfPedPrvL )->cRef ) .AND. !empty( ( dbfPedPrvL )->cGrpFam )
         ( dbfPedPrvL )->cGrpFam := cGruFam( ( dbfPedPrvL )->cCodFam, dbfFamilia )
      end

      if empty( ( dbfPedPrvL )->nReq )
         ( dbfPedPrvL )->nReq    := nPReq( dbfIva, ( dbfPedPrvL )->nIva )
      end

      if empty( ( dbfPedPrvL )->cAlmLin )
         ( dbfPedPrvL )->cAlmLin := RetFld( ( dbfPedPrvL )->cSerPed + Str( ( dbfPedPrvL )->nNumPed ) + ( dbfPedPrvL )->cSufPed, dbfPedPrvT, "cCodAlm" )
      end







































      if empty( ( dbfPedPrvL )->nPosPrint )
         ( dbfPedPrvL )->nPosPrint    := ( dbfPedPrvL )->nNumLin
      end

      ( dbfPedPrvL )->( dbSkip() )

      SysRefresh()

   end

   ( dbfPedPrvL )->( OrdSetFocus( 1 ) )



   ( dbfPedPrvI )->( OrdSetFocus( 0 ) )
   ( dbfPedPrvI )->( dbGoTop() )

   while !( dbfPedPrvI )->( eof() )

      if empty( ( dbfPedPrvI )->cSufPed )
         ( dbfPedPrvI )->cSufPed := "00"
      end

      ( dbfPedPrvI )->( dbSkip() )

      SysRefresh()

   end

   ( dbfPedPrvI )->( OrdSetFocus( 1 ) )

   RECOVER USING oError

      msgStop( "Imposible sincronizar pedidos de proveedores" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !empty( dbfPedPrvT ) .AND. ( dbfPedPrvT )->( Used() )
      ( dbfPedPrvT )->( dbCloseArea() )
   end

   if !empty( dbfPedPrvL ) .AND. ( dbfPedPrvL )->( Used() )
      ( dbfPedPrvL )->( dbCloseArea() )
   end

   if !empty( dbfPedPrvI ) .AND. ( dbfPedPrvI )->( Used() )
      ( dbfPedPrvI )->( dbCloseArea() )
   end

   if !empty( dbfArticulo ) .AND. ( dbfArticulo )->( Used() )
      ( dbfArticulo )->( dbCloseArea() )
   end

   if !empty( dbfFamilia ) .AND. ( dbfFamilia )->( Used() )
      ( dbfFamilia )->( dbCloseArea() )
   end

   if !empty( dbfArtPrv ) .AND. ( dbfArtPrv )->( Used() )
      ( dbfArtPrv )->( dbCloseArea() )
   end

   if !empty( dbfIva ) .AND. ( dbfIva )->( Used() )
      ( dbfIva )->( dbCloseArea() )
   end

   if !empty( dbfDiv ) .AND. ( dbfDiv )->( Used() )
      ( dbfDiv )->( dbCloseArea() )
   end

return nil








_HB_CLASS TPedidosProveedorSenderReciver ; function TPedidosProveedorSenderReciver ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPedidosProveedorSenderReciver", iif( .T., { @TSenderReciverItem() }, { @HBObject() } ), @TPedidosProveedorSenderReciver() ) ) ;

   _HB_MEMBER { cFileName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileName"}, .F. )

   _HB_MEMBER CreateData(); oClass:AddMethod( "CreateData", @TPedidosProveedorSenderReciver_CreateData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RestoreData(); oClass:AddMethod( "RestoreData", @TPedidosProveedorSenderReciver_RestoreData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SendData(); oClass:AddMethod( "SendData", @TPedidosProveedorSenderReciver_SendData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReciveData(); oClass:AddMethod( "ReciveData", @TPedidosProveedorSenderReciver_ReciveData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Process(); oClass:AddMethod( "Process", @TPedidosProveedorSenderReciver_Process(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validateRecepcion(); oClass:AddMethod( "validateRecepcion", @TPedidosProveedorSenderReciver_validateRecepcion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPedidosProveedorSenderReciver ;



static FUNCTION TPedidosProveedorSenderReciver_CreateData( ) ; local Self AS CLASS TPedidosProveedorSenderReciver := QSelf() AS CLASS TPedidosProveedorSenderReciver

   local oBlock
   local oError
   local lSnd        := .F.
   local dbfPedPrvT
   local dbfPedPrvL
   local tmpPedPrvT
   local tmpPedPrvL

   if ::oSender:lServer
      ::cFileName         := "PedPrv" + win_uuidcreatestring() + ".All"
   else
      ::cFileName         := "PedPrv" + win_uuidcreatestring() + "." + RetSufEmp()
   end

   ::oSender:SetText( "Enviando pedidos a proveedores" )

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedProvT.Dbf" ), ( cCheckArea( "PEDPROVT", @dbfPedPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedProvL.Dbf" ), ( cCheckArea( "PEDPROVL", @dbfPedPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedProvL.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end



   mkPedPrv( cPatSnd() )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedProvT.Dbf" ), ( cCheckArea( "PEDPROVT", @tmpPedPrvT ) ), .T., .F. )
   ( tmpPedPrvT )->( ordListAdd( ( cPatSnd() + "PedProvT.Cdx" ) ) )

   dbUseArea( .T., ( cLocalDriver() ), ( cPatSnd() + "PedProvL.Dbf" ), ( cCheckArea( "PEDPROVL", @tmpPedPrvL ) ), .T., .F. )
   ( tmpPedPrvL )->( ordListAdd( ( cPatSnd() + "PedProvL.Cdx" ) ) )

   if !empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( dbfPedPrvT )->( lastrec() )
   end

   while !( dbfPedPrvT )->( eof() )

      if ( dbfPedPrvT )->lSndDoc

         lSnd  := .T.

         dbPass( dbfPedPrvT, tmpPedPrvT, .T. )

         ::oSender:SetText( ( dbfPedPrvT )->cSerPed + "/" + AllTrim( Str( ( dbfPedPrvT )->nNumPed ) ) + "/" + Alltrim( ( dbfPedPrvT )->cSufPed ) + "; " + Dtoc( ( dbfPedPrvT )->dFecPed ) + "; " + AllTrim( ( dbfPedPrvT )->cCodPrv ) + "; " + ( dbfPedPrvT )->cNomPrv )

         if ( dbfPedPrvL )->( dbSeek( ( dbfPedPrvT )->cSerPed + Str( ( dbfPedPrvT )->nNumPed ) + ( dbfPedPrvT )->cSufPed ) )

            while ( ( dbfPedPrvL )->cSerPed + Str( ( dbfPedPrvL )->nNumPed ) + ( dbfPedPrvL )->cSufPed ) == ( ( dbfPedPrvT )->cSerPed + Str( ( dbfPedPrvT )->nNumPed ) + ( dbfPedPrvT )->cSufPed ) .AND. !( dbfPedPrvL )->( eof() )

               dbPass( dbfPedPrvL, tmpPedPrvL, .T. )

               ( dbfPedPrvL )->( dbSkip() )

            end

         end

      end

      ( dbfPedPrvT )->( dbSkip() )

      if !empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( dbfPedPrvT )->( OrdKeyNo() ) )
      end

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfPedPrvT )->( dbCloseArea() )
   ( dbfPedPrvL )->( dbCloseArea() )
   ( tmpPedPrvT )->( dbCloseArea() )
   ( tmpPedPrvL )->( dbCloseArea() )



   if lSnd

      ::oSender:SetText( "Comprimiendo pedidos de proveedores" )

      if ::oSender:lZipData( ::cFileName )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay pedidos de proveedores para enviar" )

   end

Return ( Self )






static FUNCTION TPedidosProveedorSenderReciver_RestoreData( ) ; local Self AS CLASS TPedidosProveedorSenderReciver := QSelf() AS CLASS TPedidosProveedorSenderReciver

   local oBlock
   local oError
   local cPedPrvT

   if ::lSuccesfullSend


      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedProvT.Dbf" ), ( cCheckArea( "PEDPROVT", @cPedPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "PedProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         lSelectAll( nil, cPedPrvT, "lSndDoc", .F., .T., .F. )

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

         ( cPedPrvT )->( dbCloseArea() )

   end

Return ( Self )



static FUNCTION TPedidosProveedorSenderReciver_SendData( ) ; local Self AS CLASS TPedidosProveedorSenderReciver := QSelf() AS CLASS TPedidosProveedorSenderReciver

   if File( cPatOut() + ::cFileName )

      if ::oSender:SendFiles( cPatOut() + ::cFileName, ::cFileName )
         ::lSuccesfullSend := .T.
         ::oSender:SetText( "Fichero enviado " + ::cFileName )
      else
         ::oSender:SetText( "ERROR al enviar fichero" )
      end

   end

Return ( Self )



static FUNCTION TPedidosProveedorSenderReciver_ReciveData( ) ; local Self AS CLASS TPedidosProveedorSenderReciver := QSelf() AS CLASS TPedidosProveedorSenderReciver

   local n
   local aExt

   aExt     := ::oSender:aExtensions()



   ::oSender:SetText( "Recibiendo pedidos de proveedores" )

   for n := 1 to len( aExt )
      ::oSender:GetFiles( "PedPrv*." + aExt[ n ], cPatIn() )
   next

   ::oSender:SetText( "Pedidos de proveedores recibidos" )

Return Self



static FUNCTION TPedidosProveedorSenderReciver_Process( ) ; local Self AS CLASS TPedidosProveedorSenderReciver := QSelf() AS CLASS TPedidosProveedorSenderReciver

   local m
   local oBlock
   local oError
   local dbfPedPrvT
   local dbfPedPrvL
   local tmpPedPrvT
   local tmpPedPrvL
   local aFiles      := Directory( cPatIn() + "PedPrv*.*" )



   for m := 1 to len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE



      if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )

         dbUseArea(.T., cLocalDriver(), cPatSnd() + "PedProvT.Dbf", cCheckArea( "PEDPROVT", @tmpPedPrvT ), .F., .T. )
         ( tmpPedPrvT )->( ordListAdd( cPatSnd() + "PedProvT.Cdx"  ) )

         dbUseArea(.T., cLocalDriver(), cPatSnd() + "PedProvL.Dbf", cCheckArea( "PEDPROVL", @tmpPedPrvL ), .F., .T. )
         ( tmpPedPrvL )->( ordListAdd( cPatSnd() + "PedProvL.Cdx"  ) )

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedProvT.Dbf" ), ( cCheckArea( "PEDPROVT", @dbfPedPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "PedProvT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedProvL.Dbf" ), ( cCheckArea( "PEDPROVL", @dbfPedPrvL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "PedProvL.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         ( tmpPedPrvT )->( dbGoTop() )
         while !( tmpPedPrvT )->( eof() )

            if ::validateRecepcion( tmpPedPrvT, dbfPedPrvT )

               while ( dbfPedPrvT )->( dbseek( ( tmpPedPrvT )->cSerPed + Str( ( tmpPedPrvT )->nNumPed ) + ( tmpPedPrvT )->cSufPed ) )
                  dbLockDelete( dbfPedPrvT )
               end

               while ( dbfPedPrvT )->( dbseek( ( tmpPedPrvT )->cSerPed + Str( ( tmpPedPrvT )->nNumPed ) + ( tmpPedPrvT )->cSufPed ) )
                  dbLockDelete( dbfPedPrvT )
               end

               dbPass( tmpPedPrvT, dbfPedPrvT, .T. )

               if dbLock( dbfPedPrvT )
                  ( dbfPedPrvT )->lSndDoc := .F.
                  ( dbfPedPrvT )->( dbUnLock() )
               end

               ::oSender:SetText( "Añadido : " + ( tmpPedPrvT )->cSerPed + "/" + AllTrim( Str( ( tmpPedPrvT )->nNumPed ) ) + "/" + AllTrim( ( tmpPedPrvT )->cSufPed ) + "; " + Dtoc( ( tmpPedPrvT )->dFecPed ) + "; " + AllTrim( ( tmpPedPrvT )->cCodPrv ) + "; " + ( tmpPedPrvT )->cNomPrv )

               if ( tmpPedPrvL )->( dbSeek( ( tmpPedPrvT )->CSERPED + Str( ( tmpPedPrvT )->nNumPed ) + ( tmpPedPrvT )->cSufPed ) )

                  while ( ( tmpPedPrvL )->CSERPED + Str( ( tmpPedPrvL )->nNumPed ) + ( tmpPedPrvL )->cSufPed ) == ( ( tmpPedPrvT )->CSERPED + Str( ( tmpPedPrvT )->nNumPed ) + ( tmpPedPrvT )->cSufPed ) .AND. !( tmpPedPrvL )->( eof() )

                     dbPass( tmpPedPrvL, dbfPedPrvL, .T. )

                     ( tmpPedPrvL )->( dbSkip() )

                  end

               end

            else

               ::oSender:SetText( "Desestimado : " + ( tmpPedPrvT )->cSerPed + "/" + AllTrim( Str( ( tmpPedPrvT )->nNumPed ) ) + "/" + AllTrim( ( tmpPedPrvT )->cSufPed ) + "; " + Dtoc( ( tmpPedPrvT )->dFecPed ) + "; " + AllTrim( ( tmpPedPrvT )->cCodPrv ) + "; " + ( tmpPedPrvT )->cNomPrv )

            end

            ( tmpPedPrvT )->( dbSkip() )

         end

         ( dbfPedPrvT )->( dbCloseArea() )
         ( dbfPedPrvL )->( dbCloseArea() )
         ( tmpPedPrvT )->( dbCloseArea() )
         ( tmpPedPrvL )->( dbCloseArea() )

         ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

      end

      RECOVER USING oError

         ( dbfPedPrvT )->( dbCloseArea() )
         ( dbfPedPrvL )->( dbCloseArea() )
         ( tmpPedPrvT )->( dbCloseArea() )
         ( tmpPedPrvL )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next

Return Self



static FUNCTION TPedidosProveedorSenderReciver_validateRecepcion( tmpPedPrvT, dbfPedPrvT ) ; local Self AS CLASS TPedidosProveedorSenderReciver := QSelf() AS CLASS TPedidosProveedorSenderReciver

   ::cErrorRecepcion       := "Pocesando pedido de proveedor número " + ( dbfPedPrvT )->cSerPed + "/" + alltrim( Str( ( dbfPedPrvT )->nNumPed ) ) + "/" + alltrim( ( dbfPedPrvT )->cSufPed ) + " "

   if !( lValidaOperacion( ( tmpPedPrvT )->dFecPed, .F. ) )
      ::cErrorRecepcion    += "la fecha " + dtoc( ( tmpPedPrvT )->dFecPed ) + " no es valida en esta empresa"
      Return .F.
   end

   if !( ( dbfPedPrvT )->( dbSeek( ( tmpPedPrvT )->cSerPed + Str( ( tmpPedPrvT )->nNumPed ) + ( tmpPedPrvT )->cSufPed ) ) )
      Return .T.
   end

   if dtos( ( dbfPedPrvT )->dFecChg ) + ( dbfPedPrvT )->cTimChg >= dtos( ( tmpPedPrvT )->dFecChg ) + ( tmpPedPrvT )->cTimChg
      ::cErrorRecepcion    += "la fecha en la empresa " + dtoc( ( dbfPedPrvT )->dFecChg ) + " " + ( dbfPedPrvT )->cTimChg + " es más reciente que la recepción " + dtoc( ( tmpPedPrvT )->dFecChg ) + " " + ( tmpPedPrvT )->cTimChg
      Return .F.
   end

Return ( .T. )







FUNCTION lSelAll( oBrw, dbf, lSel, lTop, lMeter )

   local nRecAct  := ( dbf )->( recno() )

   If( lSel == nil, lSel := .T., ) ;
   If( lTop == nil, lTop := .T., ) ;
   If( lMeter == nil, lMeter := .F., ) ;

   if lMeter
      CreateWaitMeter( nil, nil, ( dbf )->( OrdKeyCount() ) )
   else
      CursorWait()
   end

   if lTop
      ( dbf )->( dbGoTop() )
   end

   while !( dbf )->( eof() )

      if dbLock( dbf )
         ( dbf )->lSndDoc := lSel
         ( dbf )->( dbUnlock() )
      end

      ( dbf )->( dbSkip() )

      if lMeter
         RefreshWaitMeter( ( dbf )->( OrdKeyNo() ) )
      else
         SysRefresh()
      end

   end

   ( dbf )->( dbGoTo( nRecAct ) )

   if lMeter
      EndWaitMeter()
   else
      CursorWE()
   end

   if !empty( oBrw )
      oBrw:Refresh()
      oBrw:SetFocus()
   end

RETURN NIL



FUNCTION aDocumentsPedidoProveedor( cNumPed )

   local oBlock
   local oError
   local dbfAlbPrvT
   local aDocuments  := {}

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.DBF" ), ( cCheckArea( "ALBPROVT", @dbfAlbPrvT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( dbfAlbPrvT )->( OrdSetFocus( "cNumPed" ) )

   if ( dbfAlbPrvT )->( dbSeek( cNumPed ) )
      while ( dbfAlbPrvT )->cNumPed == cNumPed .AND. !( dbfAlbPrvT )->( eof() )




         aAdd( aDocuments, {  ( dbfAlbPrvT )->cSerAlb + Str( ( dbfAlbPrvT )->nNumAlb ) + ( dbfAlbPrvT )->cSufAlb, Dtoc( ( dbfAlbPrvT )->dFecAlb ), ( dbfAlbPrvT )->cCodPrv, Rtrim( ( dbfAlbPrvT )->cNomPrv ), ( dbfAlbPrvT )->cCodAlm } )
         ( dbfAlbPrvT )->( dbSkip() )
      end
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfAlbPrvT )->( dbCloseArea() )

Return ( aDocuments )



Function GetCodCli( cNumPed )

   local oBlock
   local oError
   local dbfPedCliT
   local cCodCli  := ""

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.Dbf" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   ( dbfPedCliT )->( OrdSetFocus( "NNUMPED" ) )

   if ( dbfPedCliT )->( dbSeek( cNumPed ) )
      cCodCli     := ( dbfPedCliT )->cCodCli
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfPedCliT )->( dbCloseArea() )

Return cCodCli



Function GetNomCli( cNumPed )

   local oBlock
   local oError
   local dbfPedCliT
   local cNomCli  := ""

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.Dbf" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   ( dbfPedCliT )->( OrdSetFocus( "NNUMPED" ) )

   if ( dbfPedCliT )->( dbSeek( cNumPed ) )
      cNomCli     := ( dbfPedCliT )->cNomCli
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfPedCliT )->( dbCloseArea() )

Return cNomCli



function lChgImpDoc( dbfT )

   if dbSafeLock( dbfT )
      ( dbfT )->lImprimido := .T.
      ( dbfT )->dFecImp    := GetSysDate()
      ( dbfT )->cHorImp    := SubStr( Time(), 1, 5 )
      dbSafeUnLock( dbfT )
   end

Return .T.







Function Generador( oBrwPed )

   local oDlg
   local oPag
   local oBmp
   local oMtr
   local nMtr
   local oBrw
   local oCol
   local oBtnAnt
   local oBtnNxt
   local oProvee
   local cProvee
   local oSayPrv
   local cSayPrv
   local oArtOrg
   local oArtDes
   local oSayArtOrg
   local oSayArtDes
   local cArtOrg        := dbFirst ( D():Articulos( nView ), 1 )
   local cArtDes        := dbLast  ( D():Articulos( nView ), 1 )
   local cSayArtOrg     := dbFirst ( D():Articulos( nView ), 2 )
   local cSayArtDes     := dbLast  ( D():Articulos( nView ), 2 )
   local oCodAlm
   local oNomAlm
   local cCodAlm        := cDefAlm()
   local cNomAlm        := retAlmacen( cCodAlm, D():Almacen( nView ) )
   local nStockDis      := 4
   local nStockFin      := 1

   CreaTemporal()

   oDlg = TDialog():New(,,,, "Generar pedido a proveedor", "ASS_PEDCLI",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





   oBmp := TBitmap():ReDefine( 500, "gc_shopping_cart_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )




   oPag := TPages():Redefine( 110, oDlg, {"ASS_PEDPRV1", "ASS_PEDCLI2"},,,, )






   oProvee := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cProvee, cProvee:= u ) }, oPag:aDialogs[1],,, {||    cProvee( oProvee, D():Proveedores( nView ), oSayPrv )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwProvee( oProvee, oSayPrv )}, nil, "LUPA",, )




   oSayPrv := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cSayPrv, cSayPrv:= u ) }, oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oArtOrg := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cArtOrg, cArtOrg:= u ) }, oPag:aDialogs[1],,, {||    cArticulo( oArtOrg, D():Articulos( nView ), oSayArtOrg )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwArticulo( oArtOrg, oSayArtOrg )}, nil, "LUPA",, )




   oSayArtOrg := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cSayArtOrg, cSayArtOrg:= u ) }, oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oArtDes := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, cArtDes, cArtDes:= u ) }, oPag:aDialogs[1],,, {||    cArticulo( oArtDes, D():Articulos( nView ), oSayArtDes )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwArticulo( oArtDes, oSayArtDes )}, nil, "LUPA",, )




   oSayArtDes := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, cSayArtDes, cSayArtDes:= u ) }, oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oCodAlm := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, cCodAlm, cCodAlm:= u ) }, oPag:aDialogs[1],,, {||    ( cAlmacen( oCodAlm, , oNomAlm ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwAlmacen( oCodAlm, oNomAlm ) )}, nil, "LUPA",, )




   oNomAlm := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cNomAlm, cNomAlm:= u ) }, oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



   TRadMenu():Redefine( { | u | If( PCount()==0, nStockDis, nStockDis:= u ) }, oPag:aDialogs[1],, { 201, 202, 203, 204 },,,,, .F.,, )



   TRadMenu():Redefine( { | u | If( PCount()==0, nStockFin, nStockFin:= u ) }, oPag:aDialogs[ 1 ],, { 212, 213 },,,,, .F.,, )






 oMtr := TApoloMeter():ReDefine( 220, { | u | If( PCount()==0, nMtr, nMtr:= u ) }, ( ( D():Articulos( nView ) )->( LastRec() ) ), oPag:aDialogs[ 1 ], .F.,, "Procesando", .F.,,,, )



   oBrw                 := IXBrowse():New( oPag:aDialogs[ 2 ] )

   oBrw:lHScroll        := .T.
   oBrw:cAlias          := dbfTmpArt
   oBrw:nMarqueeStyle   := 3
   oBrw:cName           := "Pedido a proveedores asistente"
   oBrw:bLDblClick   := {|| oCol:Edit() }

   with object ( oBrw:AddCol() )
      :cHeader       := "Se. Seleccionado"
      :bStrData      := {|| "" }
      :bEditValue    := {|| ( dbfTmpArt )->lSelArt }
      :nEditType     := 0
      :nWidth        := 20
      :SetCheck( { "Sel16", "Nil16" } )
   end

   with object ( oBrw:AddCol() )
      :cHeader       := "Código"
      :bEditValue    := {|| ( dbfTmpArt )->cRef }
      :nEditType     := 0
      :nWidth        := 60
   end

   with object ( oBrw:AddCol() )
      :cHeader       := "Detalle"
      :bEditValue    := {|| ( dbfTmpArt )->cDetalle }
      :nEditType     := 0
      :nWidth        := 200
   end

   with object ( oBrw:AddCol() )
      :cHeader       := "Objetivo"
      :bEditValue    := {|| ( dbfTmpArt )->nObjUni }
      :cEditPicture  := MasUnd()
      :nEditType     := 0
      :nWidth        := 65
      :nDataStrAlign := 1
      :nHeadStrAlign := 1
   end

   with object ( oCol := oBrw:AddCol() )
      :cHeader       := "A pedir"
      :bEditValue    := {|| ( dbfTmpArt )->nNumUni }
      :cEditPicture  := MasUnd()
      :nEditType     := 1
      :nWidth        := 65
      :bOnPostEdit   := {|o,x| if( x > 0, ( dbfTmpArt )->nNumUni := x, ), .T. }
      :nDataStrAlign := 1
      :nHeadStrAlign := 1
   end

   with object ( oBrw:AddCol() )
      :cHeader       := "Stock actual"
      :bEditValue    := {|| ( dbfTmpArt )->nStkFis }
      :cEditPicture  := MasUnd()
      :nEditType     := 0
      :nWidth        := 65
      :nDataStrAlign := 1
      :nHeadStrAlign := 1
   end

   with object ( oBrw:AddCol() )
      :cHeader       := "Stock disponible"
      :bEditValue    := {|| ( dbfTmpArt )->nStkDis }
      :cEditPicture  := MasUnd()
      :nEditType     := 0
      :nWidth        := 65
      :nDataStrAlign := 1
      :nHeadStrAlign := 1
   end

   oBrw:CreateFromResource( 100 )




   TButton():ReDefine( 110, {||( oCol:Edit() )}, oPag:aDialogs[2],,, .F.,,,, .F. )




   TButton():ReDefine( 120, {||( SelArt( dbfTmpArt, oBrw ) )}, oPag:aDialogs[2],,, .F.,,,, .F. )




   TButton():ReDefine( 130, {||( SelAllArt( dbfTmpArt, oBrw, .T. ) )}, oPag:aDialogs[2],,, .F.,,,, .F. )




   TButton():ReDefine( 140, {||( SelAllArt( dbfTmpArt, oBrw, .F. ) )}, oPag:aDialogs[2],,, .F.,,,, .F. )




   oBtnAnt := TButton():ReDefine( 401, {||( BtnAnt( oPag, oBtnNxt, oBtnAnt ) )}, oDlg,,, .F.,,,, .F. )




   oBtnNxt := TButton():ReDefine( 402, {||( BtnNxt( oPag, oBtnNxt, oBtnAnt, oDlg, oProvee, cProvee, cArtOrg, cArtDes, nStockDis, nStockFin, oMtr, oBrw, cCodAlm ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 403, {||( KillTemporal(), oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBtnAnt:Hide(), oBrw:Load() )}, oDlg:bRClicked,,, )

   oBmp:End()

   oBrwPed:Refresh()

RETURN ( nil )



function ShowKitCom( dbfMaster, dbfTmpLin, oBrw, cCodPrv, dbfTmpInc, aGet )

   if !empty( aGet )

      if ( RolesModel():getRolCambiarPrecios( Auth():rolUuid() ) )
         aGet[ ( dbfMaster )->( FieldPos( "lRecargo" ) ) ]:HardEnable()
      else
         aGet[ ( dbfMaster )->( FieldPos( "lRecargo" ) ) ]:HardDisable()
      end

      if !empty( cCodPrv )
         aGet[ ( dbfMaster )->( FieldPos( "cCodPrv" ) ) ]:cText( cCodPrv )
         aGet[ ( dbfMaster )->( FieldPos( "cCodPrv" ) ) ]:lValid()
      end

      aGet[ ( dbfMaster )->( FieldPos( "cCodPrv" ) ) ]:SetFocus()

   end





   if !empty( dbfTmpInc )

      while !( dbfTmpInc )->( Eof() )
         if ( dbfTmpInc )->lAviso .AND. !( dbfTmpInc )->lListo
            MsgInfo( Trim( ( dbfTmpInc )->mDesInc ), "¡Incidencia!" )
         end
         ( dbfTmpInc )->( dbSkip() )
      end

      ( dbfTmpInc )->( dbGoTop() )

   end

   oBrw:Refresh()

return nil



Function IsPedPrv( cPath )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "PedProvT.Dbf" )
      dbCreate( cPath + "PedProvT.Dbf", aSqlStruct( aItmPedPrv() ), cDriver() )
   end

   if !lExistTable( cPath + "PedProvL.Dbf" )
      dbCreate( cPath + "PedProvL.Dbf", aSqlStruct( aColPedPrv() ), cDriver() )
   end

   if !lExistTable( cPath + "PedPrvI.Dbf" )
      dbCreate( cPath + "PedPrvI.Dbf", aSqlStruct( aIncPedPrv() ), cDriver() )
   end

   if !lExistTable( cPath + "PedPrvD.Dbf" )
      dbCreate( cPath + "PedPrvD.Dbf", aSqlStruct( aPedPrvDoc() ), cDriver() )
   end




   if !lExistIndex( cPath + "PedProvT.Cdx" ) .OR.  !lExistIndex( cPath + "PedProvL.Cdx" ) .OR.  !lExistIndex( cPath + "PedPrvI.Cdx" )  .OR.  !lExistIndex( cPath + "PedPrvD.Cdx" )
      rxPedPrv( cPath )
   end

Return ( nil )



Function evalPedidosProveedor( cExpresion )

   local bExpresion  := &( "{||" + cExpresion + "}" )

   if hb_isblock( bExpresion )
      eval( bExpresion )
   end

Return ( nil )



Function viewPedidosProveedor()

Return ( nView )



FUNCTION cDesPedPrv( cPedPrvL )

   If( cPedPrvL == nil, cPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;

RETURN ( Descrip( cPedPrvL ) )



FUNCTION cDesPedPrvLeng( cPedPrvL, cPedPrvS, cArtLeng )

   If( cPedPrvL == nil, cPedPrvL := D():PedidosProveedoresLineas( nView ), ) ;
   If( cArtLeng == nil, cArtLeng := D():ArticuloLenguaje( nView ), ) ;

RETURN ( DescripLeng( cPedPrvL, , cArtLeng ) )



Function DesignReportPedPrv( oFr, cDoc )

   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag





      DataReport( oFr )





      if !empty( ( cDoc )->mReport )

         oFr:LoadFromBlob( ( cDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  ";"                                                         + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "MasterData",  "MainPage", 6 )
         oFr:SetProperty(     "MasterData",  "Top", 200 )
         oFr:SetProperty(     "MasterData",  "Height", 0 )
         oFr:SetProperty(     "MasterData",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "MasterData",  "DataSet", "Pedidos" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de pedidos" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lOpen
         CloseFiles()
      end

   else

      Return .F.

   end

Return .T.



Function mailReportPedPrv( cCodigoDocumento )

Return ( printReportPedPrv( 6, 1, ImpresoraDefectoUsuario(), cCodigoDocumento ) )



Function PrintReportPedPrv( nDevice, nCopies, cPrinter, cDoc )

   local oFr
   local cFilePdf       := cPatOut() + "PedidoProveedor" + StrTran( ( D():PedidosProveedores( nView ) )->cSerPed + Str( ( D():PedidosProveedores( nView ) )->nNumPed ) + ( D():PedidosProveedores( nView ) )->cSufPed, " ", "" ) + ".Pdf"
   local nOrd

   If( nDevice == nil, nDevice := 2, ) ;
   If( nCopies == nil, nCopies := 1, ) ;

   if Empty( cPrinter )
      cPrinter                := ImpresoraDefectoUsuario()
   end

   SysRefresh()

   nOrd                 := ( D():PedidosProveedoresLineas( nView ) )->( ordSetFocus( "nPosPrint" ) )

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( D():Documentos( nView ) )->( Select() ), "mReport" ) } )





   DataReport( oFr )





   if lMemoDocumento( cDoc, D():Documentos( nView ) )

      oFr:LoadFromBlob( ( D():Documentos( nView ) )->( Select() ), "mReport")





      VariableReport( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
            oFr:DoExport(     "PDFExport" )

         case nDevice == 6

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .F. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

   ( D():PedidosProveedoresLineas( nView ) )->( ordSetFocus( nOrd ) )

Return cFilePdf











FUNCTION nTotNDocumento( uDbf )

   local nTotUnd

   do case
      case ValType( uDbf ) == "A"
         nTotUnd  := NotCaja( uDbf[ 11 ] )
         nTotUnd  *= uDbf[ 9 ]
         nTotUnd  *= NotCero( uDbf[ 29 ] )
         nTotUnd  *= NotCero( uDbf[ 46 ] )
         nTotUnd  *= NotCero( uDbf[ 47 ] )
         nTotUnd  *= NotCero( uDbf[ 48 ] )

      case ValType( uDbf ) == "O"
         nTotUnd  := NotCaja( uDbf:nCanEnt )
         nTotUnd  *= uDbf:nUniCaja
         nTotUnd  *= NotCero( uDbf:nUndKit )
         nTotUnd  *= NotCero( uDbf:nMedUno )
         nTotUnd  *= NotCero( uDbf:nMedDos )
         nTotUnd  *= NotCero( uDbf:nMedTre )

      otherwise
         nTotUnd  := NotCaja( ( uDbf )->nCanEnt )
         nTotUnd  *= ( uDbf )->nUniCaja
         nTotUnd  *= NotCero( ( uDbf )->nUndKit )
         nTotUnd  *= NotCero( ( uDbf )->nMedUno )
         nTotUnd  *= NotCero( ( uDbf )->nMedDos )
         nTotUnd  *= NotCero( ( uDbf )->nMedTre )

   end

RETURN ( nTotUnd )



Function designLabelPedidoProveedores( oFr, cDoc )

   local oLabel
   local lOpenFiles  := empty( nView )

   if lOpenFiles .AND. !Openfiles()
      Return .F.
   endif

   oLabel            := TLabelGeneratorPedidoProveedores():New( nView )



   oLabel:createTempLabelReport()
   oLabel:loadTempLabelReport()

   oLabel:dataLabel( oFr )



   if !empty( ( cDoc )->mReport )
      oFr:LoadFromBlob( ( cDoc )->( Select() ), "mReport")
   else
      oFr:AddPage(         "MainPage" )
      oFr:AddBand(         "MasterData",  "MainPage",       6 )
      oFr:SetProperty(     "MasterData",  "Top",            200 )
      oFr:SetProperty(     "MasterData",  "Height",         100 )
      oFr:SetObjProperty(  "MasterData",  "DataSet",        "Lineas de pedidos" )
   end



   oFr:DesignReport()
   oFr:DestroyFr()



   oLabel:DestroyTempReport()
   oLabel:End()

   if lOpenFiles
      closeFiles()
   end

Return .T.



Function nombrePrimeraPropiedad( view )

   If( view == nil, view := nView, ) ;

Return ( nombrePrimeraPropiedadPedidosProveedoresLineas( view ) )



Function nombreSegundaPropiedad( view )

   If( view == nil, view := nView, ) ;

Return ( nombreSegundaPropiedadPedidosProveedoresLineas( view ) )



Function getExtraFieldPedidoProveedor( cFieldName )

Return ( getExtraField( cFieldName, D():CamposExtraHeader( nView ), D():PedidosProveedoresId( nView ) ) )



Function nombrePrimeraPropiedadPedidosProveedoresLineas( view )

   If( view == nil, view := nView, ) ;

Return ( nombrePropiedad( ( D():PedidosProveedoresLineas( view ) )->cCodPr1, ( D():PedidosProveedoresLineas( view ) )->cValPr1, view ) )



Function nombreSegundaPropiedadPedidosProveedoresLineas( view )

   If( view == nil, view := nView, ) ;

Return ( nombrePropiedad( ( D():PedidosProveedoresLineas( view ) )->cCodPr2, ( D():PedidosProveedoresLineas( view ) )->cValPr2, view ) )



Function valorCampoExtra( cField, view )

   local id

   If( view == nil, view := nView, ) ;

   id       := ( D():PedidosProveedoresLineas( view ) )->cSerPed
   id       += Str( ( D():PedidosProveedoresLineas( view ) )->nNumPed )
   id       += ( D():PedidosProveedoresLineas( view ) )->cSufPed
   id       += Str( ( D():PedidosProveedoresLineas( view ) )->nNumLin )

Return ( getCustomExtraField( cField, "Lineas pedidos a proveedores", id ) )



Function MenuEdtDet( oCodArt, oDlg, lOferta, nIdLin )

   If( lOferta == nil, lOferta := .F., ) ;

   oDetMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )


      MenuAddItem( "&1. Rotor  ",, .F.,,,, "Rotor16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Campos extra [F9]", "Mostramos y rellenamos los campos extra", .F.,, {|oMenuItem|( D():CamposExtraLine( nView ):Play( nIdLin ) )},, "GC_FORM_PLUS2_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&2. Modificar artículo", "Modificar la ficha del artículo", .F.,, {|oMenuItem|( EdtArticulo( oCodArt:VarGet() ) )},, "gc_object_cube_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&3. Informe de artículo", "Abrir el informe del artículo", .F.,, {|oMenuItem|( if( RolesModel():getRolNoVerPreciosCosto( Auth():rolUuid() ), msgStop( "No tiene permiso para ver los precios de costo" ), InfArticulo( oCodArt:VarGet() ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )




            MenuAddItem( "&4. Informe de stock", "Abrir el informe del stock", .F.,, {|oMenuItem|( InfStock( oCodArt:VarGet() ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oDetMenu )

Return ( oDetMenu )



FUNCTION hStockBufferPedPrv( aTmp, lDel )

   local hBuffer              := {=>}
   local nPendienteRecibir    := 0

   If( lDel == nil, lDel := .F., ) ;

   do case
      case hb_isArray( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "cRef" ) ) ] ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "cAlmLin" ) ) ] ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "cCodPr1" ) ) ] ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "cValPr1" ) ) ] ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "cCodPr2" ) ) ] ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "cValPr2" ) ) ] ) )
         hset( hBuffer, "lote", AllTrim( aTmp[ ( D():PedidosProveedoresLineas( nView ) )->( fieldpos( "clote" ) ) ] ) )

         if !lDel
            hset( hBuffer, "pendiente_recibir", nTotNPedPrv( aTmp ) )
         else






            hset( hBuffer, "pendiente_recibir", nTotNPedPrv( aTmp ) - AlbaranesProveedoresLineasModel():nUnidadesRecibidas( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], aTmp[ 4 ], aTmp[ 18 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 27 ] ) )
         end

      case hb_isChar( aTmp )

         hset( hBuffer, "codigo_articulo", AllTrim( ( aTmp )->cRef ) )
         hset( hBuffer, "codigo_almacen_entrada", "" )
         hset( hBuffer, "codigo_almacen_salida", AllTrim( ( aTmp )->cAlmLin ) )
         hset( hBuffer, "codigo_primera_propiedad", AllTrim( ( aTmp )->cCodPr1 ) )
         hset( hBuffer, "valor_primera_propiedad", AllTrim( ( aTmp )->cValPr1 ) )
         hset( hBuffer, "codigo_segunda_propiedad", AllTrim( ( aTmp )->cCodPr2 ) )
         hset( hBuffer, "valor_segunda_propiedad", AllTrim( ( aTmp )->cValPr2 ) )
         hset( hBuffer, "lote", AllTrim( ( aTmp )->clote ) )

         if !lDel
            hset( hBuffer, "pendiente_recibir", nTotNPedPrv( aTmp ) )
         else






            hset( hBuffer, "pendiente_recibir", nTotNPedPrv( aTmp ) - AlbaranesProveedoresLineasModel():nUnidadesRecibidas( ( aTmp )->cSerPed + Str( ( aTmp )->nNumPed ) + ( aTmp )->cSufPed, ( aTmp )->cRef, ( aTmp )->cCodPr1, ( aTmp )->cCodPr2, ( aTmp )->cValPr1, ( aTmp )->cValPr2, ( aTmp )->cLote ) )
         end

   end

RETURN ( hBuffer )



Function SetEstadoLinePedProv( cNumPed, nView )

   local nRecAnt  := ( D():PedidosProveedoresLineas( nView ) )->( Recno() )
   local nOrdAnt  := ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( "nNumPed" ) )
   local nUndEnt
   local nUndAct

   if !Empty( cNumPed )

      nRecAnt  := ( D():PedidosProveedoresLineas( nView ) )->( Recno() )
      nOrdAnt  := ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( "nNumPed" ) )

      if ( D():PedidosProveedoresLineas( nView ) )->( dbSeek( cNumPed ) )


         while ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed == cNumPed .AND. !( D():PedidosProveedoresLineas( nView ) )->( Eof() )

            nUndAct := nTotNPedPrv( D():PedidosProveedoresLineas( nView ) )






            nUndEnt := AlbaranesProveedoresLineasModel():nUnidadesRecibidas(  ( D():PedidosProveedoresLineas( nView ) )->cSerPed + Str( ( D():PedidosProveedoresLineas( nView ) )->nNumPed ) + ( D():PedidosProveedoresLineas( nView ) )->cSufPed, ( D():PedidosProveedoresLineas( nView ) )->cRef, ( D():PedidosProveedoresLineas( nView ) )->cCodPr1, ( D():PedidosProveedoresLineas( nView ) )->cCodPr2, ( D():PedidosProveedoresLineas( nView ) )->cValPr1, ( D():PedidosProveedoresLineas( nView ) )->cValPr2, ( D():PedidosProveedoresLineas( nView ) )->cLote )



            do case
               case nUndEnt == 0
                  if dbLock( D():PedidosProveedoresLineas( nView ) )
                     ( D():PedidosProveedoresLineas( nView ) )->nEstado    := 1
                     ( D():PedidosProveedoresLineas( nView ) )->( dbUnLock() )
                  end

               case nUndEnt > nUndAct
                  if dbLock( D():PedidosProveedoresLineas( nView ) )
                     ( D():PedidosProveedoresLineas( nView ) )->nEstado    := 3
                     ( D():PedidosProveedoresLineas( nView ) )->( dbUnLock() )
                  end

               case nUndAct == nUndEnt
                  if dbLock( D():PedidosProveedoresLineas( nView ) )
                     ( D():PedidosProveedoresLineas( nView ) )->nEstado    := 3
                     ( D():PedidosProveedoresLineas( nView ) )->( dbUnLock() )
                  end

               case nUndEnt < nUndAct
                  if dbLock( D():PedidosProveedoresLineas( nView ) )
                     ( D():PedidosProveedoresLineas( nView ) )->nEstado    := 2
                     ( D():PedidosProveedoresLineas( nView ) )->( dbUnLock() )
                  end

            end

            ( D():PedidosProveedoresLineas( nView ) )->( dbSkip() )

         end

      end

      ( D():PedidosProveedoresLineas( nView ) )->( OrdSetFocus( nOrdAnt ) )
      ( D():PedidosProveedoresLineas( nView ) )->( dbGoTo( nRecAnt ) )

   end

RETURN ( .T. )
