#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\Permisos.prg"
_HB_CLASS TPermisos ; function TPermisos ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPermisos", iif( .T., { @TMant() }, { @HBObject() } ), @TPermisos() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "GC_ID_BADGE_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )
   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 33 + ( 115 * 256 ) + ( 70 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER { oGetNombre } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetNombre"}, .F. )

   _HB_MEMBER { oBrowse } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrowse"}, .F. )
   _HB_MEMBER { oTree } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTree"}, .F. )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TPermisos_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem); oClass:AddMethod( "New", @TPermisos_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create( cPath); oClass:AddMethod( "Create", @TPermisos_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TPermisos_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TPermisos_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPresave(); oClass:AddMethod( "lPresave", @TPermisos_lPresave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addTreeItems( aAccesos); oClass:AddMethod( "addTreeItems", @TPermisos_addTreeItems(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addTreeItem( oAcceso); oClass:AddMethod( "addTreeItem", @TPermisos_addTreeItem(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadOption( cPermisoUuid, cNombre); oClass:AddMethod( "loadOption", @TPermisos_loadOption(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER saveOption( cUuid, oTree); oClass:AddMethod( "saveOption", @TPermisos_saveOption(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTreeItem( cKey); oClass:AddMethod( "getTreeItem", @TPermisos_getTreeItem(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getTreeItemAccess(); oClass:AddInline( "getTreeItemAccess", {|Self | ( ( Self ) ), ( ::getTreeItem( "Access" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getTreeItemAppend(); oClass:AddInline( "getTreeItemAppend", {|Self | ( ( Self ) ), ( ::getTreeItem( "Append" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getTreeItemEdit(); oClass:AddInline( "getTreeItemEdit", {|Self | ( ( Self ) ), ( ::getTreeItem( "Edit" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getTreeItemZoom(); oClass:AddInline( "getTreeItemZoom", {|Self | ( ( Self ) ), ( ::getTreeItem( "Zoom" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getTreeItemDelete(); oClass:AddInline( "getTreeItemDelete", {|Self | ( ( Self ) ), ( ::getTreeItem( "Delete" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER getTreeItemPrint(); oClass:AddInline( "getTreeItemPrint", {|Self | ( ( Self ) ), ( ::getTreeItem( "Print" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER setTreeItem( cKey, uValue); oClass:AddMethod( "setTreeItem", @TPermisos_setTreeItem(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setTreeItemAccess(); oClass:AddInline( "setTreeItemAccess", {|Self, uValue | ( ( Self ) ), ( ::setTreeItem( "Access", uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setTreeItemAppend(); oClass:AddInline( "setTreeItemAppend", {|Self, uValue | ( ( Self ) ), ( ::setTreeItem( "Append", uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setTreeItemEdit(); oClass:AddInline( "setTreeItemEdit", {|Self, uValue | ( ( Self ) ), ( ::setTreeItem( "Edit", uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setTreeItemZoom(); oClass:AddInline( "setTreeItemZoom", {|Self, uValue | ( ( Self ) ), ( ::setTreeItem( "Zoom", uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setTreeItemDelete(); oClass:AddInline( "setTreeItemDelete", {|Self, uValue | ( ( Self ) ), ( ::setTreeItem( "Delete", uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setTreeItemPrint(); oClass:AddInline( "setTreeItemPrint", {|Self, uValue | ( ( Self ) ), ( ::setTreeItem( "Print", uValue ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPermisos ;



static FUNCTION TPermisos_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "PERMISOS.DBF", "PERMISOS" ):New( "PERMISOS.DBF",, ( cDriver ), "Permisos", ( cPath ) )

      ::oDbf:AddField( "uuid", "C", 40, 0,, win_uuidcreatestring(),,, "Identificador", .F.,, .T., {} )
      ::oDbf:AddField( "nombre", "C", 100, 0,,,,, "Nombre", .F., 250, .F., {} )

      ::oDbf:AddIndex( "Nombre", "PERMISOS.CDX", "nombre",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TPermisos_New( cPath, oWndParent, oMenuItem ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;
   If( oMenuItem == nil, oMenuItem := "permisos", ) ;

   if Empty( ::nLevel )
      ::nLevel          := Auth():Level( oMenuItem )
   end





   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil
   ::lReport            := .F.

   ::cHtmlHelp          := "Permisos"

   ::bOnPreDelete       := {|| DetPermisosModel():deleteLines( ::oDbf:uuid ) }

RETURN ( Self )



static FUNCTION TPermisos_Create( cPath ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



static FUNCTION TPermisos_Activate( ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   if !Auth():isSuperAdmin()
      MsgStop( "Solo puede acceder el ususario Super administrador" )
      Return ( Self )
   end

   if nAnd( ::nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end





   if ::oWndParent <> nil
      ::oWndParent:CloseAll()
   end

   if Empty( ::oDbf ) .OR. !::oDbf:Used()
      ::lOpenFiles      := ::OpenFiles()
   end





   if ::lOpenFiles

      ::CreateShell( ::nLevel )

      ::oWndBrw:AutoButtons( Self )

      if ::cHtmlHelp <> nil
         ::oWndBrw:cHtmlHelp  := ::cHtmlHelp
      end

      ::oWndBrw:Activate( nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, {|| ::CloseFiles() } )

   end

RETURN ( Self )



static FUNCTION TPermisos_Resource( nMode ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   local oDlg
   local oBmp

   ::oTree  := nil
   ::addTreeItems( oWndBar():aAccesos )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "permisos", "PERMISOS",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmp := TBitmap():ReDefine( 900, "gc_id_badge_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )




      ::oGetNombre := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:nombre, ::oDbf:nombre:= u ) }, oDlg,,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      ::oBrowse                  := IXBrowse():New( oDlg )
      ::oBrowse:bWhen            := {|| nMode <> 3 }

      ::oBrowse:bClrSel          := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrowse:bClrSelFocus     := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrowse:lVScroll         := .T.
      ::oBrowse:lHScroll         := .F.
      ::oBrowse:nMarqueeStyle    := 5
      ::oBrowse:lRecordSelector  := .F.

      with object ( ::oBrowse:AddCol() )
         :cHeader                := "Acceso"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ::getTreeItemAccess() }
         :nWidth                 := 60
         :SetCheck( { "Sel16", "Nil16" }, {|o, v| ::setTreeItemAccess( v ) } )
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader                := "Añadir"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ::getTreeItemAppend() }
         :nWidth                 := 60
         :SetCheck( { "Sel16", "Nil16" }, {|o, v| ::setTreeItemAppend( v ) } )
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader                := "Modificar"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ::getTreeItemEdit() }
         :nWidth                 := 60
         :SetCheck( { "Sel16", "Nil16" }, {|o, v| ::setTreeItemEdit( v ) } )
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader                := "Zoom"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ::getTreeItemZoom() }
         :nWidth                 := 60
         :SetCheck( { "Sel16", "Nil16" }, {|o, v| ::setTreeItemZoom( v ) } )
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader                := "Eliminar"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ::getTreeItemDelete() }
         :nWidth                 := 60
         :SetCheck( { "Sel16", "Nil16" }, {|o, v| ::setTreeItemDelete( v ) } )
      end

      with object ( ::oBrowse:AddCol() )
         :cHeader                := "Imprimir"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ::getTreeItemPrint() }
         :nWidth                 := 60
         :SetCheck( { "Sel16", "Nil16" }, {|o, v| ::setTreeItemPrint( v ) } )
      end

      ::oBrowse:CreateFromResource( 120 )

      ::oBrowse:SetTree( ::oTree, { "gc_navigate_minus_16", "gc_navigate_plus_16", "nil16" } )

      if len( ::oBrowse:aCols ) > 1
         ::oBrowse:aCols[ 1 ]:cHeader  := ""
         ::oBrowse:aCols[ 1 ]:nWidth   := 200
      end





      TButton():ReDefine( 1, {||( if( ::lPresave(), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| if( ::lPresave(), oDlg:end( 1 ), ) } )
      end

      oDlg:bStart    := {|| ::oGetNombre:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:end()
   end

RETURN ( oDlg:nResult == 1 )



static FUNCTION TPermisos_lPresave( ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   if Empty( ::oDbf:nombre )
      MsgStop( "El campo nombre es obligatorio" )
      ::oGetNombre:SetFocus()
      Return .F.
   end

   ::oTree:eval( {|oItem| iif( !empty( hget( oItem:Cargo, "Id" ) ), ::saveOption( oItem ), ) } )

RETURN ( .T. )



static FUNCTION TPermisos_addTreeItems( aAccesos ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   if empty( ::oTree )
      ::oTree  := TreeBegin()
   else
      TreeBegin()
   end




   aeval( aAccesos, {|oAcceso|  ::addTreeItem( oAcceso ), iif(  len( oAcceso:aAccesos ) > 0, ::addTreeItems( oAcceso:aAccesos ), ) } )

   TreeEnd()

RETURN ( self )



static FUNCTION TPermisos_addTreeItem( oAcceso ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   local cUuid
   local oItem

   cUuid          := ::oDbf:uuid
   oItem          := treeAddItem( oAcceso:cPrompt )

   if empty( oAcceso:cId )
      oItem:Cargo := hPermiso()
   else
      oItem:Cargo := hPermiso( oAcceso:cId, ::loadOption( cUuid, oAcceso:cId ) )
   end

RETURN ( self )



static FUNCTION TPermisos_getTreeItem( cKey ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   if !empty( ::oBrowse:oTreeItem )
      RETURN ( hget( ::oBrowse:oTreeItem:Cargo, cKey ) )
   endif

RETURN ( "" )



static FUNCTION TPermisos_setTreeItem( cKey, uValue ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   if empty( ::oBrowse:oTreeItem )
      RETURN ( uValue )
   end

   if empty( ::oBrowse:oTreeItem:oTree )
      hset( ::oBrowse:oTreeItem:Cargo, cKey, uValue )
      RETURN ( uValue )
   end

   if msgyesno( "¿Desea cambiar los valores de los nodos inferiores?", "Seleccione una opción" )
      hset( ::oBrowse:oTreeItem:Cargo, cKey, uValue )
      ::oBrowse:oTreeItem:oTree:eval( {|oItem| hset( oItem:Cargo, cKey, uValue ) } )
   end

RETURN ( uValue )



static FUNCTION TPermisos_loadOption( cPermisoUuid, cNombre ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   local nPermiso



   nPermiso       := DetPermisosModel():getNivel( cPermisoUuid, cNombre )

   if hb_isnil( nPermiso )
      RETURN ( 63 )
   end

RETURN ( nPermiso )



static FUNCTION TPermisos_saveOption( oItem ) ; local Self AS CLASS TPermisos := QSelf() AS CLASS TPermisos

   DetPermisosModel():set( ::oDbf:uuid, hget( oItem:Cargo, "Id" ), nPermiso( oItem:Cargo ) )

RETURN ( nil )







_HB_CLASS PermisosModel ; function PermisosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PermisosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @PermisosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "permisos" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, uuid | ( ( Self ) ), ( ::getField( "nombre", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getuuid(); oClass:AddInline( "getuuid", {|Self, nombre | ( ( Self ) ), ( ::getField( "uuid", "nombre", nombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNameList(); oClass:AddMethod( "getNameList", @PermisosModel_getNameList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InsertFromHashSql( hHash); oClass:AddMethod( "InsertFromHashSql", @PermisosModel_InsertFromHashSql(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lExisteUuid( uuid); oClass:AddMethod( "lExisteUuid", @PermisosModel_lExisteUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PermisosModel ;



static FUNCTION PermisosModel_getNameList( ) ; local Self AS CLASS PermisosModel := QSelf() AS CLASS PermisosModel

   local aNames   := { "" }
   local cStm     := "getNameList"
   local cSql     := "SELECT nombre FROM " + ::getTableName()

   if ::ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )

         aAdd( aNames, ( cStm )->nombre )

         ( cStm )->( dbSkip() )

      end

   end

RETURN ( aNames )



static FUNCTION PermisosModel_InsertFromHashSql( hHash ) ; local Self AS CLASS PermisosModel := QSelf() AS CLASS PermisosModel

   local cStm     := "InsertFromHashSql"
   local cSql     := ""

   if !Empty( hHash ) .AND. !::lExisteUuid( hGet( hHash, "uuid" ) )

      cSql         := "INSERT INTO " + ::getTableName()
      cSql         += " ( uuid, nombre ) VALUES "
      cSql         += " ( " + quoted( hGet( hHash, "uuid" ) )
      cSql         += ", " + quoted( hGet( hHash, "nombre" ) ) + " )"

      ::ExecuteSqlStatement( cSql, @cStm )

   end

Return ( nil )



static FUNCTION PermisosModel_lExisteUuid( uuid ) ; local Self AS CLASS PermisosModel := QSelf() AS CLASS PermisosModel

   local cStm     := "lExisteUuid"
   local cSql     := ""

   cSql     := "SELECT * FROM " + ::getTableName() + " WHERE uuid = " + quoted( uuid )

      if ::ExecuteSqlStatement( cSql, @cStm )

         if ( cStm )->( RecCount() ) > 0
            Return ( .T. )
         end

      end

Return ( .F. )







FUNCTION nPermiso( hPermisos )

   local nPermiso    := 0

   if hget( hPermisos, "Access" )   ; nPermiso := nOr( nPermiso, 1 )  ; endif
   if hget( hPermisos, "Append" )   ; nPermiso := nOr( nPermiso, 2 )  ; endif
   if hget( hPermisos, "Edit" )     ; nPermiso := nOr( nPermiso, 4 )    ; endif
   if hget( hPermisos, "Zoom" )     ; nPermiso := nOr( nPermiso, 8 )    ; endif
   if hget( hPermisos, "Delete" )   ; nPermiso := nOr( nPermiso, 16 )  ; endif
   if hget( hPermisos, "Print" )    ; nPermiso := nOr( nPermiso, 32 )   ; endif

RETURN ( nPermiso )



FUNCTION hPermiso( cId, nPermiso )

   local hPermiso    := {=>}

   If( cId == nil, cId := "", ) ;
   If( nPermiso == nil, nPermiso := 63, ) ;

   hset( hPermiso, "Id",      cId )
   hset( hPermiso, "Access",  nAnd( nPermiso, 1  ) <> 0 )
   hset( hPermiso, "Append",  nAnd( nPermiso, 2  ) <> 0 )
   hset( hPermiso, "Edit",    nAnd( nPermiso, 4    ) <> 0 )
   hset( hPermiso, "Zoom",    nAnd( nPermiso, 8    ) <> 0 )
   hset( hPermiso, "Delete",  nAnd( nPermiso, 16  ) <> 0 )
   hset( hPermiso, "Print",   nAnd( nPermiso, 32   ) <> 0 )

RETURN ( hPermiso )
