#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Promo.prg"
static oWndBrw
static cNewFile1
static cNewFile2
static dbfTmp1
static dbfTmp2
static dbfPromoT
static dbfPromoL
static dbfPromoC
static dbfArticulo
static dbfAgentes
static dbfClient
static dbfTarPreT
static bEdit1     := {  |aBlank, aoGet, dbfPromoT, oBrw, bWhen, bValid, nMode | EdtRec( aBlank, aoGet, dbfPromoT, oBrw, bWhen, bValid, nMode ) }
static bEdit2     := {  |aBlank, aoGet, dbfPromoL, oBrw, bWhen, bValid, nMode, cCodPro | EdtDet( aBlank, aoGet, dbfPromoL, oBrw, bWhen, bValid, nMode, cCodPro ) }
static bEdit3     := {  |aBlank, aoGet, dbfPromoC, oBrw, bWhen, bValid, nMode, cCodPro | EdtCli( aBlank, aoGet, dbfPromoC, oBrw, bWhen, bValid, nMode, cCodPro ) }



FUNCTION Promocion( oMenuItem, oWnd )

   local nLevel

   If( oMenuItem == nil, oMenuItem := "01021", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

    IF oWndBrw == NIL





      nLevel            := Auth():Level( oMenuItem )

      if nAnd( nLevel, 1 ) == 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      IF !OpenFiles()
         RETURN NIL
      end





      AddMnuNext( "Promociones de artículos", ProcName() )















      oWndBrw := TShell():New( 0, 0, 22, 80, "Promociones de artículos",, oWnd,,, .F.,,, ( dbfPromoT ),,,,, {"Promoción",    "Tarifa", "Artículo"}, {||( WinAppRec( oWndBrw:oBrw, bEdit1, dbfPromoT ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit1, dbfPromoT ) )}, {||( DBDelRec(  oWndBrw:oBrw, dbfPromoT ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit1, dbfPromoT ) )}, nil, nLevel, "gc_star2_blue_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Promoción"
         :cSortOrder       := "cCodPro"
         :bEditValue       := {|| ( dbfPromoT )->cCodPro + Space( 1 ) + ( dbfPromoT )->cNomPro }
         :nWidth           := 160
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Tarifa"
         :cSortOrder       := "cCodTar"
         :bEditValue       := {|| ( dbfPromoT )->cCodTar + Space( 1 ) + retTarifa( ( dbfPromoT )->cCodTar, dbfTarPreT ) }
         :nWidth           := 160
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Artículo"
         :cSortOrder       := "cCodArt"
         :bEditValue       := {|| ( dbfPromoT )->cCodArt + Space( 1 ) + retArticulo( ( dbfPromoT )->cCodArt, dbfArticulo ) }
         :nWidth           := 240
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha inicio"
         :cSortOrder       := "dIniPro"
         :bEditValue       := {|| Dtoc( ( dbfPromoT )->dIniPro ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha fin"
         :cSortOrder       := "dFinPro"
         :bEditValue       := {|| Dtoc( ( dbfPromoT )->dFinPro ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "% Descuento"
         :bEditValue       := {|| Trans( ( dbfPromoT )->nDtoPro, "@E 99.99" ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      oWndBrw:CreateXFromCode()

      oWndBrw:cHtmlHelp    := "Promociones"





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )







        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )







        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit1, dbfPromoT ) )}, "(Z)oom", "Z",,, 8,, .F. )







        oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )








      oWndBrw:NewAt( "IMP",,, {||( InfPro():New( "Listado de promociones" ):Play() )}, "(L)istado", "L",,, 8,, .F. )







      oWndBrw:NewAt( "END",,, {||( oWndBrw:end() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| CloseFiles()},, oWndBrw:bLButtonUp, .F. )

    ELSE

        oWndBrw:SetFocus()

    end

RETURN NIL



STATIC FUNCTION EdtRec( aBlank, aoGet, dbfPromoT, oBrw, bWhen, bValid, nMode )

    local oDlg
    local oGet
    local oGetTxt, cGetTxt
    local oGetTxt2, cGetTxt2
    local oBrw2
    local oBrw3
    local oTxt
    local cTxt    := ""

   if nMode <> 3 .AND. oUser():lNotCambiarPrecio()
      MsgStop( "No tiene autorización para añadir o modificar promociones." )
      Return .F.
   end

   BeginTrans( aBlank, nMode )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "promociones de artículos", "PROMO",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )











      oGet := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aBlank[ (dbfPromoT)->( FieldPos( "CCODPRO" ) ) ], aBlank[ (dbfPromoT)->( FieldPos( "CCODPRO" ) ) ]:= u ) }, oDlg,, "@!", {||    ( NotValid( oGet, dbfPromoT, .T., "0" ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )






      aoGet[ (dbfPromoT)->( FieldPos( "CNOMPRO" ) ) ] := TGetHlp():ReDefine( 95, { | u | If( PCount()==0, aBlank[ (dbfPromoT)->( FieldPos( "CNOMPRO" ) ) ], aBlank[ (dbfPromoT)->( FieldPos( "CNOMPRO" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      aoGet[ (dbfPromoT)->( FieldPos( "CCODTAR" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aBlank[ (dbfPromoT)->( FieldPos( "CCODTAR" ) ) ], aBlank[ (dbfPromoT)->( FieldPos( "CCODTAR" ) ) ]:= u ) }, oDlg,, "@!", {||        ( cTarifa( aoGet[ (dbfPromoT)->( FieldPos( "CCODTAR" ) ) ], oGetTxt ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwTarifa( aoGet[ (dbfPromoT)->( FieldPos( "CCODTAR" ) ) ], oGetTxt ) )}, nil, "LUPA",, )





        oGetTxt := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, cGetTxt, cGetTxt:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )







      aoGet[ (dbfPromoT)->( FieldPos( "CCODART" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aBlank[ (dbfPromoT)->( FieldPos( "CCODART" ) ) ], aBlank[ (dbfPromoT)->( FieldPos( "CCODART" ) ) ]:= u ) }, oDlg,,, {||    ( cArticulo( aoGet[ (dbfPromoT)->( FieldPos( "CCODART" ) ) ], , oGetTxt2 ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aoGet[ (dbfPromoT)->( FieldPos( "CCODART" ) ) ], oGetTxt2 ) )}, nil, "LUPA",, )





        oGetTxt2 := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, cGetTxt2, cGetTxt2:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aBlank[ (dbfPromoT)->( FieldPos( "DINIPRO" ) ) ], aBlank[ (dbfPromoT)->( FieldPos( "DINIPRO" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






        TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aBlank[ (dbfPromoT)->( FieldPos( "DFINPRO" ) ) ], aBlank[ (dbfPromoT)->( FieldPos( "DFINPRO" ) ) ]:= u ) }, oDlg,,, {||    ( SetNumDay( aBlank, oTxt ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      oTxt := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, cTxt, cTxt:= u ) }, oDlg,,,,,,,,, .F., {||     ( .T. )},, .F., .F.,,,,,, nil,,, )






        TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aBlank[ (dbfPromoT)->( FieldPos( "NDTOPRO" ) ) ], aBlank[ (dbfPromoT)->( FieldPos( "NDTOPRO" ) ) ]:= u ) }, oDlg,, "@E 99.99",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      oBrw2          := IXBrowse():New( oDlg )

      oBrw2:bClrSel        := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw2:bClrSelFocus   := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw2:cAlias         := dbfTmp1
      oBrw2:nMarqueeStyle  := 5

         with object ( oBrw2:AddCol() )
            :cHeader          := "Agente"
            :bStrData         := {|| ( dbfTmp1 )->cCodAge + Space( 1 ) + RetNbrAge( ( dbfTmp1 )->cCodAge, dbfAgentes ) }
            :nWidth           := 240
         end

         with object ( oBrw2:AddCol() )
            :cHeader          := "% Descuento"
            :bEditValue       := {|| Trans( ( dbfTmp1 )->nDtoAge, "@E 99.99" ) }
            :nWidth           := 60
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         if nMode <> 3
            oBrw2:bLDblClick  := {|| WinEdtRec( oBrw2, bEdit2, dbfTmp1 ) }
         end

      oBrw2:CreateFromResource( 200 )

      oBrw2:lHScroll := .F.





      TButton():ReDefine( 500, {||( WinAppRec( oBrw2, bEdit2, dbfTmp1, , , aBlank[ 1 ] ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrw2, bEdit2, dbfTmp1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( DBDelRec(oBrw2, dbfTmp1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )































      oBrw3          := IXBrowse():New( oDlg )

      oBrw3:bClrSel        := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw3:bClrSelFocus   := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw3:cAlias         := dbfTmp2

      oBrw3:nMarqueeStyle  := 5

         with object ( oBrw3:AddCol() )
            :cHeader          := "Cliente"
            :bStrData         := {|| Rtrim( ( dbfTmp2 )->cCodCli ) + Space( 1 ) + RetClient( ( dbfTmp2 )->cCodCli, dbfClient ) }
            :nWidth           := 160
         end

         with object ( oBrw3:AddCol() )
            :cHeader          := "Dirección"
            :bStrData         := {|| ( dbfTmp2 )->cCodObr }
            :nWidth           := 40
         end

         with object ( oBrw3:AddCol() )
            :cHeader          := "% Descuento promoción"
            :bEditValue       := {|| ( dbfTmp2 )->nDtoPro }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 40
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrw3:AddCol() )
            :cHeader          := "% Comisión agente"
            :bEditValue       := {|| ( dbfTmp2 )->nComAge }
            :cEditPicture     := "@E 999.99"
            :nWidth           := 40
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         if nMode <> 3
            oBrw3:bLDblClick  := {|| WinEdtRec( oBrw3, bEdit3, dbfTmp2 ) }
         end

      oBrw3:CreateFromResource( 300 )

      oBrw3:lHScroll          := .F.





      TButton():ReDefine( 600, {||( WinAppRec( oBrw3, bEdit3, dbfTmp2, , , aBlank[1] ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 610, {||( WinEdtRec( oBrw3, bEdit3, dbfTmp2 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 620, {||( dbDelRec( oBrw3, dbfTmp2 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )









      TButton():ReDefine( 511, {||( if( EndTrans( aBlank, oGet, aoGet, nMode, oBrw2, oBrw3 ), ( WinGather( aBlank, aoGet, dbfPromoT, oBrw, nMode ), oDlg:end( 1 ) ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 510, {||( KillTrans(), oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 9, {||( ChmHelp ("Promociones") )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 113, {|| WinAppRec( oBrw2, bEdit2, dbfTmp1, , , aBlank[ 1 ] ) } )
      oDlg:AddFastKey( 114, {|| WinEdtRec( oBrw2, bEdit2, dbfTmp1 ) } )
      oDlg:AddFastKey( 115, {|| DBDelRec(oBrw2, dbfTmp1 ) } )
      oDlg:AddFastKey( 116, {|| if( EndTrans( aBlank, oGet, aoGet, nMode, oBrw2, oBrw3 ), ( WinGather( aBlank, aoGet, dbfPromoT, oBrw, nMode ), oDlg:end( 1 ) ), ) } )
   end

   oDlg:AddFastKey( 112,    {|| ChmHelp ("Promociones") } )
   oDlg:bStart             := {|| EvalGet( aoGet, nMode ), oGet:SetFocus(), SetNumDay( aBlank, oTxt ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function SetNumDay( aBlank, oText )

   local dFecIni  := aBlank[ ( dbfPromoT )->( FieldPos( "DINIPRO" ) ) ]
   local dFecFin  := aBlank[ ( dbfPromoT )->( FieldPos( "DFINPRO" ) ) ]

   if dFecFin >= dFecIni
      oText:SetText( Trans( dFecFin - dFecIni, "@E 999,999" ) + " dias" )
      Return .T.
   end

    msgStop( "La fecha final debe ser mayor que la inicial." )

Return .F.



STATIC FUNCTION BeginTrans( aBlank, nMode )

   local cDbf1    := "TProL"
   local cDbf2    := "TProC"
    local cCodPro    := aBlank[ ( dbfPromoT )->( FieldPos( "CCODPRO" ) ) ]

   cNewFile1      := cGetNewFileName( cPatTmp() + cDbf1 )
   cNewFile2      := cGetNewFileName( cPatTmp() + cDbf2 )





   dbCreate( cNewFile1, aSqlStruct( aColPrm() ), cLocalDriver() )

   dbUseArea( .T., cLocalDriver(), cNewFile1, cCheckArea( cDbf1, @dbfTmp1 ), .F. )
   if !( dbfTmp1 )->( neterr() )

      ( dbfTmp1 )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmp1 )->( ordCreate( cNewFile1, "Recno", "Recno()", {|| Recno() } ) )





      if nMode <> 1

         if ( dbfPromoL )->( dbSeek( cCodPro ) )

            while ( ( dbfPromoL )->CCODPRO == cCodPro .AND. !( dbfPromoL )->( Eof() ) )

               dbPass( dbfPromoL, dbfTmp1, .T. )
               ( dbfPromoL )->( DbSkip() )

            end

         end

      end

      ( dbfTmp1 )->( dbGoTop() )

   end

   dbCreate( cNewFile2, aSqlStruct( aCliPrm() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewFile2, cCheckArea( cDbf2, @dbfTmp2 ), .F. )
   if !( dbfTmp2 )->( neterr() )

      ( dbfTmp2 )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmp2 )->( ordCreate( cNewFile2, "Recno", "Recno()", {|| Recno() } ) )





      if ( dbfPromoC)->( dbSeek( cCodPro ) )

         while ( ( dbfPromoC )->CCODPRO == cCodPro .AND. !( dbfPromoC )->( Eof() ) )

            dbPass( dbfPromoC, dbfTmp2, .T. )
            ( dbfPromoC )->( DbSkip() )

         end

      end

      ( dbfTmp2 )->( dbGoTop() )

   end

RETURN NIL



STATIC FUNCTION EndTrans( aBlank, oGet, aoGet, nMode, oBrw2, oBrw3 )

   local oBlock
   local oError
    local cCodPro    := aBlank[ ( dbfPromoT )->( FieldPos( "CCODPRO" ) ) ]

   if nMode == 1

      if Empty( aBlank[ (dbfPromoT)->( FieldPos( "CCODPRO" ) ) ] )
         msgStop( "Código de promoción no puede estar vacio" )
         oGet:SetFocus()
         return .F.
      end

      if Empty( aBlank[ (dbfPromoT)->( FieldPos( "CNOMPRO" ) ) ] )
         msgStop( "Nombre de promoción no puede estar vacio" )
         aoGet[ (dbfPromoT)->( FieldPos( "CNOMPRO" ) ) ]:SetFocus()
         return .F.
      end

      if Empty( aBlank[ (dbfPromoT)->( FieldPos( "CCODTAR" ) ) ] )
         msgStop( "Código de tarifa no puede estar vacio" )
         oGet:SetFocus()
         return .F.
      end

      if Empty( aBlank[ (dbfPromoT)->( FieldPos( "CCODART" ) ) ] )
         msgStop( "Código de artículo no puede estar vacio" )
         aoGet[ (dbfPromoT)->( FieldPos( "CCODART" ) ) ]:SetFocus()
         return .F.
      end

      if dbSeekInOrd( aBlank[ (dbfPromoT)->( FieldPos( "CCODPRO" ) ) ], "CCODPRO", dbfPromoT )
         MsgStop( "Código ya existe " + Rtrim( aBlank[ (dbfPromoT)->( FieldPos( "CCODPRO" ) ) ] ) )
         return .F.
      end

   end

   CursorWait()

   oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   BeginTransaction()





   while ( dbfPromoL )->( dbSeek( cCodPro ) ) .AND. !( dbfPromoL )->( eof() )
      if dbLock( dbfPromoL )
         ( dbfPromoL )->( dbDelete() )
         ( dbfPromoL )->( dbUnLock() )
      end
   end

   while ( dbfPromoC )->( dbSeek( cCodPro ) ) .AND. !( dbfPromoC )->( eof() )
      if dbLock( dbfPromoC )
         ( dbfPromoC )->( dbDelete() )
         ( dbfPromoC )->( dbUnLock() )
      end
   end





    ( dbfTmp1 )->( DbGoTop() )
   while ( dbfTmp1 )->( !Eof() )
      dbPass( dbfTmp1, dbfPromoL, .T. )
        ( dbfTmp1 )->( dbSkip() )
   end

    ( dbfTmp2 )->( DbGoTop() )
   while ( dbfTmp2 )->( !Eof() )
      dbPass( dbfTmp2, dbfPromoC, .T. )
        ( dbfTmp2 )->( dbSkip() )
   end





   dbCommitAll()

   CommitTransaction()

   RECOVER USING oError

   RollBackTransaction()
   msgStop( "Imposible actualizar bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )





   KillTrans()

   CursorWe()

RETURN .T.



STATIC FUNCTION KillTrans()





    ( dbfTmp1 )->( dbCloseArea() )
    ( dbfTmp2 )->( dbCloseArea() )

   dbfErase( cNewFile1 )
   dbfErase( cNewFile2 )

RETURN .T.



STATIC FUNCTION OpenFiles()

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOT.DBF" ), ( cCheckArea( "PROMOT", @dbfPromoT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOL.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoL ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMOC.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoC ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMOC.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAgentes ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TARPRET.DBF" ), ( cCheckArea( "TARPRET", @dbfTarPreT ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TARPRET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



STATIC FUNCTION CloseFiles()

   if dbfPromoT <> nil
        ( dbfPromoT )->( dbCloseArea() )
   end

   if dbfPromoL <> nil
      ( dbfPromoL )->( dbCloseArea() )
   end

   if dbfPromoC <> nil
      ( dbfPromoC )->( dbCloseArea() )
   end

   if dbfArticulo <> nil
      ( dbfArticulo )->( dbCloseArea() )
   end

   if dbfAgentes <> nil
      ( dbfAgentes )->( dbCloseArea() )
   end

   if dbfClient <> nil
      ( dbfClient )->( dbCloseArea() )
   end

   if dbfTarPreT <> nil
      ( dbfTarPreT )->( dbCloseArea() )
   end

   dbfPromoT   := nil
   dbfPromoL   := nil
   dbfPromoC   := nil
   dbfArticulo := nil
   dbfAgentes  := nil
   dbfClient   := nil
   dbfTarPreT  := nil

RETURN ( .T. )



FUNCTION mkPromo( cPath, lAppend, cPathOld, oMeter )

   local dbfPrm
   local oldPrm

   If( lAppend == nil, lAppend := .F., ) ;
   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "PROMOT.DBF" )
      dbCreate( cPath + "PROMOT.DBF", aSqlStruct( aItmPrm() ), cDriver() )
   end

   if !lExistTable( cPath + "PROMOL.DBF" )
      dbCreate( cPath + "PROMOL.DBF", aSqlStruct( aColPrm() ), cDriver() )
   end

   if !lExistTable( cPath + "PROMOC.DBF" )
      dbCreate( cPath + "PROMOC.DBF", aSqlStruct( aCliPrm() ), cDriver() )
   end

   RxPromo( cPath, oMeter )

   if lAppend .AND. lIsDir( cPathOld )

      dbUseArea( .T., cDriver(), cPath + "PROMOT.DBF", cCheckArea( "PROMOT", @dbfPrm ), .F. )
      ordListAdd( cPath + "PROMOT.CDX"  )

      dbUseArea( .T., cDriver(), cPathOld + "PROMOT.DBF", cCheckArea( "PROMOT", @oldPrm ), .F. )
      ordListAdd( cPathOld + "PROMOT.CDX"  )

      while !( oldPrm )->( Eof() )
         dbCopy( oldPrm, dbfPrm, .T. )
         ( oldPrm )->( dbSkip() )
      end

      ( dbfPrm )->( dbCloseArea() )
      ( oldPrm )->( dbCloseArea() )



      dbUseArea( .T., cDriver(), cPath + "PROMOL.DBF", cCheckArea( "PROMOL", @dbfPrm ), .F. )
      ordListAdd( cPath + "PROMOL.CDX"  )

      dbUseArea( .T., cDriver(), cPathOld + "PROMOL.DBF", cCheckArea( "PROMOL", @oldPrm ), .F. )
      ordListAdd( cPathOld + "PROMOL.CDX"  )

      while !( oldPrm )->( Eof() )
         dbCopy( oldPrm, dbfPrm, .T. )
         ( oldPrm )->( dbSkip() )
      end

      ( dbfPrm )->( dbCloseArea() )
      ( oldPrm )->( dbCloseArea() )



      dbUseArea( .T., cDriver(), cPath + "PROMOC.DBF", cCheckArea( "PROMOC", @dbfPrm ), .F. )
      ordListAdd( cPath + "PROMOC.CDX"  )

      dbUseArea( .T., cDriver(), cPathOld + "PROMOC.DBF", cCheckArea( "PROMOC", @oldPrm ), .F. )
      ordListAdd( cPathOld + "PROMOC.CDX"  )

      while !( oldPrm )->( Eof() )
         dbCopy( oldPrm, dbfPrm, .T. )
         ( oldPrm )->( dbSkip() )
      end

      ( dbfPrm )->( dbCloseArea() )
      ( oldPrm )->( dbCloseArea() )

   end

RETURN ( nil )



FUNCTION rxPromo( cPath, oMeter )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "PROMOT.DBF" )
      dbCreate( cPath + "PROMOT.DBF", aSqlStruct( aItmPrm() ), cDriver() )
   end

   if !lExistTable( cPath + "PROMOL.DBF" )
      dbCreate( cPath + "PROMOL.DBF", aSqlStruct( aColPrm() ), cDriver() )
   end

   if !lExistTable( cPath + "PROMOC.DBF" )
      dbCreate( cPath + "PROMOC.DBF", aSqlStruct( aCliPrm() ), cDriver() )
   end

   fEraseIndex( cPath + "PROMOT.CDX" )
   fEraseIndex( cPath + "PROMOL.CDX" )
   fEraseIndex( cPath + "PROMOC.CDX" )

   dbUseArea( .T., ( cDriver() ), ( cPath + "PROMOT.DBF" ), ( cCheckArea( "PROMOT", @dbfPromoT ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !( dbfPromoT )->( neterr() )
      ( dbfPromoT )->( __dbPack() )

      ( dbfPromoT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoT )->( ordCreate( cPath + "PROMOT.CDX", "CCODPRO", "Field->CCODPRO", {|| Field->CCODPRO } ) )

      ( dbfPromoT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoT )->( ordCreate( cPath + "PROMOT.CDX", "CNOMPRO", "Field->CNOMPRO", {|| Field->CNOMPRO } ) )

      ( dbfPromoT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoT )->( ordCreate( cPath + "PROMOT.CDX", "CCODTAR", "Field->CCODTAR + Field->CCODART", {|| Field->CCODTAR + Field->CCODART } ) )

      ( dbfPromoT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoT )->( ordCreate( cPath + "PROMOT.CDX", "CCODART", "Field->CCODART", {|| Field->CCODART } ) )

      ( dbfPromoT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de promociones" )
   end

   dbUseArea( .T., ( cDriver() ), ( cPath + "PROMOL.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoL ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !( dbfPromoL )->( neterr() )
      ( dbfPromoL )->( __dbPack() )

      ( dbfPromoL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoL )->( ordCreate( cPath + "PROMOL.CDX", "CCODPRO", "Field->CCODPRO", {|| Field->CCODPRO } ) )

      ( dbfPromoL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoL )->( ordCreate( cPath + "PROMOL.CDX", "CCODTAR", "Field->CCODPRO + Field->CCODAGE", {|| Field->CCODPRO + Field->CCODAGE } ) )

      ( dbfPromoL )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de promociones" )
   end

   dbUseArea( .T., ( cDriver() ), ( cPath + "PROMOC.DBF" ), ( cCheckArea( "PROMOC", @dbfPromoC ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !( dbfPromoC )->( neterr() )
      ( dbfPromoC )->( __dbPack() )

      ( dbfPromoC )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoC )->( ordCreate( cPath + "PROMOC.CDX", "CCODPRO", "Field->CCODPRO", {|| Field->CCODPRO } ) )

      ( dbfPromoC )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPromoC )->( ordCreate( cPath + "PROMOC.CDX", "CCODCLI", "Field->CCODPRO + Field->CCODCLI + Field->CCODOBR", {|| Field->CCODPRO + Field->CCODCLI + Field->CCODOBR } ) )

      ( dbfPromoC )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de promociones" )
   end

RETURN NIL






STATIC FUNCTION DelDeta( oBrw, dbfTmp )

RETURN DBDelRec( oBrw, dbfTmp )







STATIC FUNCTION EdtDet( aBlank, aoGet, dbfPromoL, oBrw, bWhen, bValid, nMode, cCodPro )

    local oDlg
    local oGet
    local oGetTxt
    local cGetTxt

    IF nMode == 1
        aBlank[ (dbfPromoL)->( FieldPos( "CCODPRO" ) ) ] := cCodPro
    end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "lineas de promociones", "LPROMO",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







        oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aBlank[ (dbfPromoL)->( FieldPos( "CCODAGE" ) ) ], aBlank[ (dbfPromoL)->( FieldPos( "CCODAGE" ) ) ]:= u ) }, oDlg,,, {||        ( cAgentes( oGet, , oGetTxt ) )},,,,,, .F., {||         ( nMode == 1 )},, .F., .F.,,,,, {|Self|( BrwAgentes( oGet, oGetTxt ) )}, nil, "LUPA",, )




        oGetTxt := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, cGetTxt, cGetTxt:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






        TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aBlank[ (dbfPromoL)->( FieldPos( "NDTOAGE" ) ) ], aBlank[ (dbfPromoL)->( FieldPos( "NDTOAGE" ) ) ]:= u ) }, oDlg,, "@E 99.99",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( EndAge( aBlank, aoGet, dbfTmp1, oBrw, nMode, oGet, oDlg )  )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 9, {||( ChmHelp ("Promociones") )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| If ( IsAge( aBlank, nMode, dbfTmp1 ), ( WinGather( aBlank, aoGet, dbfTmp1, oBrw, nMode ), oDlg:end() ), ) } )
   end

   oDlg:AddFastKey ( 112, {|| ChmHelp ("Promociones") } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( oGet:lValid() )}, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function EndAge( aBlank, aoGet, dbfTmp1, oBrw, nMode, oGet, oDlg )

   if nMode == 1
      if Empty( aBlank[ (dbfPromoL)->( FieldPos( "CCODAGE" ) ) ] )
         MsgStop( "Código no puede estar vacío" )
         oGet:SetFocus()
         return nil
      end
   end

   If IsAge( aBlank, nMode, dbfTmp1 )
      WinGather( aBlank, aoGet, dbfTmp1, oBrw, nMode )
   end

Return ( oDlg:end( 1 ) )



STATIC FUNCTION EdtCli( aBlank, aoGet, dbfPromoC, oBrw, bWhen, bValid, nMode, cCodPro )

    local oDlg
    local oGet
    local oGet2
    local oGetTxt
    local cGetTxt
    local oGetTxt2
    local cGetTxt2

    IF nMode == 1
        aBlank[ (dbfPromoC)->( FieldPos( "CCODPRO" ) ) ] := cCodPro
    end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "clientes y obras en promociones", "LPROMOC",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )








        oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aBlank[ (dbfPromoC)->( FieldPos( "CCODCLI" ) ) ], aBlank[ (dbfPromoC)->( FieldPos( "CCODCLI" ) ) ]:= u ) }, oDlg,,, {||        ( cClient( oGet, , oGetTxt ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwClient( oGet, oGetTxt ) )}, nil, "LUPA",, )





        oGetTxt := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, cGetTxt, cGetTxt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )








      oGet2 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aBlank[ (dbfPromoC)->( FieldPos( "CCODOBR" ) ) ], aBlank[ (dbfPromoC)->( FieldPos( "CCODOBR" ) ) ]:= u ) }, oDlg,,, {||     ( cObras( oGet2, oGetTxt2, aBlank[ (dbfPromoC)->( FieldPos( "CCODCLI" ) ) ] ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwObras( oGet2, oGetTxt2, aBlank[ (dbfPromoC)->( FieldPos( "CCODCLI" ) ) ] ) )}, nil, "LUPA",, )





        oGetTxt2 := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, cGetTxt2, cGetTxt2:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )







        TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aBlank[ (dbfPromoC)->( FieldPos( "NDTOPRO" ) ) ], aBlank[ (dbfPromoC)->( FieldPos( "NDTOPRO" ) ) ]:= u ) }, oDlg,, "@E 999.99",, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







        TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aBlank[ (dbfPromoC)->( FieldPos( "NCOMAGE" ) ) ], aBlank[ (dbfPromoC)->( FieldPos( "NCOMAGE" ) ) ]:= u ) }, oDlg,, "@E 999.99",, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( EndTransCli( aBlank, dbfTmp2, oBrw, nMode, oDlg, oGet ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 9, {||( ChmHelp ("Promociones") )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndTransCli( aBlank, dbfTmp2, oBrw, nMode, oDlg, oGet ) } )
   end

   oDlg:AddFastKey ( 112, {|| ChmHelp ("Promociones") } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( oGet:lValid(), oGet2:lValid() )}, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function EndTransCli( aBlank, dbfTmp2, oBrw, nMode, oDlg, oGet )

   if nMode == 1
      if Empty( aBlank[ (dbfPromoC)->( FieldPos( "CCODCLI" ) ) ] )
         MsgStop( "Código no puede estar vacío" )
         oGet:SetFocus()
         return nil
      end
   end

   WinGather( aBlank, , dbfTmp2, oBrw, nMode )

Return ( oDlg:end( 1 ) )



FUNCTION cPromo( oGet, dbfPromoT, oGet2 )

    local cAreaAnt := Alias()
    local lValid     := .F.
    local lClose     := .F.
    local xValor     := oGet:varGet()

    IF Empty( xValor )
        RETURN .T.
    end

    IF (dbfPromoT) == NIL

      IF !OpenFiles()
         RETURN .T.
      end

        lClose    := .T.

    end

    xValor    := Rjust( xValor, "0", 3 )

    IF (dbfPromoT)->( DbSeek( xValor ) )

        oGet:varPut( (dbfPromoT)->CCODPRO )
        oGet:refresh()

        IF oGet2 <> NIL
            oGet2:varPut( (dbfPromoT)->CNOMPRO )
            oGet2:refresh()
        end

        lValid     := .T.

    ELSE

        msgStop( "Promoci¢n no encontrada" )

    end

    IF lClose

        CloseFiles()

    end

    IF cAreaAnt <> ""

        dbSelectArea( ( cAreaAnt ) )

    end

RETURN lValid



FUNCTION retPromo( cCodPro, dbfPromoT )

    local lClose     := .F.
    local cAreaAnt := Alias()
    local cTemp        := Space( 30 )

    IF ( dbfPromoT ) == NIL

      IF !OpenFiles()
         RETURN cTemp
      end

        lClose    := .T.

    end

    IF ( dbfPromoT )->( DbSeek( cCodPro ) )
        cTemp := (dbfPromoT)->CNOMPRO
    end

    IF lClose
        CloseFiles()
    end

    IF cAreaAnt <> ""
        dbSelectArea( ( cAreaAnt ) )
    end

RETURN cTemp



FUNCTION BrwPromo( oGet, dbfPromoT, oGet2 )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
   local nOrd        := GetBrwOpt( "BrwPromo" )
    local oCbxOrd
   local aCbxOrd     := { "Código", "Nombre" }
   local cCbxOrd
   local lClose      := .F.
   local nLevelUsr   := Auth():Level( "01021" )

   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   if ( dbfPromoT ) == nil

      if !OpenFiles()
         return .F.
      end

      lClose         := .T.

   end

   nOrd              := ( dbfPromoT )->( OrdSetFocus( nOrd ) )

   ( dbfPromoT )->( dbGoTop() )

    oDlg = TDialog():New(,,,, "Promociones", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfPromoT ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfPromoT ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfPromoT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfPromoT
      oBrw:nMarqueeStyle   := 5

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodPro"
         :bEditValue       := {|| ( dbfPromoT )->cCodPro }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomPro"
         :bEditValue       := {|| ( dbfPromoT )->cNomPro }
         :nWidth           := 400
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end




        TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit1, dbfPromoT ) )}, oDlg,,, .F., {||     nLevelUsr <= 1},,, .F. )





        TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit1, dbfPromoT ) )}, oDlg,,, .F., {||     nLevelUsr <= 2},,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   DestroyFastFilter( dbfPromoT )

   SetBrwOpt( "BrwPromo", ( dbfPromoT )->( OrdNumber() ) )

   If oDlg:nResult == 1

      oGet:cText( ( dbfPromoT )->CCODPRO )

        IF oGet2 <> NIL
         oGet2:cText( ( dbfPromoT )->CNOMPRO )
        end

    end

    IF lClose
        CloseFiles()
    ELSE
      ( dbfPromoT )->( OrdSetFocus( nOrd ) )
    end

    oGet:setFocus()

RETURN ( oDlg:nResult == 1 )







STATIC FUNCTION IsAge( aBlank, nMode, dbfTmp )

    local lReturn     := .T.
    local nRecNo    := ( dbfTmp )->( RecNo() )
    local cTarget     := aBlank[ (dbfPromoL)->( FieldPos( "CCODAGE" ) ) ]

    IF nMode == 1

        ( dbfTmp )->( dbGoTop() )

        WHILE !( dbfTmp )->( Eof() )

            IF ( dbfTmp )->CCODAGE == cTarget
                msgStop( "Ya existe este agente en promoci¢n" )
                lReturn := .F.
                EXIT
            end

            ( dbfTmp )->( dbSkip() )

        end

        ( dbfTmp )->( dbGoTo( nRecNo ) )

    end

RETURN lReturn



FUNCTION aItmPrm()

   local aItmPrm  := {}

   aAdd( aItmPrm, { "cCodPro",   "C",    5,    0, "Código de la promoción"  } )
   aAdd( aItmPrm, { "cNomPro",   "C",   25,    0, "Nombre de la promoción"  } )
   aAdd( aItmPrm, { "cCodTar",   "C",    5,    0, "Código de la tarifa"     } )
   aAdd( aItmPrm, { "cCodArt",   "C",   18,    0, "Código del artículo"     } )
   aAdd( aItmPrm, { "dIniPro",   "D",    8,    0, "Fecha inicio promoción"  } )
   aAdd( aItmPrm, { "dFinPro",   "D",    8,    0, "Fecha fin promoción"     } )
   aAdd( aItmPrm, { "nDtoPro",   "N",    5,    2, "Porcentaje de descuento" } )

RETURN ( aItmPrm )



FUNCTION aColPrm()

   local aColPrm  := {}

   aAdd( aColPrm, { "CCODPRO",   "C",    5,    0, "Código de la promoción"          } )
   aAdd( aColPrm, { "CCODAGE",   "C",    3,    0, "Código del agente"               } )
   aAdd( aColPrm, { "NDTOAGE",   "N",    5,    2, "Descuento promoción del agente"  } )

RETURN ( aColPrm )



FUNCTION aCliPrm()

   local aCliPrm  := {}

   aAdd( aCliPrm, { "CCODPRO",   "C",    5,    0, "Código de la promoción" }  )
   aAdd( aCliPrm, { "CCODCLI",   "C",   12,    0, "Código del cliente" }      )
   aAdd( aCliPrm, { "CCODOBR",   "C",   10,    0, "Código de la dirección" }       )
   aAdd( aCliPrm, { "NDTOPRO",   "N",    5,    2, "" }                        )
   aAdd( aCliPrm, { "NCOMAGE",   "N",    5,    2, "" }                        )

RETURN ( aCliPrm )
