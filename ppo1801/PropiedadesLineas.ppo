#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\PropiedadesLineas.prg"
_HB_CLASS PropiedadesLineas ; function PropiedadesLineas ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineas", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @PropiedadesLineas() ) ) ;

    _HB_MEMBER New(); oClass:AddMethod( "New", @PropiedadesLineas_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER Dialog(); oClass:AddMethod( "Dialog", @PropiedadesLineas_Dialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineas ;



static FUNCTION PropiedadesLineas_New( oController ) ; local Self AS CLASS PropiedadesLineas := QSelf() AS CLASS PropiedadesLineas

    ::oController          := oController

RETURN ( Self )



static FUNCTION PropiedadesLineas_Dialog( ) ; local Self AS CLASS PropiedadesLineas := QSelf() AS CLASS PropiedadesLineas

   local oDlg
   local oBtnOk
   local oGetColor
   local oGetOrden
   local oGetNombre
   local oGetCodigo
   local oGetCodigoBarras

   oDlg = TDialog():New(,,,, ::lblTitle() + "propiedad", "PRODET_SQL",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






   oGetCodigo := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, oDlg,,, {||       ( ::oController:validCodigo( oGetCodigo ) )},,,,,, .F., {||        ( !::oController:isZoomMode() )},, .F., .F.,,,,,, nil,,, )






   oGetNombre := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, oDlg,,, {||       ( ::oController:validNombre( oGetNombre ) )},,,,,, .F., {||        ( !::oController:isZoomMode() )},, .F., .F.,,,,,, nil,,, )







   oGetOrden := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "orden" ], ::oController:oModel:hBuffer[ "orden" ]:= u ) }, oDlg,, "9999", {||       ( ::oController:validOrden( oGetOrden ) )},,,,,, .F., {||         ( !::oController:isZoomMode() )},, .F., .F.,,,,,, nil,,, )





   oGetCodigoBarras := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo_barras" ], ::oController:oModel:hBuffer[ "codigo_barras" ]:= u ) }, oDlg,,,,,,,,, .F., {||         ( !::oController:isZoomMode() )},, .F., .F.,,,,,, nil,,, )






   oGetColor := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "color" ], ::oController:oModel:hBuffer[ "color" ]:= u ) }, oDlg,,,,,,,,, .F., {||        (  !::oController:isZoomMode() )},, .F., .F.,,,,,, nil, "LUPA",, )

   if !empty( ::oController:oModel:hBuffer[ "color" ] )
      oGetColor:setColor( ::oController:oModel:hBuffer[ "color" ], ::oController:oModel:hBuffer[ "color" ] )
   else
      oGetColor:setColor( "N/W*", "N/W*" )
   end



   oGetColor:bHelp   := {||   ::oController:oModel:hBuffer[ "color" ] := ChooseColor(), oGetColor:setColor( ::oController:oModel:hBuffer[ "color" ], ::oController:oModel:hBuffer[ "color" ] ), oGetColor:Refresh() }





   oBtnOk := TButton():ReDefine( 1, {||( if( validateDialog( oDlg ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( !::oController:isZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )



   oDlg:addFastKey( 116, {|| oBtnOk:Click() } )



   oDlg:bStart    := {|| oGetCodigo:setFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )
