#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\PropiedadesLineasController.prg"
_HB_CLASS PropiedadesLineasController ; function PropiedadesLineasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineasController", iif( .T., { @SQLBrowseController() }, { @HBObject() } ), @PropiedadesLineasController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @PropiedadesLineasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @PropiedadesLineasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isNotColorProperty(); oClass:AddInline( "isNotColorProperty", {|Self | ( ( Self ) ), ( !::oSenderController:isColorProperty() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineasController ;



static FUNCTION PropiedadesLineasController_New( oController ) ; local Self AS CLASS PropiedadesLineasController := QSelf() AS CLASS PropiedadesLineasController

   ::Super:New( oController )

   ::cTitle                      := "Propiedades lineas"

   ::cName                       := "articulos_propiedades_lineas"

   ::oModel                      := SQLPropiedadesLineasModel():New( self )

   ::oBrowseView                 := PropiedadesLineasBrowseView():New( self )

   ::oDialogView                 := PropiedadesLineasView():New( self )

   ::oValidator                  := PropiedadesLineasValidator():New( self, ::oDialogView )

   ::oRepository                 := PropiedadesLineasRepository():New( self )

   ::oModel:setEvent( "gettingSelectSentence",  {|| ::oModel:gettingSelectSentence() } )

RETURN ( Self )



static FUNCTION PropiedadesLineasController_End( ) ; local Self AS CLASS PropiedadesLineasController := QSelf() AS CLASS PropiedadesLineasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::Super:End()

RETURN ( Self )









_HB_CLASS PropiedadesLineasBrowseView ; function PropiedadesLineasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @PropiedadesLineasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @PropiedadesLineasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineasBrowseView ;



static FUNCTION PropiedadesLineasBrowseView_addColumns( ) ; local Self AS CLASS PropiedadesLineasBrowseView := QSelf() AS CLASS PropiedadesLineasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 60
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "orden"
      :cHeader             := "Orden"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "orden" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
      :cEditPicture        := "9999"
   end

RETURN ( self )









_HB_CLASS PropiedadesLineasView ; function PropiedadesLineasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @PropiedadesLineasView() ) ) ;

   _HB_MEMBER { oColorRGB } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oColorRGB"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @PropiedadesLineasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER startActivate(); oClass:AddMethod( "startActivate", @PropiedadesLineasView_startActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER changeColorRGB(); oClass:AddMethod( "changeColorRGB", @PropiedadesLineasView_changeColorRGB(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineasView ;








static FUNCTION PropiedadesLineasView_Activate( ) ; local Self AS CLASS PropiedadesLineasView := QSelf() AS CLASS PropiedadesLineasView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "lineas de propiedades", "PROPIEDADES_LINEAS",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, "gc_coathanger_48",, ::oDialog,,, .F., .F.,,, .F.,,, .T. )





   ::oMessage := TSay():ReDefine( 800, {||      "Lineas de propiedades"}, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )







   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "orden" ], ::oController:oModel:hBuffer[ "orden" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,, {||         0},,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo_barras" ], ::oController:oModel:hBuffer[ "codigo_barras" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   ::oColorRGB := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "color_rgb" ], ::oController:oModel:hBuffer[ "color_rgb" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil, "gc_photographic_filters_16", 141, )

   ::oColorRGB:setColor( ::oController:oModel:hBuffer[ "color_rgb" ], ::oController:oModel:hBuffer[ "color_rgb" ] )
   ::oColorRGB:bHelp := {|| ::changeColorRGB() }







   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::startActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )



static FUNCTION PropiedadesLineasView_changeColorRGB( ) ; local Self AS CLASS PropiedadesLineasView := QSelf() AS CLASS PropiedadesLineasView

   local nColorRGB   := ChooseColor()

   if !empty( nColorRGB )
      ::oColorRGB:setColor( nColorRGB, nColorRGB )
      ::oColorRGB:cText( nColorRGB )
   end

RETURN ( self )



static FUNCTION PropiedadesLineasView_startActivate( ) ; local Self AS CLASS PropiedadesLineasView := QSelf() AS CLASS PropiedadesLineasView

   if ::oController:isNotColorProperty()
      ::oColorRGB:Hide()
   end

RETURN ( self )







_HB_CLASS PropiedadesLineasValidator ; function PropiedadesLineasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineasValidator", iif( .T., { @SQLParentValidator() }, { @HBObject() } ), @PropiedadesLineasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @PropiedadesLineasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineasValidator ;



static FUNCTION PropiedadesLineasValidator_getValidators( ) ; local Self AS CLASS PropiedadesLineasValidator := QSelf() AS CLASS PropiedadesLineasValidator




   ::hValidators  := {  "nombre" =>    {  "required"  => "El nombre es un dato requerido", "unique"    => "El nombre introducido ya existe" }, "codigo" =>    {  "required"  => "El código es un dato requerido" , "unique"    => "El código introducido ya existe" } }
RETURN ( ::hValidators )







_HB_CLASS SQLPropiedadesLineasModel ; function SQLPropiedadesLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLPropiedadesLineasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLPropiedadesLineasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "articulos_propiedades_lineas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLPropiedadesLineasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLPropiedadesLineasModel ;



static FUNCTION SQLPropiedadesLineasModel_getColumns( ) ; local Self AS CLASS SQLPropiedadesLineasModel := QSelf() AS CLASS SQLPropiedadesLineasModel


   hset( ::hColumns, "id",             {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",           {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",    {  "create"    => "VARCHAR( 40 )"                           , "default"   => {|| ::getSenderControllerParentUuid() } } )


   hset( ::hColumns, "codigo",         {  "create"    => "VARCHAR( 4 )"                            , "default"   => {|| space( 4 ) } }                        )


   hset( ::hColumns, "nombre",         {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "orden",          {  "create"    => "SMALLINT UNSIGNED"                       , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "codigo_barras",  {  "create"    => "VARCHAR( 4 )"                            , "default"   => {|| space( 4 ) } }                        )


   hset( ::hColumns, "color_rgb",      {  "create"    => "INT UNSIGNED"                            , "default"   => {|| ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ) } }              )

RETURN ( ::hColumns )







_HB_CLASS PropiedadesLineasRepository ; function PropiedadesLineasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @PropiedadesLineasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLPropiedadesLineasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineasRepository ;