#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\PropiedadesLineasModel.prg"
_HB_CLASS PropiedadesLineasModel ; function PropiedadesLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineasModel", iif( .T., { @SQLBaseLineasModel() }, { @HBObject() } ), @PropiedadesLineasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "propiedades_lineas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cDbfTableName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDbfTableName"}, .F. )

   _HB_MEMBER { hColumns } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hColumns"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @PropiedadesLineasModel_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateOrden( Operation, newPosition); oClass:AddMethod( "updateOrden", @PropiedadesLineasModel_updateOrden(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER largeUpdateOrden( Operation, Conditions); oClass:AddMethod( "largeUpdateOrden", @PropiedadesLineasModel_largeUpdateOrden(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER reOrder(); oClass:AddMethod( "reOrder", @PropiedadesLineasModel_reOrder(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getImportSentence( cPath); oClass:AddMethod( "getImportSentence", @PropiedadesLineasModel_getImportSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER makeSpecialImportDbfSQL(); oClass:AddInline( "makeSpecialImportDbfSQL", {|Self | ( ( Self ) ), ( ::makeImportDbfSQL( cPatEmp() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineasModel ;



static FUNCTION PropiedadesLineasModel_New( ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

    ::cDbfTableName                    :=    "TBLPRO"

















































    ::hColumns                            :=    {    "id"                    =>    {    "create"        =>    "INTEGER PRIMARY KEY AUTO_INCREMENT"        ,    "text"        =>    "Identificador"                                    ,    "header"        => "Id"                                                    ,    "visible"    =>    .F.}                                                    ,    "codigo"                =>    {    "create"        =>    "VARCHAR(40) NOT NULL"                            ,    "text"        =>    "Código de la linea de propiedad"            ,    "header"        =>    "Código"                                                ,    "visible"    =>    .T.                                                    ,    "width"        =>    100                                                    ,    "field"        =>    "cCodTbl"                                            ,    "type"        =>    "C"                                                    ,    "len"            =>    40 }                                                    ,    "nombre"                =>    {    "create"        =>    "VARCHAR(30) NOT NULL"                            ,    "text"        =>    "Nombre de la linea de propiedad"            ,    "header"        =>    "Nombre"                                                ,    "visible"    =>    .T.                                                    ,    "width"        =>    100                                                    ,    "field"        =>    "cDesTbl"                                            ,    "type"        =>    "C"                                                    ,    "len"            =>    60 }                                                    ,    "orden"                =>    {    "create"        =>    "INT NOT NULL"                                        ,    "text"        =>    "Número de orden para códigos de barras"    ,    "header"        =>    "Orden"                                                ,    "visible"    =>    .T.                                                    ,    "width"        =>    50                                                        ,    "field"        =>    "nOrdTbl"                                            ,    "type"        =>    "N"                                                    ,    "len"            =>    5 }                                                    ,    "codigo_barras"    =>    {    "create"        =>    "VARCHAR(4)"                                        ,    "text"        =>    "Código de barras"                                ,    "header"        =>    "Código de barras"                                ,    "visible"    =>    .T.                                                    ,    "width"        =>    100                                                    ,    "field"        =>    "nBarTbl"                                            ,    "type"        =>    "C"                                                    ,    "len"            =>    4 }                                                    ,    "color"                =>    {    "create"        =>    "INT(9)"                                                ,    "text"        =>    "Código de color"                                    ,    "header"        =>    "Color"                                                ,    "visible"    =>    .F.                                                    ,    "width"        =>    50                                                        ,    "field"        =>    "nColor"                                                ,    "type"        =>    "N"                                                    ,    "len"            =>    9 }                                                    ,    "id_cabecera"        =>    {    "create"        =>    "INTEGER"                                            ,    "text"        =>    "Identificador de la cabecera"                ,    "header"        =>    "Id"                                                    ,    "field"        =>    "cCodPro"                                            ,    "visible"    => .F. }                                                    }

        ::cForeignColumn        := "id_cabecera"

        ::Super:New()

        ::cConstraints           := "FOREIGN KEY (id_cabecera) REFERENCES propiedades(id) ON DELETE CASCADE"

Return ( Self )



static FUNCTION PropiedadesLineasModel_updateOrden( Operation, newPosition ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local SentenceForOthers
   local SentenceForMyPosition

    SentenceForOthers       := "UPDATE " + ::cTableName + " SET orden = " + Operation + " WHERE orden = " + toSQLString( newPosition )
   SentenceForMyPosition   := "UPDATE " + ::cTableName + " SET orden = " + toSQLString( newPosition ) + " WHERE id = " + toSQLString( ::oRowSet():fieldget( "id" ) )

   getSQLDatabase():Query( SentenceForOthers )
   getSQLDatabase():Query( SentenceForMyPosition )

   ::buildRowSetAndFind()

   RETURN ( self )



static FUNCTION PropiedadesLineasModel_largeUpdateOrden( Operation, Conditions ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local SentenceForOthers

    SentenceForOthers       := "UPDATE " + ::cTableName + " SET orden = " + Operation + " WHERE orden " + Conditions

   getSQLDatabase():Query( SentenceForOthers )

   RETURN ( self )



static FUNCTION PropiedadesLineasModel_reOrder( ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

    local cSQLUpdate
    local cSentence     := "SELECT * FROM " + ::cTableName + " WHERE id_cabecera = " + toSQLString( ::idForeignKey ) + " ORDER by orden"

    ::buildRowSet( cSentence )

    while !::oRowSet:eof()

        cSQLUpdate      := "UPDATE " + ::cTableName + " SET orden = " + toSQLString( ::oRowSet:recno() ) + " WHERE id = " + toSQLString( ::oRowSet():fieldget( "id" ) )

        getSQLDatabase():Query( cSQLUpdate )

        ::oRowSet:skip(1)

    end

    ::buildRowSetAndFind()

Return ( Self )



static FUNCTION PropiedadesLineasModel_getImportSentence( cPath ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local dbf
   local cValues     := ""
   local cInsert     := ""

   dbUseArea( .T., cLocalDriver(), cPath + "\" + ::getDbfTableName(), cCheckArea( "dbf", @dbf ), .F. )
   if ( dbf )->( neterr() )
      Return ( cInsert )
   end

   cInsert           := "INSERT INTO " + ::cTableName + " ( "
   hEval( ::hColumns, {| k | if ( k <> ::cColumnKey, cInsert += k + ", ", ) } )
   cInsert           := ChgAtEnd( cInsert, " ) VALUES ", 2 )

   ( dbf )->( dbgotop() )
   while ( dbf )->( !eof() )

      cValues        += "( "




            hEval( ::hColumns, {| k, hash | if ( k <> ::cColumnKey, if ( k == "id_cabecera", cValues += " ( SELECT id FROM propiedades WHERE codigo = " + toSQLString( ( dbf )->( fieldget( fieldpos( hget( hash, "field" ) ) ) ) ) + " )" + ", ", cValues += toSQLString( ( dbf )->( fieldget( fieldpos( hget( hash, "field" ) ) ) ) ) + ", "), ) } )


      cValues        := chgAtEnd( cValues, " ), ", 2 )

      ( dbf )->( dbskip() )
   end

   ( dbf )->( dbclosearea() )

   if empty( cValues )
      Return ( nil )
   end

   cValues           := chgAtEnd( cValues, "", 2 )

   cInsert           += cValues

Return ( cInsert )
