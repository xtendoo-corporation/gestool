#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\PropiedadesModel.prg"
_HB_CLASS PropiedadesModel ; function PropiedadesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @PropiedadesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "Pro" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre( cCodigoPropiedad); oClass:AddInline( "getNombre", {|Self , cCodigoPropiedad| ( ( Self ) ), ::getField( "cDesPro", "cCodPro", cCodigoPropiedad )}, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNamesFromIdLanguagesPS( cCodigoPropiedad, aIdsLanguages); oClass:AddMethod( "getNamesFromIdLanguagesPS", @PropiedadesModel_getNamesFromIdLanguagesPS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getListToWP(); oClass:AddMethod( "getListToWP", @PropiedadesModel_getListToWP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateWpId( cIdWP, cCodPrp); oClass:AddMethod( "updateWpId", @PropiedadesModel_updateWpId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @PropiedadesModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesModel ;



static FUNCTION PropiedadesModel_getNamesFromIdLanguagesPS( cCodigoPropiedad, aIdsLanguages ) ; local Self AS CLASS PropiedadesModel := QSelf() AS CLASS PropiedadesModel

   local cName
   local hNames   := {=>}

   if Len( aIdsLanguages ) == 0
      Return ( hNames )
   end

   cName    := ::getNombre( cCodigoPropiedad )

   if Empty( cName )
      Return ( hNames )
   end

   aEval( aIdsLanguages, {|id| hSet( hNames, AllTrim( Str( id ) ), AllTrim( cName ) ) } )

RETURN ( hNames )



static FUNCTION PropiedadesModel_getListToWP( ) ; local Self AS CLASS PropiedadesModel := QSelf() AS CLASS PropiedadesModel

   local cArea := "getListToWP"
   local cSql  := ""

   cSql        += "SELECT * FROM " + ::getTableName()

   if ::ExecuteSqlStatement( cSql, @cArea )
      Return ( DBHScatter( cArea ) )
   end

RETURN ( {} )



static FUNCTION PropiedadesModel_updateWpId( cIdWP, cCodPrp ) ; local Self AS CLASS PropiedadesModel := QSelf() AS CLASS PropiedadesModel

   local cStm     := "updateWpId"
   local cSql     := ""
   local aList    := {}

   cSql           := "UPDATE " + ::getTableName()
   cSql           += " SET cIdWP = " + quoted( cIdWP )
   cSql           += " WHERE cCodPro = " + quoted( cCodPrp )

   ::ExecuteSqlStatement( cSql, @cStm )


RETURN ( self )



static FUNCTION PropiedadesModel_getToOdoo( cArea ) ; local Self AS CLASS PropiedadesModel := QSelf() AS CLASS PropiedadesModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )









_HB_CLASS PropiedadesLineasModel ; function PropiedadesLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PropiedadesLineasModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @PropiedadesLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "TblPro" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER exist(); oClass:AddMethod( "exist", @PropiedadesLineasModel_exist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddMethod( "getNombre", @PropiedadesLineasModel_getNombre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColor(); oClass:AddMethod( "getColor", @PropiedadesLineasModel_getColor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPropiedadesGeneral( cCodigoPropiedad); oClass:AddMethod( "getPropiedadesGeneral", @PropiedadesLineasModel_getPropiedadesGeneral(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getListToWP( cCodPrp); oClass:AddMethod( "getListToWP", @PropiedadesLineasModel_getListToWP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateWpId( cIdWP, cCodPrp, cCodTbl); oClass:AddMethod( "updateWpId", @PropiedadesLineasModel_updateWpId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @PropiedadesLineasModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PropiedadesLineasModel ;



static FUNCTION PropiedadesLineasModel_exist( cCodigoPropiedad, cValorPropiedad ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local cStm



   local cSql  := "SELECT cDesTbl "                                             +  "FROM " + ::getTableName() + " "                           +  "WHERE cCodPro = " + quoted( cCodigoPropiedad ) + " "     +     "AND cCodTbl = " + quoted( cValorPropiedad )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( "" )



static FUNCTION PropiedadesLineasModel_getNombre( cCodigoPropiedad, cValorPropiedad ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local cStm



   local cSql  := "SELECT cDesTbl "                                             +  "FROM " + ::getTableName() + " "                           +  "WHERE cCodPro = " + quoted( cCodigoPropiedad ) + " "     +     "AND cCodTbl = " + quoted( cValorPropiedad )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( alltrim( ( cStm )->cDesTbl ) )
   end

RETURN ( "" )



static FUNCTION PropiedadesLineasModel_getColor( cCodigoPropiedad, cValorPropiedad ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local cStm



   local cSql  := "SELECT nColor "                                           +  "FROM " + ::getTableName() + " "                         +  "WHERE cCodPro = " + quoted( cCodigoPropiedad ) + " "    +  "AND cCodTbl = " + quoted( cValorPropiedad )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->nColor )
   end

RETURN ( 0 )



static FUNCTION PropiedadesLineasModel_getPropiedadesGeneral( cCodigoArticulo, cCodigoPropiedad ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local aPropiedades   := {}
   local cStm








   local cSql           := "SELECT "                                                            +  "header.cDesPro AS TipoPropiedad, "                               +  "header.lColor AS ColorPropiedad, "                               +  "line.cCodTbl AS ValorPropiedad, "                                +  "line.nColor AS RgbPropiedad, "                                   +  "line.cDesTbl AS CabeceraPropiedad "                              +  "FROM " + ::getTableName() + " line "                                +  "INNER JOIN " + PropiedadesModel():getTableName() + " header "    +  "ON header.cCodPro = " + quoted( cCodigoPropiedad )

   if ::ExecuteSqlStatement( cSql, @cStm )









      ( cStm )->( dbeval(  {|| aadd( aPropiedades , {  "CodigoArticulo"     => rtrim( cCodigoArticulo ), "CodigoPropiedad"    => rtrim( cCodigoPropiedad ), "TipoPropiedad"      => rtrim( Field->TipoPropiedad ), "ValorPropiedad"     => rtrim( Field->ValorPropiedad ), "CabeceraPropiedad"  => rtrim( Field->CabeceraPropiedad ), "ColorPropiedad"     => Field->ColorPropiedad, "RgbPropiedad"       => Field->RgbPropiedad } ) } ) )

   end

RETURN ( aPropiedades )



static FUNCTION PropiedadesLineasModel_getListToWP( cCodPrp ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local cArea := "getListToWP"
   local cSql  := ""

   cSql        += "SELECT * FROM " + ::getTableName()
   cSql        += " WHERE cCodPro = " + quoted( cCodPrp )

   if ::ExecuteSqlStatement( cSql, @cArea )
      Return ( DBHScatter( cArea ) )
   end

RETURN ( {} )



static FUNCTION PropiedadesLineasModel_updateWpId( cIdWP, cCodPrp, cCodTbl ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local cStm     := "updateWpId"
   local cSql     := ""
   local aList    := {}

   cSql           := "UPDATE " + ::getTableName()
   cSql           += " SET cIdWP = " + quoted( cIdWP )
   cSql           += " WHERE cCodPro = " + quoted( cCodPrp )
   cSql           += " AND cCodTbl = " + quoted( cCodTbl )

   ::ExecuteSqlStatement( cSql, @cStm )

RETURN ( self )



static FUNCTION PropiedadesLineasModel_getToOdoo( cArea ) ; local Self AS CLASS PropiedadesLineasModel := QSelf() AS CLASS PropiedadesLineasModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )
