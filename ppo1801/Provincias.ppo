#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 16 ".\.\Prg\Provincias.prg"
_HB_CLASS Provincias ; function Provincias ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "Provincias", iif( .T., { @TMant() }, { @HBObject() } ), @Provincias() ) ) ;

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )

   _HB_MEMBER { getCodigo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"getCodigo"}, .F. )
   _HB_MEMBER { getProvincia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"getProvincia"}, .F. )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS Provincias; oClass:AddMethod( "New", @Provincias_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create( cPath) AS CLASS Provincias; oClass:AddMethod( "Create", @Provincias_Create(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @Provincias_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER OpenService( lExclusive); oClass:AddMethod( "OpenService", @Provincias_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @Provincias_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @Provincias_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER lSaveResource(); oClass:AddMethod( "lSaveResource", @Provincias_lSaveResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER startResource(); oClass:AddInline( "startResource", {|Self | ( ( Self ) ), ( ::getCodigo:setFocus() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreProvincia(); oClass:AddInline( "getNombreProvincia", {|Self, cCodigoProvincia | ( ( Self ) ), ( oRetFld( cCodigoProvincia, ::oDbf, "cNomPrv", 1 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS Provincias ;



static FUNCTION Provincias_Create( cPath, cDriver ) ; local Self AS CLASS Provincias := QSelf() AS CLASS Provincias

   If( cPath == nil, cPath := cPatDat(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::cPath           := cPath
   ::cDriver         := cDriver

   ::oDbf            := nil

RETURN ( Self )



static FUNCTION Provincias_New( cPath, cDriver, oWndParent, oMenuItem ) ; local Self AS CLASS Provincias := QSelf() AS CLASS Provincias

   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil
      ::nLevel          := Auth():Level( oMenuItem )
   else
      ::nLevel          := Auth():Level( "provincias" )
   end

   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::Create()

   ::oWndParent         := oWndParent

   ::lCreateShell       := .F.

   ::cMru               := "gc_signpost_16"

   ::cBitmap            := ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) )

   ::cHtmlHelp          := "Provincias"

RETURN ( Self )



static FUNCTION Provincias_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS Provincias := QSelf() AS CLASS Provincias

   local lOpen          := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;
   If( cPath == nil, cPath := ::cPath, ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de provincias" )

      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION Provincias_DefineFiles( cPath, cDriver ) ; local Self AS CLASS Provincias := QSelf() AS CLASS Provincias

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := ::cDriver, ) ;

   ::oDbf := DbfServer( "Provincia.DBF", "PROVINCIA" ):New( "Provincia.DBF", "PROVINCIA", ( cDriver ), "Provincias", ( cPath ) )

      ::oDbf:AddField( "cCodPrv", "C", 2, 0,,,,, "Código", .F., 80, .F., {} )
      ::oDbf:AddField( "cNomPrv", "C", 30, 0,,,,, "Provincia", .F., 200, .F., {} )

      ::oDbf:AddIndex( "cCodPrv", "Provincia.CDX", "cCodPrv",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNomPrv", "Provincia.CDX", "Upper( cNomPrv )",,, .F., .F., "Provincia",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION Provincias_Resource( nMode ) ; local Self AS CLASS Provincias := QSelf() AS CLASS Provincias

   local oBmp

   ::oDlg = TDialog():New(,,,, LblTitle( nMode ) + "provincia", "Provincia",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )





      oBmp := TBitmap():ReDefine( 900, "gc_signpost_32",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )





      ::getCodigo := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodPrv, ::oDbf:cCodPrv:= u ) }, ::oDlg,, "@!",,,,,,, .T., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )

      ::getCodigo:bValid := {|| notValid( ::getCodigo, ::oDbf:cAlias ) .AND. !empty( ::getCodigo:VarGet() ) }





      ::getProvincia := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomPrv, ::oDbf:cNomPrv:= u ) }, ::oDlg,, "@!",,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( ::lSaveResource( nMode ) )}, ::oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      ::oDlg:AddFastKey( 116, {|| ::lSaveResource( nMode ) } )
   end

   ::oDlg:bStart  := { || ::StartResource() }

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:End()
   end

RETURN ( ::oDlg:nResult == 1 )



static FUNCTION Provincias_lSaveResource( nMode ) ; local Self AS CLASS Provincias := QSelf() AS CLASS Provincias

   if nMode == 1 .OR. nMode == 4

      if empty( ::getCodigo:varGet() )
         msgStop( "Código de grupo de família no puede estar vacío." )
         ::getCodigo:setFocus()
         return .F.
      end

      if ::oDbf:seekInOrd( ::getCodigo:varGet(), "cCodPrv" )
         msgStop( "Código ya existe."  )
         return .F.
      end

   end

   if empty( ::getProvincia:varGet() )
      msgStop( "Nombre de provincia no puede estar vacía." )
      ::getProvincia:setFocus()
      return .F.
   end

RETURN ( ::oDlg:end( 1 ) )
