#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ProvinciasController.prg"
_HB_CLASS ProvinciasController ; function ProvinciasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ProvinciasController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @ProvinciasController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @ProvinciasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ProvinciasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSelectorProvincia( oGet); oClass:AddMethod( "getSelectorProvincia", @ProvinciasController_getSelectorProvincia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ProvinciasController ;



static FUNCTION ProvinciasController_New( ) ; local Self AS CLASS ProvinciasController := QSelf() AS CLASS ProvinciasController

   ::Super:New()

   ::cTitle                   := "Provincias"

   ::cName                    := "provincias"



   ::hImage                   := {  "16" => "gc_flag_spain_16", "32" => "gc_flag_spain_32", "48" => "gc_flag_spain_48" }

   ::nLevel                   := Auth():Level( ::cName )

   ::oModel                   := SQLProvinciasModel():New( self )

   ::oBrowseView              := ProvinciasBrowseView():New( self )

   ::oDialogView              := ProvinciasView():New( self )

   ::oValidator               := ProvinciasValidator():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

RETURN ( Self )


static FUNCTION ProvinciasController_End( ) ; local Self AS CLASS ProvinciasController := QSelf() AS CLASS ProvinciasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()



   ::Super:End()

RETURN ( Self )



static FUNCTION ProvinciasController_getSelectorProvincia( oGet ) ; local Self AS CLASS ProvinciasController := QSelf() AS CLASS ProvinciasController

   local hResult := ::ActivateSelectorView()

   if hb_isnil( hResult )
      RETURN ( Self )
   end

   if hHasKey( hResult, "codigo" )
      oGet:cText( hGet( hResult, "codigo" ) )
   else
      oGet:cText( "" )
   end

RETURN ( Self )










_HB_CLASS ProvinciasBrowseView ; function ProvinciasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ProvinciasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @ProvinciasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @ProvinciasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ProvinciasBrowseView ;



static FUNCTION ProvinciasBrowseView_addColumns( ) ; local Self AS CLASS ProvinciasBrowseView := QSelf() AS CLASS ProvinciasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "provincia"
      :cHeader             := "Provincia"
      :nWidth              := 150
      :bEditValue          := {|| ::getRowSet():fieldGet( "provincia" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS ProvinciasView ; function ProvinciasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ProvinciasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ProvinciasView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ProvinciasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ProvinciasView ;



static FUNCTION ProvinciasView_Activate( ) ; local Self AS CLASS ProvinciasView := QSelf() AS CLASS ProvinciasView

   local oDlg
   local oBmpGeneral
   local oBtnEdit
   local oBtnAppend
   local oBtnDelete



   oDlg = TDialog():New(,,,, ::LblTitle() + "provincia", "PROVINCIA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





   oBmpGeneral := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, oDlg,,, .F., .F.,,, .F.,,, .T. )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, oDlg,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode()  )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "provincia" ], ::oController:oModel:hBuffer[ "provincia" ]:= u ) }, oDlg,,, {||       ( ::oController:validate( "provincia" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TButton():ReDefine( 1, {||( if( validateDialog( oDlg ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      oDlg:AddFastKey( 116, {|| if( validateDialog( oDlg ), oDlg:end( 1 ), ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBmpGeneral:end()

RETURN ( oDlg:nResult )








_HB_CLASS ProvinciasValidator ; function ProvinciasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ProvinciasValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @ProvinciasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @ProvinciasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ProvinciasValidator ;



static FUNCTION ProvinciasValidator_getValidators( ) ; local Self AS CLASS ProvinciasValidator := QSelf() AS CLASS ProvinciasValidator





   ::hValidators  := {     "codigo"    =>       {  "required"           => "El código es un dato requerido", "unique"             => "El código introducido ya existe" , "onlyAlphanumeric"   => "EL código no puede contener caracteres especiales" } , "provincia" =>       {  "required"           => "La provincia es un datos requerido", "unique"             => "La provincia introducida ya existe" } }


RETURN ( ::hValidators )










_HB_CLASS SQLProvinciasModel ; function SQLProvinciasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLProvinciasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLProvinciasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "provincias", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLProvinciasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLProvinciasModel ;



static FUNCTION SQLProvinciasModel_getColumns( ) ; local Self AS CLASS SQLProvinciasModel := QSelf() AS CLASS SQLProvinciasModel



   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "text"      => "Identificador"                           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 ) NOT NULL UNIQUE"           , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "provincia",         {  "create"    => "VARCHAR( 50 )"                          , "default"   => {|| space( 50 ) } }                       )

RETURN ( ::hColumns )











_HB_CLASS ProvinciasRepository ; function ProvinciasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ProvinciasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @ProvinciasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLProvinciasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ProvinciasRepository ;