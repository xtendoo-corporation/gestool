#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 13 ".\.\Prg\Rccs.prg"
_HB_CLASS TRCcs ; function TRCcs ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRCcs", iif( .F., { }, { @HBObject() } ), @TRCcs() ) ) ;

   _HB_MEMBER { hDC } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDC"}, .F. )
   _HB_MEMBER { hDCOut } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDCOut"}, .F. )
   _HB_MEMBER { aRows } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aRows"}, .F. )
   _HB_MEMBER { oFont } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFont"}, .F. )
   _HB_MEMBER { cFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFile"}, .F. )
   _HB_MEMBER { AS NUMERIC hFile } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hFile"}, .F. )
   _HB_MEMBER { AS NUMERIC nFile } ; oClass:AddMultiData( "NUMERIC", 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFile"}, .F. )
   _HB_MEMBER { AS LOGIC lMeta } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lMeta"}, .F. )
   _HB_MEMBER { nXOffset } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nXOffset"}, .F. )
   _HB_MEMBER { nYOffset } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nYOffset"}, .F. )
   _HB_MEMBER { AS LOGIC lPrvModal } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lPrvModal"}, .F. )

   _HB_MEMBER New( cFile) AS CLASS TRCcs; oClass:AddMethod( "New", @TRCcs_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER StartPage(); oClass:AddMethod( "StartPage", @TRCcs_StartPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER EndPage(); oClass:AddMethod( "EndPage", @TRCcs_EndPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TRCcs_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Say( nRow, nCol, cText, oFont); oClass:AddMethod( "Say", @TRCcs_Say(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetHeight( nHeight) ; oClass:AddVirtual( "SetHeight" )

   _HB_MEMBER GetTextWidth(); oClass:AddInline( "GetTextWidth", {|Self, cText, oFont | ( ( Self ) ), GetTextWidth( ::hDC, cText, ::SetFont( oFont ):hFont ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetTextHeight(); oClass:AddInline( "GetTextHeight", {|Self, cText, oFont | ( ( Self ) ), ::SetFont( oFont ):nHeight }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetSize( nWidth, nHeight) ; oClass:AddVirtual( "SetSize" )

   _HB_MEMBER GetPhySize(); oClass:AddInline( "GetPhySize", {|Self | ( ( Self ) ), ({::nWidth, ::nHeight}) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CharWidth(); oClass:AddInline( "CharWidth", {|Self | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CharHeight(); oClass:AddInline( "CharHeight", {|Self | ( ( Self ) ), 2 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nVertRes(); oClass:AddInline( "nVertRes", {|Self | ( ( Self ) ), GetDeviceCaps( ::hDC, 10  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nHorzRes(); oClass:AddInline( "nHorzRes", {|Self | ( ( Self ) ), GetDeviceCaps( ::hDC, 8  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nVertSize(); oClass:AddInline( "nVertSize", {|Self | ( ( Self ) ), GetDeviceCaps( ::hDC, 6 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nHorzSize(); oClass:AddInline( "nHorzSize", {|Self | ( ( Self ) ), GetDeviceCaps( ::hDC, 4 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )









   _HB_MEMBER nLogPixelX(); oClass:AddInline( "nLogPixelX", {|Self | ( ( Self ) ), GetDeviceCaps( ::hDC, 88 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nLogPixelY(); oClass:AddInline( "nLogPixelY", {|Self | ( ( Self ) ), GetDeviceCaps( ::hDC, 90 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CharSay(); oClass:AddInline( "CharSay", {|Self, nRow, nCol, cText | ( ( Self ) ), ::Say(nRow, nCol, cText) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetOrientation(); oClass:AddInline( "GetOrientation", {|Self | ( ( Self ) ), 2 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SayBitmap() ; oClass:AddVirtual( "SayBitmap" )
   _HB_MEMBER SetPos() ; oClass:AddVirtual( "SetPos" )

   _HB_MEMBER Line(); oClass:AddMethod( "Line", @TRCcs_Line(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Box() ; oClass:AddVirtual( "Box" )

   _HB_MEMBER SetPixelMode() ; oClass:AddVirtual( "SetPixelMode" )
   _HB_MEMBER SetTwipsMode() ; oClass:AddVirtual( "SetTwipsMode" )

   _HB_MEMBER SetLoInchMode() ; oClass:AddVirtual( "SetLoInchMode" )
   _HB_MEMBER SetHiInchMode() ; oClass:AddVirtual( "SetHiInchMode" )

   _HB_MEMBER SetLoMetricMode() ; oClass:AddVirtual( "SetLoMetricMode" )
   _HB_MEMBER SetHiMetricMode() ; oClass:AddVirtual( "SetHiMetricMode" )

   _HB_MEMBER SetIsotropicMode() ; oClass:AddVirtual( "SetIsotropicMode" )
   _HB_MEMBER SetAnisotropicMode() ; oClass:AddVirtual( "SetAnisotropicMode" )

   _HB_MEMBER SetWindowExt() ; oClass:AddVirtual( "SetWindowExt" )

   _HB_MEMBER SetViewPortExt() ; oClass:AddVirtual( "SetViewPortExt" )

   _HB_MEMBER FillRect() ; oClass:AddVirtual( "FillRect" )

   _HB_MEMBER SetLandscape() ; oClass:AddVirtual( "SetLandscape" )
   _HB_MEMBER SetPortrait() ; oClass:AddVirtual( "SetPortrait" )
   _HB_MEMBER SetCopies( nCopies) ; oClass:AddVirtual( "SetCopies" )
   _HB_MEMBER Setup() ; oClass:AddVirtual( "Setup" )
   _HB_MEMBER Rebuild() ; oClass:AddVirtual( "Rebuild" )
   _HB_MEMBER Font( oFont) ; oClass:AddVirtual( "Font" )

   _HB_MEMBER Inch2Pix() ; oClass:AddVirtual( "Inch2Pix" )

   _HB_MEMBER CreateFile(); oClass:AddMethod( "CreateFile", @TRCcs_CreateFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetFont( oFont); oClass:AddMethod( "SetFont", @TRCcs_SetFont(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Pix2MmX(); oClass:AddInline( "Pix2MmX", {|Self, nRow | ( ( Self ) ), ( nRow * 25.4 / ::nLogPixelX() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Pix2MmY(); oClass:AddInline( "Pix2MmY", {|Self, nCol | ( ( Self ) ), ( nCol * 25.4 / ::nLogPixelY() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRCcs ;



static FUNCTION TRCcs_New( cFile ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   ::hFile  := 0
   ::nFile  := 1
   ::lMeta  := .F.

   ::cFile  := cFile
   ::hDC    := GetPrintDefault( GetActiveWindow() )

RETURN Self



static FUNCTION TRCcs_End( ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   If ::hDC <> 0
      DeleteDC(::hDC)
      ::hDC := 0
   endif

RETURN nil



static FUNCTION TRCcs_CreateFile( ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   if File( ::cFile + StrZero( ::nFile, 5 ) + ".Htm" )
      fErase( ::cFile + StrZero( ::nFile, 5 ) + ".Htm" )
   end

   ::hFile     := fCreate( ::cFile + StrZero( ::nFile, 5 ) + ".Htm" )

   if ::hFile < 0
      ::hFile  := 0
   endif

   ::aRows     := {}

   aAdd( ::aRows, "<HTML>" )
   aAdd( ::aRows, "<HEAD>" )
   aAdd( ::aRows, "</HEAD>" )
   aAdd( ::aRows, '<BODY style="border: 0 0;margin: 0 0 0 0;overflow-x: hidden;">' )

RETURN NIL



static FUNCTION TRCcs_StartPage( ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   if ::hFile == 0
      ::CreateFile()
   end

   ::nFile++

RETURN NIL



static FUNCTION TRCcs_EndPage( ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   local nFor

   aAdd( ::aRows, "</BODY>" )
   aAdd( ::aRows, "</HTML>" )

   for nFor := 1 TO len( ::aRows )
      fWrite( ::hFile, ::aRows[ nFor ] + Chr(13)+Chr(10) )
   next

   fClose( ::hFile )

   ::hFile := 0

RETURN NIL



static FUNCTION TRCcs_Say( nRow, nCol, cText, oFont, nMaxSize ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   local cChar

   cChar := '<P CLASS="DEFAULT" style="'
   cChar += "position:absolute;"
   cChar += "font-family:" + Rtrim( oFont:cFaceName ) + ";"
   cChar += "font-size:" + Ltrim( Str( Round( oFont:nHeight / ::nLogPixelY() * 72, 0 ) ) ) + ";"
   cChar += "top:" + Ltrim( Str( ::Pix2MmX( nRow ) ) ) + "mm;"
   cChar += "left:" + Ltrim( Str( ::Pix2MmY( nCol ) ) ) + "mm;"
   cChar += '">'
   cChar += StrTran( cText, Space( 1 ), "&nbsp;" )
   cChar += "</P>"

   aAdd( ::aRows, cChar )

RETURN NIL



static FUNCTION TRCcs_SetFont( oFont ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   IF oFont <> NIL
      ::oFont := oFont
   ELSEIF ::oFont == NIL
      ::oFont := TFont():New( "COURIER", 0, -12,,,,,,,,,,,,, Self, )
   ENDIF

RETURN ::oFont



static FUNCTION TRCcs_Line( nTop, nLeft, nBottom, nRight, oPen ) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   local cChar
   local nWidth
   local nHeight

   cChar       := '<P CLASS="DEFAULT" style="'
   cChar       += "position:absolute;"

   cChar       += "top:" + Ltrim( Str( ::Pix2MmX( nTop ) ) ) + "mm;"
   cChar       += "left:" + Ltrim( Str( ::Pix2MmY( nLeft ) ) ) + "mm;"

   nWidth      := nRight - nLeft
   if nWidth <> 0
      nWidth   := ::Pix2MmY( nWidth )
      cChar    += "width:" + Ltrim( Str( nWidth ) ) + "mm;"
      cChar    += "border-top-style:solid;"
   end

   nHeight     := nBottom - nTop
   if nHeight <> 0
      nHeight  := ::Pix2MmY( nHeight )
      cChar    += "height:" + Ltrim( Str( ::Pix2MmY( nHeight ) ) ) + "mm;"
      cChar    += "border:solid;"
   end

   cChar       += "border-width:1px;"
   cChar       += '">'
   cChar       += "</P>"

   aAdd( ::aRows, cChar )

RETURN NIL
