#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 92 ".\.\Prg\Reccli.prg"
memvar cDbfRec
memvar cDbf
memvar cDbfCol
memvar cCliente
memvar cDbfCli
memvar cFPago
memvar cDbfPgo
memvar cDbfDiv
memvar cDbfAge
memvar cPorDivRec
memvar nPagina
memvar lEnd
memvar nTotFac

static oWndBrw

static nView

static oCtaRem
static oCentroCoste

static lPgdOld
static nImpOld

static oTotalRelacionados
static nTotalRelacionados        := 0

static aRecibosRelacionados      := {}
static aRecibosMatriz            := {}

static oClienteCompensar

static oMenu

static oMailing

static lOpenFiles                := .F.
static cFiltroUsuario            := ""

static cOldCodCli                := ""

static lOldDevuelto              := .F.

static lActualizarEstadoFactura  := .T.

static dbfMatriz

static bEdit                     := { |aTmp, aGet, dbf, oBrw, lRectificativa, nSpecialMode, nMode, aTmpFac| EdtCob( aTmp, aGet, dbf, oBrw, lRectificativa, nSpecialMode, nMode, aTmpFac ) }





static hEstadoRecibo             := {  "Pendiente"             => "GC_DELETE_12", "Cobrado"               => "GC_CHECK_12", "Devuelto"              => "SIGN_WARNING_12", "Remesado"              => "GC_FOLDER_OPEN_CHECK_12", "Espera documentación"  => "GC_CLOCK_12" }





STATIC FUNCTION OpenFiles()

   local oError
   local oBlock

   if lOpenFiles
      MsgStop( "Los ficheros de recibos de clientes ya estan abiertos." )
      RETURN ( .F. )
   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      lOpenFiles        := .T.

      nView             := D():CreateView()

      D():FacturasClientesCobros( nView )

      D():Agentes( nView )

      D():Cajas( nView )

      D():FormasPago( nView )

      D():Divisas( nView )

      D():FacturasClientes( nView )

      D():FacturasClientesLineas( nView )

      D():AnticiposClientes( nView )

      D():FacturasRectificativas( nView )

      D():FacturasRectificativasLineas( nView )

      D():Empresa( nView )

      D():ClientesBancos( nView )
      ( D():ClientesBancos( nView ) )->( OrdSetFocus( "cBncDef" ) )

      D():Turnos( nView )

      D():TiposIva( nView )

      D():Clientes( nView )

      D():Documentos( nView )

      D():Contadores( nView )

      D():ClientesBancos( nView )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliP.DBF" ), ( cCheckArea( "FacCliP", @dbfMatriz ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cNumMtr" )

      oCtaRem              := TCtaRem():Create( cPatEmp() )
      oCtaRem:OpenFiles()

      oCentroCoste         := TCentroCoste():Create( cPatDat() )
      if !oCentroCoste:OpenFiles()
         lOpenFiles        := .F.
      end

      oMailing             := TGenmailingDatabaseRecibosClientes():New( nView )

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos de recibos de clientes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles()

   D():DeleteView( nView )

   if oCtaRem <> nil
      oCtaRem:CloseFiles()
      oCtaRem:End()
   end

   if !empty( oCentroCoste )
      oCentroCoste:CloseFiles()
   end

   if !empty( dbfMatriz )
      ( dbfMatriz )->( dbCloseArea() )
   end

   if !empty(oMailing)
      oMailing:end()
   end

   oWndBrw     := nil
   dbfMatriz   := nil

   lOpenFiles  := .F.

RETURN .T.



FUNCTION RecCli( oMenuItem, oWnd, aNumRec )

   local oImp
   local oPrv
   local oFlt
   local nLevel
   local oBtnEur
   local lEur           := .F.
   local oPdf
   local oMail
   local oRotor
   local nOrdAnt
   local lFound
   local oSnd
   local oCobrado

   If( oMenuItem == nil, oMenuItem := "recibos_de_clientes", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;
   If( aNumRec == nil, aNumRec := Array( 1 ), ) ;

   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN nil
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      RETURN .F.
   end





   AddMnuNext( "Recibos de facturas de clientes", ProcName() )



















   oWndBrw := TShell():New( 2, 10, 18, 70, "Recibos de facturas de clientes",, oWnd,,, .F.,,, ( D():FacturasClientesCobros( nView ) ),,,,, {"Número", "Código", "Nombre", "Expedición", "Vencimiento", "Cobro", "Importe", "Matriz"},, {||( WinEdtRec( oWndBrw:oBrw, bEdit, D():FacturasClientesCobros( nView ), , , aNumRec ) )}, {||( DelCobCli( oWndBrw:oBrw, D():FacturasClientesCobros( nView ) ) )},, nil, nLevel, "gc_briefcase2_user_16", ( 190 + ( 57 * 256 ) + ( 0 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEdit, D():FacturasClientesCobros( nView ) ) )}, .T. )

      oWndBrw:lFechado     := .T.

      oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->lCloPgo }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_lock2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Estado"
         :nHeadBmpNo       := 6
         :bstrData         := {|| cEstadoRecibo( D():FacturasClientesCobros( nView ) ) }
         :bBmpData         := {|| nEstadoRecibo( D():FacturasClientesCobros( nView ) ) }
         :nWidth           := 20
         heval( hEstadoRecibo, {|k,v,i| :AddResource( v ) } )
         :AddResource( "gc_money2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Compensado"
         :nHeadBmpNo       := 2
         :bStrData         := {|| cEstadoMatriz() }
         :bBmpData         := {|| nEstadoMatriz() }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "Nil16" )
         :AddResource( "gc_folder_cubes_16" )
         :AddResource( "Sel16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Contabilizado"
         :nHeadBmpNo       := 3
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->lConPgo }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_folder2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Impreso"
         :nHeadBmpNo       := 3
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->lRecImp }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "gc_printer2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Tipo"
         :cSortOrder       := "cTipRec"
         :bEditValue       := {|| cTipoRecibo( ( D():FacturasClientesCobros( nView ) )->cTipRec ) }
         :nWidth           := 60
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumFac"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cSerie + "/" + alltrim( str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) ) + "-" + alltrim( str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) ) }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cSufFac  }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cTurRec }
         :nWidth           := 40
         :nDatastrAlign    := 1
         :nHeadstrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cCodCaj }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Usuario"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cCodUsr }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cCodCli }
         :nWidth           := 70
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cNomCli }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Expedición"
         :cSortOrder       := "dPreCob"
         :bEditValue       := {|| Dtoc( ( D():FacturasClientesCobros( nView ) )->dPreCob ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Vencimiento"
         :cSortOrder       := "dFecVto"
         :bEditValue       := {|| Dtoc( ( D():FacturasClientesCobros( nView ) )->dFecVto ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cobro"
         :cSortOrder       := "dEntrada"
         :bEditValue       := {|| Dtoc( ( D():FacturasClientesCobros( nView ) )->dEntrada ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Descripción"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cDescrip }
         :nWidth           := 180
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Importe"
         :cSortOrder       := "nImporte"
         :bEditValue       := {|| nTotRecCli( D():FacturasClientesCobros( nView ), D():Divisas( nView ), if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :nDatastrAlign    := 1
         :nHeadstrAlign    := 1
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Pendiente"
         :bEditValue       := {|| ( nTotRecCli( D():FacturasClientesCobros( nView ), D():Divisas( nView ), if( lEur, cDivChg(), cDivEmp() ), .F. ) - nTotCobCli( D():FacturasClientesCobros( nView ), D():Divisas( nView ), if( lEur, cDivChg(), cDivEmp() ), .F. ) ) }
         :cEditPicture     := cPorDiv()
         :nWidth           := 80
         :nDatastrAlign    := 1
         :nHeadstrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cobrado"
         :bEditValue       := {|| nTotCobCli( D():FacturasClientesCobros( nView ), D():Divisas( nView ), if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :nDatastrAlign    := 1
         :nHeadstrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Gasto"
         :bEditValue       := {|| nTotGasCli( D():FacturasClientesCobros( nView ), D():Divisas( nView ), if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :nDatastrAlign    := 1
         :nHeadstrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div"
         :bEditValue       := {|| cSimDiv( ( D():FacturasClientesCobros( nView ) )->cDivPgo, D():Divisas( nView ) ) }
         :nWidth           := 30
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Agente"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cCodAge }
         :lHide            := .T.
         :nWidth           := 40
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Remesa"
         :cSortOrder       := "nNumRem"
         :bEditValue       := {|| Alltrim( str( ( D():FacturasClientesCobros( nView ) )->nNumRem ) ) + "/" + ( D():FacturasClientesCobros( nView ) )->cSufRem }
         :lHide            := .T.
         :nWidth           := 80
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Centro de coste"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cCtrCoste }
         :nWidth           := 30
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Pagado por"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cPgdoPor }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cDocPgo }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Matriz"
         :cSortOrder       := "cNumMtr"
         :bEditValue       := {|| if( !empty( ( D():FacturasClientesCobros( nView ) )->cNumMtr ), Trans( ( D():FacturasClientesCobros( nView ) )->cNumMtr, "@R #/999999999/##-99" ), "" ) }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cuenta"
         :bEditValue       := {|| ( D():FacturasClientesCobros( nView ) )->cPaisIBAN + ( D():FacturasClientesCobros( nView ) )->cCtrlIBAN + ( D():FacturasClientesCobros( nView ) )->cEntCli + ( D():FacturasClientesCobros( nView ) )->cSucCli + ( D():FacturasClientesCobros( nView ) )->cDigCli + ( D():FacturasClientesCobros( nView ) )->cCtaCli }
         :nWidth           := 200
         :lHide            := .T.
      end

      oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()







   oWndBrw:NewAt( "NEW",,, {||( WinAppRec( oWndBrw:oBrw, bEdit, D():FacturasClientesCobros( nView ), , 2 ) )}, "(A)ñadir", "A",,, 2,, .F. )







   oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






   oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,, 8,, .F. )






   oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )







   oWndBrw:NewAt( "GC_FOLDER_CUBES_",,, {||( CompensarReciboCliente( oWndBrw:oBrw ) )}, "(C)ompensar", "C",,, 4,, .F. )







   oImp := oWndBrw:NewAt( "IMP",,, {||( ImpPago( nil, 1 ) )}, "(I)mprimir", "I",, {|This|This:Toggle()}, 32,, .F. )


      lGenRecCli( oWndBrw:oBrw, oImp, 1 )





   oWndBrw:NewAt( "GC_PRINTER2_",,, {||( PrnSerie() )}, "Imp(r)imir series", "R",,, 32,, .F. )







   oPrv := oWndBrw:NewAt( "PREV1",,, {||( ImpPago( nil, 2 ) )}, "(P)revisualizar", "P",, {|This|This:Toggle()}, 32,, .F. )


      lGenRecCli( oWndBrw:oBrw, oPrv, 2 )






   oPdf := oWndBrw:NewAt( "DOCLOCK",,, {||( ImpPago( nil, 3 ) )}, "Pd(f)", "F",, {|This|This:Toggle()}, 32,, .F. )


      lGenRecCli( oWndBrw:oBrw, oPdf, 3 )





   oMail := oWndBrw:NewAt( "GC_MAIL_EARTH_",,, {||( oMailing:documentsDialog( oWndBrw:oBrw:aSelected ) )}, "Correo electrónico",,, {|This|This:Toggle()}, 32,, .F. )






   oWndBrw:NewAt( "PREV1",,, {||( InfPreCli():New( "Listado de previsión de cobros" ):Play() )}, "Pre(v)isión", "V",,, 8,, .F. )





   oCobrado := oWndBrw:NewAt( "gc_money2_",,, {||( lLiquida( oWndBrw:oBrw ) )}, "Cobrar",,,, 4,, .F. )

      if oUser():lAdministrador()






      oWndBrw:NewAt( "Del",,, {||( lLiquida( oWndBrw:oBrw, .F. ) )}, "Pendiente",,,, 4, oCobrado, .F. )

      end






   oWndBrw:NewAt( "gc_document_empty_chart_",,, {||( if( validRunReport( "01120" ), TFastVentasRecibos():New():Play(), ) )}, "(R)eporting", "R",,, 32,, .F. )






   oWndBrw:NewAt( "BMPCONTA",,, {||( dlgContabilizaReciboCliente( oWndBrw:oBrw ) )}, "(C)ontabilizar", "C",,, 4,, .F. )

   if RolesModel():getRolCambiarEstado( Auth():rolUuid() )






      oWndBrw:NewAt( "CHGSTATE",,, {||( dlgContabilizaReciboCliente( oWndBrw:oBrw, "Cambiar estado de recibos", "Contabilizado", .T. ) )}, "Cambiar es(t)ado", "T",,, 4,, .F. )

   end

   if RolesModel():getRolCambiarCampos( Auth():rolUuid() )





   oWndBrw:NewAt( "BMPCHG",,, {||( ReplaceCreator( oWndBrw, D():FacturasClientesCobros( nView ), aItmRecCli() ) )}, "Cambiar campos",,,, 2,, .F. )

   end




   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,,,, .F. )




      oWndBrw:NewAt( "GC_USER_",,, {||( EdtCli( ( D():FacturasClientesCobros( nView ) )->cCodCli ) )}, "Modificar cliente",,,,, oRotor, .F. )




      oWndBrw:NewAt( "Info",,, {||( InfCliente( ( D():FacturasClientesCobros( nView ) )->cCodCli ) )}, "Informe de cliente",,,,, oRotor, .F. )




      oWndBrw:NewAt( "GC_DOCUMENT_TEXT_USER_",,, {||( EdtFacCli( ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac ) )}, "Modificar factura",,,,, oRotor, .F. )




   oWndBrw:NewAt( "End",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )


   oWndBrw:oActiveFilter:SetFields( aItmrecCli() )
   oWndBrw:oActiveFilter:SetFilterType( "18" )

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

   if !empty(oWndBrw)
      if uFieldempresa( "lFltYea" )
         oWndBrw:setYearCombobox()
      end
   end

RETURN .T.



FUNCTION EdtCob( aTmp, aGet, cFacCliP, oBrw, lRectificativa, nSpecialMode, nMode, aNumRec )

    local oDlg
   local oFld
   local oBmpDiv
   local oGetAge
   local cGetAge
   local oGetCaj
   local cGetCaj
   local oGetPgo
   local cGetPgo
   local oGetSubCta
   local cGetSubCta
   local oGetCtaRem
   local cGetCtaRem
   local oGetSubGas
   local cGetSubGas
   local cPorDiv
   local oBmpGeneral
   local oBmpContabilidad
   local oBmpDevolucion
   local oBmpBancos
   local oBmpAsociados
   local oBrwRec
   local oSayTotal
   local oGroup
   local oBrwCompensado

   if empty( nSpecialMode )
      nSpecialMode         := 0
   end

   if !IsLogic( lRectificativa )
      lRectificativa       := .F.
   end

   if empty( cFacCliP )
      cFacCliP             := D():FacturasClientesCobros( nView )
   end

   cGetAge                 := cNbrAgent( ( cFacCliP )->cCodAge, D():Agentes( nView ) )
   cGetCaj                 := RetFld( ( cFacCliP )->cCodCaj, D():Cajas( nView ), "cNomCaj" )
   cGetPgo                 := RetFld( ( cFacCliP )->cCodPgo, D():FormasPago( nView ), "cDesPago" )
   cPorDiv                 := cPorDiv( ( cFacCliP )->cDivPgo, D():Divisas( nView ) )

   do case
      case nMode == 1

         if lRectificativa
            aTmp[ 6 ]     := "R"
         end

         if nSpecialMode == 2

            aTmp[ 6 ]              := "L"
            aTmp[ 9 ]              := cCurSesion( nil, .F. )
            aTmp[ 52 ]              := .T.

            if !empty( oClienteCompensar )

               aTmp[ 14 ]          := "Recibo matriz para compensar"
               aTmp[ 10  ]          := oClienteCompensar:VarGet()
               aTmp[ 13 ]          := nTotalRelacionados

               if ( D():Clientes( nView ) )->( dbSeek( aTmp[ 10 ] ) )

                  aTmp[ 11 ]        := ( D():Clientes( nView ) )->Titulo
                  aTmp[ 7 ]        := ( D():Clientes( nView ) )->CodPago
                  aTmp[ 33 ]        := ( D():Clientes( nView ) )->cAgente
                  aTmp[ 28 ]        := ( D():Clientes( nView ) )->cCodRem

                  if !empty( ( D():Clientes( nView ) )->CodPago )
                     aTmp[ 23 ]     := RetFld( ( D():Clientes( nView ) )->CodPago, D():FormasPago( nView ), "cCtaCobro" )
                     aTmp[ 38 ]     := RetFld( ( D():Clientes( nView ) )->CodPago, D():FormasPago( nView ), "cCtaGas" )
                  end

                  if lBancoDefecto( ( D():Clientes( nView ) )->Cod, D():ClientesBancos( nView ) )

                     aTmp[ 54 ]     := ( D():ClientesBancos( nView ) )->cCodBnc
                     aTmp[ 61 ]   := ( D():ClientesBancos( nView ) )->cPaisIBAN
                     aTmp[ 62 ]   := ( D():ClientesBancos( nView ) )->cCtrlIBAN
                     aTmp[ 63 ]     := ( D():ClientesBancos( nView ) )->cEntBnc
                     aTmp[ 64 ]     := ( D():ClientesBancos( nView ) )->cSucBnc
                     aTmp[ 65 ]     := ( D():ClientesBancos( nView ) )->cDigBnc
                     aTmp[ 66 ]     := ( D():ClientesBancos( nView ) )->cCtaBnc

                  end

               end

            end

         end

      case nMode == 2

         if aTmp[ 21 ] .AND. !ApoloMsgNoYes( "La modificación de este recibo puede provocar descuadres contables." + Chr(13)+Chr(10) + "¿Desea continuar?", "Recibo ya contabilizado" )
            RETURN .F.
         end

         if aTmp[ 40 ] .AND. !oUser():lAdministrador()
            msgStop( "Solo pueden modificar los recibos cerrados los administradores." )
            RETURN .F.
         end

         if !empty( aTmp[ 68 ] )
            nMode       := 3
         end

         if aTmp[ 6 ] == "L" .AND. nEstadoMatriz( cFacCliP ) == 2
            aRecibosAgrupados( cFacCliP )
         end

   end

   if empty( aTmp[ 8 ] )
      aTmp[ 8 ]     := Application():CodigoCaja()
   end

   lOldDevuelto            := aTmp[ 48 ]

   cOldCodCli              := aTmp[ 10 ]

   lPgdOld                 := ( cFacCliP )->lCobrado .OR. ( cFacCliP )->lRecDto
   nImpOld                 := ( cFacCliP )->nImporte



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "recibos de clientes", "Recibos",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )

   if Len( aRecibosMatriz ) <= 0











      oFld := TFolder():ReDefine( 500, {"&General", "Bancos", "Devolución", "Contablidad"}, { "Recibos_1","Recibos_Bancos","Recibos_2","Recibos_3" }, oDlg,,,,, .F., )

   else













      oFld := TFolder():ReDefine( 500, {"&General", "Bancos", "Devolución", "Contablidad", "Recibos compensados"}, { "Recibos_1","Recibos_Bancos","Recibos_2","Recibos_3","Recibos_5" }, oDlg,,,,, .F., )
   end





      oBmpGeneral := TBitmap():ReDefine( 500, "gc_money2_48",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .T. )







      aGet[ 15 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( .F. )},, .F., .T.,,,,, {|Self|aGet[ 15 ]:cText( Calendario( aTmp[ 15 ] ) )}, nil, "LUPA",, )







      aGet[ 32 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,, {|Self|aGet[ 32 ]:cText( Calendario( aTmp[ 32 ] ) )}, nil, "LUPA",, )










      aGet[ 9 ] := TGetHlp():ReDefine( 335, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[ 1 ],, "999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 10 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[ 1 ],,, {||    ( loadCliente( aGet, aTmp ) )},,,,,, .F., {||     nMode <> 3},, .F., .F.,,,,, {|Self|( BrwClient( aGet[ 10 ], aGet[ 11 ] ) )}, nil, "LUPA",, )




      aGet[ 11 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 33 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[ 1 ],,, {||    ( cAgentes( aGet[ 33 ], D():Agentes( nView ), oGetAge ) )},,,,,, .F., {||         nMode <> 3},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 33 ], oGetAge ) )}, nil, "LUPA",, )




      oGetAge := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cGetAge, cGetAge:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 7 ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[ 1 ],, "@!", {||    ( cFPago( aGet[ 7 ], D():FormasPago( nView ), oGetPgo ), lUpdateSubCta( aGet, aTmp ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 7 ], oGetPgo ) )}, nil, "LUPA",, )




      oGetPgo := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cGetPgo, cGetPgo:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      aGet[ 14 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




        aGet[ 16 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet [ 17 ] := TGetHlp():ReDefine( 155, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










      aGet[ 19 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[ 1 ],, "@!", {||    ( cDivOut( aGet[ 19 ], oBmpDiv, aTmp[ 20 ], nil, nil, @cPorDiv, nil, nil, nil, nil, D():Divisas( nView ) ) )}, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 19 ], oBmpDiv, aTmp[ 20 ], D():Divisas( nView ) )}, nil, "LUPA", 172, )




        oBmpDiv := TBitmap():ReDefine( 171, "BAN_EURO",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .F. )

      oGroup := TGroup():ReDefine( 161,, oFld:aDialogs[ 1 ],,,, .T. )







      aGet[ 13 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[ 1 ],, ( cPorDiv ), {||    ( aGet[ 36 ]:cText( aTmp[ 13 ] ), .T. )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 36 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[ 1 ],, ( cPorDiv ), {||    ( ValCobro( aGet, aTmp ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,, 191, )







      aGet[ 37 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[ 1 ],, ( cPorDiv ),, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,, 261, )





      aGet[ 18 ] := TCheckBox():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[ 1 ],, {||( ValCheck( aGet, aTmp ) )},,,,, .F., {||         ( nMode <> 3 .AND. empty( aTmp[ 68 ] ) )}, .F. )







      aGet[ 12 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 .AND. empty( aTmp[ 68 ] ) )},, .F., .T.,,,,, {|Self|aGet[ 12 ]:cText( Calendario( aTmp[ 12 ] ) )}, nil, "LUPA",, )











      aGet[ 8 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[ 1 ],,, {||    cCajas( aGet[ 8 ], D():Cajas( nView ), oGetCaj )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 8 ], oGetCaj ) )}, nil, "LUPA",, )




      oGetCaj := TGetHlp():ReDefine( 281, { | u | If( PCount()==0, cGetCaj, cGetCaj:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      oBmpBancos := TBitmap():ReDefine( 500, "gc_office_building_48",, oFld:aDialogs[ 2 ],,, .F., .F.,,, .F.,,, .T. )






      aGet[ 53 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwBncEmp( aGet[ 53], aGet[ 55 ], aGet[ 56 ], aGet[ 57], aGet[ 58], aGet[ 59], aGet[ 60] ) )}, nil, "LUPA",, )






      aGet[ 55 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( lIbanDigit( aTmp[ 55 ], aTmp[ 57 ], aTmp[ 58 ], aTmp[ 59 ], aTmp[ 60 ], aGet[ 56 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 56 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 56 ], aTmp[ 56 ]:= u ) }, oFld:aDialogs[2],, "99", {||    ( lIbanDigit( aTmp[ 55 ], aTmp[ 57 ], aTmp[ 58 ], aTmp[ 59 ], aTmp[ 60 ], aGet[ 56 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 57] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 57], aTmp[ 57]:= u ) }, oFld:aDialogs[2],, "9999", {||    (  lCalcDC( aTmp[ 57], aTmp[ 58], aTmp[ 59], aTmp[ 60], aGet[ 59], aTmp[ 55 ] ), aGet[ 55 ]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 58] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 58], aTmp[ 58]:= u ) }, oFld:aDialogs[2],, "9999", {||    (  lCalcDC( aTmp[ 57], aTmp[ 58], aTmp[ 59], aTmp[ 60], aGet[ 59], aTmp[ 55 ] ), aGet[ 55 ]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 59] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 59], aTmp[ 59]:= u ) }, oFld:aDialogs[2],, "99", {||    (  lCalcDC( aTmp[ 57 ], aTmp[ 58 ], aTmp[ 59 ], aTmp[ 60 ], aGet[ 59 ], aTmp[ 55 ] ), aGet[ 55 ]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 60 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 60 ], aTmp[ 60 ]:= u ) }, oFld:aDialogs[2],, "9999999999", {||    (  lCalcDC( aTmp[ 57 ], aTmp[ 58 ], aTmp[ 59 ], aTmp[ 60 ], aGet[ 59 ], aTmp[ 55 ] ), aGet[ 55 ]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










      aGet[ 54] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 54], aTmp[ 54]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwBncCli( aGet[ 54], aGet[ 61], aGet[ 62], aGet[ 63], aGet[ 64], aGet[ 65], aGet[ 66], aTmp[ 10] ) )}, nil, "LUPA",, )






      aGet[ 61] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 61], aTmp[ 61]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( lIbanDigit( aTmp[ 61], aTmp[ 63], aTmp[ 64], aTmp[ 65], aTmp[ 66], aGet[ 62] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 62] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 62], aTmp[ 62]:= u ) }, oFld:aDialogs[2],, "99", {||    ( lIbanDigit( aTmp[ 61], aTmp[ 63], aTmp[ 64], aTmp[ 65], aTmp[ 66], aGet[ 62] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 63] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 63], aTmp[ 63]:= u ) }, oFld:aDialogs[2],, "9999", {||    (  lCalcDC( aTmp[ 63], aTmp[ 64], aTmp[ 65], aTmp[ 66], aGet[ 65], aTmp[ 61] ), aGet[ 61]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 64] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 64], aTmp[ 64]:= u ) }, oFld:aDialogs[2],, "9999", {||    (  lCalcDC( aTmp[ 63], aTmp[ 64], aTmp[ 65], aTmp[ 66], aGet[ 65], aTmp[ 61] ), aGet[ 61]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 65] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 65], aTmp[ 65]:= u ) }, oFld:aDialogs[2],, "99", {||    (  lCalcDC( aTmp[ 63], aTmp[ 64], aTmp[ 65], aTmp[ 66], aGet[ 65], aTmp[ 61] ), aGet[ 61]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 66] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 66], aTmp[ 66]:= u ) }, oFld:aDialogs[2],, "9999999999", {||    (  lCalcDC( aTmp[ 63], aTmp[ 64], aTmp[ 65], aTmp[ 66], aGet[ 65], aTmp[ 61] ), aGet[ 61]:lValid() )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 67 ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 67 ], aTmp[ 67 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 26 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 26 ], aTmp[ 26 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 27 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 28 ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( oGetCtaRem:cText( oRetFld( aTmp[ 28 ], oCtaRem:oDbf ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCtaRem:Buscar( aGet[ 28 ] ) )}, nil, "LUPA",, )




      oGetCtaRem := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cGetCtaRem, cGetCtaRem:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      oBmpDevolucion := TBitmap():ReDefine( 500, "gc_money2_delete_48",, oFld:aDialogs[ 3 ],,, .F., .F.,,, .F.,,, .T. )





      aGet[ 48 ] := TCheckBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[ 3 ],, {||( lChangeDevolucion( aGet, aTmp, .F. ) )},,,,, .F., {||     ( aTmp[ 18] .AND. nMode <> 3 )}, .F. )





      aGet[ 49 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 49 ], aTmp[ 49 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( aTmp[ 18] .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[ 50 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( aTmp[ 18 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 51 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oBmpContabilidad := TBitmap():ReDefine( 500, "gc_folders2_48",, oFld:aDialogs[ 4 ],,, .F., .F.,,, .F.,,, .T. )




      aGet[ 21 ] := TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )








      aGet[ 23 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[ 4 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 23 ], nil, oGetSubCta ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 23 ], oGetSubCta ) )}, nil, "LUPA",, )




        oGetSubCta := TGetHlp():ReDefine( 241, { | u | If( PCount()==0, cGetSubCta, cGetSubCta:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 38 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[ 4 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubcuenta( aGet[ 38 ], nil, oGetSubGas ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubcuenta( aGet[ 38 ], oGetSubGas ) )}, nil, "LUPA",, )




      oGetSubGas := TGetHlp():ReDefine( 271, { | u | If( PCount()==0, cGetSubGas, cGetSubGas:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[29] := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, aTmp[29], aTmp[29]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 41 ] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 42 ] := TGetHlp():ReDefine( 162, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 39 ] := TCheckBox():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )












      aGet[ 70 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 70 ], aTmp[ 70 ]:= u ) }, oFld:aDialogs[ 4 ],,, {||    ( oCentroCoste:Existe( aGet[ 70 ], aGet[ 70 ]:oHelpText, "cNombre" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCentroCoste:Buscar( aGet[ 70 ] ) )}, nil, "LUPA",, 281 )




      aGet[ 45 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 46 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      if Len( aRecibosMatriz ) > 0





         oBmpGeneral := TBitmap():ReDefine( 500, "gc_folder_cubes_48",, oFld:aDialogs[ 5 ],,, .F., .F.,,, .F.,,, .T. )

         oBrwCompensado                   := IXBrowse():New( oFld:aDialogs[ 5 ] )
         oBrwCompensado:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         oBrwCompensado:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
         oBrwCompensado:nMarqueeStyle     := 6
         oBrwCompensado:lRecordSelector   := .F.

         oBrwCompensado:SetArray( aRecibosMatriz, , , .F. )

         oBrwCompensado:CreateFromResource( 200 )

         with object ( oBrwCompensado:AddCol() )
            :cHeader          := "Estado"
            :nHeadBmpNo       := 1
            :bEditValue       := {|| hGet( aRecibosMatriz[ oBrwCompensado:nArrayAt ], "Estado" ) }
            :nWidth           := 20
            :SetCheck( { "Sel16", "Nil16" } )
         end

         with object ( oBrwCompensado:AddCol() )
            :cHeader          := "Numero"
            :bstrData         := {|| hGet( aRecibosMatriz[ oBrwCompensado:nArrayAt ], "Número" ) }
            :nWidth           := 100
         end

         with object ( oBrwCompensado:AddCol() )
            :cHeader          := "Fecha"
            :bstrData         := {|| hGet( aRecibosMatriz[ oBrwCompensado:nArrayAt ], "Fecha" ) }
            :nWidth           := 65
         end

         with object ( oBrwCompensado:AddCol() )
            :cHeader          := "Vencimiento"
            :bstrData         := {|| hGet( aRecibosMatriz[ oBrwCompensado:nArrayAt ], "Vencimiento" ) }
            :nWidth           := 65
         end

         with object ( oBrwCompensado:AddCol() )
            :cHeader          := "Pago"
            :bstrData         := {|| hGet( aRecibosMatriz[ oBrwCompensado:nArrayAt ], "Pago" ) }
            :nWidth           := 65
         end

         with object ( oBrwCompensado:AddCol() )
            :cHeader          := "Importe"
            :bstrData         := {|| hGet( aRecibosMatriz[ oBrwCompensado:nArrayAt ], "Importe" ) }
            :nWidth           := 65
            :nDatastrAlign    := 1
            :nHeadstrAlign    := 1
         end

      end









      TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, cFacCliP, oBrw, oDlg, nMode, nSpecialMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( KillTrans( oDlg ) )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| EndTrans( aTmp, aGet, cFacCliP, oBrw, oDlg, nMode, nSpecialMode ) } )
      end

      oDlg:bStart          := {|| StartEdtRec( aTmp, aGet, nMode ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( EdtRecMenu( aTmp, oDlg ) )}, oDlg:bRClicked,,, )

   aRecibosMatriz          := {}

   EndEdtRecMenu()

   if !empty( oBmpDiv )
      oBmpDiv:End()
   end

   if !empty( oBmpGeneral )
      oBmpGeneral:End()
   end

   if !empty( oBmpDevolucion )
      oBmpDevolucion:End()
   end

   if !empty( oBmpContabilidad )
      oBmpContabilidad:End()
   end

   if !empty( oBmpBancos )
      oBmpBancos:End()
   end

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION StartEdtRec( aTmp, aGet, nMode )

   cursorWait()

   aGet[ 19       ]:lValid()
   aGet[ 23       ]:lValid()
   aGet[ 38       ]:lValid()
   aGet[ 28       ]:lValid()
   aGet[ 70  ]:lValid()
   aGet[ 15       ]:SetFocus()
   aGet[ 7       ]:lValid()
   aGet[ 33       ]:lValid()

   if nMode <> 3
      lChangeDevolucion( aGet, aTmp, .T. )
   end

   cursorWE()

RETURN .T.



STATIC FUNCTION KillTrans( oDlg )

   oDlg:End()

RETURN .T.






STATIC FUNCTION ChgState( lState )

   If( lState == nil, lState := !( D():FacturasClientesCobros( nView ) )->lConPgo, ) ;

   if ( D():FacturasClientesCobros( nView ) )->lConPgo <> lState .AND. dbLock( D():FacturasClientesCobros( nView ) )
      ( D():FacturasClientesCobros( nView ) )->lConPgo := lState
      ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
   end

RETURN NIL



STATIC FUNCTION GetReciboCliente( cCodCli, oBrwRec )

   local lResult  := .T.
   local cNumRec  := ""
   local aRecibosSeleccionados

   if empty( cCodCli )
      MsgStop( "Tiene que seleccionar un cliente." )
      RETURN nil
   end

   aRecibosSeleccionados      := browseRecCli( cCodCli, D():FacturasClientesCobros( nView ), D():Divisas( nView ) )

   if isArray( aRecibosSeleccionados ) .AND. Len( aRecibosSeleccionados ) > 0

      for each cNumRec in aRecibosSeleccionados

         if lResult .AND. RetFld( cNumRec, D():FacturasClientesCobros( nView ), "lCobrado", "nNumFac" )
            msgStop( "Recibo ya cobrado.", "Recibo: " + cNumRec )
            lResult := .F.
         end

         if lResult .AND. RetFld( cNumRec, D():FacturasClientesCobros( nView ), "lRemesa", "nNumFac" )
            msgStop( "Recibo ya remesado.", "Recibo: " + cNumRec )
            lResult := .F.
         end

         if lResult .AND. !empty( RetFld( cNumRec, D():FacturasClientesCobros( nView ), "cNumMtz", "nNumFac" ) )
            msgStop( "Recibo ya pertenece a otra matriz.", "Recibo: " + cNumRec )
            lResult := .F.
         end

         if lResult .AND. aScan( aRecibosRelacionados, cNumRec ) <> 0
            msgStop( "Recibo ya incluido.", "Recibo: " + cNumRec )
            lResult := .F.
         end

         if lResult
            aadd( aRecibosRelacionados, cNumRec )
         end

         lResult := .T.

      next

      oBrwRec:Refresh()

   end

   setTotalRelacionados()

RETURN nil



STATIC FUNCTION DelReciboCliente( oBrwRec )

   local n
   local aDelete  := {}
   local nRecDel

   for each nRecDel in oBrwRec:aSelected
      aAdd( aDelete, aRecibosRelacionados[ nRecDel ] )
   end

   for each nRecDel in aDelete

      n := aScan( aRecibosRelacionados, nRecDel )

      if n <> 0

         aDel( aRecibosRelacionados, n )
         aSize( aRecibosRelacionados, Len( aRecibosRelacionados ) - 1 )

      end

   end

   setTotalRelacionados()

   if !empty( oBrwRec )
      oBrwRec:Refresh()
   end

RETURN nil







STATIC FUNCTION dlgContabilizaReciboCliente( oBrw, cTitle, cOption, lChgState )

    local oDlg
   local oBrwCon
   local cSerIni
   local cSerFin
   local oDocIni
   local oDocFin
   local nDocIni
   local nDocFin
   local cSufIni
   local cSufFin
   local nNumIni
   local nNumFin
   local oMtrInf
   local nMtrInf
   local oSerIni
   local oSerFin
   local oBtnCancel
   local nRad        := 1
   local oSimula
   local lSimula     := .T.
   local dDesde      := CtoD( "01/01/" + str( Year( Date() ) ) )
   local dHasta      := Date()
   local nRecFac     := ( D():FacturasClientes( nView ) )->( Recno() )
   local nOrdFac     := ( D():FacturasClientes( nView ) )->( OrdSetFocus( 1 ) )
   local nRecRec     := ( D():FacturasClientesCobros( nView ) )->( Recno() )
   local nOrdRec     := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( 1 ) )
   local cTipo       := "Todas"
   local oTree
   local oImageList

   If( cTitle == nil, cTitle := "Contabilizar recibos", ) ;
   If( cOption == nil, cOption := "Simular resultados", ) ;
   If( lChgState == nil, lChgState := .F., ) ;

   oImageList        := TImageList():New( 16, 16 )
   oImageList:AddMasked( TBitmap():Define( "bRed" ),     ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oImageList:AddMasked( TBitmap():Define( "bGreen" ),   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )

   cSerIni           := ( D():FacturasClientesCobros( nView ) )->cSerie
   cSerFin           := ( D():FacturasClientesCobros( nView ) )->cSerie
   nDocIni           := ( D():FacturasClientesCobros( nView ) )->nNumFac
   nDocFin           := ( D():FacturasClientesCobros( nView ) )->nNumFac
   cSufIni           := ( D():FacturasClientesCobros( nView ) )->cSufFac
   cSufFin           := ( D():FacturasClientesCobros( nView ) )->cSufFac
   nNumIni           := ( D():FacturasClientesCobros( nView ) )->nNumRec
   nNumFin           := ( D():FacturasClientesCobros( nView ) )->nNumRec

   if len( oBrw:aSelected ) > 1
      nRad           := 1
   else
      nRad           := 3
   end



   oDlg = TDialog():New(,,,, ( cTitle ), "CONTABILIZA_RECIBOS_CLIENTES",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




   TComboBox():ReDefine( 80, { | u | If( PCount()==0, cTipo, cTipo:= u ) }, { "Todas", "Facturas", "Rectificativas" }, oDlg,,,,,,, .F.,,,,,,,,,,,,,, )



   TRadMenu():Redefine( { | u | If( PCount()==0, nRad, nRad:= u ) }, oDlg,, { 90, 91, 92, 93 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z" )},,,,,, .T., {||     ( nRad == 3 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z" )},,,,,, .T., {||     ( nRad == 3 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   oDocIni := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRad == 3 )},, .F., .T.,,,,,, nil,,, )






   oDocFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRad == 3 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRad == 3 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRad == 3 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 160, { | u | If( PCount()==0, nNumIni, nNumIni:= u ) }, oDlg,, "99",,,,,,, .F., {||     ( nRad == 3 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, nNumFin, nNumFin:= u ) }, oDlg,, "99",,,,,,, .F., {||     ( nRad == 3 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 310, { | u | If( PCount()==0, dDesde, dDesde:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRad == 4 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 320, { | u | If( PCount()==0, dHasta, dHasta:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRad == 4 )},, .F., .T.,,,,,, nil,,, )



   oSimula := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, lSimula, lSimula:= u ) }, oDlg,,,,,,, .F.,, .F. )

   oTree             := TTreeView():Redefine( 180, oDlg )
   oTree:bLDblClick  := {|| TreeChanged( oTree ) }





   oMtrInf := TApoloMeter():ReDefine( 200, { | u | If( PCount()==0, nMtrInf, nMtrInf:= u ) },, oDlg, .F.,,, .T.,,,, )

   oMtrInf:SetTotal( ( D():FacturasClientesCobros( nView ) )->( OrdKeyCount() ) )




   TButton():ReDefine( 1, {||( initContabilizaReciboCliente( cSerIni + str( nDocIni, 9 ) + cSufIni + str( nNumIni ), cSerFin + str( nDocFin, 9 ) + cSufFin + str( nNumFin ), dDesde, dHasta, nRad, cTipo, lSimula, lChgState, oBrw, oBtnCancel, oDlg, oTree, oMtrInf ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| initContabilizaReciboCliente( cSerIni + str( nDocIni, 9 ) + cSufIni + str( nNumIni ), cSerFin + str( nDocFin, 9 ) + cSufFin + str( nNumFin ), dDesde, dHasta, nRad, cTipo, lSimula, lChgState, oBrw, oBtnCancel, oDlg, oTree, oMtrInf ) } )

   oDlg:bStart := {|| startContabilizaReciboCliente( oSerIni, oSimula, cOption ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oTree:SetImageList( oImageList ) )}, oDlg:bRClicked,,, )

   ( D():FacturasClientes( nView ) )->( dbGoTo( nRecFac ) )
   ( D():FacturasClientes( nView ) )->( OrdSetFocus( nOrdFac ) )
   ( D():FacturasClientesCobros( nView ) )->( dbGoTo( nRecRec ) )
   ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( nOrdRec ) )

   oImageList:End()

   oTree:Destroy()

   if oBrw <> nil
      oBrw:Refresh()
   end

RETURN NIL



STATIC FUNCTION startContabilizaReciboCliente( oSerIni, oSimula, cOption )

   oSerIni:SetFocus()

   setWindowText( oSimula:hWnd, cOption )

   oSimula:Refresh()

RETURN NIL



STATIC FUNCTION TreeChanged( oTree )

   local oItemTree   := oTree:GetItem()

   if !empty( oItemTree ) .AND. !empty( oItemTree:bAction )
      Eval( oItemTree:bAction )
   end

RETURN NIL



STATIC FUNCTION initContabilizaReciboCliente( cDocIni, cDocFin, dDesde, dHasta, nRad, cTipo, lSimula, lChgState, oBrw, oBtnCancel, oDlg, oTree, oMtrInf )

   local aPos
   local bWhile
   local lWhile         := .T.
   local aSimula        := {}
   local nRecord
   local nRecno         := ( D():FacturasClientesCobros( nView ) )->( Recno() )
   local nOrden         := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "nNumFac" ) )
   local lErrorFound    := .F.
   local lReturn

   if lAplicacionSage50() .AND. !lChgState
      EnlaceSage50():GetInstance()
   end





   if lSimula
      aPos              := { 0, 0 }
      ClientToScreen( oDlg:hWnd, aPos )
      oDlg:Move( aPos[ 1 ] - 26, aPos[ 2 ] - 510 )
   end





   oDlg:Disable()

   oBtnCancel:bAction   := {|| lWhile := .F. }
   oBtnCancel:Enable()

   oTree:Enable()
   oTree:DeleteAll()

   do case
      case ( nRad == 1 )

         for each nRecord in oWndBrw:aSelected

            ( D():FacturasClientesCobros( nView ) )->( dbgoto( nRecord ) )

            makeContabilizaReciboCliente( cTipo, oTree, lSimula, lChgState, nil )

            oMtrInf:Set( ( D():FacturasClientesCobros( nView ) )->( ordkeyno() ) )

         next

      case ( nRad == 2 )

         ( D():FacturasClientesCobros( nView ) )->( dbGoTop() )
         while ( lWhile .AND. !( D():FacturasClientesCobros( nView ) )->( eof() ) )

            makeContabilizaReciboCliente( cTipo, oTree, lSimula, lChgState, nil )

            ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

            oMtrInf:Set( ( D():FacturasClientesCobros( nView ) )->( ordkeyno() ) )

         end

      case ( nRad == 3 )

         ( D():FacturasClientesCobros( nView ) )->( dbSeek( cDocIni, .T. ) )



         while ( lWhile .AND. (  ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) >= cDocIni .AND.  ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) <= cDocFin .AND.  !( D():FacturasClientesCobros( nView ) )->( eof() ) ) )

            makeContabilizaReciboCliente( cTipo, oTree, lSimula, lChgState, nil )

            ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

            oMtrInf:Set( ( D():FacturasClientesCobros( nView ) )->( OrdKeyNo() ) )

         end

      case ( nRad == 4 )

         ( D():FacturasClientesCobros( nView ) )->( dbGoTop() )
         while ( lWhile .AND. !( D():FacturasClientesCobros( nView ) )->( eof() ) )



            if ( D():FacturasClientesCobros( nView ) )->lCobrado           .AND.  ( D():FacturasClientesCobros( nView ) )->dEntrada >= dDesde .AND.  ( D():FacturasClientesCobros( nView ) )->dEntrada <= dHasta

               makeContabilizaReciboCliente( cTipo, oTree, lSimula, lChgState, nil )

            end

            ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

            oMtrInf:Set( ( D():FacturasClientesCobros( nView ) )->( OrdKeyNo() ) )

         end

   end





   if lAplicacionA3()
      EnlaceA3():GetInstance():Render():WriteASCII()
      EnlaceA3():DestroyInstance()
   end

   oMtrInf:Set( ( D():FacturasClientesCobros( nView ) )->( OrdKeyCount() ) )

   if lAplicacionSage50() .AND. !lChgState
      EnlaceSage50():GetInstance():WriteASCII()
      EnlaceSage50():DestroyInstance()
   end






   ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( nOrden ) )
   ( D():FacturasClientesCobros( nView ) )->( dbGoTo( nRecno ) )

   oBtnCancel:bAction   := {|| oDlg:End() }

   if lSimula
      WndCenter( oDlg:hWnd )
   end

   oDlg:Enable()

   if oBrw <> nil
      oBrw:Refresh()
   end

RETURN NIL



STATIC FUNCTION makeContabilizaReciboCliente( cTipo, oTree, lSimula, lChgState, aSimula )

   local lRETURN     := .F.

   do case
      case ( cTipo == "Facturas" .OR. cTipo == "Todas" ) .AND. empty( ( D():FacturasClientesCobros( nView ) )->cTipRec )

         if lChgState
            lRETURN  := ChgState( lSimula )
         else
            lRETURN  := actionContabilidad( nil, oTree, lSimula, aSimula, D():FacturasClientes( nView ), D():FacturasClientesCobros( nView ), D():FormasPago( nView ), D():Clientes( nView ), D():Divisas( nView ), .F. )
         end

      case ( cTipo == "Rectificativas" .OR. cTipo == "Todas" ) .AND. !empty( ( D():FacturasClientesCobros( nView ) )->cTipRec )

         if lChgState
            lRETURN  := ChgState( lSimula )
         else
            lRETURN  := actionContabilidad( nil, oTree, lSimula, aSimula, D():FacturasRectificativas( nView ), D():FacturasClientesCobros( nView ), D():FormasPago( nView ), D():Clientes( nView ), D():Divisas( nView ), .F. )
         end

   end

RETURN ( nil )



STATIC FUNCTION actionContabilidad( oBrw, oTree, lSimula, aSimula, dbfFacCliT, dbfFacCliP, dbfFPago, dbfCli, dbfDiv, lFromFactura, nAsiento )

   do case
      case lAplicacionContaplus()
         ContabilizaReciboCliente( oBrw, oTree, lSimula, aSimula, dbfFacCliT, dbfFacCliP, dbfFPago, dbfCli, dbfDiv, lFromFactura, nAsiento )

      case lAplicacionSage50()
         EnlaceSage50():GetInstance():ContabilizaReciboCliente( nView, oTree )

   end

Return ( .T. )



Function nTotRecCli( uFacCliP, cDbfDiv, cDivRet, lPic )

   local cDivPgo
   local nRouDiv
   local cPorDiv
   local nTotRec

   if !empty( nView )
      If( uFacCliP == nil, uFacCliP := D():FacturasClientesCobros( nView ), ) ;
      If( cDbfDiv == nil, cDbfDiv := D():Divisas( nView ), ) ;
   end

   If( cDivRet == nil, cDivRet := cDivEmp(), ) ;
   If( lPic == nil, lPic := .F., ) ;

   if IsObject( uFacCliP )
      nTotRec           := uFacCliP:nImporte
      cDivPgo           := uFacCliP:cDivPgo
   else
      nTotRec           := ( uFacCliP )->nImporte
      cDivPgo           := ( uFacCliP )->cDivPgo
   end

   nRouDiv              := nRouDiv( cDivPgo, cDbfDiv )
   cPorDiv              := cPorDiv( cDivPgo, cDbfDiv )
   nTotRec              := Round( nTotRec, nRouDiv )

   if cDivRet <> cDivPgo
      nRouDiv           := nRouDiv( cDivRet, cDbfDiv )
      cPorDiv           := cPorDiv( cDivRet, cDbfDiv )
      nTotRec           := nCnv2Div( nTotRec, cDivPgo, cDivRet )
   end

RETURN ( if( lPic, Trans( nTotRec, cPorDiv ), nTotRec ) )



STATIC FUNCTION nTotalArrayRelacionados()

   local nImporte       := 0
   local cRecibo        := ""


   if isArray( aRecibosRelacionados ) .AND. len( aRecibosRelacionados ) > 0

      for each cRecibo in aRecibosRelacionados
         nImporte       += RetFld( cRecibo, D():FacturasClientesCobros( nView ), "nImporte", "nNumFac" )
      next

   end

RETURN nImporte



function setTotalRelacionados()

   nTotalRelacionados   := nTotalArrayRelacionados()

   if !empty( oTotalRelacionados )
      oTotalRelacionados:Refresh()
   end

RETURN .T.



function nTotCobCli( uFacCliP, uDiv, cDivRet, lPic )

   local cDivPgo
   local nRouDiv
   local cPorDiv
   local nTotRec
   local nTotCob
   local lRecCob
   local cDbfDiv

   If( cDivRet == nil, cDivRet := cDivEmp(), ) ;
   If( lPic == nil, lPic := .F., ) ;

   if ValType( uFacCliP ) == "O"
      cDivPgo        := uFacCliP:cDivPgo
      nTotRec        := uFacCliP:nImporte
      nTotCob        := uFacCliP:nImpCob
      lRecCob        := uFacCliP:lCobrado
   else
      cDivPgo        := ( uFacCliP )->cDivPgo
      nTotRec        := ( uFacCliP )->nImporte
      nTotCob        := ( uFacCliP )->nImpCob
      lRecCob        := ( uFacCliP )->lCobrado
   end

   if ValType( uDiv ) == "O"
      cDbfDiv        := uDiv:cAlias
   else
      cDbfDiv        := uDiv
   end

   nRouDiv           := nRouDiv( cDivPgo, cDbfDiv )
   cPorDiv           := cPorDiv( cDivPgo, cDbfDiv )

   if lRecCob

      if nTotCob == 0
         nTotCob     := Round( nTotRec, nRouDiv )
      else
         nTotCob     := Round( nTotCob, nRouDiv )
      end

   else

      nTotCob        := 0

   end

   if cDivRet <> cDivPgo
      nRouDiv        := nRouDiv( cDivRet, cDbfDiv )
      cPorDiv        := cPorDiv( cDivRet, cDbfDiv )
      nTotCob        := nCnv2Div( nTotRec, cDivPgo, cDivRet )
   end

RETURN if( lPic, Trans( nTotCob, cPorDiv ), nTotCob )



function nTotGasCli( uFacCliP, uDiv, cDivRet, lPic )

   local cDivPgo
   local nRouDiv
   local cPorDiv
   local nTotRec
   local nTotCob
   local lRecCob
   local cDbfDiv

   If( cDivRet == nil, cDivRet := cDivEmp(), ) ;
   If( lPic == nil, lPic := .F., ) ;

   if ValType( uFacCliP ) == "O"
      cDivPgo        := uFacCliP:cDivPgo
      nTotRec        := uFacCliP:nImporte
      nTotCob        := uFacCliP:nImpCob
      lRecCob        := uFacCliP:lCobrado
   else
      cDivPgo        := ( uFacCliP )->cDivPgo
      nTotRec        := ( uFacCliP )->nImporte
      nTotCob        := ( uFacCliP )->nImpCob
      lRecCob        := ( uFacCliP )->lCobrado
   end

   if ValType( uDiv ) == "O"
      cDbfDiv        := uDiv:cAlias
   else
      cDbfDiv        := uDiv
   end

   nRouDiv           := nRouDiv( cDivPgo, cDbfDiv )
   cPorDiv           := cPorDiv( cDivPgo, cDbfDiv )

   if lRecCob

      if nTotCob <> 0
         nTotRec     -= nTotCob
         nTotRec     := Round( nTotRec, nRouDiv )
      else
         nTotRec     := 0
      end

   else

      nTotRec        := 0

   end

   if cDivRet <> cDivPgo
      nRouDiv        := nRouDiv( cDivRet, cDbfDiv )
      cPorDiv        := cPorDiv( cDivRet, cDbfDiv )
      nTotRec        := nCnv2Div( nTotRec, cDivPgo, cDivRet )
   end

RETURN if( lPic, Trans( nTotRec, cPorDiv ), nTotRec )



function nImpRecCli( cFacCliP, cDbfDiv )

   local cImp

   If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cDbfDiv == nil, cDbfDiv := D():Divisas( nView ), ) ;

   if ( cFacCliP )->lImpEur
      cImp           := nTotRecCli( cFacCliP, cDbfDiv, "EUR", .T. )
   else
      cImp           := nTotRecCli( cFacCliP, cDbfDiv, cDivEmp(), .T. )
   end

RETURN ( cImp )



function cTxtRecCli( cFacCliP, cDbfDiv )

   local cImp
   local lMas        := .T.

   If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cDbfDiv == nil, cDbfDiv := D():Divisas( nView ), ) ;

   if ( cFacCliP )->lImpEur
      lMas           := lMasDiv( "EUR", cDbfDiv )
      cImp           := Num2Text( nTotRecCli( cFacCliP, cDbfDiv, "EUR", .F. ), lMas )
   else
      lMas           := lMasDiv( ( cFacCliP )->cDivPgo, cDbfDiv )
      cImp           := Num2Text( nTotRecCli( cFacCliP, cDbfDiv, ( cFacCliP )->cDivPgo, .F. ), lMas )
   end

RETURN ( cImp )



Function cCtaRecCli( cFacCliP, cBncCli )

   If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cBncCli == nil, cBncCli := D():ClientesBancos( nView ), ) ;

RETURN ( cClientCuenta( ( cFacCliP )->cCodCli, cBncCli ) )






function SynRecCli( cPath )

   local cDiv
   local cIva
   local cFPago
   local oBlock
   local oError
   local nTotFac
   local nTotRec
   local cClient
   local cFacCliT
   local cFacCliP
   local cFacCliL
   local cAntCliT
   local cFacRecT
   local cFacRecL

   If( cPath == nil, cPath := cPatEmp(), ) ;

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPath + "FACCLIT.DBF" ), ( cCheckArea( "FacCliT", @cFacCliT ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ( cFacCliT )->( ordListAdd( cPath + "FACCLIT.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "FACCLIL.DBF" ), ( cCheckArea( "FacCliL", @cFacCliL ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ( cFacCliL )->( ordListAdd( cPath + "FACCLIL.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "FACCLIP.DBF" ), ( cCheckArea( "FacCliP", @cFacCliP ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ( cFacCliP )->( ordListAdd( cPath + "FACCLIP.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @cAntCliT ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ( cAntCliT )->( ordListAdd( cPath + "AntCliT.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "FACRECT.DBF" ), ( cCheckArea( "FacRecT", @cFacRecT ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ( cFacRecT )->( ordListAdd( cPath + "FacRecT.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "FACRECL.DBF" ), ( cCheckArea( "FacRecL", @cFacRecL ) ), iif( .F. .OR. .T., ! .T., NIL ), .F. )
   if !lAIS() ; ( cFacRecL )->( ordListAdd( cPath + "FacRecL.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "CLIENT.DBF" ), ( cCheckArea( "Client", @cClient ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ( cClient )->( ordListAdd( cPatEmp() + "CLIENT.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FPAGO.DBF" ), ( cCheckArea( "FPago", @cFPago ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ( cFPago )->( ordListAdd( cPatEmp() + "FPAGO.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "Divisas", @cDiv ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ( cDiv )->( ordListAdd( cPatDat() + "DIVISAS.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIva", @cIva ) ), iif( .F. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ( cIva )->( ordListAdd( cPatDat() + "TIVA.CDX" ) ); else ; ordSetFocus( 1 ) ; end

   ( cFacCliP )->( OrdSetFocus( 0 ) )
   ( cFacCliP )->( dbGoTop() )

   while !( cFacCliP )->( eof() )

      if empty( ( cFacCliP )->cSufFac )
         ( cFacCliP )->cSufFac      := "00"
      end



      if ( cFacCliP )->nImpCob == 0 .AND. ( cFacCliP )->lCobrado
         ( cFacCliP )->nImpCob      := ( cFacCliP )->nImporte
      end

      if ( cFacCliP )->nImpCob > ( cFacCliP )->nImporte
         ( cFacCliP )->nImpCob      := ( cFacCliP )->nImporte
      end



      if empty( ( cFacCliP )->cTurRec )
         ( cFacCliP )->cTurRec      := RetFld( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac, cFacCliT, "cTurFac" )
      end

      if empty( ( cFacCliP )->cNomCli )
         ( cFacCliP )->cNomCli      := retClient( ( cFacCliP )->cCodCli, cClient )
      end

      if empty( ( cFacCliP )->cCodCaj )
         if ( cFacCliP )->cTipRec == "R"
            ( cFacCliP )->cCodCaj   := RetFld( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac, cFacRecT, "CCODCAJ" )
         else
            ( cFacCliP )->cCodCaj   := RetFld( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac, cFacCliT, "CCODCAJ" )
         end
      end

      if empty( ( cFacCliP )->cCodUsr )
         if ( cFacCliP )->cTipRec == "R"
            ( cFacCliP )->cCodUsr   := RetFld( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac, cFacRecT, "CCODUSR" )
         else
            ( cFacCliP )->cCodUsr   := RetFld( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac, cFacCliT, "CCODUSR" )
         end
      end

      if empty( ( cFacCliP )->cCodPgo )
         if ( cFacCliP )->cTipRec == "R"
            ( cFacCliP )->cCodPgo   := RetFld( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac, cFacRecT, "cCodPago" )
         else
            ( cFacCliP )->cCodPgo   := RetFld( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac, cFacCliT, "cCodPago" )
         end
      end

      if empty( ( cFacCliP )->cCtaRec )
         ( cFacCliP )->cCtaRec      := RetFld( ( cFacCliP )->cCodPgo, cFPago, "cCtaCobro" )
      end

      if empty( ( cFacCliP )->cCtaGas )
         ( cFacCliP )->cCtaGas      := RetFld( ( cFacCliP )->cCodPgo, cFPago, "cCtaGas" )
      end

      if empty( ( cFacCliP )->cCtaCli )
         ( cFacCliP )->cCtaCli      := RetFld( ( cFacCliP )->cCodCli, cClient, "SubCta" )
      end





      if !( cFacCliP )->lCobrado
         ( cFacCliP )->cDigCli      := cDgtControl( ( cFacCliP )->cEntCli, ( cFacCliP )->cSucCli, ( cFacCliP )->cDigCli, ( cFacCliP )->cCtaCli )
         ( cFacCliP )->cCtrlIBAN    := IbanDigit( ( cFacCliP )->cPaisIBAN, ( cFacCliP )->cEntCli, ( cFacCliP )->cSucCli, ( cFacCliP )->cDigCli, ( cFacCliP )->cCtaCli )
      end

      ( cFacCliP )->( dbSkip() )

   end

   ( cFacCliP )->( OrdSetFocus( 1 ) )



   ( cFacCliT )->( OrdSetFocus( 0 ) )
   ( cFacCliT )->( dbGoTop() )

   while !( cFacCliT )->( eof() )

      nTotFac  := nTotFacCli( ( cFacCliT )->cSerie + str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac, cFacCliT, cFacCliL, cIva, cDiv, cFacCliP, nil, nil, .F. )
      nTotRec  := nTotalRecibosGeneradosFacturasCliente( ( cFacCliT )->cSerie + str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac, cFacCliT, cFacCliP, cIva, cDiv )



      if abs( nTotFac ) > abs( nTotRec )
         GenPgoFacCli( ( cFacCliT )->cSerie + str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac, cFacCliT, cFacCliL, cFacCliP, cAntCliT, cClient, cFPago, cDiv, cIva, 1, .F. )
      end

      ChkLqdFacCli( nil, cFacCliT, cFacCliL, cFacCliP, cAntCliT, cIva, cDiv )

      ( cFacCliT )->( dbSkip() )

      SysRefresh()

   end

   ( cFacCliT )->( OrdSetFocus( 1 ) )





   ( cFacRecT )->( OrdSetFocus( 0 ) )
   ( cFacRecT )->( dbGoTop() )

   while !( cFacRecT )->( eof() )



      nTotFac  := nTotFacRec( ( cFacRecT )->cSerie + str( ( cFacRecT )->nNumFac ) + ( cFacRecT )->cSufFac, cFacRecT, cFacRecL, cIva, cDiv )
      nTotRec  := nTotalRecibosGeneradosRectificativasCliente( ( cFacRecT )->cSerie + str( ( cFacRecT )->nNumFac ) + ( cFacRecT )->cSufFac, cFacRecT, cFacCliP, cIva, cDiv )



      if abs( nTotFac ) > abs( nTotRec )
         GenPgoFacRec( ( cFacRecT )->cSerie + str( ( cFacRecT )->nNumFac ) + ( cFacRecT )->cSufFac, cFacRecT, cFacRecL, cFacCliP, cClient, cFPago, cDiv, cIva, 1, .F. )
      end

      ChkLqdFacRec( nil, cFacRecT, cFacRecL, cFacCliP, cIva, cDiv )

      ( cFacRecT )->( dbSkip() )

      SysRefresh()

   end

   ( cFacRecT )->( OrdSetFocus( 1 ) )





   ( cFacCliP )->( ordSetFocus( 0 ) )
   ( cFacCliP )->( dbGoTop() )

   while !( cFacCliP )->( eof() )

      if !( ( cFacCliP )->cSerie >= "A" .AND. ( cFacCliP )->cSerie <= "Z" )
         ( cFacCliP )->( dbDelete() )
      end

      ( cFacCliP )->( dbSkip() )

   end

   ( cFacCliP )->( ordSetFocus( 1 ) )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( cFacCliT )->( dbCloseArea() )
   ( cFacCliL )->( dbCloseArea() )
   ( cFacCliP )->( dbCloseArea() )
   ( cAntCliT )->( dbCloseArea() )
   ( cFacRecT )->( dbCloseArea() )
   ( cFacRecL )->( dbCloseArea() )
   ( cDiv     )->( dbCloseArea() )
   ( cIva     )->( dbCloseArea() )
   ( cClient  )->( dbCloseArea() )
   ( cFPago   )->( dbCloseArea() )

RETURN nil



STATIC FUNCTION lGenRecCli( oBrw, oBtn, nDevice )

   local bAction
   local nOrdAnt     := ( D():Documentos( nView ) )->( OrdSetFocus( "cTipo" ) )

   If( nDevice == nil, nDevice := 1, ) ;

   IF !( D():Documentos( nView ) )->( dbSeek( "RF" ) )








      oWndBrw:NewAt( "GC_DOCUMENT_WHITE_",,, {||( msgStop( "No hay recibos de clientes predefinidos" ) )}, "No hay documentos", "N",,, 4, oBtn, .F. )

   ELSE

      WHILE ( D():Documentos( nView ) )->CTIPO == "RF" .AND. !( D():Documentos( nView ) )->( eof() )

         bAction  := bGenRecCli( nDevice, ( D():Documentos( nView ) )->CODIGO, "Imprimiendo recibos de clientes" )

         oWndBrw:NewAt( "gc_document_white_", , , bAction, Rtrim( ( D():Documentos( nView ) )->cDescrip ) , , , , , oBtn )

         ( D():Documentos( nView ) )->( dbSkip() )

      end

   end

   ( D():Documentos( nView ) )->( OrdSetFocus( nOrdAnt ) )

RETURN nil



STATIC FUNCTION bGenRecCli( nDevice, cCodDoc, cTitle )

   local nDev  := by( nDevice )
   local cCod  := by( cCodDoc   )
   local cTit  := by( cTitle    )

RETURN {|| ImpPago( nil, nDev, cCod, cTit ) }



FUNCTION BrwRecCli( uGet, cFacCliP, cClient, cDiv )

    local oDlg
    local oBrw
   local nOrd
    local aGet1
    local cGet1
   local cNumRec
   local nRecAnt
    local nOrdAnt
    local oCbxOrd
   local cCbxOrd








   local aCbxOrd     := {  "Número", "Código cliente", "Nombre cliente", "Fecha expedición", "Fecha vencimiento", "Fecha cobro", "Importe", "Forma pago", "Agente" }

   nOrd              := GetBrwOpt( "BrwRecCli" )
   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   cNumRec           := ""

   nRecAnt           := ( cFacCliP )->( Recno() )
   nOrdAnt           := ( cFacCliP )->( OrdSetFocus( nOrd ) )

   ( cFacCliP )->( dbSetFilter( {|| !Field->lCobrado }, "!lCobrado" ) )
   ( cFacCliP )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Recibos de clientes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







        aGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,, "@!", {||       ( OrdClearScope( oBrw, cFacCliP ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cFacCliP, .F., , , , , 10 ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( cFacCliP )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), aGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                    := IXBrowse():New( oDlg )

      oBrw:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias             := cFacCliP
      oBrw:cName              := "Browse de recibos de cliente"
      oBrw:bLDblClick         := {|| oDlg:end( 1 ) }

      oBrw:nMarqueeStyle      := 6

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader             := "Cn. Contabilizado"
         :bstrData            := {|| "" }
         :bEditValue          := {|| ( cFacCliP )->lConPgo }
         :nWidth              := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Co. Cobrado"
         :bstrData            := {|| "" }
         :bEditValue          := {|| ( cFacCliP )->lCobrado }
         :nWidth              := 20
         :SetCheck( { "Sel16", "Cnt16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Tipo"
         :bEditValue          := {|| if( !empty( ( cFacCliP )->cTipRec ), "Rectificativa", "" ) }
         :nWidth              := 60
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Número"
         :cSortOrder          := "nNumFac"
         :bEditValue          := {|| ( cFacCliP )->cSerie + "/" + AllTrim( str( ( cFacCliP )->nNumFac ) ) + "-" + Alltrim( str( ( cFacCliP )->nNumRec ) ) }
         :nWidth              := 95
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Delegación"
         :bEditValue          := {|| ( cFacCliP )->cSufFac }
         :nWidth              := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Código cliente"
         :cSortOrder          := "cCodCli"
         :bEditValue          := {|| ( cFacCliP )->cCodCli }
         :nWidth              := 80
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Nombre cliente"
         :cSortOrder          := "cNomCli"
         :bEditValue          := {|| ( cFacCliP )->cNomCli }
         :nWidth              := 280
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Forma pago"
         :cSortOrder          := "cCodPgo"
         :bEditValue          := {|| ( cFacCliP )->cCodPgo + " - " + cNbrFPago( ( cFacCliP )->cCodPgo ) }
         :nWidth              := 200
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Agente"
         :cSortOrder          := "cCodAge"
         :bEditValue          := {|| ( cFacCliP )->cCodAge + " - " + RetNbrAge( ( cFacCliP )->cCodAge ) }
         :nWidth              := 280
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Importe"
         :cSortOrder          := "nImporte"
         :bEditValue          := {|| nTotRecCli( cFacCliP, cDiv, cDivEmp(), .T. ) }
         :nWidth              := 100
         :nDatastrAlign       := 1
         :nHeadstrAlign       := 1
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Div."
         :bEditValue          := {|| cSimDiv( ( cFacCliP )->cDivPgo, cDiv ) }
         :nWidth              := 30
         :nDatastrAlign       := 1
         :nHeadstrAlign       := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| ( cFacCliP )->cDescrip }
         :nWidth              := 150
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha expedición"
         :bEditValue          := {|| Dtoc( ( cFacCliP )->dPreCob ) }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha vencimiento"
         :bEditValue          := {|| Dtoc( ( cFacCliP )->dFecVto ) }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha cobro"
         :bEditValue          := {|| Dtoc( ( cFacCliP )->dEntrada ) }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





      TButton():ReDefine( 500,, oDlg,,, .F., {||     ( .F. )},,, .F. )




        TButton():ReDefine( 501,, oDlg,,, .F., {||     ( .F. )},,, .F. )
   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|oBrw:Load()}, oDlg:bRClicked,,, )

   SetBrwOpt( "BrwRecCli", ( cFacCliP )->( OrdNumber() ) )

   if oDlg:nResult == 1

      cNumRec     := ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac + str( ( cFacCliP )->nNumRec ) + ( cFacCliP )->cTipRec

      do case
         case IsObject( uGet )

            uGet:cText( cNumRec )
            uGet:lValid()
            uGet:SetFocus()

         case IsChar( uGet )

            uGet  := cNumRec

         case IsArray( uGet )

            uGet  := oBrw:aSelected

      end

   end





   OrdClearScope( nil, cFacCliP )

   ( cFacCliP )->( dbClearFilter() )

   ( cFacCliP )->( OrdSetFocus( nOrdAnt ) )
   ( cFacCliP )->( dbGoTo( nRecAnt ) )





   oBrw:CloseData()

RETURN ( oDlg:nResult == 1 )



FUNCTION browseRecCli( cCodCli, cFacCliP, cDiv )

   local cDbfRecCli     := getDatabaseRecibosClientes( cCodCli, cFacCliP )

RETURN resourceBrowseRecCli( cDbfRecCli, cDiv )



STATIC FUNCTION getDatabaseRecibosClientes( cCodCli, cFacCliP )

   if lAIS()
      RETURN getAdsFilterRecibosClientes( cCodCli )
   else
      RETURN getDbfFilterRecibosClientes( cCodCli, cFacCliP )
   end

RETURN nil



STATIC FUNCTION getAdsFilterRecibosClientes( cCodCli )

   local cStm

   cStm           := "SELECT * "
   cStm           += "FROM " + cPatEmp() + "FacCliP RecibosClientes "
   cStm           += "WHERE RecibosClientes.cNumMtr IS NULL AND RecibosClientes.lCobrado=false AND RecibosClientes.lRemesa=false  "
   cStm           += "AND RecibosClientes.cCodCli='" + alltrim( cCodCli ) + "' "

   TDataCenter():ExecuteSqlStatement( cStm, "RecibosFacturasClientes" )

RETURN ( "RecibosFacturasClientes" )



STATIC FUNCTION getDbfFilterRecibosClientes( cCliente, cFacCliP )

   ( cFacCliP )->( dbSetFilter( {|| !Field->lCobrado .AND. Field->cCodCli == cCliente }, "!lCobrado .and. cCodCli == cCliente" ) )
   ( cFacCliP )->( dbGoTop() )

RETURN cFacCliP



STATIC FUNCTION resourceBrowseRecCli( cFacCliP, cDiv )

   local oDlg
   local oBrw
   local nOrd
   local aGet1
   local cGet1
   local cNumRec
   local aRecCli     := {}
   local nSelect
   local oCbxOrd
   local cCbxOrd








   local aCbxOrd     := {  "Número", "Código cliente", "Nombre cliente", "Fecha expedición", "Fecha vencimiento", "Fecha cobro", "Importe", "Forma pago", "Agente" }

   nOrd              := GetBrwOpt( "BrwRecCli" )
   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   cNumRec           := ""

   oDlg = TDialog():New(,,,, "Recibos de clientes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







      aGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,, "@!", {||       ( OrdClearScope( oBrw, cFacCliP ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cFacCliP, .F., , , , , 10 ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( cFacCliP )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), aGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                    := IXBrowse():New( oDlg )

      oBrw:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias             := cFacCliP
      oBrw:cName              := "Browse de recibos de cliente"
      oBrw:bLDblClick         := {|| oDlg:end( 1 ) }

      oBrw:nMarqueeStyle      := 6

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader             := "Cn. Contabilizado"
         :bstrData            := {|| "" }
         :bEditValue          := {|| ( cFacCliP )->lConPgo }
         :nWidth              := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Co. Cobrado"
         :bstrData            := {|| "" }
         :bEditValue          := {|| ( cFacCliP )->lCobrado }
         :nWidth              := 20
         :SetCheck( { "Sel16", "Cnt16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Tipo"
         :bEditValue          := {|| cTipoRecibo( ( cFacCliP )->cTipRec ) }
         :nWidth              := 60
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Número"
         :cSortOrder          := "nNumFac"
         :bEditValue          := {|| ( cFacCliP )->cSerie + "/" + AllTrim( str( ( cFacCliP )->nNumFac ) ) + "-" + Alltrim( str( ( cFacCliP )->nNumRec ) ) }
         :nWidth              := 95
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Delegación"
         :bEditValue          := {|| ( cFacCliP )->cSufFac }
         :nWidth              := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Código cliente"
         :cSortOrder          := "cCodCli"
         :bEditValue          := {|| ( cFacCliP )->cCodCli }
         :nWidth              := 80
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Nombre cliente"
         :cSortOrder          := "cNomCli"
         :bEditValue          := {|| ( cFacCliP )->cNomCli }
         :nWidth              := 280
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Forma pago"
         :cSortOrder          := "cCodPgo"
         :bEditValue          := {|| ( cFacCliP )->cCodPgo + " - " + cNbrFPago( ( cFacCliP )->cCodPgo ) }
         :nWidth              := 200
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Agente"
         :cSortOrder          := "cCodAge"
         :bEditValue          := {|| ( cFacCliP )->cCodAge + " - " + RetNbrAge( ( cFacCliP )->cCodAge ) }
         :nWidth              := 280
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Importe"
         :cSortOrder          := "nImporte"
         :bEditValue          := {|| nTotRecCli( cFacCliP, cDiv, cDivEmp(), .T. ) }
         :nWidth              := 100
         :nDatastrAlign       := 1
         :nHeadstrAlign       := 1
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| ( cFacCliP )->cDescrip }
         :nWidth              := 150
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha expedición"
         :bEditValue          := {|| Dtoc( ( cFacCliP )->dPreCob ) }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha vencimiento"
         :bEditValue          := {|| Dtoc( ( cFacCliP )->dFecVto ) }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha cobro"
         :bEditValue          := {|| Dtoc( ( cFacCliP )->dEntrada ) }
         :nWidth              := 80
         :lHide               := .T.
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





      TButton():ReDefine( 500,, oDlg,,, .F., {||     ( .F. )},,, .F. )




      TButton():ReDefine( 501,, oDlg,,, .F., {||     ( .F. )},,, .F. )
   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|oBrw:Load()}, oDlg:bRClicked,,, )

   SetBrwOpt( "BrwRecCli", ( cFacCliP )->( OrdNumber() ) )

   OrdClearScope( nil, cFacCliP )

   ( cFacCliP )->( dbClearFilter() )

   oBrw:CloseData()

   if ( oDlg:nResult == 1 )

      for each nSelect in oBrw:aSelected

         ( cFacCliP )->( dbGoTo( nSelect ) )

         aAdd( aRecCli, ( ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac + str( ( cFacCliP )->nNumRec ) + ( cFacCliP )->cTipRec ) )

      next

   end

RETURN ( aRecCli )



FUNCTION aCalRecCli()

   local aCalRecCli  := {}

   aAdd( aCalRecCli, {"nImpRecCli( cDbfRec, cDbfDiv )", "N", 16, 6, "Importe del recibo", "cPorDivRec",  "", "" } )
   aAdd( aCalRecCli, {"cTxtRecCli( cDbfRec, cDbfDiv )", "C",100, 0, "Importe en letras",  "",            "", "" } )
   aAdd( aCalRecCli, {"nTotFac",                        "N", 16, 6, "Total factura",      "cPorDivRec",  "", "" } )

RETURN ( aCalRecCli )



FUNCTION aDocRecCli()

   local aDoc  := {}





   aAdd( aDoc, { "Empresa",         "EM" } )
   aAdd( aDoc, { "Recibo",          "RF" } )
   aAdd( aDoc, { "Factura",         "FC" } )
   aAdd( aDoc, { "Cliente",         "CL" } )
   aAdd( aDoc, { "Formas de pago",  "PG" } )

RETURN ( aDoc )



STATIC FUNCTION lLiquida( oBrw, lCobrado )

   local nRec

   If( lCobrado == nil, lCobrado := .T., ) ;

   if len( oBrw:aSelected ) > 0

      for each nRec in ( oBrw:aSelected )

         ( D():FacturasClientesCobros( nView ) )->( dbgoto( nRec ) )

         if ( ( D():FacturasClientesCobros( nView ) )->lCobrado <> lCobrado )

            if ( lCobrado ) .OR. ( !lCobrado .AND. empty( ( D():FacturasClientesCobros( nView ) )->nNumRem ) )

               if ( D():FacturasClientesCobros( nView ) )->( dbrlock() )
                  ( D():FacturasClientesCobros( nView ) )->lCobrado   := lCobrado
                  ( D():FacturasClientesCobros( nView ) )->dEntrada   := GetSysDate()
                  ( D():FacturasClientesCobros( nView ) )->cTurRec    := cCurSesion()
                  ( D():FacturasClientesCobros( nView ) )->( dbunlock() )
               end

            end

         end

         if ( D():FacturasClientes( nView ) )->( dbSeek( ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac ) )








            ChkLqdFacCli(  nil, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), D():AnticiposClientes( nView ), D():TiposIva( nView ), D():Divisas( nView ), .F. )
         end

      next

   end

   if oBrw <> nil
      oBrw:Refresh()
   end

RETURN nil







FUNCTION GenPgoFacRec( cNumFac, cFacRecT, cFacRecL, cFacCliP, dbfCli, cFPago, cDiv, cIva, nMode, lMessage )

   local cCodPgo
   local cSerFac
   local nNumFac
   local cSufFac
   local cDivFac
   local nVdvFac
   local dFecFac
   local cCodCli
   local cNomCli
   local cCodAge
   local cCodCaj
   local cCodUsr
   local cCtaRem     := ""
   local nCobro      := 0
   local nTotal      := 0
   local nTotCob     := 0
   local nDec        := 0
   local nInc        := 0
   local nTotAcu     := 0
   local n           := 0
   local nPlazos     := 0
   local nRecCli
   local cBanco
   local cPaisIBAN
   local cCtrlIBAN
   local cEntidad
   local cSucursal
   local cControl
   local cCuenta

   If( nMode == nil, nMode := 1, ) ;
   If( lMessage == nil, lMessage := .T., ) ;

   If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cFPago == nil, cFPago := D():FormasPago( nView ), ) ;
   If( cDiv == nil, cDiv := D():Divisas( nView ), ) ;
   If( cFacRecT == nil, cFacRecT := D():FacturasRectificativas( nView ), ) ;
   If( cFacRecL == nil, cFacRecL := D():FacturasRectificativasLineas( nView ), ) ;
   If( cIva == nil, cIva := D():TiposIva( nView ), ) ;

   cSerFac           := ( cFacRecT )->cSerie
   nNumFac           := ( cFacRecT )->nNumFac
   cSufFac           := ( cFacRecT )->cSufFac
   cDivFac           := ( cFacRecT )->cDivFac
   nVdvFac           := ( cFacRecT )->nVdvFac
   dFecFac           := ( cFacRecT )->dFecFac
   cCodPgo           := ( cFacRecT )->cCodPago
   cCodCli           := ( cFacRecT )->cCodCli
   cNomCli           := ( cFacRecT )->cNomCli
   cCodAge           := ( cFacRecT )->cCodAge
   cCodCaj           := ( cFacRecT )->cCodCaj
   cCodUsr           := ( cFacRecT )->cCodUsr
   cBanco            := ( cFacRecT )->cBanco
   cPaisIBAN         := ( cFacRecT )->cPaisIBAN
   cCtrlIBAN         := ( cFacRecT )->cCtrlIBAN
   cEntidad          := ( cFacRecT )->cEntBnc
   cSucursal         := ( cFacRecT )->cSucBnc
   cControl          := ( cFacRecT )->cDigBnc
   cCuenta           := ( cFacRecT )->cCtaBnc





   nRecCli           := ( dbfCli )->( Recno() )

   if ( dbfCli )->( dbSeek( cCodCli ) )
      cCtaRem        := ( dbfCli )->cCodRem
   end





   nDec              := nRouDiv( cDivFac, cDiv )





   nTotal            := nTotFacRec( cNumFac, cFacRecT, cFacRecL, cIva, cDiv, nil, nil, .F. )
   nTotCob           := nTotalRecibosGeneradosRectificativasCliente( cNumFac, cFacRecT, cFacCliP, cIva, cDiv )

   if nTotal <> nTotCob





      if ( cFacCliP )->( dbSeek( cSerFac + str( nNumFac ) + cSufFac ) )

         while cSerFac + str( nNumFac ) + cSufFac == ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac .AND. !( cFacCliP )->( eof() )

            if !empty( ( cFacCliP )->cTipRec )

               if !( cFacCliP )->lCobrado .AND. dbLock( cFacCliP )
                  ( cFacCliP )->( dbDelete() )
                  ( cFacCliP )->( dbUnLock() )
               else
                  nInc  := ( cFacCliP )->nNumRec
               end

            end

            ( cFacCliP )->( dbSkip() )

         end

      end





      nTotal         -= nTotalRecibosPagadosRectificativasCliente( cSerFac + str( nNumFac ) + cSufFac, cFacRecT, cFacCliP, cIva, cDiv )





      if ( cFPago )->( dbSeek( cCodPgo ) )

         nTotAcu        := nTotal
         nPlazos        := Max( ( cFPago )->nPlazos, 1 )

         for n := 1 to nPlazos

            if n <> nPlazos
               nTotAcu  -= Round( nTotal / nPlazos, nDec )
            end

            ( cFacCliP )->( dbAppend() )

            ( cFacCliP )->cSerie        := cSerFac
            ( cFacCliP )->nNumFac       := nNumFac
            ( cFacCliP )->cSufFac       := cSufFac
            ( cFacCliP )->nNumRec       := ++nInc
            ( cFacCliP )->cTipRec       := "R"
            ( cFacCliP )->cCodCaj       := cCodCaj
            ( cFacCliP )->cCodUsr       := cCodUsr
            ( cFacCliP )->cTurRec       := cCurSesion()
            ( cFacCliP )->cCodCli       := cCodCli
            ( cFacCliP )->cNomCli       := cNomCli

            if ( cFPago )->lUtlBnc
               ( cFacCliP )->cBncEmp    := ( cFPago )->cBanco
               ( cFacCliP )->cEntEmp    := ( cFPago )->cEntBnc
               ( cFacCliP )->cSucEmp    := ( cFPago )->cSucBnc
               ( cFacCliP )->cDigEmp    := ( cFPago )->cDigBnc
               ( cFacCliP )->cCtaEmp    := ( cFPago )->cCtaBnc
            end

            ( cFacCliP )->cBncCli       := cBanco
            ( cFacCliP )->cEntCli       := cEntidad
            ( cFacCliP )->cSucCli       := cSucursal
            ( cFacCliP )->cDigCli       := cControl
            ( cFacCliP )->cCtaCli       := cCuenta

            ( cFacCliP )->nImporte      := if( n <> nPlazos, Round( nTotal / nPlazos, nDec ), Round( nTotAcu, nDec ) )
            ( cFacCliP )->nImpCob       := if( n <> nPlazos, Round( nTotal / nPlazos, nDec ), Round( nTotAcu, nDec ) )
            ( cFacCliP )->cDescrip      := "Recibo nº" + AllTrim( str( nInc ) ) + " de factura rectificativa " + cSerFac  + "/" + allTrim( str( nNumFac )  ) + "/" + cSufFac
            ( cFacCliP )->cDivPgo       := cDivFac
            ( cFacCliP )->nVdvPgo       := nVdvFac
            ( cFacCliP )->dPreCob       := dFecFac
            ( cFacCliP )->cCtaRec       := ( cFPago )->cCtaCobro
            ( cFacCliP )->cCtaGas       := ( cFPago )->cCtaGas
            ( cFacCliP )->cCtaRem       := cCtaRem
            ( cFacCliP )->cCodAge       := cCodAge
            ( cFacCliP )->lEsperaDoc    := ( cFPago )->lEsperaDoc
            ( cFacCliP )->lSndDoc       := .T.
            ( cFacCliP )->dFecVto       := dNextDayPago( dFecFac, n, nPlazos, cFPago, dbfCli )

            if !empty( ( cFacRecT )->cCtrCoste )
               ( cFacCliP )->cCtrCoste  := ( cFacRecT )->cCtrCoste
            endif

            if ( cFPago )->nCobRec == 1 .AND. nMode == 1
               ( cFacCliP )->lCobrado   := .T.
               ( cFacCliP )->cTurRec    := cCurSesion()
               ( cFacCliP )->dEntrada   := dNextDayPago( dFecFac, n, nPlazos, cFPago, dbfCli )

            end

            ( cFacCliP )->dFecCre       := GetSysDate()
            ( cFacCliP )->cHorCre       := Substr( Time(), 1, 5 )

            ( cFacCliP )->( dbUnLock() )





            if ( cFacCliP )->lCobrado
               delRiesgo( ( cFacCliP )->nImporte, ( cFacCliP )->cCodCli, dbfCli )
            end

         next

      else

         if lMessage
            MsgStop( "Forma de pago no encontrada" )
         end

      end

   end

   ( dbfCli )->( dbGoTo( nRecCli ) )

RETURN NIL



STATIC FUNCTION EdtRecMenu( aTmp, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )




            MenuAddItem( "&1. Modificar factura", "Modificar la factura que creó el recibo", .F.,, {|oMenuItem|( EdtFacCli( aTmp[ 1 ] + str( aTmp[ 2 ] ) + aTmp[ 3 ] ) )},, "gc_document_text_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )

            MenuAddItem(,,,,,,,,,,,,,,,,,.T.,,,,,,,,,,,,,,,,,)




            MenuAddItem( "&2. Modificar cliente", "Modifica la ficha del cliente", .F.,, {|oMenuItem|( if( !empty( aTmp[ 10 ] ), EdtCli( aTmp[ 10 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "gc_user_16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )





            MenuAddItem( "&3. Informe de cliente", "Informe de cliente", .F.,, {|oMenuItem|( if( !empty( aTmp[ 10 ] ), InfCliente( aTmp[ 10 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "Info16",,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

RETURN ( oMenu )



STATIC FUNCTION EndEdtRecMenu()

RETURN( oMenu:End() )



Function EdtRecCli( cNumFac, lOpenBrowse, lRectificativa )

   local lEdit             := .F.
   local nLevel            := Auth():Level( "recibos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;
   If( lRectificativa == nil, lRectificativa := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if RecCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra recibo" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            lEdit          := WinEdtRec( nil, bEdit, D():FacturasClientesCobros( nView ), lRectificativa )
         else
            MsgStop( "No se encuentra recibo" + str( len( cNumFac ) ) )
         end

         CloseFiles()

      end

   end

RETURN ( lEdit )



FUNCTION ZooRecCli( cNumFac, lOpenBrowse )

   local nLevel         := Auth():Level( "recibos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if RecCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra recibo" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            WinZooRec( nil, bEdit, D():FacturasClientesCobros( nView ) )
         end
         CloseFiles()
      end

   end

RETURN .T.



FUNCTION DelRecCli( cNumFac, lOpenBrowse )

   local nLevel         := Auth():Level( "recibos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if RecCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            oWndBrw:RecDel()
         else
            MsgStop( "No se encuentra factura" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            DelCobCli( nil, D():FacturasClientesCobros( nView ) )
         end

         CloseFiles()

      end

   end

RETURN .T.



FUNCTION PrnRecCli( cNumFac, lOpenBrowse )

   local nLevel         := Auth():Level( "recibos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if RecCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            ImpPago( nil, 1 )
         else
            MsgStop( "No se encuentra recibo" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            ImpPago( nil, 1 )
         end

         CloseFiles()

      end

   end

RETURN .T.



FUNCTION VisRecCli( cNumFac, lOpenBrowse )

   local nLevel         := Auth():Level( "recibos_de_clientes" )

   If( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if lOpenBrowse

      if RecCli()
         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            ImpPago( nil, 2 )
         else
            MsgStop( "No se encuentra recibo" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
            ImpPago( nil, 2 )
         end

         CloseFiles()

      end

   end

RETURN .T.



FUNCTION IntEdtRecCli( cNumFac )

   local nLevel         := Auth():Level( "recibos_de_clientes" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   if dbSeekInOrd( cNumFac, "nNumFac", D():FacturasClientesCobros( nView ) )
      WinEdtRec( nil, bEdit, D():FacturasClientesCobros( nView ) )
   else
      MsgStop( "No se encuentra recibo" )
   end

RETURN .T.



FUNCTION ExtEdtRecCli( cFacCliP, nVista, lRectificativa, oCta, oCtrCoste )

   local nLevel               := Auth():Level( "recibos_de_clientes" )

   lActualizarEstadoFactura   := .F.

   nView                      := nVista
   oCtaRem                    := oCta
   oCentroCoste               := oCtrCoste

   If( lRectificativa == nil, lRectificativa := .F., ) ;

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   WinEdtRec( nil, bEdit, cFacCliP, lRectificativa )

   lActualizarEstadoFactura   := .T.

RETURN .T.



FUNCTION ExtDelRecCli( cFacCliP )

   local nLevel         := Auth():Level( "recibos_de_clientes" )

   if nAnd( nLevel, 1 ) == 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      RETURN .T.
   end

   DelCobCli( nil, cFacCliP )

RETURN .T.



STATIC FUNCTION PrnSerie()

    local oDlg
   local oRad
   local nRad        := 1
   local nCopPrn     := 1
   local oSerIni
   local oSerFin
   local oFmtRec
   local cFmtRec     := cSelPrimerDoc( "RF" )
   local oSayRec
   local cSayRec
   local lNotRem     := .F.
   local lNotImp     := .F.
   local lNotCob     := .F.
   local oCodPgo
   local cCodPgo     := space( 3 )
   local oTxtPgo
   local cTxtPgo     := ""
   local nRecno      := ( D():FacturasClientesCobros( nView ) )->( recno() )
   local nOrdAnt     := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( 1 ) )
   local dFecIni     := CtoD( "01/" + str( Month( GetSysDate() ), 2 ) + "/" + str( Year( Date() ) ) )
   local dFecFin     := GetSysDate()
   local cSerIni     := ( D():FacturasClientesCobros( nView ) )->CSERIE
   local cSerFin     := ( D():FacturasClientesCobros( nView ) )->CSERIE
   local nDocIni     := ( D():FacturasClientesCobros( nView ) )->NNUMFAC
   local nDocFin     := ( D():FacturasClientesCobros( nView ) )->NNUMFAC
   local cSufIni     := ( D():FacturasClientesCobros( nView ) )->CSUFFAC
   local cSufFin     := ( D():FacturasClientesCobros( nView ) )->CSUFFAC
   local nNumIni     := ( D():FacturasClientesCobros( nView ) )->NNUMREC
   local nNumFin     := ( D():FacturasClientesCobros( nView ) )->NNUMREC
   local oPrinter
   local cPrinter    := ImpresoraDefectoUsuario()

   cSayRec           := cNombreDoc( cFmtRec )

   oDlg = TDialog():New(,,,,, "IMPSERREC",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )



   oRad := TRadMenu():Redefine( { | u | If( PCount()==0, nRad, nRad:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )






   oFmtRec := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFmtRec, cFmtRec:= u ) }, oDlg,,, {||    ( cDocumento( oFmtRec, oSayRec, D():Documentos( nView ) ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oFmtRec, oSayRec, "RF" ) )}, nil, "LUPA",, )




   oSayRec := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSayRec, cSayRec:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 92, "gc_document_text_pencil_12",,,,,{|| EdtDocumento( cFmtRec ) }, oDlg, .F., , .F.,  )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, dFecIni, dFecIni:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRad == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, dFecFin, dFecFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( nRad == 1 )},, .F., .T.,,,,,, nil,,, )










   oSerIni := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z"  )},,,,,, .T., {||     ( nRad == 2 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z"  )},,,,,, .T., {||     ( nRad == 2 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRad == 2 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( nRad == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 160, { | u | If( PCount()==0, nNumIni, nNumIni:= u ) }, oDlg,, "99",,,,,,, .F., {||     ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 200, { | u | If( PCount()==0, nNumFin, nNumFin:= u ) }, oDlg,, "99",,,,,,, .F., {||     ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )




   oPrinter := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, cPrinter, cPrinter:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 321, "gc_printer2_check_16",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .F., , .F.,  )









   oCodPgo := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, cCodPgo, cCodPgo:= u ) }, oDlg,, "@!", {||    ( cFPago( oCodPgo, D():FormasPago( nView ), oTxtPgo ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFPago( oCodPgo, oTxtPgo ) )}, nil, "LUPA",, )




   oTxtPgo := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, cTxtPgo, cTxtPgo:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



   TCheckBox():ReDefine( 230, { | u | If( PCount()==0, lNotRem, lNotRem:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 240, { | u | If( PCount()==0, lNotImp, lNotImp:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 250, { | u | If( PCount()==0, lNotCob, lNotCob:= u ) }, oDlg,,,,,,, .F.,, .F. )








   TGetHlp():ReDefine( 260, { | u | If( PCount()==0, nCopPrn, nCopPrn:= u ) }, oDlg,, "999999999", {||    nCopPrn > 0},,,,,, .F.,,, .F., .T.,,, {||      1}, {||      99999},, nil,,, )





   TButton():ReDefine( 1, {||(  StartPrint( Substr( cFmtRec, 1, 3 ), nRad, dFecIni, dFecFin, cSerIni + str( nDocIni, 9 ) + cSufIni + str( nNumIni, 2 ), cSerFin + str( nDocFin, 9 ) + cSufFin + str( nNumFin, 2 ), cCodPgo, lNotRem, lNotImp, lNotCob, nCopPrn, cPrinter, oDlg ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| StartPrint( Substr( cFmtRec, 1, 3 ), nRad, dFecIni, dFecFin, cSerIni + str( nDocIni, 9 ) + cSufIni + str( nNumIni, 2 ), cSerFin + str( nDocFin, 9 ) + cSufFin + str( nNumFin, 2 ), cCodPgo, lNotRem, lNotImp, lNotCob, nCopPrn, cPrinter, oDlg ), oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( D():FacturasClientesCobros( nView ) )->( dbGoTo( nRecNo ) )
   ( D():FacturasClientesCobros( nView ) )->( ordSetFocus( nOrdAnt ) )

    oWndBrw:oBrw:refresh()

RETURN NIL



STATIC FUNCTION StartPrint( cCodDoc, nRad, dFecIni, dFecFin, cDocIni, cDocFin, cCodPgo, lNotRem, lNotImp, lNotCob, nCopPrn, cPrinter, oDlg )

   local oInf
   local nOrd
   local oDevice
   local cCaption       := "Imprimiendo recibos"

   if empty( cCodDoc )
      RETURN nil
   end

   private cDbfRec      := D():FacturasClientesCobros( nView )
   private cDbf         := D():FacturasClientes( nView )
   private cCliente     := D():Clientes( nView )
   private cDbfCli      := D():Clientes( nView )
   private cFPago       := D():FormasPago( nView )
   private cDbfPgo      := D():FormasPago( nView )
   private cDbfAge      := D():Agentes( nView )
   private cDbfDiv      := D():Divisas( nView )
   private cPorDivRec   := cPorDiv( ( D():FacturasClientesCobros( nView ) )->cDivPgo, D():Divisas( nView ) )

   oDlg:Disable()

   if lVisualDocumento( cCodDoc, D():Documentos( nView ) )

      if nRad == 1
         nOrd           := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "dPreCob" ) )
         ( D():FacturasClientesCobros( nView ) )->( dbSeek( dFecIni, .T. ) )
      else
         nOrd           := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "nNumFac" ) )
         ( D():FacturasClientesCobros( nView ) )->( dbSeek( cDocIni, .T. ) )
      end

      while !( D():FacturasClientesCobros( nView ) )->( eof() )







         if (  if( nRad == 1, ( ( D():FacturasClientesCobros( nView ) )->dPreCob >= dFecIni .AND. ( D():FacturasClientesCobros( nView ) )->dPreCob <= dFecFin ), .T. )                 .AND.  if( nRad == 2, ( ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) >= cDocIni .AND.  ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) <= cDocFin ), .T. )  .AND.  if( !empty( cCodPgo ), cCodPgo == cPgoFacCli( ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC, 9 ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC, D():FacturasClientes( nView ) ), .T. ) .AND. if( lNotRem, ( D():FacturasClientesCobros( nView ) )->nNumRem == 0 .AND. empty( ( D():FacturasClientesCobros( nView ) )->cSufRem ), .T. )                                 .AND.  if( lNotImp, !( D():FacturasClientesCobros( nView ) )->lRecImp, .T. )                                                                            .AND.  if( lNotCob, !( D():FacturasClientesCobros( nView ) )->lCobrado, .T. ) )



            if dbLock( D():FacturasClientesCobros( nView ) )
               ( D():FacturasClientesCobros( nView ) )->lRecImp    := .T.
               ( D():FacturasClientesCobros( nView ) )->dFecImp    := GetSysDate()
               ( D():FacturasClientesCobros( nView ) )->cHorImp    := Substr( Time(), 1, 5 )
               ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
            end

            ( D():FacturasClientes( nView ) )->( dbSeek( ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC ) )
            ( D():Clientes( nView ) )->( dbSeek( ( D():FacturasClientes( nView ) )->CCODCLI ) )
            ( D():FormasPago( nView ) )->( dbSeek( ( D():FacturasClientes( nView ) )->CCODPAGO ) )



            PrintReportRecCli( 1, nCopPrn, nil, cCodDoc )

         end

         ( D():FacturasClientesCobros( nView ) )->( dbSkip() )

      end

   else

      if !empty( cPrinter )
         oDevice           := TPrinter():New( cCaption, .F., .T., cPrinter )
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .F.,, oDevice, cCaption,,,, )
      else
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .T.,,, cCaption,,,, )
      end



      if !empty( oInf ) .AND. oInf:lCreated
         oInf:lFinish      := .F.
         oInf:lAutoland    := .T.
         oInf:lNoCancel    := .T.
         oInf:bSkip        := {|| Skipping( nRad, dFecIni, dFecFin, cDocIni, cDocFin, cCodDoc, cCodPgo, lNotRem, lNotImp, lNotCob, nCopPrn, oInf ) }

         oInf:oDevice:lPrvModal  := .T.

         oInf:bPreview     := {| oDevice | PrintPreview( oDevice ) }

      end

      SetMargin(  cCodDoc, oInf )
      PrintColum( cCodDoc, oInf )

      RptEnd()

      if !empty( oInf )

         oInf:Activate(, {|| ( !( D():FacturasClientesCobros( nView ) )->( eof() ) )},,,,,,,,,,,, )

         oInf:oDevice:end()

      end

      oInf                          := nil

   end

   oDlg:Enable()

RETURN NIL



STATIC FUNCTION Skipping( nRad, dFecIni, dFecFin, cDocIni, cDocFin, cCodDoc, cCodPgo, lNotRem, lNotImp, lNotCob, nCopPrn, oInf )

   local nOrd
   local nCopYet  := 0
   local nImpYet  := 0
   local nDocPag  := 0
   local nLenPag  := 0
   local nLenDoc  := 0
   local nOffset  := 0

   if ( D():Documentos( nView ) )->( dbSeek( cCodDoc ) )
      nLenPag     := ( D():Documentos( nView ) )->nLenPag
      nLenDoc     := ( D():Documentos( nView ) )->nLenDoc
      if nLenPag <> 0 .AND. nLenDoc <> 0
         nDocPag  := Int( nLenPag / nLenDoc )
      end
   end

   if nRad == 1
      nOrd        := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "dPreCob" ) )
      ( D():FacturasClientesCobros( nView ) )->( dbSeek( dFecIni, .T. ) )
   else
      nOrd        := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "nNumFac" ) )
      ( D():FacturasClientesCobros( nView ) )->( dbSeek( cDocIni, .T. ) )
   end

   while !( D():FacturasClientesCobros( nView ) )->( eof() )







      if (  if( nRad == 1, ( ( D():FacturasClientesCobros( nView ) )->dPreCob >= dFecIni .AND. ( D():FacturasClientesCobros( nView ) )->dPreCob <= dFecFin ), .T. )                 .AND.  if( nRad == 2, ( ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) >= cDocIni .AND.  ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) <= cDocFin ), .T. )  .AND.  if( !empty( cCodPgo ), cCodPgo == cPgoFacCli( ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC, 9 ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC, D():FacturasClientes( nView ) ), .T. ) .AND. if( lNotRem, ( D():FacturasClientesCobros( nView ) )->nNumRem == 0 .AND. empty( ( D():FacturasClientesCobros( nView ) )->cSufRem ), .T. )                                 .AND.  if( lNotImp, !( D():FacturasClientesCobros( nView ) )->lRecImp, .T. )                                                                            .AND.  if( lNotCob, !( D():FacturasClientesCobros( nView ) )->lCobrado, .T. ) )



         if dbLock( D():FacturasClientesCobros( nView ) )
            ( D():FacturasClientesCobros( nView ) )->lRecImp    := .T.
            ( D():FacturasClientesCobros( nView ) )->dFecImp    := GetSysDate()
            ( D():FacturasClientesCobros( nView ) )->cHorImp    := Substr( Time(), 1, 5 )
            ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
         end

         ( D():FacturasClientes( nView ) )->( dbSeek( ( D():FacturasClientesCobros( nView ) )->CSERIE + str( ( D():FacturasClientesCobros( nView ) )->NNUMFAC ) + ( D():FacturasClientesCobros( nView ) )->CSUFFAC ) )
         ( D():Clientes( nView ) )->( dbSeek( ( D():FacturasClientes( nView ) )->CCODCLI ) )
         ( D():FormasPago( nView ) )->( dbSeek( ( D():FacturasClientes( nView ) )->CCODPAGO ) )

         nImpYet++
         if nImpYet > nDocPag
            oInf:EndPage()
            nImpYet  := 1
         end

         nOffSet     := ( nImpYet - 1 ) * nLenDoc

         PrintItems( cCodDoc, oInf, nil, nOffSet )

      end

      nCopYet++

      if nCopYet >= nCopPrn
         ( D():FacturasClientesCobros( nView ) )->( dbSkip() )
         nCopYet     := 0
      end

   end

RETURN NIL




STATIC FUNCTION ImpPago( cNumRec, nDevice, cCodDoc, cCaption, nCopies )

   local oInf
   local cPrinter

   If( cNumRec == nil, cNumRec := ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac, ) ;
   If( nDevice == nil, nDevice := 1, ) ;
   If( cCaption == nil, cCaption := "Imprimiendo recibos", ) ;
   If( nCopies == nil, nCopies := 1, ) ;
   If( cCodDoc == nil, cCodDoc := cFormatoDocumento( ( D():FacturasClientesCobros( nView ) )->cSerie, "nRecCli", D():Contadores( nView ) ), ) ;

   if empty( cCodDoc )
      cCodDoc           := cFirstDoc( "RF", D():Documentos( nView ) )
   end

   if !lExisteDocumento( cCodDoc, D():Documentos( nView ) )
      RETURN nil
   end





   if lVisualDocumento( cCodDoc, D():Documentos( nView ) )

      PrintReportRecCli( nDevice, nCopies, cPrinter, cCodDoc )

   else

      private cDbfRec      := D():FacturasClientesCobros( nView )
      private cDbf         := D():FacturasClientes( nView )
      private cCliente     := D():Clientes( nView )
      private cDbfCli      := D():Clientes( nView )
      private cFPago       := D():FormasPago( nView )
      private cDbfPgo      := D():FormasPago( nView )
      private cDbfDiv      := D():Divisas( nView )
      private cDbfAge      := D():Agentes( nView )
      private cPorDivRec   := cPorDiv( ( D():FacturasClientesCobros( nView ) )->cDivPgo, D():Divisas( nView ) )
      private nTotFac      := nTotFacCli( cNumRec, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():TiposIva( nView ), D():Divisas( nView ), D():FacturasClientesCobros( nView ), , , .F. )



      if empty( ( D():FacturasClientesCobros( nView ) )->cTipRec )
         ( D():FacturasClientes( nView ) )->( dbSeek( cNumRec ) )
         ( D():Clientes( nView ) )->( dbSeek( ( D():FacturasClientesCobros( nView ) )->cCodCli ) )
         ( D():FormasPago( nView ) )->( dbSeek( ( D():FacturasClientes( nView ) )->cCodPago ) )
      else
         ( D():FacturasRectificativas( nView ))->( dbSeek( cNumRec ) )
         ( D():Clientes( nView ) )->( dbSeek( ( D():FacturasClientesCobros( nView ) )->cCodCli ) )
         ( D():FormasPago( nView ) )->( dbSeek( ( D():FacturasRectificativas( nView ) )->cCodPago ) )
      end

      if empty( cPrinter )
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .T.,,, cCaption,,,, )
      else
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,, cPrinter,, .T.,,, cCaption,,,, )
      end



      if oInf:lCreated
         oInf:lFinish      := .F.
         oInf:lAutoland    := .T.
         oInf:bSkip        := {|| ( D():FacturasClientesCobros( nView ) )->( dbSkip() ) }

         do case
            case nDevice == 1
               oInf:bPreview  := {| oDevice | PrintPreview( oDevice ) }

            case nDevice == 3
               oInf:bPreview  := {| oDevice | PrintPdf( oDevice ) }

         end

         SetMargin(  cCodDoc, oInf )
         PrintColum( cCodDoc, oInf )
      end

      RptEnd()

      oInf:Activate(, {|| ( .F. )},,,, {|| ( eItems( cCodDoc, oInf ) )},,,,,,,, )



      if nDevice == 1
         oInf:oDevice:end()
      end

      oInf                 := nil

   end



   if dbLock( D():FacturasClientesCobros( nView ) )
      ( D():FacturasClientesCobros( nView ) )->lRecImp    := .T.
      ( D():FacturasClientesCobros( nView ) )->dFecImp    := GetSysDate()
      ( D():FacturasClientesCobros( nView ) )->cHorImp    := Substr( Time(), 1, 5 )
      ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )
   end





   if !empty( oWndBrw )
      oWndBrw:Refresh()
   end

RETURN NIL



STATIC FUNCTION eItems( cCodDoc, oInf )

   private nPagina      := oInf:nPage
    private lEnd            := oInf:lFinish



   PrintItems( cCodDoc, oInf )

RETURN NIL



Function bGenEdtRecCli( cDocumento, lFromFactura )

   local bGen
   local cDoc           := by( cDocumento )

   If( lFromFactura == nil, lFromFactura := .F., ) ;

   if lFromFactura
      bGen              := {|| EdtRecCli( cDoc, .F. ) }
   else
      bGen              := {|| IntEdtRecCli( cDoc ) }
   end

RETURN ( bGen )



STATIC FUNCTION DataReport( oFr )





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Recibos", ( D():FacturasClientesCobros( nView ) )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Recibos", cItemsToReport( aItmRecCli() ) )

   oFr:SetWorkArea(     "Facturas", ( D():FacturasClientes( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Facturas", cItemsToReport( aItmFacCli() ) )

   oFr:SetWorkArea(     "Facturas rectificativas", ( D():FacturasRectificativas( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Facturas rectificativas", cItemsToReport( aItmFacRec() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Agentes", ( D():Agentes( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Agentes", cItemsToReport( aItmAge() ) )

   oFr:SetWorkArea(     "Bancos", ( D():ClientesBancos( nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Bancos", cItemsToReport( aCliBnc() ) )

   oFr:SetWorkArea(     "Compensaciones", ( dbfMatriz )->( Select() ) )
   oFr:SetFieldAliases( "Compensaciones", cItemsToReport( aItmRecCli() ) )

   oFr:SetMasterDetail( "Recibos", "Facturas",                 {|| ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac } )
   oFr:SetMasterDetail( "Recibos", "Facturas rectificativas",  {|| ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac } )
   oFr:SetMasterDetail( "Recibos", "Empresa",                  {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Recibos", "Clientes",                 {|| ( D():FacturasClientesCobros( nView ) )->cCodCli } )
   oFr:SetMasterDetail( "Recibos", "Formas de pago",           {|| ( D():FacturasClientesCobros( nView ) )->cCodPgo } )
   oFr:SetMasterDetail( "Recibos", "Agentes",                  {|| ( D():FacturasClientesCobros( nView ) )->cCodAge } )
   oFr:SetMasterDetail( "Recibos", "Bancos",                   {|| ( D():FacturasClientesCobros( nView ) )->cCodCli } )
   oFr:SetMasterDetail( "Recibos", "Compensaciones",           {|| ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) + ( D():FacturasClientesCobros( nView ) )->cTipRec } )

   oFr:SetResyncPair(   "Recibos", "Facturas" )
   oFr:SetResyncPair(   "Recibos", "Facturas rectificativas" )
   oFr:SetResyncPair(   "Recibos", "Empresa" )
   oFr:SetResyncPair(   "Recibos", "Clientes" )
   oFr:SetResyncPair(   "Recibos", "Formas de pago" )
   oFr:SetResyncPair(   "Recibos", "Agentes" )
   oFr:SetResyncPair(   "Recibos", "Bancos" )
   oFr:SetResyncPair(   "Recibos", "Compensaciones" )

RETURN nil



STATIC FUNCTION VariableReport( oFr )

   oFr:DeleteCategory(  "Recibos" )





   oFr:AddVariable(     "Recibos", "Importe del recibo",       "CallHbFunc('nImpRecCli')" )
   oFr:AddVariable(     "Recibos", "Importe formato texto",    "CallHbFunc('cTxtRecCli')" )
   oFr:AddVariable(     "Recibos", "Total factura",            "CallHbFunc('nTotFactura')" )
   oFr:AddVariable(     "Recibos", "Total cobros factura",     "CallHbFunc('nTotCobros')" )
   oFr:AddVariable(     "Recibos", "Total rectificativa",      "CallHbFunc('nTotRectificativa')" )
   oFr:AddVariable(     "Recibos", "Cuenta bancaria cliente",  "CallHbFunc('cCtaRecCli')" )

RETURN nil



Function DesignReportRecCli( oFr, cDbfDoc )

   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag





      DataReport( oFr )





      if !empty( ( cDbfDoc )->mReport )

         oFr:LoadFromBlob( ( cDbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "CallHbFunc('nTotRecCli');"                                 + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CuerpoDocumento",   "MainPage", 2 )
         oFr:SetProperty(     "CuerpoDocumento",   "Top", 0 )
         oFr:SetProperty(     "CuerpoDocumento",   "Height", 300 )

         oFr:AddBand(         "MasterData",  "MainPage", 6 )
         oFr:SetProperty(     "MasterData",  "Top", 300 )
         oFr:SetProperty(     "MasterData",  "Height", 0 )
         oFr:SetProperty(     "MasterData",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "MasterData",  "DataSet", "Recibos" )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lOpen
         CloseFiles()
      end

   else

      RETURN .F.

   end

RETURN .T.



Function mailReportRecCli( cCodigoDocumento )

RETURN ( PrintReportRecCli( 6, 1, ImpresoraDefectoUsuario(), cCodigoDocumento ) )



STATIC FUNCTION PrintReportRecCli( nDevice, nCopies, cPrinter, cCodigoDocumento )

   local oFr
   local cFilePdf             := cPatOut() + "RecibosCliente" + strTran( ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac, " ", "" ) + ".Pdf"

   If( nDevice == nil, nDevice := 2, ) ;
   If( nCopies == nil, nCopies := 1, ) ;
   If( cPrinter == nil, cPrinter := ImpresoraDefectoUsuario(), ) ;
   If( cCodigoDocumento == nil, cCodigoDocumento := cFormatoRecibosClientes(), ) ;

   if empty( cCodigoDocumento )
      msgStop( "El código del documento esta vacio" )
      RETURN ( nil )
   end

   if !lMemoDocumento( cCodigoDocumento, D():Documentos( nView ) )
      msgStop( "El formato " + cCodigoDocumento + " no se encuentra, o no es un formato visual." )
      RETURN ( nil )
   end

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( D():Documentos( nView ) )->( Select() ), "mReport" ) } )





   DataReport( oFr )





   if !empty( ( D():Documentos( nView ) )->mReport )

      oFr:LoadFromBlob( ( D():Documentos( nView ) )->( Select() ), "mReport")





      VariableReport( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
            oFr:DoExport(     "PDFExport" )

         case nDevice == 6

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatOut() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .F. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

RETURN ( cFilePdf )



Function nTotFactura( cNumRec, cFacCliT, cFacCliL, cDbfIva, cDbfDiv, cFacCliP, cAntCliT )

   If( cNumRec == nil, cNumRec := ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac, ) ;
   If( cFacCliT == nil, cFacCliT := D():FacturasClientes( nView ), ) ;
   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( cDbfIva == nil, cDbfIva := D():TiposIva( nView ), ) ;
   If( cDbfDiv == nil, cDbfDiv := D():Divisas( nView ), ) ;
   If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cAntCliT == nil, cAntCliT := D():AnticiposClientes( nView ), ) ;

RETURN ( nTotFacCli( cNumRec, cFacCliT, cFacCliL, cDbfIva, cDbfDiv, cFacCliP, , , .F. ) )



Function nTotCobros( cNumRec, cFacCliT, cFacCliL, cDbfIva, cDbfDiv, cFacCliP, cAntCliT )

   local sTotCobros

   If( cNumRec == nil, cNumRec := ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac, ) ;
   If( cFacCliT == nil, cFacCliT := D():FacturasClientes( nView ), ) ;
   If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
   If( cDbfIva == nil, cDbfIva := D():TiposIva( nView ), ) ;
   If( cDbfDiv == nil, cDbfDiv := D():Divisas( nView ), ) ;
   If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cAntCliT == nil, cAntCliT := D():AnticiposClientes( nView ), ) ;

   sTotCobros        := sTotFacCli( cNumRec, cFacCliT, cFacCliL, cDbfIva, cDbfDiv, cFacCliP, cAntCliT )

RETURN ( sTotCobros:nTotalCobrado )



function nTotRectificativa( cNumRec, cFacRecT, cFacRecL, cDbfIva, cDbfDiv )

   If( cNumRec == nil, cNumRec := ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac, ) ;
   If( cFacRecT == nil, cFacRecT := D():FacturasRectificativas( nView ), ) ;
   If( cFacRecL == nil, cFacRecL := D():FacturasRectificativasLineas( nView ), ) ;
   If( cDbfIva == nil, cDbfIva := D():TiposIva( nView ), ) ;
   If( cDbfDiv == nil, cDbfDiv := D():Divisas( nView ), ) ;

RETURN ( nTotFacRec( cNumRec, cFacRecT, cFacRecL, cDbfIva, cDbfDiv, nil, nil, .F. ) )



function nTotRecibo( cNumRec, cFacCliP, cDiv )

   local hStatus
   local nTotRec     := 0

   If( cNumRec == nil, cNumRec := ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) + ( D():FacturasClientesCobros( nView ) )->cTipRec, ) ;
   If( cDiv == nil, cDiv := D():Divisas( nView ), ) ;

   hStatus           := hGetStatus( cFacCliP )

   if hSeekInOrd( { "Value" => cNumRec, "Order" => "nNumFac", "Alias" => cFacCliP } )
      nTotRec        := nTotRecCli( cFacCliP, cDiv )
   end

   hSetStatus( hStatus )

RETURN ( nTotRec )






Function rxRecCli( cPath, cDriver )

   local cFacCliT
   local dbfFacCliG

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   mkRecCli( cPath, nil, .F. )

   fEraseIndex( cPath + "FacCliP.Cdx", cDriver )
   fEraseIndex( cPath + "FacCliG.Cdx", cDriver )

   dbUseArea( .T., cDriver, cPath + "FACCLIP.DBF", cCheckArea( "FACCLIP", @cFacCliT ), .F. )
   if !( cFacCliT )->( neterr() )

      ( cFacCliT )->( __dbPack() )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "nNumFac", "cSerie + str( nNumFac ) + cSufFac + str( nNumRec ) + cTipRec", {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumRec ) + Field->cTipRec } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cCodCli", "cCodCli + cSerie + str( nNumFac ) + cSufFac + str( nNumRec ) + cTipRec", {|| Field->cCodCli + Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumRec ) + Field->cTipRec } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cNomCli", "cNomCli + cSerie + str( nNumFac ) + cSufFac + str( nNumRec ) + cTipRec", {|| Field->cNomCli + Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumRec ) + Field->cTipRec } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "dPreCob", "dPreCob", {|| Field->dPreCob } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "dFecVto", "dFecVto", {|| Field->dFecVto } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "dEntrada", "dEntrada", {|| Field->dEntrada } ) )



      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }, , , , , , , , , , , .T. ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "nImporte", "nImporte", {|| Field->nImporte }, ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cCodPgo", "cCodPgo", {|| Field->cCodPgo } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cCodAge", "cCodAge", {|| Field->cCodAge } ) )



      ( cFacCliT )->( ordCondSet("!Deleted() .and. !Field->lCobrado", {|| !Deleted() .AND. !Field->lCobrado } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "lCodCli", "cCodCli", {|| Field->cCodCli } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "nNumRem", "str( nNumRem ) + cSufRem", {|| str( Field->nNumRem ) + Field->cSufRem } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cCtaRem", "cCtaRem", {|| Field->cCtaRem }, ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "nNumCob", "str( nNumCob ) + cSufCob", {|| str( Field->nNumCob ) + Field->cSufCob } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cTurRec", "cTurRec + cSufFac + cCodCaj", {|| Field->cTurRec + Field->cSufFac + Field->cCodCaj } ) )



      ( cFacCliT )->( ordCondSet("!Deleted() .and. empty( cTipRec )", {|| !Deleted() .AND.  empty( Field->cTipRec ) } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "fNumFac", "cSerie + str( nNumFac ) + cSufFac + str( nNumRec )", {|| Field->CSERIE + str( Field->NNUMFAC ) + Field->CSUFFAC + str( Field->NNUMREC ) } ) )



      ( cFacCliT )->( ordCondSet("!Deleted() .and. Field->cTipRec == 'R'", {|| !Deleted() .AND. Field->cTipRec == "R" } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "rNumFac", "cSerie + str( nNumFac ) + cSufFac + str( nNumRec )", {|| Field->CSERIE + str( Field->NNUMFAC ) + Field->CSUFFAC + str( Field->NNUMREC ) } ) )



      ( cFacCliT )->( ordCondSet("!Deleted() .and. Field->cTipRec == 'L'", {|| !Deleted() .AND. Field->cTipRec == "L"} ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "lNumFac", "cSerie + str( nNumFac ) + cSufFac + str( nNumRec )", {|| Field->CSERIE + str( Field->NNUMFAC ) + Field->CSUFFAC + str( Field->NNUMREC ) } ) )



      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cTipRec", "cTipRec + cSerie + str( nNumFac ) + cSufFac + str( nNumRec )", {|| Field->cTipRec +  Field->cSerie + str( Field->nNumFac ) + Field->cSufFac + str( Field->nNumRec ) } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cRecDev", "cRecDev", {|| Field->CRECDEV } ) )

      ( cFacCliT )->( ordCondSet("!Deleted() .and. Field->lCobrado", {|| !Deleted() .AND. Field->lCobrado } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "lCtaBnc", "Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp", {|| Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "cNumMtr", "Field->cNumMtr", {|| Field->cNumMtr } ) )

      ( cFacCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( cFacCliT )->( ordCreate( cPath + "FacCliP.Cdx", "iNumFac", "'18' + cSerie + str( nNumFac ) + space( 1 ) + cSufFac + str( nNumRec )", {|| "18" + Field->cSerie + str( Field->nNumFac ) + space( 1 ) + Field->cSufFac + str( Field->nNumRec ) } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() }, , , , , , , , , .T. ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "dFecDes", "dPreCob", {|| Field->dPreCob } ) )

      ( cFacCliT )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( cFacCliT )->( ordCreate( cPath + "FACCLIP.CDX", "parUuid", "parUuid", {|| Field->parUuid } ) )

      ( cFacCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de recibos de clientes" )

   end



   dbUseArea( .T., cDriver, cPath + "FacCliG.Dbf", cCheckArea( "FACCLIG", @dbfFacCliG ), .F. )

   if !( dbfFacCliG )->( neterr() )

      ( dbfFacCliG )->( __dbPack() )

      ( dbfFacCliG )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfFacCliG )->( ordCreate( cPath + "FacCliG.Cdx", "cNumMtr", "cNumMtr", {|| Field->cNumMtr } ) )

      ( dbfFacCliG )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfFacCliG )->( ordCreate( cPath + "FacCliG.Cdx", "cNumRec", "cNumRec", {|| Field->cNumRec } ) )

      ( dbfFacCliG )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfFacCliG )->( ordCreate( cPath + "FacCliG.Cdx", "cNumRel", "cNumMtr + cNumRec", {|| Field->cNumMtr + Field->cNumRec } ) )

      ( dbfFacCliG )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de grupos de recibos de clientes" )

   end

RETURN NIL






FUNCTION mkRecCli( cPath, oMeter, lReindex )

   If( lReindex == nil, lReindex := .T., ) ;

   if oMeter <> nil
        oMeter:cText    := "Generando Bases"
        sysrefresh()
   end

   if !lExistTable( cPath + "FacCliP.Dbf", cLocalDriver() )
      dbCreate( cPath + "FacCliP.Dbf", aSqlstruct( aItmRecCli() ), cLocalDriver() )
   end

   if !lExistTable( cPath + "FacCliG.Dbf", cLocalDriver() )
      dbCreate( cPath + "FacCliG.Dbf", aSqlstruct( aItmGruposRecibos() ), cLocalDriver() )
   end

   if lReindex
      rxRecCli( cPath, cLocalDriver() )
   end

RETURN NIL



FUNCTION aItmRecCli()

   local aBasRecCli  := {}

   aAdd( aBasRecCli, {"cSerie"      ,"C",  1, 0, "Serie de factura",                                     "Serie",                "", "( cDbfRec )", {|| "A" } } )
   aAdd( aBasRecCli, {"nNumFac"     ,"N",  9, 0, "Número de factura",                                    "Numero",               "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cSufFac"     ,"C",  2, 0, "Sufijo de factura",                                    "Sufijo",               "", "( cDbfRec )", {|| RetSufEmp() } } )
   aAdd( aBasRecCli, {"nNumRec"     ,"N",  2, 0, "Número del recibo",                                    "NumeroRecibo",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cGuid"       ,"C", 40, 0, "Guid de recibo",                                       "GUID",                 "", "( cDbfRec )", {|| win_uuidcreatestring() } } )
   aAdd( aBasRecCli, {"cTipRec"     ,"C",  1, 0, "Tipo de recibo",                                       "TipoRecibo",           "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCodPgo"     ,"C",  2, 0, "Código de forma de pago",                              "Pago",                 "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCodCaj"     ,"C",  3, 0, "Código de caja",                                       "Caja",                 "", "( cDbfRec )", {|| Application():CodigoCaja() } } )
   aAdd( aBasRecCli, {"cTurRec"     ,"C",  6, 0, "Sesión del recibo",                                    "Turno",                "", "( cDbfRec )", {|| cCurSesion( nil, .F.) } } )
   aAdd( aBasRecCli, {"cCodCli"     ,"C", 12, 0, "Código de cliente",                                    "Cliente",              "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cNomCli"     ,"C", 80, 0, "Nombre de cliente",                                    "NombreCliente",        "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"dEntrada"    ,"D",  8, 0, "Fecha de cobro",                                       "FechaCobro",           "", "( cDbfRec )", {|| Date() } } )
   aAdd( aBasRecCli, {"nImporte"    ,"N", 16, 6, "Importe",                                              "TotalDocumento",       "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cDescrip"    ,"C",100, 0, "Concepto del pago",                                    "Concepto",             "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"dPreCob"     ,"D",  8, 0, "Fecha de expedición",                                  "FechaExpedicion",      "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cPgdoPor"    ,"C", 50, 0, "Pagado por",                                           "PagadoPor",            "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cDocPgo"     ,"C", 50, 0, "Documento de pago",                                    "DocumentoPago",        "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lCobrado"    ,"L",  1, 0, "Lógico de cobrado",                                    "LogicoCobrado",        "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cDivPgo"     ,"C",  3, 0, "Código de la divisa",                                  "Divisa",               "", "( cDbfRec )", {|| cDivEmp() } } )
   aAdd( aBasRecCli, {"nVdvPgo"     ,"N", 10, 6, "Cambio de la divisa",                                  "ValorDivisa",          "", "( cDbfRec )", {|| nChgDiv() } } )
   aAdd( aBasRecCli, {"lConPgo"     ,"L",  1, 0, "Lógico de contabilizado",                              "Contabilizada",        "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cConGuid"    ,"C", 40, 0, "Guid de apunte contable",                              "GuidApunteContable",   "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCtaRec"     ,"C", 12, 0, "Cuenta de contabilidad",                               "CuentaContable",       "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"nImpEur"     ,"N", 16, 6, "Importe del pago en Euros",                            "ImporteEuros",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lImpEur"     ,"L",  1, 0, "Lógico cobrar en Euros",                               "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"nNumRem"     ,"N",  9, 0, "Número de la remesas",                                 "NumeroRemesa",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cSufRem"     ,"C",  2, 0, "Sufijo de remesas",                                    "SufijoRemesa",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCtaRem"     ,"C",  3, 0, "Cuenta de remesa",                                     "CuentaRemesa",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lRecImp"     ,"L",  1, 0, "Lógico ya impreso",                                    "LogicoImpreso",        "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lRecDto"     ,"L",  1, 0, "Lógico descontado",                                    "LogicoDescontado",     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"dFecDto"     ,"D",  8, 0, "Fecha del descuento",                                  "FechaDescuento",       "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"dFecVto"     ,"D",  8, 0, "Fecha de vencimiento",                                 "FechaVencimiento",     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCodAge"     ,"C",  3, 0, "Código del agente",                                    "Agente",               "", "( cDbfRec )", {|| AccessCode():cAgente } } )
   aAdd( aBasRecCli, {"nNumCob"     ,"N",  9, 0, "Número de cobro",                                      "NumeroCobro",          "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cSufCob"     ,"C",  2, 0, "Sufijo del cobro",                                     "SufijoCobro",          "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"nImpCob"     ,"N", 16, 6, "Importe del cobro",                                    "ImporteCobro",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"nImpGas"     ,"N", 16, 6, "Importe de gastos",                                    "ImporteGastos",        "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCtaGas"     ,"C", 12, 0, "Subcuenta de gastos",                                  "SubcuentaGastos",      "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lEsperaDoc"  ,"L",  1, 0, "Lógico a la espera de documentación",                  "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lCloPgo"     ,"L",  1, 0, "Lógico de turno cerrado",                              "DocumentoCerrado",     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"dFecImp"     ,"D",  8, 0, "Última fecha de impresión" ,                           "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cHorImp"     ,"C",  5, 0, "Hora de la última impresión" ,                         "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lNotArqueo"  ,"L",  1, 0, "Lógico de no incluir en arqueo",                       "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCodBnc"     ,"C",  4, 0, "Código del banco",                                     "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"dFecCre"     ,"D",  8, 0, "Fecha de creación del registro" ,                      "FechaCreacion",        "", "( cDbfRec )", {|| Date() } } )
   aAdd( aBasRecCli, {"cHorCre"     ,"C",  5, 0, "Hora de creación del registro" ,                       "HoraCreacion",         "", "( cDbfRec )", {|| Time() } } )
   aAdd( aBasRecCli, {"cCodUsr"     ,"C",  3, 0, "Código del usuario" ,                                  "Usuario",              "", "( cDbfRec )", {|| Auth():Codigo() } } )
   aAdd( aBasRecCli, {"lDevuelto"   ,"L",  1, 0, "Lógico recibo devuelto" ,                              "LogicoDevuelto",       "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"dFecDev"     ,"D",  8, 0, "Fecha devolución" ,                                    "FechaDevolucion",      "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cMotDev"     ,"C",250, 0, "Motivo devolución" ,                                   "MotivoDevolucion",     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cRecDev"     ,"C", 14, 0, "Recibo de procedencia",                                "ReciboProcedencia",    "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lSndDoc"     ,"L",  1, 0, "Lógico para envio",                                    "Envio",                "", "( cDbfRec )", {|| .T. } } )
   aAdd( aBasRecCli, {"cBncEmp"     ,"C", 50, 0, "Banco de la empresa para el recibo",                   "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cBncCli"     ,"C", 50, 0, "Banco del cliente para el recibo",                     "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cEPaisIBAN"  ,"C",  2, 0, "País IBAN de la empresa para el recibo",               "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cECtrlIBAN"  ,"C",  2, 0, "Dígito de control IBAN de la empresa para el recibo",  "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cEntEmp"     ,"C",  4, 0, "Entidad de la cuenta de la empresa",                   "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cSucEmp"     ,"C",  4, 0, "Sucursal de la cuenta de la empresa",                  "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cDigEmp"     ,"C",  2, 0, "Dígito de control de la cuenta de la empresa",         "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCtaEmp"     ,"C", 10, 0, "Cuenta bancaria de la empresa",                        "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cPaisIBAN"   ,"C",  2, 0, "País IBAN del cliente para el recibo" ,                "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCtrlIBAN"   ,"C",  2, 0, "Dígito de control IBAN del cliente para el recibo" ,   "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cEntCli"     ,"C",  4, 0, "Entidad de la cuenta del cliente",                     "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cSucCli"     ,"C",  4, 0, "Sucursal de la cuenta del cliente",                    "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cDigCli"     ,"C",  2, 0, "Dígito de control de la cuenta del cliente",           "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCtaCli"     ,"C", 10, 0, "Cuenta bancaria del cliente",                          "",                     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lRemesa"     ,"L",  1, 0, "Lógico de incluido en una remesa",                     "IncluidoEnRemesa",     "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cNumMtr"     ,"C", 15, 0, "Número del recibo matriz",                             "NumeroMatriz",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"lPasado"     ,"L",  1, 0, "Lógico pasado",                                        "LogicoPasado",         "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"cCtrCoste"   ,"C",  9, 0, "Código del centro de coste",                           "CentroCoste",          "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"nImpRel"     ,"N", 16, 6, "Importe relacionados",                                 "ImporteRelacionados",  "", "( cDbfRec )", nil } )
   aAdd( aBasRecCli, {"parUuid"     ,"C", 40, 0, "Uuid de la cabecera",                                  "ParUuid",              "", "( cDbfRec )", nil } )

RETURN ( aBasRecCli )



FUNCTION aItmGruposRecibos()

   local aBasRecCli  := {}

   aAdd( aBasRecCli, {"cNumMtr"     ,"C", 14, 0, "Número de recibo matriz",         "",                "", "( cDbfRec )" } )
   aAdd( aBasRecCli, {"cNumRec"     ,"C", 14, 0, "Número de recibo relacionado",    "",                "", "( cDbfRec )" } )

RETURN ( aBasRecCli )






FUNCTION generatePagosFacturaCliente( Id, nView, nMode )

   sysrefresh()

RETURN ( genPgoFacCli( Id, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), D():AnticiposClientes( nView ), D():Clientes( nView ), D():FormasPago( nView ), D():Divisas( nView ), D():TiposIva( nView ), nMode, .F. ) )







FUNCTION genPgoFacCli( cNumFac, cFacCliT, cFacCliL, cFacCliP, cAntCliT, cClient, cFPago, cDiv, cIva, nMode, lMessage )

   local cCodPgo
   local cSerFac
   local nNumFac
   local cSufFac
   local cDivFac
   local nVdvFac
   local dFecFac
   local cCodCli
   local cNomCli
   local cCodAge
   local cCodCaj
   local cCodUsr
   local cCtaRem     := ""
   local nCobro      := 0
   local nTotal      := 0
   local nTotCob     := 0
   local nDec        := 0
   local nInc        := 0
   local n           := 0
   local nTotAcu     := 0
   local nPlazos     := 1
   local nRecCli
   local cPaisIBAN
   local cCtrlIBAN
   local cEntidad
   local cSucursal
   local cControl
   local cCuenta
   local cBanco
   local lAlert
   local cUuid

   If( nMode == nil, nMode := 1, ) ;
   If( lMessage == nil, lMessage := .T., ) ;

   if !empty( nView )
      If( cFacCliP == nil, cFacCliP := D():FacturasClientesCobros( nView ), ) ;
      If( cFPago == nil, cFPago := D():FormasPago( nView ), ) ;
      If( cDiv == nil, cDiv := D():Divisas( nView ), ) ;
      If( cFacCliL == nil, cFacCliL := D():FacturasClientesLineas( nView ), ) ;
      If( cFacCliT == nil, cFacCliT := D():FacturasClientes( nView ), ) ;
   end

   lAlert               := ( nMode == 1 )

   cSerFac              := ( cFacCliT )->cSerie
   nNumFac              := ( cFacCliT )->nNumFac
   cSufFac              := ( cFacCliT )->cSufFac
   cDivFac              := ( cFacCliT )->cDivFac
   nVdvFac              := ( cFacCliT )->nVdvFac
   dFecFac              := ( cFacCliT )->dFecFac
   cCodPgo              := ( cFacCliT )->cCodPago
   cCodCli              := ( cFacCliT )->cCodCli
   cNomCli              := ( cFacCliT )->cNomCli
   cCodAge              := ( cFacCliT )->cCodAge
   cCodCaj              := ( cFacCliT )->cCodCaj
   cCodUsr              := ( cFacCliT )->cCodUsr
   cBanco               := ( cFacCliT )->cBanco
   cPaisIBAN            := ( cFacCliT )->cPaisIBAN
   cCtrlIBAN            := ( cFacCliT )->cCtrlIBAN
   cEntidad             := ( cFacCliT )->cEntBnc
   cSucursal            := ( cFacCliT )->cSucBnc
   cControl             := ( cFacCliT )->cDigBnc
   cCuenta              := ( cFacCliT )->cCtaBnc
   cUuid                := ( cFacCliT )->cGuid





   nRecCli           := ( cClient )->( Recno() )

   if ( cClient )->( dbSeek( cCodCli ) )
      cCtaRem        := ( cClient )->cCodRem
   end





   nDec              := nRouDiv( cDivFac, cDiv )





   nTotal            := nTotFacCli( cNumFac, cFacCliT, cFacCliL, cIva, cDiv, cFacCliP, nil, nil, .F. )

   nTotCob           := nTotalRecibosGeneradosFacturasCliente( cNumFac, cFacCliT, cFacCliP, cIva, cDiv )





   if lDiferencia( nTotal, nTotCob, 0.001 )





      if ( cFacCliP )->( dbSeek( cSerFac + str( nNumFac ) + cSufFac ) )

         while cSerFac + str( nNumFac ) + cSufFac == ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac

            if !( cFacCliP )->lCobrado .AND. !( cFacCliP )->lDevuelto .AND. empty( ( cFacCliP )->cTipRec ) .AND. dbLock( cFacCliP )
               ( cFacCliP )->( dbDelete() )
               ( cFacCliP )->( dbUnLock() )
            else
               nInc  := ( cFacCliP )->nNumRec
            end

            ( cFacCliP )->( dbSkip() )

         end

      end





      nTotal         -= nTotalRecibosPagadosFacturasCliente( cSerFac + str( nNumFac ) + cSufFac, cFacCliT, cFacCliP, cIva, cDiv )





      if ( dbSeekInOrd( cCodPgo, "cCodPago", cFPago ) )

         nTotAcu        := nTotal
         nPlazos        := Max( ( cFPago )->nPlazos, 1 )

         for n := 1 to nPlazos

            if n <> nPlazos
               nTotAcu  -= Round( nTotal / nPlazos, nDec )
            end

            ( cFacCliP )->( dbAppend() )

            ( cFacCliP )->cTurRec       := cCurSesion()
            ( cFacCliP )->cSerie        := cSerFac
            ( cFacCliP )->nNumFac       := nNumFac
            ( cFacCliP )->cSufFac       := cSufFac
            ( cFacCliP )->ParUuid       := cUuid
            ( cFacCliP )->nNumRec       := ++nInc
            ( cFacCliP )->cCodCaj       := cCodCaj
            ( cFacCliP )->cCodUsr       := cCodUsr
            ( cFacCliP )->cCodPgo       := cCodPgo
            ( cFacCliP )->cCodCli       := cCodCli
            ( cFacCliP )->cNomCli       := cNomCli

            if ( cFPago )->lUtlBnc
               ( cFacCliP )->cPaisIBAN  := ( cFPago )->cPaisIBAN
               ( cFacCliP )->cCtrlIBAN  := ( cFPago )->cCtrlIBAN
               ( cFacCliP )->cBncEmp    := ( cFPago )->cBanco
               ( cFacCliP )->cEntEmp    := ( cFPago )->cEntBnc
               ( cFacCliP )->cSucEmp    := ( cFPago )->cSucBnc
               ( cFacCliP )->cDigEmp    := ( cFPago )->cDigBnc
               ( cFacCliP )->cCtaEmp    := ( cFPago )->cCtaBnc
            end

            ( cFacCliP )->cPaisIBAN     := cPaisIBAN
            ( cFacCliP )->cCtrlIBAN     := cCtrlIBAN
            ( cFacCliP )->cBncCli       := cBanco
            ( cFacCliP )->cEntCli       := cEntidad
            ( cFacCliP )->cSucCli       := cSucursal
            ( cFacCliP )->cDigCli       := cControl
            ( cFacCliP )->cCtaCli       := cCuenta

            ( cFacCliP )->nImporte      := if( n <> nPlazos, Round( nTotal / nPlazos, nDec ), Round( nTotAcu, nDec ) )
            ( cFacCliP )->nImpCob       := if( n <> nPlazos, Round( nTotal / nPlazos, nDec ), Round( nTotAcu, nDec ) )
            ( cFacCliP )->cDescrip      := "Recibo nº" + AllTrim( str( nInc ) ) + " de factura " + cSerFac  + "/" + allTrim( str( nNumFac ) ) + "/" + cSufFac

            ( cFacCliP )->cDivPgo       := cDivFac
            ( cFacCliP )->nVdvPgo       := nVdvFac
            ( cFacCliP )->dPreCob       := dFecFac
            ( cFacCliP )->dFecVto       := dNextDayPago( dFecFac, n, nPlazos, cFPago, cClient )

            ( cFacCliP )->cCtaRec       := ( cFPago )->cCtaCobro
            ( cFacCliP )->cCtaGas       := ( cFPago )->cCtaGas

            ( cFacCliP )->cCtaRem       := cCtaRem
            ( cFacCliP )->cCodAge       := cCodAge
            ( cFacCliP )->lEsperaDoc    := ( cFPago )->lEsperaDoc
            ( cFacCliP )->lSndDoc       := .T.

            if !empty( ( cFacCliT )->cCtrCoste )
                ( cFacCliP )->cCtrCoste := ( cFacCliT )->cCtrCoste
            endif

            if !( "TABLET" $ appParamsMain() )

               if ( cFPago )->nCobRec == 1 .AND. nMode == 1
                  ( cFacCliP )->cTurRec    := cCurSesion()
                  ( cFacCliP )->lCobrado   := .T.
                  ( cFacCliP )->dEntrada   := dNextDayPago( dFecFac, n, nPlazos, cFPago, cClient )
               end

            else

               if ( cFPago )->nCobRec == 1
                  ( cFacCliP )->cTurRec    := cCurSesion()
                  ( cFacCliP )->lCobrado   := .T.
                  ( cFacCliP )->dEntrada   := dNextDayPago( dFecFac, n, nPlazos, cFPago, cClient )
               end

            end

            ( cFacCliP )->dFecCre          := GetSysDate()
            ( cFacCliP )->cHorCre          := Substr( Time(), 1, 5 )

            lAlert                         := .F.

            ( cFacCliP )->( dbunlock() )



            if ConfiguracionesEmpresaModel():getLogic( "sincronizar_vencimientos", .F. )
               insertVencimientoContaplus( cFacCliP, cClient )
            end

         next

      else

         if lMessage
            MsgStop( "Forma de pago " + cCodPgo + " no encontrada, generando recibos" )
         end

      end

   end

   ( cClient )->( dbGoTo( nRecCli ) )

   if ( lAlert .AND. lMessage )
      msgWait( "Factura " + cSerFac  + "/" + allTrim( str( nNumFac ) ) + "/" + cSufFac + " no se generaron recibos.", "Atención", 1 )
   end

RETURN NIL



FUNCTION dNexDay( dFecPgo, dbfCli )

   local nDay
   local nMon
   local nYea

   if empty( dbfCli )
      RETURN ( dFecPgo )
   end

   nDay        := Day( dFecPgo )
   nYea        := Year( dFecPgo )
   nMon        := Month( dFecPgo )

   if ( dbfCli )->DiaPago <> 0





      if nDay > ( dbfCli )->DiaPago

         if nDay > ( dbfCli )->DiaPago2

            if nMon == 12
               nMon := 1
               nYea++
            else
               nMon++
            end

            nDay := ( dbfCli )->DiaPago

         else

            nDay := ( dbfCli )->DiaPago2

         end

      else

         nDay := ( dbfCli )->DiaPago

      end

   end





   if ( ( dbfCli )->nMesVac - 1 ) == nMon

      if nMon == 12
         nMon := 1
         nYea++
      else
         nMon++
      end

   end

RETURN ( Ctod( str( nDay, 2 ) + "/" + str( nMon, 2 ) + "/" + str( nYea, 4 ) ) )



Function ValCobro( aGet, aTmp )

   if aTmp[ 36 ] <= aTmp[ 13 ]

      if ( aTmp[ 36 ] <> 0 ) .AND. ( aTmp[ 13 ] <> aTmp[ 36 ] )
         aGet[ 37 ]:cText( aTmp[ 13 ] - aTmp[ 36 ] )
      end

      RETURN .T.

   else

      msgStop( "El importe del cobro excede al importe del recibo" )

   end

RETURN .F.



Function ValCheck( aGet, aTmp )

   if !aTmp[ 18 ]

      if lShowClienteRiesgoAlcanzado( aTmp[ 10 ] )
         aTmp[ 18 ]    := !aTmp[ 18 ]
         aGet[ 18 ]:Refresh()
         RETURN .F.
      end

      aGet[ 12 ]:cText( Ctod( "" ) )

   else

      aGet[ 12 ]:cText( GetSysDate() )
      aGet[ 9  ]:cText( cCurSesion( nil, .F. ) )
      aGet[ 8  ]:cText( Application():CodigoCaja() )
      aGet[ 8  ]:lValid()

      if aTmp[ 36 ] == 0
         aGet[ 36 ]:cText( aTmp[ 13 ] )
      end

   end

RETURN .T.



Function lChangeDevolucion( aGet, aTmp, lIntro )

   If( lIntro == nil, lIntro := .F., ) ;

   if aTmp[ 48 ]

      if !lIntro
         aGet[ 49 ]:cText( GetSysDate() )
      end

      aGet[ 15    ]:HardDisable()
      aGet[ 32    ]:HardDisable()
      aGet[ 13   ]:HardDisable()
      aGet[ 36    ]:HardDisable()
      aGet[ 18   ]:HardDisable()
      aGet[ 12   ]:HardDisable()
      aGet[ 33    ]:HardDisable()
      aGet[ 7    ]:HardDisable()
      aGet[ 14   ]:HardDisable()
      aGet[ 16   ]:HardDisable()
      aGet[ 17    ]:HardDisable()
      aGet[ 37    ]:HardDisable()
      aGet[ 23    ]:HardDisable()
      aGet[ 28    ]:HardDisable()
      aGet[ 8    ]:HardDisable()

      aGet[ 29    ]:HardDisable()
      aGet[ 41    ]:HardDisable()
      aGet[ 42    ]:HardDisable()
      aGet[ 39 ]:HardDisable()
      aGet[ 9    ]:HardDisable()
      aGet[ 53    ]:HardDisable()
      aGet[ 54    ]:HardDisable()
      aGet[ 55 ]:HardDisable()
      aGet[ 56 ]:HardDisable()
      aGet[ 57    ]:HardDisable()
      aGet[ 58    ]:HardDisable()
      aGet[ 59    ]:HardDisable()
      aGet[ 60    ]:HardDisable()
      aGet[ 61  ]:HardDisable()
      aGet[ 62  ]:HardDisable()
      aGet[ 63    ]:HardDisable()
      aGet[ 64    ]:HardDisable()
      aGet[ 65    ]:HardDisable()
      aGet[ 66    ]:HardDisable()

   else

      if !lIntro
         aGet[ 49 ]:cText( Ctod( "" ) )
         aGet[ 50 ]:cText( space( 250 ) )
      end

      aGet[ 15    ]:HardEnable()
      aGet[ 32    ]:HardEnable()
      aGet[ 13   ]:HardEnable()
      aGet[ 36    ]:HardEnable()
      aGet[ 18   ]:HardEnable()
      aGet[ 12   ]:HardEnable()
      aGet[ 33    ]:HardEnable()
      aGet[ 7    ]:HardEnable()
      aGet[ 14   ]:HardEnable()
      aGet[ 16   ]:HardEnable()
      aGet[ 17    ]:HardEnable()
      aGet[ 37    ]:HardEnable()
      aGet[ 23    ]:HardEnable()
      aGet[ 28    ]:HardEnable()
      aGet[ 8    ]:HardEnable()

      aGet[ 29    ]:HardEnable()
      aGet[ 41    ]:HardEnable()
      aGet[ 42    ]:HardEnable()
      aGet[ 39 ]:HardEnable()
      aGet[ 9    ]:HardEnable()
      aGet[ 53    ]:HardEnable()
      aGet[ 54    ]:HardEnable()
      aGet[ 57    ]:HardEnable()
      aGet[ 58    ]:HardEnable()
      aGet[ 59    ]:HardEnable()
      aGet[ 60    ]:HardEnable()
      aGet[ 63    ]:HardEnable()
      aGet[ 64    ]:HardEnable()
      aGet[ 65    ]:HardEnable()
      aGet[ 66    ]:HardEnable()

   end

   if empty( aTmp[ 51 ] )
      aGet[ 51 ]:Disable()
   else
      aGet[ 51 ]:Enable()
   end

RETURN .T.



Function DelCobCli( oBrw, cFacCliP )

   if ( cFacCliP )->lCloPgo .AND. !oUser():lAdministrador()
      MsgStop( "Solo pueden eliminar los recibos cerrados los administradores." )
      RETURN .F.
   end

   if !empty( ( cFacCliP )->nNumRem ) .AND. !oUser():lAdministrador()
      msgStop( "Este tiket pertenece a una remesa de clientes.", "Imposible eliminar" )
      RETURN .F.
   end

   if !empty( ( cFacCliP )->nNumCob ) .AND. !oUser():lAdministrador()
      msgStop( "Este tiket pertenece a una remesa de cobros.", "Imposible eliminar" )
      RETURN .F.
   end

   if ( cFacCliP )->lCobrado .AND. !oUser():lAdministrador()
      msgStop( "Este tiket esta cobrado.", "Imposible eliminar" )
      RETURN .F.
   end

   if ( cFacCliP )->lRecDto .AND. !oUser():lAdministrador()
      msgStop( "Este tiket esta descontado.", "Imposible eliminar" )
      RETURN .F.
   end

   if !empty( ( cFacCliP )->cNumMtr )
      msgStop( "Este recibo está compensado", "Imposible eliminar" )
      RETURN .F.
   end







   WinDelRec( oBrw, cFacCliP, {|| QuiRecCli( cFacCliP ) } )

RETURN .T.



Function QuiRecCli( cFacCliP )

   local cNumRec  := ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac + str( ( cFacCliP )->nNumRec ) + ( cFacCliP )->cTipRec
   local nRec     := ( cFacCliP )->( Recno() )
   local nOrdAnt  := ( cFacCliP )->( OrdSetFocus( "cNumMtr" ) )
   local aRecibos := {}
   local cRecibo

   if ( cFacCliP )->( dbSeek( cNumRec ) )

      while ( cFacCliP )->cNumMtr == cNumRec .AND. !( cFacCliP )->( Eof() )

         aAdd( aRecibos, ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac + str( ( cFacCliP )->nNumRec ) )

         ( cFacCliP )->( dbSkip() )

      end

   end

   ( cFacCliP )->( OrdSetFocus( "nNumFac" ) )

   for each cRecibo in aRecibos


      if ( cFacCliP )->( dbSeek( cRecibo ) ) .AND. dbLock( cFacCliP )

         ( cFacCliP )->lCobrado  := .F.
         ( cFacCliP )->dEntrada  := cTod( "" )
         ( cFacCliP )->cNumMtr   := ""
         ( cFacCliP )->( dbUnLock() )

      end

   next

   ( cFacCliP )->( OrdSetFocus( nOrdAnt ) )
   ( cFacCliP )->( dbGoTo( nRec ) )

RETURN .T.



function nNewReciboCliente( cNumFac, cTipRec, cFacCliP )

   local nCon
   local nRec
   local nOrd
   local cFilter     := ""

   If( cTipRec == nil, cTipRec := space( 1 ), ) ;

   nCon              := 1
   nRec              := ( cFacCliP )->( Recno() )
   nOrd              := ( cFacCliP )->( OrdSetFocus( "nNumFac" ) )




   ( cFacCliP )->( dbGoTop() )

   if ( cFacCliP )->( dbSeek( cNumFac ) )

      while ( cFacCliP )->cSerie + str( ( cFacCliP )->nNumFac ) + ( cFacCliP )->cSufFac == cNumFac .AND. !( cFacCliP )->( eof() )

         if ( cFacCliP )->cTipRec == cTipRec
            ++nCon
         end

         ( cFacCliP )->( dbSkip() )

      end

   end

   ( cFacCliP )->( OrdSetFocus( nOrd ) )
   ( cFacCliP )->( dbGoTo( nRec ) )








RETURN ( nCon )



STATIC FUNCTION YearComboBoxChange()

   if ( oWndBrw:oWndBar:cYearComboBox() <> "[Todos]" )
      oWndBrw:oWndBar:setYearComboBoxExpression( "Year( Field->dPreCob ) == " + oWndBrw:oWndBar:cYearComboBox() )
   else
      oWndBrw:oWndBar:setYearComboBoxExpression( "" )
   end

   oWndBrw:chgFilter()

RETURN nil



STATIC FUNCTION EndTrans( aTmp, aGet, cFacCliP, oBrw, oDlg, nMode, nSpecialMode )

   local nRec
   local nImp
   local nCon
   local aTabla
   local nOrdAnt
   local lImpNeg
   local nImpFld
   local nImpTmp
   local cNumFac
   local cNumRec
   local cNumRecTip
   local lDevuelto
   local lCobrado
   local dFechaCobro
   local cRecibo
   local cTipoRecibo
   local cSerie         := ""

   if empty( cFacCliP )
      cFacCliP          := D():FacturasClientesCobros( nView )
   end

   if nSpecialMode == 2

      if !lValidReciboLibre( aTmp )
         RETURN .F.
      end

      cSerie            := cNewSer( "nRecCli", D():Contadores( nView ) )

      aTmp[ 6 ]  := "L"
      aTmp[ 1  ]  := cSerie
      aTmp[ 2 ]  := nNewDoc( cSerie, cFacCliP, "nRecCli", , D():Contadores( nView ) )
      aTmp[ 3 ]  := RetSufEmp()
      aTmp[ 4 ]  := 1

   end

   cNumFac              := aTmp[ 1 ] + str( aTmp[ 2 ], 9 ) + aTmp[ 3 ]
   cNumRec              := aTmp[ 1 ] + str( aTmp[ 2 ], 9 ) + aTmp[ 3 ] + str( aTmp[ 4 ], 2 )
   cNumRecTip           := aTmp[ 1 ] + str( aTmp[ 2 ], 9 ) + aTmp[ 3 ] + str( aTmp[ 4 ], 2 ) + aTmp[ 6 ]
   lDevuelto            := aTmp[ 48 ]
   cTipoRecibo          := aTmp[ 6  ]
   lCobrado             := aTmp[ 18 ]
   dFechaCobro          := aTmp[ 12 ]
   lImpNeg              := ( cFacCliP )->nImporte < 0
   nImpFld              := abs( ( cFacCliP )->nImporte )
   nImpTmp              := abs( aTmp[ 13 ] )





   if !aGet[ 36 ]:lValid()
      RETURN .F.
   end












   if !lExisteTurno( aGet[ 9 ]:VarGet(), D():Turnos( nView ) )
      msgStop( "La sesión introducida no existe." )
      aGet[ 9 ]:SetFocus()
      RETURN nil
   end

   oDlg:Disable()





   if nSpecialMode <> 2

      if ( nImpFld <> nImpTmp )

         nRec                       := ( cFacCliP )->( Recno() )





         nImp                       := ( nImpFld - nImpTmp ) * if( lImpNeg, - 1 , 1 )





         nCon                       := nNewReciboCliente( aTmp[ 1 ] + str( aTmp[ 2 ] ) + aTmp[ 3 ], aTmp[ 6 ], cFacCliP )





         ( cFacCliP )->( dbAppend() )

         ( cFacCliP )->cTurRec    := cCurSesion()
         ( cFacCliP )->cTipRec    := aTmp[ 6 ]
         ( cFacCliP )->cSerie     := aTmp[ 1  ]
         ( cFacCliP )->nNumFac    := aTmp[ 2 ]
         ( cFacCliP )->cSufFac    := aTmp[ 3 ]
         ( cFacCliP )->nNumRec    := nCon
         ( cFacCliP )->cCodCaj    := aTmp[ 8 ]
         ( cFacCliP )->cCodCli    := aTmp[ 10 ]
         ( cFacCliP )->cNomCli    := aTmp[ 11 ]
         ( cFacCliP )->cCodAge    := aTmp[ 33 ]
         ( cFacCliP )->dEntrada   := Ctod( "" )
         ( cFacCliP )->nImporte   := nImp
         ( cFacCliP )->nImpCob    := nImp
         ( cFacCliP )->cDescrip   := "Recibo nº" + AllTrim( str( nCon ) ) + " de factura " + if( !empty( aTmp[ 6 ] ), "rectificativa ", "" ) + aTmp[ 1 ] + "/" + AllTrim( str( aTmp[ 2 ] ) ) + "/" + aTmp[ 3 ]
         ( cFacCliP )->dPreCob    := dFecFacCli( aTmp[ 1 ] + str( aTmp[ 2 ] ) + aTmp[ 3 ], D():FacturasClientes( nView ) )
         ( cFacCliP )->cPgdoPor   := ""
         ( cFacCliP )->lCobrado   := .F.
         ( cFacCliP )->cDivPgo    := aTmp[ 19 ]
         ( cFacCliP )->nVdvPgo    := aTmp[ 20 ]
         ( cFacCliP )->cCodPgo    := aTmp[ 7 ]
         ( cFacCliP )->lConPgo    := .F.
         ( cFacCliP )->lSndDoc    := .T.
         ( cFacCliP )->dFecCre    := GetSysDate()
         ( cFacCliP )->cHorCre    := Substr( Time(), 1, 5 )

         ( cFacCliP )->( dbUnLock() )

         ( cFacCliP )->( dbGoTo( nRec ) )

      end

   end





   if ( lOldDevuelto <> lDevuelto )
      aTmp[ 21 ]           := .F.
   end





   aTmp[ 45 ]    := GetSysDate()
   aTmp[ 46 ]    := Substr( Time(), 1, 5 )





   WinGather( aTmp, aGet, cFacCliP, oBrw, nMode )





   if nSpecialMode <> 2





      if lOldDevuelto <> lDevuelto

         nRec                             := ( cFacCliP )->( Recno() )

         if lDevuelto

            nOrdAnt                       := ( cFacCliP )->( OrdSetFocus( "nNumFac" ) )

            if ( cFacCliP )->( dbSeek( cNumRec ) )

               aTabla                     := dbScatter( cFacCliP )

               nCon                       := nNewReciboCliente( aTabla[ 1 ] + str( aTabla[ 2 ] ) + aTabla[ 3 ], aTabla[ 6 ], cFacCliP )

               ( cFacCliP )->( dbAppend() )
               ( cFacCliP )->cSerie     := aTabla[ 1  ]
               ( cFacCliP )->nNumFac    := aTabla[ 2 ]
               ( cFacCliP )->cSufFac    := aTabla[ 3 ]
               ( cFacCliP )->nNumRec    := nCon
               ( cFacCliP )->cTipRec    := aTabla[ 6 ]
               ( cFacCliP )->cCodPgo    := aTabla[ 7 ]
               ( cFacCliP )->cCodCaj    := aTabla[ 8 ]
               ( cFacCliP )->cTurRec    := cCurSesion()
               ( cFacCliP )->cCodCli    := aTabla[ 10 ]
               ( cFacCliP )->cNomCli    := aTabla[ 11 ]
               ( cFacCliP )->dEntrada   := Ctod( "" )
               ( cFacCliP )->nImporte   := aTabla[ 13 ]
               ( cFacCliP )->cDescrip   := "Recibo Nº" + alltrim( str( nCon ) ) + " generado de la devolución del recibo " + aTabla[ 1 ] + "/" + alltrim( str( aTabla[ 2 ] ) ) + "/" + aTabla[ 3 ] + " - " + AllTrim( str( aTabla[ 4 ] ) )
               ( cFacCliP )->dPreCob    := GetSysDate()
               ( cFacCliP )->lCobrado   := .F.
               ( cFacCliP )->cDivPgo    := aTabla[ 19 ]
               ( cFacCliP )->nVdvPgo    := aTabla[ 20 ]
               ( cFacCliP )->lConPgo    := .F.
               ( cFacCliP )->dFecVto    := GetSysDate()
               ( cFacCliP )->cCodAge    := aTabla[ 33 ]
               ( cFacCliP )->nImpGas    := aTabla[ 37 ]
               ( cFacCliP )->dFecCre    := GetSysDate()
               ( cFacCliP )->cHorCre    := Time()
               ( cFacCliP )->cCodUsr    := Auth():Codigo()
               ( cFacCliP )->cRecDev    := cNumRec
               ( cFacCliP )->cBncEmp    := aTabla[ 53    ]
               ( cFacCliP )->cBncCli    := aTabla[ 54    ]
               ( cFacCliP )->cEPaisIBAN := aTabla[ 55 ]
               ( cFacCliP )->cECtrlIBAN := aTabla[ 56 ]
               ( cFacCliP )->cEntEmp    := aTabla[ 57    ]
               ( cFacCliP )->cSucEmp    := aTabla[ 58    ]
               ( cFacCliP )->cDigEmp    := aTabla[ 59    ]
               ( cFacCliP )->cCtaEmp    := aTabla[ 60    ]
               ( cFacCliP )->cPaisIBAN  := aTabla[ 61  ]
               ( cFacCliP )->cCtrlIBAN  := aTabla[ 62  ]
               ( cFacCliP )->cEntCli    := aTabla[ 63    ]
               ( cFacCliP )->cSucCli    := aTabla[ 64    ]
               ( cFacCliP )->cDigCli    := aTabla[ 65    ]
               ( cFacCliP )->cCtaCli    := aTabla[ 66    ]
               ( cFacCliP )->cCtaGas    := aTabla[ 38    ]
               ( cFacCliP )->cCtaRec    := aTabla[ 23    ]
               ( cFacCliP )->cCtaRem    := aTabla[ 28    ]

               ( cFacCliP )->( dbUnLock() )

            else

               msgStop( "Número de recibo " + alltrim( cNumRec ) + " no encontrado" )

            end

            ( cFacCliP )->( OrdSetFocus( nOrdAnt ) )

         else

            nOrdAnt                       := ( cFacCliP )->( OrdSetFocus( "cRecDev" ) )

            if ( cFacCliP )->( dbSeek( cNumRec ) ) .AND. dbDialogLock( cFacCliP )
               ( cFacCliP )->( dbDelete() )
               ( cFacCliP )->( dbUnLock() )
            end

            ( cFacCliP )->( OrdSetFocus( nOrdAnt ) )

         end

         ( cFacCliP )->( dbGoTo( nRec ) )

      end





      actualizarEstadoFactura( cTipoRecibo, cNumFac )

   else

      if isArray( aRecibosRelacionados ) .AND. Len( aRecibosRelacionados ) > 0

         nRec     := ( D():FacturasClientesCobros( nView ) )->( Recno() )
         nOrdAnt  := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "nNumFac" ) )

         for each cRecibo in aRecibosRelacionados

            if ( D():FacturasClientesCobros( nView ) )->( dbSeek( cRecibo ) )

               if dbLock( D():FacturasClientesCobros( nView ) )

                  ( D():FacturasClientesCobros( nView ) )->lCobrado     := .T.
                  ( D():FacturasClientesCobros( nView ) )->dEntrada     := GetSysDate()
                  ( D():FacturasClientesCobros( nView ) )->cNumMtr      := cNumRecTip

                  ( D():FacturasClientesCobros( nView ) )->( dbUnLock() )

                  actualizarEstadoFactura( ( D():FacturasClientesCobros( nView ) )->cTipRec, ( D():FacturasClientesCobros( nView ) )->cSerie + Str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac )

               end

            end

         next

         ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( nOrdAnt ) )
         ( D():FacturasClientesCobros( nView ) )->( dbGoTo( nRec ) )

      end

   end





   nTotalRelacionados      := 0

   aRecibosRelacionados    := {}

   if !empty( oClienteCompensar )
      oClienteCompensar:cText( space( 12 ) )
      oClienteCompensar    := nil
   end





   dbCommitAll()

   oDlg:Enable()

   oDlg:End( 1 )

RETURN .T.



STATIC FUNCTION lValidReciboLibre( aTmp )

   if empty( aTmp[ 10 ] )
      MsgInfo( "El código del cliente no puede estar vacío para un recibo libre" )
      RETURN .F.
   end

   if empty( aTmp[ 7 ] )
      MsgInfo( "El código de la forma de pago no puede estar vacío para un recibo libre" )
      RETURN .F.
   end

   if aTmp[ 13 ] == 0 .AND. empty( oClienteCompensar )
      MsgInfo( "No puede hacer un recibo libre con importe 0" )
      RETURN .F.
   end

RETURN ( .T. )



function RollBackRecibosRelacionados( cNumRecTip, cFacCliP )

   local nRec     := ( cFacCliP )->( Recno() )
   local nOrdAnt  := ( cFacCliP )->( OrdSetFocus( "cNumMtr" ) )

   if ( cFacCliP )->( dbSeek( cNumRecTip ) )

      while  !( cFacCliP )->( eof() )

         if ( cFacCliP )->cNumMtr == cNumRecTip

            if dbLock( cFacCliP )
               ( cFacCliP )->cNumMtr := space( 15 )
               ( cFacCliP )->( dbUnLock() )
            end

         end

         ( cFacCliP )->( dbSkip() )

      end

   end

   ( cFacCliP )->( dbGoTo( nRec ) )
   ( cFacCliP )->( OrdSetFocus( nOrdAnt ) )

RETURN .T.



function nEstadoRecibo( uFacCliP )

RETURN ( hGetPos( hEstadoRecibo, cEstadoRecibo( uFacCliP ) ) )



function cEstadoRecibo( uFacCliP )

   local cEstadoRecibo  := ""

   If( uFacCliP == nil, uFacCliP := D():FacturasClientesCobros( nView ), ) ;

   if empty( uFacCliP )
      RETURN ( cEstadoRecibo )
   end

   do case
      case ( uFacCliP )->lEsperaDoc
         cEstadoRecibo  := "Espera documentación"
      case ( uFacCliP )->lCobrado .AND. !( uFacCliP )->lDevuelto
         cEstadoRecibo  := "Cobrado"
      case ( uFacCliP )->lCobrado .AND. ( uFacCliP )->lDevuelto
         cEstadoRecibo  := "Devuelto"
      case !( uFacCliP )->lCobrado .AND. ( uFacCliP )->lRemesa .AND. !empty( ( uFacCliP )->nNumRem )
         cEstadoRecibo  := "Remesado"
      case !( uFacCliP )->lCobrado
         cEstadoRecibo  := "Pendiente"
   end

RETURN ( cEstadoRecibo )



Function lReciboMatriz( cNumRec, uFacCliP )

   If( uFacCliP == nil, uFacCliP := D():FacturasClientesCobros( nView ), ) ;
   If( cNumRec == nil, cNumRec := ( D():FacturasClientesCobros( nView ) )->cSerie + str( ( D():FacturasClientesCobros( nView ) )->nNumFac ) + ( D():FacturasClientesCobros( nView ) )->cSufFac + str( ( D():FacturasClientesCobros( nView ) )->nNumRec ) + ( D():FacturasClientesCobros( nView ) )->cTipRec, ) ;

   if dbSeekInOrd( cNumRec, "cNumMtr", uFacCliP )
      RETURN .T.
   end

RETURN .F.



Function nEstadoMatriz( uFacCliP )

   local nRec
   local nOrd
   local nEstado     := 1
   local cNum

   If( uFacCliP == nil, uFacCliP := D():FacturasClientesCobros( nView ), ) ;

   cNum              := ( uFacCliP )->cSerie + str( ( uFacCliP )->nNumFac ) + ( uFacCliP )->cSufFac + str( ( uFacCliP )->nNumRec ) + ( uFacCliP )->cTipRec
   nRec              := ( uFacCliP )->( recno() )
   nOrd              := ( uFacCliP )->( ordsetfocus( "cNumMtr" ) )

   if ( uFacCliP )->( dbseek( cNum ) )
      nEstado        := 2
   end

   ( uFacCliP )->( ordsetfocus( nOrd ) )
   ( uFacCliP )->( dbgoto( nRec ) )

   if !empty( ( uFacCliP )->cNumMtr )
      nEstado        := 3
   end

RETURN nEstado



Function cEstadoMatriz( uFacCliP )

   local cEstadoMatriz  := ""
   local nEstadoMatriz  := nEstadoMatriz( uFacCliP )

   do case
      case nEstadoMatriz == 2
         cEstadoMatriz  := "Matriz"
      case nEstadoMatriz == 3
         cEstadoMatriz  := "Compensado"
   end

RETURN ( cEstadoMatriz )



Function cCuentaEmpresaRecibo( uFacCliP )

   local cCuentaEmpresaRecibo := ""

   do case
   case IsObject( uFacCliP )
      cCuentaEmpresaRecibo    += uFacCliP:cEntEmp
      cCuentaEmpresaRecibo    += uFacCliP:cSucEmp
      cCuentaEmpresaRecibo    += uFacCliP:cDigEmp
      cCuentaEmpresaRecibo    += uFacCliP:cCtaEmp

   case IsChar( uFacCliP )
      cCuentaEmpresaRecibo    += ( uFacCliP )->cEntEmp
      cCuentaEmpresaRecibo    += ( uFacCliP )->cSucEmp
      cCuentaEmpresaRecibo    += ( uFacCliP )->cDigEmp
      cCuentaEmpresaRecibo    += ( uFacCliP )->cCtaEmp

   end

RETURN ( cCuentaEmpresaRecibo )



STATIC FUNCTION lUpdateSubCta( aGet, aTmp )

   if !empty( aTmp[ 7 ] )


         aGet[ 23 ]:cText( RetFld( aTmp[ 7 ], D():FormasPago( nView ), "cCtaCobro" ) )
         aGet[ 23 ]:Refresh()



         aGet[ 38 ]:cText( RetFld( aTmp[ 7 ], D():FormasPago( nView ), "cCtaGas" ) )
         aGet[ 38 ]:Refresh()


   end

RETURN .T.



STATIC FUNCTION lValidCompensado( aTmp )

   local cNumRec  := aTmp[ 1 ] + "/" + allTrim( str( aTmp[ 2 ] ) ) + "/" + aTmp[ 3 ] + "-" + AllTrim( str( aTmp[ 4 ] ) )

   if aTmp[ 18 ]
      msgStop( "Recibo ya cobrado.", "Recibo: " + cNumRec )
      RETURN .F.
   end

   if aTmp[ 67 ]
      msgStop( "Recibo ya remesado.", "Recibo: " + cNumRec )
      RETURN .F.
   end

   if !empty( aTmp[ 68 ] )
      msgStop( "Recibo ya pertenece a otra matriz.", "Recibo: " + cNumRec )
      RETURN .F.
   end

RETURN .T.



STATIC FUNCTION cTipoRecibo( cTipo )

   local cTipoRecibo    := "Factura"

   do case
      case cTipo == "R"
         cTipoRecibo    := "Rectificativa"
      case cTipo == "L"
         cTipoRecibo    := "Libre"
   end

RETURN ( cTipoRecibo )



STATIC FUNCTION loadCliente( aGet, aTmp )

   local lValid      := .T.
   local cCodCli     := aGet[ 10 ]:varGet()
   local lChgCodCli  := ( empty( cOldCodCli ) .OR. cOldCodCli <> cCodCli )

   if empty( cCodCli )
      RETURN .T.
   elseif At( ".", cCodCli ) <> 0
      cCodCli     := PntReplace( aGet[ 10 ], "0", RetNumCodCliEmp() )
   else
      cCodCli     := Rjust( cCodCli, "0", RetNumCodCliEmp() )
   end

   if lChgCodCli

      if ( D():Clientes( nView ) )->( dbSeek( cCodCli ) )





         aGet[ 10 ]:cText( ( D():Clientes( nView ) )->Cod )
         aGet[ 11 ]:cText( ( D():Clientes( nView ) )->Titulo )

         aGet[ 7 ]:cText( ( D():Clientes( nView ) )->CodPago )
         aGet[ 7 ]:lValid()

         aGet[ 33 ]:cText( ( D():Clientes( nView ) )->cAgente )
         aGet[ 33 ]:lValid()

         aGet[ 28 ]:cText( ( D():Clientes( nView ) )->cCodRem )
         aGet[ 28 ]:lValid()

         if !empty( ( D():Clientes( nView ) )->CodPago )
            aGet[ 23 ]:cText( RetFld( ( D():Clientes( nView ) )->CodPago, D():FormasPago( nView ), "cCtaCobro" ) )
            aGet[ 38 ]:cText( RetFld( ( D():Clientes( nView ) )->CodPago, D():FormasPago( nView ), "cCtaGas" ) )
         end

         if lBancoDefecto( ( D():Clientes( nView ) )->Cod, D():ClientesBancos( nView ) )

            aGet[ 54 ]:cText( ( D():ClientesBancos( nView ) )->cCodBnc )
            aGet[ 61 ]:cText( ( D():ClientesBancos( nView ) )->cPaisIBAN )
            aGet[ 62 ]:cText( ( D():ClientesBancos( nView ) )->cCtrlIBAN )
            aGet[ 63 ]:cText( ( D():ClientesBancos( nView ) )->cEntBnc )
            aGet[ 64 ]:cText( ( D():ClientesBancos( nView ) )->cSucBnc )
            aGet[ 65 ]:cText( ( D():ClientesBancos( nView ) )->cDigBnc )
            aGet[ 66 ]:cText( ( D():ClientesBancos( nView ) )->cCtaBnc )

         end

         cOldCodCli  := ( D():Clientes( nView ) )->Cod

      else

         MsgStop( "Cliente no encontrado" )

         lValid      := .F.

      end

   end

RETURN ( lValid )



STATIC FUNCTION CompensarReciboCliente( oBrw )

   local oDlg
   local oBmp
   local oBrwRec
   local oSayTot
   local cCodCli           := space( 12 )
   local nRec              := ( D():FacturasClientesCobros( nView ) )->( Recno() )
   local nOrdAnt           := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "nNumFac" ) )

   aRecibosRelacionados    := {}
   nTotalRelacionados      := 0



   oDlg = TDialog():New(,,,, "Compensación recibos de clientes", "RECIBOSCOMPENSAR",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





   oBmp := TBitmap():ReDefine( 500, "gc_folder_cubes_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )







   oClienteCompensar := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, cCodCli, cCodCli:= u ) }, oDlg,,, {||    ( cClient( oClienteCompensar, , oClienteCompensar:oHelpText ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwClient( oClienteCompensar, oClienteCompensar:oHelpText ) )}, nil, "LUPA",, 311 )





   TButton():ReDefine( 100, {||( GetReciboCliente( cCodCli, oBrwRec ) )}, oDlg,,, .F., {||     ( !empty( cCodCli ) )},,, .F. )





   TButton():ReDefine( 110, {||( DelReciboCliente( oBrwRec ) )}, oDlg,,, .F., {||     ( !empty( cCodCli ) )},,, .F. )

   oBrwRec                 := IXBrowse():New( oDlg )

   oBrwRec:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwRec:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
   oBrwRec:nMarqueeStyle   := 6
   oBrwRec:lRecordSelector := .F.
   oBrwRec:lHScroll        := .F.

   oBrwRec:SetArray( aRecibosRelacionados, , , .F. )

   oBrwRec:CreateFromResource( 200 )

   with object ( oBrwRec:AddCol() )
      :cHeader          := "Tipo"
      :bstrData         := {|| if( len( aRecibosRelacionados ) > 0 , cTipoRecibo( Right( aRecibosRelacionados[ oBrwRec:nArrayAt ], 1 ) ), "" ) }
      :nWidth           := 50
   end

   with object ( oBrwRec:AddCol() )
      :cHeader          := "Numero"
      :bstrData         := {|| if( len( aRecibosRelacionados) > 0, Left( aRecibosRelacionados[ oBrwRec:nArrayAt ], 1 ) + "/" + Alltrim( Substr( aRecibosRelacionados[ oBrwRec:nArrayAt ], 2, 9 ) ) + "-" + Alltrim( Substr( aRecibosRelacionados[ oBrwRec:nArrayAt ], 13, 2 ) ), "" ) }
      :nWidth           := 100
   end

   with object ( oBrwRec:AddCol() )
      :cHeader          := "Delegación"
      :bstrData         := {|| if( len( aRecibosRelacionados) > 0, Substr( aRecibosRelacionados[ oBrwRec:nArrayAt ], 11, 2 ), "" ) }
      :nWidth           := 40
      :lHide            := .T.
   end

   with object ( oBrwRec:AddCol() )
      :cHeader          := "Fecha"
      :bstrData         := {|| if( len( aRecibosRelacionados) > 0, RetFld( aRecibosRelacionados[ oBrwRec:nArrayAt ], D():FacturasClientesCobros( nView ), "dPreCob", "nNumFac" ), "" ) }
      :nWidth           := 80
      :nDatastrAlign    := 3
      :nHeadstrAlign    := 3
   end

   with object ( oBrwRec:AddCol() )
      :cHeader          := "Vencimiento"
      :bstrData         := {|| if( len( aRecibosRelacionados) > 0, RetFld( aRecibosRelacionados[ oBrwRec:nArrayAt ], D():FacturasClientesCobros( nView ), "dFecVto", "nNumFac" ), "" ) }
      :nWidth           := 80
      :nDatastrAlign    := 3
      :nHeadstrAlign    := 3
   end

   with object ( oBrwRec:AddCol() )
      :cHeader          := "Concepto"
      :bstrData         := {|| if( len( aRecibosRelacionados) > 0, RetFld( aRecibosRelacionados[ oBrwRec:nArrayAt ], D():FacturasClientesCobros( nView ), "cDesCriP", "nNumFac" ), "" ) }
      :nWidth           := 200
   end

   with object ( oBrwRec:AddCol() )
      :cHeader          := "Total"
      :bstrData         := {|| if( len( aRecibosRelacionados) > 0, Trans( RetFld( aRecibosRelacionados[ oBrwRec:nArrayAt ], D():FacturasClientesCobros( nView ), "nImporte", "nNumFac" ), cPorDiv() ), "" ) }
      :nWidth           := 80
      :nDatastrAlign    := 1
      :nHeadstrAlign    := 1
   end

   oBrwRec:bLDblClick   := {|| ZoomReciboCliente( Substr( aRecibosRelacionados[ oBrwRec:nArrayAt ], 1, 14 ) ) }




   oSayTot := TSay():ReDefine( 488,, oDlg,,,, .F., oFontTotal(), .F., .F., )





   oTotalRelacionados := TSay():ReDefine( 485, {|| nTotalRelacionados}, oDlg, cPorDiv(),,, .F., oFontTotal(), .F., .F., )




   TButton():ReDefine( 1, {||( if( lPreSaveCompensarReciboCliente(), oDlg:end( 1 ), ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 113, {|| GetReciboCliente( cCodCli, oBrwRec ) } )
      oDlg:AddFastKey( 115, {|| DelReciboCliente( oBrwRec ) } )

      oDlg:bStart := {|| oClienteCompensar:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientesCobros( nView ) )->( dbGoto( nRec ) )

   if !empty( oBmp )
      oBmp:End()
   end

   if !empty( oBrw )
      oBrw:Refresh()
   end

RETURN ( .T. )



STATIC FUNCTION lPreSaveCompensarReciboCliente()

   if empty( oClienteCompensar:VarGet() )
      MsgStop( "Tiene que seleccionar un cliente" )
      oClienteCompensar:SetFocus()
      RETURN .F.
   end

   if Len( aRecibosRelacionados ) < 1
      MsgStop( "Tiene que seleccionar recibos para crear una compensación" )
      RETURN .F.
   end

   if !WinAppRec( oWndBrw:oBrw, bEdit, D():FacturasClientesCobros( nView ), , 2 )
      RETURN .F.
   end

RETURN .T.



STATIC FUNCTION ZoomReciboCliente( cNumFac )

   local nRec     := ( D():FacturasClientesCobros( nView ) )->( Recno() )
   local nOrdAnt  := ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( "nNumFac" ) )

   if ( D():FacturasClientesCobros( nView ) )->( dbSeek( cNumFac ) )
      WinZooRec( , bEdit, D():FacturasClientesCobros( nView ) )
   end

   ( D():FacturasClientesCobros( nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientesCobros( nView ) )->( dbGoTo( nRec ) )

RETURN .T.



STATIC FUNCTION aRecibosAgrupados( uFacCliP )

   local nRec
   local nOrd
   local cNum
   local hRecibo

   aRecibosMatriz    := {}

   If( uFacCliP == nil, uFacCliP := D():FacturasClientesCobros( nView ), ) ;

   cNum              := ( uFacCliP )->cSerie + str( ( uFacCliP )->nNumFac ) + ( uFacCliP )->cSufFac + str( ( uFacCliP )->nNumRec ) + ( uFacCliP )->cTipRec
   nRec              := ( uFacCliP )->( recno() )
   nOrd              := ( uFacCliP )->( ordsetfocus( "cNumMtr" ) )

   if ( uFacCliP )->( dbseek( cNum ) )

      while ( uFacCliP )->cNumMtr == cNum .AND. !( uFacCliP )->( Eof() )






         hRecibo     := {  "Número"                => ( uFacCliP )->cSerie + "/" + AllTrim( str( ( uFacCliP )->nNumFac ) ) + "/" + AllTrim( ( uFacCliP )->cSufFac ) + "-" + AllTrim( str( ( uFacCliP )->nNumRec ) ), "Estado"                => ( uFacCliP )->lCobrado, "Fecha"                 => ( ( uFacCliP )->dEntrada ), "Vencimiento"           => ( ( uFacCliP )->dFecVto ), "Pago"                  => ( uFacCliP )->cCodPgo + "-" + RetFld( ( uFacCliP )->cCodPgo, D():FormasPago( nView ) ), "Importe"               => Trans( ( uFacCliP )->nImporte, cPorDiv() ) }

         aAdd( aRecibosMatriz, hRecibo )

         ( uFacCliP )->( dbSkip() )

      end

   end

   ( uFacCliP )->( ordsetfocus( nOrd ) )
   ( uFacCliP )->( dbgoto( nRec ) )

RETURN nil



STATIC FUNCTION deleteRecibosFacturasClientes( cNumeroFactura, dbfFacCliP )

   while ( dbfFacCliP )->( dbSeek( cNumeroFactura ) ) .AND. ( dbfFacCliP )->( !eof() )

      if dbLock( dbfFacCliP )
         ( dbfFacCliP )->( dbDelete() )
         ( dbfFacCliP )->( dbUnLock() )
      end

      ( dbfFacCliP )->( dbSkip() )

   end

RETURN nil



STATIC FUNCTION cFormatoRecibosClientes( cSerie )

   local cFormato

   If( cSerie == nil, cSerie := ( D():FacturasClientesCobros( nView ) )->cSerie, ) ;

   cFormato          := cFormatoDocumento( cSerie, "nRecCli", D():Contadores( nView ) )

   if empty( cFormato )
      cFormato       := cFirstDoc( "RF", D():Documentos( nView ) )
   end

RETURN ( cFormato )



STATIC FUNCTION actualizarEstadoFactura( cTipoRecibo, cNumeroFactura )

   if !( lActualizarEstadoFactura )
      RETURN ( .F. )
   end

   do case
      case empty( cTipoRecibo )

         if ( D():FacturasClientes( nView ) )->( dbSeek( cNumeroFactura ) )
            ChkLqdFacCli( nil, D():FacturasClientes( nView ), D():FacturasClientesLineas( nView ), D():FacturasClientesCobros( nView ), D():AnticiposClientes( nView ), D():TiposIva( nView ), D():Divisas( nView ), .F. )
         end

      case cTipoRecibo == "R"

         if ( D():FacturasRectificativas( nView ) )->( dbSeek( cNumeroFactura ) )
            ChkLqdFacRec( nil, D():FacturasRectificativas( nView ), D():FacturasRectificativasLineas( nView ), D():FacturasClientesCobros( nView ), D():TiposIva( nView ), D():Divisas( nView ) )
         end

   end

RETURN nil



Function LiquidaRecibo( nImporte, dbfRecCli, cFacCliT )

   local nRec
   local nImp
   local aTbl
   local nCon

   if ( ( dbfRecCli )->nImporte <> nImporte )





      aTbl                       := dbScatter( dbfRecCli )





      nImp                       := ( ( dbfRecCli )->nImporte - nImporte )





      if dbLock( dbfRecCli )
         ( dbfRecCli )->nImporte    := nImporte
         ( dbfRecCli )->lCobrado    := .T.
         ( dbfRecCli )->dEntrada    := GetSysDate()
         ( dbfRecCli )->( dbUnLock() )
      end





      nRec                       := ( dbfRecCli )->( Recno() )





      nCon                       := nNewReciboCliente( aTbl[ 1 ] + str( aTbl[ 2 ] ) + aTbl[ 3 ], aTbl[ 6 ], dbfRecCli )





      ( dbfRecCli )->( dbAppend() )

      ( dbfRecCli )->cTurRec    := aTbl[ 9 ]
      ( dbfRecCli )->cTipRec    := aTbl[ 6 ]
      ( dbfRecCli )->cSerie     := aTbl[ 1  ]
      ( dbfRecCli )->nNumFac    := aTbl[ 2 ]
      ( dbfRecCli )->cSufFac    := aTbl[ 3 ]
      ( dbfRecCli )->nNumRec    := nCon
      ( dbfRecCli )->cCodCaj    := aTbl[ 8 ]
      ( dbfRecCli )->cCodCli    := aTbl[ 10 ]
      ( dbfRecCli )->cNomCli    := aTbl[ 11 ]
      ( dbfRecCli )->cCodAge    := aTbl[ 33 ]
      ( dbfRecCli )->dEntrada   := Ctod( "" )
      ( dbfRecCli )->nImporte   := nImp
      ( dbfRecCli )->nImpCob    := nImp
      ( dbfRecCli )->cDescrip   := "Recibo nº" + AllTrim( str( nCon ) ) + " de factura " + if( !empty( aTbl[ 6 ] ), "rectificativa ", "" ) + aTbl[ 1 ] + "/" + AllTrim( str( aTbl[ 2 ] ) ) + "/" + aTbl[ 3 ]
      ( dbfRecCli )->dPreCob    := dFecFacCli( aTbl[ 1 ] + str( aTbl[ 2 ] ) + aTbl[ 3 ], cFacCliT )
      ( dbfRecCli )->cPgdoPor   := ""
      ( dbfRecCli )->lCobrado   := .F.
      ( dbfRecCli )->cDivPgo    := aTbl[ 19 ]
      ( dbfRecCli )->nVdvPgo    := aTbl[ 20 ]
      ( dbfRecCli )->cCodPgo    := aTbl[ 7 ]
      ( dbfRecCli )->lConPgo    := .F.
      ( dbfRecCli )->lSndDoc    := .T.
      ( dbfRecCli )->dFecCre    := GetSysDate()
      ( dbfRecCli )->cHorCre    := Substr( Time(), 1, 5 )

      ( dbfRecCli )->( dbUnLock() )

      ( dbfRecCli )->( dbGoTo( nRec ) )

   end

RETURN nil



Function insertVencimientoContaplus( cFacCliP, cClient )

   local cArea
   local cEmpresaContaplus



   if ( ( cFacCliP )->lCobrado )
      RETURN ( .F. )
   end



   if lAplicacionA3()
      RETURN ( .F. )
   end



   if empty( cRutCnt() )
      RETURN ( .F. )
   end



   cEmpresaContaplus    := cEmpCnt( ( cFacCliP )->cSerie )
   if empty(cEmpresaContaplus)
      RETURN ( .F. )
   end



   if !( OpenVencimientos( cRutCnt(), cEmpresaContaplus, @cArea ) )
      RETURN ( .F. )
   end



   ( cArea )->( dbappend( .T. ) )
   ( cArea )->fecha     := ( cFacCliP )->dPreCob
   ( cArea )->cod       := cCliCta( ( cFacCliP )->cCodCli, cClient )
   ( cArea )->acpa      := "A"
   ( cArea )->contra    := ( cFacCliP )->cCtaRec
   ( cArea )->concepto  := "Cobro Fra. " + ( cFacCliP )->cSerie + "/" + alltrim( str( ( cFacCliP )->nNumFac ) )
   ( cArea )->estado    := .T.
   ( cArea )->documento := ( cFacCliP )->cSerie + "/" + alltrim( str( ( cFacCliP )->nNumFac ) )
   ( cArea )->monedaUso := "2"
   ( cArea )->fechaPag  := ( cFacCliP )->dFecVto
   ( cArea )->euro      := ( cFacCliP )->nImporte
   ( cArea )->( dbunlock() )



   ( cArea )->( dbCloseArea() )

RETURN nil



Function lLimitDaysPendiente( cCodCli )

   local nDays
   local dPrimerReciboPendiente

   if !ClientesModel():getField( "lFacPdt", "Cod", cCodCli )
      Return .F.
   end

   nDays                   := ClientesModel():getField( "nDFacPdt", "Cod", cCodCli )

   if nDays <= 0
      Return .F.
   end

   dPrimerReciboPendiente  := RecibosClientesModel():dPrimerReciboPendiente( cCodCli )

   if ( GetSysDate() - dPrimerReciboPendiente ) > nDays
      Return .T.
   end

Return .F.
