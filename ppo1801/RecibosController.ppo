#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\RecibosController.prg"
_HB_CLASS RecibosController ; function RecibosController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RecibosController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @RecibosController() ) ) ;

   _HB_MEMBER { oCajasController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCajasController"}, .F. )

   _HB_MEMBER { oClientesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oClientesController"}, .F. )

   _HB_MEMBER { oFormasPagosController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFormasPagosController"}, .F. )

   _HB_MEMBER { oAgentesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAgentesController"}, .F. )

   _HB_MEMBER { oIncidenciasController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIncidenciasController"}, .F. )

   _HB_MEMBER { oDocumentosController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDocumentosController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @RecibosController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @RecibosController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RecibosController ;



static FUNCTION RecibosController_New( oSenderController ) ; local Self AS CLASS RecibosController := QSelf() AS CLASS RecibosController

   ::Super:New( oSenderController )

   ::cTitle                      := "Recibos"

   ::cName                       := "recibos"



   ::hImage                      := {  "16" => "gc_briefcase2_user_16", "32" => "gc_briefcase2_user_32", "48" => "gc_briefcase2_user_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLRecibosModel():New( self )

   ::oBrowseView                    := RecibosBrowseView():New( self )

   ::oDialogView                    := RecibosView():New( self )

   ::oValidator                     := RecibosValidator():New( self, ::oDialogView )

   ::oCajasController               := CajasController():new( self )

   ::oClientesController            := ClientesController():new( self )

   ::oFormasPagosController           := FormasPagosController():new( self )

   ::oAgentesController             := AgentesController():new( self )

   ::oIncidenciasController         := IncidenciasController():new( self )

   ::oDocumentosController          := DocumentosController():new( self )

   ::oRepository                    := RecibosRepository():New( self )

   ::oGetSelector                   := GetSelector():New( self )

RETURN ( Self )



static FUNCTION RecibosController_End( ) ; local Self AS CLASS RecibosController := QSelf() AS CLASS RecibosController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oCajasController:End()

   ::oClientesController:End()

   ::oFormasPagosController:End()

   ::oAgentesController:End()

   ::oIncidenciasController:End()

   ::oDocumentosController:End()

   ::oRepository:End()

   ::Super:End()

RETURN ( Self )











_HB_CLASS RecibosBrowseView ; function RecibosBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RecibosBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @RecibosBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @RecibosBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RecibosBrowseView ;



static FUNCTION RecibosBrowseView_addColumns( ) ; local Self AS CLASS RecibosBrowseView := QSelf() AS CLASS RecibosBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "cobrado"
      :cHeader             := ""
      :nWidth              := 50
      :nHeadBmpNo          := 3
      :bEditValue          := {|| ::getRowSet():fieldGet( "cobrado" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :SetCheck( { "Sel16", "Nil16" } )
      :AddResource( "GC_MONEY2_16" )
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "sesion"
      :cHeader             := "Sesión"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "sesion" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

     with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "cliente"
      :cHeader             := "Nombre Cliente"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre_cliente" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "expedicion"
      :cHeader             := "Expedición"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "expedicion" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "vencimiento"
      :cHeader             := "Vencimiento"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "vencimiento" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "fecha_cobro"
      :cHeader             := "Fecha de cobro"
      :nWidth              := 120
      :bEditValue          := {|| ::getRowSet():fieldGet( "fecha_cobro" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "concepto"
      :cHeader             := "Concepto"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "concepto" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "importe"
      :cHeader             := "importe"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "importe" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "cobro"
      :cHeader             := "Cobrado"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "cobro" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "gastos"
      :cHeader             := "Gastos"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "gastos" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS RecibosView ; function RecibosView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RecibosView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @RecibosView() ) ) ;

   _HB_MEMBER { oFechacobro } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFechacobro"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @RecibosView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER StartActivate(); oClass:AddMethod( "StartActivate", @RecibosView_StartActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaCobro(); oClass:AddMethod( "getFechaCobro", @RecibosView_getFechaCobro(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addLinksToExplorerBar(); oClass:AddMethod( "addLinksToExplorerBar", @RecibosView_addLinksToExplorerBar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RecibosView ;


static FUNCTION RecibosView_getFechaCobro( ) ; local Self AS CLASS RecibosView := QSelf() AS CLASS RecibosView

   if ::oController:oModel:hBuffer[ "cobrado" ]
      ::oController:oModel:hBuffer[ "fecha_cobro" ] := hb_date()
   else
      ::oController:oModel:hBuffer[ "fecha_cobro" ] := ctod( "" )
   end

   ::oFechaCobro:Refresh()

RETURN ( self )



static FUNCTION RecibosView_Activate( ) ; local Self AS CLASS RecibosView := QSelf() AS CLASS RecibosView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "recibo", "CONTAINER_MEDIUM_EXTENDED",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )





   ::oMessage := TSay():ReDefine( 800, {||      "Recibos"}, ::oDialog,,,, .F., getBoldFont(), .F., .F., )





   ::oFolder := TFolder():ReDefine( 500, {"&General"}, { "RECIBO_GENERAL" }, ::oDialog,,,,, .F., )
      ::redefineExplorerBar()





   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "expedicion" ], ::oController:oModel:hBuffer[ "expedicion" ]:= u ) }, ::oFolder:aDialogs[1],,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "vencimiento" ], ::oController:oModel:hBuffer[ "vencimiento" ]:= u ) }, ::oFolder:aDialogs[1],,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,,,,, nil,,, )





   TSayCheck():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "no_incluir_en_arqueo" ], ::oController:oModel:hBuffer[ "no_incluir_en_arqueo" ]:= u ) }, ::oFolder:aDialogs[1],,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, 122 )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "sesion" ], ::oController:oModel:hBuffer[ "sesion" ]:= u ) }, ::oFolder:aDialogs[1],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )





  TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "importe" ], ::oController:oModel:hBuffer[ "importe" ]:= u ) }, ::oFolder:aDialogs[1],, "@E 999999999999.999",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cobro" ], ::oController:oModel:hBuffer[ "cobro" ]:= u ) }, ::oFolder:aDialogs[1],, "@E 999999999999.999",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





  TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "gastos" ], ::oController:oModel:hBuffer[ "gastos" ]:= u ) }, ::oFolder:aDialogs[1],, "@E 999999999999.999",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TSayCheck():ReDefine( 170, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cobrado" ], ::oController:oModel:hBuffer[ "cobrado" ]:= u ) }, ::oFolder:aDialogs[1],, {||      (::getFechaCobro() )},,,,, .F., {||        ( ::oController:isNotZoomMode() )},, 172 )





   ::oFechacobro := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "fecha_cobro" ], ::oController:oModel:hBuffer[ "fecha_cobro" ]:= u ) }, ::oFolder:aDialogs[1],,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )



   ::oController:oCajasController:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo_caja" ], ::oController:oModel:hBuffer[ "codigo_caja" ]:= u ) } )

   ::oController:oCajasController:oGetSelector:setEvent( "validated", {|| ::CajasControllerValidated() } )

   ::oController:oCajasController:oGetSelector:Activate( 190, 192, ::oFolder:aDialogs[1] )



   ::oController:oClientesController:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cliente" ], ::oController:oModel:hBuffer[ "cliente" ]:= u ) } )

   ::oController:oClientesController:oGetSelector:Build( { "idGet" => 200, "idText" => 202, "oDialog" => ::oFolder:aDialogs[1] } )



   ::oController:oFormasPagosController:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "forma_pago" ], ::oController:oModel:hBuffer[ "forma_pago" ]:= u ) } )

   ::oController:oFormasPagosController:oGetSelector:setEvent( "validated", {|| ::FormasPagosControllerValidated() } )

   ::oController:oFormasPagosController:oGetSelector:Activate( 210, 212, ::oFolder:aDialogs[1] )



   ::oController:oAgentesController:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "agente" ], ::oController:oModel:hBuffer[ "agente" ]:= u ) } )

   ::oController:oAgentesController:oGetSelector:setEvent( "validated", {|| ::AgentesControllerValidated() } )

   ::oController:oAgentesController:oGetSelector:Activate( 220, 222, ::oFolder:aDialogs[1] )






   TGetHlp():ReDefine( 230, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "concepto" ], ::oController:oModel:hBuffer[ "concepto" ]:= u ) }, ::oFolder:aDialogs[1],,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 240, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "pagado_por" ], ::oController:oModel:hBuffer[ "pagado_por" ]:= u ) }, ::oFolder:aDialogs[1],,,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

::oDialog:bStart  := {|| ::StartActivate() }

::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )



RETURN ( ::oDialog:nResult )



static FUNCTION RecibosView_StartActivate( ) ; local Self AS CLASS RecibosView := QSelf() AS CLASS RecibosView

::addLinksToExplorerBar()

::oController:oCajasController:oGetSelector:Start()

::oController:oClientesController:oGetSelector:Start()

::oController:oFormasPagosController:oGetSelector:Start()

::oController:oAgentesController:oGetSelector:Start()

RETURN ( self )



static FUNCTION RecibosView_addLinksToExplorerBar( ) ; local Self AS CLASS RecibosView := QSelf() AS CLASS RecibosView

   local oPanel

   oPanel            := ::oExplorerBar:AddPanel( "Datos relacionados", nil, 1 )

   if ::oController:isZoomMode()
      RETURN ( self )
   end



   oPanel:AddLink(   "Incidencias...", {|| ::oController:oIncidenciasController:activateDialogView( ::oController:getUuid() ) }, ::oController:oIncidenciasController:getImage( "16" ) )



   oPanel:AddLink(   "Documentos...", {|| ::oController:oDocumentosController:activateDialogView() }, ::oController:oDocumentosController:getImage( "16" ) )

RETURN ( self )






_HB_CLASS RecibosValidator ; function RecibosValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RecibosValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @RecibosValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @RecibosValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RecibosValidator ;



static FUNCTION RecibosValidator_getValidators( ) ; local Self AS CLASS RecibosValidator := QSelf() AS CLASS RecibosValidator




   ::hValidators  := {  "codigo" =>                {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe" }, "nombre" =>                {  "required"           => "El nombre es un dato requerido"    , "unique"             => "El nombre introducido ya existe"   }  }
RETURN ( ::hValidators )










_HB_CLASS SQLRecibosModel ; function SQLRecibosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLRecibosModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLRecibosModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "factura_recibos", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLRecibosModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLRecibosModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getCodigoCajaAttribute(); oClass:AddInline( "getCodigoCajaAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), space( 40 ), ::oController:oCajasController:oModel():getCodigoWhereUuid( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setCodigoCajaAttribute(); oClass:AddInline( "setCodigoCajaAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), "", ::oController:oCajasController:oModel():getUuidWhereCodigo( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getClienteAttribute(); oClass:AddInline( "getClienteAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), space( 40 ), ::oController:oClientesController:oModel():getCodigoWhereUuid( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setClienteAttribute(); oClass:AddInline( "setClienteAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), "", ::oController:oClientesController:oModel():getUuidWhereCodigo( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getFormapagoAttribute(); oClass:AddInline( "getFormapagoAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), space( 40 ), ::oController:oFormasPagosController:oModel():getCodigoWhereUuid( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setFormapagoAttribute(); oClass:AddInline( "setFormapagoAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), "", ::oController:oFormasPagosController:oModel():getUuidWhereCodigo( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAgenteAttribute(); oClass:AddInline( "getAgenteAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), space( 40 ), ::oController:oAgentesController:oModel():getCodigoWhereUuid( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setAgenteAttribute(); oClass:AddInline( "setAgenteAttribute", {|Self, uValue | ( ( Self ) ), ( if( empty( uValue ), "", ::oController:oAgentesController:oModel():getUuidWhereCodigo( uValue ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLRecibosModel ;



static FUNCTION SQLRecibosModel_getInitialSelect( ) ; local Self AS CLASS SQLRecibosModel := QSelf() AS CLASS SQLRecibosModel




















   local cSelect  := "SELECT factura_recibos.id,"                                                               + " " +  "factura_recibos.uuid,"                                                                 + " " +  "factura_recibos.parent_uuid,"                                                          + " " +  "factura_recibos.expedicion,"                                                           + " " +  "factura_recibos.vencimiento,"                                                          + " " +  "factura_recibos.no_incluir_en_arqueo,"                                                 + " " +  "factura_recibos.sesion,"                                                               + " " +  "factura_recibos.importe,"                                                              + " " +  "factura_recibos.cobro,"                                                                + " " +  "factura_recibos.gastos,"                                                               + " " +  "factura_recibos.cobrado,"                                                              + " " +  "factura_recibos.fecha_cobro,"                                                          + " " +  "factura_recibos.codigo_caja,"                                                          + " " +  "factura_recibos.cliente,"                                                              + " " +  "factura_recibos.agente,"                                                               + " " +  "factura_recibos.concepto,"                                                             + " " +  "factura_recibos.pagado_por,"                                                           + " " +  "clientes.nombre AS nombre_cliente "                                                    + " " +  "FROM factura_recibos"                                                                     + " " +  "INNER JOIN clientes ON factura_recibos.cliente = clientes.uuid"  + " "

RETURN ( cSelect )



static FUNCTION SQLRecibosModel_getColumns( ) ; local Self AS CLASS SQLRecibosModel := QSelf() AS CLASS SQLRecibosModel


   hset( ::hColumns, "id",                         {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"              , "default"   => {|| 0 } }                                    )


   hset( ::hColumns, "uuid",                       {  "create"    => "VARCHAR(40) NOT NULL UNIQUE"                , "default"   => {|| win_uuidcreatestring() } }               )


   hset( ::hColumns, "parent_uuid",                {  "create"    => "VARCHAR( 40 )"                              , "default"   => {||::getSenderControllerParentUuid() } }     )


   hset( ::hColumns, "expedicion",                 {  "create"    => "DATE"                                       , "default"   => {|| hb_date() } }                            )


   hset( ::hColumns, "vencimiento",                {  "create"   => "DATE"                                        , "default"   => {|| hb_date() } }                            )


   hset( ::hColumns, "no_incluir_en_arqueo",       {  "create"    => "BIT"                                        , "default"   => {|| .F. } }                                  )


   hset( ::hColumns, "sesion",                     {  "create"    => "VARCHAR( 200 )"                             , "default"   => {||  space( 200 )  } }                       )


   hset( ::hColumns, "importe",                    {  "create"    => "FLOAT( 15,3 )"                              , "default"   => {||  0.000  } }                               )


   hset( ::hColumns, "cobro",                      {  "create"    => "FLOAT( 15,3 )"                              , "default"   => {||  0.000  } }                               )


   hset( ::hColumns, "gastos",                     {  "create"    => "FLOAT( 15,3 )"                              , "default"   => {||  0.000  } }                               )


   hset( ::hColumns, "cobrado",                    {  "create"    => "BIT"                                        , "default"   => {|| .F. } }                                  )


   hset( ::hColumns, "fecha_cobro",                {  "create"    => "DATE"                                       , "default"   => {|| ctod( "" ) } }                            )


   hset( ::hColumns, "codigo_caja",                {  "create"    => "VARCHAR( 20 )"                              , "default"   => {|| space( 40 ) } }                          )


   hset( ::hColumns, "cliente",                    {  "create"    => "VARCHAR( 20 )"                               , "default"   => {|| space( 40 ) } }                           )


   hset( ::hColumns, "forma_pago",                 {  "create"    => "VARCHAR( 40 )"                               , "default"   => {|| space( 40 ) } }                           )


   hset( ::hColumns, "agente",                     {  "create"    => "VARCHAR( 20 )"                               , "default"   => {|| space( 40 ) } }                           )


   hset( ::hColumns, "concepto",                   {  "create"    => "VARCHAR( 200 )"                              , "default"   => {|| space( 200 ) } }                          )


   hset( ::hColumns, "pagado_por",                 {  "create"    => "VARCHAR( 200 )"                              , "default"   => {|| space( 200 ) } }                          )



RETURN ( ::hColumns )











_HB_CLASS RecibosRepository ; function RecibosRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RecibosRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @RecibosRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLRecibosModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RecibosRepository ;