#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\RecordController.prg"
_HB_CLASS RecordController ; function RecordController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RecordController", iif( .T., { @SQLBaseController() }, { @HBObject() } ), @RecordController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @RecordController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getModel(); oClass:AddInline( "getModel", {|Self | ( ( Self ) ), ( ::oSenderController:oModel() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getBuffer(); oClass:AddInline( "getBuffer", {|Self, cColumn | ( ( Self ) ), ( ::getModel():getBuffer( cColumn ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setItems(); oClass:AddMethod( "setItems", @RecordController_setItems(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Edit(); oClass:AddMethod( "Edit", @RecordController_Edit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RecordController ;



static FUNCTION RecordController_New( oController ) ; local Self AS CLASS RecordController := QSelf() AS CLASS RecordController

   ::Super:New( oController )

   ::oDialogView           := RecordView():New( self )

RETURN ( Self )



static FUNCTION RecordController_Edit( ) ; local Self AS CLASS RecordController := QSelf() AS CLASS RecordController

   ::setItems()

   ::oDialogView:Activate()

RETURN ( nil )



static FUNCTION RecordController_setItems( ) ; local Self AS CLASS RecordController := QSelf() AS CLASS RecordController

   local aItems   := {}



   aadd( aItems,  {  "clave"  => "empresa", "valor"  => ::getBuffer( "empresa" ), "tipo"   => "C" } )



   aadd( aItems,  {  "clave"  => "id", "valor"  => alltrim(str( ::getBuffer( "id" ) ) ), "tipo"   => "C" } )



   aadd( aItems,  {  "clave"  => "uuid", "valor"  => ::getBuffer( "uuid" ), "tipo"   => "C" } )



   aadd( aItems,  {  "clave"  => "creado", "valor"  => hb_ttoc( ::getBuffer( "creado" ) ), "tipo"   => "D" } )



   aadd( aItems,  {  "clave"  => "modificado", "valor"  => hb_ttoc( ::getBuffer( "modificado" ) ), "tipo"   => "D" } )




   aadd( aItems,  {  "clave"  => "enviado", "valor"  => hb_ttoc( ::getBuffer( "enviado" ) ), "tipo"   => "B", "lista"  => { "NULL" } } )

   ::oDialogView:setItems( aItems )

RETURN ( nil )








_HB_CLASS RecordView ; function RecordView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RecordView", iif( .T., { @ConfiguracionesView() }, { @HBObject() } ), @RecordView() ) ) ;

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RecordView ;