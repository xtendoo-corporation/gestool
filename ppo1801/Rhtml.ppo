#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Rhtml.prg"
_HB_CLASS TRHtml ; function TRHtml ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRHtml", iif( .F., { }, { @HBObject() } ), @TRHtml() ) ) ;

     _HB_MEMBER { hDC } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDC"}, .F. )
     _HB_MEMBER { aPreRows } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aPreRows"}, .F. )
     _HB_MEMBER { aPosRows } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aPosRows"}, .F. )
     _HB_MEMBER { aRows } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aRows"}, .F. )
     _HB_MEMBER { cDocument } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDocument"}, .F. )
     _HB_MEMBER { cFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFile"}, .F. )
     _HB_MEMBER { nHeight } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nHeight"}, .F. )
     _HB_MEMBER { nWidth } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nWidth"}, .F. )

     _HB_MEMBER New( cFile) AS CLASS TRHtml; oClass:AddMethod( "New", @TRHtml_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER StartPage(); oClass:AddInline( "StartPage", {|Self | ( ( Self ) ), Afill(::aRows,"") }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
     _HB_MEMBER EndPage() ; oClass:AddVirtual( "EndPage" )

     _HB_MEMBER End() ; oClass:AddVirtual( "End" )

     _HB_MEMBER Say( nRow, nCol, cText, oFont, nPad); oClass:AddMethod( "Say", @TRHtml_Say(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


     _HB_MEMBER SetHeight(); oClass:AddInline( "SetHeight", {|Self, nHeight | ( ( Self ) ), aSize(::aRows, nHeight) , ::StartPage() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER GetTextWidth(); oClass:AddInline( "GetTextWidth", {|Self, cText | ( ( Self ) ), len(cText) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
     _HB_MEMBER GetTextHeight(); oClass:AddInline( "GetTextHeight", {|Self, cText | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER SetSize(); oClass:AddInline( "SetSize", {|Self, nWidth, nHeight | ( ( Self ) ), ( ::nWidth  := nWidth, ::SetHeight( nHeight ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER GetPhySize(); oClass:AddInline( "GetPhySize", {|Self | ( ( Self ) ), ({::nWidth, ::nHeight}) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER CharWidth(); oClass:AddInline( "CharWidth", {|Self | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
     _HB_MEMBER CharHeight(); oClass:AddInline( "CharHeight", {|Self | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER nVertRes(); oClass:AddInline( "nVertRes", {|Self | ( ( Self ) ), ::nHeight }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
     _HB_MEMBER nHorzRes(); oClass:AddInline( "nHorzRes", {|Self | ( ( Self ) ), ::nWidth }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER nVertSize(); oClass:AddInline( "nVertSize", {|Self | ( ( Self ) ), (::nHeight * 25.4) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
     _HB_MEMBER nHorzSize(); oClass:AddInline( "nHorzSize", {|Self | ( ( Self ) ), (::nWidth  * 25.4) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER nLogPixelX(); oClass:AddInline( "nLogPixelX", {|Self | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
     _HB_MEMBER nLogPixelY(); oClass:AddInline( "nLogPixelY", {|Self | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER CharSay(); oClass:AddInline( "CharSay", {|Self, nRow, nCol, cText | ( ( Self ) ), ::Say(nRow, nCol, cText) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER GetOrientation(); oClass:AddInline( "GetOrientation", {|Self | ( ( Self ) ), 2 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER SayBitmap() ; oClass:AddVirtual( "SayBitmap" )
     _HB_MEMBER SetPos() ; oClass:AddVirtual( "SetPos" )
     _HB_MEMBER Line() ; oClass:AddVirtual( "Line" )
     _HB_MEMBER Box() ; oClass:AddVirtual( "Box" )

     _HB_MEMBER SetPixelMode() ; oClass:AddVirtual( "SetPixelMode" )
     _HB_MEMBER SetTwipsMode() ; oClass:AddVirtual( "SetTwipsMode" )

     _HB_MEMBER SetLoInchMode() ; oClass:AddVirtual( "SetLoInchMode" )
     _HB_MEMBER SetHiInchMode() ; oClass:AddVirtual( "SetHiInchMode" )

     _HB_MEMBER SetLoMetricMode() ; oClass:AddVirtual( "SetLoMetricMode" )
     _HB_MEMBER SetHiMetricMode() ; oClass:AddVirtual( "SetHiMetricMode" )

     _HB_MEMBER SetIsotropicMode() ; oClass:AddVirtual( "SetIsotropicMode" )
     _HB_MEMBER SetAnisotropicMode() ; oClass:AddVirtual( "SetAnisotropicMode" )

     _HB_MEMBER SetWindowExt() ; oClass:AddVirtual( "SetWindowExt" )

     _HB_MEMBER SetViewPortExt() ; oClass:AddVirtual( "SetViewPortExt" )

     _HB_MEMBER FillRect() ; oClass:AddVirtual( "FillRect" )

     _HB_MEMBER SetLandscape() ; oClass:AddVirtual( "SetLandscape" )
     _HB_MEMBER SetPortrait() ; oClass:AddVirtual( "SetPortrait" )
     _HB_MEMBER SetCopies( nCopies) ; oClass:AddVirtual( "SetCopies" )
     _HB_MEMBER Setup() ; oClass:AddVirtual( "Setup" )
     _HB_MEMBER Rebuild() ; oClass:AddVirtual( "Rebuild" )
     _HB_MEMBER Font( oFont) ; oClass:AddVirtual( "Font" )

     _HB_MEMBER Inch2Pix() ; oClass:AddVirtual( "Inch2Pix" )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRHtml ;



static FUNCTION TRHtml_New( cFile ) ; local Self AS CLASS TRHtml := QSelf() AS CLASS TRHtml

     ::cFile    := cFile

     ::nHeight  := 64
     ::nWidth   := 80

     ::hDC      := fCreate( ::cFile )

     IF ::hDC < 0
          ::hDC := 0
     ENDIF

     fWrite(::hDC, "<HTML>" + Chr(13)+Chr(10) )
     fWrite(::hDC, "<HEAD>" + Chr(13)+Chr(10) )
     fWrite(::hDC, "<TITLE>" + cFile + "</TITLE>" )
     fWrite(::hDC, "</HTML>" + Chr(13)+Chr(10) )
     fWrite(::hDC, "</HEAD>" + Chr(13)+Chr(10) )

     ::aRows      := Array(::nHeight)
     ::aPreRows   := Array(::nHeight)
     ::aPosRows   := Array(::nHeight)

RETURN NIL



static FUNCTION TRHtml_Say( nRow, nCol, cText, oFont, nMaxSize, nPad ) ; local Self AS CLASS TRHtml := QSelf() AS CLASS TRHtml

     If( nMaxSize == nil, nMaxSize := len(cText), ) ;

     fWrite(::hDC, '<TABLE BORDER="1" >' + Chr(13)+Chr(10) )


     cText := AnsiToXml( cText, nCol, nPad )







     nRow++

     IF nRow > len(::aRows) .OR. nRow < 1
          RETU NIL
     ENDIF

     ::aRows[nRow] += cText

RETURN NIL



static function AnsiToXml( cText, nRow )

   cText := "<nCol" + lTrim( Str( nRow, 3 ) ) + ">" + cText + "</nCol" + lTrim( Str( nRow, 3 ) ) + ">"

return ( cText )
