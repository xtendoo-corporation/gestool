#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\Roles.prg"
_HB_CLASS TRoles ; function TRoles ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRoles", iif( .T., { @TMant() }, { @HBObject() } ), @TRoles() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "GC_ID_CARDS_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )
   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 33 + ( 115 * 256 ) + ( 70 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )

   _HB_MEMBER { oGetNombre } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetNombre"}, .F. )

   _HB_MEMBER { aComboPermisos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aComboPermisos"}, .F. )
   _HB_MEMBER { oComboPermisos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oComboPermisos"}, .F. )
   _HB_MEMBER { cComboPermisos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cComboPermisos"}, .F. )

   _HB_MEMBER { oVieRnt } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oVieRnt"}, .F. )
   _HB_MEMBER { lVieRnt } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVieRnt"}, .F. )
   _HB_MEMBER { oChgPrc } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oChgPrc"}, .F. )
   _HB_MEMBER { lChgPrc } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lChgPrc"}, .F. )
   _HB_MEMBER { oVieCos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oVieCos"}, .F. )
   _HB_MEMBER { lVieCos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVieCos"}, .F. )
   _HB_MEMBER { oConfDel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oConfDel"}, .F. )
   _HB_MEMBER { lConfDel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lConfDel"}, .F. )
   _HB_MEMBER { oVtaUsr } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oVtaUsr"}, .F. )
   _HB_MEMBER { lVtaUsr } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVtaUsr"}, .F. )
   _HB_MEMBER { oOpnCaj } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOpnCaj"}, .F. )
   _HB_MEMBER { lOpnCaj } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lOpnCaj"}, .F. )
   _HB_MEMBER { oCobTct } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCobTct"}, .F. )
   _HB_MEMBER { lCobTct } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lCobTct"}, .F. )
   _HB_MEMBER { oFastCob } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFastCob"}, .F. )
   _HB_MEMBER { lFastCob } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFastCob"}, .F. )
   _HB_MEMBER { oEstAlb } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstAlb"}, .F. )
   _HB_MEMBER { lEstAlb } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lEstAlb"}, .F. )
   _HB_MEMBER { oAssGFac } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAssGFac"}, .F. )
   _HB_MEMBER { lAssGFac } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAssGFac"}, .F. )
   _HB_MEMBER { oChgSta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oChgSta"}, .F. )
   _HB_MEMBER { lChgSta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lChgSta"}, .F. )
   _HB_MEMBER { oChgFld } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oChgFld"}, .F. )
   _HB_MEMBER { lChgFld } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lChgFld"}, .F. )
   _HB_MEMBER { oNotCom } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oNotCom"}, .F. )
   _HB_MEMBER { lNotCom } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lNotCom"}, .F. )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TRoles_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem); oClass:AddMethod( "New", @TRoles_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create( cPath); oClass:AddMethod( "Create", @TRoles_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TRoles_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TRoles_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPresave(); oClass:AddMethod( "lPresave", @TRoles_lPresave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Config(); oClass:AddMethod( "Config", @TRoles_Config(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SaveConfig(); oClass:AddMethod( "SaveConfig", @TRoles_SaveConfig(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRoles ;



static FUNCTION TRoles_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "ROLES.DBF", "ROLES" ):New( "ROLES.DBF",, ( cDriver ), "Roles", ( cPath ) )

      ::oDbf:AddField( "uuid", "C", 40, 0,, win_uuidcreatestring(),,, "Identificador", .F.,, .T., {} )
      ::oDbf:AddField( "nombre", "C", 100, 0,,,,, "Nombre", .F., 250, .F., {} )
      ::oDbf:AddField( "permuuid", "C", 40, 0,,,,, "Uuid permisos", .F.,, .T., {} )
      ::oDbf:AddField( "lVieRnt", "L", 1, 0,,,,, "Mostrar rentabilidad", .F.,, .T., {} )
      ::oDbf:AddField( "lChgPrc", "L", 1, 0,,,,, "Cambiar precios", .F.,, .T., {} )
      ::oDbf:AddField( "lVieCos", "L", 1, 0,,,,, "Ver precios de costo", .F.,, .T., {} )
      ::oDbf:AddField( "lConfDel", "L", 1, 0,,,,, "Confirmar eliminación", .F.,, .T., {} )
      ::oDbf:AddField( "lVtaUsr", "L", 1, 0,,,,, "Filtrar ventas por usuarios", .F.,, .T., {} )
      ::oDbf:AddField( "lOpnCaj", "L", 1, 0,,,,, "Abrir cajón", .F.,, .T., {} )
      ::oDbf:AddField( "lCobTct", "L", 1, 0,,,,, "Cobrar en táctil", .F.,, .T., {} )
      ::oDbf:AddField( "lEstAlb", "L", 1, 0,,,,, "Estado albarán entregado", .F.,, .T., {} )
      ::oDbf:AddField( "lAssGFac", "L", 1, 0,,,,, "Asistente generar facturas", .F.,, .T., {} )
      ::oDbf:AddField( "lChgSta", "L", 1, 0,,,,, "Cambiar estado", .F.,, .T., {} )
      ::oDbf:AddField( "lChgFld", "L", 1, 0,,,,, "Cambiar campos", .F.,, .T., {} )
      ::oDbf:AddField( "lNotCom", "L", 1, 0,,,,, "No imprimir comandas", .F.,, .T., {} )
      ::oDbf:AddField( "lFastCob", "L", 1, 0,,,,, "Mostrar cobors rápidos", .F.,, .T., {} )

      ::oDbf:AddIndex( "nombre", "ROLES.CDX", "Nombre",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TRoles_New( cPath, oWndParent, oMenuItem ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;
   If( oMenuItem == nil, oMenuItem := "roles", ) ;

   if Empty( ::nLevel )
      ::nLevel          := Auth():Level( oMenuItem )
   end





   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil
   ::lReport            := .F.

   ::aComboPermisos     := PermisosModel():getNameList()

   ::cHtmlHelp          := "Roles"

RETURN ( Self )



static FUNCTION TRoles_Create( cPath ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



static FUNCTION TRoles_Activate( ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles

   if !Auth():isSuperAdmin()
      MsgStop( "Solo puede acceder el ususario Super administrador" )
      Return ( Self )
   end

   if nAnd( ::nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end





   if ::oWndParent <> nil
      ::oWndParent:CloseAll()
   end

   if Empty( ::oDbf ) .OR. !::oDbf:Used()
      ::lOpenFiles      := ::OpenFiles()
   end





   if ::lOpenFiles

      ::CreateShell( ::nLevel )

      ::oWndBrw:GralButtons( Self )






      ::oWndBrw:NewAt( "CNFCLI",,, {||( ::Config() )}, "Confi(g)uración", "G",,, 4,, .F. )

      ::oWndBrw:EndButtons( Self )

      if ::cHtmlHelp <> nil
         ::oWndBrw:cHtmlHelp  := ::cHtmlHelp
      end

      ::oWndBrw:Activate( nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, {|| ::CloseFiles() } )

   end

RETURN ( Self )



static FUNCTION TRoles_Resource( nMode ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles

   local oDlg
   local oBmp

   ::cComboPermisos     := PermisosModel():getNombre( ::oDbf:permuuid )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "rol", "ROL",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmp := TBitmap():ReDefine( 900, "GC_ID_CARDS_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )




      ::oGetNombre := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:nombre, ::oDbf:nombre:= u ) }, oDlg,,,,,,,,, .F., {||        ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      ::oComboPermisos := TComboBox():ReDefine( 120, { | u | If( PCount()==0, ::cComboPermisos, ::cComboPermisos:= u ) }, ::aComboPermisos, oDlg,,,,,,, .F., {||        ( nMode <> 3 )},,,,,, "::oComboPermisos",,,,,,, )





      TButton():ReDefine( 1, {||( if( ::lPresave(), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| if( ::lPresave(), oDlg:end( 1 ), ) } )
      end

      oDlg:bStart       := {|| ::oGetNombre:SetFocus()  }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:end()
   end

RETURN ( oDlg:nResult == 1 )



static FUNCTION TRoles_lPresave( ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles

   if Empty( ::oDbf:nombre )
      MsgStop( "El campo nombre es obligatorio" )
      ::oGetNombre:SetFocus()
      Return .F.
   end

   if Empty( ::oComboPermisos:VarGet() )
      ::oDbf:permuuid   := ""
   else
      ::oDbf:permuuid   := PermisosModel():getuuid( ::oComboPermisos:VarGet() )
   end

RETURN ( .T. )



static FUNCTION TRoles_Config( ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles

   local oDlg
   local oBmp

   ::lVieRnt         := ::oDbf:lVieRnt
   ::lChgPrc         := ::oDbf:lChgPrc
   ::lVieCos         := ::oDbf:lVieCos
   ::lConfDel        := ::oDbf:lConfDel
   ::lVtaUsr         := ::oDbf:lVtaUsr
   ::lOpnCaj         := ::oDbf:lOpnCaj
   ::lCobTct         := ::oDbf:lCobTct
   ::lFastCob        := ::oDbf:lFastCob
   ::lEstAlb         := ::oDbf:lEstAlb
   ::lAssGFac        := ::oDbf:lAssGFac
   ::lChgSta         := ::oDbf:lChgSta
   ::lChgFld         := ::oDbf:lChgFld
   ::lNotCom         := ::oDbf:lNotCom

   oDlg = TDialog():New(,,,, "Configuraciones", "CFG_ROL",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oBmp := TBitmap():ReDefine( 500, "gc_wrench_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )




      ::oVieRnt := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, ::lVieRnt, ::lVieRnt:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oChgPrc := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, ::lChgPrc, ::lChgPrc:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oVieCos := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, ::lVieCos, ::lVieCos:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oConfDel := TCheckBox():ReDefine( 140, { | u | If( PCount()==0, ::lConfDel, ::lConfDel:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oVtaUsr := TCheckBox():ReDefine( 150, { | u | If( PCount()==0, ::lVtaUsr, ::lVtaUsr:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oOpnCaj := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, ::lOpnCaj, ::lOpnCaj:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oCobTct := TCheckBox():ReDefine( 170, { | u | If( PCount()==0, ::lCobTct, ::lCobTct:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oFastCob := TCheckBox():ReDefine( 230, { | u | If( PCount()==0, ::lFastCob, ::lFastCob:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oEstAlb := TCheckBox():ReDefine( 180, { | u | If( PCount()==0, ::lEstAlb, ::lEstAlb:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oAssGFac := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, ::lAssGFac, ::lAssGFac:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oChgSta := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, ::lChgSta, ::lChgSta:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oChgFld := TCheckBox():ReDefine( 210, { | u | If( PCount()==0, ::lChgFld, ::lChgFld:= u ) }, oDlg,,,,,,, .F.,, .F. )




      ::oNotCom := TCheckBox():ReDefine( 220, { | u | If( PCount()==0, ::lNotCom, ::lNotCom:= u ) }, oDlg,,,,,,, .F.,, .F. )




      TButton():ReDefine( 1, {||( ::SaveConfig(), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| ::SaveConfig(), oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:end()
   end

RETURN ( oDlg:nResult == 1 )



static FUNCTION TRoles_SaveConfig( ) ; local Self AS CLASS TRoles := QSelf() AS CLASS TRoles














   RolesModel():updateConfig( ::odbf:uuid, ::lVieRnt , ::lChgPrc , ::lVieCos , ::lConfDel , ::lVtaUsr , ::lOpnCaj , ::lCobTct , ::lEstAlb , ::lAssGFac , ::lChgSta , ::lChgFld , ::lNotCom , ::lFastCob )

RETURN ( nil )







_HB_CLASS RolesModel ; function RolesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "RolesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @RolesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "roles" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, uuid | ( ( Self ) ), ( ::getField( "nombre", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getuuid(); oClass:AddInline( "getuuid", {|Self, nombre | ( ( Self ) ), ( ::getField( "uuid", "nombre", nombre ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNameList(); oClass:AddMethod( "getNameList", @RolesModel_getNameList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InsertFromHashSql( hHash); oClass:AddMethod( "InsertFromHashSql", @RolesModel_InsertFromHashSql(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lExisteUuid( uuid); oClass:AddMethod( "lExisteUuid", @RolesModel_lExisteUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateConfig(); oClass:AddMethod( "updateConfig", @RolesModel_updateConfig(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLogic(); oClass:AddInline( "getLogic", {|Self, uuid, cFld | ( ( Self ) ), ( if( Empty( uuid ), .T., ::getField( cFld, "uuid", uuid ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolMostrarRentabilidad(); oClass:AddInline( "getRolMostrarRentabilidad", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lVieRnt" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoMostrarRentabilidad(); oClass:AddInline( "getRolNoMostrarRentabilidad", {|Self, uuid | ( ( Self ) ), ( !::getRolMostrarRentabilidad( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolCambiarPrecios(); oClass:AddInline( "getRolCambiarPrecios", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lChgPrc" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoCambiarPrecios(); oClass:AddInline( "getRolNoCambiarPrecios", {|Self, uuid | ( ( Self ) ), ( !::getRolCambiarPrecios( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolVerPreciosCosto(); oClass:AddInline( "getRolVerPreciosCosto", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lVieCos" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoVerPreciosCosto(); oClass:AddInline( "getRolNoVerPreciosCosto", {|Self, uuid | ( ( Self ) ), ( !::getRolVerPreciosCosto( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolConfirmacionEliminacion(); oClass:AddInline( "getRolConfirmacionEliminacion", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lConfDel" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoConfirmacionEliminacion(); oClass:AddInline( "getRolNoConfirmacionEliminacion", {|Self, uuid | ( ( Self ) ), ( !::getRolConfirmacionEliminacion( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolFiltrarVentas(); oClass:AddInline( "getRolFiltrarVentas", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lVtaUsr" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoFiltrarVentas(); oClass:AddInline( "getRolNoFiltrarVentas", {|Self, uuid | ( ( Self ) ), ( !::getRolFiltrarVentas( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolAbrirCajonPortamonedas(); oClass:AddInline( "getRolAbrirCajonPortamonedas", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lOpnCaj" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolCobrarEnTactil(); oClass:AddInline( "getRolCobrarEnTactil", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lCobTct" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoMostrarCobrosRapidos(); oClass:AddInline( "getRolNoMostrarCobrosRapidos", {|Self, uuid | ( ( Self ) ), ( if( Empty( uuid ), .F., ::getField( "lFastCob", "uuid", uuid ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolAlbaranEntregado(); oClass:AddInline( "getRolAlbaranEntregado", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lEstAlb" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoAlbaranEntregado(); oClass:AddInline( "getRolNoAlbaranEntregado", {|Self, uuid | ( ( Self ) ), ( !::getRolAlbaranEntregado( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolAsistenteGenerarFacturas(); oClass:AddInline( "getRolAsistenteGenerarFacturas", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lAssGFac" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoAsistenteGenerarFacturas(); oClass:AddInline( "getRolNoAsistenteGenerarFacturas", {|Self, uuid | ( ( Self ) ), ( !::getRolAsistenteGenerarFacturas( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolCambiarEstado(); oClass:AddInline( "getRolCambiarEstado", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lChgSta" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoCambiarEstado(); oClass:AddInline( "getRolNoCambiarEstado", {|Self, uuid | ( ( Self ) ), ( !::getRolCambiarEstado( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolCambiarCampos(); oClass:AddInline( "getRolCambiarCampos", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lChgFld" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getRolNoCambiarCampos(); oClass:AddInline( "getRolNoCambiarCampos", {|Self, uuid | ( ( Self ) ), ( !::getRolCambiarCampos( uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getRolNotComandas(); oClass:AddInline( "getRolNotComandas", {|Self, uuid | ( ( Self ) ), ( ::getLogic( uuid, "lNotCom" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS RolesModel ;



static FUNCTION RolesModel_getNameList( ) ; local Self AS CLASS RolesModel := QSelf() AS CLASS RolesModel

   local aNames   := { "" }
   local cStm     := "getNameList"
   local cSql     := "SELECT nombre FROM " + ::getTableName()

   if ::ExecuteSqlStatement( cSql, @cStm )

      ( cStm )->( dbGoTop() )

      while !( cStm )->( Eof() )

         aAdd( aNames, ( cStm )->nombre )

         ( cStm )->( dbSkip() )

      end

   end

RETURN ( aNames )



static FUNCTION RolesModel_InsertFromHashSql( hHash ) ; local Self AS CLASS RolesModel := QSelf() AS CLASS RolesModel

   local cStm     := "InsertFromHashSql"
   local cSql     := ""

   if !Empty( hHash ) .AND. !::lExisteUuid( hGet( hHash, "uuid" ) )

      cSql         := "INSERT INTO " + ::getTableName()
      cSql         += " ( uuid, nombre, permuuid ) VALUES "
      cSql         += " ( " + quoted( hGet( hHash, "uuid" ) )
      cSql         += ", " + quoted( hGet( hHash, "nombre" ) )
      cSql         += ", " + quoted( hGet( hHash, "permiso_uuid" ) ) + " )"

      ::ExecuteSqlStatement( cSql, @cStm )

   end

Return ( nil )



static FUNCTION RolesModel_lExisteUuid( uuid ) ; local Self AS CLASS RolesModel := QSelf() AS CLASS RolesModel

   local cStm     := "lExisteUuid"
   local cSql     := ""

   cSql     := "SELECT * FROM " + ::getTableName() + " WHERE uuid = " + quoted( uuid )

      if ::ExecuteSqlStatement( cSql, @cStm )

         if ( cStm )->( RecCount() ) > 0
            Return ( .T. )
         end

      end

Return ( .F. )



static FUNCTION RolesModel_updateConfig( uuid, lVieRnt, lChgPrc, lVieCos, lConfDel, lVtaUsr, lOpnCaj, lCobTct, lEstAlb, lAssGFac, lChgSta, lChgFld, lNotCom, lFastCob ) ; local Self AS CLASS RolesModel := QSelf() AS CLASS RolesModel

   local cStm     := "UpdateRol"
   local cSql     := ""

   cSql           := "UPDATE " + ::getTableName() + " SET"
   cSql           += " lVieRnt = " + if( lVieRnt, ".t.", ".f." ) + ","
   cSql           += " lChgPrc = " + if( lChgPrc, ".t.", ".f." ) + ","
   cSql           += " lVieCos = " + if( lVieCos, ".t.", ".f." ) + ","
   cSql           += " lConfDel = " + if( lConfDel, ".t.", ".f." ) + ","
   cSql           += " lVtaUsr = " + if( lVtaUsr, ".t.", ".f." ) + ","
   cSql           += " lOpnCaj = " + if( lOpnCaj, ".t.", ".f." ) + ","
   cSql           += " lCobTct = " + if( lCobTct, ".t.", ".f." ) + ","
   cSql           += " lEstAlb = " + if( lEstAlb, ".t.", ".f." ) + ","
   cSql           += " lAssGFac = " + if( lAssGFac, ".t.", ".f." ) + ","
   cSql           += " lChgSta = " + if( lChgSta, ".t.", ".f." ) + ","
   cSql           += " lChgFld = " + if( lChgFld, ".t.", ".f." ) + ","
   cSql           += " lNotCom = " + if( lNotCom, ".t.", ".f." ) + ","
   cSql           += " lFastCob = " + if( lFastCob, ".t.", ".f." )
   cSql           += " WHERE uuid = " + quoted( uuid )

   ::ExecuteSqlStatement( cSql, @cStm )

Return ( nil )
