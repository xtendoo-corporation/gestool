#line 91 "\fwh1801\include\Fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\Prg\Reports\SQLBaseReport.prg"
_HB_CLASS SQLBaseReport ; function SQLBaseReport ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLBaseReport", iif( .F., { }, { @HBObject() } ), @SQLBaseReport() ) ) ;

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER { cDirectory } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDirectory"}, .F. )

   _HB_MEMBER { cFileName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileName"}, .F. )

   _HB_MEMBER { oEvents } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEvents"}, .F. )

   _HB_MEMBER { oFastReport } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFastReport"}, .F. )

   _HB_MEMBER { cReport } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cReport"}, .F. )

   _HB_MEMBER { cPrinter } ; oClass:AddMultiData(, ( ImpresoraDefectoUsuario() ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPrinter"}, .F. )

   _HB_MEMBER { nCopies } ; oClass:AddMultiData(, 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCopies"}, .F. )

   _HB_MEMBER { cDevice } ; oClass:AddMultiData(, 2, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDevice"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @SQLBaseReport_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @SQLBaseReport_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createFastReport(); oClass:AddMethod( "createFastReport", @SQLBaseReport_createFastReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyFastReport(); oClass:AddInline( "destroyFastReport", {|Self | ( ( Self ) ), ( ::oFastReport:destroyFr(), ::oFastReport := nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setFastReport(); oClass:AddInline( "setFastReport", {|Self, oFastReport | ( ( Self ) ), ( ::oFastReport := oFastReport ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFastReport(); oClass:AddInline( "getFastReport", {|Self | ( ( Self ) ), ( ::oFastReport ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setDirectory(); oClass:AddInline( "setDirectory", {|Self, cDirectory | ( ( Self ) ), ( ::cDirectory := cDirectory ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDirectory(); oClass:AddInline( "getDirectory", {|Self | ( ( Self ) ), ( ::cDirectory ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setFileName(); oClass:AddInline( "setFileName", {|Self, cFileName | ( ( Self ) ), ( ::cFileName := cFileName ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFileName(); oClass:AddInline( "getFileName", {|Self | ( ( Self ) ), ( ::cFileName ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFullPathFileName(); oClass:AddInline( "getFullPathFileName", {|Self | ( ( Self ) ), ( ::cDirectory + ::cFileName + if( !( ".fr3" $ lower( ::cFileName ) ), ".fr3", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setReport(); oClass:AddInline( "setReport", {|Self, cReport | ( ( Self ) ), ( ::cReport := cReport ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getReport(); oClass:AddInline( "getReport", {|Self | ( ( Self ) ), ( ::cReport ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setPrinter(); oClass:AddInline( "setPrinter", {|Self, cPrinter | ( ( Self ) ), ( ::cPrinter := cPrinter ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getPrinter(); oClass:AddInline( "getPrinter", {|Self | ( ( Self ) ), ( ::cPrinter ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCopies(); oClass:AddInline( "setCopies", {|Self, nCopies | ( ( Self ) ), ( ::nCopies := nCopies ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCopies(); oClass:AddInline( "getCopies", {|Self | ( ( Self ) ), ( ::nCopies ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setDevice(); oClass:AddInline( "setDevice", {|Self, cDevice | ( ( Self ) ), ( ::cDevice := cDevice ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDevice(); oClass:AddInline( "getDevice", {|Self | ( ( Self ) ), ( ::cDevice ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getIds(); oClass:AddInline( "getIds", {|Self | ( ( Self ) ), ( iif( !empty( ::oController ), ::oController:getIds(), {} ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadDocuments(); oClass:AddMethod( "loadDocuments", @SQLBaseReport_loadDocuments(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Show(); oClass:AddMethod( "Show", @SQLBaseReport_Show(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Design(); oClass:AddMethod( "Design", @SQLBaseReport_Design(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isLoad(); oClass:AddMethod( "isLoad", @SQLBaseReport_isLoad(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @SQLBaseReport_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Save(); oClass:AddMethod( "Save", @SQLBaseReport_Save(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER buildRowSet() ; oClass:AddVirtual( "buildRowSet" )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLBaseReport ;



static FUNCTION SQLBaseReport_New( oController ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   ::oController                          := oController

   ::oEvents                              := Events():New()

RETURN ( Self )



static FUNCTION SQLBaseReport_End( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   ::oEvents:End()

RETURN ( nil )



static FUNCTION SQLBaseReport_createFastReport( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   ::oEvents:fire( "creatingFastReport" )

   ::oFastReport := frReportManager():New()

   ::oFastReport:ClearDataSets()

   ::oFastReport:LoadLangRes( "Spanish.Xml" )

   ::oFastReport:SetProperty( "Designer.DefaultFont", "Name", "Verdana")

   ::oFastReport:SetProperty( "Designer.DefaultFont", "Size", 10)

   ::oFastReport:SetIcon( 1 )

   ::oFastReport:SetTitle( "Diseñador de documentos" )



   ::oEvents:fire( "createdFastReport" )

RETURN ( Self )



static FUNCTION SQLBaseReport_isLoad( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   if empty( ::cDirectory )
      msgStop( "El directorio " + ::cDirectory + " está vacío." )
      RETURN ( .F. )
   end

   if empty( ::cFileName )
      msgStop( "El fichero " + ::cFileName + " está vacío." )
      RETURN ( .F. )
   end

   if !file( ::getFullPathFileName() )
      msgStop( "El fichero " + ::getFullPathFileName() + " no existe." )
      RETURN ( .F. )
   end

   ::oEvents:fire( "loadingFromFile" )

   ::oFastReport:loadFromFile( ::getFullPathFileName() )

   ::oEvents:fire( "loadedFromFile" )

RETURN ( .T. )



static FUNCTION SQLBaseReport_Create( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   ::oFastReport:SetProperty(     "Report",            "ScriptLanguage",   "PascalScript" )

   ::oFastReport:AddPage(         "MainPage" )

   ::oFastReport:AddBand(         "CabeceraDocumento", "MainPage",         2 )
   ::oFastReport:SetProperty(     "CabeceraDocumento", "Top",              0 )
   ::oFastReport:SetProperty(     "CabeceraDocumento", "Height",           100 )

   ::oFastReport:AddBand(         "MasterData",        "MainPage",         6 )
   ::oFastReport:SetProperty(     "MasterData",        "Top",              100 )
   ::oFastReport:SetProperty(     "MasterData",        "Height",           100 )
   ::oFastReport:SetProperty(     "MasterData",        "StartNewPage",     .T. )

   ::oFastReport:AddBand(         "DetalleColumnas",   "MainPage",         7  )
   ::oFastReport:SetProperty(     "DetalleColumnas",   "Top",              230 )
   ::oFastReport:SetProperty(     "DetalleColumnas",   "Height",           28 )
   ::oFastReport:SetProperty(     "DetalleColumnas",   "OnMasterDetail",   "DetalleOnMasterDetail" )

   ::oFastReport:AddBand(         "PieDocumento",      "MainPage",         3 )
   ::oFastReport:SetProperty(     "PieDocumento",      "Top",              930 )
   ::oFastReport:SetProperty(     "PieDocumento",      "Height",           100 )

RETURN ( .T. )



static FUNCTION SQLBaseReport_Save( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   ::oFastReport:SaveToFile( ::getFullPathFileName() )

RETURN ( .T. )



static FUNCTION SQLBaseReport_Show( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   ::oFastReport:PrepareReport()

   do case
      case ::getDevice() == 2

         ::oEvents:fire( "showing" )

         ::oFastReport:showPreparedReport()

         ::oEvents:fire( "showed" )

      case ::getDevice() == 1

         ::oEvents:fire( "printing" )

         ::oFastReport:PrintOptions:SetPrinter(    ::getPrinter() )
         ::oFastReport:PrintOptions:SetCopies(     ::getCopies() )
         ::oFastReport:PrintOptions:SetShowDialog( .F. )
         ::oFastReport:Print()

         ::oEvents:fire( "printed" )

      case ::getDevice() == 3

         ::oEvents:fire( "generatingPdf" )

         ::oFastReport:SetProperty(  "PDFExport", "ShowDialog",       .F. )
         ::oFastReport:SetProperty(  "PDFExport", "DefaultPath",      cPatTmp() )
         ::oFastReport:SetProperty(  "PDFExport", "FileName",         "Doc" + trimedSeconds() + ".pdf" )
         ::oFastReport:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
         ::oFastReport:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
         ::oFastReport:SetProperty(  "PDFExport", "Outline",          .T. )
         ::oFastReport:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
         ::oFastReport:DoExport(     "PDFExport" )

         ::oEvents:fire( "generatedPdf" )

   end

RETURN ( Self )



static FUNCTION SQLBaseReport_Design( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   ::oEvents:fire( "designing" )

   ::oFastReport:DesignReport()

   ::oEvents:fire( "designed" )

RETURN ( Self )



static FUNCTION SQLBaseReport_loadDocuments( ) ; local Self AS CLASS SQLBaseReport := QSelf() AS CLASS SQLBaseReport

   local aFiles   := directory( ::getDirectory() + "*.fr3" )

   if empty( aFiles )
      RETURN ( self )
   end

   ::oDialogView:oListboxFile:setItems( {} )

   aeval( aFiles, {|aFile| ::oDialogView:oListboxFile:add( getFileNoExt( aFile[ 1 ] ) ) } )

   ::oDialogView:oListboxFile:goTop()

RETURN ( self )
