#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Repositories\SQLBaseRepository.prg"
_HB_CLASS SQLBaseRepository ; function SQLBaseRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLBaseRepository", iif( .F., { }, { @HBObject() } ), @SQLBaseRepository() ) ) ;

   _HB_MEMBER { oDatabase } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDatabase"}, .F. )

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @SQLBaseRepository_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End() ; oClass:AddVirtual( "End" )

   _HB_MEMBER getController(); oClass:AddInline( "getController", {|Self | ( ( Self ) ), ( ::oController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setDatabase(); oClass:AddInline( "setDatabase", {|Self, oDb | ( ( Self ) ), ( ::oDatabase := oDb ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDatabase(); oClass:AddInline( "getDatabase", {|Self | ( ( Self ) ), ( if( empty( ::oDatabase ), getSQLDatabase(), ::oDatabase ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getModel(); oClass:AddInline( "getModel", {|Self | ( ( Self ) ), ( ::getController():getModel() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getModelTableName(); oClass:AddInline( "getModelTableName", {|Self | ( ( Self ) ), ( ::getController():getModelTableName()  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAll(); oClass:AddMethod( "getAll", @SQLBaseRepository_getAll(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLBaseRepository ;



static FUNCTION SQLBaseRepository_New( oController ) ; local Self AS CLASS SQLBaseRepository := QSelf() AS CLASS SQLBaseRepository

   ::oController  := oController

Return ( Self )



static FUNCTION SQLBaseRepository_getAll( ) ; local Self AS CLASS SQLBaseRepository := QSelf() AS CLASS SQLBaseRepository

   local cSQL     := "SELECT * FROM " + ::getTableName()
   local hResult  := ::getDatabase():selectFetchHash( cSQL )

RETURN ( hResult )
