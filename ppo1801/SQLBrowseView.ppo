#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Views\Browsers\SQLBrowseView.prg"
_HB_CLASS SQLBrowseView ; function SQLBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLBrowseView", iif( .F., { }, { @HBObject() } ), @SQLBrowseView() ) ) ;

   _HB_MEMBER { oModel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oModel"}, .F. )

   _HB_MEMBER { oBrowse } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrowse"}, .F. )

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER { lFooter } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFooter"}, .F. )
   _HB_MEMBER { lFastEdit } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFastEdit"}, .F. )
   _HB_MEMBER { lMultiSelect } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lMultiSelect"}, .F. )
   _HB_MEMBER { nMarqueeStyle } ; oClass:AddMultiData(, 4, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMarqueeStyle"}, .F. )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @SQLBrowseView_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @SQLBrowseView_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @SQLBrowseView_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ActivateDialog(); oClass:AddMethod( "ActivateDialog", @SQLBrowseView_ActivateDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ActivateMDI(); oClass:AddMethod( "ActivateMDI", @SQLBrowseView_ActivateMDI(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setSize( nTop, nLeft, nRight, nBottom); oClass:AddMethod( "setSize", @SQLBrowseView_setSize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setFooter(); oClass:AddInline( "setFooter", {|Self, lFooter | ( ( Self ) ), ( ::lFooter := lFooter ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getBrowse(); oClass:AddInline( "getBrowse", {|Self | ( ( Self ) ), ( ::oBrowse ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getBrowseSelected(); oClass:AddInline( "getBrowseSelected", {|Self | ( ( Self ) ), ( ::oBrowse:aSelected ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER restoreStateFromModel(); oClass:AddInline( "restoreStateFromModel", {|Self | ( ( Self ) ), ( ::oBrowse:restoreStateFromModel() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnByHeader(); oClass:AddInline( "getColumnByHeader", {|Self, cHeader | ( ( Self ) ), ( ::oBrowse:getColumnByHeader( cHeader ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrder(); oClass:AddInline( "getColumnOrder", {|Self, cSortOrder | ( ( Self ) ), ( ::oBrowse:getColumnOrder( cSortOrder ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrderHeader(); oClass:AddInline( "getColumnOrderHeader", {|Self, cSortOrder | ( ( Self ) ), ( ::oBrowse:getColumnOrderHeader( cSortOrder ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setColumnOrder( cSortOrder); oClass:AddMethod( "setColumnOrder", @SQLBrowseView_setColumnOrder(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnHeaderByOrder( cSortOrder); oClass:AddMethod( "getColumnHeaderByOrder", @SQLBrowseView_getColumnHeaderByOrder(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrderByHeader(); oClass:AddInline( "getColumnOrderByHeader", {|Self, cHeader | ( ( Self ) ), ( ::oBrowse:getColumnOrderByHeader( cHeader ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectColumnOrder(); oClass:AddInline( "selectColumnOrder", {|Self, oCol | ( ( Self ) ), ( ::oBrowse:selectColumnOrder( oCol ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER refreshCurrent(); oClass:AddInline( "refreshCurrent", {|Self | ( ( Self ) ), ( ::oBrowse:refreshCurrent() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createFromCode(); oClass:AddInline( "createFromCode", {|Self | ( ( Self ) ), ( ::oBrowse:CreateFromCode() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER createFromResource(); oClass:AddInline( "createFromResource", {|Self, id | ( ( Self ) ), ( ::oBrowse:CreateFromResource( id ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setLDblClick(); oClass:AddInline( "setLDblClick", {|Self, bLDblClick | ( ( Self ) ), ( ::oBrowse:bLDblClick := bLDblClick ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setLDClickDatas(); oClass:AddInline( "setLDClickDatas", {|Self, bLDClickDatas | ( ( Self ) ), ( ::oBrowse:bLDClickDatas := bLDClickDatas ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Refresh(); oClass:AddInline( "Refresh", {|Self | ( ( Self ) ), ( if( !Empty( ::oBrowse ), ( ::oBrowse:makeTotals(), ::oBrowse:Refresh() ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER goTop(); oClass:AddInline( "goTop", {|Self | ( ( Self ) ), ( ::oBrowse:goTop() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setViewTypeToNavigator(); oClass:AddInline( "setViewTypeToNavigator", {|Self | ( ( Self ) ), ( ::oBrowse:setViewType( "navigator" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setViewTypeToSelector(); oClass:AddInline( "setViewTypeToSelector", {|Self | ( ( Self ) ), ( ::oBrowse:setViewType( "selector" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getViewType(); oClass:AddInline( "getViewType", {|Self | ( ( Self ) ), ( ::oBrowse:getViewType() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setController(); oClass:AddInline( "setController", {|Self, oController | ( ( Self ) ), ( ::oController := oController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getController(); oClass:AddInline( "getController", {|Self | ( ( Self ) ), ( ::oController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSenderController(); oClass:AddInline( "getSenderController", {|Self | ( ( Self ) ), ( ::oController:oSenderController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isNotSenderControllerZoomMode(); oClass:AddInline( "isNotSenderControllerZoomMode", {|Self | ( ( Self ) ), ( empty( ::getSenderController() ) .OR. ::getSenderController():isNotZoomMode() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getName(); oClass:AddInline( "getName", {|Self | ( ( Self ) ), ( ::getController():getName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getComboBoxOrder(); oClass:AddInline( "getComboBoxOrder", {|Self | ( ( Self ) ), ( if( !empty( ::oController ), ::oController:getComboBoxOrder(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMenuTreeView(); oClass:AddInline( "getMenuTreeView", {|Self | ( ( Self ) ), ( if( !empty( ::oController ), ::oController:getMenuTreeView(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getModel(); oClass:AddInline( "getModel", {|Self | ( ( Self ) ), ( ::getController():getModel() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getRowSet(); oClass:AddInline( "getRowSet", {|Self | ( ( Self ) ), ( ::getController():getRowSet() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER insertSelectedColumn(); oClass:AddMethod( "insertSelectedColumn", @SQLBrowseView_insertSelectedColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addColumns() ; oClass:AddVirtual( "addColumns" )

   _HB_MEMBER getColumnsHeaders(); oClass:AddMethod( "getColumnsHeaders", @SQLBrowseView_getColumnsHeaders(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getVisibleColumnsHeaders(); oClass:AddMethod( "getVisibleColumnsHeaders", @SQLBrowseView_getVisibleColumnsHeaders(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFirstColumnHeader(); oClass:AddMethod( "getFirstColumnHeader", @SQLBrowseView_getFirstColumnHeader(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSelectedCol(); oClass:AddInline( "getSelectedCol", {|Self | ( ( Self ) ), ( if( !empty( ::oBrowse ), ::oBrowse:SelectedCol(), nil ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER onKeyChar( nKey); oClass:AddMethod( "onKeyChar", @SQLBrowseView_onKeyChar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onClickHeader( oColumn); oClass:AddMethod( "onClickHeader", @SQLBrowseView_onClickHeader(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER saveIdToModel( nId); oClass:AddMethod( "saveIdToModel", @SQLBrowseView_saveIdToModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER gotoIdFromModel(); oClass:AddMethod( "gotoIdFromModel", @SQLBrowseView_gotoIdFromModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER saveColumnOrderToModel(); oClass:AddMethod( "saveColumnOrderToModel", @SQLBrowseView_saveColumnOrderToModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrderFromModel(); oClass:AddMethod( "getColumnOrderFromModel", @SQLBrowseView_getColumnOrderFromModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER saveColumnOrientationToModel(); oClass:AddMethod( "saveColumnOrientationToModel", @SQLBrowseView_saveColumnOrientationToModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrientationFromModel(); oClass:AddMethod( "getColumnOrientationFromModel", @SQLBrowseView_getColumnOrientationFromModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLBrowseView ;



static FUNCTION SQLBrowseView_New( oController ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   ::oController              := oController

RETURN ( Self )



static FUNCTION SQLBrowseView_End( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   ::saveIdToModel()

   ::saveColumnOrderToModel()

   ::saveColumnOrientationToModel()

   if !empty( ::oBrowse )
      ::oBrowse:End()
      ::oBrowse               := nil
   end

   Self                       := nil

RETURN ( nil )



static FUNCTION SQLBrowseView_Create( oWindow ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   If( oWindow == nil, oWindow := ::oController:getWindow(), ) ;

   if empty( ::getRowSet() )
      RETURN ( nil )
   endif

   ::oBrowse                  := SQLXBrowse():New( ::oController, oWindow )
   ::oBrowse:l2007            := .F.

   ::oBrowse:lRecordSelector  := .T.
   ::oBrowse:lAutoSort        := .T.
   ::oBrowse:lSortDescend     := .F.

   ::oBrowse:lFooter          := ::lFooter
   ::oBrowse:lFastEdit        := ::lFastEdit
   ::oBrowse:lMultiSelect     := ::lMultiSelect



   ::oBrowse:nMarqueeStyle    := ::nMarqueeStyle

   ::oBrowse:bClrStd          := {|| { 0, 16777215 } }
   ::oBrowse:bClrSel          := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   ::oBrowse:bClrSelFocus     := {|| { 0, ( 221 + ( 221 * 256 ) + ( 221 * 65536 ) ) } }

   ::oBrowse:bRClicked        := {| nRow, nCol, nFlags | ::RButtonDown( nRow, nCol, nFlags ) }

   ::oBrowse:setRowSet( ::getRowSet() )

   ::oBrowse:setName( ::getName() )

   ::oBrowse:bKeyChar         := {|nKey| ::getController():onKeyChar( nKey ) }

   if ::isNotSenderControllerZoomMode()
      ::setLDblClick( {|| ::getController():Edit(), ::Refresh() } )
   end

RETURN ( ::oBrowse )



static FUNCTION SQLBrowseView_getColumnsHeaders( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local aHeaders    := {}

   aeval( ::oBrowse:aCols, {|oCol| aadd( aHeaders, oCol:cHeader ) } )

RETURN ( aHeaders )



static FUNCTION SQLBrowseView_getVisibleColumnsHeaders( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local aHeaders    := {}

   aeval( ::oBrowse:aCols, {|oCol| if( oCol:lHide, , aadd( aHeaders, oCol:cHeader ) ) } )

RETURN ( aHeaders )



static FUNCTION SQLBrowseView_getFirstColumnHeader( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local oCol

   if hb_isarray( ::oBrowse:aCols )
      for each oCol in ::oBrowse:aCols
         if !( oCol:lHide ) .AND. !empty( oCol:cHeader )
            RETURN ( oCol:cHeader )
         end
      next
   end

RETURN ( "" )



static FUNCTION SQLBrowseView_onClickHeader( oColumn ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

RETURN ( ::getController():onChangeCombo( oColumn ) )



static FUNCTION SQLBrowseView_onKeyChar( nKey ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

RETURN ( heval( ::oController:oMenuTreeView:hFastKey, {|k,v| msgalert( nKey, "nKey" ), if( k == nKey, eval( v ), ) } ) )



static FUNCTION SQLBrowseView_ActivateDialog( oDialog, nId ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   ::Create( oDialog )

   ::setViewTypeToSelector()

   ::insertSelectedColumn()

   ::addColumns()

   ::CreateFromResource( nId )

RETURN ( Self )



static FUNCTION SQLBrowseView_ActivateMDI( oWindow, nTop, nLeft, nRight, nBottom ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   ::Create( oWindow )

   ::setViewTypeToNavigator()

   ::setSize( nTop, nLeft, nRight, nBottom )

   ::insertSelectedColumn()

   ::addColumns()

   ::CreateFromCode()

RETURN ( Self )



static FUNCTION SQLBrowseView_setSize( nTop, nLeft, nRight, nBottom ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   ::oBrowse:nStyle     := nOr( 1073741824, 268435456, 65536 )

   ::oBrowse:nTop       := nTop
   ::oBrowse:nLeft      := nLeft
   ::oBrowse:nRight     := nRight
   ::oBrowse:nBottom    := nBottom

RETURN ( self )



static FUNCTION SQLBrowseView_insertSelectedColumn( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   if !( ::oBrowse:lMultiSelect )
      RETURN ( self )
   end

   with object (::oBrowse:InsCol( 1 ) )
      :Cargo         := .T.
      :bEditValue    := { || ascan( ::oBrowse:aSelected, ::oBrowse:BookMark ) > 0 }
      :nHeadBmpNo    := { || if( len( ::oBrowse:aSelected ) == ::oBrowse:nLen, 1, 2 ) }
      :setCheck()
   end

RETURN ( self )



static FUNCTION SQLBrowseView_saveIdToModel( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local nId

   if empty( ::getRowSet() )
      RETURN ( self )
   end

   if empty( ::getModel() )
      RETURN ( self )
   end

   nId               := ::getRowSet():fieldGet( ::getModel():cColumnKey )

   if !empty( nId )
      SQLConfiguracionVistasModel():setId( ::getViewType(), ::getName(), nId )
   end

RETURN ( self )



static FUNCTION SQLBrowseView_gotoIdFromModel( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local nId

   nId               := SQLConfiguracionVistasModel():getId( ::getViewType(), ::getName() )

   if empty( nId )
      RETURN ( Self )
   end

   ::getRowSet():findId( nId )

   ::oBrowse:SelectCurrent()

RETURN ( Self )



static FUNCTION SQLBrowseView_saveColumnOrderToModel( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local cColumnOrder

   if empty( ::oBrowse )
      RETURN ( Self )
   end

   aeval( ::oBrowse:aCols, {|o| if( !empty( o:cOrder ), cColumnOrder := o:cSortOrder, ) } )

   if !empty( cColumnOrder )
      SQLConfiguracionVistasModel():setColumnOrder( ::getViewType(), ::getName(), cColumnOrder )
   end

RETURN ( Self )



static FUNCTION SQLBrowseView_getColumnOrderFromModel( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local cColumnOrder   := SQLConfiguracionVistasModel():getColumnOrder( ::getViewType(), ::getName() )

RETURN ( cColumnOrder )



static FUNCTION SQLBrowseView_saveColumnOrientationToModel( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local cColumnOrientation

   if empty( ::oBrowse )
      RETURN ( Self )
   end

   aeval( ::oBrowse:aCols, {|o| if( !empty( o:cOrder ), cColumnOrientation := o:cOrder, ) } )

   if !empty( cColumnOrientation )
      SQLConfiguracionVistasModel():setColumnOrientation( ::getViewType(), ::getName(), cColumnOrientation )
   end

RETURN ( Self )



static FUNCTION SQLBrowseView_getColumnOrientationFromModel( ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local cColumnOrientation   := SQLConfiguracionVistasModel():getColumnOrientation( ::getViewType(), ::getName() )

RETURN ( cColumnOrientation )



static FUNCTION SQLBrowseView_setColumnOrder( cSortOrder, cSortOrientation ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local oColumn

   If( cSortOrder == nil, cSortOrder := ::getColumnOrderFromModel(), ) ;
   If( cSortOrientation == nil, cSortOrientation := ::getColumnOrientationFromModel(), ) ;

   oColumn                    := ::getColumnOrder( cSortOrder )

   if empty( oColumn )
      RETURN ( Self )
   end

   if !empty( cSortOrientation )
      oColumn:cOrder          := cSortOrientation
   end

RETURN ( Self )



static FUNCTION SQLBrowseView_getColumnHeaderByOrder( cSortOrder ) ; local Self AS CLASS SQLBrowseView := QSelf() AS CLASS SQLBrowseView

   local oColumn

   oColumn                    := ::getColumnOrder( cSortOrder )

   if empty( oColumn )
      RETURN ( "" )
   end

RETURN ( oColumn:cHeader )
