#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 11 ".\Prg\Views\SQLBrowseableView.prg"
_HB_CLASS SQLBrowseableView ; function SQLBrowseableView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLBrowseableView", iif( .F., { }, { @HBObject() } ), @SQLBrowseableView() ) ) ;

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER { oModel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oModel"}, .F. )

   _HB_MEMBER { oMenuTreeView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMenuTreeView"}, .F. )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @SQLBrowseableView_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @SQLBrowseableView_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER setController(); oClass:AddInline( "setController", {|Self, oController | ( ( Self ) ), ( ::oController := oController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getController(); oClass:AddInline( "getController", {|Self | ( ( Self ) ), ( ::oController ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER setModel(); oClass:AddInline( "setModel", {|Self, oModel | ( ( Self ) ), ( ::oModel := oModel  ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getModel(); oClass:AddInline( "getModel", {|Self | ( ( Self ) ), ( iif( empty( ::oModel ), ::oController:getModel(), ::oModel ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getModelColumns(); oClass:AddInline( "getModelColumns", {|Self | ( ( Self ) ), ( ::getModel():hColumns ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getModelExtraColumns(); oClass:AddInline( "getModelExtraColumns", {|Self | ( ( Self ) ), ( ::getModel():hExtraColumns ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getModelColumnsForBrowse(); oClass:AddInline( "getModelColumnsForBrowse", {|Self | ( ( Self ) ), ( ::getModel():getColumnsForBrowse() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getModelHeadersForBrowse(); oClass:AddInline( "getModelHeadersForBrowse", {|Self | ( ( Self ) ), ( ::getModel():getHeadersForBrowse() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getModelHeaderFromColumnOrder(); oClass:AddInline( "getModelHeaderFromColumnOrder", {|Self | ( ( Self ) ), ( ::getModel():getHeaderFromColumnOrder() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getBrowseView(); oClass:AddInline( "getBrowseView", {|Self | ( ( Self ) ), ( ::oController:oBrowseView ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSQLBrowseView(); oClass:AddInline( "getSQLBrowseView", {|Self | ( ( Self ) ), ( ::oController:oBrowseView ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getBrowse(); oClass:AddInline( "getBrowse", {|Self | ( ( Self ) ), ( ::getBrowseView():oBrowse ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnByHeader(); oClass:AddInline( "getColumnByHeader", {|Self, cHeader | ( ( Self ) ), ( ::getBrowse():getColumnByHeader( cHeader ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrder(); oClass:AddInline( "getColumnOrder", {|Self, cSortOrder | ( ( Self ) ), ( ::getBrowse():getColumnOrder( cSortOrder ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrderByHeader(); oClass:AddInline( "getColumnOrderByHeader", {|Self, cHeader | ( ( Self ) ), ( ::getBrowse():getColumnOrderByHeader( cHeader ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectColumnOrder(); oClass:AddInline( "selectColumnOrder", {|Self, oCol | ( ( Self ) ), ( ::getBrowse():selectColumnOrder( oCol ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Refresh(); oClass:AddInline( "Refresh", {|Self | ( ( Self ) ), ( ::getBrowse():Refresh(), ::getBrowse():setFocus() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER RefreshRowSet(); oClass:AddInline( "RefreshRowSet", {|Self | ( ( Self ) ), ( iif(  !empty( ::oController ) .AND. !empty( ::oController:oRowSet ), ::oController:oRowSet:Refresh(), ::Refresh() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getMenuTreeView(); oClass:AddInline( "getMenuTreeView", {|Self | ( ( Self ) ), ( ::oMenuTreeView ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onChangeCombo(); oClass:AddMethod( "onChangeCombo", @SQLBrowseableView_onChangeCombo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onChangeSearch(); oClass:AddMethod( "onChangeSearch", @SQLBrowseableView_onChangeSearch(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLBrowseableView ;



static FUNCTION SQLBrowseableView_New( oController ) ; local Self AS CLASS SQLBrowseableView := QSelf() AS CLASS SQLBrowseableView

   ::oController           := oController

   ::oMenuTreeView         := MenuTreeView():New( Self )

RETURN ( Self )



static FUNCTION SQLBrowseableView_End( ) ; local Self AS CLASS SQLBrowseableView := QSelf() AS CLASS SQLBrowseableView

   if !empty( ::oMenuTreeView )
      ::oMenuTreeView:end()
      ::oMenuTreeView         := nil
   end

   Self                       := nil

RETURN ( nil )



static FUNCTION SQLBrowseableView_onChangeCombo( oColumn ) ; local Self AS CLASS SQLBrowseableView := QSelf() AS CLASS SQLBrowseableView

   local oComboBox   := ::getComboBoxOrder()

   if empty( oComboBox )
      RETURN ( Self )
   end

   if empty( oColumn )
      oColumn        := ::getBrowse():getColumnByHeader( oComboBox:VarGet() )
   end

   if empty( oColumn )
      RETURN ( Self )
   end

   ::getController():changeModelOrderAndOrientation( oColumn:cSortOrder, oColumn:cOrder )

   ::getBrowse():selectColumnOrder( oColumn )

   ::getBrowse():Refresh()

   ::getBrowse():setFocus()

RETURN ( Self )



static FUNCTION SQLBrowseableView_onChangeSearch( ) ; local Self AS CLASS SQLBrowseableView := QSelf() AS CLASS SQLBrowseableView

   local uValue
   local nRecCount
   local oSearch        := ::getGetSearch()
   local cOrder         := ::getComboBoxOrder():varGet()
   local cColumnOrder   := ::getBrowse():getColumnOrderByHeader( cOrder )

   if empty( oSearch )
      RETURN ( Self )
   end

   if empty( cColumnOrder )
      msgInfo( "La columna seleccionada no permite busquedas" )
      RETURN ( Self )
   end

   uValue               := oSearch:oGet:Buffer()
   uValue               := alltrim( upper( cvaltochar( uValue ) ) )
   uValue               := strtran( uValue, chr( 8 ), "" )

   nRecCount            := ::getController():findInRowSet( uValue, cColumnOrder )

   if hb_isnumeric( nRecCount )
      if nRecCount >= 0
         oSearch:SetColor( ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ) )
      else
         oSearch:SetColor( ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), ( 255 + ( 102 * 256 ) + ( 102 * 65536 ) ) )
      end
   end

   ::getBrowse():Refresh()

RETURN ( nil )
