#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\Prg\Models\SQLCompanyModel.prg"
_HB_CLASS SQLCompanyModel ; function SQLCompanyModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLCompanyModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLCompanyModel() ) ) ;

   _HB_MEMBER getField( cField, cBy, cId); oClass:AddMethod( "getField", @SQLCompanyModel_getField(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUuidWhereColumn( uValue, cColumn, uDefault); oClass:AddMethod( "getUuidWhereColumn", @SQLCompanyModel_getUuidWhereColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWhereUuid( Uuid); oClass:AddMethod( "getWhereUuid", @SQLCompanyModel_getWhereUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWhereCodigo( cCodigo); oClass:AddMethod( "getWhereCodigo", @SQLCompanyModel_getWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWhereNombre( cNombre); oClass:AddMethod( "getWhereNombre", @SQLCompanyModel_getWhereNombre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getArrayColumns( cColumn); oClass:AddMethod( "getArrayColumns", @SQLCompanyModel_getArrayColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getArrayColumnsWithBlank( cColumn); oClass:AddMethod( "getArrayColumnsWithBlank", @SQLCompanyModel_getArrayColumnsWithBlank(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLCompanyModel ;



static FUNCTION SQLCompanyModel_getField( cField, cBy, cId ) ; local Self AS CLASS SQLCompanyModel := QSelf() AS CLASS SQLCompanyModel

   local cSql  := "SELECT " + cField                                    + " "
   cSql        +=    "FROM " + ::cTableName                             + " "
   cSql        +=    "WHERE " + cBy + " = " + quoted( cId )             + " "
   cSQL        +=    "AND empresa_codigo = " + quoted( cCodEmp() ) + " "

Return ( ::getDatabase():getValue( cSql ) )



static FUNCTION SQLCompanyModel_getUuidWhereColumn( uValue, cColumn, uDefault ) ; local Self AS CLASS SQLCompanyModel := QSelf() AS CLASS SQLCompanyModel

   local uuid
   local cSQL  := "SELECT uuid FROM " + ::getTableName()                + " "
   cSQL        +=    "WHERE " + cColumn + " = " + toSqlString( uValue ) + " "
   cSQL        +=    "AND empresa_codigo = " + quoted( cCodEmp() ) + " "
   cSQL        +=    "LIMIT 1"

   uuid        := ::getDatabase():getValue( cSQL )
   if !empty( uuid )
      RETURN ( uuid )
   end

RETURN ( uDefault )



static FUNCTION SQLCompanyModel_getWhereUuid( Uuid ) ; local Self AS CLASS SQLCompanyModel := QSelf() AS CLASS SQLCompanyModel

   local cSQL  := "SELECT * FROM " + ::getTableName()                   + " "
   cSQL        +=    "WHERE uuid = " + quoted( uuid )                   + " "
   cSQL        +=    "AND empresa_codigo = " + quoted( cCodEmp() ) + " "
   cSQL        +=    "LIMIT 1"

RETURN ( ::getDatabase():firstTrimedFetchHash( cSQL ) )



static FUNCTION SQLCompanyModel_getWhereCodigo( cCodigo ) ; local Self AS CLASS SQLCompanyModel := QSelf() AS CLASS SQLCompanyModel

   local cSQL  := "SELECT * FROM " + ::getTableName()                   + " "
   cSQL        +=    "WHERE codigo = " + quoted( cCodigo )              + " "
   cSQL        +=    "AND empresa_codigo = " + quoted( cCodEmp() ) + " "
   cSQL        +=    "LIMIT 1"

RETURN ( ::getDatabase():firstTrimedFetchHash( cSQL ) )



static FUNCTION SQLCompanyModel_getWhereNombre( cNombre ) ; local Self AS CLASS SQLCompanyModel := QSelf() AS CLASS SQLCompanyModel

   local cSQL  := "SELECT * FROM " + ::getTableName()                   + " "
   cSQL        +=    "WHERE nombre = " + quoted( cNombre )              + " "
   cSQL        +=    "AND empresa_codigo = " + quoted( cCodEmp() ) + " "
   cSQL        +=    "LIMIT 1"

RETURN ( ::getDatabase():firstTrimedFetchHash( cSQL ) )



static FUNCTION SQLCompanyModel_getArrayColumns( cColumn ) ; local Self AS CLASS SQLCompanyModel := QSelf() AS CLASS SQLCompanyModel

   local cSQL  := "SELECT " + cColumn + "  FROM " + ::getTableName()    + " "
   cSQL        +=    "AND empresa_codigo = " + quoted( cCodEmp() ) + " "

RETURN ( ::getDatabase():selectFetchArrayOneColumn( cSQL ) )



static FUNCTION SQLCompanyModel_getArrayColumnsWithBlank( cColumn ) ; local Self AS CLASS SQLCompanyModel := QSelf() AS CLASS SQLCompanyModel

   local aColumns
   local cSQL     := "SELECT " + cColumn + "  FROM " + ::getTableName()
   cSQL           +=    "AND empresa_codigo = " + quoted( cCodEmp() ) + " "

   aColumns       := ::getDatabase():selectFetchArrayOneColumn( cSQL )

   hb_AIns(aColumns,1,"", .T.)

RETURN ( aColumns )
