#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\SQLConfiguracionVistasModel.prg"
_HB_CLASS SQLConfiguracionVistasModel ; function SQLConfiguracionVistasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLConfiguracionVistasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLConfiguracionVistasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "configuracion_vistas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )


   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY ( id ), "                       +  "UNIQUE KEY ( empresa, usuario, view_type, view_name )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLConfiguracionVistasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER get( cViewType, cViewName); oClass:AddMethod( "get", @SQLConfiguracionVistasModel_get(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getNavigator(); oClass:AddInline( "getNavigator", {|Self, cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind | ( ( Self ) ), ( ::get( "navigator", cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFieldName( cViewName); oClass:AddMethod( "getFieldName", @SQLConfiguracionVistasModel_getFieldName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getState( cViewType, cViewName); oClass:AddMethod( "getState", @SQLConfiguracionVistasModel_getState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getStateNavigator(); oClass:AddInline( "getStateNavigator", {|Self, cViewName | ( ( Self ) ), ( ::getState( "navigator", cViewName ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnOrder(); oClass:AddInline( "getColumnOrder", {|Self, cViewType, cViewName | ( ( Self ) ), ( ::getFieldName( cViewType, cViewName, "column_order" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrderNavigator(); oClass:AddInline( "getColumnOrderNavigator", {|Self, cViewName | ( ( Self ) ), ( ::getFieldName( "navigator", cViewName, "column_order" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrderSelector(); oClass:AddInline( "getColumnOrderSelector", {|Self, cViewName | ( ( Self ) ), ( ::getFieldName( "selector", cViewName, "column_order" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnOrientation(); oClass:AddInline( "getColumnOrientation", {|Self, cViewType, cViewName | ( ( Self ) ), ( ::getFieldName( cViewType, cViewName, "column_orientation" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrientationNavigator(); oClass:AddInline( "getColumnOrientationNavigator", {|Self, cViewName | ( ( Self ) ), ( ::getFieldName( "navigator", cViewName, "column_orientation" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrientationSelector(); oClass:AddInline( "getColumnOrientationSelector", {|Self, cViewName | ( ( Self ) ), ( ::getFieldName( "selector", cViewName, "column_orientation" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getId(); oClass:AddInline( "getId", {|Self, cViewType, cViewName | ( ( Self ) ), ( ::getFieldName( cViewType, cViewName, "id_to_find" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setId(); oClass:AddInline( "setId", {|Self, cViewType, cViewName, nId | ( ( Self ) ), ( ::set( cViewType, cViewName, nil, nil, nil, nId ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER set( cViewType, cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind); oClass:AddMethod( "set", @SQLConfiguracionVistasModel_set(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setNavigator(); oClass:AddInline( "setNavigator", {|Self, cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind | ( ( Self ) ), ( ::set( "navigator", cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setSelector(); oClass:AddInline( "setSelector", {|Self, cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind | ( ( Self ) ), ( ::set( "selector", cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setColumnOrder(); oClass:AddInline( "setColumnOrder", {|Self, cViewType, cViewName, cColumnOrder | ( ( Self ) ), ( ::set( cViewType, cViewName, nil, cColumnOrder ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setColumnOrientation(); oClass:AddInline( "setColumnOrientation", {|Self, cViewType, cViewName, cColumnOrientation | ( ( Self ) ), ( ::set( cViewType, cViewName, nil, nil, cColumnOrientation ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER delete( cViewType, cViewName); oClass:AddMethod( "delete", @SQLConfiguracionVistasModel_delete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLConfiguracionVistasModel ;



static FUNCTION SQLConfiguracionVistasModel_getColumns( ) ; local Self AS CLASS SQLConfiguracionVistasModel := QSelf() AS CLASS SQLConfiguracionVistasModel









   ::hColumns        := {  "id"                 =>  { "create" => "INTEGER AUTO_INCREMENT"      }, "empresa"            =>  { "create" => "CHAR ( 4 ) NOT NULL"         }, "usuario"            =>  { "create" => "CHARACTER ( 3 ) NOT NULL"    }, "view_type"          =>  { "create" => "VARCHAR( 40 ) NOT NULL"      }, "view_name"          =>  { "create" => "VARCHAR( 60 ) NOT NULL"      }, "browse_state"       =>  { "create" => "TEXT"                        }, "column_order"       =>  { "create" => "VARCHAR( 60 )"               }, "column_orientation" =>  { "create" => "CHARACTER ( 1 )"                }, "id_to_find"         =>  { "create" => "INT"                         } }

RETURN ( ::hColumns )



static FUNCTION SQLConfiguracionVistasModel_get( cViewType, cViewName ) ; local Self AS CLASS SQLConfiguracionVistasModel := QSelf() AS CLASS SQLConfiguracionVistasModel

















RETURN ( nil )



static FUNCTION SQLConfiguracionVistasModel_getFieldName( cViewType, cViewName, cFieldName ) ; local Self AS CLASS SQLConfiguracionVistasModel := QSelf() AS CLASS SQLConfiguracionVistasModel

   local aFetch   := ::get( cViewType, cViewName )

   if empty( aFetch )
      RETURN ( nil )
   end

RETURN ( hget( aFetch, cFieldName ) )



static FUNCTION SQLConfiguracionVistasModel_getState( cViewType, cViewName ) ; local Self AS CLASS SQLConfiguracionVistasModel := QSelf() AS CLASS SQLConfiguracionVistasModel

   local cState
   local hFetch

   hFetch   := ::get( cViewType, cViewName )

   if empty( hFetch )
      RETURN ( nil )
   end

   cState         := hget( hFetch, "browse_state" )
   if empty( cState )
      RETURN ( nil )
   end

   cState         := strtran( cState, '\"', '"' )

RETURN ( cState )



static FUNCTION SQLConfiguracionVistasModel_set( cViewType, cViewName, cBrowseState, cColumnOrder, cOrientation, idToFind ) ; local Self AS CLASS SQLConfiguracionVistasModel := QSelf() AS CLASS SQLConfiguracionVistasModel
































































































RETURN ( Self )



static FUNCTION SQLConfiguracionVistasModel_delete( cViewType, cViewName ) ; local Self AS CLASS SQLConfiguracionVistasModel := QSelf() AS CLASS SQLConfiguracionVistasModel






   local cSentence   := "DELETE FROM " + ::cTableName + " "                                  +  "WHERE "                                                          +  "empresa = " + quoted( cCodEmp() ) + " AND "                   +  "usuario = " + quoted( Auth():Codigo() ) + " AND "                   +  "view_type = " + quoted( cViewType ) + " AND "                 +  "view_name = " + quoted( cViewName ) + " "

   getSQLDatabase():Exec( cSentence  )

RETURN ( nil )
