#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\SQLConfiguracionesModel.prg"
_HB_CLASS SQLConfiguracionesModel ; function SQLConfiguracionesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLConfiguracionesModel", iif( .T., { @SQLExportableModel() }, { @HBObject() } ), @SQLConfiguracionesModel() ) ) ;

   _HB_MEMBER { aItems } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aItems"}, .F. )

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "configuraciones", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY (id)", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER { cColumnOrder } ; oClass:AddMultiData(, "id", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cColumnOrder"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLConfiguracionesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceValue( cDocumento, cClave); oClass:AddMethod( "getSQLSentenceValue", @SQLConfiguracionesModel_getSQLSentenceValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceId( cDocumento, cClave); oClass:AddMethod( "getSQLSentenceId", @SQLConfiguracionesModel_getSQLSentenceId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getValue( cDocumento, cClave, uDefault); oClass:AddMethod( "getValue", @SQLConfiguracionesModel_getValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNumeric( cDocumento, cClave, uDefault); oClass:AddMethod( "getNumeric", @SQLConfiguracionesModel_getNumeric(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceInsertValue( cDocumento, cClave, uValue); oClass:AddMethod( "getSQLSentenceInsertValue", @SQLConfiguracionesModel_getSQLSentenceInsertValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceUpdateValue( nId, uValue); oClass:AddMethod( "getSQLSentenceUpdateValue", @SQLConfiguracionesModel_getSQLSentenceUpdateValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setValue( cDocumento, cClave, uValue); oClass:AddMethod( "setValue", @SQLConfiguracionesModel_setValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAndIncValue( cDocumento, cClave, uDefault); oClass:AddMethod( "getAndIncValue", @SQLConfiguracionesModel_getAndIncValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getItemsMovimientosAlmacen(); oClass:AddMethod( "getItemsMovimientosAlmacen", @SQLConfiguracionesModel_getItemsMovimientosAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setItemsMovimientosAlmacen(); oClass:AddMethod( "setItemsMovimientosAlmacen", @SQLConfiguracionesModel_setItemsMovimientosAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDocumentoMovimientosAlmacen(); oClass:AddInline( "getDocumentoMovimientosAlmacen", {|Self | ( ( Self ) ), ( ::getValue( "movimientos_almacen", "documento", "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCopiasMovimientosAlmacen(); oClass:AddInline( "getCopiasMovimientosAlmacen", {|Self | ( ( Self ) ), ( ::getNumeric( "movimientos_almacen", "copias", 1 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAndIncContadorMovimientoAlmacen(); oClass:AddInline( "getAndIncContadorMovimientoAlmacen", {|Self | ( ( Self ) ), ( ::getAndIncValue( "movimientos_almacen", "contador", 1 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isSerie(); oClass:AddInline( "isSerie", {|Self, cName, cSerie | ( ( Self ) ), ( !empty( ::getValue( cName, "serie", cSerie ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setSerie(); oClass:AddInline( "setSerie", {|Self, cName, cSerie | ( ( Self ) ), ( ::setValue( cName, "serie", cSerie ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLConfiguracionesModel ;



static FUNCTION SQLConfiguracionesModel_getColumns( ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel


   hset( ::hColumns, "id",             {  "create"    => "INTEGER AUTO_INCREMENT"                  , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "empresa_uuid",   {  "create"    => "VARCHAR ( 40 ) NOT NULL"                 , "default"   => {|| Company():Uuid() } }                  )


   hset( ::hColumns, "documento",      {  "create"    => "VARCHAR ( 250 )"                         , "default"   => {|| space( 250 ) } }                      )


   hset( ::hColumns, "clave",          {  "create"    => "VARCHAR ( 250 )"                         , "default"   => {|| space( 250 ) } }                      )


   hset( ::hColumns, "valor",          {  "create"    => "VARCHAR ( 250 )"                         , "default"   => {|| space( 250 ) } }                      )

RETURN ( ::hColumns )



static FUNCTION SQLConfiguracionesModel_getSQLSentenceValue( cDocumento, cClave, uValor ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   local cSentence   := "SELECT valor FROM " + ::getTableName()                  + space( 1 )

   cSentence         +=    "WHERE empresa_uuid = " + quoted( Company():Uuid() )  + space( 1 )

   if !empty( cDocumento )
      cSentence      +=       "AND documento = " + toSQLString( cDocumento )     + space( 1 )
   end

   if !empty( cClave )
      cSentence      +=       "AND clave = " + toSQLString( cClave )             + space( 1 )
   end

   if !empty( uValor )
      cSentence      +=       "AND valor = " + toSQLString( uValor )             + space( 1 )
   end

   cSentence         +=    "LIMIT 1"

RETURN ( cSentence )



static FUNCTION SQLConfiguracionesModel_getSQLSentenceId( cDocumento, cClave, uValor ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   local cSentence   := "SELECT id FROM " + ::getTableName()                     + space( 1 )

   cSentence         +=    "WHERE empresa_uuid = " + quoted( Company():Uuid() )  + space( 1 )

   if !empty( cDocumento )
      cSentence      +=       "AND documento = " + toSQLString( cDocumento )     + space( 1 )
   end

   if !empty( cClave )
      cSentence      +=       "AND clave = " + toSQLString( cClave )             + space( 1 )
   end

   if !empty( uValor )
      cSentence      +=       "AND valor = " + toSQLString( uValor )             + space( 1 )
   end

   cSentence         +=    "LIMIT 1"

RETURN ( cSentence )



static FUNCTION SQLConfiguracionesModel_getValue( cDocumento, cClave, uValor, uDefault ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   local valor
   local cSentence

   cSentence         := ::getSQLSentenceValue( cDocumento, cClave, uValor )

   valor             := getSQLDataBase():getValue( cSentence )

   if !empty( valor )
      RETURN ( valor )
   end

RETURN ( uDefault )



static FUNCTION SQLConfiguracionesModel_getNumeric( cDocumento, cClave, uValor, uDefault ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   local uValue      := ::getValue( cDocumento, cClave, uValor, uDefault )

   if hb_isstring( uValue )
      RETURN ( val( uValue ) )
   end

RETURN ( uValue )



static FUNCTION SQLConfiguracionesModel_getSQLSentenceInsertValue( cDocumento, cClave, uValor ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel










   local cSentence   := "INSERT INTO " + ::getTableName()                  + space( 1 )   +  "( empresa_uuid,"                                  + space( 1 )   +  "documento,"                                    + space( 1 )   +  "clave,"                                        + space( 1 )   +  "valor )"                                       + space( 1 )   +  "VALUES"                                           + space( 1 )   +  "( " + toSQLString( Company():Uuid() ) + ","       + space( 1 )   +  toSQLString( cDocumento ) + ","                 + space( 1 )   +  toSQLString( cClave ) + ","                     + space( 1 )   +  toSQLString( uValor ) + " )"

RETURN ( cSentence )



static FUNCTION SQLConfiguracionesModel_getSQLSentenceUpdateValue( nId, uValue ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel




   local cSentence   := "UPDATE " + ::getTableName()                       + space( 1 )   +  "SET"                                              + space( 1 )   +  "valor = " + toSQLString( uValue )              + space( 1 )   +  "WHERE id = " + alltrim( str( nId ) )

RETURN ( cSentence )



static FUNCTION SQLConfiguracionesModel_setValue( cDocumento, cClave, uValor ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   local nId
   local cSentence

   uValor            := alltrim( cvaltostr( uValor ) )

   cSentence         := ::getSQLSentenceId( cDocumento, cClave, uValor )

   nId               := getSQLDataBase():getValue( cSentence )

   if empty( nId )

      cSentence      := ::getSQLSentenceInsertValue( cDocumento, cClave, uValor )

   else

      cSentence      := ::getSQLSentenceUpdateValue( nId, uValor )

   end

   getSQLDataBase():TransactionalExec( cSentence )

RETURN ( self )



static FUNCTION SQLConfiguracionesModel_getItemsMovimientosAlmacen( ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   ::aItems    := {}




   aadd( ::aItems, { "clave"  => "documento", "valor"  => ::getValue( "movimientos_almacen", "documento", "" ), "tipo"   => "B", "lista"  => ::oController:oSenderController:aDocuments } )



   aadd( ::aItems, { "clave"  => "copias", "valor"  => ::getValue( "movimientos_almacen", "copias", 1 ), "tipo"   => "N" } )

RETURN ( ::aItems )



static FUNCTION SQLConfiguracionesModel_setItemsMovimientosAlmacen( ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   local hItem

   for each hItem in ::aItems
      ::setValue( "movimientos_almacen", hget( hItem, "clave" ), hget( hItem, "valor" ) )
   next

RETURN ( nil )



static FUNCTION SQLConfiguracionesModel_getAndIncValue( cDocumento, cClave, uDefault ) ; local Self AS CLASS SQLConfiguracionesModel := QSelf() AS CLASS SQLConfiguracionesModel

   local nValue   := ::getNumeric( cDocumento, cClave, uDefault )

   if !empty( nValue )
      ::setValue( cDocumento, cClave, nValue + 1 )
   end

RETURN ( nValue )
