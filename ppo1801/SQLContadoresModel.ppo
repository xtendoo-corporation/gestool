#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\SQLContadoresModel.prg"
_HB_CLASS SQLContadoresModel ; function SQLContadoresModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLContadoresModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLContadoresModel() ) ) ;

   _HB_MEMBER { lTran } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTran"}, .F. )

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "contadores", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY (id), UNIQUE KEY ( empresa_codigo, documento, serie )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLContadoresModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isSerie( cDocumento, cSerie); oClass:AddMethod( "isSerie", @SQLContadoresModel_isSerie(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER insertSerie( cDocumento, cSerie, nContador); oClass:AddMethod( "insertSerie", @SQLContadoresModel_insertSerie(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLastCounter(); oClass:AddMethod( "getLastCounter", @SQLContadoresModel_getLastCounter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDocumentCounter(); oClass:AddMethod( "getDocumentCounter", @SQLContadoresModel_getDocumentCounter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLContadoresModel ;



static FUNCTION SQLContadoresModel_getColumns( ) ; local Self AS CLASS SQLContadoresModel := QSelf() AS CLASS SQLContadoresModel


   hset( ::hColumns, "id",             {  "create"    => "INTEGER AUTO_INCREMENT"                  , "default"   => {|| 0 } }                                 )

   ::getEmpresaColumns()


   hset( ::hColumns, "documento",      {  "create"    => "VARCHAR ( 250 )"                         , "default"   => {|| space( 250 ) } }                      )


   hset( ::hColumns, "serie",          {  "create"    => "VARCHAR ( 20 )"                          , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "contador",       {  "create"    => "INT UNSIGNED"                            , "default"   => {|| 0 } }                                 )

   ::getTimeStampColumns()

RETURN ( ::hColumns )



static FUNCTION SQLContadoresModel_insertSerie( cDocumento, cSerie, nContador ) ; local Self AS CLASS SQLContadoresModel := QSelf() AS CLASS SQLContadoresModel

   local hBuffer        := ::loadBlankBuffer()

   If( nContador == nil, nContador := 0, ) ;

   hset( hBuffer, "documento",   cDocumento  )
   hset( hBuffer, "serie",       cSerie      )
   hset( hBuffer, "contador",    nContador   )

RETURN ( ::insertOnDuplicateTransactional( hBuffer ) )



static FUNCTION SQLContadoresModel_isSerie( cDocumento, cSerie ) ; local Self AS CLASS SQLContadoresModel := QSelf() AS CLASS SQLContadoresModel

   local cSql  := "SELECT id"                                              + " "
   cSql        +=    "FROM " + ::cTableName                                + " "
   cSql        +=    "WHERE documento = " + quoted( cDocumento )           + " "
   cSql        +=    "AND empresa_codigo = " + quoted( Company():Uuid() )    + " "
   cSql        +=    "AND serie = " + quoted( cSerie )

RETURN ( !empty( ::getDatabase():getValue( cSql ) ) )



static FUNCTION SQLContadoresModel_getLastCounter( cDocumento ) ; local Self AS CLASS SQLContadoresModel := QSelf() AS CLASS SQLContadoresModel

   local cSql  := "SELECT serie, contador"                                 + " "
   cSql        +=    "FROM " + ::cTableName                                + " "
   cSql        +=    "WHERE documento = " + quoted( cDocumento )           + " "
   cSql        +=    "AND empresa_codigo = " + quoted( Company():Uuid() )    + " "
   cSql        +=    "AND usuario_uuid = " + quoted( Auth():Uuid() )       + " "
   cSql        +=    "ORDER BY updated_at DESC"                            + " "
   cSql        +=    "LIMIT 1"

RETURN ( ::getDatabase():firstTrimedFetchHash( cSql ) )



static FUNCTION SQLContadoresModel_getDocumentCounter( cDocumento ) ; local Self AS CLASS SQLContadoresModel := QSelf() AS CLASS SQLContadoresModel

   local cDocument   := ""
   local hDocument   := ::getLastCounter( cDocumento )

   if empty( hDocument )
      RETURN ( padl( "1", 6, "0" ) )
   end

   if !empty( hget( hDocument, "serie" ) )
      cDocument      := hget( hDocument, "serie" ) + "/"
   end

   cDocument         += alltrim( padl( hget( hDocument, "contador" ) + 1, 6, "0" ) )

RETURN ( cDocument )
