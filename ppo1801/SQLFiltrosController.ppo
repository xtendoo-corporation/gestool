#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Controllers\SQLFiltrosController.prg"
_HB_CLASS SQLFiltrosController ; function SQLFiltrosController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLFiltrosController", iif( .T., { @SQLBaseController() }, { @HBObject() } ), @SQLFiltrosController() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { hColumns } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hColumns"}, .F. )

   _HB_MEMBER { cName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )

   _HB_MEMBER { oCustomView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCustomView"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @SQLFiltrosController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @SQLFiltrosController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Dialog(); oClass:AddInline( "Dialog", {|Self | ( ( Self ) ), ( ::oDialogView:Dialog() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setColumns(); oClass:AddMethod( "setColumns", @SQLFiltrosController_setColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumns(); oClass:AddInline( "getColumns", {|Self | ( ( Self ) ), ( ::hColumns ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFilters(); oClass:AddMethod( "getFilters", @SQLFiltrosController_getFilters(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFilterSentence( cFilter); oClass:AddMethod( "getFilterSentence", @SQLFiltrosController_getFilterSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getId( cFilter); oClass:AddMethod( "getId", @SQLFiltrosController_getId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Append(); oClass:AddMethod( "Append", @SQLFiltrosController_Append(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER editByText(); oClass:AddInline( "editByText", {|Self, cFilter | ( ( Self ) ), ( ::Edit( ::getId( cFilter ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteByText( cFilter); oClass:AddMethod( "deleteByText", @SQLFiltrosController_deleteByText(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadedBlankBuffer(); oClass:AddMethod( "loadedBlankBuffer", @SQLFiltrosController_loadedBlankBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setComboFilter(); oClass:AddInline( "setComboFilter", {|Self, cText | ( ( Self ) ), ( ::oSender:oWindowsBar:setComboFilter( cText ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setComboFilterItem(); oClass:AddInline( "setComboFilterItem", {|Self, cText | ( ( Self ) ), ( ::oSender:oWindowsBar:setComboFilterItem( cText ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setTableToFilter(); oClass:AddInline( "setTableToFilter", {|Self, cTableToFilter | ( ( Self ) ), ( ::oModel:setTableToFilter( cTableToFilter ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTableToFilter(); oClass:AddInline( "getTableToFilter", {|Self | ( ( Self ) ), ( ::oModel:getTableToFilter() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLFiltrosController ;



static FUNCTION SQLFiltrosController_New( oSender ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

   ::oSender                           := oSender

   ::oDialogView                       := SQLFilterView():New( self )

   ::oCustomView                       := SQLCustomFilterView():New( self )

   ::oModel                            := SQLFiltrosModel():New( self )

   ::oValidator                        := SQLFiltrosValidator():New( self )

   ::oModel:setEvent( "loadedBlankBuffer", {|| ::loadedBlankBuffer() } )

RETURN ( Self )



static FUNCTION SQLFiltrosController_End( oSender ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

   if !empty( ::oDialogView )
      ::oDialogView:End()
      ::oDialogView                    := nil
   end

   if !empty( ::oCustomView )
      ::oCustomView:End()
      ::oCustomView                    := nil
   end

   if !empty( ::oModel )
      ::oModel:End()
      ::oModel                         := nil
   end

   if !empty( ::oValidator )
      ::oValidator:End()
      ::oValidator                     := nil
   end

   Self                                := nil

RETURN ( nil )



static FUNCTION SQLFiltrosController_setColumns( hColumns ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

   If( hColumns == nil, hColumns := SQLMovimientosAlmacenModel():getColumns(), ) ;

   ::hColumns                          := hColumns

RETURN ( Self )



static FUNCTION SQLFiltrosController_getFilters( cTableToFilter ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

RETURN ( ::oModel:getFilters( cTableToFilter ) )



static FUNCTION SQLFiltrosController_getFilterSentence( cNameFilter, cTableToFilter ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

RETURN ( ::oModel:getFilterSentence( cNameFilter, cTableToFilter ) )



static FUNCTION SQLFiltrosController_getId( cNameFilter, cTableToFilter ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

RETURN ( ::oModel:getId( cNameFilter, cTableToFilter ) )



static FUNCTION SQLFiltrosController_loadedBlankBuffer( ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

   local cTextFilter    := ::oSender:oWindowsBar:getComboFilter()

   if empty( cTextFilter )
      RETURN ( Self )
   end

   hset( ::oModel:hBuffer, "nombre", cTextFilter )
   hset( ::oModel:hBuffer, "filtro", cTextFilter )

RETURN ( Self )



static FUNCTION SQLFiltrosController_Append( ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

   if ::Super:Append()
      ::oSender:oWindowsBar:addComboFilter( hget( ::oModel:hBuffer, "nombre" ) )
      ::oSender:oWindowsBar:setComboFilter( hget( ::oModel:hBuffer, "nombre" ) )
   end

RETURN ( Self )



static FUNCTION SQLFiltrosController_deleteByText( cNameFilter, cTableToFilter ) ; local Self AS CLASS SQLFiltrosController := QSelf() AS CLASS SQLFiltrosController

   ::oModel:deleteById( { ::getId( cNameFilter, cTableToFilter ) } )

RETURN ( Self )
