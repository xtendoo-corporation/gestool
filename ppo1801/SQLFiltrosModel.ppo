#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\SQLFiltrosModel.prg"
_HB_CLASS SQLFiltrosModel ; function SQLFiltrosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLFiltrosModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLFiltrosModel() ) ) ;

   _HB_MEMBER { cTableToFilter } ; oClass:AddMultiData(, space( 50 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableToFilter"}, .F. )

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "filtros", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER setTableToFilter(); oClass:AddInline( "setTableToFilter", {|Self, cTableToFilter | ( ( Self ) ), ( ::cTableToFilter := cTableToFilter ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getTableToFilter(); oClass:AddInline( "getTableToFilter", {|Self | ( ( Self ) ), ( ::cTableToFilter ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLFiltrosModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFilters( cTabla); oClass:AddMethod( "getFilters", @SQLFiltrosModel_getFilters(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFilterField( cField, cNombre, cTabla); oClass:AddMethod( "getFilterField", @SQLFiltrosModel_getFilterField(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFilterSentence(); oClass:AddInline( "getFilterSentence", {|Self, cNombre, cTabla | ( ( Self ) ), ( ::getFilterField( "filtro", cNombre, cTabla ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getId(); oClass:AddInline( "getId", {|Self, cNombre, cTabla | ( ( Self ) ), ( ::getFilterField( "id", cNombre, cTabla ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTablaAttribute(); oClass:AddInline( "getTablaAttribute", {|Self, value | ( ( Self ) ), ( if( empty( value ), ::cTableToFilter, value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLFiltrosModel ;



static FUNCTION SQLFiltrosModel_getColumns( ) ; local Self AS CLASS SQLFiltrosModel := QSelf() AS CLASS SQLFiltrosModel

   hset( ::hColumns, "id",       {  "create"    => "INTEGER PRIMARY KEY AUTO_INCREMENT" } )


   hset( ::hColumns, "tabla",    {  "create"    => "CHAR( 50 ) NOT NULL"                  , "default"   => {|| space( 50 ) } } )


   hset( ::hColumns, "nombre",   {  "create"    => "CHAR( 50 ) NOT NULL"                  , "default"   => {|| space( 50 ) } }                    )


   hset( ::hColumns, "filtro",   {  "create"    => "TEXT"                                 , "default"   => {|| space( 250 ) } }                   )

RETURN ( ::hColumns )



static FUNCTION SQLFiltrosModel_getFilters( cTabla ) ; local Self AS CLASS SQLFiltrosModel := QSelf() AS CLASS SQLFiltrosModel

   local aFilters    := {}
   local cSentence

   Return ( aFilters )

   If( cTabla == nil, cTabla := ::getTableToFilter(), ) ;

   if empty( cTabla )
      RETURN ( aFilters )
   end


   cSentence         := "SELECT nombre FROM " + ::getTableName() + " " +  "WHERE tabla = " + quoted( cTabla )

   aFilters          := ::getDatabase():selectFetchArrayOneColumn( cSentence )

RETURN ( aFilters )



static FUNCTION SQLFiltrosModel_getFilterField( cField, cNombre, cTabla ) ; local Self AS CLASS SQLFiltrosModel := QSelf() AS CLASS SQLFiltrosModel

   local uValue
   local cSentence

   If( cTabla == nil, cTabla := ::getTableToFilter(), ) ;

   if empty( cTabla )
      RETURN ( uValue )
   end




   cSentence         := "SELECT " + cField + " FROM " + ::getTableName()   + space( 1 ) +  "WHERE tabla = " + quoted( cTabla )             + space( 1 ) +  "AND nombre = " + quoted( cNombre )          + space( 1 ) +  "LIMIT 1"

   uValue           := ::getDatabase():getValue( cSentence )

RETURN ( uValue )
