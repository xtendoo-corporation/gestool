#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\Prg\Validators\SQLFiltrosValidator.prg"
_HB_CLASS SQLFiltrosValidator ; function SQLFiltrosValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLFiltrosValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @SQLFiltrosValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @SQLFiltrosValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER uniqueFilter(); oClass:AddMethod( "uniqueFilter", @SQLFiltrosValidator_uniqueFilter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLFiltrosValidator ;



static FUNCTION SQLFiltrosValidator_getValidators( ) ; local Self AS CLASS SQLFiltrosValidator := QSelf() AS CLASS SQLFiltrosValidator



   ::hValidators  := {  "nombre" => {  "required"     => "El nombre del filtro es un dato requerido", "uniquefilter" => "El nombre del filtro ya existe" }, "filtro" => {  "required"     => "La sentencia es un dato requerido" } }

RETURN ( ::hValidators )



static FUNCTION SQLFiltrosValidator_uniqueFilter( uValue ) ; local Self AS CLASS SQLFiltrosValidator := QSelf() AS CLASS SQLFiltrosValidator

   local id
   local nCount
   local cSQLSentence

   cSQLSentence      := "SELECT COUNT(*) FROM " + ::oController:getModelTableName()             + space( 1 )
   cSQLSentence      +=    "WHERE nombre = " + toSQLString( uValue )                            + space( 1 )
   cSQLSentence      +=       "AND tabla = " + toSQLString( ::oController:getTableToFilter() )  + space( 1 )

   id                := ::oController:getModelBufferColumnKey()
   if !empty(id)
      cSQLSentence   +=    "AND " + ::oController:getModelColumnKey() + " <> " + toSQLString( id )
   end

   nCount            := getSQLDatabase():getValue( cSQLSentence )

RETURN ( hb_isnumeric( nCount ) .AND. nCount == 0 )
