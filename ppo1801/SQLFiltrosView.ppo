#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 10 ".\Prg\Views\SQLFiltrosView.prg"
_HB_CLASS SQLFilterView ; function SQLFilterView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLFilterView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @SQLFilterView() ) ) ;

   _HB_MEMBER { oName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oName"}, .F. )

   _HB_MEMBER { oMemo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMemo"}, .F. )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @SQLFilterView_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @SQLFilterView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLFilterView ;



static FUNCTION SQLFilterView_New( oController ) ; local Self AS CLASS SQLFilterView := QSelf() AS CLASS SQLFilterView

   ::oController     := oController

RETURN ( Self )



static FUNCTION SQLFilterView_Activate( ) ; local Self AS CLASS SQLFilterView := QSelf() AS CLASS SQLFilterView


   ::oDialog = TDialog():New(,,,,, "SQL_FILTER_VIEW",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





      ::oBitmap := TBitmap():ReDefine( 500, ( "gc_funnel_48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )






      TMultiGet():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )}, .F., {||       ( ::oController:validate( "nombre" ) )}, )






      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "filtro" ], ::oController:oModel:hBuffer[ "filtro" ]:= u ) }, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )}, .F., {||       ( ::oController:validate( "filtro" ) )}, )




      TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .F. )

      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:End()

RETURN ( ::oDialog:nResult )








_HB_CLASS SQLCustomFilterView ; function SQLCustomFilterView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLCustomFilterView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @SQLCustomFilterView() ) ) ;

   _HB_MEMBER { oValue } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oValue"}, .F. )
   _HB_MEMBER { cValue } ; oClass:AddMultiData(, space( 200 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cValue"}, .F. )

   _HB_MEMBER { oText } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oText"}, .F. )
   _HB_MEMBER { cText } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cText"}, .F. )

   _HB_MEMBER New( oController); oClass:AddMethod( "New", @SQLCustomFilterView_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @SQLCustomFilterView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setValue(); oClass:AddInline( "setValue", {|Self, cValue | ( ( Self ) ), ( ::cValue := padr( cValue, 200 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getValue(); oClass:AddInline( "getValue", {|Self | ( ( Self ) ), ( ::cValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setText(); oClass:AddInline( "setText", {|Self, cText | ( ( Self ) ), ( ::cText := cText ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getText(); oClass:AddInline( "getText", {|Self | ( ( Self ) ), ( ::cText ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLCustomFilterView ;



static FUNCTION SQLCustomFilterView_New( oController ) ; local Self AS CLASS SQLCustomFilterView := QSelf() AS CLASS SQLCustomFilterView

   ::oController     := oController

RETURN ( Self )



static FUNCTION SQLCustomFilterView_Activate( ) ; local Self AS CLASS SQLCustomFilterView := QSelf() AS CLASS SQLCustomFilterView


   ::oDialog = TDialog():New(,,,,, "SQL_FILTER_CUSTOM",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





      ::oBitmap := TBitmap():ReDefine( 800, ( "gc_funnel_48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




      ::oText := TSay():ReDefine( 100, {||         ::cText}, ::oDialog,,,, .F.,, .F., .F., )





      ::oValue := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cValue, ::cValue:= u ) }, ::oDialog,,, {||       ( !empty( ::cValue ) )},,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 1, {||( ::oDialog:end( 1 ) )}, ::oDialog,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .F. )

      ::oDialog:AddFastKey( 116, {|| ::oDialog:end( 1 ) } )

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:End()

RETURN ( ::oDialog:nResult == 1 )
