#line 91 "\fwh1801\include\fivewin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\Prg\Models\SQLMovimientosAlmacenLineasNumerosSeriesModel.prg"
_HB_CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel ; function SQLMovimientosAlmacenLineasNumerosSeriesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLMovimientosAlmacenLineasNumerosSeriesModel", iif( .T., { @SQLExportableModel() }, { @HBObject() } ), @SQLMovimientosAlmacenLineasNumerosSeriesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "movimientos_almacen_lineas_numeros_series", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY (id), KEY (uuid), KEY( parent_uuid )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER { aBuffer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBuffer"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLMovimientosAlmacenLineasNumerosSeriesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadCurrentBuffer(); oClass:AddMethod( "loadCurrentBuffer", @SQLMovimientosAlmacenLineasNumerosSeriesModel_loadCurrentBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUpdateSentence(); oClass:AddMethod( "getUpdateSentence", @SQLMovimientosAlmacenLineasNumerosSeriesModel_getUpdateSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUnidades(); oClass:AddInline( "getUnidades", {|Self | ( ( Self ) ), ( ::oController:oDialogView:nTotalUnidades ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadBlankBufferFromUnits(); oClass:AddMethod( "loadBlankBufferFromUnits", @SQLMovimientosAlmacenLineasNumerosSeriesModel_loadBlankBufferFromUnits(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RollBack(); oClass:AddMethod( "RollBack", @SQLMovimientosAlmacenLineasNumerosSeriesModel_RollBack(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InsertOrUpdate(); oClass:AddMethod( "InsertOrUpdate", @SQLMovimientosAlmacenLineasNumerosSeriesModel_InsertOrUpdate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSentenceNotSent( hFetch); oClass:AddMethod( "getSentenceNotSent", @SQLMovimientosAlmacenLineasNumerosSeriesModel_getSentenceNotSent(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel ;



static FUNCTION SQLMovimientosAlmacenLineasNumerosSeriesModel_getColumns( ) ; local Self AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel := QSelf() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT"                  , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",       {  "create"    => "VARCHAR( 40 ) NOT NULL "                 , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "numero_serie",      {  "create"    => "VARCHAR( 30 ) NOT NULL"                  , "default"   => {|| space( 30 ) } }                       )

RETURN ( ::hColumns )



static FUNCTION SQLMovimientosAlmacenLineasNumerosSeriesModel_loadCurrentBuffer( ) ; local Self AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel := QSelf() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel


   local cSentence   := "SELECT * FROM " + ::cTableName + " " +  "WHERE parent_uuid = " + quoted( ::oController:getSenderController():getUuid() )

   ::aBuffer         := ::oDatabase:selectFetchHash( cSentence )

   ::loadBlankBufferFromUnits()

RETURN ( ::aBuffer )



static FUNCTION SQLMovimientosAlmacenLineasNumerosSeriesModel_loadBlankBufferFromUnits( ) ; local Self AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel := QSelf() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel

   local n
   local nTo

   if hb_isnil( ::aBuffer )
      ::aBuffer   := {}
   end

   if len( ::aBuffer ) < ::getUnidades()

      nTo         := ::getUnidades() - len( ::aBuffer )

      for n := 1 to nTo
         aadd( ::aBuffer, ::loadBlankBuffer() )
      next

   else

      asize( ::aBuffer, ::getUnidades() )

   end

RETURN ( self )



static FUNCTION SQLMovimientosAlmacenLineasNumerosSeriesModel_RollBack( ) ; local Self AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel := QSelf() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel

   local hBuffer
   local cSentence

   if empty( ::aBuffer )
      RETURN ( self )
   end


   cSentence         := "DELETE FROM " + ::cTableName + " " +  "WHERE uuid NOT IN ("

   aEval( ::aBuffer, {|h| cSentence += quoted( hGet( h, "uuid" ) ) + "," } )

   cSentence         := chgAtEnd( cSentence, " ) ", 1 )

   cSentence         +=       "AND parent_uuid = " + quoted( ::oController:getSenderController():getUuid() )

   ::oDatabase:Exec( cSentence )

RETURN ( self )



static FUNCTION SQLMovimientosAlmacenLineasNumerosSeriesModel_getUpdateSentence( ) ; local Self AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel := QSelf() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel

   local hBuffer
   local aSentence   := {}

   aeval( ::aBuffer, {|hBuffer| aadd( aSentence, ::InsertOrUpdate( hBuffer ) ) } )

RETURN ( aSentence )



static FUNCTION SQLMovimientosAlmacenLineasNumerosSeriesModel_InsertOrUpdate( hBuffer ) ; local Self AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel := QSelf() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel

   if empty( hGet( hBuffer, "id" ) )
      RETURN ( ::super:getInsertSentence( hBuffer ) )
   end

RETURN ( ::super:getUpdateSentence( hBuffer ) )



static FUNCTION SQLMovimientosAlmacenLineasNumerosSeriesModel_getSentenceNotSent( aFetch ) ; local Self AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel := QSelf() AS CLASS SQLMovimientosAlmacenLineasNumerosSeriesModel

   local cSentence   := "SELECT * FROM " + ::cTableName + " "

   cSentence         +=    "WHERE parent_uuid IN ( "

   aeval( aFetch, {|h| cSentence += toSQLString( hget( h, "uuid" ) ) + ", " } )

   cSentence         := chgAtEnd( cSentence, " )", 2 )

RETURN ( cSentence )
