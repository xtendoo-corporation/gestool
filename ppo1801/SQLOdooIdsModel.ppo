#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\SQLOdooIdsModel.prg"
_HB_CLASS SQLOdooIdsModel ; function SQLOdooIdsModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLOdooIdsModel", iif( .T., { @SQLCompanyModel() }, { @HBObject() } ), @SQLOdooIdsModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "OdooIds", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLOdooIdsModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertOdooId( cTipo, idGestool, idOdoo); oClass:AddMethod( "insertOdooId", @SQLOdooIdsModel_insertOdooId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER insertClienteToOdooId(); oClass:AddInline( "insertClienteToOdooId", {|Self, idGestool, idOdoo | ( ( Self ) ), ( ::insertOdooId( "cliente", idGestool, idOdoo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER insertProveedorToOdooId(); oClass:AddInline( "insertProveedorToOdooId", {|Self, idGestool, idOdoo | ( ( Self ) ), ( ::insertOdooId( "proveedor", idGestool, idOdoo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER insertArticuloToOdooId(); oClass:AddInline( "insertArticuloToOdooId", {|Self, idGestool, idOdoo | ( ( Self ) ), ( ::insertOdooId( "articulo", idGestool, idOdoo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteTipoDocumento( tipoDocumento); oClass:AddMethod( "deleteTipoDocumento", @SQLOdooIdsModel_deleteTipoDocumento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteCliente(); oClass:AddInline( "deleteCliente", {|Self | ( ( Self ) ), ( ::deleteTipoDocumento( "cliente" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteProveedor(); oClass:AddInline( "deleteProveedor", {|Self | ( ( Self ) ), ( ::deleteTipoDocumento( "proveedor" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteArticulo(); oClass:AddInline( "deleteArticulo", {|Self | ( ( Self ) ), ( ::deleteTipoDocumento( "articulo" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lastCountResPartner(); oClass:AddMethod( "lastCountResPartner", @SQLOdooIdsModel_lastCountResPartner(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCountCliente(); oClass:AddInline( "getCountCliente", {|Self, cCodigo, lNew | ( ( Self ) ), ( ::getCount( cCodigo, "cliente", lNew ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCountProveedor(); oClass:AddInline( "getCountProveedor", {|Self, cCodigo, lNew | ( ( Self ) ), ( ::getCount( cCodigo, "proveedor", lNew ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCount( cCodigo, cTipo); oClass:AddMethod( "getCount", @SQLOdooIdsModel_getCount(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SeederToADS(); oClass:AddMethod( "SeederToADS", @SQLOdooIdsModel_SeederToADS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLOdooIdsModel ;



static FUNCTION SQLOdooIdsModel_getColumns( ) ; local Self AS CLASS SQLOdooIdsModel := QSelf() AS CLASS SQLOdooIdsModel


   hset( ::hColumns, "id",                         {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                       {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )

   ::getEmpresaColumns()


   hset( ::hColumns, "tipo_documento",             {  "create"    => "VARCHAR( 60 )"                           , "default"   => {|| space( 60 ) } }                       )


   hset( ::hColumns, "codigo_gestool",             {  "create"    => "VARCHAR( 40 )"                           , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "id_odoo",                    {  "create"    => "VARCHAR( 40 )"                           , "default"   => {|| space( 40 ) } }                       )

RETURN ( ::hColumns )



static FUNCTION SQLOdooIdsModel_insertOdooId( cTipo, idGestool, idOdoo ) ; local Self AS CLASS SQLOdooIdsModel := QSelf() AS CLASS SQLOdooIdsModel

   local nId
   local cSentence   := ""





   cSentence         := "SELECT id_odoo FROM " + ::cTableName +  " WHERE tipo_documento = " + toSQLString( cTipo ) + " AND " +  "codigo_gestool = " + toSQLString( idGestool ) + " AND " +  "id_odoo = " + toSQLString( idOdoo ) + " AND " +  "empresa_codigo = " + toSQLString( cCodEmp() )

   nId               := getSQLDatabase():getValue( cSentence )

   if Empty( nId )









      cSentence         := "INSERT INTO " + ::cTableName + " ( "                 +  "uuid, empresa_codigo, usuario_codigo, tipo_documento, codigo_gestool, id_odoo ) " +  "VALUES  ( "                                          +  toSQLString( win_uuidcreatestring() ) + ", " +  toSQLString( cCodEmp() ) + ", " +  toSQLString( Auth():Codigo() ) + ", " +  toSQLString( cTipo ) + ", " +  toSQLString( idGestool ) + ", " +  toSQLString( idOdoo ) + " )"

      getSQLDatabase():Exec( cSentence  )

   end

Return .T.



static FUNCTION SQLOdooIdsModel_deleteTipoDocumento( tipoDocumento ) ; local Self AS CLASS SQLOdooIdsModel := QSelf() AS CLASS SQLOdooIdsModel

   local cSentence   := ""



   cSentence         := "DELETE FROM " + ::cTableName +  " WHERE tipo_documento = " + toSQLString( tipodocumento ) + " AND " +  "empresa_codigo = " + toSQLString( cCodEmp() )

   getSQLDatabase():Exec( cSentence  )

Return .T.



static FUNCTION SQLOdooIdsModel_lastCountResPartner( ) ; local Self AS CLASS SQLOdooIdsModel := QSelf() AS CLASS SQLOdooIdsModel

   local lastid      := 0
   local cSentence   := ""




   cSentence         := "SELECT id_odoo FROM " + ::cTableName +  " WHERE tipo_documento IN ( 'cliente', 'proveedor' ) AND " +  "empresa_codigo = " + toSQLString( cCodEmp() ) + Space( 1 ) +  "ORDER BY cast(id_odoo as unsigned) DESC LIMIT 1"

   lastid         := getSQLDatabase():getValue( cSentence )

   if ValType( lastid ) == "C"
      lastid      := Val( AllTrim( getSQLDatabase():getValue( cSentence ) ) )
   end

   if Empty( lastid )
      lastid      := 1
   end

Return lastid



static FUNCTION SQLOdooIdsModel_getCount( cCodigo, cTipo, lNew ) ; local Self AS CLASS SQLOdooIdsModel := QSelf() AS CLASS SQLOdooIdsModel

   local nCount      := 0
   local cSentence   := ""

   If( lNew == nil, lNew := .T., ) ;




   cSentence         := "SELECT id_odoo FROM " + ::cTableName +  " WHERE tipo_documento = " + toSQLString( cTipo ) + " AND " +  "codigo_gestool = " + toSQLString( cCodigo ) + " AND " +  "empresa_codigo = " + toSQLString( cCodEmp() )

   nCount            := getSQLDatabase():getValue( cSentence )

   if lNew
      if Empty( nCount )
         nCount         := Str( ::lastCountResPartner() + 1 )
      end
   end

Return nCount



static FUNCTION SQLOdooIdsModel_SeederToADS( ) ; local Self AS CLASS SQLOdooIdsModel := QSelf() AS CLASS SQLOdooIdsModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( getSQLDataBase():selectFetchHash( cSql ) )
