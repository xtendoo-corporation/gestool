#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\SQLPermisosOpcionesModel.prg"
_HB_CLASS SQLPermisosOpcionesModel ; function SQLPermisosOpcionesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLPermisosOpcionesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLPermisosOpcionesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "permisos_opciones", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER { cConstraints } ; oClass:AddMultiData(, "PRIMARY KEY (id), KEY (uuid), UNIQUE KEY ( permiso_uuid, nombre )", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cConstraints"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLPermisosOpcionesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SeederToADS(); oClass:AddMethod( "SeederToADS", @SQLPermisosOpcionesModel_SeederToADS(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLPermisosOpcionesModel ;



static FUNCTION SQLPermisosOpcionesModel_getColumns( ) ; local Self AS CLASS SQLPermisosOpcionesModel := QSelf() AS CLASS SQLPermisosOpcionesModel


   hset( ::hColumns, "id",             {  "create"    => "INTEGER AUTO_INCREMENT"                  , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",           {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "permiso_uuid",   {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "nombre",         {  "create"    => "VARCHAR ( 100 ) NOT NULL"                , "default"   => {|| space( 100 ) } }                      )


   hset( ::hColumns, "nivel",          {  "create"    => "TINYINT UNSIGNED"                        , "default"   => {|| 0 } }                                 )

RETURN ( ::hColumns )



static FUNCTION SQLPermisosOpcionesModel_SeederToADS( ) ; local Self AS CLASS SQLPermisosOpcionesModel := QSelf() AS CLASS SQLPermisosOpcionesModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( getSQLDataBase():selectFetchHash( cSql ) )







_HB_CLASS PermisosOpcionesRepository ; function PermisosOpcionesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "PermisosOpcionesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @PermisosOpcionesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLPermisosOpcionesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNivel( cPermisoUuid, cNombre); oClass:AddMethod( "getNivel", @PermisosOpcionesRepository_getNivel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNivelUsuario( cUuidUser, cNombreOpcion); oClass:AddMethod( "getNivelUsuario", @PermisosOpcionesRepository_getNivelUsuario(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNivelRol( cUuidRol, cOpcion); oClass:AddMethod( "getNivelRol", @PermisosOpcionesRepository_getNivelRol(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS PermisosOpcionesRepository ;



static FUNCTION PermisosOpcionesRepository_getNivel( cPermisoUuid, cNombre ) ; local Self AS CLASS PermisosOpcionesRepository := QSelf() AS CLASS PermisosOpcionesRepository



   local cSQL  := "SELECT nivel FROM " + ::getTableName()               + " " +  "WHERE permiso_uuid = " + quoted( cPermisoUuid )   + " " +  "AND nombre = " + quoted( cNombre )

RETURN ( ::getDatabase():getValue( cSQL ) )



static FUNCTION PermisosOpcionesRepository_getNivelUsuario( cUuidUser, cNombreOpcion ) ; local Self AS CLASS PermisosOpcionesRepository := QSelf() AS CLASS PermisosOpcionesRepository







   local cSQL  := "SELECT permisos_opciones.nivel FROM " + ::getTableName()         + " " +   "INNER JOIN roles"                                             + " " +   "ON roles.permiso_uuid = permisos_opciones.permiso_uuid"    + " " +   "INNER JOIN usuarios"                                          + " " +   "ON usuarios.rol_uuid = roles.uuid"                         + " " +   "WHERE usuarios.uuid = " + quoted( cUuidUser )                 + " " +   "AND permisos_opciones.nombre = " + quoted( cNombreOpcion )

RETURN ( ::getDatabase():getValue( cSQL ) )



static FUNCTION PermisosOpcionesRepository_getNivelRol( cUuidRol, cOption ) ; local Self AS CLASS PermisosOpcionesRepository := QSelf() AS CLASS PermisosOpcionesRepository







   local cSQL  := "SELECT nivel FROM " + ::getTableName()                     + " " +   "INNER JOIN permisos"                                    + " " +   "ON permisos.uuid = permisos_opciones.permiso_uuid"   + " " +   "INNER JOIN roles"                                       + " " +   "ON roles.permiso_uuid = permisos.uuid"               + " " +   "WHERE roles.uuid = " + quoted( cUuidRol )               + " " +   "AND permisos_opciones.nombre = " + quoted( cOption )

RETURN ( ::getDatabase():getValue( cSQL ) )
