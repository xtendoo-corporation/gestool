#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\Prg\Services\SQLRowSet.prg"
_HB_CLASS SQLRowSet ; function SQLRowSet ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLRowSet", iif( .F., { }, { @HBObject() } ), @SQLRowSet() ) ) ;

   _HB_MEMBER { oEvents } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEvents"}, .F. )

   _HB_MEMBER { oRowSet } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oRowSet"}, .F. )

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER { nRecno } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRecno"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @SQLRowSet_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @SQLRowSet_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Free(); oClass:AddInline( "Free", {|Self | ( ( Self ) ), ( ::End() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Get(); oClass:AddInline( "Get", {|Self | ( ( Self ) ), ( ::oRowSet ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER fieldGet(); oClass:AddInline( "fieldGet", {|Self, uField | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:fieldget( uField ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER recCount(); oClass:AddInline( "recCount", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:reccount(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER fieldValueByName(); oClass:AddInline( "fieldValueByName", {|Self, cColumn | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:getValueByName( cColumn ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER saveRecno(); oClass:AddInline( "saveRecno", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::nRecno := ::oRowSet:recno(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER restoreRecno(); oClass:AddInline( "restoreRecno", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:goto( ::nRecno ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER gotoRecno(); oClass:AddInline( "gotoRecno", {|Self, nRecno | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:goto( nRecno ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER goTop(); oClass:AddInline( "goTop", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:goTop(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Skip(); oClass:AddInline( "Skip", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:Skip(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Recno(); oClass:AddInline( "Recno", {|Self, nRecno | ( ( Self ) ), ( if( !empty( ::oRowSet ) .AND. empty( nRecno ), ::oRowSet:Recno(), ::oRowSet:goto( nRecno ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Eof(); oClass:AddInline( "Eof", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:eof(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER goDown(); oClass:AddInline( "goDown", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:skip(1), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER goUp(); oClass:AddInline( "goUp", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:skip(-1), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FindString( nId); oClass:AddMethod( "FindString", @SQLRowSet_FindString(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER FindId( nId); oClass:AddMethod( "FindId", @SQLRowSet_FindId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Build( cSentence); oClass:AddMethod( "Build", @SQLRowSet_Build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER BuildPad(); oClass:AddInline( "BuildPad", {|Self, cSentence | ( ( Self ) ), ::Build( cSentence, .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER refreshAndFindId(); oClass:AddInline( "refreshAndFindId", {|Self, nId | ( ( Self ) ), ( ::Refresh(), ::FindId( nId ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER buildAndFindId(); oClass:AddInline( "buildAndFindId", {|Self, nId | ( ( Self ) ), ( ::Build(), ::FindId( nId ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER refreshAndFindString(); oClass:AddInline( "refreshAndFindString", {|Self, cFind, cColumn | ( ( Self ) ), ( ::Refresh(), ::FindString( cFind, cColumn ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER buildAndFindString(); oClass:AddInline( "buildAndFindString", {|Self, cFind, cColumn | ( ( Self ) ), ( ::Build(), ::FindString( cFind, cColumn ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER freeRowSet(); oClass:AddInline( "freeRowSet", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ( ::oRowSet:free(), ::oRowSet := nil ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Refresh(); oClass:AddInline( "Refresh", {|Self | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:Refresh(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER IdFromRecno( aRecno, cColumnKey); oClass:AddMethod( "IdFromRecno", @SQLRowSet_IdFromRecno(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER UuidFromRecno(); oClass:AddInline( "UuidFromRecno", {|Self, aRecno | ( ( Self ) ), ( ::IdFromRecno( aRecno, "uuid" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFindValue(); oClass:AddMethod( "getFindValue", @SQLRowSet_getFindValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setFilter(); oClass:AddInline( "setFilter", {|Self, bFilter | ( ( Self ) ), ( if( !empty( ::oRowSet ), ::oRowSet:setFilter( bFilter ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLRowSet ;



static FUNCTION SQLRowSet_New( oController ) ; local Self AS CLASS SQLRowSet := QSelf() AS CLASS SQLRowSet

   ::oController                                      := oController

   ::oEvents                                          := Events():New()

RETURN ( Self )



static FUNCTION SQLRowSet_End( ) ; local Self AS CLASS SQLRowSet := QSelf() AS CLASS SQLRowSet

   ::oEvents:End()

   ::freeRowSet()

RETURN ( nil )



static FUNCTION SQLRowSet_Build( cSentence, lPad ) ; local Self AS CLASS SQLRowSet := QSelf() AS CLASS SQLRowSet

   local oError

   If( lPad == nil, lPad := .F., ) ;

   if empty( cSentence )
      msgStop( "La sentencia esta vacia", "SQLRowSet" )
      RETURN ( nil )
   end

   if !getSQLDatabase():parse( cSentence )
      msgStop( cSentence, "Sentencia no valida" )
      logwrite( cSentence )
      RETURN ( nil )
   end

   cursorWait()

   ::oEvents:fire( "buildingRowSet" )

   BEGIN SEQUENCE WITH { | oErr | Break( oErr ) }

      ::freeRowSet()

      ::oRowSet      := getSQLDatabase():RowSet( cSentence )

      ::oRowSet:setAttribute( 100002, lPad )

      ::oRowSet:Load()

   RECOVER USING oError

      eval( errorBlock(), oError )

   end

   ::oRowSet:goTop()

   ::oEvents:fire( "builtRowSet" )

   cursorWE()

RETURN ( Self )



static FUNCTION SQLRowSet_FindString( cFind, cColumn ) ; local Self AS CLASS SQLRowSet := QSelf() AS CLASS SQLRowSet

   local cType
   local nRecno         := 0

   If( cColumn == nil, cColumn := "id", ) ;

   if empty( ::oRowSet )
      RETURN ( .F. )
   end

   if empty( cFind )
      RETURN ( .F. )
   end

   cFind                := ::getFindValue( cFind, cColumn )

   if empty( cFind )
      RETURN ( .F. )
   end

   ::saveRecno()

   nRecno               := ::oRowSet:findString( cFind, cColumn )

   if nRecno == 0
      ::restoreRecno()
   end

RETURN ( nRecno <> 0 )



static FUNCTION SQLRowSet_FindId( nId ) ; local Self AS CLASS SQLRowSet := QSelf() AS CLASS SQLRowSet

   local nRecno         := 0

   if empty( ::oRowSet )
      RETURN ( .F. )
   end

   if empty( nId )
      RETURN ( .F. )
   end

   ::saveRecno()

   nRecno               := ::oRowSet:find( nId, "id" )

   if nRecno == 0
      ::restoreRecno()
   end

RETURN ( nRecno <> 0 )



static FUNCTION SQLRowSet_IdFromRecno( aRecno, cColumnKey ) ; local Self AS CLASS SQLRowSet := QSelf() AS CLASS SQLRowSet

   local aId            := {}

   If( cColumnKey == nil, cColumnKey := "id", ) ;

   aeval( aRecno, {|nRecno| ::oRowSet:goTo( nRecno ), aadd( aId, ::oRowSet:fieldget( cColumnKey ) ) } )

RETURN ( aId )



static FUNCTION SQLRowSet_getFindValue( uFind, cColumn ) ; local Self AS CLASS SQLRowSet := QSelf() AS CLASS SQLRowSet

   local cType

   if !( hb_ischar( uFind ) )
      RETURN ( uFind )
   end

   if empty( ::oRowSet )
      RETURN ( uFind )
   end

   if right( uFind, 1 ) <> "*"
      uFind       += "*"
   end

RETURN ( uFind )
