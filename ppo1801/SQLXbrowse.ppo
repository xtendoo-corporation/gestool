#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 14 ".\.\Prg\SQLXbrowse.prg"
_HB_CLASS SQLXBrowse ; function SQLXBrowse ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLXBrowse", iif( .T., { @TXBrowse() }, { @HBObject() } ), @SQLXBrowse() ) ) ;

   _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER { AS ARRAY aHeaders } ; oClass:AddMultiData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aHeaders"}, .F. )

   _HB_MEMBER { AS CHARACTER cName } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )

   _HB_MEMBER { AS CHARACTER cOriginal } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOriginal"}, .F. )

   _HB_MEMBER { AS CHARACTER cViewType } ; oClass:AddMultiData( "CHARACTER", "navigator", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cViewType"}, .F. )

   _HB_MEMBER New( oController, oWnd); oClass:AddMethod( "New", @SQLXBrowse_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setRowSet( oRowSet); oClass:AddMethod( "setRowSet", @SQLXBrowse_setRowSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setHashList( oHashList); oClass:AddMethod( "setHashList", @SQLXBrowse_setHashList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectCurrent(); oClass:AddInline( "selectCurrent", {|Self | ( ( Self ) ), ( ::Select( 0 ), ::Select( 1 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnByHeaders(); oClass:AddMethod( "getColumnByHeaders", @SQLXBrowse_getColumnByHeaders(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER changeColumnOrder( oCol); oClass:AddMethod( "changeColumnOrder", @SQLXBrowse_changeColumnOrder(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER selectColumnOrder(); oClass:AddInline( "selectColumnOrder", {|Self, oCol | ( ( Self ) ), ( ::changeColumnOrder( oCol ), ::Refresh() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnByHeader( cHeader); oClass:AddMethod( "getColumnByHeader", @SQLXBrowse_getColumnByHeader(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrder( cSortOrder); oClass:AddMethod( "getColumnOrder", @SQLXBrowse_getColumnOrder(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getColumnOrderHeader(); oClass:AddInline( "getColumnOrderHeader", {|Self, cSortOrder | ( ( Self ) ), ( if( !empty( ::getColumnOrder( cSortOrder ) ), ::getColumnOrder( cSortOrder ):cHeader, "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getColumnOrderByHeader( cHeader); oClass:AddMethod( "getColumnOrderByHeader", @SQLXBrowse_getColumnOrderByHeader(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFirstVisibleColumn(); oClass:AddMethod( "getFirstVisibleColumn", @SQLXBrowse_getFirstVisibleColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RButtonDown( nRow, nCol, nFlags); oClass:AddMethod( "RButtonDown", @SQLXBrowse_RButtonDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ExportToExcel(); oClass:AddMethod( "ExportToExcel", @SQLXBrowse_ExportToExcel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER MakeTotals( aCols); oClass:AddMethod( "MakeTotals", @SQLXBrowse_MakeTotals(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER setName(); oClass:AddInline( "setName", {|Self, cName | ( ( Self ) ), ( ::cName := cName ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getName(); oClass:AddInline( "getName", {|Self | ( ( Self ) ), ( ::cName ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getOriginalState(); oClass:AddInline( "getOriginalState", {|Self | ( ( Self ) ), ( ::cOriginal := ::saveState() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setOriginalState(); oClass:AddInline( "setOriginalState", {|Self | ( ( Self ) ), ( if( !empty( ::cOriginal ), ::restoreState( ::cOriginal ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setViewType(); oClass:AddInline( "setViewType", {|Self, cViewType | ( ( Self ) ), ( ::cViewType := cViewType ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getViewType(); oClass:AddInline( "getViewType", {|Self | ( ( Self ) ), ( ::cViewType ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER saveStateToModel( cViewType); oClass:AddMethod( "saveStateToModel", @SQLXBrowse_saveStateToModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER restoreStateFromModel( cViewType); oClass:AddMethod( "restoreStateFromModel", @SQLXBrowse_restoreStateFromModel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setFilterInRowSet( cFilterExpresion); oClass:AddMethod( "setFilterInRowSet", @SQLXBrowse_setFilterInRowSet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSelectedCol(); oClass:AddInline( "getSelectedCol", {|Self | ( ( Self ) ), ::SelectedCol() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLXBrowse ;



static FUNCTION SQLXBrowse_New( oController, oWnd ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   ::oController     := oController

   ::Super:New( oWnd )

   ::lAutoSort       := .T.
   ::l2007           := .F.
   ::bClrSel         := {|| { 0, ( 221 + ( 221 * 256 ) + ( 221 * 65536 ) ) } }
   ::bClrSelFocus    := {|| { 0, ( 221 + ( 221 * 256 ) + ( 221 * 65536 ) ) } }
   ::lSortDescend    := .F.

RETURN ( Self )






static FUNCTION SQLXBrowse_RButtonDown( nRow, nCol, nFlags ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local oCol
   local oMenu
   local bMenuSelect

   oMenu             := MenuBegin( .T. )
   bMenuSelect       := ::bMenuSelect

   ::bMenuSelect     := nil

   if hb_isnil( ::SelectedCol():Cargo )

   MenuAddItem( "Filtro rápido", "Establecer fitro rápido en columna actual", .F., .T., , , "gc_funnel_add_16", oMenu )

      MenuBegin( .F., , , .F., .F., , , , , , , , , , , , .F., .T., .F., .T. )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' IN (" + toSqlString( ::SelectedCol():Value() ) + ")", "", .F., .T., {|| ::oController:buildInFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' NOT IN ('" + toSqlString( ::SelectedCol():Value() ) + "')", "", .F., .T., {|| ::oController:buildNotInFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' > '" + toSqlString( ::SelectedCol():Value() ) + "'", "", .F., .T., {|| ::oController:buildBiggerFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' < '" + toSqlString( ::SelectedCol():Value() ) + "'", "", .F., .T., {|| ::oController:buildSmallerFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' LIKE '" + toSqlString( ::SelectedCol():Value() ) + "%'", "", .F., .T., {|| ::oController:buildStartLikeFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' LIKE '%" + toSqlString( ::SelectedCol():Value() ) + "'", "", .F., .T., {|| ::oController:buildEndLikeFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' LIKE '%" + toSqlString( ::SelectedCol():Value() ) + "%'", "", .F., .T., {|| ::oController:buildLikeFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem()

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' IN (...)", "", .F., .T., {|| ::oController:buildCustomInFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' NOT IN (...)", "", .F., .T., {|| ::oController:buildCustomNotInFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' > '", "", .F., .T., {|| ::oController:buildCustomBiggerFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' < '", "", .F., .T., {|| ::oController:buildCustomSmallerFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem( "'" + ::SelectedCol():cSortOrder + "' LIKE '%...%'", "", .F., .T., {|| ::oController:buildCustomLikeFilter( ::SelectedCol():cSortOrder, ::SelectedCol():Value() ) }, "gc_funnel_add_16" )

         MenuAddItem()

         MenuAddItem( "Limpiar filtro", "", .F., .T., {|| ::oController:clearFilter() }, "gc_funnel_broom_16" )

      MenuEnd()

   end

   MenuAddItem( "Columnas", "Columnas de la rejilla de datos", .F., .T., , , "gc_table_selection_column_16", oMenu )

      MenuBegin( .F., , , .F., .F., , , , , , , , , , , , .F., .T., .F., .T. )

         for each oCol in ::aCols
            MenuAddItem( oCol:cHeader, , !oCol:lHide, ( Len( ::aDisplay ) <> 1 .OR. oCol:nPos <> 1 ), GenMenuBlock( oCol ) )
         next

      MenuEnd()

      MenuAddItem( "Seleccionar &todo", "Selecciona todas las filas de la rejilla", .F., .T., {|| ::SelectAll() }, , "gc_table_selection_all_16", oMenu )

      MenuAddItem( "&Quitar selección", "Quita la selección de todas las filas de la rejilla", .F., .T., {|| ::SelectNone() }, , "gc_table_16", oMenu )

      MenuAddItem()

      MenuAddItem( "Exportar a E&xcel", "Exportar rejilla de datos a Excel", .F., .T., {|| ::ExportToExcel() }, , "gc_spreadsheet_sum_16", oMenu )

      MenuAddItem()

      MenuAddItem( "Guardar vista actual", "Guarda la vista actual de la rejilla de datos", .F., .T., {|| ::saveStateToModel() }, , "gc_table_selection_column_disk_16", oMenu )

      MenuAddItem( "Cargar vista por defecto", "Carga la vista por defecto de la rejilla de datos", .F., .T., {|| ::setOriginalState() }, , "gc_table_selection_column_refresh_16", oMenu )

   MenuEnd()

   oMenu:Activate( nRow, nCol, Self )

   ::bMenuSelect     := bMenuSelect

   oMenu:end()

   ::SetFocus()

RETURN ( Self )



STATIC FUNCTION GenMenuBlock( oCol )

RETURN {|| iif( oCol:lHide, oCol:Show(), oCol:Hide() ) }



static FUNCTION SQLXBrowse_setRowSet( oRowSet ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   if empty( oRowSet )
      RETURN ( nil )
   end

   ::lAutoSort       := .F.
   ::nDataType       := 4096
   ::nRowHeight      := 20
   ::bGoTop          := {|| oRowSet:Get():GoTop() }
   ::bGoBottom       := {|| oRowSet:Get():GoBottom() }
   ::bBof            := {|| oRowSet:Get():Bof() }
   ::bEof            := {|| oRowSet:Get():Eof() }
   ::bKeyCount       := {|| oRowSet:Get():RecCount() }
   ::bSkip           := {| n | oRowSet:Get():Skipper( n ) }
   ::bKeyNo          := {| n | oRowSet:Get():RecNo() }
   ::bBookMark       := {| n | iif( n == nil, oRowSet:Get():RecNo(), oRowSet:Get():GoTo( n ) ) }

   if ::oVScroll() <> nil
      ::oVscroll():SetRange( 1, oRowSet:Get():RecCount() )
   endif

   ::lFastEdit       := .T.

RETURN nil



static FUNCTION SQLXBrowse_setHashList( oContainer ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   ::lAutoSort       := .F.
   ::nDataType       := 4096
   ::nRowHeight      := 20
   ::bGoTop          := {|| oContainer:oHashList:GoTop() }
   ::bGoBottom       := {|| oContainer:oHashList:GoBottom() }
   ::bBof            := {|| oContainer:oHashList:Bof() }
   ::bEof            := {|| oContainer:oHashList:Eof() }
   ::bKeyCount       := {|| oContainer:oHashList:RecCount() }
   ::bSkip           := {| n | oContainer:oHashList:Skipper( n ) }
   ::bKeyNo          := {| n | oContainer:oHashList:RecNo() }
   ::bBookMark       := {| n | iif( n == nil, oContainer:oHashList:RecNo(), oContainer:oHashList:GoTo( n ) ) }

   if ::oVScroll() <> nil
      ::oVscroll():SetRange( 1, oContainer:oHashList:RecCount() )
   endif

   ::lFastEdit       := .T.

RETURN nil



static FUNCTION SQLXBrowse_ExportToExcel( ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local oError
   local oBlock

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      CursorWait()

      ::ToExcel()

      CursorWe()

   RECOVER USING oError

      msgStop( "Error exportando a excel." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN nil



static FUNCTION SQLXBrowse_MakeTotals( ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local uBm
   local aCols    := {}


   aeval( ::aCols, {|oCol| if( !empty( oCol:nFooterType ), ( oCol:nTotal := 0.0, aadd( aCols, oCol ) ), ) } )

   if empty( aCols )
      RETURN ( Self )
   end

   uBm            := eval( ::bBookMark )

   eval( ::bGoTop )

   while .T.
      aeval( aCols, {|oCol| oCol:nTotal  += oCol:Value, oCol:nCount++ } )
   if ( ::skip( 1 ) < 1 ); exit; end; end

   eval( ::bBookMark, uBm )

RETURN ( Self )



static FUNCTION SQLXBrowse_getColumnByHeaders( ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   ::aHeaders  := {}

   aeval( ::aCols, { |o| if( !empty( o:cHeader ), aadd( ::aHeaders, o:cHeader ), ) } )

RETURN ( ::aHeaders )



static FUNCTION SQLXBrowse_changeColumnOrder( oCol ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   if empty( oCol )
      RETURN ( Self )
   end

   aeval( ::aCols, {|o| if( o:cSortOrder <> oCol:cSortOrder, o:cOrder := "", ) } )

   if empty( oCol:cOrder ) .OR. oCol:cOrder == "A"
      oCol:cOrder := "D"
   else
      oCol:cOrder := "A"
   end

RETURN ( Self )



static FUNCTION SQLXBrowse_getColumnByHeader( cHeader ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local nPosition

   if !hb_ischar( cHeader )
      RETURN ( nil )
   end

   nPosition   := ascan( ::aCols, {|o| o:cHeader == cHeader } )

   if nPosition <> 0
      RETURN ( ::aCols[ nPosition ] )
   end

RETURN ( nil )



static FUNCTION SQLXBrowse_getColumnOrder( cSortOrder ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local nPosition

   if !empty( cSortOrder )
      nPosition   := ascan( ::aCols, {|o| o:cSortOrder == cSortOrder } )
   else
      nPosition   := ascan( ::aCols, {|o| !empty( o:cSortOrder ) .AND. !( o:lHide ) } )
   end

   nPosition      := max( nPosition, 1 )

RETURN ( ::aCols[ nPosition ] )



static FUNCTION SQLXBrowse_getColumnOrderByHeader( cHeader ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local oCol     := ::getColumnByHeader( cHeader )

   if !empty( oCol )
      RETURN ( oCol:cSortOrder )
   end

RETURN ( nil )



static FUNCTION SQLXBrowse_getFirstVisibleColumn( ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local oCol

   for each oCol in ::aCols
      if !empty( oCol:cHeader ) .AND. !( oCol:lHide )
         RETURN ( oCol )
      end
   next

RETURN ( nil )



static FUNCTION SQLXBrowse_saveStateToModel( cViewType ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   If( cViewType == nil, cViewType := ::getViewType(), ) ;



RETURN ( Self )



static FUNCTION SQLXBrowse_restoreStateFromModel( cViewType ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   local cBrowseState

   If( cViewType == nil, cViewType := ::getViewType(), ) ;

   ::getOriginalState()

   cBrowseState         := SQLConfiguracionVistasModel():getState( cViewType, ::getName() )

   if !empty( cBrowseState )
      ::restoreState( cBrowseState )
   end

RETURN ( Self )



static FUNCTION SQLXBrowse_setFilterInRowSet( cFilterExpresion ) ; local Self AS CLASS SQLXBrowse := QSelf() AS CLASS SQLXBrowse

   msgalert( ::SelectedCol():cSortOrder + cFilterExpresion + " ('" + alltrim( cvaltostr( ::SelectedCol():Value() ) ) + "' )" )



   ::oRowSet:setFilter( { || ::oRowSet:fieldGet( 1 ) == 1 } )

RETURN ( Self )
