#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\SesionesController.prg"
_HB_CLASS SesionesController ; function SesionesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SesionesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @SesionesController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @SesionesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @SesionesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SesionesController ;



static FUNCTION SesionesController_New( oSenderController ) ; local Self AS CLASS SesionesController := QSelf() AS CLASS SesionesController

   ::Super:New( oSenderController )

   ::cTitle                      := "Sesiones"

   ::cName                       := "sesiones"



   ::hImage                      := {  "16" => "gc_clock_16", "32" => "gc_clock_32", "48" => "gc_clock_48" }

   ::nLevel                      := Auth():Level( ::cName )

   ::oModel                      := SQLSesionesModel():New( self )

   ::oBrowseView                 := SesionesBrowseView():New( self )

   ::oDialogView                 := SesionesView():New( self )

   ::oValidator                  := SesionesValidator():New( self, ::oDialogView )

   ::oRepository                 := SesionesRepository():New( self )

   ::oGetSelector                := GetSelector():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

RETURN ( Self )



static FUNCTION SesionesController_End( ) ; local Self AS CLASS SesionesController := QSelf() AS CLASS SesionesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )









_HB_CLASS SesionesBrowseView ; function SesionesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SesionesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @SesionesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @SesionesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SesionesBrowseView ;



static FUNCTION SesionesBrowseView_addColumns( ) ; local Self AS CLASS SesionesBrowseView := QSelf() AS CLASS SesionesBrowseView









































RETURN ( self )









_HB_CLASS SesionesView ; function SesionesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SesionesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @SesionesView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @SesionesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SesionesView ;








static FUNCTION SesionesView_Activate( ) ; local Self AS CLASS SesionesView := QSelf() AS CLASS SesionesView






























































RETURN ( ::oDialog:nResult )









_HB_CLASS SesionesValidator ; function SesionesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SesionesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @SesionesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @SesionesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SesionesValidator ;



static FUNCTION SesionesValidator_getValidators( ) ; local Self AS CLASS SesionesValidator := QSelf() AS CLASS SesionesValidator





RETURN ( ::hValidators )










_HB_CLASS SQLSesionesModel ; function SQLSesionesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLSesionesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLSesionesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "cajas_sesiones", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLSesionesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLSesionesModel ;



static FUNCTION SQLSesionesModel_getColumns( ) ; local Self AS CLASS SQLSesionesModel := QSelf() AS CLASS SQLSesionesModel


   hset( ::hColumns, "id",                         {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                       {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "caja_uuid",                  {  "create"    => "VARCHAR( 40 )"                           , "default"   => {||space( 40 ) } }                        )


   hset( ::hColumns, "codigo",                     {  "create"    => "INTEGER"                                 , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "fecha_hora_inicio",          {  "create"    => "TIMESTAMP"                               , "default"   => {||hb_datetime() } }                      )


   hset( ::hColumns, "fecha_hora_cierre",          {  "create"    => "TIMESTAMP"                               , "default"   => {|| ctod( "" ) } }                        )


   hset( ::hColumns, "estado",                     {  "create"     => "ENUM( 'Abierta', 'Cerrada' )"           , "default"    => {|| "Abierta" }  }                       )


   hset( ::hColumns, "delegacion_uuid",            {  "create"    => "VARCHAR( 40 )"                           , "default"   => {||space( 40 ) } }                        )





RETURN ( ::hColumns )











_HB_CLASS SesionesRepository ; function SesionesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SesionesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @SesionesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLSesionesModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SesionesRepository ;