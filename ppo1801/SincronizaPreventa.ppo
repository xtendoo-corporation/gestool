#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\SincronizaPreventa.prg"
_HB_CLASS SincronizaPreventa ; function SincronizaPreventa ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SincronizaPreventa", iif( .T., { @TInfGen() }, { @HBObject() } ), @SincronizaPreventa() ) ) ;

   _HB_MEMBER { AS OBJECT oMetMsg } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMetMsg"}, .F. )
   _HB_MEMBER { AS OBJECT oRuta } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oRuta"}, .F. )
   _HB_MEMBER { AS CHARACTER cRuta } ; oClass:AddMultiData( "CHARACTER", Space( 250 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cRuta"}, .F. )
   _HB_MEMBER { AS OBJECT oCodEmpresa } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCodEmpresa"}, .F. )
   _HB_MEMBER { AS CHARACTER cCodEmpresa } ; oClass:AddMultiData( "CHARACTER", Space( 250 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCodEmpresa"}, .F. )
   _HB_MEMBER { AS OBJECT oMessage } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMessage"}, .F. )
   _HB_MEMBER { AS CHARACTER cMessage } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMessage"}, .F. )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @SincronizaPreventa_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @SincronizaPreventa_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate( oMenuItem, oWnd); oClass:AddMethod( "Activate", @SincronizaPreventa_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Search(); oClass:AddMethod( "Search", @SincronizaPreventa_Search(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SincronizaPreventa ;



static FUNCTION SincronizaPreventa_OpenFiles( ) ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos.", "Atención" )

      ::CloseFiles()

      lOpen := .F.

   end

   ErrorBlock( oBlock )

RETURN( lOpen )



static FUNCTION SincronizaPreventa_CloseFiles( ) ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   if !Empty( ::oDbfArt )
      ::oDbfArt:End()
   end

   ::oDbfArt   := nil

RETURN ( Self )



static FUNCTION SincronizaPreventa_Activate( oMenuItem, oWnd ) ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   local oDlg
   local nLevel
   local nMetMsg        := 0
   local oCodArt
   local cCodArt        := ""
   local oSayArt
   local cSayArt        := ""
   local oBmp

   If( oMenuItem == nil, oMenuItem := "04016", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;



   nLevel               := Auth():Level( oMenuItem )
   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return nil
   end



   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !::OpenFiles()
      Return ( Self )
   end





   ::cRuta              :=  Padr( GetPvProfString( "Preventa", "Ruta",     Space( 250 ), cIniEmpresa() ), 250 )
   ::cCodEmpresa        :=  Padr( GetPvProfString( "Preventa", "Empresa",  Space( 250 ), cIniEmpresa() ), 250 )

   oDlg = TDialog():New(,,,,, "SINCRONIZAPC",, .F.,,,,, oWnd(), .F.,,,,,, .F.,, "oDlg", nil, )





   oBmp := TBitmap():ReDefine( 600, "gc_pda_write_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )




   ::oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cRuta, ::cRuta:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




   ::oCodEmpresa := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::cCodEmpresa, ::cCodEmpresa:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




   ::oMessage := TSay():ReDefine( 110, {||   ::cMessage}, oDlg,,,, .F.,, .F., .F., )




   TButton():ReDefine( 500, {||( ::Search( oDlg ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 550, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ::CloseFiles()

   oBmp:End()





   WritePProString( "Preventa", "Ruta",      ::cRuta,       cIniEmpresa() )
   WritePProString( "Preventa", "Empresa",   ::cCodEmpresa, cIniEmpresa() )

RETURN ( Self )



static FUNCTION SincronizaPreventa_Search( oDlg ) ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   local oBlock
   local oError
   local cPatServidor   := AllTrim( ::cRuta ) + "EMP" + AllTrim( ::cCodEmpresa ) + "\"

   if Empty( ::cRuta ) .AND. Empty( ::cCodEmpresa )
      msgStop( "La ruta del servidor no puede estar vacia." )
      return .F.
   end

   oDlg:Disable()

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE









   pdaRutaSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaAlmacenSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaTIvaSenderReciver():CreateData( , ::oMessage, AllTrim( ::cRuta ) )

























   pdaTransSenderReciver():CreateData( , ::oMessage, cPatServidor )







   RECOVER USING oError

      msgStop( "Ocurrió un error al sincronizar los ficheros" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   oDlg:Enable()

   msginfo( "Proceso finalizado correctamente" )

RETURN ( oDlg:End() )
