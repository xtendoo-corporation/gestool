#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\SituacionesController.prg"
_HB_CLASS SituacionesController ; function SituacionesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SituacionesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @SituacionesController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @SituacionesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SituacionesController ;



static FUNCTION SituacionesController_New( ) ; local Self AS CLASS SituacionesController := QSelf() AS CLASS SituacionesController

   ::Super:New()

   ::cTitle                := "Situaciones"

   ::cName                 := "situaciones"

   ::hImage                := { "16" => "gc_document_attachment_16" }

   ::nLevel                := Auth():Level( ::cName )

   ::oModel                := SQLSituacionesModel():New( self )

   ::oBrowseView           := SituacionesBrowseView():New( self )

   ::oDialogView           := SituacionesView():New( self )

   ::oValidator            := SituacionesValidator():New( self )

   ::oFilterController:setTableToFilter( ::oModel:cTableName )

RETURN ( Self )










_HB_CLASS SituacionesBrowseView ; function SituacionesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SituacionesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @SituacionesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @SituacionesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SituacionesBrowseView ;



static FUNCTION SituacionesBrowseView_addColumns( ) ; local Self AS CLASS SituacionesBrowseView := QSelf() AS CLASS SituacionesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )









_HB_CLASS SituacionesView ; function SituacionesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SituacionesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @SituacionesView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @SituacionesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SituacionesView ;



static FUNCTION SituacionesView_Activate( ) ; local Self AS CLASS SituacionesView := QSelf() AS CLASS SituacionesView

   local oDlg
   local oGetNombre

   oDlg = TDialog():New(,,,, ::LblTitle() + "situación", "SITUACION",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







   oGetNombre := TMultiGet():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, oDlg,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )}, .F., {||       ( ::oController:validate( "nombre" ) )}, )





   TButton():ReDefine( 1, {||( if( validateDialog( oDlg ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )



   if ::oController:isNotZoomMode()
      oDlg:AddFastKey( 116, {|| if( validateDialog( oDlg ), oDlg:end( 1 ), ) } )
   end



   oDlg:bStart    := {|| oGetNombre:setFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult )











_HB_CLASS SituacionesValidator ; function SituacionesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SituacionesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @SituacionesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @SituacionesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SituacionesValidator ;



static FUNCTION SituacionesValidator_getValidators( ) ; local Self AS CLASS SituacionesValidator := QSelf() AS CLASS SituacionesValidator


   ::hValidators  := {  "nombre" => {  "required"     => "El nombre de la situación es un dato requerido", "unique"       => "El nombre de la situación ya existe" } }

RETURN ( ::hValidators )










_HB_CLASS SQLSituacionesModel ; function SQLSituacionesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLSituacionesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLSituacionesModel() ) ) ;

   _HB_MEMBER { cColumnCode } ; oClass:AddMultiData(, "nombre", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cColumnCode"}, .F. )

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "situaciones", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLSituacionesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLSituacionesModel ;



static FUNCTION SQLSituacionesModel_getColumns( ) ; local Self AS CLASS SQLSituacionesModel := QSelf() AS CLASS SQLSituacionesModel


   hset( ::hColumns, "id",          {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",        {  "create"    => "VARCHAR(40) NOT NULL UNIQUE" , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "nombre",      {  "create"    => "VARCHAR( 140 )"                          , "default"   => {|| space( 140 ) } }                       )

RETURN ( ::hColumns )











_HB_CLASS SituacionesRepository ; function SituacionesRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SituacionesRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @SituacionesRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( if( !empty( ::getController() ), ::getModelTableName(), SQLSituacionesModel():getTableName() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombres(); oClass:AddMethod( "getNombres", @SituacionesRepository_getNombres(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SituacionesRepository ;



static FUNCTION SituacionesRepository_getNombres( ) ; local Self AS CLASS SituacionesRepository := QSelf() AS CLASS SituacionesRepository

   local cSentence               := "SELECT nombre FROM " + ::getTableName()
   local aNombres                := ::getDatabase():selectFetchArrayOneColumn( cSentence )

RETURN ( aNombres )
