#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\Views\SqlGetSelector.prg"
_HB_CLASS GetSelector ; function GetSelector ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "GetSelector", iif( .F., { }, { @HBObject() } ), @GetSelector() ) ) ;

   _HB_MEMBER { oController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oController"}, .F. )

   _HB_MEMBER { oDialog } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDialog"}, .F. )

   _HB_MEMBER { bValue } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bValue"}, .F. )

   _HB_MEMBER { bValid } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bValid"}, .F. )

   _HB_MEMBER { oGet } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGet"}, .F. )
   _HB_MEMBER { cGet } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGet"}, .F. )

   _HB_MEMBER { cKey } ; oClass:AddMultiData(, "codigo", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cKey"}, .F. )

   _HB_MEMBER { uFields } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uFields"}, .F. )

   _HB_MEMBER { oEvents } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEvents"}, .F. )

   _HB_MEMBER New( oSender); oClass:AddMethod( "New", @GetSelector_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @GetSelector_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setKey(); oClass:AddInline( "setKey", {|Self, cKey | ( ( Self ) ), ( ::cKey := cKey ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getKey(); oClass:AddInline( "getKey", {|Self | ( ( Self ) ), ( ::cKey ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getView(); oClass:AddInline( "getView", {|Self | ( ( Self ) ), ( ::oController:getView() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Build( hBuilder); oClass:AddMethod( "Build", @GetSelector_Build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate( idGet, idText, oDlg); oClass:AddMethod( "Activate", @GetSelector_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Bind(); oClass:AddInline( "Bind", {|Self, bValue | ( ( Self ) ), ( ::bValue := bValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setValid(); oClass:AddInline( "setValid", {|Self, bValid | ( ( Self ) ), ( ::bValid := bValid ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER helpAction(); oClass:AddMethod( "helpAction", @GetSelector_helpAction(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validAction(); oClass:AddMethod( "validAction", @GetSelector_validAction(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadHelpText(); oClass:AddMethod( "loadHelpText", @GetSelector_loadHelpText(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER cleanHelpText(); oClass:AddInline( "cleanHelpText", {|Self | ( ( Self ) ), ( ::oGet:oHelptext:cText( "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setHelpText(); oClass:AddInline( "setHelpText", {|Self, value | ( ( Self ) ), ( ::oGet:oHelptext:cText( value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFields(); oClass:AddInline( "getFields", {|Self | ( ( Self ) ), ( ::uFields   := ::oController:oModel:getField( "nombre", ::getKey(), ::oGet:varGet() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER start(); oClass:AddInline( "start", {|Self | ( ( Self ) ), ( ::loadHelpText( .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER evalValue(); oClass:AddInline( "evalValue", {|Self, value | ( ( Self ) ), ( eval( ::bValue, value ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER showMessage(); oClass:AddMethod( "showMessage", @GetSelector_showMessage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Hide(); oClass:AddInline( "Hide", {|Self | ( ( Self ) ), ( if( !empty( ::oGet ), ::oGet:Hide(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Show(); oClass:AddInline( "Show", {|Self | ( ( Self ) ), ( if( !empty( ::oGet ), ::oGet:Show(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER setEvent(); oClass:AddInline( "setEvent", {|Self, cEvent, bEvent | ( ( Self ) ), ( if( !empty( ::oEvents ), ::oEvents:set( cEvent, bEvent ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER fireEvent(); oClass:AddInline( "fireEvent", {|Self, cEvent | ( ( Self ) ), ( if( !empty( ::oEvents ), ::oEvents:fire( cEvent ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS GetSelector ;



static FUNCTION GetSelector_New( oController ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   ::oController  := oController

   ::oEvents      := Events():New()

RETURN ( Self )



static FUNCTION GetSelector_End( ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   if !empty( ::oEvents )
      ::oEvents:End()
   end

RETURN ( nil )



static FUNCTION GetSelector_Build( hBuilder ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   local idGet    := if( hhaskey( hBuilder, "idGet" ),   hBuilder[ "idGet" ],    nil )
   local idText   := if( hhaskey( hBuilder, "idText" ),  hBuilder[ "idText" ],   nil )
   local idSay    := if( hhaskey( hBuilder, "idSay" ),   hBuilder[ "idSay"],     nil )
   local oDlg     := if( hhaskey( hBuilder, "oDialog" ), hBuilder[ "oDialog" ],  nil )

RETURN ( ::Activate( idGet, idText, oDlg, idSay ) )



static FUNCTION GetSelector_Activate( idGet, idText, oDlg, idSay ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   if isFalse( ::fireEvent( "activating" ) )
      RETURN ( nil )
   end

   ::cGet         := eval( ::bValue )








   ::oGet := TGetHlp():ReDefine( idGet, { | u | If( PCount()==0, ::cGet, ::cGet:= u ) }, oDlg,,,,,,,,, .F., {||        ( ::oController:getSenderController():isNotZoomMode() )},, .F., .F.,,,,,, nil, "Lupa", idSay, idText )

   ::oGet:bHelp   := {|| ::helpAction() }
   ::oGet:bValid  := {|| ::validAction() }

   ::fireEvent( "activated" )

RETURN ( ::oGet )



static FUNCTION GetSelector_helpAction( ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   local hResult

   if isFalse( ::fireEvent( "helping" ) )
      RETURN ( .F. )
   end

   hResult        := ::oController:ActivateSelectorView()

   if hb_isnil( hResult )
      ::oGet:cText( "" )
      RETURN ( .F. )
   end

   if hhaskey( hResult, ::getKey() )

      ::oGet:cText( hGet( hResult, ::getKey() ) )

      ::evalValue( hGet( hResult, ::getKey() ) )

   end

   ::fireEvent( "helped" )

RETURN ( .T. )



static FUNCTION GetSelector_validAction( ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   if empty( ::bValid ) .OR. eval( ::bValid, ::cGet )
      RETURN ( ::loadHelpText() )
   end

RETURN ( .F. )



static FUNCTION GetSelector_loadHelpText( lSilenceMode ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   local value             := ""

   If( lSilenceMode == nil, lSilenceMode := .F., ) ;

   if empty( ::oGet )
      RETURN ( .T. )
   end

   if isFalse( ::fireEvent( "loading" ) )
      RETURN ( .F. )
   end

   ::evalValue( ::oGet:varGet() )

   ::cleanHelpText()

   if empty( ::oGet:varGet() )

      ::fireEvent( "loadingEmpty" )

      RETURN ( .T. )

   end

   ::getFields()

   if empty( ::uFields )

      ::fireEvent( "loadedError" )

      ::showMessage( lSilenceMode )

      RETURN ( .F. )

   end

   ::setHelpText( ::uFields )

   ::oGet:Refresh()

   ::fireEvent( "loaded" )

RETURN ( .T. )



static FUNCTION GetSelector_showMessage( lSilenceMode ) ; local Self AS CLASS GetSelector := QSelf() AS CLASS GetSelector

   if lSilenceMode
      RETURN ( self )
   end

   if empty( ::getView() ) .OR. empty( ::getView():oMessage )
      msgStop( ::oController:cTitle + " no encontrado" )
   else
      ::getView():showMessage( ::oController:cTitle + " no encontrado" )
   end

RETURN ( self )
