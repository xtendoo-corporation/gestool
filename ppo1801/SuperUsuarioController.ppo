#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\Prg\Controllers\SuperUsuarioController.prg"
_HB_CLASS SuperUsuarioController ; function SuperUsuarioController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SuperUsuarioController", iif( .T., { @SQLBaseController() }, { @HBObject() } ), @SuperUsuarioController() ) ) ;

   _HB_MEMBER New(); oClass:AddMethod( "New", @SuperUsuarioController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @SuperUsuarioController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isDialogViewActivate(); oClass:AddInline( "isDialogViewActivate", {|Self | ( ( Self ) ), ( ::oDialogView:Activate() == 1 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isNotDialogViewActivate(); oClass:AddInline( "isNotDialogViewActivate", {|Self | ( ( Self ) ), ( ::oDialogView:Activate() <> 1 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SuperUsuarioController ;



static FUNCTION SuperUsuarioController_New( ) ; local Self AS CLASS SuperUsuarioController := QSelf() AS CLASS SuperUsuarioController

   ::hImage                := { "48" => "gc_spy_48" }

   ::oRepository           := UsuariosRepository():New( self )

   ::oDialogView           := SuperUsuarioView():New( self )

   ::oValidator            := SuperUsuarioValidator():New( self, ::oDialogView )

RETURN ( Self )



static FUNCTION SuperUsuarioController_End( ) ; local Self AS CLASS SuperUsuarioController := QSelf() AS CLASS SuperUsuarioController

   if !empty( ::oDialogView )
      ::oDialogView:End()
      ::oDialogView           := nil
   endif

   if !empty( ::oValidator )
      ::oValidator:End()
      ::oValidator            := nil
   endif

   ::Super:End()

   Self                       := nil

RETURN ( nil )









_HB_CLASS SuperUsuarioView ; function SuperUsuarioView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SuperUsuarioView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @SuperUsuarioView() ) ) ;

   _HB_MEMBER { oGetPassword } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetPassword"}, .F. )
   _HB_MEMBER { cGetPassword } ; oClass:AddMultiData(, space( 100 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetPassword"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @SuperUsuarioView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER endActivate(); oClass:AddMethod( "endActivate", @SuperUsuarioView_endActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SuperUsuarioView ;



static FUNCTION SuperUsuarioView_Activate( ) ; local Self AS CLASS SuperUsuarioView := QSelf() AS CLASS SuperUsuarioView

   ::cGetPassword := space( 100 )


   ::oDialog = TDialog():New(,,,,, "SUPER_USUARIO",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )




   ::oGetPassword := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cGetPassword, ::cGetPassword:= u ) }, ::oDialog,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

   ::oGetPassword:bValid   := {|| ::oController:validate( "password", ::cGetPassword ) }




   TButton():ReDefine( 1, {||( ::endActivate() )}, ::oDialog,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   ::oDialog:AddFastKey( 116, {|| ::endActivate() } )

   ::oDialog:Activate( , , , .T. )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )



static FUNCTION SuperUsuarioView_endActivate( ) ; local Self AS CLASS SuperUsuarioView := QSelf() AS CLASS SuperUsuarioView

   if !( validateDialog( ::oDialog ) )
      RETURN ( 2 )
   end

   ::oDialog:end( 1 )

RETURN ( ::oDialog:nResult )







_HB_CLASS SuperUsuarioValidator ; function SuperUsuarioValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SuperUsuarioValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @SuperUsuarioValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @SuperUsuarioValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Password( cPassword); oClass:AddMethod( "Password", @SuperUsuarioValidator_Password(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SuperUsuarioValidator ;



static FUNCTION SuperUsuarioValidator_getValidators( ) ; local Self AS CLASS SuperUsuarioValidator := QSelf() AS CLASS SuperUsuarioValidator

   ::hValidators  := {  "password" =>  {  "password"  => "Contraseña de super usuario ¡incorrecta!" } }

RETURN ( ::hValidators )



static FUNCTION SuperUsuarioValidator_Password( cPassword ) ; local Self AS CLASS SuperUsuarioValidator := QSelf() AS CLASS SuperUsuarioValidator

RETURN ( UsuariosModel():validSuperUserPassword( cPassword ) )
