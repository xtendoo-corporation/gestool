#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TAcuFacIva.prg"
_HB_CLASS TAcuFacIva ; function TAcuFacIva ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAcuFacIva", iif( .T., { @TInfGen() }, { @HBObject() } ), @TAcuFacIva() ) ) ;

   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS CHARACTER cIvaDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIvaDes"}, .F. )
   _HB_MEMBER { AS CHARACTER cIvaHas } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIvaHas"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Liquidadas", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS LOGIC lAllIva } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllIva"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TAcuFacIva_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TAcuFacIva_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TAcuFacIva_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TAcuFacIva_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TAcuFacIva_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAcuFacIva ;




static FUNCTION TAcuFacIva_Create( ) ; local Self AS CLASS TAcuFacIva := QSelf() AS CLASS TAcuFacIva

   ::AddField ( "cTipIva", "C",  1, 0, {|| "@!" },         "Cod. " + cImp(),  .T., "Código tipo I.V.A"       , 10, .F. )
   ::AddField ( "cNomIva", "C", 30, 0, {|| "@!" },         "Nom. " + cImp(),  .T., "Nombre tipo I.V.A"       , 35, .F. )
   ::AddField ( "nPctIva", "N",  6, 2, {|| "@ 99.99" },    "% " + cImp(),     .T., "Porcentaje de I.V.A"     , 12, .F. )
   ::AddField ( "nBasFac", "N", 19, 6, {|| ::cPicOut },    "Base",            .T., "Base"                    , 15, .T. )
   ::AddField ( "nIvaFac", "N", 19, 6, {|| ::cPicOut },    cImp(),            .T., cImp()                    , 15, .T. )
   ::AddField ( "nReqFac", "N", 19, 6, {|| ::cPicOut },    "Rec",             .T., "Recargo"                 , 15, .T. )
   ::AddField ( "nTotFac", "N", 19, 6, {|| ::cPicOut },    "Total",           .T., "Total Factura"           , 15, .T. )

   ::AddTmpIndex( "cTipIva", "cTipIva" )

RETURN ( self )




static FUNCTION TAcuFacIva_OpenFiles( ) ; local Self AS CLASS TAcuFacIva := QSelf() AS CLASS TAcuFacIva

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE


   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )




static FUNCTION TAcuFacIva_CloseFiles( ) ; local Self AS CLASS TAcuFacIva := QSelf() AS CLASS TAcuFacIva

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
       if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oFacCliP := nil
   ::oAntCliT := nil
   ::oDbfIva  := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil

RETURN ( Self )




static FUNCTION TAcuFacIva_lResource( cFld ) ; local Self AS CLASS TAcuFacIva := QSelf() AS CLASS TAcuFacIva

   local cEstado     := "Todas"
   local oIvaDes
   local oIvaHas
   local oIvaDesTxt
   local oIvaHasTxt
   local cIvaDesTxt
   local cIvaHasTxt
   local oThis := ::oDbfIva

   if !::StdResource( "INF_GEN19" )
      return .F.
   end



   ::cIvaDes   := dbFirst( ::oDbfIva, 1 )
   ::cIvaHas   := dbLast(  ::oDbfIva, 1 )
   cIvaDesTxt  := dbFirst( ::oDbfIva, 2 )
   cIvaHasTxt  := dbLast(  ::oDbfIva, 2 )



   TCheckBox():ReDefine( 500, { | u | If( PCount()==0, ::lAllIva, ::lAllIva:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )







   oIvaDes := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cIvaDes, ::cIvaDes:= u ) }, ::oFld:aDialogs[1],,, {||    ( cTiva( oIvaDes, oThis:cAlias, oIvaDesTxt ) )},,,,,, .F., {||     ( !::lAllIva )},, .F., .F.,,,,, {|Self|( BrwIva( oIvaDes, oThis:cAlias, oIvaDesTxt ) )}, nil, "LUPA",, )




   oIvaDesTxt := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cIvaDesTxt, cIvaDesTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







   oIvaHas := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::cIvaHas, ::cIvaHas:= u ) }, ::oFld:aDialogs[1],,, {||    ( cTiva( oIvaHas, oThis:cAlias, oIvaHasTxt ) )},,,,,, .F., {||     ( !::lAllIva )},, .F., .F.,,,,, {|Self|( BrwIva( oIvaHas, oThis:cAlias, oIvaHasTxt ) )}, nil, "LUPA",, )




   oIvaHasTxt := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cIvaHasTxt, cIvaHasTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )



   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )

RETURN .T.




static FUNCTION TAcuFacIva_lGenerate( ) ; local Self AS CLASS TAcuFacIva := QSelf() AS CLASS TAcuFacIva

   local n
   local cCodIva
   local aTotFac
   local cExpHead  := ""



   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()






   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "tipo " + cImp() + " : " + if( ::lAllIva, "Todos", AllTrim( ::cIvaDes ) + " > " + AllTrim( ::cIvaHas ) ) }, {|| "Estado   : " + ::aEstado[ ::oEstado:nAt ] } }



   ::oFacCliT:OrdSetFocus( "dFecFac" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )



   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:cSerie, ::aSer )

         aTotFac  := aTotFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias, ::oAntCliT:cAlias )[ 8 ]

         for n := 1 to len( aTotFac )

            if hGet( aTotFac[ n ], "porcentajeiva" ) <> nil

               cCodIva           := cCodigoIva( ::oDbfIva:cAlias, hGet( aTotFac[ n ], "porcentajeiva" ) )

               if ( ::lAllIva .OR. ( cCodIva >= ::cIvaDes .AND. cCodIva <= ::cIvaHas ) )

                  if !::oDbf:Seek( cCodIva )



                     ::oDbf:Append()

                     ::oDbf:cTipIva    := cCodIva
                     ::oDbf:cNomIva    := oRetFld( cCodIva, ::oDbfIva )
                     ::oDbf:nPctIva    := hGet( aTotFac[ n ], "porcentajeiva" )
                     ::oDbf:nBasFac    := hGet( aTotFac[ n ], "neto" )
                     ::oDbf:nIvaFac    := hGet( aTotFac[ n ], "impiva" )
                     ::oDbf:nReqFac    := hGet( aTotFac[ n ], "impre" )
                     ::oDbf:nTotFac    := ::oDbf:nBasFac + ::oDbf:nIvaFac + ::oDbf:nReqFac

                     ::oDbf:Save()

                  else



                     ::oDbf:Load()

                     ::oDbf:nBasFac    += hGet( aTotFac[ n ], "neto" )
                     ::oDbf:nIvaFac    += hGet( aTotFac[ n ], "impiva" )
                     ::oDbf:nReqFac    += hGet( aTotFac[ n ], "impre" )
                     ::oDbf:nTotFac    := ::oDbf:nBasFac + ::oDbf:nIvaFac + ::oDbf:nReqFac

                     ::oDbf:Save()

                  end

               end

            end

         next

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end



   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )



   ::oFacRecT:OrdSetFocus( "dFecFac" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )



   ::oFacRecT:GoTop()

   while !::lBreak .AND. !::oFacRecT:Eof()

      if lChkSer( ::oFacRecT:cSerie, ::aSer )

         aTotFac  := aTotFacRec( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac, ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias )[ 8 ]

         for n := 1 to len( aTotFac )

            if aTotFac[ n, 3 ] <> nil

               cCodIva           := cCodigoIva( ::oDbfIva:cAlias, aTotFac[ n, 3 ] )

               if ( ::lAllIva .OR. ( cCodIva >= ::cIvaDes .AND. cCodIva <= ::cIvaHas ) )

                  if !::oDbf:Seek( cCodIva )



                     ::oDbf:Append()

                     ::oDbf:cTipIva    := cCodIva
                     ::oDbf:cNomIva    := oRetFld( cCodIva, ::oDbfIva )
                     ::oDbf:nPctIva    := aTotFac[ n, 3 ]
                     ::oDbf:nBasFac    := aTotFac[ n, 2 ]
                     ::oDbf:nIvaFac    := aTotFac[ n, 8 ]
                     ::oDbf:nReqFac    := aTotFac[ n, 9 ]
                     ::oDbf:nTotFac    := ::oDbf:nBasFac + ::oDbf:nIvaFac + ::oDbf:nReqFac

                     ::oDbf:Save()

                  else



                     ::oDbf:Load()

                     ::oDbf:nBasFac    += aTotFac[ n, 2 ]
                     ::oDbf:nIvaFac    += aTotFac[ n, 8 ]
                     ::oDbf:nReqFac    += aTotFac[ n, 9 ]
                     ::oDbf:nTotFac    := ::oDbf:nBasFac + ::oDbf:nIvaFac + ::oDbf:nReqFac

                     ::oDbf:Save()

                  end

               end

            end

         next

      end

      ::oFacRecT:Skip()

      ::oMtrInf:AutoInc()

   end



   ::oFacRecT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ) )

   ::oMtrInf:AutoInc( ::oFacRecT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
