#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TAcuGTik.prg"
_HB_CLASS TAcuGTik ; function TAcuGTik ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAcuGTik", iif( .T., { @TInfGrp() }, { @HBObject() } ), @TAcuGTik() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TAcuGTik_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TAcuGTik_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TAcuGTik_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TAcuGTik_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TAcuGTik_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAcuGTik ;




static FUNCTION TAcuGTik_Create( ) ; local Self AS CLASS TAcuGTik := QSelf() AS CLASS TAcuGTik

   ::AcuCreate()

   ::AddTmpIndex( "cGrpFam", "cGrpFam" )

RETURN ( self )




static FUNCTION TAcuGTik_OpenFiles( ) ; local Self AS CLASS TAcuGTik := QSelf() AS CLASS TAcuGTik

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )




static FUNCTION TAcuGTik_CloseFiles( ) ; local Self AS CLASS TAcuGTik := QSelf() AS CLASS TAcuGTik

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end

   ::oTikCliT := nil
   ::oTikCliL := nil

RETURN ( Self )




static FUNCTION TAcuGTik_lResource( cFld ) ; local Self AS CLASS TAcuGTik := QSelf() AS CLASS TAcuGTik

   if !::StdResource( "INFDETGRPB" )
      return .F.
   end



   if !::oDefGrFInf( 110, 120, 130, 140, 900 )
      return .F.
   end

   if !::lDefArtInf( 150, 160, 170, 180, 800 )
      return .F.
   end

   if !::oDefCliInf( 710, 720, 730, 740, , 700 )
      return .F.
   end



   ::oDefExcInf()



   ::oMtrInf:SetTotal( ::oTikCliT:Lastrec() )

   ::CreateFilter( aItmTik(), ::oTikCliT:cAlias )

RETURN .T.




static FUNCTION TAcuGTik_lGenerate( ) ; local Self AS CLASS TAcuGTik := QSelf() AS CLASS TAcuGTik

   local cExpHead := ""
   local cExpLine := ""



   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()







   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Gr. Fam.  : " + if( ::lAllGrp, "Todos", AllTRim( ::cGruFamOrg ) + " > " + AllTrim( ::cGruFamDes ) ) }, {|| "Artículos : " + if( ::lAllArt, "Todos", AllTRim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes ) ) }, {|| "Clientes  : " + if( ::lAllCli, "Todos", AllTRim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) } }



   ::oTikCliT:OrdSetFocus( "dFecTik" )
   ::oTikCliL:OrdSetFocus( "cNumTil" )

   cExpHead          := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead       += ' .and. cCliTik >= "' + Rtrim( ::cCliOrg ) + '" .and. cCliTik <= "' + Rtrim( ::cCliDes ) + '"'
   end

   cExpHead          += ' .and. ( cTipTik == "1" .or. cTipTik == "4" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )

   cExpLine          := "!lControl"

   if !::lAllGrp
      cExpLine       += ' .and. cGrpFam >= "' + Rtrim( ::cGruFamOrg ) + '" .and. cGrpFam <= "' + Rtrim( ::cGruFamDes ) + '"'
   end

   if ::lAllArt
      cExpLine       += " .and. !Empty( cCbaTil ) .or. !Empty( cComTil )"
   else
      cExpLine       += ' .and. ( !Empty( cCbaTil ) .and. cCbaTil >= "' + ::cArtOrg + '" .and. cCbaTil <= "' + ::cArtDes + '" )'
      cExpLine       += " .or. "
      cExpLine       += '( !Empty( cComTil ) .and. cComTil >= "' + ::cArtOrg + '" .and. cComTil <= "' + ::cArtDes + '" )'
   end

   ::oTikCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ), ::oTikCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )



   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer ) .AND. ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

         while ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik == ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil .AND. !::oTikCliL:Eof()


            if !Empty( ::oTikCliL:cCbaTil )                                                      .AND. !( ::lExcCero .AND. ::oTikCliL:nPvpTil == 0 )



               ::AcuTikCli( ::oTikCliL:cCbaTil, 1 )

            end


            if !Empty( ::oTikCliL:cComTil )                                                      .AND. !( ::lExcCero .AND. ::oTikCliL:nPcmTil == 0 )



               ::AcuTikCli( ::oTikCliL:cComTil, 2 )

            end

            ::oTikCliL:Skip()

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end



   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )
   ::oTikCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliT:Lastrec() )



   if !::lExcCero
      ::IncluyeCero()
   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
