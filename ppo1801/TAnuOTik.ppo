#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TAnuOTik.prg"
_HB_CLASS TAnuOTik ; function TAnuOTik ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAnuOTik", iif( .T., { @TInfPgo() }, { @HBObject() } ), @TAnuOTik() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TAnuOTik_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TAnuOTik_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TAnuOTik_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TAnuOTik_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TAnuOTik_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAnuOTik ;



static FUNCTION TAnuOTik_Create( ) ; local Self AS CLASS TAnuOTik := QSelf() AS CLASS TAnuOTik

   ::AnuPgoFields()

   ::AddTmpIndex( "cCodPgo", "cCodPgo" )

   ::lDefFecInf   := .F.
   ::lDefGraph    := .T.

RETURN ( self )



static FUNCTION TAnuOTik_OpenFiles( ) ; local Self AS CLASS TAnuOTik := QSelf() AS CLASS TAnuOTik

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TAnuOTik_CloseFiles( ) ; local Self AS CLASS TAnuOTik := QSelf() AS CLASS TAnuOTik

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end

   ::oTikCliT := nil
   ::oTikCliL := nil

RETURN ( Self )



static FUNCTION TAnuOTik_lResource( cFld ) ; local Self AS CLASS TAnuOTik := QSelf() AS CLASS TAnuOTik

   if !::StdResource( "INFANUPGOB" )
      return .F.
   end





   ::oDefYea()





   if !::oDefFpgInf( 70, 80, 90, 100, 920 )
      return .F.
   end

   ::oDefExcInf()

   ::oMtrInf:SetTotal( ::oTikCliT:Lastrec() )

   ::CreateFilter( aItmTik(), ::oTikCliT:cAlias )

RETURN .T.






static FUNCTION TAnuOTik_lGenerate( ) ; local Self AS CLASS TAnuOTik := QSelf() AS CLASS TAnuOTik

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Año     : " + AllTrim( Str( ::nYeaInf ) ) }, {|| "F. Pago : " + if( ::lAllFpg, "Todas", AllTrim( ::cFpgDes ) + " > " + AllTrim( ::cFpgHas ) ) } }

   cExpHead       := '( cTipTik == "1" .or. cTipTik == "4" )'

   if !::lAllFpg
      cExpHead    += ' .and. cFpgTik >= "' + Rtrim( ::cFpgDes ) + '" .and. cFpgTik <= "' + Rtrim( ::cFpgHas ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )

   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()


      if Year( ::oTikCliT:dFecTik ) == ::nYeaInf                        .AND. lChkSer( ::oTikCliT:cSerTik, ::aSer )

         if ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

            while ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik == ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil .AND. !::oTikCliL:eof()



               if !Empty( ::oTikCliL:cCbaTil )                          .AND. !( ::oTikCliL:lControl )                              .AND. !( ::lExcCero .AND. ::oTikCliL:nPvpTil == 0 )

                  if !::oDbf:Seek( ::oTikCliT:cFpgTik )
                     ::oDbf:Blank()
                     ::oDbf:cCodPgo := ::oTikCliT:cFpgTik
                     ::oDbf:cNomPgo := cNbrFPago( ::oTikCliT:cFpgTik, ::oDbfFpg )
                     ::oDbf:Insert()
                  end

                  ::AddImporte( ::oTikCliT:dFecTik, nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 ) )

                  ::nMediaMes( ::nYeaInf )

               end



               if !Empty( ::oTikCliL:cComTil )                          .AND. !( ::oTikCliL:lControl )                              .AND. !( ::lExcCero .AND. ::oTikCliL:nPcmTil == 0 )

                  if !::oDbf:Seek( ::oTikCliT:cFpgTik )
                     ::oDbf:Blank()
                     ::oDbf:cCodPgo := ::oTikCliT:cFpgTik
                     ::oDbf:cNomPgo := cNbrFPago( ::oTikCliT:cFpgTik, ::oDbfFpg )
                     ::oDbf:Insert()
                  end

                  ::AddImporte( ::oTikCliT:dFecTik, nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 ) )

                  ::nMediaMes( ::nYeaInf )

               end

               ::oTikCliL:Skip()

            end

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliT:Lastrec() )

   if !::lExcCero
      ::IncluyeCero()
   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
