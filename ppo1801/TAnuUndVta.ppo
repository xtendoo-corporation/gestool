#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TAnuUndVta.prg"
_HB_CLASS TAnuUndVta ; function TAnuUndVta ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TAnuUndVta", iif( .T., { @TInfPArt() }, { @HBObject() } ), @TAnuUndVta() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Aceptado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TAnuUndVta_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TAnuUndVta_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TAnuUndVta_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TAnuUndVta_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TAnuUndVta_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TAnuUndVta ;



static FUNCTION TAnuUndVta_Create( ) ; local Self AS CLASS TAnuUndVta := QSelf() AS CLASS TAnuUndVta

   ::AddField ( "cCodFam", "C", 16, 0, {|| "@!" },         "Familia",          .F., "Familia",                    5, .F. )
   ::AddField ( "cNomFam", "C", 50, 0, {|| "@!" },         "Nom. fam.",        .F., "Nombre familia",            35, .F. )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },         "Cod. articulo",    .T., "Cod. Artículo",             14, .F. )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },         "Artículo",         .T., "Nom. Artículo",             20, .F. )
   ::AddField ( "nImpEne", "N", 16, 6, {|| MasUnd() },     "Ene",              .T., "Enero",                     12, .T. )
   ::AddField ( "nImpFeb", "N", 16, 6, {|| MasUnd() },     "Feb",              .T., "Febrero",                   12, .T. )
   ::AddField ( "nImpMar", "N", 16, 6, {|| MasUnd() },     "Mar",              .T., "Marzo",                     12, .T. )
   ::AddField ( "nImpAbr", "N", 16, 6, {|| MasUnd() },     "Abr",              .T., "Abril",                     12, .T. )
   ::AddField ( "nImpMay", "N", 16, 6, {|| MasUnd() },     "May",              .T., "Mayo",                      12, .T. )
   ::AddField ( "nImpJun", "N", 16, 6, {|| MasUnd() },     "Jun",              .T., "Junio",                     12, .T. )
   ::AddField ( "nImpJul", "N", 16, 6, {|| MasUnd() },     "Jul",              .T., "Julio",                     12, .T. )
   ::AddField ( "nImpAgo", "N", 16, 6, {|| MasUnd() },     "Ago",              .T., "Agosto",                    12, .T. )
   ::AddField ( "nImpSep", "N", 16, 6, {|| MasUnd() },     "Sep",              .T., "Septiembre",                12, .T. )
   ::AddField ( "nImpOct", "N", 16, 6, {|| MasUnd() },     "Oct",              .T., "Octubre",                   12, .T. )
   ::AddField ( "nImpNov", "N", 16, 6, {|| MasUnd() },     "Nov",              .T., "Noviembre",                 12, .T. )
   ::AddField ( "nImpDic", "N", 16, 6, {|| MasUnd() },     "Dic",              .T., "Diciembre",                 12, .T. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| MasUnd() },     "Tot",              .T., "Total",                     12, .T. )
   ::AddField ( "nImpVta", "N", 16, 6, {|| ::cPicOut },    "Tot. Vta.",        .F., "Importe venta",             12, .F. )
   ::AddField ( "nDtoAtp", "N", 16, 6, {|| ::cPicOut },    "Dto. Atp.",        .F., "Descuento atipico",         12, .F. )
   ::AddField ( "nTotCos", "N", 16, 6, {|| ::cPicOut },    "Tot. Cos.",        .F., "Total costo",               12, .F. )
   ::AddField ( "nRenTab", "N", 16, 6, {|| ::cPicOut },    "%Rent.",           .F., "Rentabilidad",              12, .F. )

   ::AddTmpIndex( "cCodFam", "cCodFam + cCodArt" )
   ::AddGroup( {|| ::oDbf:cCodFam }, {|| "Familia  : " + Rtrim( ::oDbf:cCodFam ) + "-" + Rtrim( ::oDbf:cNomFam ) }, {|| "Total familia..." } )

   ::lDefGraph    := .T.

RETURN ( self )



static FUNCTION TAnuUndVta_OpenFiles( ) ; local Self AS CLASS TAnuUndVta := QSelf() AS CLASS TAnuUndVta

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TAnuUndVta_CloseFiles( ) ; local Self AS CLASS TAnuUndVta := QSelf() AS CLASS TAnuUndVta

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end
   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil
   ::oTikCliT := nil
   ::oTikCliL := nil
   ::oDbfCli  := nil

RETURN ( Self )



static FUNCTION TAnuUndVta_lResource( cFld ) ; local Self AS CLASS TAnuUndVta := QSelf() AS CLASS TAnuUndVta

   if !::StdResource( "INFGENARTC" )
      return .F.
   end

   ::CreateFilter( , ::oDbf, .T. )

   ::lExcCero  := .F.





   if !::lDefArtInf( 110, 120, 130, 140, 800 )
      return .F.
   end

   if !::lDefFamInf( 310, 311, 320, 321, 300 )
      return .F.
   end

   ::oDefExcInf( 210 )
   ::oDefExcImp( 211 )

RETURN .T.






static FUNCTION TAnuUndVta_lGenerate( ) ; local Self AS CLASS TAnuUndVta := QSelf() AS CLASS TAnuUndVta

   local cExpHead := ""
   local cExpLine := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Familia  : " + if( ::lAllFam, "Todas", AllTrim( ::cFamOrg ) + " > " + AllTrim( ::cFamDes ) ) }, {|| "Artículo : " + if( ::lAllArt, "Todas", AllTrim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes ) ) } }

   ::oAlbCliT:OrdSetFocus( "dFecAlb" )
   ::oAlbCliL:OrdSetFocus( "nNumAlb" )

   cExpHead          := 'nFacturado < 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Albaranes"
   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllFam
      cExpLine       += ' .and. cCodFam >= "' + ::cFamOrg + '" .and. cCodFam <= "' + ::cFamDes + '"'
   end

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oAlbCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ), ::oAlbCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oAlbCliT:GoTop()
   while !::lBreak .AND. !::oAlbCliT:Eof()

      if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )





         if ::oAlbCliL:Seek( ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB )

            while ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB == ::oAlbCliL:CSERALB + Str( ::oAlbCliL:NNUMALB ) + ::oAlbCliL:CSUFALB .AND. ! ::oAlbCliL:eof()


               if !( ::lExcCero .AND. nTotNAlbCli( ::oAlbCliL ) == 0 )        .AND. !( ::lExcImp .AND. nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  if !::oDbf:Seek( ::oAlbCliL:cCodFam + ::oAlbCliL:cRef )
                     ::oDbf:Blank()
                     ::oDbf:cCodFam := ::oAlbCliL:cCodFam
                     ::oDbf:cNomFam := cNomFam( ::oAlbCliL:cCodFam, ::oDbfFam )
                     ::oDbf:cCodArt := ::oAlbCliL:cRef
                     ::oDbf:cNomArt := oRetFld( ::oAlbCliL:cRef, ::oDbfArt )
                     ::oDbf:nImpVta := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nDtoAtp := nDtoAtpAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
                     if ::oAlbCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotNAlbCli( ::oAlbCliL )
                     else
                        ::oDbf:nTotCos := ::oAlbCliL:nCosDiv * nTotNAlbCli( ::oAlbCliL )
                     end
                     ::oDbf:Insert()
                  else
                     ::oDbf:Load()
                     ::oDbf:nImpVta += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nDtoAtp += nDtoAtpAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
                     if ::oAlbCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotNAlbCli( ::oAlbCliL )
                     else
                        ::oDbf:nTotCos += ::oAlbCliL:nCosDiv * nTotNAlbCli( ::oAlbCliL )
                     end
                     ::oDbf:Save()
                  end

                  ::AddImporte( ::oAlbCliT:dFecAlb, nTotNAlbCli( ::oAlbCliL ) )

                  ::oDbf:Load()
                  ::oDbf:nRentab    := nRentabilidad( ::oDbf:nImpVta, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                  ::oDbf:Save()

               end

               ::oAlbCliL:Skip()

            end

         end

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )
   ::oAlbCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ) )





   ::oFacCliT:OrdSetFocus( "dFecFac" )
   ::oFacCliL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += ::oFilter:aExpFilter[ 2 ]
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Facturas"
   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllFam
      cExpLine       += ' .and. cCodFam >= "' + ::cFamOrg + '" .and. cCodFam <= "' + ::cFamDes + '"'
   end

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oFacCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ), ::oFacCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:CSERIE, ::aSer )





         if ::oFacCliL:Seek( ::oFacCliT:CSERIE + Str( ::oFacCliT:NNUMFAC ) + ::oFacCliT:CSUFFAC )

            while ::oFacCliT:CSERIE + Str( ::oFacCliT:NNUMFAC ) + ::oFacCliT:CSUFFAC == ::oFacCliL:CSERIE + Str( ::oFacCliL:NNUMFAC ) + ::oFacCliL:CSUFFAC .AND. ! ::oFacCliL:eof()


               if !( ::lExcCero .AND. nTotNFacCli( ::oFacCliL ) == 0 )  .AND. !( ::lExcImp .AND. nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  if !::oDbf:Seek( ::oFacCliL:cCodFam + ::oFacCliL:cRef )
                     ::oDbf:Blank()
                     ::oDbf:cCodFam := ::oFacCliL:cCodFam
                     ::oDbf:cNomFam := cNomFam( ::oFacCliL:cCodFam, ::oDbfFam )
                     ::oDbf:cCodArt := ::oFacCliL:cRef
                     ::oDbf:cNomArt := oRetFld( ::oFacCliL:cRef, ::oDbfArt )
                     ::oDbf:nImpVta := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nDtoAtp := nDtoAtpFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
                     if ::oFacCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotNFacCli( ::oFacCliL )
                     else
                        ::oDbf:nTotCos := ::oFacCliL:nCosDiv * nTotNFacCli( ::oFacCliL )
                     end
                     ::oDbf:Insert()
                  else
                     ::oDbf:Load()
                     ::oDbf:nImpVta += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nDtoAtp += nDtoAtpFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
                     if ::oFacCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotNFacCli( ::oFacCliL )
                     else
                        ::oDbf:nTotCos += ::oFacCliL:nCosDiv * nTotNFacCli( ::oFacCliL )
                     end
                     ::oDbf:Save()
                  end

                  ::AddImporte( ::oFacCliT:dFecFac, nTotNFacCli( ::oFacCliL ) )

                  ::oDbf:Load()
                  ::oDbf:nRentab    := nRentabilidad( ::oDbf:nImpVta, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                  ::oDbf:Save()

               end

               ::oFacCliL:Skip()

            end

         end

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )
   ::oFacCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ) )

   ::oFacRecT:OrdSetFocus( "dFecFac" )
   ::oFacRecL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += ::oFilter:aExpFilter[ 3 ]
   end

   ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Fac. rec."
   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

    if !::lAllFam
      cExpLine       += ' .and. cCodFam >= "' + ::cFamOrg + '" .and. cCodFam <= "' + ::cFamDes + '"'
   end

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oFacRecL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecL:cFile ), ::oFacRecL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacRecT:GoTop()

   while !::lBreak .AND. !::oFacRecT:Eof()

      if lChkSer( ::oFacRecT:CSERIE, ::aSer )

         if ::oFacRecL:Seek( ::oFacRecT:CSERIE + Str( ::oFacRecT:NNUMFAC ) + ::oFacRecT:CSUFFAC )

            while ::oFacRecT:CSERIE + Str( ::oFacRecT:NNUMFAC ) + ::oFacRecT:CSUFFAC == ::oFacRecL:CSERIE + Str( ::oFacRecL:NNUMFAC ) + ::oFacRecL:CSUFFAC .AND. ! ::oFacRecL:eof()


               if !( ::lExcCero .AND. nTotNFacRec( ::oFacRecL ) == 0 )        .AND. !( ::lExcImp .AND. nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  if !::oDbf:Seek( ::oFacRecL:cCodFam + ::oFacRecL:cRef )

                     ::oDbf:Blank()
                     ::oDbf:cCodFam := ::oFacRecL:cCodFam
                     ::oDbf:cNomFam := cNomFam( ::oFacRecL:cCodFam, ::oDbfFam )
                     ::oDbf:cCodArt := ::oFacRecL:cRef
                     ::oDbf:cNomArt := oRetFld( ::oFacRecL:cRef, ::oDbfArt )
                     ::oDbf:nImpVta := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nDtoAtp := 0
                     if ::oFacRecL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotNFacRec( ::oFacRecL )
                     else
                        ::oDbf:nTotCos := ::oFacRecL:nCosDiv * nTotNFacRec( ::oFacRecL )
                     end
                     ::oDbf:Insert()
                  else
                     ::oDbf:Load()
                     ::oDbf:nImpVta += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nDtoAtp += 0
                     if ::oFacRecL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotNFacRec( ::oFacRecL )
                     else
                        ::oDbf:nTotCos += ::oFacRecL:nCosDiv * nTotNFacRec( ::oFacRecL )
                     end
                     ::oDbf:Save()
                  end

                  ::AddImporte( ::oFacRecT:dFecFac, nTotNFacRec( ::oFacRecL ) )

                  ::oDbf:Load()
                  ::oDbf:nRentab    := nRentabilidad( ::oDbf:nImpVta, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                  ::oDbf:Save()

               end

               ::oFacRecL:Skip()

            end

         end

      end

      ::oFacRecT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacRecT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ) )
   ::oFacRecL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecL:cFile ) )





   ::oTikCliT:OrdSetFocus( "dFecTik" )
   ::oTikCliL:OrdSetFocus( "cNumTil" )





   cExpHead          := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   cExpHead          += ' .and. ( cTipTik == "1" .or. cTipTik == "4" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Tickets"
   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )





   cExpLine          := "!lControl"

   if !::lAllFam
      cExpLine       += ' .and. cCodFam >= "' + ::cFamOrg + '" .and. cCodFam <= "' + ::cFamDes + '"'
   end

   if ::lAllArt
      cExpLine       += " .and. ( !Empty( cCbaTil ) .or. !Empty( cComTil ) )"
   else
      cExpLine       += ' .and. ( ( ( !Empty( cCbaTil ) .and. cCbaTil >= "' + ::cArtOrg + '" .and. cCbaTil <= "' + ::cArtDes + '" )'
      cExpLine       += " .or. "
      cExpLine       += '( !Empty( cComTil ) .and. cComTil >= "' + ::cArtOrg + '" .and. cComTil <= "' + ::cArtDes + '" ) ) )'
   end

   ::oTikCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ), ::oTikCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer )

         if ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

            while ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik == ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil .AND. !::oTikCliL:eof()



               if !Empty( ::oTikCliL:cCbaTil )                       .AND. !( ::lExcCero .AND. ::oTikCliL:nUntTil == 0 )      .AND. !( ::lExcImp .AND. ::oTikCliL:nPvpTil == 0 )

                  if !::oDbf:Seek( ::oTikCliL:cCodFam + ::oTikCliL:cCbaTil )

                     ::oDbf:Blank()
                     ::oDbf:cCodFam := ::oTikCliL:cCodFam
                     ::oDbf:cNomFam := cNomFam( ::oTikCliL:cCodFam, ::oDbfFam )
                     ::oDbf:cCodArt := ::oTikCliL:cCbaTil
                     ::oDbf:cNomArt := oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt )
                     ::oDbf:nImpVta := nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 )
                     ::oDbf:nDtoAtp := 0
                     if ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     else
                        ::oDbf:nTotCos := ::oTikCliL:nCosDiv * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     end
                     ::oDbf:Insert()
                  else
                     ::oDbf:Load()
                     ::oDbf:nImpVta += nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 )
                     ::oDbf:nDtoAtp += 0
                     if ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     else
                        ::oDbf:nTotCos += ::oTikCliL:nCosDiv * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     end
                     ::oDbf:Save()
                  end

                  ::AddImporte( ::oTikCliT:dFecTik, if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil ) )

                  ::oDbf:Load()
                  ::oDbf:nRentab    := nRentabilidad( ::oDbf:nImpVta, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                  ::oDbf:Save()

               end







               if !Empty( ::oTikCliL:cComTil )                       .AND. !( ::lExcCero .AND. ::oTikCliL:nUntTil == 0 )      .AND. !( ::lExcImp .AND. ::oTikCliL:nPcmTil == 0 )

                  if !::oDbf:Seek( ::oTikCliL:cCodFam + ::oTikCliL:cComTil )
                     ::oDbf:Blank()
                     ::oDbf:cCodFam := ::oTikCliL:cCodFam
                     ::oDbf:cNomFam := cNomFam( ::oTikCliL:cCodFam, ::oDbfFam )
                     ::oDbf:cCodArt := ::oTikCliL:cComTil
                     ::oDbf:cNomArt := oRetFld( ::oTikCliL:cComTil, ::oDbfArt )
                     ::oDbf:nImpVta := nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 )
                     ::oDbf:nDtoAtp := 0
                     if ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     else
                        ::oDbf:nTotCos := ::oTikCliL:nCosDiv * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     end
                     ::oDbf:Insert()
                  else
                     ::oDbf:Load()
                     ::oDbf:nImpVta += nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 )
                     ::oDbf:nDtoAtp += 0
                     if ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     else
                        ::oDbf:nTotCos += ::oTikCliL:nCosDiv * if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil )
                     end
                     ::oDbf:Save()
                  end

                  ::AddImporte( ::oTikCliT:dFecTik, if( ::oTikCliT:cTipTik == "4", -( ::oTikCliL:nUntTil ), ::oTikCliL:nUntTil ) )

                  ::oDbf:Load()
                  ::oDbf:nRentab    := nRentabilidad( ::oDbf:nImpVta, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                  ::oDbf:Save()

               end

               ::oTikCliL:Skip()

            end

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )

   ::oTikCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliT:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
