#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TArtPrv.prg"
_HB_CLASS TArtPrv ; function TArtPrv ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TArtPrv", iif( .T., { @TInfGen() }, { @HBObject() } ), @TArtPrv() ) ) ;

   _HB_MEMBER { AS OBJECT oPedPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oRctPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oRctPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oProLin } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProLin"}, .F. )
   _HB_MEMBER { AS OBJECT oProMat } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oProMat"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TArtPrv_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TArtPrv_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TArtPrv_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TArtPrv_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TArtPrv_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TArtPrv ;



static FUNCTION TArtPrv_create( ) ; local Self AS CLASS TArtPrv := QSelf() AS CLASS TArtPrv

   ::AddField( "cCodPrv", "C", 12, 0, {|| "@!" },             "Prv.",           .F., "Cod. Proveedor",             9, .F. )
   ::AddField( "cNomPrv", "C", 50, 0, {|| "@!" },             "Proveedor",      .F., "Nombre Proveedor",          35, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },             "Cod. artículo",  .T., "Código artículo",           14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },             "Descripción",    .T., "Descripción",               40, .F. )

   ::AddField( "nCosArt", "N", 16, 6, {|| ::cPicOut },        "Costo",          .T., "Costo",                     14, .F. )
   ::AddField( "nImp1",   "N", 16, 6, {|| ::cPicImp },        "Pre. 1",         .T., "Precio 1",                  14, .F. )
   ::AddField( "nIva1",   "N", 16, 6, {|| ::cPicImp },        "Pre. 1 " + cImp(),     .T., "Precio 1 " + cImp() + " incluido",  14, .F. )
   ::AddField( "nImp2",   "N", 16, 6, {|| ::cPicImp },        "Pre. 2",         .F., "Precio 2",                  14, .F. )
   ::AddField( "nIva2",   "N", 16, 6, {|| ::cPicImp },        "Pre. 2 " + cImp(),     .F., "Precio 2 " + cImp() + " incluido",  14, .F. )
   ::AddField( "nImp3",   "N", 16, 6, {|| ::cPicImp },        "Pre. 3",         .F., "Precio 3",                  14, .F. )
   ::AddField( "nIva3",   "N", 16, 6, {|| ::cPicImp },        "Pre. 3 " + cImp(),     .F., "Precio 3 " + cImp() + " incluido",  14, .F. )
   ::AddField( "nImp4",   "N", 16, 6, {|| ::cPicImp },        "Pre. 4",         .F., "Precio 4",                  14, .F. )
   ::AddField( "nIva4",   "N", 16, 6, {|| ::cPicImp },        "Pre. 4 " + cImp(),     .F., "Precio 4 " + cImp() + " incluido",  14, .F. )
   ::AddField( "nImp5",   "N", 16, 6, {|| ::cPicImp },        "Pre. 5",         .F., "Precio 5",                  14, .F. )
   ::AddField( "nIva5",   "N", 16, 6, {|| ::cPicImp },        "Pre. 5 " + cImp(),     .F., "Precio 5 " + cImp() + " incluido",  14, .F. )
   ::AddField( "nImp6",   "N", 16, 6, {|| ::cPicImp },        "Pre. 6",         .F., "Precio 6",                  14, .F. )
   ::AddField( "nIva6",   "N", 16, 6, {|| ::cPicImp },        "Pre. 6 " + cImp(),     .F., "Precio 6 " + cImp() + " incluido",  14, .F. )

   ::AddTmpIndex( "CCODPRV", "CCODPRV" )

   ::AddGroup( {|| ::oDbf:cCodPrv }, {|| "Proveedor  : " + Rtrim( ::oDbf:cCodPrv ) + "-" + Rtrim( ::oDbf:cNomPrv ) }, {||"Total proveedor..."} )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.

RETURN ( self )



static FUNCTION TArtPrv_OpenFiles( ) ; local Self AS CLASS TArtPrv := QSelf() AS CLASS TArtPrv

   ::oPedPrvL := DbfServer( "PEDPROVL.DBF", ):NewOpen( "PEDPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedPrvL:AddBag( "PEDPROVL.CDX" ) ; ::oPedPrvL:AddBag( ) ; ::oPedPrvL:AutoIndex()

   ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oRctPrvL := DbfServer( "RctPrvL.DBF", ):NewOpen( "RctPrvL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oRctPrvL:AddBag( "RctPrvL.CDX" ) ; ::oRctPrvL:AddBag( ) ; ::oRctPrvL:AutoIndex()

   ::oPedCliL := DbfServer( "PEDCLIL.DBF", ):NewOpen( "PEDCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliL:AddBag( "PEDCLIL.CDX" ) ; ::oPedCliL:AddBag( ) ; ::oPedCliL:AutoIndex()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   ::oProLin := DbfServer( "PROLIN.DBF", ):NewOpen( "PROLIN.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oProLin:AddBag( "PROLIN.CDX" ) ; ::oProLin:AddBag( ) ; ::oProLin:AutoIndex()

   ::oProMat := DbfServer( "PROMAT.DBF", ):NewOpen( "PROMAT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oProMat:AddBag( "PROMAT.CDX" ) ; ::oProMat:AddBag( ) ; ::oProMat:AutoIndex()

RETURN ( .T. )



static FUNCTION TArtPrv_CloseFiles( ) ; local Self AS CLASS TArtPrv := QSelf() AS CLASS TArtPrv

   if !Empty( ::oPedPrvL ) .AND. ::oPedPrvL:Used()
      ::oPedPrvL:End()
   end

   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end

   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end

   if !Empty( ::oRctPrvL ) .AND. ::oRctPrvL:Used()
      ::oRctPrvL:End()
   end

   if !Empty( ::oPedCliL ) .AND. ::oPedCliL:Used()
      ::oPedCliL:End()
   end

   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end

   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end

   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end

   if !Empty( ::oProLin ) .AND. ::oProLin:Used()
      ::oProLin:End()
   end

   if !Empty( ::oProMat ) .AND. ::oProMat:Used()
      ::oProMat:End()
   end

   ::oPedPrvL := nil
   ::oPedCliL := nil
   ::oAlbPrvL := nil
   ::oFacPrvL := nil
   ::oAlbCliL := nil
   ::oFacCliL := nil
   ::oFacRecL := nil
   ::oTikCliL := nil
   ::oProLin  := nil
   ::oProMat  := nil

RETURN ( Self )



static FUNCTION TArtPrv_lResource( cFld ) ; local Self AS CLASS TArtPrv := QSelf() AS CLASS TArtPrv

   if !::StdResource( "TARTPRV" )
      return .F.
   end





   if !::oDefPrvInf( 70, 80, 90, 100, 600 )
      return .F.
   end

   if !::lDefArtInf( 110, 120, 130, 140, 700 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

   ::CreateFilter( aItmArt(), ::oDbfArt:cAlias )

RETURN .T.






static FUNCTION TArtPrv_lGenerate( ) ; local Self AS CLASS TArtPrv := QSelf() AS CLASS TArtPrv

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )    + " > " + Dtoc( ::dFinInf ) }, {|| "Artículo  : " + if ( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes ) ) }, {|| "Proveedor : " + if ( ::lAllPrv, "Todos", AllTrim( ::cPrvOrg ) + " > " + AllTrim( ::cPrvDes ) ) } }

   ::oDbfArt:OrdSetFocus( "Codigo" )

   if !::lAllArt
      cExpHead       := 'Codigo >= "' + Rtrim( ::cArtOrg ) + '" .and. Codigo <= "' + Rtrim( ::cArtDes ) + '"'
   else
      cExpHead       := ".t."
   end

   if !::lAllPrv
      cExpHead       += ' .and. cPrvHab >= "' + Rtrim( ::cPrvOrg ) + '" .and. cPrvHab <= "' + Rtrim( ::cPrvDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oDbfArt:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ), ::oDbfArt:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oDbfArt:OrdKeyCount() )

   ::oDbfArt:GoTop()

   while !::lBreak .AND. !::oDbfArt:Eof()

      ::oDbf:Append()

      ::oDbf:cCodPrv  := ::oDbfArt:cPrvHab
      ::oDbf:cNomPrv  := oRetFld( ::oDbfArt:cPrvHab, ::oDbfPrv )
      ::oDbf:cCodArt  := ::oDbfArt:Codigo
      ::oDbf:cNomArt  := ::oDbfArt:Nombre
      ::oDbf:nCosArt  := ::oDbfArt:pCosto
      ::oDbf:nImp1    := ::oDbfArt:pVenta1
      ::oDbf:nIva1    := ::oDbfArt:pVtaIva1
      ::oDbf:nImp2    := ::oDbfArt:pVenta2
      ::oDbf:nIva2    := ::oDbfArt:pVtaIva2
      ::oDbf:nImp3    := ::oDbfArt:pVenta3
      ::oDbf:nIva3    := ::oDbfArt:pVtaIva3
      ::oDbf:nImp4    := ::oDbfArt:pVenta4
      ::oDbf:nIva4    := ::oDbfArt:pVtaIva4
      ::oDbf:nImp5    := ::oDbfArt:pVenta5
      ::oDbf:nIva5    := ::oDbfArt:pVtaIva5
      ::oDbf:nImp6    := ::oDbfArt:pVenta6
      ::oDbf:nIva6    := ::oDbfArt:pVtaIva6


      ::oDbf:Save()

      ::oDbfArt:Skip()

      ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfArt:Lastrec() )

   ::oDbfArt:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
