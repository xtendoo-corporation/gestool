#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TCliObr.prg"
_HB_CLASS TCliObr ; function TCliObr ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TCliObr", iif( .T., { @TInfGen() }, { @HBObject() } ), @TCliObr() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Facturado", "No facturado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TCliObr_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TCliObr_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TCliObr_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( cFld); oClass:AddMethod( "Resource", @TCliObr_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TCliObr_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TCliObr ;



static FUNCTION TCliObr_Create( ) ; local Self AS CLASS TCliObr := QSelf() AS CLASS TCliObr

   ::AddField ( "cCodObr", "C", 18, 0, {|| "@!" },         "Dirección",                      .F., "Código dirección",                14 )
   ::AddField ( "cNomObr", "C", 50, 0, {|| "@!" },         "Nom.obra",                  .F., "Nombre dirección",                20 )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },         "Cod. artículo",             .T., "Código artículo",            14 )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },         "Descripción",               .T., "Nombre artículo",            32 )
   ::AddField ( "cCodCli", "C", 12, 0, {|| "@!" },         "Cód. cli.",                 .F., "Cod. Cliente",                8 )
   ::AddField ( "cNomCli", "C", 50, 0, {|| "@!" },         "Cliente",                   .F., "Nom. Cliente",               30 )
   ::AddField ( "cNifCli", "C", 15, 0, {|| "@!" },         "Nif",                       .F., "Nif",                        12 )
   ::AddField ( "cDomCli", "C", 35, 0, {|| "@!" },         "Domicilio",                 .F., "Domicilio",                  20 )
   ::AddField ( "cPobCli", "C", 25, 0, {|| "@!" },         "Población",                 .F., "Población",                  25 )
   ::AddField ( "cProCli", "C", 20, 0, {|| "@!" },         "Provincia",                 .F., "Provincia",                  20 )
   ::AddField ( "cCdpCli", "C",  7, 0, {|| "@!" },         "Cod. Postal",               .F., "Cod. Postal",                 7 )
   ::AddField ( "cTlfCli", "C", 12, 0, {|| "@!" },         "Teléfono",                  .F., "Teléfono",                   12 )
   ::AddField ( "cCodAlm", "C", 18, 0, {|| "@!" },         "Cod. Almacen",              .F., "Código almacén",             18 )
   ::AddField ( "cCodAge", "C", 18, 0, {|| "@!" },         "Cod. Agente",               .F., "Código agente",              18 )
   ::AddField ( "nNumCaj", "N", 16, 6, {|| MasUnd() },     cNombreCajas(),              .F., cNombreCajas(),               12 )
   ::AddField ( "nNumUnd", "N", 16, 6, {|| MasUnd() },     cNombreUnidades(),           .F., cNombreUnidades(),            12 )
   ::AddField ( "nTotUnd", "N", 16, 6, {|| MasUnd() },     "Tot. " + cNombreUnidades(), .T., "Total " + cNombreUnidades(), 12 )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicOut },    "Importe",                   .T., "Importe",                    12 )
   ::AddField ( "cDocMov", "C", 14, 0, {|| "@!" },         "Documento",                 .T., "Documento",                  14 )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },         "Fecha",                     .T., "Fecha",                      10 )

   ::AddTmpIndex( "cCodCli", "cCodCli + cCodObr" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) }, {||"Total Cliente..."} )
   ::AddGroup( {|| ::oDbf:cCodCli + ::oDbf:cCodObr }, {|| "Obras  : " + Rtrim( ::oDbf:cCodObr ) + "-" + RTrim ( ::oDbf:CNOMOBR ) }, {||"Total Obras..."} )

RETURN ( Self )



static FUNCTION TCliObr_OpenFiles( ) ; local Self AS CLASS TCliObr := QSelf() AS CLASS TCliObr

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TCliObr_CloseFiles( ) ; local Self AS CLASS TCliObr := QSelf() AS CLASS TCliObr

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil

RETURN ( Self )



static FUNCTION TCliObr_Resource( cFld ) ; local Self AS CLASS TCliObr := QSelf() AS CLASS TCliObr

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN04" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100 )
      return .F.
   end



   if !::oDefObrInf( 110, 120, 130, 140, 220 )
      return .F.
   end





   if !::lDefArtInf( 150, 160, 170, 180 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDefExcInf( 200 )

   ::oDefExcImp( 210 )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmAlbCli(), ::oAlbCliT:cAlias )

RETURN ( Self )






static FUNCTION TCliObr_lGenerate( ) ; local Self AS CLASS TCliObr := QSelf() AS CLASS TCliObr

   local bValid   := {|| .T. }
   local lExcCero := .F.

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()
   ::oAlbCliT:GoTop():Load()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !lFacturado( ::oAlbCliT ) }
      case ::oEstado:nAt == 2
         bValid   := {|| lFacturado( ::oAlbCliT ) }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end





   ::aHeader   := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes : " + AllTrim( ::cCliOrg ) + " > " + AllTrim (::cCliDes ) }, {|| "Artículos: " + AllTrim( ::cArtOrg ) + " > " + AllTrim (::cArtDes ) }, {|| "Estado   : " + ::aEstado[ ::oEstado:nAt ] } }





   WHILE !::lBreak .AND. !::oAlbCliT:Eof()








      IF Eval( bValid )                                                                               .AND. ::oAlbCliT:DFECALB >= ::dIniInf                                                              .AND. ::oAlbCliT:DFECALB <= ::dFinInf                                                              .AND. ::oAlbCliT:CCODCLI >= ::cCliOrg                                                              .AND. ::oAlbCliT:CCODCLI <= ::cCliDes                                                              .AND. ( ( ::oAlbCliT:CCODOBR >= ::cObrOrg .AND. ::oAlbCliT:CCODOBR <= ::cObrDes ) .OR. ::lAllObr ) .AND. lChkSer( ::oAlbCliT:CSERALB, ::aSer )                                                        .AND. ::EvalFilter()





         if ::oAlbCliL:Seek( ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB )

            while ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB == ::oAlbCliL:CSERALB + Str( ::oAlbCliL:NNUMALB ) + ::oAlbCliL:CSUFALB .AND. ! ::oAlbCliL:eof()



               if ::oAlbCliL:CREF >= ::cArtOrg                       .AND. ::oAlbCliL:CREF <= ::cArtDes                       .AND. !( ::lExcCero .AND. ::oAlbCliL:NPREUNIT == 0 )

                  ::oDbf:Append()

                  ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )

                  ::oDbf:CCODOBR := ::oAlbCliT:CCODOBR
                  ::oDbf:CNOMOBR := RetObras( ::oAlbCliT:cCodCli, ::oAlbCliT:cCodObr, ::oDbfObr:cAlias )
                  ::oDbf:CCODART := ::oAlbCliL:CREF
                  ::oDbf:CNOMART := ::oAlbCliL:CDETALLE
                  ::oDbf:CCODALM := ::oAlbCliT:CCODALM
                  ::oDbf:CCODAGE := ::oAlbCliT:CCODAGE
                  ::oDbf:DFECMOV := ::oAlbCliT:DFECALB
                  ::oDbf:CDOCMOV := lTrim ( ::oAlbCliL:CSERALB ) + "/" + lTrim ( Str( ::oAlbCliL:NNUMALB ) ) + "/" + lTrim ( ::oAlbCliL:CSUFALB )
                  ::oDbf:NNUMCAJ := ::oAlbCliL:nCanEnt
                  ::oDbf:NNUMUND := ::oAlbCliL:nUniCaja
                  ::oDbf:nTotUnd := nTotNAlbCli( ::oAlbCliL )
                  ::oDbf:NIMPART := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:CDOCMOV := lTrim ( ::oAlbCliL:CSERALB ) + "/" + lTrim ( Str( ::oAlbCliL:NNUMALB ) ) + "/" + lTrim ( ::oAlbCliL:CSUFALB )

                  ::oDbf:Save()

               end

               ::oAlbCliL:Skip()

            end

         end

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
