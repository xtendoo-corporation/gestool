#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TCobAge.prg"
_HB_CLASS TInfCobAge ; function TInfCobAge ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfCobAge", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfCobAge() ) ) ;

   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIva"}, .F. )
   _HB_MEMBER { AS LOGIC lTvta } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTvta"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfCli } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCli"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Cobrados", "Pendientes", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oOrdenado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOrdenado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfCobAge_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfCobAge_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfCobAge_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfCobAge_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfCobAge_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfCobAge ;



static FUNCTION TInfCobAge_Create( ) ; local Self AS CLASS TInfCobAge := QSelf() AS CLASS TInfCobAge

   ::AddField( "cNumDoc", "C", 15, 0,  {|| "" },           "Doc.",                      .T., "Documento",                  12 )
   ::AddField( "cCodAge", "C",  3, 0,  {|| "@!" },         "Cód. age.",                 .F., "Código agente",               3 )
   ::AddField( "cNomAge", "C", 50, 0,  {|| "@!" },         "Agente",                    .F., "Nombre agente",              25 )
   ::AddField( "cCtaAge", "C", 12, 0,  {|| "@!" },         "Cuenta",                    .F., "Cuenta",                     12 )
   ::AddField( "cCodCli", "C", 12, 0,  {|| "@!" },         "Cód. cli.",                 .T., "Cod. Cliente",                8 )
   ::AddField( "cNomCli", "C", 50, 0,  {|| "@!" },         "Cliente",                   .T., "Nom. Cliente",               30 )
   ::AddField( "dFecDoc", "D",  8, 0,  {|| "" },           "Fecha",                     .T., "Fecha",                      10 )
   ::AddField( "dFecCob", "D",  8, 0,  {|| "" },           "Cobro",                     .T., "Fecha Cobro",                10 )
   ::AddField( "nDiaTra", "N",  8, 0,  {|| "" },           "Dias",                      .T., "Dias transcurridos",         10 )
   ::AddField( "nTotRec", "N", 16, 6,  {|| ::cPicOut },    "Total",                     .T., "Total",                      10 )

   ::AddTmpIndex( "dFecCob", "cCodAge + cCtaAge + Dtoc( dFecCob )" )
   ::AddTmpIndex( "dFecDoc", "cCodAge + cCtaAge + Dtoc( dFecDoc )" )
   ::AddTmpIndex( "cCodCli", "cCodAge + cCtaAge + cCodCli" )
   ::AddTmpIndex( "nTotRec", "cCodAge + cCtaAge + Str( nTotRec )" )

   ::AddGroup( {|| ::oDbf:cCodAge }, {|| "Agente : " + Rtrim( ::oDbf:cCodAge ) + "-" + Rtrim( ::oDbf:cNomAge ) }, {||"Total agente..."} )
   ::AddGroup( {|| ::oDbf:cCodAge + ::oDbf:cCtaAge }, {|| "Cta. contable : " + Rtrim( ::oDbf:cCtaAge ) }, {||"Total cuenta contable..."} )

RETURN ( Self )



static FUNCTION TInfCobAge_OpenFiles( ) ; local Self AS CLASS TInfCobAge := QSelf() AS CLASS TInfCobAge

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   ::oIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oIva:AddBag( "TIVA.CDX" ) ; ::oIva:AddBag( ) ; ::oIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfCobAge_CloseFiles( ) ; local Self AS CLASS TInfCobAge := QSelf() AS CLASS TInfCobAge

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end
   if !Empty( ::oIva ) .AND. ::oIva:Used()
      ::oIva:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacCliP := nil
   ::oDbfCli  := nil
   ::oIva     := nil

RETURN ( Self )



static FUNCTION TInfCobAge_lResource( cFld ) ; local Self AS CLASS TInfCobAge := QSelf() AS CLASS TInfCobAge

   local cEstado    := "Cobrados"
   local cOrdenado  := "Fecha cob."

   if !::StdResource( "INF_GEN25" )
      return .F.
   end





   if !::oDefAgeInf( 70, 80, 90, 100, 220 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacCliP:Lastrec() )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )





   ::oOrdenado := TComboBox():ReDefine( 219, { | u | If( PCount()==0, cOrdenado, cOrdenado:= u ) }, { "Fecha cob.", "Fecha emi.", "Cliente", "Importe" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oOrdenado",,,,,,, )

   ::CreateFilter( aItmRecCli(), ::oFacCliP:cAlias )

RETURN .T.






static FUNCTION TInfCobAge_lGenerate( ) ; local Self AS CLASS TInfCobAge := QSelf() AS CLASS TInfCobAge

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Agentes  : " + if( ::lAgeAll, "Todos", AllTrim( ::cAgeOrg ) + " > " + AllTrim( ::cAgeDes ) ) } }

   ::oFacCliP:OrdSetFocus( "dPreCob" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := 'lCobrado .and. dPreCob >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPreCob <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := '!lCobrado .and. dPreCob >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPreCob <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dPreCob >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPreCob <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAgeAll
      cExpHead       += ' .and. cCodAge >= "' + Rtrim( ::cAgeOrg ) + '" .and. cCodAge <= "' + Rtrim( ::cAgeDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ), ::oFacCliP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliP:Lastrec() )

   ::oFacCliP:GoTop()

   WHILE !::lBreak .AND. !::oFacCliP:Eof()

      if lChkSer( ::oFacCliP:cSerie, ::aSer )

         ::oDbf:Append()

         ::oDbf:cCodAge    := ::oFacCliP:cCodAge

         if ::oDbfAge:Seek( ::oFacCliP:cCodAge )
            ::oDbf:cNomAge := Rtrim( ::oDbfAge:cApeAge ) + ", " + ::oDbfAge:cNbrAge
         end

         ::oDbf:cCodCli    := ::oFacCliP:cCodCli
         if ::oDbfCli:Seek( ::oDbf:cCodCli )
            ::oDbf:cNomCli    := ::oDbfCli:titulo
         end
         ::oDbf:cCtaAge    := ::oFacCliP:cCtaRec

         ::oDbf:dFecDoc    := ::oFacCliP:dPreCob
         ::oDbf:dFecCob    := ::oFacCliP:dEntrada
         ::oDbf:nDiaTra    := ::oFacCliP:dEntrada - ::oFacClip:dPreCob

         ::oDbf:cNumDoc    := ::oFacCliP:cSerie + Str( ::oFacCliP:nNumFac ) + ::oFacCliP:cSufFac + Str( ::oFacCliP:nNumRec )
         ::oDbf:nTotRec    := nTotRecCli( ::oFacCliP, ::oDbfDiv )

         ::oDbf:Save()

      end

      ::oFacCliP:Skip()

      ::oMtrInf:AutoInc( ::oFacCliP:OrdKeyNo() )

   end

   ::oFacCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ) )

   ::oMtrInf:AutoInc( ::oFacCliP:LastRec() )

   ::oDlg:Enable()

   ::oDbf:OrdSetFocus( ::oOrdenado:nAt )

RETURN ( ::oDbf:LastRec() > 0 )
