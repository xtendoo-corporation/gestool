#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 12 ".\.\Prg\TComandas.prg"
_HB_CLASS TComandas ; function TComandas ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TComandas", iif( .T., { @TMANT() }, { @HBObject() } ), @TComandas() ) ) ;

   _HB_MEMBER { aComandas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aComandas"}, .F. )
   _HB_MEMBER { cPouDiv } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPouDiv"}, .F. )
   _HB_MEMBER { cMru } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )

   _HB_MEMBER Create( cPath) AS CLASS TComandas; oClass:AddMethod( "Create", @TComandas_Create(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS TComandas; oClass:AddMethod( "New", @TComandas_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TComandas_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TComandas_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER OpenService( lExclusive); oClass:AddMethod( "OpenService", @TComandas_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TComandas_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave( oGet, oDlg); oClass:AddMethod( "lPreSave", @TComandas_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TComandas_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TComandas ;



static FUNCTION TComandas_Create( cPath ) ; local Self AS CLASS TComandas := QSelf() AS CLASS TComandas

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath           := cPath
   ::oDbf            := nil

RETURN ( Self )



static FUNCTION TComandas_New( cPath, oWndParent, oMenuItem ) ; local Self AS CLASS TComandas := QSelf() AS CLASS TComandas

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( oWndParent == nil, oWndParent := oWnd(), ) ;

   if oMenuItem <> nil
      ::nLevel          := Auth():Level( oMenuItem )
   else
      ::nLevel          := 1
   end





   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::lCreateShell       := .F.

   ::cMru               := "gc_document_text_check_16"

   ::cHtmlHelp          := "Tipos de comandas"

RETURN ( Self )



static FUNCTION TComandas_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TComandas := QSelf() AS CLASS TComandas

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( cPath == nil, cPath := ::cPath, ) ;
   If( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

  RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de tipos de comandas" )

      ::CloseFiles()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TComandas_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TComandas := QSelf() AS CLASS TComandas

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "TComandas.Dbf", "TComandas" ):New( "TComandas.Dbf", "TComandas", ( cDriver ), "Tipos de comandas", ( cPath ) )

      ::oDbf:AddField( "cCodigo", "C", 3, 0,,,,, "Código", .F., 70, .F., {} )
      ::oDbf:AddField( "cNombre", "C", 50, 0,,,,, "Nombre", .F., 150, .F., {} )
      ::oDbf:AddField( "nOrden", "N", 1, 0,,,,, "Orden", .F., 70, .F., {} )

      ::oDbf:AddIndex( "cCodigo", "TComandas.Cdx", "cCodigo",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNombre", "TComandas.Cdx", "Upper( cNombre )",,, .F., .F., "Nombre",,, .T., .F. )
      ::oDbf:AddIndex( "nOrden", "TComandas.Cdx", "Str( nOrden )",,, .F., .F., "Orden",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TComandas_Resource( nMode ) ; local Self AS CLASS TComandas := QSelf() AS CLASS TComandas

    local oDlg
   local oGet, oGet2, oGet3

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Tipos de comandas", "TComandas",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )




      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodigo, ::oDbf:cCodigo:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )




      oGet2 := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, ::oDbf:cNombre, ::oDbf:cNombre:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      oGet3 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:nOrden, ::oDbf:nOrden:= u ) }, oDlg,, "99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      1},,, nil,,, )





      TButton():ReDefine( 500, {||( ::lPreSave( oGet, oGet2, oGet3, oDlg, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 9, {||( msginfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ::lPreSave( oGet, oGet2, oGet3, oDlg, nMode ) } )
   end

   oDlg:AddFastKey ( 112, {|| ChmHelp( "Tipos de comandas" ) } )

   oDlg:bStart := { || oGet:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TComandas_Activate( ) ; local Self AS CLASS TComandas := QSelf() AS CLASS TComandas

   if nAnd( ::nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end

   ::CreateShell( ::nLevel )

   ::oWndBrw:GralButtons( Self )

   ::oWndBrw:EndButtons( Self )

   ::oWndBrw:cHtmlHelp  := "Tipos de comandas"

   ::oWndBrw:Activate(  , , , , , , , , , , , , , , , , {|| ::CloseFiles() } )

RETURN ( Self )



static FUNCTION TComandas_lPreSave( oGet, oGet2, oGet3, oDlg, nMode ) ; local Self AS CLASS TComandas := QSelf() AS CLASS TComandas

   if nMode == 1 .OR. nMode == 4
      if Empty( ::oDbf:cCodigo )
         MsgStop( "Código de tipo de comanda no puede estar vacio" )
         oGet:SetFocus()
         Return .F.
      end

      if ::oDbf:SeekInOrd( ::oDbf:cCodigo, "CCODIGO" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodigo ) )
         return nil
      end

   end

   if Empty( ::oDbf:cNombre )
      MsgStop( "Nombre de tipo de comanda no puede estar vacío." )
      oGet2:SetFocus()
      Return .F.
   end

   if Empty( ::oDbf:cNombre )
      MsgStop( "Orden de tipo de comanda no puede estar vacío." )
      oGet3:SetFocus()
      Return .F.
   end

RETURN ( oDlg:end( 1 ) )
