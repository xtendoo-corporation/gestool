#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\Prg\Comercio\TComercioConfig.prg"
_HB_CLASS TComercioConfig ; function TComercioConfig ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TComercioConfig", iif( .F., { }, { @HBObject() } ), @TComercioConfig() ) ) ;

   _HB_MEMBER { oInstance } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInstance"}, .F. )
   _HB_MEMBER { hConfig } ; oClass:AddMultiClsData(, {=>}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hConfig"}, .F. )

   _HB_MEMBER { idEmpresa } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"idEmpresa"}, .F. )
   _HB_MEMBER { hShops } ; oClass:AddMultiData(, {=>}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hShops"}, .F. )

   _HB_MEMBER { cCurrentWeb } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCurrentWeb"}, .F. )
   _HB_MEMBER { hCurrentWeb } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hCurrentWeb"}, .F. )

   _HB_MEMBER { aAviableProducts } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aAviableProducts"}, .F. )

   _HB_MEMBER { cErrorJson } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cErrorJson"}, .F. )

   _HB_MEMBER New() AS CLASS TComercioConfig; oClass:AddMethod( "New", @TComercioConfig_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getInstance(); oClass:AddMethod( "getInstance", @TComercioConfig_getInstance(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyInstance(); oClass:AddInline( "destroyInstance", {|Self | ( ( Self ) ), ( ::oInstance := nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadJSON(); oClass:AddMethod( "loadJSON", @TComercioConfig_loadJSON(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveJSON(); oClass:AddMethod( "saveJSON", @TComercioConfig_saveJSON(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWebs(); oClass:AddMethod( "getWebs", @TComercioConfig_getWebs(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getWebsNames(); oClass:AddMethod( "getWebsNames", @TComercioConfig_getWebsNames(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCurrentWebName( cCurrentWeb); oClass:AddMethod( "setCurrentWebName", @TComercioConfig_setCurrentWebName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCurrentWebName(); oClass:AddInline( "getCurrentWebName", {|Self | ( ( Self ) ), ( ::cCurrentWeb ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setCurrentWeb(); oClass:AddInline( "setCurrentWeb", {|Self, hCurrentWeb, cCurrentWeb | ( ( Self ) ), ( ::hCurrentWeb := hCurrentWeb, ::cCurrentWeb := cCurrentWeb ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCurrentWeb(); oClass:AddInline( "getCurrentWeb", {|Self, hCurrentWeb | ( ( Self ) ), ( ::hCurrentWeb ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFromCurrentWeb( key, default); oClass:AddMethod( "getFromCurrentWeb", @TComercioConfig_getFromCurrentWeb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setToCurrentWeb( key, value); oClass:AddMethod( "setToCurrentWeb", @TComercioConfig_setToCurrentWeb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFromCurrentWebServices( key, default); oClass:AddMethod( "getFromCurrentWebServices", @TComercioConfig_getFromCurrentWebServices(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFromCurrentSourceWebServices( cSource, key, default); oClass:AddMethod( "getFromCurrentSourceWebServices", @TComercioConfig_getFromCurrentSourceWebServices(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getErrorJson(); oClass:AddInline( "getErrorJson", {|Self | ( ( Self ) ), ( ::cErrorJson ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isActive(); oClass:AddInline( "isActive", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "Active", .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isSilenceMode(); oClass:AddInline( "isSilenceMode", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "SilenceMode", .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isProcessWithoutStock(); oClass:AddInline( "isProcessWithoutStock", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "ProcessWithoutStock", .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isDeleteWithoutStock(); oClass:AddInline( "isDeleteWithoutStock", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "DeleteWithoutStock", .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isProcessWithoutImage(); oClass:AddInline( "isProcessWithoutImage", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "ProcessWithoutImage", .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getMySqlServer(); oClass:AddInline( "getMySqlServer", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "MySqlServer" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMySqlUser(); oClass:AddInline( "getMySqlUser", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "MySqlUser" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMySqlPassword(); oClass:AddInline( "getMySqlPassword", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "MySqlPassword" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMySqlDatabase(); oClass:AddInline( "getMySqlDatabase", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "MySqlDatabase" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMySqlPort(); oClass:AddInline( "getMySqlPort", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "MySqlPort" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMySqlTimeOut(); oClass:AddInline( "getMySqlTimeOut", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "MySqlTimeOut" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getStart(); oClass:AddInline( "getStart", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "Start" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPrefixDatabase(); oClass:AddInline( "getPrefixDatabase", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "PrefixDatabase" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFtpServer(); oClass:AddInline( "getFtpServer", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "FtpServer" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFtpUser(); oClass:AddInline( "getFtpUser", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "FtpUser" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFtpPassword(); oClass:AddInline( "getFtpPassword", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "FtpPassword" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFtpPassive(); oClass:AddInline( "getFtpPassive", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "FtpPassive" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFtpPort(); oClass:AddInline( "getFtpPort", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "FtpPort" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFtpService(); oClass:AddInline( "getFtpService", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "FtpService" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCookieKey(); oClass:AddInline( "getCookieKey", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "CookieKey" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getStore(); oClass:AddInline( "getStore", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "Store", "000" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSyncronizeManufacturers(); oClass:AddInline( "getSyncronizeManufacturers", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "SyncronizeManufacturers", .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isCoverValueNull(); oClass:AddInline( "isCoverValueNull", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "CoverValueNull", .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getOrderSerie(); oClass:AddInline( "getOrderSerie", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "OrderSerie" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getBudgetSerie(); oClass:AddInline( "getBudgetSerie", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "BudgetSerie" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDateStart(); oClass:AddInline( "getDateStart", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "DateStart" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLangs(); oClass:AddInline( "getLangs", {|Self | ( ( Self ) ), ( ::getFromCurrentWeb( "Langs", {} ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getLang( idLang); oClass:AddMethod( "getLang", @TComercioConfig_getLang(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getImagesDirectory(); oClass:AddInline( "getImagesDirectory", {|Self | ( ( Self ) ), ( ::getValidDirectoryFtp( ::getFromCurrentWeb( "ImagesDirectory") ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getValidDirectoryFtp( cDirectory); oClass:AddMethod( "getValidDirectoryFtp", @TComercioConfig_getValidDirectoryFtp(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isRealTimeConexion(); oClass:AddInline( "isRealTimeConexion", {|Self | ( ( Self ) ), ( if( hhaskey( ::hConfig, "RealTimeConexion" ), hget( ::hConfig, "RealTimeConexion" ), .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHideExportButton(); oClass:AddInline( "getHideExportButton", {|Self | ( ( Self ) ), ( if( hhaskey( ::hConfig, "HideExportButton" ), hget( ::hConfig, "HideExportButton" ), .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHideHideExportButton(); oClass:AddInline( "getHideHideExportButton", {|Self | ( ( Self ) ), ( if( hhaskey( ::hConfig, "HideExportButton" ), hget( ::hConfig, "HideExportButton" ), .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isInvertedNameFormat(); oClass:AddInline( "isInvertedNameFormat", {|Self | ( ( Self ) ), ( if( hhaskey( ::hConfig, "InvertedNameFormat" ), hget( ::hConfig, "InvertedNameFormat" ), .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFullFileName(); oClass:AddInline( "getFullFileName", {|Self | ( ( Self ) ), ( cPatConfig() + ::idEmpresa + "\prestashop.json" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TComercioConfig ;



static FUNCTION TComercioConfig_New( idEmpresa ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   If( idEmpresa == nil, idEmpresa := cCodEmp(), ) ;

   ::idEmpresa          := idEmpresa

RETURN ( Self )



static FUNCTION TComercioConfig_getInstance( ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   if empty( ::oInstance )
      ::oInstance       := ::New()
   end

RETURN ( ::oInstance )



static FUNCTION TComercioConfig_getFromCurrentWeb( key, default ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local value    := default

   if empty( ::getCurrentWeb() )
      RETURN ( value )
   end

   if hhaskey( ::getCurrentWeb(), key )
      value       := hget( ::getCurrentWeb(), key )
   end

RETURN ( value )



static FUNCTION TComercioConfig_setToCurrentWeb( key, value ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   if empty( ::getCurrentWeb() )
      RETURN ( .F. )
   end

   hset( ::getCurrentWeb(), key, value )

RETURN ( .T. )



static FUNCTION TComercioConfig_getFromCurrentWebServices( key, default ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local value    := default

   if empty( ::getFromCurrentWeb( "WebServices" ) )
      RETURN ( value )
   end

   if hhaskey( ::getFromCurrentWeb( "WebServices" ), key )
      value       := hget( ::getFromCurrentWeb( "WebServices" ), key )
   end

RETURN ( value )



static FUNCTION TComercioConfig_getFromCurrentSourceWebServices( cSource, key, default ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local value    := default

   if Valtype( ::getFromCurrentWebServices( cSource ) ) <> "H"
      RETURN ( value )
   end

   if hhaskey( ::getFromCurrentWebServices( cSource ), key )
      value       := hget( ::getFromCurrentWebServices( cSource ), key )
   end

RETURN ( value )



static FUNCTION TComercioConfig_loadJSON( ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local cConfig
   local hConfig
   local cFileConfigEmpresa   := ::getFullFileName()

   if !file( cFileConfigEmpresa )
      ::cErrorJson            := "Fichero " + cFileConfigEmpresa + " no encontrado"
      RETURN ( Self )
   end

   cConfig                    := memoread( cFileConfigEmpresa )

   hb_jsonDecode( cConfig, @hConfig )

   if empty( hConfig )
      ::cErrorJson            := "Fichero " + cFileConfigEmpresa + " formato no valido"
   else
      ::hConfig               := hConfig
      ::cErrorJson            := "Fichero " + cFileConfigEmpresa + " cargado satisfactoriamente"
   end

RETURN ( Self )



static FUNCTION TComercioConfig_saveJSON( ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local cFileConfigEmpresa   := ::getFullFileName()

   if file( cFileConfigEmpresa )
      memowrit( cFileConfigEmpresa, hb_jsonencode( ::hConfig, .T. ) )
   end

RETURN ( Self )



static FUNCTION TComercioConfig_getWebs( ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local hWebs    := {=>}

   if hhaskey( ::hConfig, "Webs" )
      hWebs       := hget( ::hConfig, "Webs" )
   end

RETURN ( hWebs )



static FUNCTION TComercioConfig_getWebsNames( ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local aWebsNames  := hgetkeys( ::getWebs() )

RETURN ( aWebsNames )



static FUNCTION TComercioConfig_setCurrentWebName( cCurrentWeb ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local hCurrentWeb

   cCurrentWeb          := alltrim( cCurrentWeb )

   if !hhaskey( ::getWebs(), cCurrentWeb )
      RETURN ( .F. )
   endif

   hCurrentWeb          := hget( ::getWebs(), cCurrentWeb )

   if empty( hCurrentWeb )
      RETURN ( .F. )
   endif

   ::setCurrentWeb( hCurrentWeb, cCurrentWeb )

RETURN ( .T. )



static FUNCTION TComercioConfig_getValidDirectoryFtp( cDirectory ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local cResult





   cResult     := StrTran( alltrim( cDirectory ), "\", "/" )





   if Left( cResult, 1 ) == "/"
      cResult  := Substr( cResult, 2 )
   end





   if Right( cResult, 1 ) == "/"
      cResult  := Substr( cResult, 1, Len( cResult ) - 1 )
   end

RETURN ( cResult )



static FUNCTION TComercioConfig_getLang( idLang ) ; local Self AS CLASS TComercioConfig := QSelf() AS CLASS TComercioConfig

   local hLang    := ::getLangs()

   idLang         := alltrim( idLang )

   if empty( hLang )
      RETURN ( "" )
   end

   if !hhaskey( hLang, idLang )
      RETURN ( "" )
   end

RETURN ( hget( hLang, idLang ) )
