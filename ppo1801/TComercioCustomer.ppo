#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\Prg\Comercio\TComercioCustomer.prg"
_HB_CLASS TComercioCustomer ; function TComercioCustomer ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TComercioCustomer", iif( .T., { @TComercioConector() }, { @HBObject() } ), @TComercioCustomer() ) ) ;

   _HB_MEMBER { TComercio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"TComercio"}, .F. )

   _HB_MEMBER { idCustomergestool } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"idCustomergestool"}, .F. )

   _HB_MEMBER New( TComercio) AS CLASS TComercioCustomer; oClass:AddMethod( "New", @TComercioCustomer_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isCustomerIngestool( oQueryCustomer); oClass:AddMethod( "isCustomerIngestool", @TComercioCustomer_isCustomerIngestool(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isNotCustomerIngestool(); oClass:AddInline( "isNotCustomerIngestool", {|Self, oQueryCustomer | ( ( Self ) ), ( !( ::isCustomerIngestool( oQueryCustomer ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isAddressIngestool( idAddress); oClass:AddMethod( "isAddressIngestool", @TComercioCustomer_isAddressIngestool(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isNotAddressIngestool(); oClass:AddInline( "isNotAddressIngestool", {|Self, idAddress | ( ( Self ) ), ( !( ::isAddressIngestool( idAddress ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertCustomerIngestoolIfNotExist( oQuery); oClass:AddMethod( "insertCustomerIngestoolIfNotExist", @TComercioCustomer_insertCustomerIngestoolIfNotExist(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getCustomerFromPrestashop(); oClass:AddMethod( "getCustomerFromPrestashop", @TComercioCustomer_getCustomerFromPrestashop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER appendCustomerIngestool(); oClass:AddMethod( "appendCustomerIngestool", @TComercioCustomer_appendCustomerIngestool(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createAddressIngestool(); oClass:AddMethod( "createAddressIngestool", @TComercioCustomer_createAddressIngestool(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getAddressFromPrestashop(); oClass:AddMethod( "getAddressFromPrestashop", @TComercioCustomer_getAddressFromPrestashop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER appendAddressIngestool(); oClass:AddMethod( "appendAddressIngestool", @TComercioCustomer_appendAddressIngestool(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER assertAddressIngestoolCustomer(); oClass:AddMethod( "assertAddressIngestoolCustomer", @TComercioCustomer_assertAddressIngestoolCustomer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getState( idState); oClass:AddMethod( "getState", @TComercioCustomer_getState(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getPaymentgestool( module); oClass:AddMethod( "getPaymentgestool", @TComercioCustomer_getPaymentgestool(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setCustomergestool(); oClass:AddInline( "setCustomergestool", {|Self, idCustomergestool | ( ( Self ) ), ( ::idCustomergestool := padr( idCustomergestool, 12 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCustomergestool(); oClass:AddInline( "getCustomergestool", {|Self | ( ( Self ) ), ( padr( ::idCustomergestool, 12 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getCustomerName(); oClass:AddInline( "getCustomerName", {|Self, oQuery | ( ( Self ) ), ( if ( ::TComercioConfig():isInvertedNameFormat(), upper( oQuery:fieldGetbyName( "lastname" ) ) + ", " + upper( oQuery:fieldGetByName( "firstname" ) ), upper( oQuery:fieldGetbyName( "firstname" ) ) + space( 1 ) + upper( oQuery:fieldGetByName( "lastname" ) ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER TPrestashopId(); oClass:AddInline( "TPrestashopId", {|Self | ( ( Self ) ), ( ::TComercio:TPrestashopId ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER TComercioConfig(); oClass:AddInline( "TComercioConfig", {|Self | ( ( Self ) ), ( ::TComercio:TComercioConfig ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCurrentWebName(); oClass:AddInline( "getCurrentWebName", {|Self | ( ( Self ) ), ( ::TComercio:getCurrentWebName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeText(); oClass:AddInline( "writeText", {|Self, cText | ( ( Self ) ), ( ::TComercio:writeText( cText ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER oCustomerDatabase(); oClass:AddInline( "oCustomerDatabase", {|Self | ( ( Self ) ), ( ::TComercio:oCli ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER oAddressDatabase(); oClass:AddInline( "oAddressDatabase", {|Self | ( ( Self ) ), ( ::TComercio:oObras ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER oPaymentDatabase(); oClass:AddInline( "oPaymentDatabase", {|Self | ( ( Self ) ), ( ::TComercio:oFPago ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TComercioCustomer ;



static FUNCTION TComercioCustomer_New( TComercio ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   ::TComercio          := TComercio

Return ( Self )



static FUNCTION TComercioCustomer_isCustomerIngestool( oQuery ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local email
   local idCustomer
   local idCustomergestool

   if oQuery:recCount() > 0

      email                := oQuery:fieldGetByName( "email" )
      idCustomer           := oQuery:fieldGetByName( "id_customer" )

      idCustomergestool    := ::TPrestashopId():getgestoolCustomer( idCustomer, ::getCurrentWebName() )

      if !empty( idCustomergestool )
         ::setCustomergestool( idCustomergestool )
         Return ( .T. )
      end











   end

Return ( .F. )



static FUNCTION TComercioCustomer_isAddressIngestool( idAddress ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local idAddressIngestool

   idAddressIngestool         := ::TPrestashopId():getgestoolAddress( idAddress, ::getCurrentWebName() )

   if empty( idAddressIngestool )
      Return ( .F. )
   end

   if ( D():gotoIdClientesDirecciones( idAddressIngestool, ::getView() ) )
      ::writeText( "La dirección " + idAddressIngestool + " ya exite en las direcciones" )
      Return ( .T. )
   end

   ::writeText( "La dirección " + idAddressIngestool + " no exite en las direcciones" )

Return ( .F. )



static FUNCTION TComercioCustomer_insertCustomerIngestoolIfNotExist( oQuery ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local idCustomer           := oQuery:FieldGetByName( "id_customer" )
   local idAddressDelivery    := oQuery:FieldGetByName( "id_address_delivery" )
   local idAddressInvoice     := oQuery:FieldGetByName( "id_address_invoice" )

   local oQueryCustomer       := ::getCustomerFromPrestashop( idCustomer )

   if ::isNotCustomerIngestool( oQueryCustomer )
      ::appendCustomerIngestool( oQueryCustomer )
   end

   oQueryCustomer:free()

   if ::isNotAddressIngestool( idAddressDelivery )
      ::createAddressIngestool( idAddressDelivery )
   end

   if ::isNotAddressIngestool( idAddressDelivery )
      ::createAddressIngestool( idAddressInvoice )
   end

Return ( Self )



static FUNCTION TComercioCustomer_getCustomerFromPrestashop( idCustomer ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local cQuery
   local oQuery

   cQuery            := "SELECT * FROM " + ::TComercio:cPrefixTable( "customer" ) + " WHERE id_customer = " + alltrim( str( idCustomer ) )
   oQuery            := TMSQuery():New( ::TComercio:oCon, cQuery )

   if oQuery:Open()
      Return ( oQuery )
   end

Return ( nil )



static FUNCTION TComercioCustomer_appendCustomerIngestool( oQuery ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   ::setCustomergestool( nextkey( dbLast( D():Clientes( ::getView() ), 1 ), D():Clientes( ::getView() ), "0", retnumcodcliemp() ) )

   ( D():Clientes( ::getView() ) )->( dbAppend() )

   ( D():Clientes( ::getView() ) )->Cod        := ::getCustomergestool()
   ( D():Clientes( ::getView() ) )->Titulo     := ::getCustomerName( oQuery )
   ( D():Clientes( ::getView() ) )->nTipCli    := 3
   ( D():Clientes( ::getView() ) )->CopiasF    := 1
   ( D():Clientes( ::getView() ) )->Serie      := ::TComercioConfig():getOrderSerie()
   ( D():Clientes( ::getView() ) )->nRegIva    := 1
   ( D():Clientes( ::getView() ) )->nTarifa    := 1
   ( D():Clientes( ::getView() ) )->cMeiInt    := oQuery:fieldGetByName( "email" )
   ( D():Clientes( ::getView() ) )->lChgPre    := .T.
   ( D():Clientes( ::getView() ) )->lSndInt    := .T.
   ( D():Clientes( ::getView() ) )->CodPago    := ::getPaymentgestool( oQuery:FieldGetByName( "module" ) )
   ( D():Clientes( ::getView() ) )->cCodAlm    := ::TComercioConfig():getStore()
   ( D():Clientes( ::getView() ) )->dFecChg    := GetSysDate()
   ( D():Clientes( ::getView() ) )->cTimChg    := Time()
   ( D():Clientes( ::getView() ) )->lWeb       := .T.

   if !( D():Clientes( ::getView() ) )->( neterr() )

      ( D():Clientes( ::getView() ) )->( dbcommit() )
      ( D():Clientes( ::getView() ) )->( dbunlock() )

      ::TPrestashopId():setValueCustomer( ::getCustomergestool(), ::getCurrentWebName(), oQuery:fieldGet( 1 ) )

      ::writeText( "Cliente " + ::getCustomerName( oQuery ) + " introducido con el código " + alltrim( ::getCustomergestool() ), 3 )

   else

      ::writeText( "Error al guardar el cliente en gestool : " + ::getCustomerName( oQuery ), 3 )

      Return ( .F. )

   end

Return ( .T. )



static FUNCTION TComercioCustomer_createAddressIngestool( idAddress ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local oQuery

   oQuery      := ::getAddressFromPrestashop( idAddress )

   if empty( oQuery )
      Return ( Self )
   end

   if oQuery:recCount() > 0
      ::appendAddressIngestool( oQuery )
      ::assertAddressIngestoolCustomer( oQuery )
   end

   oQuery:Free()

Return ( Self )



static FUNCTION TComercioCustomer_getAddressFromPrestashop( idAddress ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local cQuery   := "SELECT * FROM " + ::TComercio:cPrefixTable( "address" ) + " WHERE id_address = " + alltrim( str( idAddress ) )
   local oQuery   := TMSQuery():New( ::TComercio:oCon, cQuery )

   if oQuery:Open()
      Return ( oQuery )
   end

Return ( nil )



static FUNCTION TComercioCustomer_appendAddressIngestool( oQuery ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local idAddressgestool        := "@" + alltrim( str( oQuery:fieldGet( 1 ) ) )

   ( D():ClientesDirecciones( ::getView() ) )->( dbappend() )

   ( D():ClientesDirecciones( ::getView() ) )->cCodObr  := idAddressgestool
   ( D():ClientesDirecciones( ::getView() ) )->cCodCli  := ::getCustomergestool()
   ( D():ClientesDirecciones( ::getView() ) )->cNomObr  := ::getCustomerName( oQuery )
   ( D():ClientesDirecciones( ::getView() ) )->cDirObr  := oQuery:fieldGetByName( "address1" ) + " " + oQuery:fieldGetByName( "address2" )
   ( D():ClientesDirecciones( ::getView() ) )->cPobObr  := oQuery:fieldGetByName( "city" )
   ( D():ClientesDirecciones( ::getView() ) )->cPosObr  := oQuery:fieldGetByName( "postcode" )
   ( D():ClientesDirecciones( ::getView() ) )->cTelObr  := oQuery:fieldGetByName( "phone" )
   ( D():ClientesDirecciones( ::getView() ) )->cMovObr  := oQuery:fieldGetByName( "phone_mobile" )
   ( D():ClientesDirecciones( ::getView() ) )->cPrvObr  := ::getState( oQuery:fieldGetbyName( "id_state" ) )

   if !( D():ClientesDirecciones( ::getView() ) )->( neterr() )

      ( D():ClientesDirecciones( ::getView() ) )->( dbcommit() )
      ( D():ClientesDirecciones( ::getView() ) )->( dbunlock() )

      ::TPrestashopId():setValueAddress( ::getCustomergestool() + idAddressgestool, ::getCurrentWebName(), oQuery:fieldGet( 1 ) )

      ::writeText( "Dirección de cliente " + ::getCustomerName( oQuery ) + " introducida correctamente", 3 )

   else

      ::writeText( "Error al guardar la dirección del cliente en gestool " + ::getCustomerName( oQuery ), 3 )

      Return ( .F. )

   end

Return ( .T. )



static FUNCTION TComercioCustomer_assertAddressIngestoolCustomer( oQuery ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   if !( D():gotoCliente( ::getCustomergestool(), ::getView() ) )
      ::writeText( "Cliente con el código " + alltrim( ::getCustomergestool() ) + " no encontrado, imposible asignar dirección." )
      Return ( .F. )
   end

   if empty( ( D():Clientes( ::getView() ) )->Domicilio )
      ( D():Clientes( ::getView() ) )->( dbrlock() )
      ( D():Clientes( ::getView() ) )->Nif           := oQuery:FieldGetByName( "dni" )
      ( D():Clientes( ::getView() ) )->Domicilio     := oQuery:fieldGetByName( "address1" ) + " " + oQuery:fieldGetByName( "address2" )
      ( D():Clientes( ::getView() ) )->Poblacion     := oQuery:fieldGetByName( "city" )
      ( D():Clientes( ::getView() ) )->CodPostal     := oQuery:fieldGetByName( "postcode" )
      ( D():Clientes( ::getView() ) )->Provincia     := ::getState( oQuery:fieldGetbyName( "id_state" ) )
      ( D():Clientes( ::getView() ) )->Telefono      := oQuery:fieldGetByName( "phone" )
      ( D():Clientes( ::getView() ) )->Movil         := oQuery:fieldGetByName( "phone_mobile" )
      ( D():Clientes( ::getView() ) )->( dbcommit() )
      ( D():Clientes( ::getView() ) )->( dbunlock() )
   end

Return ( .T. )



static FUNCTION TComercioCustomer_getState( idState ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local cQuery
   local oQuery
   local cState      := ""

   cQuery            := "SELECT * FROM " + ::TComercio:cPrefixTable( "state" ) + " WHERE id_state = " + alltrim( str( idState ) )
   oQuery            := TMSQuery():New( ::TComercio:oCon, cQuery )

   if oQuery:Open() .AND. oQuery:RecCount() > 0
      cState         := oQuery:fieldGetbyName( "name" )
      oQuery:free()
   end

Return ( cState )



static FUNCTION TComercioCustomer_getPaymentgestool( cPrestashopModule ) ; local Self AS CLASS TComercioCustomer := QSelf() AS CLASS TComercioCustomer

   local paymentgestool    := cDefFpg()

   if empty( cPrestashopModule )
      Return ( paymentgestool )
   end

   if ::oPaymentDatabase():seekInOrd( upper( cPrestashopModule ), "cCodWeb" )
      paymentgestool       := ::oPaymentDatabase():cCodPago
   end

Return ( paymentgestool )
