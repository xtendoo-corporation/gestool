#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 12 ".\Prg\Comercio\TComercioManufacturer.prg"
_HB_CLASS TComercioManufacturer ; function TComercioManufacturer ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TComercioManufacturer", iif( .T., { @TComercioConector() }, { @HBObject() } ), @TComercioManufacturer() ) ) ;

   _HB_MEMBER { idManufacturer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"idManufacturer"}, .F. )

   _HB_MEMBER { aManufacturersProduct } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aManufacturersProduct"}, .F. )

   _HB_MEMBER getOrBuildManufacturerProduct( id); oClass:AddMethod( "getOrBuildManufacturerProduct", @TComercioManufacturer_getOrBuildManufacturerProduct(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER buildManufacturerProduct( id); oClass:AddMethod( "buildManufacturerProduct", @TComercioManufacturer_buildManufacturerProduct(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER insertManufacturersPrestashop( hManufacturers); oClass:AddMethod( "insertManufacturersPrestashop", @TComercioManufacturer_insertManufacturersPrestashop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
         _HB_MEMBER insertManufacturerPrestashop( hManufacturer); oClass:AddMethod( "insertManufacturerPrestashop", @TComercioManufacturer_insertManufacturerPrestashop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cleanManufacturerProduct(); oClass:AddInline( "cleanManufacturerProduct", {|Self | ( ( Self ) ), ( ::aManufacturersProduct := {} ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER buildImagesManufacturers( hManufacturer); oClass:AddMethod( "buildImagesManufacturers", @TComercioManufacturer_buildImagesManufacturers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER uploadImagesManufacturers( hManufacturer); oClass:AddMethod( "uploadImagesManufacturers", @TComercioManufacturer_uploadImagesManufacturers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TComercioManufacturer ;



static FUNCTION TComercioManufacturer_getOrBuildManufacturerProduct( id ) ; local Self AS CLASS TComercioManufacturer := QSelf() AS CLASS TComercioManufacturer

   local hManufacturerProduct
   local idManufacturerProduct   := ::TPrestashopId():getValueManufacturer( id, ::getCurrentWebName() )

   if empty( idManufacturerProduct )

      ::cleanManufacturerProduct()

      ::buildManufacturerProduct( id )

      for each hManufacturerProduct in ::aManufacturersProduct

         idManufacturerProduct   := ::insertManufacturerPrestashop( hManufacturerProduct )

         ::buildImagesManufacturers( hManufacturerProduct )

         ::uploadImagesManufacturers( hManufacturerProduct )

      next

   end

RETURN ( idManufacturerProduct )



static FUNCTION TComercioManufacturer_buildManufacturerProduct( id ) ; local Self AS CLASS TComercioManufacturer := QSelf() AS CLASS TComercioManufacturer

   if !( ::TComercioConfig():getSyncronizeManufacturers() )
      RETURN .F.
   end

   if aScan( ::aManufacturersProduct, {|h| hGet( h, "id" ) == id } ) <> 0
      RETURN .F.
   end

   if ::TPrestashopId():getValueManufacturer( id, ::getCurrentWebName() ) <> 0
      RETURN .F.
   end

   if D():gotoIdFabricantes( id, ::getView() )




      aadd( ::aManufacturersProduct,   {  "id"              => id, "name"            => rtrim( ( D():Fabricantes( ::getView() ) )->cNomFab ), "image"           => rtrim( ( D():Fabricantes( ::getView() ) )->cImgLogo ), "aTypeImages"     => {} , "cPrefijoNombre"  => "" } )
   end

RETURN ( .T. )



static FUNCTION TComercioManufacturer_insertManufacturersPrestashop( ) ; local Self AS CLASS TComercioManufacturer := QSelf() AS CLASS TComercioManufacturer

   local hManufacturer

   if !( ::TComercioConfig():getSyncronizeManufacturers() )
      RETURN ( Self )
   end

   ::meterProcesoSetTotal( len( ::aManufacturersProduct ) )

   for each hManufacturer in ::aManufacturersProduct

      ::insertManufacturerPrestashop( hManufacturer )

      ::buildImagesManufacturers( hManufacturer )

      ::uploadImagesManufacturers( hManufacturer )

      ::meterProcesoText( "Subiendo fabricantes " + alltrim(str(hb_enumindex())) + " de " + alltrim(str(len(::aManufacturersProduct))) )

   next

RETURN ( Self )



static FUNCTION TComercioManufacturer_insertManufacturerPrestashop( hManufacturer ) ; local Self AS CLASS TComercioManufacturer := QSelf() AS CLASS TComercioManufacturer

   local oImagen
   local nParent           := 1
   local cCommand          := ""
   local idManufacturer    := 0














   cCommand                := "INSERT IGNORE INTO " + ::cPrefixTable( "manufacturer" ) + "( " + "name, " +  "date_add, " +  "date_upd, " +  "active ) " +  "VALUES ( " +  "'" + hGet( hManufacturer, "name" ) + "', " +  "'" + dtos( GetSysDate() ) + "', " +  "'" + dtos( GetSysDate() ) + "', " +  "'1' )"

   if ::commandExecDirect( cCommand )
      idManufacturer       := ::oConexionMySQLDatabase():GetInsertId()
      hset( hManufacturer, "cPrefijoNombre", alltrim( str( idManufacturer ) ) )
   else
      ::writeText( "Error al insertar el fabricante " + hGet( hManufacturer, "name" ) + " en la tabla " + ::cPreFixtable( "manufacturer" ), 3 )
   end






   cCommand                := "INSERT IGNORE INTO " + ::cPrefixTable( "manufacturer_shop" ) + "( "+  "id_manufacturer, " +  "id_shop ) " +  "VALUES ( " +  "'" + alltrim( str( idManufacturer ) ) + "', " +  "'1' )"


   if !::commandExecDirect( cCommand )
      ::writeText( "Error al insertar el fabricante " + hGet( hManufacturer, "name" ) + " en la tabla" + ::cPreFixtable( "manufacturer_shop" ), 3 )
   end






   cCommand                := "INSERT IGNORE INTO " + ::cPreFixtable( "manufacturer_lang" ) + "( " + "id_manufacturer, " +  "id_lang ) " +  "VALUES ( " +  "'" + alltrim( str( idManufacturer ) ) + "', " +  "'" + ::TComercio:nLanguage + "' )"

   if !::commandExecDirect( cCommand )
      ::writeText( "Error al insertar el fabricante " + hGet( hManufacturer, "name" ) + " en la tabla" + ::cPreFixtable( "manufacturer_lang" ), 3 )
   end



   if !empty( idManufacturer )
      ::TPrestashopId():setValueManufacturer( hget( hManufacturer, "id" ), ::getCurrentWebName(), idManufacturer )
   end

RETURN ( idManufacturer )



static FUNCTION TComercioManufacturer_buildImagesManufacturers( hManufacturer ) ; local Self AS CLASS TComercioManufacturer := QSelf() AS CLASS TComercioManufacturer

   local fileTemp
   local fileImage
   local oTipoImage

   fileImage            := hget( hManufacturer, "image" )

   if !File( fileImage )
      RETURN nil
   end

   for each oTipoImage in ::aTypeImagesPrestashop()

      if !Empty( hget( hManufacturer, "image" ) ) .AND. oTipoImage:lManufactures

         if File( fileImage )

            fileTemp    := cPatOut() + hget( hManufacturer, "cPrefijoNombre" ) + "-" + oTipoImage:cNombreTipo + ".jpg"

            saveImage( fileImage, fileTemp, oTipoImage:nAnchoTipo, oTipoImage:nAltoTipo )

            aadd( hget( hManufacturer, "aTypeImages" ), fileTemp )

         end

         SysRefresh()

      end

   next

   fileTemp             := cPatOut() + hget( hManufacturer, "cPrefijoNombre" ) + ".jpg"

   saveImage( fileImage, fileTemp )

   aadd( hget( hManufacturer, "aTypeImages" ), fileTemp )

RETURN nil



static FUNCTION TComercioManufacturer_uploadImagesManufacturers( hManufacturer ) ; local Self AS CLASS TComercioManufacturer := QSelf() AS CLASS TComercioManufacturer

   local cTypeImage
   local cRemoteImage

   if !hhaskey( hManufacturer, "aTypeImages")
      RETURN ( nil )
   end

   for each cTypeImage in hget( hManufacturer, "aTypeImages" )

      ::meterProcesoText( "Subiendo imagen " + cTypeImage )

      ::oFtp():CreateFile( cTypeImage, ::cDirectoryManufacture() + "/" )

      SysRefresh()

      ferase( cTypeImage )

      SysRefresh()

   next

RETURN nil
