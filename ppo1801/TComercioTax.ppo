#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 12 ".\Prg\Comercio\TComercioTax.prg"
_HB_CLASS TComercioTax ; function TComercioTax ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TComercioTax", iif( .T., { @TComercioConector() }, { @HBObject() } ), @TComercioTax() ) ) ;

   _HB_MEMBER { idCategoryDefault } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"idCategoryDefault"}, .F. )

   _HB_MEMBER { aTaxProducts } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTaxProducts"}, .F. )

   _HB_MEMBER cleanTaxRuleGroup(); oClass:AddInline( "cleanTaxRuleGroup", {|Self | ( ( Self ) ), ( ::aTaxProducts := {} ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getOrBuildTaxRulesGroup( id); oClass:AddMethod( "getOrBuildTaxRulesGroup", @TComercioTax_getOrBuildTaxRulesGroup(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER buildTaxRuleGroup( id); oClass:AddMethod( "buildTaxRuleGroup", @TComercioTax_buildTaxRuleGroup(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertTaxesPrestashop(); oClass:AddMethod( "insertTaxesPrestashop", @TComercioTax_insertTaxesPrestashop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER insertTaxPrestashop( hTax); oClass:AddMethod( "insertTaxPrestashop", @TComercioTax_insertTaxPrestashop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TComercioTax ;



static FUNCTION TComercioTax_getOrBuildTaxRulesGroup( id ) ; local Self AS CLASS TComercioTax := QSelf() AS CLASS TComercioTax

   local hTax
   local idTaxRulesGroup   := ::TPrestashopId():getValueTaxRuleGroup( id, ::getCurrentWebName() )

   if empty( idTaxRulesGroup )

      ::cleanTaxRuleGroup()

      ::buildTaxRuleGroup( id )

      for each hTax in ::aTaxProducts

         idTaxRulesGroup   := ::insertTaxPrestashop( hTax )

      next

   end

RETURN ( idTaxRulesGroup )



static FUNCTION TComercioTax_buildTaxRuleGroup( id ) ; local Self AS CLASS TComercioTax := QSelf() AS CLASS TComercioTax

   if aScan( ::aTaxProducts, {|h| hGet( h, "id" ) == id } ) <> 0
      RETURN .F.
   end

   if ::TPrestashopId():getValueTax( id, ::getCurrentWebName() ) <> 0
      RETURN .F.
   end

   if D():gotoTiposIva( id, ::getView() )


      aadd( ::aTaxProducts,   {  "id"     => id, "rate"   => alltrim( str( ( D():TiposIva( ::getView() ) )->TpIva ) ), "name"   => alltrim( ( D():TiposIva( ::getView() ) )->DescIva ) } )
   end

RETURN ( .T. )



static FUNCTION TComercioTax_insertTaxesPrestashop( ) ; local Self AS CLASS TComercioTax := QSelf() AS CLASS TComercioTax

   local hTax

   ::meterProcesoSetTotal( len( ::aTaxProducts ) )

   for each hTax in ::aTaxProducts

      ::insertTaxPrestashop( hTax )

      ::meterProcesoText( "Subiendo impuestos " + alltrim(str(hb_enumindex())) + " de " + alltrim(str(len(::aTaxProducts))) )

   next

RETURN ( .T. )



static FUNCTION TComercioTax_insertTaxPrestashop( hTax ) ; local Self AS CLASS TComercioTax := QSelf() AS CLASS TComercioTax

   local oQuery
   local idTax             := 0
   local cCommand          := ""
   local idGroupWeb        := 0






   cCommand                := "INSERT IGNORE INTO " + ::cPreFixtable( "tax" ) + " ( " +  "rate, " +  "active ) " +  "VALUES ( " +  "'" + hGet( hTax, "rate" ) + "', " +  "'1' )"

   if ::commandExecDirect( cCommand )
      idTax                := ::oConexionMySQLDatabase():GetInsertId()
      ::writeTextOk( hGet( hTax, "name" ), ::cPrefixTable( "tax" ) )
   else
      ::writeTextError( hGet( hTax, "name" ), ::cPrefixTable( "tax" ) )
      RETURN .F.
   end










   cCommand                := "INSERT IGNORE INTO " + ::cPrefixTable( "tax_lang" ) + "( " + "id_tax, " +  "id_lang, " +  "name ) " +  "VALUES ( " +  "'" + alltrim( str( idTax ) ) + "', " +  ::getLanguage() + ", " +  "'" + ::oConexionMySQLDatabase():Escapestr( hGet( hTax, "name" ) ) + "' )"

   if ::commandExecDirect( cCommand )
      ::writeTextOk( hGet( hTax, "name" ), ::cPrefixTable( "tax_lang" ) )
   else
      ::writeTextError( hGet( hTax, "name" ), ::cPrefixTable( "tax_lang" ) )
   end








   cCommand                := "INSERT IGNORE INTO "+ ::cPrefixTable( "tax_rules_group" ) + "( " +  "name, " +  "active ) " +  "VALUES ( " +  "'" + ::oConexionMySQLDatabase():Escapestr( hGet( hTax, "name" ) ) + "', " +  "'1' )"

   if ::commandExecDirect( cCommand )
      idGroupWeb           := ::oConexionMySQLDatabase():GetInsertId()
      ::writeTextOk( hGet( hTax, "name" ), ::cPrefixTable( "tax_rule_group" ) )
   else
      ::writeTextError( hGet( hTax, "name" ), ::cPrefixTable( "tax_rule_group" ) )
   end



   cCommand                := "SELECT id_country FROM " + ::cPrefixTable( "country" )
   oQuery                  := ::queryExecDirect( cCommand )

   if oQuery:Open() .AND. oQuery:RecCount() > 0

      oQuery:GoTop()




      cCommand             := "INSERT IGNORE INTO " + ::cPrefixTable( "tax_rule" ) + "( " + "id_tax_rules_group, " +  "id_country, " +  "id_tax ) VALUES "

      while !oQuery:Eof()




         cCommand          += "( " +  "'" + alltrim( str( idGroupWeb ) ) + "', " +  "'" + AllTrim( str( oQuery:FieldGetByName( "id_country" ) ) ) + "', " +  "'" + alltrim( str( idTax ) ) + "' ), "

         oQuery:Skip()

      end

   end

   cCommand                := Substr( cCommand, 1, len( cCommand ) - 2 )

   if !::commandExecDirect( cCommand )
      ::writeTextError( hGet( hTax, "name" ), ::cPrefixTable( "tax_rule" ) )
   end










   cCommand                := "INSERT IGNORE INTO " + ::cPrefixTable( "tax_rules_group_shop" ) + "( " + "id_tax_rules_group, " +  "id_shop ) " +  "VALUES ( " +  "'" + alltrim( str( idGroupWeb ) ) + "', " +  "'1' )"

   if !::commandExecDirect( cCommand )
      ::writeTextError( hGet( hTax, "name" ), ::cPrefixTable( "tax_rules_group_shop" ) )
   end



   ::TPrestashopId():setValueTax(           hGet( hTax, "id" ), ::getCurrentWebName(), idTax )

   ::TPrestashopId():setValueTaxRuleGroup(  hGet( hTax, "id" ), ::getCurrentWebName(), idTax )

RETURN ( idTax )
