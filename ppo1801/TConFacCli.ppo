#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TConFacCli.prg"
_HB_CLASS TConFacCli ; function TConFacCli ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TConFacCli", iif( .T., { @TInfGen() }, { @HBObject() } ), @TConFacCli() ) ) ;

   _HB_MEMBER { AS LOGIC lTvta } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTvta"}, .F. )
   _HB_MEMBER { AS CHARACTER cTipVen } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipVen"}, .F. )
   _HB_MEMBER { AS CHARACTER cTipVen2 } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipVen2"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oArtKit } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oArtKit"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfCliAtp } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCliAtp"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TConFacCli_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TConFacCli_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TConFacCli_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TConFacCli_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TConFacCli_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nCosteCli( cCodCli); oClass:AddMethod( "nCosteCli", @TConFacCli_nCosteCli(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nDtoAtpCli( cCodCli); oClass:AddMethod( "nDtoAtpCli", @TConFacCli_nDtoAtpCli(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TConFacCli ;



static FUNCTION TConFacCli_Create( ) ; local Self AS CLASS TConFacCli := QSelf() AS CLASS TConFacCli

   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },      "Cód. cli.",            .F., "Cod. Cliente",           8, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },      "Cliente",              .F., "Nom. Cliente",          30, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },      "Código artículo",            .F., "Cod. Artículo",         14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },      "Artículo",             .T., "Artículo",              25, .F. )
   ::AddField( "nCajEnt", "N", 16, 6, {|| MasUnd() },  cNombreCajas(),         .F., cNombreCajas(),          12, .T. )
   ::AddField( "nUniDad", "N", 16, 6, {|| MasUnd() },  cNombreunidades(),      .F., cNombreUnidades(),       12, .T. )
   ::AddField( "nUntEnt", "N", 16, 6, {|| MasUnd() },  "Tot. " + cNombreunidades(), .T., "Total " + cNombreUnidades(), 12, .T. )
   ::AddField( "nPreDiv", "N", 16, 6, {|| ::cPicImp }, "Importe",              .T., "Importe",               12, .T. )
   ::AddField( "nTotAge", "N", 16, 6, {|| ::cPicImp }, "Com. Age.",            .T., "Comisión agente",       12, .T. )
   ::AddField( "nPreMed", "N", 16, 6, {|| ::cPicImp }, "Pre. Med.",            .T., "Precio medio",          12, .F. )
   ::AddField( "nDtoAtp", "N", 16, 6, {|| "@E 99.99" },"% Dto.",               .T., "Descuento atípico",     12, .F. )
   ::AddField( "nNetUnd", "N", 16, 6, {|| ::cPicImp }, "Neto/Ud",              .T., "Neto unidad",           12, .F. )
   ::AddField( "nCoste",  "N", 16, 6, {|| ::cPicCom }, "Coste",                .T., "Coste",                 12, .F. )
   ::AddField( "nMargen", "N", 16, 6, {|| ::cPicImp }, "Margen %",             .T., "Margen %",              12, .F. )
   ::AddField( "nBenef",  "N", 16, 6, {|| ::cPicImp }, "Beneficio",            .T., "Beneficio",             12, .F. )

   ::AddTmpIndex( "CCODCLI", "CCODCLI + CCODART" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( ::oDbf:cNomCli ) }, {||"Total cliente..." } )

RETURN ( self )



static FUNCTION TConFacCli_OpenFiles( ) ; local Self AS CLASS TConFacCli := QSelf() AS CLASS TConFacCli

   local lOpen    := .T.
   local oError
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oArtKit := DbfServer( "ARTKIT.DBF", ):NewOpen( "ARTKIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oArtKit:AddBag( "ARTKIT.CDX" ) ; ::oArtKit:AddBag( ) ; ::oArtKit:AutoIndex()

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oDbfCliAtp := DbfServer( "CLIATP.DBF", ):NewOpen( "CLIATP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCliAtp:AddBag( "CLIATP.CDX" ) ; ::oDbfCliAtp:AddBag( ) ; ::oDbfCliAtp:AutoIndex()

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TConFacCli_CloseFiles( ) ; local Self AS CLASS TConFacCli := QSelf() AS CLASS TConFacCli

   if !Empty( ::oArtKit ) .AND. ::oArtKit:Used()
      ::oArtKit:End()
   end

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end

   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end

   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end

   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end

   if !Empty( ::oDbfCliAtp ) .AND. ::oDbfCliAtp:Used()
      ::oDbfCliAtp:End()
   end

   ::oArtKit      := nil
   ::oFacCliT     := nil
   ::oFacCliL     := nil
   ::oFacRecT     := nil
   ::oFacRecL     := nil
   ::oDbfCliAtp   := nil

RETURN ( Self )



static FUNCTION TConFacCli_lResource( cFld ) ; local Self AS CLASS TConFacCli := QSelf() AS CLASS TConFacCli

   local cEstado     := "Todas"
   local oTipVen
   local oTipVen2
   local This        := Self





   if !::StdResource( "INF_GEN04C" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   if !::lDefArtInf( 150, 160, 170, 180, 800 )
      return .F.
   end





   ::oDefExcInf()
   ::oDefExcImp()









   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )





   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )

RETURN .T.






static FUNCTION TConFacCli_lGenerate( ) ; local Self AS CLASS TConFacCli := QSelf() AS CLASS TConFacCli

   local cExpHead  := ""
   local cExpLine  := ""


   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()








   ::aHeader   := {{|| "Fecha        : " + Dtoc( Date() ) }, {|| "Periodo      : " + Dtoc( ::dIniInf )  + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes     : " + if( ::lAllCli, "Todos", Rtrim( ::cCliOrg ) + " > " + Rtrim( ::cCliDes ) ) }, {|| "Artículos    : " + if( ::lAllArt, "Todos", Rtrim( ::cArtOrg ) + " > " + Rtrim( ::cArtDes ) ) }, {|| "Estado       : " + ::aEstado[ ::oEstado:nAt ] }, {|| if( !Empty( ::cTipVen ), "Tipo de Venta: " + ::cTipVen2, "Tipo de Venta: Todos" ) }, {|| if( ::lTvta, "Aplicando comportamiento de los tipos de venta", "" ) } }



   ::oFacCliT:OrdSetFocus( "dFecFac" )
   ::oFacCliL:OrdSetFocus( "nNumFac" )


   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )



   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oFacCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ), ::oFacCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacCliT:GoTop()



   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:cSerie, ::aSer )



         if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

            while ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac == ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac .AND. ! ::oFacCliL:eof()




               if !( ::lExcCero .AND. ( nTotNFacCli( ::oFacCliL ) == 0 ) )                               .AND. !( ::lExcImp .AND. ( nTotLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 ) )



                  if ::oDbf:Seek( ::oFacCliT:cCodCli + ::oFacCliL:cRef )

                     ::oDbf:Load()

                     ::oDbf:nCajEnt += ::oFacCliL:nCanEnt
                     ::oDbf:nUnidad += ::oFacCliL:nUniCaja
                     ::oDbf:nUntEnt += nTotNFacCli( ::oFacCliL )
                     ::oDbf:nTotAge += nComLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreDiv += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreMed := ( ::oDbf:nPreDiv - ::oDbf:nTotAge ) / ::oDbf:nUntEnt
                     ::oDbf:nNetUnd := ::oDbf:nPreMed - ( ( ::oDbf:nPreMed * ::oDbf:nDtoAtp ) / 100 )
                     ::oDbf:nMargen := ( ( ::oDbf:nNetUnd - ::oDbf:nCoste ) / ::oDbf:nCoste ) * 100
                     ::oDbf:nBenef  := ( ::oDbf:nNetUnd - ::oDbf:nCoste ) * ::oDbf:nUntEnt

                     ::oDbf:Save()

                  else

                     ::oDbf:Append()

                     ::oDbf:cCodCli := ::oFacCliT:cCodCli
                     ::oDbf:cNomCli := ::oFacCliT:cNomCli
                     ::oDbf:cCodArt := ::oFacCliL:cRef
                     ::oDbf:cNomArt := ::oFacCliL:cDetalle
                     ::oDbf:nCajEnt := ::oFacCliL:nCanEnt
                     ::oDbf:nUnidad := ::oFacCliL:nUniCaja
                     ::oDbf:nUntEnt := nTotNFacCli( ::oFacCliL )
                     ::oDbf:nTotAge := nComLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreDiv := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreMed := ( ::oDbf:nPreDiv - ::oDbf:nTotAge ) / ::oDbf:nUntEnt
                     ::oDbf:nDtoAtp := ::nDtoAtpCli( ::oFacCliT:cCodCli )
                     ::oDbf:nNetUnd := ::oDbf:nPreMed - ( ( ::oDbf:nPreMed * ::oDbf:nDtoAtp ) / 100 )
                     ::oDbf:nCoste  := ::nCosteCli( ::oFacCliT:cCodCli, ::oFacCliL:cRef )
                     ::oDbf:nMargen := ( ( ::oDbf:nNetUnd - ::oDbf:nCoste ) / ::oDbf:nCoste ) * 100
                     ::oDbf:nBenef  := ( ::oDbf:nNetUnd - ::oDbf:nCoste ) * ::oDbf:nUntEnt

                     ::oDbf:Save()

                  end

               end

               ::oFacCliL:Skip()

            end

         end

      end

      ::oFacCliT:Skip()


      ::oMtrInf:AutoInc()

   end



   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )
   ::oFacCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ) )







   ::oFacRecT:OrdSetFocus( "dFecFac" )
   ::oFacRecL:OrdSetFocus( "nNumFac" )


   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )



   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oFacRecL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecL:cFile ), ::oFacRecL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacRecT:GoTop()



   while !::lBreak .AND. !::oFacRecT:Eof()

      if lChkSer( ::oFacRecT:cSerie, ::aSer )



         if ::oFacRecL:Seek( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac )

            while ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac == ::oFacRecL:cSerie + Str( ::oFacRecL:nNumFac ) + ::oFacRecL:cSufFac .AND. ! ::oFacRecL:eof()




               if !( ::lExcCero .AND. ( nTotNFacRec( ::oFacRecL ) == 0 ) )                               .AND. !( ::lExcImp .AND. ( nTotLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 ) )


                  if ::oDbf:Seek( ::oFacRecT:cCodCli + ::oFacRecL:cRef )

                     ::oDbf:Load()

                     ::oDbf:nCajEnt += ::oFacRecL:nCanEnt
                     ::oDbf:nUnidad += ::oFacRecL:nUniCaja
                     ::oDbf:nUntEnt += nTotNFacRec( ::oFacRecL )
                     ::oDbf:nTotAge += nComLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreDiv += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreMed := ( ::oDbf:nPreDiv - ::oDbf:nTotAge ) / ::oDbf:nUntEnt
                     ::oDbf:nNetUnd := ::oDbf:nPreMed - ( ( ::oDbf:nPreMed * ::oDbf:nDtoAtp ) / 100 )
                     ::oDbf:nMargen := ( ( ::oDbf:nNetUnd - ::oDbf:nCoste ) / ::oDbf:nCoste ) * 100
                     ::oDbf:nBenef  := ( ::oDbf:nNetUnd - ::oDbf:nCoste ) * ::oDbf:nUntEnt

                     ::oDbf:Save()

                  else

                     ::oDbf:Append()

                     ::oDbf:cCodCli := ::oFacRecT:cCodCli
                     ::oDbf:cNomCli := ::oFacRecT:cNomCli
                     ::oDbf:cCodArt := ::oFacRecL:cRef
                     ::oDbf:cNomArt := ::oFacRecL:cDetalle
                     ::oDbf:nCajEnt := ::oFacRecL:nCanEnt
                     ::oDbf:nUnidad := ::oFacRecL:nUniCaja
                     ::oDbf:nUntEnt := nTotNFacRec( ::oFacRecL )
                     ::oDbf:nTotAge := nComLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreDiv := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nPreMed := ( ::oDbf:nPreDiv - ::oDbf:nTotAge ) / ::oDbf:nUntEnt
                     ::oDbf:nDtoAtp := ::nDtoAtpCli( ::oFacRecT:cCodCli )
                     ::oDbf:nNetUnd := ::oDbf:nPreMed - ( ( ::oDbf:nPreMed * ::oDbf:nDtoAtp ) / 100 )
                     ::oDbf:nCoste  := ::nCosteCli( ::oFacRecT:cCodCli, ::oFacRecL:cRef )
                     ::oDbf:nMargen := ( ( ::oDbf:nNetUnd - ::oDbf:nCoste ) / ::oDbf:nCoste ) * 100
                     ::oDbf:nBenef  := ( ::oDbf:nNetUnd - ::oDbf:nCoste ) * ::oDbf:nUntEnt

                     ::oDbf:Save()

                  end

               end

               ::oFacRecL:Skip()

            end

         end

      end

      ::oFacRecT:Skip()


      ::oMtrInf:AutoInc()

   end



   ::oFacRecT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ) )
   ::oFacRecL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecL:cFile ) )

   ::oMtrInf:AutoInc( ::oFacCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TConFacCli_nCosteCli( cCodCli, cCodArt ) ; local Self AS CLASS TConFacCli := QSelf() AS CLASS TConFacCli

   local nCoste
   local nOrdAnt  := ::oDbfCliAtp:OrdSetFocus( "cCliArt" )

   if ::oDbfCliAtp:Seek( cCodCli + cCodArt )
      if ::oDbfCliAtp:lPrcCom
         nCoste   := ::oDbfCliAtp:nPrcCom
      else
         nCoste   := nCosto( cCodArt, ::oDbfArt:cAlias, ::oArtKit:cAlias )
      end
   else
      nCoste      := nCosto( cCodArt, ::oDbfArt:cAlias, ::oArtKit:cAlias )
   end

   ::oDbfCliAtp:OrdSetFocus( nOrdAnt )

RETURN( nCoste )



static FUNCTION TConFacCli_nDtoAtpCli( cCodCli ) ; local Self AS CLASS TConFacCli := QSelf() AS CLASS TConFacCli

   local nDtoAtp  := 0
   local nOrdAnt  := ::oDbfCli:OrdSetFocus( "COD" )

   if ::oDbfCli:Seek( cCodCli )
      nDtoAtp     := ::oDbfCli:nDtoAtp
   end

   ::oDbfCli:OrdSetFocus( nOrdAnt )

RETURN( nDtoAtp )
