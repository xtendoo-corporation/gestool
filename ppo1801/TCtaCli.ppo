#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TCtaCli.prg"
_HB_CLASS TICtaCli ; function TICtaCli ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TICtaCli", iif( .T., { @TInfGen() }, { @HBObject() } ), @TICtaCli() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oOrden } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOrden"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TICtaCli_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TICtaCli_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TICtaCli_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TICtaCli_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TICtaCli_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TICtaCli ;



static FUNCTION TICtaCli_Create( ) ; local Self AS CLASS TICtaCli := QSelf() AS CLASS TICtaCli

   ::AddField ( "CCODCLI", "C", 12, 0, {|| "@!" },         "Código",                  .F., "Código cliente"          ,  8, .F. )
   ::AddField ( "CNOMCLI", "C", 50, 0, {|| "@!" },         "Cliente",                 .F., "Nombre cliente"          , 25, .F. )
   ::AddField ( "CDOCMOV", "C", 40, 0, {|| "@!" },         "Documento",               .T., "Documento"               , 40, .F. )
   ::AddField ( "DFECMOV", "D",  8, 0, {|| "@!" },         "Fecha",                   .T., "Fecha"                   , 12, .F. )
   ::AddField ( "CNIFCLI", "C", 15, 0, {|| "@!" },         "Nif",                     .F., "Nif"                     ,  8, .F. )
   ::AddField ( "CDOMCLI", "C", 35, 0, {|| "@!" },         "Domicilio",               .F., "Domicilio"               , 25, .F. )
   ::AddField ( "CPOBCLI", "C", 25, 0, {|| "@!" },         "Población",               .F., "Población"               , 20, .F. )
   ::AddField ( "CPROCLI", "C", 20, 0, {|| "@!" },         "Provincia",               .F., "Provincia"               , 20, .F. )
   ::AddField ( "CCDPCLI", "C",  7, 0, {|| "@!" },         "CP",                      .F., "Cod. Postal"             , 20, .F. )
   ::AddField ( "CTLFCLI", "C", 12, 0, {|| "@!" },         "Tlf",                     .F., "Teléfono"                ,  7, .F. )
   ::AddField ( "NTOTDEB", "N", 16, 3, {|| ::cPicOut },    "Facturado",               .T., "Facturado"               , 12, .T. )
   ::AddField ( "NTOTHAB", "N", 16, 3, {|| ::cPicOut },    "Cobrado",                 .T., "Cobrado"                 , 12, .T. )
   ::AddField ( "NTOTSAL", "N", 16, 3, {|| ::cPicOut },    "Saldo",                   .T., "Saldo"                   , 12, .F. )

   ::AddTmpIndex( "CCODCLI", "CCODCLI + DTOS( DFECMOV )" )
   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) }, {||"Total Cliente..."} )

RETURN ( self )



static FUNCTION TICtaCli_OpenFiles( ) ; local Self AS CLASS TICtaCli := QSelf() AS CLASS TICtaCli

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT     := TDataCenter():oFacCliT()
   ::oFacCliT:OrdSetFocus( "dFecFac" )

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAntCliT := DbfServer( "AntCliT.DBF", ):NewOpen( "AntCliT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "AntCliT.Cdx" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TICtaCli_CloseFiles( ) ; local Self AS CLASS TICtaCli := QSelf() AS CLASS TICtaCli

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oFacCliT  := nil
   ::oFacCliL  := nil
   ::oFacCliP  := nil
   ::oAntCliT  := nil
   ::oDbfIva   := nil

RETURN ( Self )



static FUNCTION TICtaCli_lResource( cFld ) ; local Self AS CLASS TICtaCli := QSelf() AS CLASS TICtaCli

   if !::StdResource( "INF_GEN16A" )
      return .F.
   end

   ::oBtnFilter:Disable()





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   if !::oDefAgeInf( 110, 120, 130, 140, 940 )
      return .F.
   end

   ::oDefResInf()





   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )

RETURN ( .T. )






static FUNCTION TICtaCli_lGenerate( ) ; local Self AS CLASS TICtaCli := QSelf() AS CLASS TICtaCli

   local cCodCli
   local nSalAnt        := 0

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()
   ::oFacCliT:GoTop()








   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente : " + ::cCliOrg         + " > " + ::cCliDes         }, {|| "Agente  : " + if ( !Empty( ::cAgeOrg ),( ::cAgeOrg + " > " + ::cAgeDes ), "Ninguno" ) } }

   ::oFacCliT:Seek( ::dIniInf, .T. )

   WHILE ::oFacCliT:dFecFac <= ::dFinInf .AND. !::lBreak .AND. !::oFacCliT:Eof()







      if ( ::lAllCli .OR. ( ::oFacCliT:CCODCLI >= ::cCliOrg .AND. ::oFacCliT:CCODCLI <= ::cCliDes ) )   .AND. ( ::lAgeAll .OR. ( ::oFacCliT:CCODAGE >= ::cAgeOrg .AND. ::oFacCliT:CCODAGE <= ::cAgeDes ) )   .AND. lChkSer( ::oFacCliT:CSERIE, ::aSer )





         ::oDbf:Append()

         ::oDbf:CCODCLI := ::oFacCliT:CCODCLI
         ::oDbf:CNOMCLI := ::oFacCliT:CNOMCLI
         ::oDbf:DFECMOV := ::oFacCliT:DFECFAC
         ::oDbf:NTOTDEB := nTotFacCli( ::oFacCliT:CSERIE + Str( ::oFacCliT:NNUMFAC ) + ::oFacCliT:CSUFFAC, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias, nil, ::cDivInf, .F. )
         ::oDbf:NTOTHAB := 0
         ::oDbf:CDOCMOV := "Factura " + lTrim ( ::oFacCliT:CSERIE ) + "/" + lTrim( Str( ::oFacCliT:NNUMFAC ) ) + "/" + lTrim( ::oFacCliT:CSUFFAC )





         ::AddCliente( ::oFacCliT:CCODCLI, ::oFacCliT, .F. )

         ::oDbf:Save()

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )





   ::oFacCliP:GoTop()
   WHILE !::lBreak .AND. !::oFacCliP:Eof()









      if ::oFacCliP:lCobrado                                                                          .AND. ::oFacCliP:dEntrada >= ::dIniInf                                                              .AND. ::oFacCliP:dEntrada <= ::dFinInf                                                             .AND. ( ::lAllCli .OR. ( ::oFacCliP:cCodCli >= ::cCliOrg .AND. ::oFacCliP:cCodCli <= ::cCliDes ) ) .AND. lChkSer( ::oFacCliP:cSerie, ::aSer )





         ::oDbf:Append()

         ::oDbf:CCODCLI := ::oFacCliP:CCODCLI
         ::oDbf:CNOMCLI := RetClient( ::oFacCliP:CCODCLI, ::oDbfCli:cAlias )
         ::oDbf:DFECMOV := ::oFacCliP:dEntrada
         ::oDbf:NTOTDEB := 0
         ::oDbf:NTOTHAB := nTotRecCli( ::oFacCliP:cAlias, ::oDbfDiv:cAlias )
         ::oDbf:CDOCMOV := "Recibo " + lTrim ( ::oFacCliP:CSERIE ) + "/" + lTrim ( Str( ::oFacCliP:NNUMFAC ) ) + "/" + lTrim ( ::oFacCliP:CSUFFAC ) + "/" + lTrim ( Str( ::oFacCliP:nNumRec ) )

         ::oDbf:Save()

      end

      ::oFacCliP:Skip()

      ::oMtrInf:AutoInc( ::oFacCliP:OrdKeyNo() )

   end

   ::oMtrInf:SetTotal( ::oFacCliP:Lastrec() )



   ::oMtrInf:SetTotal( ::oDbf:Lastrec() )

   ::oDbf:GoTop()
   while !::lBreak .AND. !::oDbf:eof()

      cCodCli        := ::oDbf:cCodCli
      nSalAnt        += ( ::oDbf:nTotDeb - ::oDbf:nTotHab )

      ::oDbf:Load()
      ::oDbf:nTotSal := nSalAnt
      ::oDbf:Save()

      ::oDbf:Skip()

      if ::oDbf:cCodCli <> cCodCli
         nSalAnt     := 0
      end

      ::oMtrInf:AutoInc( ::oDbf:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbf:Lastrec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
