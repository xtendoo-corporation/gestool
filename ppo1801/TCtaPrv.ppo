#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TCtaPrv.prg"
_HB_CLASS TICtaPrv ; function TICtaPrv ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TICtaPrv", iif( .T., { @TInfGen() }, { @HBObject() } ), @TICtaPrv() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS OBJECT oOrden } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOrden"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TICtaPrv_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TICtaPrv_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TICtaPrv_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TICtaPrv_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TICtaPrv_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TICtaPrv ;



static FUNCTION TICtaPrv_Create( ) ; local Self AS CLASS TICtaPrv := QSelf() AS CLASS TICtaPrv

   ::AddField ( "cCodPrv", "C", 12, 0, {|| "@!" },      "Código",                  .F., "Cod. proveedor"          ,  8, .F. )
   ::AddField ( "cNomPrv", "C", 50, 0, {|| "@!" },      "Proveedor",               .F., "Nombre proveedor"        , 25, .F. )
   ::AddField ( "cDocMov", "C", 40, 0, {|| "@!" },      "Documento",               .T., "Documento"               , 40, .F. )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },      "Fecha",                   .T., "Fecha"                   , 14, .F. )
   ::AddField ( "cNifPrv", "C", 15, 0, {|| "@!" },      "Nif",                     .F., "Nif"                     ,  8, .F. )
   ::AddField ( "cDomPrv", "C", 35, 0, {|| "@!" },      "Domicilio",               .F., "Domicilio"               , 25, .F. )
   ::AddField ( "cPobPrv", "C", 25, 0, {|| "@!" },      "Población",               .F., "Población"               , 20, .F. )
   ::AddField ( "cProPrv", "C", 20, 0, {|| "@!" },      "Provincia",               .F., "Provincia"               , 20, .F. )
   ::AddField ( "cCdpPrv", "C",  7, 0, {|| "@!" },      "CP",                      .F., "Cod. Postal"             , 20, .F. )
   ::AddField ( "cTlfPrv", "C", 12, 0, {|| "@!" },      "Tlf",                     .F., "Teléfono"                ,  7, .F. )
   ::AddField ( "nTotDeb", "N", 16, 3, {|| ::cPicIn },  "Facturado",               .T., "Total facturado"         , 12, .T. )
   ::AddField ( "nTotHab", "N", 16, 3, {|| ::cPicIn },  "Pagado",                  .T., "Total pagado"            , 12, .T. )
   ::AddField ( "nTotSal", "N", 16, 3, {|| ::cPicIn },  "Saldo",                   .T., "Saldo"                   , 12, .F. )

   ::AddTmpIndex ( "cCodPrv", "cCodPrv + DTOS( DFECMOV )" )
   ::AddGroup( {|| ::oDbf:cCodPrv }, {|| "Proveedor : " + Rtrim( ::oDbf:cCodPrv ) + "-" + oRetFld( ::oDbf:cCodPrv, ::oDbfPrv ) }, {||"Total proveedor..."} )

RETURN ( self )



static FUNCTION TICtaPrv_OpenFiles( ) ; local Self AS CLASS TICtaPrv := QSelf() AS CLASS TICtaPrv

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacPrvT := DbfServer( "FacPrvT.DBF", ):NewOpen( "FacPrvT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FacPrvT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FacPrvL.DBF", ):NewOpen( "FacPrvL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FacPrvL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oFacPrvP := DbfServer( "FacPrvP.DBF", ):NewOpen( "FacPrvP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FacPrvP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TICtaPrv_CloseFiles( ) ; local Self AS CLASS TICtaPrv := QSelf() AS CLASS TICtaPrv

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end
   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end
   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oFacPrvT := nil
   ::oFacPrvL := nil
   ::oFacPrvP := nil
   ::oDbfIva  := nil

RETURN ( Self )



static FUNCTION TICtaPrv_lResource( cFld ) ; local Self AS CLASS TICtaPrv := QSelf() AS CLASS TICtaPrv

   if !::StdResource( "INF_GEN16B" )
      return .F.
   end

   ::oBtnFilter:Disable()





   if !::oDefPrvInf( 70, 80, 90, 100, 900 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacPrvT:Lastrec() )

RETURN .T.






static FUNCTION TICtaPrv_lGenerate( ) ; local Self AS CLASS TICtaPrv := QSelf() AS CLASS TICtaPrv

   local nSalAnt        := 0
   local cCodPrv        := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::oFacPrvT:GoTop()



   ::aHeader   := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Proveedor: " + AllTrim ( ::cPrvOrg ) + " > " + AllTrim ( ::cPrvDes ) } }

   WHILE !::lBreak .AND. !::oFacPrvT:Eof()








      if ::oFacPrvT:dFecFac >= ::dIniInf                                                              .AND. ::oFacPrvT:dFecFac <= ::dFinInf                                                              .AND. ( ::lAllPrv .OR. ( ::oFacPrvT:cCodPrv >= ::cPrvOrg .AND. ::oFacPrvT:cCodPrv <= ::cPrvDes ) ) .AND. lChkSer( ::oFacPrvT:cSerFac, ::aSer )





         ::oDbf:Append()

         ::oDbf:cCodPrv := ::oFacPrvT:cCodPrv
         ::oDbf:cNomPrv := ::oFacPrvT:cNomPrv
         ::oDbf:dFecMov := ::oFacPrvT:dFecFac
         ::oDbf:nTotDeb := nTotFacPrv( ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac, ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacPrvP:cAlias, nil, ::cDivInf, .F. )
         ::oDbf:nTotHab := 0
         ::oDbf:cDocMov := "Factura " + lTrim ( ::oFacPrvT:cSerFac ) + "/" + lTrim ( Str( ::oFacPrvT:NNUMFAC ) ) + "/" + lTrim ( ::oFacPrvT:CSUFFAC )





         ::AddProveedor( ::oFacPrvT:cCodPrv )

         ::oDbf:Save()

      end

      ::oFacPrvT:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvT:OrdKeyNo() )

   end





   ::oFacPrvP:GoTop()
   WHILE !::lBreak .AND. !::oFacPrvP:Eof()

      cCodPrv  := cCodFacPrv( ::oFacPrvP:cSerFac + Str( ::oFacPrvP:nNumFac ) + ::oFacPrvP:cSufFac, ::oFacPrvT )










      if ::oFacPrvP:lCobrado                                                                 .AND. ::oFacPrvP:dEntrada >= ::dIniInf                                                    .AND. ::oFacPrvP:dEntrada <= ::dFinInf                                                    .AND. cCodPrv >= ::cPrvOrg                                                                .AND. cCodPrv <= ::cPrvDes                                                                .AND. lChkSer( ::oFacPrvP:cSerFac, ::aSer )





         ::oDbf:Append()

         ::oDbf:cCodPrv := cCodPrv
         ::oDbf:cNomPrv := RetProvee( cCodPrv, ::oDbfPrv:cAlias )
         ::oDbf:dFecMov := ::oFacPrvP:dEntrada
         ::oDbf:nTotDeb := 0
         ::oDbf:nTotHab := nTotRecPrv( ::oFacPrvP:cAlias, ::oDbfDiv:cAlias )
         ::oDbf:cDocMov := "Recibo " + lTrim ( ::oFacPrvP:cSerFac ) + "/" + lTrim ( Str( ::oFacPrvP:nNumFac ) ) + "/" + lTrim ( ::oFacPrvP:cSufFac ) + "/" + lTrim ( Str( ::oFacPrvP:nNumRec ) )





         ::AddProveedor( cCodPrv )

         ::oDbf:Save()

      end

      ::oFacPrvP:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvT:OrdKeyNo() )

   end



   ::oMtrInf:SetTotal( ::oDbf:Lastrec() )

   ::oDbf:GoTop()
   while !::lBreak .AND. !::oDbf:eof()

      cCodPrv        := ::oDbf:cCodPrv
      nSalAnt        += ( ::oDbf:nTotDeb - ::oDbf:nTotHab )

      ::oDbf:Load()
      ::oDbf:nTotSal := nSalAnt
      ::oDbf:Save()

      ::oDbf:Skip()

      if ::oDbf:cCodPrv <> cCodPrv
         nSalAnt     := 0
      end

      ::oMtrInf:AutoInc( ::oDbf:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbf:Lastrec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
