#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 287 "\fwh1801\include\Xbrowse.ch"
   EXTERNAL ADSKEYCOUNT, ADSGETRELKEYPOS, ADSSETRELKEYPOS, ADSKEYNO
#line 10 ".\.\Prg\TDataCenter.prg"
_HB_CLASS TDataCenter ; function TDataCenter ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDataCenter", iif( .F., { }, { @HBObject() } ), @TDataCenter() ) ) ;

   _HB_MEMBER { oInstance } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oInstance"}, .F. )

   _HB_MEMBER { cDataDictionaryComment } ; oClass:AddMultiClsData(, "gestool ADS data dictionary", nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDataDictionaryComment"}, .F. )

   _HB_MEMBER { aDDTables } ; oClass:AddMultiClsData(, {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDDTables"}, .F. )
   _HB_MEMBER { aDDTriggers } ; oClass:AddMultiClsData(, {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDDTriggers"}, .F. )

   _HB_MEMBER { lAdsConnection } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAdsConnection"}, .F. )
   _HB_MEMBER { hAdsConnection } ; oClass:AddMultiClsData(,, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hAdsConnection"}, .F. )

   _HB_MEMBER { aDataTables } ; oClass:AddMultiClsData(, {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDataTables"}, .F. )
   _HB_MEMBER { aEmpresaTables } ; oClass:AddMultiClsData(, {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEmpresaTables"}, .F. )
   _HB_MEMBER { aEmpresaObject } ; oClass:AddMultiClsData(, {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEmpresaObject"}, .F. )

   _HB_MEMBER { aDataTmp } ; oClass:AddMultiClsData(, {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDataTmp"}, .F. )

   _HB_MEMBER { hOperationDescription } ; oClass:AddMultiClsData(, { "INSERT" => "Añadido", "UPDATE" => "Modificado", "DELETE" => "Eliminado" }, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hOperationDescription"}, .F. )

   _HB_MEMBER { aEmpresas } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEmpresas"}, .F. )

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )
   _HB_MEMBER { oBrwEmpresas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwEmpresas"}, .F. )

   _HB_MEMBER { oDlgAuditor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlgAuditor"}, .F. )
   _HB_MEMBER { oFldAuditor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFldAuditor"}, .F. )

   _HB_MEMBER { oBrwOperation } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwOperation"}, .F. )
   _HB_MEMBER { oBrwColumn } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwColumn"}, .F. )
   _HB_MEMBER { oBrwBlocks } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwBlocks"}, .F. )

   _HB_MEMBER { oMtrActualiza } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMtrActualiza"}, .F. )
   _HB_MEMBER { nMtrActualiza } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMtrActualiza"}, .F. )

   _HB_MEMBER { oMtrDiccionario } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMtrDiccionario"}, .F. )
   _HB_MEMBER { nMtrDiccionario } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMtrDiccionario"}, .F. )

   _HB_MEMBER { oMsg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMsg"}, .F. )
   _HB_MEMBER { cMsg } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMsg"}, .F. )

   _HB_MEMBER { oBtnOk } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnOk"}, .F. )
   _HB_MEMBER { oBntCancel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBntCancel"}, .F. )

   _HB_MEMBER { lValidDlg } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lValidDlg"}, .F. )

   _HB_MEMBER { oPeriodo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPeriodo"}, .F. )
   _HB_MEMBER { cPeriodo } ; oClass:AddMultiData(, "Mes en curso", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPeriodo"}, .F. )
   _HB_MEMBER { aPeriodo } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aPeriodo"}, .F. )

   _HB_MEMBER { oIniInf } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIniInf"}, .F. )
   _HB_MEMBER { dIniInf } ; oClass:AddMultiData(, CtoD( "01/01/" + Str( Year( Date() ) ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dIniInf"}, .F. )

   _HB_MEMBER { oFinInf } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFinInf"}, .F. )
   _HB_MEMBER { dFinInf } ; oClass:AddMultiData(, Date(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFinInf"}, .F. )

   _HB_MEMBER { lAppend } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAppend"}, .F. )
   _HB_MEMBER { lEdit } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lEdit"}, .F. )
   _HB_MEMBER { lDelete } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lDelete"}, .F. )

   _HB_MEMBER { lActualizaBaseDatos } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lActualizaBaseDatos"}, .F. )
   _HB_MEMBER { lTriggerAuxiliares } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTriggerAuxiliares"}, .F. )

   _HB_MEMBER { aLgcIndices } ; oClass:AddMultiData(, { .T., .T., .F., .F. }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aLgcIndices"}, .F. )
   _HB_MEMBER { aChkIndices } ; oClass:AddMultiData(, Array( 4 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aChkIndices"}, .F. )

   _HB_MEMBER { aProgress } ; oClass:AddMultiData(, Array( 4 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aProgress"}, .F. )
   _HB_MEMBER { nProgress } ; oClass:AddMultiData(, { 0, 0, 0, 0 }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nProgress"}, .F. )

   _HB_MEMBER { cMsg } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMsg"}, .F. )
   _HB_MEMBER { oMsg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMsg"}, .F. )

   _HB_MEMBER { lAutoStart } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAutoStart"}, .F. )

   _HB_MEMBER getDataDictionaryFile(); oClass:AddInline( "getDataDictionaryFile", {|Self | ( ( Self ) ), ( cAdsIp() + cPath( cAdsData() ) + ( getSinglePathADS() ) + cAdsFile() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDataDictionaryConnection(); oClass:AddInline( "getDataDictionaryConnection", {|Self | ( ( Self ) ), ( cAdsIp() + if( !empty( cAdsPort() ), ":" + cAdsPort(), "" ) + cPath( cAdsData() ) + ( getSinglePathADS() ) + cAdsFile() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateDataDictionary(); oClass:AddMethod( "CreateDataDictionary", @TDataCenter_CreateDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ConnectDataDictionary(); oClass:AddMethod( "ConnectDataDictionary", @TDataCenter_ConnectDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateDataUser( oDataUser); oClass:AddMethod( "CreateDataUser", @TDataCenter_CreateDataUser(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateDataTable(); oClass:AddMethod( "CreateDataTable", @TDataCenter_CreateDataTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER addEmpresaTablesToDataDictionary(); oClass:AddMethod( "addEmpresaTablesToDataDictionary", @TDataCenter_addEmpresaTablesToDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReLoadTables(); oClass:AddInline( "ReLoadTables", {|Self | ( ( Self ) ), ( ::aDDTables := AdsDirectory() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateDataTrigger(); oClass:AddMethod( "CreateDataTrigger", @TDataCenter_CreateDataTrigger(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CreateEmpresaTrigger(); oClass:AddMethod( "CreateEmpresaTrigger", @TDataCenter_CreateEmpresaTrigger(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isTableInDataDictionary( oTable); oClass:AddMethod( "isTableInDataDictionary", @TDataCenter_isTableInDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER isTriggerInDataDictionary( oTable); oClass:AddMethod( "isTriggerInDataDictionary", @TDataCenter_isTriggerInDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateTriggerUpdate( oTable); oClass:AddMethod( "CreateTriggerUpdate", @TDataCenter_CreateTriggerUpdate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CreateColumnTriggerUpdate( oTable, cTrigger); oClass:AddMethod( "CreateColumnTriggerUpdate", @TDataCenter_CreateColumnTriggerUpdate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateTriggerInsert( oTable); oClass:AddMethod( "CreateTriggerInsert", @TDataCenter_CreateTriggerInsert(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CreateColumnTriggerInsert( oTable, cTrigger); oClass:AddMethod( "CreateColumnTriggerInsert", @TDataCenter_CreateColumnTriggerInsert(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateTriggerDelete( oTable); oClass:AddMethod( "CreateTriggerDelete", @TDataCenter_CreateTriggerDelete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CreateColumnTriggerDelete( oTable, cTrigger); oClass:AddMethod( "CreateColumnTriggerDelete", @TDataCenter_CreateColumnTriggerDelete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER addTableToDataDictionary( oTable); oClass:AddMethod( "addTableToDataDictionary", @TDataCenter_addTableToDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddTableName( cTableName); oClass:AddMethod( "AddTableName", @TDataCenter_AddTableName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddTrigger( oTable, cAction); oClass:AddMethod( "AddTrigger", @TDataCenter_AddTrigger(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteEmpresaTablesFromDataDictionary(); oClass:AddMethod( "deleteEmpresaTablesFromDataDictionary", @TDataCenter_deleteEmpresaTablesFromDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteTableFromDataDictionary( oTable); oClass:AddMethod( "deleteTableFromDataDictionary", @TDataCenter_deleteTableFromDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER deleteTableNameFromDataDictionary( cTableName); oClass:AddMethod( "deleteTableNameFromDataDictionary", @TDataCenter_deleteTableNameFromDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteAllTableFromDataDictionary(); oClass:AddMethod( "deleteAllTableFromDataDictionary", @TDataCenter_deleteAllTableFromDataDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER BuildData(); oClass:AddMethod( "BuildData", @TDataCenter_BuildData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER BuildEmpresa(); oClass:AddMethod( "BuildEmpresa", @TDataCenter_BuildEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CheckData(); oClass:AddMethod( "CheckData", @TDataCenter_CheckData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CheckEmpresa(); oClass:AddMethod( "CheckEmpresa", @TDataCenter_CheckEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER BuildTrigger(); oClass:AddMethod( "BuildTrigger", @TDataCenter_BuildTrigger(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddDataTable(); oClass:AddInline( "AddDataTable", {|Self, oTable | ( ( Self ) ), aAdd( ::aDataTables, oTable ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddEmpresaTable(); oClass:AddInline( "AddEmpresaTable", {|Self, oTable | ( ( Self ) ), aAdd( ::aEmpresaTables, oTable ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddEmpresaObject(); oClass:AddInline( "AddEmpresaObject", {|Self, oObject | ( ( Self ) ), aAdd( ::aEmpresaObject, oObject ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateOperationLogTable(); oClass:AddMethod( "CreateOperationLogTable", @TDataCenter_CreateOperationLogTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CreateColumnLogTable(); oClass:AddMethod( "CreateColumnLogTable", @TDataCenter_CreateColumnLogTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateTemporalTable( oTable); oClass:AddMethod( "CreateTemporalTable", @TDataCenter_CreateTemporalTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseArea(); oClass:AddInline( "CloseArea", {|Self, cArea | ( ( Self ) ), ( if( select( cArea ) > 0, ( cArea )->( dbclosearea() ), ), dbselectarea( 0 ), .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateAllLocksTablesUsers(); oClass:AddMethod( "CreateAllLocksTablesUsers", @TDataCenter_CreateAllLocksTablesUsers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER DeleteAllLocksTablesUsers(); oClass:AddMethod( "DeleteAllLocksTablesUsers", @TDataCenter_DeleteAllLocksTablesUsers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetAllLocksTablesUsers(); oClass:AddMethod( "GetAllLocksTablesUsers", @TDataCenter_GetAllLocksTablesUsers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetAllTables(); oClass:AddMethod( "GetAllTables", @TDataCenter_GetAllTables(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseAllLocksTablesUsers(); oClass:AddInline( "CloseAllLocksTablesUsers", {|Self | ( ( Self ) ), ( ::CloseArea( "AllLocks" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER configDatabaseCDXLocal(); oClass:AddMethod( "configDatabaseCDXLocal", @TDataCenter_configDatabaseCDXLocal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dialogEmpresas(); oClass:AddMethod( "dialogEmpresas", @TDataCenter_dialogEmpresas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadEmpresas(); oClass:AddMethod( "loadEmpresas", @TDataCenter_loadEmpresas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lAdministratorTask(); oClass:AddMethod( "lAdministratorTask", @TDataCenter_lAdministratorTask(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER StartAdministratorTask(); oClass:AddMethod( "StartAdministratorTask", @TDataCenter_StartAdministratorTask(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Auditor(); oClass:AddMethod( "Auditor", @TDataCenter_Auditor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER StartAuditor() ; oClass:AddVirtual( "StartAuditor" )

   _HB_MEMBER lSelectOperationLog(); oClass:AddMethod( "lSelectOperationLog", @TDataCenter_lSelectOperationLog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseOperationLog(); oClass:AddInline( "CloseOperationLog", {|Self | ( ( Self ) ), ( ::CloseArea( "SqlOperation" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER InlineSelectOperationLog(); oClass:AddInline( "InlineSelectOperationLog", {|Self | ( ( Self ) ), ( CursorWait(), ::lSelectOperationLog(), ::oBrwOperation:Refresh(), ::oBrwOperation:GoTop(), CursorWE() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lSelectColumnLog( id); oClass:AddMethod( "lSelectColumnLog", @TDataCenter_lSelectColumnLog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseColumnLog(); oClass:AddInline( "CloseColumnLog", {|Self | ( ( Self ) ), ( ::CloseArea( "SqlColumn" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER InlineSelectColumnLog(); oClass:AddInline( "InlineSelectColumnLog", {|Self, id | ( ( Self ) ), ( CursorWait(), msgStop( id ), ::lSelectColumnLog( id ), ::oBrwColumn:Refresh(), ::oBrwColumn:GoTop(), CursorWait() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lCreaArrayPeriodos(); oClass:AddMethod( "lCreaArrayPeriodos", @TDataCenter_lCreaArrayPeriodos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lRecargaFecha(); oClass:AddMethod( "lRecargaFecha", @TDataCenter_lRecargaFecha(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cEmpresaDescription( cTableName); oClass:AddMethod( "cEmpresaDescription", @TDataCenter_cEmpresaDescription(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cTableDescription( cTableName); oClass:AddMethod( "cTableDescription", @TDataCenter_cTableDescription(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cOperationDescription( cOperation); oClass:AddMethod( "cOperationDescription", @TDataCenter_cOperationDescription(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DisableTriggers(); oClass:AddMethod( "DisableTriggers", @TDataCenter_DisableTriggers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER EnableTriggers(); oClass:AddMethod( "EnableTriggers", @TDataCenter_EnableTriggers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SetAplicationID( cNombreUsuario); oClass:AddMethod( "SetAplicationID", @TDataCenter_SetAplicationID(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SqlCreateIndex( tableName, indexName, tagName, Expression, Condition); oClass:AddMethod( "SqlCreateIndex", @TDataCenter_SqlCreateIndex(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ExecuteSqlStatement( cSql, cSqlStatement); oClass:AddMethod( "ExecuteSqlStatement", @TDataCenter_ExecuteSqlStatement(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ExecuteSqlDirect( cSql); oClass:AddMethod( "ExecuteSqlDirect", @TDataCenter_ExecuteSqlDirect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectSATFromClient( cCodigoCliente); oClass:AddMethod( "selectSATFromClient", @TDataCenter_selectSATFromClient(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER treeProductFromSAT(); oClass:AddMethod( "treeProductFromSAT", @TDataCenter_treeProductFromSAT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectSATFromArticulo( cCodigoArticulo); oClass:AddMethod( "selectSATFromArticulo", @TDataCenter_selectSATFromArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nId); oClass:AddMethod( "Resource", @TDataCenter_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER StartResource(); oClass:AddMethod( "StartResource", @TDataCenter_StartResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Reindex(); oClass:AddMethod( "Reindex", @TDataCenter_Reindex(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ReindexTable( oTable); oClass:AddMethod( "ReindexTable", @TDataCenter_ReindexTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Syncronize(); oClass:AddMethod( "Syncronize", @TDataCenter_Syncronize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER syncronizeModels(); oClass:AddMethod( "syncronizeModels", @TDataCenter_syncronizeModels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SeedersSqlToAds(); oClass:AddMethod( "SeedersSqlToAds", @TDataCenter_SeedersSqlToAds(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SeederSqlMovAlm(); oClass:AddMethod( "SeederSqlMovAlm", @TDataCenter_SeederSqlMovAlm(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
         _HB_MEMBER AddSeederMovAlm(); oClass:AddMethod( "AddSeederMovAlm", @TDataCenter_AddSeederMovAlm(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SeederSqlAgenda(); oClass:AddMethod( "SeederSqlAgenda", @TDataCenter_SeederSqlAgenda(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SeederSqlTransportistas(); oClass:AddMethod( "SeederSqlTransportistas", @TDataCenter_SeederSqlTransportistas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
         _HB_MEMBER AddSeederTransportista( hHashHead); oClass:AddMethod( "AddSeederTransportista", @TDataCenter_AddSeederTransportista(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SeederSqlConfiguracionEmpresa(); oClass:AddMethod( "SeederSqlConfiguracionEmpresa", @TDataCenter_SeederSqlConfiguracionEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SeederSqlOdooIds(); oClass:AddMethod( "SeederSqlOdooIds", @TDataCenter_SeederSqlOdooIds(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SeederSqlUsers(); oClass:AddMethod( "SeederSqlUsers", @TDataCenter_SeederSqlUsers(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
         _HB_MEMBER SeederSqlUsuarios(); oClass:AddMethod( "SeederSqlUsuarios", @TDataCenter_SeederSqlUsuarios(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
         _HB_MEMBER SeederSqlRoles(); oClass:AddMethod( "SeederSqlRoles", @TDataCenter_SeederSqlRoles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
         _HB_MEMBER SeederSqlPermisos(); oClass:AddMethod( "SeederSqlPermisos", @TDataCenter_SeederSqlPermisos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
         _HB_MEMBER SeederSqlDetallePermisos(); oClass:AddMethod( "SeederSqlDetallePermisos", @TDataCenter_SeederSqlDetallePermisos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ActualizaDataTable(); oClass:AddInline( "ActualizaDataTable", {|Self, oTable | ( ( Self ) ), ( ::ActualizaTable( oTable, cPatDat() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ActualizaEmpresaTable(); oClass:AddInline( "ActualizaEmpresaTable", {|Self, oTable | ( ( Self ) ), ( ::ActualizaTable( oTable, cPatEmp() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ActualizaTable( oTable, cPath); oClass:AddMethod( "ActualizaTable", @TDataCenter_ActualizaTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ActualizaEmpresa(); oClass:AddMethod( "ActualizaEmpresa", @TDataCenter_ActualizaEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER ScanDataTable(); oClass:AddMethod( "ScanDataTable", @TDataCenter_ScanDataTable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ScanDataTableInView(); oClass:AddMethod( "ScanDataTableInView", @TDataCenter_ScanDataTableInView(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ScanDataArea( cArea); oClass:AddMethod( "ScanDataArea", @TDataCenter_ScanDataArea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ScanDataTmp( cDataTable); oClass:AddMethod( "ScanDataTmp", @TDataCenter_ScanDataTmp(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ScanObject(); oClass:AddMethod( "ScanObject", @TDataCenter_ScanObject(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getIdBlock( cDataTable); oClass:AddMethod( "getIdBlock", @TDataCenter_getIdBlock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDictionary( cDataTable); oClass:AddMethod( "getDictionary", @TDataCenter_getDictionary(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDictionaryFromArea( cArea); oClass:AddMethod( "getDictionaryFromArea", @TDataCenter_getDictionaryFromArea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getDeFaultValue( cDataTable); oClass:AddMethod( "getDeFaultValue", @TDataCenter_getDeFaultValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getIndexFromArea( cArea); oClass:AddMethod( "getIndexFromArea", @TDataCenter_getIndexFromArea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DatosName(); oClass:AddInline( "DatosName", {|Self, cDatabase | ( ( Self ) ), ( upper( cPathDatos() + cDatabase ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER EmpresaName(); oClass:AddInline( "EmpresaName", {|Self, cDatabase | ( ( Self ) ), ( upper( cPathEmpresa() + cDatabase ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER oFacCliT(); oClass:AddMethod( "oFacCliT", @TDataCenter_oFacCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFacCliT( dbf); oClass:AddMethod( "OpenFacCliT", @TDataCenter_OpenFacCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER oFacCliP(); oClass:AddMethod( "oFacCliP", @TDataCenter_oFacCliP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER OpenFacCliP( dbf); oClass:AddMethod( "OpenFacCliP", @TDataCenter_OpenFacCliP(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER oAlbCliT(); oClass:AddMethod( "oAlbCliT", @TDataCenter_oAlbCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER OpenAlbCliT( dbf); oClass:AddMethod( "OpenAlbCliT", @TDataCenter_OpenAlbCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER oPedCliT(); oClass:AddMethod( "oPedCliT", @TDataCenter_oPedCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER OpenPedCliT( dbf); oClass:AddMethod( "OpenPedCliT", @TDataCenter_OpenPedCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER oSatCliT(); oClass:AddMethod( "oSatCliT", @TDataCenter_oSatCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER OpenSatCliT( dbf); oClass:AddMethod( "OpenSatCliT", @TDataCenter_OpenSatCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER oPreCliT(); oClass:AddMethod( "oPreCliT", @TDataCenter_oPreCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER OpenPreCliT( dbf); oClass:AddMethod( "OpenPreCliT", @TDataCenter_OpenPreCliT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER oCnfFlt(); oClass:AddMethod( "oCnfFlt", @TDataCenter_oCnfFlt(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER oProCab(); oClass:AddMethod( "oProCab", @TDataCenter_oProCab(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
       _HB_MEMBER oProLin(); oClass:AddMethod( "oProLin", @TDataCenter_oProLin(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER oCliBnc(); oClass:AddMethod( "oCliBnc", @TDataCenter_oCliBnc(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ConvertEmpresaToSQL(); oClass:AddMethod( "ConvertEmpresaToSQL", @TDataCenter_ConvertEmpresaToSQL(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER MigrateEmpresaToSQL(); oClass:AddMethod( "MigrateEmpresaToSQL", @TDataCenter_MigrateEmpresaToSQL(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER allOptions(); oClass:AddInline( "allOptions", {|Self | ( ( Self ) ), ( ::changeOptions( .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER noneOptions(); oClass:AddInline( "noneOptions", {|Self | ( ( Self ) ), ( ::changeOptions( .F. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER changeOptions( lOption); oClass:AddMethod( "changeOptions", @TDataCenter_changeOptions(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseAllTables(); oClass:AddMethod( "CloseAllTables", @TDataCenter_CloseAllTables(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDataCenter ;



static FUNCTION TDataCenter_CheckData( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if lAIS()
      aeval( ::aDataTables, {|oTable| ::AddTableToDataDictionary( oTable, .T. ) } )
   end

RETURN ( Self )



static FUNCTION TDataCenter_CheckEmpresa( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if lAIS()
      aeval( ::aEmpresaTables, {|oTable| ::AddTableToDataDictionary( oTable, .T. ) } )
   end

RETURN ( Self )



static FUNCTION TDataCenter_CloseAllTables( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   aEval( ::aDataTables, {|o| ::CloseArea( o:cArea ) } )
   aEval( ::aEmpresaTables, {|o| logwrite( o:cArea ), ::CloseArea( o:cArea ) } )



Return ( nil )



static FUNCTION TDataCenter_oFacCliP( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cFilter
   local oFacCliP

   oFacCliP := DbfServer( "FacCliP.Dbf", ):NewOpen( "FacCliP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; oFacCliP:AddBag( "FacCliP.Cdx" ) ; oFacCliP:AddBag( ) ; oFacCliP:AutoIndex()

RETURN ( oFacCliP )



static FUNCTION TDataCenter_OpenFacCliP( dbf ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cFilter

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliP.Dbf" ), ( cCheckArea( "FACCLIP", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliP.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

RETURN ( !neterr() )



static FUNCTION TDataCenter_oAlbCliT( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cFilter
   local oAlbCliT

   oAlbCliT := DbfServer( "AlbCliT.Dbf", ):NewOpen( "AlbCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; oAlbCliT:AddBag( "AlbCliT.Cdx" ) ; oAlbCliT:AddBag( ) ; oAlbCliT:AutoIndex()

RETURN ( oAlbCliT )



static FUNCTION TDataCenter_OpenAlbCliT( dbf ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cFilter

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbCliT.Dbf" ), ( cCheckArea( "AlbCliT", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

RETURN ( !neterr() )



static FUNCTION TDataCenter_oPedCliT( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cFilter
   local oPedCliT

   oPedCliT := DbfServer( "PedCliT.Dbf", ):NewOpen( "PedCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; oPedCliT:AddBag( "PedCliT.Cdx" ) ; oPedCliT:AddBag( ) ; oPedCliT:AutoIndex()

RETURN ( oPedCliT )



static FUNCTION TDataCenter_OpenPedCliT( dbf ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

    dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.Dbf" ), ( cCheckArea( "PedCliT", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
    if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

RETURN ( !neterr() )



static FUNCTION TDataCenter_oSatCliT( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

    local cFilter
    local oSatCliT

    oSatCliT := DbfServer( "SatCliT.Dbf", ):NewOpen( "SatCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; oSatCliT:AddBag( "SatCliT.Cdx" ) ; oSatCliT:AddBag( ) ; oSatCliT:AutoIndex()












RETURN ( oSatCliT )



static FUNCTION TDataCenter_OpenSatCliT( dbf ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

      local lOpen
      local cFilter

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "SatCliT.Dbf" ), ( cCheckArea( "SatCliT", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "SatCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      lOpen             := !neterr()
      if lOpen
















      end

      RETURN ( lOpen )



static FUNCTION TDataCenter_oPreCliT( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

    local cFilter
    local oPreCliT

    oPreCliT := DbfServer( "PreCliT.Dbf", ):NewOpen( "PreCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; oPreCliT:AddBag( "PreCliT.Cdx" ) ; oPreCliT:AddBag( ) ; oPreCliT:AutoIndex()












RETURN ( oPreCliT )



static FUNCTION TDataCenter_OpenPreCliT( dbf ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

    local lOpen
    local cFilter

    dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PreCliT.Dbf" ), ( cCheckArea( "PreCliT", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
    if !lAIS() ; ordListAdd( ( cPatEmp() + "PreCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

    lOpen             := !neterr()
    if lOpen
















    end

RETURN ( lOpen )



static FUNCTION TDataCenter_oCnfFlt( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

    local oCnfFlt

    oCnfFlt := DbfServer( "CnfFlt.Dbf", ):NewOpen( "CnfFlt.Dbf",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; oCnfFlt:AddBag( "CnfFlt.Cdx" ) ; oCnfFlt:AddBag( ) ; oCnfFlt:AutoIndex()

RETURN ( oCnfFlt )



static FUNCTION TDataCenter_oProCab( cPath, cDriver ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

    local cFilter
    local oProCab

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

    oProCab := DbfServer( "ProCab.Dbf", ):NewOpen( "ProCab.Dbf",, ( cDriver ),, ( cPath ), .F., .T., .F., .F. ) ; oProCab:AddBag( "ProCab.Cdx" ) ; oProCab:AddBag( ) ; oProCab:AutoIndex()

     if lAIS() .AND. !oUser():lAdministrador()

        cFilter     := "Field->cSufOrd == '" + Application():CodigoDelegacion()

        ( oProCab:cAlias )->( AdsSetAOF( cFilter ) )

     end

RETURN ( oProCab )



static FUNCTION TDataCenter_oProLin( cPath, cDriver ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

    local cFilter
    local oProLin

    If( cPath == nil, cPath := cPatEmp(), ) ;
    If( cDriver == nil, cDriver := cDriver(), ) ;

    oProLin := DbfServer( "ProLin.Dbf", ):NewOpen( "ProLin.Dbf",, ( cDriver ),, ( cPath ), .F., .T., .F., .F. ) ; oProLin:AddBag( "ProLin.Cdx" ) ; oProLin:AddBag( ) ; oProLin:AutoIndex()

    if lAIS() .AND. !oUser():lAdministrador()

        cFilter     := "Field->cSufOrd == '" + Application():CodigoDelegacion()

        ( oProLin:cAlias )->( AdsSetAOF( cFilter ) )

    end

RETURN ( oProLin )



static FUNCTION TDataCenter_oCliBnc( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

     local oCliBnc

     oCliBnc := DbfServer( "CliBnc.Dbf", ):NewOpen( "CliBnc.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; oCliBnc:AddBag( "CliBnc.Cdx" ) ; oCliBnc:AddBag( ) ; oCliBnc:AutoIndex()

RETURN ( oCliBnc )



static FUNCTION TDataCenter_oFacCliT( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cFilter
   local oFacCliT

   oFacCliT := DbfServer( "FacCliT.Dbf", ):NewOpen( "FacCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; oFacCliT:AddBag( "FacCliT.Cdx" ) ; oFacCliT:AddBag( ) ; oFacCliT:AutoIndex()

      if lAIS() .AND. !oUser():lAdministrador()

         cFilter     := "Field->cSufFac == '" + Application():CodigoDelegacion() + "' .and. Field->cCodCaj == '" + Application():CodigoCaja() + "'"
         if RolesModel():getRolFiltrarVentas( Auth():rolUuid() )
            cFilter  += " .and. Field->cCodUsr == '" + Auth():Codigo()  + "'"
         end

         ( oFacCliT:cAlias )->( AdsSetAOF( cFilter ) )

      end

RETURN ( oFacCliT )



static FUNCTION TDataCenter_OpenFacCliT( dbf ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local lOpen
   local cFilter

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliT.Dbf" ), ( cCheckArea( "FacCliT", @dbf ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   lOpen             := !neterr()
   if lOpen



      if lAIS() .AND. !oUser():lAdministrador()

         cFilter     := "Field->cSufFac == '" + Application():CodigoDelegacion() + "' .and. Field->cCodCaj == '" + Application():CodigoCaja() + "'"
         if RolesModel():getRolFiltrarVentas( Auth():rolUuid() )
            cFilter  += " .and. Field->cCodUsr == '" + Auth():Codigo()  + "'"
         end

         ( dbf )->( AdsSetAOF( cFilter ) )

      end

   end

RETURN ( lOpen )



static FUNCTION TDataCenter_CreateTemporalTable( oTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oError
   local oBlock

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !Empty( oTable:bCreateFile )
         Eval( oTable:bCreateFile, cEmpTmp() )
      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error creando tabla temporal." )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TDataCenter_lAdministratorTask( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   dbcloseall()

   TstEmpresa()

   TstDivisas()

   TstCajas()

   ::configDatabaseCDXLocal()

   ::loadEmpresas()

   ::dialogEmpresas()

RETURN ( Self )



static FUNCTION TDataCenter_configDatabaseCDXLocal( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   setIndexToCdx()

RETURN ( Self )



static FUNCTION TDataCenter_loadEmpresas( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local dbfEmp

   ::aEmpresas       := {}

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Empresa.Dbf" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )

   ( dbfEmp )->( dbgotop() )

   while !( dbfEmp )->( eof() )

      if !( dbfEmp )->lGrupo

         aAdd( ::aEmpresas, { ( dbfEmp )->CodEmp, ( dbfEmp )->cNombre, ( dbfEmp )->lGrupo, .F., .F., .T. } )

      end
      ( dbfEmp )->( dbskip() )
   end

   ( dbfEmp )->( dbclosearea() )

RETURN ( Self )



static FUNCTION TDataCenter_dialogEmpresas( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if Empty( ::aEmpresas )
      msgStop( "No hay empresas que procesar" )
      RETURN ( self )
   end


   ::oDlg = TDialog():New(,,,, "Creación de diccionario de datos para " + ::getDataDictionaryFile(), "AdsAdmin",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )

   ::oBrwEmpresas                         := TXBrowse():New( ::oDlg )

   ::oBrwEmpresas:lRecordSelector         := .T.
   ::oBrwEmpresas:lTransparent            := .F.
   ::oBrwEmpresas:nDataLines              := 1

   ::oBrwEmpresas:nMarqueeStyle           := 5

   ::oBrwEmpresas:bClrSel                 := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }
   ::oBrwEmpresas:bClrSelFocus            := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }

   ::oBrwEmpresas:CreateFromResource( 100 )

   ::oBrwEmpresas:SetArray( ::aEmpresas, , , .F. )

   ::oBrwEmpresas:bLDblClick              := {|| ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 6 ] := !::aEmpresas[ ::oBrwEmpresas:nArrayAt, 6 ], ::oBrwEmpresas:Refresh() }

   with object ( ::oBrwEmpresas:AddCol() )
      :cHeader          := "Sl. Seleccionada"
      :bStrData         := {|| "" }
      :nWidth           := 20
      :bEditValue       := {|| ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 6 ] }
      :bLClickHeader    := {|| aeval( ::aEmpresas, {|a| a[6] := !a[6] } ), ::oBrwEmpresas:Refresh() }
      :SetCheck( { "gc_check_12", "gc_delete_12" } )
   end

   with object ( ::oBrwEmpresas:AddCol() )
      :cHeader          := "Ac. Actualizada"
      :bStrData         := {|| "" }
      :nWidth           := 20
      :bEditValue       := {|| ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 4 ] }
      :SetCheck( { "gc_check_12", "gc_delete_12" } )
   end

   with object ( ::oBrwEmpresas:AddCol() )
      :cHeader          := "Pr. Procesada"
      :bStrData         := {|| "" }
      :nWidth           := 20
      :bEditValue       := {|| ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 5 ] }
      :SetCheck( { "gc_check_12", "gc_delete_12" } )
   end

   with object ( ::oBrwEmpresas:AddCol() )
      :cHeader          := "Código"
      :nWidth           := 40
      :bEditValue       := {|| if( ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 3 ], "<" + Rtrim( ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 1 ] ) + ">", ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 1 ] ) }
   end

   with object ( ::oBrwEmpresas:AddCol() )
      :cHeader          := "Empresa"
      :nWidth           := 340
      :bEditValue       := {|| if( ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 3 ], "<" + Rtrim( ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 2 ] ) + ">", ::aEmpresas[ ::oBrwEmpresas:nArrayAt, 2 ] ) }
   end




   ::oMsg := TSay():ReDefine( 400, {||            ::cMsg}, ::oDlg,,,, .F.,, .F., .F., )

   ::oMtrActualiza      := TApoloMeter():ReDefine( 500, { | u | if( pCount() == 0, ::nMtrActualiza, ::nMtrActualiza := u ) }, 10, ::oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )

   ::oMtrDiccionario    := TApoloMeter():ReDefine( 510, { | u | if( pCount() == 0, ::nMtrDiccionario, ::nMtrDiccionario := u ) }, 10, ::oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )



   TCheckBox():ReDefine( 600, { | u | If( PCount()==0, ::lActualizaBaseDatos, ::lActualizaBaseDatos:= u ) }, ::oDlg,,,,,,, .F.,, .F. )




   TButton():ReDefine( 200, {||( ::syncronizeModels() )}, ::oDlg,,, .F.,,,, .F. )




   ::oBtnOk := TButton():ReDefine( 1, {||( ::StartAdministratorTask() )}, ::oDlg,,, .F.,,,, .F. )




   ::oBntCancel := TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .F. )

   ::oDlg:AddFastKey( 116, {|| ::StartAdministratorTask() } )

   ::oDlg:Activate( , , , .T., {|| ::lValidDlg } )

RETURN ( Self )



static FUNCTION TDataCenter_StartAdministratorTask( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aEmpresa

   ::lValidDlg       := .F.

   ::oBtnOk:Disable()
   ::oBntCancel:Disable()

   ::oMsg:SetText( "Iniciando proceso..." )

   if !empty( ::oMtrActualiza )
       ::oMtrActualiza:SetTotal( len( ::aEmpresas ) )
   end

   if !empty( ::oMtrDiccionario )
       ::oMtrDiccionario:SetTotal( 5 )
    end



   if ::lActualizaBaseDatos

      ::oBrwEmpresas:GoTop()

      for each aEmpresa in ::aEmpresas

         if aEmpresa[ 6 ]

            ::oMsg:SetText( "Actualizando empresa " + Rtrim( aEmpresa[ 1 ] ) + " - " + Rtrim( aEmpresa[ 2 ] ) )

            if !empty( ::oMtrActualiza )
                ::oMtrActualiza:Set( hb_EnumIndex() )
            end

            selectEmpresa( aEmpresa[ 1 ] )

            lActualiza( aEmpresa[ 1 ], nil, .T., aEmpresa[ 2 ], .F. )

            aEmpresa[ 4 ]      := .T.

            ::ConvertEmpresaToSQL()

         end

         ::oBrwEmpresas:GoDown()
         ::oBrwEmpresas:Refresh()

      next

   end

   if !empty(::oMtrDiccionario)
       ::oMtrDiccionario:Set( 1 )
   end



   SetIndexToADS()

   ::oMsg:SetText( "Comprobamos la existencia de la base de datos" )

   ::CreateDataDictionary()

   ::oMsg:SetText( "Intentando conectar con la base de datos" )

   if ::ConnectDataDictionary()

      ::oMsg:SetText( "Eliminando tablas anteriores de diccionario de datos" )

      ::deleteAllTableFromDataDictionary()

      ::oMsg:SetText( "Creando árbol de tablas de datos generales" )

      ::BuildData()

      ::CreateDataTable()



      ::oBrwEmpresas:GoTop()

      for each aEmpresa in ::aEmpresas

         if aEmpresa[ 6 ]

            ::oMsg:SetText( "Creando diccionario de empresa " + Rtrim( aEmpresa[ 1 ] ) + " - " + Rtrim( aEmpresa[ 2 ] ) )

            if !empty( ::oMtrActualiza )
                ::oMtrActualiza:set( hb_enumindex() )
            end

            setEmpresa( aEmpresa[ 1 ], , .T. )

            ::BuildEmpresa()

            ::addEmpresaTablesToDataDictionary()

            ::Reindex()

            ::MigrateEmpresaToSQL()

            aEmpresa[ 5 ]   := .T.

         end

         ::oBrwEmpresas:GoDown()
         ::oBrwEmpresas:Refresh()

      next

      if !empty(::oMtrDiccionario)
             ::oMtrDiccionario:Set( 2 )
         end

      if !empty(::oMtrDiccionario)
          ::oMtrDiccionario:Set( 3 )
       end



      ::oMsg:SetText( "Creando triggers de datos" )

      ::CreateDataTrigger()

      if !empty(::oMtrDiccionario)
          ::oMtrDiccionario:Set( 4 )
       end



      ::oMsg:SetText( "Creando triggers de empresa" )

      ::CreateEmpresaTrigger()

      if !empty(::oMtrDiccionario)
          ::oMtrDiccionario:Set( 5 )
       end

   end



   ::lValidDlg       := .T.

   MsgInfo( "Proceso finalizado con exito" )

   ::oDlg:End()

RETURN ( Self )



static FUNCTION TDataCenter_syncronizeModels( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   ::oDlg:End()

RETURN ( Self )



static FUNCTION TDataCenter_CreateDataDictionary( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if file( ::getDataDictionaryFile() )
      RETURN ( Self )
   end

   if msgYesNo( "La base de datos " + ::getDataDictionaryFile() + " no existe, ¿desea crearla?")

      AdsDDCreate( ::getDataDictionaryFile(), , ::cDataDictionaryComment )


      AdsDDSetDatabaseProperty( 107, .T. )

   end

RETURN ( Self )



static FUNCTION TDataCenter_ConnectDataDictionary( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cError

   ::lAdsConnection     := AdsConnect60( ::getDataDictionaryConnection(), nAdsServer(), "ADSSYS", "", , @::hAdsConnection )

   if !::lAdsConnection

      adsGetLastError( @cError )

      msgStop( cError, "Error connect data dictionary " + ::getDataDictionaryConnection() )

   end

RETURN ( ::lAdsConnection )



static FUNCTION TDataCenter_CreateDataUser( oDataUser ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if !Empty( oDataUser:cName ) .AND. !Empty( oDataUser:cPassword )
      AdsDDCreateUser( , oDataUser:cName, oDataUser:cPassword, oDataUser:cComment )
   end

RETURN ( Self )



static FUNCTION TDataCenter_CreateDataTable( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   for each oTable in ::aDataTables
      ::AddTableToDataDictionary( oTable )
   next

   ::ReLoadTables()

RETURN ( Self )



static FUNCTION TDataCenter_ScanDataTableInView( cDataTable, nView ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oDataTable  := ::ScanDataTable( cDataTable )

   if !empty( oDataTable )
      oDataTable:setAlias( D():get( cDataTable, nView ) )
   end

RETURN ( oDataTable )



static FUNCTION TDataCenter_ScanDataTable( cDataTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local nScan
   local cDataName

   cDataTable        := cNoBrackets( cDataTable )

   cDataName         := ::DatosName( cDataTable )

   nScan             := aScan( ::aDataTables, {|o| o:getName() == cDataName } )
   if nScan <> 0
      RETURN ( ::aDataTables[ nScan ] )
   end

   cDataName         := ::EmpresaName( cDataTable )

   nScan             := aScan( ::aEmpresaTables, {|o| o:getName() == cDataName } )
   if nScan <> 0
      RETURN ( ::aEmpresaTables[ nScan ] )
   end

RETURN ( nil )



static FUNCTION TDataCenter_ScanDataArea( cArea ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local nScan

   nScan       := aScan( ::aDataTables, {|o| o:cArea == cArea } )
   if nScan <> 0
      RETURN ( ::aDataTables[ nScan ] )
   end

   if nScan == 0
      nScan    := aScan( ::aEmpresaTables, {|o| o:cArea == cArea } )
      if nScan <> 0
         RETURN ( ::aEmpresaTables[ nScan ] )
      end
   end

RETURN ( nil )



static FUNCTION TDataCenter_ScanDataTmp( cDataTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local nScan

   nScan    := aScan( ::aDataTmp, {|o| o:cFileName() == ::DatosName( cDataTable ) } )
   if nScan <> 0
      RETURN ( ::aDataTmp[ nScan ] )
   end

RETURN ( nil )



static FUNCTION TDataCenter_getIdBlock( cDataTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local bId
   local oTable

   oTable         := ::ScanDataTable( cDataTable )
   if !empty( oTable )
      bId         := oTable:bId
   end

RETURN ( bId )



static FUNCTION TDataCenter_getDictionary( cDataTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aDictionary
   local oTable

   oTable            := ::ScanDataTable( cDataTable )
   if !empty( oTable )
      aDictionary    := oTable:aDictionary
   end

RETURN ( aDictionary )



static FUNCTION TDataCenter_getDictionaryFromArea( cArea ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable
   local aDictionary

   oTable            := ::ScanDataArea( cArea )
   if !empty( oTable )
      aDictionary    := oTable:aDictionary
   end

RETURN ( aDictionary )



static FUNCTION TDataCenter_getIndexFromArea( cArea ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable
   local hIndex

   oTable            := ::ScanDataArea( cArea )
   if !empty( oTable )
      hIndex         := oTable:hIndex
   end

RETURN ( hIndex )



static FUNCTION TDataCenter_getDeFaultValue( cDataTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable
   local aDefaultValue

   oTable            := ::ScanDataTable( cDataTable )
   if !empty( oTable )
      aDefaultValue  := oTable:aDefaultValue
   end

RETURN ( aDefaultValue )



static FUNCTION TDataCenter_ScanObject( cName ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local nScan

   nScan    := aScan( ::aEmpresaObject, {|o| __objHasData( o, "CNAME" ) .AND. o:cName == cName } )
   if nScan <> 0
      RETURN ( ::aEmpresaObject[ nScan ] )
   end

RETURN ( nil )



static FUNCTION TDataCenter_CreateDataTrigger( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   if !empty( ::oMtrActualiza )
       ::oMtrActualiza:SetTotal( len( ::aDataTables ) )
   end

   for each oTable in ::aDataTables

      if !empty( ::oMtrActualiza )
          ::oMtrActualiza:Set( hb_EnumIndex() )
      end

      if oTable:lTrigger
         ::AddTrigger( oTable )
      end

   next

RETURN ( Self )



static FUNCTION TDataCenter_addEmpresaTablesToDataDictionary( lSilent ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   for each oTable in ::aEmpresaTables
      ::addTableToDataDictionary( oTable, lSilent )
   next

   ::ReLoadTables()

RETURN ( Self )



static FUNCTION TDataCenter_deleteEmpresaTablesFromDataDictionary( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   for each oTable in ::aEmpresaTables
      ::deleteTableFromDataDictionary( oTable )
   next

RETURN ( Self )



static FUNCTION TDataCenter_CreateEmpresaTrigger( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   if !empty( ::oMtrActualiza )
       ::oMtrActualiza:SetTotal( len( ::aEmpresaTables ) )
   end

   for each oTable in ::aEmpresaTables

       if !empty( ::oMtrActualiza )
          ::oMtrActualiza:Set( hb_EnumIndex() )
       end

      if oTable:lTrigger
         ::AddTrigger( oTable )
      end

   next

RETURN ( Self )



static FUNCTION TDataCenter_isTableInDataDictionary( uTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cTable
   local lExistTable := .F.

   do case
      case IsObject( uTable )
         cTable      := Upper( uTable:cName )
      case IsChar( uTable )
         cTable      := Upper( uTable )
   end

   if Empty( ::aDDTables )
      ::aDDTables    := AdsDirectory()
   end

   lExistTable       := aScan( ::aDDTables, {|c| Left( Upper( c ), len( c ) - 1 ) == cTable } ) <> 0

RETURN ( lExistTable )



static FUNCTION TDataCenter_deleteTableFromDataDictionary( oTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local nScan

   nScan             := aScan( ::aDDTables, oTable:cName )
   if nScan <> 0
      hb_ADel( ::aDDTables, nScan, .T. )
   end

RETURN ( AdsDDRemoveTable( Upper( oTable:cName ) ) )



static FUNCTION TDataCenter_deleteTableNameFromDataDictionary( cTableName ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   oTable         := ::ScanDataTable( cTableName )

   if !empty( oTable )
      RETURN ::deleteTableFromDataDictionary( oTable )
   end

RETURN ( .F. )



static FUNCTION TDataCenter_deleteAllTableFromDataDictionary( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if Empty( ::aDDTables )
      ::aDDTables    := AdsDirectory()
   end

   aEval( ::aDDTables, {|c| AdsDDRemoveTable( Left( Upper( c ), len( c ) - 1 ) ) } )

   ::ReLoadTables()

RETURN ( Self )



static FUNCTION TDataCenter_isTriggerInDataDictionary( oTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cTrigger

   if !isObject( oTable )
      RETURN ( .F. )
   end

   if Empty( ::aDDTriggers )
      ::aDDTriggers  := ADSSelectSQLScript( "SELECT name FROM system.triggers" )
   end

RETURN ( aScan( ::aDDTriggers, {|c| Upper( Alltrim( oTable:cName ) ) $ Upper( Alltrim( c ) ) } ) <> 0 )



static FUNCTION TDataCenter_CreateTriggerUpdate( oTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local nError
   local cTrigger
   local lTrigger
   local cErrorAds

   if !isObject( oTable )
      RETURN ( .F. )
   end

   cTrigger          := ""
   cTrigger          += 'CREATE TRIGGER "Update' + ( Alltrim( oTable:cName ) ) + '" ON "' + ( Alltrim( oTable:cName ) ) + '" AFTER UPDATE' + Chr(13)+Chr(10)

   cTrigger          += "BEGIN" + Chr(13)+Chr(10)

   cTrigger          += "DECLARE @id Integer;" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @co CURSOR AS SELECT * FROM __OLD;" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @cn CURSOR AS SELECT * FROM __NEW;" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @userName NCHAR(50);" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @appName NCHAR(50);" + Chr(13)+Chr(10)

   cTrigger          += "@userName = USER();" + Chr(13)+Chr(10)
   cTrigger          += "@appName = APPLICATIONID();" + Chr(13)+Chr(10)

   cTrigger          += "OPEN @co;" + Chr(13)+Chr(10)
   cTrigger          += "OPEN @cn;" + Chr(13)+Chr(10)

   cTrigger          += "TRY" + Chr(13)+Chr(10)

   cTrigger          += "FETCH @co;" + Chr(13)+Chr(10)
   cTrigger          += "FETCH @cn;" + Chr(13)+Chr(10)

   cTrigger          += "INSERT INTO SqlOperationLog ( DATETIME, USERNAME, APPNAME, TABLENAME, OPERATION )" + Chr(13)+Chr(10)
   cTrigger          += "VALUES ( Now(), @userName, @appName, " + "'" + ( Alltrim( oTable:cName ) ) + "'" + ", 'UPDATE'" + " );" + Chr(13)+Chr(10)

   cTrigger          += "@id = LASTAUTOINC(STATEMENT);" + Chr(13)+Chr(10)

   ::CreateColumnTriggerUpdate( oTable, @cTrigger )

   cTrigger          += "FINALLY" + Chr(13)+Chr(10)

   cTrigger          += "CLOSE @co;" + Chr(13)+Chr(10)
   cTrigger          += "CLOSE @cn;" + Chr(13)+Chr(10)

   cTrigger          += "END TRY;" + Chr(13)+Chr(10)

   cTrigger          += "END NO MEMOS PRIORITY 1;" + Chr(13)+Chr(10)

   ::ExecuteSqlStatement( cTrigger, Alltrim( oTable:cName ) )

RETURN ( Self )



static FUNCTION TDataCenter_CreateColumnTriggerUpdate( oTable, cTrigger ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local n
   local oError
   local oBlock

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., cDriver(), oTable:cName, "Table" )

   for n := 1 to Table->( fCount() )

      if ( n < 100 ) .AND. ( Table->( fieldType( n ) ) <> "M" )
         cTrigger += 'IF ( @co."' + Table->( FieldName( n ) ) + '" <> @cn."' + Table->( FieldName( n ) ) + '" )' + Chr(13)+Chr(10)
         cTrigger +=  "THEN" + Chr(13)+Chr(10)
         cTrigger += "INSERT INTO SqlColumnLog ( OPERATIONID, COLUMNNAME, USERNAME, APPNAME, TABLENAME, OLDVALUE, NEWVALUE )" + Chr(13)+Chr(10)
         cTrigger += "VALUES ( @id, " + "'" + Table->( FieldName( n ) ) + "'" + ", @userName, @appName, " + "'" + Alltrim( oTable:cName ) + "'" + ", cast( @co." + '"' + Table->( FieldName( n ) ) + '"' + " as sql_varchar ), " + "cast( @cn." + '"' + Table->( FieldName( n ) ) + '"' + " as sql_varchar ) );" + Chr(13)+Chr(10)
         cTrigger += "END IF;" + Chr(13)+Chr(10)
         cTrigger += Chr(13)+Chr(10)
      end

   next

   Table->( dbCloseArea() )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear las columnas del trigger" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TDataCenter_CreateTriggerInsert( oTable, cAction ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cTrigger

   if !isObject( oTable )
      RETURN ( .F. )
   end

   cTrigger          := ""
   cTrigger          += 'CREATE TRIGGER "Insert' + ( Alltrim( oTable:cName ) ) + '" ON "' + ( Alltrim( oTable:cName ) ) + '" AFTER INSERT' + Chr(13)+Chr(10)

   cTrigger          += "BEGIN" + Chr(13)+Chr(10)

   cTrigger          += "DECLARE @id Integer;" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @cn CURSOR AS SELECT * FROM __NEW;" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @userName NCHAR(50);" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @appName NCHAR(50);" + Chr(13)+Chr(10)

   cTrigger          += "@userName = USER();" + Chr(13)+Chr(10)
   cTrigger          += "@appName = APPLICATIONID();" + Chr(13)+Chr(10)

   cTrigger          += "OPEN @cn;" + Chr(13)+Chr(10)

   cTrigger          += "TRY" + Chr(13)+Chr(10)

   cTrigger          += "FETCH @cn;" + Chr(13)+Chr(10)

   cTrigger          += "INSERT INTO SqlOperationLog ( DATETIME, USERNAME, APPNAME, TABLENAME, OPERATION )" + Chr(13)+Chr(10)
   cTrigger          += "VALUES ( Now(), @userName, @appName, " + "'" + ( Alltrim( oTable:cName ) ) + "'" + ", 'INSERT'" + " );" + Chr(13)+Chr(10)

   cTrigger          += "@id = LASTAUTOINC(STATEMENT);" + Chr(13)+Chr(10)

   ::CreateColumnTriggerInsert( oTable, @cTrigger )

   cTrigger          += "FINALLY" + Chr(13)+Chr(10)

   cTrigger          += "CLOSE @cn;" + Chr(13)+Chr(10)

   cTrigger          += "END TRY;" + Chr(13)+Chr(10)

   cTrigger          += "END NO MEMOS PRIORITY 1;" + Chr(13)+Chr(10)

RETURN ( ::ExecuteSqlStatement( cTrigger, Alltrim( oTable:cName ) ) )



static FUNCTION TDataCenter_CreateColumnTriggerInsert( oTable, cTrigger ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local n
   local oError
   local oBlock

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., cDriver(), oTable:cName, "Table" )

   for n := 1 to Table->( fCount() )

      if Table->( FieldType( n ) ) <> "M"

         cTrigger += "INSERT INTO SqlColumnLog ( OPERATIONID, COLUMNNAME, USERNAME, APPNAME, TABLENAME, OLDVALUE, NEWVALUE )" + Chr(13)+Chr(10)
         cTrigger += "VALUES ( @id, " + "'" + Table->( FieldName( n ) ) + "'" + ", @userName, @appName, " + "'" + Alltrim( oTable:cName ) + "'" + ", '', " + "cast( @cn." + '"' + Table->( FieldName( n ) ) + '"' + " as sql_varchar ) );" + Chr(13)+Chr(10)
         cTrigger += Chr(13)+Chr(10)

      end

   next

   Table->( dbCloseArea() )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear las columnas del trigger insert" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TDataCenter_CreateTriggerDelete( oTable, cAction ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cTrigger

   if !isObject( oTable )
      RETURN ( .F. )
   end

   cTrigger          := ""
   cTrigger          += 'CREATE TRIGGER "Delete' + ( Alltrim( oTable:cName ) ) + '" ON "' + ( Alltrim( oTable:cName ) ) + '" AFTER DELETE' + Chr(13)+Chr(10)

   cTrigger          += "BEGIN" + Chr(13)+Chr(10)

   cTrigger          += "DECLARE @id Integer;" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @co CURSOR AS SELECT * FROM __OLD;" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @userName NCHAR(50);" + Chr(13)+Chr(10)
   cTrigger          += "DECLARE @appName NCHAR(50);" + Chr(13)+Chr(10)

   cTrigger          += "@userName = USER();" + Chr(13)+Chr(10)
   cTrigger          += "@appName = APPLICATIONID();" + Chr(13)+Chr(10)

   cTrigger          += "OPEN @co;" + Chr(13)+Chr(10)

   cTrigger          += "TRY" + Chr(13)+Chr(10)

   cTrigger          += "FETCH @co;" + Chr(13)+Chr(10)

   cTrigger          += "INSERT INTO SqlOperationLog ( DATETIME, USERNAME, APPNAME, TABLENAME, OPERATION )" + Chr(13)+Chr(10)
   cTrigger          += "VALUES ( Now(), @userName, @appName, " + "'" + ( Alltrim( oTable:cName ) ) + "'" + ", 'DELETE'" + " );" + Chr(13)+Chr(10)

   cTrigger          += "@id = LASTAUTOINC(STATEMENT);" + Chr(13)+Chr(10)

   ::CreateColumnTriggerDelete( oTable, @cTrigger )

   cTrigger          += "FINALLY" + Chr(13)+Chr(10)

   cTrigger          += "CLOSE @co;" + Chr(13)+Chr(10)

   cTrigger          += "END TRY;" + Chr(13)+Chr(10)

   cTrigger          += "END NO MEMOS PRIORITY 1;" + Chr(13)+Chr(10)


RETURN ( ::ExecuteSqlStatement( cTrigger, Alltrim( oTable:cName ) ) )



static FUNCTION TDataCenter_CreateColumnTriggerDelete( oTable, cTrigger ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local n
   local oError
   local oBlock

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., cDriver(), oTable:cName, "Table" )

   for n := 1 to Table->( fCount() )

      if Table->( FieldType( n ) ) <> "M"

         cTrigger += "INSERT INTO SqlColumnLog ( OPERATIONID, COLUMNNAME, USERNAME, APPNAME, TABLENAME, OLDVALUE, NEWVALUE )" + Chr(13)+Chr(10)
         cTrigger += "VALUES ( @id, " + "'" + Table->( FieldName( n ) ) + "'" + ", @userName, @appName, " + "'" + Alltrim( oTable:cName ) + "'" + ", '', " + "cast( @co." + '"' + Table->( FieldName( n ) ) + '"' + " as sql_varchar ) );" + Chr(13)+Chr(10)
         cTrigger += Chr(13)+Chr(10)

      end

   next

   Table->( dbCloseArea() )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear las columnas del trigger delete" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TDataCenter_CreateAllLocksTablesUsers( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cSql

   ::DeleteAllLocksTablesUsers()

   cSql        := "CREATE PROCEDURE mgGetAllLocksAllTablesAllUsers ( "     + Chr(13)+Chr(10)
   cSql        +=    "TableName CICHAR ( 255 ) OUTPUT, "                   + Chr(13)+Chr(10)
   cSql        +=    "RecNumber INTEGER OUTPUT, "                          + Chr(13)+Chr(10)
   cSql        +=    "UserName CICHAR ( 50 ) OUTPUT, "                     + Chr(13)+Chr(10)
   cSql        +=    "IPAddress CICHAR ( 30 ) OUTPUT, "                    + Chr(13)+Chr(10)
   cSql        +=    "DictionaryUser CICHAR ( 50 ) OUTPUT ) "              + Chr(13)+Chr(10)
   cSql        +=    "BEGIN "                                              + Chr(13)+Chr(10)
   cSql        +=       "DECLARE cTbls CURSOR AS EXECUTE PROCEDURE sp_mgGetAllTables(); " + Chr(13)+Chr(10)
   cSql        +=       "DECLARE cLocks CURSOR; "                          + Chr(13)+Chr(10)
   cSql        +=       "DECLARE cUser CURSOR;  "                          + Chr(13)+Chr(10)
   cSql        +=       " "                                                + Chr(13)+Chr(10)
   cSql        += "OPEN cTbls; "                                           + Chr(13)+Chr(10)
   cSql        +=       " "                                                + Chr(13)+Chr(10)
   cSql        += "WHILE FETCH cTbls DO "                                  + Chr(13)+Chr(10)
   cSql        +=    "OPEN cLocks AS EXECUTE PROCEDURE sp_mgGetAllLocks(cTbls.TableName); " + Chr(13)+Chr(10)
   cSql        +=    "WHILE FETCH cLocks DO "                              + Chr(13)+Chr(10)
   cSql        +=       "OPEN cUser as EXECUTE PROCEDURE sp_mgGetLockOwner(cTbls.TableName, cLocks.LockedRecNo); " + Chr(13)+Chr(10)
   cSql        +=       "WHILE FETCH cUser DO "                            + Chr(13)+Chr(10)
   cSql        +=          "INSERT INTO __output VALUES (cTbls.TableName, cLocks.LockedRecNo, cUser.UserName, cUser.Address, cUser.DictionaryUser); " + Chr(13)+Chr(10)
   cSql        +=       "END WHILE; "                                      + Chr(13)+Chr(10)
   cSql        +=       "CLOSE cUser; "                                    + Chr(13)+Chr(10)
   cSql        +=    "END WHILE; "                                         + Chr(13)+Chr(10)
   cSql        +=    "CLOSE cLocks; "                                      + Chr(13)+Chr(10)
   cSql        += "END WHILE; "                                            + Chr(13)+Chr(10)
   cSql        += "CLOSE cTbls; "                                          + Chr(13)+Chr(10)
   cSql        += "END; "                                                  + Chr(13)+Chr(10)

RETURN ( ::ExecuteSqlStatement( cSql, "Locks" ) )



static FUNCTION TDataCenter_DeleteAllLocksTablesUsers( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

RETURN ( ::ExecuteSqlStatement( "DROP PROCEDURE mgGetAllLocksAllTablesAllUsers;", "Locks" ) )



static FUNCTION TDataCenter_GetAllLocksTablesUsers( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm

   ::CloseAllLocksTablesUsers()





   cStm           := "EXECUTE PROCEDURE mgGetAllLocksAllTablesAllUsers();"

   ::ExecuteSqlStatement( cStm, "AllLocks" )

RETURN ( nil )



static FUNCTION TDataCenter_GetAllTables( ctext ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

  local cStm

  If( cText == nil, cText := "", ) ;





  cStm           := "EXECUTE PROCEDURE sp_mgGetAllTables();"

  ::ExecuteSqlStatement( cStm, "GetAllTables" )

  ( "GetAllTables" )->( browse( cText ) )

RETURN ( nil )



static FUNCTION TDataCenter_addTableToDataDictionary( oTable, lSilent ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cError
   local lAddTable      := .T.

   If( lSilent == nil, lSilent := .F., ) ;

   if !::isTableInDataDictionary( oTable )

      if file( oTable:cDataFile ) .AND. file( oTable:cIndexFile )

         if !AdsDDaddTable( oTable:cName, oTable:cFullAdsDataFile, oTable:cFullAdsIndexFile )

            lAddTable   := .F.



            msgStop( "Descripción de error " + cValToChar( adsGetLastError( @cError ) ) + Chr(13)+Chr(10) +  oTable:Say(), "Error adding table" )

         end

      else

         if !file( oTable:cDataFile )
            if !lSilent
               msgStop( "No existe " + ( oTable:cDataFile ), "Atención", 1 )
            end
         end

         if !file( oTable:cIndexFile )
            if !lSilent
               msgStop( "No existe " + ( oTable:cIndexFile ), "Atención", 1 )
            end
         end

      end

   else

      if !lSilent
         msgStop( "La tabla " + ( oTable:cDataFile ) + " ya existe en el diccionario de datos." )
      end

   end

RETURN ( lAddTable )



static FUNCTION TDataCenter_AddTableName( cTableName ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   oTable         := ::ScanDataTable( cTableName )

   if !empty( oTable )
      RETURN ::AddTableToDataDictionary( oTable )
   end

RETURN ( .F. )



static FUNCTION TDataCenter_AddTrigger( oTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   ::CreateTriggerInsert( oTable )
   ::CreateTriggerUpdate( oTable )
   ::CreateTriggerDelete( oTable )

RETURN ( Self )



static FUNCTION TDataCenter_BuildData( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oDataTable

   ::aDataTables           := {}

   oDataTable              := TDataTable():New( "Empresa", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Empresa.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Empresa.Cdx"
   oDataTable:cDescription := "Empresa"
   oDataTable:bCreateFile  := {| cPath | mkEmpresa( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxEmpresa( cPath ) }
   oDataTable:bSyncFile    := {|| synEmpresa( cPathDatos() ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Delega", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Delega.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Delega.Cdx"
   oDataTable:cDescription := "Delegaciones"
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "ConfEmp", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "ConfEmp.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "ConfEmp.Cdx"
   oDataTable:cDescription := "Configuraciones de empresas"
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "USUARIOS", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "USUARIOS.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "USUARIOS.Cdx"
   oDataTable:cDescription := "USUARIOS"
   oDataTable:bCreateFile  := {| cPath | TUsuarios():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "ROLES", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "ROLES.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "ROLES.Cdx"
   oDataTable:cDescription := "ROLES"
   oDataTable:bCreateFile  := {| cPath | TRoles():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "PERMISOS", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "PERMISOS.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "PERMISOS.Cdx"
   oDataTable:cDescription := "PERMISOS"
   oDataTable:bCreateFile  := {| cPath | TPermisos():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "DETPERMISOS", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "DETPERMISOS.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "DETPERMISOS.Cdx"
   oDataTable:cDescription := "DETPERMISOS"
   oDataTable:bCreateFile  := {| cPath | TDetPermisos():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "ASISTENCIA", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "ASISTENCIA.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "ASISTENCIA.Cdx"
   oDataTable:cDescription := "ASISTENCIA"
   oDataTable:bCreateFile  := {| cPath | TAsistencias():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Cajas", cPathDatos() )
   oDatatable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatDat( .T. ) + "Cajas.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Cajas.Cdx"
   oDataTable:cDescription := "Cajas"
   oDataTable:aStruct      := aItmCaja()
   oDataTable:bCreateFile  := {| cPath | mkCajas( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxCajas( cPath ) }
   oDataTable:bSyncFile    := {|| synCajas( cPathDatos() ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "CajL", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "CajL.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "CajL.Cdx"
   oDataTable:cDescription := "Lineas de cajas"
   oDataTable:aStruct      := aItmCajaL()
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "ImpTik", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "ImpTik.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "ImpTik.Cdx"
   oDataTable:cDescription := "Balanzas"
   oDataTable:bCreateFile  := {| cPath | mkImpTik( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxImpTik( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Visor", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Visor.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Visor.Cdx"
   oDataTable:cDescription := "Visores"
   oDataTable:bCreateFile  := {| cPath | mkVisor( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxVisor( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "CajPorta", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "CajPorta.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "CajPorta.Cdx"
   oDataTable:cDescription := "Cajón portamonedas"
   oDataTable:bCreateFile  := {| cPath | mkCajPorta( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxCajPorta( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "TipImp", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "TipImp.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "TipImp.Cdx"
   oDataTable:cDescription := "Tipo de impresoras"
   oDataTable:bCreateFile  := {| cPath | mkTipImp( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxTipImp( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Agenda", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Agenda.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Agenda.Cdx"
   oDataTable:cDescription := "Agenda"
   oDataTable:bCreateFile  := {| cPath | TAgenda():BuildFiles( cPath ) }
   oDataTable:bCreateIndex := {| cPath | TAgenda():Create( cPath ):Reindexa() }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "AgendaUsr", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "AgendaUsr.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "AgendaUsr.Cdx"
   oDataTable:cDescription := "Agenda"
   oDataTable:bCreateFile  := {| cPath | TNotas():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Divisas", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Divisas.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Divisas.Cdx"
   oDataTable:cDescription := "Divisas"
   oDataTable:bCreateFile  := {| cPath | mkDiv( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxDiv( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "TIva", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "TIva.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "TIva.Cdx"
   oDataTable:cDescription := "Tipos de impuestos"
   oDataTable:bCreateFile  := {| cPath | mkTIva( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxTIva( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "UsrBtnBar", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "UsrBtnBar.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "UsrBtnBar.Cdx"
   oDataTable:cDescription := "Barra favoritos"
   oDataTable:bCreateFile  := {| cPath | TAcceso():MakeDatabase( cPath ) }
   oDataTable:bCreateIndex := {| cPath | TAcceso():ReindexDatabase( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Captura", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Captura.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Captura.Cdx"
   oDataTable:cDescription := "Capturas T.P.V."
   oDataTable:bCreateFile  := {| cPath | TCaptura():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "CapturaCampos", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "CapturaCampos.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "CapturaCampos.Cdx"
   oDataTable:cDescription := "Capturas T.P.V."
   oDataTable:bCreateFile  := {| cPath | TDetCaptura():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "CnfFlt", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "CnfFlt.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "CnfFlt.Cdx"
   oDataTable:cDescription := "Configuración filtros"
   oDataTable:bCreateFile  := {| cPath | TFilterDatabase():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "CodPostal", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "CodPostal.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "CodPostal.Cdx"
   oDataTable:cDescription := "Código postal"
   oDataTable:bCreateFile  := {| cPath | CodigosPostales():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Provincia", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Provincia.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Provincia.Cdx"
   oDataTable:cDescription := "Provincia"
   oDataTable:bCreateFile  := {| cPath | Provincias():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Pais", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Pais.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Pais.Cdx"
   oDataTable:cDescription := "Paises"
   oDataTable:bCreateFile  := {| cPath | TPais():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "OdooIds", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "ODOOIDS.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "ODOOIDS.Cdx"
   oDataTable:cDescription := "ODOOIDS"
   oDataTable:bCreateFile  := {| cPath | TOdooIds():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Backup", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Backup.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Backup.Cdx"
   oDataTable:bCreateFile  := {| cPath | TBackup():BuildFiles( cPath ) }
   oDataTable:cDescription := "Copias de seguridad"
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "CCoste", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "CCoste.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "CCoste.Cdx"
   oDataTable:bSyncFile    := {|| SynCentroCoste() }
   oDataTable:cDescription := "Centro de coste"
   oDataTable:bCreateFile  := {| cPath | TCentroCoste():BuildFiles( cPath ) }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Lenguaje", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Lenguaje.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Lenguaje.Cdx"
   oDataTable:cDescription := "Lenguajes"
   oDataTable:bCreateFile  := {| cPath | TLenguaje():BuildFiles( cPath ) }
   oDataTable:bSyncFile    := {|| TLenguaje():Create():Syncronize() }
   oDataTable:bCreateIndex := {| cPath | TLenguaje():Create( cPath ):Reindexa() }
   ::AddDataTable( oDataTable )

   oDataTable              := TDataTable():New( "Situa", cPathDatos() )
   oDataTable:cDataFile    := cPatDat( .T. ) + "Situa.Dbf"
   oDataTable:cIndexFile   := cPatDat( .T. ) + "Situa.Cdx"
   oDataTable:cDescription := "Situaciones"
   oDataTable:bCreateFile  := {| cPath | mkSitua( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxSitua( cPath ) }
   ::AddDataTable( oDataTable )

RETURN ( Self )



static FUNCTION TDataCenter_BuildEmpresa( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oDataTable

   ::aEmpresaTables        := {}

   oDataTable              := TDataTable():New( "NCount" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "NCount.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "NCount.Cdx"
   oDataTable:cDescription := "Contadores"
   oDataTable:aStruct      := aItmCount()
   oDataTable:bCreateFile  := {| cPath | mkCount( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxCount( cPath ) }
   oDataTable:bSyncFile    := {| cPath | synCount( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "EntSal" )
   oDatatable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "EntSal.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "EntSal.Cdx"
   oDataTable:cDescription := "Entradas y salidas"
   oDataTable:bCreateFile  := {| cPath | mkEntSal( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxEntSal( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "LogPorta" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "LogPorta.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "LogPorta.Cdx"
   oDataTable:cDescription := "Entradas y salidas"
   oDataTable:bCreateFile  := {| cPath | mkLogPorta( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxLogPorta( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Almacen" )
   oDatatable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Almacen.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Almacen.Cdx"
   oDataTable:cDescription := "Almacenes"
   oDataTable:bCreateFile  := {| cPath | mkAlmacen( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxAlmacen( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlmacenL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlmacenL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlmacenL.Cdx"
   oDataTable:cDescription := "Almacenes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FPago" )
   oDatatable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FPago.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FPago.Cdx"
   oDataTable:cDescription := "Formas de pago"
   oDataTable:bCreateFile  := {| cPath | mkFPago( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxFPago( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Invita" )
   oDatatable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Invita.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Invita.Cdx"
   oDataTable:cDescription := "Invitaciones"
   oDataTable:bCreateFile  := {| cPath | TInvitacion():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Catalogo" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Catalogo.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Catalogo.Cdx"
   oDataTable:cDescription := "Catálogos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "UndMed" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "UndMed.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "UndMed.Cdx"
   oDataTable:bSyncFile    := {|| UniMedicion():Create():Syncronize() }
   oDataTable:cDescription := "Unidades de medición"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Bancos" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Bancos.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Bancos.Cdx"
   oDataTable:cDescription := "Bancos"
   oDataTable:bCreateFile  := {| cPath | TBancos():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "EmpBnc" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "EmpBnc.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "EmpBnc.Cdx"
   oDataTable:cDescription := "Cuentas bancos"
   oDataTable:bCreateFile  := {| cPath | TCuentasBancarias():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Turno" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Turno.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Turno.Cdx"
   oDataTable:cDescription := "Sesiones"
   oDataTable:bCreateFile  := {| cPath | TTurno():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TurnoC" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TurnoC.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TurnoC.Cdx"
   oDataTable:cDescription := "Sesiones cajas"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TurnoL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TurnoL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TurnoL.Cdx"
   oDataTable:cDescription := "Lineas cajas"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "NewImp" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "NewImp.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "NewImp.Cdx"
   oDataTable:cDescription := "Impuestos"
   oDataTable:bCreateFile  := {| cPath | TNewImp():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "UbiCat" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "UbiCat.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "UbiCat.Cdx"
   oDataTable:cDescription := "Ubicaciones"
   oDataTable:bCreateFile  := {| cPath | mkUbi( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxUbi( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "UbiCal" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "UbiCal.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "UbiCal.Cdx"
   oDataTable:cDescription := "Ubicaciones calles"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "Auditor" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Auditor.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Auditor.Cdx"
   oDataTable:cDescription := "Auditoría"
   oDataTable:bCreateFile  := {| cPath | TAuditoria():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Articulo" )
   oDatatable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Articulo.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Articulo.Cdx"
   oDataTable:bSyncFile    := {|| SynArt( cPatEmp() ) }
   oDataTable:cDescription := "Artículos"
   oDataTable:bCreateFile  := {| cPath | mkArticulo( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxArticulo( cPath ) }
   oDataTable:bId          := {|| Field->Codigo }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProvArt" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProvArt.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProvArt.Cdx"
   oDataTable:cDescription := "Artículos proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtLeng" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtLeng.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtLeng.Cdx"
   oDataTable:cDescription := "Artículos lenguaje"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtDiv" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtDiv.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtDiv.Cdx"
   oDataTable:cDescription := "Artículos precios por porpiedades"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtKit" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtKit.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtKit.Cdx"
   oDataTable:cDescription := "Artículos escandallos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ParKit" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ParKit.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ParKit.Cdx"
   oDataTable:cDescription := "Bloques escandallos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtAsc" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtAsc.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtAsc.Cdx"
   oDataTable:cDescription := "Asociados de artículos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtCodebar" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtCodebar.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtCodebar.Cdx"
   oDataTable:cDescription := "Artículos codigos de barra"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtLbl" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtLbl.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtLbl.Cdx"
   oDataTable:cDescription := "Artículos etiquetas"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtImg" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtImg.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtImg.Cdx"
   oDataTable:cDescription := "Artículos imagenes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtDoc" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtDoc.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtDoc.Cdx"
   oDataTable:cDescription := "Artículos documentos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ArtAlm" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ArtAlm.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ArtAlm.Cdx"
   oDataTable:bSyncFile    := {|| nil }
   oDataTable:cDescription := "Artículos stock almacenes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Familias" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Familias.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Familias.Cdx"
   oDataTable:bCreateFile  := {| cPath | mkFamilia( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxFamilia( cPath ) }
   oDataTable:cDescription := "Familias"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FamPrv" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FamPrv.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FamPrv.Cdx"
   oDataTable:cDescription := "Familias proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FamLeng" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FamLeng.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FamLeng.Cdx"
   oDataTable:cDescription := "Familias lenguaje"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Temporadas" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Temporadas.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Temporadas.Cdx"
   oDataTable:cDescription := "Temporadas"
   oDataTable:bCreateFile  := {| cPath | mkTemporada( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxTemporada( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Categorias" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Categorias.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Categorias.Cdx"
   oDataTable:cDescription := "Categorias"
   oDataTable:bCreateFile  := {| cPath | mkCategoria( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxCategoria( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "EstadoSat" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "EstadoSat.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "EstadoSat.Cdx"
   oDataTable:cDescription := "EstadoSat"
   oDataTable:bCreateFile  := {| cPath | mkEstadoSat( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxEstadoSat( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TipArt" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TipArt.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TipArt.Cdx"
   oDataTable:cDescription := "Tipos de artículos"
   oDataTable:bCreateFile  := {| cPath | TTipArt():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Fabric" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Fabric.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Fabric.Cdx"
   oDataTable:cDescription := "Fabricantes"
   oDataTable:bCreateFile  := {| cPath | TFabricantes():BuildFiles( cPath ) }
   oDataTable:bSyncFile    := {|| TFabricantes():Create():Syncronize() }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TarPreT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TarPreT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TarPreT.Cdx"
   oDataTable:cDescription := "Tarifas personalizadas"
   oDataTable:bCreateFile  := {| cPath | mkTarifa( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxTarifa( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TarPreL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TarPreL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TarPreL.Cdx"
   oDataTable:cDescription := "Tarifas personalizadas"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TarPreS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TarPreS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TarPreS.Cdx"
   oDataTable:cDescription := "Tarifas personalizadas"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Oferta" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Oferta.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Oferta.Cdx"
   oDataTable:cDescription := "Ofertas"
   oDataTable:bCreateFile  := {| cPath | mkOferta( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxOferta( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Pro" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Pro.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Pro.Cdx"
   oDataTable:cDescription := "Propiedades"
   oDataTable:bCreateFile  := {| cPath | mkPro( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxPro( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TblPro" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TblPro.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TblPro.Cdx"
   oDataTable:cDescription := "Lineas propiedades"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "GrpFam" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "GrpFam.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "GrpFam.Cdx"
   oDataTable:cDescription := "Grupo de familias"
   oDataTable:bCreateFile  := {| cPath | TGrpFam():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FraPub" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FraPub.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FraPub.Cdx"
   oDataTable:cDescription := "Frases publicitarias"
   oDataTable:bCreateFile  := {| cPath | TFrasesPublicitarias():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TComandas" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TComandas.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TComandas.Cdx"
   oDataTable:cDescription := "Comandas"
   oDataTable:bCreateFile  := {| cPath | TComandas():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "OrdenComanda" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "OrdenComanda.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "OrdenComanda.Cdx"
   oDataTable:cDescription := "OrdenComanda"
   oDataTable:bCreateFile  := {| cPath | TOrdenComanda():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ComentariosT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ComentariosT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ComentariosT.Cdx"
   oDataTable:cDescription := "Comentarios"
   oDataTable:bCreateFile  := {| cPath | TComentarios():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ComentariosL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ComentariosL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ComentariosL.Cdx"
   oDataTable:cDescription := "Comentarios lineas"
   oDataTable:bCreateFile  := {| cPath | TDetComentarios():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "RemMovT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RemmovT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RemMovT.Cdx"
   oDataTable:cDescription := "Remesa movimientos"
   oDataTable:bCreateFile  := {| cPath | TRemMovAlm():BuildFiles( cPath ) }
   oDataTable:bCreateIndex := {| cPath | TRemMovAlm():Create( cPath ):Reindexa() }
   oDataTable:bSyncFile    := {|| SynRemMov( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "HisMov" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "HisMov.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "HisMov.Cdx"
   oDataTable:cDescription := "Líneas remesas movimientos"
   oDataTable:bCreateFile  := {| cPath | TDetMovimientos():BuildFiles( cPath ) }
   oDataTable:bCreateIndex := {| cPath | TDetMovimientos():Create( cPath ):Reindexa() }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "MovSer" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "MovSer.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "MovSer.Cdx"
   oDataTable:cDescription := "Series remesas movimientos"
   oDataTable:bCreateFile  := {| cPath | TDetSeriesMovimientos():BuildFiles( cPath ) }
   oDataTable:bCreateIndex := {| cPath | TDetSeriesMovimientos():Create( cPath ):Reindexa() }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PromoT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PromoT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PromoT.Cdx"
   oDataTable:cDescription := "Promociones"
   oDataTable:bCreateFile  := {| cPath | mkPromo( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxPromo( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PromoL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PromoL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PromoL.Cdx"
   oDataTable:cDescription := "Promociones lineas"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PromoC" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PromoC.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PromoC.Cdx"
   oDataTable:cDescription := "Promociones"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Fideliza" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Fideliza.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Fideliza.Cdx"
   oDataTable:cDescription := "Fidelización"
   oDataTable:bCreateFile  := {| cPath | TFideliza():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "DetFideliza" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "DetFideliza.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "DetFideliza.Cdx"
   oDataTable:cDescription := "Fidelización lineas"
   oDataTable:bCreateFile  := {| cPath | TDetFideliza():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CampoExtra" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CampoExtra.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CampoExtra.Cdx"
   oDataTable:cDescription := "Campos extra"
   oDataTable:bCreateFile  := {| cPath | TCamposExtra():BuildFiles( cPath ) }
   oDataTable:bSyncFile    := {|| TCamposExtra():Create():Syncronize() }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "DetCExtra" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "DetCExtra.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "DetCExtra.Cdx"
   oDataTable:cDescription := "Detalle de campos extra"
   oDataTable:bCreateFile  := {| cPath | TDetCamposExtra():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PrestaId" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PrestaId.DBF"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PrestaId.CDX"
   oDataTable:cDescription := "Identificadores de prestashop"
   oDataTable:bCreateFile  := {| cPath | TPrestaShopId():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "Client" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Client.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Client.Cdx"
   oDataTable:bCreateFile  := {|| mkClient( cPatEmp() ) }
   oDataTable:bCreateIndex := {|| rxClient( cPatEmp() ) }
   oDataTable:bSyncFile    := {|| synClient( cPatEmp() ) }
   oDataTable:cDescription := "Clientes"
   oDatatable:aDictionary  := hashDictionary( aItmCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmCli() )
   oDataTable:bId          := {|| Field->Cod }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ClientD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ClientD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ClientD.Cdx"
   oDataTable:cDescription := "Clientes documentos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CliAtp" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CliAtp.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CliAtp.Cdx"
   oDataTable:cDescription := "Atípicas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ObrasT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ObrasT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ObrasT.Cdx"
   oDataTable:cDescription := "Clientes direcciones"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CliCto" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CliCto.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CliCto.Cdx"
   oDataTable:cDescription := "Clientes contactos"
   ::AddEmpresaTable( oDataTable )


   oDataTable              := TDataTable():New( "CliDad" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CliDad.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CliDad.Cdx"
   oDataTable:cDescription := "Clientes contactos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CliBnc" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CliBnc.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CliBnc.Cdx"
   oDataTable:cDescription := "Clientes bancos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CliInc" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CliInc.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CliInc.Cdx"
   oDataTable:cDescription := "Clientes incidencias"
   oDatatable:aDictionary  := hashDictionary( aCliInc() )
   oDatatable:aDefaultValue:= hashDefaultValue( aCliInc() )
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "GrpCli" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "GrpCli.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "GrpCli.Cdx"
   oDataTable:cDescription := "Grupos de clientes"
   oDataTable:bCreateFile  := {| cPath | TGrpCli():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "OrdCarP" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "OrdCarP.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "OrdCarP.Cdx"
   oDataTable:cDescription := "Orden de carga"
   oDataTable:bCreateFile  := {| cPath | TOrdCarga():BuildFiles( cPath ) }
   oDataTable:bSyncFile    := {|| SynOrdCar( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "OrdCarL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "OrdCarL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "OrdCarL.Cdx"
   oDataTable:cDescription := "Lineas orden de carga"
   oDataTable:bCreateFile  := {| cPath | TDetOrdCar():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Transpor" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Transpor.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Transpor.Cdx"
   oDataTable:cDescription := "Transportistas"
   oDataTable:bSyncFile    := {|| SynTransportista( cPatEmp() ) }
   oDataTable:bCreateFile  := {| cPath | TTrans():BuildFiles( cPath ) }
   oDataTable:bCreateIndex := {| cPath | TTrans():Create( cPath ):Reindexa() }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Ruta" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Ruta.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Ruta.Cdx"
   oDataTable:cDescription := "Rutas"
   oDataTable:bCreateFile  := {| cPath | mkRuta( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxRuta( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CtaRem" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CtaRem.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CtaRem.Cdx"
   oDataTable:cDescription := "Cuentas de remesas"
   oDataTable:bCreateFile  := {| cPath | TCtaRem():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "Agentes" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Agentes.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Agentes.Cdx"
   oDataTable:cDescription := "Agentes"
   oDataTable:bSyncFile    := {|| SynAgente( cPatEmp() ) }
   oDataTable:bCreateFile  := {| cPath | mkAgentes( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxAgentes( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AgeCom" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AgeCom.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AgeCom.Cdx"
   oDataTable:cDescription := "Agentes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AgeRel" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AgeRel.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AgeRel.Cdx"
   oDataTable:cDescription := "Agentes"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "GrpPrv" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "GrpPrv.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "GrpPrv.Cdx"
   oDataTable:bSyncFile    := {|| SynProvee( cPatEmp() ) }
   oDataTable:cDescription := "Grupos de proveedores"
   oDataTable:bCreateFile  := {| cPath | TGrpPrv():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Provee" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Provee.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Provee.Cdx"
   oDataTable:cDescription := "Proveedores"
   oDataTable:bCreateFile  := {| cPath | mkProvee( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxProvee( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProveeD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProveeD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProveeD.Cdx"
   oDataTable:cDescription := "Proveedores"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PrvBnc" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PrvBnc.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PrvBnc.Cdx"
   oDataTable:cDescription := "Bancos de proveedores"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "RemAgeT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RemAgeT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RemAgeT.Cdx"
   oDataTable:cDescription := "Remesas de agentes"
   oDataTable:bCreateFile  := {| cPath | TCobAge():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CfgUse" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CfgUse.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CfgUse.Cdx"
   oDataTable:cDescription := "Configuración"
   oDataTable:bCreateFile  := {| cPath | ColumnasUsuariosModel():CreateFile( cPath ) }
   oDataTable:bCreateIndex := {| cPath | ColumnasUsuariosModel():CreateIndex( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CfgInf" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CfgInf.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CfgInf.Cdx"
   oDataTable:cDescription := "Configuración"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CfgFnt" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CfgFnt.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CfgFnt.Cdx"
   oDataTable:cDescription := "Configuración"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CfgGrp" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CfgGrp.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CfgGrp.Cdx"
   oDataTable:cDescription := "Configuración"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "RDocumen" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RDocumen.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RDocumen.Cdx"
   oDataTable:cDescription := "Documentos"
   oDataTable:bCreateFile  := {| cPath | mkDocs( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxDocs( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FstInf" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FstInf.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FstInf.Cdx"
   oDataTable:cDescription := "Documentos"
   oDataTable:bCreateFile  := {| cPath | TFastReportInfGen():BuildFiles( cPath ) }
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "PedProvT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedProvT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedProvT.Cdx"
   oDataTable:bSyncFile    := {|| SynPedPrv( cPatEmp() ) }
   oDataTable:cDescription := "Pedidos de proveedor"
   oDataTable:bCreateFile  := {| cPath | mkPedPrv( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxPedPrv( cPath ) }
   oDatatable:aDictionary  := hashDictionary( aItmPedCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmPedCli() )
   oDatatable:bId          := {|| Field->cSerPed + str( Field->nNumPed ) + Field->cSufPed }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedProvL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedProvL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedProvL.Cdx"
   oDatatable:aDictionary  := hashDictionary( aColPedPrv() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColPedPrv() )
   oDataTable:cDescription := "Pedidos de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedPrvI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedPrvI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedPrvI.Cdx"
   oDataTable:cDescription := "Pedidos de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedPrvD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedPrvD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedPrvD.Cdx"
   oDataTable:cDescription := "Pedidos de proveedor"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "AlbProvT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbProvT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbProvT.Cdx"
   oDataTable:bSyncFile    := {|| SynAlbPrv( cPatEmp() ) }
   oDataTable:cDescription := "Albaranes de proveedor"
   oDataTable:bCreateFile  := {| cPath | mkAlbPrv( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxAlbPrv( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbProvL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDescription := "Albaranes de proveedor lineas"
   oDataTable:aStruct      := aColAlbPrv()
   oDatatable:aDictionary  := hashDictionary( aColAlbPrv() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColAlbPrv() )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbProvL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbProvL.Cdx"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbPrvI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbPrvI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbPrvI.Cdx"
   oDataTable:cDescription := "Albaranes de proveedor incidencias"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbPrvD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbPrvD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbPrvD.Cdx"
   oDataTable:cDescription := "Albaranes de proveedor documentos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbPrvS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbPrvS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbPrvS.Cdx"
   oDataTable:cDescription := "Albaranes de proveedor series"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "FacPrvT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacPrvT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacPrvT.Cdx"
   oDataTable:bSyncFile    := {|| SynFacPrv( cPatEmp() ) }
   oDataTable:cDescription := "Facturas de proveedor"
   oDataTable:bCreateFile  := {| cPath | mkFacPrv( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxFacPrv( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacPrvL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacPrvL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacPrvL.Cdx"
   oDataTable:cDescription := "Líneas de facturas de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacPrvI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacPrvI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacPrvI.Cdx"
   oDataTable:cDescription := "Incidencias de facturas de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacPrvD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacPrvD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacPrvD.Cdx"
   oDataTable:cDescription := "Documentos de facturas de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacPrvP" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacPrvP.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacPrvP.Cdx"
   oDataTable:cDescription := "Pagos de facturas de proveedor"
   oDataTable:bSyncFile    := {|| SynRecPrv( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacPrvS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacPrvS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacPrvS.Cdx"
   oDataTable:cDescription := "Series de facturas de proveedor"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "RctPrvT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RctPrvT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RctPrvT.Cdx"
   oDataTable:cDescription := "Rectificativas de proveedor"
   oDataTable:bCreateFile  := {| cPath | mkRctPrv( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxRctPrv( cPath ) }
   oDataTable:bSyncFile    := {|| SynRctPrv( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "RctPrvL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RctPrvL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RctPrvL.Cdx"
   oDataTable:cDescription := "Líneas de rectificativas de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "RctPrvI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RctPrvI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RctPrvI.Cdx"
   oDataTable:cDescription := "Rectificativas de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "RctPrvD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RctPrvD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RctPrvD.Cdx"
   oDataTable:cDescription := "Rectificativas de proveedor"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "RctPrvS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RctPrvS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RctPrvS.Cdx"
   oDataTable:cDescription := "Rectificativas de proveedor"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "SatCliT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SatCliT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SatCliT.Cdx"
   oDataTable:cDescription := "S.A.T. de clientes"
   oDatatable:aDictionary  := hashDictionary( aItmSatCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmSatCli() )
   oDataTable:bCreateFile  := {| cPath | mkSatCli( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxSatCli( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "SatCliL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SatCliL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SatCliL.Cdx"
   oDataTable:cDescription := "S.A.T. de clientes"
   oDatatable:aDictionary  := hashDictionary( aColSatCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColSatCli() )
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "SatCliI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SatCliI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SatCliI.Cdx"
   oDataTable:cDescription := "S.A.T. de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "SatCliD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SatCliD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SatCliD.Cdx"
   oDataTable:cDescription := "S.A.T. de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "SatCliS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SatCliS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SatCliS.Cdx"
   oDataTable:cDescription := "S.A.T. de clientes"
   oDataTable:bSyncFile    := {|| SynSatCli( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "PreCliT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PreCliT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PreCliT.Cdx"
   oDataTable:cDescription := "Presupuestos de clientes"
   oDatatable:aDictionary  := hashDictionary( aItmPreCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmPreCli() )
   oDataTable:bCreateFile  := {| cPath | mkPreCli( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxPreCli( cPath ) }
   oDataTable:bSyncFile    := {|| SynPreCli( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PreCliL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PreCliL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PreCliL.Cdx"
   oDataTable:cDescription := "Presupuestos de clientes"
   oDatatable:aDictionary  := hashDictionary( aColPreCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColPreCli() )
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PreCliI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PreCliI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PreCliI.Cdx"
   oDataTable:cDescription := "Presupuestos de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PreCliD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PreCliD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PreCliD.Cdx"
   oDataTable:cDescription := "Presupuestos de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PreCliE" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PreCliE.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PreCliE.Cdx"
   oDataTable:cDescription := "Situaciones de presupuestos de clientes"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "PedCliT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedCliT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedCliT.Cdx"
   oDataTable:cDescription := "Pedidos de clientes"
   oDataTable:bCreateFile  := {| cPath | mkPedCli( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxPedCli( cPath ) }
   oDataTable:bSyncFile    := {|| SynPedCli( cPatEmp() ) }
   oDatatable:aDictionary  := hashDictionary( aItmPedCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmPedCli() )
   oDatatable:bId          := {|| Field->cSerPed + str( Field->nNumPed ) + Field->cSufPed }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedCliL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedCliL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedCliL.Cdx"
   oDataTable:cDescription := "Líneas de pedidos de clientes"
   oDatatable:aDictionary  := hashDictionary( aColPedCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColPedCli() )
   oDatatable:bId          := {|| Field->cSerPed + str( Field->nNumPed ) + Field->cSufPed }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedCliI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedCliI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedCliI.Cdx"
   oDataTable:cDescription := "Incidencias de pedidos de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedCliD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedCliD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedCliD.Cdx"
   oDataTable:cDescription := "Documentos de pedidos de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedCliP" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedCliP.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedCliP.Cdx"
   oDataTable:cDescription := "Pagos de pedidos de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedCliR" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedCliR.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedCliR.Cdx"
   oDataTable:cDescription := "Pedidos de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "PedCliE" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "PedCliE.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "PedCliE.Cdx"
   oDataTable:cDescription := "Pedidos de clientes situaciones"
   ::AddEmpresaTable( oDataTable )





   oDataTable                 := TDataTable():New( "AlbCliT" )
   oDataTable:lTrigger        := ::lTriggerAuxiliares
   oDataTable:cDataFile       := cPatEmp( , .T. ) + "AlbCliT.Dbf"
   oDataTable:cIndexFile      := cPatEmp( , .T. ) + "AlbCliT.Cdx"
   oDataTable:cDescription    := "Albaranes de clientes"
   oDataTable:bCreateFile     := {|| mkAlbCli( cPatEmp() ) }

   oDataTable:bCreateIndex    := {|| rxAlbCli( cPatEmp() ) }
   oDataTable:bSyncFile       := {|| synAlbCli( cPatEmp() ) }
   oDatatable:aDictionary     := hashDictionary( aItmAlbCli() )
   oDatatable:aDefaultValue   := hashDefaultValue( aItmAlbCli() )
   oDatatable:bId             := {|| Field->cSerAlb + str( Field->nNumAlb ) + Field->cSufAlb }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbCliL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbCliL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbCliL.Cdx"
   oDataTable:cDescription := "Albaranes de clientes"
   oDatatable:aDictionary  := hashDictionary( aColAlbCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColAlbCli() )
   oDatatable:bId          := {|| Field->cSerAlb + str( Field->nNumAlb ) + Field->cSufAlb }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbCliI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbCliI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbCliI.Cdx"
   oDataTable:cDescription := "Albaranes de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbCliD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbCliD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbCliD.Cdx"
   oDataTable:cDescription := "Albaranes de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbCliP" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbCliP.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbCliP.Cdx"
   oDataTable:cDescription := "Albaranes de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbCliS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbCliS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbCliS.Cdx"
   oDataTable:cDescription := "Albaranes de clientes"
   oDatatable:bId          := {|| Field->cSerAlb + str( Field->nNumAlb ) + Field->cSufAlb }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AlbCliE" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AlbCliE.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AlbCliE.Cdx"
   oDataTable:cDescription := "Situaciones de albaranes de clientes"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "RemCliT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RemCliT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RemCliT.Cdx"
   oDataTable:cDescription := "Remesas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "RemAgeL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "RemAgeL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "RemAgeL.Cdx"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "FacCliT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliT.Cdx"
   oDataTable:cDescription := "Facturas de clientes"
   oDataTable:bCreateFile  := {| cPath | mkFacCli( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxFacCli( cPath ) }
   oDataTable:bSyncFile    := {|| SynFacCli( cPatEmp() ) }
   oDatatable:aDictionary  := hashDictionary( aItmFacCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmFacCli() )
   oDatatable:bId          := {|| Field->cSerie + str( Field->nNumFac ) + Field->cSufFac }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliL.Cdx"
   oDataTable:cDescription := "Facturas de clientes"
   oDatatable:aDictionary  := hashDictionary( aColFacCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColFacCli() )
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliI.Cdx"
   oDataTable:cDescription := "Facturas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliD.Cdx"
   oDataTable:cDescription := "Facturas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliS.Cdx"
   oDataTable:cDescription := "Facturas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliE" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliE.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliE.Cdx"
   oDataTable:cDescription := "Facturas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacRecT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacRecT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacRecT.Cdx"
   oDataTable:cDescription := "Rectificativas de clientes"
   oDataTable:bCreateIndex := {| cPath | rxFacRec( cPath ) }
   oDataTable:bCreateFile  := {| cPath | mkFacRec( cPath ) }
   oDataTable:bSyncFile    := {|| SynFacRec( cPatEmp() ) }
   oDatatable:aDictionary  := hashDictionary( aItmFacRec() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmFacRec() )
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacRecL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacRecL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacRecL.Cdx"
   oDataTable:cDescription := "Rectificativas de clientes"
   oDatatable:aDictionary  := hashDictionary( aColFacRec() )
   oDatatable:aDefaultValue:= hashDefaultValue( aColFacRec() )
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacRecI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacRecI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacRecI.Cdx"
   oDataTable:cDescription := "Rectificativas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacRecD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacRecD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacRecD.Cdx"
   oDataTable:cDescription := "Rectificativas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacRecS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacRecS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacRecS.Cdx"
   oDataTable:cDescription := "Rectificativas de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliP" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliP.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliP.Cdx"
   oDataTable:cDescription := "Facturas de clientes recibos"
   oDataTable:bCreateIndex := {|| rxRecCli( cPatEmp() ) }
   oDataTable:bCreateFile  := {|| mkRecCli( cPatEmp() ) }
   oDataTable:bSyncFile    := {|| SynRecCli( cPatEmp() ) }
   oDatatable:aDictionary  := hashDictionary( aItmRecCli() )
   oDatatable:aDefaultValue:= hashDefaultValue( aItmRecCli() )
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliG" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliG.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliG.Cdx"
   oDataTable:cDescription := "Facturas de clientes grupos de recibos"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacAutT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacAutT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacAutT.Cdx"
   oDataTable:cDescription := "Plantillas automáticas de clientes"
   oDataTable:bCreateFile  := {| cPath | TFacAutomatica():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "GrpFac" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "GrpFac.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "GrpFac.Cdx"
   oDataTable:cDescription := "Grupos de facturas automáticas"
   oDataTable:bCreateFile  := {| cPath | TGrpFacturasAutomaticas():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacAutL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacAutL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacAutL.Cdx"
   oDataTable:cDescription := "Plantillas automáticas de clientes lineas"
   oDataTable:bCreateFile  := {| cPath | TDetFacAutomatica():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacAutI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacAutI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacAutI.Cdx"
   oDataTable:cDescription := "Plantillas automáticas de clientes historico"
   oDataTable:bCreateFile  := {| cPath | THisFacAutomatica():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "FacCliC" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacCliC.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacCliC.Cdx"
   oDataTable:cDescription := "Situaciones de Facturas de clientes"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "FacRecE" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "FacRecE.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "FacRecE.Cdx"
   oDataTable:cDescription := "Situaciones de Facturas rectificativas de clientes"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "AntCliT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AntCliT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AntCliT.Cdx"
   oDataTable:cDescription := "Anticipos de clientes"
   oDataTable:bCreateIndex := {| cPath | rxAntCli( cPath ) }
   oDataTable:bCreateFile  := {| cPath | mkAntCli( cPath ) }

   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AntCliI" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AntCliI.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AntCliI.Cdx"
   oDataTable:cDescription := "Anticipos de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "AntCliD" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "AntCliD.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "AntCliD.Cdx"
   oDataTable:cDescription := "Anticipos de clientes"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "TikeT" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TikeT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TikeT.Cdx"
   oDataTable:cDescription := "Tickets de clientes"
   oDataTable:bCreateIndex := {| cPath | rxTpv( cPath ) }
   oDataTable:bCreateFile  := {| cPath | mkTpv( cPath ) }
   oDataTable:bSyncFile    := {|| SynTikCli( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TikeL" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TikeL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TikeL.Cdx"
   oDataTable:cDescription := "Líneas de tickets de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TikeP" )
   oDataTable:lTrigger     := ::lTriggerAuxiliares
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TikeP.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TikeP.Cdx"
   oDataTable:cDescription := "Pagos de tickets de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TikeS" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TikeS.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TikeS.Cdx"
   oDataTable:cDescription := "Series de tickets de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TikeM" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TikeM.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TikeM.Cdx"
   oDataTable:cDescription := "Mesas tickets de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TikeC" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TikeC.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TikeC.Cdx"
   oDataTable:cDescription := "Pagos de tickets de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TiketImp" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TiketImp.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TiketImp.Cdx"
   oDataTable:cDescription := "Log de impresión de tickets de clientes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TpvMenus" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TpvMenus.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TpvMenus.Cdx"
   oDataTable:cDescription := "Menus para TPV"
   ::AddEmpresaTable( oDataTable  )

   oDataTable              := TDataTable():New( "TpvMnuArt" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TpvMnuArt.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TpvMnuArt.Cdx"
   oDataTable:cDescription := "Artículos para menus de TPV"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TpvMnuOrd" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TpvMnuOrd.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TpvMnuOrd.Cdx"
   oDataTable:cDescription := "Ordenes para menus de TPV"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "SalaVta" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SalaVta.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SalaVta.Cdx"
   oDataTable:cDescription := "Salas de ventas"
   oDataTable:bCreateFile  := {| cPath | TSalaVenta():buildfiles( cPath ) }
   oDataTable:bSyncFile    := {|| SynSalaVenta( cPatEmp() ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "SlaPnt" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SlaPnt.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SlaPnt.Cdx"
   oDataTable:cDescription := "Puntos de la sala de ventas"
   oDataTable:bCreateFile  := {| cPath | TDetSalaVenta():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "ProCab" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProCab.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProCab.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TProduccion():buildfiles(cPath ) }
   oDataTable:hDefinition  := TProduccion():DefineHash()
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProLin" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProLin.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProLin.Cdx"
   oDataTable:cDescription := "Líneas de producción"
   oDataTable:bCreateFile  := {| cPath | TDetProduccion():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProSer" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProSer.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProSer.Cdx"
   oDataTable:cDescription := "Series de producción"
   oDataTable:bCreateFile  := {| cPath | TDetSeriesProduccion():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProMat" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProMat.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProMat.Cdx"
   oDataTable:cDescription := "Materiales de producción"
   oDataTable:bCreateFile  := {| cPath | TDetMaterial():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProMaq" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProMaq.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProMaq.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TDetMaquina():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "MaqCosT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "MaqCosT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "MaqCosT.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TMaquina():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "MaqCosL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "MaqCosL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "MaqCosL.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TDetCostes():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Costes" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Costes.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Costes.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TCosMaq():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProPer" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProPer.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProPer.Cdx"
   oDataTable:bCreateFile  := {| cPath | TDetPersonal():buildfiles(cPath ) }
   oDataTable:cDescription := "Producción"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "OpeT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "OpeT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "OpeT.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TOperarios():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "OpeL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "OpeL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "OpeL.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TDetHoras():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Operacio" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Operacio.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Operacio.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TOperacion():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Seccion" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Seccion.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Seccion.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TSeccion():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Horas" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Horas.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Horas.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | THoras():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ProHPer" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ProHPer.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ProHPer.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TDetHorasPersonal():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "MatSer" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "MatSer.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "MatSer.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TDetMaterial():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TipOpera" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TipOpera.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TipOpera.Cdx"
   oDataTable:cDescription := "Producción"
   oDataTable:bCreateFile  := {| cPath | TTipOpera():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "ExpCab" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ExpCab.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ExpCab.Cdx"
   oDataTable:cDescription := "Expedientes"
   oDataTable:bCreateFile  := {| cPath | TExpediente():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "ExpDet" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "ExpDet.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "ExpDet.Cdx"
   oDataTable:cDescription := "Expedientes"
   oDataTable:bCreateFile  := {| cPath | TDetActuacion():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TipExpT" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TipExpT.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TipExpT.Cdx"
   oDataTable:cDescription := "Expedientes"
   oDataTable:bCreateFile  := {| cPath | TTipoExpediente():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "TipExpL" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "TipExpL.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "TipExpL.Cdx"
   oDataTable:cDescription := "Expedientes"
   oDataTable:bCreateFile  := {| cPath | TDetTipoExpediente():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Entidades" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Entidades.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Entidades.Cdx"
   oDataTable:cDescription := "Expedientes"
   oDataTable:bCreateFile  := {| cPath | TEntidades():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Colaboradores" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Colaboradores.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Colaboradores.Cdx"
   oDataTable:cDescription := "Expedientes"
   oDataTable:bCreateFile  := {| cPath | TColaboradores():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Actuaciones" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Actuaciones.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Actuaciones.Cdx"
   oDataTable:cDescription := "Expedientes"
   oDataTable:bCreateFile  := {| cPath | TActuaciones():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "SndLog" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SndLog.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SndLog.Cdx"
   oDataTable:cDescription := "Envios y recepción"
   oDataTable:bCreateFile  := {| cPath | TSndRecInf():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "SndFil" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "SndFil.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "SndFil.Cdx"
   oDataTable:cDescription := "Envios y recepción"
   ::AddEmpresaTable( oDataTable )





   oDataTable              := TDataTable():New( "CfgCar" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CfgCar.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CfgCar.Cdx"
   oDataTable:cDescription := "Reportes"
   oDataTable:bCreateFile  := {| cPath | mkReport( cPath ) }
   oDataTable:bCreateIndex := {| cPath | rxReport( cPath ) }
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "CfgFav" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "CfgFav.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "CfgFav.Cdx"
   oDataTable:cDescription := "Reportes"
   ::AddEmpresaTable( oDataTable )

   oDataTable              := TDataTable():New( "Scripts" )
   oDataTable:cDataFile    := cPatEmp( , .T. ) + "Scripts.Dbf"
   oDataTable:cIndexFile   := cPatEmp( , .T. ) + "Scripts.Cdx"
   oDataTable:cDescription := "Reportes"
   oDataTable:bCreateFile  := {| cPath | TScripts():buildfiles(cPath ) }
   ::AddEmpresaTable( oDataTable )



   ::AddEmpresaObject( TGrpCli():Create( cPatEmp() ) )

   ::AddEmpresaObject( TGrpPrv():Create( cPatEmp() ) )

   ::AddEmpresaObject( UniMedicion():Create() )

   ::AddEmpresaObject( TBancos():Create() )

   ::AddEmpresaObject( TNewImp():Create() )

   ::AddEmpresaObject( TSalaVenta():Create( cPatEmp() ) )

   oDataTable              := TDetCamposExtra():Create()
   oDataTable:cName        := "CamposExtraHeader"
   ::AddEmpresaObject( oDataTable )

   oDataTable              := TDetCamposExtra():Create()
   oDataTable:cName        := "CamposExtraLine"
   ::AddEmpresaObject( oDataTable )

   ::AddEmpresaObject( TCentroCoste():Create() )

   ::AddEmpresaObject( TStock():Create( cPatEmp() ) )

   ::AddEmpresaObject( CodigosPostales():Create( cPatDat() ) )

   ::AddEmpresaObject( TBandera():New() )

   if !isReport()
      ::AddEmpresaObject( TPrestaShopId():Create() )
      ::AddEmpresaObject( TRemMovAlm():Create() )
      ::AddEmpresaObject( TDetMovimientos():Create() )
      ::AddEmpresaObject( TDetSeriesMovimientos():Create() )
   end

RETURN ( Self )



static FUNCTION TDataCenter_BuildTrigger( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   with object ( TAuditor() )
      :Create( cPatDat() )
   end

RETURN ( Self )



static FUNCTION TDataCenter_CreateOperationLogTable( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cSqlStatement

   if file( cPatADS(.T.) + "SqlOperationLog.adt" )
      ferase( cPatADS(.T.) + "SqlOperationLog.adt" )
   end




   cSqlStatement         := "CREATE TABLE SqlOperationLog (" + Chr(13)+Chr(10)
   cSqlStatement         +=    "ID AUTOINC CONSTRAINT NOT NULL,"               + Chr(13)+Chr(10)
   cSqlStatement         +=    "DATETIME TIMESTAMP CONSTRAINT NOT NULL,"       + Chr(13)+Chr(10)
   cSqlStatement         +=    "USERNAME CHAR(50) CONSTRAINT NOT NULL,"        + Chr(13)+Chr(10)
   cSqlStatement         +=    "APPNAME CHAR(50),"                             + Chr(13)+Chr(10)
   cSqlStatement         +=    "TABLENAME CHAR(150) CONSTRAINT NOT NULL,"      + Chr(13)+Chr(10)
   cSqlStatement         +=    "OPERATION CHAR(6) CONSTRAINT NOT NULL )"       + Chr(13)+Chr(10)
   cSqlStatement         +=    "IN DATABASE;" + Chr(13)+Chr(10)

RETURN ( ::ExecuteSqlStatement( cSqlStatement, "OperationLog", 3 ) )



static FUNCTION TDataCenter_CreateColumnLogTable( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cSqlStatement

   if file( cPatADS(.T.) + "SqlColumnLog.adt" )
      ferase( cPatADS(.T.) + "SqlColumnLog.adt" )
   end




   cSqlStatement         := "CREATE TABLE SqlColumnLog (" + Chr(13)+Chr(10)
   cSqlStatement         +=    "ID AUTOINC CONSTRAINT NOT NULL,"            + Chr(13)+Chr(10)
   cSqlStatement         +=    "OPERATIONID INTEGER CONSTRAINT NOT NULL,"   + Chr(13)+Chr(10)
   cSqlStatement         +=    "COLUMNNAME CHAR(50) CONSTRAINT NOT NULL,"   + Chr(13)+Chr(10)
   cSqlStatement         +=    "USERNAME CHAR(50) CONSTRAINT NOT NULL,"     + Chr(13)+Chr(10)
   cSqlStatement         +=    "APPNAME CHAR(50),"                          + Chr(13)+Chr(10)
   cSqlStatement         +=    "TABLENAME CHAR(150) CONSTRAINT NOT NULL,"   + Chr(13)+Chr(10)
   cSqlStatement         +=    "OLDVALUE CHAR(250),"                        + Chr(13)+Chr(10)
   cSqlStatement         +=    "NEWVALUE CHAR(250) )"                       + Chr(13)+Chr(10)
   cSqlStatement         +=    "IN DATABASE;"                               + Chr(13)+Chr(10)

RETURN ( ::ExecuteSqlStatement( cSqlStatement, "ColumnLog", 3 ) )



static FUNCTION TDataCenter_Auditor( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if !Empty( oWnd() )
      oWnd():CloseAll()
   end

   ::BuildData()

   ::BuildEmpresa()

   if !::lSelectOperationLog()
      RETURN ( Self )
   end

   if !::lSelectColumnLog()
      RETURN ( Self )
   end

   if !::GetAllLocksTablesUsers()
      RETURN ( Self )
   end

   ::lCreaArrayPeriodos()

   ::oDlgAuditor = TDialog():New(,,,,, "AdvantageAuditor",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlgAuditor", nil, )







      ::oFldAuditor := TFolder():ReDefine( 100, {"&Operaciones", "&Bloqueos"}, { "AdvantageAuditor_Operaciones","AdvantageAuditor_Bloqueos" }, ::oDlgAuditor,,,,, .F., )





      ::oPeriodo := TComboBox():ReDefine( 100, { | u | If( PCount()==0, ::cPeriodo, ::cPeriodo:= u ) }, ::aPeriodo, ::oFldAuditor:aDialogs[1],,,,,,, .F.,,,,,,, "::oPeriodo",,,,,,, )

      ::oPeriodo:bChange                     := {|| ::lRecargaFecha() }





      ::oIniInf := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::dIniInf, ::dIniInf:= u ) }, ::oFldAuditor:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      ::oFinInf := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::dFinInf, ::dFinInf:= u ) }, ::oFldAuditor:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, ::lAppend, ::lAppend:= u ) }, ::oFldAuditor:aDialogs[1],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 141, { | u | If( PCount()==0, ::lEdit, ::lEdit:= u ) }, ::oFldAuditor:aDialogs[1],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 142, { | u | If( PCount()==0, ::lDelete, ::lDelete:= u ) }, ::oFldAuditor:aDialogs[1],,,,,,, .F.,, .F. )




      TButton():ReDefine( 150, {||( ::InlineSelectOperationLog() )}, ::oFldAuditor:aDialogs[1],,, .F.,,,, .F. )





      ::oBrwOperation                        := IXBrowse():New( ::oFldAuditor:aDialogs[1] )

      ::oBrwOperation:lRecordSelector        := .T.
      ::oBrwOperation:lTransparent           := .F.
      ::oBrwOperation:nDataLines             := 1

      ::oBrwOperation:lVScroll               := .T.
      ::oBrwOperation:lHScroll               := .F.

      ::oBrwOperation:nMarqueeStyle          := 5

      ::oBrwOperation:cAlias                 := "SqlOperation"

      ::oBrwOperation:bClrSel                := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }
      ::oBrwOperation:bClrSelFocus           := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }






      ::oBrwOperation:bChange                := {|| ::InlineSelectColumnLog( SqlOperation->Id ) }

      ::oBrwOperation:CreateFromResource( 200 )

      with object ( ::oBrwOperation:AddCol() )
         :cHeader          := "Id"
         :nWidth           := 80
         :bEditValue       := {|| SqlOperation->Id }
      end

      with object ( ::oBrwOperation:AddCol() )
         :cHeader          := "Fecha y hora"
         :nWidth           := 140
         :cDataType        := "T"
         :cEditPicture     := "@T"
         :nDataStrAlign    := 3
         :nHeadStrAlign    := 3
         :bEditValue       := {|| SqlOperation->DateTime }
      end

      with object ( ::oBrwOperation:AddCol() )
         :cHeader          := "Usuario"
         :nWidth           := 100
         :bEditValue       := {|| SqlOperation->AppName }
      end

      with object ( ::oBrwOperation:AddCol() )
         :cHeader          := "Empresa"
         :nWidth           := 100
         :bEditValue       := {|| ::cEmpresaDescription( SqlOperation->TableName ) }
      end

      with object ( ::oBrwOperation:AddCol() )
         :cHeader          := "Tabla"
         :nWidth           := 100
         :bEditValue       := {|| ::cTableDescription( SqlOperation->TableName ) }
      end

      with object ( ::oBrwOperation:AddCol() )
         :cHeader          := "Ruta"
         :nWidth           := 100
         :bEditValue       := {|| SqlOperation->TableName }
      end

      with object ( ::oBrwOperation:AddCol() )
         :cHeader          := "Operación"
         :nWidth           := 100
         :bEditValue       := {|| ::cOperationDescription( SqlOperation->Operation ) }
      end





      ::oBrwColumn                        := IXBrowse():New( ::oFldAuditor:aDialogs[1] )

      ::oBrwColumn:lRecordSelector        := .T.
      ::oBrwColumn:lTransparent           := .F.
      ::oBrwColumn:nDataLines             := 1

      ::oBrwColumn:lVScroll               := .T.
      ::oBrwColumn:lHScroll               := .F.

      ::oBrwColumn:nMarqueeStyle          := 5

      ::oBrwColumn:cAlias                 := "SqlColumn"

      ::oBrwColumn:bClrSel                := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }
      ::oBrwColumn:bClrSelFocus           := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }






      ::oBrwColumn:CreateFromResource( 210 )

      with object ( ::oBrwColumn:AddCol() )
         :cHeader          := "Operation"
         :nWidth           := 80
         :bEditValue       := {|| SqlColumn->OperationId }
      end

      with object ( ::oBrwColumn:AddCol() )
         :cHeader          := "COLUMNNAME"
         :nWidth           := 80
         :bEditValue       := {|| SqlColumn->COLUMNNAME }
      end

      with object ( ::oBrwColumn:AddCol() )
         :cHeader          := "OLDVALUE"
         :nWidth           := 80
         :bEditValue       := {|| SqlColumn->OLDVALUE }
      end

      with object ( ::oBrwColumn:AddCol() )
         :cHeader          := "NEWVALUE"
         :nWidth           := 80
         :bEditValue       := {|| SqlColumn->NEWVALUE }
      end








      TButton():ReDefine( 150, {||( ::GetAllLocksTablesUsers(), ::oBrwBlocks:Refresh(), ::oBrwBlocks:GoTop() )}, ::oFldAuditor:aDialogs[2],,, .F.,,,, .F. )

      ::oBrwBlocks                        := IXBrowse():New( ::oFldAuditor:aDialogs[2] )

      ::oBrwBlocks:lRecordSelector        := .T.
      ::oBrwBlocks:lTransparent           := .F.
      ::oBrwBlocks:nDataLines             := 1

      ::oBrwBlocks:lVScroll               := .T.
      ::oBrwBlocks:lHScroll               := .F.

      ::oBrwBlocks:nMarqueeStyle          := 5

      ::oBrwBlocks:cAlias                 := "AllLocks"

      ::oBrwBlocks:bClrSel                := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }
      ::oBrwBlocks:bClrSelFocus           := {|| { 16777215, ( 53 + ( 142 * 256 ) + ( 182 * 65536 ) ) } }

      ::oBrwBlocks:CreateFromResource( 100 )

      with object ( ::oBrwBlocks:AddCol() )
         :cHeader          := "Tabla"
         :nWidth           := 180
         :bEditValue       := {|| AllLocks->TableName }
      end

      with object ( ::oBrwBlocks:AddCol() )
         :cHeader          := "Registro Nº"
         :nWidth           := 80
         :bEditValue       := {|| Trans( AllLocks->RecNumber, "9999999999" ) }
      end

      with object ( ::oBrwBlocks:AddCol() )
         :cHeader          := "Usuario"
         :nWidth           := 80
         :bEditValue       := {|| AllLocks->UserName }
      end

      with object ( ::oBrwBlocks:AddCol() )
         :cHeader          := "Direccion IP"
         :nWidth           := 80
         :bEditValue       := {|| AllLocks->IPAddress }
      end

      with object ( ::oBrwBlocks:AddCol() )
         :cHeader          := "Usuario"
         :nWidth           := 80
         :bEditValue       := {|| AllLocks->DictionaryUser }
      end








      TButton():ReDefine( 1, {||( ::oDlgAuditor:End() )}, ::oDlgAuditor,,, .F.,,,, .F. )

   ::oDlgAuditor:Activate( , , , .T. )

   ::CloseOperationLog()
   ::CloseColumnLog()
   ::CloseAllLocksTablesUsers()

RETURN ( Self )



static FUNCTION TDataCenter_lSelectOperationLog( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local lOk
   local cStm
   local cOpe
   local cDateFormat

   cDateFormat    := Set( 4 )

   Set( 4, "YYYY-MM-DD" )





   cStm           := "SELECT * FROM SqlOperationLog "
   cStm           += "WHERE DateTime >= '" + Dtoc( ::dIniInf ) + " 00:00:00' AND DateTime <= '" + Dtoc( ::dFinInf ) + " 23:59:59' "

   cOpe           := ""

   if ::lAppend
      cOpe        += "Operation = 'INSERT'"
   end

   if ::lEdit
      cOpe        += if( !Empty( cOpe ), " OR ", "" )
      cOpe        += "Operation = 'UPDATE'"
   end

   if ::lDelete
      cOpe        += if( !Empty( cOpe ), " OR ", "" )
      cOpe        += "Operation = 'DELETE'"
   end

   if !Empty( cOpe )
      cStm        += " AND ( " + cOpe + " )"
   end





   ::CloseOperationLog()





   lOk            := ::ExecuteSqlStatement( cStm, "SqlOperation" )





   Set( 4, cDateFormat )

RETURN ( lOk )



static FUNCTION TDataCenter_lSelectColumnLog( nOperationId ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm

   If( nOperationId == nil, nOperationId := 0, ) ;





   cStm           := "SELECT * FROM SqlColumnLog "
   cStm           += "WHERE OperationId = " + Alltrim( Str( nOperationId ) )





   ::CloseColumnLog()

RETURN ( ::ExecuteSqlStatement( cStm, "SqlColumn" ) )



static FUNCTION TDataCenter_lCreaArrayPeriodos( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   aAdd( ::aPeriodo, "Hoy" )

   aAdd( ::aPeriodo, "Ayer" )

   aAdd( ::aPeriodo, "Mes en curso" )

   aAdd( ::aPeriodo, "Mes anterior" )

   do case
      case Month( GetSysDate() ) <= 3
         aAdd( ::aPeriodo, "Primer trimestre" )

      case Month( GetSysDate() ) > 3 .AND. Month( GetSysDate() ) <= 6
         aAdd( ::aPeriodo, "Primer trimestre" )
         aAdd( ::aPeriodo, "Segundo trimestre" )

      case Month( GetSysDate() ) > 6 .AND. Month( GetSysDate() ) <= 9
         aAdd( ::aPeriodo, "Primer trimestre" )
         aAdd( ::aPeriodo, "Segundo trimestre" )
         aAdd( ::aPeriodo, "Tercer trimestre" )

      case Month( GetSysDate() ) > 9 .AND. Month( GetSysDate() ) <= 12
         aAdd( ::aPeriodo, "Primer trimestre" )
         aAdd( ::aPeriodo, "Segundo trimestre" )
         aAdd( ::aPeriodo, "Tercer trimestre" )
         aAdd( ::aPeriodo, "Cuatro trimestre" )

   end

   aAdd( ::aPeriodo, "Doce últimos meses" )

   aAdd( ::aPeriodo, "Año en curso" )

   aAdd( ::aPeriodo, "Año anterior" )

RETURN ( Self )



static FUNCTION TDataCenter_lRecargaFecha( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   do case
      case ::cPeriodo == "Hoy"

         ::oIniInf:cText( GetSysDate() )
         ::oFinInf:cText( GetSysDate() )

      case ::cPeriodo == "Ayer"

         ::oIniInf:cText( GetSysDate() -1 )
         ::oFinInf:cText( GetSysDate() -1 )

      case ::cPeriodo == "Mes en curso"

         ::oIniInf:cText( CtoD( "01/" + Str( Month( GetSysDate() ) ) + "/" + Str( Year( GetSysDate() ) ) ) )
         ::oFinInf:cText( GetSysDate() )

      case ::cPeriodo == "Mes anterior"

         ::oIniInf:cText( BoM( addMonth( GetSysDate(), - 1 ) ) )
         ::oFinInf:cText( EoM( addMonth( GetSysDate(), - 1 ) ) )

      case ::cPeriodo == "Primer trimestre"

         ::oIniInf:cText( CtoD( "01/01/" + Str( Year( GetSysDate() ) ) ) )
         ::oFinInf:cText( CtoD( "31/03/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Segundo trimestre"

         ::oIniInf:cText( CtoD( "01/04/" + Str( Year( GetSysDate() ) ) ) )
         ::oFinInf:cText( CtoD( "30/06/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Tercer trimestre"

         ::oIniInf:cText( CtoD( "01/07/" + Str( Year( GetSysDate() ) ) ) )
         ::oFinInf:cText( CtoD( "30/09/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Cuatro trimestre"

         ::oIniInf:cText( CtoD( "01/10/" + Str( Year( GetSysDate() ) ) ) )
         ::oFinInf:cText( CtoD( "31/12/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Doce últimos meses"

         ::oIniInf:cText( BoY( GetSysDate() ) )
         ::oFinInf:cText( EoY( GetSysDate() ) )

      case ::cPeriodo == "Año en curso"

         ::oIniInf:cText( CtoD( "01/01/" + Str( Year( GetSysDate() ) ) ) )
         ::oFinInf:cText( CtoD( "31/12/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Año anterior"

         ::oIniInf:cText( CtoD( "01/01/" + Str( Year( GetSysDate() ) - 1 ) ) )
         ::oFinInf:cText( CtoD( "31/12/" + Str( Year( GetSysDate() ) - 1 ) ) )

   end

RETURN ( .T. )



static FUNCTION TDataCenter_cEmpresaDescription( cTableName ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   if ( "DATOS" == Upper( Left( cTableName, 5 ) ) )
      RETURN ( "DATOS" )
   end

   if ( "EMP" == Upper( Left( cTableName, 3 ) ) )
      RETURN ( SubStr( cTableName, 4, 4 ) )
   end

RETURN ( cTableName )



static FUNCTION TDataCenter_cTableDescription( cTableName ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local nScan
   local cDescription   := cTableName

   cTableName           := Upper( cTableName )

   if ( "DATOS" == Upper( Left( cTableName, 5 ) ) )
      nScan             := aScan( ::aDataTables, {|o| Upper( Alltrim( o:cName ) ) $ Alltrim( cTableName ) } )
      if nScan <> 0
         cDescription   := ::aDataTables[ nScan ]:cDescription
      end
   end

   if ( "EMP" == Upper( Left( cTableName, 3 ) ) )
      nScan             := aScan( ::aEmpresaTables, {|o| Upper( SubStr( Alltrim( o:cName ), 8 ) ) $ SubStr( Alltrim( cTableName ), 8 ) } )
      if nScan <> 0
         cDescription   := ::aEmpresaTables[ nScan ]:cDescription
      end
   end

RETURN ( cDescription )



static FUNCTION TDataCenter_cOperationDescription( cOperation ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

RETURN ( ::hOperationDescription[ cOperation ] )



static FUNCTION TDataCenter_Resource( nId ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local n
   local oBmp

   if nAnd( nId, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      RETURN nil
   end

   if !TReindex():lCreateHandle()
      msgStop( "Esta opción ya ha sido inicada por otro usuario", "Atención" )
      RETURN nil
   end

   if oWnd() <> nil
      oWnd():CloseAll()
   end





   ::oDlg = TDialog():New(,,,,, "ReindexADS",, .F.,,,,, oWnd(), .F.,,,,,, .F.,, "::oDlg", nil, )

      oBmp := TBitmap():ReDefine( 600, "gc_recycle_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )

      ::aChkIndices[ 1 ] := TCheckBox():ReDefine( 100, { | u | If( PCount()==0, ::aLgcIndices[ 1 ], ::aLgcIndices[ 1 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )
      ::aChkIndices[ 2 ] := TCheckBox():ReDefine( 101, { | u | If( PCount()==0, ::aLgcIndices[ 2 ], ::aLgcIndices[ 2 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )
      ::aChkIndices[ 3 ] := TCheckBox():ReDefine( 102, { | u | If( PCount()==0, ::aLgcIndices[ 3 ], ::aLgcIndices[ 3 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )
      ::aChkIndices[ 4 ] := TCheckBox():ReDefine( 103, { | u | If( PCount()==0, ::aLgcIndices[ 4 ], ::aLgcIndices[ 4 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )

      ::aProgress[ 1 ]  := TApoloMeter():ReDefine( 200, { | u | if( pCount() == 0, ::nProgress[ 1 ], ::nProgress[ 1 ] := u ) }, 10, ::oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )
      ::aProgress[ 2 ]  := TApoloMeter():ReDefine( 210, { | u | if( pCount() == 0, ::nProgress[ 2 ], ::nProgress[ 2 ] := u ) }, 10, ::oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )
      ::aProgress[ 3 ]  := TApoloMeter():ReDefine( 220, { | u | if( pCount() == 0, ::nProgress[ 3 ], ::nProgress[ 3 ] := u ) }, 10, ::oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )
      ::aProgress[ 4 ]  := TApoloMeter():ReDefine( 230, { | u | if( pCount() == 0, ::nProgress[ 4 ], ::nProgress[ 4 ] := u ) }, 10, ::oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )

      ::oMsg := TSay():ReDefine( 110, {|| ::cMsg}, ::oDlg,,,, .F.,, .F., .F., )





      TButton():ReDefine( 500, {||( ::allOptions() )}, ::oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 510, {||( ::noneOptions() )}, ::oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 1, {||( ::StartResource() )}, ::oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:AddFastKey( 116, {|| ::StartResource() } )

      ::oDlg:bStart  := { || if( ::lAutoStart, ::StartResource(),  ) }

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   TReindex():lCloseHandle()



   dbCloseAll()



   InitServices()

   if !Empty( oBmp )
      oBmp:End()
   end

RETURN ( Self )



static FUNCTION TDataCenter_StartResource( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   ::oDlg:Disable()
   ::oDlg:bValid  := {|| .F. }

   CursorWait()

   ::BuildData()

   ::BuildEmpresa()

   ::Reindex()

   ::Syncronize()

   ::SeedersSqlToAds()

   CursorWE()

   msgInfo( "Proceso finalizado con exito.")

   ::oDlg:bValid  := {|| .T. }
   ::oDlg:Enable()
   ::oDlg:End()

RETURN ( Self )



static FUNCTION TDataCenter_changeOptions( lOption ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   aEval( ::aChkIndices, { | a | if( lOption, a:Check(), a:unCheck() ) } )
   aEval( ::aChkIndices, { | a | a:Refresh() } )

RETURN ( Self )



static FUNCTION TDataCenter_Reindex( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable
   local cAlias

   dbCloseAll()

   ::DisableTriggers()



   if ::aLgcIndices[ 1 ]

      if !Empty( ::aProgress[ 1 ] )
         ::aProgress[ 1 ]:SetTotal( len( ::aDataTables ) )
      end

      for each oTable in ::aDataTables

         if !Empty( ::oMsg )
            ::oMsg:SetText( "Generando índices : " + oTable:cDescription )
         end

         ::ReindexTable( oTable )

         if !Empty( ::aProgress[ 1 ] )
            ::aProgress[ 1 ]:Set( hb_EnumIndex() )
         end

         sysrefresh()

      next

   end



   if ::aLgcIndices[ 2 ]

      if !Empty( ::aProgress[ 2 ] )
         ::aProgress[ 2 ]:SetTotal( len( ::aEmpresaTables ) )
      end

      for each oTable in ::aEmpresaTables

         if !Empty( ::oMsg )
            ::oMsg:SetText( "Generando índices : " + oTable:cDescription )
         end

         ::ReindexTable( oTable )

         if !Empty( ::aProgress[ 2 ] )
            ::aProgress[ 2 ]:Set( hb_EnumIndex() )
         end

         sysrefresh()

      next

   end

   ::EnableTriggers()

RETURN ( Self )



static FUNCTION TDataCenter_Syncronize( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable
   local cAlias

   ::DisableTriggers()





   if ::aLgcIndices[ 3 ]

      Msgwait( "Artículos", "Espere", 2 )
      SynArt( cPatEmp() )
      Msgwait( "Albaranes de proveedor", "Espere", 2 )
      SynAlbPrv( cPatEmp() )
      Msgwait( "Facturas de proveedor", "Espere", 2 )
      SynFacPrv( cPatEmp() )
      Msgwait( "Albaranes de clientes", "Espere", 2 )
      SynAlbCli( cPatEmp() )
      Msgwait( "Facturas de clientes", "Espere", 2 )
      SynFacCli( cPatEmp() )
      Msgwait( "Fin", "Espere", 2 )





































   end

   ::EnableTriggers()

RETURN ( Self )



static FUNCTION TDataCenter_ReindexTable( oTable ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oError
   local oBlock

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !empty( oTable:bCreateIndex )

         eval( oTable:bCreateIndex )
      else
         dbusearea( .T., ( cDriver() ), ( oTable:cName ), "Table", .F. )
         if !neterr() .AND. ( "Table" )->( used() )
            ( "Table" )->( ordsetfocus( 1 ) )
            ( "Table" )->( adsReindex() )
            ( "Table" )->( dbclosearea() )
         end
      endif

   RECOVER USING oError



   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TDataCenter_SeedersSqlToAds( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oError
   local oBlock



   if !( getSQLDatabase():Connect() )
      msgStop( "No se ha podido conectar a la base de datos MySQL" + Chr(13)+Chr(10) + getSQLDatabase():sayConexionInfo() )
      RETURN ( Self )
   end

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if ::aLgcIndices[ 4 ]

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Pasamos tablas de Sql a ADS" )
      end

      ::SeederSqlMovAlm()

      ::SeederSqlAgenda()

      ::SeederSqlTransportistas()



      ::SeederSqlOdooIds()

      ::SeederSqlUsers()

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error en los seeders." )

   end

   ErrorBlock( oBlock )



   getSQLDatabase():Disconnect()

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlMovAlm( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHashHeads  := {}

   if SQLMovimientosAlmacenModel():lExisteTable() .AND. SQLMovimientosAlmacenLineasModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Seeder movimientos de almacén" )
      end

      aHashHeads        := SQLMovimientosAlmacenModel():SeederToADS()

      if hb_isarray( aHashHeads ) .AND. Len( aHashHeads ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHashHeads ) )
         end

         aeval( aHashHeads, {| hHash, n | ::AddSeederMovAlm( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHashHeads ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_AddSeederMovAlm( hHashHead ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHashLines  := {}

   if Empty( hGet( hHashHead, "numero" ) )
      return ( self )
   end

   MovimientosAlmacenModel():InsertFromHashSql( hHashHead )

   aHashLines     := SQLMovimientosAlmacenLineasModel():SeederToADS( hGet( hHashHead, "uuid" ) )

   if !Empty( ::oMsg )
      ::oMsg:SetText( hGet( hHashHead, "uuid" ) )
   end

   if hb_isarray( aHashLines ) .AND. Len( aHashLines ) <> 0
      aeval( aHashLines, {| hHash, n | MovimientosAlmacenLineasModel():InsertFromHashSql( hHashHead, hHash ) } )
   end

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlAgenda( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLListinModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Seeder listín telefónico" )
      end

      aHash        := SQLListinModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | AgendaModel():InsertFromHashSql( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlTransportistas( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLTransportistasModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Transportistas" )
      end

      aHash        := SQLTransportistasModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | ::AddSeederTransportista( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_AddSeederTransportista( hHashHead ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local hHashDir

   if SQLDireccionesModel():lExisteTable()
      hHashDir       := SQLDireccionesModel():SeederToADS( hGet( hHashHead, "uuid" ) )
   end

   TransportistasModel():InsertFromHashSql( hHashHead, hHashDir )

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlConfiguracionEmpresa( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLConfiguracionEmpresasModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Configuraciones de empresa" )
      end

      aHash        := SQLConfiguracionEmpresasModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | ConfiguracionesEmpresaModel():InsertFromHashSql( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlOdooIds( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLOdooIdsModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Ids exportación hasta Odoo" )
      end

      aHash        := SQLOdooIdsModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | OdooIdsModel():InsertFromHashSql( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlUsers( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   ::SeederSqlDetallePermisos()
   ::SeederSqlPermisos()
   ::SeederSqlRoles()
   ::SeederSqlUsuarios()

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlUsuarios( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLUsuariosModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Usuarios exportación hasta Odoo" )
      end

      aHash        := SQLUsuariosModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | UsuariosModel():InsertFromHashSql( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

   CryptUsersPasswords()

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlRoles( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLRolesModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Roles de usuarios" )
      end

      aHash        := SQLRolesModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | RolesModel():InsertFromHashSql( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlPermisos( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLPermisosModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Permisos de usuarios" )
      end

      aHash        := SQLPermisosModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | PermisosModel():InsertFromHashSql( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_SeederSqlDetallePermisos( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local aHash  := {}

   if SQLPermisosOpcionesModel():lExisteTable()

      if !Empty( ::oMsg )
         ::oMsg:SetText( "Detalle permisos usuarios" )
      end

      aHash        := SQLPermisosOpcionesModel():SeederToADS()

      if hb_isarray( aHash ) .AND. Len( aHash ) <> 0

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:SetTotal( len( aHash ) )
         end

         aeval( aHash, {| hHash, n | DetPermisosModel():InsertFromHashSql( hHash ), if( !Empty( ::aProgress[ 4 ] ), ::aProgress[ 4 ]:Set( n ), ) } )

         if !Empty( ::aProgress[ 4 ] )
            ::aProgress[ 4 ]:Set( len( aHash ) )
         end

      end

   end

RETURN ( Self )



static FUNCTION TDataCenter_ActualizaTable( oTable, cPath ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local i
   local cOld
   local cTmp
   local lCopy
   local dbfOld
   local dbfTmp
   local nField
   local aField

   local oError
   local oBlock

   lCopy             := .F.
   cOld              := oTable:cName
   cTmp              := cEmpTmp() + cNoPath( oTable:cName )

   if !lExistTable( cTmp + ".Dbf" )
      msgStop( "No existe" + cTmp + ".Dbf" )
      RETURN .F.
   end





   if lExistTable( cOld + ".Dbf" )

      oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cOld + ".Dbf" ), ( cCheckArea( "OLD", @dbfOld ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if NetErr()
         msgStop( cOld + ".Dbf", "Error de apertura " )
      end

      dbUseArea( .T., ( cDriver() ), ( cTmp + ".Dbf" ), ( cCheckArea( "TMP", @dbfTmp ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if NetErr()
         msgStop( cTmp + ".Dbf", "Error de apertura" )
      end



      nField            := ( dbfTmp )->( fCount() )
      aField            := Array( nField )

      for i := 1 to nField
         aField[ i ]    := ( dbfTmp )->( FieldPos( ( dbfOld )->( FieldName( i ) ) ) )
      next

      while !( dbfOld )->( eof() )

         ( dbfTmp )->( dbAppend() )

         aeval( aField, {| nFld, i | if( nFld <> 0, ( dbfTmp )->( FieldPut( nFld, ( dbfOld )->( FieldGet( i ) ) ) ), ) } )

         ( dbfOld )->( dbSkip() )

         SysRefresh()

      end

      lCopy             := ( dbfOld )->( eof() )

      ( dbfOld )->( dbCloseArea() )
      ( dbfTmp )->( dbCloseArea() )

      RECOVER USING oError
         msgStop( "Imposible actualizar tablas." + Chr(13)+Chr(10) + ErrorMessage( oError ) )
      end

      ErrorBlock( oBlock )

   end



   if lCopy

      fEraseTable( cOld + ".Dbf" )
      fEraseTable( cOld + ".Fpt" )
      fEraseTable( cOld + ".Cdx" )

      fRenameTable( cTmp + ".Dbf", cOld + ".Dbf" )
      fRenameTable( cTmp + ".Fpt", cOld + ".Fpt" )
      fRenameTable( cTmp + ".Cdx", cOld + ".Cdx" )

   else

      MsgStop( "No se actualizo el fichero " + cNoPath( cOld ) + ".Dbf" )

   end

RETURN ( lCopy )



static FUNCTION TDataCenter_ActualizaEmpresa( oMsg ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTable

   if !Empty( oMsg )
      ::oMsg            := oMsg
   end



   ::ReLoadTables()



   SetIndexToCdx()

   ::BuildData()

   ::BuildEmpresa()



   for each oTable in ::aDataTables

      ::oMsg:SetText( "Creando nueva tabla : " + oTable:cDescription )
      ::CreateTemporalTable( oTable )

      ::oMsg:SetText( "Actualizando tabla : " + oTable:cDescription )
      ::ActualizaDataTable( oTable )

   next

   for each oTable in ::aEmpresaTables

      ::oMsg:SetText( "Creando nueva tabla : " + oTable:cDescription )
      ::CreateTemporalTable( oTable )

      ::oMsg:SetText( "Actualizando tabla : " + oTable:cDescription )
      ::ActualizaEmpresaTable( oTable )

   next



   setIndexToADSCDX()

   ::BuildData()

   ::BuildEmpresa()



   for each oTable in ::aDataTables

      ::oMsg:SetText( "Eliminado tabla del diccionario : " + oTable:cDescription )
      ::deleteTableFromDataDictionary( oTable )

      ::oMsg:SetText( "Añadiendo tabla al diccionario de datos : " + oTable:cDescription )
      ::AddTableToDataDictionary( oTable )

      ::oMsg:SetText( "Reindexando : " + oTable:cDescription )
      ::ReindexTable( oTable )

   next

   for each oTable in ::aEmpresaTables

      ::oMsg:SetText( "Eliminado tabla del diccionario : " + oTable:cDescription )
      ::deleteTableFromDataDictionary( oTable )

      ::oMsg:SetText( "Añadiendo tabla al diccionario de datos : " + oTable:cDescription )
      ::AddTableToDataDictionary( oTable )

      ::oMsg:SetText( "Reindexando : " + oTable:cDescription )
      ::ReindexTable( oTable )

   next



   ::ReLoadTables()

RETURN ( Self )



static FUNCTION TDataCenter_DisableTriggers( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm





   cStm           := "EXECUTE PROCEDURE sp_disableTriggers( NULL, NULL, FALSE, 0 );"

RETURN ( ::ExecuteSqlStatement( cStm, "DisableTriggers" ) )



static FUNCTION TDataCenter_EnableTriggers( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm





   cStm           := "EXECUTE PROCEDURE sp_enableTriggers( NULL, NULL, FALSE, 0 );"

RETURN ( ::ExecuteSqlStatement( cStm, "EnableTriggers" ) )



static FUNCTION TDataCenter_SetAplicationID( cNombreUsuario ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm

   If( cNombreUsuario == nil, cNombreUsuario := "Administrador", ) ;





   cStm                    := "EXECUTE PROCEDURE sp_SetApplicationID( '" + Alltrim( cNombreUsuario ) + "' ) ;"

RETURN ( ::ExecuteSqlStatement( cStm, "SetAplicationID" ) )



static FUNCTION TDataCenter_SqlCreateIndex( tableName, indexName, tagName, Expression, Condition, Options, PageSize ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm

   tableName            := quoted( tableName )

   if empty( indexName )
      indexName         := "N"
   else
      indexName         := quoted( indexName )
   end
   tagName              := quoted( tagName )
   Expression           := quoted( Expression )

   if empty( Condition )
      Condition         := "NULL"
   else
      Condition         := quoted( Condition )
   end

   if empty( Options )
      Options           := alltrim( str( 2 ) )
   else
      Options           := alltrim( str( Options ) )
   end

   if empty( PageSize )
      PageSize          := alltrim( str( 2048 ) )
   else
      PageSize          := alltrim( str( PageSize ) )
   end

   cStm                 := "EXECUTE PROCEDURE sp_CreateIndex( " + tableName + ", " + indexName + ", " + tagName + ", " + Expression + ", " +  Condition + ", " + Options + ", " + PageSize + " );"

RETURN ( ::ExecuteSqlStatement( cStm, "CreateIndex" ) )



static FUNCTION TDataCenter_ExecuteSqlStatement( cSql, cSqlStatement, hStatement ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local lOk
   local nError
   local oError
   local oBlock
   local cErrorAds

   If( cSqlStatement == nil, cSqlStatement := "ADSArea", ) ;
   If( hStatement == nil, hStatement := 2, ) ;

   if hStatement == 3
      msgalert( cSql, "ADS_ADT" )
   end

   CursorWait()

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::CloseArea( cSqlStatement )

      ADSCacheOpenCursors( 0 )

      dbSelectArea( 0 )

      lOk                  := ADSCreateSQLStatement( cSqlStatement, hStatement )
      if lOk

         lOk               := ADSExecuteSQLDirect( cSql )
         if !lOk
            nError         := AdsGetLastError( @cErrorAds )


            msgStop( "Error : " + Str( nError) + "[" + cErrorAds + "]" + Chr(13)+Chr(10) +   "SQL : " + cSql                                             , "ERROR en AdsExecuteSqlDirect" )
         endif

      else

         nError            := AdsGetLastError( @cErrorAds )


         msgStop( "Error : " + Str( nError) + "[" + cErrorAds + "]" + Chr(13)+Chr(10) +   "SQL : " + cSql                                             , "ERROR en ADSCreateSQLStatement" )

      end

      if lOk
         ADSCacheOpenCursors( 0 )
         ADSClrCallBack()
      endif

   RECOVER USING oError
      msgStop( ErrorMessage( oError ), "Error en sentencia SQL" )
   end
   ErrorBlock( oBlock )

   CursorWE()

RETURN ( lOk )



static FUNCTION TDataCenter_ExecuteSqlDirect( cSql ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local lOk
   local nError
   local cErrorAds

   lOk               := ADSExecuteSQLDirect( cSql )
   if !lOk
      nError         := AdsGetLastError( @cErrorAds )


      msgStop( "Error : " + Str( nError) + "[" + cErrorAds + "]" + Chr(13)+Chr(10) +   "SQL : " + cSql                                             , "ERROR en AdsExecuteSqlDirect" )
   endif

RETURN ( lOk )



static FUNCTION TDataCenter_selectSATFromClient( cCodigoCliente, cAnno, cCodigoArticulo ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm





   cStm           := "SELECT lineasSat.cRef, "
   cStm           +=          "lineasSat.cSerSat, "
   cStm           +=          "lineasSat.nNumSat, "
   cStm           +=          "lineasSat.cSufSat, "
   cStm           +=          "lineasSat.nCntAct, "
   cStm           +=          "lineasSat.mObsLin, "
   cStm           +=          "cabeceraSat.dFecSat, "
   cStm           +=          "cabeceraSat.cSerSat, "
   cStm           +=          "cabeceraSat.cCodOpe, "
   cStm           +=          "cabeceraSat.cCodEst, "
   cStm           +=          "cabeceraSat.cSituac, "
   cStm           +=          "operario.cNomTra, "
   cStm           +=          "estadoSat.cNombre, "
   cStm           +=          "estadoSat.cTipo, "
   cStm           +=          "articulos.Nombre, "
   cStm           +=          "articulos.cDesUbi "
   cStm           += "FROM " + cPatEmp() + "SatCliL lineasSat "
   cStm           += "INNER JOIN " + cPatEmp() + "SatCliT cabeceraSat on lineasSat.cSerSat = cabeceraSat.cSerSat and lineasSat.nNumSat = cabeceraSat.nNumSat and lineasSat.cSufSat = cabeceraSat.cSufSat "
   cStm           += "LEFT JOIN " + cPatEmp() + "OpeT operario on cabeceraSat.cCodOpe = operario.cCodTra "
   cStm           += "LEFT JOIN " + cPatEmp() + "EstadoSat estadoSat on cabeceraSat.cCodEst = estadoSat.cCodigo "
   cStm           += "LEFT JOIN " + cPatEmp() + "Articulo articulos on lineasSat.cRef = articulos.Codigo "

   if empty( cAnno )
      cStm        += "WHERE lineasSat.cCodCli = '" + alltrim( cCodigoCliente ) + "' AND lineasSat.cRef = '" + cCodigoArticulo + "' "
   else
      cStm        += "WHERE lineasSat.cCodCli = '" + alltrim( cCodigoCliente ) + "' AND YEAR( lineasSat.dFecSat ) = " + cAnno + " "
   end

   cStm           += "ORDER BY lineasSat.cRef, lineasSat.dFecSat DESC"

RETURN ( ::ExecuteSqlStatement( cStm, "SatCli" ) )



static FUNCTION TDataCenter_treeProductFromSAT( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local oTree
   local cCodigoArticulo

   if !SatCli->( used() )
      RETURN ( nil )
   end

   SatCli->( dbgotop() )

   TreeInit()
   oTree                   := TreeBegin()

      while !SatCli->( eof() )

         if empty( cCodigoArticulo )
            TreeAddItem( SatCli->cRef ):Cargo     := hashRecord( "SatCli" )
            TreeBegin()
            cCodigoArticulo   := SatCli->cRef

         else

            if cCodigoArticulo <> SatCli->cRef
               TreeEnd()
               cCodigoArticulo   := SatCli->cRef
               TreeAddItem( SatCli->cRef ):Cargo  := hashRecord( "SatCli" )
               TreeBegin(,)
            endif

         endif

         if SatCli->cRef == cCodigoArticulo
            TreeAddItem( SatCli->cRef ):Cargo     := hashRecord( "SatCli" )
         endif

         SatCli->( dbSkip() )

      end

   TreeEnd()

   TreeEnd()

   SatCli->( dbgotop() )

RETURN ( oTree )



static FUNCTION TDataCenter_selectSATFromArticulo( cCodigoArticulo ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

   local cStm





   cStm           := "SELECT lineasSat.cRef        AS codigoArticulo, "
   cStm           +=          "lineasSat.cSerSat   AS serieLineaSAT, "
   cStm           +=          "lineasSat.nNumSat   AS numeroLineaSAT, "
   cStm           +=          "lineasSat.cSufSat   AS sufijoLineaSAT, "
   cStm           +=          "lineasSat.mObsLin   AS observacionesLineaSAT, "
   cStm           +=          "lineasSat.nCntAct   AS contadorLineaSAT, "
   cStm           +=          "cabeceraSat.dFecSat AS fechaSAT, "
   cStm           +=          "cabeceraSat.cCodOpe, "
   cStm           +=          "cabeceraSat.cCodEst, "
   cStm           +=          "cabeceraSat.cSituac, "
   cStm           +=          "cabeceraSat.cHorIni AS horaInicioSAT, "
   cStm           +=          "cabeceraSat.cHorFin AS horaFinSAT, "
   cStm           +=          "operario.cNomTra    AS operarioNombre, "
   cStm           +=          "estadoSat.cNombre   AS nombreEstado, "
   cStm           +=          "estadoSat.cTipo     AS tipoEstadoSAT, "
   cStm           +=          "articulos.cDesUbi   AS ubicacionArticulo, "
   cStm           +=          "clientes.titulo     AS clienteNombre "

   cStm           += "FROM " + cPatEmp() + "SatCliL lineasSat "

   cStm           += "INNER JOIN " + cPatEmp() + "SatCliT   cabeceraSat on lineasSat.cSerSat = cabeceraSat.cSerSat and lineasSat.nNumSat = cabeceraSat.nNumSat and lineasSat.cSufSat = cabeceraSat.cSufSat "

   cStm           += "LEFT JOIN " + cPatEmp() + "EstadoSat  estadoSat on cabeceraSat.cCodEst = estadoSat.cCodigo "
   cStm           += "LEFT JOIN " + cPatEmp() + "OpeT       operario on cabeceraSat.cCodOpe = operario.cCodTra "
   cStm           += "LEFT JOIN " + cPatEmp() + "Articulo   articulos on lineasSat.cRef = articulos.Codigo "
   cStm           += "LEFT JOIN " + cPatEmp() + "Client     clientes on cabeceraSat.cCodCli = clientes.Cod "

   cStm           += "WHERE lineasSat.cRef = '" + alltrim( cCodigoArticulo ) + "' "

   cStm           += "ORDER BY lineasSat.cRef, lineasSat.dFecSat DESC"

RETURN ( ::ExecuteSqlStatement( cStm, "SatCliArticulos" ) )



static FUNCTION TDataCenter_ConvertEmpresaToSQL( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter

RETURN ( Self )



static FUNCTION TDataCenter_MigrateEmpresaToSQL( ) ; local Self AS CLASS TDataCenter := QSelf() AS CLASS TDataCenter







   TransaccionesComercialesLineasModel()  :TranslateSATClientesLineasCodigoTiposVentaToId()  :TranslatePresupuestoClientesLineasCodigoTiposVentaToId()  :TranslatePedidosClientesLineasCodigoTiposVentaToId()  :TranslateAlbaranesClientesLineasCodigoTiposVentaToId()  :TranslateFacturasClientesLineasCodigoTiposVentaToId()  :TranslateFacturasRectificativasLineasCodigoTiposVentaToId()

RETURN ( Self )








_HB_CLASS TDataTable ; function TDataTable ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDataTable", iif( .F., { }, { @HBObject() } ), @TDataTable() ) ) ;

   _HB_MEMBER { cName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )
   _HB_MEMBER { cArea } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cArea"}, .F. )
   _HB_MEMBER { cPath } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPath"}, .F. )
   _HB_MEMBER { cAlias } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAlias"}, .F. )
   _HB_MEMBER { cDataFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDataFile"}, .F. )
   _HB_MEMBER { cIndexFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIndexFile"}, .F. )
   _HB_MEMBER { cDescription } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDescription"}, .F. )
   _HB_MEMBER { aStruct } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aStruct"}, .F. )
   _HB_MEMBER { lTrigger } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTrigger"}, .F. )
   _HB_MEMBER { hDefinition } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDefinition"}, .F. )
   _HB_MEMBER { bSyncFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bSyncFile"}, .F. )
   _HB_MEMBER { bCreateFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bCreateFile"}, .F. )
   _HB_MEMBER { bCreateIndex } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bCreateIndex"}, .F. )
   _HB_MEMBER { adsCreateIndex } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"adsCreateIndex"}, .F. )
   _HB_MEMBER { aDictionary } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDictionary"}, .F. )
   _HB_MEMBER { hIndex } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hIndex"}, .F. )
   _HB_MEMBER { aDefaultValue } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDefaultValue"}, .F. )
   _HB_MEMBER { bId } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bId"}, .F. )

   _HB_MEMBER { cShortDataFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cShortDataFile"}, .F. )
   _HB_MEMBER { cShortIndexFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cShortIndexFile"}, .F. )

   _HB_MEMBER { cFullADSDataFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFullADSDataFile"}, .F. )
   _HB_MEMBER { cFullADSIndexFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFullADSIndexFile"}, .F. )
   _HB_MEMBER { cFullCdxDataFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFullCdxDataFile"}, .F. )
   _HB_MEMBER { cFullCdxIndexFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFullCdxIndexFile"}, .F. )

   _HB_MEMBER New( cArea); oClass:AddMethod( "New", @TDataTable_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Name(); oClass:AddInline( "Name", {|Self | ( ( Self ) ), ( ::cPath + ::cArea ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER NameTable(); oClass:AddInline( "NameTable", {|Self | ( ( Self ) ), ( ::cArea + ".Dbf" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER NameIndex(); oClass:AddInline( "NameIndex", {|Self | ( ( Self ) ), ( ::cArea + ".Cdx" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cFileName(); oClass:AddInline( "cFileName", {|Self | ( ( Self ) ), ( Upper( ::cArea ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDataBase( cDriver); oClass:AddMethod( "getDataBase", @TDataTable_getDataBase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER msgInfo(); oClass:AddInline( "msgInfo", {|Self | ( ( Self ) ), ( msgInfo( ::Say() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )











   _HB_MEMBER Say(); oClass:AddInline( "Say", {|Self | ( ( Self ) ), ( "cArea"              + " : "  +  ::cArea               + Chr(13)+Chr(10) + "cName"              + " : "  +  ::cName               + Chr(13)+Chr(10) + "cShortDataFile"     + " : "  +  ::cShortDataFile     + Chr(13)+Chr(10) + "cShortIndexFile"    + " : "  +  ::cShortIndexFile    + Chr(13)+Chr(10) + "cFullADSDataFile"   + " : "  +  ::cFullADSDataFile    + Chr(13)+Chr(10) + "cFullADSIndexFile"  + " : "  +  ::cFullADSIndexFile   + Chr(13)+Chr(10) + "cFullCdxDataFile"   + " : "  +  ::cFullCdxDataFile    + Chr(13)+Chr(10) + "cFullCdxIndexFile"  + " : "  +  ::cFullCdxIndexFile   + Chr(13)+Chr(10) + "cDataFile"          + " : "  +  ::cDataFile           + Chr(13)+Chr(10) + "cIndexFile"         + " : "  +  ::cIndexFile          + Chr(13)+Chr(10) + "cDescription"       + " : "  +  ::cDescription ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setAlias(); oClass:AddInline( "setAlias", {|Self, cAlias | ( ( Self ) ), ( ::cAlias := cAlias ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getAlias(); oClass:AddInline( "getAlias", {|Self | ( ( Self ) ), ( ::cAlias ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDictionary(); oClass:AddInline( "getDictionary", {|Self | ( ( Self ) ), ( ::aDictionary ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getIndex(); oClass:AddInline( "getIndex", {|Self | ( ( Self ) ), ( ::hIndex ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER checkArea(); oClass:AddInline( "checkArea", {|Self, area | ( ( Self ) ), ( cCheckArea( ::cArea, @area ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getName(); oClass:AddInline( "getName", {|Self | ( ( Self ) ), ( ::cName ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDataTable ;



   static FUNCTION TDataTable_New( cArea, cPath ) ; local Self AS CLASS TDataTable := QSelf() AS CLASS TDataTable

      If( cPath == nil, cPath := cPathEmpresa(), ) ;

      ::cArea                 := cArea
      ::cPath                 := cPath
      ::cName                 := Upper( cPath + cArea )

      ::cShortDataFile        := cPath + "\" + ::NameTable()
      ::cShortIndexFile       := cPath + "\" + ::NameIndex()

      ::cFullAdsDataFile      := cAdsUNC() + ::cShortDataFile
      ::cFullAdsIndexFile     := cAdsUNC() + ::cShortIndexFile

      ::cFullCdxDataFile      := fullCurDir() + ::cShortDataFile
      ::cFullCdxIndexFile     := fullCurDir() + ::cShortIndexFile

   RETURN ( Self )



   static FUNCTION TDataTable_getDataBase( cDriver ) ; local Self AS CLASS TDataTable := QSelf() AS CLASS TDataTable

      if isADSDriver( cDriver )
         RETURN ( ::cName )
      end

   RETURN ( ::cFullCdxDataFile )






_HB_CLASS TDataUser ; function TDataUser ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDataUser", iif( .F., { }, { @HBObject() } ), @TDataUser() ) ) ;

   _HB_MEMBER { cName } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName"}, .F. )
   _HB_MEMBER { cPassword } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPassword"}, .F. )
   _HB_MEMBER { cComment } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cComment"}, .F. )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDataUser ;







Function ApoloDDAddTable( cTableName, cTableDatabase, cTableIndex )

   local nError
   local cError
   local lAddTable   := .T.

   if !AdsisTableInDataDictionary( cTableName )
      if !AdsDDaddTable( cTableName, cTableDatabase, cTableIndex )
         lAddTable   := .F.
         msgInfo( "Error adding table : " + cValToChar( adsGetLastError( @cError ) ), cError )
      end
   end

RETURN ( lAddTable )



Function adsIsTableInDataDictionary( cTable )

   local aAdsTables

   if Empty( aAdsTables )
      aAdsTables  := AdsDirectory()
   end

RETURN ( aScan( aAdsTables, {|c| Left( Upper( c ), len( c ) - 1 ) == Upper( cTable ) } ) <> 0 )



Function adsSelectSQLScript( cScript )

   local i
   local aData             := {}
   local cArea
   local lGood             := .F.

   if !Empty( cScript )

      AdsCacheOpenCursors( 0 )
      dbSelectArea( 0 )

      if !ADSCreateSQLStatement( "SQLArea", 2 )

         SQLArea->( dbCloseArea() )

         MsgStop( "AdsCreateSqlStatement() failed with error "+ cValToChar( ADSGetLastError() ) )

      else

         lGood             := ADSExecuteSQLDirect( cScript )

      endif

      if lGood

         CursorWait()

         while !( SQLArea->( eof() ) )

            if !Empty( SQLArea->( fieldGet( 1 ) ) )
               aAdd( aData, SQLArea->( fieldGet( 1 ) ) )
            end

            SQLArea->( dbSkip() )

         end

         CursorWE()

         AdsCacheOpenCursors( 0 )
         AdsClrCallBack()

         if SQLArea->( Used() )
            SQLArea->( dbCloseArea() )
         endif

      end

   end

RETURN ( aData )



Function ADSExecuteSQLScript( cScript )

   local lGood             := .F.
   local cSqlAlias         := "SQLArea"

   if !Empty( cScript )

      AdsCacheOpenCursors( 0 )

      dbSelectArea( 0 )

      if Select( cSqlAlias ) > 0
         ( cSqlAlias )->( dbCloseArea() )
      end

      if !ADSCreateSQLStatement( cSqlAlias, 2 )

         ( cSqlAlias )->( dbCloseArea() )

         MsgStop( "AdsCreateSqlStatement() failed with error " + cValToChar( ADSGetLastError() ) )

      else

         if !ADSVerifySQL( cScript )

            MsgStop( "ADSVerifySQL() failed with error "+ cValToChar( ADSGetLastError() ) )

         else

            lGood          := ADSExecuteSQLDirect( cScript )

            if !lGood

               MsgStop( "ADSExecuteSQLDirect() failed with error " + cValToChar( ADSGetLastError() ) )

            end

         end

      endif

      AdsCacheOpenCursors( 0 )
      AdsClrCallBack()

      if Select( cSqlAlias ) > 0
         ( cSqlAlias )->( dbCloseArea() )
      endif

   end

RETURN ( lGood )



Function ADSRunSQL( cSqlAlias, cSqlStatement, lShow )

   local lGood       := .F.
   local cOldAlias   := Alias()

   If( lShow == nil, lShow := .F., ) ;

   if !Empty( cSqlAlias ) .AND. !Empty( cSqlStatement )

      cSqlStatement  := StrTran( cSqlStatement, ";", "" )

      dbSelectArea( 0 )

      if !AdsCreateSqlStatement( cSqlAlias, 3 )

         MsgStop( "Error AdsCreateSqlStatement()" + Chr(13)+Chr(10) + "Error: " + cValtoChar( AdsGetLastError() ) )

      else

         if lShow
            MsgInfo( cSqlStatement, "SQLDebug")
         endif

         if !AdsExecuteSqlDirect( cSqlStatement )

            ( cSqlAlias )->( dbCloseArea() )

            msgStop( "Error AdsExecuteSqlDirect( " + cSqlStatement + " )" + Chr(13)+Chr(10) + "Error:" + cValtoChar( AdsGetLastError() ) )

         else

            lGood    := .T.

         endif

      endif

      if !Empty( cOldAlias )
         dbSelectArea( cOldAlias )
      endif

   endif

RETURN lGood
