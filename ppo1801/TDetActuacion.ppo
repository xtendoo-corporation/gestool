#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDetActuacion.prg"
_HB_CLASS TDetActuacion ; function TDetActuacion ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetActuacion", iif( .T., { @TDet() }, { @HBObject() } ), @TDetActuacion() ) ) ;

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetActuacion_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetActuacion_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDetActuacion_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetActuacion_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave(); oClass:AddMethod( "lPreSave", @TDetActuacion_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PreSaveDetails(); oClass:AddMethod( "PreSaveDetails", @TDetActuacion_PreSaveDetails(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetActuacion ;



static FUNCTION TDetActuacion_DefineFiles( cPath, cVia, lUniqueName, cFileName ) ; local Self AS CLASS TDetActuacion := QSelf() AS CLASS TDetActuacion

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "ExpDet", ) ;
   If( cVia == nil, cVia := cDriver(), ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "personal", ( cPath ) )

      oDbf:AddField( "cSerExp", "C", 01, 0,,,,, "Serie", .F.,, .F., {} )
      oDbf:AddField( "nNumExp", "N", 09, 0,,,,, "Número", .F.,, .F., {} )
      oDbf:AddField( "cSufExp", "C", 02, 0,,,,, "Sufijo", .F.,, .F., {} )
      oDbf:AddField( "cCodTra", "C", 05, 0,,,,, "Trabajador", .F.,, .F., {} )
      oDbf:AddField( "cCodAct", "C", 03, 0,,,,, "Actuación", .F.,, .F., {} )
      oDbf:AddField( "dFecIni", "D", 08, 0,,,,, "Fecha inicio", .F.,, .F., {} )
      oDbf:AddField( "cHorIni", "C", 05, 0,,,,, "Hora inicio", .F.,, .F., {} )
      oDbf:AddField( "dFecFin", "D", 08, 0,,,,, "Fecha fin", .F.,, .F., {} )
      oDbf:AddField( "cHorFin", "C", 05, 0,,,,, "Hora fin", .F.,, .F., {} )
      oDbf:AddField( "mMemAct", "M", 10, 0,,,,, "Descripción de la actuación", .F.,, .F., {} )
      oDbf:AddField( "lActEnd", "L", 01, 0,,,,, "Tarea finalizada", .F.,, .F., {} )

      oDbf:AddIndex( "cNumExp", ( cFileName ), "cSerExp + Str( nNumExp, 9 ) + cSufExp",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodTra", ( cFileName ), "cCodTra",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodAct", ( cFileName ), "cCodAct",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetActuacion_OpenFiles( lExclusive ) ; local Self AS CLASS TDetActuacion := QSelf() AS CLASS TDetActuacion

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::oDbf            := ::DefineFiles()
   end

   ::oDbf:Activate( .F., !lExclusive )

   ::bOnPreSaveDetail   := {|| ::PreSaveDetails() }

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDetActuacion_CloseFiles( ) ; local Self AS CLASS TDetActuacion := QSelf() AS CLASS TDetActuacion

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
      ::oDbf            := nil
   end

RETURN .T.



static FUNCTION TDetActuacion_Resource( nMode ) ; local Self AS CLASS TDetActuacion := QSelf() AS CLASS TDetActuacion

   local oDlg
   local oGetTra
   local oSayTra
   local cSayTra
   local oGetAct
   local oSayAct
   local cSayAct
   local oFecIni
   local oFecFin
   local oHorIni
   local oHorFin

   if nMode == 1

      ::oDbfVir:dFecIni := ::oParent:oDbf:dFecOrd
      ::oDbfVir:cHorIni := ::oParent:oDbf:cHorOrd
      ::oDbfVir:cCodTra := ::oParent:oDbf:cCodTra

   end





   cSayAct              := oRetFld( ::oDbfVir:cCodAct, ::oParent:oActuaciones:oDbf, "cDesAct" )
   cSayTra              := oRetFld( ::oDbfVir:cCodTra, ::oParent:oOperario:oDbf, "cNomTra" )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "actuaciones", "lExpediente",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      oGetAct := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cCodAct, ::oDbfVir:cCodAct:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )
      oGetAct:bHelp  := {|| ::oParent:oActuaciones:Buscar( oGetAct ) }
      oGetAct:bValid := {|| ::oParent:oActuaciones:Existe( oGetAct, oSayAct, "cDesAct", .T., .T., "0" ) }




      oSayAct := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cSayAct, cSayAct:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oGetTra := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:cCodTra, ::oDbfVir:cCodTra:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )
      oGetTra:bHelp  := {|| ::oParent:oOperario:Buscar( oGetTra ) }
      oGetTra:bValid := {|| ::oParent:oOperario:Existe( oGetTra, oSayTra, "cNomTra", .T., .T., "0" ) }




      oSayTra := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSayTra, cSayTra:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oFecIni := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbfVir:dFecIni, ::oDbfVir:dFecIni:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      oHorIni := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, ::oDbfVir:cHorIni, ::oDbfVir:cHorIni:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorIni ) )}, {||  ( DwTime( oHorIni ) )},,,, nil,,, )






      oFecFin := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbfVir:dFecFin, ::oDbfVir:dFecFin:= u ) }, oDlg,,, {||    ( Empty( ::oDbfVir:dFecIni ) .OR. ( ::oDbfVir:dFecIni >= ::oDbfVir:dFecIni ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      oHorFin := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, ::oDbfVir:cHorFin, ::oDbfVir:cHorFin:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorFin ) )}, {||  ( DwTime( oHorFin ) )},,,, nil,,, )









      TMultiGet():ReDefine( 130, { | u | If( PCount()==0, ::oDbfVir:mMemAct, ::oDbfVir:mMemAct:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F.,, )








      TCheckBox():ReDefine( 160, { | u | If( PCount()==0, ::oDbfVir:lActEnd, ::oDbfVir:lActEnd:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )









      TButton():ReDefine( 1, {||( ::lPreSave( oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| ::lPreSave( oDlg ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TDetActuacion_lPreSave( oDlg ) ; local Self AS CLASS TDetActuacion := QSelf() AS CLASS TDetActuacion

   if Empty( ::oDbfVir:cCodAct )
      MsgStop( "Código de la actuación no puede estar vacio" )
      Return ( .F. )
   end

   if Empty( ::oDbfVir:cCodTra )
      MsgStop( "Código del operario no puede estar vacio" )
      Return ( .F. )
   end

RETURN ( oDlg:end( 1 ) )



static FUNCTION TDetActuacion_PreSaveDetails( ) ; local Self AS CLASS TDetActuacion := QSelf() AS CLASS TDetActuacion

   ::oDbfVir:cSerExp  := ::oParent:oDbf:cSerExp
   ::oDbfVir:nNumExp  := ::oParent:oDbf:nNumExp
   ::oDbfVir:cSufExp  := ::oParent:oDbf:cSufExp

RETURN ( Self )



function aItmActua()

   local aBasActua  := {}

   aAdd( aBasActua, { "cSerExp", "C",  1, 0, "Serie",                        "", "", "" } )
   aAdd( aBasActua, { "nNumExp", "N",  9, 0, "Número",                       "", "", "" } )
   aAdd( aBasActua, { "cSufExp", "C",  2, 0, "Sufijo",                       "", "", "" } )
   aAdd( aBasActua, { "cCodTra", "C",  5, 0, "Trabajador",                   "", "", "" } )
   aAdd( aBasActua, { "cCodAct", "C",  3, 0, "Actuación",                    "", "", "" } )
   aAdd( aBasActua, { "dFecIni", "D",  8, 0, "Fecha inicio",                 "", "", "" } )
   aAdd( aBasActua, { "cHorIni", "C",  5, 0, "Hora inicio",                  "", "", "" } )
   aAdd( aBasActua, { "dFecFin", "D",  8, 0, "Fecha fin",                    "", "", "" } )
   aAdd( aBasActua, { "cHorFin", "C",  5, 0, "Hora fin",                     "", "", "" } )
   aAdd( aBasActua, { "mMemAct", "M", 10, 0, "Descripción de la actuación",  "", "", "" } )
   aAdd( aBasActua, { "lActEnd", "L",  1, 0, "Lógico finalizado",            "", "", "" } )

return ( aBasActua )
