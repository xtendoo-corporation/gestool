#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\TDetCostes.prg"
_HB_CLASS TDetCostes ; function TDetCostes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetCostes", iif( .T., { @TDet() }, { @HBObject() } ), @TDetCostes() ) ) ;

   _HB_MEMBER { oGetTotalCosto } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetTotalCosto"}, .F. )
   _HB_MEMBER { nGetTotalCosto } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nGetTotalCosto"}, .F. )

   _HB_MEMBER { oCostesMaquina } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCostesMaquina"}, .F. )

   _HB_MEMBER New( cPath, oParent); oClass:AddMethod( "New", @TDetCostes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetCostes_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetCostes_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetCostes_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveLines(); oClass:AddMethod( "SaveLines", @TDetCostes_SaveLines(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadCostes( oGetCos, oSayCos, oSayImp); oClass:AddMethod( "LoadCostes", @TDetCostes_LoadCostes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotalLinea( oDbf); oClass:AddMethod( "nTotalLinea", @TDetCostes_nTotalLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cTotalLinea( oDbf); oClass:AddMethod( "cTotalLinea", @TDetCostes_cTotalLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lTotalLinea( oDbf); oClass:AddMethod( "lTotalLinea", @TDetCostes_lTotalLinea(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave(); oClass:AddMethod( "lPreSave", @TDetCostes_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetCostes ;



static FUNCTION TDetCostes_New( cPath, oParent ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath              := cPath
   ::oParent            := oParent

   ::bOnPreSaveDetail   := {|| ::SaveLines() }

RETURN ( Self )



static FUNCTION TDetCostes_DefineFiles( cPath, cDriver, lUniqueName, cFileName ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "MaqCosL", ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPatTmp() )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cDriver ), "Lineas de coste de maquinaria", ( cPath ) )

      oDbf:AddField( "cCodMaq", "C", 3, 0,,,,, "Máquina", .F.,, .F., {} )
      oDbf:AddField( "cCodCos", "C", 12, 0,,,,, "Cód. cos.", .F.,, .F., {} )
      oDbf:AddField( "nPctCos", "N", 3, 0,,,,, "%Aplicación", .F.,, .F., {} )

      oDbf:AddIndex( "cCosMaq", ( cFileName ), "cCodMaq",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodCos", ( cFileName ), "cCodCos",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetCostes_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   local lOpen             := .T.
   local oError
   local oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf            := ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !lExclusive )


   RECOVER USING oError

      lOpen                := .F.

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDetCostes_Resource( nMode ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   local oDlg
   local oGetCos
   local oGetPct
   local oSayCos
   local cSayCos
   local oSayImp
   local nSayImp  := 0
   local oSayApl
   local nSayApl  := 0





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "coste de maquinaria", "LCosteMaquina",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      oGetCos := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cCodCos, ::oDbfVir:cCodCos:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetCos:bHelp     := {|| ::oParent:oCostes:Buscar( oGetCos ) }
      oGetCos:bValid    := {|| ::loadCostes( oGetCos, oSayCos, oSayImp ) }




      oSayCos := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cSayCos, cSayCos:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      oSayImp := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nSayImp, nSayImp:= u ) }, oDlg,, ::oParent:cPouDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      oGetPct := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbfVir:nPctCos, ::oDbfVir:nPctCos:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      oGetPct:bChange   := {|| ::lTotalLinea( ::oDbfVir, oSayApl ) }









      oSayApl := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nSayApl, nSayApl:= u ) }, oDlg,, ::oParent:cPouDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( if( ::lPresave( oGetCos, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 9, {||( MsgInfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| if( ::lPresave( oGetCos, nMode ), oDlg:end( 1 ), ) } )
      end


      oDlg:bStart := {||   ::loadCostes( oGetCos, oSayCos, oSayImp ), ::lTotalLinea( ::oDbfVir, oSayApl ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TDetCostes_SaveLines( ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   ::oDbfVir:cCodMaq  := ::oParent:oDbf:cCodMaq

RETURN ( Self )



static FUNCTION TDetCostes_nTotalLinea( oDbf ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   local nTotal   := 0

   If( oDbf == nil, oDbf := ::oDbf, ) ;

   if ::oParent:oCostes:oDbf:SeekInOrd( oDbf:cCodCos, "cCodCos" )
      nTotal      := ::oParent:oCostes:oDbf:nImpCos * oDbf:nPctCos / 100
   end

RETURN ( nTotal )



static FUNCTION TDetCostes_cTotalLinea( oDbf ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   If( oDbf == nil, oDbf := ::oDbf, ) ;

RETURN ( Trans( ::nTotalLinea( oDbf ), ::oParent:cPorDiv ) )



static FUNCTION TDetCostes_lTotalLinea( oDbf, oGet ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   If( oDbf == nil, oDbf := ::oDbf, ) ;

RETURN ( oGet:cText( ::nTotalLinea( oDbf ) ), .T. )



static FUNCTION TDetCostes_LoadCostes( oGetCos, oSayCos, oSayImp ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   local cCodCos  := oGetCos:VarGet()

   if !Empty( cCodCos )

      if ::oParent:oCostes:oDbf:SeekInOrd( cCodCos, "cCodCos" )

         oSayCos:cText( ::oParent:oCostes:oDbf:cDesCos )

         oSayImp:cText( ::oParent:oCostes:oDbf:nImpCos )

         return .T.

      else

         MsgStop( "Costes no encontrado" )

         return .F.

      end

   end

Return .T.



static FUNCTION TDetCostes_lPreSave( oGetCod, nMode ) ; local Self AS CLASS TDetCostes := QSelf() AS CLASS TDetCostes

   local nOrdAnt  := ::oDbfVir:OrdSetFocus( "CCODCOS" )

   if nMode == 1

      if Empty( ::oDbfVir:cCodCos )
         msgStop( "Código no puede estar vacio" )
         oGetCod:SetFocus()
         return .F.
      end

      if ::oDbfVir:Seek( ::oDbfVir:cCodCos )
         msgStop( "Código existente" )
         oGetCod:SetFocus()
         return .F.
      end

   end

   ::oDbfVir:OrdSetFocus( nOrdAnt )

RETURN ( .T. )
