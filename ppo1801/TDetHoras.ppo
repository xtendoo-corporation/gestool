#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\TDetHoras.prg"
_HB_CLASS TDetHoras ; function TDetHoras ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetHoras", iif( .T., { @TDet() }, { @HBObject() } ), @TDetHoras() ) ) ;

   _HB_MEMBER New( cPath, cDriver, oParent); oClass:AddMethod( "New", @TDetHoras_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetHoras_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetHoras_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetHoras_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveDetails(); oClass:AddMethod( "SaveDetails", @TDetHoras_SaveDetails(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nCosteHora( cCodTra, cTipHor); oClass:AddMethod( "nCosteHora", @TDetHoras_nCosteHora(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPresave( oGetCod, nMode); oClass:AddMethod( "lPresave", @TDetHoras_lPresave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetHoras ;



static FUNCTION TDetHoras_New( cPath, cDriver, oParent ) ; local Self AS CLASS TDetHoras := QSelf() AS CLASS TDetHoras

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::cPath              := cPath
   ::cDriver            := cDriver
   ::oParent            := oParent

   ::bOnPreSaveDetail   := {|| ::SaveDetails() }

RETURN ( Self )



static FUNCTION TDetHoras_DefineFiles( cPath, cDriver, lUniqueName, cFileName ) ; local Self AS CLASS TDetHoras := QSelf() AS CLASS TDetHoras

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := ::cDriver, ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "OpeL", ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cDriver ), "Operarios y horas", ( cPath ) )

      oDbf:AddField( "cCodTra", "C", 5, 0,,,,, "Cód. Trabajador", .F., 60, .F., {} )
      oDbf:AddField( "cCodHra", "C", 3, 0,,,,, "Cód. Hora", .F., 100, .F., {} )
      oDbf:AddField( "nCosHra", "N", 16, 6, cPouDiv(),,,, "Importe", .T., 140, .F., {} )
      oDbf:AddField( "lDefHor", "L", 1, 0,,,,, "", .F.,, .T., {} )

      oDbf:AddIndex( "cCodTra", ( cFileName ), "cCodTra",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodHra", ( cFileName ), "cCodHra",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cTraHra", ( cFileName ), "cCodTra + cCodHra",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetHoras_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TDetHoras := QSelf() AS CLASS TDetHoras

   local lOpen          := .T.
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !lExclusive )

   RECOVER

      lOpen             := .F.

      ::CloseFiles()

      msgStop( "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDetHoras_Resource( nMode ) ; local Self AS CLASS TDetHoras := QSelf() AS CLASS TDetHoras

   local oDlg
   local oGetCod
   local oGetCos
   local oSayCos
   local cSayCos
   local lDis              := .F.

   if nMode == 1

      ::oDbfVir:GoTop()

      if ::oDbfVir:OrdKeyCount() == 0
         ::oDbfVir:lDefHor := .T.
         lDis              := .T.
      end

      ::oDbfVir:nCosHra   := ::oParent:nCosteOperario()

   end





   cSayCos                 := oRetFld( ::oDbfVir:cCodHra, ::oParent:oHoras:oDbf, "cDesHra" )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "tipos de horas", "LOperariosHoras",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      oGetCod := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbfVir:cCodHra, ::oDbfVir:cCodHra:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetCod:bHelp     := {|| ::oParent:oHoras:Buscar( oGetCod ) }
      oGetCod:bValid    := {|| ::oParent:oHoras:Existe( oGetCod, oSayCos, "cDesHra", .T., .T., "0" ) }




      oSayCos := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSayCos, cSayCos:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      oGetCos := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:nCosHra, ::oDbfVir:nCosHra:= u ) }, oDlg,, ::oParent:cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      TCheckBox():ReDefine( 290, { | u | If( PCount()==0, ::oDbfVir:lDefHor, ::oDbfVir:lDefHor:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. !lDis )}, .F. )





      TButton():ReDefine( 1, {||( if( ::lPresave( oGetCod, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





      TButton():ReDefine( 998, {||( MsgInfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart    := {|| oGetCod:lValid() }

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| if( ::lPresave( oGetCod, nMode ), oDlg:end( 1 ), ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TDetHoras_SaveDetails( ) ; local Self AS CLASS TDetHoras := QSelf() AS CLASS TDetHoras

   ::oDbfVir:cCodTra    := ::oParent:oDbf:cCodTra

RETURN ( Self )



static FUNCTION TDetHoras_nCosteHora( cCodTra, cTipHor ) ; local Self AS CLASS TDetHoras := QSelf() AS CLASS TDetHoras

   local nCosteHora     := 0

   if ::oDbf:SeekInOrd( cCodTra + cTipHor, "cTraHra" )
      nCosteHora        := ::oDbf:nCosHra
   end

RETURN ( nCosteHora )



static FUNCTION TDetHoras_lPresave( oGetCod, nMode ) ; local Self AS CLASS TDetHoras := QSelf() AS CLASS TDetHoras

   if nMode == 1

      if ::oDbfVir:SeekInOrd( ::oDbfVir:cCodHra, "cCodHra" )
         msgStop( "Código existente" )
         oGetCod:SetFocus()
         Return ( .F. )
      end

      if Empty( ::oDbfVir:cCodHra )
         msgStop( "Código de hora vacío" )
         oGetCod:SetFocus()
         Return ( .F. )
      end

   end

   ::oParent:cUltHora   := ::oDbfVir:cCodHra
   ::oParent:lUltDef    := ::oDbfVir:lDefHor

return ( .T. )
