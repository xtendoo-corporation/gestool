#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\TDetHorasPersonal.prg"
_HB_CLASS TDetHorasPersonal ; function TDetHorasPersonal ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetHorasPersonal", iif( .T., { @TDet() }, { @HBObject() } ), @TDetHorasPersonal() ) ) ;

   _HB_MEMBER { oGetTotalCosto } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetTotalCosto"}, .F. )
   _HB_MEMBER { nGetTotalCosto } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nGetTotalCosto"}, .F. )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetHorasPersonal_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetHorasPersonal_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetHorasPersonal_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveDetails(); oClass:AddMethod( "SaveDetails", @TDetHorasPersonal_SaveDetails(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lValidTipoHora( oGetTra, oGetTipoHora, oGetCos, oSayTipoHora); oClass:AddMethod( "lValidTipoHora", @TDetHorasPersonal_lValidTipoHora(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nCosteHora( cCodTra, cTipHor); oClass:AddMethod( "nCosteHora", @TDetHorasPersonal_nCosteHora(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotCosto( oDbf); oClass:AddMethod( "nTotCosto", @TDetHorasPersonal_nTotCosto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lTotCosto( oDbf); oClass:AddMethod( "lTotCosto", @TDetHorasPersonal_lTotCosto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave( oGetTipoHora, oDlg); oClass:AddMethod( "lPreSave", @TDetHorasPersonal_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetHorasPersonal ;



static FUNCTION TDetHorasPersonal_DefineFiles( cPath, cVia, lUniqueName, cFileName ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "ProHPer", ) ;
   If( cVia == nil, cVia := cDriver(), ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "Operarios y horas", ( cPath ) )

      oDbf:AddField( "cSerOrd", "C", 01, 0,,,,, "Serie", .F.,, .F., {} )
      oDbf:AddField( "nNumOrd", "N", 09, 0,,,,, "Número", .F.,, .F., {} )
      oDbf:AddField( "cSufOrd", "C", 02, 0,,,,, "Sufijo", .F.,, .F., {} )
      oDbf:AddField( "cCodTra", "C", 05, 0,,,,, "Código trabajador", .F.,, .F., {} )
      oDbf:AddField( "cCodHra", "C", 03, 0,,,,, "Tipo de hora", .F.,, .F., {} )
      oDbf:AddField( "nNumHra", "N", 16, 6,,,,, "Número de horas", .F.,, .F., {} )
      oDbf:AddField( "nCosHra", "N", 16, 6,,,,, "Coste", .F.,, .F., {} )

      oDbf:AddIndex( "cNumOrd", ( cFileName ), "cSerOrd + Str( nNumOrd, 9 ) + cSufOrd",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodTra", ( cFileName ), "cCodTra",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cNumTra", ( cFileName ), "cSerOrd + Str( nNumOrd, 9 ) + cSufOrd + cCodTra",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetHorasPersonal_OpenFiles( lExclusive, cDriver ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( cDriver == nil, cDriver := cDriver, ) ;

   If( lExclusive == nil, lExclusive := .F., ) ;

   ::cDriver            := cDriver

   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::oDbf            := ::DefineFiles()
   end

   ::oDbf:Activate( .F., !lExclusive )

   ::bOnPreSaveDetail   := {|| ::SaveDetails() }

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDetHorasPersonal_Resource( nMode ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   local oDlg
   local oGetCos
   local oIniOpe
   local oGetTipoHora
   local oSayTipoHora
   local cSayTipoHora





   if Empty( ::oParent:oDetPersonal:oDbfVir:cCodTra )
      msgStop( "Es necesario codificar un trabajador" )
      Return .F.
   end

   if nMode == 1
      ::oDbfVir:nNumHra    := ::oParent:oDetPersonal:cTiempoEmpleado
   end

   cSayTipoHora            := oRetFld( ::oDbfVir:cCodHra, ::oParent:oHoras:oDbf )





   ::nGetTotalCosto        := ::nTotCosto( ::oDbfVir )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "horas de operarios", "LHorasPersonal",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      oGetTipoHora := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbfVir:cCodHra, ::oDbfVir:cCodHra:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )
      oGetTipoHora:bHelp   := {|| ::oParent:oHoras:Buscar( oGetTipoHora ) }
      oGetTipoHora:bValid  := {|| ::oParent:oHoras:Existe( oGetTipoHora, oSayTipoHora, "cDesHra", .T., .T., "0" ), ::lValidTipoHora( oGetTipoHora, oGetCos, oSayTipoHora ) }




      oSayTipoHora := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSayTipoHora, cSayTipoHora:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )










      oIniOpe := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:nNumHra, ::oDbfVir:nNumHra:= u ) }, oDlg,, "99.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )
      oIniOpe:bChange      := {|| ::lTotCosto( ::oDbfVir ) }
      oIniOpe:bValid       := {|| ::lTotCosto( ::oDbfVir ) }






      oGetCos := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:nCosHra, ::oDbfVir:nCosHra:= u ) }, oDlg,, ::oParent:cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )
      oGetCos:bChange      := {|| ::lTotCosto( ::oDbfVir ) }
      oGetCos:bValid       := {|| ::lTotCosto( ::oDbfVir ) }





      ::oGetTotalCosto := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::nGetTotalCosto, ::nGetTotalCosto:= u ) }, oDlg,, ::oParent:cPorDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( ::lPreSave( oGetTipoHora, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ::lPreSave( oGetTipoHora, oDlg ) } )
   end

   oDlg:bStart := { || oGetTipoHora:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TDetHorasPersonal_SaveDetails( ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   ::oDbfVir:cSerOrd    := ::oParent:oDbf:cSerOrd
   ::oDbfVir:nNumOrd    := ::oParent:oDbf:nNumOrd
   ::oDbfVir:cSufOrd    := ::oParent:oDbf:cSufOrd

RETURN ( Self )



static FUNCTION TDetHorasPersonal_nCosteHora( cCodTra, cTipHor ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   local nCosteHora     := 0
   local nOrdenAnterior := ::oDbf:OrdSetFocus( "cCodHra" )

   if ::oDbf:Seek( cCodTra + cTipHor )
      nCosteHora        := ::oDbf:nCosHra
   end

   ::oDbf:OrdSetFocus( nOrdenAnterior )

RETURN ( nCosteHora )



static FUNCTION TDetHorasPersonal_lValidTipoHora( oGetTipoHora, oGetCos, oSayTipoHora ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   local nCosteHora  := 0
   local cTipoHora   := oGetTipoHora:VarGet()
   local cTrabajador := ::oParent:oDetPersonal:oDbfVir:cCodTra

   if Empty( cTipoHora )

      Return .T.
   end

   if ::oParent:oHoras:lValid( oGetTipoHora, oSayTipoHora )

      if !Empty( cTrabajador )

         nCosteHora  := ::oParent:oDetHoras:nCosteHora( cTrabajador, cTipoHora )

         if nCosteHora <> 0
            oGetCos:cText( nCosteHora )
         end

      end

   else

      MsgStop( "Código no encontrado" )
      Return .F.

   end

   ::lTotCosto( ::oDbfVir )

RETURN ( .T. )



static FUNCTION TDetHorasPersonal_nTotCosto( oDbf ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   local nTotalImporte

   If( oDbf == nil, oDbf := ::oDbf, ) ;

   nTotalImporte  := oDbf:nNumHra * oDbf:nCosHra

RETURN ( nTotalImporte )



static FUNCTION TDetHorasPersonal_lTotCosto( oDbf ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   If( oDbf == nil, oDbf := ::oDbf, ) ;

RETURN ( ::oGetTotalCosto:cText( ::nTotCosto( oDbf ) ), .T. )



static FUNCTION TDetHorasPersonal_lPreSave( oGetTipoHora, oDlg ) ; local Self AS CLASS TDetHorasPersonal := QSelf() AS CLASS TDetHorasPersonal

   if Empty( ::oDbfVir:cCodHra )
      MsgStop( "Tiene que seleccionar un tipo de hora." )
      oGetTipoHora:SetFocus()
      Return .F.
   end

   ::oDbfVir:cCodTra := ::oParent:oDetPersonal:oDbfVir:cCodTra

RETURN ( oDlg:end( 1 ) )
