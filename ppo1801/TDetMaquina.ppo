#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDetMaquina.prg"
_HB_CLASS TDetMaquina ; function TDetMaquina ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetMaquina", iif( .T., { @TDet() }, { @HBObject() } ), @TDetMaquina() ) ) ;

   _HB_MEMBER { oGetTotalCosto } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetTotalCosto"}, .F. )
   _HB_MEMBER { cTmpEmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTmpEmp"}, .F. )
   _HB_MEMBER { oTmpEmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTmpEmp"}, .F. )
   _HB_MEMBER { oTotHoras } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTotHoras"}, .F. )
   _HB_MEMBER { nTotHoras } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotHoras"}, .F. )

   _HB_MEMBER New( cPath, oParent); oClass:AddMethod( "New", @TDetMaquina_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetMaquina_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetMaquina_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER OpenService( lExclusive); oClass:AddMethod( "OpenService", @TDetMaquina_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDetMaquina_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetMaquina_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lValidMaquina( oGetMaq, oGetSec, oGetCostoHora); oClass:AddMethod( "lValidMaquina", @TDetMaquina_lValidMaquina(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveDetails(); oClass:AddMethod( "SaveDetails", @TDetMaquina_SaveDetails(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotCosto( oDbf); oClass:AddMethod( "nTotCosto", @TDetMaquina_nTotCosto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotal( oDbf); oClass:AddMethod( "nTotal", @TDetMaquina_nTotal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cTotal(); oClass:AddInline( "cTotal", {|Self, oDbf | ( ( Self ) ), ( Trans( ::nTotal( oDbf ), ::oParent:cPorDiv ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lTiempoEmpleado(); oClass:AddMethod( "lTiempoEmpleado", @TDetMaquina_lTiempoEmpleado(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave( oGet, oDlg); oClass:AddMethod( "lPreSave", @TDetMaquina_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetMaquina ;



static FUNCTION TDetMaquina_New( cPath, oParent ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath              := cPath
   ::oParent            := oParent

   ::bOnPreSaveDetail   := {|| ::SaveDetails() }

RETURN ( Self )



static FUNCTION TDetMaquina_DefineFiles( cPath, cVia, lUniqueName, cFileName ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "ProMaq", ) ;
   If( cVia == nil, cVia := cDriver(), ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "lineas de maquinaria", ( cPath ) )

      oDbf:AddField( "cSerOrd", "C", 01, 0,,,,, "Código", .F.,, .T., {} )
      oDbf:AddField( "nNumOrd", "N", 09, 0,,,,, "Número", .F.,, .T., {} )
      oDbf:AddField( "cSufOrd", "C", 02, 0,,,,, "Sufijo", .F.,, .T., {} )
      oDbf:AddField( "cCodSec", "C", 03, 0,,,,, "Sección", .F.,, .F., {} )
      oDbf:AddField( "cCodMaq", "C", 03, 0,,,,, "Maquina", .F.,, .F., {} )
      oDbf:AddField( "dFecIni", "D", 08, 0,,,,, "Fecha inicio", .F.,, .F., {} )
      oDbf:AddField( "dFecFin", "D", 08, 0,,,,, "Fecha fin", .F.,, .F., {} )
      oDbf:AddField( "cIniMaq", "C", 05, 0,,,,, "Hora de inicio", .F.,, .F., {} )
      oDbf:AddField( "cFinMaq", "C", 05, 0,,,,, "Hora de fin", .F.,, .F., {} )
      oDbf:AddField( "nCosHra", "N", 16, 6,,,,, "Coste por horas", .F.,, .F., {} )
      oDbf:AddField( "nTotHra", "N", 16, 6,,,,, "Total horas", .F.,, .T., {} )

      oDbf:AddIndex( "cNumOrd", ( cFileName ), "cSerOrd + Str( nNumOrd, 9 ) + cSufOrd",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodSec", ( cFileName ), "cCodSec",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodMaq", ( cFileName ), "cCodMaq",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetMaquina_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   local lOpen          := .T.
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !lExclusive )

   RECOVER

      lOpen             := .F.

      ::CloseFiles()

      msgStop( "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDetMaquina_CloseFiles( ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
   end

   ::oDbf               := nil

RETURN .T.



static FUNCTION TDetMaquina_Resource( nMode ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   local oDlg
   local oGetMaq
   local oGetSec
   local oGetCostoHora
   local oSayMaq
   local cSayMaq
   local oSaySec
   local cSaySec
   local oFecIni
   local oFecFin
   local oHorIni
   local oHorFin

   if nMode == 1
      ::oDbfVir:dFecIni := ::oParent:oDbf:dFecOrd
      ::oDbfVir:dFecFin := ::oParent:oDbf:dFecFin
      ::oDbfVir:cIniMaq := ::oParent:oDbf:cHorIni
      ::oDbfVir:cFinMaq := ::oParent:oDbf:cHorFin
   end

   ::lTiempoEmpleado()

   cSayMaq              := oRetFld( ::oDbfVir:cCodMaq, ::oParent:oMaquina:oDbf )
   cSaySec              := oRetFld( ::oDbfVir:cCodSec, ::oParent:oSeccion:oDbf )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "maquinaria", "lMaquinaria",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )





      oGetMaq := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cCodMaq, ::oDbfVir:cCodMaq:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )
      oGetMaq:bHelp     := {|| ::oParent:oMaquina:Buscar( oGetMaq ) }
      oGetMaq:bValid    := {|| ::oParent:oMaquina:Existe( oGetMaq, oSayMaq, "cDesMaq", .T., .T., "0" ), ::lValidMaquina( oGetMaq, oGetSec, oGetCostoHora ) }




      oSayMaq := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cSayMaq, cSayMaq:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      oGetSec := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:cCodSec, ::oDbfVir:cCodSec:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )
      oGetSec:bHelp  := {|| ::oParent:oSeccion:Buscar( oGetSec ) }
      oGetSec:bValid := {|| ::oParent:oSeccion:Existe( oGetSec, oSaySec, "cDesSec", .T., .T., "0" ) }




      oSaySec := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSaySec, cSaySec:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oFecIni := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbfVir:dFecIni, ::oDbfVir:dFecIni:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

         oFecIni:bChange   := {|| ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh() }
         oFecIni:bValid    := {|| ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh(), .T. }









      oHorIni := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbfVir:cIniMaq, ::oDbfVir:cIniMaq:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorIni ) )}, {||  ( DwTime( oHorIni ) )},,,, nil,,, )

         oHorIni:bValid    := {|| if( validHourMinutes( oHorIni ), ( ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh(), .T. ), .F. ) }
         oHorIni:bChange   := {|| ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh() }





      oFecFin := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbfVir:dFecFin, ::oDbfVir:dFecFin:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

         oFecFin:bChange   := {|| ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh() }
         oFecFin:bValid    := {|| ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh(), .T. }









      oHorFin := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::oDbfVir:cFinMaq, ::oDbfVir:cFinMaq:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorFin ) )}, {||  ( DwTime( oHorFin ) )},,,, nil,,, )

         oHorFin:bValid    := {|| if( validHourMinutes( oHorFin ), ( ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh(), .T. ), .F. ) }
         oHorFin:bChange   := {|| ::lTiempoEmpleado(), ::oGetTotalCosto:Refresh() }




      ::oTmpEmp := TSay():ReDefine( 170, {|| ::cTmpEmp}, oDlg,, "N/W*",, .F.,, .F., .F., )





      ::oTotHoras := TSay():ReDefine( 180, {|| ::oDbfVir:nTotHra}, oDlg, "@E 9999.99", "N/W*",, .F.,, .F., .F., )






      oGetCostoHora := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oDbfVir:nCosHra, ::oDbfVir:nCosHra:= u ) }, oDlg,, ::oParent:cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      oGetCostoHora:bChange   := {|| ::oGetTotalCosto:Refresh() }
      oGetCostoHora:bValid    := {|| ::oGetTotalCosto:Refresh(), .T. }





      ::oGetTotalCosto := TSay():ReDefine( 200, {|| ::nTotCosto( ::oDbfVir )}, oDlg, ::oParent:cPorDiv, "N/W*",, .F.,, .F., .F., )





      TButton():ReDefine( 1, {||( ::lPreSave( oGetMaq, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 9, {||( MsgInfo( "Ayuda no definida", "Perdonen las molestias" ) )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| ::lPreSave( oGetMaq, oDlg ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TDetMaquina_nTotCosto( oDbf ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   If( oDbf == nil, oDbf := ::oDbf, ) ;

RETURN ( ::oDbfVir:nTotHra * oDbf:nCosHra )



static FUNCTION TDetMaquina_nTotal( oDbf ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   local nTotal   := 0

   If( oDbf == nil, oDbf := ::oDbf, ) ;

   oDbf:GetStatus()

   while !oDbf:Eof()
      nTotal      += ::nTotCosto( oDbf )
      oDbf:Skip()
   end

   oDbf:SetStatus()

RETURN ( Round( nTotal, ::oParent:nDorDiv ) )



static FUNCTION TDetMaquina_SaveDetails( ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   ::oDbfVir:cSerOrd  := ::oParent:oDbf:cSerOrd
   ::oDbfVir:nNumOrd  := ::oParent:oDbf:nNumOrd
   ::oDbfVir:cSufOrd  := ::oParent:oDbf:cSufOrd

RETURN ( Self )



static FUNCTION TDetMaquina_lValidMaquina( oGetMaq, oGetSec, oGetCostoHora ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   local cCodigoMaquina := oGetMaq:VarGet()

   ::oParent:oMaquina:oDbf:GetStatus()

   if ::oParent:oMaquina:oDbf:Seek( cCodigoMaquina )

      if !Empty( oGetSec )
         oGetSec:cText( ::oParent:oMaquina:oDbf:cCodSec )
         oGetSec:lValid()
      end

      if !Empty( oGetCostoHora )
         oGetCostoHora:cText( ::oParent:oMaquina:nTotalCosteHora( cCodigoMaquina ) )
         oGetCostoHora:lValid()
      end

   end

   ::oParent:oMaquina:oDbf:SetStatus()

RETURN ( .T. )



static FUNCTION TDetMaquina_lPreSave( oGet, oDlg ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   if Empty( ::oDbfVir:cCodMaq )
      MsgStop( "Código de la máquina no puede estar vacío." )
      oGet:SetFocus()
      Return .F.
   end

RETURN oDlg:end( 1 )



static FUNCTION TDetMaquina_lTiempoEmpleado( ) ; local Self AS CLASS TDetMaquina := QSelf() AS CLASS TDetMaquina

   ::oDbfVir:nTotHra    := nTiempoEntreFechas( ::oDbfVir:dFecIni, ::oDbfVir:dFecFin, ::oDbfVir:cIniMaq, ::oDbfVir:cFinMaq )
   ::cTmpEmp            := cFormatoDDHHMM( ::oDbfVir:nTotHra )

   if ::oTmpEmp <> nil
      ::oTmpEmp:SetText( ::cTmpEmp )
      ::oTmpEmp:Refresh()
   end

   if ::oTotHoras <> nil
      ::oTotHoras:Refresh()
   end

RETURN .T.
