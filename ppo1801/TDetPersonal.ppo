#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TDetPersonal.prg"
_HB_CLASS TDetPersonal ; function TDetPersonal ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetPersonal", iif( .T., { @TDet() }, { @HBObject() } ), @TDetPersonal() ) ) ;

   _HB_MEMBER { oGetTotalTime } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetTotalTime"}, .F. )
   _HB_MEMBER { cGetTotalTime } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetTotalTime"}, .F. )
   _HB_MEMBER { cTiempoEmpleado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTiempoEmpleado"}, .F. )
   _HB_MEMBER { cTmpEmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTmpEmp"}, .F. )
   _HB_MEMBER { oTmpEmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTmpEmp"}, .F. )

   _HB_MEMBER { oBrwHorasTrabajador } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwHorasTrabajador"}, .F. )

   _HB_MEMBER { lAppendTrabajador } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAppendTrabajador"}, .F. )

   _HB_MEMBER New( cPath, cDriver, oParent); oClass:AddMethod( "New", @TDetPersonal_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetPersonal_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetPersonal_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDetPersonal_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetPersonal_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveDetails(); oClass:AddMethod( "SaveDetails", @TDetPersonal_SaveDetails(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER DeleteDetails(); oClass:AddMethod( "DeleteDetails", @TDetPersonal_DeleteDetails(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SaveLines(); oClass:AddMethod( "SaveLines", @TDetPersonal_SaveLines(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lValidTrabajador( oGetTra, oGetSec, oGetOpe, nMode); oClass:AddMethod( "lValidTrabajador", @TDetPersonal_lValidTrabajador(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cTotTime( oDbf); oClass:AddMethod( "cTotTime", @TDetPersonal_cTotTime(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lTotTime( oDbf); oClass:AddMethod( "lTotTime", @TDetPersonal_lTotTime(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nHorasTrabajador( oDbf); oClass:AddMethod( "nHorasTrabajador", @TDetPersonal_nHorasTrabajador(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nTotalTrabajador( oDbf); oClass:AddMethod( "nTotalTrabajador", @TDetPersonal_nTotalTrabajador(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cTotalTrabajador(); oClass:AddInline( "cTotalTrabajador", {|Self, cKeyTra, oDbf | ( ( Self ) ), ( Trans( ::nTotalTrabajador( cKeyTra, oDbf ), ::oParent:cPorDiv ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotal( oDbf, oDbfHor); oClass:AddMethod( "nTotal", @TDetPersonal_nTotal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cTotal(); oClass:AddInline( "cTotal", {|Self, oDbf, oDbfHor | ( ( Self ) ), ( Trans( ::nTotal( oDbf, oDbfHor ), ::oParent:cPorDiv ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lTiempoEmpleado(); oClass:AddMethod( "lTiempoEmpleado", @TDetPersonal_lTiempoEmpleado(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetPersonal ;



static FUNCTION TDetPersonal_New( cPath, cDriver, oParent ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::cPath              := cPath
   ::oParent            := oParent
   ::cDriver            := cDriver

   ::bOnPreSaveDetail   := {|| ::SaveDetails() }
   ::bOnPreDelete       := {|| ::DeleteDetails() }

RETURN ( Self )



static FUNCTION TDetPersonal_DefineFiles( cPath, cVia, lUniqueName, cFileName ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "ProPer", ) ;
   If( cVia == nil, cVia := cDriver(), ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "personal", ( cPath ) )

      oDbf:AddField( "cSerOrd", "C", 01, 0,,,,, "Serie", .F.,, .F., {} )
      oDbf:AddField( "nNumOrd", "N", 09, 0,,,,, "Número", .F.,, .F., {} )
      oDbf:AddField( "cSufOrd", "C", 02, 0,,,,, "Sufijo", .F.,, .F., {} )
      oDbf:AddField( "cCodTra", "C", 05, 0,,,,, "Trabajador", .F.,, .F., {} )
      oDbf:AddField( "cCodSec", "C", 03, 0,,,,, "Sección", .F.,, .F., {} )
      oDbf:AddField( "cCodOpe", "C", 03, 0,,,,, "Operación", .F.,, .F., {} )
      oDbf:AddField( "dFecIni", "D", 08, 0,,,,, "Fecha inicio", .F.,, .F., {} )
      oDbf:AddField( "dFecFin", "D", 08, 0,,,,, "Fecha fin", .F.,, .F., {} )
      oDbf:AddField( "cHorIni", "C", 05, 0,,,,, "Hora inicio", .F.,, .F., {} )
      oDbf:AddField( "cHorFin", "C", 05, 0,,,,, "Hora fin", .F.,, .F., {} )



      oDbf:AddField( "cKeyOrd", "B", 12, 0,,,, {|| oDbf:FieldGetByName( "cSerOrd" ) + Str( oDbf:FieldGetByName( "nNumOrd" ), 9 ) + oDbf:FieldGetByName( "cSufOrd" ) },, .F.,, .F., {} )



      oDbf:AddField( "cKeyTra", "B", 17, 0,,,, {|| oDbf:FieldGetByName( "cSerOrd" ) + Str( oDbf:FieldGetByName( "nNumOrd" ), 9 ) + oDbf:FieldGetByName( "cSufOrd" ) + oDbf:FieldGetByName( "cCodTra" ) },, .F.,, .F., {} )

      oDbf:AddIndex( "cNumOrd", ( cFileName ), "cSerOrd + Str( nNumOrd, 9 ) + cSufOrd",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodTra", ( cFileName ), "cCodTra",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodSec", ( cFileName ), "cCodSec",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodOpe", ( cFileName ), "cCodOpe",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetPersonal_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local lOpen          := .T.
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   If( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf         := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !lExclusive )

   RECOVER

      lOpen             := .F.

      ::CloseFiles()

      msgStop( "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDetPersonal_CloseFiles( ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
      ::oDbf      := nil
   end

RETURN .T.



static FUNCTION TDetPersonal_Resource( nMode ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local oDlg
   local oGetTra
   local oSayTra
   local cSayTra
   local oGetSec
   local oSaySec
   local cSaySec
   local oGetOpe
   local oSayOpe
   local cSayOpe
   local nOrdAnt
   local oFecIni
   local oFecFin
   local oHorIni
   local oHorFin

   nOrdAnt                 := ::oParent:oDetHorasPersonal:oDbfVir:OrdSetFocus( "cNumTra" )

   if nMode == 1

      ::oDbfVir:dFecIni    := ::oParent:oDbf:dFecOrd
      ::oDbfVir:dFecFin    := ::oParent:oDbf:dFecFin
      ::oDbfVir:cHorIni    := ::oParent:oDbf:cHorIni
      ::oDbfVir:cHorFin    := ::oParent:oDbf:cHorFin
      ::oDbfVir:cCodOpe    := ::oParent:oDbf:cCodOpe

      while ::oParent:oDetHorasPersonal:oDbfVir:Seek( Space( 5 ) ) .AND. !::oParent:oDetHorasPersonal:oDbfVir:Eof()
         ::oParent:oDetHorasPersonal:oDbfVir:Delete(.F.)
      end

      if IsChar( ::oDbfVir:cKeyOrd )
         ::oParent:oDetHorasPersonal:oDbfVir:OrdScope( ::oDbfVir:cKeyOrd + Space( 5 ) )
      end

      ::lAppendTrabajador  := .F.

   else

      if IsChar( ::oDbfVir:cKeyTra )
         ::oParent:oDetHorasPersonal:oDbfVir:OrdScope( ::oDbfVir:cKeyTra )
      end

   end

   ::oParent:oDetHorasPersonal:oDbfVir:GoTop()

   ::lTiempoEmpleado()





   cSayTra                 := oRetFld( ::oDbfVir:cCodTra, ::oParent:oOperario:oDbf )
   cSaySec                 := oRetFld( ::oDbfVir:cCodSec, ::oParent:oSeccion:oDbf )
   cSayOpe                 := oRetFld( ::oDbfVir:cCodOpe, ::oParent:oOperacion:oDbf )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "partes de personal", "LPersonal",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      oGetTra := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cCodTra, ::oDbfVir:cCodTra:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetTra:bHelp  := {|| ::oParent:oOperario:Buscar( oGetTra ) }
      oGetTra:bValid := {|| ::lValidTrabajador( oGetTra, oGetSec, oGetOpe, oSayTra, nMode ) }




      oSayTra := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cSayTra, cSayTra:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oGetSec := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:cCodSec, ::oDbfVir:cCodSec:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetSec:bHelp  := {|| ::oParent:oSeccion:Buscar( oGetSec ) }
      oGetSec:bValid := {|| ::oParent:oSeccion:Existe( oGetSec, oSaySec, "cDesSec", .T., .T., "0" ) }




      oSaySec := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSaySec, cSaySec:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oGetOpe := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbfVir:cCodOpe, ::oDbfVir:cCodOpe:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetOpe:bHelp  := {|| ::oParent:oOperacion:Buscar( oGetOpe ) }
      oGetOpe:bValid := {|| ::oParent:oOperacion:Existe( oGetOpe, oSayOpe, "cDesOpe", .T., .T., "0" ) }




      oSayOpe := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cSayOpe, cSayOpe:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oFecIni := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbfVir:dFecIni, ::oDbfVir:dFecIni:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

         oFecIni:bValid    := {|| ::lTiempoEmpleado() }
         oFecIni:bChange   := {|| ::lTiempoEmpleado() }





      oFecFin := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbfVir:dFecFin, ::oDbfVir:dFecFin:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

         oFecFin:bValid    := {|| ::lTiempoEmpleado() }
         oFecFin:bChange   := {|| ::lTiempoEmpleado() }









      oHorIni := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, ::oDbfVir:cHorIni, ::oDbfVir:cHorIni:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorIni ) )}, {||  ( DwTime( oHorIni ) )},,,, nil,,, )

         oHorIni:bValid    := {|| if( validHourMinutes( oHorIni ), ::lTiempoEmpleado(), .F. ) }
         oHorIni:bChange   := {|| ::lTiempoEmpleado() }









      oHorFin := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, ::oDbfVir:cHorFin, ::oDbfVir:cHorFin:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorFin ) )}, {||  ( DwTime( oHorFin ) )},,,, nil,,, )

         oHorFin:bValid    := {|| if( validHourMinutes( oHorFin ), ::lTiempoEmpleado(), .F. ) }
         oHorFin:bChange   := {|| ::lTiempoEmpleado() }





      ::oTmpEmp := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cTmpEmp, ::cTmpEmp:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









        TButton():ReDefine( 500, {||( ::oParent:oDetHorasPersonal:Append( ::oBrwHorasTrabajador ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 501, {||( ::oParent:oDetHorasPersonal:Edit( ::oBrwHorasTrabajador ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 502, {||( ::oParent:oDetHorasPersonal:Zoom() )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 503, {||( ::oParent:oDetHorasPersonal:Del( ::oBrwHorasTrabajador ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )

      ::oBrwHorasTrabajador                 := IXBrowse():New( oDlg )

      ::oBrwHorasTrabajador:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwHorasTrabajador:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oParent:oDetHorasPersonal:oDbfVir:SetBrowse( ::oBrwHorasTrabajador )

      ::oBrwHorasTrabajador:nMarqueeStyle   := 6

      ::oBrwHorasTrabajador:CreateFromResource( 200 )

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Código"
         :bStrData         := {|| ::oParent:oDetHorasPersonal:oDbfVir:FieldGetByName( "cCodHra" ) }
         :nWidth           := 60
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Tipo de hora"
         :bStrData         := {|| oRetFld( ::oParent:oDetHorasPersonal:oDbfVir:FieldGetByName( "cCodHra" ), ::oParent:oHoras:oDbf, , "cCodHra" ) }
         :nWidth           := 200
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Horas"
         :bStrData         := {|| Trans( ::oParent:oDetHorasPersonal:oDbfVir:FieldGetByName( "nNumHra" ), "99.99" ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Precio"
         :bStrData         := {|| Trans( ::oParent:oDetHorasPersonal:oDbfVir:FieldGetByName( "nCosHra" ), ::oParent:cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Total"
         :bStrData         := {|| Trans( ::oParent:oDetHorasPersonal:oDbfVir:FieldGetByName( "nNumHra" ) * ::oParent:oDetHorasPersonal:oDbfVir:FieldGetByName( "nCosHra" ), ::oParent:cPorDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      if nMode <> 3
         ::oBrwHorasTrabajador:bLDblClick   := {|| ::oParent:oDetHorasPersonal:Edit( ::oBrwHorasTrabajador ) }
      else
         ::oBrwHorasTrabajador:bLDblClick   := {|| ::oParent:oDetHorasPersonal:Zoom() }
      end





      TButton():ReDefine( 1, {||( if( ::SaveLines( oGetTra, oSayTra, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3
         oDlg:AddFastKey( 113, {|| ::oParent:oDetHorasPersonal:Append( ::oBrwHorasTrabajador ) } )
         oDlg:AddFastKey( 114, {|| ::oParent:oDetHorasPersonal:Edit( ::oBrwHorasTrabajador ) } )
         oDlg:AddFastKey( 115, {|| ::oParent:oDetHorasPersonal:Del( ::oBrwHorasTrabajador ) } )
         oDlg:AddFastKey( 116, {|| if( ::SaveLines( oGetTra, oSayTra, nMode ), oDlg:end( 1 ), ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   ::oParent:oDetHorasPersonal:oDbfVir:OrdClearScope()
   ::oParent:oDetHorasPersonal:oDbfVir:OrdSetFocus( nOrdAnt )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TDetPersonal_SaveLines( oGetTra, oSayTra, nMode ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal






   if nMode == 1

      if !::oParent:oOperario:Existe( oGetTra, oSayTra, "cNomTra", .F., .T., "0" )
         msgStop( "El trabajador " + oGetTra:VarGet() + " no existe en la base de datos." )
         Return .F.
      end







   end

RETURN ( .T. )



static FUNCTION TDetPersonal_lValidTrabajador( oGetTra, oGetSec, oGetOpe, oSayTra, nMode ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nOrdAnt
   local cCodTra









   if Empty( oGetTra:VarGet() )
      Return .T.
   end

   if !::oParent:oOperario:Existe( oGetTra, oSayTra, "cNomTra", .F., .T., "0" )
      msgStop( "El trabajador " + oGetTra:VarGet() + " no existe en la base de datos." )
      Return .F.
   end

   cCodTra              := oGetTra:VarGet()










   oGetTra:Disable()

   ::oParent:oDetHorasPersonal:oDbfVir:OrdClearScope()
   ::oParent:oDetHorasPersonal:oDbfVir:OrdScope( cCodTra )

   nOrdAnt              := ::oParent:oDetHoras:oDbf:OrdSetFocus( "cCodTra" )

   if nMode == 1





      if ::oParent:oOperario:oDbf:Seek( cCodTra )

         oGetSec:cText( ::oParent:oOperario:oDbf:cCodSec )
         oGetSec:lValid()

      end

      if ::oParent:oDetHoras:oDbf:Seek( cCodTra )

         while ::oParent:oDetHoras:oDbf:cCodTra == cCodTra .AND. !::oParent:oDetHoras:oDbf:Eof()

            if ::oParent:oDetHoras:oDbf:lDefHor

               ::oParent:oDetHorasPersonal:oDbfVir:Append()

               ::oParent:oDetHorasPersonal:oDbfVir:cCodTra := cCodTra
               ::oParent:oDetHorasPersonal:oDbfVir:cCodHra := ::oParent:oDetHoras:oDbf:cCodHra
               ::oParent:oDetHorasPersonal:oDbfVir:nNumHra := ::cTiempoEmpleado
               ::oParent:oDetHorasPersonal:oDbfVir:nCosHra := ::oParent:oDetHoras:oDbf:nCosHra

               ::oParent:oDetHorasPersonal:oDbfVir:Save()

            end

            ::oParent:oDetHoras:oDbf:Skip()

         end

      end

   end

   ::oParent:oDetHoras:oDbf:OrdSetFocus( nOrdAnt )

   ::oParent:oDetHorasPersonal:oDbfVir:GoTop()
   ::oParent:oDetHorasPersonal:oDbfVir:GoTop()

   ::oBrwHorasTrabajador:Refresh()

RETURN ( .T. )



static FUNCTION TDetPersonal_cTotTime( oDbf ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nHoras
   local nMinutos
   local nTotalMinutos

   If( oDbf == nil, oDbf := ::oDbf, ) ;

   nTotalMinutos     := nElapTime( oDbf:cIniOpe, oDbf:cFinOpe )

   nHoras            := Int( nTotalMinutos / 60 )
   nMinutos          := Mod( nTotalMinutos, 60 )

RETURN ( StrZero( nHoras, 2 ) + StrZero( nMinutos, 2 ) )



static FUNCTION TDetPersonal_lTotTime( oDbf ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   If( oDbf == nil, oDbf := ::oDbf, ) ;

RETURN ( ::oGetTotalTime:cText( ::cTotTime( oDbf ) ), .T. )



static FUNCTION TDetPersonal_nHorasTrabajador( cKeyTra, oDbf ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nTotal   := 0

   If( oDbf == nil, oDbf := ::oDbf, ) ;

   oDbf:GetStatus()
   oDbf:OrdSetFocus( "cNumTra" )

   if oDbf:Seek( cKeyTra )
      while cKeyTra == oDbf:cSerOrd + Str( oDbf:nNumOrd, 9 ) + oDbf:cSufOrd + oDbf:cCodTra .AND. !oDbf:Eof()
         nTotal   += oDbf:nNumHra
         oDbf:Skip()
      end
   end

   oDbf:SetStatus()

RETURN ( nTotal )



static FUNCTION TDetPersonal_nTotalTrabajador( cKeyTra, oDbf ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nTotal   := 0

   If( oDbf == nil, oDbf := ::oDbf, ) ;

   oDbf:GetStatus()
   oDbf:OrdSetFocus( "cNumTra" )

   if oDbf:Seek( cKeyTra )
      while cKeyTra == oDbf:cSerOrd + Str( oDbf:nNumOrd, 9 ) + oDbf:cSufOrd + oDbf:cCodTra .AND. !oDbf:Eof()
         nTotal   += oDbf:nNumHra * oDbf:nCosHra
         oDbf:Skip()
      end
   end

   oDbf:SetStatus()

RETURN ( nTotal )



static FUNCTION TDetPersonal_SaveDetails( ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   ::oDbfVir:cSerOrd := ::oParent:oDbf:cSerOrd
   ::oDbfVir:nNumOrd := ::oParent:oDbf:nNumOrd
   ::oDbfVir:cSufOrd := ::oParent:oDbf:cSufOrd

RETURN ( Self )



static FUNCTION TDetPersonal_DeleteDetails( ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   while ::oParent:oDetHorasPersonal:oDbfVir:SeekInOrd( ::oDbfVir:cCodTra, "cCodTra" )
      ::oParent:oDetHorasPersonal:oDbfVir:Delete(.F.)
   end


RETURN ( Self )



static FUNCTION TDetPersonal_lTiempoEmpleado( ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   ::cTiempoEmpleado    := nTiempoEntreFechas( ::oDbfVir:FieldGetByName( "dFecIni" ), ::oDbfVir:FieldGetByName( "dFecFin" ), ::oDbfVir:FieldGetByName( "cHorIni" ), ::oDbfVir:FieldGetByName( "cHorFin" ) )
   ::cTmpEmp            := cFormatoDDHHMM( ::cTiempoEmpleado )

   if ::oTmpEmp <> nil
      ::oTmpEmp:cText( ::cTmpEmp )
      ::oTmpEmp:Refresh()
   end

RETURN .T.



static FUNCTION TDetPersonal_nTotal( oDbf, oDbfHor, lRound ) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nTotal   := 0

   If( oDbf == nil, oDbf := ::oDbf, ) ;
   If( lRound == nil, lRound := .T., ) ;

   oDbf:GetStatus()

   oDbf:GoTop()
   while !oDbf:Eof()
      nTotal      += ::nTotalTrabajador( oDbf:cKeyTra, oDbfHor )
      oDbf:Skip()
   end

   oDbf:SetStatus()

RETURN ( if( lRound, Round( nTotal, ::oParent:nDorDiv ), nTotal ) )
