#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 13 ".\.\Prg\TDetSeriesMovimientos.prg"
_HB_CLASS TDetSeriesMovimientos ; function TDetSeriesMovimientos ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetSeriesMovimientos", iif( .T., { @TDet() }, { @HBObject() } ), @TDetSeriesMovimientos() ) ) ;

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetSeriesMovimientos_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetSeriesMovimientos_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDetSeriesMovimientos_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenService( lExclusive); oClass:AddMethod( "OpenService", @TDetSeriesMovimientos_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Load( lAppend); oClass:AddMethod( "Load", @TDetSeriesMovimientos_Load(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Save(); oClass:AddMethod( "Save", @TDetSeriesMovimientos_Save(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RollBack(); oClass:AddMethod( "RollBack", @TDetSeriesMovimientos_RollBack(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetSeriesMovimientos_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetSeriesMovimientos ;



static FUNCTION TDetSeriesMovimientos_DefineFiles( cPath, cDriver, lUniqueName, cFileName ) ; local Self AS CLASS TDetSeriesMovimientos := QSelf() AS CLASS TDetSeriesMovimientos

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := ::cDriver, ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "MovSer", ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cDriver ), "Números de serie de movimientos de almacen", ( cPath ) )

      oDbf:AddField( "nNumRem", "N", 9, 0, "999999999",,,,, .F.,, .T., {} )
      oDbf:AddField( "cSufRem", "C", 2, 0, "@!",,,,, .F.,, .T., {} )
      oDbf:AddField( "dFecRem", "D", 8, 0,,,,,, .F.,, .T., {} )
      oDbf:AddField( "nNumLin", "N", 04, 0,,,,, "Número de línea", .F., 60, .F., {} )
      oDbf:AddField( "cCodArt", "C", 18, 0,,,,, "Artículo", .F., 60, .F., {} )
      oDbf:AddField( "cAlmOrd", "C", 16, 0,,,,, "Almacén", .F., 50, .F., {} )
      oDbf:AddField( "lUndNeg", "L", 01, 0,,,,, "Lógico de unidades en negativo", .F.,, .T., {} )
      oDbf:AddField( "cNumSer", "C", 30, 0,,,,, "Número de serie", .F.,, .T., {} )
      oDbf:AddField( "cGuid", "C", 40, 0,,,,, "cGuid de las lineas", .F.,, .T., {} )
      oDbf:AddField( "cGuidPar", "C", 40, 0,,,,, "cGuid de la cabecera", .F.,, .T., {} )

      oDbf:AddIndex( "cNumOrd", ( cFileName ), "Str( nNumRem ) + cSufRem + Str( nNumLin )",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodArt", ( cFileName ), "cCodArt + cAlmOrd + cNumSer",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cNumSer", ( cFileName ), "cNumSer",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "nNumLin", ( cFileName ), "Str( nNumLin ) + cCodArt",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetSeriesMovimientos_OpenFiles( lExclusive ) ; local Self AS CLASS TDetSeriesMovimientos := QSelf() AS CLASS TDetSeriesMovimientos

   local lOpen             := .T.
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if empty( ::oDbf )
         ::oDbf            := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !lExclusive )

   RECOVER

      msgstop( "Imposible abrir todas las bases de datos" )
      lOpen                := .F.

   end

   ErrorBlock( oBlock )

   if !lOpen
      ::CloseFiles()
   end

RETURN ( lOpen )



static FUNCTION TDetSeriesMovimientos_CloseFiles( ) ; local Self AS CLASS TDetSeriesMovimientos := QSelf() AS CLASS TDetSeriesMovimientos

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
      ::oDbf         := nil
   end

RETURN .T.



static FUNCTION TDetSeriesMovimientos_Save( ) ; local Self AS CLASS TDetSeriesMovimientos := QSelf() AS CLASS TDetSeriesMovimientos

   local nNumRem  := ::oParent:oDbf:nNumRem
   local cSufRem  := ::oParent:oDbf:cSufRem
   local dFecRem  := ::oParent:oDbf:dFecRem
   local cAlmDes  := ::oParent:oDbf:cAlmDes

   ::oDbfVir:OrdSetFocus( 0 )

   ( ::oDbfVir:nArea )->( dbGoTop() )
   while !( ::oDbfVir:nArea )->( eof() )

      ( ::oDbf:nArea )->( dbAppend() )

      if !( ::oDbf:nArea )->( NetErr() )

         ( ::oDbf:nArea )->nNumRem  := nNumRem
         ( ::oDbf:nArea )->cSufRem  := cSufRem
         ( ::oDbf:nArea )->dFecRem  := dFecRem
         ( ::oDbf:nArea )->cAlmOrd  := cAlmDes
         ( ::oDbf:nArea )->nNumLin  := ( ::oDbfVir:nArea )->nNumLin
         ( ::oDbf:nArea )->cCodArt  := ( ::oDbfVir:nArea )->cCodArt
         ( ::oDbf:nArea )->lUndNeg  := ( ::oDbfVir:nArea )->lUndNeg
         ( ::oDbf:nArea )->cNumSer  := ( ::oDbfVir:nArea )->cNumSer

         ( ::oDbf:nArea )->( dbUnLock() )

      end

      ( ::oDbfVir:nArea )->( dbSkip() )

      if !empty( ::oParent ) .AND. !empty( ::oParent:oMeter )
         ::oParent:oMeter:AutoInc()
      end

   end

   ::Cancel()

   if !empty( ::oParent ) .AND. !empty( ::oParent:oMeter )
      ::oParent:oMeter:Refresh()
   end

RETURN ( Self )



static FUNCTION TDetSeriesMovimientos_RollBack( ) ; local Self AS CLASS TDetSeriesMovimientos := QSelf() AS CLASS TDetSeriesMovimientos

   local cKey  := ::oParent:cFirstKey
   local nArea := ::oDbf:nArea

   if cKey <> nil

      while ( nArea )->( dbSeek( cKey ) )

         if ( nArea )->( dbRlock() )
            ( nArea )->( dbDelete() )
         end

         if !empty( ::oParent ) .AND. !empty( ::oParent:oMeter )
            ::oParent:oMeter:AutoInc()
         end

      end

   end

RETURN ( Self )



static FUNCTION TDetSeriesMovimientos_Resource( nMode ) ; local Self AS CLASS TDetSeriesMovimientos := QSelf() AS CLASS TDetSeriesMovimientos

   ::oDbfVir:GetStatus()
   ::oDbfVir:OrdSetFocus( "nNumLin" )

   with object ( TNumerosSerie() )

      :nMode            := nMode

      :lCompras         := ( ::oParent:oDbf:nTipMov <> 1 )

      :cCodArt          := ::oParent:oDetMovimientos:oDbfVir:cRefMov

      :nNumLin          := ::oParent:oDetMovimientos:oDbfVir:nNumLin
      :cCodAlm          := ::oParent:oDbf:cAlmDes

      :nTotalUnidades   := nTotNMovAlm( ::oParent:oDetMovimientos:oDbfVir )

      :oStock           := ::oParent:oStock

      :uTmpSer          := ::oDbfVir

      :Resource()

   end

   ::oDbfVir:SetStatus()

RETURN ( Self )



static FUNCTION TDetSeriesMovimientos_Load( lAppend ) ; local Self AS CLASS TDetSeriesMovimientos := QSelf() AS CLASS TDetSeriesMovimientos

   If( lAppend == nil, lAppend := .F., ) ;

   ::nRegisterLoaded := 0

   if empty( ::oDbfVir )
      ::oDbfVir      := ::DefineFiles( cPatTmp(), cLocalDriver(), .T. )
   end

   if !( ::oDbfVir:Used() )
      ::oDbfVir:Activate( .F., .F. )
   end

   ::oDbfVir:Zap()

   if ::oParent:cFirstKey <> nil

      if ( lAppend ) .AND. ::oDbf:Seek( ::oParent:cFirstKey )

         while !empty( ::oDbf:OrdKeyVal() ) .AND. ( str( ::oDbf:nNumRem ) + ::oDbf:cSufRem == ::oParent:cFirstKey ) .AND. !( ::oDbf:Eof() )

            if ::bOnPreLoad <> nil
               Eval( ::bOnPreLoad, Self )
            end

            ::oDbfVir:AppendFromObject( ::oDbf )

            ::nRegisterLoaded++

            if ::bOnPostLoad <> nil
               Eval( ::bOnPostLoad, Self )
            end

            ::oDbf:Skip()

         end

      end

   end

   ::oDbfVir:GoTop()

Return ( Self )
