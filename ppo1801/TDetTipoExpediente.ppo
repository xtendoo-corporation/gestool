#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\TDetTipoExpediente.prg"
_HB_CLASS TDetTipoExpediente ; function TDetTipoExpediente ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDetTipoExpediente", iif( .T., { @TDet() }, { @HBObject() } ), @TDetTipoExpediente() ) ) ;

   _HB_MEMBER { cMessageNotFound } ; oClass:AddMultiData(, "Subtipo de expediente no encontrado", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMessageNotFound"}, .F. )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TDetTipoExpediente_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TDetTipoExpediente_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TDetTipoExpediente_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SaveLines(); oClass:AddMethod( "SaveLines", @TDetTipoExpediente_SaveLines(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave(); oClass:AddMethod( "lPreSave", @TDetTipoExpediente_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDetTipoExpediente ;



static FUNCTION TDetTipoExpediente_DefineFiles( cPath, cVia, lUniqueName, cFileName ) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cVia == nil, cVia := cDriver(), ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "TipExpL", ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPatTmp() )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "Subtipo de expedientes", ( cPath ) )

      oDbf:AddField( "cCodTip", "C", 3, 0,,,,, "Tipo expediente", .F.,, .F., {} )
      oDbf:AddField( "cCodSub", "C", 3, 0,,,,, "Código subtipo", .F.,, .F., {} )
      oDbf:AddField( "cNomSub", "C", 50, 0,,,,, "Nombre subtipo", .F.,, .F., {} )

      oDbf:AddIndex( "cCodTip", ( cFileName ), "cCodTip",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodSub", ( cFileName ), "cCodTip + cCodSub",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cNomSub", ( cFileName ), "cCodTip + Upper( cNomSub )",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TDetTipoExpediente_OpenFiles( lExclusive ) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local lOpen             := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf            := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !lExclusive )

      ::bOnPreSaveDetail   := {|| ::SaveLines() }

   RECOVER USING oError

      lOpen                := .F.

      ::CloseFiles()

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDetTipoExpediente_Resource( nMode ) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local oDlg
   local oGetSub
   local oGetNom





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "subtipo de expedientes", "LSubTipoExpediente",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )









      oGetSub := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbfVir:cCodSub, ::oDbfVir:cCodSub:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil, "LUPA",, )








      oGetNom := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cNomSub, ::oDbfVir:cNomSub:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      TButton():ReDefine( 1, {||( if( ::lPresave( oGetSub, oGetNom, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 9, {||( MsgInfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| if( ::lPresave( oGetSub, oGetNom, nMode ), oDlg:end( 1 ), ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TDetTipoExpediente_SaveLines( ) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   ::oDbfVir:cCodTip  := ::oParent:oDbf:cCodTip

RETURN ( Self )



static FUNCTION TDetTipoExpediente_lPreSave( oGetCod, oGetNom, nMode ) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local lPreSave := .T.
   local nOrdAnt  := ::oDbfVir:OrdSetFocus( "cCodSub" )

   if nMode == 1

      if ::oDbfVir:Seek( ::oDbfVir:cCodTip + ::oDbfVir:cCodSub )

         msgStop( "Código existente" )
         oGetCod:SetFocus()

         lPreSave := .F.

      end

   end

   ::oDbfVir:OrdSetFocus( nOrdAnt )

   if Empty( oGetNom:VarGet() )
      MsgStop( "El nombre del subtipo no puede estar vacio." )
      lPreSave    := .F.
   end

RETURN ( lPreSave )
