#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDiaCAnt.prg"
_HB_CLASS TDiaCAnt ; function TDiaCAnt ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiaCAnt", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiaCAnt() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCredito } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCredito"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Liquidados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TDiaCAnt_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiaCAnt_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiaCAnt_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TDiaCAnt_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiaCAnt_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiaCAnt ;



static FUNCTION TDiaCAnt_Create( ) ; local Self AS CLASS TDiaCAnt := QSelf() AS CLASS TDiaCAnt

   ::FldDiario( .F. )
   ::AddField( "dFecLiq", "D", 8, 0, {|| "@!" }, "Fec.Liq.", .T., "Fecha liquidación", 10 )

   if ::xOthers
   ::AddTmpIndex( "CCODCLI", "CCODCLI" )
   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) } )
   else
   ::AddTmpIndex( "DFECMOV", "DFECMOV" )
   end

   ::dIniInf := GetSysDate()

RETURN ( self )



static FUNCTION TDiaCAnt_OpenFiles( ) ; local Self AS CLASS TDiaCAnt := QSelf() AS CLASS TDiaCAnt

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiaCAnt_CloseFiles( ) ; local Self AS CLASS TDiaCAnt := QSelf() AS CLASS TDiaCAnt

   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oAntCliT := nil
   ::oDbfIva  := nil

RETURN ( Self )



static FUNCTION TDiaCAnt_lResource( cFld ) ; local Self AS CLASS TDiaCAnt := QSelf() AS CLASS TDiaCAnt

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN05" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oAntCliT:Lastrec() )

   ::oDefExcInf()



   TCheckBox():ReDefine( 191, { | u | If( PCount()==0, ::lExcCredito, ::lExcCredito:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmAntCli(), ::oAntCliT:cAlias )

RETURN .T.






static FUNCTION TDiaCAnt_lGenerate( ) ; local Self AS CLASS TDiaCAnt := QSelf() AS CLASS TDiaCAnt

   local bValid
   local aTotTmp
   local lExcCero := .F.
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader         := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg )+ " > " + AllTrim( ::cCliDes ) ) }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] } }

   cExpHead          := 'dFecAnt >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAnt <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   do case
      case ::oEstado:nAt == 1
         cExpHead    += " .and. !lLiquidada"
      case ::oEstado:nAt == 2
         cExpHead    += " .and. lLiquidada"
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAntCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAntCliT:cFile ), ( ::oAntCliT:OrdKey() ), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAntCliT:OrdKeyCount() )





   ::oAntCliT:GoTop()

   while !::lBreak .AND. !::oAntCliT:Eof()


      if lChkSer( ::oAntCliT:cSerAnt, ::aSer )                  .AND. if( ::lExcCredito, lClienteBloquearRiesgo( ::oAntCliT:cCodCli, ::oDbfCli:cAlias ), .T. )





         ::oDbf:Append()

         ::oDbf:cCodCli := ::oAntCliT:cCodCli
         ::oDbf:cNomCli := ::oAntCliT:cNomCli
         ::oDbf:dFecMov := ::oAntCliT:dFecAnt
         ::oDbf:dFecLiq := ::oAntCliT:dLiquidada

         aTotTmp        := aTotAntCli( ::oAntCliT:cAlias,  ::oDbfIva:cAlias, ::oDbfDiv:cAlias )

         ::oDbf:nTotNet := aTotTmp[1]
         ::oDbf:nTotIva := aTotTmp[2]
         ::oDbf:nTotReq := aTotTmp[3]
         ::oDbf:nTotDoc := aTotTmp[5]

         ::oDbf:cDocMov := ::oAntCliT:cSerAnt + "/" + Alltrim( Str( ::oAntCliT:nNumAnt ) ) + "/" + ::oAntCliT:cSufAnt

         ::AddCliente( ::oAntCliT:cCodCli, ::oAntCliT, .F. )

         ::oDbf:Save()

      end

      ::oMtrInf:AutoInc( ::oAntCliT:OrdKeyNo() )

      ::oAntCliT:Skip()

   end

   ::oAntCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAntCliT:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
