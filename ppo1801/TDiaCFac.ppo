#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDiaCFac.prg"
_HB_CLASS TDiaCFac ; function TDiaCFac ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiaCFac", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiaCFac() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oTipo } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTipo"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfObr } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfObr"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aTipo } ; oClass:AddMultiData( "ARRAY", { "Facturas", "Rectificativas", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTipo"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCredito } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCredito"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TDiaCFac_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiaCFac_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiaCFac_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TDiaCFac_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiaCFac_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiaCFac ;



static FUNCTION TDiaCFac_Create( ) ; local Self AS CLASS TDiaCFac := QSelf() AS CLASS TDiaCFac

   ::AddField( "cTipDoc", "C", 35, 0, {|| "@!" },                 "Tipo",      .F., "Tipo de documento",    12, .F. )
   ::AddField( "cDocMov", "C", 14, 0, {|| "@R #/#########/##" },  "Doc.",      .T., "Documento",            14, .F. )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },                 "Fecha",     .T., "Fecha",                10, .F. )
   ::FldCliente()
   ::AddField( "cCodObr", "C", 10, 0, {|| "@!" },                 "Cod. Dir.", .F., "Código dirección",     12, .F. )
   ::AddField( "cNomObr", "C",150, 0, {|| "@!" },                 "Dirección", .F., "Nombre dirección",     20, .F. )
   ::AddField( "nBase21", "N", 16, 6, {|| ::cPicOut },            "Base 21%",  .F., "Base al 21%",          10, .T. )
   ::AddField( "nIva21",  "N", 16, 6, {|| ::cPicOut },            "IVA. 21%",  .F., "IVA al 21%",           10, .T. )
   ::AddField( "nReq21",  "N", 16, 6, {|| ::cPicOut },            "REQ. 21%",  .F., "R.E. al 21%",          10, .T. )
   ::AddField( "nBase10", "N", 16, 6, {|| ::cPicOut },            "Base 10%",  .F., "Base al 10%",          10, .T. )
   ::AddField( "nIva10",  "N", 16, 6, {|| ::cPicOut },            "IVA. 10%",  .F., "IVA al 10%",           10, .T. )
   ::AddField( "nReq10",  "N", 16, 6, {|| ::cPicOut },            "REQ. 10%",  .F., "R.E. al 10%",          10, .T. )
   ::AddField( "nBase4",  "N", 16, 6, {|| ::cPicOut },            "Base 4%",   .F., "Base al 4%",           10, .T. )
   ::AddField( "nIva4",   "N", 16, 6, {|| ::cPicOut },            "IVA. 4%",   .F., "IVA al 4%",            10, .T. )
   ::AddField( "nReq4",   "N", 16, 6, {|| ::cPicOut },            "REQ. 4%",   .F., "R.E. al 4%",           10, .T. )
   ::AddField( "nBase0",  "N", 16, 6, {|| ::cPicOut },            "Base 0%",   .F., "Base al 0%",           10, .T. )
   ::AddField( "nIva0",   "N", 16, 6, {|| ::cPicOut },            "IVA. 0%",   .F., "IVA al 0%",            10, .T. )
   ::AddField( "nReq0",   "N", 16, 6, {|| ::cPicOut },            "REQ. 0%",   .F., "R.E. al 0%",           10, .T. )
   ::AddField( "nTotNet", "N", 16, 6, {|| ::cPicOut },            "Neto",      .T., "Neto",                 10, .T. )
   ::AddField( "nTotPnt", "N", 16, 6, {|| ::cPicPnt },            "P.V.",      .F., "Punto verde",          10, .T. )
   ::AddField( "nTotTrn", "N", 16, 6, {|| ::cPicOut },            "Transp.",   .F., "Transporte",           10, .T. )
   ::AddField( "nTotIva", "N", 16, 6, {|| ::cPicOut },            cImp(),      .T., cImp(),                 10, .T. )
   ::AddField( "nTotReq", "N", 16, 3, {|| ::cPicOut },            "Rec",       .T., "Rec",                  10, .T. )
   ::AddField( "nImpEsp", "N", 16, 6, {|| ::cPicOut },            "Imp. esp.", .T., "Impuestos especiales", 10, .T. )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut },            "Total",     .T., "Total",                10, .T. )
   ::AddField( "nCobros", "N", 16, 6, {|| ::cPicOut },            "Cobrado",   .T., "Cobrado factura",      10, .T. )
   ::AddField( "nPdtFac", "N", 16, 6, {|| ::cPicOut },            "Pendiente", .T., "Pendiente factura",    12, .T. )
   ::AddField( "nPctRet", "N", 16, 6, {|| "@E 999.99" },          "% Ret.",    .F., "Porcentaje retención", 10, .T. )
   ::AddField( "nRetFac", "N", 16, 6, {|| ::cPicOut },            "Retención", .F., "Importe retención",    10, .T. )

   if ::xOthers
   ::AddTmpIndex( "CCODCLI", "CCODCLI + Dtos( DFECMOV ) + CDOCMOV " )
   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) } )
   else
   ::AddTmpIndex( "dFecMov", "Dtos( dFecMov ) + cDocMov" )
   end

   ::dIniInf := GetSysDate()

RETURN ( self )



static FUNCTION TDiaCFac_OpenFiles( ) ; local Self AS CLASS TDiaCFac := QSelf() AS CLASS TDiaCFac

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT := TDataCenter():oFacCliT()
   ::oFacCliT:SetOrder( "dFecFac" )

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oDbfObr := DbfServer( "OBRAST.DBF", ):NewOpen( "OBRAST.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfObr:AddBag( "OBRAST.CDX" ) ; ::oDbfObr:AddBag( ) ; ::oDbfObr:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiaCFac_CloseFiles( ) ; local Self AS CLASS TDiaCFac := QSelf() AS CLASS TDiaCFac

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end
   if !Empty( ::oDbfObr ) .AND. ::oDbfObr:Used()
      ::oDbfObr:End()
   end

   ::oFacCliT  := nil
   ::oFacCliL  := nil
   ::oFacRecT  := nil
   ::oFacRecL  := nil
   ::oDbfIva   := nil
   ::oFacCliP  := nil
   ::oAntCliT  := nil
   ::oDbfObr   := nil

RETURN ( Self )



static FUNCTION TDiaCFac_lResource( cFld ) ; local Self AS CLASS TDiaCFac := QSelf() AS CLASS TDiaCFac

   local cEstado  := "Todas"
   local cTipo    := "Todas"

   if !::StdResource( "INF_GEN05FAC" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )

   ::oDefExcInf()



   TCheckBox():ReDefine( 191, { | u | If( PCount()==0, ::lExcCredito, ::lExcCredito:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )





   ::oTipo := TComboBox():ReDefine( 219, { | u | If( PCount()==0, cTipo, cTipo:= u ) }, ::aTipo, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oTipo",,,,,,, )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )

RETURN .T.






static FUNCTION TDiaCFac_lGenerate( ) ; local Self AS CLASS TDiaCFac := QSelf() AS CLASS TDiaCFac

   local lExcCero := .F.
   local aTotTmp  := {}
   local cExpHead := ""
   local aTotIva
   local hTotIva

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim ( ::cCliDes ) ) }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] }, {|| "Tipo    : " + ::aTipo[ ::oTipo:nAt ] } }

   if ::oTipo:nAt == 1 .OR. ::oTipo:nAt == 3

      ::oFacCliT:OrdSetFocus( "dFecFac" )

      do case
         case ::oEstado:nAt == 1
            cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
         case ::oEstado:nAt == 2
            cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
         otherwise
            cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      end

      if !::lAllCli
         cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
      end

      if !Empty( ::oFilter:cExpresionFilter )
         cExpHead       += " .and. " + ::oFilter:cExpresionFilter
      end

      ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )





      ::oFacCliT:GoTop()

      while !::lBreak .AND. !::oFacCliT:Eof()


         if lChkSer( ::oFacCliT:cSerie, ::aSer )                      .AND. if( ::lExcCredito, lClienteBloquearRiesgo( ::oFacCliT:cCodCli, ::oDbfCli:cAlias ), .T. )





            ::oDbf:Append()

            ::oDbf:cCodCli          := ::oFacCliT:cCodCli
            ::oDbf:cNomCli          := ::oFacCliT:cNomCli
            ::oDbf:dFecMov          := ::oFacCliT:dFecFac
            ::oDbf:cDocMov          := ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac
            ::oDbf:cCodObr          := ::oFacCliT:cCodObr
            ::oDbf:cNomObr          := oRetFld( ::oFacCliT:cCodCli + ::oFacCliT:cCodObr, ::oDbfObr, "cNomObr" )

            ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )

            aTotTmp                 := aTotFacCli( ::oFacClit:cserie + Str( ::oFacCliT:nnumfac ) + ::ofacclit:csuffac, ::ofacclit:calias, ::ofacclil:calias, ::odbfiva:calias, ::odbfdiv:calias, ::ofacclip:calias, , ::cDivInf )
            aTotIva                 := aTotTmp[8]

            ::oDbf:nTotNet          := aTotTmp[1] - aTotTmp[5] - aTotTmp[6]
            ::oDbf:nTotIva          := aTotTmp[2]
            ::oDbf:nTotReq          := aTotTmp[3]
            ::oDbf:nTotDoc          := aTotTmp[4]
            ::oDbf:nTotPnt          := aTotTmp[5]
            ::oDbf:nTotTrn          := aTotTmp[6]
            ::oDbf:nPctRet          := ::oFacCliT:nPctRet
            ::oDbf:nRetFac          := aTotTmp[12]
            ::oDbf:cTipDoc          := "Factura"
            ::oDbf:nImpEsp          := aTotTmp[10]
            ::oDbf:nCobros          := nPagFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliP:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
            ::oDbf:nPdtFac          := ::oDbf:nTotDoc - ::oDbf:nCobros

            ::oDbf:nBase21          := 0
            ::oDbf:nIva21           := 0
            ::oDbf:nReq21           := 0
            ::oDbf:nBase10          := 0
            ::oDbf:nIva10           := 0
            ::oDbf:nReq10           := 0
            ::oDbf:nBase4           := 0
            ::oDbf:nIva4            := 0
            ::oDbf:nReq4            := 0
            ::oDbf:nBase0           := 0
            ::oDbf:nIva0            := 0
            ::oDbf:nReq0            := 0

            for each hTotIva in aTotIva

               do case
                  case hGet( hTotIva, "porcentajeiva" ) == 21
                     ::oDbf:nBase21    := hGet( hTotIva, "neto" )
                     ::oDbf:nIva21     := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq21     := hGet( hTotIva, "impre" )

                  case hGet( hTotIva, "porcentajeiva" ) == 10
                     ::oDbf:nBase10    := hGet( hTotIva, "neto" )
                     ::oDbf:nIva10     := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq10     := hGet( hTotIva, "impre" )

                  case hGet( hTotIva, "porcentajeiva" ) == 4
                     ::oDbf:nBase4     := hGet( hTotIva, "neto" )
                     ::oDbf:nIva4      := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq4      := hGet( hTotIva, "impre" )

                  case hGet( hTotIva, "porcentajeiva" ) == 0
                     ::oDbf:nBase0     := hGet( hTotIva, "neto" )
                     ::oDbf:nIva0      := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq0      := hGet( hTotIva, "impre" )
               endcase

            next

            ::oDbf:Save()

            aTotTmp                 := {}

         end

         ::oMtrInf:Set( ::oFacCliT:OrdKeyNo() )

         ::oFacCliT:Skip()

      end

      ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )

   end

  if ::oTipo:nAt == 2 .OR. ::oTipo:nAt == 3





      ::oFacRecT:OrdSetFocus( "dFecFac" )

      do case
         case ::oEstado:nAt == 1
            cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
         case ::oEstado:nAt == 2
            cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
         otherwise
            cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      end

      if !::lAllCli
         cExpHead    += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
      end

      if !Empty( ::oFilter:cExpresionFilter )
         cExpHead    += " .and. " + ::oFilter:cExpresionFilter
      end

      ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )

      ::oFacRecT:GoTop()
      while !::lBreak .AND. !::oFacRecT:Eof()

         if lChkSer( ::oFacRecT:cSerie, ::aSer )

            ::oDbf:Append()

            ::oDbf:cCodCli := ::oFacRecT:cCodCli
            ::oDbf:cNomCli := ::oFacRecT:cNomCli
            ::oDbf:dFecMov := ::oFacRecT:dFecFac
            ::oDbf:cDocMov := ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac
            ::oDbf:cCodObr := ::oFacRecT:cCodObr
            ::oDbf:cNomObr := oRetFld( ::oFacCliT:cCodCli + ::oFacRecT:cCodObr, ::oDbfObr, "cNomObr" )

            ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )

            aTotTmp                 := aTotFacRec( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac, ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
            aTotIva                 := aTotTmp[8]

            ::oDbf:nTotNet          := aTotTmp[1] - aTotTmp[5] - aTotTmp[6]
            ::oDbf:nTotIva          := aTotTmp[2]
            ::oDbf:nTotReq          := aTotTmp[3]
            ::oDbf:nTotDoc          := aTotTmp[4]
            ::oDbf:nTotPnt          := aTotTmp[5]
            ::oDbf:nTotTrn          := aTotTmp[6]
            ::oDbf:nPctRet          := ::oFacRecT:nPctRet
            ::oDbf:nRetFac          := aTotTmp[12]
            ::oDbf:cTipDoc          := "Rectificativa"
            ::oDbf:nImpEsp          := aTotTmp[10]

            ::oDbf:nBase21          := 0
            ::oDbf:nIva21           := 0
            ::oDbf:nReq21           := 0
            ::oDbf:nBase10          := 0
            ::oDbf:nIva10           := 0
            ::oDbf:nReq10           := 0
            ::oDbf:nBase4           := 0
            ::oDbf:nIva4            := 0
            ::oDbf:nReq4            := 0
            ::oDbf:nBase0           := 0
            ::oDbf:nIva0            := 0
            ::oDbf:nReq0            := 0

            for each hTotIva in aTotIva

               do case
                  case hGet( hTotIva, "porcentajeiva" ) == 21
                     ::oDbf:nBase21    := hGet( hTotIva, "neto" )
                     ::oDbf:nIva21     := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq21     := hGet( hTotIva, "impre" )

                  case hGet( hTotIva, "porcentajeiva" ) == 10
                     ::oDbf:nBase10    := hGet( hTotIva, "neto" )
                     ::oDbf:nIva10     := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq10     := hGet( hTotIva, "impre" )

                  case hGet( hTotIva, "porcentajeiva" ) == 4
                     ::oDbf:nBase4     := hGet( hTotIva, "neto" )
                     ::oDbf:nIva4      := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq4      := hGet( hTotIva, "impre" )

                  case hGet( hTotIva, "porcentajeiva" ) == 0
                     ::oDbf:nBase0     := hGet( hTotIva, "neto" )
                     ::oDbf:nIva0      := hGet( hTotIva, "impiva" )
                     ::oDbf:nReq0      := hGet( hTotIva, "impre" )
               endcase

            next

            ::oDbf:Save()

            aTotTmp                 := {}

         end

         ::oMtrInf:Set( ::oFacRecT:OrdKeyNo() )

         ::oFacRecT:Skip()

      end

      ::oFacRecT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ) )

   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
