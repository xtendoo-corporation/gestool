#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDiaCRecCob.prg"
_HB_CLASS TDiaCRecCob ; function TDiaCRecCob ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiaCRecCob", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiaCRecCob() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCredito } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCredito"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TDiaCRecCob_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiaCRecCob_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiaCRecCob_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TDiaCRecCob_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiaCRecCob_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiaCRecCob ;



static FUNCTION TDiaCRecCob_Create( ) ; local Self AS CLASS TDiaCRecCob := QSelf() AS CLASS TDiaCRecCob

   ::AddField( "cTipDoc", "C",  8, 0, {|| "" },                          "Tipo",       .T., "Tipo de documento",         10 )
   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },                        "Doc.",       .T., "Documento",                 14 )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },                        "Fecha",      .T., "Fecha de expedición",       14 )
   ::AddField( "dFecCob", "D",  8, 0, {|| "@!" },                        "Cobro",      .T., "Fecha de cobro",            14 )
   ::AddField( "dFecVto", "D",  8, 0, {|| "@!" },                        "Vencimiento",.T., "Fecha de vencimiento",      14 )
   ::AddField( "cCodCaj", "C",  3, 0, {|| "@!" },                        "Caja",       .F., "Código de caja",            14 )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },                        "Cod. cli.",  .T., "Código cliente",             8 )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },                        "Cliente",    .T., "Nombre cliente",            40 )
   ::AddField( "cFpgPgo", "C",  2, 0, {|| "" },                          "FP",         .T., "Forma de pago del recibo",   2 )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut },                   "Total",      .T., "Total",                     10 )
   ::AddField( "cBanco",  "C", 50, 0, {|| "@!" },                        "Banco",      .F., "Nombre del banco",          20 )
   ::AddField( "cCuenta", "C", 30, 0, {|| "@!" },                        "Cuenta",     .F., "Cuenta bancaria",           35 )

   ::AddTmpIndex( "DFECMOV", "CCODCLI + Dtos( DFECMOV )" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( ::oDbf:cNomCli ) }, {|| "Total cliente..." } )


   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Cliente : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) } }

RETURN ( Self )



static FUNCTION TDiaCRecCob_OpenFiles( ) ; local Self AS CLASS TDiaCRecCob := QSelf() AS CLASS TDiaCRecCob

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oFacCliP     := TDataCenter():oFacCliP()

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliP := DbfServer( "TIKEP.DBF", ):NewOpen( "TIKEP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliP:AddBag( "TIKEP.CDX" ) ; ::oTikCliP:AddBag( ) ; ::oTikCliP:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiaCRecCob_CloseFiles( ) ; local Self AS CLASS TDiaCRecCob := QSelf() AS CLASS TDiaCRecCob

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliP ) .AND. ::oTikCliP:Used()
      ::oTikCliP:End()
   end

   ::oDbfIva   := nil
   ::oFacCliP  := nil
   ::oTikCliT  := nil
   ::oTikCliP  := nil

RETURN ( Self )



static FUNCTION TDiaCRecCob_lResource( cFld ) ; local Self AS CLASS TDiaCRecCob := QSelf() AS CLASS TDiaCRecCob

   ::StdResource( "INFDIARECCOB" )



   ::CreateFilter( , ::oDbf, .T. )



   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end



   ::oMtrInf:SetTotal( ::oFacCliP:Lastrec() )

RETURN .T.






static FUNCTION TDiaCRecCob_lGenerate( ) ; local Self AS CLASS TDiaCRecCob := QSelf() AS CLASS TDiaCRecCob

   local cCodCli  := ""
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   cExpHead          := ' lCobrado .and. dEntrada >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrada <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ), ::oFacCliP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliP:OrdKeyCount() )

   ::oFacCliP:GoTop()

   while !::lBreak .AND. !::oFacCliP:Eof()

      if lChkSer( ::oFacCliP:cSerie, ::aSer ) .AND. !( ::lExcCero .AND. nTotRecCli( ::oFacCliP, ::oDbfDiv ) == 0 )

         ::oDbf:Append()

         ::oDbf:cCodCli    := ::oFacCliP:cCodCli

         if ::oDbfCli:Seek( ::oFacCliP:cCodCli )
            ::oDbf:cNomCli := ::oDbfCli:Titulo
         end

         ::oDbf:dFecMov    := ::oFacCliP:dPreCob
         ::oDbf:dFecCob    := ::oFacCliP:dEntrada
         ::oDbf:dFecVto    := ::oFacCliP:dFecVto

         ::oDbf:cCodCaj    := ::oFacCliP:cCodCaj

         ::oDbf:nTotDoc    := nTotRecCli( ::oFacCliP, ::oDbfDiv )
         ::oDbf:cDocMov    := ::oFacCliP:cSerie + "/" + AllTrim( Str( ::oFacCliP:nNumFac ) ) + "/" + ::oFacCliP:cSufFac
         ::oDbf:cTipDoc    := "Factura"
         ::oDbf:cBanco     := ::oFacCliP:cBncCli
         ::oDbf:cCuenta    := ::oFacCliP:cEntCli + "-" + ::oFacCliP:cSucCli + "-" + ::oFacCliP:cDigCli + "-" + ::oFacCliP:cCtaCli

         ::oDbf:Save()

      end

      ::oMtrInf:AutoInc( ::oFacCliP:OrdKeyNo() )

      ::oFacCliP:Skip()

   end

   ::oFacCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ) )





   cExpHead       := ' dPgoTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPgoTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliP:cFile ), ::oTikCliP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oTikCliP:OrdKeyCount() )

   ::oTikCliP:GoTop()

   while !::oTikCliP:Eof()

      cCodCli  := oRetFld( ::oTikCliP:cSerTik + ::oTikCliP:cNumTik + ::oTikCliP:cSufTik, ::oTikCliT, "cCliTik" )

      if lChkSer( ::oTikCliP:cSerTik, ::aSer ) .AND. ( ::lAllCli .OR. ( cCodCli >= ::cCliOrg .AND. cCodCli <= ::cCliDes ) )

            ::oDbf:Append()

            ::oDbf:cCodCli    := cCodCli
            ::oDbf:cNomCli    := oRetFld( cCodCli, ::oDbfCli, "Titulo" )

            ::oDbf:dFecMov    := ::oTikCliP:dPgoTik
            ::oDbf:dFecCob    := ::oTikCliP:dPgoTik
            ::oDbf:dFecVto    := ::oTikCliP:dPgoTik

            ::oDbf:cCodCaj    := ::oTikCliP:cCodCaj

            ::oDbf:nTotDoc    := nTotUCobTik( ::oTikCliP, ::nDerOut, ::nValDiv )
            ::oDbf:cDocMov    := ::oTikCliP:cSerTik + "/" + AllTrim( Right( ::oTikCliP:cNumTik, 9 ) ) + "/" + ::oTikCliP:cSufTik
            ::oDbf:cFpgPgo    := ::oTikCliP:cFpgPgo
            ::oDbf:cTipDoc    := "Tiket"

            ::oDbf:Save()

      end

      ::oMtrInf:AutoInc( ::oTikCliP:OrdKeyNo() )

      ::oTikCliP:Skip()

   end

   ::oTikCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliP:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliP:Lastrec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
