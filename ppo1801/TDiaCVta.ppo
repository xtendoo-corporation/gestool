#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TDiaCVta.prg"
_HB_CLASS TDiaCVta ; function TDiaCVta ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiaCVta", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiaCVta() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfPgo } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfPgo"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TDiaCVta_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiaCVta_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiaCVta_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TDiaCVta_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiaCVta_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiaCVta ;



static FUNCTION TDiaCVta_Create( ) ; local Self AS CLASS TDiaCVta := QSelf() AS CLASS TDiaCVta

   ::FldDiario( .T. )
   ::AddField( "cTipDoc",     "C",  14, 0, {|| "@!" },         "Tipo documento",    .T., "Tipo documento",                 14 )
   ::AddField( "cEstado",     "C",  20, 0, {|| "@!" },         "Estado",            .F., "Estado documento",               20 )
   ::AddField( "cFpago",      "C",   2, 0, {|| "@!" },         "Código pago",       .F., "Código de pago",                 10 )
   ::AddField( "cDesFPago",   "C", 150, 0, {|| "@!" },         "Forma pago",        .F., "Forma de pago",                  20 )
   ::AddField( "cCodCaj",     "C",   3, 0, {|| "@!" },         "Código caja",       .F., "Código de caja",                 10 )

   if ::xOthers
   ::AddTmpIndex( "CCODCLI", "CCODCLI" )
   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) } )
   else
   ::AddTmpIndex( "dFecMov", "Dtos( dFecMov ) + cDocMov" )
   end

   ::dIniInf := GetSysDate()

RETURN ( self )



static FUNCTION TDiaCVta_OpenFiles( ) ; local Self AS CLASS TDiaCVta := QSelf() AS CLASS TDiaCVta

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oDbfPgo := DbfServer( "FPAGO.DBF", ):NewOpen( "FPAGO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfPgo:AddBag( "FPAGO.CDX" ) ; ::oDbfPgo:AddBag( ) ; ::oDbfPgo:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiaCVta_CloseFiles( ) ; local Self AS CLASS TDiaCVta := QSelf() AS CLASS TDiaCVta

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end
   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oDbfPgo )  .AND. ::oDbfPgo:Used()
      ::oDbfPgo:End()
   end

   ::oTikCliT := nil
   ::oTikCliL := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacCliP := nil
   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oDbfIva  := nil
   ::oAntCliT := nil
   ::oFacRecT := nil
   ::oFacRecL := nil
   ::oDbfPgo  := nil

RETURN ( Self )



static FUNCTION TDiaCVta_lResource( cFld ) ; local Self AS CLASS TDiaCVta := QSelf() AS CLASS TDiaCVta

   if !::StdResource( "INFGEN26" )
      return .F.
   end

   ::CreateFilter( , ::oDbf, .T. )





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   ::oDefExcInf()

   ::oDefResInf()

RETURN .T.






static FUNCTION TDiaCVta_lGenerate( ) ; local Self AS CLASS TDiaCVta := QSelf() AS CLASS TDiaCVta

   local Seconds  := Seconds()
   local nLasTik  := ::oTikCliT:Lastrec()
   local nLasAlb  := ::oAlbCliT:Lastrec()
   local nLasFac  := ::oFacCliT:Lastrec()
   local nLasRec  := ::oFacRecT:Lastrec()
   local cExpHead := ""
   local aTotTmp

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   ::oMtrInf:SetTotal( nLasTik )
   ::oMtrInf:cText   := "Procesando tikets"



   ::aHeader         := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente : " + AllTrim ( ::cCliOrg )+ " > " + AllTrim ( ::cCliDes ) } }

   ::oTikCliT:OrdSetFocus( "dFecTik" )

   cExpHead          := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. ( cTipTik == "1" .or. cTipTik == "4" )'

   if !::lAllCli
      cExpHead       += ' .and. cCliTik >= "' + Rtrim( ::cCliOrg ) + '" .and. cCliTik <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )





  ::oTikCliT:GoTop()

   WHILE !::lBreak .AND. !::oTikCliT:Eof()

      IF lChkSer( ::oTikCliT:cSerTik, ::aSer )





         aTotTmp              := aTotTik( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik, ::oTikCliT:cAlias, ::oTikCliL:cAlias, ::oDbfDiv:cAlias, nil, ::cDivInf )

         if !( ::lExcCero .AND. aTotTmp[3] == 0 )

            ::oDbf:Append()

            ::oDbf:cCodCli    := ::oTikCliT:cCliTik
            ::oDbf:dFecMov    := ::oTikCliT:dFecTik
            ::oDbf:cCodCaj    := ::oTikCliT:cNcjTik

            ::oDbf:nTotNet    := if( ::oTikCliT:cTipTik == "4", - aTotTmp[1], aTotTmp[1] )
            ::oDbf:nTotIva    := if( ::oTikCliT:cTipTik == "4", - aTotTmp[2], aTotTmp[2] )
            ::oDbf:nTotDoc    := if( ::oTikCliT:cTipTik == "4", - aTotTmp[3], aTotTmp[3] )
            ::oDbf:cDocMov    := ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik
            ::oDbf:cTipDoc    := "Tiket"
            ::oDbf:cFPago     := ::oTikCliT:cFpgTik
            ::oDbf:cDesFPago  := oRetFld( ::oTikCliT:cFpgTik, ::oDbfPgo )
            ::oDbf:cEstado    := if( ::oTikCliT:lPgdTik, "Liquidado", "Pendiente" )

            ::AddCliente( ::oTikCliT:cCliTik, ::oTikCliT, .T. )

            ::oDbf:Save()

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )

   ::oAlbCliT:OrdSetFocus( "dFecAlb" )

   cExpHead       := 'nFacturado < 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead    += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )





   ::oAlbCliT:GoTop()
   ::oMtrInf:cText := "Procesando albaranes"

   WHILE !::lBreak .AND. !::oAlbCliT:Eof()

      if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )





         aTotTmp              := aTotAlbCli( ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB, ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf  )

         if !( ::lExcCero .AND. aTotTmp[4] == 0 )

            ::oDbf:Append()

            ::oDbf:cCodCli    := ::oAlbCliT:cCodCli
            ::oDbf:cNomCli    := ::oAlbCliT:cNomCli
            ::oDbf:dFecMov    := ::oAlbCliT:dFecAlb
            ::oDbf:cCodCaj    := ::oAlbCliT:cCodCaj

            ::oDbf:nTotNet    := aTotTmp[1] - aTotTmp[5] - aTotTmp[6]
            ::oDbf:nTotIva    := aTotTmp[2]
            ::oDbf:nTotReq    := aTotTmp[3]
            ::oDbf:nTotDoc    := aTotTmp[4]
            ::oDbf:nTotPnt    := aTotTmp[5]
            ::oDbf:nTotTrn    := aTotTmp[6]
            ::oDbf:cDocMov    := ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb
            ::oDbf:cTipDoc    := "Albarán"
            ::oDbf:cFPago     := ::oAlbCliT:cCodPago
            ::oDbf:cDesFPago  := oRetFld( ::oAlbCliT:cCodPago, ::oDbfPgo )
            ::oDbf:cEstado    := "No facturado"

            ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )

            ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc()

      ::oAlbCliT:Skip()

   end

   ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )

   ::oFacCliT:OrdSetFocus( "dFecFac" )

   cExpHead       := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead    += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )

   ::oFacCliT:GoTop()
   ::oMtrInf:cText := "Procesando factura"

   WHILE !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:CSERIE, ::aSer )

         aTotTmp              := aTotFacCli (::oFacCliT:cSerie + str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias, ::oAntCliT:cAlias, ::cDivInf )

         if !( ::lExcCero .AND. aTotTmp[4]== 0 )

            ::oDbf:Append()

            ::oDbf:cCodCli    := ::oFacCliT:cCodCli
            ::oDbf:cNomCli    := ::oFacCliT:cNomCli
            ::oDbf:dFecMov    := ::oFacCliT:dFecFac
            ::oDbf:cCodCaj    := ::oFacCliT:cCodCaj

            ::oDbf:nTotNet    := aTotTmp[1] - aTotTmp[5] - aTotTmp[6]
            ::oDbf:nTotIva    := aTotTmp[2]
            ::oDbf:nTotReq    := aTotTmp[3]
            ::oDbf:nTotDoc    := aTotTmp[4]
            ::oDbf:nTotPnt    := aTotTmp[5]
            ::oDbf:nTotTrn    := aTotTmp[6]
            ::oDbf:cDocMov    := ::oFacCliT:CSERIE + Str( ::oFacCliT:NNUMFAC ) + ::oFacCliT:CSUFFAC
            ::oDbf:cTipDoc    := "Factura"
            ::oDbf:cFPago     := ::oFacCliT:cCodPago
            ::oDbf:cDesFPago  := oRetFld( ::oFacCliT:cCodPago, ::oDbfPgo )
            ::oDbf:cEstado    := if( ::oFacCliT:lLiquidada, "Liquidada", "Pendiente" )

            ::AddCliente( ::oFacCliT:cCodCli, ::oFacClit, .F. )

            ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc()

      ::oFacCliT:Skip()

   end

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )

   ::oFacRecT:OrdSetFocus( "dFecFac" )

   cExpHead       := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead    += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )

   ::oFacRecT:GoTop()

   while !::lBreak .AND. !::oFacRecT:Eof()

      if lChkSer( ::oFacRecT:cSerie, ::aSer )

         ::oDbf:Append()

         ::oDbf:cCodCli    := ::oFacRecT:cCodCli
         ::oDbf:cNomCli    := ::oFacRecT:cNomCli
         ::oDbf:cCodCaj    := ::oFacRecT:cCodCaj

         ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )
         ::oDbf:dFecMov    := ::oFacRecT:dFecFac

         aTotTmp           := aTotFacRec (::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac, ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf )

         ::oDbf:nTotNet    := aTotTmp[1] - aTotTmp[5] - aTotTmp[6]
         ::oDbf:nTotIva    := aTotTmp[2]
         ::oDbf:nTotReq    := aTotTmp[3]
         ::oDbf:nTotDoc    := aTotTmp[4]
         ::oDbf:nTotPnt    := aTotTmp[5]
         ::oDbf:nTotTrn    := aTotTmp[6]
         ::oDbf:cDocMov    := ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac
         ::oDbf:cTipDoc    := "Fac. rec."
         ::oDbf:cFPago     := ::oFacRecT:cCodPago
         ::oDbf:cDesFPago  := oRetFld( ::oFacRecT:cCodPago, ::oDbfPgo )
         ::oDbf:cEstado    := if( ::oFacRecT:lLiquidada, "Liquidada", "Pendiente" )

         ::oDbf:Save()

      end

      ::oMtrInf:AutoInc()

      ::oFacRecT:Skip()

   end

   ::oFacRecT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
