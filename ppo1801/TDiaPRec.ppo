#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDiaPRec.prg"
_HB_CLASS TDiaPRec ; function TDiaPRec ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiaPRec", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiaPRec() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Pagados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCredito } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCredito"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TDiaPRec_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiaPRec_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiaPRec_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TDiaPRec_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiaPRec_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiaPRec ;



static FUNCTION TDiaPRec_Create( ) ; local Self AS CLASS TDiaPRec := QSelf() AS CLASS TDiaPRec

   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },         "Doc.",                      .T., "Documento",                14 )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },         "Fecha",                     .T., "Fecha de expedición",      14 )
   ::AddField( "dFecVto", "D",  8, 0, {|| "@!" },         "Vencimiento",               .T., "Fecha de vencimiento",     14 )
   ::AddField( "dFecCob", "D",  8, 0, {|| "@!" },         "Pago",                      .T., "Fecha de pago",            14 )
   ::AddField( "cCodPrv", "C", 12, 0, {|| "@!" },         "Prv.",                      .T., "Cod. Proveedor",            9 )
   ::AddField( "cNomPrv", "C", 50, 0, {|| "@!" },         "Proveedor",                 .T., "Nombre Proveedor",         35 )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut },    "Total",                     .T., "Total",                    35 )
   ::AddField( "cBanco",  "C", 50, 0, {|| "@!" },         "Banco",                     .F., "Nombre del banco",         20 )
   ::AddField( "cCuenta", "C", 30, 0, {|| "@!" },         "Cuenta",                    .F., "Cuenta bancaria",          35 )

   ::AddTmpIndex( "dFecMov", "dFecMov" )

   ::dIniInf := GetSysDate()

RETURN ( self )



static FUNCTION TDiaPRec_OpenFiles( ) ; local Self AS CLASS TDiaPRec := QSelf() AS CLASS TDiaPRec

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiaPRec_CloseFiles( ) ; local Self AS CLASS TDiaPRec := QSelf() AS CLASS TDiaPRec

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end

   ::oDbfIva  := nil
   ::oFacPrvP := nil

RETURN ( Self )



static FUNCTION TDiaPRec_lResource( cFld ) ; local Self AS CLASS TDiaPRec := QSelf() AS CLASS TDiaPRec

   local cEstado := "Pagados"

   if !::StdResource( "PRVDIAREC" )
      return .F.
   end





   if !::oDefPrvInf( 70, 80, 90, 100, 400 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacPrvP:Lastrec() )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmRecPrv(), ::oFacPrvP:cAlias  )

RETURN .T.






static FUNCTION TDiaPRec_lGenerate( ) ; local Self AS CLASS TDiaPRec := QSelf() AS CLASS TDiaPRec

   local bFecha   := {|| .T. }
   local bValid   := {|| .T. }
   local lExcCero := .F.
   local aTotTmp  := {}
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oFacPrvP:lCobrado }
         bFecha   := {|| ::oFacPrvP:dPreCob >= ::dIniInf .AND. ::oFacPrvP:dPreCob <= ::dFinInf }
         ::oFacPrvP:OrdSetFocus( "dPreCob" )
      case ::oEstado:nAt == 2
         bValid   := {|| ::oFacPrvP:lCobrado }
         bFecha   := {|| ::oFacPrvP:dEntrada >= ::dIniInf .AND. ::oFacPrvP:dEntrada <= ::dFinInf }
         ::oFacPrvP:OrdSetFocus( "dEntrda" )
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
         bFecha   := {|| ::oFacPrvP:dPreCob >= ::dIniInf .AND. ::oFacPrvP:dPreCob <= ::dFinInf }
         ::oFacPrvP:OrdSetFocus( "dPreCob" )
   end




   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Proveedor : " + AllTrim( ::cPrvOrg ) + " > " + AllTrim( ::cPrvDes ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] } }

   ::oFacPrvP:OrdSetFocus( "DENTRADA" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oFacPrvP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvP:cFile ), ::oFacPrvP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oFacPrvP:GoTop()

   while !::lBreak .AND. !::oFacPrvP:Eof()




      if Eval( bValid )                                                                                  .AND. Eval( bFecha )                                                                                  .AND. ( ::lAllPrv .OR. ( ::oFacPrvP:cCodPrv >= ::cPrvOrg .AND. ::oFacPrvP:cCodPrv <= ::cPrvDes ) )    .AND. lChkSer( ::oFacPrvP:cSerFac, ::aSer )





         if !( ::lExcCero .AND. nTotRecPrv( ::oFacPrvP:cAlias, ::oDbfDiv:cAlias, ::cDivInf ) == 0 )

            ::oDbf:Append()

            ::oDbf:cCodPrv    := ::oFacPrvP:cCodPrv

            if ::oDbfPrv:Seek( ::oFacPrvP:cCodPrv )
               ::oDbf:cNomPrv := ::oDbfPrv:Titulo
            end

            ::oDbf:dFecMov    := ::oFacPrvP:dPreCob
            ::oDbf:dFecCob    := ::oFacPrvP:dEntrada
            ::oDbf:dFecVto    := ::oFacPrvP:dFecVto
            ::oDbf:nTotDoc    := nTotRecPrv( ::oFacPrvP:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
            ::oDbf:cDocMov    := AllTrim( ::oFacPrvP:cSerFac ) + "/" + AllTrim( Str( ::oFacPrvP:nNumFac ) )+ "/" + AllTrim( ::oFacPrvP:cSufFac )
            ::oDbf:cBanco     := ::oFacPrvP:cBncPrv
            ::oDbf:cCuenta    := ::oFacPrvP:cEntPrv + "-" + ::oFacPrvP:cSucPrv + "-" + ::oFacPrvP:cDigPrv + "-" + ::oFacPrvP:cCtaPrv

            ::oDbf:Save()

         end

      end

      ::oFacPrvP:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvP:OrdKeyNo() )

   end

   ::oFacPrvP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvP:cFile ) )

   ::oMtrInf:AutoInc( ::oFacPrvP:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
