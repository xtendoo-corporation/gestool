#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDiaXAlb.prg"
_HB_CLASS TDiaXAlb ; function TDiaXAlb ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiaXAlb", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiaXAlb() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfCli } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCli"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "No facturado", "Facturado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCredito } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCredito"}, .F. )
   _HB_MEMBER { AS ARRAY aEntregado } ; oClass:AddMultiData( "ARRAY", { "No entregados", "Entregados", "Todos"}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEntregado"}, .F. )
   _HB_MEMBER { AS OBJECT oEntregado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEntregado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TDiaXAlb_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiaXAlb_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiaXAlb_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TDiaXAlb_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiaXAlb_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiaXAlb ;



static FUNCTION TDiaXAlb_Create( ) ; local Self AS CLASS TDiaXAlb := QSelf() AS CLASS TDiaXAlb

   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },         "Doc.",           .T., "Documento",                 14 )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },         "Fecha",          .T., "Fecha",                     14 )
   ::AddField( "cCodGrC", "C", 12, 0, {|| "@!" },         "Grp. Cli.",      .F., "Grupo cliente",              8 )
   ::AddField( "cNomGrC", "C", 50, 0, {|| "@!" },         "Nombre",         .F., "Nombre grupo cliente",      25 )
   ::FldCliente()
   ::AddField( "nTotNet", "N", 16, 6, {|| ::cPicOut },    "Neto",           .T., "Neto",                      10 )
   ::AddField( "nTotPnt", "N", 16, 6, {|| ::cPicPnt },    "P.V.",           .F., "Punto Verde",               10 )
   ::AddField( "nTotTrn", "N", 16, 6, {|| ::cPicOut },    "Transp.",        .F., "Transporte",                10 )
   ::AddField( "nTotIva", "N", 16, 6, {|| ::cPicOut },    cImp(),            .T., cImp(),                       10 )
   ::AddField( "nTotReq", "N", 16, 3, {|| ::cPicOut },    "Rec",            .T., "Rec",                       10 )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut },    "Total",          .T., "Total",                     10 )
   ::AddField( "cTipVen", "C", 20, 0, {|| "@!" },         "Venta",          .F., "Tipo de venta",             20 )
   ::AddField( "dFecEnt", "D",  8, 0, {|| "@!" },         "Fec. entrega",   .T., "Fecha de entrega",          10 )

   ::AddTmpIndex( "cCodGrC", "cCodGrC + cDocMov" )

   ::AddGroup( {|| ::oDbf:cCodGrC }, {|| "Grupo clientes  : " + Rtrim( ::oDbf:cCodGrC ) + "-" + Rtrim( ::oDbf:cNomGrC ) }, {||"Total grupo clientes..."} )

   ::dIniInf := GetSysDate()

RETURN ( self )



static FUNCTION TDiaXAlb_OpenFiles( ) ; local Self AS CLASS TDiaXAlb := QSelf() AS CLASS TDiaXAlb

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiaXAlb_CloseFiles( ) ; local Self AS CLASS TDiaXAlb := QSelf() AS CLASS TDiaXAlb

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oDbfIva  := nil
   ::oDbfCli  := nil

RETURN ( Self )



static FUNCTION TDiaXAlb_lResource( cFld ) ; local Self AS CLASS TDiaXAlb := QSelf() AS CLASS TDiaXAlb

   local cEstado    := "Todos"
   local cEntregado := "Todos"

   if !::StdResource( "INFDIAGRP" )
      return .F.
   end





   if !::oDefGrpCli( 70, 80, 90, 100, 160 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDefExcInf()



   TCheckBox():ReDefine( 191, { | u | If( PCount()==0, ::lExcCredito, ::lExcCredito:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )





   ::oEntregado := TComboBox():ReDefine( 219, { | u | If( PCount()==0, cEntregado, cEntregado:= u ) }, ::aEntregado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEntregado",,,,,,, )

   ::CreateFilter( aItmAlbCli(), ::oAlbCliT:cAlias )

RETURN .T.






static FUNCTION TDiaXAlb_lGenerate( ) ; local Self AS CLASS TDiaXAlb := QSelf() AS CLASS TDiaXAlb

   local bValid       := {|| .T. }
   local bVEntregado  := {|| .T. }
   local lExcCero     := .F.
   local aTotTmp      := {}
   local cGrpCli
   local cExpHead     := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Grp. Cli. : " + if( ::lGrpAll, "Todos", Alltrim( ::cGrpOrg ) + " > " + Alltrim( ::cGrpDes ) ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] }, {|| "Entregado : " + ::aEntregado[ ::oEntregado:nAt ] } }

   ::oAlbCliT:OrdSetFocus( "dFecAlb" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    += "nFacturado < 3"
      case ::oEstado:nAt == 2
         cExpHead    += "nFacturado == 3"
      case ::oEstado:nAt == 3
         cExpHead    += ".t."
   end

   do case
      case ::oEntregado:nAt == 1
         cExpHead    += " .and. !lEntregado"
      case ::oEntregado:nAt == 2
         cExpHead    += " .and. lEntregado"
      case ::oEntregado:nAt == 3
         cExpHead    += " .and. .t."
   end

   if ::oEntregado:nAt <> 2
      cExpHead       += ' .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   else
      cExpHead       += ' .and. dFecEnv >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecEnv <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )





   ::oAlbCliT:GoTop()

   WHILE !::lBreak .AND. !::oAlbCliT:Eof()

      cGrpCli := cGruCli( ::oAlbCliT:cCodCli, ::oDbfCli )



      if ( ::lGrpAll .OR. ( cGrpCli >= ::cGrpOrg .AND. cGrpCli <= ::cGrpDes ) )    .AND. if( ::lExcCredito, lCliChg( cGrpCli, ::oGrpCli:oDbf ), .T. )              .AND. lChkSer( ::oAlbCliT:cSerAlb, ::aSer )





         ::oDbf:Append()

         ::oDbf:cCodGrC := cGrpCli
         ::oDbf:cNomGrC := oRetFld( cGrpCli, ::oGrpCli:oDbf)
         ::oDbf:dFecMov := ::oAlbCliT:dFecAlb
         ::oDbf:dFecEnt := ::oAlbCliT:dFecEnt
         ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )

         aTotTmp        := aTotAlbCli( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb, ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf  )

         ::oDbf:nTotNet := aTotTmp[1] - aTotTmp[5] - aTotTmp[6]
         ::oDbf:nTotIva := aTotTmp[2]
         ::oDbf:nTotReq := aTotTmp[3]
         ::oDbf:nTotDoc := aTotTmp[4]
         ::oDbf:nTotPnt := aTotTmp[5]
         ::oDbf:nTotTrn := aTotTmp[6]
         ::oDbf:cDocMov := lTrim ( ::oAlbCliT:cSerAlb ) + "/" + lTrim ( Str( ::oAlbCliT:nNumAlb ) ) + "/" + lTrim ( ::oAlbCliT:cSufAlb )

         ::oDbf:Save()

      end

      ::oMtrInf:AutoInc()

      ::oAlbCliT:Skip()

   end

   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
