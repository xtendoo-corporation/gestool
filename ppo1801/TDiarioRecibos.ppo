#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TDiarioRecibos.prg"
_HB_CLASS TDiarioRecibos ; function TDiarioRecibos ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiarioRecibos", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiarioRecibos() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "No cobrados", "Cobrados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCredito } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCredito"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfPago } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfPago"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TDiarioRecibos_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiarioRecibos_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiarioRecibos_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TDiarioRecibos_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiarioRecibos_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiarioRecibos ;



static FUNCTION TDiarioRecibos_Create( ) ; local Self AS CLASS TDiarioRecibos := QSelf() AS CLASS TDiarioRecibos

   ::AddField( "cModDoc", "C", 15, 0, {|| "@!" },        "Cobro o pago",        .F., "Cobro o pago",              15 )
   ::AddField( "cTipDoc", "C", 40, 0, {|| "@!" },        "Tipo",                .T., "Tipo de documento",         30 )
   ::AddField( "cDocMov", "C", 18, 0, {|| "@!" },        "Doc.",                .T., "Documento",                 15 )
   ::AddField( "cCodDel", "C",  2, 0, {|| "@!" },        "Deleg.",              .F., "Delegación",                15 )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },        "Fecha",               .T., "Fecha de expedición",       14 )
   ::AddField( "dFecCob", "D",  8, 0, {|| "@!" },        "Cobro",               .T., "Fecha de cobro",            14 )
   ::AddField( "dFecVto", "D",  8, 0, {|| "@!" },        "Vencimiento",         .T., "Fecha de vencimiento",      14 )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },        "Código",              .T., "Código",                     8 )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },        "Cliente/Proveedor",   .T., "Cliente/Proveedor",         40 )
   ::AddField( "cFpgPgo", "C",  2, 0, {|| "@!" },        "FP",                  .T., "Código forma de pago",       4 )
   ::AddField( "cNomPgo", "C",150, 0, {|| "@!" },        "Forma pago",          .F., "Nombre forma de pago",      25 )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut },   "Total",               .T., "Total",                     18 )
   ::AddField( "cBanco",  "C", 50, 0, {|| "@!" },        "Banco",               .F., "Nombre del banco",          20 )
   ::AddField( "cCuenta", "C", 30, 0, {|| "@!" },        "Cuenta",              .F., "Cuenta bancaria",           35 )

   ::AddTmpIndex( "dFecMov", "cModDoc + Dtos ( dFecMov )" )

   ::AddGroup( {|| ::oDbf:cModDoc }, {|| Rtrim( ::oDbf:cModDoc ) } )

   ::dIniInf      := GetSysDate()




   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Cliente   : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) }, {|| "Proveedor : " + if( ::lAllPrv, "Todos", AllTrim( ::cPrvOrg ) + " > " + AllTrim( ::cPrvDes ) ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] } }

RETURN ( Self )



static FUNCTION TDiarioRecibos_OpenFiles( ) ; local Self AS CLASS TDiarioRecibos := QSelf() AS CLASS TDiarioRecibos

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

      ::oFacCliP := TDataCenter():oFacCliP()

      ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

      ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

      ::oTikCliP := DbfServer( "TIKEP.DBF", ):NewOpen( "TIKEP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliP:AddBag( "TIKEP.CDX" ) ; ::oTikCliP:AddBag( ) ; ::oTikCliP:AutoIndex()

      ::oDbfPago := DbfServer( "FPAGO.DBF", ):NewOpen( "FPAGO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfPago:AddBag( "FPAGO.CDX" ) ; ::oDbfPago:AddBag( ) ; ::oDbfPago:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiarioRecibos_CloseFiles( ) ; local Self AS CLASS TDiarioRecibos := QSelf() AS CLASS TDiarioRecibos

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end
   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliP ) .AND. ::oTikCliP:Used()
      ::oTikCliP:End()
   end
   if !Empty( ::oDbfPago ) .AND. ::oDbfPago:Used()
      ::oDbfPago:End()
   end

   ::oDbfIva   := nil
   ::oFacCliP  := nil
   ::oFacPrvP  := nil
   ::oTikCliT  := nil
   ::oTikCliP  := nil
   ::oDbfPago  := nil

RETURN ( Self )



static FUNCTION TDiarioRecibos_lResource( cFld ) ; local Self AS CLASS TDiarioRecibos := QSelf() AS CLASS TDiarioRecibos

   local cEstado := "Todos"

   ::StdResource( "InfDiarioRecibos" )

   ::oBtnFilter:Disable()





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end

   if !::oDefPrvInf( 410, 420, 430, 440, 400 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacCliP:Lastrec() )



   TCheckBox():ReDefine( 191, { | u | If( PCount()==0, ::lExcCredito, ::lExcCredito:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

RETURN .T.






static FUNCTION TDiarioRecibos_lGenerate( ) ; local Self AS CLASS TDiarioRecibos := QSelf() AS CLASS TDiarioRecibos

   local cCodCli     := ""
   local cExpHead    := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lCobrado .and. dPreCob >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPreCob <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lCobrado.and. dEntrada >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrada <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      otherwise
         cExpHead    := 'dPreCob >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPreCob <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   ::oFacCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ), ::oFacCliP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliP:OrdKeyCount() )

   ::oFacCliP:GoTop()

   while !::lBreak .AND. !::oFacCliP:Eof()


      if !( ::lExcCredito .AND. lClienteBloquearRiesgo( ::oFacCliP:cCodCli, ::oDbfCli:cAlias ) )          .AND. lChkSer( ::oFacCliP:cSerie, ::aSer )





         if !( ::lExcCero .AND. nTotRecCli( ::oFacCliP, ::oDbfDiv ) == 0 )

            ::oDbf:Append()

            ::oDbf:cCodCli    := ::oFacCliP:cCodCli

            if ::oDbfCli:Seek( ::oFacCliP:cCodCli )
               ::oDbf:cNomCli := ::oDbfCli:Titulo
            end

            ::oDbf:cModDoc    := "Cobro"
            ::oDbf:dFecMov    := ::oFacCliP:dPreCob
            ::oDbf:dFecCob    := ::oFacCliP:dEntrada
            ::oDbf:dFecVto    := ::oFacCliP:dFecVto
            ::oDbf:nTotDoc    := nTotRecCli( ::oFacCliP, ::oDbfDiv )
            ::oDbf:cDocMov    := ::oFacCliP:cSerie + "/" + AllTrim( Str( ::oFacCliP:nNumFac ) ) + "-" + AllTrim( Str( ::oFacCliP:nNumRec ) )
            ::oDbf:cCodDel    := ::oFacCliP:cSufFac
            ::oDbf:cTipDoc    := if( Empty( ::oFacCliP:cTipRec ), "Factura cliente", "Rectificativa cliente" )
            ::oDbf:cFpgPgo    := ::oFacCliP:cCodPgo
            ::oDbf:cNomPgo    := oRetFld( ::oFacCliP:cCodPgo, ::oDbfPago )
            ::oDbf:cBanco     := ::oFacCliP:cBncCli
            ::oDbf:cCuenta    := ::oFacCliP:cEntCli + "-" + ::oFacCliP:cSucCli + "-" + ::oFacCliP:cDigCli + "-" + ::oFacCliP:cCtaCli

            ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc( ::oFacCliP:OrdKeyNo() )

      ::oFacCliP:Skip()

   end

   ::oFacCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ) )





   if ::oEstado:nAt > 1

      cExpHead       := 'dPgoTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPgoTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

      ::oTikCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliP:cFile ), ::oTikCliP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oTikCliP:OrdKeyCount() )

      ::oTikCliP:GoTop()

      while !::oTikCliP:Eof()

         cCodCli  := oRetFld( ::oTikCliP:cSerTik + ::oTikCliP:cNumTik + ::oTikCliP:cSufTik, ::oTikCliT, "cCliTik" )

         if ::lAllCli .OR. ( cCodCli >= ::cCliOrg .AND. cCodCli <= ::cCliDes )



            if !( ::lExcCredito .AND. lClienteBloquearRiesgo( cCodCli, ::oDbfCli:cAlias ) )   .AND. !( ::lExcCero .AND. nTotUCobTik( ::oTikCliP, ::nDerOut, ::nValDiv ) == 0 )    .AND. lChkSer( ::oTikCliP:cSerTik, ::aSer )

               ::oDbf:Append()

               ::oDbf:cModDoc    := "Cobro"

               ::oDbf:cCodCli    := cCodCli
               ::oDbf:cNomCli    := oRetFld( cCodCli, ::oDbfCli, "Titulo" )

               ::oDbf:dFecMov    := ::oTikCliP:dPgoTik
               ::oDbf:dFecCob    := ::oTikCliP:dPgoTik
               ::oDbf:dFecVto    := ::oTikCliP:dPgoTik
               ::oDbf:nTotDoc    := nTotUCobTik( ::oTikCliP, ::nDerOut, ::nValDiv )
               ::oDbf:cDocMov    := ::oTikCliP:cSerTik + "/" + AllTrim( Right( ::oTikCliP:cNumTik, 9 ) ) + "-" + AllTrim( Str( ::oTikCliP:nNumRec ) )
               ::oDbf:cCodDel    := ::oTikCliP:cSufTik
               ::oDbf:cFpgPgo    := ::oTikCliP:cFpgPgo
               ::oDbf:cNomPgo    := oRetFld( ::oTikCliP:cFpgPgo, ::oDbfPago )
               ::oDbf:cTipDoc    := if( oRetFld( ::oTikCliP:cSerTik + ::oTikCliP:cNumTik + ::oTikCliP:cSufTik, ::oTikCliT, "lFreTik", "CNUMTIK" ), "Cheque regalo", "Tiket cliente" )

               ::oDbf:Save()

            end

         end

         ::oMtrInf:AutoInc( ::oTikCliP:OrdKeyNo() )

         ::oTikCliP:Skip()

      end

      ::oTikCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliP:cFile ) )

   end

   ::oMtrInf:AutoInc( ::oTikCliP:Lastrec() )





   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lCobrado .and. dPreCob >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPreCob <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lCobrado.and. dEntrada >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrada <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      otherwise
         cExpHead    := 'dPreCob >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dPreCob <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllPrv
      cExpHead       += ' .and. cCodPrv >= "' + Rtrim( ::cPrvOrg ) + '" .and. cCodPrv <= "' + Rtrim( ::cPrvDes ) + '"'
   end

   ::oFacPrvP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvP:cFile ), ::oFacPrvP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacPrvP:OrdKeyCount() )

   ::oFacPrvP:GoTop()
   while !::lBreak .AND. !::oFacPrvP:Eof()

      if lChkSer( ::oFacPrvP:cSerFac, ::aSer )





         if !( ::lExcCero .AND. nTotRecPrv( ::oFacPrvP:cAlias, ::oDbfDiv:cAlias, ::cDivInf ) == 0 )

            ::oDbf:Append()

            ::oDbf:cModDoc    := "Pago"
            ::oDbf:cCodCli    := ::oFacPrvP:cCodPrv
            ::oDbf:cNomCli    := oRetFld( ::oFacPrvP:cCodPrv, ::oDbfPrv, "Titulo" )
            ::oDbf:dFecMov    := ::oFacPrvP:dPreCob
            ::oDbf:dFecCob    := ::oFacPrvP:dEntrada
            ::oDbf:dFecVto    := ::oFacPrvP:dFecVto
            ::oDbf:nTotDoc    := nTotRecPrv( ::oFacPrvP:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
            ::oDbf:cDocMov    := AllTrim( ::oFacPrvP:cSerFac ) + "/" + AllTrim( Str( ::oFacPrvP:nNumFac ) )+ "/" + AllTrim( ::oFacPrvP:cSufFac )
            ::oDbf:cCodDel    := ::oFacPrvP:cSufFac
            ::oDbf:cTipDoc    := "Factura proveedor"
            ::oDbf:cFpgPgo    := ::oFacPrvP:cCodPgo
            ::oDbf:cNomPgo    := oRetFld( ::oFacPrvP:cCodPgo, ::oDbfPago )
            ::oDbf:cBanco     := ::oFacPrvP:cBncPrv
            ::oDbf:cCuenta    := ::oFacPrvP:cEntPrv + "-" + ::oFacPrvP:cSucPrv + "-" + ::oFacPrvP:cDigPrv + "-" + ::oFacPrvP:cCtaPrv

            ::oDbf:Save()

         end

      end

      ::oFacPrvP:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvP:OrdKeyNo() )

   end

   ::oFacPrvP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvP:cFile ) )

   ::oMtrInf:AutoInc( ::oFacPrvP:LastRec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
