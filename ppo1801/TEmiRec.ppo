#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TEmiRec.prg"
_HB_CLASS TEmiRec ; function TEmiRec ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TEmiRec", iif( .T., { @TInfGen() }, { @HBObject() } ), @TEmiRec() ) ) ;

   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TEmiRec_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TEmiRec_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TEmiRec_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TEmiRec_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TEmiRec_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetMedia(); oClass:AddMethod( "GetMedia", @TEmiRec_GetMedia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TEmiRec ;



static FUNCTION TEmiRec_Create( ) ; local Self AS CLASS TEmiRec := QSelf() AS CLASS TEmiRec

   ::AddField( "CCODCLI", "C", 12, 0, {|| "@!" },         "Código",                    .F., "Código cliente"            ,  8, .F.)
   ::AddField( "CNOMCLI", "C", 50, 0, {|| "@!" },         "Cliente",                   .F., "Nombre cliente"            , 25, .F.)
   ::AddField( "CNIFCLI", "C", 15, 0, {|| "@!" },         "Nif",                       .F., "Nif"                       ,  8, .F.)
   ::AddField( "CDOMCLI", "C", 35, 0, {|| "@!" },         "Domicilio",                 .F., "Domicilio"                 , 25, .F.)
   ::AddField( "CPOBCLI", "C", 25, 0, {|| "@!" },         "Población",                 .F., "Población"                 , 20, .F.)
   ::AddField( "CPROCLI", "C", 20, 0, {|| "@!" },         "Provincia",                 .F., "Provincia"                 , 20, .F.)
   ::AddField( "CCDPCLI", "C",  7, 0, {|| "@!" },         "CP",                        .F., "Cod. postal"               , 20, .F.)
   ::AddField( "CTLFCLI", "C", 12, 0, {|| "@!" },         "Tlf.",                      .F., "Teléfono"                  ,  7, .F.)
   ::AddField( "CCODAGE", "C",  3, 0, {|| "@!" },         "Cod. age.",                 .F., "Código agente"             , 14, .F.)
   ::AddField( "CNOMAGE", "C", 40, 0, {|| "@!" },         "Agente",                    .F., "Nombre agente"             , 14, .F.)
   ::AddField( "CDOCMOV", "C", 18, 0, {|| "@!" },         "Recibo",                    .T., "Recibo"                    , 14, .F.)
   ::AddField( "NTOTDOC", "N", 16, 6, {|| ::cPicOut },    "Tot. Rec",                  .T., "Total recibo"              , 10, .T.)
   ::AddField( "DFECMOV", "D",  8, 0, {|| "@!" },         "Exped.",                    .T., "Fecha de expedición"       , 14, .F.)
   ::AddField( "DFECCOB", "D",  8, 0, {|| "@!" },         "Cobro",                     .T., "Fecha de cobro"            , 14, .F.)
   ::AddField( "NTOTDIA", "N", 16, 0, {|| "999" },        "Dias",                      .T., "Dias transcurridos"        ,  4, .T.)
   ::AddField( "NTOTFAC", "N", 16, 6, {|| ::cPicOut },    "Tot. Fac",                  .F., "Total factura"             , 10, .T.)
   ::AddField( "NTOTCOB", "N", 16, 6, {|| ::cPicOut },    "Tot. Cob",                  .F., "Total cobrado"             , 10, .T.)
   ::AddField( "NTOTPEN", "N", 16, 6, {|| ::cPicOut },    "Tot. Pen",                  .F., "Total pendiente"           , 10, .T.)
   ::AddField( "CBANCO",  "C", 50, 0, {|| "@!" },         "Banco",                     .F., "Nombre del banco"          , 20, .F. )
   ::AddField( "CCUENTA", "C", 30, 0, {|| "@!" },         "Cuenta",                    .F., "Cuenta bancaria"           , 35, .F. )

   ::AddTmpIndex( "cCodCli", "cCodCli" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( ::oDbf:cNomCli ) }, {||"Media pago " + ::GetMedia() } )

RETURN ( Self )



static FUNCTION TEmiRec_OpenFiles( ) ; local Self AS CLASS TEmiRec := QSelf() AS CLASS TEmiRec

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TEmiRec_CloseFiles( ) ; local Self AS CLASS TEmiRec := QSelf() AS CLASS TEmiRec

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacCliP := nil
   ::oAntCliT := nil
   ::oDbfIva  := nil

RETURN ( Self )



static FUNCTION TEmiRec_lResource( cFld ) ; local Self AS CLASS TEmiRec := QSelf() AS CLASS TEmiRec

   if !::StdResource( "INF_GEN28B" )
      return .F.
   end





   if !::oDefCliInf( 70, 71, 80, 81, , 600)
      return .F.
   end





   if !::oDefAgeInf( 90, 91, 100, 101, 110 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacCliP:Lastrec() )

   ::CreateFilter( aItmRecCli(), ::oFacCliP:cAlias )

RETURN .T.






static FUNCTION TEmiRec_lGenerate( ) ; local Self AS CLASS TEmiRec := QSelf() AS CLASS TEmiRec

   local cExpHead := ""
   local cCodAge  := ""
   local nTotDia  := 0

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes: " + ::cCliOrg         + " > " + ::cCliDes         }, {|| "Agentes : " + if ( !Empty( ::cAgeOrg ),( ::cAgeOrg + " > " + ::cAgeDes ), "Todos" ) } }





   ::oFacCliP:OrdSetFocus( "NNUMFAC" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oFacCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ), ::oFacCliP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oFacCliP:GoTop()
   while !::lBreak .AND. !::oFacCliP:Eof()





      cCodAge  := cAgeFacCli( ::oFacCliP:cSerie + Str( ::oFacCliP:nNumFac ) + ::oFacCliP:cSufFac, ::oFacCliT )






      if ::oFacCliP:lCobrado                                                                             .AND. ( ::lAllCli .OR. ( ::oFacCliP:cCodCli >= ::cCliOrg .AND. ::oFacCliP:cCodCli <= ::cCliDes ) )    .AND. ::oFacCliP:dPreCob >= ::dIniInf                                                                 .AND. ::oFacCliP:dPreCob <= ::dFinInf                                                                 .AND. ( ::lAgeAll .OR. ( cCodAge >= ::cAgeOrg .AND. cCodAge <= ::cAgeDes ) )                          .AND. lChkSer( ::oFacCliP:cSerie, ::aSer )





         ::oDbf:Append()

         ::oDbf:cDocMov := lTrim ( ::oFacCliP:cSerie ) + "/" + lTrim ( Str( ::oFacCliP:nNumFac ) ) + "/" + lTrim ( ::oFacCliP:cSufFac ) + "/" + lTrim ( Str( ::oFacCliP:nNumRec ) )
         ::oDbf:cCodCli := ::oFacCliP:cCodCli
         ::oDbf:cNomCli := ::oFacCliT:cNomCli

         ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )

         ::oDbf:dFecMov := ::oFacCliP:dPreCob
         ::oDbf:dFecCob := ::oFacCliP:dEntrada
         ::oDbf:nTotDoc := nTotRecCli( ::oFacCliP:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
         ::oDbf:nTotFac := nTotFacCli( ::oFacCliP:cSerie + Str( ::oFacCliP:nNumFac ) + ::oFacCliP:cSufFac, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias )
         ::oDbf:nTotCob := nPagFacCli( ::oFacCliP:cSerie + Str( ::oFacCliP:nNumFac ) + ::oFacCliP:cSufFac, ::oFacCliT:cAlias, ::oFacCliP:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf,.T. )
         ::oDbf:nTotDia := ::oFacCliP:dEntrada - ::oFacCliP:dPreCob
         ::oDbf:nTotPen := ::oDbf:nTotCob - ::oDbf:nTotFac
         ::oDbf:cBanco  := ::oFacCliP:cBncCli
         ::oDbf:cCuenta := ::oFacCliP:cEntCli + "-" + ::oFacCliP:cSucCli + "-" + ::oFacCliP:cDigCli + "-" + ::oFacCliP:cCtaCli

         ::oDbf:cCodAge := cCodAge
         ::oDbf:cNomAge := RetNbrAge( cCodAge, ::oDbfAge:cAlias )

         ::oDbf:Save()

      end

      ::oFacCliP:Skip()

      ::oMtrInf:AutoInc( ::oFacCliP:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oFacCliP:LastRec() )

   ::oFacCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TEmiRec_GetMedia( ) ; local Self AS CLASS TEmiRec := QSelf() AS CLASS TEmiRec

   local nTot  := 0
   local nCon  := 0
   local cPic  := "999"
   local nCol  := aScan( ::oReport:aColumns, {|o| o:Cargo == "Dias" } )

   if nCol <> 0
      nTot     := ::oReport:aColumns[ nCol ]:nTotal
      cPic     := ::oReport:aColumns[ nCol ]:cTotalPict
   end

   nCon        := ::oReport:aGroups[ 1 ]:nCounter


   if nCon <> 0 .AND. nTot <> 0
      nTot     := nTot / nCon
   end

RETURN ( Alltrim( Trans( nTot, cPic ) ) )
