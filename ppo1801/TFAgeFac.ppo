#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TFAgeFac.prg"
_HB_CLASS TflAgeFac ; function TflAgeFac ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TflAgeFac", iif( .T., { @TInfGen() }, { @HBObject() } ), @TflAgeFac() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lTvta } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTvta"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )

   _HB_MEMBER { AS CHARACTER cTipVen } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipVen"}, .F. )
   _HB_MEMBER { AS CHARACTER cTipVen2 } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipVen2"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Cobradas", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oIndice } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIndice"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TflAgeFac_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TflAgeFac_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TflAgeFac_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TflAgeFac_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TflAgeFac_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TflAgeFac ;



static FUNCTION TflAgeFac_Create( ) ; local Self AS CLASS TflAgeFac := QSelf() AS CLASS TflAgeFac

   ::AddField ( "cCodAge", "C",  3, 0,  {|| "@!" },         "Cod. age.",       .F., "Código agente",        3 )
   ::AddField ( "cNomAge", "C", 50, 0,  {|| "@!" },         "Agente",          .F., "Nombre agente",       25 )
   ::AddField ( "cCodFam", "C", 16, 0,  {|| "@!" },         "Cod. fam.",       .F., "Código família",       8 )
   ::AddField ( "cDesFam", "C",  8, 0,  {|| "@!" },         "Familia",         .F., "Nombre família",      20 )
   ::AddField ( "cRefArt", "C", 18, 0,  {|| "@!" },         "Código artículo",       .T., "Código artículo",     14 )
   ::AddField ( "cDesArt", "C", 50, 0,  {|| "@!" },         "Artículo",        .T., "Artículo",            35 )
   ::FldPropiedades()
   ::AddField ( "nUndCaj", "N", 16, 6,  {|| MasUnd () },    cNombreCajas(),    .F., cNombreCajas(),        12 )
   ::AddField ( "nUndArt", "N", 16, 6,  {|| MasUnd () },    cNombreUnidades(), .F., cNombreUnidades(),     12 )
   ::AddField ( "nCajUnd", "N", 16, 6,  {|| MasUnd () },    "Tot. " + cNombreUnidades(), .T., "Total " + cNombreUnidades(), 12 )
   ::AddField ( "nBasCom", "N", 16, 6,  {|| ::cPicOut },    "Base",            .T., "Base comisión",       12 )
   ::AddField ( "nTotCom", "N", 16, 6,  {|| ::cPicOut },    "Comisión",        .T., "Importe comisión",    12 )
   ::AddField ( "nPreMed", "N", 16, 6,  {|| ::cPicImp },    "Pre. Med.",       .F., "Precio medio",        12, .F. )
   ::AddField ( "cDocMov", "C", 14, 0,  {|| "" },           "Factura",         .F., "Factura",             14 )
   ::AddField ( "dFecMov", "D",  8, 0,  {|| "" },           "Fecha",           .F., "Fecha",                8 )
   ::AddField ( "cTipVen", "C", 20, 0,  {|| "@!" },         "Venta",           .F., "Tipo de venta",       20 )

   ::AddTmpIndex ( "CCODAGE", "CCODAGE + CCODFAM + CREFART" )

   ::AddGroup( {|| ::oDbf:cCodAge }, {|| "Agente  : " + Rtrim( ::oDbf:cCodAge ) + "-" + oRetFld( ::oDbf:cCodAge, ::oDbfAge ) }, {||"Total agente..."} )
   ::AddGroup( {|| ::oDbf:cCodAge + ::oDbf:cCodFam }, {|| "Família : " + Rtrim( ::oDbf:cCodFam ) + "-" + Rtrim( ::oDbf:cDesFam ) }, {||"Total família..."} )


RETURN ( self )



static FUNCTION TflAgeFac_OpenFiles( ) ; local Self AS CLASS TflAgeFac := QSelf() AS CLASS TflAgeFac

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE


   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TflAgeFac_CloseFiles( ) ; local Self AS CLASS TflAgeFac := QSelf() AS CLASS TflAgeFac

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end
   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil
   ::oDbfCli  := nil
   ::oDbfArt  := nil

RETURN ( Self )



static FUNCTION TflAgeFac_lResource( cFld ) ; local Self AS CLASS TflAgeFac := QSelf() AS CLASS TflAgeFac

   local oTipVen
   local oTipVen2
   local cEstado     := "Todas"
   local This        := Self

   if !::StdResource( "INF_GEN17C" )
      return .F.
   end





   if !::oDefAgeInf( 70, 80, 90, 100, 930 )
      return .F.
   end





   if !::lDefFamInf( 110, 120, 130, 140, 600 )
      return .F.
   end







   TCheckBox():ReDefine( 260, { | u | If( PCount()==0, ::lTvta, ::lTvta:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   ::oDefExcInf( 210 )
   ::oDefExcImp( 211 )

   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )

RETURN .T.






static FUNCTION TflAgeFac_lGenerate( ) ; local Self AS CLASS TflAgeFac := QSelf() AS CLASS TflAgeFac

   local cExpHead := ""
   local cExpLine := ""
   local bTipVen  := {|| if( !Empty( ::cTipVen ), ::oFacCliL:cTipMov == ::cTipVen, .T. ) }
   local lExcCero := .F.

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()






   ::aHeader      := {{||"Fecha   : "   + Dtoc( Date() ) }, {|| "Periodo : "   + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Agentes : "   + ::cAgeOrg         + " > " + ::cAgeDes }, {|| if ( ::lTvta,( if (!Empty( ::cTipVen ), "Tipo de venta: " + ::cTipVen2, "Tipo de venta: Todos" ) ), "Tipo de Venta: Ninguno" ) }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] }, {|| if( ::lTvta, "Aplicando comportamiento de los tipos de venta", "" ) } }





   ::oFacCliT:OrdSetFocus( "dFecFac" )
   ::oFacCliL:OrdSetFocus( "nNumFac" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAgeAll
      cExpHead       += ' .and. cCodAge >= "' + Rtrim( ::cAgeOrg ) + '" .and. cCodAge <= "' + Rtrim( ::cAgeDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )

   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllFam
      cExpLine       += ' .and. cCodFam >= "' + ::cFamOrg + '" .and. cCodFam <= "' + ::cFamDes + '"'
   end

   ::oFacCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ), ::oFacCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()


      if lChkSer( ::oFacCliT:cSerie, ::aSer )                                                                  .AND. ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )


         while ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac == ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac .AND. ! ::oFacCliL:eof()


            if !( ::lExcCero .AND. nTotNFacCli( ::oFacCliL:cAlias ) == 0 ) .AND. !( ::lExcImp .AND. nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )





               if ::oDbf:Seek( ::oFacCliT:cCodAge + ::oFacCliL:cCodFam + ::oFacCliL:cRef )

                  ::oDbf:Load()

                  ::oDbf:NUNDCAJ += ::oFacCliL:NCANENT
                  ::oDbf:NUNDART += ::oFacCliL:NUNICAJA
                  ::oDbf:NCAJUND += nTotNFacCli( ::oFacCliL )
                  ::oDbf:nBasCom += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )
                  ::oDbf:nPreMed := ::oDbf:nBasCom / ::oDbf:nCajUnd
                  ::oDbf:nTotCom += nComLFacCli( ::oFacRecT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:Save()

               else

                  ::oDbf:Append()

                  ::oDbf:cCodFam := ::oFacCliL:cCodFam
                  ::oDbf:cDesFam := RetFamilia( ::oFacCliL:cCodFam, ::oDbfFam )
                  ::oDbf:cCodAge := ::oFacCliT:cCodAge
                  ::oDbf:CDOCMOV := ::oFacCliT:cSerie + "/" + Str( ::oFacCliT:nNumFac ) + "/" + ::oFacCliT:cSufFac
                  ::oDbf:CREFART := ::oFacCliL:cRef
                  ::oDbf:CDESART := ::oFacCliL:cDetalle
                  ::oDbf:cCodPr1 := ::oFacCliL:cCodPr1
                  ::oDbf:cNomPr1 := retProp( ::oFacCliL:cCodPr1 )
                  ::oDbf:cCodPr2 := ::oFacCliL:cCodPr2
                  ::oDbf:cNomPr2 := retProp( ::oFacCliL:cCodPr2 )
                  ::oDbf:cValPr1 := ::oFacCliL:cValPr1
                  ::oDbf:cNomVl1 := retValProp( ::oFacCliL:cCodPr1 + ::oFacCliL:cValPr1 )
                  ::oDbf:cValPr2 := ::oFacCliL:cValPr2
                  ::oDbf:cNomVl2 := retValProp( ::oFacCliL:cCodPr2 + ::oFacCliL:cValPr2 )

                  if ::oDbfAge:Seek( ::oFacCliT:cCodAge )
                  ::oDbf:cNomAge := ::oDbfAge:cApeAge + ", " + ::oDbfAge:cNbrAge
                  end

                  ::oDbf:NUNDCAJ := ::oFacCliL:NCANENT
                  ::oDbf:NUNDART := ::oFacCliL:NUNICAJA
                  ::oDbf:NCAJUND := nTotNFacCli( ::oFacCliL )
                  ::oDbf:nBasCom := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )
                  ::oDbf:nTotCom := nComLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nPreMed := ::oDbf:nBasCom / ::oDbf:nCajUnd

                  ::oDbf:Save()

               end

            end

            ::oFacCliL:Skip()

         end

      end

      ::oFacCliT:Skip()
      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oFacCliT:LastRec() )

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )
   ::oFacCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
