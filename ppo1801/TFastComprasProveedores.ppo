#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\TFastComprasProveedores.prg"
_HB_CLASS TFastComprasProveedores ; function TFastComprasProveedores ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFastComprasProveedores", iif( .T., { @TFastreportTerceros() }, { @HBObject() } ), @TFastComprasProveedores() ) ) ;

   _HB_MEMBER { cType } ; oClass:AddMultiData(, "Proveedores", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cType"}, .F. )

   _HB_MEMBER { cExpresionHeader } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cExpresionHeader"}, .F. )

   _HB_MEMBER { lApplyFilters } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lApplyFilters"}, .F. )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TFastComprasProveedores_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TFastComprasProveedores_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TFastComprasProveedores_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidRegister(); oClass:AddMethod( "lValidRegister", @TFastComprasProveedores_lValidRegister(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TFastComprasProveedores_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TFastComprasProveedores_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DataReport( oFr); oClass:AddMethod( "DataReport", @TFastComprasProveedores_DataReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddVariable(); oClass:AddMethod( "AddVariable", @TFastComprasProveedores_AddVariable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER StartDialog(); oClass:AddMethod( "StartDialog", @TFastComprasProveedores_StartDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER BuildTree(); oClass:AddMethod( "BuildTree", @TFastComprasProveedores_BuildTree(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddProveedor(); oClass:AddMethod( "AddProveedor", @TFastComprasProveedores_AddProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRecibosProveedor( cFieldOrder); oClass:AddMethod( "AddRecibosProveedor", @TFastComprasProveedores_AddRecibosProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddRecibosProveedorCobro(); oClass:AddInline( "AddRecibosProveedorCobro", {|Self | ( ( Self ) ), ( ::AddRecibosProveedor( "dEntrada" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddRecibosProveedorVencimiento(); oClass:AddInline( "AddRecibosProveedorVencimiento", {|Self | ( ( Self ) ), ( ::AddRecibosProveedor( "dFecVto" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER idDocumento(); oClass:AddInline( "idDocumento", {|Self | ( ( Self ) ), ( ::oDbf:cClsDoc + ::oDbf:cSerDoc + ::oDbf:cNumDoc + space(1) + ::oDbf:cSufDoc ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER idDocumentoLinea(); oClass:AddInline( "idDocumentoLinea", {|Self | ( ( Self ) ), ( ::idDocumento() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setFilterPaymentId(); oClass:AddInline( "setFilterPaymentId", {|Self | ( ( Self ) ), ( if( ::lApplyFilters, ::cExpresionHeader  += ' .and. ( alltrim( Field->cCodPgo ) >= "' + alltrim( ::oGrupoFpago:Cargo:Desde ) + '" .and. alltrim( Field->cCodPgo ) <= "' + alltrim(::oGrupoFpago:Cargo:Hasta ) + '" )', ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setFilterPaymentInvoiceId(); oClass:AddInline( "setFilterPaymentInvoiceId", {|Self | ( ( Self ) ), ( if( ::lApplyFilters, ::cExpresionHeader  += ' .and. ( alltrim( Field->cCodPago ) >= "' + alltrim( ::oGrupoFpago:Cargo:Desde ) + '" .and. alltrim( Field->cCodPago ) <= "' + alltrim(::oGrupoFpago:Cargo:Hasta ) + '" )', ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setFilterProviderId(); oClass:AddInline( "setFilterProviderId", {|Self | ( ( Self ) ), ( if( ::lApplyFilters, ::cExpresionHeader  += ' .and. ( alltrim( Field->cCodPrv ) >= "' + alltrim( ::oGrupoProveedor:Cargo:Desde ) + '" .and. alltrim( Field->cCodPrv ) <= "' + alltrim( ::oGrupoProveedor:Cargo:Hasta ) + '" )', ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFastComprasProveedores ;



static FUNCTION TFastComprasProveedores_lResource( cFld ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   ::lNewInforme     := .T.
   ::lDefCondiciones := .F.

   ::cSubTitle       := "Informe de compras"

   ::cTipoInforme    := "Proveedores"
   ::cBmpInforme     := "gc_businessman_64"

   if !::NewResource()
      return .F.
   end





   if !::lGrupoProveedor( .T. )
      return .F.
   end

   if !::lGrupoGProveedor( .T. )
      return .F.
   end

   if !::lGrupoFpago( .T. )
      return .F.
   end

   if !::lGrupoIva( .T. )
      return .T.
   end

   ::oFilter      := TFilterCreator():Init()
   if !empty( ::oFilter )
      ::oFilter:SetDatabase( ::oDbf )
      ::oFilter:SetFilterType( "22" )
   end

RETURN .T.



static FUNCTION TFastComprasProveedores_OpenFiles( ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   local oBlock
   local oError
   local lOpen          := .T.

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::cDriver         := cDriver()

      ::nView           := D():CreateView( ::cDriver )

      ::lApplyFilters   := lAIS()

      D():Proveedores( ::nView )

      D():PedidosProveedores( ::nView )

      D():PedidosProveedoresLineas( ::nView )

      D():AlbaranesProveedores( ::nView )

      D():AlbaranesProveedoresLineas( ::nView )

      D():FacturasProveedores( ::nView )

      D():FacturasProveedoresLineas( ::nView )

      D():FacturasProveedoresPagos( ::nView )

      D():FacturasRectificativasProveedores( ::nView )

      D():FacturasRectificativasProveedoresLineas( ::nView )

      D():TiposIva( ::nView )

      D():Divisas( ::nView )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de artículos" )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TFastComprasProveedores_CloseFiles( ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   if !Empty( ::nView )
      D():DeleteView( ::nView )
   end

   ::nView     := nil

RETURN .T.



static FUNCTION TFastComprasProveedores_Create( uParam ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   ::AddField( "cCodPrv",     "C", 18, 0, {|| "@!" }, "Código proveedor"                        )
   ::AddField( "cNomPrv",     "C",100, 0, {|| ""   }, "Nombre proveedor"                        )

   ::AddField( "cCodGrp",     "C", 12, 0, {|| "@!" }, "Código grupo de proveedor"               )

   ::AddField( "cClsDoc",     "C",  2, 0, {|| "" },   "Clase de documento"                      )
   ::AddField( "cSerDoc",     "C",  1, 0, {|| "" },   "Serie del documento"                     )
   ::AddField( "cNumDoc",     "C",  9, 0, {|| "" },   "Número del documento"                    )
   ::AddField( "cSufDoc",     "C",  2, 0, {|| "" },   "Delegación del documento"                )
   ::AddField( "cNumRec",     "C",  2, 0, {|| "" },   "Número del recibo"                       )
   ::AddField( "cTipDoc",     "C", 30, 0, {|| "" },   "Tipo de documento"                       )
   ::AddField( "cIdeDoc",     "C", 27, 0, {|| "" },   "Identificador del documento"             )

   ::AddField( "cCodPgo",     "C",  2, 0, {|| "@!" }, "Código de la forma de pago"              )

   ::AddField( "nAnoDoc",     "N",  4, 0, {|| "" },   "Año del documento"                       )
   ::AddField( "nMesDoc",     "N",  2, 0, {|| "" },   "Mes del documento"                       )
   ::AddField( "dFecDoc",     "D",  8, 0, {|| "" },   "Fecha del documento"                     )
   ::AddField( "cHorDoc",     "C",  2, 0, {|| "" },   "Hora del documento"                      )
   ::AddField( "cMinDoc",     "C",  2, 0, {|| "" },   "Minutos del documento"                   )

   ::AddField( "nTotNet",     "N", 16, 6, {|| "" },   "Total neto"                              )
   ::AddField( "nTotIva",     "N", 16, 6, {|| "" },   "Total " + cImp()                         )
   ::AddField( "nTotReq",     "N", 16, 6, {|| "" },   "Total RE"                                )
   ::AddField( "nTotDoc",     "N", 16, 6, {|| "" },   "Total documento"                         )
   ::AddField( "nTotRet",     "N", 16, 6, {|| "" },   "Total retenciones"                       )
   ::AddField( "nTotPag",     "N", 16, 6, {|| "" },   "Total pagos"                             )

   ::AddField( "dEntrada",    "D",  8, 0, {|| "" },   "Fecha previsión cobro"                   )
   ::AddField( "dFecVto",     "D",  8, 0, {|| "" },   "Fecha vencimiento"                       )

   ::AddField( "lFacGas",     "L",  1, 0, {|| "" },   "Lógico factura gastos"                   )

   ::AddField( "cSrlTot",     "M", 10, 0, {|| "" },   "Total serializado"                       )

   ::AddField( "uCargo",      "C", 20, 0, {|| "" },   "Cargo"                                   )

   ::AddTmpIndex( "cCodPrv", "cCodPrv" )

RETURN ( self )



static FUNCTION TFastComprasProveedores_lValidRegister( cCodigoProveedor ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores



   if ( ::oDbf:cCodPrv >= ::oGrupoProveedor:Cargo:Desde     .AND. ::oDbf:cCodPrv <= ::oGrupoProveedor:Cargo:Hasta )  .AND. ( ::oDbf:cCodGrp >= ::oGrupoGProveedor:Cargo:Desde    .AND. ::oDbf:cCodGrp <= ::oGrupoGProveedor:Cargo:Hasta ) .AND. ( ::oDbf:cCodPgo >= ::oGrupoFpago:Cargo:Desde         .AND. ::oDbf:cCodPgo <= ::oGrupoFpago:Cargo:Hasta )

      Return .T.

   end

RETURN ( .F. )



static FUNCTION TFastComprasProveedores_AddRecibosProveedor( cFieldOrder ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   local sTot
   local oError
   local oBlock

   If( cFieldOrder == nil, cFieldOrder := "dPreCob", ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():FacturasProveedoresPagos( ::nView ) )->( OrdSetFocus( cFieldOrder ) )



      ::cExpresionHeader          := "Field->" + cFieldOrder + ' >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->' + cFieldOrder + ' <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

      ::setFilterPaymentId()

      ::setFilterProviderId()



      ::setMeterText( "Procesando recibos" )

      ( D():FacturasProveedoresPagos( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():FacturasProveedoresPagos( ::nView ) )->( dbCustomkeyCount() ) )

      ( D():FacturasProveedoresPagos( ::nView ) )->( dbgotop() )

      while !::lBreak .AND. !( D():FacturasProveedoresPagos( ::nView ) )->( eof() )

         ::oDbf:Blank()

         ::oDbf:cCodPrv    := ( D():FacturasProveedoresPagos( ::nView ) )->cCodPrv
         ::oDbf:cNomPrv    := ( D():FacturasProveedoresPagos( ::nView ) )->cNomPrv
         ::oDbf:cCodGrp    := RetFld( ( D():FacturasProveedoresPagos( ::nView ) )->cCodPrv, D():Proveedores( ::nView ), "cCodGrp" )
         ::oDbf:cCodPgo    := ( D():FacturasProveedoresPagos( ::nView ) )->cCodPgo

         ::oDbf:cTipDoc    := "Recibo proveedor"
         ::oDbf:cClsDoc    := "19"

         ::oDbf:cSerDoc    := ( D():FacturasProveedoresPagos( ::nView ) )->cSerFac
         ::oDbf:cNumDoc    := Str( ( D():FacturasProveedoresPagos( ::nView ) )->nNumFac )
         ::oDbf:cSufDoc    := ( D():FacturasProveedoresPagos( ::nView ) )->cSufFac
         ::oDbf:cNumRec    := Str( ( D():FacturasProveedoresPagos( ::nView ) )->nNumRec )

         ::oDbf:cIdeDoc    := ::idDocumento()

         ::oDbf:dFecDoc    := ( D():FacturasProveedoresPagos( ::nView ) )->dPreCob
         ::oDbf:dEntrada   := ( D():FacturasProveedoresPagos( ::nView ) )->dEntrada
         ::oDbf:dFecVto    := ( D():FacturasProveedoresPagos( ::nView ) )->dFecVto

         ::oDbf:nTotNet    := ( D():FacturasProveedoresPagos( ::nView ) )->nImporte

         ::oDbf:lFacGas    := RetFld( ( D():FacturasProveedoresPagos( ::nView ) )->cSerFac + Str( ( D():FacturasProveedoresPagos( ::nView ) )->nNumFac ) + ( D():FacturasProveedoresPagos( ::nView ) )->cSufFac, D():FacturasProveedores( ::nView ), "lFacGas" )



         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ( D():FacturasProveedoresPagos( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible añadir recibos de clientes" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastComprasProveedores_AddProveedor( ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   ::setMeterText( "Procesando proveedores" )





   ::setMeterTotal( ( D():Proveedores( ::nView ) )->( ordkeycount() ) )

   ( D():Proveedores( ::nView ) )->( dbgotop() )
   while !( D():Proveedores( ::nView ) )->( eof() ) .AND. !::lBreak

      if ::lValidRegister()

         ::oDbf:Append()

         ::oDbf:cCodPrv  := ( D():Proveedores( ::nView ) )->Cod
         ::oDbf:cNomPrv  := ( D():Proveedores( ::nView ) )->Titulo
         ::oDbf:cCodGrp  := ( D():Proveedores( ::nView ) )->cCodGrp

         ::oDbf:Save()

      end

      ( D():Proveedores( ::nView ) )->( dbskip() )

      ::setMeterAutoIncremental()

   end

RETURN ( Self )



static FUNCTION TFastComprasProveedores_StartDialog( ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   ::CreateTreeImageList()

   ::BuildTree()

RETURN ( Self )



static FUNCTION TFastComprasProveedores_BuildTree( oTree, lLoadFile ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   local aReports

   If( oTree == nil, oTree := ::oTreeReporting, ) ;
   If( lLoadFile == nil, lLoadFile := .T., ) ;













   aReports := {  {  "Title" => "Listado",                                 "Image" => 0, "Type" => "Listado",                       "Directory" => "Proveedores\Listado",                                "File" => "Listado.fr3"  }, {  "Title" => "Compras",                                 "Image" => 12, "Subnode" => {  { "Title" => "Pedidos de proveedores",                "Image" => 2, "Type" => "Pedidos de proveedores",        "Directory" => "Proveedores\Compras\Pedidos de proveedores",         "File" => "Pedidos de proveedores.fr3" }, { "Title" => "Albaranes de proveedores",              "Image" => 3, "Type" => "Albaranes de proveedores",      "Directory" => "Proveedores\Compras\Albaranes de proveedores",       "File" => "Albaranes de proveedores.fr3" }, { "Title" => "Facturas de proveedores",               "Image" => 4, "Type" => "Facturas de proveedores",       "Directory" => "Proveedores\Compras\Facturas de proveedores",        "File" => "Facturas de proveedores.fr3" }, { "Title" => "Rectificativas de proveedores",         "Image" =>15, "Type" => "Rectificativas de proveedores", "Directory" => "Proveedores\Compras\Rectificativas de proveedores",  "File" => "Rectificativas de proveedores.fr3" }, { "Title" => "Albaranes, facturas y rectificativas",  "Image" =>12, "Type" => "Compras",                       "Directory" => "Proveedores\Compras\Compras",                        "File" => "Compras.fr3" }, { "Title" => "Recibos fecha de emisión",              "Image" =>21, "Type" => "Recibos emisión",               "Directory" => "Proveedores\Compras\Recibos",                        "File" => "Recibos de clientes.fr3" }, { "Title" => "Recibos fecha de cobro",                "Image" =>21, "Type" => "Recibos cobro",                 "Directory" => "Proveedores\Compras\RecibosCobro",                   "File" => "Recibos de clientes fecha de cobro.fr3" }, { "Title" => "Recibos fecha de vencimiento",          "Image" =>21, "Type" => "Recibos vencimiento",           "Directory" => "Proveedores\Compras\RecibosVencimiento",             "File" => "Recibos de clientes fecha de vencimiento.fr3" }, }  } }

   ::BuildNode( aReports, oTree, lLoadFile )



RETURN ( Self )



static FUNCTION TFastComprasProveedores_DataReport( oFr ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores





   ::oFastReport:SetWorkArea(       "Informe", ::oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Informe", cObjectsToReport( ::oDbf ) )





   ::oFastReport:SetWorkArea(       "Empresa", ::oDbfEmp:nArea )
   ::oFastReport:SetFieldAliases(   "Empresa", cItemsToReport( aItmEmp() ) )

   ::oFastReport:SetWorkArea(       "Proveedores", ( D():Proveedores( ::nView ) )->( select() ) )
   ::oFastReport:SetFieldAliases(   "Proveedores", cItemsToReport( aItmPrv() ) )





   ::oFastReport:SetMasterDetail(   "Informe", "Proveedores",     {|| ::oDbf:cCodPrv } )
   ::oFastReport:SetMasterDetail(   "Informe", "Empresa",         {|| cCodEmp() } )

   ::oFastReport:SetResyncPair(     "Informe", "Proveedores" )
   ::oFastReport:SetResyncPair(     "Informe", "Empresa" )





   do case
      case ::cReportType == "Pedidos de proveedores"

         ::FastReportPedidoProveedor()

       case ::cReportType == "Albaranes de proveedores"

         ::FastReportAlbaranProveedor()

      case ::cReportType == "Facturas de proveedores"

         ::FastReportFacturaProveedor()

      case ::cReportType == "Rectificativas de proveedores"

         ::FastReportRectificativaProveedor()

      case ::cReportType == "Compras"

         ::FastReportAlbaranProveedor()

         ::FastReportFacturaProveedor()

         ::FastReportRectificativaProveedor()

      case ( "Recibos" $ ::cReportType )

         ::FastReportRecibosProveedor()

   end

   ::AddVariable()

Return ( Self )



static FUNCTION TFastComprasProveedores_AddVariable( ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores





   do case
      case ::cReportType == "Pedidos de proveedores"

         ::AddVariablePedidoProveedor()

         ::AddVariableLineasPedidoProveedor()

      case ::cReportType == "Albaranes de proveedores"

         ::AddVariableAlbaranProveedor()

         ::AddVariableLineasAlbaranProveedor()

      case ::cReportType == "Facturas de proveedores"

         ::AddVariableFacturaProveedor()

         ::AddVariableLineasFacturaProveedor()

      case ::cReportType == "Rectificativas de proveedores"

         ::AddVariableRectificativaProveedor()

         ::AddVariableLineasRectificativaProveedor()

      case ::cReportType == "Compras"

         ::AddVariableAlbaranProveedor()

         ::AddVariableLineasAlbaranProveedor()

         ::AddVariableFacturaProveedor()

         ::AddVariableLineasFacturaProveedor()

         ::AddVariableRectificativaProveedor()

         ::AddVariableLineasRectificativaProveedor()

      case ( "Recibos" $ ::cReportType )

         ::AddVariableRecibosProveedor()

   end

Return ( ::Super:AddVariable() )



static FUNCTION TFastComprasProveedores_lGenerate( ) ; local Self AS CLASS TFastComprasProveedores := QSelf() AS CLASS TFastComprasProveedores

   ::oDbf:Zap()





   do case
      case ::cReportType == "Pedidos de proveedores"

         ::AddPedidoProveedor()

      case ::cReportType == "Albaranes de proveedores"

         ::AddAlbaranProveedor()

      case ::cReportType == "Facturas de proveedores"

         ::AddFacturaProveedor()

      case ::cReportType == "Rectificativas de proveedores"

         ::AddRectificativaProveedor()

      case ::cReportType == "Compras"

         ::AddAlbaranProveedor( .T. )

         ::AddFacturaProveedor()

         ::AddRectificativaProveedor()

      case ::cReportType == "Listado"

         ::AddProveedor( .T. )

      case ::cReportType == "Recibos emisión"

         ::AddRecibosProveedor()

      case ::cReportType == "Recibos cobro"

         ::AddRecibosProveedorCobro()

      case ::cReportType == "Recibos vencimiento"

         ::AddRecibosProveedorVencimiento()

   end

   ::oDbf:SetFilter( ::oFilter:cExpresionFilter )

   ::oDbf:GoTop()

RETURN ( ::oDbf:LastRec() > 0 )
