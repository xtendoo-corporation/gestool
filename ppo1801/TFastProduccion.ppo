#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\TFastProduccion.prg"
_HB_CLASS TFastProduccion ; function TFastProduccion ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFastProduccion", iif( .T., { @TFastReportInfGen() }, { @HBObject() } ), @TFastProduccion() ) ) ;

   _HB_MEMBER { cType } ; oClass:AddMultiData(, "PRODUCCION", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cType"}, .F. )

   _HB_MEMBER { oParteProduccion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oParteProduccion"}, .F. )
   _HB_MEMBER { oMaterialProducido } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMaterialProducido"}, .F. )
   _HB_MEMBER { oMateriasPrimas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMateriasPrimas"}, .F. )
   _HB_MEMBER { oPersonal } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPersonal"}, .F. )
   _HB_MEMBER { oHorasPersonal } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oHorasPersonal"}, .F. )
   _HB_MEMBER { oMaquinasCostes } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMaquinasCostes"}, .F. )
   _HB_MEMBER { oMaquinasParte } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMaquinasParte"}, .F. )
   _HB_MEMBER { oFamArt } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFamArt"}, .F. )
   _HB_MEMBER { oTarPreL } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTarPreL"}, .F. )

   _HB_MEMBER { cExpresionHeader } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cExpresionHeader"}, .F. )

   _HB_MEMBER { lApplyFilters } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lApplyFilters"}, .F. )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TFastProduccion_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TFastProduccion_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TFastProduccion_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidRegister(); oClass:AddMethod( "lValidRegister", @TFastProduccion_lValidRegister(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidAlmacenOrigen(); oClass:AddMethod( "lValidAlmacenOrigen", @TFastProduccion_lValidAlmacenOrigen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidAlmacenDestino(); oClass:AddMethod( "lValidAlmacenDestino", @TFastProduccion_lValidAlmacenDestino(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidMaterialProducido(); oClass:AddMethod( "lValidMaterialProducido", @TFastProduccion_lValidMaterialProducido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidMateriaPrima(); oClass:AddMethod( "lValidMateriaPrima", @TFastProduccion_lValidMateriaPrima(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidOperario(); oClass:AddMethod( "lValidOperario", @TFastProduccion_lValidOperario(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lValidMaquinaria(); oClass:AddMethod( "lValidMaquinaria", @TFastProduccion_lValidMaquinaria(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TFastProduccion_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TFastProduccion_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DataReport( oFr); oClass:AddMethod( "DataReport", @TFastProduccion_DataReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddVariable(); oClass:AddMethod( "AddVariable", @TFastProduccion_AddVariable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER StartDialog(); oClass:AddMethod( "StartDialog", @TFastProduccion_StartDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER BuildTree(); oClass:AddMethod( "BuildTree", @TFastProduccion_BuildTree(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddParteProducccion(); oClass:AddMethod( "AddParteProducccion", @TFastProduccion_AddParteProducccion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFilterMaterialProducido(); oClass:AddMethod( "getFilterMaterialProducido", @TFastProduccion_getFilterMaterialProducido(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFilterMateriaPrima(); oClass:AddMethod( "getFilterMateriaPrima", @TFastProduccion_getFilterMateriaPrima(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER putFilter(); oClass:AddMethod( "putFilter", @TFastProduccion_putFilter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ClearFilter(); oClass:AddMethod( "ClearFilter", @TFastProduccion_ClearFilter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getPrecioTarifa( cCodTar, cCodArt); oClass:AddMethod( "getPrecioTarifa", @TFastProduccion_getPrecioTarifa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setFilterOperationId(); oClass:AddInline( "setFilterOperationId", {|Self | ( ( Self ) ), ( if( ::lApplyFilters, ::cExpresionHeader  += ' .and. ( Field->cCodOpe >= "' + ::oGrupoOperacion:Cargo:Desde + '" .and. Field->cCodOpe <= "' + ::oGrupoOperacion:Cargo:Hasta + '" )', ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setFilterSectionId(); oClass:AddInline( "setFilterSectionId", {|Self | ( ( Self ) ), ( if( ::lApplyFilters, ::cExpresionHeader  += ' .and. ( Field->cCodSec >= "' + ::oGrupoSeccion:Cargo:Desde + '" .and. Field->cCodSec <= "' + ::oGrupoSeccion:Cargo:Hasta + '" )', ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFastProduccion ;



static FUNCTION TFastProduccion_lResource( cFld ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   ::lNewInforme     := .T.
   ::lDefCondiciones := .F.

   ::cSubTitle       := "Informe de producción"

   ::cTipoInforme    := "Producción"
   ::cBmpInforme     := "gc_worker2_64"

   if !::NewResource()
      return .F.
   end





   if !::lGrupoOperacion( .T. )
      return .F.
   end

   if !::lGrupoTOperacion( .T. )
      return .F.
   end

   if !::lGrupoSeccion( .T. )
      return .F.
   end

   if !::lGrupoAlmacenOrigen( .T. )
      return .F.
   end

   if !::lGrupoAlmacen( .T. )
      return .F.
   else
      ::oGrupoAlmacen:Cargo:Nombre     := "Almacén destino"
   end

   if !::lGrupoArticulo( .T. )
      return .F.
   else
      ::oGrupoArticulo:Cargo:Nombre    := "Material producido"
   end

   if !::lGrupoMateriaPrima( .T. )
      return .F.
   end

   if !::lGrupoFamilia( .T. )
      return .F.
   end

   if !::lGrupoGFamilia( .T. )
      return .F.
   end

   if !::lGrupoTipoArticulo( .T. )
      return .F.
   end

   if !::lGrupoTemporada( .T. )
      return .F.
   end

   if !::lGrupoOperario( .T. )
      return .T.
   end

   if !::lGrupoMaquina( .T. )
      return .F.
   end

   if !::lGrupoSerie( .T. )
      return .F.
   end

   ::oFilter      := TFilterCreator():Init()
   if !Empty( ::oFilter )
      ::oFilter:SetDatabase( ::oDbf )

   end

RETURN .T.



static FUNCTION TFastProduccion_OpenFiles( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local lOpen    := .T.
   local oBlock
   local oError

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::lApplyFilters   := lAIS()

   ::nView           := D():CreateView( ::cDriver )

      ::oParteProduccion := DbfServer( "PROCAB.DBF", "PROCAB" ):NewOpen( "PROCAB.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oParteProduccion:AddBag( "PROCAB.CDX" ) ; ::oParteProduccion:AddBag( ) ; ::oParteProduccion:AutoIndex()
      ::oMaterialProducido := DbfServer( "PROLIN.DBF", "PROLIN" ):NewOpen( "PROLIN.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oMaterialProducido:AddBag( "PROLIN.CDX" ) ; ::oMaterialProducido:AddBag( ) ; ::oMaterialProducido:AutoIndex()
      ::oMateriasPrimas := DbfServer( "PROMAT.DBF", "PROMAT" ):NewOpen( "PROMAT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oMateriasPrimas:AddBag( "PROMAT.CDX" ) ; ::oMateriasPrimas:AddBag( ) ; ::oMateriasPrimas:AutoIndex()
      ::oPersonal := DbfServer( "PROPER.DBF", "PROPER" ):NewOpen( "PROPER.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPersonal:AddBag( "PROPER.CDX" ) ; ::oPersonal:AddBag( ) ; ::oPersonal:AutoIndex()
      ::oHorasPersonal := DbfServer( "PROHPER.DBF", "HORASPERS" ):NewOpen( "PROHPER.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oHorasPersonal:AddBag( "PROHPER.CDX" ) ; ::oHorasPersonal:AddBag( ) ; ::oHorasPersonal:AutoIndex()
      ::oMaquinasCostes := DbfServer( "MAQCOSL.DBF", "MAQCOSL" ):NewOpen( "MAQCOSL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oMaquinasCostes:AddBag( "MAQCOSL.CDX" ) ; ::oMaquinasCostes:AddBag( ) ; ::oMaquinasCostes:AutoIndex()
      ::oMaquinasParte := DbfServer( "PROMAQ.DBF", "PROMAQ" ):NewOpen( "PROMAQ.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oMaquinasParte:AddBag( "PROMAQ.CDX" ) ; ::oMaquinasParte:AddBag( ) ; ::oMaquinasParte:AutoIndex()
      ::oTarPreL := DbfServer( "TARPREL.DBF", "TARPREL" ):NewOpen( "TARPREL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTarPreL:AddBag( "TARPREL.CDX" ) ; ::oTarPreL:AddBag( ) ; ::oTarPreL:AutoIndex()

      ::oCnfFlt   := TDataCenter():oCnfFlt()

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de producción" )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TFastProduccion_CloseFiles( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   if !Empty( ::oParteProduccion ) .AND. ( ::oParteProduccion:Used() )
      ::oParteProduccion:end()
   end

   if !Empty( ::oMaterialProducido ) .AND. ( ::oMaterialProducido:Used() )
      ::oMaterialProducido:end()
   end

   if !Empty( ::oMateriasPrimas ) .AND. ( ::oMateriasPrimas:Used() )
      ::oMateriasPrimas:end()
   end

   if !Empty( ::oPersonal ) .AND. ( ::oPersonal:Used() )
      ::oPersonal:end()
   end

   if !Empty( ::oHorasPersonal ) .AND. ( ::oHorasPersonal:Used() )
      ::oHorasPersonal:end()
   end

   if !Empty( ::oMaquinasCostes ) .AND. ( ::oMaquinasCostes:Used() )
      ::oMaquinasCostes:end()
   end

   if !Empty( ::oMaquinasParte ) .AND. ( ::oMaquinasParte:Used() )
      ::oMaquinasParte:end()
   end

   if !Empty( ::oCnfFlt ) .AND. ( ::oCnfFlt:Used() )
      ::oCnfFlt:end()
   end

   if !Empty( ::oTarPreL ) .AND. ( ::oTarPreL:Used() )
      ::oTarPreL:end()
   end

   if !Empty( ::nView )
      D():DeleteView( ::nView )
   end

   ::nView     := nil

RETURN .T.



static FUNCTION TFastProduccion_Create( uParam ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   ::AddField( "cSerDoc",     "C",  1, 0, {|| "" },   "Serie del documento"                     )
   ::AddField( "cNumDoc",     "C",  9, 0, {|| "" },   "Número del documento"                    )
   ::AddField( "cSufDoc",     "C",  2, 0, {|| "" },   "Delegación del documento"                )
   ::AddField( "cIdeDoc",     "C", 27, 0, {|| "" },   "Identificador del documento"             )

   ::AddField( "nAnoDoc",     "N",  4, 0, {|| "" },   "Año del documento"                       )
   ::AddField( "nMesDoc",     "N",  2, 0, {|| "" },   "Mes del documento"                       )
   ::AddField( "dFecIniDoc",  "D",  8, 0, {|| "" },   "Fecha inicio del documento"              )
   ::AddField( "dFecFinDoc",  "D",  8, 0, {|| "" },   "Fecha fin del documento"                 )

   ::AddField( "cCodOpe",     "C",  3, 0, {|| "" },   "Operación"                               )
   ::AddField( "cTipOpe", )
   ::AddField( "cCodSec",     "C",  3, 0, {|| "" },   "Sección"                                 )
   ::AddField( "cCodAlmDes",  "C", 16, 0, {|| "" },   "Almacen destino"                         )
   ::AddField( "cCodAlmOrg",  "C", 16, 0, {|| "" },   "Almacen origen"                          )

   ::AddField( "nTotPrd",     "N", 16, 6, {|| "" },   "Total producido"                         )
   ::AddField( "nUndPrd",     "N", 16, 6, {|| "" },   "Total unidades producidas"               )
   ::AddField( "nTotMat",     "N", 16, 6, {|| "" },   "Total materias primas"                   )
   ::AddField( "nTotPer",     "N", 16, 6, {|| "" },   "Total horas personal"                    )
   ::AddField( "nTotMaq",     "N", 16, 6, {|| "" },   "Total maquinaria"                        )

   ::AddTmpIndex( "cNumDoc", "cSerDoc + cNumDoc + cSufDoc" )

RETURN ( self )



static FUNCTION TFastProduccion_lValidRegister( cCodigoProveedor ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion









   if lChkSer( ::oDbf:cSerDoc, ::aSer )  .AND. ( ::oDbf:cCodOpe >= ::oGrupoOperacion:Cargo:Desde     .AND. ::oDbf:cCodOpe <= ::oGrupoOperacion:Cargo:Hasta )  .AND. ( ::oDbf:cCodSec >= ::oGrupoSeccion:Cargo:Desde       .AND. ::oDbf:cCodSec <= ::oGrupoSeccion:Cargo:Hasta )    .AND. ( ::lValidAlmacenOrigen() )                           .AND. ( ::lValidAlmacenDestino() )                          .AND. ( ( ::lValidMaterialProducido() )                     .OR. ( ::lValidMateriaPrima() ) )                          .AND. ( ::lValidOperario() )                                .AND. ( ::lValidMaquinaria() )
      Return .T.

   end

RETURN ( .F. )



static FUNCTION TFastProduccion_lValidAlmacenOrigen( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local lValid   := .F.

   if ::oGrupoAlmacenOrigen:Cargo:Desde == Space( 16 ) .AND. ::oGrupoAlmacenOrigen:Cargo:Hasta == Replicate( "Z", 16 )
      RETURN .T.
   end

   if ::oMateriasPrimas:Seek( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd )

      while ( ::oMateriasPrimas:cSerOrd + Str( ::oMateriasPrimas:nNumOrd, 9 ) + ::oMateriasPrimas:cSufOrd ) == ( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd ) .AND.  !::oMateriasPrimas:Eof()
         if ::oMateriasPrimas:cAlmOrd >= ::oGrupoAlmacenOrigen:Cargo:Desde .AND. ::oMateriasPrimas:cAlmOrd <= ::oGrupoAlmacenOrigen:Cargo:Hasta
            lValid := .T.
         end
         ::oMateriasPrimas:Skip()
      end
   end

RETURN ( lValid )



static FUNCTION TFastProduccion_lValidAlmacenDestino( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local lValid   := .F.

   if ::oGrupoAlmacen:Cargo:Desde == Space( 16 ) .AND. ::oGrupoAlmacen:Cargo:Hasta == Replicate( "Z", 16 )
      RETURN .T.
   end

   if ::oMaterialProducido:Seek( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd )

      while ( ::oMaterialProducido:cSerOrd + Str( ::oMaterialProducido:nNumOrd, 9 ) + ::oMaterialProducido:cSufOrd ) == ( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd ) .AND.  !::oMaterialProducido:Eof()
         if ::oMaterialProducido:cAlmOrd >= ::oGrupoAlmacen:Cargo:Desde .AND. ::oMaterialProducido:cAlmOrd <= ::oGrupoAlmacen:Cargo:Hasta
            lValid := .T.
         end
         ::oMaterialProducido:Skip()
      end
   end

RETURN ( lValid )



static FUNCTION TFastProduccion_lValidMaterialProducido( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local lValid   := .F.

   if ::oMaterialProducido:Seek( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd )


      while ( ::oMaterialProducido:cSerOrd + Str( ::oMaterialProducido:nNumOrd, 9 ) + ::oMaterialProducido:cSufOrd ) == ( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd ) .AND.  !::oMaterialProducido:Eof()










         if (  ( ::oGrupoArticulo:Cargo:Desde == Space( 18 ) .AND. ::oGrupoArticulo:Cargo:Hasta == Replicate( "Z", 18 ) ) .OR. ( ::oMaterialProducido:cCodArt >= ::oGrupoArticulo:Cargo:Desde .AND. ::oMaterialProducido:cCodArt <= ::oGrupoArticulo:Cargo:Hasta ) ) .AND. (  ( ::oGrupoTemporada:Cargo:Desde == Space( 10 ) .AND. ::oGrupoTemporada:Cargo:Hasta == Replicate( "Z", 10 ) ) .OR. ( ::oMaterialProducido:cCodTmp >= ::oGrupoTemporada:Cargo:Desde .AND. ::oMaterialProducido:cCodTmp <= ::oGrupoTemporada:Cargo:Hasta ) ) .AND. (  ( ::oGrupoFamilia:Cargo:Desde == Space( 16 ) .AND. ::oGrupoFamilia:Cargo:Hasta == Replicate( "Z", 16 ) ) .OR. ( ::oMaterialProducido:cCodFam >= ::oGrupoFamilia:Cargo:Desde .AND. ::oMaterialProducido:cCodFam <= ::oGrupoFamilia:Cargo:Hasta ) ) .AND. (  ( ::oGrupoGFamilia:Cargo:Desde == Space( 3 ) .AND. ::oGrupoGFamilia:Cargo:Hasta == Replicate( "Z", 3 ) ) .OR. ( ::oMaterialProducido:cGrpFam >= ::oGrupoGFamilia:Cargo:Desde .AND. ::oMaterialProducido:cGrpFam <= ::oGrupoGFamilia:Cargo:Hasta ) ) .AND. (  ( ::oGrupoTArticulo:Cargo:Desde == Space( 4 ) .AND. ::oGrupoTArticulo:Cargo:Hasta == Replicate( "Z", 4 ) ) .OR. ( ::oMaterialProducido:cCodTip >= ::oGrupoTArticulo:Cargo:Desde .AND. ::oMaterialProducido:cCodTip <= ::oGrupoTArticulo:Cargo:Hasta ) )

            lValid := .T.

         end

         ::oMaterialProducido:Skip()

      end

   end

RETURN ( lValid )



static FUNCTION TFastProduccion_lValidMateriaPrima( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local lValid   := .F.

   if ::oMateriasPrimas:Seek( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd )


      while ( ::oMateriasPrimas:cSerOrd + Str( ::oMateriasPrimas:nNumOrd, 9 ) + ::oMateriasPrimas:cSufOrd ) == ( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd ) .AND.  !::oMateriasPrimas:Eof()










         if (  ( ::oGrupoMateriaPrima:Cargo:Desde == Space( 18 ) .AND. ::oGrupoMateriaPrima:Cargo:Hasta == Replicate( "Z", 18 ) ) .OR. ( ::oMateriasPrimas:cCodArt >= ::oGrupoMateriaPrima:Cargo:Desde .AND. ::oMateriasPrimas:cCodArt <= ::oGrupoMateriaPrima:Cargo:Hasta ) ) .AND. (  ( ::oGrupoTemporada:Cargo:Desde == Space( 10 ) .AND. ::oGrupoTemporada:Cargo:Hasta == Replicate( "Z", 10 ) ) .OR. ( ::oMateriasPrimas:cCodTmp >= ::oGrupoTemporada:Cargo:Desde .AND. ::oMateriasPrimas:cCodTmp <= ::oGrupoTemporada:Cargo:Hasta ) ) .AND. (  ( ::oGrupoFamilia:Cargo:Desde == Space( 16 ) .AND. ::oGrupoFamilia:Cargo:Hasta == Replicate( "Z", 16 ) ) .OR. ( ::oMateriasPrimas:cCodFam >= ::oGrupoFamilia:Cargo:Desde .AND. ::oMateriasPrimas:cCodFam <= ::oGrupoFamilia:Cargo:Hasta ) ) .AND. (  ( ::oGrupoGFamilia:Cargo:Desde == Space( 3 ) .AND. ::oGrupoGFamilia:Cargo:Hasta == Replicate( "Z", 3 ) ) .OR. ( ::oMateriasPrimas:cGrpFam >= ::oGrupoGFamilia:Cargo:Desde .AND. ::oMateriasPrimas:cGrpFam <= ::oGrupoGFamilia:Cargo:Hasta ) ) .AND. (  ( ::oGrupoTArticulo:Cargo:Desde == Space( 4 ) .AND. ::oGrupoTArticulo:Cargo:Hasta == Replicate( "Z", 4 ) ) .OR. ( ::oMateriasPrimas:cCodTip >= ::oGrupoTArticulo:Cargo:Desde .AND. ::oMateriasPrimas:cCodTip <= ::oGrupoTArticulo:Cargo:Hasta ) )

            lValid := .T.

         end

         ::oMateriasPrimas:Skip()

      end

   end

RETURN ( lValid )



static FUNCTION TFastProduccion_lValidOperario( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local lValid := .F.

   if ::oGrupoOperario:Cargo:Desde == Space( 5 ) .AND. ::oGrupoOperario:Cargo:Hasta == Replicate( "Z", 5 )
      RETURN .T.
   end

   if ::oPersonal:Seek( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd )

      while ( ::oPersonal:cSerOrd + Str( ::oPersonal:nNumOrd, 9 ) + ::oPersonal:cSufOrd ) == ( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd ) .AND.  !::oPersonal:Eof()
         if ::oPersonal:cCodTra >= ::oGrupoOperario:Cargo:Desde .AND. ::oPersonal:cCodTra <= ::oGrupoOperario:Cargo:Hasta
            lValid := .T.
         end
         ::oPersonal:Skip()
      end
   end

RETURN ( lValid )



static FUNCTION TFastProduccion_lValidMaquinaria ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local lValid := .F.

   if ::oGrupoMaquina:Cargo:Desde == Space( 3 ) .AND. ::oGrupoMaquina:Cargo:Hasta == Replicate( "Z", 3 )
      RETURN .T.
   end

   if ::oMaquinasParte:Seek( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd )

      while ( ::oMaquinasParte:cSerOrd + Str( ::oMaquinasParte:nNumOrd,9 ) + ::oMaquinasParte:cSufOrd ) == ( ::oParteProduccion:cSerOrd + Str( ::oParteProduccion:nNumOrd, 9 ) + ::oParteProduccion:cSufOrd ) .AND. !::oMaquinasParte:Eof()
         if ::oMaquinasParte:cCodMaq >= ::oGrupoMaquina:Cargo:Desde .AND. ::oMaquinasParte:cCodMaq <= ::oGrupoMaquina:Cargo:Hasta
            lValid := .T.
         end
         ::oMaquinasParte:Skip()
      end
   end

RETURN ( lValid )



static FUNCTION TFastProduccion_AddParteProducccion( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion
   local sTot
   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::oParteProduccion:OrdSetFocus( "dFecOrd" )



      ::cExpresionHeader          := 'dFecFin >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFin <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      ::cExpresionHeader          += ' .and. cSerOrd >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. cSerOrd <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'

      ::setFilterOperationId()

      ::setFilterSectionId()



      ::oMtrInf:cText   := "Procesando partes de producción"

      ::oParteProduccion:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oParteProduccion:cFile ), ::oParteProduccion:OrdKey(), ( ::cExpresionHeader ), , , , , , , , .T. )

      ::oMtrInf:SetTotal( ::oParteProduccion:OrdKeyCount() )

      ::oParteProduccion:GoTop()
      while !::lBreak .AND. !::oParteProduccion:Eof()

         ::oDbf:Blank()

         ::oDbf:cSerDoc    := ::oParteProduccion:cSerOrd
         ::oDbf:cNumDoc    := Str( ::oParteProduccion:nNumOrd )
         ::oDbf:cSufDoc    := ::oParteProduccion:cSufOrd

         ::oDbf:nAnoDoc    := Year( ::oParteProduccion:dFecOrd )
         ::oDbf:nMesDoc    := Month( ::oParteProduccion:dFecOrd )
         ::oDbf:dFecIniDoc := ::oParteProduccion:dFecOrd
         ::oDbf:dFecFinDoc := ::oParteProduccion:dFecFin

         ::oDbf:cCodOpe    := ::oParteProduccion:cCodOpe
         ::oDbf:cCodSec    := ::oParteProduccion:cCodSec
         ::oDbf:cCodAlmDes := ::oParteProduccion:cAlmOrd
         ::oDbf:cCodAlmOrg := ::oParteProduccion:cAlmOrg

         ::oDbf:nTotPrd    := TProduccion():nTotalProducido( ::oParteProduccion:cSerOrd + Str(::oParteProduccion:nNumOrd ) + ::oParteProduccion:cSufOrd, ::oMaterialProducido )
         ::oDbf:nUndPrd    := TProduccion():nTotalUnidadesProducido( ::oParteProduccion:cSerOrd + Str(::oParteProduccion:nNumOrd ) + ::oParteProduccion:cSufOrd, ::oMaterialProducido )

         ::oDbf:nTotMat    := TProduccion():nTotalMaterial( ::oParteProduccion:cSerOrd + Str(::oParteProduccion:nNumOrd ) + ::oParteProduccion:cSufOrd, ::oMateriasPrimas )
         ::oDbf:nTotPer    := TProduccion():nTotalPersonal( ::oParteProduccion:cSerOrd + Str(::oParteProduccion:nNumOrd ) + ::oParteProduccion:cSufOrd, ::oPersonal, ::oHorasPersonal )
         ::oDbf:nTotMaq    := TProduccion():nTotalMaquina( ::oParteProduccion:cSerOrd + Str(::oParteProduccion:nNumOrd ) + ::oParteProduccion:cSufOrd, ::oMaquinasParte )





         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::oParteProduccion:Skip()

         ::oMtrInf:AutoInc()

      end

      ::oParteProduccion:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oParteProduccion:cFile ) )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible añadir partes de producción" )

   end

   ErrorBlock( oBlock )

   ::oMtrInf:SetTotal( ::oDbf:OrdKeyCount() )

RETURN ( Self )



static FUNCTION TFastProduccion_StartDialog( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   ::CreateTreeImageList()

   ::BuildTree()

 RETURN ( Self )



static FUNCTION TFastProduccion_BuildTree( oTree, lLoadFile ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local aReports

   If( oTree == nil, oTree := ::oTreeReporting, ) ;
   If( lLoadFile == nil, lLoadFile := .T., ) ;

   aReports          := {  {  "Title" => "Partes de producción", "Image" => 14, "Type" => "Partes de producción", "Directory" => "Producción\Partes de producción", "File" => "Partes de producción.fr3"  } }

   ::BuildNode( aReports, oTree, lLoadFile )



RETURN ( Self )



static FUNCTION TFastProduccion_DataReport( oFr ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion





   ::oFastReport:SetWorkArea(       "Informe",                                ::oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Informe",                                cObjectsToReport( ::oDbf ) )





   ::oFastReport:SetWorkArea(       "Empresa",                                ::oDbfEmp:nArea )
   ::oFastReport:SetFieldAliases(   "Empresa",                                cItemsToReport( aItmEmp() ) )

   ::oFastReport:SetWorkArea(       "Operación",                              ::oOperacion:oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Operación",                              cObjectsToReport( TOperacion():DefineFiles()  )  )

   ::oFastReport:SetWorkArea(       "Tipo operación",                         ::oTipOpera:oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Tipo operación",                         cObjectsToReport( TTipOpera():DefineFiles()  )  )

   ::oFastReport:SetWorkArea(       "Sección",                                ::oSeccion:oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Sección",                                cObjectsToReport( TSeccion():DefineFiles()  )  )

   ::oFastReport:SetWorkArea(       "Lineas de material producido",           ::oMaterialProducido:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas de material producido",           cObjectsToReport( TDetProduccion():DefineFiles()  ) )

   ::oFastReport:SetWorkArea(       "Lineas de materias primas",              ::oMateriasPrimas:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas de materias primas",              cObjectsToReport( TDetMaterial():DefineFiles()  ) )

   ::oFastReport:SetWorkArea(       "Lineas de personal",                     ::oPersonal:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas de personal",                     cObjectsToReport( TDetPersonal():DefineFiles() ) )

   ::oFastReport:SetWorkArea(       "Lineas de horas de personal",            ::oHorasPersonal:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas de horas de personal",            cObjectsToReport( TDetHorasPersonal():DefineFiles()  ) )

   ::oFastReport:SetWorkArea(       "Lineas de maquinaria",                   ::oMaquinasParte:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas de maquinaria",                   cObjectsToReport( TDetMaquina():DefineFiles()  ) )

   ::oFastReport:SetWorkArea(       "Operarios.Lineas de personal",           ::oOperario:oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Operarios.Lineas de personal",           cObjectsToReport( TOperarios():DefineFiles() ) )

   ::oFastReport:SetWorkArea(       "Operarios.Lineas de horas de personal",  ::oOperario:oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Operarios.Lineas de horas de personal",  cObjectsToReport( TOperarios():DefineFiles() ) )

   ::oFastReport:SetWorkArea(       "Articulos.Material producido",           ::oDbfArt:nArea )
   ::oFastReport:SetFieldAliases(   "Articulos.Material producido",           cItemsToReport( aItmArt() ) )

   ::oFastReport:SetWorkArea(       "Articulos.Materias primas",              ::oDbfArticuloMateriaPrima:nArea )
   ::oFastReport:SetFieldAliases(   "Articulos.Materias primas",              cItemsToReport( aItmArt() ) )

   ::oFastReport:SetWorkArea(       "Almacen",                                ::oDbfAlm:nArea )
   ::oFastReport:SetFieldAliases(   "Almacen",                                cItemsToReport( aItmAlm()  )  )

   ::oFastReport:SetWorkArea(       "Maquinaria",                             ::oMaquina:oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Maquinaria",                             cObjectsToReport( TMaquina():DefineFiles()  )  )





   ::oFastReport:SetMasterDetail(   "Informe",                       "Empresa",                                {|| cCodEmp() } )
   ::oFastReport:SetMasterDetail(   "Informe",                       "Operación",                              {|| ::oDbf:cCodOpe } )
   ::oFastReport:SetMasterDetail(   "Informe",                       "Seccion",                                {|| ::oDbf:cCodSec } )
   ::oFastReport:SetMasterDetail(   "Informe",                       "Lineas de material producido",           {|| ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe",                       "Lineas de materias primas",              {|| ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe",                       "Lineas de personal",                     {|| ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe",                       "Lineas de horas de personal",            {|| ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe",                       "Lineas de costo de maquinaria",          {|| ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )

   ::oFastReport:SetMasterDetail(   "Operación",                     "Tipo operación",                         {|| ::oOperacion:oDbf:cTipOpe } )

   ::oFastReport:SetMasterDetail(   "Lineas de material producido",  "Articulos.Material producido",           {|| ::oMaterialProducido:cCodArt } )
   ::oFastReport:SetMasterDetail(   "Lineas de materias primas",     "Articulos.Materias primas",              {|| ::oMateriasPrimas:cCodArt } )

   ::oFastReport:SetMasterDetail(   "Lineas de personal",            "Operarios.Lineas de personal",           {|| ::oPersonal:cCodTra } )
   ::oFastReport:SetMasterDetail(   "Lineas de horas de personal",   "Operarios.Lineas de horas de personal",  {|| ::oHorasPersonal:cCodTra } )

   ::oFastReport:SetMasterDetail(   "Lineas de maquinaria",          "Maquinaria",                             {|| ::oMaquinasParte:cCodMaq } )

   ::oFastReport:SetResyncPair(     "Informe",                       "Empresa" )
   ::oFastReport:SetResyncPair(     "Informe",                       "Operación" )
   ::oFastReport:SetResyncPair(     "Informe",                       "Seccion" )
   ::oFastReport:SetResyncPair(     "Informe",                       "Lineas de material producido" )
   ::oFastReport:SetResyncPair(     "Informe",                       "Lineas de materias primas" )
   ::oFastReport:SetResyncPair(     "Informe",                       "Lineas de personal" )
   ::oFastReport:SetResyncPair(     "Informe",                       "Lineas de costo de maquinaria" )

   ::oFastReport:SetResyncPair(     "Operación",                     "Tipo operación" )

   ::oFastReport:SetResyncPair(     "Lineas de material producido",  "Articulos.Material producido" )
   ::oFastReport:SetResyncPair(     "Lineas de materias primas",     "Articulos.Materias primas" )

   ::oFastReport:SetResyncPair(     "Lineas de personal",            "Operarios.Lineas de personal" )
   ::oFastReport:SetResyncPair(     "Lineas de horas de personal",   "Operarios.Lineas de horas de personal" )

   ::oFastReport:SetResyncPair(     "Lineas de maquinaria",          "Maquinaria" )



   ::AddVariable()

Return ( Self )



static FUNCTION TFastProduccion_AddVariable( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion






   ::AddVariableLineasParteProduccion()

Return ( ::Super:AddVariable() )



static FUNCTION TFastProduccion_lGenerate( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   ::putFilter()

   ::oDbf:Zap()





   ::AddParteProducccion()

   ::oDbf:SetFilter( ::oFilter:cExpresionFilter )

   ::oDbf:GoTop()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TFastProduccion_getFilterMaterialProducido( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local cExpresionFilter  := ""

   if ::oGrupoArticulo:Cargo:Desde <> Space( 18 ) .OR. ::oGrupoArticulo:Cargo:Hasta <> Replicate( "Z", 18 )

      cExpresionFilter     += "Field->cCodArt >= '" + AllTrim( ::oGrupoArticulo:Cargo:Desde ) + "' .and. Field->cCodArt <= '" + AllTrim( ::oGrupoArticulo:Cargo:Hasta ) + "'"

   end

   if ::oGrupoTemporada:Cargo:Desde <> Space( 10 ) .OR. ::oGrupoTemporada:Cargo:Hasta <> Replicate( "Z", 10 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cCodTmp >= '" + AllTrim( ::oGrupoTemporada:Cargo:Desde ) + "' .and. Field->cCodTmp <= '" + AllTrim( ::oGrupoTemporada:Cargo:Hasta ) + "'"

   end

   if ::oGrupoFamilia:Cargo:Desde <> Space( 16 ) .OR. ::oGrupoFamilia:Cargo:Hasta <> Replicate( "Z", 16 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cCodFam >= '" + AllTrim( ::oGrupoFamilia:Cargo:Desde ) + "' .and. Field->cCodFam <= '" + AllTrim( ::oGrupoFamilia:Cargo:Hasta ) + "'"

   end

   if ::oGrupoGFamilia:Cargo:Desde <> Space( 3 ) .OR. ::oGrupoGFamilia:Cargo:Hasta <> Replicate( "Z", 3 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cGrpFam >= '" + AllTrim( ::oGrupoGFamilia:Cargo:Desde ) + "' .and. Field->cGrpFam <= '" + AllTrim( ::oGrupoGFamilia:Cargo:Hasta ) + "'"

   end

   if ::oGrupoTArticulo:Cargo:Desde <> Space( 4 ) .OR. ::oGrupoTArticulo:Cargo:Hasta <> Replicate( "Z", 4 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cCodTip >= '" + AllTrim( ::oGrupoTArticulo:Cargo:Desde ) + "' .and. Field->cCodTip <= '" + AllTrim( ::oGrupoTArticulo:Cargo:Hasta ) + "'"

   end

Return ( cExpresionFilter )



static FUNCTION TFastProduccion_getFilterMateriaPrima( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local cExpresionFilter  := ""

   if ::oGrupoMateriaPrima:Cargo:Desde <> Space( 18 ) .OR. ::oGrupoMateriaPrima:Cargo:Hasta <> Replicate( "Z", 18 )
      cExpresionFilter     += "Field->cCodArt >= '" + AllTrim( ::oGrupoMateriaPrima:Cargo:Desde ) + "' .and. Field->cCodArt <= '" + AllTrim( ::oGrupoMateriaPrima:Cargo:Hasta ) + "' "
   end

   if ::oGrupoTemporada:Cargo:Desde <> Space( 10 ) .OR. ::oGrupoTemporada:Cargo:Hasta <> Replicate( "Z", 10 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cCodTmp >= '" + AllTrim( ::oGrupoTemporada:Cargo:Desde ) + "' .and. Field->cCodTmp <= '" + AllTrim( ::oGrupoTemporada:Cargo:Hasta ) + "'"

   end

   if ::oGrupoFamilia:Cargo:Desde <> Space( 16 ) .OR. ::oGrupoFamilia:Cargo:Hasta <> Replicate( "Z", 16 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cCodFam >= '" + AllTrim( ::oGrupoFamilia:Cargo:Desde ) + "' .and. Field->cCodFam <= '" + AllTrim( ::oGrupoFamilia:Cargo:Hasta ) + "'"

   end

   if ::oGrupoGFamilia:Cargo:Desde <> Space( 3 ) .OR. ::oGrupoGFamilia:Cargo:Hasta <> Replicate( "Z", 3 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cGrpFam >= '" + AllTrim( ::oGrupoGFamilia:Cargo:Desde ) + "' .and. Field->cGrpFam <= '" + AllTrim( ::oGrupoGFamilia:Cargo:Hasta ) + "'"

   end

   if ::oGrupoTArticulo:Cargo:Desde <> Space( 4 ) .OR. ::oGrupoTArticulo:Cargo:Hasta <> Replicate( "Z", 4 )

      if !Empty( cExpresionFilter )
         cExpresionFilter  += " .and. "
      end

      cExpresionFilter     += "Field->cCodTip >= '" + AllTrim( ::oGrupoTArticulo:Cargo:Desde ) + "' .and. Field->cCodTip <= '" + AllTrim( ::oGrupoTArticulo:Cargo:Hasta ) + "'"

   end

Return ( cExpresionFilter )



static FUNCTION TFastProduccion_putFilter( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   ::clearFilter()

   ( ::oMaterialProducido:nArea )->( dbSetFilter( bChar2Block( ::getFilterMaterialProducido() ), ::getFilterMaterialProducido() ) )
   ( ::oMaterialProducido:nArea )->( dbGoTop() )

   ( ::oMateriasPrimas:nArea )->( dbSetFilter( bChar2Block( ::getFilterMateriaPrima() ), ::getFilterMateriaPrima() ) )
   ( ::oMateriasPrimas:nArea )->( dbGoTop() )

Return .T.



static FUNCTION TFastProduccion_ClearFilter( ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   ( ::oMaterialProducido:nArea )->( dbClearFilter() )

   ( ::oMateriasPrimas:nArea )->( dbClearFilter() )

Return .T.



static FUNCTION TFastProduccion_getPrecioTarifa( cCodTar, cCodArt ) ; local Self AS CLASS TFastProduccion := QSelf() AS CLASS TFastProduccion

   local nRec
   local nOrdAnt
   local nPrecio  := 0

   nRec           := ::oTarPreL:Recno()
   nOrdAnt        := ::oTarPreL:OrdSetFocus( "cCodArt" )

   if ::oTarPreL:Seek( cCodTar + cCodArt )
      nPrecio     := ::oTarPreL:nPrcTar1
   end

   ::oTarPreL:OrdSetFocus( nOrdAnt )
   ::oTarPreL:GoTo( nRec )

Return ( nPrecio )
