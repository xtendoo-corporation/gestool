#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 10 ".\.\Prg\TFastreportOptions.prg"
_HB_CLASS TFastreportOptions ; function TFastreportOptions ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFastreportOptions", iif( .F., { }, { @HBObject() } ), @TFastreportOptions() ) ) ;

    _HB_MEMBER { hOptions } ; oClass:AddMultiData(, {=>}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hOptions"}, .F. )

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )
   _HB_MEMBER { oBrw } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrw"}, .F. )

   _HB_MEMBER { oColumnValue } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oColumnValue"}, .F. )

    _HB_MEMBER New() AS CLASS TFastreportOptions; oClass:AddMethod( "New", @TFastreportOptions_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER setOptions(); oClass:AddMethod( "setOptions", @TFastreportOptions_setOptions(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER getOptionValue( key); oClass:AddMethod( "getOptionValue", @TFastreportOptions_getOptionValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER Dialog(); oClass:AddMethod( "Dialog", @TFastreportOptions_Dialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setColValue(); oClass:AddInline( "setColValue", {|Self, uValue | ( ( Self ) ), ( ::oColumnValue:Value          := uValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setColType(); oClass:AddInline( "setColType", {|Self, uValue | ( ( Self ) ), ( ::oColumnValue:nEditType      := uValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setColEditListBound(); oClass:AddInline( "setColEditListBound", {|Self, uValue | ( ( Self ) ), ( ::oColumnValue:aEditListBound := uValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setColPicture(); oClass:AddInline( "setColPicture", {|Self, uValue | ( ( Self ) ), ( ::oColumnValue:cEditPicture   := uValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setColListTxt(); oClass:AddInline( "setColListTxt", {|Self, aValue | ( ( Self ) ), ( ::oColumnValue:aEditListTxt   := aValue ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER columnPosEdit( o, x, n); oClass:AddMethod( "columnPosEdit", @TFastreportOptions_columnPosEdit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

       _HB_MEMBER ChangeBrowse(); oClass:AddMethod( "ChangeBrowse", @TFastreportOptions_ChangeBrowse(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFastreportOptions ;


static FUNCTION TFastreportOptions_New( ) ; local Self AS CLASS TFastreportOptions := QSelf() AS CLASS TFastreportOptions


   ::hOptions           := {  "Incluir clientes sin ventas" => {  "Options"   => .F., "Value"     => .F. } }

Return ( self )



static FUNCTION TFastreportOptions_setOptions( hOptions ) ; local Self AS CLASS TFastreportOptions := QSelf() AS CLASS TFastreportOptions

   ::hOptions         := hOptions



RETURN ( ::hOptions )



static FUNCTION TFastreportOptions_getOptionValue( key, default ) ; local Self AS CLASS TFastreportOptions := QSelf() AS CLASS TFastreportOptions

    local uValue             := default
    local hOptionValue

    if hhaskey( ::hOptions, key )
      hOptionValue        := hget( ::hOptions, key )
      if hhaskey( hOptionValue, "Value" )
          uValue            := hget( hOptionValue, "Value" )
      end
   end

RETURN ( uValue )



static FUNCTION TFastreportOptions_Dialog( ) ; local Self AS CLASS TFastreportOptions := QSelf() AS CLASS TFastreportOptions

   local oCol
   local oBmp

   ::oDlg = TDialog():New(,,,,, "OPTIONSREPORT",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )

   ::oBrw                        := IXBrowse():New( ::oDlg )

   ::oBrw:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   ::oBrw:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   ::oBrw:SetArray( ::hOptions, , , .F. )

   ::oBrw:nMarqueeStyle          := 3
   ::oBrw:lRecordSelector        := .F.
   ::oBrw:lHScroll               := .F.
   ::oBrw:lFastEdit              := .T.

   ::oBrw:bChange                := {|| ::ChangeBrowse() }

   ::oBrw:CreateFromResource( 100 )

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Condicion"
      :bStrData         := {|| hb_hKeyAt( ::hOptions, ::oBrw:nArrayAt ) }
      :nWidth           := 250
   end

   with object ( ::oColumnValue := ::oBrw:AddCol() )
      :cHeader          := "Valor"
      :bEditValue       := {|| hget( hb_hValueAt( ::hOptions, ::oBrw:nArrayAt ), "Value" ) }
      :bStrData         := {|| hget( hb_hValueAt( ::hOptions, ::oBrw:nArrayAt ), "Value" ) }
      :bOnPostEdit      := {|o,x| ::columnPosEdit( o, x ) }
      :nWidth           := 180
   end





   oBmp := TBitmap():ReDefine( 400, "gc_clipboard_pencil_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )




   TButton():ReDefine( 1, {||( ::oDlg:end( 1 ) )}, ::oDlg,,, .F.,,,, .F. )





     TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .T. )

   ::oDlg:AddFastKey( 116, {|| ::oDlg:end( 1 ) } )

   ::oDlg:bStart        := {|| ::ChangeBrowse() }

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   oBmp:end()

Return ( ::oDlg:nResult == 1 )



static FUNCTION TFastreportOptions_ChangeBrowse( ) ; local Self AS CLASS TFastreportOptions := QSelf() AS CLASS TFastreportOptions

   local valuesColumn   := hget( hb_hValueAt( ::hOptions, ::oBrw:nArrayAt ), "Options" )
   local valueColumn    := hget( hb_hValueAt( ::hOptions, ::oBrw:nArrayAt ), "Value" )
   local valtypeColumn  := valtype( valuesColumn )

   do case
      case valtypeColumn == "A"

         ::setColType( 2 )
         ::setColListTxt( valuesColumn )
         ::setColEditListBound( valuesColumn )

      case valtypeColumn == "L"

         ::setColType( 2 )
         ::setColListTxt( { "Si", "No" } )
         ::setColEditListBound( { .T., .F. } )

   end

Return ( Self )



static FUNCTION TFastreportOptions_columnPosEdit( oColumn, uValue ) ; local Self AS CLASS TFastreportOptions := QSelf() AS CLASS TFastreportOptions

   hset( hb_hValueAt( ::hOptions, ::oBrw:nArrayAt ), "Value", uValue )

Return ( .T. )
