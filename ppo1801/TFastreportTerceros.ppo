#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\.\Prg\TFastreportTerceros.prg"
_HB_CLASS TFastreportTerceros ; function TFastreportTerceros ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFastreportTerceros", iif( .T., { @TFastReportInfGen() }, { @HBObject() } ), @TFastreportTerceros() ) ) ;

   _HB_MEMBER AddMovimientoAlmacen(); oClass:AddMethod( "AddMovimientoAlmacen", @TFastreportTerceros_AddMovimientoAlmacen(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddPresupuestoCliente(); oClass:AddMethod( "AddPresupuestoCliente", @TFastreportTerceros_AddPresupuestoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddPedidoCliente( cCodigoCliente); oClass:AddMethod( "AddPedidoCliente", @TFastreportTerceros_AddPedidoCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddSATCliente(); oClass:AddMethod( "AddSATCliente", @TFastreportTerceros_AddSATCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAlbaranCliente(); oClass:AddMethod( "AddAlbaranCliente", @TFastreportTerceros_AddAlbaranCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddFacturaCliente( cCodigoCliente); oClass:AddMethod( "AddFacturaCliente", @TFastreportTerceros_AddFacturaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRectificativaCliente( cCodigoCliente); oClass:AddMethod( "AddRectificativaCliente", @TFastreportTerceros_AddRectificativaCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddTicket(); oClass:AddMethod( "AddTicket", @TFastreportTerceros_AddTicket(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddPedidoProveedor(); oClass:AddMethod( "AddPedidoProveedor", @TFastreportTerceros_AddPedidoProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAlbaranProveedor(); oClass:AddMethod( "AddAlbaranProveedor", @TFastreportTerceros_AddAlbaranProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddFacturaProveedor(); oClass:AddMethod( "AddFacturaProveedor", @TFastreportTerceros_AddFacturaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRectificativaProveedor(); oClass:AddMethod( "AddRectificativaProveedor", @TFastreportTerceros_AddRectificativaProveedor(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setFilterProviderId(); oClass:AddInline( "setFilterProviderId", {|Self | ( ( Self ) ), ( if( ::lApplyFilters, ::cExpresionHeader  += ' .and. ( alltrim( Field->cCodPrv ) >= "' + alltrim( ::oGrupoProveedor:Cargo:Desde ) + '" .and. alltrim( Field->cCodPrv ) <= "' + alltrim( ::oGrupoProveedor:Cargo:Hasta ) + '" )', ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFastreportTerceros ;



static FUNCTION TFastreportTerceros_AddMovimientoAlmacen( ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local oRowSet
   local cCodigoArticulo

   ::setMeterText( "Procesando movimientos de almacÃ©n" )

   oRowSet              := MovimientosAlmacenRepository():getRowSetTotalsForReport( Self )

   if empty( oRowSet )
      RETURN ( Self )
   end

   ::setMeterTotal( oRowSet:reccount() )

   oRowSet:goTop()

   while !(::lBreak ) .AND. !( oRowSet:Eof() )

      ::oDbf:Blank()

      ::oDbf:cCodCli    := ""
      ::oDbf:cNomCli    := ""
      ::oDbf:cCodAge    := ""
      ::oDbf:cCodPgo    := ""
      ::oDbf:cCodRut    := ""

      ::oDbf:cTipDoc    := "Movimiento almacen"
      ::oDbf:cClsDoc    := "05"
      ::oDbf:cSerDoc    := ""
      ::oDbf:cNumDoc    :=  oRowSet:fieldget( "numero" )
      ::oDbf:cSufDoc    := ""
      ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

      ::oDbf:nAnoDoc    := Year( ( D():FacturasClientes( ::nView ) )->dFecFac )
      ::oDbf:nMesDoc    := Month( ( D():FacturasClientes( ::nView ) )->dFecFac )
      ::oDbf:dFecDoc    := ( D():FacturasClientes( ::nView ) )->dFecFac

      ::oDbf:nAnoDoc    := Year( oRowSet:fieldget( "fecha" ) )
      ::oDbf:nMesDoc    := Month( oRowSet:fieldget( "fecha" ) )
      ::oDbf:dFecDoc    := oRowSet:fieldget( "fecha" )
      ::oDbf:cHorDoc    := SubStr( dtoc( oRowSet:fieldget( "fecha" ) ), 1, 2 )
      ::oDbf:cMinDoc    := SubStr( dtoc( oRowSet:fieldget( "fecha" ) ), 4, 2 )

      ::oDbf:cCodAlm    := oRowSet:fieldget( "almacen_destino" )

      ::oDbf:nTotDoc    := oRowSet:fieldget( "total_precio_venta_iva" )

      ::insertIfValid()

      ::setMeterAutoIncremental()

      oRowSet:skip()

   end

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddFacturaCliente( cCodigoCliente ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():FacturasClientes( ::nView ) )->( OrdSetFocus( "dFecFac" ) )
      ( D():FacturasClientesLineas( ::nView ) )->( OrdSetFocus( "nNumFac" ) )



      ::cExpresionHeader          := 'Field->dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      if !empty( ::oGrupoSerie )
         ::cExpresionHeader       += ' .and. ( Field->cSerie >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. Field->cSerie <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '" ) '
      end
      if !Empty( ::oGrupoSufijo )
         ::cExpresionHeader       += ' .and. ( Field->cSufFac >= "' + Rtrim( ::oGrupoSufijo:Cargo:Desde ) + '" .and. Field->cSufFac <= "' + Rtrim( ::oGrupoSufijo:Cargo:Hasta ) + '" )'
      end

      ::setFilterClientIdHeader()

      ::setFilterPaymentInvoiceId()

      ::setFilterRouteId()

      ::setFilterAgentId()

      ::setFilterAlmacenId()



      ::setMeterText( "Procesando facturas" )

      ( D():FacturasClientes( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():FacturasClientes( ::nView ) )->( dbcustomkeycount() ) )

      ( D():FacturasClientes( ::nView ) )->( dbgotop() )
      while !::lBreak .AND. !( D():FacturasClientes( ::nView ) )->( eof() )

         sTot              := sTotFacCli( ( D():FacturasClientes( ::nView ) )->cSerie + Str( ( D():FacturasClientes( ::nView ) )->nNumFac ) + ( D():FacturasClientes( ::nView ) )->cSufFac, D():FacturasClientes( ::nView ), D():FacturasClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasClientesCobros( ::nView ), D():AnticiposClientes( ::nView ) )

         ::oDbf:Blank()

         ::oDbf:cCodCli    := ( D():FacturasClientes( ::nView ) )->cCodCli
         ::oDbf:cNomCli    := ( D():FacturasClientes( ::nView ) )->cNomCli
         ::oDbf:cCodAge    := ( D():FacturasClientes( ::nView ) )->cCodAge
         ::oDbf:cCodPgo    := ( D():FacturasClientes( ::nView ) )->cCodPago
         ::oDbf:cCodRut    := ( D():FacturasClientes( ::nView ) )->cCodRut
         ::oDbf:cCodUsr    := ( D():FacturasClientes( ::nView ) )->cCodUsr
         ::oDbf:cNomUsr    := UsuariosModel():getNombreWhereCodigo( ( D():FacturasClientes( ::nView ) )->cCodUsr )
         ::oDbf:cCodObr    := ( D():FacturasClientes( ::nView ) )->cCodObr
         ::oDbf:cCodAlm    := ( D():FacturasClientes( ::nView ) )->cCodAlm

         ::oDbf:nComAge    := ( D():FacturasClientes( ::nView ) )->nPctComAge

         ::oDbf:cCodPos    := ( D():FacturasClientes( ::nView ) )->cPosCli

         ::oDbf:cCodGrp    := RetFld( ( D():FacturasClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "cCodGrp", "Cod")

         ::oDbf:cTipDoc    := "Factura clientes"
         ::oDbf:cClsDoc    := "11"
         ::oDbf:cSerDoc    := ( D():FacturasClientes( ::nView ) )->cSerie
         ::oDbf:cNumDoc    := Str( ( D():FacturasClientes( ::nView ) )->nNumFac )
         ::oDbf:cSufDoc    := ( D():FacturasClientes( ::nView ) )->cSufFac
         ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

         ::oDbf:nAnoDoc    := Year( ( D():FacturasClientes( ::nView ) )->dFecFac )
         ::oDbf:nMesDoc    := Month( ( D():FacturasClientes( ::nView ) )->dFecFac )
         ::oDbf:dFecDoc    := ( D():FacturasClientes( ::nView ) )->dFecFac
         ::oDbf:cHorDoc    := SubStr( ( D():FacturasClientes( ::nView ) )->cTimCre, 1, 2 )
         ::oDbf:cMinDoc    := SubStr( ( D():FacturasClientes( ::nView ) )->cTimCre, 4, 2 )

         ::oDbf:nTotNet    := sTot:nTotalNeto
         ::oDbf:nTotIva    := sTot:nTotalIva
         ::oDbf:nTotReq    := sTot:nTotalRecargoEquivalencia
         ::oDbf:nTotDoc    := sTot:nTotalDocumento
         ::oDbf:nTotPnt    := sTot:nTotalPuntoVerde
         ::oDbf:nTotTrn    := sTot:nTotalTransporte
         ::oDbf:nTotAge    := sTot:nTotalAgente
         ::oDbf:nTotCos    := sTot:nTotalCosto
         ::oDbf:nTotIvm    := sTot:nTotalImpuestoHidrocarburos
         ::oDbf:nTotRnt    := sTot:nTotalRentabilidad
         ::oDbf:nTotRet    := sTot:nTotalRetencion
         ::oDbf:nTotCob    := sTot:nTotalCobrado
         ::oDbf:nDtoLin    := sTot:nTotalDtoLineal

         ::oDbf:cSrlTot    := sTot:saveToText()

         ::oDbf:nRieCli    := RetFld( ( D():FacturasClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ) , "Riesgo", "Cod" )
         ::oDbf:cDniCli    := RetFld( ( D():FacturasClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Nif", "Cod" )

         ::oDbf:cEstado    := cChkPagFacCli( ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc, D():FacturasClientes( ::nView ), D():FacturasClientesCobros( ::nView ) )





         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::loadValuesExtraFields()

         ( D():FacturasClientes( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible aÃ±adir facturas de clientes" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddRectificativaCliente( cCodigoCliente ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local oError
   local oBlock

   oBlock                        := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():FacturasRectificativas( ::nView ) )->( OrdSetFocus( "dFecFac" ) )
      ( D():FacturasRectificativasLineas( ::nView ) )->( OrdSetFocus( "nNumFac" ) )



      ::cExpresionHeader          := '( Field->dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) )'
      ::cExpresionHeader          += ' .and. ( Field->cSerie >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. Field->cSerie <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '" )'
      ::cExpresionHeader          += ' .and. ( Field->cSufFac >= "' + Rtrim( ::oGrupoSufijo:Cargo:Desde ) + '" .and. Field->cSufFac <= "' + Rtrim( ::oGrupoSufijo:Cargo:Hasta ) + '" )'

      ::setFilterClientIdHeader()

      ::setFilterPaymentInvoiceId()

      ::setFilterRouteId()

      ::setFilterAgentId()

      ::setFilterAlmacenId()



      ::setMeterText( "Procesando facturas rectificativas" )

      ( D():FacturasRectificativas( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():FacturasRectificativas( ::nView ) )->( dbcustomkeycount() ) )

      ( D():FacturasRectificativas( ::nView ) )->( dbgotop() )

      while !::lBreak .AND. !( D():FacturasRectificativas( ::nView ) )->( Eof() )

         sTot              := sTotFacRec( ( D():FacturasRectificativas( ::nView ) )->cSerie + Str( ( D():FacturasRectificativas( ::nView ) )->nNumFac ) + ( D():FacturasRectificativas( ::nView ) )->cSufFac, D():FacturasRectificativas( ::nView ), D():FacturasRectificativasLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasClientesCobros( ::nView ) )

         ::oDbf:Blank()

         ::oDbf:cClsDoc    := "14"
         ::oDbf:cTipDoc    := "Factura rectificativa"
         ::oDbf:cSerDoc    := ( D():FacturasRectificativas( ::nView ) )->cSerie
         ::oDbf:cNumDoc    := Str( ( D():FacturasRectificativas( ::nView ) )->nNumFac )
         ::oDbf:cSufDoc    := ( D():FacturasRectificativas( ::nView ) )->cSufFac
         ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

         ::oDbf:cCodCli    := ( D():FacturasRectificativas( ::nView ) )->cCodCli
         ::oDbf:cNomCli    := ( D():FacturasRectificativas( ::nView ) )->cNomCli
         ::oDbf:cCodAge    := ( D():FacturasRectificativas( ::nView ) )->cCodAge
         ::oDbf:cCodPgo    := ( D():FacturasRectificativas( ::nView ) )->cCodPago
         ::oDbf:cCodRut    := ( D():FacturasRectificativas( ::nView ) )->cCodRut
         ::oDbf:cCodUsr    := ( D():FacturasRectificativas( ::nView ) )->cCodUsr
         ::oDbf:cNomUsr    := UsuariosModel():getNombreWhereCodigo( ( D():FacturasRectificativas( ::nView ) )->cCodUsr )
         ::oDbf:cCodObr    := ( D():FacturasRectificativas( ::nView ) )->cCodObr
         ::oDbf:cCodAlm    := ( D():FacturasRectificativas( ::nView ) )->cCodAlm

         ::oDbf:nComAge    := ( D():FacturasRectificativas( ::nView ) )->nPctComAge

         ::oDbf:cCodPos    := ( D():FacturasRectificativas( ::nView ) )->cPosCli

         ::oDbf:cCodGrp    := RetFld( ( D():FacturasRectificativas( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "cCodGrp", "Cod")


         ::oDbf:nAnoDoc    := Year( ( D():FacturasRectificativas( ::nView ) )->dFecFac )
         ::oDbf:nMesDoc    := Month( ( D():FacturasRectificativas( ::nView ) )->dFecFac )
         ::oDbf:dFecDoc    := ( D():FacturasRectificativas( ::nView ) )->dFecFac
         ::oDbf:cHorDoc    := SubStr( ( D():FacturasRectificativas( ::nView ) )->cTimCre, 1, 2 )
         ::oDbf:cMinDoc    := SubStr( ( D():FacturasRectificativas( ::nView ) )->cTimCre, 4, 2 )

         ::oDbf:nTotNet    := sTot:nTotalNeto
         ::oDbf:nTotIva    := sTot:nTotalIva
         ::oDbf:nTotReq    := sTot:nTotalRecargoEquivalencia
         ::oDbf:nTotDoc    := sTot:nTotalDocumento
         ::oDbf:nTotPnt    := sTot:nTotalPuntoVerde
         ::oDbf:nTotTrn    := sTot:nTotalTransporte
         ::oDbf:nTotAge    := sTot:nTotalAgente
         ::oDbf:nTotCos    := sTot:nTotalCosto
         ::oDbf:nTotIvm    := sTot:nTotalImpuestoHidrocarburos
         ::oDbf:nTotRnt    := sTot:nTotalRentabilidad
         ::oDbf:nTotRet    := sTot:nTotalRetencion
         ::oDbf:nTotCob    := sTot:nTotalCobrado

         ::oDbf:cSrlTot    := sTot:saveToText()

         ::oDbf:nRieCli    := RetFld( ( D():FacturasRectificativas( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Riesgo", "Cod" )
         ::oDbf:cDniCli    := RetFld( ( D():FacturasRectificativas( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Nif", "Cod" )

         ::oDbf:cEstado    := cChkPagFacRec( ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc, D():FacturasRectificativas( ::nView ), D():FacturasClientesCobros( ::nView ) )



         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::addFacturasRectificativasClientes()

         ( D():FacturasRectificativas( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible aÃ±adir facturas rectificativa" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddTicket( ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():TiketsClientes( ::nView ) )->( OrdSetFocus( "dFecTik" ) )
      ( D():TiketsLineas( ::nView ) )->( OrdSetFocus( "cNumTik" ) )



      ::cExpresionHeader          := '( Field->dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) )'
      ::cExpresionHeader          += ' .and. ( Rtrim( cCliTik ) >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde )   + '" .and. Rtrim( cCliTik ) <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '")'
      ::cExpresionHeader          += ' .and. ( Field->cSerTik >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. Field->cSerTik <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '" )'
      ::cExpresionHeader          += ' .and. ( Field->cSufTik >= "' + Rtrim( ::oGrupoSufijo:Cargo:Desde ) + '" .and. Field->cSufTik <= "' + Rtrim( ::oGrupoSufijo:Cargo:Hasta ) + '" )'

      ::setFilterRouteId()

      ::setFilterAgentId()

      ::setFilterAlmacenTicketId()



      ::setMeterText( "Procesando tickets" )

      ( D():TiketsClientes( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():TiketsClientes( ::nView ) )->( dbcustomkeycount() ) )

      ( D():TiketsClientes( ::nView ) )->( dbgotop() )

      while !::lBreak .AND. !( D():TiketsClientes( ::nView ) )->( eof() )

         sTot              := sTotTikCli( ( D():TiketsClientes( ::nView ) )->cSerTik + ( D():TiketsClientes( ::nView ) )->cNumTik + ( D():TiketsClientes( ::nView ) )->cSufTik, D():TiketsClientes( ::nView ), D():TiketsLineas( ::nView ), D():Divisas( ::nView ) )

         ::oDbf:Blank()

         ::oDbf:cCodCli    := ( D():TiketsClientes( ::nView ) )->cCliTik
         ::oDbf:cNomCli    := ( D():TiketsClientes( ::nView ) )->cNomTik
         ::oDbf:cCodAge    := ( D():TiketsClientes( ::nView ) )->cCodAge
         ::oDbf:cCodPgo    := ( D():TiketsClientes( ::nView ) )->cFpgTik
         ::oDbf:cCodRut    := ( D():TiketsClientes( ::nView ) )->cCodRut
         ::oDbf:cCodUsr    := ( D():TiketsClientes( ::nView ) )->cCcjTik
         ::oDbf:cNomUsr    := UsuariosModel():getNombreWhereCodigo( ( D():TiketsClientes( ::nView ) )->cCcjTik )
         ::oDbf:cCodObr    := ( D():TiketsClientes( ::nView ) )->cCodObr
         ::oDbf:cCodAlm    := ( D():TiketsClientes( ::nView ) )->cAlmTik

         ::oDbf:cCodPos    := ( D():TiketsClientes( ::nView ) )->cPosCli

         ::oDbf:cCodGrp    := RetFld( ( D():TiketsClientes( ::nView ) )->cCliTik, ( D():Clientes( ::nView ) ), "cCodGrp", "Cod" )

         ::oDbf:cTipDoc    := "Simplificada"
         ::oDbf:cClsDoc    := "12"
         ::oDbf:cSerDoc    := ( D():TiketsClientes( ::nView ) )->cSerTik
         ::oDbf:cNumDoc    := ( D():TiketsClientes( ::nView ) )->cNumTik
         ::oDbf:cSufDoc    := ( D():TiketsClientes( ::nView ) )->cSufTik
         ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

         ::oDbf:nAnoDoc    := Year( ( D():TiketsClientes( ::nView ) )->dFecTik )
         ::oDbf:nMesDoc    := Month( ( D():TiketsClientes( ::nView ) )->dFecTik )
         ::oDbf:dFecDoc    := ( D():TiketsClientes( ::nView ) )->dFecTik
         ::oDbf:cHorDoc    := SubStr( ( D():TiketsClientes( ::nView ) )->cTimCre, 1, 2 )
         ::oDbf:cMinDoc    := SubStr( ( D():TiketsClientes( ::nView ) )->cTimCre, 4, 2 )

         ::oDbf:nTotNet    := sTot:nTotalNeto
         ::oDbf:nTotIva    := sTot:nTotalIva
         ::oDbf:nTotDoc    := sTot:nTotalDocumento
         ::oDbf:nTotAge    := sTot:nTotalAgente
         ::oDbf:nTotCos    := sTot:nTotalCosto
         ::oDbf:nTotIvm    := sTot:nTotalImpuestoHidrocarburos
         ::oDbf:nTotRnt    := sTot:nTotalRentabilidad
         ::oDbf:nTotCob    := sTot:nTotalCobrado

         ::oDbf:cSrlTot    := sTot:saveToText()

         ::oDbf:nRieCli    := RetFld( ( D():TiketsClientes( ::nView ) )->cCliTik, ( D():Clientes( ::nView ) ), "Riesgo", "Cod" )
         ::oDbf:cDniCli    := RetFld( ( D():TiketsClientes( ::nView ) )->cCliTik, ( D():Clientes( ::nView ) ), "Nif", "Cod" )





         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::addTicketsClientes()

         ( D():TiketsClientes( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible aÃ±adir facturas de clientes" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddSATCliente( cCodigoCliente ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():SatClientes( ::nView ) )->( OrdSetFocus( "cCodCli" ) )



      ::cExpresionHeader          := 'Field->dFecSat >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecSat <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      ::cExpresionHeader          += ' .and. Field->cSerSat >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. Field->cSerSat <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'
      ::cExpresionHeader          += ' .and. Field->cSufSat >= "' + Rtrim( ::oGrupoSufijo:Cargo:Desde ) + '" .and. Field->cSufSat <= "'    + Rtrim( ::oGrupoSufijo:Cargo:Hasta ) + '"'

      ::setFilterClientIdHeader()

      ::setFilterPaymentId()

      ::setFilterRouteId()

      ::setFilterAgentId()

      ::setFilterAlmacenId()



      ::setMeterText( "Procesando SAT" )

      ( D():SatClientes( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():SatClientes( ::nView ) )->( dbcustomkeycount() ) )

      ( D():SatClientes( ::nView ) )->( dbgotop() )

      while !::lBreak .AND. !( D():SatClientes( ::nView ) )->( Eof() )

         sTot              := sTotSatCli( ( D():SatClientes( ::nView ) )->cSerSat + Str( ( D():SatClientes( ::nView ) )->nNumSat ) + ( D():SatClientes( ::nView ) )->cSufSat, D():SatClientes( ::nView ), D():SatClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )

         ::oDbf:Blank()

         ::oDbf:cCodCli    := ( D():SatClientes( ::nView ) )->cCodCli
         ::oDbf:cNomCli    := ( D():SatClientes( ::nView ) )->cNomCli
         ::oDbf:cCodAge    := ( D():SatClientes( ::nView ) )->cCodAge
         ::oDbf:cCodPgo    := ( D():SatClientes( ::nView ) )->cCodPgo
         ::oDbf:cCodRut    := ( D():SatClientes( ::nView ) )->cCodRut
         ::oDbf:cCodUsr    := ( D():SatClientes( ::nView ) )->cCodUsr
         ::oDbf:cNomUsr    := UsuariosModel():getNombreWhereCodigo( ( D():SatClientes( ::nView ) )->cCodUsr )
         ::oDbf:cCodObr    := ( D():SatClientes( ::nView ) )->cCodObr
         ::oDbf:cCodAlm    := ( D():SatClientes( ::nView ) )->cCodAlm

         ::oDbf:nComAge    := ( D():SatClientes( ::nView ) )->nPctComAge

         ::oDbf:cCodPos    := ( D():SatClientes( ::nView ) )->cPosCli

         ::oDbf:cCodGrp    := RetFld( ( D():SatClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "cCodGrp", "Cod" )

         ::oDbf:cTipDoc    := "SAT clientes"
         ::oDbf:cClsDoc    := "32"
         ::oDbf:cSerDoc    := ( D():SatClientes( ::nView ) )->cSerSat
         ::oDbf:cNumDoc    := Str( ( D():SatClientes( ::nView ) )->nNumSat )
         ::oDbf:cSufDoc    := ( D():SatClientes( ::nView ) )->cSufSat

         ::oDbf:cIdeDoc    :=  ::idDocumento()

         ::oDbf:nAnoDoc    := Year( ( D():SatClientes( ::nView ) )->dFecSat )
         ::oDbf:nMesDoc    := Month( ( D():SatClientes( ::nView ) )->dFecSat )
         ::oDbf:dFecDoc    := ( D():SatClientes( ::nView ) )->dFecSat
         ::oDbf:cHorDoc    := SubStr( ( D():SatClientes( ::nView ) )->cTimCre, 1, 2 )
         ::oDbf:cMinDoc    := SubStr( ( D():SatClientes( ::nView ) )->cTimCre, 4, 2 )

         ::oDbf:nTotNet    := sTot:nTotalNeto
         ::oDbf:nTotIva    := sTot:nTotalIva
         ::oDbf:nTotReq    := sTot:nTotalRecargoEquivalencia
         ::oDbf:nTotDoc    := sTot:nTotalDocumento
         ::oDbf:nTotPnt    := sTot:nTotalPuntoVerde
         ::oDbf:nTotTrn    := sTot:nTotalTransporte
         ::oDbf:nTotAge    := sTot:nTotalAgente
         ::oDbf:nTotCos    := sTot:nTotalCosto
         ::oDbf:nTotIvm    := sTot:nTotalImpuestoHidrocarburos
         ::oDbf:nTotRnt    := sTot:nTotalRentabilidad
         ::oDbf:nTotRet    := sTot:nTotalRetencion
         ::oDbf:nTotCob    := sTot:nTotalCobrado

         ::oDbf:nRieCli    := RetFld( ( D():SatClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Riesgo", "Cod" )
         ::oDbf:cDniCli    := RetFld( ( D():SatClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Nif", "Cod" )

         if ( D():SatClientes( ::nView ) )->lEstado
            ::oDbf:cEstado := "Pendiente"
         else
            ::oDbf:cEstado := "Finalizado"
         end





         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::addSATClientes()

         ( D():SatClientes( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible aÃ±adir SAT de clientes" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddPresupuestoCliente( cCodigoCliente ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():PresupuestosClientesLineas( ::nView ) )->( OrdSetFocus( "nNumPre" ) )



      ::cExpresionHeader          := 'Field->dFecPre >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecPre <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      ::cExpresionHeader          += ' .and. Field->cSerPre >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. Field->cSerPre <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'
      ::cExpresionHeader          += ' .and. Field->cSufPre >= "' + Rtrim( ::oGrupoSufijo:Cargo:Desde ) + '" .and. Field->cSufPre <= "'    + Rtrim( ::oGrupoSufijo:Cargo:Hasta ) + '"'

      ::setFilterClientIdHeader()

      ::setFilterPaymentId()

      ::setFilterRouteId()

      ::setFilterAgentId()

      ::setFilterAlmacenId()



      ::setMeterText( "Procesando presupuestos" )

      ( D():PresupuestosClientes( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():PresupuestosClientes( ::nView ) )->( dbcustomkeycount() ) )

      ( D():PresupuestosClientes( ::nView ) )->( dbgotop() )

      while !::lBreak .AND. !( D():PresupuestosClientes( ::nView ) )->( eof() )

         sTot              := sTotPreCli( ( D():PresupuestosClientes( ::nView ) )->cSerPre + Str( ( D():PresupuestosClientes( ::nView ) )->nNumPre ) + ( D():PresupuestosClientes( ::nView ) )->cSufPre, D():PresupuestosClientes( ::nView ), D():PresupuestosClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )

         ::oDbf:Blank()

         ::oDbf:cCodCli    := ( D():PresupuestosClientes( ::nView ) )->cCodCli
         ::oDbf:cNomCli    := ( D():PresupuestosClientes( ::nView ) )->cNomCli
         ::oDbf:cCodAge    := ( D():PresupuestosClientes( ::nView ) )->cCodAge
         ::oDbf:cCodPgo    := ( D():PresupuestosClientes( ::nView ) )->cCodPgo
         ::oDbf:cCodRut    := ( D():PresupuestosClientes( ::nView ) )->cCodRut
         ::oDbf:cCodUsr    := ( D():PresupuestosClientes( ::nView ) )->cCodUsr
         ::oDbf:cNomUsr    := UsuariosModel():getNombreWhereCodigo( ( D():PresupuestosClientes( ::nView ) )->cCodUsr )
         ::oDbf:cCodObr    := ( D():PresupuestosClientes( ::nView ) )->cCodObr
         ::oDbf:cCodAlm    := ( D():PresupuestosClientes( ::nView ) )->cCodAlm

         ::oDbf:nComAge    := ( D():PresupuestosClientes( ::nView ) )->nPctComAge

         ::oDbf:cCodPos    := ( D():PresupuestosClientes( ::nView ) )->cPosCli

         ::oDbf:cCodGrp    := RetFld( ( D():PresupuestosClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "cCodGrp", "Cod")

         ::oDbf:cTipDoc    := "Presupuesto clientes"
         ::oDbf:cClsDoc    := "08"
         ::oDbf:cSerDoc    := ( D():PresupuestosClientes( ::nView ) )->cSerPre
         ::oDbf:cNumDoc    := Str( ( D():PresupuestosClientes( ::nView ) )->nNumPre )
         ::oDbf:cSufDoc    := ( D():PresupuestosClientes( ::nView ) )->cSufPre

         ::oDbf:cIdeDoc    :=  ::idDocumento()

         ::oDbf:nAnoDoc    := Year( ( D():PresupuestosClientes( ::nView ) )->dFecPre )
         ::oDbf:nMesDoc    := Month( ( D():PresupuestosClientes( ::nView ) )->dFecPre )
         ::oDbf:dFecDoc    := ( D():PresupuestosClientes( ::nView ) )->dFecPre
         ::oDbf:cHorDoc    := SubStr( ( D():PresupuestosClientes( ::nView ) )->cTimCre, 1, 2 )
         ::oDbf:cMinDoc    := SubStr( ( D():PresupuestosClientes( ::nView ) )->cTimCre, 4, 2 )

         ::oDbf:nTotNet    := sTot:nTotalNeto
         ::oDbf:nTotIva    := sTot:nTotalIva
         ::oDbf:nTotReq    := sTot:nTotalRecargoEquivalencia
         ::oDbf:nTotDoc    := sTot:nTotalDocumento
         ::oDbf:nTotPnt    := sTot:nTotalPuntoVerde
         ::oDbf:nTotTrn    := sTot:nTotalTransporte
         ::oDbf:nTotAge    := sTot:nTotalAgente
         ::oDbf:nTotCos    := sTot:nTotalCosto
         ::oDbf:nTotIvm    := sTot:nTotalImpuestoHidrocarburos
         ::oDbf:nTotRnt    := sTot:nTotalRentabilidad
         ::oDbf:nTotRet    := sTot:nTotalRetencion
         ::oDbf:nTotCob    := sTot:nTotalCobrado

         ::oDbf:nRieCli    := RetFld( ( D():PresupuestosClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Riesgo", "Cod" )
         ::oDbf:cDniCli    := RetFld( ( D():PresupuestosClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Nif", "Cod" )

         if ( D():PresupuestosClientes( ::nView ) )->lEstado
            ::oDbf:cEstado    := "Pendiente"
         else
            ::oDbf:cEstado    := "Finalizado"
         end





         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::addPresupuestosClientes()

         ( D():PresupuestosClientes( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

  RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible aÃ±adir presupuestos de clientes" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddPedidoCliente( cCodigoCliente ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local oError
   local oBlock

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():PedidosClientes( ::nView ) )->( OrdSetFocus( "dFecPed" ) )
      ( D():PedidosClientesLineas( ::nView ) )->( OrdSetFocus( "nNumPed" ) )



      ::cExpresionHeader          := 'Field->dFecPed >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecPed <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      ::cExpresionHeader          += ' .and. Field->cSerPed >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. Field->cSerPed <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'
      ::cExpresionHeader          += ' .and. Field->cSufPed >= "' + Rtrim( ::oGrupoSufijo:Cargo:Desde ) + '" .and. Field->cSufPed <= "'    + Rtrim( ::oGrupoSufijo:Cargo:Hasta ) + '"'

      ::setFilterClientIdHeader()

      ::setFilterPaymentId()

      ::setFilterRouteId()

      ::setFilterAgentId()

      ::setFilterAlmacenId()



      ::setMeterText( "Procesando pedidos" )

      ( D():PedidosClientes( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():PedidosClientes( ::nView ) )->( dbcustomkeycount() ) )

      ( D():PedidosClientes( ::nView ) )->( dbgotop() )

      while !::lBreak .AND. !( D():PedidosClientes( ::nView ) )->( Eof() )

         sTot              := sTotPedCli( ( D():PedidosClientes( ::nView ) )->cSerPed + Str( ( D():PedidosClientes( ::nView ) )->nNumPed ) + ( D():PedidosClientes( ::nView ) )->cSufPed, D():PedidosClientes( ::nView ), D():PedidosClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )

         ::oDbf:Blank()

         ::oDbf:cCodCli    := ( D():PedidosClientes( ::nView ) )->cCodCli
         ::oDbf:cNomCli    := ( D():PedidosClientes( ::nView ) )->cNomCli
         ::oDbf:cCodAge    := ( D():PedidosClientes( ::nView ) )->cCodAge
         ::oDbf:cCodPgo    := ( D():PedidosClientes( ::nView ) )->cCodPgo
         ::oDbf:cCodRut    := ( D():PedidosClientes( ::nView ) )->cCodRut
         ::oDbf:cCodObr    := ( D():PedidosClientes( ::nView ) )->cCodObr
         ::oDbf:cCodAlm    := ( D():PedidosClientes( ::nView ) )->cCodAlm

         ::oDbf:nComAge    := ( D():PedidosClientes( ::nView ) )->nPctComAge

         ::oDbf:cCodPos    := ( D():PedidosClientes( ::nView ) )->cPosCli

         ::oDbf:cCodGrp    := RetFld( ( D():PedidosClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "cCodGrp", "Cod" )

         ::oDbf:cTipDoc    := "Pedidos clientes"
         ::oDbf:cClsDoc    := "09"
         ::oDbf:cSerDoc    := ( D():PedidosClientes( ::nView ) )->cSerPed
         ::oDbf:cNumDoc    := Str( ( D():PedidosClientes( ::nView ) )->nNumPed )
         ::oDbf:cSufDoc    := ( D():PedidosClientes( ::nView ) )->cSufPed
         ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

         ::oDbf:nAnoDoc    := Year( ( D():PedidosClientes( ::nView ) )->dFecPed )
         ::oDbf:nMesDoc    := Month( ( D():PedidosClientes( ::nView ) )->dFecPed )
         ::oDbf:dFecDoc    := ( D():PedidosClientes( ::nView ) )->dFecPed
         ::oDbf:cHorDoc    := SubStr( ( D():PedidosClientes( ::nView ) )->cTimCre, 1, 2 )
         ::oDbf:cMinDoc    := SubStr( ( D():PedidosClientes( ::nView ) )->cTimCre, 4, 2 )

         ::oDbf:nTotNet    := sTot:nTotalNeto
         ::oDbf:nTotIva    := sTot:nTotalIva
         ::oDbf:nTotReq    := sTot:nTotalRecargoEquivalencia
         ::oDbf:nTotDoc    := sTot:nTotalDocumento
         ::oDbf:nTotPnt    := sTot:nTotalPuntoVerde
         ::oDbf:nTotTrn    := sTot:nTotalTransporte
         ::oDbf:nTotAge    := sTot:nTotalAgente
         ::oDbf:nTotCos    := sTot:nTotalCosto
         ::oDbf:nTotIvm    := sTot:nTotalImpuestoHidrocarburos
         ::oDbf:nTotRnt    := sTot:nTotalRentabilidad
         ::oDbf:nTotRet    := sTot:nTotalRetencion
         ::oDbf:nTotCob    := sTot:nTotalCobrado

         ::oDbf:nRieCli    := RetFld( ( D():PedidosClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Riesgo", "Cod" )
         ::oDbf:cDniCli    := RetFld( ( D():PedidosClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Nif", "Cod" )

         do case
            case ( D():PedidosClientes( ::nView ) )->nEstado <= 1
               ::oDbf:cEstado    := "Pendiente"

            case ( D():PedidosClientes( ::nView ) )->nEstado == 2
               ::oDbf:cEstado    := "Parcialmente"

            case ( D():PedidosClientes( ::nView ) )->nEstado == 3
               ::oDbf:cEstado    := "Finalizado"

         end





         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::addPedidosClientes()


         ( D():PedidosClientes( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible aÃ±adir pedidos de clientes" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddAlbaranCliente( lNoFacturados ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local oError
   local oBlock

   If( lNoFacturados == nil, lNoFacturados := .F., ) ;

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ( D():AlbaranesClientes( ::nView ) )->( OrdSetFocus( "dFecAlb" ) )
      ( D():AlbaranesClientesLineas( ::nView ) )->( OrdSetFocus( "nNumAlb" ) )



      ::cExpresionHeader       := '( Field->dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) )'

      if lNoFacturados
         ::cExpresionHeader    += " .and. ( nFacturado < 3 ) "
      end

      ::cExpresionHeader       += ' .and. ( Field->cSerAlb >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde ) + '" .and. Field->cSerAlb <= "' + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '" ) '
      ::cExpresionHeader       += ' .and. ( Field->cSufAlb >= "' + Rtrim( ::oGrupoSufijo:Cargo:Desde ) + '" .and. Field->cSufAlb <= "' + Rtrim( ::oGrupoSufijo:Cargo:Hasta ) + '" )'

      ::setFilterClientIdHeader()

      ::setFilterPaymentInvoiceId()

      ::setFilterRouteId()

      ::setFilterAgentId()

      ::setFilterAlmacenId()



      ::setMeterText( "Procesando albaranes" )

      ( D():AlbaranesClientes( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

      ::setMeterTotal( ( D():AlbaranesClientes( ::nView ) )->( dbcustomkeycount() ) )

      ( D():AlbaranesClientes( ::nView ) )->( dbgotop() )
      while !::lBreak .AND. !( D():AlbaranesClientes( ::nView ) )->( Eof() )

         sTot              := sTotAlbCli( ( D():AlbaranesClientes( ::nView ) )->cSerAlb + Str( ( D():AlbaranesClientes( ::nView ) )->nNumAlb ) + ( D():AlbaranesClientes( ::nView ) )->cSufAlb, D():AlbaranesClientes( ::nView ), D():AlbaranesClientesLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )

         ::oDbf:Blank()

         ::oDbf:cCodCli    := ( D():AlbaranesClientes( ::nView ) )->cCodCli
         ::oDbf:cNomCli    := ( D():AlbaranesClientes( ::nView ) )->cNomCli
         ::oDbf:cCodAge    := ( D():AlbaranesClientes( ::nView ) )->cCodAge
         ::oDbf:cCodPgo    := ( D():AlbaranesClientes( ::nView ) )->cCodPago
         ::oDbf:cCodRut    := ( D():AlbaranesClientes( ::nView ) )->cCodRut
         ::oDbf:cCodObr    := ( D():AlbaranesClientes( ::nView ) )->cCodObr
         ::oDbf:cCodAlm    := ( D():AlbaranesClientes( ::nView ) )->cCodAlm

         ::oDbf:cCodUsr    := ( D():AlbaranesClientes( ::nView ) )->cCodUsr
         ::oDbf:cNomUsr    := UsuariosModel():getNombreWhereCodigo( ( D():AlbaranesClientes( ::nView ) )->cCodUsr )

         ::oDbf:nComAge    := ( D():AlbaranesClientes( ::nView ) )->nPctComAge

         ::oDbf:cCodPos    := ( D():AlbaranesClientes( ::nView ) )->cPosCli

         ::oDbf:cCodGrp    := RetFld( ( D():AlbaranesClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "cCodGrp", "Cod" )

         ::oDbf:cTipDoc    := "Albaranes clientes"
         ::oDbf:cClsDoc    := "10"
         ::oDbf:cSerDoc    := ( D():AlbaranesClientes( ::nView ) )->cSerAlb
         ::oDbf:cNumDoc    := Str( ( D():AlbaranesClientes( ::nView ) )->nNumAlb )
         ::oDbf:cSufDoc    := ( D():AlbaranesClientes( ::nView ) )->cSufAlb
         ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

         ::oDbf:nAnoDoc    := Year( ( D():AlbaranesClientes( ::nView ) )->dFecAlb )
         ::oDbf:nMesDoc    := Month( ( D():AlbaranesClientes( ::nView ) )->dFecAlb )
         ::oDbf:dFecDoc    := ( D():AlbaranesClientes( ::nView ) )->dFecAlb
         ::oDbf:cHorDoc    := SubStr( ( D():AlbaranesClientes( ::nView ) )->cTimCre, 1, 2 )
         ::oDbf:cMinDoc    := SubStr( ( D():AlbaranesClientes( ::nView ) )->cTimCre, 4, 2 )

         ::oDbf:nTotNet    := sTot:nTotalNeto
         ::oDbf:nTotIva    := sTot:nTotalIva
         ::oDbf:nTotReq    := sTot:nTotalRecargoEquivalencia
         ::oDbf:nTotDoc    := sTot:nTotalDocumento
         ::oDbf:nTotPnt    := sTot:nTotalPuntoVerde
         ::oDbf:nTotTrn    := sTot:nTotalTransporte
         ::oDbf:nTotAge    := sTot:nTotalAgente
         ::oDbf:nTotCos    := sTot:nTotalCosto
         ::oDbf:nTotIvm    := sTot:nTotalImpuestoHidrocarburos
         ::oDbf:nTotRnt    := sTot:nTotalRentabilidad
         ::oDbf:nTotRet    := sTot:nTotalRetencion
         ::oDbf:nTotCob    := sTot:nTotalCobrado

         ::oDbf:nRieCli    := RetFld( ( D():AlbaranesClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Riesgo", "Cod" )
         ::oDbf:cDniCli    := RetFld( ( D():AlbaranesClientes( ::nView ) )->cCodCli, ( D():Clientes( ::nView ) ), "Nif", "Cod" )

         do case
            case ( D():AlbaranesClientes( ::nView ) )->nFacturado <= 1
               ::oDbf:cEstado    := "Pendiente"

            case ( D():AlbaranesClientes( ::nView ) )->nFacturado == 2
               ::oDbf:cEstado    := "Parcialmente"

            case ( D():AlbaranesClientes( ::nView ) )->nFacturado == 3
               ::oDbf:cEstado    := "Finalizado"

         end





         if ::lValidRegister()
            ::oDbf:Insert()
         else
            ::oDbf:Cancel()
         end

         ::addAlbaranesClientes()

         ( D():AlbaranesClientes( ::nView ) )->( dbskip() )

         ::setMeterAutoIncremental()

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible aÃ±adir albaranes de clientes" )

   end

   ErrorBlock( oBlock )

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddPedidoProveedor( cCodigoProveedor ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot

   ( D():PedidosProveedores( ::nView ) )->( OrdSetFocus( "dFecPed" ) )
   ( D():PedidosProveedoresLineas( ::nView ) )->( OrdSetFocus( "nNumPed" ) )



   ::cExpresionHeader                := 'Field->dFecPed >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecPed <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::setFilterPaymentId()

   ::setFilterProviderId()



   ::setMeterText( "Procesando pedidos" )

   ( D():PedidosProveedores( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

   ::setMeterTotal( ( D():PedidosProveedores( ::nView ) )->( dbcustomkeycount() ) )

   ( D():PedidosProveedores( ::nView ) )->( dbgotop() )
   while !::lBreak .AND. !( D():PedidosProveedores( ::nView ) )->( Eof() )

      sTot              := sTotPedPrv( ( D():PedidosProveedores( ::nView ) )->cSerPed + Str( ( D():PedidosProveedores( ::nView ) )->nNumPed ) + ( D():PedidosProveedores( ::nView ) )->cSufPed, D():PedidosProveedores( ::nView ), D():PedidosProveedoresLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )

      ::oDbf:Blank()

      ::oDbf:cTipDoc    := "Pedido proveedor"
      ::oDbf:cClsDoc    := "01"

      ::oDbf:cSerDoc    := ( D():PedidosProveedores( ::nView ) )->cSerPed
      ::oDbf:cNumDoc    := Str( ( D():PedidosProveedores( ::nView ) )->nNumPed )
      ::oDbf:cSufDoc    := ( D():PedidosProveedores( ::nView ) )->cSufPed

      ::oDbf:cIdeDoc    := ::idDocumento()

      ::oDbf:cCodPrv    := ( D():PedidosProveedores( ::nView ) )->cCodPrv
      ::oDbf:cNomPrv    := ( D():PedidosProveedores( ::nView ) )->cNomPrv
      ::oDbf:cCodGrp    := RetFld( ( D():PedidosProveedores( ::nView ) )->cCodPrv, D():Proveedores( ::nView ), "cCodGrp" )
      ::oDbf:cCodPgo    := ( D():PedidosProveedores( ::nView ) )->cCodPgo

      ::oDbf:nAnoDoc    := Year( ( D():PedidosProveedores( ::nView ) )->dFecPed )
      ::oDbf:nMesDoc    := Month( ( D():PedidosProveedores( ::nView ) )->dFecPed )
      ::oDbf:dFecDoc    := ( D():PedidosProveedores( ::nView ) )->dFecPed
      ::oDbf:cHorDoc    := SubStr( ( D():PedidosProveedores( ::nView ) )->cTimChg, 1, 2 )
      ::oDbf:cMinDoc    := SubStr( ( D():PedidosProveedores( ::nView ) )->cTimChg, 3, 2 )

      ::oDbf:nTotNet    := sTot:nTotalNeto
      ::oDbf:nTotIva    := sTot:nTotalIva
      ::oDbf:nTotReq    := sTot:nTotalRecargoEquivalencia
      ::oDbf:nTotDoc    := sTot:nTotalDocumento

      if ::lValidRegister()
         ::oDbf:Insert()
      else
         ::oDbf:Cancel()
      end

      ::addPedidosProveedores()

      ( D():PedidosProveedores( ::nView ) )->( dbskip() )

      ::setMeterAutoIncremental()

   end

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddAlbaranProveedor( lFacturados ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot

   If( lFacturados == nil, lFacturados := .F., ) ;

   ( D():AlbaranesProveedores( ::nView ) )->( OrdSetFocus( "dFecAlb" ) )
   ( D():AlbaranesProveedoresLineas( ::nView ) )->( OrdSetFocus( "nNumAlb" ) )



   if lFacturados
      ::cExpresionHeader          := '!lFacturado .and. Field->dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   else
      ::cExpresionHeader          := 'Field->dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   ::setFilterPaymentId()

   ::setFilterProviderId()



   ::setMeterText( "Procesando albaranes" )

   ( D():AlbaranesProveedores( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

   ::setMeterTotal( ( D():AlbaranesProveedores( ::nView ) )->( dbcustomkeycount() ) )

   ( D():AlbaranesProveedores( ::nView ) )->( dbgotop() )

   while !::lBreak .AND. !( D():AlbaranesProveedores( ::nView ) )->( eof() )

      sTot           := sTotAlbPrv( D():AlbaranesProveedoresId( ::nView ), D():AlbaranesProveedores( ::nView ), D():AlbaranesProveedoresLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )

      ::oDbf:Blank()

      ::oDbf:cTipDoc := "Albaran proveedor"
      ::oDbf:cClsDoc := "02"

      ::oDbf:cSerDoc := ( D():AlbaranesProveedores( ::nView ) )->cSerAlb
      ::oDbf:cNumDoc := Str( ( D():AlbaranesProveedores( ::nView ) )->nNumAlb )
      ::oDbf:cSufDoc := ( D():AlbaranesProveedores( ::nView ) )->cSufAlb

      ::oDbf:cIdeDoc := ::idDocumento()

      ::oDbf:cCodPrv := ( D():AlbaranesProveedores( ::nView ) )->cCodPrv
      ::oDbf:cNomPrv := ( D():AlbaranesProveedores( ::nView ) )->cNomPrv
      ::oDbf:cCodGrp := RetFld( ( D():AlbaranesProveedores( ::nView ) )->cCodPrv, D():Proveedores( ::nView ), "cCodGrp" )
      ::oDbf:cCodPgo := ( D():AlbaranesProveedores( ::nView ) )->cCodPgo

      ::oDbf:nAnoDoc := Year( ( D():AlbaranesProveedores( ::nView ) )->dFecAlb )
      ::oDbf:nMesDoc := Month( ( D():AlbaranesProveedores( ::nView ) )->dFecAlb )
      ::oDbf:dFecDoc := ( D():AlbaranesProveedores( ::nView ) )->dFecAlb
      ::oDbf:cHorDoc := SubStr( ( D():AlbaranesProveedores( ::nView ) )->cTimChg, 1, 2 )
      ::oDbf:cMinDoc := SubStr( ( D():AlbaranesProveedores( ::nView ) )->cTimChg, 3, 2 )

      ::oDbf:nTotNet := sTot:nTotalNeto
      ::oDbf:nTotIva := sTot:nTotalIva
      ::oDbf:nTotReq := sTot:nTotalRecargoEquivalencia
      ::oDbf:nTotDoc := sTot:nTotalDocumento

      if ::lValidRegister()
         ::oDbf:Insert()
      else
         ::oDbf:Cancel()
      end

      ::AddAlbaranesProveedores()

      ( D():AlbaranesProveedores( ::nView ) )->( dbskip() )

      ::setMeterAutoIncremental()

   end

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddFacturaProveedor( cCodigoProveedor ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot
   local aTotIva

   ( D():FacturasProveedores( ::nView ) )->( OrdSetFocus( "dFecFac" ) )
   ( D():FacturasProveedoresLineas( ::nView ) )->( OrdSetFocus( "nNumFac" ) )



   ::cExpresionHeader             := 'Field->dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::setFilterPaymentInvoiceId()

   ::setFilterProviderId()



   ::setMeterText( "Procesando facturas" )

   ( D():FacturasProveedores( ::nView ) )->( setCustomFilter( ::cExpresionHeader ) )

   ::setMeterTotal( ( D():FacturasProveedores( ::nView ) )->(dbcustomkeycount() ) )

   ( D():FacturasProveedores( ::nView ) )->( dbgotop() )
   while !::lBreak .AND. !( D():FacturasProveedores( ::nView ) )->( eof() )

      sTot           := sTotFacPrv( ( D():FacturasProveedores( ::nView ) )->cSerFac + Str( ( D():FacturasProveedores( ::nView ) )->nNumFac ) + ( D():FacturasProveedores( ::nView ) )->cSufFac, D():FacturasProveedores( ::nView ), D():FacturasProveedoresLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasProveedoresPagos( ::nView ) )

      ::oDbf:Blank()

      ::oDbf:cTipDoc := "Factura proveedor"
      ::oDbf:cClsDoc := "03"

      ::oDbf:cSerDoc := ( D():FacturasProveedores( ::nView ) )->cSerFac
      ::oDbf:cNumDoc := Str( ( D():FacturasProveedores( ::nView ) )->nNumFac )
      ::oDbf:cSufDoc := ( D():FacturasProveedores( ::nView ) )->cSufFac

      ::oDbf:cIdeDoc := ::idDocumento()

      ::oDbf:cCodPrv := ( D():FacturasProveedores( ::nView ) )->cCodPrv
      ::oDbf:cNomPrv := ( D():FacturasProveedores( ::nView ) )->cNomPrv
      ::oDbf:cCodGrp := RetFld( ( D():FacturasProveedores( ::nView ) )->cCodPrv, D():Proveedores( ::nView ), "cCodGrp" )
      ::oDbf:cCodPgo := ( D():FacturasProveedores( ::nView ) )->cCodPago

      ::oDbf:nAnoDoc := Year( ( D():FacturasProveedores( ::nView ) )->dFecFac )
      ::oDbf:nMesDoc := Month( ( D():FacturasProveedores( ::nView ) )->dFecFac )
      ::oDbf:dFecDoc := ( D():FacturasProveedores( ::nView ) )->dFecFac
      ::oDbf:cHorDoc := SubStr( ( D():FacturasProveedores( ::nView ) )->cTimChg, 1, 2 )
      ::oDbf:cMinDoc := SubStr( ( D():FacturasProveedores( ::nView ) )->cTimChg, 3, 2 )

      ::oDbf:nTotNet := sTot:nTotalNeto
      ::oDbf:nTotIva := sTot:nTotalIva
      ::oDbf:nTotReq := sTot:nTotalRecargoEquivalencia
      ::oDbf:nTotDoc := sTot:nTotalDocumento

      ::oDbf:cSrlTot := sTot:saveToText()

      if ::lValidRegister()
         ::oDbf:Insert()
      else
         ::oDbf:Cancel()
      end

      ( D():FacturasProveedores( ::nView ) )->( dbskip() )

      ::setMeterAutoIncremental()

   end

RETURN ( Self )



static FUNCTION TFastreportTerceros_AddRectificativaProveedor( ) ; local Self AS CLASS TFastreportTerceros := QSelf() AS CLASS TFastreportTerceros

   local sTot

   ( D():FacturasRectificativasProveedores( ::nView ) )->( OrdSetFocus( "dFecFac" ) )



   ::cExpresionHeader             := 'Field->dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. Field->dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::setFilterPaymentInvoiceId()

   ::setFilterProviderId()



   ::setMeterText( "Procesando facturas rectificativas")

   ( D():FacturasRectificativasProveedores( ::nView ) )->( setCustomFilter ( ::cExpresionHeader ) )

   ::setMeterTotal( ( D():FacturasRectificativasProveedores( ::nView ) )->( dbcustomkeycount() ) )

   ( D():FacturasRectificativasProveedores( ::nView ) )->( dbgotop() )

   while !::lBreak .AND. !( D():FacturasRectificativasProveedores( ::nView ) )->( eof() )

      sTot           := sTotRctPrv( ( D():FacturasRectificativasProveedores( ::nView ) )->cSerFac + Str( ( D():FacturasRectificativasProveedores( ::nView ) )->nNumFac ) + ( D():FacturasRectificativasProveedores( ::nView ) )->cSufFac, D():FacturasRectificativasProveedores( ::nView ), D():FacturasRectificativasProveedoresLineas( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ), D():FacturasProveedoresPagos( ::nView ) )

      ::oDbf:Blank()

      ::oDbf:cTipDoc := "Factura rectificativa"
      ::oDbf:cClsDoc := "04"

      ::oDbf:cSerDoc := ( D():FacturasRectificativasProveedores( ::nView ) )->cSerFac
      ::oDbf:cNumDoc := Str( ( D():FacturasRectificativasProveedores( ::nView ) )->nNumFac )
      ::oDbf:cSufDoc := ( D():FacturasRectificativasProveedores( ::nView ) )->cSufFac

      ::oDbf:cIdeDoc := ::idDocumento()

      ::oDbf:cCodPrv := ( D():FacturasRectificativasProveedores( ::nView ) )->cCodPrv
      ::oDbf:cNomPrv := ( D():FacturasRectificativasProveedores( ::nView ) )->cNomPrv
      ::oDbf:cCodGrp := RetFld( ( D():FacturasRectificativasProveedores( ::nView ) )->cCodPrv, D():Proveedores( ::nView ), "cCodGrp" )
      ::oDbf:cCodPgo := ( D():FacturasRectificativasProveedores( ::nView ) )->cCodPago

      ::oDbf:nAnoDoc := Year( ( D():FacturasRectificativasProveedores( ::nView ) )->dFecFac )
      ::oDbf:nMesDoc := Month( ( D():FacturasRectificativasProveedores( ::nView ) )->dFecFac )
      ::oDbf:dFecDoc := ( D():FacturasRectificativasProveedores( ::nView ) )->dFecFac
      ::oDbf:cHorDoc := SubStr( ( D():FacturasRectificativasProveedores( ::nView ) )->cTimChg, 1, 2 )
      ::oDbf:cMinDoc := SubStr( ( D():FacturasRectificativasProveedores( ::nView ) )->cTimChg, 3, 2 )

      ::oDbf:nTotNet := sTot:nTotalNeto
      ::oDbf:nTotIva := sTot:nTotalIva
      ::oDbf:nTotReq := sTot:nTotalRecargoEquivalencia
      ::oDbf:nTotDoc := sTot:nTotalDocumento

      ::oDbf:cSrlTot := sTot:saveToText()

      if ::lValidRegister()
         ::oDbf:Insert()
      else
         ::oDbf:Cancel()
      end

      ::AddFacturasRectificativasProveedores()

      ( D():FacturasRectificativasProveedores( ::nView ) )->( dbskip() )

      ::setMeterAutoIncremental()

   end

RETURN ( Self )
