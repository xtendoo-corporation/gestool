#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TFpgRPrv.prg"
_HB_CLASS TFpgRPrv ; function TFpgRPrv ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFpgRPrv", iif( .T., { @TInfGen() }, { @HBObject() } ), @TFpgRPrv() ) ) ;

   _HB_MEMBER { oEstado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS CHARACTER cEstado } ; oClass:AddMultiData( "CHARACTER", "Pagados", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Pagados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TFpgRPrv_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TFpgRPrv_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TFpgRPrv_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TFpgRPrv_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TFpgRPrv_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lIsValid(); oClass:AddMethod( "lIsValid", @TFpgRPrv_lIsValid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFpgRPrv ;



static FUNCTION TFpgRPrv_Create( ) ; local Self AS CLASS TFpgRPrv := QSelf() AS CLASS TFpgRPrv

   ::AddField( "cCodPgo", "C",  2, 0, {|| "@!" },         "Pgo.",                   .F., "Código de formas de pago"  ,  4, .F.)
   ::AddField( "cNomPgo", "C", 40, 0, {|| "@!" },         "Forma de pago",          .F., "Nombre de formas de pago"  , 40, .F.)
   ::AddField( "cDocMov", "C", 18, 0, {|| "@!" },         "Recibo",                 .T., "Recibo"                    , 14, .F.)
   ::AddField( "cCodPrv", "C", 12, 0, {|| "@!" },         "Prv.",                   .T., "Cod. Proveedor",              9 )
   ::AddField( "cNomPrv", "C", 50, 0, {|| "@!" },         "Proveedor",              .T., "Nombre Proveedor",           35 )
   ::AddField( "cNifPrv", "C", 15, 0, {|| "@!" },         "Nif",                    .F., "Nif",                        15 )
   ::AddField( "cDomPrv", "C", 35, 0, {|| "@!" },         "Domicilio",              .F., "Domicilio",                  35 )
   ::AddField( "cPobPrv", "C", 25, 0, {|| "@!" },         "Población",              .F., "Población",                  25 )
   ::AddField( "cProPrv", "C", 20, 0, {|| "@!" },         "Provincia",              .F., "Provincia",                  20 )
   ::AddField( "cCdpPrv", "C",  7, 0, {|| "@!" },         "CP",                     .F., "Cod. Postal",                 7 )
   ::AddField( "cTlfPrv", "C", 12, 0, {|| "@!" },         "Tlf",                    .F., "Teléfono",                   12 )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut },    "Tot. Rec",               .T., "Total recibo"              , 14, .T.)
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },         "Fecha",                  .T., "Fecha de expedición"       , 10, .F.)
   ::AddField( "dFecCob", "D",  8, 0, {|| "@!" },         "Fecha pago",             .F., "Fecha de cobro"            , 10, .F.)
   ::AddField( "nTotFac", "N", 16, 6, {|| ::cPicOut },    "Tot. Fac",               .F., "Total factura"             , 14, .T.)
   ::AddField( "nTotCob", "N", 16, 6, {|| ::cPicOut },    "Tot. Cob",               .F., "Total cobrado"             , 14, .T.)
   ::AddField( "nTotPen", "N", 16, 6, {|| ::cPicOut },    "Tot. Pen",               .F., "Total pendiente"           , 14, .T.)
   ::AddField( "cBanco",  "C", 50, 0, {|| "@!" },         "Banco",                  .F., "Nombre del banco"          , 20, .F. )
   ::AddField( "cCuenta", "C", 30, 0, {|| "@!" },         "Cuenta",                 .F., "Cuenta bancaria"           , 35, .F. )

   ::AddTmpIndex( "cCodPgo", "cCodPgo" )

   ::AddGroup( {|| ::oDbf:cCodPgo }, {|| "Forma de pago : " + Rtrim( ::oDbf:cCodPgo ) + "-" + Rtrim( ::oDbf:cNomPgo ) }, {|| Space(1) } )

RETURN ( Self )



static FUNCTION TFpgRPrv_OpenFiles( ) ; local Self AS CLASS TFpgRPrv := QSelf() AS CLASS TFpgRPrv

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TFpgRPrv_CloseFiles( ) ; local Self AS CLASS TFpgRPrv := QSelf() AS CLASS TFpgRPrv

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end
   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end
   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oFacPrvT := nil
   ::oFacPrvL := nil
   ::oFacPrvP := nil
   ::oDbfIva  := nil

RETURN ( Self )



static FUNCTION TFpgRPrv_lResource( cFld ) ; local Self AS CLASS TFpgRPrv := QSelf() AS CLASS TFpgRPrv

   if !::StdResource( "INFPGPRVREC" )
      return .F.
   end





   if !::oDefFpgInf( 70, 80, 90, 100, 300 )
      return .F.
   end

   if !::oDefPrvInf( 110, 120, 130, 140, 400 )
      return .F.
   end




   ::oEstado := TComboBox():ReDefine( 210, { | u | If( PCount()==0, ::cEstado, ::cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )





   ::oMtrInf:SetTotal( ::oFacPrvP:Lastrec() )

   ::CreateFilter( aItmRecPrv(), ::oFacPrvP:cAlias  )

RETURN .T.






static FUNCTION TFpgRPrv_lGenerate( ) ; local Self AS CLASS TFpgRPrv := QSelf() AS CLASS TFpgRPrv

   local cCodPgo  := ""
   local nTotDia  := 0
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf )   }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ]                      }, {|| "Proveedor : " + lTrim( ::cPrvOrg ) + " > " + lTrim( ::cPrvDes ) }, {|| "F. pago   : " + lTrim( ::cFpgDes ) + " > " + lTrim( ::cFpgHas ) } }

   ::oFacPrvP:OrdSetFocus( "DENTRADA" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oFacPrvP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvP:cFile ), ::oFacPrvP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oFacPrvP:GoTop()

   while !::lBreak .AND. !::oFacPrvP:Eof()

      cCodPgo  := cPgoFacPrv( ::oFacPrvP:cSerFac + Str( ::oFacPrvP:nNumFac ) + ::oFacPrvP:cSufFac, ::oFacPrvT:cAlias )






      if ::lIsValid()                                                                                   .AND. ::oFacPrvP:dPreCob >= ::dIniInf                                                                .AND. ::oFacPrvP:dPreCob <= ::dFinInf                                                                .AND. ( ::lAllFpg .OR. ( cCodPgo >= ::cFpgDes .AND. cCodPgo <= ::cFpgHas ) )                         .AND. ( ::lAllPrv .OR. ( ::oFacPrvP:cCodPrv >= ::cPrvOrg .AND. ::oFacPrvP:cCodPrv <= ::cPrvDes ) )   .AND. lChkSer( ::oFacPrvP:cSerFac, ::aSer )





         ::oDbf:Append()

         ::oDbf:cDocMov := ::oFacPrvP:cSerFac + "/" + Str( ::oFacPrvP:nNumFac ) + "/" + ::oFacPrvP:cSufFac + "/" + Str( ::oFacPrvP:nNumRec )
         ::oDbf:cCodPrv := ::oFacPrvP:cCodPrv
         if ::oDbfPrv:Seek( ::oFacPrvP:cCodPrv )
            ::oDbf:cNomPrv := ::oDbfPrv:Titulo
            ::oDbf:cNifPrv := ::oDbfPrv:Nif
            ::oDbf:cDomPrv := ::oDbfPrv:Domicilio
            ::oDbf:cPobPrv := ::oDbfPrv:Poblacion
            ::oDbf:cProPrv := ::oDbfPrv:Provincia
            ::oDbf:cCdpPrv := ::oDbfPrv:CodPostal
            ::oDbf:cTlfPrv := ::oDbfPrv:Telefono
         end
         ::oDbf:dFecMov := ::oFacPrvP:dPreCob
         ::oDbf:dFecCob := ::oFacPrvP:dEntrada
         ::oDbf:nTotDoc := nTotRecPrv( ::oFacPrvP:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
         ::oDbf:nTotFac := nTotFacPrv( ::oFacPrvP:cSerFac + Str( ::oFacPrvP:nNumFac ) + ::oFacPrvP:cSufFac, ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacPrvP:cAlias )
         ::oDbf:nTotCob := nPagFacPrv( ::oFacPrvP:cSerFac + Str( ::oFacPrvP:nNumFac ) + ::oFacPrvP:cSufFac, ::oFacPrvP:cAlias )
         ::oDbf:nTotPen := ::oDbf:nTotFac - ::oDbf:nTotCob
         ::oDbf:cBanco  := ::oFacPrvP:cBncPrv
         ::oDbf:cCuenta := ::oFacPrvP:cEntPrv + "-" + ::oFacPrvP:cSucPrv + "-" + ::oFacPrvP:cDigPrv + "-" + ::oFacPrvP:cCtaPrv

         ::oDbf:cCodPgo := cCodPgo
         ::oDbf:cNomPgo := cNbrFPago( cCodPgo, ::oDbfFpg )

         ::oDbf:Save()

      end

      ::oFacPrvP:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvP:OrdKeyNo() )

   end

   ::oFacPrvP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvP:cFile ) )

   ::oMtrInf:AutoInc( ::oFacPrvP:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TFpgRPrv_lIsValid( ) ; local Self AS CLASS TFpgRPrv := QSelf() AS CLASS TFpgRPrv

   local lRet  := .T.

   do case
      case ::oEstado:nAt == 1
         lRet  := !::oFacPrvP:lCobrado
      case ::oEstado:nAt == 2
         lRet  := ::oFacPrvP:lCobrado
      case ::oEstado:nAt == 3
         lRet  := .T.
   end

RETURN ( lRet )
