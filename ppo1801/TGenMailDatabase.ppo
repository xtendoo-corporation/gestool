#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\mail\TGenMailDatabase.prg"
_HB_CLASS TGenMailingDatabase ; function TGenMailingDatabase ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TGenMailingDatabase", iif( .T., { @TGenMailing() }, { @HBObject() } ), @TGenMailingDatabase() ) ) ;

   _HB_MEMBER { oFilter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFilter"}, .F. )

   _HB_MEMBER { oBrwDatabase } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwDatabase"}, .F. )

   _HB_MEMBER { oBntCreateFilter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBntCreateFilter"}, .F. )
   _HB_MEMBER { oBntQuitFilter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBntQuitFilter"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TGenMailingDatabase_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER End(); oClass:AddMethod( "End", @TGenMailingDatabase_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER databaseDialog(); oClass:AddMethod( "databaseDialog", @TGenMailingDatabase_databaseDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER { oOrderDatabase } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOrderDatabase"}, .F. )
   _HB_MEMBER { cOrderDatabase } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOrderDatabase"}, .F. )
   _HB_MEMBER { aOrderDatabase } ; oClass:AddMultiData(, { "Código", "Nombre", "Correo electrónico" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aOrderDatabase"}, .F. )

   _HB_MEMBER buildPageDatabase( oDlg); oClass:AddMethod( "buildPageDatabase", @TGenMailingDatabase_buildPageDatabase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER columnPageDatabase( oDlg); oClass:AddMethod( "columnPageDatabase", @TGenMailingDatabase_columnPageDatabase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER selectColumn( oCombo); oClass:AddMethod( "selectColumn", @TGenMailingDatabase_selectColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelMailing(); oClass:AddMethod( "SelMailing", @TGenMailingDatabase_SelMailing(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER SelAllMailing( lValue); oClass:AddMethod( "SelAllMailing", @TGenMailingDatabase_SelAllMailing(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getDatabaseList(); oClass:AddMethod( "getDatabaseList", @TGenMailingDatabase_getDatabaseList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER addDatabaseList(); oClass:AddInline( "addDatabaseList", {|Self | ( ( Self ) ), ( iif( ( ::getWorkArea() )->lMail, ::addSelectedList(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setItems(); oClass:AddInline( "setItems", {|Self, aItems | ( ( Self ) ), (  ::Super:setItems( aItems ), iif( !empty( ::oFilter ), ::oFilter:setFields( aItems ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dialogFilter(); oClass:AddMethod( "dialogFilter", @TGenMailingDatabase_dialogFilter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER buildFilter(); oClass:AddMethod( "buildFilter", @TGenMailingDatabase_buildFilter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER quitFilter(); oClass:AddMethod( "quitFilter", @TGenMailingDatabase_quitFilter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setOrderDatabase(); oClass:AddInline( "setOrderDatabase", {|Self, aOrderDatabase | ( ( Self ) ), ( ::aOrderDatabase := aOrderDatabase ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TGenMailingDatabase ;



static FUNCTION TGenMailingDatabase_New( nView ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   ::Super:New( nView )

   ::oFilter         := TFilterCreator():Init( Self )

Return ( Self )



static FUNCTION TGenMailingDatabase_databaseDialog( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   ::lPageDatabase   := .T.

   ::setMultiselect( .T. )

   ::aPages          := { "Select_Mail_Redactar", "Select_Mail_Registros", "Select_Mail_Proceso" }

   ::hideRecipients()

   ::Resource()

Return ( Self )



static FUNCTION TGenMailingDatabase_buildPageDatabase( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   local oDlg
   local oGetOrd
   local cGetOrd     := Space( 100 )
   local oCbxOrd
   local cCbxOrd

   oDlg              := ::oFld:aDialogs[ 2 ]

   ::cOrderDatabase  := ::aOrderDatabase[ 1 ]





   ::oBmpDatabase := TBitmap():ReDefine( 500, ::cBmpDatabase,, oDlg,,, .F., .F.,,, .F.,,, .T. )





   oGetOrd := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetOrd, cGetOrd:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "FIND",, )

   oGetOrd:bChange   := {| nKey, nFlags, oGet | AutoSeek( nKey, nFlags, oGet, ::oBrwDatabase, ::getWorkArea() ) }





   ::oOrderDatabase := TComboBox():ReDefine( 110, { | u | If( PCount()==0, ::cOrderDatabase, ::cOrderDatabase:= u ) }, ::aOrderDatabase, oDlg,,,,,,, .F.,,,,,,, "::oOrderDatabase",,,,,,, )

   ::oOrderDatabase:bChange   := {|| ::selectColumn() }




   TButton():ReDefine( 130, {||( ::selMailing() )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 140, {||( ::selAllMailing( .T. ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 150, {||( ::selAllMailing( .F. ) )}, oDlg,,, .F.,,,, .F. )




   ::oBntCreateFilter := TButton():ReDefine( 170, {||( ::dialogFilter() )}, oDlg,,, .F.,,,, .F. )

   ::oBntQuitFilter  := TBtnBmp():ReDefine( 180, "Del16", , , , , {|| ::quitFilter() }, oDlg, .F., , .F., "Quitar filtro" )



   ::oBrwDatabase                 := IXBrowse():New( oDlg )

   ::oBrwDatabase:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   ::oBrwDatabase:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   ::oBrwDatabase:cAlias          := ::getWorkArea()

   ::oBrwDatabase:nMarqueeStyle   := 5

   ::oBrwDatabase:CreateFromResource( 160 )

   ::oBrwDatabase:bLDblClick      := {|| ::SelMailing() }



   ::columnPageDatabase( oDlg )

Return ( Self )



static FUNCTION TGenMailingDatabase_columnPageDatabase( oDlg ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Se. seleccionado"
      :bStrData         := {|| "" }
      :bEditValue       := {|| ( ::getWorkArea() )->lMail }
      :nWidth           := 20
      :SetCheck( { "Sel16", "Nil16" } )
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Código"
      :cSortOrder       := "Cod"
      :bEditValue       := {|| ( ::getWorkArea() )->Cod }
      :nWidth           := 70
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oOrderDatabase:Set( oCol:cHeader ) }
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Nombre"
      :cSortOrder       := "Titulo"
      :bEditValue       := {|| ( ::getWorkArea() )->Titulo }
      :nWidth           := 300
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oOrderDatabase:Set( oCol:cHeader ) }
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Correo electrónico"
      :cSortOrder       := "cMeiInt"
      :bEditValue       := {|| ( ::getWorkArea() )->cMeiInt }
      :nWidth           := 260
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oOrderDatabase:Set( oCol:cHeader ) }
   end

Return ( Self )



static FUNCTION TGenMailingDatabase_selectColumn( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   local oCol
   local cOrd

   if empty(::oBrwDatabase)
      Return ( Self )
   end

   cOrd                       := ::oOrderDatabase:VarGet()

   with object ::oBrwDatabase

      for each oCol in :aCols
         if Equal( cOrd, oCol:cHeader )
            oCol:SetOrder()
         else
            oCol:cOrder       := " "
         end
      next

   end

   ::oBrwDatabase:Refresh()

Return ( Self )



static FUNCTION TGenMailingDatabase_getDatabaseList( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   local nRecord

   CursorWait()

   ::aMailingList    := {}

   nRecord           := ( ::getWorkArea() )->( recno() )
   ( ::getWorkArea() )->( dbeval( {|| ::addDatabaseList() } ) )
   ( ::getWorkArea() )->( dbgoto( nRecord ) )

   CursorArrow()

Return ( ::aMailingList )



static FUNCTION TGenMailingDatabase_End( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   if !empty(::oBmpDatabase)
      ::oBmpDatabase:end()
   end

   if !empty(::oFilter)
      ::oFilter:end()
   end

Return ( Self )



static FUNCTION TGenMailingDatabase_dialogFilter( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   ::oFilter:Dialog()

   if !empty( ::oFilter:cExpresionFilter )
      ::buildFilter()
   else
      ::quitFilter()
   end

Return ( Self )



static FUNCTION TGenMailingDatabase_buildFilter( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   createFastFilter( ::oFilter:cExpresionFilter, ::getWorkArea(), .F. )

   ::oBntCreateFilter:setText( "&Filtro activo" )

   ::oBntQuitFilter:Show()

   ::oBrwDatabase:Refresh()

Return ( Self )



static FUNCTION TGenMailingDatabase_quitFilter( ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   destroyFastFilter( ::getWorkArea() )

   ::oBntCreateFilter:setText( "&Filtro" )

   ::oBntQuitFilter:Hide()

   ::oBrwDatabase:Refresh()

Return ( Self )



static FUNCTION TGenMailingDatabase_SelMailing( lValue ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   If( lValue == nil, lValue := !( ::getWorkArea() )->lMail, ) ;

   if dbDialogLock( ::getWorkArea() )
      ( ::getWorkArea() )->lMail   := lValue
      ( ::getWorkArea() )->( dbUnlock() )
   end

   ::oBrwDatabase:Refresh()

Return ( Self )



static FUNCTION TGenMailingDatabase_SelAllMailing( lValue ) ; local Self AS CLASS TGenMailingDatabase := QSelf() AS CLASS TGenMailingDatabase

   local hStatus

   If( lValue == nil, lValue := .T., ) ;

   CursorWait()

   hStatus        := hGetStatus( ::getWorkArea(), 0 )
   ( ::getWorkArea() )->( dbeval( {|| ::selMailing( lValue ) } ) )
   hSetStatus( hStatus )

   CursorArrow()

Return ( Self )
