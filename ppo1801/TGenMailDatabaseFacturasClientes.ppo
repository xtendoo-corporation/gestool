#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\mail\TGenMailDatabaseFacturasClientes.prg"
_HB_CLASS TGenMailingDatabaseFacturasClientes ; function TGenMailingDatabaseFacturasClientes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TGenMailingDatabaseFacturasClientes", iif( .T., { @TGenMailingDatabase() }, { @HBObject() } ), @TGenMailingDatabaseFacturasClientes() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TGenMailingDatabaseFacturasClientes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER columnPageDatabase( oDlg); oClass:AddMethod( "columnPageDatabase", @TGenMailingDatabaseFacturasClientes_columnPageDatabase(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getAdjunto(); oClass:AddMethod( "getAdjunto", @TGenMailingDatabaseFacturasClientes_getAdjunto(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setFacturasClientesSend( hMail); oClass:AddMethod( "setFacturasClientesSend", @TGenMailingDatabaseFacturasClientes_setFacturasClientesSend(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CreateIndicencia(); oClass:AddMethod( "CreateIndicencia", @TGenMailingDatabaseFacturasClientes_CreateIndicencia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TGenMailingDatabaseFacturasClientes ;



static FUNCTION TGenMailingDatabaseFacturasClientes_New( nView ) ; local Self AS CLASS TGenMailingDatabaseFacturasClientes := QSelf() AS CLASS TGenMailingDatabaseFacturasClientes

   ::Create()

   ::Super:New( nView )

   ::setItems( aItmFacCli() )

   ::setWorkArea( D():FacturasClientes( nView ) )

   ::setIncidenciaWorkArea( D():FacturasClientesIncidencias( nView ) )

   ::setTypeDocument( "nFacCli" )

   ::setTypeFormat( "FC" )

   ::setFormatoDocumento( cFormatoFacturasClientes( ( D():FacturasClientes( ::nView ) )->cSerie ) )

   ::setOrderDatabase( { "Número", "Fecha", "Código", "Nombre" } )

   ::setBmpDatabase( "gc_document_text_user2_48" )

   ::setAsunto( "Envio de nuestra factura de cliente {Serie de la factura}/{Número de la factura}" )

   ::setBlockRecipients( {|| alltrim( retFld( ( D():FacturasClientes( ::nView ) )->cCodCli, D():Clientes( ::nView ), "cMeiInt", "Cod" ) ) } )

   ::setPostSend( {|hMail| ::setFacturasClientesSend( hMail ) } )

   ::setCargo( {|| D():FacturasClientesId( nView ) } )

   ( ::getWorkArea() )->( ordsetfocus( "lMail" ) )
   ( ::getWorkArea() )->( dbgotop() )

Return ( Self )



static FUNCTION TGenMailingDatabaseFacturasClientes_columnPageDatabase( oDlg ) ; local Self AS CLASS TGenMailingDatabaseFacturasClientes := QSelf() AS CLASS TGenMailingDatabaseFacturasClientes

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Se. seleccionado"
      :cSortOrder       := "lMail"
      :bStrData         := {|| "" }
      :bEditValue       := {|| ( ::getWorkArea() )->lMail }
      :nWidth           := 20
      :SetCheck( { "Sel16", "Nil16" } )
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Número"
      :cSortOrder       := "nNumFac"
      :bEditValue       := {|| ( ::getWorkArea() )->cSerie + "/" + alltrim( str( ( ::getWorkArea() )->nNumFac ) ) }
      :nWidth           := 80
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oOrderDatabase:Set( oCol:cHeader ) }
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Fecha"
      :cSortOrder       := "dFecDes"
      :bEditValue       := {|| dtoc( ( ::getWorkArea() )->dFecFac ) }
      :nWidth           := 80
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oOrderDatabase:Set( oCol:cHeader ) }
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Código"
      :cSortOrder       := "cCodCli"
      :bEditValue       := {|| ( ::getWorkArea() )->cCodCli }
      :nWidth           := 70
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oOrderDatabase:Set( oCol:cHeader ) }
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Nombre"
      :cSortOrder       := "cNomCli"
      :bEditValue       := {|| ( ::getWorkArea() )->cNomCli }
      :nWidth           := 300
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oOrderDatabase:Set( oCol:cHeader ) }
   end

   with object ( ::oBrwDatabase:AddCol() )
      :cHeader          := "Total"
      :bEditValue       := {|| ( ::getWorkArea() )->nTotFac }
      :cEditPicture     := cPorDiv()
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

Return ( Self )



static FUNCTION TGenMailingDatabaseFacturasClientes_setFacturasClientesSend( hMail ) ; local Self AS CLASS TGenMailingDatabaseFacturasClientes := QSelf() AS CLASS TGenMailingDatabaseFacturasClientes

   local idFactura

   if !hhaskey( hMail, "cargo" )
      Return .F.
   end

   idFactura         := hGet( hMail, "cargo" )

   if dbSeekInOrd( idFactura, "nNumFac", D():FacturasClientes( ::nView ) )

      if ( D():FacturasClientes( ::nView ) )->( dbrlock() )
         ( D():FacturasClientes( ::nView ) )->lMail   := .F.
         ( D():FacturasClientes( ::nView ) )->dMail   := Date()
         ( D():FacturasClientes( ::nView ) )->tMail   := TimeToString()
         ( D():FacturasClientes( ::nView ) )->( dbunlock() )
      end

   end

Return ( .T. )



static FUNCTION TGenMailingDatabaseFacturasClientes_CreateIndicencia( Cargo ) ; local Self AS CLASS TGenMailingDatabaseFacturasClientes := QSelf() AS CLASS TGenMailingDatabaseFacturasClientes

   local cSerie
   local nNumero
   local cSufijo

   If( Cargo == nil, Cargo := ( ::getWorkArea() )->cSerie + Str( ( ::getWorkArea() )->nNumFac ) + ( ::getWorkArea() )->cSufFac, ) ;

   cSerie         := SubStr( Cargo, 1, 1 )
   nNumero        := Val( SubStr( Cargo, 2, 9 ) )
   cSufijo        := SubStr( Cargo, 11, 2 )

   ( ::getIncidenciaWorkArea() )->( dbAppend() )
   ( ::getIncidenciaWorkArea() )->cSerie     := cSerie
   ( ::getIncidenciaWorkArea() )->nNumFac    := nNumero
   ( ::getIncidenciaWorkArea() )->cSufFac    := cSufijo
   ( ::getIncidenciaWorkArea() )->dFecInc    := GetSysDate()





   ( ::getIncidenciaWorkArea() )->mDesInc    := "Factura " + cSerie + "/" + AllTrim( Str( nNumero ) ) + "/" + cSufijo + " enviada por correo." +  Chr(13)+Chr(10) + "Destinatario: " + AllTrim( ::cRecipients ) +  Chr(13)+Chr(10) + "Usuario: " + AllTrim( Auth():Codigo() ) + " - " + AllTrim( UsuariosModel():getNombre( Auth():Codigo() ) ) +  Chr(13)+Chr(10) + "Fecha: " + AllTrim( dToc( GetSysDate() ) ) +  Chr(13)+Chr(10) + "Hora: " + AllTrim( GetSysTime() ) +  Chr(13)+Chr(10) + "Adjuntos: " + AllTrim( ::cGetAdjunto )
   ( ::getIncidenciaWorkArea() )->lListo     := .T.
   ( ::getIncidenciaWorkArea() )->lAviso     := .F.
   ( ::getIncidenciaWorkArea() )->( dbUnlock() )

Return ( Self )



static FUNCTION TGenMailingDatabaseFacturasClientes_getAdjunto( ) ; local Self AS CLASS TGenMailingDatabaseFacturasClientes := QSelf() AS CLASS TGenMailingDatabaseFacturasClientes

   if !Empty( ::cGetAdjunto )
      Return ( AllTrim( ::cGetAdjunto ) + ";" + AllTrim( mailReportFacCli( ::cFormatoDocumento ) ) )
   end

Return ( mailReportFacCli( ::cFormatoDocumento ) )
