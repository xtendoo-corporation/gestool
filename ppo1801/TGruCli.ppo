#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TGruCli.prg"
_HB_CLASS TGruCli ; function TGruCli ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TGruCli", iif( .T., { @TInfGen() }, { @HBObject() } ), @TGruCli() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfCli } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCli"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TGruCli_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TGruCli_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TGruCli_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TGruCli_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TGruCli_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TGruCli ;



static FUNCTION TGruCli_create( ) ; local Self AS CLASS TGruCli := QSelf() AS CLASS TGruCli

   ::AddField( "cGrpCli", "C",  4, 0, {|| "@!" },        "Cod. grupo",    .F., "Cod. grupo"        ,  5, .F. )
   ::AddField( "cNomGrp", "C", 20, 0, {|| "@!" },        "Nom. grupo",    .F., "Nom. grupo"        , 20, .F. )
   ::FldCliente()

   ::AddTmpIndex( "CGRPCLI", "CGRPCLI + CCODCLI" )

   ::AddGroup( {|| ::oDbf:cGrpCli }, {|| "Grupo de cliente  : " + Rtrim( ::oDbf:cGrpCli ) + "-" + Rtrim( ::oDbf:cNomGrp ) }, {||"Total grupo de cliente..."} )

   ::lDefSerInf := .F.
   ::lDefFecInf := .F.
   ::lDefDivInf := .F.

RETURN ( self )



static FUNCTION TGruCli_OpenFiles( ) ; local Self AS CLASS TGruCli := QSelf() AS CLASS TGruCli

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TGruCli_CloseFiles( ) ; local Self AS CLASS TGruCli := QSelf() AS CLASS TGruCli

   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

   ::oDbfCli := nil

RETURN ( Self )



static FUNCTION TGruCli_lResource( cFld ) ; local Self AS CLASS TGruCli := QSelf() AS CLASS TGruCli

   if !::StdResource( "INF_GRU_CLI" )
      return .F.
   end





   if !::oDefGrpCli( 70, 80, 90, 100, 150 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oDbfCli:Lastrec() )

   ::CreateFilter( aItmCli(), ::oDbfCli:cAlias )

RETURN .T.






static FUNCTION TGruCli_lGenerate( ) ; local Self AS CLASS TGruCli := QSelf() AS CLASS TGruCli

   local cExpCli  := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha         : " + Dtoc( Date() ) }, {|| "Grp. clientes : " + if( ::lGrpAll, "Todos", AllTrim( ::cGrpOrg ) + " > " + AllTrim( ::cGrpDes ) ) } }

   ::oDbfCli:OrdSetFocus( "Cod" )

   if !::lGrpAll
      cExpCli      := 'cCodGrp >= "' + Rtrim( ::cGrpOrg ) + '" .and. cCodGrp <= "' + Rtrim( ::cGrpDes ) + '"'
   else
      cExpCli      := ".t."
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpCli      += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oDbfCli:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ), ::oDbfCli:OrdKey(), ( cExpCli ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oDbfCli:OrdKeyCount() )





   ::oDbfCli:GoTop()

   while !::lBreak .AND. !::oDbfCli:Eof()

      ::oDbf:Append()

      ::oDbf:cGrpCli  := ::oDbfCli:cCodGrp
      ::oDbf:cNomGrp  := oRetFld( ::oDbfCli:cCodGrp, ::oGrpCli:oDbf )
      ::oDbf:cCodCli  := ::oDbfCli:Cod
      ::oDbf:cNomCli  := ::oDbfCli:Titulo
      ::oDbf:cNifCli  := ::oDbfCli:Nif
      ::oDbf:cDomCli  := ::oDbfCli:Domicilio
      ::oDbf:cPobCli  := ::oDbfCli:Poblacion
      ::oDbf:cProCli  := ::oDbfCli:Provincia
      ::oDbf:cCdpCli  := ::oDbfCli:CodPostal
      ::oDbf:cTlfCli  := ::oDbfCli:Telefono

      ::oDbf:Save()

      ::oDbfCli:Skip()

      ::oMtrInf:AutoInc( ::oDbfCli:OrdKeyNo() )

   end

   ::oDbfCli:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfCli:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
