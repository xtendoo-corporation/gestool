#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TGruFam.prg"
_HB_CLASS TGruFam ; function TGruFam ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TGruFam", iif( .T., { @TInfGen() }, { @HBObject() } ), @TGruFam() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfFam } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfFam"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TGruFam_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TGruFam_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TGruFam_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TGruFam_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TGruFam_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TGruFam ;



static FUNCTION TGruFam_create( ) ; local Self AS CLASS TGruFam := QSelf() AS CLASS TGruFam

   ::AddField( "cGrpFam", "C",  3, 0, {|| "@!" },        "Grp. grupo",    .F., "Cod. grupo"        ,  5, .F. )
   ::AddField( "cNomGrp", "C", 20, 0, {|| "@!" },        "Nom. grupo",    .F., "Nom. grupo"        , 20, .F. )
   ::AddField( "cCodFam", "C", 16, 0, {|| "@!" },        "Familia",       .T., "Familia"           , 15, .F. )
   ::AddField( "cNomFam", "C", 40, 0, {|| "@!" },        "Nom. fam.",     .T., "Nombre familia"    , 50, .F. )

   ::AddTmpIndex( "CGRPFAM", "CGRPFAM + CCODFAM" )

   ::AddGroup( {|| ::oDbf:cGrpFam }, {|| "Grupo de familia  : " + Rtrim( ::oDbf:cGrpFam ) + "-" + Rtrim( ::oDbf:cNomGrp ) }, {||"Total grupo de familia..."} )

   ::lDefSerInf := .F.
   ::lDefFecInf := .F.
   ::lDefDivInf := .F.

RETURN ( self )



static FUNCTION TGruFam_OpenFiles( ) ; local Self AS CLASS TGruFam := QSelf() AS CLASS TGruFam

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfFam := DbfServer( "FAMILIAS.DBF", ):NewOpen( "FAMILIAS.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfFam:AddBag( "FAMILIAS.CDX" ) ; ::oDbfFam:AddBag( ) ; ::oDbfFam:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TGruFam_CloseFiles( ) ; local Self AS CLASS TGruFam := QSelf() AS CLASS TGruFam

   if !Empty( ::oDbfFam ) .AND. ::oDbfFam:Used()
      ::oDbfFam:End()
   end

   ::oDbfFam := nil

RETURN ( Self )



static FUNCTION TGruFam_lResource( cFld ) ; local Self AS CLASS TGruFam := QSelf() AS CLASS TGruFam

   if !::StdResource( "INF_GRU_FAM" )
      return .F.
   end

   if !::oDefGrfInf( 70, 80, 90, 100, 150 )
      return .F.
   end

   ::oMtrInf:SetTotal( ::oDbfFam:Lastrec() )

   ::CreateFilter( aItmFam(), ::oDbfFam:cAlias )

RETURN .T.






static FUNCTION TGruFam_lGenerate( ) ; local Self AS CLASS TGruFam := QSelf() AS CLASS TGruFam

   local cExpFam  := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha         : " + Dtoc( Date() ) }, {|| "Grp. familias : " + if( ::lAllGrp, "Todos", AllTrim( ::cGruFamOrg ) + " > " + AllTrim( ::cGruFamDes ) ) } }

   ::oDbfFam:OrdSetFocus( "cCodFam" )

   if !::lAllGrp
      cExpFam      += 'cCodGrp >= "' + Rtrim( ::cGruFamOrg ) + '" .and. cCodGrp <= "' + Rtrim( ::cGruFamDes ) + '"'
   else
      cExpFam      += ".t."
   end


   if !Empty( ::oFilter:cExpresionFilter )
      cExpFam      += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oDbfFam:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfFam:cFile ), ::oDbfFam:OrdKey(), ( cExpFam ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oDbfFam:OrdKeyCount() )





   ::oDbfFam:GoTop()

   while !::lBreak .AND. !::oDbfFam:Eof()

      ::oDbf:Append()

      ::oDbf:cGrpFam  := ::oDbfFam:cCodGrp
      ::oDbf:cNomGrp  := oRetFld( ::oDbfFam:cCodGrp, ::oGruFam:oDbf )
      ::oDbf:cCodFam  := ::oDbfFam:cCodFam
      ::oDbf:cNomFam  := ::oDbfFam:cNomFam

      ::oDbf:Save()

      ::oDbfFam:Skip()

      ::oMtrInf:AutoInc( ::oDbfFam:OrdKeyNo() )

   end

   ::oDbfFam:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfFam:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfFam:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
