#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TINFARTTIP.prg"
_HB_CLASS TInfArtTip ; function TInfArtTip ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfArtTip", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfArtTip() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfKit } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfKit"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oCmbArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCmbArt"}, .F. )
   _HB_MEMBER { AS LOGIC lExcPre } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcPre"}, .F. )
   _HB_MEMBER { AS LOGIC lExcObsoletos } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcObsoletos"}, .F. )
   _HB_MEMBER { AS LOGIC lActCos } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lActCos"}, .F. )
   _HB_MEMBER { AS ARRAY aCmbArt } ; oClass:AddMultiData( "ARRAY", { "Código", "Nombre" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCmbArt"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfArtTip_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfArtTip_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfArtTip_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfArtTip_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfArtTip_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfArtTip ;



static FUNCTION TInfArtTip_Create( ) ; local Self AS CLASS TInfArtTip := QSelf() AS CLASS TInfArtTip

   ::AddField( "cCodTip", "C",  4, 0, {|| "@!" },     "Cod. Tip.",   .F., "Código del tipo de artículo",     8, .F. )
   ::AddField( "cNomTip", "C", 35, 0, {|| "@!" },     "Nom. Tip.",   .F., "Nombre del tipo de artículo",    20, .F. )
   ::AddField( "Codigo",  "C", 28, 0, {|| "@!" },     "Código",      .T., "Código del artículo",            14, .F. )
   ::AddField( "CodeBar", "C", 20, 0, {|| "@!" },     "Cód. barras", .T., "Código de barras",               14, .F. )
   ::AddField( "ImgBar",  "C", 20, 0, {|| "" },       "",            .F., "Imagen del código de barras",    20, .F., {|| 4 } )
   ::AddField( "Nombre",  "C",100, 0, {|| "" },       "Artículo",    .T., "Nombre del artículo",            30, .F. )
   ::AddField( "cDesTik", "C", 20, 0, {|| "" },       "Des. tiket",  .F., "Descripción para tiket",         14, .F. )
   ::AddField( "pCosto",  "N", 15, 6, {|| cPinDiv()}, "Costo" ,      .F., "Precio de costo",                10, .F. )
   ::AddField( "pVprec",  "N", 15, 6, {|| PicOut() }, "P.V.R.",      .F., "Precio venta recomendado" ,      10, .F. )
   ::AddField( "Benef1",  "N",  6, 2, {|| "@EZ 999.99" },"%Bnf. 1",  .F., "Porcentaje beneficio precio 1" ,  4, .F. )
   ::AddField( "Benef2",  "N",  6, 2, {|| "@EZ 999.99" },"%Bnf. 2" , .F., "Porcentaje beneficio precio 2" ,  4, .F. )
   ::AddField( "Benef3",  "N",  6, 2, {|| "@EZ 999.99" },"%Bnf. 3" , .F., "Porcentaje beneficio precio 3" ,  4, .F. )
   ::AddField( "Benef4",  "N",  6, 2, {|| "@EZ 999.99" },"%Bnf. 4" , .F., "Porcentaje beneficio precio 4" ,  4, .F. )
   ::AddField( "Benef5",  "N",  6, 2, {|| "@EZ 999.99" },"%Bnf. 5" , .F., "Porcentaje beneficio precio 5" ,  4, .F. )
   ::AddField( "Benef6",  "N",  6, 2, {|| "@EZ 999.99" },"%Bnf. 6" , .F., "Porcentaje beneficio precio 6" ,  4, .F. )
   ::AddField( "pVenta1", "N", 15, 6, {|| PicOut() },  "PVP 1" ,     .T., "Precio de venta precio 1" ,      10, .F. )
   ::AddField( "pVenta2", "N", 15, 6, {|| PicOut() },  "PVP 2" ,     .F., "Precio de venta precio 2" ,      10, .F. )
   ::AddField( "pVenta3", "N", 15, 6, {|| PicOut() },  "PVP 3" ,     .F., "Precio de venta precio 3" ,      10, .F. )
   ::AddField( "pVenta4", "N", 15, 6, {|| PicOut() },  "PVP 4" ,     .F., "Precio de venta precio 4" ,      10, .F. )
   ::AddField( "pVenta5", "N", 15, 6, {|| PicOut() },  "PVP 5" ,     .F., "Precio de venta precio 5" ,      10, .F. )
   ::AddField( "pVenta6", "N", 15, 6, {|| PicOut() },  "PVP 6" ,     .F., "Precio de venta precio 6" ,      10, .F. )
   ::AddField( "pVtaIva1","N", 15, 6, {|| PicOut() },  "PVP 1 I.I." ,.T., "Precio de venta 1 " + cImp() + " incluido", 10, .F. )
   ::AddField( "pVtaIva2","N", 15, 6, {|| PicOut() },  "PVP 2 I.I." ,.F., "Precio de venta 2 " + cImp() + " incluido", 10, .F. )
   ::AddField( "pVtaIva3","N", 15, 6, {|| PicOut() },  "PVP 3 I.I." ,.F., "Precio de venta 3 " + cImp() + " incluido", 10, .F. )
   ::AddField( "pVtaIva4","N", 15, 6, {|| PicOut() },  "PVP 4 I.I." ,.F., "Precio de venta 4 " + cImp() + " incluido", 10, .F. )
   ::AddField( "pVtaIva5","N", 15, 6, {|| PicOut() },  "PVP 5 I.I." ,.F., "Precio de venta 5 " + cImp() + " incluido", 10, .F. )
   ::AddField( "pVtaIva6","N", 15, 6, {|| PicOut() },  "PVP 6 I.I." ,.F., "Precio de venta 6 " + cImp() + " incluido", 10, .F. )
   ::AddField( "nPntVer1","N", 15, 6, {|| PicOut() },  "P.V.",       .F., "Contribución punto verde" ,      10, .F. )
   ::AddField( "nPnvIva1","N", 15, 6, {|| PicOut() },  "P.V. I.I.",  .F., "Contribución punto verde " + cImp() + " inc.", 10, .F. )
   ::AddField( "nIva",    "N",  5, 2, {|| "@EZ 99.9" },"%" + cImp(), .T., "Tipo de " + cImp(),                  6, .F. )

   ::AddTmpIndex( "CodTip", "cCodTip + Codigo" )
   ::AddTmpIndex( "NomTip", "cCodTip + Nombre" )

   ::AddGroup( {|| ::oDbf:cCodTip }, {|| "Tipo de artículo : " + Rtrim( ::oDbf:cCodTip ) + "-" + Rtrim( ::oDbf:cNomTip ) }, {|| "Total tipo..." } )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.

RETURN ( Self )



static FUNCTION TInfArtTip_OpenFiles( ) ; local Self AS CLASS TInfArtTip := QSelf() AS CLASS TInfArtTip

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfKit := DbfServer( "ARTKIT.DBF", ):NewOpen( "ARTKIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfKit:AddBag( "ARTKIT.CDX" ) ; ::oDbfKit:AddBag( ) ; ::oDbfKit:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfArtTip_CloseFiles( ) ; local Self AS CLASS TInfArtTip := QSelf() AS CLASS TInfArtTip

   if !Empty( ::oDbfKit ) .AND. ::oDbfKit:Used()
      ::oDbfKit:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oDbfKit   := nil
   ::oDbfIva   := nil

RETURN ( Self )



static FUNCTION TInfArtTip_lResource( cFld ) ; local Self AS CLASS TInfArtTip := QSelf() AS CLASS TInfArtTip

   local cCmbArt   := "Código"


   if !::StdResource( "INF_ART03" )
      return .F.
   end


   if !::oDefTipInf( 70, 80, 90, 100, 600 )
      return .F.
   end


   if !::lDefArtInf( 110, 120, 130, 140, 800 )
      return .F.
   end




   TCheckBox():ReDefine( 190, { | u | If( PCount()==0, ::lExcPre, ::lExcPre:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )




   TCheckBox():ReDefine( 210, { | u | If( PCount()==0, ::lExcObsoletos, ::lExcObsoletos:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   ::oCmbArt := TComboBox():ReDefine( 220, { | u | If( PCount()==0, cCmbArt, cCmbArt:= u ) }, ::aCmbArt, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oCmbArt",,,,,,, )


   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )


   ::CreateFilter( aItmArt(), ::oDbfArt:cAlias )

RETURN .T.






static FUNCTION TInfArtTip_lGenerate( ) ; local Self AS CLASS TInfArtTip := QSelf() AS CLASS TInfArtTip

   local cExpArt  := ".t."

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader      := {  {|| "Fecha         : " + Dtoc( Date() ) }, {|| "Tipo artículo : " + if( ::lAllTip, "Todos", AllTrim( ::cTipOrg ) + " > " + AllTrim( ::cTipDes ) ) }, {|| "Artículos     : " + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes ) ) }, {|| "Ordenado por  : " + ::aCmbArt[ ::oCmbArt:nAt ] } }

   ::oDbfArt:OrdSetFocus( "Codigo" )

   if !::lAllArt
      cExpArt     += ' .and. Codigo >= "' + ::cArtOrg + '" .and. Codigo <= "' + ::cArtDes + '"'
   end

   if !::lAllTip
      cExpArt     += ' .and. cCodTip >= "' + ::cTipOrg + '" .and. cCodTip <= "' + ::cTipDes + '"'
   end

   if ::lExcObsoletos
      cExpArt     += " .and. !lObs"
   end

   if ::lExcPre
      cExpArt     += " .and. ( pVenta1 != 0 .or. pVenta2 != 0 .or. pVenta3 != 0 .or. pVenta4 != 0 .or. pVenta5 != 0 .or. pVenta6 != 0 )"
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpArt     += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oDbfArt:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ), ::oDbfArt:OrdKey(), ( cExpArt ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oDbfArt:OrdKeyCount() )

   ::oDbfArt:GoTop()

   while !::lBreak .AND. !::oDbfArt:Eof()

      ::oDbf:Append()
      ::oDbf:Codigo     := ::oDbfArt:Codigo
      ::oDbf:CodeBar    := ::oDbfArt:CodeBar
      ::oDbf:ImgBar     := cEan13( Rtrim( ::oDbfArt:CodeBar ) )
      ::oDbf:Nombre     := ::oDbfArt:Nombre
      ::oDbf:cDesTik    := ::oDbfArt:cDesTik
      ::oDbf:pCosto     := nCosto( nil, ::oDbfArt:cAlias, ::oDbfKit:cAlias )
      ::oDbf:pVpRec     := ::oDbfArt:pVpRec
      ::oDbf:Benef1     := ::oDbfArt:Benef1
      ::oDbf:Benef2     := ::oDbfArt:Benef2
      ::oDbf:Benef3     := ::oDbfArt:Benef3
      ::oDbf:Benef4     := ::oDbfArt:Benef4
      ::oDbf:Benef5     := ::oDbfArt:Benef5
      ::oDbf:Benef6     := ::oDbfArt:Benef6
      ::oDbf:pVenta1    := ::oDbfArt:pVenta1
      ::oDbf:pVenta2    := ::oDbfArt:pVenta2
      ::oDbf:pVenta3    := ::oDbfArt:pVenta3
      ::oDbf:pVenta4    := ::oDbfArt:pVenta4
      ::oDbf:pVenta5    := ::oDbfArt:pVenta5
      ::oDbf:pVenta6    := ::oDbfArt:pVenta6
      ::oDbf:pVtaIva1   := ::oDbfArt:pVtaIva1
      ::oDbf:pVtaIva2   := ::oDbfArt:pVtaIva2
      ::oDbf:pVtaIva3   := ::oDbfArt:pVtaIva3
      ::oDbf:pVtaIva4   := ::oDbfArt:pVtaIva4
      ::oDbf:pVtaIva5   := ::oDbfArt:pVtaIva5
      ::oDbf:pVtaIva6   := ::oDbfArt:pVtaIva6
      ::oDbf:nPntVer1   := ::oDbfArt:nPntVer1
      ::oDbf:nPnvIva1   := ::oDbfArt:nPnvIva1
      ::oDbf:nIva       := nIva( ::oDbfIva, ::oDbfArt:TipoIva )
      ::oDbf:cCodTip    := ::oDbfArt:cCodTip
      ::oDbf:cNomTip    := oRetFld( ::oDbfArt:cCodTip, ::oTipArt:oDbf, "cNomTip" )

      ::oDbf:Save()

      ::oDbfArt:Skip()

      ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyNo() )

   end

   ::oDbfArt:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfArt:LastRec() )

   if ::oDbf:RecCount() > 0
      ::oDbf:OrdSetFocus( ::oCmbArt:nAt )
   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
