#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TInfAlbPdt.prg"
_HB_CLASS TInfAlbPdt ; function TInfAlbPdt ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfAlbPdt", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfAlbPdt() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT cEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "No facturados", "Facturados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oPagos } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPagos"}, .F. )
   _HB_MEMBER { AS OBJECT cPagos } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPagos"}, .F. )
   _HB_MEMBER { AS ARRAY aPagos } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Pagados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aPagos"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfAlbPdt_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfAlbPdt_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfAlbPdt_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfAlbPdt_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfAlbPdt_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfAlbPdt ;



static FUNCTION TInfAlbPdt_Create( ) ; local Self AS CLASS TInfAlbPdt := QSelf() AS CLASS TInfAlbPdt

   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },                 "Doc.",           .T., "Documento",     14 )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },                 "Fecha",          .T., "Fecha",         10 )
   ::FldCliente()
   ::AddField( "nTotAlb", "N", 16, 6, {|| ::cPicOut },            "Importe",        .T., "Neto",          15, .T. )
   ::AddField( "nTotEnt", "N", 16, 6, {|| ::cPicOut },            "Entregado",      .T., "Punto verde",   15, .T. )
   ::AddField( "nTotPdt", "N", 16, 6, {|| ::cPicOut },            "Pendiente",      .T., "Punto verde",   15, .T. )

   ::AddTmpIndex( "cDocMov", "cDocMov" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( ::oDbf:cNomCli ) }, {||"Total cliente..."} )

RETURN ( self )



static FUNCTION TInfAlbPdt_OpenFiles( ) ; local Self AS CLASS TInfAlbPdt := QSelf() AS CLASS TInfAlbPdt

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oAlbCliP := DbfServer( "ALBCLIP.DBF", ):NewOpen( "ALBCLIP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliP:AddBag( "ALBCLIP.CDX" ) ; ::oAlbCliP:AddBag( ) ; ::oAlbCliP:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfAlbPdt_CloseFiles( ) ; local Self AS CLASS TInfAlbPdt := QSelf() AS CLASS TInfAlbPdt

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oAlbCliP ) .AND. ::oAlbCliP:Used()
      ::oAlbCliP:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oAlbCliP := nil
   ::oDbfIva  := nil

RETURN ( Self )



static FUNCTION TInfAlbPdt_lResource( cFld ) ; local Self AS CLASS TInfAlbPdt := QSelf() AS CLASS TInfAlbPdt

   ::cEstado   := "No facturados"
   ::cPagos    := "Pendientes"

   if !::StdResource( "INFALBPDT" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 160 )
      return .F.
   end





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, ::cEstado, ::cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )





   ::oPagos := TComboBox():ReDefine( 219, { | u | If( PCount()==0, ::cPagos, ::cPagos:= u ) }, ::aPagos, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oPagos",,,,,,, )

   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::CreateFilter( aItmAlbCli(), ::oAlbCliT:cAlias )

RETURN .T.






static FUNCTION TInfAlbPdt_lGenerate( ) ; local Self AS CLASS TInfAlbPdt := QSelf() AS CLASS TInfAlbPdt

   local cExpHead     := ""
   local nTotAlb      := 0
   local nTotEnt      := 0

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente   : " + if( ::lAllCli, "Todos", AllTrim ( ::cCliOrg ) + " > " + AllTrim ( ::cCliDes ) ) } }

   ::oAlbCliT:OrdSetFocus( "dFecAlb" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := 'nFacturado < 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'nFacturado == 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )

   ::oAlbCliT:GoTop()

   while !::lBreak .AND. !::oAlbCliT:Eof()

      if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )

         nTotAlb        := nTotAlbCli( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb, ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias )
         nTotEnt        := nPagAlbCli( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb, ::oAlbCliP:cAlias, ::oDbfDiv:cAlias )

         do case
            case ::oPagos:nAt == 1

               if nTotAlb - nTotEnt > 0

                  ::oDbf:Append()

                  ::oDbf:cCodCli := ::oAlbCliT:cCodCli
                  ::oDbf:cNomCli := ::oAlbCliT:cNomCli
                  ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )
                  ::oDbf:dFecMov := ::oAlbCliT:dFecAlb
                  ::oDbf:cDocMov := AllTrim( ::oAlbCliT:cSerAlb ) + "/" + AllTrim( Str( ::oAlbCliT:nNumAlb ) ) + "/" + AllTrim( ::oAlbCliT:cSufAlb )
                  ::oDbf:nTotAlb := nTotAlb
                  ::oDbf:nTotEnt := nTotEnt
                  ::oDbf:nTotPdt := nTotAlb - nTotEnt

                  ::oDbf:Save()

               end

            case ::oPagos:nAt == 2

               if nTotAlb - nTotEnt == 0

                  ::oDbf:Append()

                  ::oDbf:cCodCli := ::oAlbCliT:cCodCli
                  ::oDbf:cNomCli := ::oAlbCliT:cNomCli
                  ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )
                  ::oDbf:dFecMov := ::oAlbCliT:dFecAlb
                  ::oDbf:cDocMov := AllTrim( ::oAlbCliT:cSerAlb ) + "/" + AllTrim( Str( ::oAlbCliT:nNumAlb ) ) + "/" + AllTrim( ::oAlbCliT:cSufAlb )
                  ::oDbf:nTotAlb := nTotAlb
                  ::oDbf:nTotEnt := nTotEnt
                  ::oDbf:nTotPdt := nTotAlb - nTotEnt

                  ::oDbf:Save()

               end

            case ::oPagos:nAt == 3

               ::oDbf:Append()

               ::oDbf:cCodCli := ::oAlbCliT:cCodCli
               ::oDbf:cNomCli := ::oAlbCliT:cNomCli
               ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )
               ::oDbf:dFecMov := ::oAlbCliT:dFecAlb
               ::oDbf:cDocMov := AllTrim( ::oAlbCliT:cSerAlb ) + "/" + AllTrim( Str( ::oAlbCliT:nNumAlb ) ) + "/" + AllTrim( ::oAlbCliT:cSufAlb )
               ::oDbf:nTotAlb := nTotAlb
               ::oDbf:nTotEnt := nTotEnt
               ::oDbf:nTotPdt := nTotAlb - nTotEnt

               ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc()

      ::oAlbCliT:Skip()

   end

   ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
