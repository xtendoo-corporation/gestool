#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfCObrAlb.prg"
_HB_CLASS TInfCliObr ; function TInfCliObr ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfCliObr", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfCliObr() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Facturado", "No facturado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfCliObr_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfCliObr_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfCliObr_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfCliObr_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfCliObr_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfCliObr ;



static FUNCTION TInfCliObr_Create( ) ; local Self AS CLASS TInfCliObr := QSelf() AS CLASS TInfCliObr

   ::AddField ( "cCodObr", "C", 18, 0, {|| "@!" },         "Dirección",                      .F., "Código dirección",                14 )
   ::AddField ( "cNomObr", "C", 50, 0, {|| "@!" },         "Nom.obra",                  .F., "Nombre dirección",                20 )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },         "Cod. artículo",             .T., "Código artículo",            14 )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },         "Descripción",               .T., "Nombre artículo",            32 )
   ::FldPropiedades()
   ::AddField ( "cCodCli", "C", 12, 0, {|| "@!" },         "Cód. cli.",                 .F., "Cod. Cliente",                8 )
   ::AddField ( "cNomCli", "C", 50, 0, {|| "@!" },         "Cliente",                   .F., "Nom. Cliente",               30 )
   ::AddField ( "cNifCli", "C", 15, 0, {|| "@!" },         "Nif",                       .F., "Nif",                        12 )
   ::AddField ( "cDomCli", "C", 35, 0, {|| "@!" },         "Domicilio",                 .F., "Domicilio",                  20 )
   ::AddField ( "cPobCli", "C", 25, 0, {|| "@!" },         "Población",                 .F., "Población",                  25 )
   ::AddField ( "cProCli", "C", 20, 0, {|| "@!" },         "Provincia",                 .F., "Provincia",                  20 )
   ::AddField ( "cCdpCli", "C",  7, 0, {|| "@!" },         "Cod. Postal",               .F., "Cod. Postal",                 7 )
   ::AddField ( "cTlfCli", "C", 12, 0, {|| "@!" },         "Teléfono",                  .F., "Teléfono",                   12 )
   ::AddField ( "cCodAlm", "C", 18, 0, {|| "@!" },         "Cod. Almacen",              .F., "Código almacén",             18 )
   ::AddField ( "cCodAge", "C", 18, 0, {|| "@!" },         "Cod. Agente",               .F., "Código agente",              18 )
   ::AddField ( "nNumCaj", "N", 16, 6, {|| MasUnd() },     cNombreCajas(),              .F., cNombreCajas(),               12 )
   ::AddField ( "nNumUnd", "N", 16, 6, {|| MasUnd() },     cNombreUnidades(),           .F., cNombreUnidades(),            12 )
   ::AddField ( "nTotUnd", "N", 16, 6, {|| MasUnd() },     "Tot. " + cNombreUnidades(), .T., "Total " + cNombreUnidades(), 12 )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicOut },    "Base",                      .T., "Base",                       12 )
   ::AddField ( "nIvaLin", "N", 16, 6, {|| ::cPicOut },    "Impuesto",                  .F., "Impuesto",                   12 )
   ::AddField ( "nTotLin", "N", 16, 6, {|| ::cPicOut },    "Total",                     .F., "Total",                      12 )
   ::AddField ( "cDocMov", "C", 14, 0, {|| "@!" },         "Documento",                 .T., "Documento",                  14 )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },         "Fecha",                     .T., "Fecha",                      10 )

   ::AddTmpIndex( "cCodCli", "cCodCli + cCodObr" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) }, {||"Total Cliente..."} )
   ::AddGroup( {|| ::oDbf:cCodCli + ::oDbf:cCodObr }, {|| "Obras  : " + Rtrim( ::oDbf:cCodObr ) + "-" + RTrim ( ::oDbf:CNOMOBR ) }, {||"Total Obras..."} )

RETURN ( Self )



static FUNCTION TInfCliObr_OpenFiles( ) ; local Self AS CLASS TInfCliObr := QSelf() AS CLASS TInfCliObr

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfCliObr_CloseFiles( ) ; local Self AS CLASS TInfCliObr := QSelf() AS CLASS TInfCliObr

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil

RETURN ( Self )



static FUNCTION TInfCliObr_lResource( cFld ) ; local Self AS CLASS TInfCliObr := QSelf() AS CLASS TInfCliObr

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN04" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end



   if !::oDefObrInf( 110, 120, 130, 140, 220 )
      return .F.
   end





   if !::lDefArtInf( 150, 160, 170, 180, 800 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDefExcInf( 200 )

   ::oDefExcImp( 210 )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmAlbCli(), ::oAlbCliT:cAlias )

RETURN .T.






static FUNCTION TInfCliObr_lGenerate( ) ; local Self AS CLASS TInfCliObr := QSelf() AS CLASS TInfCliObr

   local cExpHead := ""
   local cExpLine := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()






   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes  : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim (::cCliDes ) ) }, {|| "Obras     : " + if( ::lAllObr, "Todos", AllTrim( ::cObrOrg ) + " > " + AllTrim (::cObrDes ) ) }, {|| "Artículos : " + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim (::cArtDes ) ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] } }

   ::oAlbCliT:OrdSetFocus( "dFecAlb" )
   ::oAlbCliL:OrdSetFocus( "nNumAlb" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := 'nFacturado == 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'nFacturado < 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !::lAllObr
      cExpHead       += ' .and. cCodObr >= "' + Rtrim( ::cObrOrg ) + '" .and. cCodObr <= "' + Rtrim( ::cObrDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oAlbCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ), ::oAlbCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )





   ::oAlbCliT:GoTop()

   WHILE !::lBreak .AND. !::oAlbCliT:Eof()

      IF lChkSer( ::oAlbCliT:CSERALB, ::aSer )





         if ::oAlbCliL:Seek( ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB )

            while ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB == ::oAlbCliL:CSERALB + Str( ::oAlbCliL:NNUMALB ) + ::oAlbCliL:CSUFALB .AND. ! ::oAlbCliL:eof()

               if !( ::lExcCero .AND. ::oAlbCliL:nPreUnit == 0 )

                  ::oDbf:Append()

                  ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )

                  ::oDbf:cCodObr := ::oAlbCliT:cCodObr
                  ::oDbf:cNomObr := RetObras( ::oAlbCliT:cCodCli, ::oAlbCliT:cCodObr, ::oDbfObr:cAlias )
                  ::oDbf:cCodAlm := ::oAlbCliT:CCODALM
                  ::oDbf:cCodAge := ::oAlbCliT:CCODAGE
                  ::oDbf:dFecMov := ::oAlbCliT:DFECALB
                  ::oDbf:nNumCaj := ::oAlbCliL:nCanEnt
                  ::oDbf:nNumUnd := ::oAlbCliL:nUniCaja
                  ::oDbf:cCodArt := ::oAlbCliL:cRef
                  ::oDbf:cNomArt := ::oAlbCliL:cDetalle
                  ::oDbf:cCodPr1 := ::oAlbCliL:cCodPr1
                  ::oDbf:cNomPr1 := retProp( ::oAlbCliL:cCodPr1 )
                  ::oDbf:cCodPr2 := ::oAlbCliL:cCodPr2
                  ::oDbf:cNomPr2 := retProp( ::oAlbCliL:cCodPr2 )
                  ::oDbf:cValPr1 := ::oAlbCliL:cValPr1
                  ::oDbf:cNomVl1 := retValProp( ::oAlbCliL:cCodPr1 + ::oAlbCliL:cValPr1 )
                  ::oDbf:cValPr2 := ::oAlbCliL:cValPr2
                  ::oDbf:cNomVl2 := retValProp( ::oAlbCliL:cCodPr2 + ::oAlbCliL:cValPr2 )
                  ::oDbf:nTotUnd := nTotNAlbCli( ::oAlbCliL )
                  ::oDbf:nImpArt := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F. )
                  ::oDbf:nIvaLin := ( nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .T. ) - nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F. ) )
                  ::oDbf:nTotLin := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .T. )
                  ::oDbf:cDocMov := lTrim ( ::oAlbCliL:cSerAlb ) + "/" + lTrim ( Str( ::oAlbCliL:nNumAlb ) ) + "/" + lTrim ( ::oAlbCliL:cSufAlb )

                  ::oDbf:Save()

               end

               ::oAlbCliL:Skip()

            end

         end

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )

   ::oAlbCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ) )

   ::oMtrInf:AutoInc( ::oAlbCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
