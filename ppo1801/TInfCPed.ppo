#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfCPed.prg"
_HB_CLASS TInfCPed ; function TInfCPed ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfCPed", iif( .T., { @TInfCli() }, { @HBObject() } ), @TInfCPed() ) ) ;

   _HB_MEMBER { AS LOGIC lDesglose } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lDesglose"}, .F. )
   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Parcialmente", "Pendiente y parcialmente", "Entregado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aProduccion } ; oClass:AddMultiData( "ARRAY", { "Producido", "En producción", "Pendiente de producción" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aProduccion"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfCPed_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfCPed_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfCPed_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfCPed_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfCPed_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfCPed ;



static FUNCTION TInfCPed_Create( ) ; local Self AS CLASS TInfCPed := QSelf() AS CLASS TInfCPed

   ::AddField( "cTipDoc", "C", 20, 0, {|| "@!" },          "Tipo",                 .F., "Tipo de documento"         , 10, .F. )
   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },          "Doc.",                 .T., "Documento"                 ,  8, .F. )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },          "Fecha",                .T., "Fecha"                     , 10, .F. )
   ::AddField( "dFecEnt", "D",  8, 0, {|| "@!" },          "Entrega",              .F., "Fecha entrega"             , 12, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },          "Art.",                 .F., "Código artículo"           , 14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },          "Descripción",          .F., "Descripción"               , 35, .F. )
   ::FldPropiedades()
   ::AddField( "cLote",   "C", 64, 0, ,                    "Lote",                 .F., "Número de lote"            , 10, .F. )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },          "Cód. cli.",            .F., "Código cliente"            ,  8, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },          "Nom. cli.",            .F., "Nombre cliente"            , 30, .F. )
   ::AddField( "cNifCli", "C", 15, 0, {|| "@!" },          "Nif",                  .F., "Nif"                       , 12, .F. )
   ::AddField( "cDomCli", "C", 35, 0, {|| "@!" },          "Domicilio",            .F., "Domicilio"                 , 20, .F. )
   ::AddField( "cPobCli", "C", 25, 0, {|| "@!" },          "Población",            .F., "Población"                 , 25, .F. )
   ::AddField( "cProCli", "C", 20, 0, {|| "@!" },          "Provincia",            .F., "Provincia"                 , 20, .F. )
   ::AddField( "cCdpCli", "C",  7, 0, {|| "@!" },          "Cod. Postal",          .F., "Cod. Postal"               ,  7, .F. )
   ::AddField( "cTlfCli", "C", 12, 0, {|| "@!" },          "Teléfono",             .F., "Teléfono"                  , 12, .F. )
   ::AddField( "cTipVen", "C", 20, 0, {|| "@!" },          "Venta",                .F., "Tipo de venta"             , 10, .F. )
   ::AddField( "nNumCaj", "N", 16, 6, {|| MasUnd() },      "Caj.",                 .F., "Cajas"                     , 12, .T. )
   ::AddField( "nUniDad", "N", 16, 6, {|| MasUnd() },      "Und.",                 .F., "Unidades"                  , 12, .T. )
   ::AddField( "nUniEnt", "N", 16, 6, {|| MasUnd() },      "Und. entr.",           .T., "Unidades entregadas"       , 12, .T. )
   ::AddField( "nUniPnt", "N", 16, 6, {|| MasUnd() },      "Und. pend.",           .T., "Unidades pendientes"       , 12, .T. )
   ::AddField( "nNumUni", "N", 16, 6, {|| MasUnd() },      "Tot. und.",            .T., "Total unidades"            , 12, .T. )
   ::AddField( "nImpArt", "N", 16, 6, {|| ::cPicImp },     "Precio",               .T., "Precio"                    , 12, .F. )
   ::AddField( "nPntVer", "N", 16, 6, {|| ::cPicImp },     "Pnt. ver.",            .F., "Punto verde"               , 10, .F. )
   ::AddField( "nImpTrn", "N", 16, 6, {|| ::cPicImp },     "Portes",               .F., "Portes"                    , 10, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },     "Base",                 .T., "Base"                      , 15, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },      "Tot. peso",            .F., "Total peso"                , 12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },     "Pre. Kg.",             .F., "Precio kilo"               , 12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },      "Tot. vol.",            .F., "Total volumen"             , 12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },     "Pre. vol.",            .F., "Precio volumen"            , 12, .F. )
   ::AddField( "nIvaTot", "N", 16, 6, {|| ::cPicOut },     cImp(),                 .T., cImp()                      , 12, .T. )
   ::AddField( "nTotFin", "N", 16, 6, {|| ::cPicOut },     "Total",                .T., "Total"                     , 12, .T. )
   ::AddField( "cNbrEst", "C", 35, 0, {|| "@!" },          "Establecimiento ",     .F., "Nombre establecimiento"    , 50 )
   ::AddField( "cSituac", "C", 20, 0, {|| "@!" },          "Siruación",            .F., "Situación"                 , 50 )
   ::AddField( "cEstPro", "C", 50, 0, {|| "@!" },          "Producido",            .F., "Producido"                 , 50 )

   ::AddTmpIndex( "CCODCLI", "CCODCLI + CCODART + CCODPR1 + CCODPR2 + CVALPR1 + CVALPR2 + CLOTE" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) } )
   ::AddGroup( {|| ::oDbf:cCodCli + ::oDbf:cCodArt }, {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + Rtrim( oRetFld( ::oDbf:cCodArt, ::oDbfArt ) ) }, {||"Total artículo..."} )

RETURN ( self )


static FUNCTION TInfCPed_OpenFiles( ) ; local Self AS CLASS TInfCPed := QSelf() AS CLASS TInfCPed

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oPedCliT := TDataCenter():oPedCliT()

   ::oPedCliL := DbfServer( "PEDCLIL.DBF", ):NewOpen( "PEDCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliL:AddBag( "PEDCLIL.CDX" ) ; ::oPedCliL:AddBag( ) ; ::oPedCliL:AutoIndex()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfCPed_CloseFiles( ) ; local Self AS CLASS TInfCPed := QSelf() AS CLASS TInfCPed

   if !Empty( ::oPedCliT ) .AND. ::oPedCliT:Used()
      ::oPedCliT:End()
   end
   if !Empty( ::oPedCliL ) .AND. ::oPedCliL:Used()
      ::oPedCliL:End()
   end

   ::oPedCliT := nil
   ::oPedCliL := nil

RETURN ( Self )



static FUNCTION TInfCPed_lResource( cFld ) ; local Self AS CLASS TInfCPed := QSelf() AS CLASS TInfCPed

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN11F" )
      return .F.
   end



   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end





   if!::lDefArtInf( 70, 80, 90, 100, 800 )
      return .F.
   end



   ::oMtrInf:SetTotal( ::oPedCliT:Lastrec() )

   ::oDefExcInf()





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )



   TCheckBox():ReDefine( 700, { | u | If( PCount()==0, ::lDesglose, ::lDesglose:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   ::CreateFilter( aItmPedCli(), ::oPedCliT:cAlias )

   ::bPreGenerate    := {|| ::NewGroup( ::lDesglose ) }
   ::bPostGenerate   := {|| ::QuiGroup( ::lDesglose ) }

RETURN .T.






static FUNCTION TInfCPed_lGenerate( ) ; local Self AS CLASS TInfCPed := QSelf() AS CLASS TInfCPed

   local cExpHead    := ""
   local cExpLine    := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader         := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes  : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim ( ::cCliDes ) ) }, {|| "Artículos : " + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim ( ::cArtDes ) ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] } }


   ::oPedCliT:OrdSetFocus( "dFecPed" )
   ::oPedCliL:OrdSetFocus( "nNumPed" )

   cExpHead          := 'dFecPed >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecPed <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   do case
      case ::oEstado:nAt == 1
         cExpHead    += " .and. nEstado == 1"
      case ::oEstado:nAt == 2
         cExpHead    += " .and. nEstado == 2"
      case ::oEstado:nAt == 3
         cExpHead    += " .and. ( nEstado == 1 .or. nEstado == 2 )"
      case ::oEstado:nAt == 4
         cExpHead    += " .and. nEstado == 3"
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oPedCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oPedCliT:cFile ), ::oPedCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oPedCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oPedCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oPedCliL:cFile ), ::oPedCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oPedCliT:GoTop()

   while !::lBreak .AND. !::oPedCliT:Eof()

      if lChkSer( ::oPedCliT:cSerPed, ::aSer )

         if ::oPedCliL:Seek( ::oPedCliT:cSerPed + Str( ::oPedCliT:nNumPed ) + ::oPedCliT:cSufPed )

            while ::oPedCliT:cSerPed + Str( ::oPedCliT:nNumPed ) + ::oPedCliT:cSufPed == ::oPedCliL:cSerPed + Str( ::oPedCliL:nNumPed ) + ::oPedCliL:cSufPed


               if !( ::lExcMov .AND. nTotNPedCli( ::oPedCliL:cAlias ) == 0 )      .AND. !( ::lExcCero .AND. nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  ::AddPed( .F. )

                  ::oDbf:Load()
                  ::oDbf:nUniEnt    := nUnidadesRecibidasAlbaranesClientes( ::oPedCliL:cSerPed + Str( ::oPedCliL:nNumPed ) + ::oPedCliL:cSufPed, ::oPedCliL:cRef, ::oPedCliL:cValPr1, ::oPedCliL:cValPr2, ::oAlbCliL:cAlias )
                  ::oDbf:nUniPnt    := ::oDbf:nNumUni - ::oDbf:nUniEnt
                  ::oDbf:nImpTot    := (::oDbf:nNumUni - ::oDbf:nUniEnt) * ::oDbf:nImpArt
                  ::oDbf:nIvaTot    := Round( ::oDbf:nImpTot * ::oPedCliL:nIva / 100, ::nDecOut )
                  ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot
                  ::oDbf:dFecEnt    := ::oPedCliT:dFecEnt
                  ::oDbf:cSituac    := ::oPedCliT:cSituac
                  ::oDbf:cEstPro    := ::aProduccion[ Max( ::oPedCliL:nProduc + 1, 1 ) ]
                  ::oDbf:Save()

               end

               ::oPedCliL:Skip()

            end

         end

      end

      ::oPedCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oPedCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oPedCliT:cFile ) )

   ::oPedCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oPedCliL:cFile ) )

   ::oMtrInf:AutoInc( ::oPedCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
