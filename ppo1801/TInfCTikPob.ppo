#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfCTikPob.prg"
_HB_CLASS TInfCTikPob ; function TInfCTikPob ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfCTikPob", iif( .T., { @TInfCli() }, { @HBObject() } ), @TInfCTikPob() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS LOGIC lAllCP } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllCP"}, .F. )
   _HB_MEMBER { AS LOGIC lIncEsc } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lIncEsc"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )
   _HB_MEMBER { AS CHARACTER cCPOrg } ; oClass:AddMultiData( "CHARACTER", "00000", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCPOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cCPDes } ; oClass:AddMultiData( "CHARACTER", "99999", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCPDes"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfCTikPob_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfCTikPob_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfCTikPob_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfCTikPob_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfCTikPob_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfCTikPob ;



static FUNCTION TInfCTikPob_Create( ) ; local Self AS CLASS TInfCTikPob := QSelf() AS CLASS TInfCTikPob

   ::AddField( "cTipDoc", "C", 20, 0, {|| "@!" },          "Tipo",                 .F., "Tipo de documento"         , 10, .F. )
   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },          "Doc.",                 .T., "Documento"                 , 12, .F. )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },          "Fecha",                .T., "Fecha"                     , 10, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },          "Art.",                 .T., "Código artículo"           , 14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },          "Descripción",          .T., "Descripción"               , 35, .F. )
   ::FldPropiedades()
   ::AddField( "cLote",   "C", 64, 0, ,                    "Lote",                 .F., "Número de lote"            , 10, .F. )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },          "Cód. cli.",            .F., "Cod. Cliente"              ,  8, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },          "Cliente",              .F., "Nom. Cliente"              , 30, .F. )
   ::AddField( "cNifCli", "C", 15, 0, {|| "@!" },          "Nif",                  .F., "Nif"                       , 12, .F. )
   ::AddField( "cDomCli", "C", 35, 0, {|| "@!" },          "Domicilio",            .F., "Domicilio"                 , 20, .F. )
   ::AddField( "cPobCli", "C", 25, 0, {|| "@!" },          "Población",            .F., "Población"                 , 25, .F. )
   ::AddField( "cProCli", "C", 20, 0, {|| "@!" },          "Provincia",            .F., "Provincia"                 , 20, .F. )
   ::AddField( "cCdpCli", "C",  7, 0, {|| "@!" },          "Cod. Postal",          .F., "Cod. Postal"               ,  7, .F. )
   ::AddField( "cTlfCli", "C", 12, 0, {|| "@!" },          "Teléfono",             .F., "Teléfono"                  , 12, .F. )
   ::AddField( "cTipVen", "C", 20, 0, {|| "@!" },          "Venta",                .F., "Tipo de venta"             , 10, .F. )
   ::AddField( "nNumCaj", "N", 16, 6, {|| MasUnd() },      cNombreCajas(),         .F., cNombreCajas()              , 12, .T. )
   ::AddField( "nUniDad", "N", 16, 6, {|| MasUnd() },      cNombreUnidades(),      .F., cNombreUnidades()           , 12, .T. )
   ::AddField( "nNumUni", "N", 16, 6, {|| MasUnd() },      "Tot. " + cNombreUnidades(), .T., "Tot. " + cNombreUnidades() , 10, .T. )
   ::AddField( "nImpArt", "N", 16, 6, {|| ::cPicImp },     "Precio",               .T., "Precio"                    , 12, .F. )
   ::AddField( "nPntVer", "N", 16, 6, {|| ::cPicImp },     "Pnt. ver.",            .F., "Punto verde"               , 10, .F. )
   ::AddField( "nImpTrn", "N", 16, 6, {|| ::cPicImp },     "Portes",               .F., "Portes"                    , 10, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },     "Base",                 .T., "Base"                      , 15, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },      "Tot. peso",            .F., "Total peso"                , 12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },     "Pre. Kg.",             .F., "Precio kilo"               , 12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },      "Tot. volumen",         .F., "Total volumen"             , 12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },     "Pre. vol.",            .F., "Precio volumen"            , 12, .F. )
   ::AddField( "nIvaTot", "N", 16, 6, {|| ::cPicOut },     cImp(),               .T., cImp()                    , 12, .T. )
   ::AddField( "nTotFin", "N", 16, 6, {|| ::cPicOut },     "Total",                .T., "Total"                     , 12, .T. )
   ::AddField( "nDtoEsp", "N",  6, 2, {|| "@E 99.99" },    "%Dto.1",               .F., "Primer porcetaje descuento",  6, .F. )
   ::AddField( "nDpp",    "N",  6, 2, {|| "@E 99.99" },    "%Dto.2",               .F., "Segundo porcentaje descuento",6, .T. )
   ::AddField( "nDtoUno", "N",  6, 2, {|| "@E 99.99" },    "%Dto.3",               .F., "Tercer porcentaje descuento", 6, .T. )
   ::AddField( "nDtoDos", "N",  6, 2, {|| "@E 99.99" },    "%Dto.4",               .F., "Cuarto porcentaje descuento", 6, .T. )
   ::AddField( "cPerCto", "C", 30, 0, {|| "@!" },          "Contacto",             .F., "Contacto",                    15,.F. )
   ::AddField( "Telefono","C", 20, 0, {|| "@!" },          "Telefono",             .F., "Telefono",                    15,.F. )
   ::AddField( "Fax",     "C", 20, 0, {|| "@!" },          "Fax",                  .F., "Fax",                         15,.F. )
   ::AddField( "Movil",   "C", 20, 0, {|| "@!" },          "Movil",                .F., "Movil",                       15,.F. )
   ::AddField( "mObserv", "M", 10, 0, {|| "@!" },          "Observ.",              .F., "Observaciones",               15,.F. )

   ::AddTmpIndex( "cCdpCli", "cCdpCli + cCodCli + dTos( dFecMov )" )

   ::AddGroup( {|| ::oDbf:cCdpCli }, {|| "Código postal : " + Rtrim( ::oDbf:cCdpCli ) }, {||"Total código postal..."} )

   ::AddGroup( {|| ::oDbf:cCdpCli + ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) }, {||"Total cliente..."} )

RETURN ( self )



static FUNCTION TInfCTikPob_OpenFiles( ) ; local Self AS CLASS TInfCTikPob := QSelf() AS CLASS TInfCTikPob

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfCTikPob_CloseFiles( ) ; local Self AS CLASS TInfCTikPob := QSelf() AS CLASS TInfCTikPob

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end
   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oTikCliT := nil
   ::oTikCliL := nil
   ::oDbfArt  := nil

RETURN ( Self )



static FUNCTION TInfCTikPob_lResource( cFld ) ; local Self AS CLASS TInfCTikPob := QSelf() AS CLASS TInfCTikPob

   local oCPOrg
   local oCPDes
   local oIncEsc

   if !::StdResource( "INF_GEN32" )
      return .F.
   end






   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end



   TCheckBox():ReDefine( 800, { | u | If( PCount()==0, ::lAllCP, ::lAllCP:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   oCPOrg := TGetHlp():ReDefine( 70, { | u | If( PCount()==0, ::cCPOrg, ::cCPOrg:= u ) }, ::oFld:aDialogs[1],, "99999",,,,,,, .F., {||     ( !::lAllCP )},, .F., .F.,,,,,, nil,,, )





   oCPDes := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, ::cCPDes, ::cCPDes:= u ) }, ::oFld:aDialogs[1],, "99999",,,,,,, .F., {||     ( !::lAllCP )},, .F., .F.,,,,,, nil,,, )








   oIncEsc := TCheckBox():ReDefine( 750, { | u | If( PCount()==0, ::lIncEsc, ::lIncEsc:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   ::oDefExcInf()

   ::oDefResInf()






   ::CreateFilter( aItmTik(), ::oTikCliT:cAlias )

RETURN .T.







static FUNCTION TInfCTikPob_lGenerate( ) ; local Self AS CLASS TInfCTikPob := QSelf() AS CLASS TInfCTikPob

   local cExpHead := ""
   local cExpLine := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "C. Postal : " + if( ::lAllCP, "Todos", AllTrim( ::cCPOrg ) + " > " + AllTrim( ::cCPDes ) ) }, {|| "Clientes  : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) } }

   ::oTikCliT:OrdSetFocus( "dFecTik" )
   ::oTikCliL:OrdSetFocus( "cNumTil" )





   cExpHead          := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCP
      cExpHead       += ' .and. cPosCli >= "' + Rtrim( ::cCPOrg ) + '" .and. cPosCli <= "' + Rtrim( ::cCPDes ) + '"'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCliTik >= "' + Rtrim( ::cCliOrg ) + '" .and. cCliTik <= "' + Rtrim( ::cCliDes ) + '"'
   end

   cExpHead          += ' .and. ( cTipTik == "1" .or. cTipTik == "4" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText := "Procesando tikets"
   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )

   if !::lIncEsc
      cExpLine       := "!lKitChl"
   else
      cExpLine       := ".t."
   end

   ::oTikCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ), ::oTikCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oTikCliT:GoTop()

   WHILE !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer )

         if ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

            while ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik == ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil



               if !Empty( ::oTikCliL:cCbaTil )                                                                 .AND. !( ::oTikCliL:lControl )                                                                     .AND. !( ::lExcCero .AND. ::oTikCliL:nPvpTil == 0 )

                  ::AddTik ( ::oTikCliL:cCbaTil, 1, .F. )

               end



               if !Empty( ::oTikCliL:cComTil )                                                                 .AND. !( ::oTikCliL:lControl )                                                                     .AND. !( ::lExcCero .AND. ::oTikCliL:nPcmTil == 0 )

                  ::AddTik ( ::oTikCliL:cComTil, 2, .F. )

               end

               ::oTikCliL:Skip()

            end

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )

   ::oTikCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
