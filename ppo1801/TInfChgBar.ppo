#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfChgBar.prg"
_HB_CLASS TInfChgBar ; function TInfChgBar ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfChgBar", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfChgBar() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfCodeBar } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCodeBar"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfKit } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfKit"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfDiv } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfDiv"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TInfChgBar_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfChgBar_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfChgBar_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfChgBar_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfChgBar_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfChgBar ;



static FUNCTION TInfChgBar_create( ) ; local Self AS CLASS TInfChgBar := QSelf() AS CLASS TInfChgBar

   ::AddField( "cCodFam",  "C", 16, 0, {|| "@!" },        "Familia",        .F., "Familia"                ,  8, .F. )
   ::AddField( "cCodArt",  "C", 18, 0, {|| "@!" },        "Código artículo",      .F., "Cod. artículo"          , 15, .F. )
   ::AddField( "cNomArt",  "C",100, 0, {|| "@!" },        "Descripción",    .F., "Descripción"            , 50, .F. )
   ::AddField( "cCodeBar", "C", 20, 0, {|| "@!" },        "Código barras",  .T., "Código de barras"       , 50, .F. )
   ::AddField( "LastChg",  "D",  8, 0, {|| "@!" },        "Cambio",         .T., "Fecha de cambio"        , 15, .F. )

   ::AddTmpIndex( "CCODFAM", "CCODFAM + CCODART + CCODEBAR" )

   ::AddGroup( {|| ::oDbf:cCodFam }, {|| "Familia  : " + Rtrim( ::oDbf:cCodFam ) + "-" + oRetFld( ::oDbf:cCodFam, ::oDbfFam ) }, {|| "Total familia..." } )
   ::AddGroup( {|| ::oDbf:cCodFam + ::oDbf:cCodArt }, {|| "Artículo  : " + Rtrim( ::oDbf:cCodArt ) + "-" + Rtrim( ::oDbf:cNomArt ) }, {|| "" } )

   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( self )



static FUNCTION TInfChgBar_OpenFiles( ) ; local Self AS CLASS TInfChgBar := QSelf() AS CLASS TInfChgBar

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   ::oDbfCodeBar := DbfServer( "ARTCODEBAR.DBF", ):NewOpen( "ARTCODEBAR.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCodeBar:AddBag( "ARTCODEBAR.CDX" ) ; ::oDbfCodeBar:AddBag( ) ; ::oDbfCodeBar:AutoIndex()

   ::oDbfKit := DbfServer( "ARTKIT.DBF", ):NewOpen( "ARTKIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfKit:AddBag( "ARTKIT.CDX" ) ; ::oDbfKit:AddBag( ) ; ::oDbfKit:AutoIndex()

   ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfChgBar_CloseFiles( ) ; local Self AS CLASS TInfChgBar := QSelf() AS CLASS TInfChgBar

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   if !Empty( ::oDbfCodeBar ) .AND. ::oDbfCodeBar:Used()
      ::oDbfCodeBar:End()
   end

   if !Empty( ::oDbfKit ) .AND. ::oDbfKit:Used()
      ::oDbfKit:End()
   end

   if !Empty( ::oDbfDiv ) .AND. ::oDbfDiv:Used()
      ::oDbfDiv:End()
   end

   ::oDbfArt      := nil
   ::oDbfCodeBar  := nil
   ::oDbfKit      := nil
   ::oDbfDiv      := nil

RETURN ( Self )



static FUNCTION TInfChgBar_lResource( cFld ) ; local Self AS CLASS TInfChgBar := QSelf() AS CLASS TInfChgBar

   if !::StdResource( "INFCHGART" )
      return .F.
   end

   if !::lDefFamInf( 110, 120, 130, 140, 600 )
      return .F.
   end

   ::CreateFilter( aItmArt(), ::oDbfArt:cAlias )





   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

RETURN .T.






static FUNCTION TInfChgBar_lGenerate( ) ; local Self AS CLASS TInfChgBar := QSelf() AS CLASS TInfChgBar

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Familias : " + if( ::lAllFam, "Todas", AllTrim( ::cFamOrg ) + " > " + AllTrim( ::cFamDes ) ) } }

   ::oDbfArt:OrdSetFocus( "CODIGO" )

   cExpHead          := '( dChgBar >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dChgBar <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) )'

   if !::lAllFam
      cExpHead       += ' .and. Familia >= "' + Rtrim( ::cFamOrg ) + '" .and. Familia <= "' + Rtrim( ::cFamDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oDbfArt:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ), ::oDbfArt:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oDbfArt:OrdKeyCount() )

   ::oDbfArt:GoTop()

   while !::lBreak .AND. !::oDbfArt:Eof()

      if lMultipleCodeBar()

         if ::oDbfCodeBar:Seek( ::oDbfArt:Codigo )

            while ::oDbfCodeBar:cCodArt == ::oDbfArt:Codigo .AND. !::oDbfCodeBar:Eof()

               ::oDbf:Append()

               ::oDbf:LastChg    := ::oDbfArt:dChgBar
               ::oDbf:cCodArt    := ::oDbfArt:Codigo
               ::oDbf:cNomArt    := ::oDbfArt:Nombre
               ::oDbf:cCodFam    := ::oDbfArt:Familia
               ::oDbf:cCodeBar   := ::oDbfCodeBar:cCodBar

               ::oDbf:Save()

               ::oDbfCodeBar:Skip()

            end

         end

      else

         ::oDbf:Append()

         ::oDbf:LastChg       := ::oDbfArt:dChgBar
         ::oDbf:cCodArt       := ::oDbfArt:Codigo
         ::oDbf:cNomArt       := ::oDbfArt:Nombre
         ::oDbf:cCodFam       := ::oDbfArt:Familia
         ::oDbf:cCodeBar      := ::oDbfArt:CodeBar

         ::oDbf:Save()

      end

      ::oDbfArt:Skip()

      ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyNo() )

   end

   ::oDbfArt:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfArt:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
