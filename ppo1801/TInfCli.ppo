#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfCli.prg"
_HB_CLASS TInfCli ; function TInfCli ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfCli", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfCli() ) ) ;

   _HB_MEMBER DetCreateFields(); oClass:AddMethod( "DetCreateFields", @TInfCli_DetCreateFields(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RentCreateFields(); oClass:AddMethod( "RentCreateFields", @TInfCli_RentCreateFields(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AcuCreate(); oClass:AddMethod( "AcuCreate", @TInfCli_AcuCreate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddTik( cCodArt, nPrecio, lAcumula); oClass:AddMethod( "AddTik", @TInfCli_AddTik(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddPre( lAcumula); oClass:AddMethod( "AddPre", @TInfCli_AddPre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddPed( lAcumula); oClass:AddMethod( "AddPed", @TInfCli_AddPed(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAlb( lAcumula); oClass:AddMethod( "AddAlb", @TInfCli_AddAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddFac( lAcumula); oClass:AddMethod( "AddFac", @TInfCli_AddFac(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddFacRec( lAcumula); oClass:AddMethod( "AddFacRec", @TInfCli_AddFacRec(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddFacRecVta( lAcumula); oClass:AddMethod( "AddFacRecVta", @TInfCli_AddFacRecVta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRTik( cCodArt, nPrecio); oClass:AddMethod( "AddRTik", @TInfCli_AddRTik(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRAlb(); oClass:AddMethod( "AddRAlb", @TInfCli_AddRAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRFac(); oClass:AddMethod( "AddRFac", @TInfCli_AddRFac(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddRFacRec(); oClass:AddMethod( "AddRFacRec", @TInfCli_AddRFacRec(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER IncluyeCero(); oClass:AddMethod( "IncluyeCero", @TInfCli_IncluyeCero(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CalTotal( oColumn); oClass:AddMethod( "CalTotal", @TInfCli_CalTotal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER NewGroup( lDesPrp); oClass:AddMethod( "NewGroup", @TInfCli_NewGroup(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER QuiGroup( lDesPrp); oClass:AddMethod( "QuiGroup", @TInfCli_QuiGroup(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfCli ;



static FUNCTION TInfCli_DetCreateFields( ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   ::AddField( "cTipDoc", "C", 20, 0, {|| "@!" },          "Tipo",                     .F., "Tipo de documento"         , 10, .F. )
   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },          "Doc.",                     .T., "Documento"                 ,  8, .F. )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },          "Fecha",                    .T., "Fecha"                     , 10, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },          "Art.",                     .F., "Código artículo"           , 14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },          "Descripción",              .F., "Descripción"               , 35, .F. )
   ::FldPropiedades()
   ::AddField( "cLote",   "C", 64, 0, ,                    "Lote",                     .F., "Número de lote"            , 10, .F. )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },          "Cód. cli.",                .F., "Cod. Cliente"              ,  8, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },          "Cliente",                  .F., "Nom. Cliente"              , 30, .F. )
   ::AddField( "cNifCli", "C", 15, 0, {|| "@!" },          "Nif",                      .F., "Nif"                       , 12, .F. )
   ::AddField( "cDomCli", "C", 35, 0, {|| "@!" },          "Domicilio",                .F., "Domicilio"                 , 20, .F. )
   ::AddField( "cPobCli", "C", 25, 0, {|| "@!" },          "Población",                .F., "Población"                 , 25, .F. )
   ::AddField( "cProCli", "C", 20, 0, {|| "@!" },          "Provincia",                .F., "Provincia"                 , 20, .F. )
   ::AddField( "cCdpCli", "C",  7, 0, {|| "@!" },          "Cod. Postal",              .F., "Cod. Postal"               ,  7, .F. )
   ::AddField( "cTlfCli", "C", 12, 0, {|| "@!" },          "Teléfono",                 .F., "Teléfono"                  , 12, .F. )
   ::AddField( "cObrCli", "C", 10, 0,  {|| "@!" },         "Dirección",                      .F., "Código dirección",                12 )
   ::AddField( "cTipVen", "C", 20, 0, {|| "@!" },          "Venta",                    .F., "Tipo de venta"             , 10, .F. )
   ::AddField( "nNumCaj", "N", 16, 6, {|| MasUnd() },      cNombreCajas(),             .F., cNombreCajas()              , 12, .F. )
   ::AddField( "nUniDad", "N", 16, 6, {|| MasUnd() },      cNombreUnidades(),          .F., cNombreUnidades()           , 12, .F. )
   ::AddField( "nNumUni", "N", 16, 6, {|| MasUnd() },      "Tot. " + cNombreUnidades(),.T., "Total " + cNombreUnidades(), 12, .T. )
   ::AddField( "nImpArt", "N", 16, 6, {|| ::cPicImp },     "Precio",                   .T., "Precio"                    , 12, .F. )
   ::AddField( "nPntVer", "N", 16, 6, {|| ::cPicImp },     "Pnt. ver.",                .F., "Punto verde"               , 10, .F. )
   ::AddField( "nImpTrn", "N", 16, 6, {|| ::cPicImp },     "Portes",                   .F., "Portes"                    , 10, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },     "Base",                     .T., "Base"                      , 15, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },      "Tot. peso",                .F., "Total peso"                , 12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },     "Pre. Kg.",                 .F., "Precio kilo"               , 12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },      "Tot. vol.",                .F., "Total volumen"             , 12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },     "Pre. vol.",                .F., "Precio volumen"            , 12, .F. )
   ::AddField( "nIvaTot", "N", 16, 6, {|| ::cPicOut },     cImp(),                   .T., cImp()                    , 12, .T. )
   ::AddField( "nTotFin", "N", 16, 6, {|| ::cPicOut },     "Total",                    .T., "Total"                     , 12, .T. )


RETURN ( self )



static FUNCTION TInfCli_RentCreateFields( ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },      "Código artículo",            .F., "Codigo artículo",        14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },      "Descripción",          .F., "Descripción",            35, .F. )
   ::FldPropiedades()
   ::AddField( "cLote",   "C", 64, 0, ,                "Lote",                 .F., "Número de lote",         10, .F. )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },      "Cód. cli.",            .F., "Cod. Cliente",            8, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },      "Cliente",              .F., "Nom. Cliente",           30, .F. )
   ::AddField( "cNifCli", "C", 15, 0, {|| "@!" },      "Nif",                  .F., "Nif",                    12, .F. )
   ::AddField( "cDomCli", "C", 35, 0, {|| "@!" },      "Domicilio",            .F., "Domicilio",              20, .F. )
   ::AddField( "cPobCli", "C", 25, 0, {|| "@!" },      "Población",            .F., "Población",              25, .F. )
   ::AddField( "cProCli", "C", 20, 0, {|| "@!" },      "Provincia",            .F., "Provincia",              20, .F. )
   ::AddField( "cCdpCli", "C",  7, 0, {|| "@!" },      "Cod. Postal",          .F., "Cod. Postal",             7, .F. )
   ::AddField( "cTlfCli", "C", 12, 0, {|| "@!" },      "Teléfono",             .F., "Teléfono",               12 )
   ::AddField( "cObrCli", "C", 10, 0,  {|| "@!" },         "Dirección",                      .F., "Código dirección",   12 )
   ::AddField( "nTotCaj", "N", 16, 6, {|| MasUnd() },  cNombreCajas(),         .F., cNombreCajas(),           12, .T. )
   ::AddField( "nTotUni", "N", 16, 6, {|| MasUnd() },  cNombreUnidades(),      .T., cNombreUnidades(),        12, .T. )
   ::AddField( "nBase",   "N", 16, 6, {|| ::cPicOut }, "Base",                 .T., "Base",                   12, .T. )
   ::AddField( "nIva",    "N", 16, 6, {|| ::cPicOut }, cImp(),               .T., cImp(),                 12, .T. )
   ::AddField( "nTotImp", "N", 16, 6, {|| ::cPicOut }, "Tot. importe",         .T., "Total importe",          12, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },  "Tot. peso",            .F., "Total peso",             12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp }, "Pre. Kg.",             .F., "Precio kilo",            12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },  "Tot. vol.",            .F., "Total volumen",          12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp }, "Pre. vol.",            .F., "Precio volumen",         12, .F. )
   ::AddField( "nTotCos", "N", 16, 6, {|| ::cPicCom }, "Tot. costo",           .T., "Total costo",            12, .F. )
   ::AddField( "nDtoAtp", "N", 16, 6, {|| ::cPicOut }, "Dto. Atipico",         .F., "Importe dto. atipico",   12, .T. )
   ::AddField( "nMarGen", "N", 16, 6, {|| ::cPicOut }, "Margen",               .T., "Margen",                 12, .T. )
   ::AddField( "nRenTab", "N", 16, 6, {|| ::cPicOut }, "%Rent.",               .T., "Rentabilidad",           12, .F. )
   ::AddField( "nPreMed", "N", 16, 6, {|| ::cPicImp }, "Precio medio",         .F., "Precio medio",           12, .F. )
   ::AddField( "nCosMed", "N", 16, 6, {|| ::cPicCom }, "Costo medio",          .T., "Costo medio",            12, .F. )
   ::AddField( "cNumDoc", "C", 14, 0, {|| "@!" },      "Documento",            .T., "Documento",              12, .F. )
   ::AddField( "cTipDoc", "C", 20, 0, {|| "@!" },      "Tip. Doc.",            .F., "Tipo de documento",      15, .F. )

RETURN ( self )



static FUNCTION TInfCli_AcuCreate( ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   ::FldCliente()
   ::AddField( "nNumUni", "N", 16, 6, {|| MasUnd() },       cNombreUnidades(),      .T., cNombreUnidades()  , 12, .T. )
   ::AddField( "nImpArt", "N", 16, 6, {|| ::cPicImp },      "Precio",               .F., "Precio"           , 12, .F. )
   ::AddField( "nPntVer", "N", 16, 6, {|| ::cPicImp },      "Pnt. ver.",            .F., "Punto verde"      , 10, .F. )
   ::AddField( "nImpTrn", "N", 16, 6, {|| ::cPicImp },      "Portes",               .F., "Portes"           , 10, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },      "Base",                 .T., "Base"             , 12, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },       "Tot. peso",            .F., "Total peso"       , 12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },      "Pre. Kg.",             .F., "Precio kilo"      , 12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },       "Tot. volumen",         .F., "Total volumen"    , 12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },      "Pre. vol.",            .F., "Precio volumen"   , 12, .F. )
   ::AddField( "nPreMed", "N", 16, 6, {|| ::cPicImp },      "Pre. Med.",            .T., "Precio medio"     , 12, .F. )
   ::AddField( "nIvaTot", "N", 16, 6, {|| ::cPicOut },      "Tot. " + cImp(),       .T., "Total " + cImp()  , 12, .T. )
   ::AddField( "nTotFin", "N", 16, 6, {|| ::cPicOut },      "Total",                .T., "Total"            , 12, .T. )

RETURN ( self )



static FUNCTION TInfCli_AddPre( lAcumula ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oPreCliT:cCodCli )

      ::oDbf:Append()

      ::AddCliente( ::oPreCliT:cCodCli, ::oPreCliT, .F. )
      ::oDbf:nNumUni    := nTotNPreCli( ::oPreCliL )
      ::oDbf:nImpArt    := nTotUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oPreCliL:cRef, nTotNPreCli( ::oPreCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula

         ::oDbf:cCodArt := ::oPreCliL:cRef
         ::oDbf:cNomArt := ::oPreCliL:cDetalle
         ::oDbf:cCodPr1 := ::oPreCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oPreCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oPreCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oPreCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oPreCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oPreCliL:cCodPr1 + ::oPreCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oPreCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oPreCliL:cCodPr2 + ::oPreCliL:cValPr2 )
         ::oDbf:cLote   := ::oPreCliL:cLote
         ::oDbf:nNumCaj := ::oPreCliL:nCanPre
         ::oDbf:nUniDad := ::oPreCliL:nUniCaja
         ::oDbf:cDocMov := ::oPreCliL:cSerPre + "/" + lTrim( Str( ::oPreCliL:nNumPre ) ) + "/" + lTrim( ::oPreCliL:cSufPre )
         ::oDbf:dFecMov := ::oPreCliT:dFecPre

      end

      ::oDbf:Save()

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNPreCli( ::oPreCliL )
      ::oDbf:nImpArt    += nTotUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oPreCliL:cRef, nTotNPreCli( ::oPreCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

RETURN ( self )



static FUNCTION TInfCli_AddPed( lAcumula ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oPedCliT:cCodCli )

      ::oDbf:Append()

      ::AddCliente( ::oPedCliT:cCodCli, ::oPedCliT, .F. )
      ::oDbf:nNumUni    := nTotNPedCli( ::oPedCliL )
      ::oDbf:nImpArt    := nTotUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oPedCliL:cRef, nTotNPedCli( ::oPedCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::oDbf:cCodArt := ::oPedCliL:cRef
         ::oDbf:cNomArt := ::oPedCliL:cDetalle
         ::oDbf:cCodPr1 := ::oPedCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oPedCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oPedCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oPedCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oPedCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oPedCliL:cCodPr1 + ::oPedCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oPedCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oPedCliL:cCodPr2 + ::oPedCliL:cValPr2 )
         ::oDbf:cLote   := ::oPedCliL:cLote
         ::oDbf:nNumCaj := ::oPedCliL:nCanPed
         ::oDbf:nUniDad := ::oPedCliL:nUniCaja
         ::oDbf:cDocMov := lTrim( ::oPedCliL:cSerPed ) + "/" + lTrim ( Str( ::oPedCliL:nNumPed ) ) + "/" + lTrim ( ::oPedCliL:cSufPed )
         ::oDbf:dFecMov := ::oPedCliT:dFecPed

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNPedCli( ::oPedCliL )
      ::oDbf:nImpArt    += nTotUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oPedCliL:cRef, nTotNPedCli( ::oPedCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddTik( cCodArt, nPrecio, lAcumula ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   If( nPrecio == nil, nPrecio := 1, ) ;
   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oTikCliT:cCliTik )

      ::oDbf:Append()

      ::AddCliente( ::oTikCliT:cCliTik, ::oTikCliT, .T. )

      if ::oTikCliT:cTipTik == "4"
         ::oDbf:nNumUni    := - ::oTikCliL:nUntTil
      else
        ::oDbf:nNumUni     := ::oTikCliL:nUntTil
      end

      ::oDbf:nImpArt       := nImpUTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, nPrecio )
      ::oDbf:nImpTot       := nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, nPrecio )
      ::oDbf:nIvaTot       := nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nPrecio )
      ::oDbf:nTotFin       := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( cCodArt, ::oTikCliL:nUntTil, ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::oDbf:dFecMov    := ::oTikCliT:dFecTik
         ::oDbf:cCodArt    := cCodArt
         ::oDbf:cNomArt    := RetArticulo( cCodArt, ::oDbfArt )
         ::oDbf:cCodPr1    := ::oTikCliL:cCodPr1
         ::oDbf:cNomPr1    := retProp( ::oTikCliL:cCodPr1 )
         ::oDbf:cCodPr2    := ::oTikCliL:cCodPr2
         ::oDbf:cNomPr2    := retProp( ::oTikCliL:cCodPr2 )
         ::oDbf:cValPr1    := ::oTikCliL:cValPr1
         ::oDbf:cNomVl1    := retValProp( ::oTikCliL:cCodPr1 + ::oTikCliL:cValPr1 )
         ::oDbf:cValPr2    := ::oTikCliL:cValPr2
         ::oDbf:cNomVl2    := retValProp( ::oTikCliL:cCodPr2 + ::oTikCliL:cValPr2 )
         ::oDbf:cLote      := ::oTikCliL:cLote
         ::oDbf:cTipDoc    := "Tiket"
         ::oDbf:cDocMov    := ::oTikCliL:cSerTil + "/" + lTrim ( ::oTikCliL:cNumTil ) + "/" + lTrim ( ::oTikCliL:cSufTil )
      end

      ::oDbf:Save()

   else

      ::oDbf:Load()

      if ::oTikCliT:cTipTik == "4"
        ::oDbf:nNumUni     -= ::oTikCliL:nUntTil
      else
        ::oDbf:nNumUni     += ::oTikCliL:nUntTil
      end

      ::oDbf:nImpArt       += nImpUTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, nPrecio )
      ::oDbf:nImpTot       += nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, nPrecio )
      ::oDbf:nPreMed       := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot       += nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nPrecio )
      ::oDbf:nTotFin       += nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, nPrecio )
      ::oDbf:nTotFin       += nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nPrecio )

      ::AcuPesVol( cCodArt, ::oTikCliL:nUntTil, ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

RETURN ( self )



static FUNCTION TInfCli_AddAlb( lAcumula ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oAlbCliT:cCodCli )

      ::oDbf:Append()

      ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )
      ::oDbf:nNumUni    := nTotNAlbCli( ::oAlbCliL )
      ::oDbf:nImpArt    := nTotUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := 0
      ::oDbf:nImpTot    := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oAlbCliL:cRef, nTotNAlbCli( ::oAlbCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::oDbf:cCodArt := ::oAlbCliL:cRef
         ::oDbf:cNomArt := ::oAlbCliL:cDetalle
         ::oDbf:cCodPr1 := ::oAlbCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oAlbCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oAlbCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oAlbCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oAlbCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oAlbCliL:cCodPr1 + ::oAlbCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oAlbCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oAlbCliL:cCodPr2 + ::oAlbCliL:cValPr2 )
         ::oDbf:cLote   := ::oAlbCliL:cLote
         ::oDbf:cTipDoc    := "Albarán"
         ::oDbf:nNumCaj := ::oAlbCliL:nCanEnt
         ::oDbf:nUniDad := ::oAlbCliL:nUniCaja
         ::oDbf:cDocMov := ::oAlbCliL:cSerAlb + "/" + lTrim ( Str( ::oAlbCliL:nNumAlb ) ) + "/" + lTrim ( ::oAlbCliL:cSufAlb )
         ::oDbf:dFecMov := ::oAlbCliT:dFecAlb

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni   += nTotNAlbCli( ::oAlbCliL )
      ::oDbf:nImpArt   += nTotUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn   += nTrnUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer   += 0
      ::oDbf:nImpTot   += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed   := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot   += nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin   += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin   += nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oAlbCliL:cRef, nTotNAlbCli( ::oAlbCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddFac( lAcumula ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacCliT:cCodCli )

      ::oDbf:Append()

      ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )
      ::oDbf:nNumUni    := nTotNFacCli( ::oFacCliL )
      ::oDbf:nImpArt    := nImpUFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacCliL:cRef, nTotNFacCli( ::oFacCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::oDbf:cCodArt := ::oFacCliL:cRef
         ::oDbf:cNomArt := ::oFacCliL:cDetalle
         ::oDbf:cCodPr1 := ::oFacCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacCliL:cCodPr1 + ::oFacCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacCliL:cCodPr2 + ::oFacCliL:cValPr2 )
         ::oDbf:cLote   := ::oFacCliL:cLote
         ::oDbf:cTipDoc    := "Factura"
         ::oDbf:nNumCaj := ::oFacCliL:nCanEnt
         ::oDbf:nUniDad := ::oFacCliL:nUniCaja
         ::oDbf:cDocMov := ::oFacCliL:cSerie + "/" + lTrim ( Str( ::oFacCliL:nNumFac ) ) + "/" + lTrim ( ::oFacCliL:cSufFac )
         ::oDbf:dFecMov := ::oFacCliT:dFecFac

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacCli( ::oFacCliL )
      ::oDbf:nImpArt    += nImpUFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacCliL:cRef, nTotNFacCli( ::oFacCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddFacRec( lAcumula ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacRecT:cCodCli )

      ::oDbf:Append()

      ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )

      ::oDbf:nNumUni    := nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    := nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::oDbf:cCodArt := ::oFacRecL:cRef
         ::oDbf:cNomArt := ::oFacRecL:cDetalle
         ::oDbf:cCodPr1 := ::oFacRecL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacRecL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacRecL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacRecL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacRecL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacRecL:cCodPr1 + ::oFacRecL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacRecL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacRecL:cCodPr2 + ::oFacRecL:cValPr2 )
         ::oDbf:cLote   := ::oFacRecL:cLote
         ::oDbf:cTipDoc    := "Fac. Rec."
         ::oDbf:nNumCaj := ::oFacRecL:nCanEnt
         ::oDbf:nUniDad := ::oFacRecL:nUniCaja
         ::oDbf:cDocMov := ::oFacRecL:cSerie + "/" + lTrim ( Str( ::oFacRecL:nNumFac ) ) + "/" + lTrim ( ::oFacRecL:cSufFac )
         ::oDbf:dFecMov := ::oFacRecT:dFecFac

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    += nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddFacRecVta( lAcumula ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacRecT:cCodCli )

      ::oDbf:Append()

      ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )
      ::oDbf:nNumUni    := nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    := nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
      ::oDbf:nIvaTot    := nIvaLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::oDbf:cCodArt := ::oFacRecL:cRef
         ::oDbf:cNomArt := ::oFacRecL:cDetalle
         ::oDbf:cCodPr1 := ::oFacRecL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacRecL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacRecL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacRecL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacRecL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacRecL:cCodPr1 + ::oFacRecL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacRecL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacRecL:cCodPr2 + ::oFacRecL:cValPr2 )
         ::oDbf:cLote   := ::oFacRecL:cLote
         ::oDbf:nNumCaj := ::oFacRecL:nCanEnt
         ::oDbf:nUniDad := ::oFacRecL:nUniCaja
         ::oDbf:cDocMov := ::oFacRecL:cSerie + "/" + lTrim ( Str( ::oFacRecL:nNumFac ) ) + "/" + lTrim ( ::oFacRecL:cSufFac )
         ::oDbf:dFecMov := ::oFacRecT:dFecFac

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    += nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddRTik( cCodArt, nPrecio ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local nImpDtoAtp





   nTotUni              := ::oTikCliL:nUntTil
   nTotImpUni           := nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, nPrecio )
   nImpDtoAtp           := 0

   if ::oTikCliL:nCosDiv <> 0
      nTotCosUni        := ::oTikCliL:nCosDiv * nTotUni
   else
      nTotCosUni        := nRetPreCosto( ::oDbfArt:cAlias, cCodArt ) * nTotUni
   end

   ::oDbf:Append()

   ::oDbf:cCodArt    := cCodArt
   ::oDbf:cNomArt    := RetArticulo( cCodArt, ::oDbfArt )
   ::oDbf:cCodPr1    := ::oTikCliL:cCodPr1
   ::oDbf:cNomPr1    := retProp( ::oTikCliL:cCodPr1 )
   ::oDbf:cCodPr2    := ::oTikCliL:cCodPr2
   ::oDbf:cNomPr2    := retProp( ::oTikCliL:cCodPr2 )
   ::oDbf:cValPr1    := ::oTikCliL:cValPr1
   ::oDbf:cNomVl1    := retValProp( ::oTikCliL:cCodPr1 + ::oTikCliL:cValPr1 )
   ::oDbf:cValPr2    := ::oTikCliL:cValPr2
   ::oDbf:cNomVl2    := retValProp( ::oTikCliL:cCodPr2 + ::oTikCliL:cValPr2 )
   ::oDbf:cLote      := ::oTikCliL:cLote



   ::oDbf:nTotUni    := nTotUni
   ::oDbf:nTotPes    := ::oDbf:nTotUni * oRetFld( cCodArt, ::oDbfArt, "nPesoKg" )
   ::oDbf:nBase      := nTotImpUni
   ::oDbf:nIva       := nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nPrecio )
   ::oDbf:nTotImp    := ::oDbf:nBase + ::oDbf:nIva
   ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
   ::oDbf:nTotVol    := ::oDbf:nTotUni * oRetFld( cCodArt, ::oDbfArt, "nVolumen" )
   ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
   ::oDbf:nTotCos    := nTotCosUni
   ::oDbf:nMargen    := nTotImpUni - nTotCosUni
   ::oDbf:nDtoAtp    := nImpDtoAtp

   if nTotUni <> 0 .AND. nTotCosUni <> 0
      ::oDbf:nRentab := nRentabilidad( nTotImpUni, nImpDtoAtp, nTotCosUni )
      ::oDbf:nPreMed := nTotImpUni / nTotUni
      ::oDbf:nCosMed := nTotCosUni / nTotUni
   else
      ::oDbf:nRentab := 0
      ::oDbf:nPreMed := 0
      ::oDbf:nCosMed := 0
   end

   ::oDbf:cNumDoc    := ::oTikCliL:cSerTiL + "/" + Alltrim( ::oTikCliL:cNumTiL ) + "/" + ::oTikCliL:cSufTiL
   ::oDbf:cTipDoc    := "Ticket"

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddRAlb( ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local nImpDtoAtp





   nTotUni              := nTotNAlbCli( ::oAlbCliL:cAlias )
   nTotImpUni           := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
   nImpDtoAtp           := nDtoAtpAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )

   if ::lCosAct .OR. ::oAlbCliL:nCosDiv == 0
      nTotCosUni        := nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotUni
   else
      nTotCosUni        := ::oAlbCliL:nCosDiv * nTotUni
   end

   ::oDbf:Append()

   ::oDbf:cCodArt    := ::oAlbCliL:cRef
   ::oDbf:cNomArt    := ::oAlbCliL:cDetalle
   ::oDbf:cCodPr1    := ::oAlbCliL:cCodPr1
   ::oDbf:cNomPr1    := retProp( ::oAlbCliL:cCodPr1 )
   ::oDbf:cCodPr2    := ::oAlbCliL:cCodPr2
   ::oDbf:cNomPr2    := retProp( ::oAlbCliL:cCodPr2 )
   ::oDbf:cValPr1    := ::oAlbCliL:cValPr1
   ::oDbf:cNomVl1    := retValProp( ::oAlbCliL:cCodPr1 + ::oAlbCliL:cValPr1 )
   ::oDbf:cValPr2    := ::oAlbCliL:cValPr2
   ::oDbf:cNomVl2    := retValProp( ::oAlbCliL:cCodPr2 + ::oAlbCliL:cValPr2 )
   ::oDbf:cLote      := ::oAlbCliL:cLote

   ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )

   ::oDbf:nTotCaj    := ::oAlbCliL:nCanEnt
   ::oDbf:nTotUni    := nTotUni
   ::oDbf:nTotPes    := ::oDbf:nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nBase      := nTotImpUni
   ::oDbf:nIva       := nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
   ::oDbf:nTotImp    := ::oDbf:nBase + ::oDbf:nIva
   ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
   ::oDbf:nTotVol    := ::oDbf:nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nVolumen" )
   ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
   ::oDbf:nTotCos    := nTotCosUni
   ::oDbf:nMargen    := ( nTotImpUni ) - ( nTotCosUni )
   ::oDbf:nDtoAtp    := nImpDtoAtp

   if nTotUni <> 0 .AND. nTotCosUni <> 0
      ::oDbf:nRentab := nRentabilidad( nTotImpUni, nImpDtoAtp, nTotCosUni )
      ::oDbf:nPreMed := nTotImpUni / nTotUni
      ::oDbf:nCosMed := nTotCosUni / nTotUni
   else
      ::oDbf:nRentab := 0
      ::oDbf:nPreMed := 0
      ::oDbf:nCosMed := 0
   end

   ::oDbf:cNumDoc    := ::oAlbCliL:cSerAlb + "/" + Alltrim( Str( ::oAlbCliL:nNumAlb ) ) + "/" + ::oAlbCliL:cSufAlb
   ::oDbf:cTipDoc    := "Albarán"

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddRFac( ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local nImpDtoAtp





   nTotUni              := nTotNFacCli( ::oFacCliL:cAlias )
   nTotImpUni           := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
   nImpDtoAtp           := nDtoAtpAlbCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )

   if ::lCosAct .OR. ::oFacCliL:nCosDiv == 0
      nTotCosUni        := nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotUni
   else
      nTotCosUni        := ::oFacCliL:nCosDiv * nTotUni
   end

   ::oDbf:Append()

   ::oDbf:cCodArt    := ::oFacCliL:cRef
   ::oDbf:cNomArt    := ::oFacCliL:cDetalle
   ::oDbf:cCodPr1    := ::oFacCliL:cCodPr1
   ::oDbf:cNomPr1    := retProp( ::oFacCliL:cCodPr1 )
   ::oDbf:cCodPr2    := ::oFacCliL:cCodPr2
   ::oDbf:cNomPr2    := retProp( ::oFacCliL:cCodPr2 )
   ::oDbf:cValPr1    := ::oFacCliL:cValPr1
   ::oDbf:cNomVl1    := retValProp( ::oFacCliL:cCodPr1 + ::oFacCliL:cValPr1 )
   ::oDbf:cValPr2    := ::oFacCliL:cValPr2
   ::oDbf:cNomVl2    := retValProp( ::oFacCliL:cCodPr2 + ::oFacCliL:cValPr2 )
   ::oDbf:cLote      := ::oFacCliL:cLote

   ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )

   ::oDbf:nTotCaj    := ::oFacCliL:nCanEnt
   ::oDbf:nTotUni    := nTotUni
   ::oDbf:nTotPes    := ::oDbf:nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nBase      := nTotImpUni
   ::oDbf:nIva       := nIvaLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
   ::oDbf:nTotImp    := ::oDbf:nBase + ::oDbf:nIva
   ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
   ::oDbf:nTotVol    := ::oDbf:nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nVolumen" )
   ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
   ::oDbf:nTotCos    := nTotCosUni
   ::oDbf:nDtoAtp    := nImpDtoAtp
   ::oDbf:nMargen    := nTotImpUni - nTotCosUni - nImpDtoAtp

   if nTotUni <> 0 .AND. nTotCosUni <> 0
      ::oDbf:nRentab := nRentabilidad( nTotImpUni, nImpDtoAtp, nTotCosUni )
      ::oDbf:nPreMed := nTotImpUni / nTotUni
      ::oDbf:nCosMed := nTotCosUni / nTotUni
   else
      ::oDbf:nRentab := 0
      ::oDbf:nPreMed := 0
      ::oDbf:nCosMed := 0
   end

   ::oDbf:cNumDoc    := ::oFacCliL:cSerie + "/" + Alltrim( Str( ::oFacCliL:nNumFac ) ) + "/" + ::oFacCliL:cSufFac
   ::oDbf:cTipDoc    := "Factura"

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_AddRFacRec( ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local nImpDtoAtp





   nTotUni              := nTotNFacRec( ::oFacRecL:cAlias )
   nTotImpUni           := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut )
   nImpDtoAtp           := 0

   if ::lCosAct .OR. ::oFacRecL:nCosDiv == 0
      nTotCosUni        := nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotUni
   else
      nTotCosUni        := ::oFacRecL:nCosDiv * nTotUni
   end

   ::oDbf:Append()

   ::oDbf:cCodArt       := ::oFacRecL:cRef
   ::oDbf:cNomArt       := ::oFacRecL:cDetalle
   ::oDbf:cCodPr1       := ::oFacRecL:cCodPr1
   ::oDbf:cNomPr1       := retProp( ::oFacRecL:cCodPr1 )
   ::oDbf:cCodPr2       := ::oFacRecL:cCodPr2
   ::oDbf:cNomPr2       := retProp( ::oFacRecL:cCodPr2 )
   ::oDbf:cValPr1       := ::oFacRecL:cValPr1
   ::oDbf:cNomVl1       := retValProp( ::oFacRecL:cCodPr1 + ::oFacRecL:cValPr1 )
   ::oDbf:cValPr2       := ::oFacRecL:cValPr2
   ::oDbf:cNomVl2       := retValProp( ::oFacRecL:cCodPr2 + ::oFacRecL:cValPr2 )
   ::oDbf:cLote         := ::oFacRecL:cLote

   ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )

   ::oDbf:nTotCaj       := ::oFacRecL:nCanEnt
   ::oDbf:nTotUni       := nTotUni
   ::oDbf:nTotPes       := ::oDbf:nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nBase         := nTotImpUni
   ::oDbf:nIva          := nIvaLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
   ::oDbf:nTotImp       := ::oDbf:nBase + ::oDbf:nIva
   ::oDbf:nPreKgr       := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
   ::oDbf:nTotVol       := ::oDbf:nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nVolumen" )
   ::oDbf:nPreVol       := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
   ::oDbf:nTotCos       := nTotCosUni
   ::oDbf:nDtoAtp       := nImpDtoAtp
   ::oDbf:nMargen       := nTotImpUni - nTotCosUni - nImpDtoAtp

   if nTotUni <> 0 .AND. nTotCosUni <> 0
      ::oDbf:nRentab    := nRentabilidad( nTotImpUni, nImpDtoAtp, nTotCosUni )
      ::oDbf:nPreMed    := nTotImpUni / nTotUni
      ::oDbf:nCosMed    := nTotCosUni / nTotUni
   else
      ::oDbf:nRentab    := 0
      ::oDbf:nPreMed    := 0
      ::oDbf:nCosMed    := 0
   end

   ::oDbf:cNumDoc       := ::oFacRecL:cSerie + "/" + Alltrim( Str( ::oFacRecL:nNumFac ) ) + "/" + ::oFacRecL:cSufFac
   ::oDbf:cTipDoc       := "Fac. rec."

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TInfCli_IncluyeCero( ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli





   ::oDbfCli:GoTop()
   while !::oDbfCli:Eof()


      if ( ::lAllCli .OR. ( ::oDbfCli:Cod >= ::cCliOrg .AND. ::oDbfCli:Cod <= ::cCliDes ) ) .AND. !::oDbf:Seek( ::oDbfCli:Cod )

         ::oDbf:Append()
         ::oDbf:Blank()
         ::oDbf:cCodCli    := ::oDbfCli:Cod
         ::oDbf:cNomCli    := ::oDbfCli:Titulo
         ::oDbf:Save()

      end

      ::oDbfCli:Skip()

   end

RETURN ( self )



static FUNCTION TInfCli_CalTotal( oColumn ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   msginfo( oColumn:cTitle )

Return ( Self )



static FUNCTION TInfCli_NewGroup( lDesPrp ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   if lDesPrp




      ::AddGroup( {|| ::oDbf:cCodCli + ::oDbf:cCodArt + ::oDbf:cCodPr1 + ::oDbf:cCodPr2 + ::oDbf:cValPr1 + ::oDbf:cValPr2 + ::oDbf:cLote }, {|| if( !Empty( ::oDbf:cValPr1 ), AllTrim( ::oDbf:cNomPr1 ) + ": " + AllTrim( ::oDbf:cNomVl1 ) + " - ", "" ) +  if( !Empty( ::oDbf:cValPr2 ), AllTrim( ::oDbf:cNomPr2 ) + ": " + AllTrim( ::oDbf:cNomVl2 ) + " - ", "" ) +  if( !Empty( ::oDbf:cLote ), "Lote:" + AllTrim( ::oDbf:cLote ), Space(1) ) }, {|| Space(1) } )
   end

RETURN ( Self )



static FUNCTION TInfCli_QuiGroup( lDesPrp ) ; local Self AS CLASS TInfCli := QSelf() AS CLASS TInfCli

   if lDesPrp
      ::DelGroup()
   end

RETURN ( Self )
