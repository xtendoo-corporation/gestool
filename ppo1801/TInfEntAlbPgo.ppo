#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfEntAlbPgo.prg"
_HB_CLASS TInfEntAlbPgo ; function TInfEntAlbPgo ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfEntAlbPgo", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfEntAlbPgo() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliP"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TInfEntAlbPgo_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfEntAlbPgo_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfEntAlbPgo_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfEntAlbPgo_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfEntAlbPgo_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfEntAlbPgo ;



static FUNCTION TInfEntAlbPgo_create( ) ; local Self AS CLASS TInfEntAlbPgo := QSelf() AS CLASS TInfEntAlbPgo


   ::AddField( "cNumEnt",  "C",  14, 0, {|| "@!" },      "Documento",        .T., "Documento",                18, .F. )
   ::AddField( "dEntrega", "D",   8, 0, {|| "@!" },      "Fecha",            .T., "Fecha de la entrega",      12, .F. )
   ::AddField( "dFecAlb",  "D",   8, 0, {|| "@!" },      "Fecha albarán",    .F., "Fecha del albarán",        12, .F. )
   ::AddField( "cCodCli",  "C",  12, 0, {|| "@!" },      "Cód. cli.",        .T., "Código cliente",            8, .F. )
   ::AddField( "cNomCli",  "C",  50, 0, {|| "@!" },      "Cliente",          .T., "Nombre cliente",           30, .F. )
   ::AddField( "cDescrip", "C", 100, 0, {|| "@!" },      "Concepto",         .T., "Concepto de la entrega",   30, .F. )
   ::AddField( "cPgdoPor", "C",  50, 0, {|| "@!" },      "Pagado por.",      .F., "Pagado por",               12, .F. )
   ::AddField( "nImporte", "N",  16, 6, {|| ::cPicOut }, "Importe",          .T., "Importe de la entrega",    12, .T. )
   ::AddField( "cNumAlb",  "C",  12, 0, {|| "@!" },      "Albarán",          .F., "Albarán",                  12, .F. )
   ::AddField( "cCodCaj",  "C",   3, 0, {|| "@!" },      "Caja",             .F., "Código de la caja",        12, .F. )
   ::AddField( "cCodAge",  "C",   3, 0, {|| "@!" },      "Agente",           .F., "Código del agente",        12, .F. )
   ::AddField( "cCodPgo",  "C",   2, 0, {|| "@!" },      "F. pago",          .F., "Forma de pago",            12, .F. )
   ::AddField( "cNomPgo",  "C",  30, 0, {|| "@!" },      "Pago",             .F., "Nombre de la f. Pago",     12, .F. )

   ::AddTmpIndex( "CCODPGO", "CCODPGO" )

   ::AddGroup( {|| ::oDbf:cCodPgo }, {|| "F. Pago: " + Rtrim( ::oDbf:cCodPgo ) + "-" + AllTrim( ::oDbf:cNomPgo ) }, {|| "Total f. pago..." } )

RETURN ( self )



static FUNCTION TInfEntAlbPgo_OpenFiles( ) ; local Self AS CLASS TInfEntAlbPgo := QSelf() AS CLASS TInfEntAlbPgo

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()
   ::oAlbCliP := DbfServer( "ALBCLIP.DBF", ):NewOpen( "ALBCLIP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliP:AddBag( "ALBCLIP.CDX" ) ; ::oAlbCliP:AddBag( ) ; ::oAlbCliP:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfEntAlbPgo_CloseFiles( ) ; local Self AS CLASS TInfEntAlbPgo := QSelf() AS CLASS TInfEntAlbPgo

   if !Empty( ::oAlbCliP ) .AND. ::oAlbCliP:Used()
      ::oAlbCliP:End()
   end
   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliP := nil

RETURN ( Self )



static FUNCTION TInfEntAlbPgo_lResource( cFld ) ; local Self AS CLASS TInfEntAlbPgo := QSelf() AS CLASS TInfEntAlbPgo

   if !::StdResource( "INFENTPED" )
      return .F.
   end

   if !::oDefFpgInf( 100, 101, 110, 111, 120 )
      return .F.
   end

   if !::oDefCliInf( 130, 131, 140, 141, , 150 )
      return .F.
   end

   ::CreateFilter( aItmAlbPgo(), ::oAlbCliP:cAlias )

   ::oMtrInf:SetTotal( ::oAlbCliP:Lastrec() )

RETURN .T.






static FUNCTION TInfEntAlbPgo_lGenerate( ) ; local Self AS CLASS TInfEntAlbPgo := QSelf() AS CLASS TInfEntAlbPgo

   local cExpresion  := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "F. pago  : " + if( ::lAllFpg, "Todas", AllTrim( ::cFpgDes ) + " > " + AllTrim( ::cFpgHas ) ) }, {|| "Clientes : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) } }

   ::oAlbCliP:OrdSetFocus( "dEntrega" )

   cExpresion        := '!lPasado .and. dEntrega >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrega <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllFpg
      cExpresion     += ' .and. cCodPgo >= "' + Rtrim( ::cFpgDes ) + '" .and. cCodPgo <= "' + Rtrim( ::cFpgHas ) + '"'
   end

   if !::lAllCli
      cExpresion     += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpresion     += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliP:cFile ), ::oAlbCliP:OrdKey(), ( cExpresion ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbCliP:OrdKeyCount() )

   ::oAlbCliP:GoTop()

   while !::lBreak .AND. !::oAlbCliP:Eof()

      if lChkSer( ::oAlbCliP:cSerAlb, ::aSer )

         ::oDbf:Append()

         ::oDbf:cNumEnt     := ::oAlbCLiP:cSerAlb + "/" + AllTrim( Str( ::oAlbCliP:nNumAlb ) ) + "/" + ::oAlbCliP:cSufAlb + "-" + AllTrim( Str( ::oAlbCliP:nNumRec ) )
         ::oDbf:dEntrega    := ::oAlbCliP:dEntrega
         ::oDbf:cCodCli     := ::oAlbCliP:cCodCli
         if ::oAlbCliT:Seek( ::oAlbCLiP:cSerAlb + Str( ::oAlbCliP:nNumAlb ) + ::oAlbCliP:cSufAlb )
            ::oDbf:cNomCli  := ::oAlbCliT:cNomCLi
            ::oDbf:dFecAlb  := ::oAlbCliT:dFecAlb
         end
         ::oDbf:nImporte    := ::oAlbCliP:nImporte
         ::oDbf:cDescrip    := ::oAlbCliP:cDesCrip
         ::oDbf:cPgdoPor    := ::oAlbCliP:cPgdoPor
         ::oDbf:cNumAlb     := ::oAlbCLiP:cSerAlb + "/" + AllTrim( Str( ::oAlbCliP:nNumAlb ) ) + "/" + ::oAlbCliP:cSufAlb
         ::oDbf:cCodCaj     := ::oAlbCliP:cCodCaj
         ::oDbf:cCodAge     := ::oAlbCliP:cCodAge
         ::oDbf:cCodPgo     := ::oAlbCliP:cCodPgo
         ::oDbf:cNomPgo     := cNbrFPago( ::oAlbCliP:cCodPgo, ::oDbfFpg )

         ::oDbf:Save()

      end

      ::oAlbCliP:Skip()

      ::oMtrInf:AutoInc( ::oAlbCliP:OrdKeyNo() )

   end

   ::oAlbCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliP:cFile ) )

   ::oMtrInf:AutoInc( ::oAlbCliP:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
