#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfEntPedPgo.prg"
_HB_CLASS TInfEntPedPgo ; function TInfEntPedPgo ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfEntPedPgo", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfEntPedPgo() ) ) ;

   _HB_MEMBER { AS OBJECT oPedCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oDivisas } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDivisas"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfEntPedPgo_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfEntPedPgo_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfEntPedPgo_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfEntPedPgo_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfEntPedPgo_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfEntPedPgo ;



static FUNCTION TInfEntPedPgo_Create( ) ; local Self AS CLASS TInfEntPedPgo := QSelf() AS CLASS TInfEntPedPgo


   ::AddField( "cNumEnt",  "C",  14, 0, {|| "@!" },      "Documento",         .T., "Documento",                   18, .F. )
   ::AddField( "dEntrega", "D",   8, 0, {|| "@!" },      "Fecha",             .T., "Fecha de la entrega",         12, .F. )
   ::AddField( "dFecPed",  "D",   8, 0, {|| "@!" },      "Fecha pedido",      .F., "Fecha del pedido",            12, .F. )
   ::AddField( "cCodCli",  "C",  12, 0, {|| "@!" },      "Cód. cli.",         .T., "Código cliente",               8, .F. )
   ::AddField( "cNomCli",  "C",  50, 0, {|| "@!" },      "Cliente",           .T., "Nombre cliente",              30, .F. )
   ::AddField( "cDescrip", "C", 100, 0, {|| "@!" },      "Concepto",          .T., "Concepto de la entrega",      30, .F. )
   ::AddField( "cPgdoPor", "C",  50, 0, {|| "@!" },      "Pagado por.",       .F., "Pagado por",                  12, .F. )
   ::AddField( "nImporte", "N",  16, 6, {|| ::cPicOut }, "Importe",           .T., "Importe de la entrega",       12, .T. )
   ::AddField( "nTotal",   "N",  16, 6, {|| ::cPicOut }, "Total",             .T., "Total pedido",                12, .T. )
   ::AddField( "cNumPed",  "C",  12, 0, {|| "@!" },      "Pedido",            .F., "Pedido",                      12, .F. )
   ::AddField( "cCodCaj",  "C",   3, 0, {|| "@!" },      "Caja",              .F., "Código de la caja",           12, .F. )
   ::AddField( "cCodAge",  "C",   3, 0, {|| "@!" },      "Agente",            .F., "Código del agente",           12, .F. )
   ::AddField( "cCodPgo",  "C",   2, 0, {|| "@!" },      "Fp",                .F., "Forma de pago",               12, .F. )
   ::AddField( "cNomPgo",  "C",  30, 0, {|| "@!" },      "Forma de pago",     .F., "Nombre de la forma de pago",  12, .F. )

   ::AddTmpIndex( "CCODPGO", "CCODPGO" )

   ::AddGroup( {|| ::oDbf:cCodPgo }, {|| "Forma pago: " + Rtrim( ::oDbf:cCodPgo ) + "-" + AllTrim( ::oDbf:cNomPgo ) }, {|| "Total forma pago..." } )

RETURN ( self )



static FUNCTION TInfEntPedPgo_OpenFiles( ) ; local Self AS CLASS TInfEntPedPgo := QSelf() AS CLASS TInfEntPedPgo

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oPedCliT := TDataCenter():oPedCliT()

      ::oPedCliL := DbfServer( "PEDCLIL.DBF", ):NewOpen( "PEDCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliL:AddBag( "PEDCLIL.CDX" ) ; ::oPedCliL:AddBag( ) ; ::oPedCliL:AutoIndex()

      ::oPedCliP := DbfServer( "PEDCLIP.DBF", ):NewOpen( "PEDCLIP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliP:AddBag( "PEDCLIP.CDX" ) ; ::oPedCliP:AddBag( ) ; ::oPedCliP:AutoIndex()

      ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

      ::oDivisas := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDivisas:AddBag( "DIVISAS.CDX" ) ; ::oDivisas:AddBag( ) ; ::oDivisas:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos de pedidos" )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfEntPedPgo_CloseFiles( ) ; local Self AS CLASS TInfEntPedPgo := QSelf() AS CLASS TInfEntPedPgo

   if !Empty( ::oPedCliP ) .AND. ::oPedCliP:Used()
      ::oPedCliP:End()
   end

   if !Empty( ::oPedCliT ) .AND. ::oPedCliT:Used()
      ::oPedCliT:End()
   end

   if !Empty( ::oPedCliL ) .AND. ::oPedCliL:Used()
      ::oPedCliL:End()
   end

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   if !Empty( ::oDivisas ) .AND. ::oDivisas:Used()
      ::oDivisas:End()
   end

   ::oPedCLiT  := nil
   ::oPedCliL  := nil
   ::oPedCliP  := nil
   ::oDbfIva   := nil
   ::oDivisas  := nil

RETURN ( Self )



static FUNCTION TInfEntPedPgo_lResource( cFld ) ; local Self AS CLASS TInfEntPedPgo := QSelf() AS CLASS TInfEntPedPgo

   if !::StdResource( "INFENTPED" )
      return .F.
   end

   if !::oDefFpgInf( 100, 101, 110, 111, 120 )
      return .F.
   end

   if !::oDefCliInf( 130, 131, 140, 141, , 150 )
      return .F.
   end

   ::CreateFilter( aPedCliPgo(), ::oPedCliP:cAlias )

   ::oMtrInf:SetTotal( ::oPedCliP:Lastrec() )

RETURN .T.






static FUNCTION TInfEntPedPgo_lGenerate( ) ; local Self AS CLASS TInfEntPedPgo := QSelf() AS CLASS TInfEntPedPgo

   local cExpresion  := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader         := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "F. pago  : " + if( ::lAllFpg, "Todas", AllTrim( ::cFpgDes ) + " > " + AllTrim( ::cFpgHas ) ) }, {|| "Clientes : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) } }

   ::oPedCliP:OrdSetFocus( "dEntrega" )

   cExpresion        := '!lPasado .and. dEntrega >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrega <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllFpg
      cExpresion     += ' .and. cCodPgo >= "' + Rtrim( ::cFpgDes ) + '" .and. cCodPgo <= "' + Rtrim( ::cFpgHas ) + '"'
   end

   if !::lAllCli
      cExpresion     += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpresion     += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oPedCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oPedCliP:cFile ), ::oPedCliP:OrdKey(), ( cExpresion ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oPedCliP:OrdKeyCount() )

   ::oPedCliP:GoTop()

   while !::lBreak .AND. !::oPedCliP:Eof()

      if lChkSer( ::oPedCliP:cSerPed, ::aSer )

         ::oDbf:Append()

         if ::oPedCliT:Seek( ::oPedCLiP:cSerPed + Str( ::oPedCliP:nNumPed ) + ::oPedCliP:cSufPed )

            ::oDbf:cNomCli  := ::oPedCliT:cNomCli
            ::oDbf:dFecPed  := ::oPedCliT:dFecPed

         end

         ::oDbf:cNumEnt     := ::oPedCLiP:cSerPed + "/" + AllTrim( Str( ::oPedCliP:nNumPed ) ) + "/" + ::oPedCliP:cSufPed + "-" + AllTrim( Str( ::oPedCliP:nNumRec ) )
         ::oDbf:dEntrega    := ::oPedCliP:dEntrega
         ::oDbf:cCodCli     := ::oPedCliP:cCodCli
         ::oDbf:nImporte    := ::oPedCliP:nImporte
         ::oDbf:cDescrip    := ::oPedCliP:cDesCrip
         ::oDbf:cPgdoPor    := ::oPedCliP:cPgdoPor
         ::oDbf:cNumPed     := ::oPedCLiP:cSerPed + "/" + AllTrim( Str( ::oPedCliP:nNumPed ) ) + "/" + ::oPedCliP:cSufPed
         ::oDbf:cCodCaj     := ::oPedCliP:cCodCaj
         ::oDbf:cCodAge     := ::oPedCliP:cCodAge
         ::oDbf:cCodPgo     := ::oPedCliP:cCodPgo
         ::oDbf:cNomPgo     := cNbrFPago( ::oPedCliP:cCodPgo, ::oDbfFpg )
         ::oDbf:nTotal      := nTotPedCli( ::oPedCLiP:cSerPed + Str( ::oPedCliP:nNumPed ) + ::oPedCliP:cSufPed, ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oDbfFpg:cAlias, nil, nil, .F. )

         ::oDbf:Save()

      end

      ::oPedCliP:Skip()

      ::oMtrInf:AutoInc( ::oPedCliP:OrdKeyNo() )

   end

   ::oPedCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oPedCliP:cFile ) )

   ::oMtrInf:AutoInc( ::oPedCliP:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
