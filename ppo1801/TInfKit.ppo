#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfKit.prg"
_HB_CLASS TInfKit ; function TInfKit ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfKit", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfKit() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfKit } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfKit"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfKit_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfKit_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfKit_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfKit_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfKit_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfKit ;



static FUNCTION TInfKit_Create( ) ; local Self AS CLASS TInfKit := QSelf() AS CLASS TInfKit

   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },            "Código",        .T.,  "Código artículo",          8 )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },            "Componente",    .T.,  "Descripción breve",       50 )
   ::AddField( "cCodEsc", "C", 18, 0, {|| "@!" },            "Cód.",          .F.,  "Código",                   8 )
   ::AddField( "cNomEsc", "C", 50, 0, {|| "@!" },            "Compuesto",     .F.,  "Compuesto",               50 )
   ::AddField( "nUndKit", "N", 16, 6, {|| MasEsc() },        cNombreUnidades(),.T.,  cNombreunidades() + " de escandallo",  12 )
   ::AddField( "cUniDad", "C",  2, 0, {|| "@!" },            "Und.",          .T.,  "Unidad de medición",       4 )
   ::AddField( "nPreKit", "N", 16, 6, {|| ::cPicImp },       "Precio",        .F.,  "Precio de escandallo",    12 )
   ::AddField( "nTotal",  "N", 16, 6, {|| ::cPicImp },       "Total",         .F.,  "Total",                   12 )

   ::AddTmpIndex( "cCodEsc", "cCodEsc" )

   ::AddGroup( {|| ::oDbf:cCodEsc },{|| "Compuesto : " + Rtrim( ::oDbf:cCodEsc ) + "-" + Rtrim( ::oDbf:cNomEsc ) }, {||"Total compuesto..."} )

RETURN ( Self )



static FUNCTION TInfKit_OpenFiles( ) ; local Self AS CLASS TInfKit := QSelf() AS CLASS TInfKit

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfKit := DbfServer( "ARTKIT.DBF", ):NewOpen( "ARTKIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfKit:AddBag( "ARTKIT.CDX" ) ; ::oDbfKit:AddBag( ) ; ::oDbfKit:AutoIndex()
   ::oDbfKit:OrdSetFocus( "cCodKit" )

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfKit_CloseFiles( ) ; local Self AS CLASS TInfKit := QSelf() AS CLASS TInfKit

   if !Empty( ::oDbfKit ) .AND. ::oDbfKit:Used()
      ::oDbfKit:End()
   end

   ::oDbfKit := nil


RETURN ( Self )



static FUNCTION TInfKit_lResource( cFld ) ; local Self AS CLASS TInfKit := QSelf() AS CLASS TInfKit

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.

   if !::StdResource( "INF_ESCAN" )
      return .F.
   end





   if !::lDefArtInf( 70, 80, 90, 100, 800 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oDbfKit:Lastrec() )

   ::CreateFilter( aItmKit(), ::oDbfKit:cAlias )

RETURN .T.






static FUNCTION TInfKit_lGenerate( ) ; local Self AS CLASS TInfKit := QSelf() AS CLASS TInfKit

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Artículos : " + AllTrim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes ) } }

   ::oDbfKit:OrdSetFocus( "CCODKIT" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfKit:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfKit:cFile ), ::oDbfKit:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oDbfKit:GoTop()

   while !::lBreak .AND. !::oDbfKit:Eof()


      if ( ::lAllArt .OR.( ::oDbfKit:cCodKit >= ::cArtOrg .AND. ::oDbfKit:cCodKit <= ::cArtDes ) ) .AND. ::oDbfArt:Seek( ::oDbfKit:cRefKit )

         while ::oDbfKit:cRefKit == ::oDbfArt:Codigo .AND. !::oDbfArt:Eof()

            ::oDbf:Append()

            ::oDbf:cCodArt := ::oDbfArt:Codigo
            ::oDbf:cNomArt := ::oDbfArt:Nombre
            ::oDbf:cCodEsc := ::oDbfKit:cCodKit
            ::oDbf:cNomEsc := RetArticulo( ::oDbfKit:cCodKit, ::oDbfArt )
            ::oDbf:nUndKit := ::oDbfKit:nUndKit
            ::oDbf:cUniDad := ::oDbfKit:cUniDad
            ::oDbf:nPreKit := nCosto( ::oDbf:cCodArt, ::oDbfArt:cAlias, ::oDbfKit:cAlias, .F., ::cDivInf, ::oDbfDiv:cAlias )
            ::oDbf:nTotal := ::oDbf:nUndKit * ::oDbf:nPreKit

            ::oDbf:Save()

            ::oDbfArt:Skip()

         end

      end

      ::oDbfKit:Skip()

      ::oMtrInf:AutoInc( ::oDbfKit:OrdKeyNo() )

   end

   ::oDbfKit:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfKit:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfKit:Lastrec() )

   ::oDlg:Enable()

   RETURN ( ::oDbf:LastRec() > 0 )
