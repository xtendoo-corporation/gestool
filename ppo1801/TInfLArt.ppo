#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfLArt.prg"
_HB_CLASS TInfLArt ; function TInfLArt ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfLArt", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfLArt() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfLArt_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfLArt_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfLArt_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfLArt_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfLArt_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfLArt ;



static FUNCTION TInfLArt_OpenFiles( ) ; local Self AS CLASS TInfLArt := QSelf() AS CLASS TInfLArt

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfLArt_CloseFiles( ) ; local Self AS CLASS TInfLArt := QSelf() AS CLASS TInfLArt

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oDbfArt   := nil

RETURN ( Self )



static FUNCTION TInfLArt_Create( ) ; local Self AS CLASS TInfLArt := QSelf() AS CLASS TInfLArt

   ::AddField( "cTypDoc",   "C", 25, 0, {|| "" },         "Tip. Doc.",     .T., "Tipo de documento",     25, .F. )
   ::AddField( "dFecDoc",   "D",  8, 0, {|| "" },         "Fecha",         .T., "Fecha",                 12, .F. )
   ::AddField( "cNumDoc",   "C", 12, 0, {|| "" },         "Num. Doc",      .T., "Número de documento",   12, .F. )
   ::AddField( "cCodDoc",   "C", 12, 0, {|| "" },         "Código",        .F., "Código",                12, .F. )
   ::AddField( "cNomDoc",   "C", 50, 0, {|| "" },         "Nombre",        .T., "Nombre",                40, .F. )
   ::AddField( "cAlmDoc",   "C",  3, 0, {|| "" },         "Alm.",          .T., "Almacén",                5, .F. )
   ::AddField( "nUndDoc",   "N", 16, 6, {|| MasUnd() },   "Unidades",      .T., "Unidades",              12, .T. )
   ::AddField( "nDtoDoc",   "N", 16, 6, {|| "" },         "Descuento",     .T., "Descuento",             16, .F. )
   ::AddField( "nImpDoc",   "N", 16, 6, {|| ::cPicImp },  "Importe",       .T., "Importe",               16, .T. )
   ::AddField( "nTotDoc",   "N", 16, 6, {|| ::cPicImp },  "Total",         .T., "Total",                 16, .T. )

   ::AddTmpIndex ( "dFecDoc", "dFecDoc" )

RETURN ( Self )



static FUNCTION TInfLArt_lResource( cFld ) ; local Self AS CLASS TInfLArt := QSelf() AS CLASS TInfLArt

   if !::StdResource( "INF_ARTL" )
      return .F.
   end

   ::oBtnFilter:Disable()

   do case
      case  ::xOthers[2] == "Todos"
         ::dIniInf   := CtoD( "01/01/2000" )
         ::dFinInf   := CtoD( "31/12/2020" )
      case  Val( ::xOthers[2]) == Year( GetSysDate() )
         ::dIniInf   := CtoD( "01/01/" + Str( Year( GetSysDate() ) ) )
         ::dFinInf   := GetSysDate()
      otherwise
         ::dIniInf   := CtoD( "01/01/" + ::xOthers[2] )
         ::dFinInf   := CtoD( "31/12/" + ::xOthers[2] )
   end





   if !::oDefCliInf( 110, 120, 130, 140, , 160 )
      return .F.
   end





   if !::oDefPrvInf( 70, 80, 90, 100, 150 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::xOthers[1]:Lastrec() )

RETURN .T.






static FUNCTION TInfLArt_lGenerate( ) ; local Self AS CLASS TInfLArt := QSelf() AS CLASS TInfLArt

   ::oDlg:Disable()
   ::oDbf:Zap()

   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) } }

   ::xOthers[1]:GoTop()

   WHILE !::xOthers[1]:Eof()





      if ::xOthers[1]:dFecDoc >= ::dIniInf                                                                  .AND. ::xOthers[1]:dFecDoc <= ::dFinInf                                                                  .AND. ( ::lAllCli .OR. ( ::xOthers[1]:cCodDoc >= ::cCliOrg .AND. ::xOthers[1]:cCodDoc <= ::cCliDes ) )   .AND. ( ::lAllPrv .OR. ( ::xOthers[1]:cCodDoc >= ::cPrvOrg .AND. ::xOthers[1]:cCodDoc <= ::cPrvDes ) )   .AND. lChkSer( left( ::xOthers[1]:cNumDoc, 1 ) , ::aSer )

         ::oDbf:Append()

         ::oDbf:cTypDoc  := cTextDocument( ::xOthers[1]:nTypDoc )
         ::oDbf:dFecDoc  := ::xOthers[1]:dFecDoc
         ::oDbf:cNumDoc  := cMaskNumDoc( ::xOthers[1] )
         ::oDbf:cCodDoc  := ::xOthers[1]:cCodDoc
         ::oDbf:cNomDoc  := ::xOthers[1]:cNomDoc
         ::oDbf:cAlmDoc  := ::xOthers[1]:cAlmDoc
         ::oDbf:nUndDoc  := ::xOthers[1]:nUndDoc
         ::oDbf:nDtoDoc  := ::xOthers[1]:nDtoDoc
         ::oDbf:nImpDoc  := ::xOthers[1]:nImpDoc
         ::oDbf:nTotDoc  := ::xOthers[1]:nTotDoc

         ::oDbf:Save()

      end

      ::xOthers[1]:Skip()

      ::oMtrInf:AutoInc( ::xOthers[1]:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::xOthers[1]:LastRec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
