#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfLCli.prg"
_HB_CLASS TInfLCli ; function TInfLCli ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfLCli", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfLCli() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfCli } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfCli"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfLCli_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfLCli_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfLCli_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfLCli_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfLCli_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfLCli ;



static FUNCTION TInfLCli_OpenFiles( ) ; local Self AS CLASS TInfLCli := QSelf() AS CLASS TInfLCli

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfLCli_CloseFiles( ) ; local Self AS CLASS TInfLCli := QSelf() AS CLASS TInfLCli

   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

   ::oDbfCli   := nil

RETURN ( Self )



static FUNCTION TInfLCli_Create( ) ; local Self AS CLASS TInfLCli := QSelf() AS CLASS TInfLCli

   ::AddField( "cTypDoc",   "C", 25, 0, {|| "" },         "Tip. Doc.",     .T., "Tipo de documento",     25, .F. )
   ::AddField( "dFecDoc",   "D",  8, 0, {|| "" },         "Fecha",         .T., "Fecha",                 12, .F. )
   ::AddField( "cNumDoc",   "C", 12, 0, {|| "" },         "Num. Doc",      .T., "Número de documento",   12, .F. )
   ::AddField( "cCodCli",   "C", 25, 0, {|| "" },         "Cod.Cli.",      .F., "Código Cliente",        15, .F. )
   ::AddField( "cNomCli",   "C", 50, 0, {|| "" },         "Nombre",        .F., "Nombre",                40, .F. )
   ::AddField( "cAlmDoc",   "C",  3, 0, {|| "" },         "Alm.",          .T., "Almacén",                5, .F. )
   ::AddField( "nImpDoc",   "N", 16, 6, {|| ::cPicImp },  "Importe",       .T., "Importe",               16, .T. )
   ::AddField( "cDivisa",   "C", 10, 0, {|| "" },         "Div.",          .F., "Divisa",                 5, .F. )

   ::AddTmpIndex ( "dFecDoc", "dFecDoc" )

RETURN ( Self )



static FUNCTION TInfLCli_lResource( cFld ) ; local Self AS CLASS TInfLCli := QSelf() AS CLASS TInfLCli

   if !::StdResource( "INF_CLIL" )
      return .F.
   end

   ::oBtnFilter:Disable()

   do case
      case  ::xOthers[2] == "Todos"
         ::dIniInf   := CtoD( "01/01/2000" )
         ::dFinInf   := CtoD( "31/12/2020" )
      case  Val( ::xOthers[2]) == Year( GetSysDate() )
         ::dIniInf   := CtoD( "01/01/" + Str( Year( GetSysDate() ) ) )
         ::dFinInf   := GetSysDate()
      otherwise
         ::dIniInf   := CtoD( "01/01/" + ::xOthers[2] )
         ::dFinInf   := CtoD( "31/12/" + ::xOthers[2] )
   end





   ::oMtrInf:SetTotal( ::xOthers[1]:Lastrec() )

RETURN .T.






static FUNCTION TInfLCli_lGenerate( ) ; local Self AS CLASS TInfLCli := QSelf() AS CLASS TInfLCli

   ::oDlg:Disable()
   ::oDbf:Zap()

   ::xOthers[1]:GoTop()


   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Cliente : " + AllTrim( ::xOthers[1]:cCodCli ) + " - " + ::xOthers[1]:cNomCli } }

   while !::xOthers[1]:Eof()



      if ::xOthers[1]:dFecDoc >= ::dIniInf                                                               .AND. ::xOthers[1]:dFecDoc <= ::dFinInf                                                               .AND. lChkSer( left( ::xOthers[1]:cNumDoc, 1 ) , ::aSer )

         ::oDbf:Append()
         ::oDbf:cTypDoc  := cTextoDocumento( ::xOthers[1]:nTypDoc )
         ::oDbf:dFecDoc  := ::xOthers[1]:dFecDoc
         ::oDbf:cNumDoc  := cMaskNumDoc( ::xOthers[1] )
         ::oDbf:cCodCli  := ::xOthers[1]:cCodCli
         ::oDbf:cNomCli  := ::xOthers[1]:cNomCli
         ::oDbf:cAlmDoc  := ::xOthers[1]:cAlmDoc
         ::oDbf:nImpDoc  := ::xOthers[1]:nImpDoc
         ::oDbf:cDivisa  := ::xOthers[1]:cDivisa

         ::oDbf:Save()

      end

      ::xOthers[1]:Skip()

      ::oMtrInf:AutoInc( ::xOthers[1]:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::xOthers[1]:LastRec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
