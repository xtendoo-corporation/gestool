#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfListInci.prg"
_HB_CLASS TInfListInci ; function TInfListInci ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfListInci", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfListInci() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfInci } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfInci"}, .F. )
   _HB_MEMBER { AS CHARACTER cInciOrg } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cInciOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cInciDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cInciDes"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TInfListInci_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfListInci_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfListInci_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfListInci_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfListInci ;



static FUNCTION TInfListInci_create( ) ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   ::AddField( "cCodInci", "C",  3, 0, {|| "@!" },        "Código ",       .T., "Código",           15, .F. )
   ::AddField( "cNomInci", "C", 50, 0, {|| "@!" },        "Incidencia",    .T., "Incidencia",       50, .F. )

   ::AddTmpIndex( "CCODINCI", "CCODINCI" )

   ::lDefSerInf := .F.
   ::lDefFecInf := .F.
   ::lDefDivInf := .F.

RETURN ( self )



static FUNCTION TInfListInci_OpenFiles( ) ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfListInci_CloseFiles( ) ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   if !Empty( ::oDbfInci ) .AND. ::oDbfInci:Used()
      ::oDbfInci:End()
   end

   ::oDbfInci := nil

RETURN ( Self )






static FUNCTION TInfListInci_lGenerate( ) ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha                : " + Dtoc( Date() ) }, {|| "Tipos de incidencias : " + AllTrim( ::cInciOrg ) + " > " + AllTrim( ::cInciDes ) } }

   ::oDbfInci:GoTop()
   while !::lBreak .AND. !::oDbfInci:Eof()

      if ::oDbfInci:cCodInci >= ::cInciOrg .AND. ::odbfInci:cCodInci <= ::cInciDes .AND. ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:cCodInci := ::oDbfInci:cCodInci
         ::oDbf:cNomInci := ::oDbfInci:cNomInci

         ::oDbf:Save()

      end

      ::oDbfInci:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfInci:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
