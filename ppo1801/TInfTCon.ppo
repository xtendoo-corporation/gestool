#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInfTCon.prg"
_HB_CLASS TInfTCon ; function TInfTCon ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfTCon", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfTCon() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "No facturados", "Facturados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT nTotSalmuera } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotSalmuera"}, .F. )
   _HB_MEMBER { AS OBJECT nTotCocidas } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotCocidas"}, .F. )
   _HB_MEMBER { AS OBJECT nTotRellenas } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotRellenas"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfTCon_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfTCon_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfTCon_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfTCon_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfTCon_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfTCon ;



static FUNCTION TInfTCon_Create( ) ; local Self AS CLASS TInfTCon := QSelf() AS CLASS TInfTCon

   ::AddField( "cCodTip",     "C",  4, 0, {|| "@!" },              "Cod.",                                    .F., "Código tipo"             ,  3 )
   ::AddField( "cNomTip",     "C", 50, 0, {|| "@!" },              "Tipo",                                    .F., "Tipo de artículo"        , 28 )
   ::AddField( "cCodCli",     "C", 12, 0, {|| "@!" },              "Cód. cli.",                               .F., "Cod. Cliente"            ,  8 )
   ::AddField( "cNomCli",     "C", 50, 0, {|| "@!" },              "Cliente",                                 .F., "Nom. Cliente"            , 30 )
   ::AddField( "cNifCli",     "C", 15, 0, {|| "@!" },              "Nif",                                     .F., "Nif"                     , 12 )
   ::AddField( "cDomCli",     "C", 35, 0, {|| "@!" },              "Domicilio",                               .F., "Domicilio"               , 20 )
   ::AddField( "cPobCli",     "C", 25, 0, {|| "@!" },              "Población",                               .F., "Población"               , 25 )
   ::AddField( "cProCli",     "C", 20, 0, {|| "@!" },              "Provincia",                               .F., "Provincia"               , 20 )
   ::AddField( "cCdpCli",     "C",  7, 0, {|| "@!" },              "Cod. Postal",                             .F., "Cod. Postal"             ,  7 )
   ::AddField( "cTlfCli",     "C", 12, 0, {|| "@!" },              "Teléfono",                                .F., "Teléfono"                , 12 )
   ::AddField( "cNumDoc",     "C", 10, 0, {|| "@!" },              "Documento",                               .F., "Documento"               , 10 )
   ::AddField( "dFecDo1",     "C", 10, 0, {|| "@!" },              "Fecha",                                   .T., "Fecha (entamada)"        , 10 )
   ::AddField( "nKilEx1",     "N", 19, 6, {|| "@EZ 999,999.999" }, "Kg. Expedidos",                           .T., "Kilogramos (entamada)"   , 15 )
   ::AddField( "cVarAc1",     "C", 25, 0, {|| "@!" },              "Variedad de aceituna",                    .T., "Variedad (entamada)"     , 20 )
   ::AddField( "cDesti1",     "C", 50, 0, {|| "@!" },              "Destinatario",                            .T., "Destinatario (entamada)" , 25 )
   ::AddField( "dFecDo2",     "C", 10, 0, {|| "@!" },              "Fecha",                                   .T., "Fecha"                   , 10 )
   ::AddField( "nKilEx2",     "N", 19, 6, {|| "@EZ 999,999.999" }, "Kg. Expedidos",                           .T., "Kilogramos"              , 15 )
   ::AddField( "cVarAc2",     "C", 25, 0, {|| "@!" },              "Variedad de aceituna",                    .T., "Variedad"                , 20 )
   ::AddField( "cDesti2",     "C", 50, 0, {|| "@!" },              "Destinatario",                            .T., "Destinatario"            , 25 )
   ::AddField( "nKgNoEn",     "n", 19, 6, {|| "@EZ 999,999.999" }, "Kg. sin entamar",                         .T., "Kg. sin entamar"         , 20 )

   ::AddTmpIndex( "cCodTip", "cCodTip + cNumDoc" )

RETURN ( Self )



static FUNCTION TInfTCon_OpenFiles( ) ; local Self AS CLASS TInfTCon := QSelf() AS CLASS TInfTCon

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "AlbCliL.DBF", ):NewOpen( "AlbCliL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "AlbCliL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfTCon_CloseFiles( ) ; local Self AS CLASS TInfTCon := QSelf() AS CLASS TInfTCon

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oDbfArt  := nil

RETURN ( Self )



static FUNCTION TInfTCon_lResource( cFld ) ; local Self AS CLASS TInfTCon := QSelf() AS CLASS TInfTCon

   local cEstado := "Todos"

  if !::StdResource( "INF_TIPCON" )
   return .F.
   end



   if !::oDefTipInf( 110, 120, 130, 140, 910 )
      return .F.
   end



   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmAlbCli(), ::oAlbCliT:cAlias )

RETURN .T.






static FUNCTION TInfTCon_lGenerate( ) ; local Self AS CLASS TInfTCon := QSelf() AS CLASS TInfTCon

   local bValid   := {|| .T. }
   local cCodTip
   local cDocMov

   ::nTotSalmuera := 0
   ::nTotCocidas  := 0
   ::nTotRellenas := 0

   ::oDlg:Disable()

   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !lFacturado( ::oAlbCliT ) }
      case ::oEstado:nAt == 2
         bValid   := {|| lFacturado( ::oAlbCliT ) }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end





   ::aHeader := {  {|| "ANEXO IV  Contabilidad de existencias   Salida de productos(aceituna, hueso, destrío y otros)"}, {|| "INDUSTRIA DE ENTAMADO número 21/41127-001                                  Campaña: 2003/2004"}, {|| "Nombre o razón social ACEITUNAS LA PALMA, S.L.                         Hoja número:" + Str( ::oReport:nPage ) }, {|| "Localidad LA PALMA DEL CONDADO          Provincia HUELVA" }, {|| "                   Aceituna transformada (entamada)                                                Aceituna rellena, hueso, destrío, y otros" } }



   ::aFooter := {  {|| "Salmuera o acetico   : " + Trans( ::nTotSalmuera,::cPicOut ) }, {|| "Cocidas para verde   : " + Trans( ::nTotCocidas, ::cPicOut ) }, {|| "Rellenas             : " + Trans( ::nTotRellenas, ::cPicOut ) } }

   ::oAlbCliT:GoTop()

   while !::oAlbCliT:Eof()




      if Eval ( bValid )                                                         .AND. ::oAlbCliT:dFecAlb >= ::dIniInf                                         .AND. ::oAlbCliT:dFecAlb <= ::dFinInf                                         .AND. lChkSer( ::oAlbCliT:cSerAlb, ::aSer )

         if ::oAlbCliL:Seek( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb )

            while ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb == ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb

               cCodTip := oRetFld( ::oAlbCliL:cRef, ::oDbfArt , "cCodTip")


               if ( ::lAllTip .OR. ( cCodTip >= ::cTipOrg .AND. cCodTip <= ::cTipDes ) )                 .AND. !::oAlbCliL:lKitChl

                  cDocMov := lTrim( ::oAlbCliL:CSERALB ) + "/" + lTrim ( Str( ::oAlbCliL:NNUMALB ) ) + "/" + lTrim ( ::oAlbCliL:CSUFALB )

                  if cCodTip == "ENT"

                     if ::oDbf:Seek( cCodTip + cDocMov )

                        ::oDbf:Load()
                        ::oDbf:nKilEx1 += nTotNAlbCli( ::oAlbCliL ) *  oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                        ::oDbf:Save()

                     else

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )
                        ::oDbf:dFecDo1 := Dtoc( ::oAlbCliT:dFecAlb )
                        ::oDbf:nKilEx1 := nTotNAlbCli( ::oAlbCliL ) *  oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                        ::oDbf:cDesti1 := lTrim( ::oAlbCliT:cNomCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti1 := lTrim( ::oAlbCliT:cDirCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti1 := lTrim( ::oAlbCliT:cPobCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti1 := "C.I.F.:" + lTrim( ::oAlbCliT:cDniCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti1 := "Doc.:" + cDocMov
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                     end

                  else

                     if ::oDbf:Seek( cCodTip + cDocMov )

                        ::oDbf:Load()
                        ::oDbf:nKilEx2 += nTotNAlbCli( ::oAlbCliL ) *  oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                        ::oDbf:Save()

                     else

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )
                        ::oDbf:dFecDo2 := Dtoc( ::oAlbCliT:dFecAlb )
                        ::oDbf:nKilEx2 := nTotNAlbCli( ::oAlbCliL ) *  oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                        ::oDbf:cDesti2 := lTrim( ::oAlbCliT:cNomCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti2 := lTrim( ::oAlbCliT:cDirCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti2 := lTrim( ::oAlbCliT:cPobCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti2 := "C.I.F.:" + lTrim( ::oAlbCliT:cDniCli )
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                        ::oDbf:Append()
                        ::oDbf:Blank()
                        ::oDbf:cDesti2 := "Doc.:" + cDocMov
                        ::oDbf:cNumDoc := cDocMov
                        ::oDbf:Save()

                     end

                  end

                  do case
                     case cCodTip == "DHM" .OR. cCodTip == "LMO" .OR. cCodTip == "PMO" .OR. cCodTip == "LAM"
                        ::nTotSalmuera += nTotNAlbCli( ::oAlbCliL ) *  oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                     case cCodTip == "DHV" .OR. cCodTip == "LVE" .OR. cCodTip == "PVE" .OR. cCodTip == "LAV"
                        ::nTotCocidas += nTotNAlbCli( ::oAlbCliL ) *  oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                     case cCodTip == "RAL" .OR. cCodTip == "RAN" .OR. cCodTip == "RPA" .OR. cCodTip == "RPE" .OR. cCodTip == "RPP"
                        ::nTotRellenas += nTotNAlbCli( ::oAlbCliL ) *  oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                  end

               end

               ::oAlbCliL:Skip()

            end

         end

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oAlbCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
