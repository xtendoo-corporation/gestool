#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TInftrazarlote.prg"
_HB_CLASS TInfTrazLot ; function TInfTrazLot ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfTrazLot", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfTrazLot() ) ) ;

   _HB_MEMBER { cLote } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLote"}, .F. )

   _HB_MEMBER { dbfTmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dbfTmp"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfTrazLot_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfTrazLot_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles() ; oClass:AddVirtual( "OpenFiles" )
   _HB_MEMBER CloseFiles() ; oClass:AddVirtual( "CloseFiles" )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfTrazLot_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfTrazLot ;



static FUNCTION TInfTrazLot_Create( ) ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot

   ::AddField( "cTipDoc",  "C",40, 0, {|| "@!" },     "Tip. Doc.",          .F., "Tipo de documento",     25, .F.  )
   ::AddField( "cNumDoc",  "C",12, 0, {|| "@!" },     "Num. Doc.",          .T., "Número del documento",  15, .F.  )
   ::AddField( "dFecDoc",  "D", 8, 0, {|| "@!" },     "Fecha",              .T., "Fecha del documento",   12, .F.  )
   ::AddField( "cCodCli",  "C",12, 0, {|| "@!" },     "Cod. Cli/Prv",       .T., "Código del Cli/Prv",    15, .F.  )
   ::AddField( "cNomCli",  "C",50, 0, {|| "@!" },     "Nom. Cli/Prv",       .T., "Nombre del Cli/Prv",    50, .F.  )
   ::AddField( "cCodObr",  "C",10, 0, {|| "@!" },     "Dirección",               .F., "Dirección",                  10, .F.  )
   ::AddField( "cCodigo",  "C",18, 0, {|| "@!" },     "Código artículo",    .T., "Código del artículo",   18, .F.  )
   ::AddField( "cNomArt",  "C",100,0, {|| "@!" },     "Nom. Art.",          .T., "Nombre del artículo",   20, .F.  )
   ::AddField( "nUnidades","N",16, 6, {|| MasUnd() }, "Und.",               .T., "Unidades de artículo",  10, .T.  )
   ::AddField( "cLote",    "C",64, 0, {|| "@!" },     "Lote",               .T., "Lote",                  10, .F.  )

   ::AddTmpIndex ( "cTipDoc", "cTipDoc + Dtos( dFecDoc )" )

   ::AddGroup( {|| ::oDbf:cTipDoc }, {|| "Documento : " + Rtrim( ::oDbf:cTipDoc ) }, {||"Total grupo..."} )

   ::lDefSerInf   := .F.

RETURN ( Self )



static FUNCTION TInfTrazLot_lResource( cFld ) ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot

   if !::StdResource( "INF_TRAZALOTE" )
      return .F.
   end

   ::oBtnFilter:Disable()

RETURN .T.






static FUNCTION TInfTrazLot_lGenerate( ) ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot

   local oBlock
   local oError

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::oDlg:Disable()

   ::oDbf:Zap()

   ::oMtrInf:SetTotal( ( ::dbfTmp )->( OrdKeyCount() ) )

   ::aHeader      := { {|| "Fecha : " + Dtoc( Date() ) }, {|| "Lote  : " + AllTrim( ::cLote ) } }

   ( ::dbfTmp )->( dbGoTop() )
   while !( ::dbfTmp )->( Eof() )

      if ( ::dbfTmp )->dFecDoc >= ::dIniInf .AND. ( ::dbfTmp )->dFecDoc <= ::dFinInf

         ::oDbf:Append()

         ::oDbf:cTipDoc     := ( ::dbfTmp )->cTipDoc
         ::oDbf:cNumDoc     := ( ::dbfTmp )->cNumDoc
         ::oDbf:cCodigo     := ( ::dbfTmp )->cCodigo
         ::oDbf:cNomArt     := AllTrim( ( ::dbfTmp )->cNomArt )
         ::oDbf:dFecDoc     := ( ::dbfTmp )->dFecDoc
         ::oDbf:cCodCli     := ( ::dbfTmp )->cCodCli
         ::oDbf:cNomCli     := ( ::dbfTmp )->cNomCli
         ::oDbf:cCodObr     := ( ::dbfTmp )->cCodObr
         ::oDbf:cLote       := ( ::dbfTmp )->cLote

         do case




            case (  AllTrim( ( ::dbfTmp )->cTipDoc ) == "Pedido a proveedor"                .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Albarán de proveedor"              .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Factura de proveedor"              .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Movimiento de almacén"             .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Material producido" )

              ::oDbf:nUnidades   := ( ::dbfTmp )->nUnidades






            case (  AllTrim( ( ::dbfTmp )->cTipDoc ) == "Presupuesto de cliente"            .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Pedido de cliente"                 .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Albarán de cliente"                .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Factura de cliente"                .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Factura rectificativa de cliente"  .OR. AllTrim( ( ::dbfTmp )->cTipDoc ) == "Material consumido" )

              ::oDbf:nUnidades   := -( ( ::dbfTmp )->nUnidades )

         end

         ::oDbf:Save()

      end

      ( ::dbfTmp )->( dbSkip() )

      ::oMtrInf:AutoInc( ( ::dbfTmp )->( OrdKeyNo() ) )

   end

   ::oMtrInf:AutoInc( ( ::dbfTmp )->( OrdKeyCount() ) )

   ( ::dbfTmp )->( dbGoTop() )

   ::oDlg:Enable()

   RECOVER USING oError

      msgStop( "Error al generar el informe" + Chr(13)+Chr(10) + ErrorMessage( oError )  )

   end

   ErrorBlock( oBlock )

RETURN ( ::oDbf:LastRec() > 0 )
