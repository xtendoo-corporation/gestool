#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TInvitacion.prg"
_HB_CLASS TInvitacion ; function TInvitacion ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInvitacion", iif( .T., { @TMANT() }, { @HBObject() } ), @TInvitacion() ) ) ;

   _HB_MEMBER { cMru } ; oClass:AddMultiData(, "gc_masks_16", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMru"}, .F. )
   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(, ( 164 + ( 55 * 256 ) + ( 58 * 65536 ) ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )







   _HB_MEMBER { AS ARRAY aResource } ; oClass:AddMultiClsData( "ARRAY", {   "gc_cocktail_16"        , "gc_user_16"            , "gc_security_agent_16"  , "gc_user_headphones_16" , "gc_woman2_16"          , "gc_ticket_blue_16"     , "gc_ticket_red_16"       }, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aResource"}, .F. )







   _HB_MEMBER { AS ARRAY aBigResource } ; oClass:AddMultiClsData( "ARRAY", {   "gc_cocktail_48"           , "gc_user2_48"           , "gc_security_agent_48"  , "gc_user_headphones_48" , "gc_woman2_48"          , "gc_ticket_blue_48"     , "gc_ticket_red_48"       }, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBigResource"}, .F. )








   _HB_MEMBER { AS ARRAY aImagen } ; oClass:AddMultiClsData( "ARRAY", {   "Copas"              , "Cliente"            , "Seguridad"          , "Deejay"             , "Camarera"           , "Entrada tipo 1"     , "Entrada tipo 2"      }, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aImagen"}, .F. )

   _HB_MEMBER Create( cPath) AS CLASS TInvitacion; oClass:AddMethod( "Create", @TInvitacion_Create(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS TInvitacion; oClass:AddMethod( "New", @TInvitacion_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TInvitacion_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER OpenService( lExclusive); oClass:AddMethod( "OpenService", @TInvitacion_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TInvitacion_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode); oClass:AddMethod( "Resource", @TInvitacion_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave(); oClass:AddMethod( "lPreSave", @TInvitacion_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cImagen(); oClass:AddInline( "cImagen", {|Self | ( ( Self ) ), ( ::aImagen[ Min( Max( ::oDbf:nImgInv, 1 ), len( ::aImagen ) ) ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cBigResource(); oClass:AddInline( "cBigResource", {|Self | ( ( Self ) ), ( ::aBigResource[ Min( Max( ::oDbf:nImgInv, 1 ), len( ::aBigResource ) ) ] ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nPrecioInvitacion( cCodigoInvitacion); oClass:AddMethod( "nPrecioInvitacion", @TInvitacion_nPrecioInvitacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInvitacion ;



static FUNCTION TInvitacion_New( cPath, oWndParent, oMenuItem ) ; local Self AS CLASS TInvitacion := QSelf() AS CLASS TInvitacion

   If( cPath == nil, cPath := cPatEmp(), ) ;
   If( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil .AND. ::nLevel == nil
      ::nLevel          := Auth():Level( oMenuItem )
   else
      ::nLevel          := 0
   end





   if oWndParent <> nil
      oWndParent:CloseAll()
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::lCreateShell       := .F.
   ::cHtmlHelp          := "Invitaciones"

RETURN ( Self )



static FUNCTION TInvitacion_Create( cPath ) ; local Self AS CLASS TInvitacion := QSelf() AS CLASS TInvitacion

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



static FUNCTION TInvitacion_OpenFiles( lExclusive, cPath ) ; local Self AS CLASS TInvitacion := QSelf() AS CLASS TInvitacion

   local lOpen          := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;
   If( cPath == nil, cPath := ::cPath, ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles( cPath )
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      ::CloseFiles()

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de invitaciones" )

   end
   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInvitacion_DefineFiles( cPath, cDriver ) ; local Self AS CLASS TInvitacion := QSelf() AS CLASS TInvitacion

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "Invita.Dbf", "INVITA" ):New( "Invita.Dbf", "INVITA", ( cDriver ), "Invitaciones", ( cPath ) )

      ::oDbf:AddField( "cCodInv", "C", 2, 0,,,,, "Código", .F., 80, .F., {} )
      ::oDbf:AddField( "cNomInv", "C", 30, 0,,,,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "nImgInv", "N", 2, 0,,,,, "", .F., 0, .T., {} )
      ::oDbf:AddField( "lPreInv", "L", 1, 0,,,,, "", .F., 0, .T., {} )
      ::oDbf:AddField( "nPreInv", "N", 16, 6,,,,, "", .F., 0, .T., {} )

      ::oDbf:AddIndex( "cCodInv", "Invita.Cdx", "CCODINV",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNomInv", "Invita.Cdx", "CNOMINV",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



static FUNCTION TInvitacion_Resource( nMode ) ; local Self AS CLASS TInvitacion := QSelf() AS CLASS TInvitacion

   local oDlg
   local oGet
   local oGet2
   local oChkPre
   local oGetPre
   local oCmbImg
   local cCmbImg     := ::cImagen()

   ::lLoadDivisa()

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "invitaciones", "INVITACIONES",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodInv, ::oDbf:cCodInv:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias, .T., "0" )},,,,,, .T., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )




      oGet2 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomInv, ::oDbf:cNomInv:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oCmbImg := TComboBox():ReDefine( 120, { | u | If( PCount()==0, cCmbImg, cCmbImg:= u ) }, ::aImagen, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, ::aResource,,,,, "oCmbImg",,,,,,, )




      TCheckBox():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:lPreInv, ::oDbf:lPreInv:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )





      oGetPre := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:nPreInv, ::oDbf:nPreInv:= u ) }, oDlg,, ::cPorDiv,,,,,,, .T., {||     ( ::oDbf:lPreInv .AND. ::oDbf:nPreInv >= 0 .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 500, {||( ::lPreSave( oGet, oGet2, nMode, oDlg, oCmbImg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| if( nMode == 4, if( oGet:lValid(), ::lPreSave( oGet, oGet2, nMode, oDlg, oCmbImg ), ), ::lPreSave( oGet, oGet2, nMode, oDlg, oCmbImg ) ) } )

   oDlg:bStart := {|| oGet:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TInvitacion_lPreSave( oGet, oGet2, nMode, oDlg, oCmbImg ) ; local Self AS CLASS TInvitacion := QSelf() AS CLASS TInvitacion

   local nRecAnt

   if nMode == 1 .OR. nMode == 4
      if Empty( ::oDbf:cCodInv )
         MsgStop( "Código de la invitación no puede estar vacío" )
         oGet:SetFocus()
         Return nil
      end

      if ::oDbf:SeekInOrd( ::oDbf:cCodInv, "cCodInv" )
         msgStop( "Código existente" )
         oGet:SetFocus()
         return nil
      end

   end

   if Empty( ::oDbf:cNomInv )
      MsgStop( "Nombre de la invitación no puede estar vacío" )
      oGet2:SetFocus()
      Return nil
   end

   ::oDbf:nImgInv := oCmbImg:nAt

Return ( oDlg:end( 1 ) )



static FUNCTION TInvitacion_nPrecioInvitacion( cCodigoInvitacion ) ; local Self AS CLASS TInvitacion := QSelf() AS CLASS TInvitacion

   local nPrecioInvitacion    := 0

   ::oDbf:GetStatus()

   ::oDbf:OrdSetFocus( "cCodInv" )

   if ::oDbf:Seek( cCodigoInvitacion )
      if ::oDbf:lPreInv
         nPrecioInvitacion    := ::oDbf:nPreInv
      end
   end

   ::oDbf:SetStatus()

Return ( nPrecioInvitacion )
