#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TIvaVta.prg"
_HB_CLASS TIvaVta ; function TIvaVta ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TIvaVta", iif( .T., { @TInfGen() }, { @HBObject() } ), @TIvaVta() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfDiv } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfDiv"}, .F. )
   _HB_MEMBER { AS LOGIC lAllIva } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllIva"}, .F. )
   _HB_MEMBER { AS CHARACTER cIvaDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIvaDes"}, .F. )
   _HB_MEMBER { AS CHARACTER cIvaHas } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIvaHas"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TIvaVta_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TIvaVta_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TIvaVta_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TIvaVta_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TIvaVta_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TIvaVta ;




static FUNCTION TIvaVta_Create( ) ; local Self AS CLASS TIvaVta := QSelf() AS CLASS TIvaVta

   ::AddField( "cTipIva", "C",  1, 0, {|| "@!" },         "Tipo",             .F., "Tipo I.V.A",            1, .F. )
   ::AddField( "cNomIva", "C", 30, 0, {|| "@!" },         "Nom. " + cImp(),   .F., "Nombre tipo I.V.A",    35, .F. )
   ::AddField( "nPctIva", "N",  6, 2, {|| "@ 99.99" },    "% " + cImp(),      .F., "Porcentaje de I.V.A",  12, .F. )
   ::AddField( "cTipDoc", "C", 20, 0, {|| "@!" },         "Tipo",             .T., "Tipo documento",       15, .F. )
   ::AddField( "cDocMov", "C", 14, 0, {|| "@!" },         "Documento",        .T., "Documento",            14, .F. )
   ::AddField( "cSerDoc", "C",  1, 0, {|| "@!" },         "Serie documento",  .F., "Serie",                 4, .F. )
   ::AddField( "nNumDoc", "N",  9, 0, {|| "999999999" },  "Número documento", .F., "Número",               10, .F. )
   ::AddField( "cSufDoc", "C",  2, 0, {|| "@!" },         "Sufijo documento", .F., "Sufijo",                4, .F. )
   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },         "Fecha",            .T., "Fecha",                10, .F. )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },         "Cód. cli.",        .T., "Código cliente",        8, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },         "Cliente",          .T., "Nombre cliente",       30, .F. )
   ::AddField( "nTotNet", "N", 16, 6, {|| ::cPicOut },    "Neto",             .T., "Neto",                 10, .T. )
   ::AddField( "nTotPnt", "N", 16, 6, {|| ::cPicPnt },    "P.V.",             .F., "Punto verde",          10, .T. )
   ::AddField( "nTotTrn", "N", 16, 6, {|| ::cPicOut },    "Transp.",          .F., "Transporte",           10, .T. )
   ::AddField( "nTotIva", "N", 16, 6, {|| ::cPicOut },    cImp(),             .T., cImp(),                 10, .T. )
   ::AddField( "nTotReq", "N", 16, 3, {|| ::cPicOut },    "Rec",              .F., "Rec",                  10, .T. )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut },    "Total",            .T., "Total",                10, .T. )

   ::AddTmpIndex( "cTipIva", "cTipIva + dTos( dFecMov )" )

   ::AddGroup( {|| ::oDbf:cTipIva }, {|| "Tipo " + cImp() + " : " + Rtrim( ::oDbf:cTipIva ) + "-" + alltrim( ::oDbf:cNomIva ) + " - " + alltrim( Trans( ::oDbf:nPctIva, "@EZ 99.99%" ) ) }, {||"Total tipo impuestos.."} )

   ::dIniInf := GetSysDate()

RETURN ( self )




static FUNCTION TIvaVta_OpenFiles( ) ; local Self AS CLASS TIvaVta := QSelf() AS CLASS TIvaVta

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT     := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oFacCliP     := TDataCenter():oFacCliP()

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )




static FUNCTION TIvaVta_CloseFiles( ) ; local Self AS CLASS TIvaVta := QSelf() AS CLASS TIvaVta

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end
   if !Empty( ::oDbfDiv ) .AND. ::oDbfDiv:Used()
      ::oDbfDiv:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end

   ::oALbCliT := nil
   ::oAlbCliL := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil
   ::oFacCliP := nil
   ::oDbfIva  := nil
   ::oDbfDiv  := nil
   ::oTikCliT := nil
   ::oTikCliL := nil
   ::oAntCliT := nil

RETURN ( Self )



static FUNCTION TIvaVta_lResource( cFld ) ; local Self AS CLASS TIvaVta := QSelf() AS CLASS TIvaVta

   local cEstado     := "Todas"
   local oIvaDes
   local oIvaHas
   local oIvaDesTxt
   local oIvaHasTxt
   local cIvaDesTxt
   local cIvaHasTxt
   local oThis := ::oDbfIva

   if !::StdResource( "INF_GEN19B" )
      return .F.
   end



   ::cIvaDes   := dbFirst( ::oDbfIva, 1 )
   ::cIvaHas   := dbLast(  ::oDbfIva, 1 )
   cIvaDesTxt  := dbFirst( ::oDbfIva, 2 )
   cIvaHasTxt  := dbLast(  ::oDbfIva, 2 )



   TCheckBox():ReDefine( 500, { | u | If( PCount()==0, ::lAllIva, ::lAllIva:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )







   oIvaDes := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cIvaDes, ::cIvaDes:= u ) }, ::oFld:aDialogs[1],,, {||    ( cTiva( oIvaDes, oThis:cAlias, oIvaDesTxt ) )},,,,,, .F., {||     ( !::lAllIva )},, .F., .F.,,,,, {|Self|( BrwIva( oIvaDes, oThis:cAlias, oIvaDesTxt ) )}, nil, "LUPA",, )




   oIvaDesTxt := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cIvaDesTxt, cIvaDesTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







   oIvaHas := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::cIvaHas, ::cIvaHas:= u ) }, ::oFld:aDialogs[1],,, {||    ( cTiva( oIvaHas, oThis:cAlias, oIvaHasTxt ) )},,,,,, .F., {||     ( !::lAllIva )},, .F., .F.,,,,, {|Self|( BrwIva( oIvaHas, oThis:cAlias, oIvaHasTxt ) )}, nil, "LUPA",, )




   oIvaHasTxt := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cIvaHasTxt, cIvaHasTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )

   ::CreateFilter( , ::oDbf, .T. )

RETURN .T.




static FUNCTION TIvaVta_lGenerate( ) ; local Self AS CLASS TIvaVta := QSelf() AS CLASS TIvaVta

   local n
   local cCodIva
   local aTotDoc
   local aTotBas
   local aTotImp
   local cExpHead := ""



   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Tipo     : " + cImp() + " : " + if( ::lAllIva, "Todos",  alltrim( ::cIvaDes ) + " > " + alltrim( ::cIvaHas ) ) } }




   ::oAlbCliT:OrdSetFocus( "dFecAlb" )

   cExpHead          := 'nFacturado < 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )



   ::oAlbCliT:GoTop()

   while !::lBreak .AND. !::oAlbCliT:Eof()

      if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )

         aTotDoc  := aTotAlbCli( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb, ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias )[ 8 ]

         for n := 1 to len( aTotDoc )

            if hGet( aTotDoc[n], "porcentajeiva" ) <> nil

               cCodIva           := cCodigoIva( ::oDbfIva:cAlias, hGet( aTotDoc[n], "porcentajeiva" ) )

               if ( ::lAllIva .OR. ( cCodIva >= ::cIvaDes .AND. cCodIva <= ::cIvaHas ) )

                  ::oDbf:Append()

                  ::oDbf:dFecMov := ::oAlbCliT:dFecAlb

                  ::oDbf:cDocMov := alltrim( ::oAlbCliT:cSerAlb ) + "/" + alltrim( Str( ::oAlbCliT:nNumAlb ) ) + "/" + alltrim( ::oAlbCliT:cSufAlb )

                  ::oDbf:cSerDoc := ::oAlbCliT:cSerAlb
                  ::oDbf:nNumDoc := ::oAlbCliT:nNumAlb
                  ::oDbf:cSufDoc := ::oAlbCliT:cSufAlb

                  ::oDbf:cCodCli := ::oAlbCliT:cCodCli
                  ::oDbf:cNomCli := ::oAlbCliT:cNomCli
                  ::oDbf:cTipIva := cCodIva
                  ::oDbf:cNomIva := oRetFld( cCodIva, ::oDbfIva )
                  ::oDbf:nPctIva := hGet( aTotDoc[n], "porcentajeiva" )
                  ::oDbf:nTotNet := hGet( aTotDoc[n], "neto" )
                  ::oDbf:nTotIva := hGet( aTotDoc[n], "impiva" )
                  ::oDbf:nTotReq := hGet( aTotDoc[n], "impre" )
                  ::oDbf:nTotDoc := ::oDbf:nTotNet + ::oDbf:nTotIva + ::oDbf:nTotReq
                  ::oDbf:cTipDoc := "Albarán"

                  ::oDbf:Save()

               end

            end

         next

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end



   ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )



   ::oFacCliT:OrdSetFocus( "dFecFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )



  ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:cSerie, ::aSer )

         aTotDoc  := aTotFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias, ::oAntCliT:cAlias )[ 8 ]

         for n := 1 to len( aTotDoc )

            if hGet( aTotDoc[n], "porcentajeiva" ) <> nil

               cCodIva           := cCodigoIva( ::oDbfIva:cAlias, hGet( aTotDoc[n], "porcentajeiva" ) )

               if ( ::lAllIva .OR. ( cCodIva >= ::cIvaDes .AND. cCodIva <= ::cIvaHas ) )

                  ::oDbf:Append()

                  ::oDbf:dFecMov := ::oFacCliT:dFecFac
                  ::oDbf:cDocMov := alltrim( ::oFacCliT:cSerie ) + "/" + alltrim( Str( ::oFacCliT:nNumFac ) ) + "/" + alltrim( ::oFacCliT:cSufFac )

                  ::oDbf:cSerDoc := ::oFacCliT:cSerie
                  ::oDbf:nNumDoc := ::oFacCliT:nNumFac
                  ::oDbf:cSufDoc := ::oFacCliT:cSufFac

                  ::oDbf:cCodCli := ::oFacCliT:cCodCli
                  ::oDbf:cNomCli := ::oFacCliT:cNomCli
                  ::oDbf:cTipIva := cCodIva
                  ::oDbf:cNomIva := oRetFld( cCodIva, ::oDbfIva )
                  ::oDbf:nPctIva := hGet( aTotDoc[n], "porcentajeiva" )
                  ::oDbf:nTotNet := hGet( aTotDoc[n], "neto" )
                  ::oDbf:nTotIva := hGet( aTotDoc[n], "impiva" )
                  ::oDbf:nTotReq := hGet( aTotDoc[n], "impre" )
                  ::oDbf:nTotDoc := ::oDbf:nTotNet + ::oDbf:nTotIva + ::oDbf:nTotReq
                  ::oDbf:cTipDoc := "Factura"

                  ::oDbf:Save()

               end

            end

         next

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end



   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )



   ::oFacRecT:OrdSetFocus( "dFecFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )





























































   ::oTikCliT:OrdSetFocus( "dFecTik" )

   cExpHead       := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   cExpHead       += ' .and. ( cTipTik == "1" .or. cTipTik == "4" )'

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )



   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer )

         aTotDoc  := aTotTik( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik, ::oTikCliT:cAlias, ::oTikCliL:cAlias, ::oDbfDiv:cAlias )[ 5 ]
         aTotBas  := aTotTik( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik, ::oTikCliT:cAlias, ::oTikCliL:cAlias, ::oDbfDiv:cAlias )[ 6 ]
         aTotImp  := aTotTik( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik, ::oTikCliT:cAlias, ::oTikCliL:cAlias, ::oDbfDiv:cAlias )[ 7 ]

         for n := 1 to len( aTotDoc )

         if !Empty( aTotDoc[n] )

            cCodIva  := cCodigoIva( ::oDbfIva:cAlias, aTotDoc[ n ] )

               if ( ::lAllIva .OR. ( cCodIva >= ::cIvaDes .AND. cCodIva <= ::cIvaHas ) )

                     ::oDbf:Append()

                     ::oDbf:dFecMov := ::oTikCliT:dFecTik
                     ::oDbf:cDocMov := alltrim( ::oTikCliT:cSerTik ) + "/" + alltrim( ::oTikCliT:cNumTik ) + "/" + alltrim( ::oTikCliT:cSufTik )

                     ::oDbf:cSerDoc := ::oTikCliT:cSerTik
                     ::oDbf:nNumDoc := val( ::oTikCliT:cNumTik )
                     ::oDbf:cSufDoc := ::oTikCliT:cSufTik

                     ::oDbf:cCodCli := ::oTikCliT:cCliTik
                     ::oDbf:cNomCli := ::oTikCliT:cNomTik
                     ::oDbf:cTipIva := cCodIva
                     ::oDbf:cNomIva := oRetFld( cCodIva, ::oDbfIva )
                     ::oDbf:nPctIva := aTotDoc[ n ]
                     ::oDbf:nTotNet := aTotBas[ n ]
                     ::oDbf:nTotIva := aTotImp[ n ]
                     ::oDbf:nTotDoc := ::oDbf:nTotNet + ::oDbf:nTotIva
                     ::oDbf:cTipDoc := "Ticket"

                     ::oDbf:Save()

               end

            end

         next

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end



   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )





   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbf:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbf:cFile ), ::oDbf:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:AutoInc( ::oTikCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
