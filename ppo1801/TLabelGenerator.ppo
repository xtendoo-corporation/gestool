#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 10 ".\.\Prg\TLabelGenerator.prg"
_HB_CLASS TLabelGenerator ; function TLabelGenerator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGenerator", iif( .F., { }, { @HBObject() } ), @TLabelGenerator() ) ) ;

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )
   _HB_MEMBER { oFld } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFld"}, .F. )

   _HB_MEMBER { nRecno } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRecno"}, .F. )
   _HB_MEMBER { nOrder } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOrder"}, .F. )

   _HB_MEMBER { oSerieInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSerieInicio"}, .F. )
   _HB_MEMBER { cSerieInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSerieInicio"}, .F. )

   _HB_MEMBER { oSerieFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSerieFin"}, .F. )
   _HB_MEMBER { cSerieFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSerieFin"}, .F. )

   _HB_MEMBER { nDocumentoInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDocumentoInicio"}, .F. )
   _HB_MEMBER { nDocumentoFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDocumentoFin"}, .F. )

   _HB_MEMBER { cSufijoInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSufijoInicio"}, .F. )
   _HB_MEMBER { cSufijoFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSufijoFin"}, .F. )

   _HB_MEMBER { oFormatoLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFormatoLabel"}, .F. )
   _HB_MEMBER { cFormatoLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFormatoLabel"}, .F. )

   _HB_MEMBER { cPrinter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPrinter"}, .F. )

   _HB_MEMBER { nFilaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nFilaInicio"}, .F. )
   _HB_MEMBER { nColumnaInicio } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nColumnaInicio"}, .F. )

   _HB_MEMBER { oBrwLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwLabel"}, .F. )

   _HB_MEMBER { nCantidadLabels } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCantidadLabels"}, .F. )
   _HB_MEMBER { nUnidadesLabels } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nUnidadesLabels"}, .F. )

   _HB_MEMBER { oMtrLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oMtrLabel"}, .F. )
   _HB_MEMBER { nMtrLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nMtrLabel"}, .F. )

   _HB_MEMBER { lClose } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lClose"}, .F. )

   _HB_MEMBER { lErrorOnCreate } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lErrorOnCreate"}, .F. )

   _HB_MEMBER { oBtnListado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnListado"}, .F. )
   _HB_MEMBER { oBtnSiguiente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnSiguiente"}, .F. )
   _HB_MEMBER { oBtnAnterior } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnAnterior"}, .F. )
   _HB_MEMBER { oBtnCancel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnCancel"}, .F. )

   _HB_MEMBER { oBtnPropiedades } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnPropiedades"}, .F. )
   _HB_MEMBER { oBtnModificar } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnModificar"}, .F. )
   _HB_MEMBER { oBtnZoom } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBtnZoom"}, .F. )

   _HB_MEMBER { oComboBoxOrden } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oComboBoxOrden"}, .F. )
   _HB_MEMBER { cComboBoxOrden } ; oClass:AddMultiData(, "Código", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cComboBoxOrden"}, .F. )
   _HB_MEMBER { aComboBoxOrden } ; oClass:AddMultiData(, { "Código", "Nombre" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aComboBoxOrden"}, .F. )

   _HB_MEMBER { lHideSerie } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lHideSerie"}, .F. )

   _HB_MEMBER { aSearch } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSearch"}, .F. )

   _HB_MEMBER { cFileTmpLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFileTmpLabel"}, .F. )
   _HB_MEMBER { tmpLabelEdition } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"tmpLabelEdition"}, .F. )

   _HB_MEMBER { dbfCabecera } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dbfCabecera"}, .F. )
   _HB_MEMBER { dbfLineas } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dbfLineas"}, .F. )

   _HB_MEMBER { idDocument } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"idDocument"}, .F. )
   _HB_MEMBER { dbfDocumento } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dbfDocumento"}, .F. )

   _HB_MEMBER { cNombreDocumento } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNombreDocumento"}, .F. )

   _HB_MEMBER { inicialDoc } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"inicialDoc"}, .F. )

   _HB_MEMBER { aStructureField } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aStructureField"}, .F. )

   _HB_MEMBER { tmpLabelReport } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"tmpLabelReport"}, .F. )
   _HB_MEMBER { fileLabelReport } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"fileLabelReport"}, .F. )

   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TLabelGenerator_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Create( oSender); oClass:AddMethod( "Create", @TLabelGenerator_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isErrorOnCreate(); oClass:AddInline( "isErrorOnCreate", {|Self | ( ( Self ) ), ( ::lErrorOnCreate ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Dialog(); oClass:AddMethod( "Dialog", @TLabelGenerator_Dialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER startDialog(); oClass:AddMethod( "startDialog", @TLabelGenerator_startDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lCreateTempLabelEdition(); oClass:AddMethod( "lCreateTempLabelEdition", @TLabelGenerator_lCreateTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadTempLabelEdition() ; oClass:AddVirtual( "loadTempLabelEdition" )
   _HB_MEMBER loadTempLabelReport(); oClass:AddInline( "loadTempLabelReport", {|Self | ( ( Self ) ), ( ::loadTempLabelEdition( ::tmpLabelReport ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyTempLabelEdition(); oClass:AddMethod( "destroyTempLabelEdition", @TLabelGenerator_destroyTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER createTempLabelReport(); oClass:AddMethod( "createTempLabelReport", @TLabelGenerator_createTempLabelReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadTempReport(); oClass:AddMethod( "loadTempReport", @TLabelGenerator_loadTempReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER destroyTempReport(); oClass:AddMethod( "destroyTempReport", @TLabelGenerator_destroyTempReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PrepareTempReport( oFr); oClass:AddMethod( "PrepareTempReport", @TLabelGenerator_PrepareTempReport(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER buildReportLabels(); oClass:AddMethod( "buildReportLabels", @TLabelGenerator_buildReportLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TLabelGenerator_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER BotonAnterior(); oClass:AddMethod( "BotonAnterior", @TLabelGenerator_BotonAnterior(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER BotonSiguiente(); oClass:AddMethod( "BotonSiguiente", @TLabelGenerator_BotonSiguiente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PutLabel(); oClass:AddMethod( "PutLabel", @TLabelGenerator_PutLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectAllLabels(); oClass:AddMethod( "SelectAllLabels", @TLabelGenerator_SelectAllLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddLabel(); oClass:AddMethod( "AddLabel", @TLabelGenerator_AddLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER DelLabel(); oClass:AddMethod( "DelLabel", @TLabelGenerator_DelLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER EditLabel(); oClass:AddMethod( "EditLabel", @TLabelGenerator_EditLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SelectColumn( oCombo); oClass:AddMethod( "SelectColumn", @TLabelGenerator_SelectColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPrintLabels(); oClass:AddMethod( "lPrintLabels", @TLabelGenerator_lPrintLabels(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER InitLabel( oLabel); oClass:AddMethod( "InitLabel", @TLabelGenerator_InitLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER closeFiles(); oClass:AddInline( "closeFiles", {|Self | ( ( Self ) ), ( D():DeleteView( ::nView ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dataLabel( oFr) ; oClass:AddVirtual( "dataLabel" )
   _HB_MEMBER variableLabel( oFr) ; oClass:AddVirtual( "variableLabel" )




   _HB_MEMBER nombrePrimeraPropiedad(); oClass:AddInline( "nombrePrimeraPropiedad", {|Self | ( ( Self ) ), ( if( !empty( ::tmpLabelReport ), nombrePropiedad( ( ::tmpLabelReport )->cCodPr1, ( ::tmpLabelReport )->cValPr1, ::nView ), "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER nombreSegundaPropiedad(); oClass:AddInline( "nombreSegundaPropiedad", {|Self | ( ( Self ) ), ( if( !empty( ::tmpLabelReport ), nombrePropiedad( ( ::tmpLabelReport )->cCodPr2, ( ::tmpLabelReport )->cValPr2, ::nView ), "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER refreshBrowseLabel(); oClass:AddInline( "refreshBrowseLabel", {|Self | ( ( Self ) ), ( if( !empty( ::oBrwLabel ), ::oBrwLabel:Refresh(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER buildCodeColumn(); oClass:AddMethod( "buildCodeColumn", @TLabelGenerator_buildCodeColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER buildDetailColumn(); oClass:AddMethod( "buildDetailColumn", @TLabelGenerator_buildDetailColumn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGenerator ;



static FUNCTION TLabelGenerator_New( nView ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local oError
   local oBlock

   if !empty( nView )
      ::nView              := nView
   end

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::dbfDocumento       := ( D():Documentos( ::nView ) )

      ::nRecno             := ( ::dbfCabecera )->( Recno() )
      ::nOrder             := ( ::dbfCabecera )->( OrdSetFocus( 1 ) )

      ::cFormatoLabel      := GetPvProfString( "Etiquetas", ::cNombreDocumento, Space( 3 ), cIniEmpresa() )
      if len( ::cFormatoLabel ) < 3
         ::cFormatoLabel   := Space( 3 )
      end

      ::nMtrLabel          := 0

      ::nFilaInicio        := 1
      ::nColumnaInicio     := 1

      ::nCantidadLabels    := 1
      ::nUnidadesLabels    := 1

      ::aSearch            := { "Código", "Nombre" }

      ::lErrorOnCreate     := .F.

      setFastReportObject( self )

   RECOVER USING oError

      ::lErrorOnCreate     := .T.

      msgStop( "Error en la creación de generador de etiquetas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

Return ( Self )



static FUNCTION TLabelGenerator_Create( oSender ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   ::New( oSender:nView )

Return ( Self )



static FUNCTION TLabelGenerator_buildCodeColumn( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   with object ( ::oBrwLabel:AddCol() )
      :cHeader          := "Código"
      :bEditValue       := {|| ( ::tmpLabelEdition )->cRef }
      :nWidth           := 80
      :cSortOrder       := "cRef"
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oComboBoxOrden:Set( oCol:cHeader ) }
   end

Return ( Self )



static FUNCTION TLabelGenerator_buildDetailColumn( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   with object ( ::oBrwLabel:AddCol() )
      :cHeader          := "Nombre"
      :bEditValue       := {|| ( ::tmpLabelEdition )->cDetalle }
      :nWidth           := 180
      :cSortOrder       := "cDetalle"
      :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | ::oComboBoxOrden:Set( oCol:cHeader ) }
   end

Return ( Self )



static FUNCTION TLabelGenerator_Dialog( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local oGetOrd
   local cGetOrd     := Space( 100 )

   if ::lErrorOnCreate
      Return ( Self )
   endif

   if !::lCreateTempLabelEdition()
      Return ( Self )
   endif

   ::oDlg = TDialog():New(,,,,, "SelectLabels_0",, .F.,,,,,, .F.,,,,,, .F.,, "::oDlg", nil, )





      ::oFld := TPages():Redefine( 10, ::oDlg, {"SelectLabels_1", "SelectLabels_2"},,,, )






      TBitmap():ReDefine( 500, "gc_portable_barcode_scanner_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )








      ::oSerieInicio := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cSerieInicio, ::cSerieInicio:= u ) }, ::oFld:aDialogs[ 1 ],, "@!", {||    ( ( ::cSerieInicio >= "A" .AND. ::cSerieInicio <= "Z" ) .OR. ( ::lHideSerie ) )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( ::oSerieInicio ) )}, {||  ( DwSerie( ::oSerieInicio ) )},,,, nil,,, )









      ::oSerieFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cSerieFin, ::cSerieFin:= u ) }, ::oFld:aDialogs[ 1 ],, "@!", {||    ( ( ::cSerieInicio >= "A" .AND. ::cSerieInicio <= "Z" ) .OR. ( ::lHideSerie ) )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( ::oSerieFin ) )}, {||  ( DwSerie( ::oSerieFin ) )},,,, nil,,, )





      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::nDocumentoInicio, ::nDocumentoInicio:= u ) }, ::oFld:aDialogs[ 1 ],, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::nDocumentoFin, ::nDocumentoFin:= u ) }, ::oFld:aDialogs[ 1 ],, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::cSufijoInicio, ::cSufijoInicio:= u ) }, ::oFld:aDialogs[ 1 ],, "##",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::cSufijoFin, ::cSufijoFin:= u ) }, ::oFld:aDialogs[ 1 ],, "##",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::nFilaInicio, ::nFilaInicio:= u ) }, ::oFld:aDialogs[ 1 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::nColumnaInicio, ::nColumnaInicio:= u ) }, ::oFld:aDialogs[ 1 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      ::oFormatoLabel := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cFormatoLabel, ::cFormatoLabel:= u ) }, ::oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 161 )

         ::oFormatoLabel:bValid  := {|| cDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, ::dbfDocumento, ::inicialDoc ) }
         ::oFormatoLabel:bHelp   := {|| brwDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, ::inicialDoc ) }

      TBtnBmp():ReDefine( 220, "gc_document_text_pencil_12",,,,, {|| EdtDocumento( ::cFormatoLabel ) }, ::oFld:aDialogs[ 1 ], .F., , .F., "Modificar formato de etiquetas" )



      TRadMenu():Redefine( { | u | If( PCount()==0, ::nCantidadLabels, ::nCantidadLabels:= u ) }, ::oFld:aDialogs[ 1 ],, { 200, 201 },,,,, .F.,, )








      TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::nUnidadesLabels, ::nUnidadesLabels:= u ) }, ::oFld:aDialogs[ 1 ],, "99999",,,,,,, .F., {||     ( ::nCantidadLabels == 2 )},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )









      oGetOrd := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cGetOrd, cGetOrd:= u ) }, ::oFld:aDialogs[ 2 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "FIND",, )

      oGetOrd:bChange   := {| nKey, nFlags, oGet | AutoSeek( nKey, nFlags, oGet, ::oBrwLabel, ::tmpLabelEdition ) }
      oGetOrd:bValid    := {|| ( ::tmpLabelEdition )->( OrdScope( 0, nil ) ), ( ::tmpLabelEdition )->( OrdScope( 1, nil ) ), ::refreshBrowseLabel(), .T. }





      ::oComboBoxOrden := TComboBox():ReDefine( 210, { | u | If( PCount()==0, ::cComboBoxOrden, ::cComboBoxOrden:= u ) }, ::aComboBoxOrden, ::oFld:aDialogs[ 2 ],,,,,,, .F.,,,,,,, "::oComboBoxOrden",,,,,,, )

      ::oComboBoxOrden:bChange   := {|| ::SelectColumn( ::oComboBoxOrden ) }




      TButton():ReDefine( 100, {||( ::PutLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      TButton():ReDefine( 110, {||( ::SelectAllLabels( .T. ) )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      TButton():ReDefine( 120, {||( ::SelectAllLabels( .F. ) )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      TButton():ReDefine( 130, {||( ::AddLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      TButton():ReDefine( 140, {||( ::DelLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      TButton():ReDefine( 150, {||( ::EditLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      ::oBtnPropiedades := TButton():ReDefine( 220, {||( nil )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      ::oBtnModificar := TButton():ReDefine( 160, {||( nil )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




      ::oBtnZoom := TButton():ReDefine( 165, {||( nil )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )

      ::oBrwLabel                 := IXBrowse():New( ::oFld:aDialogs[ 2 ] )

      ::oBrwLabel:nMarqueeStyle   := 5
      ::oBrwLabel:nColSel         := 2

      ::oBrwLabel:lHScroll        := .F.
      ::oBrwLabel:cAlias          := ::tmpLabelEdition

      ::oBrwLabel:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwLabel:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
      ::oBrwLabel:bLDblClick      := {|| ::PutLabel() }

      ::oBrwLabel:CreateFromResource( 180 )

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "Sl. Seleccionada"
         :bEditValue       := {|| ( ::tmpLabelEdition )->lLabel }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      ::buildCodeColumn()

      ::buildDetailColumn()

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "Lote"
         :bEditValue       := {|| ( ::tmpLabelEdition )->cLote }
         :nWidth           := 60
      end

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "Prp. 1"
         :bEditValue       := {|| ( ::tmpLabelEdition )->cValPr1 }
         :nWidth           := 40
      end

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "Prp. 2"
         :bEditValue       := {|| ( ::tmpLabelEdition )->cValPr2 }
         :nWidth           := 40
      end

      with object ( ::oBrwLabel:AddCol() )
         :cHeader          := "N. etiquetas"
         :bEditValue       := {|| ( ::tmpLabelEdition )->nLabel }
         :cEditPicture     := "@E 99,999"
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nEditType        := 1
         :bOnPostEdit      := {|o,x| if( dbDialogLock( ::tmpLabelEdition ), ( ( ::tmpLabelEdition )->nLabel := x, ( ::tmpLabelEdition )->( dbUnlock() ) ), ) }
      end






      ::oMtrLabel := TApoloMeter():ReDefine( 190, { | u | If( PCount()==0, ::nMtrLabel, ::nMtrLabel:= u ) }, ( ::tmpLabelEdition  )->( lastrec() ), ::oFld:aDialogs[ 2 ], .F.,, "", .F.,,,, )

      ::oMtrLabel:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      ::oMtrLabel:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      ::oMtrLabel:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )








      ::oBtnListado := TButton():ReDefine( 40, {||( ::BotonAnterior() )}, ::oDlg,,, .F.,,,, .F. )




      ::oBtnAnterior := TButton():ReDefine( 20, {||( ::BotonAnterior() )}, ::oDlg,,, .F.,,,, .F. )




      ::oBtnSiguiente := TButton():ReDefine( 30, {||( ::BotonSiguiente() )}, ::oDlg,,, .F.,,,, .F. )




      ::oBtnCancel := TButton():ReDefine( 2, {||( ::oDlg:End() )}, ::oDlg,,, .F.,,,, .F. )

   ::oDlg:bStart  := {|| ::startDialog() }

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   ::DestroyTempLabelEdition()

   ::End()

Return ( Self )



static FUNCTION TLabelGenerator_startDialog( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   ::oBtnListado:Hide()
   ::oBtnAnterior:Hide()

   ::oFormatoLabel:lValid()

   ::oBtnModificar:Hide()
   ::oBtnZoom:Hide()
   ::oBtnPropiedades:Hide()

   if ::lHideSerie
      ::oSerieInicio:Hide()
      ::oSerieFin:Hide()
   end

Return ( Self )



static FUNCTION TLabelGenerator_lCreateTempLabelEdition( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local oBlock
   local oError
   local lCreateTempLabelEdition   := .T.

   oBlock                     := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::tmpLabelEdition       := "LblEdt" + Auth():Codigo()

      ::cFileTmpLabel         := cGetNewFileName( cPatTmp() + "LblEdt" )

      ::DestroyTempLabelEdition()

      dbCreate( ::cFileTmpLabel,  ::aStructureField , cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), ::cFileTmpLabel, ::tmpLabelEdition, .F. )

      if!( ::tmpLabelEdition )->( neterr() )
         ( ::tmpLabelEdition )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
         ( ::tmpLabelEdition )->( OrdCreate( ::cFileTmpLabel, "cRef", "cRef", {|| Field->cRef } ) )

         ( ::tmpLabelEdition )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
         ( ::tmpLabelEdition )->( OrdCreate( ::cFileTmpLabel, "cDetalle", "Upper( cDetalle )", {|| Upper( Field->cDetalle ) } ) )
      end

      ( ::tmpLabelEdition )->( OrdsetFocus( "cRef" ) )

   RECOVER USING oError

      lCreateTempLabelEdition      := .F.

      MsgStop( "Imposible crear fichero temporal" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lCreateTempLabelEdition )



static FUNCTION TLabelGenerator_destroyTempLabelEdition( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   if !empty( ::tmpLabelEdition ) .AND. ( ::tmpLabelEdition )->( Used() )
      ( ::tmpLabelEdition )->( dbCloseArea() )
   end

   dbfErase( ::cFileTmpLabel )

   SysRefresh()

Return ( nil )



static FUNCTION TLabelGenerator_BotonAnterior( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   ::oFld:GoPrev()

   ::oBtnAnterior:Hide()

   SetWindowText( ::oBtnSiguiente:hWnd, "Siguien&te >" )

Return ( Self )



static FUNCTION TLabelGenerator_BotonSiguiente( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   do case
      case ::oFld:nOption == 1

         if empty( ::cFormatoLabel )

            MsgStop( "Debe cumplimentar un formato de etiquetas" )

         else

            ::loadTempLabelEdition()

            ::oFld:GoNext()
            ::oBtnAnterior:Show()
            SetWindowText( ::oBtnSiguiente:hWnd, "&Terminar" )

         end

      case ::oFld:nOption == 2

         if ::lPrintLabels()

            SetWindowText( ::oBtnCancel:hWnd, "&Cerrar" )

         end

   end

Return ( Self )



static FUNCTION TLabelGenerator_lPrintLabels( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   ::oDlg:Disable()

   if ::createTempLabelReport()
      ::loadTempReport()
      ::buildReportLabels()
      ::destroyTempReport()
   end

   ::oDlg:Enable()

Return ( .T. )



static FUNCTION TLabelGenerator_buildReportLabels( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local oFr
   local nCopies     := 1
   local nDevice     := 2
   local cPrinter    := ImpresoraDefectoUsuario()

   sysRefresh()

   oFr               := frReportManager():New()
   oFr:LoadLangRes( "Spanish.Xml" )
   oFr:SetIcon( 1 )
   oFr:SetTitle( "Diseñador de documentos" )



   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( ::dbfDocumento )->( Select() ), "mReport" ) } )



   ::dataLabel( oFr )

   ::variableLabel( oFr )



   if !empty( ( ::dbfDocumento )->mReport )

      oFr:LoadFromBlob( ( ::dbfDocumento )->( select() ), "mReport")

      ::prepareTempReport( oFr )



      do case
         case nDevice == 2
            oFr:ShowReport()

         case nDevice == 1
            oFr:PrepareReport()
            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3
            oFr:PrepareReport()
            oFr:DoExport( "PDFExport" )

      end

   else

      msgStop( "Imposible cargar el documento de la etiquetas.")

   end



   oFr:DestroyFr()

Return ( .T. )



static FUNCTION TLabelGenerator_createTempLabelReport( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local oBlock
   local oError
   local createTempLabelReport := .T.

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::tmpLabelReport     := "LblRpt" + Auth():Codigo()
      ::fileLabelReport    := cGetNewFileName( cPatTmp() + "LblRpt" )

      dbCreate( ::fileLabelReport, ::aStructureField, cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), ::fileLabelReport, ::tmpLabelReport, .F. )

      if!( ::tmpLabelReport )->( neterr() )
         ( ::tmpLabelReport )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
         ( ::tmpLabelReport )->( OrdCreate( ::fileLabelReport, "cRef", "cRef", {|| Field->cRef } ) )
      end

   RECOVER USING oError

      createTempLabelReport    := .F.

      MsgStop( "Imposible crear un fichero temporal de lineas del documento" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( createTempLabelReport )



static FUNCTION TLabelGenerator_loadTempReport( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local n
   local nRec

   ( ::tmpLabelReport )->( __dbzap() )

   nRec                 := ( ::tmpLabelEdition )->( recno() )

   if !empty(::oMtrLabel)
      ::oMtrLabel:setTotal( ( ::tmpLabelEdition )->( lastRec() ) )
   end

   ( ::tmpLabelEdition )->( dbgotop() )
   while !( ::tmpLabelEdition )->( eof() )

      if ( ::tmpLabelEdition )->lLabel
         for n := 1 to ( ::tmpLabelEdition )->nLabel
            dbPass( ::tmpLabelEdition, ::tmpLabelReport, .T. )
         next
      end

      ( ::tmpLabelEdition )->( dbskip() )

      if !empty(::oMtrLabel)
         ::oMtrLabel:autoInc()
      end

   end

   ( ::tmpLabelReport )->( dbgotop() )

   ( ::tmpLabelEdition )->( dbgoto( nRec ) )

Return ( Self )



static FUNCTION TLabelGenerator_destroyTempReport( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   if ( ::tmpLabelReport )->( Used() )
      ( ::tmpLabelReport )->( dbCloseArea() )
   end

   dbfErase( ::fileLabelReport )

   ::tmpLabelReport           := nil

   SysRefresh()

Return ( .T. )



static FUNCTION TLabelGenerator_PrepareTempReport( oFr ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local n
   local nBlancos       := 0
   local nItemsInColumn := 0
   local nPaperHeight   := oFr:GetProperty( "MainPage", "PaperHeight" ) * 3.77953
   local nColumns       := oFr:GetProperty( "MainPage", "Columns" )
   local nHeight        := oFr:GetProperty( "MasterData", "Height" )

   if !empty( nPaperHeight ) .AND. !empty( nHeight ) .AND. !empty( nColumns )

      nItemsInColumn    := int( nPaperHeight / nHeight )

      nBlancos          := ( ::nColumnaInicio - 1 ) * nItemsInColumn
      nBlancos          += ( ::nFilaInicio - 1 )

      for n := 1 to nBlancos
         dbPass( dbBlankRec( ::tmpLabelEdition ), ::tmpLabelReport, .T. )
      next

   end

   ( ::tmpLabelReport )->( dbGoTop() )

Return ( .T. )



static FUNCTION TLabelGenerator_End( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   if !empty( ::nOrder )
      ( ::dbfCabecera )->( ordsetfocus( ::nOrder ) )
   end

   if !empty( ::nRecno )
      ( ::dbfCabecera )->( dbGoTo( ::nRecno ) )
   end

   if IsTrue( ::lClose )
      ::CloseFiles()
   end



   ::DestroyTempLabelEdition()

   WritePProString( "Etiquetas", ::cNombreDocumento, ::cFormatoLabel, cIniEmpresa() )

Return ( Self )



static FUNCTION TLabelGenerator_PutLabel( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   ( ::tmpLabelEdition )->lLabel   := !( ::tmpLabelEdition )->lLabel

   ::refreshBrowseLabel()
   ::oBrwLabel:Select()

Return ( Self )



static FUNCTION TLabelGenerator_SelectAllLabels( lLabel ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local n        := 0
   local nRecno   := ( ::tmpLabelEdition )->( Recno() )

   CursorWait()

   ( ::tmpLabelEdition )->( dbGoTop() )
   while !( ::tmpLabelEdition )->( eof() )

      ( ::tmpLabelEdition )->lLabel := lLabel

      ( ::tmpLabelEdition )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ( ::tmpLabelEdition )->( dbGoTo( nRecno ) )

   ::oMtrLabel:set( 0 )

   ::refreshBrowseLabel()

   CursorArrow()

Return ( Self )



static FUNCTION TLabelGenerator_AddLabel( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   ( ::tmpLabelEdition )->nLabel++

   ::refreshBrowseLabel()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TLabelGenerator_DelLabel( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   if ( ::tmpLabelEdition )->nLabel > 1
      ( ::tmpLabelEdition )->nLabel--
   end

   ::refreshBrowseLabel()
   ::oBrwLabel:SetFocus()

Return ( Self )



static FUNCTION TLabelGenerator_EditLabel( ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   ::oBrwLabel:aCols[ 6 ]:Edit()

Return ( Self )



static FUNCTION TLabelGenerator_InitLabel( oLabel ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local nStartRow

   if ::nFilaInicio > 1
      nStartRow            := oLabel:nStartRow
      nStartRow            += ( ::nFilaInicio - 1 ) * ( oLabel:nLblHeight + oLabel:nVSeparator )

      if nStartRow < oLabel:nBottomRow
         oLabel:nStartRow  := nStartRow
      end
   end

   if ::nColumnaInicio > 1 .AND. ::nColumnaInicio <= oLabel:nLblOnLine
      oLabel:nLblCurrent   := ::nColumnaInicio
   end

Return ( Self )



static FUNCTION TLabelGenerator_SelectColumn( oCombo ) ; local Self AS CLASS TLabelGenerator := QSelf() AS CLASS TLabelGenerator

   local oCol
   local cOrd                    := oCombo:VarGet()

   if ::oBrwLabel <> nil

      with object ::oBrwLabel

         for each oCol in :aCols

            if Equal( cOrd, oCol:cHeader )
               oCol:cOrder       := "A"
               oCol:SetOrder()
            else
               oCol:cOrder       := " "
            end

         next

      end

      ::refreshBrowseLabel()

   end

Return ( Self )









_HB_CLASS TLabelGeneratorPedidoProveedores ; function TLabelGeneratorPedidoProveedores ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorPedidoProveedores", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorPedidoProveedores() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorPedidoProveedores_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadTempLabelEdition(); oClass:AddMethod( "loadTempLabelEdition", @TLabelGeneratorPedidoProveedores_loadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorPedidoProveedores_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorPedidoProveedores ;



static FUNCTION TLabelGeneratorPedidoProveedores_New( nView ) ; local Self AS CLASS TLabelGeneratorPedidoProveedores := QSelf() AS CLASS TLabelGeneratorPedidoProveedores

   ::dbfCabecera        := ( D():PedidosProveedores( nView ) )
   ::dbfLineas          := ( D():PedidosProveedoresLineas( nView ) )
   ::idDocument         := D():PedidosProveedoresId( nView )

   ::cSerieInicio       := ( ::dbfCabecera )->cSerPed
   ::cSerieFin          := ( ::dbfCabecera )->cSerPed

   ::nDocumentoInicio   := ( ::dbfCabecera )->nNumPed
   ::nDocumentoFin      := ( ::dbfCabecera )->nNumPed

   ::cSufijoInicio      := ( ::dbfCabecera )->cSufPed
   ::cSufijoFin         := ( ::dbfCabecera )->cSufPed

   ::cNombreDocumento   := "Pedido proveedores"

   ::inicialDoc         := "PE"

   ::aStructureField    := aSqlStruct( aColPedPrv() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorPedidoProveedores_loadTempLabelEdition( tmpLabel ) ; local Self AS CLASS TLabelGeneratorPedidoProveedores := QSelf() AS CLASS TLabelGeneratorPedidoProveedores

   local nRec
   local nOrd

   If( tmpLabel == nil, tmpLabel := ::tmpLabelEdition, ) ;



   if ( tmpLabel )->( Used() )
      ( tmpLabel )->( __dbZap() )
   end



   nRec                 := ( ::dbfCabecera )->( Recno() )
   nOrd                 := ( ::dbfCabecera )->( OrdSetFocus( "nNumPed" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. ( ::dbfCabecera )->( !eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed ) )


            while ( ::dbfLineas )->cSerPed + Str( ( ::dbfLineas )->nNumPed ) + ( ::dbfLineas )->cSufPed == ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabel, .T. )

                  dblock( tmpLabel )

                  ( tmpLabel )->nNumLin   := nTotNPedPrv( ::dbfLineas )
                  ( tmpLabel )->lLabel    := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabel )->nLabel := nTotNPedPrv( ::dbfLineas )
                  else
                     ( tmpLabel )->nLabel := ::nUnidadesLabels
                  end

                  ( tmpLabel )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabel )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorPedidoProveedores_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorPedidoProveedores := QSelf() AS CLASS TLabelGeneratorPedidoProveedores

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de pedidos", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de pedidos", cItemsToReport( aColPedPrv() ) )

   oFr:SetWorkArea(     "Pedidos", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Pedidos", cItemsToReport( aItmPedPrv() ) )

   oFr:SetWorkArea(     "Incidencias de pedidos", ( D():PedidosProveedoresIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de pedidos", cItemsToReport( aIncPedPrv() ) )

   oFr:SetWorkArea(     "Documentos de pedidos", ( D():PedidosProveedoresDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de pedidos", cItemsToReport( aPedPrvDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Proveedor", ( D():Proveedores( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Proveedor", cItemsToReport( aItmPrv() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de pedidos", "Pedidos",                    {|| ( ::tmpLabelReport )->cSerPed + Str( ( ::tmpLabelReport )->nNumPed ) + ( ::tmpLabelReport )->cSufPed } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Artículos",                  {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Precios por propiedades",    {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Incidencias de pedidos",     {|| ( ::tmpLabelReport )->cSerPed + Str( ( ::tmpLabelReport )->nNumPed ) + ( ::tmpLabelReport )->cSufPed } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Documentos de pedidos",      {|| ( ::tmpLabelReport )->cSerPed + Str( ( ::tmpLabelReport )->nNumPed ) + ( ::tmpLabelReport )->cSufPed } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Impuestos especiales",       {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail( "Pedidos", "Proveedor",                            {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Pedidos", "Almacenes",                            {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail( "Pedidos", "Formas de pago",                       {|| ( ::dbfCabecera )->cCodPgo } )
   oFr:SetMasterDetail( "Pedidos", "Bancos",                               {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Pedidos", "Empresa",                              {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Lineas de pedidos", "Pedidos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Artículos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Precios por propiedades" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Incidencias de pedidos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Documentos de pedidos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Impuestos especiales" )

   oFr:SetResyncPair(   "Pedidos", "Proveedor" )
   oFr:SetResyncPair(   "Pedidos", "Almacenes" )
   oFr:SetResyncPair(   "Pedidos", "Formas de pago" )
   oFr:SetResyncPair(   "Pedidos", "Bancos" )
   oFr:SetResyncPair(   "Pedidos", "Empresa" )

Return nil














_HB_CLASS TLabelGeneratorAlbaranClientes ; function TLabelGeneratorAlbaranClientes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorAlbaranClientes", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorAlbaranClientes() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorAlbaranClientes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER LoadTempLabelEdition(); oClass:AddMethod( "LoadTempLabelEdition", @TLabelGeneratorAlbaranClientes_LoadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorAlbaranClientes_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorAlbaranClientes ;



static FUNCTION TLabelGeneratorAlbaranClientes_New( nView ) ; local Self AS CLASS TLabelGeneratorAlbaranClientes := QSelf() AS CLASS TLabelGeneratorAlbaranClientes

   ::cSerieInicio       := ( D():AlbaranesClientes( nView ) )->cSerAlb
   ::cSerieFin          := ( D():AlbaranesClientes( nView ) )->cSerAlb

   ::nDocumentoInicio   := ( D():AlbaranesClientes( nView ) )->nNumAlb
   ::nDocumentoFin      := ( D():AlbaranesClientes( nView ) )->nNumAlb
   ::cSufijoInicio      := ( D():AlbaranesClientes( nView ) )->cSufAlb
   ::cSufijoFin         := ( D():AlbaranesClientes( nView ) )->cSufAlb

   ::cNombreDocumento   := "Albaran clientes"

   ::inicialDoc         := "AB"

   ::DbfCabecera        := ( D():AlbaranesClientes( nView ) )
   ::dbfLineas          := ( D():AlbaranesClientesLineas( nView ) )

   ::idDocument         := D():AlbaranesClientesId( nView )

   ::aStructureField    := aSqlStruct( aColAlbCli() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorAlbaranClientes_LoadTempLabelEdition( tmpLabel ) ; local Self AS CLASS TLabelGeneratorAlbaranClientes := QSelf() AS CLASS TLabelGeneratorAlbaranClientes

   local nRec
   local nOrd

   If( tmpLabel == nil, tmpLabel := ::tmpLabelEdition, ) ;



   if ( tmpLabel )->( Used() )
      ( tmpLabel )->( __dbZap() )
   end



   nRec                 := ( ::dbfCabecera )->( Recno() )
   nOrd                 := ( ::dbfCabecera )->( OrdSetFocus( "nNumAlb" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. !( ::dbfCabecera )->( eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb ) )

            while ( ::dbfLineas )->cSerAlb + Str( ( ::dbfLineas )->nNumAlb ) + ( ::dbfLineas )->cSufAlb == ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabel, .T. )

                  dblock( tmpLabel )

                  ( tmpLabel )->nNumLin  := nTotNAlbCli( ::dbfLineas )
                  ( tmpLabel )->lLabel   := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabel )->nLabel   := nTotNAlbCli( ::dbfLineas )
                  else
                     ( tmpLabel )->nLabel   := ::nUnidadesLabels
                  end

                  ( tmpLabel )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabel )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorAlbaranClientes_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorAlbaranClientes := QSelf() AS CLASS TLabelGeneratorAlbaranClientes

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de albaranes", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de albaranes", cItemsToReport( aColAlbCli() ) )

   oFr:SetWorkArea(     "Albaranes", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Albaranes", cItemsToReport( aItmAlbCli() ) )

   oFr:SetWorkArea(     "Incidencias de albaranes", ( D():AlbaranesClientesIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de albaranes", cItemsToReport( aIncAlbCli() ) )

   oFr:SetWorkArea(     "Documentos de albaranes", ( D():AlbaranesClientesDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de albaranes", cItemsToReport( aAlbCliDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de albaranes", "Albaranes",                  {|| ( ::tmpLabelReport )->cSerAlb + Str( ( ::tmpLabelReport )->nNumAlb ) + ( ::tmpLabelReport )->cSufAlb } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Artículos",                  {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Precios por propiedades",    {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Incidencias de albaranes",   {|| ( ::tmpLabelReport )->cSerAlb + Str( ( ::tmpLabelReport )->nNumAlb ) + ( ::tmpLabelReport )->cSufAlb } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Documentos de albaranes",    {|| ( ::tmpLabelReport )->cSerAlb + Str( ( ::tmpLabelReport )->nNumAlb ) + ( ::tmpLabelReport )->cSufAlb } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Impuestos especiales",       {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail( "Albaranes", "Clientes",                             {|| ( ::dbfCabecera )->cCodCli } )
   oFr:SetMasterDetail( "Albaranes", "Almacenes",                            {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail( "Albaranes", "Formas de pago",                       {|| ( ::dbfCabecera )->cCodPago} )
   oFr:SetMasterDetail( "Albaranes", "Bancos",                               {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Albaranes", "Empresa",                              {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Lineas de albaranes", "Albaranes" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Artículos" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Precios por propiedades" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Incidencias de albaranes" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Documentos de albaranes" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Impuestos especiales" )

   oFr:SetResyncPair(   "Albaranes", "Clientes" )
   oFr:SetResyncPair(   "Albaranes", "Almacenes" )
   oFr:SetResyncPair(   "Albaranes", "Formas de pago" )
   oFr:SetResyncPair(   "Albaranes", "Bancos" )
   oFr:SetResyncPair(   "Albaranes", "Empresa" )

Return ( nil )










_HB_CLASS TLabelGeneratorPedidoClientes ; function TLabelGeneratorPedidoClientes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorPedidoClientes", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorPedidoClientes() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorPedidoClientes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER LoadTempLabelEdition(); oClass:AddMethod( "LoadTempLabelEdition", @TLabelGeneratorPedidoClientes_LoadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorPedidoClientes_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorPedidoClientes ;



static FUNCTION TLabelGeneratorPedidoClientes_New( nView ) ; local Self AS CLASS TLabelGeneratorPedidoClientes := QSelf() AS CLASS TLabelGeneratorPedidoClientes

   ::cSerieInicio       := ( D():PedidosClientes( nView ) )->cSerPed
   ::cSerieFin          := ( D():PedidosClientes( nView ) )->cSerPed

   ::nDocumentoInicio   := ( D():PedidosClientes( nView ) )->nNumPed
   ::nDocumentoFin      := ( D():PedidosClientes( nView ) )->nNumPed

   ::cSufijoInicio      := ( D():PedidosClientes( nView ) )->cSufPed
   ::cSufijoFin         := ( D():PedidosClientes( nView ) )->cSufPed

   ::cNombreDocumento   := "Pedido clientes"

   ::inicialDoc         := "PB"

   ::dbfCabecera        := ( D():PedidosClientes( nView ) )
   ::dbfLineas          := ( D():PedidosClientesLineas( nView ) )

   ::idDocument         := D():PedidosClientesId( nView )

   ::aStructureField    := aSqlStruct( aColPedCli() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorPedidoClientes_LoadTempLabelEdition( tmpLabel ) ; local Self AS CLASS TLabelGeneratorPedidoClientes := QSelf() AS CLASS TLabelGeneratorPedidoClientes

   local nRec
   local nOrd

   If( tmpLabel == nil, tmpLabel := ::tmpLabelEdition, ) ;



   if ( tmpLabel )->( Used() )
      ( tmpLabel )->( __dbZap() )
   end



   nRec           := ( ::dbfCabecera )->( Recno() )
   nOrd           := ( ::dbfCabecera )->( OrdSetFocus( "nNumPed" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. !( ::dbfCabecera )->( eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed ) )

            while ( ::dbfLineas )->cSerPed + Str( ( ::dbfLineas )->nNumPed ) + ( ::dbfLineas )->cSufPed == ( ::dbfCabecera )->cSerPed + Str( ( ::dbfCabecera )->nNumPed ) + ( ::dbfCabecera )->cSufPed  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabel, .T. )

                  dblock( tmpLabel )

                  ( tmpLabel )->nNumLin  := nTotNPedCli( ::dbfLineas )
                  ( tmpLabel )->lLabel   := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabel )->nLabel   := nTotNPedCli( ::dbfLineas )
                  else
                     ( tmpLabel )->nLabel   := ::nUnidadesLabels
                  end

                  ( tmpLabel )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabel )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorPedidoClientes_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorPedidoClientes := QSelf() AS CLASS TLabelGeneratorPedidoClientes

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de pedidos", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de pedidos", cItemsToReport( aColPedCli() ) )

   oFr:SetWorkArea(     "Pedidos", ( ::dbfCabecera )->( Select() ) )
   oFr:SetFieldAliases( "Pedidos", cItemsToReport( aItmPedCli() ) )

   oFr:SetWorkArea(     "Incidencias de pedidos", ( D():PedidosClientesIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de pedidos", cItemsToReport( aIncPedCli() ) )

   oFr:SetWorkArea(     "Documentos de pedidos", ( D():PedidosClientesDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de pedidos", cItemsToReport( aPedCliDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de pedidos", "Pedidos",                    {|| ( ::tmpLabelReport )->cSerPed + Str( ( ::tmpLabelReport )->nNumPed ) + ( ::tmpLabelReport )->cSufPed } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Artículos",                  {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Precios por propiedades",    {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Incidencias de pedidos",     {|| ( ::tmpLabelReport )->cSerPed + Str( ( ::tmpLabelReport )->nNumPed ) + ( ::tmpLabelReport )->cSufPed } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Documentos de pedidos",      {|| ( ::tmpLabelReport )->cSerPed + Str( ( ::tmpLabelReport )->nNumPed ) + ( ::tmpLabelReport )->cSufPed } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Impuestos especiales",       {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail( "Pedidos", "Clientes",                             {|| ( ::dbfCabecera )->cCodCli } )
   oFr:SetMasterDetail( "Pedidos", "Almacenes",                            {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail( "Pedidos", "Formas de pago",                       {|| ( ::dbfCabecera )->cCodPgo} )
   oFr:SetMasterDetail( "Pedidos", "Empresa",                              {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Lineas de pedidos", "Pedidos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Artículos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Precios por propiedades" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Incidencias de pedidos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Documentos de pedidos" )
   oFr:SetResyncPair(   "Lineas de pedidos", "Impuestos especiales" )

   oFr:SetResyncPair(   "Pedidos", "Clientes" )
   oFr:SetResyncPair(   "Pedidos", "Almacenes" )
   oFr:SetResyncPair(   "Pedidos", "Formas de pago" )
   oFr:SetResyncPair(   "Pedidos", "Empresa" )

Return ( nil )










_HB_CLASS TLabelGeneratorPresupuestoClientes ; function TLabelGeneratorPresupuestoClientes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorPresupuestoClientes", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorPresupuestoClientes() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorPresupuestoClientes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER LoadTempLabelEdition(); oClass:AddMethod( "LoadTempLabelEdition", @TLabelGeneratorPresupuestoClientes_LoadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorPresupuestoClientes_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorPresupuestoClientes ;



static FUNCTION TLabelGeneratorPresupuestoClientes_New( nView ) ; local Self AS CLASS TLabelGeneratorPresupuestoClientes := QSelf() AS CLASS TLabelGeneratorPresupuestoClientes

   ::cSerieInicio       := ( D():PresupuestosClientes( nView ) )->cSerPre
   ::cSerieFin          := ( D():PresupuestosClientes( nView ) )->cSerPre

   ::nDocumentoInicio   := ( D():PresupuestosClientes( nView ) )->nNumPre
   ::nDocumentoFin      := ( D():PresupuestosClientes( nView ) )->nNumPre
   ::cSufijoInicio      := ( D():PresupuestosClientes( nView ) )->cSufPre
   ::cSufijoFin         := ( D():PresupuestosClientes( nView ) )->cSufPre

   ::cNombreDocumento   := "Presupuesto clientes"
   ::inicialDoc         := "PR"

   ::dbfCabecera        := ( D():PresupuestosClientes( nView ) )
   ::dbfLineas          := ( D():PresupuestosClientesLineas( nView ) )

   ::idDocument         := D():PresupuestosClientesId( nView )

   ::aStructureField    := aSqlStruct( aColPreCli() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorPresupuestoClientes_LoadTempLabelEdition( tmpLabelEdition ) ; local Self AS CLASS TLabelGeneratorPresupuestoClientes := QSelf() AS CLASS TLabelGeneratorPresupuestoClientes

   local nRec
   local nOrd

   If( tmpLabelEdition == nil, tmpLabelEdition := ::tmpLabelEdition, ) ;



   if ( tmpLabelEdition )->( Used() )
      ( tmpLabelEdition )->( __dbZap() )
   end



   nRec           := ( ::dbfCabecera )->( Recno() )
   nOrd           := ( ::dbfCabecera )->( OrdSetFocus( "nNumPre" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerPre + Str( ( ::dbfCabecera )->nNumPre ) + ( ::dbfCabecera )->cSufPre >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerPre + Str( ( ::dbfCabecera )->nNumPre ) + ( ::dbfCabecera )->cSufPre <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. !( ::dbfCabecera )->( eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerPre + Str( ( ::dbfCabecera )->nNumPre ) + ( ::dbfCabecera )->cSufPre ) )

            while ( ::dbfLineas )->cSerPre + Str( ( ::dbfLineas )->nNumPre ) + ( ::dbfLineas )->cSufPre == ( ::dbfCabecera )->cSerPre + Str( ( ::dbfCabecera )->nNumPre ) + ( ::dbfCabecera )->cSufPre  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabelEdition, .T. )

                  dblock( tmpLabelEdition )

                  ( tmpLabelEdition )->nNumLin  := nTotNPreCli( ::dbfLineas )
                  ( tmpLabelEdition )->lLabel   := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabelEdition )->nLabel   := nTotNPreCli( ::dbfLineas )
                  else
                     ( tmpLabelEdition )->nLabel   := ::nUnidadesLabels
                  end

                  ( tmpLabelEdition )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabelEdition )->( dbGoTop() )

   if !empty( ::oBrwLabel )
      ::refreshBrowseLabel()
   end

Return ( Self )



static FUNCTION TLabelGeneratorPresupuestoClientes_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorPresupuestoClientes := QSelf() AS CLASS TLabelGeneratorPresupuestoClientes

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de presupuestos", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de presupuestos", cItemsToReport( aColPreCli() ) )

   oFr:SetWorkArea(     "Presupuestos", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Presupuestos", cItemsToReport( aItmPreCli() ) )

   oFr:SetWorkArea(     "Incidencias de presupuestos", ( D():PresupuestosClientesIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de presupuestos", cItemsToReport( aIncPreCli() ) )

   oFr:SetWorkArea(     "Documentos de presupuestos", ( D():PresupuestosClientesDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de presupuestos", cItemsToReport( aPreCliDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de presupuestos", "Presupuestos",                  {|| ( ::tmpLabelReport )->cSerPre + Str( ( ::tmpLabelReport )->nNumPre ) + ( ::tmpLabelReport )->cSufPre } )
   oFr:SetMasterDetail( "Lineas de presupuestos", "Artículos",                     {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de presupuestos", "Precios por propiedades",       {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de presupuestos", "Incidencias de presupuestos",   {|| ( ::tmpLabelReport )->cSerPre + Str( ( ::tmpLabelReport )->nNumPre ) + ( ::tmpLabelReport )->cSufPre } )
   oFr:SetMasterDetail( "Lineas de presupuestos", "Documentos de presupuestos",    {|| ( ::tmpLabelReport )->cSerPre + Str( ( ::tmpLabelReport )->nNumPre ) + ( ::tmpLabelReport )->cSufPre } )
   oFr:SetMasterDetail( "Lineas de presupuestos", "Impuestos especiales",          {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail(    "Presupuestos", "Clientes",                             {|| ( ::dbfCabecera )->cCodCli } )
   oFr:SetMasterDetail(    "Presupuestos", "Almacenes",                            {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail(    "Presupuestos", "Formas de pago",                       {|| ( ::dbfCabecera )->cCodPgo} )
   oFr:SetMasterDetail(    "Presupuestos", "Empresa",                              {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(      "Lineas de presupuestos", "Presupuestos" )
   oFr:SetResyncPair(      "Lineas de presupuestos", "Artículos" )
   oFr:SetResyncPair(      "Lineas de presupuestos", "Precios por propiedades" )
   oFr:SetResyncPair(      "Lineas de presupuestos", "Incidencias de presupuestos" )
   oFr:SetResyncPair(      "Lineas de presupuestos", "Documentos de presupuestos" )
   oFr:SetResyncPair(      "Lineas de presupuestos", "Impuestos especiales" )

   oFr:SetResyncPair(      "Presupuestos", "Clientes" )
   oFr:SetResyncPair(      "Presupuestos", "Almacenes" )
   oFr:SetResyncPair(      "Presupuestos", "Formas de pago" )
   oFr:SetResyncPair(      "Presupuestos", "Empresa" )

Return ( nil )










_HB_CLASS TLabelGeneratorFacturasClientes ; function TLabelGeneratorFacturasClientes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorFacturasClientes", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorFacturasClientes() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorFacturasClientes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER LoadTempLabelEdition(); oClass:AddMethod( "LoadTempLabelEdition", @TLabelGeneratorFacturasClientes_LoadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorFacturasClientes_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorFacturasClientes ;



static FUNCTION TLabelGeneratorFacturasClientes_New( nView ) ; local Self AS CLASS TLabelGeneratorFacturasClientes := QSelf() AS CLASS TLabelGeneratorFacturasClientes

   ::cSerieInicio       := ( D():FacturasClientes( nView ) )->cSerie
   ::cSerieFin          := ( D():FacturasClientes( nView ) )->cSerie

   ::nDocumentoInicio   := ( D():FacturasClientes( nView ) )->nNumFac
   ::nDocumentoFin      := ( D():FacturasClientes( nView ) )->nNumFac
   ::cSufijoInicio      := ( D():FacturasClientes( nView ) )->cSufFac
   ::cSufijoFin         := ( D():FacturasClientes( nView ) )->cSufFac

   ::cNombreDocumento   := "Facturas clientes"
   ::inicialDoc         := "FB"

   ::dbfCabecera        := ( D():FacturasClientes( nView ) )
   ::dbfLineas          := ( D():FacturasClientesLineas( nView ) )

   ::idDocument         := D():FacturasClientesId( nView )

   ::aStructureField    := aSqlStruct( aColFacCli() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorFacturasClientes_LoadTempLabelEdition( tmpLabelEdition ) ; local Self AS CLASS TLabelGeneratorFacturasClientes := QSelf() AS CLASS TLabelGeneratorFacturasClientes

   local nRec
   local nOrd

   If( tmpLabelEdition == nil, tmpLabelEdition := ::tmpLabelEdition, ) ;



   if ( tmpLabelEdition )->( Used() )
      ( tmpLabelEdition )->( __dbZap() )
   end



   nRec           := ( ::dbfCabecera )->( Recno() )
   nOrd           := ( ::dbfCabecera )->( OrdSetFocus( "nNumFac" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. !( ::dbfCabecera )->( eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac ) )

            while ( ::dbfLineas )->cSerie + Str( ( ::dbfLineas )->nNumFac ) + ( ::dbfLineas )->cSufFac == ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabelEdition, .T. )

                  dblock( tmpLabelEdition )

                  ( tmpLabelEdition )->nNumLin     := nTotNFacCli( ::dbfLineas )
                  ( tmpLabelEdition )->lLabel      := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabelEdition )->nLabel   := nTotNFacCli( ::dbfLineas )
                  else
                     ( tmpLabelEdition )->nLabel   := ::nUnidadesLabels
                  end

                  ( tmpLabelEdition )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabelEdition )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorFacturasClientes_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorFacturasClientes := QSelf() AS CLASS TLabelGeneratorFacturasClientes

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de facturas", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de facturas", cItemsToReport( aColFacCli() ) )

   oFr:SetWorkArea(     "Facturas", ( ::dbfCabecera )->( Select() ) )
   oFr:SetFieldAliases( "Facturas", cItemsToReport( aItmFacCli() ) )

   oFr:SetWorkArea(     "Incidencias de facturas", ( D():FacturasClientesIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de facturas", cItemsToReport( aIncFacCli() ) )

   oFr:SetWorkArea(     "Documentos de facturas", ( D():FacturasClientesDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de facturas", cItemsToReport( aFacCliDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de facturas", "Facturas",                  {|| ( ::tmpLabelReport )->cSerie + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Artículos",                 {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de facturas", "Precios por propiedades",   {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de facturas", "Incidencias de facturas",   {|| ( ::tmpLabelReport )->cSerie + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Documentos de facturas",    {|| ( ::tmpLabelReport )->cSerie + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Impuestos especiales",      {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail( "Facturas", "Clientes",                            {|| ( ::dbfCabecera )->cCodCli } )
   oFr:SetMasterDetail( "Facturas", "Almacenes",                           {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail( "Facturas", "Formas de pago",                      {|| ( ::dbfCabecera )->cCodPago} )
   oFr:SetMasterDetail( "Facturas", "Empresa",                             {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Lineas de facturas", "Facturas" )
   oFr:SetResyncPair(   "Lineas de facturas", "Artículos" )
   oFr:SetResyncPair(   "Lineas de facturas", "Precios por propiedades" )
   oFr:SetResyncPair(   "Lineas de facturas", "Incidencias de facturas" )
   oFr:SetResyncPair(   "Lineas de facturas", "Documentos de facturas" )
   oFr:SetResyncPair(   "Lineas de facturas", "Impuestos especiales" )

   oFr:SetResyncPair(   "Facturas", "Clientes" )
   oFr:SetResyncPair(   "Facturas", "Almacenes" )
   oFr:SetResyncPair(   "Facturas", "Formas de pago" )
   oFr:SetResyncPair(   "Facturas", "Empresa" )

Return ( nil )










_HB_CLASS TLabelGeneratorFacturasRectificativaClientes ; function TLabelGeneratorFacturasRectificativaClientes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorFacturasRectificativaClientes", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorFacturasRectificativaClientes() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorFacturasRectificativaClientes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER LoadTempLabelEdition(); oClass:AddMethod( "LoadTempLabelEdition", @TLabelGeneratorFacturasRectificativaClientes_LoadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorFacturasRectificativaClientes_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorFacturasRectificativaClientes ;



static FUNCTION TLabelGeneratorFacturasRectificativaClientes_New( nView ) ; local Self AS CLASS TLabelGeneratorFacturasRectificativaClientes := QSelf() AS CLASS TLabelGeneratorFacturasRectificativaClientes

   ::cSerieInicio       := ( D():FacturasRectificativas( nView ) )->cSerie
   ::cSerieFin          := ( D():FacturasRectificativas( nView ) )->cSerie

   ::nDocumentoInicio   := ( D():FacturasRectificativas( nView ) )->nNumFac
   ::nDocumentoFin      := ( D():FacturasRectificativas( nView ) )->nNumFac
   ::cSufijoInicio      := ( D():FacturasRectificativas( nView ) )->cSufFac
   ::cSufijoFin         := ( D():FacturasRectificativas( nView ) )->cSufFac

   ::cNombreDocumento   := "Facturas rectificativa clientes"

   ::inicialDoc         := "FI"

   ::dbfCabecera        := ( D():FacturasRectificativas( nView ) )
   ::dbfLineas          := ( D():FacturasRectificativasLineas( nView ) )

   ::idDocument         := D():FacturasRectificativasId( nView )

   ::aStructureField    := aSqlStruct( aColFacCli() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorFacturasRectificativaClientes_LoadTempLabelEdition( tmpLabelEdition ) ; local Self AS CLASS TLabelGeneratorFacturasRectificativaClientes := QSelf() AS CLASS TLabelGeneratorFacturasRectificativaClientes

   local nRec
   local nOrd

   If( tmpLabelEdition == nil, tmpLabelEdition := ::tmpLabelEdition, ) ;



   if ( tmpLabelEdition )->( Used() )
      ( tmpLabelEdition )->( __dbZap() )
   end



   nRec           := ( ::dbfCabecera )->( Recno() )
   nOrd           := ( ::dbfCabecera )->( OrdSetFocus( "nNumFac" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. !( ::dbfCabecera )->( eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac ) )

            while ( ::dbfLineas )->cSerie + Str( ( ::dbfLineas )->nNumFac ) + ( ::dbfLineas )->cSufFac == ( ::dbfCabecera )->cSerie + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabelEdition, .T. )

                  dblock( tmpLabelEdition )

                  ( tmpLabelEdition )->nNumLin  := nTotNFacRec( ::dbfLineas )
                  ( tmpLabelEdition )->lLabel   := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabelEdition )->nLabel   := nTotNFacRec( ::dbfLineas )
                  else
                     ( tmpLabelEdition )->nLabel   := ::nUnidadesLabels
                  end

                  ( tmpLabelEdition )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabelEdition )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorFacturasRectificativaClientes_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorFacturasRectificativaClientes := QSelf() AS CLASS TLabelGeneratorFacturasRectificativaClientes

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de facturas", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de facturas", cItemsToReport( aColFacRec() ) )

   oFr:SetWorkArea(     "Facturas", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Facturas", cItemsToReport( aItmFacRec() ) )

   oFr:SetWorkArea(     "Incidencias de facturas", ( D():FacturasRectificativasIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de facturas", cItemsToReport( aIncFacRec() ) )

   oFr:SetWorkArea(     "Documentos de facturas", ( D():FacturasRectificativasDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de facturas", cItemsToReport( aFacRecDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de facturas", "Facturas",                    {|| ( ::tmpLabelReport )->cSerie + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Artículos",                   {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de facturas", "Precios por propiedades",     {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de facturas", "Incidencias de facturas",     {|| ( ::tmpLabelReport )->cSerie + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Documentos de facturas",      {|| ( ::tmpLabelReport )->cSerie + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Impuestos especiales",        {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail(    "Facturas", "Clientes",                             {|| ( ::dbfCabecera )->cCodCli } )
   oFr:SetMasterDetail(    "Facturas", "Almacenes",                            {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail(    "Facturas", "Formas de pago",                       {|| ( ::dbfCabecera )->cCodPago} )
   oFr:SetMasterDetail(    "Facturas", "Empresa",                              {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(      "Lineas de facturas", "Facturas" )
   oFr:SetResyncPair(      "Lineas de facturas", "Artículos" )
   oFr:SetResyncPair(      "Lineas de facturas", "Precios por propiedades" )
   oFr:SetResyncPair(      "Lineas de facturas", "Incidencias de facturas" )
   oFr:SetResyncPair(      "Lineas de facturas", "Documentos de facturas" )
   oFr:SetResyncPair(      "Lineas de facturas", "Impuestos especiales" )

   oFr:SetResyncPair(      "Facturas", "Clientes" )
   oFr:SetResyncPair(      "Facturas", "Almacenes" )
   oFr:SetResyncPair(      "Facturas", "Formas de pago" )
   oFr:SetResyncPair(      "Facturas", "Empresa" )

Return ( nil )










_HB_CLASS TLabelGeneratorSATClientes ; function TLabelGeneratorSATClientes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorSATClientes", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorSATClientes() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorSATClientes_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER LoadTempLabelEdition(); oClass:AddMethod( "LoadTempLabelEdition", @TLabelGeneratorSATClientes_LoadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorSATClientes_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorSATClientes ;



static FUNCTION TLabelGeneratorSATClientes_New( nView ) ; local Self AS CLASS TLabelGeneratorSATClientes := QSelf() AS CLASS TLabelGeneratorSATClientes

   ::cSerieInicio       := ( D():SatClientes( nView ) )->cSerSat
   ::cSerieFin          := ( D():SatClientes( nView ) )->cSerSat

   ::nDocumentoInicio   := ( D():SatClientes( nView ) )->nNumSat
   ::nDocumentoFin      := ( D():SatClientes( nView ) )->nNumSat
   ::cSufijoInicio      := ( D():SatClientes( nView ) )->cSufSat
   ::cSufijoFin         := ( D():SatClientes( nView ) )->cSufSat

   ::cNombreDocumento   := "SAT clientes"
   ::inicialDoc         := "SA"

   ::dbfCabecera        := ( D():SatClientes( nView ) )
   ::dbfLineas          := ( D():SatClientesLineas( nView ) )

   ::idDocument         := D():SatClientesId( nView )

   ::aStructureField    := aSqlStruct( aColSatCli() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorSATClientes_LoadTempLabelEdition( tmpLabelEdition ) ; local Self AS CLASS TLabelGeneratorSATClientes := QSelf() AS CLASS TLabelGeneratorSATClientes

   local nRec
   local nOrd

   If( tmpLabelEdition == nil, tmpLabelEdition := ::tmpLabelEdition, ) ;



   if ( tmpLabelEdition )->( Used() )
      ( tmpLabelEdition )->( __dbZap() )
   end



   nRec           := ( ::dbfCabecera )->( Recno() )
   nOrd           := ( ::dbfCabecera )->( OrdSetFocus( "nNumSat" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerSat + Str( ( ::dbfCabecera )->nNumSat ) + ( ::dbfCabecera )->cSufSat >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerSat + Str( ( ::dbfCabecera )->nNumsat ) + ( ::dbfCabecera )->cSufSat <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. !( ::dbfCabecera )->( eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerSat + Str( ( ::dbfCabecera )->nNumSat ) + ( ::dbfCabecera )->cSufSat ) )

            while ( ::dbfLineas )->cSerSat + Str( ( ::dbfLineas )->nNumSat ) + ( ::dbfLineas )->cSufSat == ( ::dbfCabecera )->cSerSat + Str( ( ::dbfCabecera )->nNumSat ) + ( ::dbfCabecera )->cSufSat  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabelEdition, .T. )

                  dblock( tmpLabelEdition )

                  ( tmpLabelEdition )->nNumLin  := nTotNSatCli( ::dbfLineas )
                  ( tmpLabelEdition )->lLabel   := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabelEdition )->nLabel   := nTotNSatCli( ::dbfLineas )
                  else
                     ( tmpLabelEdition )->nLabel   := ::nUnidadesLabels
                  end

                  ( tmpLabelEdition )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabelEdition )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorSATClientes_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorSATClientes := QSelf() AS CLASS TLabelGeneratorSATClientes

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de SAT", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de SAT", cItemsToReport( aColSatCli() ) )

   oFr:SetWorkArea(     "SAT", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "SAT", cItemsToReport( aItmSatCli() ) )

   oFr:SetWorkArea(     "Incidencias de SAT", ( D():SatClientesIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de SAT", cItemsToReport( aIncSatCli() ) )

   oFr:SetWorkArea(     "Documentos de SAT", ( D():SatClientesDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de SAT", cItemsToReport( aSatCliDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( D():Clientes( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de SAT", "SAT",                      {|| ( ::tmpLabelReport )->cSerSat + Str( ( ::tmpLabelReport )->nNumSat ) + ( ::tmpLabelReport )->cSufSat } )
   oFr:SetMasterDetail( "Lineas de SAT", "Artículos",                {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de SAT", "Precios por propiedades",  {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de SAT", "Incidencias de SAT",       {|| ( ::tmpLabelReport )->cSerSat + Str( ( ::tmpLabelReport )->nNumSat ) + ( ::tmpLabelReport )->cSufSat } )
   oFr:SetMasterDetail( "Lineas de SAT", "Documentos de SAT",        {|| ( ::tmpLabelReport )->cSerSat + Str( ( ::tmpLabelReport )->nNumSat ) + ( ::tmpLabelReport )->cSufSat } )
   oFr:SetMasterDetail( "Lineas de SAT", "Impuestos especiales",     {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail(    "SAT", "Clientes",             {|| ( ::dbfCabecera )->cCodCli } )
   oFr:SetMasterDetail(    "SAT", "Almacenes",            {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail(    "SAT", "Formas de pago",       {|| ( ::dbfCabecera )->cCodPgo} )
   oFr:SetMasterDetail(    "SAT", "Empresa",              {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(      "Lineas de SAT", "SAT" )
   oFr:SetResyncPair(      "Lineas de SAT", "Artículos" )
   oFr:SetResyncPair(      "Lineas de SAT", "Precios por propiedades" )
   oFr:SetResyncPair(      "Lineas de SAT", "Incidencias de SAT" )
   oFr:SetResyncPair(      "Lineas de SAT", "Documentos de SAT" )
   oFr:SetResyncPair(      "Lineas de SAT", "Impuestos especiales" )

   oFr:SetResyncPair(      "Facturas", "Clientes" )
   oFr:SetResyncPair(      "Facturas", "Almacenes" )
   oFr:SetResyncPair(      "Facturas", "Formas de pago" )
   oFr:SetResyncPair(      "Facturas", "Empresa" )

Return ( nil )











_HB_CLASS TLabelGeneratorAlbaranProveedores ; function TLabelGeneratorAlbaranProveedores ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorAlbaranProveedores", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorAlbaranProveedores() ) ) ;

   _HB_MEMBER { newImp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"newImp"}, .F. )

   _HB_MEMBER New( nView, oNewImp); oClass:AddMethod( "New", @TLabelGeneratorAlbaranProveedores_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadTempLabelEdition(); oClass:AddMethod( "loadTempLabelEdition", @TLabelGeneratorAlbaranProveedores_loadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorAlbaranProveedores_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorAlbaranProveedores ;



static FUNCTION TLabelGeneratorAlbaranProveedores_New( nView, oNewImp ) ; local Self AS CLASS TLabelGeneratorAlbaranProveedores := QSelf() AS CLASS TLabelGeneratorAlbaranProveedores

   ::cSerieInicio       := ( D():AlbaranesProveedores( nView ) )->cSerAlb
   ::cSerieFin          := ( D():AlbaranesProveedores( nView ) )->cSerAlb

   ::nDocumentoInicio   := ( D():AlbaranesProveedores( nView ) )->nNumAlb
   ::nDocumentoFin      := ( D():AlbaranesProveedores( nView ) )->nNumAlb

   ::cSufijoInicio      := ( D():AlbaranesProveedores( nView ) )->cSufAlb
   ::cSufijoFin         := ( D():AlbaranesProveedores( nView ) )->cSufAlb

   ::cNombreDocumento   := "Albaran proveedores"

   ::inicialDoc         := "AL"

   ::dbfCabecera        := ( D():AlbaranesProveedores( nView ) )
   ::dbfLineas          := ( D():AlbaranesProveedoresLineas( nView ) )

   ::idDocument         := D():AlbaranesProveedoresId( nView )

   ::aStructureField    := aSqlStruct( aColAlbPrv() )

   ::nView              := nView

   ::newImp             := oNewImp

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorAlbaranProveedores_loadTempLabelEdition( tmpLabel ) ; local Self AS CLASS TLabelGeneratorAlbaranProveedores := QSelf() AS CLASS TLabelGeneratorAlbaranProveedores

   local nRec
   local nOrd

   If( tmpLabel == nil, tmpLabel := ::tmpLabelEdition, ) ;



   if ( tmpLabel )->( Used() )
      ( tmpLabel )->( __dbZap() )
   end



   nRec                 := ( ::dbfCabecera )->( Recno() )
   nOrd                 := ( ::dbfCabecera )->( OrdSetFocus( "nNumAlb" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. ( ::dbfCabecera )->( !eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb ) )


            while ( ::dbfLineas )->cSerAlb + Str( ( ::dbfLineas )->nNumAlb ) + ( ::dbfLineas )->cSufAlb == ( ::dbfCabecera )->cSerAlb + Str( ( ::dbfCabecera )->nNumAlb ) + ( ::dbfCabecera )->cSufAlb  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabel, .T. )

                  dblock( tmpLabel )

                  ( tmpLabel )->nNumLin   := nTotNAlbPrv( ::dbfLineas )
                  ( tmpLabel )->lLabel    := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabel )->nLabel := nTotNAlbPrv( ::dbfLineas )
                  else
                     ( tmpLabel )->nLabel := ::nUnidadesLabels
                  end

                  ( tmpLabel )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabel )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorAlbaranProveedores_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorAlbaranProveedores := QSelf() AS CLASS TLabelGeneratorAlbaranProveedores

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de albaranes", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de albaranes", cItemsToReport( aColAlbPrv() ) )

   oFr:SetWorkArea(     "Albaranes", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Albaranes", cItemsToReport( aItmAlbPrv() ) )

   oFr:SetWorkArea(     "Incidencias de albaranes", ( D():AlbaranesProveedoresIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de albaranes", cItemsToReport( aIncAlbPrv() ) )

   oFr:SetWorkArea(     "Documentos de albaranes", ( D():AlbaranesProveedoresDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de albaranes", cItemsToReport( aAlbPrvDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Proveedor", ( D():Proveedores( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Proveedor", cItemsToReport( aItmPrv() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  ::newImp:Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( ::newImp:oDbf ) )

   oFr:SetMasterDetail( "Lineas de albaranes", "Albaranes",                  {|| ( ::tmpLabelReport )->cSerAlb + Str( ( ::tmpLabelReport )->nNumAlb ) + ( ::tmpLabelReport )->cSufAlb } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Artículos",                  {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Precios por propiedades",    {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Incidencias de albaranes",   {|| ( ::tmpLabelReport )->cSerAlb + Str( ( ::tmpLabelReport )->nNumAlb ) + ( ::tmpLabelReport )->cSufAlb } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Documentos de albaranes",    {|| ( ::tmpLabelReport )->cSerAlb + Str( ( ::tmpLabelReport )->nNumAlb ) + ( ::tmpLabelReport )->cSufAlb } )
   oFr:SetMasterDetail( "Lineas de albaranes", "Impuestos especiales",       {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail( "Albaranes", "Proveedor",                            {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Albaranes", "Almacenes",                            {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail( "Albaranes", "Formas de pago",                       {|| ( ::dbfCabecera )->cCodPgo} )
   oFr:SetMasterDetail( "Albaranes", "Bancos",                               {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Albaranes", "Empresa",                              {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Lineas de albaranes", "Albaranes" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Artículos" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Precios por propiedades" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Incidencias de albaranes" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Documentos de albaranes" )
   oFr:SetResyncPair(   "Lineas de albaranes", "Impuestos especiales" )

   oFr:SetResyncPair(   "Albaranes", "Proveedor" )
   oFr:SetResyncPair(   "Albaranes", "Almacenes" )
   oFr:SetResyncPair(   "Albaranes", "Formas de pago" )
   oFr:SetResyncPair(   "Albaranes", "Bancos" )
   oFr:SetResyncPair(   "Albaranes", "Empresa" )

Return nil












_HB_CLASS TLabelGeneratorFacturaProveedores ; function TLabelGeneratorFacturaProveedores ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorFacturaProveedores", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorFacturaProveedores() ) ) ;

   _HB_MEMBER { newImp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"newImp"}, .F. )

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorFacturaProveedores_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadTempLabelEdition(); oClass:AddMethod( "loadTempLabelEdition", @TLabelGeneratorFacturaProveedores_loadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorFacturaProveedores_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorFacturaProveedores ;



static FUNCTION TLabelGeneratorFacturaProveedores_New( nView, oNewImp ) ; local Self AS CLASS TLabelGeneratorFacturaProveedores := QSelf() AS CLASS TLabelGeneratorFacturaProveedores

   ::cSerieInicio       := ( D():FacturasProveedores( nView ) )->cSerFac
   ::cSerieFin          := ( D():FacturasProveedores( nView ) )->cSerFac

   ::nDocumentoInicio   := ( D():FacturasProveedores( nView ) )->nNumFac
   ::nDocumentoFin      := ( D():FacturasProveedores( nView ) )->nNumFac

   ::cSufijoInicio      := ( D():FacturasProveedores( nView ) )->cSufFac
   ::cSufijoFin         := ( D():FacturasProveedores( nView ) )->cSufFac

   ::cNombreDocumento   := "Factura proveedores"

   ::inicialDoc         := "FL"

   ::dbfCabecera        := ( D():FacturasProveedores( nView ) )
   ::dbfLineas          := ( D():FacturasProveedoresLineas( nView ) )

   ::idDocument         := D():FacturasProveedoresId( nView )

   ::aStructureField    := aSqlStruct( aColFacPrv() )

   ::nView              := nView
   ::newImp             := oNewImp

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorFacturaProveedores_loadTempLabelEdition( tmpLabel ) ; local Self AS CLASS TLabelGeneratorFacturaProveedores := QSelf() AS CLASS TLabelGeneratorFacturaProveedores

   local nRec
   local nOrd

   If( tmpLabel == nil, tmpLabel := ::tmpLabelEdition, ) ;



   if ( tmpLabel )->( Used() )
      ( tmpLabel )->( __dbZap() )
   end



   nRec                 := ( ::dbfCabecera )->( Recno() )
   nOrd                 := ( ::dbfCabecera )->( OrdSetFocus( "nNumFac" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. ( ::dbfCabecera )->( !eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac ) )


            while ( ::dbfLineas )->cSerFac + Str( ( ::dbfLineas )->nNumFac ) + ( ::dbfLineas )->cSufFac == ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabel, .T. )

                  dblock( tmpLabel )

                  ( tmpLabel )->nNumLin   := nTotNFacPrv( ::dbfLineas )
                  ( tmpLabel )->lLabel    := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabel )->nLabel := nTotNFacPrv( ::dbfLineas )
                  else
                     ( tmpLabel )->nLabel := ::nUnidadesLabels
                  end

                  ( tmpLabel )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabel )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorFacturaProveedores_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorFacturaProveedores := QSelf() AS CLASS TLabelGeneratorFacturaProveedores

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de facturas", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de facturas", cItemsToReport( aColFacPrv() ) )

   oFr:SetWorkArea(     "Facturas", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Facturas", cItemsToReport( aItmFacPrv() ) )

   oFr:SetWorkArea(     "Incidencias de facturas", ( D():FacturasProveedoresIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de facturas", cItemsToReport( aIncFacPrv() ) )

   oFr:SetWorkArea(     "Documentos de facturas", ( D():FacturasProveedoresDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de facturas", cItemsToReport( aFacPrvDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Proveedor", ( D():Proveedores( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Proveedor", cItemsToReport( aItmPrv() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )




   oFr:SetWorkArea(     "Impuestos especiales",  ::newImp:Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( ::newImp:oDbf ) )

   oFr:SetMasterDetail( "Lineas de facturas", "Facturas",                  {|| ( ::tmpLabelReport )->cSerFac + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Artículos",                 {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de facturas", "Precios por propiedades",   {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de facturas", "Incidencias de facturas",   {|| ( ::tmpLabelReport )->cSerFac + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Documentos de facturas",    {|| ( ::tmpLabelReport )->cSerFac + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas", "Impuestos especiales",      {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail( "Facturas", "Proveedor",                           {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Facturas", "Almacenes",                           {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail( "Facturas", "Formas de pago",                      {|| ( ::dbfCabecera )->cCodPago } )
   oFr:SetMasterDetail( "Facturas", "Bancos",                              {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Facturas", "Empresa",                             {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Lineas de facturas", "Facturas" )
   oFr:SetResyncPair(   "Lineas de facturas", "Artículos" )
   oFr:SetResyncPair(   "Lineas de facturas", "Precios por propiedades" )
   oFr:SetResyncPair(   "Lineas de facturas", "Incidencias de facturas" )
   oFr:SetResyncPair(   "Lineas de facturas", "Documentos de facturas" )
   oFr:SetResyncPair(   "Lineas de facturas", "Impuestos especiales" )

   oFr:SetResyncPair(   "Facturas", "Proveedor" )
   oFr:SetResyncPair(   "Facturas", "Almacenes" )
   oFr:SetResyncPair(   "Facturas", "Formas de pago" )
   oFr:SetResyncPair(   "Facturas", "Bancos" )
   oFr:SetResyncPair(   "Facturas", "Empresa" )

Return nil








_HB_CLASS TLabelGeneratorFacturaRectificativaProveedores ; function TLabelGeneratorFacturaRectificativaProveedores ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLabelGeneratorFacturaRectificativaProveedores", iif( .T., { @TLabelGenerator() }, { @HBObject() } ), @TLabelGeneratorFacturaRectificativaProveedores() ) ) ;

   _HB_MEMBER New( nView); oClass:AddMethod( "New", @TLabelGeneratorFacturaRectificativaProveedores_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadTempLabelEdition(); oClass:AddMethod( "loadTempLabelEdition", @TLabelGeneratorFacturaRectificativaProveedores_loadTempLabelEdition(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER dataLabel( oFr); oClass:AddMethod( "dataLabel", @TLabelGeneratorFacturaRectificativaProveedores_dataLabel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLabelGeneratorFacturaRectificativaProveedores ;



static FUNCTION TLabelGeneratorFacturaRectificativaProveedores_New( nView ) ; local Self AS CLASS TLabelGeneratorFacturaRectificativaProveedores := QSelf() AS CLASS TLabelGeneratorFacturaRectificativaProveedores

   ::cSerieInicio       := ( D():FacturasRectificativasProveedores( nView ) )->cSerFac
   ::cSerieFin          := ( D():FacturasRectificativasProveedores( nView ) )->cSerFac

   ::nDocumentoInicio   := ( D():FacturasRectificativasProveedores( nView ) )->nNumFac
   ::nDocumentoFin      := ( D():FacturasRectificativasProveedores( nView ) )->nNumFac

   ::cSufijoInicio      := ( D():FacturasRectificativasProveedores( nView ) )->cSufFac
   ::cSufijoFin         := ( D():FacturasRectificativasProveedores( nView ) )->cSufFac

   ::cNombreDocumento   := "Factura rectificativa proveedores"

   ::inicialDoc         := "RL"

   ::dbfCabecera        := ( D():FacturasRectificativasProveedores( nView ) )
   ::dbfLineas          := ( D():FacturasRectificativasProveedoresLineas( nView ) )

   ::idDocument         := D():FacturasRectificativasProveedoresId( nView )

   ::aStructureField    := aSqlStruct( aColFacPrv() )

   ::nView              := nView

   ::Super:New()

Return( Self )



static FUNCTION TLabelGeneratorFacturaRectificativaProveedores_loadTempLabelEdition( tmpLabel ) ; local Self AS CLASS TLabelGeneratorFacturaRectificativaProveedores := QSelf() AS CLASS TLabelGeneratorFacturaRectificativaProveedores

   local nRec
   local nOrd

   If( tmpLabel == nil, tmpLabel := ::tmpLabelEdition, ) ;



   if ( tmpLabel )->( Used() )
      ( tmpLabel )->( __dbZap() )
   end



   nRec                 := ( ::dbfCabecera )->( Recno() )
   nOrd                 := ( ::dbfCabecera )->( OrdSetFocus( "nNumFac" ) )

   if ( ::dbfCabecera )->( dbSeek( ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio, .T. ) )



      while ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac >= ::cSerieInicio + Str( ::nDocumentoInicio, 9 ) + ::cSufijoInicio  .AND. ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac <= ::cSerieFin + Str( ::nDocumentoFin, 9 ) + ::cSufijoFin           .AND. ( ::dbfCabecera )->( !eof() )

         if ( ::dbfLineas )->( dbSeek( ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac ) )


            while ( ::dbfLineas )->cSerFac + Str( ( ::dbfLineas )->nNumFac ) + ( ::dbfLineas )->cSufFac == ( ::dbfCabecera )->cSerFac + Str( ( ::dbfCabecera )->nNumFac ) + ( ::dbfCabecera )->cSufFac  .AND. ( ::dbfLineas )->( !eof() )

               if !empty( ( ::dbfLineas )->cRef )

                  dbPass( ::dbfLineas, tmpLabel, .T. )

                  dblock( tmpLabel )

                  ( tmpLabel )->nNumLin   := nTotNRctPrv( ::dbfLineas )
                  ( tmpLabel )->lLabel    := .T.

                  if ::nCantidadLabels == 1
                     ( tmpLabel )->nLabel := nTotNRctPrv( ::dbfLineas )
                  else
                     ( tmpLabel )->nLabel := ::nUnidadesLabels
                  end

                  ( tmpLabel )->( dbUnlock() )

               end

               ( ::dbfLineas )->( dbSkip() )

            end

         end

         ( ::dbfCabecera )->( dbSkip() )

      end

   end

   ( ::dbfCabecera )->( OrdSetFocus( nOrd ) )
   ( ::dbfCabecera )->( dbGoTo( nRec ) )

   ( tmpLabel )->( dbGoTop() )

   ::refreshBrowseLabel()

Return ( Self )



static FUNCTION TLabelGeneratorFacturaRectificativaProveedores_dataLabel( oFr ) ; local Self AS CLASS TLabelGeneratorFacturaRectificativaProveedores := QSelf() AS CLASS TLabelGeneratorFacturaRectificativaProveedores

   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Lineas de facturas rectificativas", ( ::tmpLabelReport )->( Select() ), .F., { 0, 0, 0 } )
   oFr:SetFieldAliases( "Lineas de facturas rectificativas", cItemsToReport( aColFacPrv() ) )

   oFr:SetWorkArea(     "Facturas", ( ::dbfCabecera )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Facturas", cItemsToReport( aItmFacPrv() ) )

   oFr:SetWorkArea(     "Incidencias de facturas rectificativas", ( D():FacturasRectificativasProveedoresIncidencias( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de facturas rectificativas", cItemsToReport( aIncFacPrv() ) )

   oFr:SetWorkArea(     "Documentos de facturas rectificativas", ( D():FacturasRectificativasProveedoresDocumentos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de facturas rectificativas", cItemsToReport( aFacPrvDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( D():Empresa( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Proveedor", ( D():Proveedores( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Proveedor", cItemsToReport( aItmPrv() ) )

   oFr:SetWorkArea(     "Almacenes", ( D():Almacen( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( D():FormasPago( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Artículos", ( D():Articulos( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( D():ArticuloPrecioPropiedades( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   oFr:SetWorkArea(     "Código de proveedores", ( D():ProveedorArticulo( ::nView ) )->( Select() ) )
   oFr:SetFieldAliases( "Código de proveedores", cItemsToReport( aItmArtPrv() ) )

   oFr:SetWorkArea(     "Unidades de medición",  D():GetObject( "UnidadMedicion", ::nView ):Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( D():GetObject( "UnidadMedicion", ::nView ):oDbf) )

   oFr:SetWorkArea(     "Impuestos especiales",  D():ImpuestosEspeciales( ::nView ):Select() )
   oFr:SetFieldAliases( "Impuestos especiales",  cObjectsToReport( D():ImpuestosEspeciales( ::nView ):oDbf) )

   oFr:SetMasterDetail( "Lineas de facturas rectificativas", "Facturas",                                 {|| ( ::tmpLabelReport )->cSerFac + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas rectificativas", "Artículos",                                {|| ( ::tmpLabelReport )->cRef } )
   oFr:SetMasterDetail( "Lineas de facturas rectificativas", "Precios por propiedades",                  {|| ( ::tmpLabelReport )->cDetalle + ( ::tmpLabelReport )->cCodPr1 + ( ::tmpLabelReport )->cCodPr2 + ( ::tmpLabelReport )->cValPr1 + ( ::tmpLabelReport )->cValPr2 } )
   oFr:SetMasterDetail( "Lineas de facturas rectificativas", "Incidencias de facturas rectificativas",   {|| ( ::tmpLabelReport )->cSerFac + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas rectificativas", "Documentos de facturas rectificativas",    {|| ( ::tmpLabelReport )->cSerFac + Str( ( ::tmpLabelReport )->nNumFac ) + ( ::tmpLabelReport )->cSufFac } )
   oFr:SetMasterDetail( "Lineas de facturas rectificativas", "Impuestos especiales",                     {|| ( ::tmpLabelReport )->cCodImp } )

   oFr:SetMasterDetail( "Facturas", "Proveedor",                          {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Facturas", "Almacenes",                          {|| ( ::dbfCabecera )->cCodAlm } )
   oFr:SetMasterDetail( "Facturas", "Formas de pago",                     {|| ( ::dbfCabecera )->cCodPago } )
   oFr:SetMasterDetail( "Facturas", "Bancos",                             {|| ( ::dbfCabecera )->cCodPrv } )
   oFr:SetMasterDetail( "Facturas", "Empresa",                            {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Lineas de facturas rectificativas", "Facturas" )
   oFr:SetResyncPair(   "Lineas de facturas rectificativas", "Artículos" )
   oFr:SetResyncPair(   "Lineas de facturas rectificativas", "Precios por propiedades" )
   oFr:SetResyncPair(   "Lineas de facturas rectificativas", "Incidencias de facturas rectificativas" )
   oFr:SetResyncPair(   "Lineas de facturas rectificativas", "Documentos de facturas rectificativas" )
   oFr:SetResyncPair(   "Lineas de facturas rectificativas", "Impuestos especiales" )

   oFr:SetResyncPair(   "Facturas", "Proveedor" )
   oFr:SetResyncPair(   "Facturas", "Almacenes" )
   oFr:SetResyncPair(   "Facturas", "Formas de pago" )
   oFr:SetResyncPair(   "Facturas", "Bancos" )
   oFr:SetResyncPair(   "Facturas", "Empresa" )

Return nil
