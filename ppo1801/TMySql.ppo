#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 11 ".\.\Prg\TMySql.prg"
_HB_CLASS TMySql ; function TMySql ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TMySql", iif( .F., { }, { @HBObject() } ), @TMySql() ) ) ;

   _HB_MEMBER { oConexion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oConexion"}, .F. )
   _HB_MEMBER { cHost } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cHost"}, .F. )
   _HB_MEMBER { cUser } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cUser"}, .F. )
   _HB_MEMBER { cPasswd } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPasswd"}, .F. )
   _HB_MEMBER { cDbName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cDbName"}, .F. )
   _HB_MEMBER { nPort } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPort"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TMySql_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Connect(); oClass:AddInline( "Connect", {|Self | ( ( Self ) ), ( ::oConexion:Connect( ::cHost, ::cUser, ::cPasswd, ::cDbName, ::nPort ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Destroy(); oClass:AddInline( "Destroy", {|Self | ( ( Self ) ), ( ::oConexion:Destroy() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER TestConexion(); oClass:AddMethod( "TestConexion", @TMySql_TestConexion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TMySql ;



static FUNCTION TMySql_New( cHost, cUser, cPasswd, cDbName, nPort ) ; local Self AS CLASS TMySql := QSelf() AS CLASS TMySql

   If( cHost == nil, cHost := cSitSql(), ) ;
   If( cUser == nil, cUser := cUsrSql(), ) ;
   If( cPasswd == nil, cPasswd := cPswSql(), ) ;
   If( cDbName == nil, cDbName := cDtbSql(), ) ;
   If( nPort == nil, nPort := nPrtSql(), ) ;

   ::oConexion       := TMSConnect():New()

   ::cHost           := RTrim( cHost )
   ::cUser           := RTrim( cUser )
   ::cPasswd         := RTrim( cPasswd )
   ::cDbName         := RTrim( cDbName )
   ::nPort           := nPort

Return ( Self )



static FUNCTION TMySql_TestConexion( ) ; local Self AS CLASS TMySql := QSelf() AS CLASS TMySql

   if Empty( ::oConexion )
      ::New()
   end

   if ::Connect()
      MsgInfo( "Conectado" )
   else
      MsgInfo( "No hay conexión" )
   endif

   ::Destroy()

Return ( Self )
