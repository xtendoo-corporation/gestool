#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 5 ".\.\Prg\TOleExcel.prg"
_HB_CLASS TOleExcel ; function TOleExcel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TOleExcel", iif( .F., { }, { @HBObject() } ), @TOleExcel() ) ) ;

   _HB_MEMBER { cTitle } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTitle"}, .F. )
   _HB_MEMBER { lMeter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lMeter"}, .F. )
   _HB_MEMBER { cMessage } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMessage"}, .F. )

   _HB_MEMBER { oExcel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oExcel"}, .F. )
   _HB_MEMBER { oClipBoard } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oClipBoard"}, .F. )

   _HB_MEMBER { oWaitMeter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oWaitMeter"}, .F. )

   _HB_MEMBER { lError } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lError"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TOleExcel_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ExportBrowse( oBrowse); oClass:AddMethod( "ExportBrowse", @TOleExcel_ExportBrowse(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ExportArray( aDatas); oClass:AddMethod( "ExportArray", @TOleExcel_ExportArray(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertValue( k, n, v, oSheet); oClass:AddMethod( "insertValue", @TOleExcel_insertValue(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TOleExcel_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TOleExcel ;



static FUNCTION TOleExcel_New( cTitle, cMessage, lMeter ) ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   local oBlock

   If( cTitle == nil, cTitle := "Espere por favor", ) ;
   If( lMeter == nil, lMeter := .T., ) ;
   If( cMessage == nil, cMessage := "Conectando con Excel", ) ;

   ::cTitle          := cTitle
   ::lMeter          := lMeter
   ::cMessage        := cMessage

   if ::lMeter
      ::oWaitMeter   := TWaitMeter():New( ::cTitle, ::cMessage )
      ::oWaitMeter:Run()
   end

   BEGIN SEQUENCE WITH {| oErr | Break( oErr ) }
      ::oExcel       := GetActiveObject( "Excel.Application" )
   RECOVER
      BEGIN SEQUENCE WITH {| oErr | Break( oErr ) }
         ::oExcel    := CreateObject( "Excel.Application" )
      RECOVER
         ::lError    := .T.
         MsgStop( "ERROR! Excel no disponible. [" + Ole2TxtError()+ "]" )
         RETURN ( Self )
      END
   END

   ::oClipBoard   := TClipBoard():New()
   ::oClipBoard:Clear()

Return ( Self )



static FUNCTION TOleExcel_ExportBrowse( oBrowse ) ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   local nRec
   local nRow
   local nCol
   local uData
   local oBook
   local oSheet
   local oRange
   local cCell
   local cRange
   local aText
   local nLine       := 1
   local nStart      := 1
   local cText       := ""
   local nBrowseLen
   local nBrowseHead
   local nBrowseAt
   local nEvery

   if ::lError
      Return ( Self )
   end

   nBrowseLen        := oBrowse:nLen
   nBrowseHead       := len( oBrowse:aHeaders )
   nBrowseAt         := oBrowse:nAt
   nEvery            := Max( 1, Int( nBrowseLen / 10 ) )


   if !Empty( oBrowse:cAlias ) .AND. Upper( oBrowse:cAlias ) <> "ARRAY" .AND. Upper( oBrowse:cAlias ) <> "_TXT_"
      nRec           := ( oBrowse:cAlias )->( Recno() )
   end

   if ::lMeter
      ::oWaitMeter:SetTotal( nBrowseLen )
      ::oWaitMeter:SetMessage( "Exportando datos a Excel" )
   end

   ::oExcel:WorkBooks:Add()

   oBook             := ::oExcel:Get( "ActiveWorkBook")
   oSheet            := ::oExcel:Get( "ActiveSheet" )

   oBrowse:GoTop()

   for nRow := 1 to nBrowseLen

      if nRow == 1

         oSheet:Cells( nLine++, 1 ):Value := "GST+ exportación a Excel"
         oSheet:Range( "A1:" + Chr( 64 + nBrowseHead ) + "1" ):HorizontalAlignment := 7
         ++nLine
         nStart      := nLine

         for nCol := 1 To nBrowseHead

            uData    := oBrowse:aHeaders[ nCol ]

            if ValType( uData ) <> "C"
               loop
            end

            cText    += StrTran( uData, Chr(13)+Chr(10), Chr( 10 ) ) + Chr( 9 )

         next

         cText       += Chr( 13 )

      end

      aText          := Eval( oBrowse:bLine )

      for nCol := 1 To Len( aText )

         if ValType( aText[ nCol ] ) <> "C"
            uData    := ""
         else
            uData    := StrTran( aText[ nCol ], Chr(13)+Chr(10), Chr( 10 ) )
         end

         cText       += AllTrim( uData ) + Chr( 9 )

      next

      oBrowse:Skip( 1 )

      SysRefresh()

      if ::lMeter .AND. Mod( nRow, nEvery ) == 0
         ::oWaitMeter:RefreshMeter( nRow )
      end

      cText          += Chr( 13 )

      ++nLine





      if Len( cText ) > 20000

         ::oClipBoard:Clear()
         ::oClipBoard:SetText( cText )

         cCell       := "A" + Alltrim( Str( nStart ) )
         oRange      := oSheet:Range( cCell )
         oRange:Select()
         oSheet:Paste()

         cText       := ""
         nStart      := nLine + 1

      end

   next

   if !Empty( oBrowse:cAlias ) .AND. Upper( oBrowse:cAlias ) <> "ARRAY" .AND. Upper( oBrowse:cAlias ) <> "_TXT_"
      ( oBrowse:cAlias )->( dbGoTo( nRec ) )
   end

   oBrowse:nAt          := nBrowseAt

   if Len( cText ) > 0
      ::oClipBoard:Clear()
      ::oClipBoard:SetText( cText )

      cCell             := "A" + Alltrim( Str( nStart ) )
      oRange            := oSheet:Range( cCell )
      oRange:Select()
      oSheet:Paste()

      cText             := ""
   end

   cRange               := "A3:" + Chr( 64 + nBrowseHead ) + Alltrim( Str( oSheet:UsedRange:Rows:Count() ) )
   oRange               := oSheet:Range( cRange )

   if oBrowse:oFont <> nil
      oRange:Font:Name  := oBrowse:oFont:cFaceName
      oRange:Font:Size  := Abs( oBrowse:oFont:nSize() )
      oRange:Font:Bold  := oBrowse:oFont:lBold
   end

   oRange:Borders():LineStyle  := 1

   oRange:Columns:AutoFit()

   oSheet:Range( "A1" ):Select()

   if ::lMeter
      ::oWaitMeter:RefreshMeter( nBrowseLen )
   end

   ::oExcel:Visible     := .T.

Return ( Self )



static FUNCTION TOleExcel_End( ) ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   if !Empty( ::oExcel )
      ::oExcel := nil
   end

   if !Empty( ::oClipBoard )
      ::oClipBoard:End()
   end

   if ::lMeter
      ::oWaitMeter:End()
   end

Return ( Self )



static FUNCTION TOleExcel_ExportArray( aDatas, cFullFile ) ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   local n
   local oBook
   local oSheet

   ::oExcel:WorkBooks:Add()

   oBook             := ::oExcel:Get( "ActiveWorkBook")
   oSheet            := ::oExcel:Get( "ActiveSheet" )

   for n := 1 to len( aDatas )

      heval( aDatas[ n ], {|k,v| ::insertValue( k, n, v, oSheet ) } )

   next

   oSheet:Range( "A1" ):Select()

   oBook:SaveAs( cFullFile )

   ::oExcel:Visible     := .T.

Return ( Self )



static FUNCTION TOleExcel_insertValue( cCol, nFila, uValue, oSheet ) ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   oSheet:Range( cCol + AllTrim( Str( nFila ) ) ):Value = uValue

Return ( Self )
