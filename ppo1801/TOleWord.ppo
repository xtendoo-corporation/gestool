#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\.\Prg\TOleWord.prg"
_HB_CLASS TOleWord ; function TOleWord ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TOleWord", iif( .F., { }, { @HBObject() } ), @TOleWord() ) ) ;

   _HB_MEMBER { cTitle } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTitle"}, .F. )
   _HB_MEMBER { lMeter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lMeter"}, .F. )
   _HB_MEMBER { cMessage } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMessage"}, .F. )

   _HB_MEMBER { oWord } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oWord"}, .F. )

   _HB_MEMBER { oWaitMeter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oWaitMeter"}, .F. )

   _HB_MEMBER { lError } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lError"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TOleWord_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ExportBrowse( oBrowse); oClass:AddMethod( "ExportBrowse", @TOleWord_ExportBrowse(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TOleWord_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TOleWord ;



static FUNCTION TOleWord_New( cTitle, cMessage, lMeter ) ; local Self AS CLASS TOleWord := QSelf() AS CLASS TOleWord

   local oBlock

   If( cTitle == nil, cTitle := "Espere por favor", ) ;
   If( lMeter == nil, lMeter := .T., ) ;
   If( cMessage == nil, cMessage := "Conectando con Word", ) ;

   ::cTitle          := cTitle
   ::lMeter          := lMeter
   ::cMessage        := cMessage

   if ::lMeter
      ::oWaitMeter   := TWaitMeter():New( ::cTitle, ::cMessage )
      ::oWaitMeter:Run()
   end

   BEGIN SEQUENCE WITH {| oErr | Break( oErr ) }
      ::oWord        := GetActiveObject( "Word.Application" )
   RECOVER
      BEGIN SEQUENCE WITH {| oErr | Break( oErr ) }
         ::oWord     := CreateObject( "Word.Application" )
      RECOVER
         ::lError    := .T.
         MsgStop( "ERROR! Word no disponible. [" + Ole2TxtError()+ "]" )
         RETURN ( Self )
      END
   END

Return ( Self )



static FUNCTION TOleWord_ExportBrowse( oBrowse ) ; local Self AS CLASS TOleWord := QSelf() AS CLASS TOleWord

   local nRec
   local nRow
   local nCol
   local uData
   local oDocs
   local oActiveDoc
   local oRange
   local oTables
   local oTable
   local oTablesItem
   local oTablesItemCell
   local oTablesItemCellRange
   local aText
   local cText       := ""
   local nBrowseLen
   local nBrowseHead
   local nBrowseAt
   local nEvery
   local oBlock
   local oError

   if ::lError
      Return ( Self )
   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !Empty( oBrowse:cAlias ) .AND. Upper( oBrowse:cAlias ) <> "ARRAY" .AND. Upper( oBrowse:cAlias ) <> "_TXT_"
         nRec           := ( oBrowse:cAlias )->( Recno() )
      end

      nBrowseLen        := oBrowse:nLen
      nBrowseHead       := len( oBrowse:aHeaders )
      nBrowseAt         := oBrowse:nAt
      nEvery            := Max( 1, Int( nBrowseLen / 10 ) )

      if ::lMeter
         ::oWaitMeter:SetTotal( nBrowseLen )
         ::oWaitMeter:SetMessage( "Exportando datos a Word" )
      end

      oDocs             := ::oWord:Get( "Documents" )
      oDocs:Add()

      oActiveDoc        := ::oWord:Get( "ActiveDocument" )
      oRange            := oActiveDoc:Range( 0, 0 )

      oTables           := oActiveDoc:Tables()
      oTable            := oTables:Add( oRange, nBrowseLen, nBrowseHead )
      oTablesItem       := oTables:Item( 1 )





      oBrowse:GoTop()

      for nRow := 1 to nBrowseLen

         aText          := Eval( oBrowse:bLine )

         for nCol := 1 to Len( aText )

            if ValType( aText[ nCol ] ) <> "C"
               uData    := ""
            else
               uData    := StrTran( aText[ nCol ], Chr(13)+Chr(10), Chr( 10 ) )
            end

            oTablesItemCell            := oTablesItem:Cell( nRow, nCol )
            oTablesItemCellRange       := oTablesItemCell:Range()
            oTablesItemCellRange:Text  := uData

            cText       += AllTrim( uData ) + Chr( 9 )

         next

         oBrowse:Skip( 1 )

         SysRefresh()

         if ::lMeter .AND. Mod( nRow, nEvery ) == 0
            ::oWaitMeter:RefreshMeter( nRow )
         end

      next

      oTablesItem:AutoFitBehavior( 1 )

      if !Empty( oBrowse:cAlias ) .AND. Upper( oBrowse:cAlias ) <> "ARRAY" .AND. Upper( oBrowse:cAlias ) <> "_TXT_"
         ( oBrowse:cAlias )->( dbGoTo( nRec ) )
      end

      oBrowse:nAt       := nBrowseAt

      if ::lMeter
         ::oWaitMeter:RefreshMeter( nBrowseLen )
      end

      ::oWord:Visible   := .T.

   RECOVER USING oError

      msgStop( "Error al exportar a Word." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( Self )



static FUNCTION TOleWord_End( ) ; local Self AS CLASS TOleWord := QSelf() AS CLASS TOleWord

   if !Empty( ::oWord )
      ::oWord           := nil
   end

   if ::lMeter .AND. !Empty( ::oWaitMeter )
      ::oWaitMeter:End()
   end

Return ( Self )
