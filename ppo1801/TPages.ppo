#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 14 ".\.\Prg\TPages.prg"
_HB_CLASS TPages ; function TPages ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPages", iif( .T., { @TControl() }, { @HBObject() } ), @TPages() ) ) ;

   _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

   _HB_MEMBER { nOption } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOption"}, .F. )
   _HB_MEMBER { aDialogs } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aDialogs"}, .F. )
   _HB_MEMBER { aHelps } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aHelps"}, .F. )

   _HB_MEMBER New( nTop, nLeft, nBottom, nRight, oWnd) AS CLASS TPages; oClass:AddMethod( "New", @TPages_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Redefine( nId, oWnd, aDialogs, nOption, bChange, oFont, aHelps) AS CLASS TPages; oClass:AddMethod( "Redefine", @TPages_Redefine(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddPage( oControl); oClass:AddMethod( "AddPage", @TPages_AddPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


      _HB_MEMBER cToChar(); oClass:AddInline( "cToChar", {|Self | ( ( Self ) ), ::Super:cToChar( "SysTabControl32" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER Initiate(); oClass:AddInline( "Initiate", {|Self, hDlg | ( ( Self ) ), ::Super:Initiate( hDlg ), ::Default() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Default(); oClass:AddMethod( "Default", @TPages_Default(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DelPage( nPage); oClass:AddMethod( "DelPage", @TPages_DelPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Destroy(); oClass:AddMethod( "Destroy", @TPages_Destroy(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetOption( nOption); oClass:AddMethod( "SetOption", @TPages_SetOption(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER GoPrev(); oClass:AddInline( "GoPrev", {|Self | ( ( Self ) ), If( ::nOption > 1, ::SetOption( ::nOption - 1 ),) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER GoNext(); oClass:AddInline( "GoNext", {|Self | ( ( Self ) ), If( ::nOption < Len( ::aDialogs ), ::SetOption( ::nOption + 1 ),) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GotFocus(); oClass:AddMethod( "GotFocus", @TPages_GotFocus(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReSize( nType, nWidth, nHeight); oClass:AddMethod( "ReSize", @TPages_ReSize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Show(); oClass:AddMethod( "Show", @TPages_Show(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Hide(); oClass:AddMethod( "Hide", @TPages_Hide(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPages ;



static FUNCTION TPages_New( nTop, nLeft, nBottom, nRight, oWnd ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages


   If( nTop == nil, nTop := 0, ) ; If( nLeft == nil, nLeft := 0, ); If( nBottom == nil, nBottom := 100, ); If( nRight == nil, nRight := 100, ); If( oWnd == nil, oWnd := GetWndDefault(), );





    ::lUnicode       := FW_SetUnicode()
   ::nTop         := nTop
   ::nLeft        := nLeft
   ::nBottom      := nBottom
   ::nRight       := nRight
   ::oWnd         := oWnd
   ::nStyle       := nOr( 1073741824, 268435456 )
   ::nClrPane     := GetSysColor( 15 )
   ::nOption      := 1
   ::aDialogs     := {}
   ::aHelps       := {}
   ::lDrag        := .F.
   ::lVisible     := .T.





   ::Register()

   if ! Empty( ::oWnd:hWnd )



         ::Create( "SysTabControl32" )

      ::oWnd:AddControl( Self )
   else
      ::oWnd:DefControl( Self )
   endif

return Self



static FUNCTION TPages_Redefine( nId, oWnd, aDialogs, nOption, bChange, oFont, aHelps ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   local n, oDlg




   If( nOption == nil, nOption := 1, ) ; If( oWnd == nil, oWnd := GetWndDefault(), ); If( oFont == nil, oFont := ::GetFont(), ); If( aHelps == nil, aHelps := array( len( aDialogs ) ), );

   ::nId          := nId
   ::oWnd         := oWnd
    ::lUnicode       := FW_SetUnicode()
   ::nOption      := nOption
   ::bChange      := bChange
   ::aDialogs     := aDialogs
   ::aHelps       := aHelps
   ::lVisible     := .T.
   ::SetFont( oFont )

   ::Register()
   ::SetColor( 0, GetSysColor( 15 ) )

   for n = 1 to Len( ::aDialogs )

      oDlg = TDialog():New(,,,,, ::aDialogs[ n ],, .F.,,,,, Self, .F.,, Self:oFont, if(len(::aHelps) >= n , ::aHelps[n] , NIL),,, .F.,, "oDlg", nil, )
      ::aDialogs[ n ] = oDlg
   next

   oWnd:DefControl( Self )

return Self



static FUNCTION TPages_AddPage( oControl ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   AAdd( ::aDialogs, oControl )

   if ::oWnd:hWnd <> nil

         oControl:nWidth  = ::nWidth()
         oControl:nHeight = ::nHeight()





      if Upper( oControl:ClassName() ) == "TDIALOG"


         oControl:Activate( oControl:bLClicked, oControl:bMoved, oControl:bPainted, .F., {|Self|.F.}, ! .T., {|Self|( SysWait(), oControl:Move( 0, 0 ) )}, oControl:bRClicked,,, )


            if IsAppThemed()
               oControl:bEraseBkGnd = { | hDC | DrawPBack( oControl:hWnd, hDC ), 1 }
            endif

      else
         oControl:Move( 0, 0 )
      endif

      ::SetOption( Len( ::aDialogs ) )
   endif

return nil



static FUNCTION TPages_Default( ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   local n, oDlg

   for n = 1 to Len( ::aDialogs )
      oDlg = ::aDialogs[ n ]



      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F., {|Self|.F.}, ! .T., {|Self|( SysWait(), oDlg:Move( 0, 0 ) )}, oDlg:bRClicked,,, )


         if IsAppThemed()
            oDlg:bEraseBkGnd = { | hDC | DrawPBack( oDlg:hWnd, hDC ), 1 }
         endif


      oDlg:Hide()
   next

   if Len( ::aDialogs ) > 0
      if ::nOption <= Len( ::aDialogs )
         ::aDialogs[ ::nOption ]:Show()
      endif
   endif

return nil



static FUNCTION TPages_DelPage( nPage ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   local nNewPage

   If( nPage == nil, nPage := ::nOption, ) ;

   if nPage > 0 .AND. nPage <= Len( ::aDialogs )
      ::aDialogs[ nPage ]:bValid = { || .T. }
      ::aDialogs[ nPage ]:End()
      SysRefresh()
      ADel( ::aDialogs, nPage )
      ASize( ::aDialogs, Len( ::aDialogs ) - 1 )
      ADel( ::aHelps, nPage )
      ASize( ::aHelps, Len( ::aDialogs ) - 1 )
      if Len( ::aDialogs ) > 0
         nNewPage = If( nPage > 1, nPage - 1, 1 )
         if ::bChange <> nil
            Eval( ::bChange, nNewPage, nPage )
         endif
         ::nOption  = nNewPage
         ::aDialogs[ nNewPage ]:Show()
         ::aDialogs[ nNewPage ]:SetFocus()
      endif
   endif

return nil



static FUNCTION TPages_Destroy( ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   aeval( ::aDialogs, {|oDialog| oDialog:bValid := { || .T. }, oDialog:End(), sysrefresh() } )

return ::Super:Destroy()



static FUNCTION TPages_GotFocus( ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   ::Super:GotFocus()

   if ::nOption <= Len( ::aDialogs )
      ::aDialogs[ ::nOption ]:SetFocus()
   endif

return 0



static FUNCTION TPages_SetOption( nOption ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   local nOldOption

   if nOption > 0 .AND. nOption <> ::nOption
      if ::nOption <= Len( ::aDialogs ) .AND. ::aDialogs[ ::nOption ] <> nil
         ::aDialogs[ ::nOption ]:Hide()
      endif
      nOldOption = ::nOption
      ::nOption  = nOption
      if nOption <= Len( ::aDialogs ) .AND. ::aDialogs[ nOption ] <> nil
         if ::bChange <> nil
            Eval( ::bChange, nOption, nOldOption )
         endif
         ::aDialogs[ nOption ]:Show()
         ::aDialogs[ nOption ]:SetFocus()
      endif
   endif

return nil



static FUNCTION TPages_ReSize( nType, nWidth, nHeight ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages


   If( nWidth == nil, nWidth := ::nWidth(), ) ; If( nHeight == nil, nHeight := ::nHeight, );

   aeval( ::aDialogs, {|oDialog| oDialog:SetSize( nWidth, nHeight ) } )

return ::Super:Resize( nType, nWidth, nHeight )



static FUNCTION TPages_Show( ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   aeval( ::aDialogs, {|oDialog| aeval(oDialog:aControls, {|oControl| oControl:Show() } ) } )

RETURN ( ::Super:Show() )



static FUNCTION TPages_Hide( ) ; local Self AS CLASS TPages := QSelf() AS CLASS TPages

   aeval( ::aDialogs, {|oDialog| aeval(oDialog:aControls, {|oControl| oControl:Hide() } ) } )

RETURN ( ::Super:Hide() )
