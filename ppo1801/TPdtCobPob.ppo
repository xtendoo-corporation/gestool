#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TPdtCobPob.prg"
_HB_CLASS TPdtCobPob ; function TPdtCobPob ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPdtCobPob", iif( .T., { @TInfGen() }, { @HBObject() } ), @TPdtCobPob() ) ) ;

   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Cobradas", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS LOGIC lAllCP } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllCP"}, .F. )
   _HB_MEMBER { AS CHARACTER cCPOrg } ; oClass:AddMultiData( "CHARACTER", "00000", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCPOrg"}, .F. )
   _HB_MEMBER { AS CHARACTER cCPDes } ; oClass:AddMultiData( "CHARACTER", "99999", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCPDes"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TPdtCobPob_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TPdtCobPob_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TPdtCobPob_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TPdtCobPob_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TPdtCobPob_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPdtCobPob ;



static FUNCTION TPdtCobPob_Create( ) ; local Self AS CLASS TPdtCobPob := QSelf() AS CLASS TPdtCobPob

   ::AddField ( "CCODCLI", "C", 12, 0, {|| "@!" },         "Código",                    .F., "Código cliente"            ,  8, .F. )
   ::AddField ( "CNOMCLI", "C", 50, 0, {|| "@!" },         "Cliente",                   .T., "Nombre cliente"            , 25, .F. )
   ::AddField ( "CDOCMOV", "C", 18, 0, {|| "@!" },         "Factura",                   .T., "Factura"                   , 14, .F. )
   ::AddField ( "DFECMOV", "D",  8, 0, {|| "@!" },         "Fecha",                     .T., "Fecha"                     , 14, .F. )
   ::AddField ( "CNIFCLI", "C", 15, 0, {|| "@!" },         "Nif",                       .F., "Nif"                       ,  8, .F. )
   ::AddField ( "CDOMCLI", "C", 35, 0, {|| "@!" },         "Dom",                       .F., "Domicilio"                 , 25, .F. )
   ::AddField ( "CPOBCLI", "C", 25, 0, {|| "@!" },         "Pob",                       .F., "Población"                 , 20, .F. )
   ::AddField ( "CPROCLI", "C", 20, 0, {|| "@!" },         "Prov",                      .F., "Provincia"                 , 20, .F. )
   ::AddField ( "CCDPCLI", "C",  7, 0, {|| "@!" },         "CP",                        .F., "Cod. Postal"               , 20, .F. )
   ::AddField ( "CTLFCLI", "C", 12, 0, {|| "@!" },         "Tlf",                       .F., "Teléfono"                  ,  7, .F. )
   ::AddField ( "COBRCLI", "C", 10, 0, {|| "@!" },         "Dirección",                      .F., "Código dirección"               , 12, .F. )
   ::AddField ( "NTOTDOC", "N", 16, 3, {|| ::cPicOut },    "Tot. Fac",                  .T., "Total factura"             , 10, .T. )
   ::AddField ( "NTOTCOB", "N", 16, 3, {|| ::cPicOut },    "Tot. Cob",                  .T., "Total cobrado"             , 10, .T. )
   ::AddField ( "NTOTPEN", "N", 16, 3, {|| ::cPicOut },    "Tot. Pen",                  .T., "Total pendiente"           , 10, .T. )
   ::AddField ( "CTIPVEN", "C", 20, 0, {|| "@!" },         "Venta",                     .F., "Tipo de venta"             , 15, .F. )

   ::AddTmpIndex ( "CCDPCLI", "CCDPCLI + CCODCLI" )

   ::AddGroup( {|| ::oDbf:cCdpCli }, {|| "Código postal : " + Rtrim( ::oDbf:cCdpCli )  }, {||"Total código postal..."} )

RETURN ( self )



static FUNCTION TPdtCobPob_OpenFiles( ) ; local Self AS CLASS TPdtCobPob := QSelf() AS CLASS TPdtCobPob

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TPdtCobPob_CloseFiles( ) ; local Self AS CLASS TPdtCobPob := QSelf() AS CLASS TPdtCobPob

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end

   ::oFacCliP := nil
   ::oAntCliT := nil
   ::oDbfIva  := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil

RETURN ( Self )



static FUNCTION TPdtCobPob_lResource( cFld ) ; local Self AS CLASS TPdtCobPob := QSelf() AS CLASS TPdtCobPob

   local cEstado := "Pendientes"
   local oCPOrg
   local oCPDes

   if !::StdResource( "INF_GEN16C" )
      return .F.
   end



   TCheckBox():ReDefine( 800, { | u | If( PCount()==0, ::lAllCP, ::lAllCP:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   oCPOrg := TGetHlp():ReDefine( 801, { | u | If( PCount()==0, ::cCPOrg, ::cCPOrg:= u ) }, ::oFld:aDialogs[1],, "99999",,,,,,, .F., {||     ( !::lAllCP )},, .F., .F.,,,,,, nil,,, )





   oCPDes := TGetHlp():ReDefine( 802, { | u | If( PCount()==0, ::cCPDes, ::cCPDes:= u ) }, ::oFld:aDialogs[1],, "99999",,,,,,, .F., {||     ( !::lAllCP )},, .F., .F.,,,,,, nil,,, )

   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )

RETURN .T.






static FUNCTION TPdtCobPob_lGenerate( ) ; local Self AS CLASS TPdtCobPob := QSelf() AS CLASS TPdtCobPob

   local nTotFacCli     := 0
   local nPagFacCli     := 0
   local cExpHead       := ""
   local nTotFacRec     := 0
   local nPagFacRec     := 0

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente   : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) }, {|| "C. postal : " + if( ::lAllCp, "Todos", AllTrim( ::cCpOrg ) + " > " + AllTrim( ::cCpDes ) ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] } }

   ::oFacCliT:OrdSetFocus( "dFecFac" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !::lAllCp
      cExpHead       += ' .and. cPosCli >= "' + Rtrim( ::cCpOrg ) + '" .and. cPosCli <= "' + Rtrim( ::cCpDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )

   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:CSERIE, ::aSer )

         nTotFacCli  := nTotFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias )
         nPagFacCli  := nPagFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliP:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias )

         ::oDbf:Append()

         ::oDbf:dFecMov := ::oFacCliT:DFecFac
         ::oDbf:nTotDoc := nTotFacCli
         ::oDbf:cDocMov := lTrim ( ::oFacCliT:cSerie ) + "/" + lTrim ( Str( ::oFacCliT:nNumFac ) ) + "/" + lTrim ( ::oFacCliT:cSufFac )



         ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )

         ::oDbf:nTotCob := nPagFacCli
         ::oDbf:nTotPen := nTotFacCli - nPagFacCli
         ::oDbf:Save()

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )





   ::oFacRecT:OrdSetFocus( "dFecFac" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !::lAllCp
      cExpHead       += ' .and. cPosCli >= "' + Rtrim( ::cCpOrg ) + '" .and. cPosCli <= "' + Rtrim( ::cCpDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )

   ::oFacRecT:GoTop()

   while !::lBreak .AND. !::oFacRecT:Eof()

      if lChkSer( ::oFacRecT:cSerie, ::aSer )

         nTotFacRec  := nTotFacRec( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac, ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias )
         nPagFacRec  := nPagFacRec( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac, ::oFacRecT:cAlias, ::oFacCliP:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias )

         ::oDbf:Append()

         ::oDbf:dFecMov := ::oFacRecT:dFecFac
         ::oDbf:nTotDoc := nTotFacRec
         ::oDbf:cDocMov := lTrim ( ::oFacRecT:cSerie ) + "/" + lTrim ( Str( ::oFacRecT:nNumFac ) ) + "/" + lTrim ( ::oFacRecT:cSufFac )



         ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )

         ::oDbf:nTotCob := nPagFacRec
         ::oDbf:nTotPen := nTotFacRec - nPagFacRec
         ::oDbf:Save()

      end

      ::oFacRecT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacRecT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ) )

   ::oMtrInf:AutoInc( ::oFacRecT:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
