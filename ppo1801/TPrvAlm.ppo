#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TPrvAlm.prg"
_HB_CLASS TPrvAlm ; function TPrvAlm ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPrvAlm", iif( .T., { @TInfGen() }, { @HBObject() } ), @TPrvAlm() ) ) ;

   _HB_MEMBER CreateFields(); oClass:AddMethod( "CreateFields", @TPrvAlm_CreateFields(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AnuAlmFields(); oClass:AddMethod( "AnuAlmFields", @TPrvAlm_AnuAlmFields(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AcuCreate(); oClass:AddMethod( "AcuCreate", @TPrvAlm_AcuCreate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddPed( lAcumula); oClass:AddMethod( "AddPed", @TPrvAlm_AddPed(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAlb( lAcumula); oClass:AddMethod( "AddAlb", @TPrvAlm_AddAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddFac( lAcumula); oClass:AddMethod( "AddFac", @TPrvAlm_AddFac(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER IncluyeCero(); oClass:AddMethod( "IncluyeCero", @TPrvAlm_IncluyeCero(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPrvAlm ;



static FUNCTION TPrvAlm_CreateFields( ) ; local Self AS CLASS TPrvAlm := QSelf() AS CLASS TPrvAlm


   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },       "Art.",          .F., "Cod. artículo",      14, .F. )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },       "Artículo",      .F., "Artículo",           40, .F. )
   ::AddField ( "cCodAlm", "C", 16, 0, {|| "@!" },       "Alm.",          .F., "Cod. almacén",        3, .F. )
   ::AddField ( "cNomAlm", "C", 40, 0, {|| "@!" },       "Almacén",       .F., "Almacén",            40, .F. )
   ::FldPropiedades()
   ::FldProveedor()
   ::AddField ( "nNumCaj", "N", 16, 6, {|| MasUnd() },   cNombreCajas(),  .F., cNombreCajas(),       12, .T. )
   ::AddField ( "nUniDad", "N", 16, 6, {|| MasUnd() },   cNombreUnidades(),.F., cNombreUnidades(),   12, .T. )
   ::AddField ( "nNumUni", "N", 16, 6, {|| MasUnd() },   "Tot. " + cNombreUnidades(),     .T., "Total " + cNombreUnidades(),     12, .T. )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicImp },  "Precio",        .T., "Precio",             12, .F. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },  "Base",          .T., "Base",               12, .T. )
   ::AddField ( "nTotPes", "N", 16, 6, {|| MasUnd() },   "Tot. peso",     .F., "Total peso",         12, .T. )
   ::AddField ( "nPreKgr", "N", 16, 6, {|| ::cPicImp },  "Pre. Kg.",      .F., "Precio kilo",        12, .F. )
   ::AddField ( "nTotVol", "N", 16, 6, {|| MasUnd() },   "Tot. volumen",  .F., "Total volumen",      12, .T. )
   ::AddField ( "nPreVol", "N", 16, 6, {|| ::cPicImp },  "Pre. vol.",     .F., "Precio volumen",     12, .F. )
   ::AddField ( "nIvaTot", "N", 16, 6, {|| ::cPicOut },  cImp(),        .T., cImp(),             12, .T. )
   ::AddField ( "nTotFin", "N", 16, 6, {|| ::cPicOut },  "Total",         .T., "Total",              12, .T. )
   ::AddField ( "cDocMov", "C", 14, 0, {|| "@!" },       "Doc.",          .T., "Documento",           8, .F. )
   ::AddField ( "cTipDoc", "C", 20, 0, {|| "@!" },       "Tipo",          .F., "Tipo de documento",  10, .F. )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },       "Fecha",         .T., "Fecha",              10, .F. )

RETURN ( Self )



static FUNCTION TPrvAlm_AnuAlmFields( ) ; local Self AS CLASS TPrvAlm := QSelf() AS CLASS TPrvAlm

   ::AddField ( "cCodAlm", "C", 16, 0, {|| "@!" },         "Cod.",            .T., "Cod. Almacén",     3 )
   ::AddField ( "cNomAlm", "C", 40, 0, {|| "@!" },         "Almacén",         .T., "Almacén",         40 )
   ::AddField ( "nImpEne", "N", 16, 6, {|| ::cPicOut },    "Ene",             .T., "Enero",           12 )
   ::AddField ( "nImpFeb", "N", 16, 6, {|| ::cPicOut },    "Feb",             .T., "Febrero",         12 )
   ::AddField ( "nImpMar", "N", 16, 6, {|| ::cPicOut },    "Mar",             .T., "Marzo",           12 )
   ::AddField ( "nImpAbr", "N", 16, 6, {|| ::cPicOut },    "Abr",             .T., "Abril",           12 )
   ::AddField ( "nImpMay", "N", 16, 6, {|| ::cPicOut },    "May",             .T., "Mayo",            12 )
   ::AddField ( "nImpJun", "N", 16, 6, {|| ::cPicOut },    "Jun",             .T., "Junio",           12 )
   ::AddField ( "nImpJul", "N", 16, 6, {|| ::cPicOut },    "Jul",             .T., "Julio",           12 )
   ::AddField ( "nImpAgo", "N", 16, 6, {|| ::cPicOut },    "Ago",             .T., "Agosto",          12 )
   ::AddField ( "nImpSep", "N", 16, 6, {|| ::cPicOut },    "Sep",             .T., "Septiembre",      12 )
   ::AddField ( "nImpOct", "N", 16, 6, {|| ::cPicOut },    "Oct",             .T., "Octubre",         12 )
   ::AddField ( "nImpNov", "N", 16, 6, {|| ::cPicOut },    "Nov",             .T., "Noviembre",       12 )
   ::AddField ( "nImpDic", "N", 16, 6, {|| ::cPicOut },    "Dic",             .T., "Diciembre",       12 )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },    "Tot",             .T., "Total",           12 )

RETURN ( self )



static FUNCTION TPrvAlm_AcuCreate( ) ; local Self AS CLASS TPrvAlm := QSelf() AS CLASS TPrvAlm

   ::AddField ( "cCodAlm", "C", 16, 0, {|| "@!" },           "Alm",           .T., "Cod. almacén",      3, .F. )
   ::AddField ( "cNomAlm", "C", 50, 0, {|| "@!" },           "Almacém",       .T., "Nombre almacén",   15, .F. )
   ::AddField ( "nNumUni", "N", 16, 6, {|| MasUnd() },       cNombreUnidades(),     .T., cNombreUnidades(),   12, .T. )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicImp },      "Precio",        .F., "Precio",           12, .F. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },      "Base",          .T., "Base",             12, .T. )
   ::AddField ( "nTotPes", "N", 16, 6, {|| MasUnd() },       "Tot. peso",     .F., "Total peso",       12, .T. )
   ::AddField ( "nPreKgr", "N", 16, 6, {|| ::cPicImp },      "Pre. Kg.",      .F., "Precio kilo",      12, .F. )
   ::AddField ( "nTotVol", "N", 16, 6, {|| MasUnd() },       "Tot. volumen",  .F., "Total volumen",    12, .T. )
   ::AddField ( "nPreVol", "N", 16, 6, {|| ::cPicImp },      "Pre. vol.",     .F., "Precio volumen",   12, .F. )
   ::AddField ( "nPreMed", "N", 16, 6, {|| ::cPicImp },      "Pre. Med.",     .T., "Precio medio",     12, .F. )
   ::AddField ( "nIvaTot", "N", 16, 6, {|| ::cPicOut },      "Tot. " + cImp(),   .T., "Total " + cImp(),     12, .T. )
   ::AddField ( "nTotFin", "N", 16, 6, {|| ::cPicOut },      "Total",         .T., "Total",            12, .T. )

RETURN ( self )



static FUNCTION TPrvAlm_AddPed( lAcumula ) ; local Self AS CLASS TPrvAlm := QSelf() AS CLASS TPrvAlm

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oPedPrvL:cAlmLin )

      ::oDbf:Append()

      ::oDbf:cCodAlm    := ::oPedPrvL:cAlmLin
      ::oDbf:cNomAlm    := oRetFld( ::oDbf:cCodAlm, ::oDbfAlm )
      ::oDbf:nNumUni    := nTotNPedPrv( ::oPedPrvL )
      ::oDbf:nImpArt    := nTotUPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oPedPrvL:cRef, nTotNPedPrv( ::oPedPrvL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddProveedor( ::oPedPrvT:cCodPrv )
         ::oDbf:cCodArt    := ::oPedPrvL:cRef
         ::oDbf:cNomArt    := ::oPedPrvL:cDetalle
         ::oDbf:cCodPr1    := ::oPedPrvL:cCodPr1
         ::oDbf:cNomPr1    := retProp( ::oPedPrvL:cCodPr1 )
         ::oDbf:cCodPr2    := ::oPedPrvL:cCodPr2
         ::oDbf:cNomPr2    := retProp( ::oPedPrvL:cCodPr2 )
         ::oDbf:cValPr1    := ::oPedPrvL:cValPr1
         ::oDbf:cNomVl1    := retValProp( ::oPedPrvL:cCodPr1 + ::oPedPrvL:cValPr1 )
         ::oDbf:cValPr2    := ::oPedPrvL:cValPr2
         ::oDbf:cNomVl2    := retValProp( ::oPedPrvL:cCodPr2 + ::oPedPrvL:cValPr2 )
         ::oDbf:nNumCaj    := ::oPedPrvL:nCanPed
         ::oDbf:nUniDad    := ::oPedPrvL:nUniCaja
         ::oDbf:cDocMov    := lTrim( ::oPedPrvL:cSerPed ) + "/" + lTrim ( Str( ::oPedPrvL:nNumPed ) ) + "/" + lTrim ( ::oPedPrvL:cSufPed )
         ::oDbf:dFecMov    := ::oPedPrvT:dFecPed

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNPedPrv( ::oPedPrvL )
      ::oDbf:nImpArt    += nTotUPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oPedPrvL:cRef, nTotNPedPrv( ::oPedPrvL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TPrvAlm_AddAlb( lAcumula ) ; local Self AS CLASS TPrvAlm := QSelf() AS CLASS TPrvAlm

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oAlbPrvL:cAlmLin )

      ::oDbf:Append()

      ::oDbf:cCodAlm    := ::oAlbPrvL:cAlmLin
      ::oDbf:cNomAlm    := oRetFld( ::oDbf:cCodAlm, ::oDbfAlm )
      ::oDbf:nNumUni    := nTotNAlbPrv( ::oAlbPrvL )
      ::oDbf:nImpArt    := nTotUAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oAlbPrvL:cRef, nTotNAlbPrv( ::oAlbPrvL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddProveedor( ::oAlbPrvT:cCodPrv )
         ::oDbf:cCodArt := ::oAlbPrvL:cRef
         ::oDbf:cNomArt := ::oAlbPrvL:cDetalle
         ::oDbf:cCodPr1 := ::oAlbPrvL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oAlbPrvL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oAlbPrvL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oAlbPrvL:cCodPr2 )
         ::oDbf:cValPr1 := ::oAlbPrvL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oAlbPrvL:cCodPr1 + ::oAlbPrvL:cValPr1 )
         ::oDbf:cValPr2 := ::oAlbPrvL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oAlbPrvL:cCodPr2 + ::oAlbPrvL:cValPr2 )
         ::oDbf:nNumCaj := ::oAlbPrvL:nCanEnt
         ::oDbf:nUniDad := ::oAlbPrvL:nUniCaja
         ::oDbf:cDocMov := ::oAlbPrvL:cSerAlb + "/" + lTrim ( Str( ::oAlbPrvL:nNumAlb ) ) + "/" + lTrim ( ::oAlbPrvL:cSufAlb )
         ::oDbf:dFecMov := ::oAlbPrvT:dFecAlb

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNAlbPrv( ::oAlbPrvL )
      ::oDbf:nImpArt    += nTotUAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oAlbPrvL:cRef, nTotNAlbPrv( ::oAlbPrvL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TPrvAlm_AddFac( lAcumula ) ; local Self AS CLASS TPrvAlm := QSelf() AS CLASS TPrvAlm

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacPrvL:cAlmLin )

      ::oDbf:Append()

      ::oDbf:cCodAlm    := ::oFacPrvL:cAlmLin
      ::oDbf:cNomAlm    := oRetFld( ::oDbf:cCodAlm, ::oDbfAlm )
      ::oDbf:nNumUni    := nTotNFacPrv( ::oFacPrvL )
      ::oDbf:nImpArt    := nTotUFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacPrvL:cRef, nTotNFacPrv( ::oFacPrvL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddProveedor( ::oFacPrvT:cCodPrv )
         ::oDbf:cCodArt := ::oFacPrvL:cRef
         ::oDbf:cNomArt := ::oFacPrvL:cDetalle
         ::oDbf:cCodPr1 := ::oFacPrvL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacPrvL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacPrvL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacPrvL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacPrvL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacPrvL:cCodPr1 + ::oFacPrvL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacPrvL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacPrvL:cCodPr2 + ::oFacPrvL:cValPr2 )
         ::oDbf:nNumCaj := ::oFacPrvL:nCanEnt
         ::oDbf:nUniDad := ::oFacPrvL:nUniCaja
         ::oDbf:cDocMov := ::oFacPrvL:cSerFac + "/" + lTrim ( Str( ::oFacPrvL:nNumFac ) ) + "/" + lTrim ( ::oFacPrvL:cSufFac )
         ::oDbf:dFecMov := ::oFacPrvT:dFecFac

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacPrv( ::oFacPrvL )
      ::oDbf:nImpArt    += nTotUFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacPrvL:cRef, nTotNFacPrv( ::oFacPrvL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TPrvAlm_IncluyeCero( ) ; local Self AS CLASS TPrvAlm := QSelf() AS CLASS TPrvAlm





   ::oDbfAlm:GoTop()

   while !::oDbfAlm:Eof()


      if ( ::lAllAlm .OR. ( ::oDbfAlm:cCodAlm >= ::cAlmOrg .AND. ::oDbfAlm:cCodAlm <= ::cAlmDes ) ) .AND. !::oDbf:Seek( ::oDbfAlm:cCodAlm )

         ::oDbf:Append()
         ::oDbf:Blank()
         ::oDbf:cCodAlm    := ::oDbfAlm:cCodAlm
         ::oDbf:cNomAlm    := ::oDbfAlm:cNomAlm
         ::oDbf:Save()

      end

      ::oDbfAlm:Skip()

   end

RETURN ( self )
