#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TPrvGrpPrv.prg"
_HB_CLASS TPrvGrpPrv ; function TPrvGrpPrv ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TPrvGrpPrv", iif( .T., { @TInfGen() }, { @HBObject() } ), @TPrvGrpPrv() ) ) ;

   _HB_MEMBER CreateFields(); oClass:AddMethod( "CreateFields", @TPrvGrpPrv_CreateFields(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AnuFields(); oClass:AddMethod( "AnuFields", @TPrvGrpPrv_AnuFields(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AcuCreate(); oClass:AddMethod( "AcuCreate", @TPrvGrpPrv_AcuCreate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddAlb( cCodGrp); oClass:AddMethod( "AddAlb", @TPrvGrpPrv_AddAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddFac( cCodGrp); oClass:AddMethod( "AddFac", @TPrvGrpPrv_AddFac(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TPrvGrpPrv ;



static FUNCTION TPrvGrpPrv_CreateFields( ) ; local Self AS CLASS TPrvGrpPrv := QSelf() AS CLASS TPrvGrpPrv


   ::AddField ( "cCodGrp", "C",  4, 0, {|| "@!" },          "Grupo",                      .F., "Grupo",                        4, .F. )
   ::AddField ( "cNomGrp", "C", 30, 0, {|| "@!" },          "Nom. Grp ",                  .F., "Nombre del grupo",            30, .F. )
   ::AddField ( "cCodPrv", "C", 12, 0, {|| "@!" },          "Prv.",                       .F., "Cod. Proveedor",               9, .F. )
   ::AddField ( "cNomPrv", "C", 50, 0, {|| "@!" },          "Proveedor",                  .F., "Nombre Proveedor",            35, .F. )
   ::AddField ( "cDocMov", "C", 14, 0, {|| "@!" },          "Doc.",                       .T., "Documento",                   15, .F. )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },          "Fecha",                      .T., "Fecha",                       10, .F. )
   ::AddField ( "cTipDoc", "C", 20, 0, {|| "@!" },          "Tipo",                       .F., "Tipo de documento",           10, .F. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },     "Base",                       .T., "Base",                        12, .T. )
   ::AddField ( "nIvaTot", "N", 16, 6, {|| ::cPicOut },     cImp(),                       .T., cImp(),                        12, .T. )
   ::AddField ( "nTotFin", "N", 16, 6, {|| ::cPicOut },     "Total",                      .T., "Total",                       12, .T. )

RETURN ( Self )



static FUNCTION TPrvGrpPrv_AnuFields( ) ; local Self AS CLASS TPrvGrpPrv := QSelf() AS CLASS TPrvGrpPrv


   ::AddField ( "cCodGrp", "C",  4, 0, {|| "" },           "Grupo",           .T., "Grupo",                       4, .F. )
   ::AddField ( "cNomGrp", "C", 30, 0, {|| "@!" },         "Nom. Grp ",       .T., "Nombre del grupo",           30, .F. )
   ::AddField ( "nImpEne", "N", 16, 6, {|| ::cPicOut },    "Ene",             .T., "Enero",                      12, .T. )
   ::AddField ( "nImpFeb", "N", 16, 6, {|| ::cPicOut },    "Feb",             .T., "Febrero",                    12, .T. )
   ::AddField ( "nImpMar", "N", 16, 6, {|| ::cPicOut },    "Mar",             .T., "Marzo",                      12, .T. )
   ::AddField ( "nImpAbr", "N", 16, 6, {|| ::cPicOut },    "Abr",             .T., "Abril",                      12, .T. )
   ::AddField ( "nImpMay", "N", 16, 6, {|| ::cPicOut },    "May",             .T., "Mayo",                       12, .T. )
   ::AddField ( "nImpJun", "N", 16, 6, {|| ::cPicOut },    "Jun",             .T., "Junio",                      12, .T. )
   ::AddField ( "nImpJul", "N", 16, 6, {|| ::cPicOut },    "Jul",             .T., "Julio",                      12, .T. )
   ::AddField ( "nImpAgo", "N", 16, 6, {|| ::cPicOut },    "Ago",             .T., "Agosto",                     12, .T. )
   ::AddField ( "nImpSep", "N", 16, 6, {|| ::cPicOut },    "Sep",             .T., "Septiembre",                 12, .T. )
   ::AddField ( "nImpOct", "N", 16, 6, {|| ::cPicOut },    "Oct",             .T., "Octubre",                    12, .T. )
   ::AddField ( "nImpNov", "N", 16, 6, {|| ::cPicOut },    "Nov",             .T., "Noviembre",                  12, .T. )
   ::AddField ( "nImpDic", "N", 16, 6, {|| ::cPicOut },    "Dic",             .T., "Diciembre",                  12, .T. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },    "Tot",             .T., "Total",                      12, .T. )

RETURN ( self )



static FUNCTION TPrvGrpPrv_AcuCreate( ) ; local Self AS CLASS TPrvGrpPrv := QSelf() AS CLASS TPrvGrpPrv

   ::AddField( "cCodGrp", "C",  4, 0, {|| "" },             "Grupo",          .T., "Grupo"                , 10, .F. )
   ::AddField( "cNomGrp", "C", 30, 0, {|| "@!" },           "Nom. Grp ",      .T., "Nombre del grupo"     , 30, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },      "Base",           .T., "Base"                 , 12, .T. )
   ::AddField( "nIvaTot", "N", 16, 6, {|| ::cPicOut },      "Tot. " + cImp(),    .T., "Total " + cImp()         , 12, .T. )
   ::AddField( "nTotFin", "N", 16, 6, {|| ::cPicOut },      "Total",          .T., "Total"                , 12, .T. )

RETURN ( self )



static FUNCTION TPrvGrpPrv_AddAlb( lAcumula, cCodGrp ) ; local Self AS CLASS TPrvGrpPrv := QSelf() AS CLASS TPrvGrpPrv

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( cCodGrp )

      ::oDbf:Append()

      ::oDbf:cCodGrp    := cCodGrp
      ::oDbf:cNomGrp    := cNomGrp( cCodGrp, ::oGrpPrv:oDbf )
      ::oDbf:nImpTot    := nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      if !lAcumula

         ::oDbf:cCodPrv := ::oAlbPrvT:cCodPrv
         ::oDbf:cNomPrv := ::oAlbPrvT:cNomPrv
         ::oDbf:cDocMov := AllTrim( ::oAlbPrvT:cSerAlb ) + "/" + AllTrim ( Str( ::oAlbPrvT:nNumAlb ) ) + "/" + AllTrim ( ::oAlbPrvT:cSufAlb )
         ::oDbf:dFecMov := ::oAlbPrvT:dFecAlb

      end

   else

      ::oDbf:Load()
      ::oDbf:nImpTot    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



static FUNCTION TPrvGrpPrv_AddFac( lAcumula, cCodGrp ) ; local Self AS CLASS TPrvGrpPrv := QSelf() AS CLASS TPrvGrpPrv

   If( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( cCodGrp )

      ::oDbf:Append()

      ::oDbf:cCodGrp    := cCodGrp
      ::oDbf:cNomGrp    := cNomGrp( cCodGrp, ::oGrpPrv:oDbf )
      ::oDbf:nImpTot    := nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      if !lAcumula

         ::oDbf:cCodPrv := ::oAlbPrvT:cCodPrv
         ::oDbf:cNomPrv := ::oAlbPrvT:cNomPrv
         ::oDbf:cDocMov := AllTrim( ::oFacPrvT:cSerFac ) + "/" + AllTrim ( Str( ::oFacPrvT:nNumFac ) ) + "/" + AllTrim ( ::oFacPrvT:cSufFac )
         ::oDbf:dFecMov := ::oFacPrvT:dFecFac

      end

   else

      ::oDbf:Load()
      ::oDbf:nImpTot    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )
