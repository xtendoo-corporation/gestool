#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TRenTVta.prg"
_HB_CLASS TRenTVta ; function TRenTVta ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRenTVta", iif( .T., { @TInfTip() }, { @HBObject() } ), @TRenTVta() ) ) ;

   _HB_MEMBER { AS LOGIC lCosAct } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lCosAct"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )

   _HB_MEMBER { AS NUMERIC nTotVentas } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotVentas"}, .F. )
   _HB_MEMBER { AS NUMERIC nTotCosto } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotCosto"}, .F. )
   _HB_MEMBER { AS NUMERIC nTotAtipica } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotAtipica"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TRenTVta_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TRenTVta_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TRenTVta_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TRenTVta_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TRenTVta_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRenTVta ;



static FUNCTION TRenTVta_Create( ) ; local Self AS CLASS TRenTVta := QSelf() AS CLASS TRenTVta

   ::AddField( "cCodTip", "C",  4, 0, {|| "@!" },           "Cod.",              .T., "Código tipo",            5, .F. )
   ::AddField( "cNomTip", "C", 35, 0, {|| "@!" },           "Tipo",              .T., "Nombre tipo",           20, .F. )
   ::AddField( "nTotCaj", "N", 16, 6, {|| MasUnd() },       "Cajas",             .F., "Cajas",                 12, .T. )
   ::AddField( "nTotUni", "N", 16, 6, {|| MasUnd() },       "Unds.",             .T., "Unidades",              10, .T. )
   ::AddField( "nTotImp", "N", 16, 6, {|| ::cPicOut },      "Tot. importe",      .T., "Tot. importe",          12, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },       "Tot. peso",         .F., "Total peso",            12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },      "Pre. kg.",          .F., "Precio kilo",           12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },       "Tot. volumen",      .F., "Total volumen",         12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },      "Pre. vol.",         .F., "Precio volumen",        12, .F. )
   ::AddField( "nTotCos", "N", 16, 6, {|| ::cPicOut },      "Tot. costo",        .T., "Total costo",           12, .T. )
   ::AddField( "nDtoAtp", "N", 16, 6, {|| ::cPicOut },      "Dto. Atipico",      .F., "Importe dto. atipico",  12, .T. )
   ::AddField( "nMarGen", "N", 16, 6, {|| ::cPicOut },      "Margen",            .T., "Margen",                12, .T. )
   ::AddField( "nRenTab", "N", 16, 6, {|| ::cPicOut },      "%Rent.",            .T., "Rentabilidad",          12, .F. )
   ::AddField( "nPreMed", "N", 16, 6, {|| ::cPicImp },      "Precio medio",      .F., "Precio medio",          12, .F. )
   ::AddField( "nCosMed", "N", 16, 6, {|| ::cPicOut },      "Costo medio",       .T., "Costo medio",           12, .F. )

   ::AddTmpIndex( "cCodTip", "cCodTip" )

RETURN ( self )



static FUNCTION TRenTVta_OpenFiles( ) ; local Self AS CLASS TRenTVta := QSelf() AS CLASS TRenTVta

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE



   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TRenTVta_CloseFiles( ) ; local Self AS CLASS TRenTVta := QSelf() AS CLASS TRenTVta

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end
   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oTikCliT := nil
   ::oTikCliL := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil
   ::oAlbCliT := nil
   ::oAlbCliL := nil

   ::oDbfArt := nil

RETURN ( Self )



static FUNCTION TRenTVta_lResource( cFld ) ; local Self AS CLASS TRenTVta := QSelf() AS CLASS TRenTVta

   if !::StdResource( "INFRENTIP_B" )
      return .F.
   end

   ::CreateFilter( , ::oDbf, .T. )



   if !::oDefTipInf( 110, 120, 130, 140, 910 )
      return .F.
   end

   ::oDefExcInf( 210 )
   ::oDefExcImp( 211 )



   TCheckBox():ReDefine( ( 205 ), { | u | If( PCount()==0, ::lCosAct, ::lCosAct:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

RETURN .T.






static FUNCTION TRenTVta_lGenerate( ) ; local Self AS CLASS TRenTVta := QSelf() AS CLASS TRenTVta

   local cCodTip
   local cExpHead    := ""
   local cExpLine    := ""
   local nTotUni     := 0
   local nTotImpUni  := 0
   local nImpDtoAtp  := 0

   ::nTotVentas      := 0
   ::nTotCosto       := 0
   ::nTotAtipica     := 0

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Tipo Art. : " + if( ::lAllTip, "Todos", AllTrim( ::cTipOrg ) + " > " + AllTrim( ::cTipDes ) ) }, {|| "Rnt med   : " + Alltrim( Trans( ( ( ( ( ::nTotVentas - ::nTotAtipica ) / ::nTotCosto ) - 1 )* 100 ), ::cPicOut ) ) + "%" } }



   ::oAlbCliT:OrdSetFocus( "dFecAlb" )
   ::oAlbCliL:OrdSetFocus( "nNumAlb" )

   cExpHead          := 'nFacturado < 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando albaranes"
   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )

   cExpLine          := "!lTotLin .and. !lControl .and. !lKitChl"

   ::oAlbCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ), ::oAlbCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oAlbCliT:GoTop()

    while !::lBreak .AND. !::oAlbCliT:Eof()

      if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )

         if ::oAlbCliL:Seek( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb )

            while ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb == ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb

               cCodTip := oRetFld( ::oAlbCliL:cRef, ::oDbfArt , "cCodTip")



               if ( ::lAllTip .OR. ( cCodTip >= ::cTipOrg .AND. cCodTip <= ::cTipDes ) )                 .AND. !( ::lExcCero .AND. nTotNAlbCli( ::oAlbCliL:cAlias ) == 0 )                            .AND. !( ::lExcImp .AND. nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut ) == 0 )

                  nTotUni              := nTotNAlbCli( ::oAlbCliL:cAlias )
                  nTotImpUni           := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
                  nImpDtoAtp           := nDtoAtpAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )

                  if ::oDbf:Seek( cCodTip )

                     ::oDbf:Load()

                     ::oDbf:nTotCaj    += ::oAlbCliL:nCanEnt
                     ::oDbf:nTotUni    += nTotUni
                     ::oDbf:nTotPes    += nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    += nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    += nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oAlbCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotUni
                     else
                        ::oDbf:nTotCos += ::oAlbCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oAlbCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    += nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += nTotImpUni
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  else

                     ::oDbf:Append()

                     ::oDbf:cCodTip    := cCodTip
                     ::oDbf:cNomTip    := oRetFld( cCodTip, ::oTipArt:oDbf, "cNomTip" )
                     ::oDbf:nTotCaj    := ::oAlbCliL:nCanEnt
                     ::oDbf:nTotUni    := nTotUni
                     ::oDbf:nTotPes    := nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    := nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    := nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oAlbCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotUni
                     else
                        ::oDbf:nTotCos := ::oAlbCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oAlbCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    := nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += ::oDbf:nTotImp
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  end

               end

               ::oAlbCliL:Skip()

            end

         end

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )
   ::oAlbCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ) )



   ::oFacCliT:OrdSetFocus( "dFecFac" )
   ::oFacCliL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText := "Procesando factura"
   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )

   cExpLine          := "!lTotLin .and. !lControl .and. !lKitChl"

   ::oFacCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ), ::oFacCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:cSerie, ::aSer )

         if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

            while ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac == ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac

               cCodTip := oRetFld( ::oFacCliL:cRef, ::oDbfArt , "cCodTip")



               if ( ::lAllTip .OR. ( cCodTip >= ::cTipOrg .AND. cCodTip <= ::cTipDes ) )                        .AND. !( ::lExcCero .AND. nTotNFacCli( ::oFacCliL:cAlias ) == 0 )                                   .AND. !( ::lExcImp .AND. nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut ) == 0 )

                  nTotUni              := nTotNFacCli( ::oFacCliL:cAlias )
                  nTotImpUni           := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
                  nImpDtoAtp           := nDtoAtpFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )

                  if ::oDbf:Seek( cCodTip )

                     ::oDbf:Load()

                     ::oDbf:nTotCaj    += ::oFacCliL:nCanEnt
                     ::oDbf:nTotUni    += nTotUni
                     ::oDbf:nTotPes    += nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    += nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    += nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oFacCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotUni
                     else
                        ::oDbf:nTotCos += ::oFacCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oFacCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    += nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += nTotImpUni
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  else

                     ::oDbf:Append()

                     ::oDbf:cCodTip    := cCodTip
                     ::oDbf:cNomTip    := oRetFld( cCodTip, ::oTipArt:oDbf, "cNomTip" )
                     ::oDbf:nTotCaj    := ::oFacCliL:nCanEnt
                     ::oDbf:nTotUni    := nTotUni
                     ::oDbf:nTotPes    := nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    := nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    := nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oFacCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotUni
                     else
                        ::oDbf:nTotCos := ::oFacCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oFacCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    := nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += ::oDbf:nTotImp
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  end

               end

               ::oFacCliL:Skip()

            end

         end

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )
   ::oFacCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliL:cFile ) )



   ::oFacRecT:OrdSetFocus( "dFecFac" )
   ::oFacRecL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacRecT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText := "Procesando fac. rec."
   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )

   cExpLine          := "!lTotLin .and. !lControl .and. !lKitChl"

   ::oFacRecL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacRecL:cFile ), ::oFacRecL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacRecT:GoTop()

   while !::lBreak .AND. !::oFacRecT:Eof()

      if lChkSer( ::oFacRecT:cSerie, ::aSer )

         if ::oFacRecL:Seek( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac )

            while ::oFacRecL:cSerie + Str( ::oFacRecL:nNumFac ) + ::oFacRecL:cSufFac == ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac

               cCodTip := oRetFld( ::oFacRecL:cRef, ::oDbfArt , "cCodTip")



               if ( ::lAllTip .OR. ( cCodTip >= ::cTipOrg .AND. cCodTip <= ::cTipDes ) )                        .AND. !( ::lExcCero .AND. nTotNFacRec( ::oFacRecL:cAlias ) == 0 )                                   .AND. !( ::lExcImp .AND. nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut ) == 0 )

                  nTotUni              := nTotNFacRec( ::oFacRecL:cAlias )
                  nTotImpUni           := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut )
                  nImpDtoAtp           := 0

                  if ::oDbf:Seek( cCodTip )

                     ::oDbf:Load()

                     ::oDbf:nTotCaj    += ::oFacRecL:nCanEnt
                     ::oDbf:nTotUni    += nTotUni
                     ::oDbf:nTotPes    += nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    += nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    += nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oFacRecL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotUni
                     else
                        ::oDbf:nTotCos += ::oFacRecL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oFacRecL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    += nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += nTotImpUni
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  else

                     ::oDbf:Append()

                     ::oDbf:cCodTip    := cCodTip
                     ::oDbf:cNomTip    := oRetFld( cCodTip, ::oTipArt:oDbf, "cNomTip" )
                     ::oDbf:nTotCaj    := ::oFacRecL:nCanEnt
                     ::oDbf:nTotUni    := nTotUni
                     ::oDbf:nTotPes    := nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    := nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    := nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oFacRecL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotUni
                     else
                        ::oDbf:nTotCos := ::oFacRecL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oFacRecL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    := nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += ::oDbf:nTotImp
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  end

               end

               ::oFacRecL:Skip()

            end

         end

      end

      ::oFacRecT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacRecT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecT:cFile ) )
   ::oFacRecL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacRecL:cFile ) )



   ::oTikCliT:OrdSetFocus( "dFecTik" )
   ::oTikCliL:OrdSetFocus( "cNumTil" )

   cExpHead          := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. ( cTipTik == "1" .or. cTipTik == "4" )'

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText := "Procesando tikets"
   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )

   cExpLine       := "!lControl .and. !lKitChl"

   ::oTikCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ), ::oTikCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer )

         if ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

            while ::oTikCliL:cSerTiL + ::oTikCliL:cNumTiL + ::oTikCliL:cSufTiL == ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik

                cCodTip := oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt , "cCodTip")




                if !Empty( ::oTikCliL:cCbaTil )                                                                 .AND. ( ::lAllTip .OR. ( cCodTip >= ::cTipOrg .AND. cCodTip <= ::cTipDes ) )                        .AND. !( ::lExcCero .AND. ::oTikCliL:nUntTil == 0 )                                                 .AND. !( ::lExcImp .AND. ::oTikCliL:nPvpTil == 0 )

                  nTotUni              := ::oTikCliL:nUntTil
                  nTotImpUni           := nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 )
                  nImpDtoAtp           := 0

                  if ::oDbf:Seek( cCodTip )

                     ::oDbf:Load()

                     ::oDbf:nTotUni    += nTotUni
                     ::oDbf:nTotPes    += nTotUni * oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    += nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    += nTotUni / oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * nTotUni
                     else
                        ::oDbf:nTotCos += ::oTikCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oTikCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    += nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += nTotImpUni
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  else

                     ::oDbf:Append()

                     ::oDbf:cCodTip    := cCodTip
                     ::oDbf:cNomTip    := oRetFld( cCodTip, ::oTipArt:oDbf, "cNomTip" )
                     ::oDbf:nTotUni    := nTotUni
                     ::oDbf:nTotPes    := nTotUni * oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    := nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    := nTotUni / oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * nTotUni
                     else
                        ::oDbf:nTotCos := ::oTikCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oTikCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    := nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += ::oDbf:nTotImp
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  end

               end

               cCodTip := oRetFld( ::oTikCliL:cComTil, ::oDbfArt , "cCodTip")




               if !Empty( ::oTikCliL:cComTil )                                                                  .AND. ( ::lAllTip .OR. ( cCodTip >= ::cTipOrg .AND. cCodTip <= ::cTipDes ) )                        .AND. !( ::lExcCero .AND. ::oTikCliL:nUntTil == 0 )                                                 .AND. !( ::lExcImp .AND. ::oTikCliL:nPcmTil == 0 )

                  nTotUni              := ::oTikCliL:nUntTil
                  nTotImpUni           := nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 )

                  if ::oDbf:Seek( cCodTip )

                     ::oDbf:Load()

                     ::oDbf:nTotUni    += nTotUni
                     ::oDbf:nTotPes    += nTotUni * oRetFld( ::oTikCliL:cComTil, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    += nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    += nTotUni / oRetFld( ::oTikCliL:cComTil, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cComTil ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cComTil ) * nTotUni
                     else
                        ::oDbf:nTotCos += ::oTikCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oTikCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    += nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += nTotImpUni
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  else

                     ::oDbf:Append()

                     ::oDbf:cCodTip    := cCodTip
                     ::oDbf:cNomTip    := oRetFld( cCodTip, ::oTipArt:oDbf, "cNomTip" )
                     ::oDbf:nTotUni    := nTotUni
                     ::oDbf:nTotPes    := nTotUni * oRetFld( ::oTikCliL:cComTil, ::oDbfArt, "nPesoKg" )
                     ::oDbf:nTotImp    := nTotImpUni
                     ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, nTotImpUni / ::oDbf:nTotPes, 0 )
                     ::oDbf:nTotVol    := nTotUni / oRetFld( ::oTikCliL:cComTil, ::oDbfArt, "nVolumen" )
                     ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, nTotImpUni / ::oDbf:nTotVol, 0 )

                     if ::lCosAct .OR. ::oTikCliL:nCosDiv == 0
                        ::oDbf:nTotCos := nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cComTil ) * nTotUni
                        ::nTotCosto    += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cComTil ) * nTotUni
                     else
                        ::oDbf:nTotCos := ::oTikCliL:nCosDiv * nTotUni
                        ::nTotCosto    += ::oTikCliL:nCosDiv * nTotUni
                     end

                     ::oDbf:nDtoAtp    := nImpDtoAtp
                     ::oDbf:nMargen    := ::oDbf:nTotImp - ::oDbf:nTotCos - ::oDbf:nDtoAtp

                     if ::oDbf:nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
                        ::oDbf:nRentab := nRentabilidad( ::oDbf:nTotImp, ::oDbf:nDtoAtp, ::oDbf:nTotCos )
                        ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
                        ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
                     else
                        ::oDbf:nRentab := 0
                        ::oDbf:nPreMed := 0
                        ::oDbf:nCosMed := 0
                     end

                     ::nTotVentas      += ::oDbf:nTotImp
                     ::nTotAtipica     += nImpDtoAtp

                     ::oDbf:Save()

                  end

               end

               ::oTikCliL:Skip()

            end

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )
   ::oTikCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliL:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
