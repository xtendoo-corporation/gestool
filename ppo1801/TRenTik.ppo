#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TRenTik.prg"
_HB_CLASS TRenTik ; function TRenTik ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRenTik", iif( .T., { @TInfPArt() }, { @HBObject() } ), @TRenTik() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS LOGIC lCosAct } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lCosAct"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )


   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TRenTik_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TRenTik_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TRenTik_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TRenTik_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TRenTik_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRenTik ;



static FUNCTION TRenTik_Create( ) ; local Self AS CLASS TRenTik := QSelf() AS CLASS TRenTik

   ::AddField( "cNumDoc", "C", 14, 0, {|| "@R #/##########/##" }, "Documento",         .T., "Documento",       14, .F. )
   ::AddField( "dFecDoc", "D",  8, 0, {|| "@!" },                 "Fecha",             .T., "Fecha",           10, .F. )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },                 "Cód. cli.",         .T., "Cod. Cliente",     8, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },                 "Cliente",           .T., "Nom. Cliente",    30, .F. )
   ::AddField( "nTotUni", "N", 16, 6, {|| MasUnd() },             cNombreUnidades(),   .T., cNombreUnidades(), 12, .T. )
   ::AddField( "nTotImp", "N", 16, 6, {|| ::cPicImp },            "Tot. importe",      .T., "Tot. importe",    12, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },             "Tot. peso",         .F., "Total peso",      12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },            "Pre. Kg.",          .F., "Precio kilo",     12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },             "Tot. volumen",      .F., "Total volumen",   12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },            "Pre. vol.",         .F., "Precio volumen",  12, .F. )
   ::AddField( "nTotCos", "N", 16, 6, {|| ::cPicImp },            "Tot. costo",        .T., "Total costo",     12, .T. )
   ::AddField( "nMarGen", "N", 16, 6, {|| ::cPicOut },            "Margen",            .T., "Margen",          12, .T. )
   ::AddField( "nRenTab", "N", 16, 6, {|| ::cPicOut },            "%Rent.",            .T., "Rentabilidad",    12, .F. )
   ::AddField( "nPreMed", "N", 16, 6, {|| ::cPicImp },            "Precio medio",      .F., "Precio medio",    12, .F. )
   ::AddField( "nCosMed", "N", 16, 6, {|| ::cPicImp },            "Costo medio",       .T., "Costo medio",     12, .F. )

   ::AddTmpIndex( "cNumDoc", "cNumDoc" )

   ::dIniInf := GetSysDate()

RETURN ( Self )



static FUNCTION TRenTik_OpenFiles( ) ; local Self AS CLASS TRenTik := QSelf() AS CLASS TRenTik

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()



   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TRenTik_CloseFiles( ) ; local Self AS CLASS TRenTik := QSelf() AS CLASS TRenTik

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end

   ::oDbfArt  := nil

   ::oTikCliT := nil
   ::oTikCliL := nil

RETURN ( Self )



static FUNCTION TRenTik_lResource( cFld ) ; local Self AS CLASS TRenTik := QSelf() AS CLASS TRenTik

   if !::StdResource( "INFRENARTCB" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end

   ::oDefExcInf( 204 )



   TCheckBox():ReDefine( ( 203 ), { | u | If( PCount()==0, ::lExcMov, ::lExcMov:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 205 ), { | u | If( PCount()==0, ::lCosAct, ::lCosAct:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   ::CreateFilter( aItmTik(), ::oTikCliT:cAlias )

RETURN .T.






static FUNCTION TRenTik_lGenerate( ) ; local Self AS CLASS TRenTik := QSelf() AS CLASS TRenTik

   local nTotUni     := 0
   local nTotImpUni  := 0
   local nTotCosUni  := 0
   local nTotPes     := 0
   local nTotVol     := 0
   local nTotCaj     := 0
   local lExcCero    := .F.
   local cExpHead    := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader         := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) } , {|| "Cliente   : " + if( ::lAllCli, "Todos", AllTrim ( ::cCliOrg ) + " > " + AllTrim ( ::cCliDes ) ) } }

   ::oTikCliT:OrdSetFocus( "dFecTik" )

   cExpHead          := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead       += ' .and. cCliTik >= "' + Rtrim( ::cCliOrg ) + '" .and. cCliTik <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )





   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer )

         nTotUni     := 0
         nTotImpUni  := 0
         nTotCosUni  := 0
         nTotPes     := 0
         nTotVol     := 0
         nTotCaj     := 0

         if ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

            while ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil == ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik





               if !Empty( ::oTikCliL:cCbaTil )                                                         .AND. !( ::oTikCliL:lKitChl )                                                              .AND. !( ::oTikCliL:lControl )                                                             .AND. !( ::lExcMov .AND. ::oTikCliL:nUntTil == 0 )                                         .AND. !( ::lExcCero .AND. nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 ) == 0  )

                  nTotUni              += ::oTikCliL:nUntTil
                  nTotImpUni           += nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 )
                  nTotPes              += nTotUni * oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt, "nPesoKg" )
                  nTotVol              += nTotUni / oRetFld( ::oTikCliL:cCbaTil, ::oDbfArt, "nVolumen" )

                  if ::lCosAct .OR. ::oTikCliL:nCosDiv == 0
                     nTotCosUni        += ::oTikCliL:nCosDiv * nTotUni
                  else
                     nTotCosUni        += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cCbaTil ) * nTotUni
                  end

               end

               ::oTikCliL:Skip()





               if !Empty( ::oTikCliL:cComTil )                                                         .AND. !( ::oTikCliL:lKitChl )                                                              .AND. !( ::oTikCliL:lControl )                                                             .AND. !( ::lExcMov .AND. ::oTikCliL:nUntTil == 0 )                                         .AND. !( ::lExcCero .AND. nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 ) == 0  )

                  nTotUni              += ::oTikCliL:nUntTil
                  nTotImpUni           += nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 )
                  nTotPes              += nTotUni * oRetFld( ::oTikCliL:cComTil, ::oDbfArt, "nPesoKg" )
                  nTotVol              += nTotUni / oRetFld( ::oTikCliL:cComTil, ::oDbfArt, "nVolumen" )

                  if ::lCosAct .OR. ::oTikCliL:nCosDiv == 0
                     nTotCosUni        += ::oTikCliL:nCosDiv * nTotUni
                  else
                     nTotCosUni        += nRetPreCosto( ::oDbfArt:cAlias, ::oTikCliL:cComTil ) * nTotUni
                  end

               end

               ::oTikCliL:Skip()

            end

            ::oDbf:Append()

            ::oDbf:cNumDoc    := ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik
            ::oDbf:dFecDoc    := ::oTikCliT:dFecTik
            ::oDbf:cCodCli    := ::oTikCliT:cCliTik
            ::oDbf:cNomCli    := ::oTikCliT:cNomTik
            ::oDbf:nTotUni    := nTotUni
            ::oDbf:nTotPes    := nTotPes
            ::oDbf:nTotImp    := nTotImpUni
            ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
            ::oDbf:nTotVol    := nTotVol
            ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
            ::oDbf:nTotCos    := nTotCosUni
            ::oDbf:nMargen    := ( nTotImpUni ) - ( ::oDbf:nTotCos )

            if nTotUni <> 0 .AND. ::oDbf:nTotCos <> 0
               ::oDbf:nRentab := ( ( nTotImpUni / ::oDbf:nTotCos ) - 1 ) * 100
               ::oDbf:nPreMed := nTotImpUni / nTotUni
               ::oDbf:nCosMed := ::oDbf:nTotCos / nTotUni
            else
               ::oDbf:nRentab := 0
               ::oDbf:nPreMed := 0
               ::oDbf:nCosMed := 0
            end

            ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc()

      ::oTikCliT:Skip()

   end

   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
