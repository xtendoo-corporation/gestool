#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TRnkFacPdt.prg"
_HB_CLASS TRnkFacPdt ; function TRnkFacPdt ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRnkFacPdt", iif( .T., { @TInfGen() }, { @HBObject() } ), @TRnkFacPdt() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )

   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oLimit } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLimit"}, .F. )
   _HB_MEMBER { nTotalNeto } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotalNeto"}, .F. )
   _HB_MEMBER { nLimit } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLimit"}, .F. )
   _HB_MEMBER { AS LOGIC lAllPrc } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllPrc"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TRnkFacPdt_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TRnkFacPdt_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TRnkFacPdt_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TRnkFacPdt_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TRnkFacPdt_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRnkFacPdt ;



static FUNCTION TRnkFacPdt_Create( ) ; local Self AS CLASS TRnkFacPdt := QSelf() AS CLASS TRnkFacPdt

   ::AddField ( "cCodCli", "C", 12, 0, {|| "@!" },         "Código",                    .T., "Código cliente",             9 )
   ::AddField ( "cNomCli", "C", 50, 0, {|| "@!" },         "Cliente",                   .T., "Nombre cliente",            35 )
   ::AddField ( "cDocMov", "C", 18, 0, {|| "@!" },         "Fac",                       .F., "Factura",                    9 )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },         "Fecha",                     .F., "Fecha",                      8 )
   ::AddField ( "cNifCli", "C", 15, 0, {|| "@!" },         "Nif",                       .F., "Nif",                       15 )
   ::AddField ( "cDomCli", "C", 35, 0, {|| "@!" },         "Domicilio",                 .F., "Domicilio",                 35 )
   ::AddField ( "cPobCli", "C", 25, 0, {|| "@!" },         "Población",                 .F., "Población",                 25 )
   ::AddField ( "cProCli", "C", 20, 0, {|| "@!" },         "Provincia",                 .F., "Provincia",                 20 )
   ::AddField ( "cCdpCli", "C",  7, 0, {|| "@!" },         "CP",                        .F., "Cod. Postal",                7 )
   ::AddField ( "cTlfCli", "C", 12, 0, {|| "@!" },         "Tlf",                       .F., "Teléfono",                  12 )
   ::AddField ( "cObrCli", "C",  3, 0, {|| "@!" },         "Dirección",                      .F., "Dirección",                       4 )
   ::AddField ( "nTotPdt", "N", 16, 6, {|| ::cPicOut  },   "Pendiente",                 .T., "Pendiente",                 10 )
   ::AddField ( "nTotCob", "N", 16, 6, {|| ::cPicOut  },   "Cobrado",                   .T., "Cobrado",                   10 )
   ::AddField ( "nTotNet", "N", 16, 6, {|| ::cPicOut  },   "Neto",                      .F., "Neto",                      10 )
   ::AddField ( "nTotIva", "N", 16, 6, {|| ::cPicOut  },   cImp(),                       .F., cImp(),                       10 )
   ::AddField ( "nTotReq", "N", 16, 3, {|| ::cPicOut  },   "Rec",                       .F., "Recargo equivalencia",      10 )
   ::AddField ( "nTotDoc", "N", 16, 6, {|| ::cPicOut  },   "Total",                     .T., "Total",                     10 )
   ::AddField ( "nNumOpe", "N", 16, 0, {|| "9999999"  },   "Operaciones",               .F., "Número de operaciones",     12 )
   ::AddField ( "nPorVta", "N", 10, 2, {|| "999.99"    },  "% Ventas",                  .F., "Porcentaje sobre ventas",   12 )

   ::AddTmpIndex ( "cCodCli", "cCodCli", , , , .T. )
   ::AddTmpIndex ( "nTotPdt", "nTotPdt", , , , .T. )

RETURN ( self )



static FUNCTION TRnkFacPdt_OpenFiles( ) ; local Self AS CLASS TRnkFacPdt := QSelf() AS CLASS TRnkFacPdt

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::bForReport   := {|| ::lAllPrc .OR. ::oDbf:nTotPdt >= ::nLimit }

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TRnkFacPdt_CloseFiles( ) ; local Self AS CLASS TRnkFacPdt := QSelf() AS CLASS TRnkFacPdt

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil

   ::oDbfIva  := nil
   ::oFacCliP := nil
   ::oAntCliT := nil

RETURN ( Self )



static FUNCTION TRnkFacPdt_lResource( cFld ) ; local Self AS CLASS TRnkFacPdt := QSelf() AS CLASS TRnkFacPdt

   if !::StdResource( "INF_GEN15C" )
      return .F.
   end



   ::aHeader   :={ {|| "Fecha    : "  + Dtoc( Date() ) }, {|| "Clientes : "  + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg )+ " > " + AllTrim( ::cCliDes ) ) }, {|| "Importe  : "  + if( ::lAllPrc, "Todos los importes", "Mayor de : " + Str( ::nLimit ) ) } }





   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )



   TCheckBox():ReDefine( 160, { | u | If( PCount()==0, ::lAllPrc, ::lAllPrc:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   ::oLimit := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::nLimit, ::nLimit:= u ) }, ::oFld:aDialogs[1],, PicOut(),, "N/W*",,,,, .F., {||     !::lAllPrc},, .F., .F.,,,,,, nil,,, )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )

RETURN .T.






static FUNCTION TRnkFacPdt_lGenerate( ) ; local Self AS CLASS TRnkFacPdt := QSelf() AS CLASS TRnkFacPdt

   local aTotFacCli
   local nCobFacCli
   local cExpHead     := ""
   local nCobrado     := 0

   ::nTotalNeto       := 0

   ::oDlg:Disable()
   ::oBtnCancel:Enable()

   ::oDbf:Zap()
   ::oDbf:OrdSetFocus( "CCODCLI" )

   ::oFacCliT:OrdSetFocus( "dFecFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )





   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:cSerie, ::aSer )

         aTotFacCli  := aTotFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias, ::oAntCliT:cAlias )
         nCobFacCli  := nPagFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliP:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, nil, .T. )

         if ::oDbf:Seek( ::oFacCliT:cCodCli )

            ::oDbf:Load()

            ::oDbf:nTotNet += aTotFacCli[1]
            ::oDbf:nTotIva += aTotFacCli[2]
            ::oDbf:nTotReq += aTotFacCli[3]
            ::oDbf:nTotDoc += aTotFacCli[4]
            ::oDbf:nTotCob += nCobFacCli

            ::nTotalNeto   += aTotFacCli[1]

            ::oDbf:nNumOpe++

            ::oDbf:Save()

         else

            ::oDbf:Append()

            ::oDbf:cCodCli := ::oFacCliT:cCodCli
            ::oDbf:cNomCli := ::oFacCliT:cNomCli
            ::oDbf:dFecMov := ::oFacCliT:dFecFac
            ::oDbf:nTotNet := aTotFacCli[1]
            ::oDbf:nTotIva := aTotFacCli[2]
            ::oDbf:nTotReq := aTotFacCli[3]
            ::oDbf:nTotDoc := aTotFacCli[4]
            ::oDbf:nTotCob := nCobFacCli

            ::nTotalNeto   += aTotFacCli[1]

            ::oDbf:nNumOpe := 1

            ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )

            ::oDbf:Save()

         end

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )

   ::oMtrInf:AutoInc( ::oFacCliT:LastRec() )

   ::oDlg:Enable()

   ::oDbf:GoTop()

   while !::oDbf:Eof()

      ::oDbf:Load()
      ::oDbf:nPorVta := ( ::oDbf:nTotNet * 100 ) / ::nTotalNeto
      ::oDbf:nTotPdt := ::oDbf:nTotDoc - ::oDbf:nTotCob
      ::oDbf:Save()

      ::oDbf:Skip()

   end

   ::oDbf:OrdSetFocus( "nTotPdt" )

RETURN ( ::oDbf:LastRec() > 0 )
