#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\mail\TSendMail.prg"
_HB_CLASS TSendMail ; function TSendMail ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TSendMail", iif( .F., { }, { @HBObject() } ), @TSendMail() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { lCancel } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lCancel"}, .F. )

   _HB_MEMBER { bPostSendMail } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bPostSendMail"}, .F. )

   _HB_MEMBER { mailServer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServer"}, .F. )

   _HB_MEMBER { mailServerHost } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServerHost"}, .F. )
   _HB_MEMBER { mailServerPort } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServerPort"}, .F. )
   _HB_MEMBER { mailServerUserName } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServerUserName"}, .F. )
   _HB_MEMBER { mailServerPassword } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServerPassword"}, .F. )
   _HB_MEMBER { mailServerConCopia } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServerConCopia"}, .F. )
   _HB_MEMBER { mailServerAuthenticate } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServerAuthenticate"}, .F. )
   _HB_MEMBER { mailServerSSL } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServerSSL"}, .F. )



   _HB_MEMBER { cLogFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLogFile"}, .F. )
   _HB_MEMBER { hLogFile } ; oClass:AddMultiData(, -1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hLogFile"}, .F. )

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )

   _HB_MEMBER New( oSender); oClass:AddMethod( "New", @TSendMail_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER getTime(); oClass:AddInline( "getTime", {|Self | ( ( Self ) ), ( val( ::oSender:cTiempo ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setButtonCancel(); oClass:AddMethod( "setButtonCancel", @TSendMail_setButtonCancel(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setButtonEnd(); oClass:AddMethod( "setButtonEnd", @TSendMail_setButtonEnd(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER setMeterTotal(); oClass:AddInline( "setMeterTotal", {|Self, nTotal | ( ( Self ) ), ( iif( !empty( ::oSender ), ::oSender:setMeterTotal( nTotal ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setMeter(); oClass:AddInline( "setMeter", {|Self, nSet | ( ( Self ) ), ( iif( !empty( ::oSender ), ::oSender:setMeter( nSet ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER initLogFile(); oClass:AddInline( "initLogFile", {|Self | ( ( Self ) ), ( ::cLogFile := cPatLog() + "Mail" + Dtos( Date() ) + StrTran( Time(), ":", "" ) + ".log", ::hLogFile := fCreate( ::cLogFile ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER writeLogFile(); oClass:AddInline( "writeLogFile", {|Self, cText | ( ( Self ) ), ( if( ::hLogFile <> -1, fWrite( ::hLogFile, cText + Chr(13)+Chr(10) ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER endLogFile(); oClass:AddInline( "endLogFile", {|Self | ( ( Self ) ), ( fClose( ::hLogFile ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )






   _HB_MEMBER messenger(); oClass:AddInline( "messenger", {|Self, cText | ( ( Self ) ), ( ::writeLogFile( cText ), iif(  !empty( ::oSender ), ::oSender:oTree:Select( ::oSender:oTree:Add( cText) ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteMessenger(); oClass:AddInline( "deleteMessenger", {|Self, cText | ( ( Self ) ), ( iif( !empty( ::oSender ), ::oSender:oTree:deleteAll(), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER initMessage(); oClass:AddInline( "initMessage", {|Self | ( ( Self ) ), ( ::deleteMessenger(), ::messenger( "Se ha iniciado el proceso de envio" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER readyMessage(); oClass:AddInline( "readyMessage", {|Self, hMail | ( ( Self ) ), ( ::messenger( "Se ha elaborado el correo electrónico con el asunto '" + ::getSubjectFromHash( hMail ) + "' para enviar a " + ::getMailsFromHash( hMail ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER sendMessage(); oClass:AddInline( "sendMessage", {|Self, hMail | ( ( Self ) ), ( ::messenger( "El correo electrónico con el asunto '" + ::getSubjectFromHash( hMail ) + "' se ha enviado con exito, al correo " + ::getMailsFromHash( hMail ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER errorMessage(); oClass:AddInline( "errorMessage", {|Self, hMail | ( ( Self ) ), ( ::messenger( "Error al enviar el correo electrónico " + ::getMailsFromHash( hMail ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER endMessage(); oClass:AddInline( "endMessage", {|Self | ( ( Self ) ), ( iif(  ::lCancel, ::messenger( "El envio ha sido cancelado por el usuario" ), ::messenger( "El proceso de envio ha finalizado" ) ), ::messenger( "Fichero log : " + ::cLogFile ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER sendList( aMails); oClass:AddMethod( "sendList", @TSendMail_sendList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER sendMail( hMail); oClass:AddMethod( "sendMail", @TSendMail_sendMail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER buildMailerObject(); oClass:AddMethod( "buildMailerObject", @TSendMail_buildMailerObject(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER isMailServer(); oClass:AddMethod( "isMailServer", @TSendMail_isMailServer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER mailServerString(); oClass:AddInline( "mailServerString", {|Self | ( ( Self ) ), ( ::mailServer + if( !empty( ::mailServerPort ), ":" + alltrim( str( ::mailServerPort ) ), "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getMensajeHTML(); oClass:AddInline( "getMensajeHTML", {|Self | ( ( Self ) ), ( "<HTML>" + strtran( alltrim( ::oSender:cGetMensaje ), Chr(13)+Chr(10), "<p>" ) + "</HTML>" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getFromHash(); oClass:AddInline( "getFromHash", {|Self, hMail, cKey | ( ( Self ) ), ( iif( hhaskey( hMail, cKey ), hGet( hMail, cKey ), nil ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getMailsFromHash(); oClass:AddInline( "getMailsFromHash", {|Self, hMail | ( ( Self ) ), ( ::getFromHash( hMail, "mail" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getSubjectFromHash(); oClass:AddInline( "getSubjectFromHash", {|Self, hMail | ( ( Self ) ), ( ::getFromHash( hMail, "subject" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER getPostSendFromHash(); oClass:AddInline( "getPostSendFromHash", {|Self, hMail | ( ( Self ) ), ( ::getFromHash( hMail, "postSend" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER evalPostSendMail(); oClass:AddInline( "evalPostSendMail", {|Self, hMail | ( ( Self ) ), ( iif(  !empty( ::getPostSendFromHash( hMail ) ), eval( ::getPostSendFromHash( hMail ), hMail ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER showNoModalDialog( cTitle, cText); oClass:AddMethod( "showNoModalDialog", @TSendMail_showNoModalDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER endNoModalDialog(); oClass:AddMethod( "endNoModalDialog", @TSendMail_endNoModalDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TSendMail ;



static FUNCTION TSendMail_New( oSender ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   ::oSender                  := oSender

   ::mailServerHost           := Rtrim( uFieldEmpresa( "cSrvMai" ) )
   ::mailServerPort           := uFieldEmpresa( "nPrtMai" )
   ::mailServerUserName       := Rtrim( uFieldEmpresa( "cCtaMai" ) )
   ::mailServerPassword       := Rtrim( uFieldEmpresa( "cPssMai" ) )
   ::mailServerConCopia       := Rtrim( uFieldEmpresa( "cCcpMai" ) )
   ::mailServerAuthenticate   := uFieldEmpresa( "lAutMai")
   ::mailServerSSL            := uFieldEmpresa( "lSSLMai")

RETURN ( Self )



static FUNCTION TSendMail_isMailServer( ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

RETURN ( !empty( ::mailServerHost ) .AND. !empty( ::mailServerUserName ) .AND. !empty( ::mailServerPassword ) )



static FUNCTION TSendMail_sendList( aMails ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   local hMail

   CursorWait()

   ::setButtonCancel()

   ::setMeter( 0 )
   ::setMeterTotal( len( aMails ) )

   ::initLogFile()

   if ::buildMailerObject()

      for each hMail in aMails

         if ::sendMail( hMail )
            ::sendMessage( hMail )
            ::evalPostSendMail( hMail )
         end

         ::setMeter( hb_EnumIndex() )

      next

   end

   ::endMessage()

   ::endLogFile()

   ::setButtonEnd()

   CursorArrow()

RETURN ( Self )



static FUNCTION TSendMail_setButtonCancel( ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   if !empty( ::oSender )
      ::oSender:oBtnCancel:bAction := {|| ::lCancel := .T. }
   end

RETURN ( self )



static FUNCTION TSendMail_setButtonEnd( ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   if !empty( ::oSender )
      ::oSender:oBtnCancel:bAction := {|| ::oSender:oDlg:End() }
   end

RETURN ( self )



static FUNCTION TSendMail_buildMailerObject( ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   if ::isMailServer()
      ::mailServer   := TSendMailCDO():New( self )
   else
      ::mailServer   := TSendMailOutlook():New( self )
   end

RETURN ( !empty( ::mailServer ) )



static FUNCTION TSendMail_sendMail( hMail ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   local cMail    := ::getMailsFromHash( hMail )

   if empty( cMail )
      ::messenger( "El correo electrónico con el asunto '" + ::getSubjectFromHash( hMail ) + "' esta vacio." )
      RETURN .F.
   end

   if empty( ::mailServer )
      ::messenger( "No se ha creado el objeto para los envios" )
      RETURN .F.
   end

RETURN ( isTrue( ::mailServer:sendMail( hMail ) ) )



static FUNCTION TSendMail_showNoModalDialog( cTitle, cText ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   If( cTitle == nil, cTitle := "Por favor espere...", ) ;
   If( cText == nil, cText := "Generando correo electrónico", ) ;

   ::oDlg            := TWaitMeter():New( cText, cTitle )
   ::oDlg:run()

RETURN ( self )



static FUNCTION TSendMail_endNoModalDialog( ) ; local Self AS CLASS TSendMail := QSelf() AS CLASS TSendMail

   if !empty( ::oDlg )
      ::oDlg:end()
   end

RETURN ( self )
