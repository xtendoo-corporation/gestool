#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\Prg\mail\TSendMailCDO.prg"
_HB_CLASS TSendMailCDO ; function TSendMailCDO ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TSendMailCDO", iif( .F., { }, { @HBObject() } ), @TSendMailCDO() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { mailServer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServer"}, .F. )

   _HB_MEMBER New( oSender); oClass:AddMethod( "New", @TSendMailCDO_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER build(); oClass:AddMethod( "build", @TSendMailCDO_build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER sendMail( hMail); oClass:AddMethod( "sendMail", @TSendMailCDO_sendMail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER setRecipients( oMail, hMail); oClass:AddMethod( "setRecipients", @TSendMailCDO_setRecipients(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setRecipientsCC( oMail, cRecipients); oClass:AddMethod( "setRecipientsCC", @TSendMailCDO_setRecipientsCC(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setRecipientsCCO( oMail, cRecipients); oClass:AddMethod( "setRecipientsCCO", @TSendMailCDO_setRecipientsCCO(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setAttachment( oMail, hMail); oClass:AddMethod( "setAttachment", @TSendMailCDO_setAttachment(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setMessage( oMail, hMail); oClass:AddMethod( "setMessage", @TSendMailCDO_setMessage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setSubject( oMail, hMail); oClass:AddMethod( "setSubject", @TSendMailCDO_setSubject(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TSendMailCDO ;



static FUNCTION TSendMailCDO_New( oSender ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   ::oSender         := oSender

   ::build()

Return ( Self )



static FUNCTION TSendMailCDO_sendMail( hMail ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local oError
   local oBlock
   local oMail
   local lSend             := .T.

   if empty( ::mailServer )
      return .F.
   end

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      oMail                := win_oleCreateObject( "CDO.Message" )
      oMail:Configuration  := ::mailServer
      oMail:From           := ::oSender:mailServerUserName

      ::setRecipients( oMail, hMail )

      ::setAttachment( oMail, hMail )

      ::setRecipientsCC( oMail, hMail )

      ::setRecipientsCCO( oMail, hMail )

      ::setMessage( oMail, hMail )

      ::setSubject( oMail, hMail )

      oMail:Send()

   RECOVER USING oError

      lSend                := .F.

      msgStop( "Error al enviar el objeto de correo electrónico." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lSend )



static FUNCTION TSendMailCDO_setRecipients( oMail, hMail ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local cItem
   local cMails            := ::oSender:getMailsFromHash( hMail )

   if !empty( cMails )
      oMail:To             := cMails
   end

Return ( nil )



static FUNCTION TSendMailCDO_setAttachment( oMail, hMail ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local cItem
   local cAttachments      := ::oSender:getFromHash( hMail, "attachments" )

   if empty( cAttachments )
      return nil
   end

   for each cItem in hb_aTokens( cAttachments, ";" )

      if file( rtrim( cItem ) )
         oMail:AddAttachment( rtrim( cItem ) )
      else
         msgStop( "File to attachment " + rtrim( cItem ) + " not found." )
     end
   next

Return ( nil )



static FUNCTION TSendMailCDO_setRecipientsCC( oMail, hMail ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local cMailsCC          := ::oSender:getFromHash( hMail, "mailcc" )

   if !empty( cMailsCC )
      oMail:Cc             := cMailsCC
   end

Return ( nil )



static FUNCTION TSendMailCDO_setRecipientsCCO( oMail, hMail ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local cMailsCCO         := ::oSender:getFromHash( hMail, "mailcco" )

   if !empty( cMailsCCO )
      oMail:Bcc            := cMailsCCO
   end

Return ( nil )



static FUNCTION TSendMailCDO_setMessage( oMail, hMail ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local cMessage          := ::oSender:getFromHash( hMail, "message" )

   if !empty( cMessage )
      oMail:HTMLBody       := cMessage
   end

Return ( nil )



static FUNCTION TSendMailCDO_setSubject( oMail, hMail ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local cSubject          := ::oSender:getSubjectFromHash( hMail )

   if !empty( cSubject )
      oMail:Subject        := cSubject
   end

Return ( nil )



static FUNCTION TSendMailCDO_build( ) ; local Self AS CLASS TSendMailCDO := QSelf() AS CLASS TSendMailCDO

   local oError
   local oBlock

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::mailServer         := win_oleCreateObject( "CDO.Configuration" )
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/smtpserver" ):Value             := ::oSender:mailServerHost
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/smtpserverport" ):Value         := ::oSender:mailServerPort
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/sendusing" ):Value              := 2
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/smtpauthenticate" ):Value       := ::oSender:mailServerAuthenticate
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/smtpusessl" ):Value             := ::oSender:mailServerSSL
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/sendusername" ):Value           := ::oSender:mailServerUserName
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/sendpassword" ):Value           := ::oSender:mailServerPassword
      ::mailServer:Fields:Item( "http://schemas.microsoft.com/cdo/configuration/smtpconnectiontimeout"):Value   := 30
      ::mailServer:Fields:Update()

   RECOVER USING oError

      msgStop( "Error al crear el objeto de correo electrónico." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( !empty( ::mailServer ) )
