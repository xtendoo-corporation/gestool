#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\mail\TSendMailOutlook.prg"
_HB_CLASS TSendMailOutlook ; function TSendMailOutlook ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TSendMailOutlook", iif( .F., { }, { @HBObject() } ), @TSendMailOutlook() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { mailServer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"mailServer"}, .F. )

   _HB_MEMBER New( oSender); oClass:AddMethod( "New", @TSendMailOutlook_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER build(); oClass:AddMethod( "build", @TSendMailOutlook_build(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER sendMail( hMail); oClass:AddMethod( "sendMail", @TSendMailOutlook_sendMail(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER setRecipients( oMail, hMail); oClass:AddMethod( "setRecipients", @TSendMailOutlook_setRecipients(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setRecipientsCC( oMail, cRecipients); oClass:AddMethod( "setRecipientsCC", @TSendMailOutlook_setRecipientsCC(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setRecipientsCCO( oMail, cRecipients); oClass:AddMethod( "setRecipientsCCO", @TSendMailOutlook_setRecipientsCCO(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setAttachment( oMail, hMail); oClass:AddMethod( "setAttachment", @TSendMailOutlook_setAttachment(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setMessage( oMail, hMail); oClass:AddMethod( "setMessage", @TSendMailOutlook_setMessage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER setSubject( oMail, hMail); oClass:AddMethod( "setSubject", @TSendMailOutlook_setSubject(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TSendMailOutlook ;



static FUNCTION TSendMailOutlook_New( oSender ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   ::oSender         := oSender

   ::build()

Return ( Self )



static FUNCTION TSendMailOutlook_sendMail( hMail ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local oMail
   local oError
   local oBlock
   local lSend          := .T.

   if empty( ::mailServer )
      return .F.
   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      oMail             := ::mailServer:CreateItem( 0 )

      ::setRecipients( oMail, hMail )

      ::setAttachment( oMail, hMail )

      ::setRecipientsCC( oMail, hMail )

      ::setRecipientsCCO( oMail, hMail )

      ::setMessage( oMail, hMail )

      ::setSubject( oMail, hMail )

      oMail:Send()

   RECOVER USING oError

      lSend             := .F.

      msgStop( "Error al enviar el objeto de correo electrónico." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lSend )



static FUNCTION TSendMailOutlook_setRecipients( oMail, hMail ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local cItem
   local cMails            := ::oSender:getFromHash( hMail, "mail" )

   if !empty( cMails )
      for each cItem in hb_aTokens( cMails, ";" )
         oMail:Recipients:Add( cItem )
      next
   end

Return ( nil )



static FUNCTION TSendMailOutlook_setAttachment( oMail, hMail ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local cItem
   local cAttachments      := ::oSender:getFromHash( hMail, "attachments" )

   if empty( cAttachments )
      return nil
   end

   for each cItem in hb_aTokens( cAttachments, ";" )
      if file( rtrim( cItem ) )
         oMail:Attachments:Add( rtrim( cItem ) )
      else
         msgStop( "File to attachment " + rtrim( cItem ) + " not found" )
      end
   next

Return ( nil )



static FUNCTION TSendMailOutlook_setRecipientsCC( oMail, hMail ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local cItem
   local oRecipient
   local cMailsCC          := ::oSender:getFromHash( hMail, "mailcc" )

   if !empty( cMailsCC )
      for each cItem in hb_aTokens( cMailsCC, ";" )
         oRecipient        := oMail:Recipients:Add( cItem )
         oRecipient:Type   := 2
      next
   end

Return ( nil )



static FUNCTION TSendMailOutlook_setRecipientsCCO( oMail, hMail ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local cItem
   local oRecipient
   local cMailsCCO         := ::oSender:getFromHash( hMail, "mailcco" )

   if !empty( cMailsCCO )
      for each cItem in hb_aTokens( cMailsCCO, ";" )
         oRecipient        := oMail:Recipients:Add( cItem )
         oRecipient:Type   := 3
      next
   end

Return ( nil )



static FUNCTION TSendMailOutlook_setMessage( oMail, hMail ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local cMessage          := ::oSender:getFromHash( hMail, "message" )

   if !empty( cMessage )
      oMail:BodyFormat     := 2
      oMail:HTMLBody       := cMessage
   end

Return ( nil )



static FUNCTION TSendMailOutlook_setSubject( oMail, hMail ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local cItem
   local cSubject          := ::oSender:getSubjectFromHash( hMail )

   if !empty( cSubject )
      oMail:Subject        := cSubject
   end

Return ( nil )



static FUNCTION TSendMailOutlook_build( ) ; local Self AS CLASS TSendMailOutlook := QSelf() AS CLASS TSendMailOutlook

   local oBlock
   local oError

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::mailServer   := win_oleCreateObject( "Outlook.Application" )

      if empty( ::mailServer )
         msgStop( "Error. MS Outlook no disponible.", win_oleErrorText() )
      end

   RECOVER USING oError

      msgStop( "Error al crear el objeto de correo electrónico." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( !empty( ::mailServer ) )
