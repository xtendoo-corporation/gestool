#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\TSpecialSearchArticulo.prg"
_HB_CLASS TSpecialSearchArticulo ; function TSpecialSearchArticulo ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TSpecialSearchArticulo", iif( .F., { }, { @HBObject() } ), @TSpecialSearchArticulo() ) ) ;

   _HB_MEMBER { nView } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nView"}, .F. )

   _HB_MEMBER { oDlg } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDlg"}, .F. )

   _HB_MEMBER { oBotonBuscar } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBotonBuscar"}, .F. )
   _HB_MEMBER { oBotonLimpiar } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBotonLimpiar"}, .F. )
   _HB_MEMBER { oBotonSalir } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBotonSalir"}, .F. )

   _HB_MEMBER { oGetArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetArticulo"}, .F. )
   _HB_MEMBER { oGetTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetTipo"}, .F. )
   _HB_MEMBER { oGetEstado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetEstado"}, .F. )
   _HB_MEMBER { oGetCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetCliente"}, .F. )
   _HB_MEMBER { oGetOperario } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetOperario"}, .F. )
   _HB_MEMBER { oGetRuta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetRuta"}, .F. )
   _HB_MEMBER { oGetCodigoCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetCodigoCliente"}, .F. )

   _HB_MEMBER { aArticulo } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aArticulo"}, .F. )
   _HB_MEMBER { aTipo } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTipo"}, .F. )
   _HB_MEMBER { aEstado } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { aCliente } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCliente"}, .F. )
   _HB_MEMBER { aOperario } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aOperario"}, .F. )
   _HB_MEMBER { aRuta } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aRuta"}, .F. )
   _HB_MEMBER { aCodigoCliente } ; oClass:AddMultiData(, {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCodigoCliente"}, .F. )

   _HB_MEMBER { cGetArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetArticulo"}, .F. )
   _HB_MEMBER { cGetTipo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetTipo"}, .F. )
   _HB_MEMBER { cGetEstado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetEstado"}, .F. )
   _HB_MEMBER { cGetCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetCliente"}, .F. )
   _HB_MEMBER { cGetOperario } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetOperario"}, .F. )
   _HB_MEMBER { cGetRuta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetRuta"}, .F. )
   _HB_MEMBER { cGetCodigoCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cGetCodigoCliente"}, .F. )

   _HB_MEMBER { oFecIni } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFecIni"}, .F. )
   _HB_MEMBER { oFecFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFecFin"}, .F. )
   _HB_MEMBER { dFecIni } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFecIni"}, .F. )
   _HB_MEMBER { dFecFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dFecFin"}, .F. )

   _HB_MEMBER { oPeriodo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPeriodo"}, .F. )
   _HB_MEMBER { cPeriodo } ; oClass:AddMultiData(, "Todos", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPeriodo"}, .F. )

   _HB_MEMBER { oEstadoMaquina } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstadoMaquina"}, .F. )
   _HB_MEMBER { aEstadoMaquina } ; oClass:AddMultiData(, { "Disponibles", "No disponibles", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstadoMaquina"}, .F. )
   _HB_MEMBER { cEstadoMaquina } ; oClass:AddMultiData(, "No disponibles", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cEstadoMaquina"}, .F. )








   _HB_MEMBER { hOrders } ; oClass:AddMultiData(, {   "Código artículo" => "lineasSat.cRef", "Contador"        => "lineasSat.nCntAct", "S.A.T."          => "lineasSat.cSerSat, lineasSat.nNumSat, lineasSat.cSufSat", "Fecha"           => "lineasSat.dFecSat", "Código cliente"  => "cabecerasat.cCodCli", "Nombre cliente"  => "cabecerasat.cNomCli", "Operario"        => "cabecerasat.cCodOpe", "Ruta"            => "cabecerasat.cCodRut" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hOrders"}, .F. )
   _HB_MEMBER { cOrderBy } ; oClass:AddMultiData(, "lineasSat.cRef", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOrderBy"}, .F. )

   _HB_MEMBER { oExcObsoletos } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oExcObsoletos"}, .F. )
   _HB_MEMBER { lExcObsoletos } ; oClass:AddMultiData(, .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcObsoletos"}, .F. )

   _HB_MEMBER { oBrwArticulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwArticulo"}, .F. )

   _HB_MEMBER { Resolucion } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Resolucion"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TSpecialSearchArticulo_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TSpecialSearchArticulo_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TSpecialSearchArticulo_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource(); oClass:AddMethod( "Resource", @TSpecialSearchArticulo_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetArraySelectNombreClienteSAT(); oClass:AddMethod( "GetArraySelectNombreClienteSAT", @TSpecialSearchArticulo_GetArraySelectNombreClienteSAT(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetArraySelectCodigosCliente(); oClass:AddMethod( "GetArraySelectCodigosCliente", @TSpecialSearchArticulo_GetArraySelectCodigosCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetArraySelectArticulo(); oClass:AddMethod( "GetArraySelectArticulo", @TSpecialSearchArticulo_GetArraySelectArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetArraySelectTipoArticulo(); oClass:AddMethod( "GetArraySelectTipoArticulo", @TSpecialSearchArticulo_GetArraySelectTipoArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetArraySelectEstadoArticulo(); oClass:AddMethod( "GetArraySelectEstadoArticulo", @TSpecialSearchArticulo_GetArraySelectEstadoArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetArraySelectOperarios(); oClass:AddMethod( "GetArraySelectOperarios", @TSpecialSearchArticulo_GetArraySelectOperarios(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetArraySelectRutas(); oClass:AddMethod( "GetArraySelectRutas", @TSpecialSearchArticulo_GetArraySelectRutas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetCodigoTipoArticulo(); oClass:AddMethod( "GetCodigoTipoArticulo", @TSpecialSearchArticulo_GetCodigoTipoArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetCodigoEstadoArticulo(); oClass:AddMethod( "GetCodigoEstadoArticulo", @TSpecialSearchArticulo_GetCodigoEstadoArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetCodigoOperario(); oClass:AddMethod( "GetCodigoOperario", @TSpecialSearchArticulo_GetCodigoOperario(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetCodigoRuta(); oClass:AddMethod( "GetCodigoRuta", @TSpecialSearchArticulo_GetCodigoRuta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelectArticulo(); oClass:AddMethod( "SelectArticulo", @TSpecialSearchArticulo_SelectArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER SelectDefault(); oClass:AddInline( "SelectDefault", {|Self | ( ( Self ) ), ( ::SelectArticulo( .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cGetWhereSentencia(); oClass:AddMethod( "cGetWhereSentencia", @TSpecialSearchArticulo_cGetWhereSentencia(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER cGetOrderBy(); oClass:AddMethod( "cGetOrderBy", @TSpecialSearchArticulo_cGetOrderBy(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER refreshSearchArticulo( oCol); oClass:AddMethod( "refreshSearchArticulo", @TSpecialSearchArticulo_refreshSearchArticulo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReiniciaValores(); oClass:AddMethod( "ReiniciaValores", @TSpecialSearchArticulo_ReiniciaValores(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aCreaArrayPeriodos(); oClass:AddMethod( "aCreaArrayPeriodos", @TSpecialSearchArticulo_aCreaArrayPeriodos(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lRecargaFecha(); oClass:AddMethod( "lRecargaFecha", @TSpecialSearchArticulo_lRecargaFecha(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cSelectResource(); oClass:AddMethod( "cSelectResource", @TSpecialSearchArticulo_cSelectResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TSpecialSearchArticulo ;



static FUNCTION TSpecialSearchArticulo_New( oMenuItem, oWnd ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local nLevel
   LOCAL lOpenFiles     := .F.

   If( oMenuItem == nil, oMenuItem := "01127", ) ;



   nLevel            := Auth():Level( oMenuItem )

   if nAnd( nLevel, 1 ) == 0
      msgStop( "Acceso no permitido." )
      return nil
   end



   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   ::Resolucion      := GetSysMetrics( 0 )



   msgRun( "Abriendo ficheros y cargando valores iniciales.", "Espere por favor...", {|| lOpenfiles := ::OpenFiles() } )

   if lOpenFiles

      ::Resource()

      ::CloseFiles()

   end

Return .T.



static FUNCTION TSpecialSearchArticulo_OpenFiles( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local oBlock
   local oError
   local lOpenFiles     := .T.

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::nView           := D():CreateView()

      D():EstadoArticulo( ::nView )

      D():TipoArticulos( ::nView )

      D():Articulos( ::nView )

      D():Clientes( ::nView )

      D():Operarios( ::nView )

      D():SatClientes( ::nView )

      D():Ruta( ::nView )

      ::GetArraySelectCodigosCliente()
      ::GetArraySelectNombreClienteSAT()
      ::GetArraySelectArticulo()
      ::GetArraySelectTipoArticulo()
      ::GetArraySelectEstadoArticulo()
      ::GetArraySelectOperarios()
      ::GetArraySelectRutas()

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de números de serie" )

      ::CloseFiles()

      lOpenFiles        := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpenfiles )



static FUNCTION TSpecialSearchArticulo_CloseFiles( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   D():DeleteView( ::nView )

RETURN ( Self )



static FUNCTION TSpecialSearchArticulo_cSelectResource( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   if ::Resolucion == 1024
      Return "Buscar_Avanzada1024"
   end

Return ( "Buscar_Avanzada" )



static FUNCTION TSpecialSearchArticulo_Resource( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local oBmp

   ::oDlg = TDialog():New(,,,,, ::cSelectResource(),, .F.,,,,, oWnd(), .F.,,,,,, .F.,, "::oDlg", nil, )





      oBmp := TBitmap():ReDefine( 500, "gc_zoom_in_48",, ::oDlg,,, .F., .F.,,, .F.,,, .T. )





      ::oEstadoMaquina := TComboBox():ReDefine( 180, { | u | If( PCount()==0, ::cEstadoMaquina, ::cEstadoMaquina:= u ) }, ::aEstadoMaquina(), ::oDlg,,,,,,, .F.,,,,,,, "::oEstadoMaquina",,,,,,, )





      ::oPeriodo := TComboBox():ReDefine( 150, { | u | If( PCount()==0, ::cPeriodo, ::cPeriodo:= u ) }, ::aCreaArrayPeriodos(), ::oDlg,,,,,,, .F.,,,,,,, "::oPeriodo",,,,,,, )

         ::oPeriodo:bCHange   := {|| ::lRecargaFecha() }




      ::oFecIni := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::dFecIni, ::dFecIni:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      ::oFecFin := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::dFecFin, ::dFecFin:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



      ::oExcObsoletos := TCheckBox():ReDefine( 310, { | u | If( PCount()==0, ::lExcObsoletos, ::lExcObsoletos:= u ) }, ::oDlg,,,,,,, .F.,, .F. )

      ::oGetArticulo       := TAutoGet():ReDefine( 100, { | u | iif( pcount() == 0, ::cGetArticulo, ::cGetArticulo := u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cGetArticulo",, ::aArticulo,, 400, {|uDataSource, cData, Self| cfilter( uDataSource, cData, self )} )
      ::oGetTipo           := TAutoGet():ReDefine( 110, { | u | iif( pcount() == 0, ::cGetTipo, ::cGetTipo := u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cGetTipo",, ::aTipo,, 400, {|uDataSource, cData, Self| cfilter( uDataSource, cData, Self )} )
      ::oGetEstado         := TAutoGet():ReDefine( 120, { | u | iif( pcount() == 0, ::cGetEstado, ::cGetEstado := u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cGetEstado",, ::aEstado,, 400, {|uDataSource, cData, Self| cfilter( uDataSource, cData, Self )} )
      ::oGetCodigoCliente  := TAutoGet():ReDefine( 320, { | u | iif( pcount() == 0, ::cGetCodigoCliente, ::cGetCodigoCliente := u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cGetCodigoCliente",, ::aCodigoCliente,, 400, {|uDataSource, cData, Self| cfilter( uDataSource, cData, Self )} )
      ::oGetCliente        := TAutoGet():ReDefine( 130, { | u | iif( pcount() == 0, ::cGetCliente, ::cGetCliente := u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cGetCliente",, ::aCliente,, 400, {|uDataSource, cData, Self| cfilter( uDataSource, cData, Self )} )
      ::oGetOperario       := TAutoGet():ReDefine( 140, { | u | iif( pcount() == 0, ::cGetOperario, ::cGetOperario := u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cGetOperario",, ::aOperario,, 400, {|uDataSource, cData, Self| cfilter( uDataSource, cData, Self )} )
      ::oGetRuta           := TAutoGet():ReDefine( 190, { | u | iif( pcount() == 0, ::cGetRuta, ::cGetRuta := u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cGetRuta",, ::aRuta,, 400, {|uDataSource, cData, Self| cfilter( uDataSource, cData, Self )} )





      ::oBotonBuscar := TButton():ReDefine( 200, {||( ::SelectArticulo() )}, ::oDlg,,, .F.,,,, .T. )





      ::oBotonLimpiar := TButton():ReDefine( 210, {||( ::ReiniciaValores(), ::SelectDefault(), ::oBrwArticulo:Refresh() )}, ::oDlg,,, .F.,,,, .T. )

      ::oBrwArticulo                 := IXBrowse():New( ::oDlg )

      ::oBrwArticulo:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwArticulo:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrwArticulo:cAlias          := "SelectArticulo"

      ::oBrwArticulo:nMarqueeStyle   := 6
      ::oBrwArticulo:cName           := "Articulos.Busquedaavanzada"
      ::oBrwArticulo:lFooter         := .T.
      ::oBrwArticulo:lAutoSort       := .T.
      ::oBrwArticulo:nRowHeight      := 20






      ::oBrwArticulo:CreateFromResource( 300 )

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Añadir artículo"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| AppArticulo(), ::oBrwArticulo:Refresh() }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "NEW16" )
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Modificar artículo"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| EdtArticulo( SelectArticulo->cRef ), ::oBrwArticulo:Refresh() }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "EDIT16" )
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Info artículo"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| TSpecialInfoArticulo():Run( SelectArticulo->cRef, SelectArticulo->cDetalle ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_object_cube_16" )
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader          := "Obsoleto"
         :bEditValue       := {|| SelectArticulo->lObs }
         :nWidth           := 20
         :nHeadBmpNo       := 1
         :SetCheck( { "DEL16", "Nil16" } )
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Código artículo"
         :bEditValue          := {|| SelectArticulo->cRef }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 120
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Contador"
         :bEditValue          := {|| if( !Empty( SelectArticulo->nCntAct ), Trans( SelectArticulo->nCntAct, "999999999999" ), "" ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 120
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Tipo artículo"
         :bEditValue          := {|| SelectArticulo->cCodTip + " - " + retFld( SelectArticulo->cCodTip, D():TipoArticulos( ::nView ) ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 220
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Estado"
         :bEditValue          := {|| SelectArticulo->cNombre }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 110
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Disponibilidad"
         :bEditValue          := {|| iif( SelectArticulo->nDisp == 1, "Disponible", "No disponible" ) }
         :nWidth              := 80
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Ubicación"
         :bEditValue          := {|| SelectArticulo->cDesUbi }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 150
         :lHide               := .T.
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Añadir S.A.T."
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| AppSatCli( SelectArticulo->cCodCli, SelectArticulo->cRef ), ::oBrwArticulo:Refresh() }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "NEW16" )
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Modificar S.A.T."
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| EdtSatCli( SelectArticulo->cSerSat + str( SelectArticulo->nNumSat, 9 ) + SelectArticulo->cSufSat ), ::oBrwArticulo:Refresh() }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "EDIT16" )
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "S.A.T."


         :bEditValue          := {|| iif( !empty( SelectArticulo->cSerSat ), SelectArticulo->cSerSat + "/" + alltrim( str( SelectArticulo->nNumSat ) ) + "/" + SelectArticulo->cSufSat, "" ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 90
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| SelectArticulo->dFecSat }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 75
         :nDataStrAlign       := 3
         :nHeadStrAlign       := 3
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Código cliente"
         :bEditValue          := {|| SelectArticulo->cCodCli }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 150
         :lHide               := .T.
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Informe cliente"
         :bStrData            := {|| "" }
         :bOnPostEdit         := {|| .T. }
         :bEditBlock          := {|| TSpecialInfoCliente():Run( SelectArticulo->cCodCli, SelectArticulo->cNomCli, SelectArticulo->cRef ) }
         :nEditType           := 5
         :nWidth              := 20
         :nHeadBmpNo          := 1
         :nBtnBmp             := 1
         :nHeadBmpAlign       := 1
         :AddResource( "gc_user_16" )
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Nombre cliente"
         :bEditValue          := {|| SelectArticulo->cNomCli }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 150
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Operario"
         :bEditValue          := {|| SelectArticulo->cCodOpe + " - " + retFld( SelectArticulo->cCodOpe, D():Operarios( ::nView ) ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 170
      end

      with object ( ::oBrwArticulo:AddCol() )
         :cHeader             := "Ruta"
         :bEditValue          := {|| SelectArticulo->cCodRut + " - " + retFld( SelectArticulo->cCodRut, D():Ruta( ::nView ) ) }
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | ::refreshSearchArticulo( oCol ) }
         :nWidth              := 150
      end

      ::oBrwArticulo:bLDblClick      := {|| EdtArticulo( SelectArticulo->cRef ), ::oBrwArticulo:Refresh() }





      ::oBotonSalir := TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .T. )

      ::oDlg:AddFastKey( 113, {|| AppArticulo(), ::ReiniciaValores(), ::SelectDefault(), ::oBrwArticulo:Refresh() } )
      ::oDlg:AddFastKey( 114, {|| EdtArticulo( SelectArticulo->Codigo ), ::ReiniciaValores(), ::SelectDefault(), ::oBrwArticulo:Refresh() } )
      ::oDlg:AddFastKey( 115, {|| ::ReiniciaValores(), ::SelectDefault(), ::oBrwArticulo:Refresh() } )
      ::oDlg:AddFastKey( 116, {|| ::SelectArticulo() } )

      ::oDlg:bStart  := {|| ::lRecargaFecha() }



   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:End()
   end

RETURN ( Self )



static FUNCTION TSpecialSearchArticulo_GetArraySelectNombreClienteSAT( dbf, nPosNombre, nPosCodigo ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::aCliente       := {}

   if TDataCenter():ExecuteSqlStatement( "SELECT cCodCli, cNomCli FROM " + cPatEmp() + "SatCliT GROUP BY cCodCli, cNomCli", "SelectArticulo" )
      SelectArticulo->( dbeval( {|| aAdd( ::aCliente, { SelectArticulo->cNomCli, SelectArticulo->cCodCli } ) } ) )
   end

Return ::aCliente



static FUNCTION TSpecialSearchArticulo_GetArraySelectCodigosCliente( dbf, nPosNombre, nPosCodigo ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::aCodigoCliente       := {}

   if TDataCenter():ExecuteSqlStatement( "SELECT Cod FROM " + cPatEmp() + "Client", "SelectArticulo" )
      SelectArticulo->( dbeval( {|| aAdd( ::aCodigoCliente, { SelectArticulo->Cod, SelectArticulo->Cod } ) } ) )
   end

Return ::aCodigoCliente



static FUNCTION TSpecialSearchArticulo_GetArraySelectArticulo( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::aArticulo       := {}

   if TDataCenter():ExecuteSqlStatement( "SELECT Codigo FROM " + cPatEmp() + "Articulo GROUP BY Codigo", "SelectArticulo" )
      SelectArticulo->( dbeval( {|| aAdd( ::aArticulo, { SelectArticulo->Codigo, SelectArticulo->Codigo } ) } ) )
   end

Return ( ::aArticulo )



static FUNCTION TSpecialSearchArticulo_GetArraySelectTipoArticulo( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::aTipo           := {}

   if TDataCenter():ExecuteSqlStatement( "SELECT cCodTip, cNomTip FROM " + cPatEmp() + "TipArt GROUP BY cCodTip, cNomTip", "SelectArticulo" )
      SelectArticulo->( dbeval( {|| aAdd( ::aTipo, { SelectArticulo->cNomTip, SelectArticulo->cCodTip } ) } ) )
   end

Return ( ::aTipo )



static FUNCTION TSpecialSearchArticulo_GetArraySelectEstadoArticulo( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::aEstado       := {}

   if TDataCenter():ExecuteSqlStatement( "SELECT cCodigo, cNombre FROM " + cPatEmp() + "EstadoSat GROUP BY cCodigo, cNombre", "SelectArticulo" )
      SelectArticulo->( dbeval( {|| aAdd( ::aEstado, { SelectArticulo->cNombre, SelectArticulo->cCodigo } ) } ) )
   end

Return ( ::aEstado )



static FUNCTION TSpecialSearchArticulo_GetArraySelectOperarios( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::aOperario       := {}

   if TDataCenter():ExecuteSqlStatement( "SELECT cCodTra, cNomTra FROM " + cPatEmp() + "OpeT GROUP BY cCodTra, cNomTra", "SelectArticulo" )
      SelectArticulo->( dbeval( {|| aAdd( ::aOperario, { SelectArticulo->cNomTra, SelectArticulo->cCodTra } ) } ) )
   end

Return ( ::aOperario )



static FUNCTION TSpecialSearchArticulo_GetArraySelectRutas( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::aRuta       := {}

   if TDataCenter():ExecuteSqlStatement( "SELECT cCodRut, cDesRut FROM " + cPatEmp() + "Ruta GROUP BY cCodRut, cDesRut", "SelectArticulo" )
      SelectArticulo->( dbeval( {|| aAdd( ::aRuta, { SelectArticulo->cDesRut, SelectArticulo->cCodRut } ) } ) )
   end

Return ( ::aRuta )



static FUNCTION TSpecialSearchArticulo_GetCodigoTipoArticulo( cNombre ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local nPos
   local cCodigo  := ""

   if Len( ::aTipo ) == 0 .OR. Empty( cNombre )
      Return cCodigo
   end

   nPos           := AScan( ::aTipo, { | a | AllTrim( a[ 1 ] ) == AllTrim( cNombre ) } )
   if nPos <> 0
      cCodigo     := ::aTipo[ nPos, 2 ]
   end

Return ( cCodigo )



static FUNCTION TSpecialSearchArticulo_GetCodigoEstadoArticulo( cNombre ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local nPos
   local cCodigo  := ""

   if Len( ::aEstado ) == 0 .OR. Empty( cNombre )
      Return cCodigo
   end

   nPos           := AScan( ::aEstado, { | a | AllTrim( a[ 1 ] ) == AllTrim( cNombre ) } )
   if nPos <> 0
      cCodigo     := ::aEstado[ nPos, 2 ]
   end

Return ( cCodigo )



static FUNCTION TSpecialSearchArticulo_GetCodigoOperario( cNombre ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local nPos
   local cCodigo  := ""

   if Len( ::aOperario ) == 0 .OR. Empty( cNombre )
      Return cCodigo
   end

   nPos           := AScan( ::aOperario, { | a | AllTrim( a[ 1 ] ) == AllTrim( cNombre ) } )
   if nPos <> 0
      cCodigo     := ::aOperario[ nPos, 2 ]
   end

Return ( cCodigo )



static FUNCTION TSpecialSearchArticulo_GetCodigoRuta( cNombre ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local nPos
   local cCodigo  := ""

   if Len( ::aRuta ) == 0 .OR. Empty( cNombre )
      Return cCodigo
   end

   nPos           := AScan( ::aRuta, { | a | AllTrim( a[ 1 ] ) == AllTrim( cNombre ) } )
   if nPos <> 0
      cCodigo     := ::aRuta[ nPos, 2 ]
   end

Return ( cCodigo )



static FUNCTION TSpecialSearchArticulo_SelectArticulo( lDefault ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local cSentencia  := ""

   If( lDefault == nil, lDefault := .F., ) ;

   cSentencia        += "SELECT lineasSat.cSerSat, "
   cSentencia        +=        "lineasSat.nNumSat, "
   cSentencia        +=        "lineasSat.cSufSat, "
   cSentencia        +=        "lineasSat.cCodCli, "
   cSentencia        +=        "lineasSat.cRef, "
   cSentencia        +=        "lineasSat.cDetalle, "
   cSentencia        +=        "lineasSat.dFecSat, "
   cSentencia        +=        "lineasSat.nCntAct, "
   cSentencia        +=        "lineasSat.cCodTip, "
   cSentencia        +=        "lineasSat.ROWID, "
   cSentencia        +=        "cabeceraSat.cNomCli,"
   cSentencia        +=        "cabeceraSat.cCodOpe, "
   cSentencia        +=        "cabeceraSat.cCodRut, "
   cSentencia        +=        "cabeceraSat.cCodEst, "
   cSentencia        +=        "estadoSat.cNombre, "
   cSentencia        +=        "estadoSat.nDisp, "
   cSentencia        +=        "articulos.lObs "
   cSentencia        += "FROM " + cPatEmp() + "SatCliL lineasSat "
   cSentencia        += "JOIN ( SELECT cREF, Max( dFecSat ) AS dFecSat FROM " + cPatEmp() + "SatCliL GROUP BY cRef ) AS lineasSatFecha "
   cSentencia        += "ON lineasSatFecha.cRef = lineasSat.cRef and lineasSatFecha.dFecSat = lineasSat.dFecSat "
   cSentencia        += "INNER JOIN " + cPatEmp() + "SatCliT cabeceraSat "
   cSentencia        += "ON lineasSat.cSerSat = cabeceraSat.cSerSat and lineasSat.nNumSat = cabeceraSat.nNumSat and lineasSat.cSufSat = cabeceraSat.cSufSat "
   cSentencia        += "LEFT JOIN " + cPatEmp() + "EstadoSat estadoSat on cabeceraSat.cCodEst = estadoSat.cCodigo "
   cSentencia        += "LEFT JOIN " + cPatEmp() + "Articulo articulos on lineasSat.cRef = articulos.Codigo "
   cSentencia        += ::cGetWhereSentencia( lDefault )
   cSentencia        += ::cGetOrderBy()



   if TDataCenter():ExecuteSqlStatement( cSentencia, "SelectArticulo" )
      SelectArticulo->( dbGoTop() )
   end

   if !Empty( ::oBrwArticulo )
      ::oBrwArticulo:Refresh()
   end

Return ( self )



static FUNCTION TSpecialSearchArticulo_refreshSearchArticulo( oCol ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   if hhaskey( ::hOrders, oCol:cHeader )

      ::cOrderBy              := hget( ::hOrders, oCol:cHeader )

      ::oBrwArticulo:cOrders  := " "
      oCol:cOrder             := "A"

      ::SelectArticulo()

   end

Return ( self )



static FUNCTION TSpecialSearchArticulo_cGetWhereSentencia( lDefault ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local cSentencia  := ""

   If( lDefault == nil, lDefault := .F., ) ;

   if lDefault

      cSentencia     := "WHERE lineasSat.ROWID = '0' "
      RETURN ( cSentencia )
   end

   cSentencia        := "lineasSat.cRef IS NOT NULL AND lineasSat.lControl=false AND lineasSat.lTotLin=false "

   if !Empty( ::cGetArticulo )
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "lineasSat.cRef='" + Padr( ::cGetArticulo, 18 ) + "'"
   end

   if !Empty( ::cGetTipo )
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "lineasSat.cCodTip='" + ::GetCodigoTipoArticulo( ::cGetTipo ) + "'"
   end

   if !Empty( ::cGetEstado )
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "cabeceraSat.cCodEst='" + ::GetCodigoEstadoArticulo( ::cGetEstado ) + "'"
   end

   if !Empty( ::cGetCodigoCliente )
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "cabeceraSat.cCodCli='" + Padr( ::cGetCodigoCliente, 12 ) + "'"
   end

   if !Empty( ::cGetCliente )
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "cabeceraSat.cNomCli='" + Padr( ::cGetCliente, 80 ) + "'"
   end

   if !Empty( ::dFecIni ) .AND. !Empty( ::dFecFin ) .AND. ( ( ::dFecIni <> CtoD( "01/01/2000" ) ) .OR. ( ::dFecFin <> CtoD( "31/12/3000" ) ) )
      cSentencia  += if( !Empty( cSentencia ), " AND ", "" ) + "lineasSat.dFecSat>='" + dtoc( ::dFecIni ) + "'"
      cSentencia  += if( !Empty( cSentencia ), " AND ", "" ) + "lineasSat.dFecSat<='" + dtoc( ::dFecFin ) + "'"
   end

   if ::oEstadoMaquina:nAt <> 3
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "EstadoSat.nDisp=" + AllTrim( Str( ::oEstadoMaquina:nAt ) )
   end

   if !Empty( ::cGetOperario )
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "cabeceraSat.cCodOpe='" + ::GetCodigoOperario( ::cGetOperario ) + "'"
   end

   if !Empty( ::cGetRuta )
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "cabeceraSat.cCodRut='" + ::GetCodigoRuta( ::cGetRuta ) + "'"
   end

   if ::lExcObsoletos
      cSentencia     += if( !Empty( cSentencia ), " AND ", "" ) + "NOT articulos.lobs"
   end

   if !Empty( cSentencia )
      cSentencia     := "WHERE " + cSentencia + space( 1 )
   end

 Return ( cSentencia )



static FUNCTION TSpecialSearchArticulo_cGetOrderBy( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local cSentencia  := ""

   if !empty( ::cOrderBy )
      cSentencia     := "ORDER BY " + ::cOrderBy
   else
      cSentencia     := "ORDER BY lineasSatFecha.cRef"
   end

Return ( cSentencia )



static FUNCTION TSpecialSearchArticulo_ReiniciaValores( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   ::cGetArticulo       := Space( 200 )
   ::cGetTipo           := Space( 200 )
   ::cGetCliente        := Space( 200 )
   ::cGetCodigoCliente  := Space( 200 )
   ::cGetEstado         := Space( 200 )
   ::cGetOperario       := Space( 200 )
   ::cGetRuta           := Space( 200 )

   ::oGetArticulo:Refresh()
   ::oGetTipo:Refresh()
   ::oGetCodigoCliente:Refresh()
   ::oGetCliente:Refresh()
   ::oGetEstado:Refresh()
   ::oGetOperario:Refresh()
   ::oGetRuta:Refresh()

   ::cPeriodo        := "Todos"
   ::oPeriodo:Refresh()

   ::cEstadoMaquina  := "Todas"
   ::oEstadoMaquina:Refresh()

   ::lExcObsoletos   := .T.
   ::oExcObsoletos:Refresh()

   ::lRecargaFecha()

Return ( self )



static FUNCTION TSpecialSearchArticulo_aCreaArrayPeriodos( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   local aPeriodo := {}

   aAdd( aPeriodo, "Hoy" )

   aAdd( aPeriodo, "Ayer" )

   aAdd( aPeriodo, "Mes en curso" )

   aAdd( aPeriodo, "Mes anterior" )

   do case
      case Month( GetSysDate() ) <= 3
         aAdd( aPeriodo, "Primer trimestre" )

      case Month( GetSysDate() ) > 3 .AND. Month( GetSysDate() ) <= 6
         aAdd( aPeriodo, "Primer trimestre" )
         aAdd( aPeriodo, "Segundo trimestre" )

      case Month( GetSysDate() ) > 6 .AND. Month( GetSysDate() ) <= 9
         aAdd( aPeriodo, "Primer trimestre" )
         aAdd( aPeriodo, "Segundo trimestre" )
         aAdd( aPeriodo, "Tercer trimestre" )

      case Month( GetSysDate() ) > 9 .AND. Month( GetSysDate() ) <= 12
         aAdd( aPeriodo, "Primer trimestre" )
         aAdd( aPeriodo, "Segundo trimestre" )
         aAdd( aPeriodo, "Tercer trimestre" )
         aAdd( aPeriodo, "Cuatro trimestre" )

   end

   aAdd( aPeriodo, "Doce últimos meses" )

   aAdd( aPeriodo, "Año en curso" )

   aAdd( aPeriodo, "Año anterior" )

   aAdd( aPeriodo, "Todos" )

Return ( aPeriodo )



static FUNCTION TSpecialSearchArticulo_lRecargaFecha( ) ; local Self AS CLASS TSpecialSearchArticulo := QSelf() AS CLASS TSpecialSearchArticulo

   do case
      case ::cPeriodo == "Hoy"

         ::oFecIni:cText( GetSysDate() )
         ::oFecFin:cText( GetSysDate() )

      case ::cPeriodo == "Ayer"

         ::oFecIni:cText( GetSysDate() -1 )
         ::oFecFin:cText( GetSysDate() -1 )

      case ::cPeriodo == "Mes en curso"

         ::oFecIni:cText( CtoD( "01/" + Str( Month( GetSysDate() ) ) + "/" + Str( Year( GetSysDate() ) ) ) )
         ::oFecFin:cText( GetSysDate() )

      case ::cPeriodo == "Mes anterior"

         ::oFecIni:cText( BoM( AddMonth( GetSysDate(), -1 ) ) )
         ::oFecFin:cText( EoM( AddMonth( GetSysDate(), -1 ) ) )

      case ::cPeriodo == "Primer trimestre"

         ::oFecIni:cText( CtoD( "01/01/" + Str( Year( GetSysDate() ) ) ) )
         ::oFecFin:cText( CtoD( "31/03/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Segundo trimestre"

         ::oFecIni:cText( CtoD( "01/04/" + Str( Year( GetSysDate() ) ) ) )
         ::oFecFin:cText( CtoD( "30/06/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Tercer trimestre"

         ::oFecIni:cText( CtoD( "01/07/" + Str( Year( GetSysDate() ) ) ) )
         ::oFecFin:cText( CtoD( "30/09/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Cuatro trimestre"

         ::oFecIni:cText( CtoD( "01/10/" + Str( Year( GetSysDate() ) ) ) )
         ::oFecFin:cText( CtoD( "31/12/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Doce últimos meses"

         ::oFecIni:cText( CtoD( Str( Day( GetSysDate() ) ) + "/" + Str( Month( GetSysDate() ) ) + "/" + Str( Year( GetSysDate() ) -1 ) ) )
         ::oFecFin:cText( GetSysDate() )

      case ::cPeriodo == "Año en curso"

         ::oFecIni:cText( CtoD( "01/01/" + Str( Year( GetSysDate() ) ) ) )
         ::oFecFin:cText( CtoD( "31/12/" + Str( Year( GetSysDate() ) ) ) )

      case ::cPeriodo == "Año anterior"

         ::oFecIni:cText( CtoD( "01/01/" + Str( Year( GetSysDate() ) - 1 ) ) )
         ::oFecFin:cText( CtoD( "31/12/" + Str( Year( GetSysDate() ) - 1 ) ) )

      case ::cPeriodo == "Todos"

         ::oFecIni:cText( CtoD( "01/01/2000" ) )
         ::oFecFin:cText( CtoD( "31/12/3000" ) )

   end

   ::oFecIni:Refresh()
   ::oFecFin:Refresh()

RETURN ( .T. )



Function cFilter( uDataSource, cData, self )

   local aList       := {}

   aEval( uDataSource, {|x| iif( lower( cData ) $ lower( x[1] ), aadd( aList, x ), ) } )

RETURN aList
