#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\mail\TTemplatesHTML.prg"
_HB_CLASS TTemplatesHtml ; function TTemplatesHtml ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TTemplatesHtml", iif( .F., { }, { @HBObject() } ), @TTemplatesHtml() ) ) ;

   _HB_MEMBER { oSender } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSender"}, .F. )

   _HB_MEMBER { cTypeDocument } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTypeDocument"}, .F. )

   _HB_MEMBER { cHtmlFile } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cHtmlFile"}, .F. )

   _HB_MEMBER New( oSender); oClass:AddMethod( "New", @TTemplatesHtml_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER selectHtmlFile(); oClass:AddMethod( "selectHtmlFile", @TTemplatesHtml_selectHtmlFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadDefaultHtmlFile(); oClass:AddMethod( "loadDefaultHtmlFile", @TTemplatesHtml_loadDefaultHtmlFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER loadHtmlFile( cFile); oClass:AddMethod( "loadHtmlFile", @TTemplatesHtml_loadHtmlFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setFileDefaultHtml( cFile); oClass:AddMethod( "setFileDefaultHtml", @TTemplatesHtml_setFileDefaultHtml(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER saveHTML(); oClass:AddMethod( "saveHTML", @TTemplatesHtml_saveHTML(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveAsHtml(); oClass:AddMethod( "saveAsHtml", @TTemplatesHtml_saveAsHtml(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER setTypeDocument(); oClass:AddInline( "setTypeDocument", {|Self, cTypeDocument | ( ( Self ) ), ( ::cTypeDocument := cTypeDocument, ::loadDefaultHtmlFile() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TTemplatesHtml ;



static FUNCTION TTemplatesHtml_New( oSender ) ; local Self AS CLASS TTemplatesHtml := QSelf() AS CLASS TTemplatesHtml

   ::oSender      := oSender

RETURN (  Self )



static FUNCTION TTemplatesHtml_selectHtmlFile( ) ; local Self AS CLASS TTemplatesHtml := QSelf() AS CLASS TTemplatesHtml

   ::cHtmlFile    := cGetFile( "Html (*.html, *.htm) |*.html;*.htm|", "Seleccione el fichero HTML", , cPatHtml() )

   if !empty( ::cHtmlFile )
      ::loadHtmlFile( ::cHtmlFile )
   end

Return ( Self )



static FUNCTION TTemplatesHtml_loadDefaultHtmlFile( ) ; local Self AS CLASS TTemplatesHtml := QSelf() AS CLASS TTemplatesHtml

   local cFile

   if empty( ::cTypeDocument )
      msgInfo( "No se ha especificado el tipo de documento." )
      Return ( Self )
   end

   cFile             := cGetHtmlDocumento( ::cTypeDocument )
   if !empty( cFile )
      ::loadHtmlFile( cFile )
   end

Return ( Self )



static FUNCTION TTemplatesHtml_loadHtmlFile( cFile ) ; local Self AS CLASS TTemplatesHtml := QSelf() AS CLASS TTemplatesHtml

   local oBlock
   local cMensaje
   local lLoadHtmlFile  := .F.

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::cHtmlFile          := alltrim( cFile )

   if file( ::cHtmlFile )

      cMensaje          := memoread( ::cHtmlFile )

      if !empty( cMensaje )
         ::oSender:setMensaje( cMensaje )
      end

      lLoadHtmlFile     := .T.

   end

   RECOVER

   end

   ErrorBlock( oBlock )

Return ( lLoadHtmlFile )



static FUNCTION TTemplatesHtml_setFileDefaultHtml( cFile ) ; local Self AS CLASS TTemplatesHtml := QSelf() AS CLASS TTemplatesHtml

   if empty( ::cTypeDocument )
      msgInfo( "No se ha especificado el tipo de documento." )
      Return ( Self )
   end

   if !Empty( ::cHtmlFile )
      if ApoloMsgNoYes( "¿Desea establecer el documento " + Rtrim( ::cHtmlFile ) + " como documento por defecto?", "Confirme" )
         setHtmlDocumento( ::cTypeDocument, ::cHtmlFile )
      end
   else
      MsgInfo( "No ha documentos para establecer por defecto" )
   end

Return ( Self )



static FUNCTION TTemplatesHtml_saveAsHtml( ) ; local Self AS CLASS TTemplatesHtml := QSelf() AS CLASS TTemplatesHtml

   local cHtmlFile   := cGetFile( "Html (*.html, *.htm) |*.html;*.htm|", "Seleccione el fichero HTML", , cPatHtml() )

   if empty( cHtmlFile )
      Return ( Self )
   end

   if !( lower( cFileExt( cHtmlFile ) ) $ "html" )
      cHtmlFile      := cFilePath( cHtmlFile ) + cFileNoExt( cHtmlFile ) + ".Html"
   endif

   if file( cHtmlFile ) .AND. apoloMsgNoYes( "El fichero " + cHtmlFile + " ya existe. ¿Desea sobreescribir el fichero?", "Guardar fichero" )
      ferase( cHtmlFile )
   end

   ::oSender:SaveToFile( cHtmlFile )

Return ( Self )



static FUNCTION TTemplatesHtml_saveHTML( ) ; local Self AS CLASS TTemplatesHtml := QSelf() AS CLASS TTemplatesHtml

   if empty( ::cHtmlFile )
      Return ( ::saveAsHtml() )
   end

   ::oSender:SaveToFile( ::cHtmlFile )

Return ( Self )
