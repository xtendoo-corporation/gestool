#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 41 ".\.\Prg\TTreevie.prg"
_HB_CLASS TTreeView ; function TTreeView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TTreeView", iif( .T., { @TControl() }, { @HBObject() } ), @TTreeView() ) ) ;

   _HB_MEMBER { aItems } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aItems"}, .F. )
   _HB_MEMBER { oImageList } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oImageList"}, .F. )
   _HB_MEMBER { bChanged } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bChanged"}, .F. )
   _HB_MEMBER { bExpanded } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bExpanded"}, .F. )

   _HB_MEMBER { bItemChanged } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bItemChanged"}, .F. )
   _HB_MEMBER { bItemSelectChanged } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bItemSelectChanged"}, .F. )
   _HB_MEMBER { bAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bAction"}, .F. )




   _HB_MEMBER { aProperties } ; oClass:AddMultiClsData(, { "aItems", "cTitle", "cVarName", "l3D", "nClrText", "nClrPane", "nAlign", "nTop", "nLeft", "nWidth", "nHeight", "oFont", "Cargo" }, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aProperties"}, .F. )



   _HB_MEMBER New( nTop, nLeft, oWnd, nClrFore, nClrBack, lPixel, lDesign, nWidth, nHeight, cMsg, lCheckBoxes, bChange) AS CLASS TTreeView; oClass:AddMethod( "New", @TTreeView_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ReDefine( nId, oWnd, nClrFore, nClrBack, lDesign, cMsg) AS CLASS TTreeView; oClass:AddMethod( "ReDefine", @TTreeView_ReDefine(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Add( cPrompt, nImage, nValue); oClass:AddMethod( "Add", @TTreeView_Add(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER VScroll( nWParam, nLParam) ; oClass:AddVirtual( "VScroll" )

   _HB_MEMBER HScroll( nWParam, nLParam) ; oClass:AddVirtual( "HScroll" )


   _HB_MEMBER CollapseAll(); oClass:AddInline( "CollapseAll", {|Self, oItem | ( ( Self ) ), ScanItems( ::aItems, .F. ), oItem := ::GetSelected(), if( oItem <> nil, oItem:MakeVisible(), nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER CollapseBranch(); oClass:AddInline( "CollapseBranch", {|Self, oItem | ( ( Self ) ), If( oItem == nil, oItem := ::GetSelected(),),  If( oItem <> nil, ( oItem:Collapse(), ScanItems( oItem:aItems, .F. ), oItem:MakeVisible() ),) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Expand(); oClass:AddInline( "Expand", {|Self | ( ( Self ) ), AEval( ::aItems, { | oItem | oItem:Expand() } ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER ExpandAll(); oClass:AddInline( "ExpandAll", {|Self, oItem | ( ( Self ) ), ScanItems( ::aItems, .T. ), oItem := ::GetSelected(), if( oItem <> nil, oItem:MakeVisible(), nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER ExpandBranch(); oClass:AddInline( "ExpandBranch", {|Self, oItem | ( ( Self ) ), If( oItem == nil, oItem := ::GetSelected(), nil ),  If( oItem <> nil, ( oItem:Expand(), ScanItems( oItem:aItems, .T. ), oItem:MakeVisible() ), nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetSelected(); oClass:AddMethod( "GetSelected", @TTreeView_GetSelected(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GetItem( hItem); oClass:AddMethod( "GetItem", @TTreeView_GetItem(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Select(); oClass:AddInline( "Select", {|Self, oItem | ( ( Self ) ), TVSelect( ::hWnd, oItem:hItem ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetSelText(); oClass:AddInline( "GetSelText", {|Self | ( ( Self ) ), TVGetSelText( ::hWnd ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GoTop(); oClass:AddInline( "GoTop", {|Self | ( ( Self ) ), If( Len( ::aItems ) > 0, ::Select( ::aItems[ 1 ] ),) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SelChanged(); oClass:AddInline( "SelChanged", {|Self | ( ( Self ) ), If( ::bChanged <> nil, Eval( ::bChanged, Self ), nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetImageList( oImageList); oClass:AddMethod( "SetImageList", @TTreeView_SetImageList(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER DeleteAll(); oClass:AddInline( "DeleteAll", {|Self | ( ( Self ) ), ( TVDelAllItems( ::hWnd ), ::aItems := {} ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER HitTest( nRow, nCol); oClass:AddMethod( "HitTest", @TTreeView_HitTest(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER HandleEvent( nMsg, nWParam, nLParam); oClass:AddMethod( "HandleEvent", @TTreeView_HandleEvent(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Initiate(); oClass:AddInline( "Initiate", {|Self, hDlg | ( ( Self ) ), ::Super:Initiate( hDlg ), ::SetColor( ::nClrText, ::nClrPane ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cToChar(); oClass:AddInline( "cToChar", {|Self | ( ( Self ) ), ::Super:cToChar( "SysTreeView32" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER SetColor(); oClass:AddInline( "SetColor", {|Self, nClrText, nClrPane | ( ( Self ) ), ::Super:SetColor( nClrText, nClrPane ), TVSetColor( ::hWnd, nClrText, nClrPane ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Toggle(); oClass:AddInline( "Toggle", {|Self | ( ( Self ) ), AEval( ::aItems, { | oItem | oItem:Toggle() } ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER ToggleAll(); oClass:AddInline( "ToggleAll", {|Self, oItem | ( ( Self ) ), ScanItems( ::aItems, , .T. ),  oItem := ::GetSelected(), If( oItem <> nil, oItem:MakeVisible(), nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER ToggleBranch(); oClass:AddInline( "ToggleBranch", {|Self, oItem | ( ( Self ) ), If( oItem == nil, oItem := ::GetSelected(), nil ),  If( oItem <> nil, ( oItem:Toggle(), ScanItems( oItem:aItems, , .T. ), oItem:MakeVisible() ), nil ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER GetCheck(); oClass:AddInline( "GetCheck", {|Self, oItem | ( ( Self ) ), If( oItem == nil, oItem := ::GetSelected(), nil ),  TVGetCheck( ::hWnd, oItem:hItem ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER SetCheck(); oClass:AddInline( "SetCheck", {|Self, oItem, lOnOff | ( ( Self ) ), If( oItem == nil, oItem := ::GetSelected(), nil ),  TVSetCheck( ::hWnd, oItem:hItem, lOnOff ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetItems( aItems); oClass:AddMethod( "SetItems", @TTreeView_SetItems(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GenMenu( lPopup); oClass:AddMethod( "GenMenu", @TTreeView_GenMenu(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadFromMenu( oMenu); oClass:AddMethod( "LoadFromMenu", @TTreeView_LoadFromMenu(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Notify( nIdCtrl, nPtrNMHDR); oClass:AddMethod( "Notify", @TTreeView_Notify(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER SetItemImage(); oClass:AddInline( "SetItemImage", {|Self, oItem, nImage | ( ( Self ) ), If( oItem == nil, oItem := ::GetSelected(), nil ),  TVSetItemImage( ::hWnd, oItem:hItem, nImage ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER SetItemHeight(); oClass:AddInline( "SetItemHeight", {|Self, nHeight | ( ( Self ) ), ( TvSetItemHeight( ::hWnd, nHeight ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Scan(); oClass:AddInline( "Scan", {|Self, bAction | ( ( Self ) ), ( ScanItemsBlock( ::aItems, bAction ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TTreeView ;



static FUNCTION TTreeView_LoadFromMenu( oMenu ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   local n

   ::DeleteAll()

   for n = 1 to Len( oMenu:aItems )
      ::Add( oMenu:aItems[ n ]:cPrompt )
      if ValType( oMenu:aItems[ n ]:bAction ) == "O"
         AddSubItems( ATail( ::aItems ), oMenu:aItems[ n ]:bAction )
      endif
   next

return nil



static function AddSubItems( oItem, oSubMenu )

   local n

   for n = 1 to Len( oSubMenu:aItems )
      oItem:Add( oSubMenu:aItems[ n ]:cPrompt )
      if ValType( oSubMenu:aItems[ n ]:bAction ) == "O"
         AddSubItems( ATail( oItem:aItems ), oSubMenu:aItems[ n ]:bAction )
      endif
   next

return nil




static FUNCTION TTreeView_New( nTop, nLeft, oWnd, nClrFore, nClrBack, lPixel, lDesign, nWidth, nHeight, cMsg, lCheckBoxes, bChange ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView








   If( nTop == nil, nTop := 0, ) ; If( nLeft == nil, nLeft := 0, ); If( oWnd == nil, oWnd := GetWndDefault(), ); If( nClrFore == nil, nClrFore := oWnd:nClrText, ); If( nClrBack == nil, nClrBack := GetSysColor( 5 ), ); If( lPixel == nil, lPixel := .F., ); If( lDesign == nil, lDesign := .F., ); If( nWidth == nil, nWidth := 150, ); If( nHeight == nil, nHeight := 150, ); If( lCheckBoxes == nil, lCheckBoxes := .F., );




   ::nStyle    = nOR( 1073741824, 268435456, 1, 2, If( lDesign, 67108864, 0 ), 65536, 1, 2, 4, 32, 16, If( lCheckBoxes, 256, 0 ) )

   ::nId       = ::GetNewId()
   ::oWnd      = oWnd
   ::cMsg      = cMsg
   ::nTop      = If( lPixel, nTop, nTop * 15 )
   ::nLeft     = If( lPixel, nLeft, nLeft * 6 )
   ::nBottom   = ::nTop + nHeight - 1
   ::nRight    = ::nLeft + nWidth - 1
   ::lDrag     = lDesign
   ::lCaptured = .F.
   ::nClrText  = nClrFore
   ::nClrPane  = nClrBack
   ::aItems    = {}
   ::bChanged  = bChange

   if ! Empty( oWnd:hWnd )
      ::Create( "SysTreeView32" )
      oWnd:AddControl( Self )
      ::SetColor( nClrFore, nClrBack )
   else
      oWnd:DefControl( Self )
   endif

   ::Default()
   ::lDrag = lDesign

   if lDesign
      ::CheckDots()
   endif

return Self



static FUNCTION TTreeView_ReDefine( nId, oWnd, nClrFore, nClrBack, lDesign, cMsg ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView




   If( oWnd == nil, oWnd := GetWndDefault(), ) ; If( nClrFore == nil, nClrFore := oWnd:nClrText, ); If( nClrBack == nil, nClrBack := oWnd:nClrPane, ); If( lDesign == nil, lDesign := .F., );

   ::nId     = nId
   ::oWnd    = oWnd
   ::aItems  = {}
   ::nClrText = nClrFore
   ::nClrPane = nClrBack

   ::Register( nOR( 1, 2, 1, 2, 4 ) )

   oWnd:DefControl( Self )

return Self



static FUNCTION TTreeView_Add( cPrompt, nImage, nValue ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   local oItem

   oItem := TTVItem():New( TVInsertItem( ::hWnd, cPrompt, , nImage, nValue ), Self )

   oItem:cPrompt := cPrompt
   oItem:nImage  := nImage

   AAdd( ::aItems, oItem )

return oItem



static function ScanItems( aItems, lExpand, lToggle )

   local oItem, i

   If( lExpand == nil, lExpand := .T., ) ; If( lToggle == nil, lToggle := .F., );

   for i := 1 to Len( aItems )
       oItem = aItems[ i ]

       if lToggle
          oItem:Toggle()
       elseif lExpand
          oItem:Expand()
       else
          oItem:Collapse()
       endif

       if Len( oItem:aItems ) <> 0
          ScanItems( oItem:aItems, lExpand, lToggle )
       endif
   next

return nil



static FUNCTION TTreeView_GenMenu( lPopup ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   local oMenu

   If( lPopup == nil, lPopup := .T., ) ;

   if Len( ::aItems ) > 0
      if lPopup
         oMenu := MenuBegin( .T.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )
      else
         oMenu := MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .T.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )
      endif
      GenMenuItems( ::aItems )
      MenuEnd()
   endif

return oMenu



static function GenMenuItems( aItems )

   local n

   for n = 1 to Len( aItems )
      MenuAddItem( aItems[ n ]:GetText(),, .F.,,,,,,,,, .F.,,, .F., ,.F., .F.,,,,,,,,,, .F., .F.,,,,,,, ,, .F., .F., .F.,,,,, .F., .F., .F. )
      if Len( aItems[ n ]:aItems ) > 0
         MenuBegin( .F.,,, .F., .F.,,,,,,,,,, .F.,, .F., .F., .F., .F.,, ,,,,,, .F.,, .F., .F.,,,,,,,,,, .F.,,,,,, )
            GenMenuItems( aItems[ n ]:aItems )
         MenuEnd()
      endif
   next

return nil



static FUNCTION TTreeView_GetSelected( ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

return SearchItem( ::aItems, TVGetSelected( ::hWnd ) )



static FUNCTION TTreeView_GetItem( hItem ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

return SearchItem( ::aItems, hItem )



static FUNCTION TTreeView_HitTest( nRow, nCol ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   local hItem

   hItem := TVHitTest( ::hWnd, nRow, nCol )

   If hItem > 0
      return ::GetItem( hItem )
   Endif

return nil



static FUNCTION TTreeView_Notify( nIdCtrl, nPtrNMHDR ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   local nCode := GetNMHDRCode( nPtrNMHDR )

   do case
      case nCode == (-400-6)
           if ! Empty( ::bExpanded )
              if NMTREEVIEWAction( nPtrNMHDR ) == 2
                 Eval( ::bExpanded, NMTREEVIEWItemNew( nPtrNMHDR ) )
              endif
           endif

      case nCode == -24

         if !Empty( ::bItemSelectChanged )
            Eval( ::bItemSelectChanged, Self )
         end

      case nCode == -401

         if !Empty( ::bItemChanged )
            Eval( ::bItemChanged, Self )
         end

   endcase

return nil



static FUNCTION TTreeView_SetImageList( oImageList ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   ::oImageList = oImageList

   TVSetImageList( ::hWnd, oImageList:hImageList, 0 )

return nil



static FUNCTION TTreeView_HandleEvent( nMsg, nWParam, nLParam ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   local oItem

   do case
      case nMsg == 258
           if nWParam == 13
              return 1
           endif
   endcase

return ::Super:HandleEvent( nMsg, nWParam, nLParam )



static FUNCTION TTreeView_SetItems( aItems ) ; local Self AS CLASS TTreeView := QSelf() AS CLASS TTreeView

   local n

   for n = 1 to Len( aItems )
      ::Add( aItems[ n ] )
   next

return nil



static function SearchItem( aItems, hItem )

   local n, oItem

   for n = 1 to Len( aItems )
      if Len( aItems[ n ]:aItems ) > 0
         if ( oItem := SearchItem( aItems[ n ]:aItems, hItem ) ) <> nil
            return oItem
         endif
      endif
      if aItems[ n ]:hItem == hItem
         return aItems[ n ]
      endif
   next

return nil



static function ScanItemsBlock( aItems, bAction )

   local oItem, n := 1, oItemFound

   while n <= Len( aItems ) .AND. oItemFound == nil
      oItem = aItems[ n ]
      if Eval( bAction, oItem, n )
         return oItem
      else
         if Len( oItem:aItems ) > 0
            oItemFound = ScanItemsBlock( oItem:aItems, bAction )
         endif
      endif
      n++
   end

return oItemFound
