#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 12 ".\.\Prg\Tbuscar.prg"
_HB_CLASS TBuscar ; function TBuscar ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TBuscar", iif( .T., { @TDialog() }, { @HBObject() } ), @TBuscar() ) ) ;

      _HB_MEMBER { AS ARRAY aCampos } ; oClass:AddMultiData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCampos"}, .F. )
      _HB_MEMBER { AS ARRAY aTitulos } ; oClass:AddMultiData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTitulos"}, .F. )
      _HB_MEMBER { aSizes } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSizes"}, .F. )
      _HB_MEMBER { cAlias } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAlias"}, .F. )
      _HB_MEMBER { cField } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cField"}, .F. )
      _HB_MEMBER { AS ARRAY aJustify } ; oClass:AddMultiData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aJustify"}, .F. )
      _HB_MEMBER { nOrdenAnt } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOrdenAnt"}, .F. )
      _HB_MEMBER { uOrden } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uOrden"}, .F. )
      _HB_MEMBER { AS ARRAY aOrd } ; oClass:AddMultiData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aOrd"}, .F. )
      _HB_MEMBER { bAlta } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bAlta"}, .F. )
      _HB_MEMBER { bEdit } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bEdit"}, .F. )
      _HB_MEMBER { bZoom } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bZoom"}, .F. )

      _HB_MEMBER { AS OBJECT oBmp } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBmp"}, .F. )
      _HB_MEMBER { AS OBJECT oRdo } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oRdo"}, .F. )
      _HB_MEMBER { uVal } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uVal"}, .F. )

      _HB_MEMBER { cCampo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCampo"}, .F. )
      _HB_MEMBER { uVal1 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uVal1"}, .F. )
      _HB_MEMBER { uVal2 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"uVal2"}, .F. )
      _HB_MEMBER { AS NUMERIC nRecno } ; oClass:AddMultiData( "NUMERIC",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRecno"}, .F. )

      _HB_MEMBER { AS OBJECT oBrw } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrw"}, .F. )

      _HB_MEMBER New( cCaption, cAlias, uOrden, cField, aOrd, aCampos, aTitulos, aSizes, bAlta, bEdit, bZoom, aJustify) AS CLASS TBuscar; oClass:AddMethod( "New", @TBuscar_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Create( oParent, cField); oClass:AddMethod( "Create", @TBuscar_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Resources(); oClass:AddMethod( "Resources", @TBuscar_Resources(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER aFields(); oClass:AddMethod( "aFields", @TBuscar_aFields(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER SetFilter( cfield, uVal1, uVal2); oClass:AddMethod( "SetFilter", @TBuscar_SetFilter(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER ChangeGet( uBuffer); oClass:AddMethod( "ChangeGet", @TBuscar_ChangeGet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Append(); oClass:AddMethod( "Append", @TBuscar_Append(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Edit(); oClass:AddMethod( "Edit", @TBuscar_Edit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Zoom(); oClass:AddMethod( "Zoom", @TBuscar_Zoom(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER Getfield(); oClass:AddMethod( "Getfield", @TBuscar_Getfield(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TBuscar_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER End( nResult); oClass:AddMethod( "End", @TBuscar_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TBuscar ;




static FUNCTION TBuscar_New( cCaption, cAlias, uOrden, cField, aOrd, aCampos, aTitulos, aSizes, bAlta, bEdit, bZoom, aJustify ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   If( cAlias == nil, cAlias := Alias(), ) ;
   If( cCaption == nil, cCaption := "Busqueda incremental de " + cAlias, ) ;
   If( uOrden == nil, uOrden := ( cAlias )->( OrdSetFocus() ), ) ;
   If( cField == nil, cField := ( cAlias )->( FieldName( 1 ) ), ) ;
   If( aOrd == nil, aOrd := { ( cAlias )->( OrdName( 0 ) ) }, ) ;
   If( aCampos == nil, aCampos := { ( cAlias )->( FieldGet( 1 ) ), ( cAlias )->( FieldGet( 2 ) ) }, ) ;
   If( aTitulos == nil, aTitulos := { ( cAlias )->( FieldName( 1 ) ), ( cAlias )->( FieldName( 2 ) ) }, ) ;

   ::cAlias          := cAlias
   ::cField          := cField
   ::aOrd            := aOrd
   ::uOrden          := uOrden
   ::aCampos         := aCampos
   ::aTitulos        := aTitulos
   ::aSizes          := aSizes
   ::bAlta           := bAlta
   ::bEdit           := bEdit
   ::bZoom           := bZoom
   if aJustify  <> nil
      ::aJustify     := aJustify
   end

   ::nOrdenAnt       := ( ::cAlias )->( OrdSetFocus( uOrden ) )
   ::nRecno          := ( ::cAlias )->( Recno() )

   ( ::cAlias )->( dbGoTop() )

   ::Super:New( nil, nil, nil, nil, cCaption, "HELPENTRY", GetResources() )

   ::Resources()

Return ( Self )



static FUNCTION TBuscar_Resources( ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local oGet
   local cGet     := Space( 100 )
   local oCbxOrd
   local cCbxOrd
   local nOrdAnt  := GetBrwOpt( ::cCaption )

   nOrdAnt        := Min( Max( nOrdAnt, 1 ), len( ::aOrd ) )
   cCbxOrd        := ::aOrd[ nOrdAnt ]

   ( ::cAlias )->( OrdSetFocus( nOrdAnt ) )

   ( ::cAlias )->( dbGoTop() )





   oGet := TGet():ReDefine( 104, { | u | If( PCount()==0, cGet, cGet:= u ) }, Self,, "@!",,,,,,, .F.,,, .F., .F.,,,,,, "FIND", "cGet",,,, )

   oGet:bChange         := {|nKey, nFlags| AutoSeek( nKey, nFlags, oGet, ::oBrw, ::cAlias, .T. ) }
   oGet:bValid          := {|| OrdClearScope( ::oBrw, ::cAlias ), ::oBrw:Refresh(), .T. }




   oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, ::aOrd, Self,,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )
   oCbxOrd:bChange      := {|| ( ::cAlias )->( OrdSetFocus( oCbxOrd:nAt ) ), ::oBrw:Refresh(), oGet:SetFocus() }






   ::oBrw               := TWBrowse():Redefine( 105, {|| ::aFields() }, Self, ::aTitulos, ::aSizes, , , , , , , , , , , , , ::cAlias  )
   ::oBrw:blDblClick    := {|| ::End( 1 ) }
   ::oBrw:aJustify      := ::aJustify





   TButton():ReDefine( 500, {||::Append()}, Self,,, .F., {||     ::bAlta <> nil .AND. !IsReport()},,, .F. )





   TButton():ReDefine( 501, {||::Edit()}, Self,,, .F., {||     ::bEdit <> nil .AND. !IsReport()},,, .F. )




   TButton():ReDefine( 1, {||( ::end( 1 ) )}, Self,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::end() )}, Self,,, .F.,,,, .F. )

   ::bStart             := {|| oGet:SetFocus()  }

return ( NIL )



static FUNCTION TBuscar_aFields( ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local i
   local nPos
   local aFields        := Array( len( ::aCampos ) )

   for i := 1 to len( ::aCampos )
      if ValType( ::aCampos[ i ] ) == "C"
         nPos           := ( ::cAlias )->( fieldPos( ::aCampos[ i ] ) )
         aFields[ i ]   := ( ::cAlias )->( fieldGet( nPos ) )
         aFields[ i ]   := cValToChar( aFields[ i ] )
      else
         aFields[ i ]   := cValToChar( eval( ::aCampos[ i ] ) )
      endif
   next

return ( aFields )



static FUNCTION TBuscar_SetFilter( cField, uVal1, uVal2 ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   ::cCampo := cField
   ::uVal1  := uVal1
   ::uVal2  := uVal2
   ::oBrw:SetFilter( ::cCampo, ::uVal1, ::uVal2 )
   ::oBrw:Refresh()

return nil



static FUNCTION TBuscar_ChangeGet( uBuffer ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local xValor

   if ::cCampo <> NIL
      uBuffer := ::uVal1 + uBuffer
   end

   xValor   := ( ::cAlias )->( ordKeyVal() )

   if ValTYpe( xValor ) == "N"
      uBuffer := Val( uBuffer )
   endif

   DbSeek( uBuffer , .T. )
   ::oBrw:Refresh()

return nil



static FUNCTION TBuscar_Append( ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if ::bAlta <> NIL
      Eval( ::bAlta , Self )
      ::oBrw:refresh()
   endif

return nil



static FUNCTION TBuscar_Edit( ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if ::bEdit <> NIL
      Eval( ::bEdit , Self )
      ::oBrw:refresh()
   endif

return nil



static FUNCTION TBuscar_Zoom( ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if ::bZoom <> NIL
      Eval( ::bZoom , Self )
      ::oBrw:refresh()
   endif

return nil



static FUNCTION TBuscar_Getfield( ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

return ( ::uVal )



static FUNCTION TBuscar_Activate( ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if !IsReport()
      ::AddFastKey( 113, {|| ::Append() } )
      ::AddFastKey( 114, {|| ::Edit() } )
   end

   ::AddFastKey( 116, {|| ::End( 1 ) } )

Return ::Super:Activate( , , , .T. )



static FUNCTION TBuscar_End( nResult ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   If( nResult == nil, nResult := 2, ) ;

   ::Super:End( nResult )

   if nResult == 1
      ::uVal := ( ::cAlias )->( fieldGet( fieldPos( ::cField ) ) )
   endif

return .T.



static FUNCTION TBuscar_Create( oParent, cField ) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local oGet
   local cGet           := Space( 100 )
   local oBrw
   local oDbf
   local oIndex
   local oField
   local oCbxOrd
   local cCbxOrd
   local aIndex         := {}
   local nOrdAnt        := 2
   local cCaption

   if Empty( oParent )
      MsgStop( "No se ha definido objeto padre en la clase busqueda." )
      Return ( Self )
   end

   oDbf                 := oParent:oDbf
   ::cField             := cField

   cCaption             := "Buscando " + Rtrim( Lower( oDbf:cComment ) )





   for each oIndex in oDbf:aTIndex
      if !Empty( oIndex:cComment )
         aAdd( aIndex, oIndex:cComment )
      end
   next





   nOrdAnt              := Min( Max( nOrdAnt, 1 ), len( aIndex ) )
   cCbxOrd              := aIndex[ nOrdAnt ]





   oDbf:OrdSetFocus( nOrdAnt )

   oDbf:GoTop()





   ::Super:New( , , , , cCaption, "HELPENTRY", GetResources() )




   oGet := TGet():ReDefine( 104, { | u | If( PCount()==0, cGet, cGet:= u ) }, Self,, "@!",,,,,,, .F.,,, .F., .F.,,,,,,, "cGet",,,, )
   oGet:bChange            := {|| oGet:Assign(), oBrw:Seek( Alltrim( oGet:VarGet() ) ) }




   oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aIndex, Self,,,,,,, .F.,,,,,,, "oCbxOrd",,,,,,, )
   oCbxOrd:bChange         := {|| oDbf:OrdSetFocus( oCbxOrd:nAt ), oBrw:Refresh(), oGet:SetFocus() }






   oBrw                    := IXBrowse():New( Self )


   oBrw:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrw:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrw:nMarqueeStyle      := 5

   oBrw:cName              := cCaption

   oBrw:bSeek              := {|c| oDbf:Seek( c ) }
   oBrw:oSeek              := oGet

   oBrw:bLDblClick         := {|| ::end( 1 ) }
   oBrw:bRClicked          := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

   oDbf:SetBrowse( oBrw )





   for each oField in oDbf:aTField

      if ! oField:lHide

         with object ( oBrw:AddCol() )

            :cHeader          := oField:cComment
            :nWidth           := oField:nColSize

            if oField:lCalculate
               :bEditValue    := oField:bSetGet
            else
               :bEditValue    := oField:bDirect
            end

            if !Empty( oField:aBitmaps )
               :bStrData      := {|| "" }
               :SetCheck( oField:aBitmaps )
            end

            if oField:lColAlign
               :nDataStrAlign := 1
               :nHeadStrAlign := 1
            end

            if aScan( aIndex, {|cIndex| cIndex == :cHeader } ) <> 0
               :cSortOrder    := oField:cName
               :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), oBrw:GoTop() }
            end

         end

      endif

   next

   oBrw:CreateFromResource( 105 )









   TButton():ReDefine( 500, {||( oParent:Append( oBrw ) )}, Self,,, .F., {||     ( !IsReport() )},,, .F. )





   TButton():ReDefine( 501, {||( oParent:Edit( oBrw ) )}, Self,,, .F., {||     ( !IsReport() )},,, .F. )




   TButton():ReDefine( 1, {||( ::end( 1 ) )}, Self,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::end() )}, Self,,, .F.,,,, .F. )

   ::bStart    := {|| oBrw:Load(), oGet:SetFocus() }

   if !IsReport()
      ::AddFastKey( 113, {|| ::Append( oBrw ) } )
      ::AddFastKey( 114, {|| ::Edit( oBrw ) } )
   end

   ::AddFastKey( 116, {|| ::end( 1 ) } )

   ::Super:Activate( , , , .T. )





   if ::nResult == 1
      ::uVal   := oDbf:FieldGetByName( ::cField )
   endif

Return ( Self )
