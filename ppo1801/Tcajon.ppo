#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Tcajon.prg"
_HB_CLASS TCajon ; function TCajon ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TCajon", iif( .F., { }, { @HBObject() } ), @TCajon() ) ) ;

   _HB_MEMBER { AS LOGIC lCreated } ; oClass:AddMultiClsData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lCreated"}, .F. )

   _HB_MEMBER { cPrinter } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPrinter"}, .F. )
   _HB_MEMBER { cApertura } ; oClass:AddMultiData(, "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cApertura"}, .F. )

   _HB_MEMBER Create() AS CLASS TCajon; oClass:AddMethod( "Create", @TCajon_Create(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER New( cApertura, cPrinter); oClass:AddMethod( "New", @TCajon_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Open( nView); oClass:AddMethod( "Open", @TCajon_Open(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER OpenTest(); oClass:AddInline( "OpenTest", {|Self | ( ( Self ) ), ( ::Open() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End() ; oClass:AddVirtual( "End" )

   _HB_MEMBER LogCajon(); oClass:AddMethod( "LogCajon", @TCajon_LogCajon(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TCajon ;



static FUNCTION TCajon_Create( cCodCaj ) ; local Self AS CLASS TCajon := QSelf() AS CLASS TCajon

   local oBlock
   local oError
   local dbfCajPorta

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CAJPORTA.DBF" ), ( cCheckArea( "CAJPORTA", @dbfCajPorta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
   if !lAIS() ; ordListAdd( ( cPatDat() + "CAJPORTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   if !Empty( cCodCaj ) .AND. ( dbfCajPorta)->( dbSeek( cCodCaj ) )

      ::cApertura          := ( dbfCajPorta )->cCodAper
      ::cPrinter           := ( dbfCajPorta )->cPrinter

   else

      ::cApertura          := "27 112 0 60 240"
      ::cPrinter           := ""

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if dbfCajPorta <> nil
      ( dbfCajPorta )->( dbCloseArea() )
   end

   dbfCajPorta             := nil

RETURN Self



static FUNCTION TCajon_New( cApertura, cPrinter ) ; local Self AS CLASS TCajon := QSelf() AS CLASS TCajon

   If( cApertura == nil, cApertura := "27 112 0 60 240", ) ;
   If( cPrinter == nil, cPrinter := "", ) ;

   ::cApertura          := cApertura
   ::cPrinter           := cPrinter

RETURN Self



static FUNCTION TCajon_Open( nView ) ; local Self AS CLASS TCajon := QSelf() AS CLASS TCajon

   PrintEscCode( ::cApertura, ::cPrinter )

   if IsNum( nView )
      ::LogCajon( nView )
   end

RETURN ( Self )



static FUNCTION TCajon_LogCajon( nView ) ; local Self AS CLASS TCajon := QSelf() AS CLASS TCajon

   local oBlock
   local oError
   local dbfLogPorta

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if !Empty( D():Get( "LogPorta", nView ) )

      ( D():Get( "LogPorta", nView ) )->( dbAppend() )

      ( D():Get( "LogPorta", nView ) )->cNumTur   := cCurSesion()
      ( D():Get( "LogPorta", nView ) )->cSufTur   := RetSufEmp()
      ( D():Get( "LogPorta", nView ) )->cCodCaj   := Application():CodigoCaja()
      ( D():Get( "LogPorta", nView ) )->cCodUse   := Auth():Codigo()
      ( D():Get( "LogPorta", nView ) )->dFecApt   := GetSysDate()
      ( D():Get( "LogPorta", nView ) )->cHorApt   := Substr( Time(), 1, 5 )

      ( D():Get( "LogPorta", nView ) )->( dbUnLock() )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir bases de datos log de cajón portamonedas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

return .T.



Function PrintEscCode( cEscCode, cPrinter )

   local nResult
   local cFile    := "EscFile.txt"

   if memowrit( cFile, alltrim( retChr( cEscCode ) ) )
      nResult     := win_printFileRaw( alltrim( cPrinter ), cFile )
      fErase( cFile )
   end

Return ( nil )
