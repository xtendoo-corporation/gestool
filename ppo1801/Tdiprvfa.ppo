#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tdiprvfa.prg"
FUNCTION TDPrvFac()

   local oInf
   local aCol  := {}
   local aIdx  := {}

   aAdd( aCol, { "CCODPRV", "C", 12, 0, {|| "@!" },         "Cli",                       .F., "Cod. proveedor",             8 } )
   aAdd( aCol, { "CNOMPRV", "C", 50, 0, {|| "@!" },         "Nom",                       .F., "Nombre proveedor",          25 } )
   aAdd( aCol, { "CDOCMOV", "C", 18, 0, {|| "@!" },         "Fac",                       .T., "Factura",                   14 } )
   aAdd( aCol, { "DFECMOV", "D",  8, 0, {|| "@!" },         "Fecha",                     .T., "Fecha",                     14 } )
   aAdd( aCol, { "CNIFPRV", "C", 15, 0, {|| "@!" },         "Nif",                       .F., "Nif",                        8 } )
   aAdd( aCol, { "CDOMPRV", "C", 35, 0, {|| "@!" },         "Dom",                       .F., "Domicilio",                 10 } )
   aAdd( aCol, { "CPOBPRV", "C", 25, 0, {|| "@!" },         "Pob",                       .F., "Población",                 25 } )
   aAdd( aCol, { "CPROPRV", "C", 20, 0, {|| "@!" },         "Prov",                      .F., "Provincia",                 20 } )
   aAdd( aCol, { "CCDPPRV", "C",  7, 0, {|| "@!" },         "CP",                        .F., "Cod. Postal",               20 } )
   aAdd( aCol, { "CTLFPRV", "C", 12, 0, {|| "@!" },         "Tlf",                       .F., "Teléfono",                   7 } )
   aAdd( aCol, { "NTOTNET", "N", 16, 6, {|| oInf:cPicIn },  "Neto",                      .T., "Neto",                      10 } )
   aAdd( aCol, { "NTOTIVA", "N", 16, 6, {|| oInf:cPicIn },  cImp(),                      .T., cImp(),                      10 } )
   aAdd( aCol, { "NTOTREQ", "N", 16, 3, {|| oInf:cPicIn },  "Rec",                       .T., "Rec",                       10 } )
   aAdd( aCol, { "NTOTDOC", "N", 16, 6, {|| oInf:cPicIn },  "Total",                     .T., "Total",                     10 } )

   aAdd( aIdx, { "CCODPRV", "CCODPRV" } )

   oInf  := TDiaPFac():New( "Informe totalizado de facturas de proveedores agrupadas por proveedor", aCol, aIdx, "01045" )

   oInf:AddGroup( {|| oInf:oDbf:cCodPrv }, {|| "Proveedor : " + Rtrim( oInf:oDbf:cCodPrv ) + "-" + oRetFld( oInf:oDbf:cCodPrv, oInf:oDbfPrv ) } )

   oInf:Resource()
   oInf:Activate()

   oInf:End()
   oInf  := nil

RETURN NIL



_HB_CLASS TDiaPFac ; function TDiaPFac ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDiaPFac", iif( .T., { @TInfGen() }, { @HBObject() } ), @TDiaPFac() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TDiaPFac_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TDiaPFac_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( cFld); oClass:AddMethod( "Resource", @TDiaPFac_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TDiaPFac_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDiaPFac ;



static FUNCTION TDiaPFac_OpenFiles( ) ; local Self AS CLASS TDiaPFac := QSelf() AS CLASS TDiaPFac

  local oBlock
  local oError
  local lOpen := .T.





   oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()
   ::oFacPrvT:SetOrder( "DFECFAC" )

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   RECOVER USING oError

      lOpen := .F.

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TDiaPFac_CloseFiles( ) ; local Self AS CLASS TDiaPFac := QSelf() AS CLASS TDiaPFac

   if !Empty( ::oFacPrvtT ) .AND. ::oFacPrvtT:Used()
      ::oFacPrvtT:End()
   end

   if !Empty( ::oFacPrvtL ) .AND. ::oFacPrvtL:Used()
      ::oFacPrvtL:End()
   end

   if !Empty( ::oFacPrvtP ) .AND. ::oFacPrvtP:Used()
      ::oFacPrvtP:End()
   end

   if !Empty( ::oDbfPrv ) .AND. ::oDbfPrv:Used()
      ::oDbfPrv:End()
   end

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

RETURN ( Self )



static FUNCTION TDiaPFac_Resource( cFld ) ; local Self AS CLASS TDiaPFac := QSelf() AS CLASS TDiaPFac

   local cEstado := "Todas"

   if !::StdResource( "INF_GEN05A" )
      return .F.
   end





   ::oDefPrvInf( 70, 80, 90, 100 )





   ::lDefArtInf( 110, 120, 130, 140 )





   ::oMtrInf:SetTotal( ::oFacPrvT:Lastrec() )

   ::oDefExcInf()

   ::oDefResInf()





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

RETURN ( Self )






static FUNCTION TDiaPFac_lGenerate( ) ; local Self AS CLASS TDiaPFac := QSelf() AS CLASS TDiaPFac

   local bValid   := {|| .T. }
   local aTotTmp  := {}

   ::oDlg:Disable()

   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oFacPrvT:lLiquidada }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oFacPrvT:lLiquidada }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end




   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Provedor: " + ::cPrvOrg         + " > " + ::cPrvDes         }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] } }





   ::oFacPrvT:GoTop()
   while !::oFacPrvT:Eof()






      if Eval( bValid )                                                                      .AND. ::oFacPrvT:DFECFAC >= ::dIniInf                                                     .AND. ::oFacPrvT:DFECFAC <= ::dFinInf                                                     .AND. ::oFacPrvT:CCODPRV >= ::cPrvOrg                                                     .AND. ::oFacPrvT:CCODPRV <= ::cPrvDes                                                     .AND. lChkSer( ::oFacPrvT:cSerFac, ::aSer )





         ::oDbf:Append()

         ::oDbf:CCODPRV := ::oFacPrvT:CCODPRV
         ::oDbf:CNOMPRV := ::oFacPrvT:CNOMPRV
         ::oDbf:DFECMOV := ::oFacPrvT:DFECFAC

         aTotTmp        := aTotFacPrv (::oFacPrvT:cSerFac + Str( ::oFacPrvT:NNUMFAC ) + ::oFacPrvT:CSUFFAC, ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacPrvP:cAlias, ::cDivInf )

         ::oDbf:NTOTNET := aTotTmp[1]
         ::oDbf:NTOTIVA := aTotTmp[2]
         ::oDbf:NTOTREQ := aTotTmp[3]
         ::oDbf:NTOTDOC := aTotTmp[4]
         ::oDbf:CDOCMOV := ::oFacPrvT:cSerFac + "/" + Str( ::oFacPrvT:NNUMFAC ) + "/" + ::oFacPrvT:CSUFFAC

         if ::oDbfPrv:Seek ( ::oFacPrvT:CCODPRV )

            ::oDbf:CNIFPRV := ::oDbfPrv:Nif
            ::oDbf:CDOMPRV := ::oDbfPrv:Domicilio
            ::oDbf:CPOBPRV := ::oDbfPrv:Poblacion
            ::oDbf:CPROPRV := ::oDbfPrv:Provincia
            ::oDbf:CCDPPRV := ::oDbfPrv:CodPostal
            ::oDbf:CTLFPRV := ::oDbfPrv:Telefono

         end

         ::oDbf:Save()

      end

      ::oMtrInf:AutoInc( ::oFacPrvT:OrdKeyNo() )

      ::oFacPrvT:Skip()

   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
