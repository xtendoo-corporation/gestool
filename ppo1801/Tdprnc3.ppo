#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 96 ".\.\Prg\Tdprnc3.prg"
_HB_CLASS TDosPrn ; function TDosPrn ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TDosPrn", iif( .F., { }, { @HBObject() } ), @TDosPrn() ) ) ;

     _HB_MEMBER { LastError } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"LastError"}, .F. )
     _HB_MEMBER { cPort, cCompress, cNormal, cFormFeed, cBuffer } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPort", "cCompress", "cNormal", "cFormFeed", "cBuffer"}, .F. )
     _HB_MEMBER { hDC, nRow, nCol, nLeftMargin, nTopMargin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hDC", "nRow", "nCol", "nLeftMargin", "nTopMargin"}, .F. )
     _HB_MEMBER { lAnsiToOem } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAnsiToOem"}, .F. )

     _HB_MEMBER New( cPort) AS CLASS TDosPrn; oClass:AddMethod( "New", @TDosPrn_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER End(); oClass:AddMethod( "End", @TDosPrn_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER StartPage() ; oClass:AddVirtual( "StartPage" )
     _HB_MEMBER EndPage(); oClass:AddMethod( "EndPage", @TDosPrn_EndPage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER Command( cStr1, cStr2, cStr3, cStr4, cStr5); oClass:AddMethod( "Command", @TDosPrn_Command(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER SetCoors( nRow, nCol); oClass:AddMethod( "SetCoors", @TDosPrn_SetCoors(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



     _HB_MEMBER NewLine(); oClass:AddInline( "NewLine", {|Self | ( ( Self ) ), (::cBuffer += Chr(13)+Chr(10) , ::nRow++          , ::nCol    := 0     ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




     _HB_MEMBER Write(); oClass:AddInline( "Write", {|Self, cText, lAToO | ( ( Self ) ), (iif(lAtoO == NIL, lAtoO := .T.,), ::cBuffer += iif(lAtoO, AnsitoOem(cText), cText) , ::nCol    += len(cText)                           ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER Say( nRow, nCol, cText); oClass:AddMethod( "Say", @TDosPrn_Say(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER SayCmp( nRow, nCol, cText); oClass:AddMethod( "SayCmp", @TDosPrn_SayCmp(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER LoadFile( cFile); oClass:AddMethod( "LoadFile", @TDosPrn_LoadFile(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TDosPrn ;



static FUNCTION TDosPrn_New( cPort, lFile ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn


     If( cPort == nil, cPort := "LPT1", ) ; If( lFile == nil, lFile := .T., );

     cPort := Upper(cPort)

     ::cCompress   := "15"
     ::cNormal     := "18"
     ::cFormFeed   := "12"
     ::cBuffer     := ""
     ::nLeftMargin := 0
     ::nTopMargin  := 0
     ::nRow        := 0
     ::nCol        := 0
     ::lAnsiToOem  := .T.
     ::cPort       := cPort+iif(!"."$cPort,".PRN","")
     ::hDC         := fCreate(::cPort)
     ::LastError   := 0

     IF ::hDC < 0
          ::LastError := fError()
     ENDIF

RETURN ( Self )



static FUNCTION TDosPrn_End( ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn

     IF !empty(::nRow+::nCol)
          ::EndPage()
     ENDIF

     ::LastError := 0

     IF !fClose(::hDC)
          ::LastError := fError()
     ENDIF

RETURN NIL



static FUNCTION TDosPrn_EndPage( ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn

     ::Command(::cFormFeed)

     ::LastError := 0

     IF fWrite(::hDC, ::cBuffer) < len(::cBuffer)
          ::LastError := fError()
     ENDIF

     ::cBuffer := ""
     ::nRow    := 0
     ::nCol    := 0

RETURN ( Self )



static FUNCTION TDosPrn_Command( cStr1, cStr2, cStr3, cStr4, cStr5 ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn

     LOCAL cCommand, cToken, cString
     LOCAL nToken

     cString  := cStr1

     IF cStr2 <> NIL
          cString += ","+cStr2
     ENDIF

     IF cStr3 <> NIL
          cString += ","+cStr3
     ENDIF

     IF cStr4 <> NIL
          cString += ","+cStr4
     ENDIF

     IF cStr5 <> NIL
          cString += ","+cStr5
     ENDIF

     cCommand := ""
     nToken   := 1

     while !Empty(cToken := StrToken(cString, nToken++, ","))
          cCommand += Chr(Val(cToken))
     ENDDO

     ::cBuffer += cCommand

RETURN ( Self )



static FUNCTION TDosPrn_SetCoors( nRow, nCol ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn

     nRow += ::nTopMargin
     nCol += ::nLeftMargin

     IF ::nRow > nRow
          ::EndPage()
          ::StartPage()
     ENDIF

     IF nRow == ::nRow  .AND. nCol < ::nCol
          ::EndPage()
          ::StartPage()
     ENDIF

     while ::nRow < nRow
          ::NewLine()
     ENDDO

     IF nCol > ::nCol
          ::Write(Space(nCol-::nCol))
     ENDIF

RETURN ( Self )



static FUNCTION TDosPrn_Say( nRow, nCol, cText, lAToO ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn

     If( lAToO == nil, lAToO := ::lAnsiToOem, ) ;

     ::SetCoors(nRow, nCol)
     ::Write(cText, lAToO)

RETURN ( Self )



static FUNCTION TDosPrn_SayCmp( nRow, nCol, cText, lAToO ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn

     If( lAToO == nil, lAToO := ::lAnsiToOem, ) ;

     ::SetCoors(nRow, nCol)
     ::Command(::cCompress)
     ::cBuffer += iif(lAToO, AnsitoOem(cText), cText)
     ::nCol    += Int(len(cText)/1.7+.5)
     ::Command(::cNormal)

RETURN ( Self )



FUNCTION WorkSheet(cPort)

     LOCAL oPrn
     LOCAL cLine
     LOCAL nFor

     cLine := ""

     FOR nFor := 0 TO 7
          cLine += Str(nFor,1)+Replicate(".",9)
     NEXT

     cLine := Substr(cLine,3)

     oPrn := TDosPrn():New(cPort)

     oPrn:StartPage()

     FOR nFor := 0 TO 65
          oPrn:Say(nFor,0,StrZero(nFor,2)+cLine)
     NEXT

     oPrn:EndPage()

     oPrn:End()

RETURN ( nil )



static FUNCTION TDosPrn_LoadFile( cFile ) ; local Self AS CLASS TDosPrn := QSelf() AS CLASS TDosPrn

     local cRead
     local hFile
     local nBytes
     local nBufSize  := 2000

     if !file( cFile )
         return nil
     end

     ::cBuffer := ""

     hFile  := FOpen( cFile )
     while ( nBytes := FRead( hFile, @cRead, nBufSize ) ) > 0
          ::cBuffer  := SubStr( cRead, 1, nBytes )
     end

     ::cBuffer := AnsiToOem( ::cBuffer )
     FClose( hFile )

RETURN ( Self )
