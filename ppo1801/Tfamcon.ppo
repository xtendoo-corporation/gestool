#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tfamcon.prg"
_HB_CLASS TFamConta ; function TFamConta ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFamConta", iif( .T., { @TInfGen() }, { @HBObject() } ), @TFamConta() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS OBJECT oTurnoT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTurnoT"}, .F. )
   _HB_MEMBER { AS OBJECT oTurnoL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTurnoL"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TFamConta_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TFamConta_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TFamConta_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TFamConta_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TFamConta_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFamConta ;



static FUNCTION TFamConta_Create( ) ; local Self AS CLASS TFamConta := QSelf() AS CLASS TFamConta

   ::AddField( "CCODTUR", "C",  6, 0, {|| "@!" },          "Cod. turno",    .F., "Sesión"           ,  6 )
   ::AddField( "CSUFTUR", "C",  2, 0, {|| "@!" },          "Sufijo turno",  .F., "Sufijo"          ,  2 )
   ::AddField( "CCODFAM", "C", 16, 0, {|| "@!" },          "Cod. familia",  .F., "Cod. familia"    ,  5 )
   ::AddField( "CNOMFAM", "C", 50, 0, {|| "@!" },          "Familia",       .F., "Familia"         , 25 )
   ::AddField( "CCODART", "C", 18, 0, {|| "@!" },          "Cod. Artículo", .T., "Codigo artículo" , 14 )
   ::AddField( "CNOMART", "C",100, 0, {|| "@!" },          "Descripción",   .T., "Descripción"     , 25 )
   ::AddField( "NUNTENT", "N", 16, 6, {|| MasUnd() },      "Unidades",      .T., "Unidades"        , 10 )
   ::AddField( "NPREDIV", "N", 16, 6, {|| ::cPicOut },     "Precio",        .T., "Precio artículo" , 10 )
   ::AddField( "NTOTUNI", "N", 16, 6, {|| ::cPicOut },     "Total",         .T., "Total vendido"   , 10 )

   ::AddTmpIndex ( "CCODFAM", "CCODFAM + CCODART" )

   ::AddGroup( {|| ::oDbf:cCodFam }, {|| "Familia : " + Rtrim( ::oDbf:cCodFam ) + "-" + oRetFld( ::oDbf:cCodFam, ::oDbfFam ) }, {||"Total familia..."} )

RETURN ( self )



static FUNCTION TFamConta_OpenFiles( ) ; local Self AS CLASS TFamConta := QSelf() AS CLASS TFamConta

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oTurnoT := DbfServer( "TURNO.DBF", "TURNOT" ):NewOpen( "TURNO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTurnoT:AddBag( "TURNO.CDX" ) ; ::oTurnoT:AddBag( ) ; ::oTurnoT:AutoIndex()

   ::oTurnoL := DbfServer( "TURNOL.DBF", "TURNOL" ):NewOpen( "TURNOL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTurnoL:AddBag( "TURNOL.CDX" ) ; ::oTurnoL:AddBag( ) ; ::oTurnoL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", "ARTICULO" ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TFamConta_CloseFiles( ) ; local Self AS CLASS TFamConta := QSelf() AS CLASS TFamConta

   if !Empty( ::oTurnoT ) .AND. ::oTurnoT:Used()
      ::oTurnoT:End()
   end
   if !Empty( ::oTurnoL ) .AND. ::oTurnoL:Used()
      ::oTurnoL:End()
   end
   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oTurnoT := nil
   ::oTurnoL := nil
   ::oDbfArt := nil

RETURN ( Self )



static FUNCTION TFamConta_lResource( cFld ) ; local Self AS CLASS TFamConta := QSelf() AS CLASS TFamConta

   if !::StdResource( "INF_GEN18B" )
      return .F.
   end

   ::oBtnFilter:Disable()





   if !::lDefFamInf( 110, 120, 130, 140, 600 )
      return .F.
   end





   ::oDefExcInf()

   ::oDefResInf()

RETURN .T.






static FUNCTION TFamConta_lGenerate( ) ; local Self AS CLASS TFamConta := QSelf() AS CLASS TFamConta

   local cCodFam

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   ::oTurnoT:GoTop()

   ::oMtrInf:SetTotal( ::oTurnoT:Lastrec() )



   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Familia : " + ::cFamOrg       + " > " + ::cFamDes       } }

   while !::lBreak .AND. !::oTurnoT:Eof()


      if ::oTurnoT:dOpnTur >= ::dIniInf      .AND. ::oTurnoT:dCloTur <= ::dFinInf

         if ::oTurnoL:Seek( ::oTurnoT:cNumTur + ::oTurnoT:cSufTur )

            while ::oTurnoL:cNumTur + ::oTurnoL:cSufTur == ::oTurnoT:cNumTur + ::oTurnoT:cSufTur

               cCodFam := cCodFam( ::oTurnoL:cCodArt, ::oDbfArt )


               if ( ::lAllFam .OR. ( cCodFam >= ::cFamOrg .AND. cCodFam <= ::cFamDes ) ) .AND. ( if( ::lExcCero, ( ::oTurnoL:nCanAct - ::oTurnoL:nCanAnt <> 0 ), .T. ) )

                  if ::oDbf:Seek( cCodFam + ::oTurnoL:cCodArt )

                     ::oDbf:Load()
                     ::oDbf:nUntEnt += ::oTurnoL:nCanAct - ::oTurnoL:nCanAnt
                     ::oDbf:nTotUni += ( ::oTurnoL:nCanAct - ::oTurnoL:nCanAnt ) * ::oTurnoL:nPvpArt
                     ::oDbf:nPreDiv := ::oDbf:nTotUni / ::oDbf:nUntEnt
                     ::oDbf:Save()

                  else

                     ::oDbf:Append()
                     ::oDbf:cCodTur := ::oTurnoL:cNumTur
                     ::oDbf:cSufTur := ::oTurnoL:cSufTur
                     ::oDbf:cCodFam := cCodFam
                     ::oDbf:cNomFam := cNomFam( cCodFam, ::oDbfFam )
                     ::oDbf:cCodArt := ::oTurnoL:cCodArt
                     ::oDbf:cNomArt := ::oTurnoL:cNomArt
                     ::oDbf:nUntEnt := ::oTurnoL:nCanAct - ::oTurnoL:nCanAnt
                     ::oDbf:nTotUni := ( ::oTurnoL:nCanAct - ::oTurnoL:nCanAnt ) * ::oTurnoL:nPvpArt
                     ::oDbf:nPreDiv := ::oDbf:nTotUni / ::oDbf:nUntEnt
                     ::oDbf:Save()

                   end

               end

               ::oTurnoL:Skip()

            end

         end

      end

      ::oTurnoT:Skip()

      ::oMtrInf:AutoInc( ::oTurnoT:OrdKeyNo() )

   end

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )
