#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tfampre.prg"
_HB_CLASS TInfFamPre ; function TInfFamPre ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfFamPre", iif( .T., { @TInfFam() }, { @HBObject() } ), @TInfFamPre() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oPreCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPreCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oPreCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPreCliL"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Aceptado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfFamPre_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfFamPre_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfFamPre_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( cFld); oClass:AddMethod( "Resource", @TInfFamPre_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfFamPre_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfFamPre ;



static FUNCTION TInfFamPre_Create( ) ; local Self AS CLASS TInfFamPre := QSelf() AS CLASS TInfFamPre

   ::DetCreateFields()

   ::AddTmpIndex( "CCODFAM", "cCodFam + CCODART" )
   ::AddGroup( {|| ::oDbf:cCodFam }, {|| "Familia  : " + Rtrim( ::oDbf:cCodFam ) + "-" + oRetFld( ::oDbf:cCodFam, ::oDbfFam ) }, {||"Total familia..."}, , ::lSalto )
   ::AddGroup( {|| ::oDbf:cCodFam + ::oDbf:cCodArt },    {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + Rtrim( oRetFld( ::oDbf:cCodArt, ::oDbfArt ) ) }, {||""} )

RETURN ( self )


static FUNCTION TInfFamPre_OpenFiles( ) ; local Self AS CLASS TInfFamPre := QSelf() AS CLASS TInfFamPre

  local oBlock
  local oError
  local lOpen := .T.





   oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::oPreCliT  := TDataCenter():oPreCliT()

   ::oPreCliL := DbfServer( "PRECLIL.DBF", ):NewOpen( "PRECLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPreCliL:AddBag( "PRECLIL.CDX" ) ; ::oPreCliL:AddBag( ) ; ::oPreCliL:AutoIndex()
   ::oPreCliL:SetOrder( "CREF" )

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER USING oError

      lOpen := .F.

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfFamPre_CloseFiles( ) ; local Self AS CLASS TInfFamPre := QSelf() AS CLASS TInfFamPre

   if !Empty( ::oPreCliT ) .AND. ::oPreCliT:Used()
      ::oPreCliT:End()
   end

   if !Empty( ::oPreCliL ) .AND. ::oPreCliL:Used()
      ::oPreCliL:End()
   end

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

RETURN ( Self )



static FUNCTION TInfFamPre_Resource( cFld ) ; local Self AS CLASS TInfFamPre := QSelf() AS CLASS TInfFamPre

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN11" )
      return .F.
   end



   ::lDefFamInf( 110, 120, 130, 140 )





   ::lDefArtInf( 70, 80, 90, 100 )



   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

   ::oDefExcInf( 204 )

   ::oDefSalInf( 201 )

   ::oDefResInf()



   TCheckBox():ReDefine( ( 203 ), { | u | If( PCount()==0, ::lExcMov, ::lExcMov:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

RETURN ( Self )






static FUNCTION TInfFamPre_lGenerate( ) ; local Self AS CLASS TInfFamPre := QSelf() AS CLASS TInfFamPre

   local bValid   := {|| .T. }
   local cCodFam

   ::oDlg:Disable()

   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oPreCliT:lEstado }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oPreCliT:lEstado }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end




   ::aHeader   := {  {|| "Fecha  : " + Dtoc( Date() ) }, {|| "Periodo: " + Dtoc( ::dIniInf )     + " > " + Dtoc( ::dFinInf ) }, {|| "Familia: " + AllTrim (::cFamOrg)   + " > " + AllTrim ( ::cFamDes ) }, {|| "Estado : " + ::aEstado[ ::oEstado:nAt ] } }


   ::oPreCliL:GoTop()

   WHILE !::oPreCliL:Eof()

      cCodFam := cCodFam( ::oPrecliL:cRef, ::oDbfArt )


      if cCodFam >= ::cFamOrg                       .AND. cCodFam <= ::cFamDes

         if ::oPreCliT:Seek( ::oPreCliL:cSerPre + Str( ::oPreCliL:nNumPre ) + ::oPreCliL:cSufPre )








            if Eval ( bValid )                                                 .AND. ::oPreCliT:DFECPRE >= ::dIniInf                                 .AND. ::oPreCliT:DFECPRE <= ::dFinInf                                 .AND. ::oPreCliL:cRef    >= ::cArtOrg                                 .AND. ::oPreCliL:cRef    <= ::cArtDes                                 .AND. lChkSer( ::oPreCliT:CSERPRE, ::aSer )                           .AND. !( ::lExcCero .AND. ::oPreCliL:NUNICAJA == 0 )                  .AND. !( ::lExcMov  .AND. nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )





                  ::oDbf:Append()

                  ::AddCliente      ( ::oPreCliT:cCodCli, ::oPreCliT, .F. )

                  ::oDbf:cCodArt    := ::oDbfArt:CODIGO
                  ::oDbf:cNomArt    := ::oDbfArt:NOMBRE
                  ::oDbf:cCodFam    := ::oDbfArt:FAMILIA
                  ::oDbf:nNumCaj    := ::oPreCliL:nCanPre
                  ::oDbf:nUniDad    := ::oPreCliL:NUNICAJA
                  ::oDbf:nNumUni    := nTotNPreCli( ::oPreCliL )
                  ::oDbf:nImpArt    := nTotUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTrn    := nTrnUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nPntVer    := nPntUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTot    := nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:nIvaArt    := Round( ::oDbf:nImpArt * ::oPreCliL:nIva / 100, ::nDerOut )

                  ::oDbf:cDocMov    := lTrim( ::oPreCliL:CSERPRE ) + "/" + lTrim ( Str( ::oPreCliL:NNUMPRE ) ) + "/" + lTrim ( ::oPreCliL:CSUFPRE )
                  ::oDbf:dFecMov    := ::oPreCliT:DFECPRE

                  ::oDbf:Save()

               end

         end

      end

      ::oPreCliL:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oPreCliL:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
