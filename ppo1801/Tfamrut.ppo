#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tfamrut.prg"
_HB_CLASS TFamRut ; function TFamRut ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFamRut", iif( .T., { @TInfGen() }, { @HBObject() } ), @TFamRut() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )

   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TFamRut_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TFamRut_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TFamRut_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TFamRut_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TFamRut_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFamRut ;



static FUNCTION TFamRut_Create( ) ; local Self AS CLASS TFamRut := QSelf() AS CLASS TFamRut

   ::AddField( "cCodRut", "C",  4, 0, {|| "@!" },          "Ruta",      .F.,       "Código ruta",                4  )
   ::AddField( "cNomRut", "C", 30, 0, {|| "@!" },          "Nom. Ruta", .F.,       "Nombre ruta",               40  )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },          "Cli.",      .F.,       "Código cliente",             8  )
   ::AddField( "cCodFam", "C", 16, 0, {|| "@!" },          "Cod.",      .T.,       "Código familia",             5  )
   ::AddField( "cNomFam", "C", 35, 0, {|| "@!" },          "Familia",   .T.,       "Nombre familia",            25  )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },          "Nombre",    .F.,       "Nombre cliente",            25  )
   ::AddField( "nNumCaj", "N", 19, 6, {|| MasUnd() },      "Caj.",      lUseCaj(), "Cajas",                     12  )
   ::AddField( "nNumUnd", "N", 19, 6, {|| MasUnd() },      "Und.",      .T.,       "Unidades",                  12  )
   ::AddField( "nUndCaj", "N", 19, 6, {|| MasUnd() },      "Tot. Und.", lUseCaj(), "Unidades por caja",         12  )
   ::AddField( "nComAge", "N", 19, 6, {|| ::cPicOut },     "Com. Age.", .F.,       "Comisión agente",           12  )
   ::AddField( "nAcuImp", "N", 19, 6, {|| ::cPicOut },     "Imp.",      .T.,       "Importe",                   12  )
   ::AddField( "nAcuCaj", "N", 19, 6, {|| MasUnd() },      "Caj. Acu.", lUseCaj(), "Cajas acumuladas" ,         12  )
   ::AddField( "nAcuUnd", "N", 19, 6, {|| MasUnd() },      "Und. Acu.", .T.,       "Unidades acumuladas" ,      12  )
   ::AddField( "nAcuUxc", "N", 19, 6, {|| MasUnd() },      "Tot. Acu.", lUseCaj(), "Acumulado cajas x unidades",12  )
   ::AddField( "nTotMov", "N", 19, 6, {|| ::cPicOut },     "Imp. Acu.", .T.,       "Importe" ,                  12  )

   ::AddTmpIndex( "CCODRUT", "CCODRUT + CCODCLI + CCODFAM" )

   ::AddGroup( {|| ::oDbf:cCodRut }, {|| "Ruta  : " + Rtrim( ::oDbf:cCodRut ) + "-" + oRetFld( ::oDbf:cCodRut, ::oDbfRut ) } , {|| "Total Ruta... "   } )
   ::AddGroup( {|| ::oDbf:cCodRut + ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) }, {|| "Total Cliente... " } )

RETURN ( Self )



static FUNCTION TFamRut_OpenFiles( ) ; local Self AS CLASS TFamRut := QSelf() AS CLASS TFamRut

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT := TDataCenter():oFacCliT()
   ::oFacCliT:OrdSetFocus( "CCODCLI" )

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen)



static FUNCTION TFamRut_CloseFiles( ) ; local Self AS CLASS TFamRut := QSelf() AS CLASS TFamRut

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oDbfArt  := nil

RETURN ( Self )



static FUNCTION TFamRut_lResource( cFld ) ; local Self AS CLASS TFamRut := QSelf() AS CLASS TFamRut

   local cEstado := "Todas"

   if !::StdResource( "INFGEN21C" )
      return .F.
   end





   if !::oDefRutInf( 70, 80, 90, 100, 900 )
      return .F.
   end





   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end





   if !::lDefFamInf( 150, 160, 170, 180, 500 )
      return .F.
   end





   ::SetMetInf( ::oDbfCli )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::Createfilter( aItmCli(), ::oDbfCli:cAlias )

RETURN .T.






static FUNCTION TFamRut_lGenerate( ) ; local Self AS CLASS TFamRut := QSelf() AS CLASS TFamRut

   local bValid   := {|| .T. }
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end






   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf )            + " > " + Dtoc( ::dFinInf ) }, {|| "Rutas   : " + AllTrim( ::cRutOrg )         + " > " + AllTrim( ::cRutDes ) }, {|| "Clientes: " + AllTrim( ::cCliOrg )         + " > " + AllTrim( ::cCliDes ) }, {|| "Familias: " + AllTrim( ::cFamOrg )         + " > " + AllTrim( ::cFamDes ) }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] } }

   ::oDbfCli:OrdSetFocus( "COD" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfCli:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ), ::oDbfCli:OrdKey(), ( cExpHead ), , , , , , , , .T. )





   ::oDbfCli:GoTop()
   while !::lBreak .AND. !::oDbfCli:Eof()

      if ( ::lAllCli .OR. ( ::oDbfCli:Cod >= ::cCliOrg .AND. ::oDbfCli:Cod <= ::cCliDes ) )





         if ::oFacCliT:Seek( ::oDbfCli:Cod )

            while ::oDbfCli:Cod == ::oFacCliT:cCodCli .AND. !::oFacCliT:eof()







            if ( ::lAllRut .OR. ( ::oFacCliT:cCodRut >= ::cRutOrg .AND. ::oFacCliT:cCodRut <= ::cRutDes ) ) .AND. lChkSer( ::oFacCliT:cSerie, ::aSer )                                                         .AND. Eval( bValid )

               if ( ::oFacCliT:dFecFac >= ::dIniInf .AND. ::oFacCliT:dFecFac <= ::dFinInf )

                  if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

                     while ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac == ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac .AND. !::oFacCliL:eof()




                        if !Empty( ::oFacCliL:cCodFam )                                                                 .AND. ( ::lAllFam .OR. ( ::oFacCliL:cCodFam >= ::cFamOrg .AND. ::oFacCliL:cCodFam <= ::cFamDes ) ) .AND. !::oFacCliL:lTotLin                                                                          .AND. !::oFacCliL:lControl





                           if !::oDbf:Seek( ::oFacCliT:cCodRut + ::oFacCliT:cCodCli + ::oFacCliL:cCodFam )

                              ::oDbf:Append()
                              ::oDbf:Blank()

                              ::oDbf:cCodRut := ::oFacCliT:cCodRut
                              ::oDbf:cNomRut := oRetFld( ::oFacCliT:cCodRut, ::oDbfRut )
                              ::oDbf:cCodCli := ::oFacCliT:cCodCli
                              ::oDbf:cCodFam := ::oFacCliL:cCodFam
                              ::oDbf:cNomFam := cNomFam( ::oFacCliL:cCodFam, ::oDbfFam )
                              ::oDbf:cNomCli := ::oFacCliT:cNomcli
                              ::oDbf:nNumCaj := ::oFacCliL:nCanEnt
                              ::oDbf:nNumUnd := ::oFacCliL:nUniCaja
                              ::oDbf:nUndCaj := nTotNFacCli( ::oFacCliL )
                              ::oDbf:nComAge := nComLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv  )
                              ::oDbf:nAcuImp := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F. )
                              ::oDbf:nAcuCaj := ::oFacCliL:nCanEnt
                              ::oDbf:nAcuUnd := ::oFacCliL:nUniCaja
                              ::oDbf:nAcuUxc := nTotNFacCli( ::oFacCliL )
                              ::oDbf:nTotMov := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F. )

                              ::oDbf:Save()

                           else

                              ::oDbf:Load()

                              ::oDbf:nNumCaj += ::oFacCliL:nCanEnt
                              ::oDbf:nNumUnd += ::oFacCliL:nUniCaja
                              ::oDbf:nUndCaj += nTotNFacCli( ::oFacCliL )
                              ::oDbf:nComAge += nComLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                              ::oDbf:nAcuImp += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F. )
                              ::oDbf:nAcuCaj += ::oFacCliL:nCanEnt
                              ::oDbf:nAcuUnd += ::oFacCliL:nUniCaja
                              ::oDbf:nAcuUxc += nTotNFacCli( ::oFacCliL )
                              ::oDbf:nTotMov += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F. )

                              ::oDbf:Save()

                           end

                        end

                        ::oFacCliL:Skip()

                     end

                  end

               else





                  if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

                     while ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac == ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac .AND. !::oFacCliL:eof()








                        if !Empty( ::oFacCliL:cCodFam )                                                                 .AND.  ( ::lAllFam .OR. ( ::oFacCliL:cCodFam >= ::cFamOrg .AND. ::oFacCliL:cCodFam <= ::cFamDes ) ) .AND.  !::oFacCliL:lTotLin                                                                          .AND.  !::oFacCliL:lControl





                           if !::oDbf:Seek( ::oFacCliT:cCodRut + ::oFacCliT:cCodCli + ::oFacCliL:cCodFam )

                              ::oDbf:Append()
                              ::oDbf:Blank()

                              ::oDbf:cCodRut := ::oFacCliT:cCodRut
                              ::oDbf:cCodCli := ::oFacCliT:cCodCli
                              ::oDbf:cCodFam := ::oFacCliL:cCodFam
                              ::oDbf:cNomFam := cNomFam( ::oFacCliL:cCodFam, ::oDbfFam )
                              ::oDbf:cNomCli := ::oFacCliT:cNomcli
                              ::oDbf:nAcuCaj += ::oFacCliL:nCanEnt
                              ::oDbf:nAcuUnd += ::oFacCliL:nUniCaja
                              ::oDbf:nAcuUxc += nTotNFacCli( ::oFacCliL )
                              ::oDbf:nTotMov += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F. )

                              ::oDbf:Save()

                           else





                              ::oDbf:Load()

                              ::oDbf:nAcuCaj += ::oFacCliL:nCanEnt
                              ::oDbf:nAcuUnd += ::oFacCliL:nUniCaja
                              ::oDbf:nAcuUxc += nTotNFacCli( ::oFacCliL )
                              ::oDbf:nTotMov += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F. )

                              ::oDbf:Save()

                           end

                        end

                        ::oFacCliL:Skip()

                     end

                  end

               end

            end

            ::oFacCliT:Skip()

            end

         end

      end

      ::oDbfCli:Skip()

      ::RefMetInf( ::oDbfCli:OrdKeyNo() )

   end

   ::oDbfCli:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfCli:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
