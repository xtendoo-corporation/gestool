#line 15 ".\.\Prg\Tfilter.prg"
_HB_CLASS TFilter ; function TFilter ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFilter", iif( .F., { }, { @HBObject() } ), @TFilter() ) ) ;



    _HB_MEMBER { AS STRING cName, cFor, cComment } ; oClass:AddMultiData( "STRING",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cName", "cFor", "cComment"}, .F. )
    _HB_MEMBER { AS CODEBLOCK bFor } ; oClass:AddMultiData( "CODEBLOCK",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bFor"}, .F. )
    _HB_MEMBER { AS OBJECT oDbf } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbf"}, .F. )
    _HB_MEMBER { AS ANYTYPE Cargo } ; oClass:AddMultiData( "ANYTYPE",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Cargo"}, .F. )

    _HB_MEMBER New( oDbf, cName, bFor, cFor, cComment) AS CLASS TFilter; oClass:AddMethod( "New", @TFilter_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER SetFocus(); oClass:AddMethod( "SetFocus", @TFilter_SetFocus(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER Destroy(); oClass:AddInline( "Destroy", {|Self | ( ( Self ) ), Self := nil, .T.}, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFilter ;



static FUNCTION TFilter_New( oDbf, cName, bFor, cFor, cComment ) ; local Self AS CLASS TFilter := QSelf() AS CLASS TFilter

    local oFlt := Self

    ::oDbf := oDbf

    ::cFor := if( cFor == NIL, "", cFor )
    ::bFor := if( bFor == NIL, &("{ || " + oFlt:cFor + " }"), bFor )

    ::cName := upper( if( ValType( cName ) <> "C", cFor, cName ) )

    ::cComment := if( cComment == NIL, Self:cName + " / " + Self:cFor, cComment )

return( Self )



static FUNCTION TFilter_SetFocus( ) ; local Self AS CLASS TFilter := QSelf() AS CLASS TFilter

    local oFlt := Self

    ( ::oDbf:nArea )->( DbSetFilter( ::bFor, ::cFor ) )

    ::oDbf:lCount  := .T.
    ::oDbf:oFilter := oFlt

return( Self )
