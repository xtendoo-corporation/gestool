#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\TicketsClientesLineasModel.prg"
_HB_CLASS TicketsClientesLineasModel ; function TicketsClientesLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TicketsClientesLineasModel", iif( .T., { @TransaccionesComercialesLineasModel() }, { @HBObject() } ), @TicketsClientesLineasModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "TikeL" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getExtraWhere(); oClass:AddInline( "getExtraWhere", {|Self | ( ( Self ) ), ( "AND nCtlStk < 2" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getFechaFieldName(); oClass:AddInline( "getFechaFieldName", {|Self | ( ( Self ) ), ( "dFecTik" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getHoraFieldName(); oClass:AddInline( "getHoraFieldName", {|Self | ( ( Self ) ), ( "tFecTik" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getArticuloFieldName(); oClass:AddInline( "getArticuloFieldName", {|Self, lComb | ( ( Self ) ), ( if( !lComb, "cCbaTil", "cComTil" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setAlmacenFieldName(); oClass:AddInline( "setAlmacenFieldName", {|Self | ( ( Self ) ), ( ::cAlmacenFieldName  := "cAlmLin" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getCajasFieldName(); oClass:AddInline( "getCajasFieldName", {|Self | ( ( Self ) ), ( "" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getBultosFieldName(); oClass:AddInline( "getBultosFieldName", {|Self | ( ( Self ) ), ( "" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUnidadesFieldName(); oClass:AddInline( "getUnidadesFieldName", {|Self | ( ( Self ) ), ( "nUntTil" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSerieFieldName(); oClass:AddInline( "getSerieFieldName", {|Self | ( ( Self ) ), ( "cSerTil" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNumeroFieldName(); oClass:AddInline( "getNumeroFieldName", {|Self | ( ( Self ) ), ( "CAST( cNumTil AS SQL_NUMERIC )" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSufijoFieldName(); oClass:AddInline( "getSufijoFieldName", {|Self | ( ( Self ) ), ( "cSufTil" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getTipoDocumento(); oClass:AddInline( "getTipoDocumento", {|Self | ( ( Self ) ), ( "12" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen); oClass:AddMethod( "getSQLSentenceLineasAgrupadas", @TicketsClientesLineasModel_getSQLSentenceLineasAgrupadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceCombAgrupadas( cCodigoArticulo, cCodigoAlmacen); oClass:AddMethod( "getSQLSentenceCombAgrupadas", @TicketsClientesLineasModel_getSQLSentenceCombAgrupadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "getLineasAgrupadas", @TicketsClientesLineasModel_getLineasAgrupadas(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLineasAgrupadasUltimaConsolidacion( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote, dConsolidacion); oClass:AddMethod( "getLineasAgrupadasUltimaConsolidacion", @TicketsClientesLineasModel_getLineasAgrupadasUltimaConsolidacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSQLSentenceTotalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "getSQLSentenceTotalUnidadesStock", @TicketsClientesLineasModel_getSQLSentenceTotalUnidadesStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSQLSentenceTotalUnidadesComb( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "getSQLSentenceTotalUnidadesComb", @TicketsClientesLineasModel_getSQLSentenceTotalUnidadesComb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getSntTotalUnidadesStock( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote, lSalida); oClass:AddMethod( "getSntTotalUnidadesStock", @TicketsClientesLineasModel_getSntTotalUnidadesStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getSntTotalUnidadesComb( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote, lSalida); oClass:AddMethod( "getSntTotalUnidadesComb", @TicketsClientesLineasModel_getSntTotalUnidadesComb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER totalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote); oClass:AddMethod( "totalUnidadesStock", @TicketsClientesLineasModel_totalUnidadesStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInfoSqlStock( cCodigoArticulo, cCodigoAlmacen, lSalida, lComb, dFechaHasta); oClass:AddMethod( "getInfoSqlStock", @TicketsClientesLineasModel_getInfoSqlStock(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateDelete( cuuid); oClass:AddMethod( "updateDelete", @TicketsClientesLineasModel_updateDelete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER recuperar( cUuid); oClass:AddMethod( "recuperar", @TicketsClientesLineasModel_recuperar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @TicketsClientesLineasModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TicketsClientesLineasModel ;



static FUNCTION TicketsClientesLineasModel_getSQLSentenceLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel











   local cSql  := "SELECT "                                                +  "cCbaTil as cCodArt, "                                +  "cAlmLin as cCodAlm, "                                +  "cCodPr1 as cCodPr1, "                                +  "cCodPr2 as cCodPr2, "                                +  "cValPr1 as cValPr1, "                                +  "cValPr2 as cValPr2, "                                +  "cLote as cLote "                                     +  "FROM " + ::getTableName() + " "                         +  "WHERE nCtlStk < 2 AND lDelete = .f. "                   +  "AND cCbaTil = " + quoted( cCodigoArticulo ) + " "

   if !Empty( cCodigoAlmacen )
      cSql     += "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
   end

   cSql        += "GROUP BY cCbaTil, cAlmLin, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote "

Return ( cSql )



static FUNCTION TicketsClientesLineasModel_getSQLSentenceCombAgrupadas( cCodigoArticulo, cCodigoAlmacen ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel











   local cSql  := "SELECT "                                                +  "cComTil as cCodArt, "                                +  "cAlmLin as cCodAlm, "                                +  "cCodPr1 as cCodPr1, "                                +  "cCodPr2 as cCodPr2, "                                +  "cValPr1 as cValPr1, "                                +  "cValPr2 as cValPr2, "                                +  "cLote as cLote "                                     +  "FROM " + ::getTableName() + " "                         +  "WHERE nCtlStk < 2 AND lDelete = .f."                    +  "AND cComTil = " + quoted( cCodigoArticulo ) + " "

   if !Empty( cCodigoAlmacen )
      cSql     +=  "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
   end

   cSql        +=    "GROUP BY cComTil, cAlmLin, cCodPr1, cCodPr2, cValPr1, cValPr2, cLote "

Return ( cSql )



static FUNCTION TicketsClientesLineasModel_getLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cStm  := "ADSLineasAgrupadas"
   local cSql  := ::getSQLSentenceLineasAgrupadas( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION TicketsClientesLineasModel_getLineasAgrupadasUltimaConsolidacion( cCodigoArticulo, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote, hConsolidacion ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cStm







   local cSql  := "SELECT nCanEnt "                                     +  "  FROM " + ::getTableName()                          +  "  WHERE nCtlStk < 2 AND lDelete = .f."               +  " AND cCbaTil = " + quoted( cCodigoArticulo )   +  " AND cAlmLin = " + quoted( cCodigoAlmacen )    +  " AND cValPr1 = " + quoted( cValorPropiedad1 )  +  " AND cValPr2 = " + quoted( cValorPropiedad2 )  +  " AND cLote = " + quoted( cLote )

   if !empty(hConsolidacion)
      cSql     +=       " AND dFecFac >= " + quoted( hget( hConsolidacion, "fecha" ) )
      cSql     +=       " AND tFecFac >= " + quoted( hget( hConsolidacion, "hora" ) )
   end

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( cStm )
   end

RETURN ( nil )



static FUNCTION TicketsClientesLineasModel_getSQLSentenceTotalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel



   local cSql  := "SELECT SUM( nUntTil ) as [totalUnidadesStock] , " + quoted( ::getTableName() ) + " AS Document "  +  "FROM " + ::getTableName() + " "                                                                +  "WHERE lDelete = .f. AND cCbaTil = " + quoted( cCodigoArticulo ) + " "

   if !empty( dConsolidacion )
      if !empty( tConsolidacion )
         cSql  +=    "AND CAST( dFecTik AS SQL_CHAR ) + tFecTik >= " + quoted( dateToSQLString( dConsolidacion ) + tConsolidacion ) + " "
      else
         cSql  +=    "AND CAST( dFecTik AS SQL_CHAR ) >= " + quoted( dateToSQLString( dConsolidacion ) ) + " "
      end
   end

   cSql        +=    "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
   cSql        +=    "AND cCodPr1 = " + quoted( cCodigoPropiedad1 ) + " "
   cSql        +=    "AND cCodPr2 = " + quoted( cCodigoPropiedad2 ) + " "
   cSql        +=    "AND cValPr1 = " + quoted( cValorPropiedad1 ) + " "
   cSql        +=    "AND cValPr2 = " + quoted( cValorPropiedad2 ) + " "
   cSql        +=    "AND cLote = " + quoted( cLote ) + " "

RETURN ( cSql )



static FUNCTION TicketsClientesLineasModel_getSQLSentenceTotalUnidadesComb( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel



   local cSql  := "SELECT SUM( nUntTil ) as [totalUnidadesStock] , " + quoted( ::getTableName() ) + " AS Document "  +  "FROM " + ::getTableName() + " "                                                                +  "WHERE lDelete = .f. AND cComTil = " + quoted( cCodigoArticulo ) + " "

   if !empty( dConsolidacion )
      if !empty( tConsolidacion )
         cSql  +=    "AND CAST( dFecTik AS SQL_CHAR ) + tFecTik >= " + quoted( dateToSQLString( dConsolidacion ) + tConsolidacion ) + " "
      else
         cSql  +=    "AND CAST( dFecTik AS SQL_CHAR ) >= " + quoted( dateToSQLString( dConsolidacion ) ) + " "
      end
   end

   cSql        +=    "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
   cSql        +=    "AND cCodPr1 = " + quoted( cCodigoPropiedad1 ) + " "
   cSql        +=    "AND cCodPr2 = " + quoted( cCodigoPropiedad2 ) + " "
   cSql        +=    "AND cValPr1 = " + quoted( cValorPropiedad1 ) + " "
   cSql        +=    "AND cValPr2 = " + quoted( cValorPropiedad2 ) + " "
   cSql        +=    "AND cLote = " + quoted( cLote ) + " "

RETURN ( cSql )



static FUNCTION TicketsClientesLineasModel_getSntTotalUnidadesStock( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote, lSalida ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cSql        := ""

   If( lSalida == nil, lSalida := .F., ) ;

   cSql              := "SELECT "
   cSql              += "( SUM( nUntTil ) " + if( lSalida, " * -1 ", "" )  + " ) as [totalUnidadesStock], "
   cSql              += quoted( ::getTableName() ) + " AS Document "
   cSql              += "FROM " + ::getTableName() + " AS cTable "
   cSql              += "WHERE lDelete = .f. AND  cCbaTil = " + quoted( cCodigoArticulo ) + " "
   cSql              += "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
   cSql              += "AND cCodPr1 = " + quoted( cCodigoPropiedad1 ) + " "
   cSql              += "AND cCodPr2 = " + quoted( cCodigoPropiedad2 ) + " "
   cSql              += "AND cValPr1 = " + quoted( cValorPropiedad1 ) + " "
   cSql              += "AND cValPr2 = " + quoted( cValorPropiedad2 ) + " "
   cSql              += "AND cLote = " + quoted( cLote ) + " "
   cSql              += "AND iif( (" + MovimientosAlmacenLineasModel():getSentenceConsolidacion( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) + ") IS NOT NULL, "
   cSql              += "( CAST( " + ::getFechaFieldName() + " AS SQL_CHAR ) + " + ::getHoraFieldName() + " >= (" + MovimientosAlmacenLineasModel():getSentenceConsolidacion( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) + ") ), TRUE )"
   cSql              += ::getExtraWhere() + " "

RETURN ( cSql )



static FUNCTION TicketsClientesLineasModel_getSntTotalUnidadesComb( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cSql        := ""

   cSql              := "SELECT "
   cSql              += "( SUM( nUntTil ) * -1 ) as [totalUnidadesStock], "
   cSql              += quoted( ::getTableName() ) + " AS Document "
   cSql              += "FROM " + ::getTableName() + " AS cTable "
   cSql              += "WHERE lDelete = .f. AND cComTil = " + quoted( cCodigoArticulo ) + " "
   cSql              += "AND cAlmLin = " + quoted( cCodigoAlmacen ) + " "
   cSql              += "AND cCodPr1 = " + quoted( cCodigoPropiedad1 ) + " "
   cSql              += "AND cCodPr2 = " + quoted( cCodigoPropiedad2 ) + " "
   cSql              += "AND cValPr1 = " + quoted( cValorPropiedad1 ) + " "
   cSql              += "AND cValPr2 = " + quoted( cValorPropiedad2 ) + " "
   cSql              += "AND cLote = " + quoted( cLote ) + " "
   cSql              += "AND iif( (" + MovimientosAlmacenLineasModel():getSentenceConsolidacion( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) + ") IS NOT NULL, "
   cSql              += "( CAST( " + ::getFechaFieldName() + " AS SQL_CHAR ) + " + ::getHoraFieldName() + " >= (" + MovimientosAlmacenLineasModel():getSentenceConsolidacion( cCodigoArticulo, cCodigoAlmacen, cCodigoPropiedad1, cCodigoPropiedad2, cValorPropiedad1, cValorPropiedad2, cLote ) + ") ), TRUE )"
   cSql              += ::getExtraWhere() + " "

RETURN ( cSql )



static FUNCTION TicketsClientesLineasModel_totalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cStm
   local cSql  := ::getSQLSentenceTotalUnidadesStock( cCodigoArticulo, dConsolidacion, tConsolidacion, cCodigoAlmacen, cValorPropiedad1, cValorPropiedad2, cLote )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->totalUnidadesStock )
   end

RETURN ( 0 )



static FUNCTION TicketsClientesLineasModel_getInfoSqlStock( cCodigoArticulo, cCodigoAlmacen, lSalida, lComb, dFechaHasta ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cSql        := ""

   If( lSalida == nil, lSalida := .F., ) ;
   If( lComb == nil, lComb := .F., ) ;





   if Empty( ::cAlmacenFieldName )
      ::setAlmacenFieldName()
   end

   cSql              := "SELECT "
   cSql              += ::getTotalBultosStatement( lSalida )
   cSql              += ::getTotalCajasStatement( lSalida )
   cSql              += ::getTotalUnidadesStatement( lSalida )
   cSql              += ::getTotalPdtRecibirStatement()
   cSql              += ::getTotalPdtEntregarStatement()
   cSql              += quoted( ::getTipoDocumento() ) + " AS Document, "
   cSql              += ::getFechaFieldName() + " AS Fecha, "
   cSql              += ::getHoraFieldName() + " AS Hora, "
   cSql              += ::getSerieFieldName() + " AS Serie, "
   cSql              += "CAST( " + ::getNumeroFieldName() + " AS SQL_INTEGER ) AS Numero, "
   cSql              += ::getSufijoFieldName() + " AS Sufijo, "
   cSql              += "CAST( nNumLin AS SQL_INTEGER ) AS nNumLin, "
   cSql              += ::getArticuloFieldName( lComb ) + " AS Articulo, "
   cSql              += "cLote AS Lote, "
   cSql              += "cCodPr1 AS Propiedad1, "
   cSql              += "cCodPr2 AS Propiedad2, "
   cSql              += "cValPr1 AS Valor1, "
   cSql              += "cValPr2 AS Valor2, "
   cSql              += ::getAlmacenFieldName() + " AS Almacen "
   cSql              += "FROM " + ::getTableName() + " TablaLineas "
   cSql              += "WHERE " + ::getArticuloFieldName( lComb ) + " = " + quoted( cCodigoArticulo ) + " "
   cSql              += "AND lDelete = .f. "

   if !empty( cCodigoAlmacen )
      cSql           += "AND "+ ::getAlmacenFieldName() + " = " + quoted( cCodigoAlmacen ) + " "
   end

   if hb_isdate( dFechaHasta )
      cSql           += "AND CAST( " + ::getFechaFieldName() + " AS SQL_CHAR ) <= " + formatoFechaSql( dFechaHasta ) + " "
   end

   if !Empty( ::getExtraWhere() )
      cSql           += ::getExtraWhere() + " "
   end





   cSql              += "AND CAST( " + ::getFechaFieldName() + " AS SQL_CHAR ) + " + ::getHoraFieldName() + " >= "
   cSql              += "COALESCE( "
   cSql              += "( SELECT TOP 1 CAST( HisMov.dFecMov AS SQL_CHAR ) + HisMov.cTimMov "
   cSql              += "FROM " + ::getEmpresaTableName( "HisMov" ) + " HisMov "
   cSql              += "WHERE HisMov.nTipMov = 4 "

   if hb_isdate( dFechaHasta )
   cSql              += "AND CAST( HisMov.dFecMov AS SQL_CHAR ) <= " + formatoFechaSql( dFechaHasta ) + " "
   end

   cSql              += "AND HisMov.cRefMov = TablaLineas." + ::getArticuloFieldName( lComb ) + " "
   cSql              += "AND HisMov.cAliMov = TablaLineas." + ::getAlmacenFieldName() + " "
   cSql              += "AND HisMov.cLote = TablaLineas.cLote "
   cSql              += "ORDER BY HisMov.dFecMov DESC, HisMov.cTimMov DESC ), "
   cSql              += "'' ) "

RETURN ( cSql )



static FUNCTION TicketsClientesLineasModel_updateDelete( cuuid ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cStm  := "UpdateDeleteLineas"


   local cSql  := "UPDATE " + ::getTableName() +  " SET lDelete = .t." +  " WHERE paruuid = '" + cuuid + "'"

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION TicketsClientesLineasModel_recuperar( cUuid ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cStm  := "recuperarLineas"


   local cSql  := "UPDATE " + ::getTableName() +  " SET lDelete = .f." +  " WHERE paruuid = '" + cUuid + "'"

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION TicketsClientesLineasModel_getToOdoo( cArea ) ; local Self AS CLASS TicketsClientesLineasModel := QSelf() AS CLASS TicketsClientesLineasModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )
