#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Models\TicketsClientesModel.prg"
_HB_CLASS TicketsClientesModel ; function TicketsClientesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TicketsClientesModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @TicketsClientesModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getEmpresaTableName( "TikeT" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Riesgo( idCliente); oClass:AddMethod( "Riesgo", @TicketsClientesModel_Riesgo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER existId(); oClass:AddMethod( "existId", @TicketsClientesModel_existId(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER existUuid(); oClass:AddMethod( "existUuid", @TicketsClientesModel_existUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER hTicketsPendientesFromCliente( idCliente); oClass:AddMethod( "hTicketsPendientesFromCliente", @TicketsClientesModel_hTicketsPendientesFromCliente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getField( cSerie, nNumero, cSufijo, cField); oClass:AddMethod( "getField", @TicketsClientesModel_getField(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateDelete( cuuid); oClass:AddMethod( "updateDelete", @TicketsClientesModel_updateDelete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER recuperar( cUuid); oClass:AddMethod( "recuperar", @TicketsClientesModel_recuperar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNumeroFromUuid( uuid); oClass:AddMethod( "getNumeroFromUuid", @TicketsClientesModel_getNumeroFromUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getClienteFromUuid( uuid); oClass:AddMethod( "getClienteFromUuid", @TicketsClientesModel_getClienteFromUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getFechaHoraFromUuid( uuid); oClass:AddMethod( "getFechaHoraFromUuid", @TicketsClientesModel_getFechaHoraFromUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getToOdoo( cArea); oClass:AddMethod( "getToOdoo", @TicketsClientesModel_getToOdoo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TicketsClientesModel ;



static FUNCTION TicketsClientesModel_getField( cSerie, nNumero, cSufijo, cField ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm
   local cSql

   cSql              := "SELECT " + cField + " "
   cSql              +=    "FROM " + ::getTableName() + " "
   cSql              +=    "WHERE cSerTik = " + quoted( cSerie ) + " AND cNumTik = " + quoted( nNumero ) + " AND cSufTik = " + + quoted( cSufijo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( fieldget( fieldpos( cField ) ) ) )
   end

RETURN ( nil )



static FUNCTION TicketsClientesModel_getNumeroFromUuid( uuid ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm        := "getNumeroFromUuid"
   local cSql

   cSql              := "SELECT * "
   cSql              +=    "FROM " + ::getTableName() + " "
   cSql              +=    "WHERE uuid = " + quoted( uuid )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->cSerTik + "/" + AllTrim( ( cStm )->cNumTik ) + "/" + ( cStm )->cSufTik )
   end

RETURN ( Space( 200 ) )



static FUNCTION TicketsClientesModel_getClienteFromUuid( uuid ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm        := "getClienteFromUuid"
   local cSql

   cSql              := "SELECT * "
   cSql              +=    "FROM " + ::getTableName() + " "
   cSql              +=    "WHERE uuid = " + quoted( uuid )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( AllTrim( ( cStm )->cCliTik ) + " - " + AllTrim( ( cStm )->cNomTik ) )
   end

RETURN ( Space( 200 ) )



static FUNCTION TicketsClientesModel_getFechaHoraFromUuid( uuid ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm        := "getClienteFromUuid"
   local cSql

   cSql              := "SELECT * "
   cSql              +=    "FROM " + ::getTableName() + " "
   cSql              +=    "WHERE uuid = " + quoted( uuid )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( AllTrim( dToc( ( cStm )->dFecTik ) ) + " - " + AllTrim( ( cStm )->cHorTik ) )
   end

RETURN ( Space( 200 ) )



static FUNCTION TicketsClientesModel_Riesgo( idCliente ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cSql
   local cStm
   local nRiesgo  := 0



   cSql           := "SELECT SUM( nTotTik - nCobTik ) AS nRiesgo " +  "FROM " + ::getTableName() + " " +  "WHERE cCliTik = " + quoted( idCliente ) + " AND lLiqTik AND ( cTipTik = '1' OR cTipTik = '7' )"

   if ::ExecuteSqlStatement( cSql, @cStm )
      nRiesgo     += ( cStm )->nRiesgo
   end

RETURN ( nRiesgo )



static FUNCTION TicketsClientesModel_existId( cSerie, nNumero, cSufijo ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm


   local cSql  := "SELECT TOP 1 cNumTik"                                   + " " +  "FROM " + ::getTableName()                            + " " +  "WHERE cSerTik + LTRIM( cNumTik ) + cSufTik = " + quoted( cSerie + alltrim( str( nNumero ) ) + cSufijo )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( !empty( ( cStm )->( fieldget( 1 ) ) ) )
   end

RETURN ( .F. )



static FUNCTION TicketsClientesModel_existUuid( uuid ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm


   local cSql  := "SELECT TOP 1 cNumTik"                                   + " " +  "FROM " + ::getTableName()                            + " " +  "WHERE uuid = " + quoted( uuid )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( !empty( ( cStm )->( fieldget( 1 ) ) ) )
   end

RETURN ( .F. )



static FUNCTION TicketsClientesModel_hTicketsPendientesFromCliente( idCliente ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cSql
   local cStm
   local nRiesgo  := 0



   cSql           := "SELECT cSerTik, cNumTik, cSufTik, dFecTik, nTotTik " +  "FROM " + ::getTableName() + " " +  "WHERE cCliTik = " + quoted( idCliente ) + " AND NOT lPgdTik AND NOT lAbierto AND cTipTik = '1'"

   ::ExecuteSqlStatement( cSql, @cStm )

RETURN ( cStm )



static FUNCTION TicketsClientesModel_updateDelete( cuuid ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm  := "UpdateDeleteCabecera"


   local cSql  := "UPDATE " + ::getTableName() +  " SET lDelete = .t." +  " WHERE uuid = '" + cuuid + "'"

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION TicketsClientesModel_recuperar( cUuid ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cStm  := "recuperarcabecera"


   local cSql  := "UPDATE " + ::getTableName() +  " SET lDelete = .f." +  " WHERE uuid = '" + cUuid + "'"

Return ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION TicketsClientesModel_getToOdoo( cArea ) ; local Self AS CLASS TicketsClientesModel := QSelf() AS CLASS TicketsClientesModel

   local cSql  := "SELECT * FROM " + ::getTableName()

RETURN ( ::ExecuteSqlStatement( cSql, @cArea ) )
