#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Timaglst.prg"
_HB_CLASS TImageList ; function TImageList ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TImageList", iif( .F., { }, { @HBObject() } ), @TImageList() ) ) ;

   _HB_MEMBER { hImageList } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hImageList"}, .F. )
   _HB_MEMBER { aBitmaps } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBitmaps"}, .F. )

   _HB_MEMBER New( nWidth, nHeight); oClass:AddMethod( "New", @TImageList_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER Add(); oClass:AddInline( "Add", {|Self, oBmpImage, oBmpMask | ( ( Self ) ), AAdd( ::aBitmaps, oBmpImage ), AAdd( ::aBitmaps, oBmpMask ), ILAdd( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), If( oBmpMask <> nil, oBmpMask:hBitmap, 0 ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddIcon( oIcon); oClass:AddMethod( "AddIcon", @TImageList_AddIcon(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER AddMasked(); oClass:AddInline( "AddMasked", {|Self, oBmpImage, nClrMask | ( ( Self ) ), AAdd( ::aBitmaps, oBmpImage ), ILAddMasked( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), nClrMask ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TImageList_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetBkColor(); oClass:AddInline( "SetBkColor", {|Self, nColor | ( ( Self ) ), ILSetBkColor( ::hImageList, nColor ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TImageList ;



static FUNCTION TImageList_New( nWidth, nHeight ) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   If( nWidth == nil, nWidth := 16, ) ; If( nHeight == nil, nHeight := 16, );

   ::hImageList = ILCreate( nWidth, nHeight )
   ::aBitmaps   = {}

return Self



static FUNCTION TImageList_AddIcon( oIcon ) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   local oIco

   if ValType( oIcon ) == "C"
      if File( "oIcon" )
         oIco := TIcon():New( ,,, oIcon, )
      else
         oIco := TIcon():New( ,, oIcon,, )
      endif
   else
      oIco = oIcon
   endif

return ILAddIcon( ::hImageList, oIco:hIcon )



static FUNCTION TImageList_End( ) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   local n

   ILDestroy( ::hImageList )

   for n = 1 to Len( ::aBitmaps )
      ::aBitmaps[ n ]:End()
   next

   ::aBitmaps = {}

return nil
