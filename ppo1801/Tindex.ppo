#line 19 ".\.\Prg\Tindex.prg"
_HB_CLASS TIndex ; function TIndex ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TIndex", iif( .F., { }, { @HBObject() } ), @TIndex() ) ) ;

    _HB_MEMBER { AS STRING cFile, cKey, cFor, cName, cComment } ; oClass:AddMultiData( "STRING",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cFile", "cKey", "cFor", "cName", "cComment"}, .F. )
    _HB_MEMBER { AS LOGICAL lScope, lDes, lUniq, lTmp, lNoDel } ; oClass:AddMultiData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lScope", "lDes", "lUniq", "lTmp", "lNoDel"}, .F. )
    _HB_MEMBER { AS CODEBLOCK bRange, bTop, bBottom } ; oClass:AddMultiData( "CODEBLOCK",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bRange", "bTop", "bBottom"}, .F. )
    _HB_MEMBER { bWhile, bOption } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bWhile", "bOption"}, .F. )
    _HB_MEMBER { Cargo, uTop, uBottom } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Cargo", "uTop", "uBottom"}, .F. )
    _HB_MEMBER { AS CODEBLOCK bFor, bKey } ; oClass:AddMultiData( "CODEBLOCK",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bFor", "bKey"}, .F. )
    _HB_MEMBER { AS NUMERIC nStep } ; oClass:AddMultiData( "NUMERIC",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nStep"}, .F. )
    _HB_MEMBER { oDbf } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbf"}, .F. )

    _HB_MEMBER { AS STRING ClsName } ; oClass:AddMultiData( "STRING", "TINDEX", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"ClsName"}, .F. )


    _HB_MEMBER New( oDbf, cName, cFile, cKey, cFor, bWhile, lUniq,  lDes, cComment, bOption, nStep, lNoDel, lTmp) AS CLASS TIndex; oClass:AddMethod( "New", @TIndex_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER SetScope( uTop, uBottom); oClass:AddMethod( "SetScope", @TIndex_SetScope(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER ClearScope(); oClass:AddMethod( "ClearScope", @TIndex_ClearScope(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER Order(); oClass:AddInline( "Order", {|Self | ( ( Self ) ), ( ::oDbf:nArea )->( OrdNumber( ::cName, ::cFile ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER KeyVal(); oClass:AddInline( "KeyVal", {|Self | ( ( Self ) ), ( ::oDbf:nArea )->( OrdKeyVal() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER SetCond(); oClass:AddMethod( "SetCond", @TIndex_SetCond(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER Create(); oClass:AddMethod( "Create", @TIndex_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER IdxExt(); oClass:AddMethod( "IdxExt", @TIndex_IdxExt(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER SetFocus(); oClass:AddMethod( "SetFocus", @TIndex_SetFocus(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER Add(); oClass:AddInline( "Add", {|Self | ( ( Self ) ), ( if( ( ::oDbf:cRDD <> "ADSCDX" .OR. !lAIS() ), ( ::oDbf:nArea )->( OrdListAdd( ::cFile, ::cName ) ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER Delete(); oClass:AddMethod( "Delete", @TIndex__Delete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER Destroy(); oClass:AddInline( "Destroy", {|Self | ( ( Self ) ), Self := nil, .T. }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TIndex ;




static FUNCTION TIndex_New( oDbf, cName, cFile, cKey, cFor, bWhile,  lUniq, lDes, cComment, bOption, nStep, lNoDel, lTmp ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex

    ::oDbf := oDbf

    cComment := If( cComment == nil, "", cComment );

    ::cName          := Upper( if( ValType( cName ) == "C", cName, GetFileNoExt( cFile ) ) )
    ::cFile          := ::oDbf:cPath + GetFileName( if( ValType( cFile ) == "C", cFile, cName ) )

    ::lNoDel := if( lNoDel == NIL, .T., lNoDel )
    ::lTmp := if( lTmp == NIL, .F., lTmp )

    if ValType( cFor ) <> "C" .OR. Empty( cFor )
        ::cFor       := if( ::lNoDel, "!Deleted()", ".t." )
    else
        ::cFor       := if( ::lNoDel, "!Deleted() .and.", "" ) + Upper( cFor )
    end

    ::cKey           := Upper( if( ValType( cKey ) <> "C", ".T.", cKey ) )

    ::lUniq := if( lUniq == NIL, Set( 10 ), lUniq )
    ::lDes := if( lDes == NIL, .F., lDes )
    ::bWhile := bWhile
    ::bOption := bOption

    ::cComment := cComment
    ::bKey     := c2Block( ::cKey )
    ::bFor     := c2Block( ::cFor )

    ::bTop     := { || .T. }
    ::bBottom  := { || .T. }
    ::bRange   := { || .T. }

    ::uTop     := ::uBottom := nil

    ::lScope   := .F.

    if ValType( nStep ) <> "N"
         nStep := if( ValType( bOption ) <> "B", 100000000, 0 )
    endif

    ::nStep := nStep

return( Self )



static FUNCTION TIndex_SetCond( ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex

return( ( ::oDbf:nArea )->( OrdCondSet( ::cFor, ::bFor,, ::bWhile, ::bOption, ::nStep, RecNo(), .F., , , ::lDes ) ) )



static FUNCTION TIndex_Create( ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex

    ::SetCond()

    ( ::oDbf:nArea )->( OrdCreate( ::cFile, ::cName, ::cKey, ::bKey, ::lUniq ) )

return( Self )





static FUNCTION TIndex_IdxExt( ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex
return( ::cFile := if( AT( ".", GetFileName( ::cFile ) ) > 0, ::cFile, ::cFile + ( ::oDbf:nArea )->( OrdBagExt() ) ) )



static FUNCTION TIndex__Delete( ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex

    if ::oDbf:cRdd $ "_DBFCDX DBFMDX DBFNSX SIXCDX SIXNSX COMIX DBFCDXAX ADS"
        ( ::oDbf:nArea )->( OrdDestroy( ::cName, ::cFile ) )
    else
        FErase( ::cFile )
    endif

return( Self := nil )




static FUNCTION TIndex_SetScope( uTop, uBottom ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex

    if ::lDes
        if ::lScope := ( uBottom <= uTop )

            ::bTop    :=  { | o | !( o:nArea )->( Bof() ) .AND. ::KeyVal() <= uTop }

            ::bBottom :=  { | o | !( o:nArea )->( Eof() ) .AND. ::KeyVal() >= uBottom }

            ::bRange  :=  { | x | x := ::KeyVal(), x <= uTop .AND. x >= uBottom }
        endif
    else
        if ::lScope := ( uTop <= uBottom  )

            ::bTop    :=  { | o | !( o:nArea )->( Bof() ) .AND. ::KeyVal() >= uTop }

            ::bBottom :=  { | o | !( o:nArea )->( Eof() ) .AND. ::KeyVal() <= uBottom }

            ::bRange  :=  { | x | x := ::KeyVal(), x >= uTop .AND. x <= uBottom }
        endif
    endif

    if ::lScope
        ::uTop    := uTop
        ::uBottom := uBottom
    else
        ::oDbf:DbError( 11 )
    endif

return( ::lScope )



static FUNCTION TIndex_ClearScope( ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex

    ::uTop := ::uBottom := nil

    ::bTop    := { || .T. }
    ::bBottom := { || .T. }
    ::bRange  := { || .T. }

    ::lScope := .F.

return( Self )



static FUNCTION TIndex_SetFocus( ) ; local Self AS CLASS TIndex := QSelf() AS CLASS TIndex

    local nOrder := 0

    if ::cName <> "_NONE_"
        nOrder := ::Order()
        ( ::oDbf:nArea )->( OrdSetFocus( nOrder, ::cFile ) )
    else
        ( ::oDbf:nArea )->( OrdSetFocus( 0 ) )
    endif

return( ::oDbf:oIndex := Self )
