#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinfage.prg"
FUNCTION InfDetAge()

   local oInf
   local aCol  := {}
   local aIdx  := {}

   aAdd( aCol, { "CCODAGE", "C",  3, 0, {|| "@!" },         "Cod. Agente",    .F. } )
   aAdd( aCol, { "CCODCLI", "C", 12, 0, {|| "@!" },         "Cod. Cliente",   .F. } )
   aAdd( aCol, { "CNOMCLI", "C", 50, 0, {|| "@!" },         "Cliente",        .T. } )
   aAdd( aCol, { "CCODALB", "C", 12, 0, {|| "@!" },         "Documento",      .T. } )
   aAdd( aCol, { "CCSUALB", "C", 12, 0, {|| "@!" },         "Su albaran",     .T. } )
   aAdd( aCol, { "DFECALB", "D",  8, 0, {|| "" },           "Fecha",          .T. } )
   aAdd( aCol, { "NUNDCAJ", "N", 13, 6, {|| MasUnd() },     "Cajas",          .T. } )
   aAdd( aCol, { "NUNDART", "N", 13, 6, {|| MasUnd() },     "Unidades",       .T. } )
   aAdd( aCol, { "CREFART", "C", 14, 0, {|| "@!" },         "Cod. Artículo",  .T. } )
   aAdd( aCol, { "CDESART", "C", 50, 0, {|| "@!" },         "Artículo",       .T. } )
   aAdd( aCol, { "CCODMOV", "C",  2, 0, {|| "@!" },         "Mov.",           .T. } )
   aAdd( aCol, { "NBASCOM", "N", 13, 0, {|| oInf:cPicOut }, "Base",           .T. } )
   aAdd( aCol, { "NCOMAGE", "N",  4, 1, {|| oInf:cPicOut }, "%Comisión",      .T. } )
   aAdd( aCol, { "NTOTCOM", "N", 13, 0, {|| oInf:cPicOut }, "Comisión",       .T. } )

   aAdd( aIdx, { "CCODAGE", "CCODAGE + CREFART" } )

   oInf  := TInfDetAge():New( "Informe de liquidación de agentes", aCol, aIdx, "01043" )

   oInf:AddGroup( {|| oInf:oDbf:cCodAge }, {|| "Agente : " + Rtrim( oInf:oDbf:cCodAge ) + "-" + oRetFld( oInf:oDbf:cCodAge, oInf:oDbfAge ) }, {||"Total agente..."} )
   oInf:Resource()
   oInf:Activate()

   oInf:End()

RETURN NIL



_HB_CLASS TInfDetAge ; function TInfDetAge ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfDetAge", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfDetAge() ) ) ;

   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { cVta } ; oClass:AddMultiData(, Space( 2 ), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cVta"}, .F. )
   _HB_MEMBER { AS LOGIC lVta } ; oClass:AddMultiData( "LOGIC",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lVta"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfDetAge_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfDetAge_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfDetAge_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfDetAge_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfDetAge_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfDetAge ;



static FUNCTION TInfDetAge_Create( ) ; local Self AS CLASS TInfDetAge := QSelf() AS CLASS TInfDetAge

   ::AddField( "CCODAGE", "C",  3, 0, {|| "@!" },         "Cod. Agente",    .F. )
   ::AddField( "CCODCLI", "C", 12, 0, {|| "@!" },         "Cod. Cliente",   .F. )
   ::AddField( "CNOMCLI", "C", 50, 0, {|| "@!" },         "Cliente",        .T. )
   ::AddField( "CCODALB", "C", 12, 0, {|| "@!" },         "Documento",      .T. )
   ::AddField( "CCSUALB", "C", 12, 0, {|| "@!" },         "Su albaran",     .T. )
   ::AddField( "DFECALB", "D",  8, 0, {|| "" },           "Fecha",          .T. )
   ::AddField( "NUNDCAJ", "N", 13, 6, {|| MasUnd() },     "Cajas",          .T. )
   ::AddField( "NUNDART", "N", 13, 6, {|| MasUnd() },     "Unidades",       .T. )
   ::AddField( "CREFART", "C", 14, 0, {|| "@!" },         "Cod. Artículo",  .T. )
   ::AddField( "CDESART", "C", 50, 0, {|| "@!" },         "Artículo",       .T. )
   ::AddField( "CCODMOV", "C",  2, 0, {|| "@!" },         "Mov.",           .T. )

   ::AddTmpIndex( "CCODAGE", "CCODAGE + CREFART" )

   ::AddGroup( {|| ::oDbf:cCodAge }, {|| "Agente : " + Rtrim( ::oDbf:cCodAge ) + "-" + oRetFld( ::oDbf:cCodAge, ::oDbfAge ) }, {||"Total agente..."} )

RETURN ( Self )



static FUNCTION TInfDetAge_OpenFiles( ) ; local Self AS CLASS TInfDetAge := QSelf() AS CLASS TInfDetAge

  local oBlock
  local oError
  local lOpen := .T.





   oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

    ::oAlbCliT := TDataCenter():oAlbCliT()
   ::oAlbCliT:OrdSetFocus( "CCODAGE" )

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   RECOVER USING oError

      lOpen := .F.

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfDetAge_CloseFiles( ) ; local Self AS CLASS TInfDetAge := QSelf() AS CLASS TInfDetAge

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end

   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

RETURN ( Self )



static FUNCTION TInfDetAge_lResource( cFld ) ; local Self AS CLASS TInfDetAge := QSelf() AS CLASS TInfDetAge

   local oGet1
   local cGet2
   local oGet2
   local This  := Self

   if !::StdResource( "INF_GEN_AGE" )
      return .F.
   end





   ::oDefAgeInf( 70, 80, 90, 100 )





   ::lDefArtInf( 110, 120, 130, 140 )

   ::oDefExcInf()





   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDefResInf()

RETURN .T.






static FUNCTION TInfDetAge_lGenerate( ) ; local Self AS CLASS TInfDetAge := QSelf() AS CLASS TInfDetAge

   local nUndCaj
   local nUndArt
   local nComAge
   local nBasCom
   local nTotCom
   local nComUnd  := 1
   local nComImp  := 1

   ::oDlg:Disable()

   ::oDbf:Zap()

   ::oAlbCliT:Seek( ::cAgeOrg )
   ::oAlbCliT:Load()




   WHILE ::oAlbCliT:CCODAGE >= ::cAgeOrg           .AND. ::oAlbCliT:CCODAGE <= ::cAgeDes           .AND. lFacturado( ::oAlbCliT )                  .AND. !::oAlbCliT:Eof()


         IF ::oAlbCliT:DFECALB >= ::dIniInf        .AND. ::oAlbCliT:DFECALB <= ::dFinInf





            ::oAlbCliL:Seek( ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB )
            ::oAlbCliL:Load()


            WHILE ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB == ::oAlbCliL:CSERALB + Str( ::oAlbCliL:NNUMALB ) + ::oAlbCliL:CSUFALB .AND. !::oAlbCliT:Eof()


               IF ::oAlbCliL:CREF >= ::cArtOrg     .AND.  ::oAlbCliL:CREF <= ::cArtDes

                  nUndCaj     := abs( ::oAlbCliL:NCANENT )              * nComUnd
                  nUndArt     := abs( nUnitEnt( ::oAlbCliL:cAlias ) )   * nComUnd
                  nComAge     := abs( ::oAlbCliL:NCOMAGE )              * nComImp
                  nBasCom     := abs( nNetLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) ) * nComImp
                  nTotCom     := abs( Round( nBasCom * ::oAlbCliL:NCOMAGE / 100, ::nDerOut ) ) * nComImp


                  IF ( ::lVta .AND. ( ::oAlbCliL:CTIPMOV == ::cVta .OR. empty( ::cVta ) ) ) .OR.  !::lVta

                     IF !::lResumen .OR. !::oDbf:Seek( ::oAlbCliT:CCODAGE + ::oAlbCliL:CREF )

                        ::oDbf:Append()
                        ::oDbf:CCODAGE := ::oAlbCliT:CCODAGE
                        ::oDbf:CCODCLI := ::oAlbCliT:CCODCLI
                        ::oDbf:CNOMCLI := ::oAlbCliT:CNOMCLI
                        ::oDbf:CCODALB := ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB
                        ::oDbf:CCSUALB := ::oAlbCliT:CCODSUALB
                        ::oDbf:DFECALB := ::oAlbCliT:DFECALB
                        ::oDbf:NUNDCAJ := nUndCaj
                        ::oDbf:NUNDART := nUndArt
                        ::oDbf:CREFART := ::oAlbCliL:CREF
                        ::oDbf:CDESART := ::oAlbCliL:CDETALLE
                        ::oDbf:CCODMOV := ::oAlbCliL:CTIPMOV
                        ::oDbf:NBASCOM := nBasCom
                        ::oDbf:NCOMAGE := nComAge
                        ::oDbf:NTOTCOM := nTotCom
                        ::oDbf:Save()

                     ELSE

                        ::oDbf:NUNDCAJ += nUndCaj
                        ::oDbf:NUNDART += nUndArt
                        ::oDbf:NBASCOM += nBasCom
                        ::oDbf:NTOTCOM += nTotCom
                        ::oDbf:Save()

                     end

                  end

               end

               ::oAlbCliL:Skip():Load()

            end

            end

         ::oAlbCliT:Skip():Load()

         ::oMtrInf:AutoInc()

    end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
