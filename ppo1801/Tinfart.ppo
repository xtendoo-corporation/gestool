#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinfart.prg"
_HB_CLASS TInfArtPre ; function TInfArtPre ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfArtPre", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfArtPre() ) ) ;

   _HB_MEMBER { AS OBJECT oFamilia } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFamilia"}, .F. )
   _HB_MEMBER { AS OBJECT oIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIva"}, .F. )
   _HB_MEMBER { AS OBJECT oKit } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oKit"}, .F. )
   _HB_MEMBER { AS OBJECT oCmbArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCmbArt"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { nTotUndCom } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotUndCom"}, .F. )
   _HB_MEMBER { nTotImpCom } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotImpCom"}, .F. )
   _HB_MEMBER { nTotUndVta } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotUndVta"}, .F. )
   _HB_MEMBER { nTotImpVta } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotImpVta"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfArtPre_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfArtPre_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfArtPre_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfArtPre_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfArtPre_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotCom( cCodArt); oClass:AddMethod( "nTotCom", @TInfArtPre_nTotCom(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotVta( cCodArt); oClass:AddMethod( "nTotVta", @TInfArtPre_nTotVta(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfArtPre ;



static FUNCTION TInfArtPre_Create( ) ; local Self AS CLASS TInfArtPre := QSelf() AS CLASS TInfArtPre

   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },             "Cod. artículo",  .T., "Código artículo",           14, .F. )
   ::AddField( "cCodBar", "C", 14, 0, {|| "@!" },             "Cod. barra",     .T., "Código barra",              14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },             "Descripción",    .T., "Descripción",               40, .F. )
   ::AddField( "nIvaArt", "N",  6, 2, {|| "@E 999.99" },      "%" + cImp(),     .T., "%" + cImp(),                 6, .F. )
   ::AddField( "cCodFam", "C", 16, 0, {|| "@!" },             "Familia",        .T., "Familia",                    5, .F. )
   ::AddField( "nCosArt", "N", 16, 6, {|| ::cPicIn },         "Precio de costo",.F., "Costo",                     15, .F. )
   ::AddField( "nBnf1",   "N",  6, 2, {|| "@E 999.99" },      "%Bnf. 1",        .T., "Porcentaje de benefico 1",  12, .F. )
   ::AddField( "nImp1",   "N", 16, 6, {|| ::cPicImp },        "Precio 1",       .T., "Precio 1",                  12, .F. )
   ::AddField( "nIva1",   "N", 16, 6, {|| ::cPicImp },        "Precio 1 " + cImp(),.T., "Precio 1 " + cImp() + " incluido",  15, .F. )
   ::AddField( "nBnf2",   "N",  6, 2, {|| "@E 999.99" },      "%Bnf. 2",        .F., "Porcentaje de benefico 2",  12, .F. )
   ::AddField( "nImp2",   "N", 16, 6, {|| ::cPicImp },        "Precio 2",       .F., "Precio 2",                  12, .F. )
   ::AddField( "nIva2",   "N", 16, 6, {|| ::cPicImp },        "Precio 2 " + cImp(),.F., "Precio 2 " + cImp() + " incluido",  15, .F. )
   ::AddField( "nBnf3",   "N",  6, 2, {|| "@E 999.99" },      "%Bnf. 3",        .F., "Porcentaje de benefico 3",  12, .F. )
   ::AddField( "nImp3",   "N", 16, 6, {|| ::cPicImp },        "Precio 3",       .F., "Precio 3",                  12, .F. )
   ::AddField( "nIva3",   "N", 16, 6, {|| ::cPicImp },        "Precio 3 " + cImp(),.F., "Precio 3 " + cImp() + " incluido",  15, .F. )
   ::AddField( "nBnf4",   "N",  6, 2, {|| "@E 999.99" },      "%Bnf. 4",        .F., "Porcentaje de benefico 4",  12, .F. )
   ::AddField( "nImp4",   "N", 16, 6, {|| ::cPicImp },        "Precio 4",       .F., "Precio 4",                  12, .F. )
   ::AddField( "nIva4",   "N", 16, 6, {|| ::cPicImp },        "Precio 4 " + cImp(),.F., "Precio 4 " + cImp() + " incluido",  15, .F. )
   ::AddField( "nBnf5",   "N",  6, 2, {|| "@E 999.99" },      "%Bnf. 5",        .F., "Porcentaje de benefico 5",  12, .F. )
   ::AddField( "nImp5",   "N", 16, 6, {|| ::cPicImp },        "Precio 5",       .F., "Precio 5",                  12, .F. )
   ::AddField( "nIva5",   "N", 16, 6, {|| ::cPicImp },        "Precio 5 " + cImp(),.F., "Precio 5 " + cImp() + " incluido",  15, .F. )
   ::AddField( "nBnf6",   "N",  6, 2, {|| "@E 999.99" },      "%Bnf. 6",        .F., "Porcentaje de benefico 6",  12, .F. )
   ::AddField( "nImp6",   "N", 16, 6, {|| ::cPicImp },        "Precio 6",       .F., "Precio 6",                  12, .F. )
   ::AddField( "nIva6",   "N", 16, 6, {|| ::cPicImp },        "Precio 6 " + cImp(),.F., "Precio 6 " + cImp() + " incluido",  15, .F. )
   ::AddField( "nUndCom", "N", 16, 6, {|| ::cPicImp },        "Und. com.",      .F., "Total unidades en compras", 12, .F. )
   ::AddField( "nImpCom", "N", 16, 6, {|| ::cPicImp },        "Imp. com.",      .F., "Total importe en compras",  12, .F. )
   ::AddField( "nMedCom", "N", 16, 6, {|| ::cPicImp },        "Med. com.",      .F., "Precio medio de compras",   12, .F. )
   ::AddField( "nUndVta", "N", 16, 6, {|| ::cPicImp },        "Und. vta.",      .F., "Total unidades en ventas",  12, .F. )
   ::AddField( "nImpVta", "N", 16, 6, {|| ::cPicImp },        "Imp. vta.",      .F., "Total importe en ventas",   12, .F. )
   ::AddField( "nMedVta", "N", 16, 6, {|| ::cPicImp },        "Med. vta.",      .F., "Precio medio de ventas",    12, .F. )

   ::AddTmpIndex( "cCodArt", "cCodArt" )
   ::AddTmpIndex( "cNomArt", "cNomArt" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.

RETURN ( self )



static FUNCTION TInfArtPre_OpenFiles( ) ; local Self AS CLASS TInfArtPre := QSelf() AS CLASS TInfArtPre

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFamilia := DbfServer( "FAMILIAS.DBF", ):NewOpen( "FAMILIAS.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFamilia:AddBag( "FAMILIAS.CDX" ) ; ::oFamilia:AddBag( ) ; ::oFamilia:AutoIndex()

   ::oIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oIva:AddBag( "TIVA.CDX" ) ; ::oIva:AddBag( ) ; ::oIva:AutoIndex()

   ::oKit := DbfServer( "ARTKIT.DBF", ):NewOpen( "ARTKIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oKit:AddBag( "ARTKIT.CDX" ) ; ::oKit:AddBag( ) ; ::oKit:AutoIndex()

   ::oAlbPrvT := DbfServer( "ALBPROVT.DBF", ):NewOpen( "ALBPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "ALBPROVT.CDX" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

   ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfArtPre_CloseFiles( ) ; local Self AS CLASS TInfArtPre := QSelf() AS CLASS TInfArtPre

   if !Empty( ::oFamilia ) .AND. ::oFamilia:Used()
      ::oFamilia:End()
   end
   if !Empty( ::oIva ) .AND. ::oIva:Used()
      ::oIva:End()
   end
   if !Empty( ::oKit ) .AND. ::oKit:Used()
      ::oKit:End()
   end

   if !Empty( ::oAlbPrvT ) .AND. ::oAlbPrvT:Used()
      ::oAlbPrvT:End()
   end
   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end
   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end
   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end
   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end

   ::oFamilia := nil
   ::oIva     := nil
   ::oKit     := nil
   ::oAlbPrvT := nil
   ::oAlbPrvL := nil
   ::oFacPrvT := nil
   ::oFacPrvL := nil
   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil
   ::oTikCliT := nil
   ::oTikCliL := nil

RETURN ( Self )



static FUNCTION TInfArtPre_lResource( cFld ) ; local Self AS CLASS TInfArtPre := QSelf() AS CLASS TInfArtPre

   local cCmbArt := "Código"

   if !::StdResource( "INF_GEN24" )
      return .F.
   end





   if !::lDefArtInf( 110, 120, 130, 140, 800 )
      return .F.
   end




   ::oCmbArt := TComboBox():ReDefine( 100, { | u | If( PCount()==0, cCmbArt, cCmbArt:= u ) }, { "Código", "Nombre" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oCmbArt",,,,,,, )

   ::CreateFilter( aItmArt(), ::oDbfArt:cAlias )





   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

RETURN .T.






static FUNCTION TInfArtPre_lGenerate( ) ; local Self AS CLASS TInfArtPre := QSelf() AS CLASS TInfArtPre

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader   := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Artículo : " + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes) ) } }

   ::oDbfArt:OrdSetFocus( "Codigo" )

   if !::lAllArt
      cExpHead       := 'codigo >= "' + Rtrim( ::cArtOrg ) + '" .and. codigo <= "' + Rtrim( ::cArtDes ) + '"'
   else
      cExpHead       := ".t."
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oDbfArt:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ), ::oDbfArt:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oDbfArt:OrdKeyCount() )

   ::oDbfArt:GoTop()

   while !::lBreak .AND. !::oDbfArt:Eof()

      ::nTotCom( ::oDbfArt:Codigo )
      ::nTotVta( ::oDbfArt:Codigo )

      ::oDbf:Append()

      ::oDbf:cCodArt := ::oDbfArt:Codigo
      ::oDbf:cCodBar := ::oDbfArt:CodeBar
      ::oDbf:cNomArt := ::oDbfArt:Nombre
      ::oDbf:nIvaArt := nIva( ::oIva:cAlias, ::oDbfArt:TipoIva )
      ::oDbf:cCodFam := ::oDbfArt:Familia
      ::oDbf:nCosArt := nCosto( nil, ::oDbfArt:cAlias, ::oKit:cAlias, .F., ::cDivInf, ::oDbfDiv:cAlias )
      ::oDbf:nBnf1   := ::oDbfArt:Benef1
      ::oDbf:nImp1   := nRetPreArt( 1, ::cDivInf, .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nIva1   := nRetPreArt( 1, ::cDivInf, .T., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nBnf2   := ::oDbfArt:Benef2
      ::oDbf:nImp2   := nRetPreArt( 2, ::cDivInf, .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nIva2   := nRetPreArt( 2, ::cDivInf, .T., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nBnf3   := ::oDbfArt:Benef3
      ::oDbf:nImp3   := nRetPreArt( 3, ::cDivInf, .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nIva3   := nRetPreArt( 3, ::cDivInf, .T., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nBnf4   := ::oDbfArt:Benef4
      ::oDbf:nImp4   := nRetPreArt( 4, ::cDivInf, .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nIva4   := nRetPreArt( 4, ::cDivInf, .T., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nBnf5   := ::oDbfArt:Benef5
      ::oDbf:nImp5   := nRetPreArt( 5, ::cDivInf, .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nIva5   := nRetPreArt( 5, ::cDivInf, .T., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nBnf6   := ::oDbfArt:Benef6
      ::oDbf:nImp6   := nRetPreArt( 6, ::cDivInf, .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )
      ::oDbf:nIva6   := nRetPreArt( 6, ::cDivInf, .T., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oKit:cAlias, ::oIva:cAlias )

      ::oDbf:nUndCom := ::nTotUndCom
      ::oDbf:nImpCom := ::nTotImpCom
      ::oDbf:nMedCom := ::nTotImpCom / ::nTotUndCom

      ::oDbf:nUndVta := ::nTotUndVta
      ::oDbf:nImpVta := ::nTotImpVta
      ::oDbf:nMedVta := ::nTotImpVta / ::nTotUndVta

      ::oDbf:Save()

      ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyNo() )

      ::oDbfArt:Skip()

   end

   ::oDbfArt:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfArt:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfArt:LastRec() )

   ::oDlg:Enable()

   if ::oDbf:RecCount() > 0
      ::oDbf:OrdSetFocus( ::oCmbArt:nAt )
   end

RETURN ( ::oDbf:LastRec() > 0 )




static FUNCTION TInfArtPre_nTotCom( cCodArt ) ; local Self AS CLASS TInfArtPre := QSelf() AS CLASS TInfArtPre



   ::nTotUndCom  := 0
   ::nTotImpCom  := 0



   ::oAlbPrvL:OrdSetFocus( "cRef" )
   ::oAlbPrvL:GoTop()
   ::oAlbPrvL:Seek( cCodArt )

   while ::oAlbPrvL:cRef == cCodArt .AND. !::oAlbPrvL:Eof()

      ::nTotUndCom  += nTotNAlbPrv( ::oAlbPrvL )
      ::nTotImpCom  += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::oAlbPrvL:Skip()

   end



   ::oFacPrvL:OrdSetFocus( "cRef" )
   ::oFacPrvL:GoTop()
   ::oFacPrvL:Seek( cCodArt )

   while ::oFacPrvL:cRef == cCodArt .AND. !::oFacPrvL:Eof()

      ::nTotUndCom  += nTotNFacPrv( ::oFacPrvL )
      ::nTotImpCom  += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::oFacPrvL:Skip()

   end

RETURN ( Self )




static FUNCTION TInfArtPre_nTotVta( cCodArt ) ; local Self AS CLASS TInfArtPre := QSelf() AS CLASS TInfArtPre



   ::nTotUndVta  := 0
   ::nTotImpVta  := 0



   ::oAlbCliL:OrdSetFocus( "cRef" )
   ::oAlbCliL:GoTop()
   ::oAlbCliL:Seek( cCodArt )

   while ::oAlbCliL:cRef == cCodArt .AND. !::oAlbCliL:Eof()

      ::nTotUndVta  += nTotNAlbCli( ::oAlbCliL )
      ::nTotImpVta  += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::oAlbCliL:Skip()

   end



   ::oFacCliL:OrdSetFocus( "cRef" )
   ::oFacCliL:GoTop()
   ::oFacCliL:Seek( cCodArt )

   while ::oFacCliL:cRef == cCodArt .AND. !::oFacCliL:Eof()

      ::nTotUndVta  += nTotNFacCli( ::oFacCliL )
      ::nTotImpVta  += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::oFacCliL:Skip()

   end



   ::oFacRecL:OrdSetFocus( "cRef" )
   ::oFacRecL:GoTop()
   ::oFacRecL:Seek( cCodArt )

   while ::oFacRecL:cRef == cCodArt .AND. !::oFacRecL:Eof()

      ::nTotUndVta  -= nTotNFacRec( ::oFacRecL )
      ::nTotImpVta  -= nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::oFacRecL:Skip()

   end



   ::oTikCliL:OrdSetFocus( "cCbaTil" )
   ::oTikCliL:GoTop()
   ::oTikCliL:Seek( cCodArt )

   while ::oTikCliL:cCbaTil == cCodArt .AND. !::oTikCliL:Eof()

      ::nTotUndVta  += ::oTikCliL:nUntTil
      ::nTotImpVta  += nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 )

      ::oTikCliL:Skip()

   end

   ::oTikCliL:OrdSetFocus( "cComTil" )
   ::oTikCliL:GoTop()
   ::oTikCliL:Seek( cCodArt )

   while ::oTikCliL:cComTil == cCodArt .AND. !::oTikCliL:Eof()

      ::nTotUndVta  += ::oTikCliL:nUntTil
      ::nTotImpVta  += nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 )

      ::oTikCliL:Skip()

   end

RETURN ( Self )
