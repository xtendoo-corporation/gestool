#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinflot.prg"
_HB_CLASS TInfLot ; function TInfLot ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfLot", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfLot() ) ) ;

   _HB_MEMBER { cLotIni } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLotIni"}, .F. )
   _HB_MEMBER { cLotFin } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLotFin"}, .F. )
   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS LOGIC lFactura } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFactura"}, .F. )
   _HB_MEMBER { AS LOGIC lAlbaran } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAlbaran"}, .F. )
   _HB_MEMBER { AS LOGIC lDepAge } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lDepAge"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfLot_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfLot_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfLot_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfLot_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfLot_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AppAlbaran(); oClass:AddMethod( "AppAlbaran", @TInfLot_AppAlbaran(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AppFactura(); oClass:AddMethod( "AppFactura", @TInfLot_AppFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfLot ;



static FUNCTION TInfLot_OpenFiles( ) ; local Self AS CLASS TInfLot := QSelf() AS CLASS TInfLot

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()
   ::oFacCliL:OrdSetFocus( "CREF" )

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()
   ::oAlbCliL:OrdSetFocus( "CREF" )

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfLot_CloseFiles( ) ; local Self AS CLASS TInfLot := QSelf() AS CLASS TInfLot

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oAlbCliT := nil
   ::oAlbCliL := nil

RETURN ( Self )



static FUNCTION TInfLot_Create( ) ; local Self AS CLASS TInfLot := QSelf() AS CLASS TInfLot

   ::AddField( "cNumLot", "C", 12, 0, {|| "@!" },           "Lote",              .F., "Lote",             9, .F. )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },           "Código artículo",         .T., "Código artículo", 14, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },           "Artículo",          .T., "Artículo",        35, .F. )
   ::AddField( "cCodFam", "C", 16, 0, {|| "@!" },           "Família",           .F., "Família",          5, .F. )
   ::AddField( "cCodCli", "C", 18, 0, {|| "@!" },           "Cod. cli.",         .T., "Código cliente",  12, .F. )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },           "Cliente",           .T., "Cliente",         35, .F. )
   ::AddField( "nTotCaj", "N", 16, 6, {|| MasUnd() },       cNombreCajas(),      .F., cNombreCajas(),    12, .T. )
   ::AddField( "nTotUni", "N", 16, 6, {|| MasUnd() },       cNombreUnidades(),   .T., cNombreUnidades(), 12, .T. )
   ::AddField( "nTotImp", "N", 16, 6, {|| ::cPicOut },      "Tot. importe",      .T., "Tot. importe",    12, .T. )
   ::AddField( "cTipDoc", "C", 12, 0, {|| "@!" },           "Tip. doc.",         .T., "Tipo documento",  12, .F. )
   ::AddField( "cNumDoc", "C", 14, 0, {|| "@!" },           "Documento",         .T., "Documento",       12, .F. )
   ::AddField( "dFecDoc", "D",  8, 0, {|| "@!" },           "Fecha",             .T., "Fecha",           12, .F. )

   ::AddTmpIndex( "cNumLot", "cNumLot + cCodArt + cNumDoc + dtos( dFecDoc )" )

   ::AddGroup( {|| ::oDbf:cNumLot }, {|| "Lote : " + ::oDbf:cNumLot }, {|| Space(1) } )

RETURN ( Self )



static FUNCTION TInfLot_lResource( cFld ) ; local Self AS CLASS TInfLot := QSelf() AS CLASS TInfLot

   if !::StdResource( "INF_GEN30" )
      return .F.
   end

   ::oBtnFilter:Disable()





   if !::oDefCliInf( 70, 71, 80, 81, , 920 )
      return .F.
   end

   if !::lDefArtInf( 150, 160, 170, 180, 800 )
      return .F.
   end



   TGetHlp():ReDefine( ( 110 ), { | u | If( PCount()==0, ::cLotIni, ::cLotIni:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



   TGetHlp():ReDefine( ( 120 ), { | u | If( PCount()==0, ::cLotFin, ::cLotFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



   TCheckBox():ReDefine( ( 200 ), { | u | If( PCount()==0, ::lExcCero, ::lExcCero:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 210 ), { | u | If( PCount()==0, ::lExcMov, ::lExcMov:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 220 ), { | u | If( PCount()==0, ::lDepAge, ::lDepAge:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 221 ), { | u | If( PCount()==0, ::lAlbaran, ::lAlbaran:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 222 ), { | u | If( PCount()==0, ::lFactura, ::lFactura:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

RETURN .T.






static FUNCTION TInfLot_lGenerate( ) ; local Self AS CLASS TInfLot := QSelf() AS CLASS TInfLot

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   if ::lAlbaran
      ::AppAlbaran()
   end





   if ::lFactura
      ::AppFactura()
   end

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TInfLot_AppAlbaran( ) ; local Self AS CLASS TInfLot := QSelf() AS CLASS TInfLot





   ::oMtrInf:SetTotal( ::oAlbCliL:Lastrec() )

   ::oAlbCliL:GoTop()

   while !::lBreak .AND. !::oAlbCliL:Eof()












      if ( ::lAllArt .OR. ( ::oAlbCliL:cRef >= ::cArtOrg .AND. ::oAlbCliL:cRef <= ::cArtDes ) )                      .AND. if( !Empty( ::cLotIni ) .AND. !Empty( ::cLotFin ), AllTrim( ::oAlbCliL:cLote ) >= AllTrim( ::cLotIni ) .AND. AllTrim( ::oAlbCliL:cLote ) <= AllTrim( ::cLotFin ), .T. ) .AND. ( ::lAllCli .OR. ( cCliAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT ) >= ::cCliOrg .AND. cCliAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT ) <= ::cCliDes ) ) .AND. dFecAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT ) >= ::dIniInf  .AND. dFecAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT ) <= ::dFinInf  .AND. lChkSer( ::oAlbCliL:cSerAlb, ::aSer )                                                                       .AND. !( ::oAlbCliL:lKitChl )                                                                                     .AND. !( ::oAlbCliL:lTotLin )                                                                                     .AND. !( ::oAlbCliL:lControl )                                                                                    .AND. !( ::lExcCero .AND. ( nTotNAlbCli( ::oAlbCliL:cAlias ) == 0 ) )                                             .AND. !( ::lExcMov  .AND. ( nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut ) == 0  ) )   .AND. ::oAlbCliT:Seek( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb )





         ::oDbf:Append()

         ::oDbf:cNumLot    := ::oAlbCliL:cLote
         ::oDbf:cCodArt    := ::oAlbCliL:cRef
         ::oDbf:cCodCli    := ::oAlbCliT:cCodCli
         ::oDbf:cNomCli    := ::oAlbCliT:cNomCli
         ::oDbf:nTotCaj    := ::oAlbCliL:nCanEnt
         ::oDbf:nTotUni    := nTotNAlbCli( ::oAlbCliL:cAlias )
         ::oDbf:nTotImp    := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
         ::oDbf:cTipDoc    := "Alb. Cli."
         ::oDbf:cNumDoc    := StrTran( ::oAlbCliL:cSerAlb + "/" + Str( ::oAlbCliL:nNumAlb ) + "/" + ::oAlbCliL:cSufAlb, Space( 1 ), "" )

         if ::oDbfArt:Seek( ::oAlbCliL:cRef )
            ::oDbf:cNomArt := ::oDbfArt:Nombre
            ::oDbf:cCodFam := ::oDbfArt:Familia
         end

         ::oDbf:dFecDoc    := dFecAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT )

         ::oDbf:Save()

      end

      ::oMtrInf:AutoInc( ::oAlbCliL:OrdKeyNo() )

      ::oAlbCliL:Skip()

   end

   ::oMtrInf:AutoInc( ::oAlbCliL:LastRec() )

RETURN ( Self )



static FUNCTION TInfLot_AppFactura( ) ; local Self AS CLASS TInfLot := QSelf() AS CLASS TInfLot





   ::oMtrInf:SetTotal( ::oFacCliL:Lastrec() )

   ::oFacCliL:GoTop()

   while !::lBreak .AND. !::oFacCliL:Eof()












      if ( ::lAllArt .OR. ( ::oFacCliL:cRef >= ::cArtOrg .AND. ::oFacCliL:cRef <= ::cArtDes ) )                      .AND. if( !Empty( ::cLotIni ) .AND. !Empty( ::cLotFin ), AllTRim( ::oFacCliL:cLote ) >= AllTrim( ::cLotIni ) .AND. AllTrim( ::oFacCliL:cLote ) <= AllTrim( ::cLotFin ), .T. ) .AND. dFecFacCli( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac, ::oFacCliT ) >= ::dIniInf   .AND. dFecFacCli( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac, ::oFacCliT ) <= ::dFinInf   .AND. ( ::lAllCli .OR. ( cCliFacCli( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac, ::oFacCliT ) >= ::cCliOrg .AND. cCliFacCli( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac, ::oFacCliT ) <= ::cCliDes ) ) .AND. lChkSer( ::oFacCliL:cSerie, ::aSer )                                                                        .AND. !( ::oFacCliL:lKitChl )                                                                                     .AND. !( ::oFacCliL:lTotLin )                                                                                     .AND. !( ::oFacCliL:lControl )                                                                                    .AND. !( ::lExcCero .AND. ( nTotNFacCli( ::oFacCliL:cAlias ) == 0 ) )                                             .AND. !( ::lExcMov  .AND. ( nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut ) == 0  ) )   .AND. ::oFacCliT:Seek( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac )





         ::oDbf:Append()

         ::oDbf:cNumLot    := ::oFacCliL:cLote
         ::oDbf:cCodArt    := ::oFacCliL:cRef
         ::oDbf:cCodCli    := ::oFacCliT:cCodCli
         ::oDbf:cNomCli    := ::oFacCliT:cNomCli
         ::oDbf:nTotCaj    := ::oFacCliL:nCanEnt
         ::oDbf:nTotUni    := nTotNFacCli( ::oFacCliL:cAlias )
         ::oDbf:nTotImp    := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
         ::oDbf:cTipDoc    := "Fac. Cli."
         ::oDbf:cNumDoc    := StrTran( ::oFacCliL:cSerie + "/" + Str( ::oFacCliL:nNumFac ) + "/" + ::oFacCliL:cSufFac, Space( 1 ), "" )
         ::oDbf:dFecDoc    := dFecFacCli( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac, ::oFacCliT )

         if ::oDbfArt:Seek( ::oFacCliL:cRef )
            ::oDbf:cNomArt := ::oDbfArt:Nombre
            ::oDbf:cCodFam := ::oDbfArt:Familia
         end

         ::oDbf:Save()

      end

      ::oMtrInf:AutoInc()

      ::oFacCliL:Skip()

   end

   ::oMtrInf:AutoInc( ::oFacCliL:LastRec() )

RETURN ( Self )
