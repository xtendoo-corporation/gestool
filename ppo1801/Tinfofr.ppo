#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinfofr.prg"
_HB_CLASS TInfOfr ; function TInfOfr ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfOfr", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfOfr() ) ) ;

   _HB_MEMBER { AS OBJECT oDbfOfr } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfOfr"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfArt"}, .F. )
   _HB_MEMBER { AS LOGIC lAllOfr } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllOfr"}, .F. )
   _HB_MEMBER { AS LOGIC lAllArt } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllArt"}, .F. )
   _HB_MEMBER { AS LOGIC lExcObs } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcObs"}, .F. )
   _HB_MEMBER { AS LOGIC lExcNoAct } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcNoAct"}, .F. )
   _HB_MEMBER { AS CHARACTER cOfrDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOfrDes"}, .F. )
   _HB_MEMBER { AS CHARACTER cOfrHas } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cOfrHas"}, .F. )
   _HB_MEMBER { AS OBJECT oOrden } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOrden"}, .F. )
   _HB_MEMBER { AS ARRAY aOrden } ; oClass:AddMultiData( "ARRAY", { "Código", "Nombre" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aOrden"}, .F. )
   _HB_MEMBER { AS ARRAY aTipoOferta } ; oClass:AddMultiData( "ARRAY", { "Artículos", "Familias", "Tipo de artículo", "Categorias", "Temporadas", "Fabricantes" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aTipoOferta"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TInfOfr_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfOfr_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfOfr_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfOfr_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfOfr_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfOfr ;



static FUNCTION TInfOfr_create( ) ; local Self AS CLASS TInfOfr := QSelf() AS CLASS TInfOfr

   ::AddField( "cTipOfe", "C", 30, 0, {|| "@!" },        "Tip. oferta",          .T., "Tip. oferta",           20, .F. )
   ::AddField( "cCodOfe", "C", 18, 0, {|| "@!" },        "Cod. oferta",          .T., "Cod. oferta",           10, .F. )
   ::AddField( "cNomOfe", "C",100, 0, {|| "@!" },        "Descripción",          .T., "Descripción",           50, .F. )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!" },        "Descripción artículo", .F., "Nombre del artículo",   50, .F. )
   ::AddField( "cFecIni", "D",  8, 0, {|| "@!" },        "Fecha Ini.",           .T., "Fecha inicio",          12, .F. )
   ::AddField( "cFecFin", "D",  8, 0, {|| "@!" },        "Fecha Fin.",           .T., "Fecha final",           12, .F. )
   ::AddField( "nPrecio1","N", 16, 6, {|| ::cPicImp },   "Precio 1",             .T., "Precio1",               12, .F. )
   ::AddField( "nPrecio2","N", 16, 6, {|| ::cPicImp },   "Precio 2",             .T., "Precio2",               12, .F. )
   ::AddField( "nPrecio3","N", 16, 6, {|| ::cPicImp },   "Precio 3",             .F., "Precio3",               12, .F. )
   ::AddField( "nPrecio4","N", 16, 6, {|| ::cPicImp },   "Precio 4",             .F., "Precio4",               12, .F. )
   ::AddField( "nPrecio5","N", 16, 6, {|| ::cPicImp },   "Precio 5",             .F., "Precio5",               12, .F. )
   ::AddField( "nPrecio6","N", 16, 6, {|| ::cPicImp },   "Precio 6",             .F., "Precio6",               12, .F. )
   ::AddField( "nMaxVen", "N",  6, 0, {|| MasUnd() },    "Max. Ventas",          .T., "Max. Ventas",           12, .F. )
   ::AddField( "cTipOfr", "C", 18, 0, {|| "@!" },        "X*Y",                  .T., "X*Y",                   18, .F. )

   ::AddTmpIndex( "cCodOfe", "cCodOfe" )
   ::AddTmpIndex( "cNomOfe", "cNomOfe" )

   ::lDefSerInf := .F.
   ::lDefFecInf := .F.

RETURN ( self )



static FUNCTION TInfOfr_OpenFiles( ) ; local Self AS CLASS TInfOfr := QSelf() AS CLASS TInfOfr

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfOfr := DbfServer( "OFERTA.DBF", ):NewOpen( "OFERTA.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfOfr:AddBag( "OFERTA.CDX" ) ; ::oDbfOfr:AddBag( ) ; ::oDbfOfr:AutoIndex()

      ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfOfr_CloseFiles( ) ; local Self AS CLASS TInfOfr := QSelf() AS CLASS TInfOfr

   if !Empty( ::oDbfOfr ) .AND. ::oDbfOfr:Used()
      ::oDbfOfr:End()
   end

   ::oDbfOfr := nil

RETURN ( Self )



static FUNCTION TInfOfr_lResource( cFld ) ; local Self AS CLASS TInfOfr := QSelf() AS CLASS TInfOfr

   local cOrden := "Código"
   local oOfrDes
   local oOfrHas
   local oOfrDesTxt
   local oOfrHasTxt
   local cOfrDesTxt
   local cOfrHasTxt
   local oThis := ::oDbfOfr

   if !::StdResource( "INF_OFR" )
      return .F.
   end

   ::cOfrDes   := dbFirst( ::oDbfOfr, 1 )
   ::cOfrHas   := dbLast(  ::oDbfOfr, 1 )
   cOfrDesTxt  := dbFirst( ::oDbfOfr, 2 )
   cOfrHasTxt  := dbLast(  ::oDbfOfr, 2 )



   TCheckBox():ReDefine( 600, { | u | If( PCount()==0, ::lAllOfr, ::lAllOfr:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 750, { | u | If( PCount()==0, ::lExcObs, ::lExcObs:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 760, { | u | If( PCount()==0, ::lExcNoAct, ::lExcNoAct:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 700, { | u | If( PCount()==0, ::lAllArt, ::lAllArt:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )










   oOfrDes := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cOfrDes, ::cOfrDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     ( !::lAllOfr )},, .F., .F.,,,,, {|Self|( BrwOfe( oOfrDes, oThis:cAlias, oOfrDesTxt ) )}, nil, "LUPA",, )




   oOfrDesTxt := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cOfrDesTxt, cOfrDesTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oOfrHas := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cOfrHas, ::cOfrHas:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     ( !::lAllOfr )},, .F., .F.,,,,, {|Self|( BrwOfe( oOfrHas, oThis:cAlias, oOfrHasTxt ) )}, nil, "LUPA",, )




   oOfrHasTxt := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cOfrHasTxt, cOfrHasTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oOrden := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cOrden, cOrden:= u ) }, ::aOrden, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oOrden",,,,,,, )





   ::oMtrInf:SetTotal( ::oDbfOfr:Lastrec() )

   ::CreateFilter( aItmOfe(), ::oDbfOfr )

RETURN .T.






static FUNCTION TInfOfr_lGenerate( ) ; local Self AS CLASS TInfOfr := QSelf() AS CLASS TInfOfr

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Oferta  : " + if( ::lAllOfr, "Todas", AllTrim( ::cOfrDes ) + " > " + AllTrim( ::cOfrHas ) ) } }

   ::oDbfOfr:OrdSetFocus( "cArtOfe" )

   ::oDbfOfr:GoTop()
   while !::lBreak .AND. !::oDbfOfr:Eof()






      if ( ::lAllOfr .OR.( ::oDbfOfr:cArtOfe >= ::cOfrDes .AND. ::oDbfOfr:cArtOfe <= ::cOfrHas ) )          .AND. ::EvalFilter()                                                                                     .AND. ( !::lExcNoAct .OR. ( ::oDbfOfr:dIniOfe <= Date() .OR. empty( ::oDbfOfr:dIniOfe ) )                .AND. ( ::oDbfOfr:dFinOfe >= Date() .OR. empty( ::oDbfOfr:dFinOfe ) ) )              .AND. ( ::oDbfOfr:nTblOfe > 1.OR. ( !::lExcObs .OR. !oRetFld( ::oDbfOfr:cArtOfe, ::oDbfArt, "lObs" ) ) ) .AND. ( ::oDbfOfr:nTblOfe > 1 .OR. ( ::oDbfOfr:nTblOfe <= 1 .AND. ::oDbfArt:SeekInOrd( ::oDbfOfr:cArtOfe, "Codigo" ) ) )

         ::oDbf:Append()

         ::oDbf:cTipOfe             := ::aTipoOferta[ Max( ::oDbfOfr:nTblOfe, 1 ) ]
         ::oDbf:cCodOfe             := ::oDbfOfr:cArtOfe
         ::oDbf:cNomOfe             := ::oDbfOfr:cDesOfe

         if ::oDbfOfr:nTblOfe <= 1
            ::oDbf:cNomArt          := oRetFld( ::oDbfOfr:cArtOfe, ::oDbfArt, "Nombre" )
         end

         ::oDbf:cFecIni             := ::oDbfOfr:dIniOfe
         ::oDbf:cFecFin             := ::oDbfOfr:dFinOfe

         do case
            case ::oDbfOfr:nTipOfe == 1
               ::oDbf:nPrecio1      := ::oDbfOfr:nPreOfe1
               ::oDbf:nPrecio2      := ::oDbfOfr:nPreOfe2
               ::oDbf:nPrecio3      := ::oDbfOfr:nPreOfe3
               ::oDbf:nPrecio4      := ::oDbfOfr:nPreOfe4
               ::oDbf:nPrecio5      := ::oDbfOfr:nPreOfe5
               ::oDbf:nPrecio6      := ::oDbfOfr:nPreOfe6

            case ::oDbfOfr:nTipOfe == 2
               if ::oDbfArt:Seek( ::oDbfOfr:cArtOfe )
                  ::oDbf:nPrecio1   := ::oDbfArt:pVenta1
                  ::oDbf:nPrecio2   := ::oDbfArt:pVenta2
                  ::oDbf:nPrecio3   := ::oDbfArt:pVenta3
                  ::oDbf:nPrecio4   := ::oDbfArt:pVenta4
                  ::oDbf:nPrecio5   := ::oDbfArt:pVenta5
                  ::oDbf:nPrecio6   := ::oDbfArt:pVenta6
               end

         end

         ::oDbf:nMaxVen             := ::oDbfOfr:nMaxOfe
         ::oDbf:cTipOfr             := Trans( ::oDbfOfr:nUnvOfe, "@E 999" ) + " x" + Trans( ::oDbfOfr:nUncOfe, "@E 999" )

         ::oDbf:Save()

      end

      ::oDbfOfr:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfOfr:Lastrec() )





   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

   if ::lAllArt

      ::oDbfArt:GoTop()

      while !::oDbfArt:Eof()



         if ( ::lAllOfr .OR. ( ::oDbfArt:Codigo >= ::cOfrDes .AND. ::oDbfArt:Codigo <= ::cOfrHas ) ) .AND. !::oDbf:Seek( ::oDbfArt:Codigo ) .AND. ( !::lExcObs .OR. !::oDbfArt:lObs )

            ::oDbf:Append()
            ::oDbf:Blank()

            ::oDbf:cTipOfe       := "Artículos"
            ::oDbf:cCodOfe       := ::oDbfArt:Codigo
            ::oDbf:cNomOfe       := ::oDbfArt:Nombre
            ::oDbf:cNomArt       := ::oDbfArt:Nombre
            ::oDbf:cFecIni       := Ctod( "" )
            ::oDbf:cFecFin       := Ctod( "" )
            ::oDbf:nPrecio1      := ::oDbfArt:pVenta1
            ::oDbf:nPrecio2      := ::oDbfArt:pVenta2
            ::oDbf:nPrecio3      := ::oDbfArt:pVenta3
            ::oDbf:nPrecio4      := ::oDbfArt:pVenta4
            ::oDbf:nPrecio5      := ::oDbfArt:pVenta5
            ::oDbf:nPrecio6      := ::oDbfArt:pVenta6
            ::oDbf:nMaxVen       := 0
            ::oDbf:cTipOfr       := ""

            ::oDbf:Save()

         end

         ::oDbfArt:Skip()

         ::oMtrInf:AutoInc()

      end

      ::oMtrInf:AutoInc( ::oDbfArt:Lastrec() )

   end

   ::oDlg:Enable()





   ::oDbf:OrdSetFocus( ::oOrden:nAt )

RETURN ( ::oDbf:LastRec() > 0 )
