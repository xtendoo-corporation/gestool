#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinfpec.prg"
_HB_CLASS TInfDetPed ; function TInfDetPed ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfDetPed", iif( .T., { @TInfAlm() }, { @HBObject() } ), @TInfDetPed() ) ) ;

   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliL"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Parcilamente", "Entregado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfDetPed_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfDetPed_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfDetPed_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfDetPed_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfDetPed_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfDetPed ;



static FUNCTION TInfDetPed_Create( ) ; local Self AS CLASS TInfDetPed := QSelf() AS CLASS TInfDetPed

   ::CreateFields()

   ::AddTmpIndex ( "CCODALM", "CCODALM + CCODART" )

   ::AddGroup( {|| ::oDbf:cCodAlm },                     {|| "Almacén  : " + Rtrim( ::oDbf:cCodAlm ) + "-" + oRetFld( ::oDbf:cCodAlm, ::oDbfAlm ) },  {||"Total almacén ..."} )
   ::AddGroup( {|| ::oDbf:cCodAlm + ::oDbf:cCodArt },    {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + oRetFld( ::oDbf:cCodArt, ::oDbfArt ) },  {||"Total articulo..."} )

RETURN ( self )


static FUNCTION TInfDetPed_OpenFiles( ) ; local Self AS CLASS TInfDetPed := QSelf() AS CLASS TInfDetPed

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )





   BEGIN SEQUENCE

   ::oPedCliT := TDataCenter():oPedCliT()

   ::oPedCliL := DbfServer( "PEDCLIL.DBF", ):NewOpen( "PEDCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliL:AddBag( "PEDCLIL.CDX" ) ; ::oPedCliL:AddBag( ) ; ::oPedCliL:AutoIndex()

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfDetPed_CloseFiles( ) ; local Self AS CLASS TInfDetPed := QSelf() AS CLASS TInfDetPed

   if !Empty( ::oPedCliT ) .AND. ::oPedCliT:Used()
      ::oPedCliT:End()
   end

   if !Empty( ::oPedCliL ) .AND. ::oPedCliL:Used()
      ::oPedCliL:End()
   end

   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

RETURN ( Self )



static FUNCTION TInfDetPed_lResource( cFld ) ; local Self AS CLASS TInfDetPed := QSelf() AS CLASS TInfDetPed

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN01C" )
      return .F.
   end





   ::oDefAlmInf( 70, 80, 90, 100 )





   ::lDefArtInf( 110, 120, 130, 140 )





   ::oMtrInf:SetTotal( ::oPedCliT:Lastrec() )

   ::oDefExcInf()

   ::oDefResInf()





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

RETURN .T.






static FUNCTION TInfDetPed_lGenerate( ) ; local Self AS CLASS TInfDetPed := QSelf() AS CLASS TInfDetPed

   local bValid   := {|| .T. }
   local lExcCero := .F.

   ::oDlg:Disable()

   ::oDbf:Zap()
   ::oPedCliT:GoTop()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| ::oPedCliT:nEstado == 1 }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oPedCliT:nEstado == 2 }
      case ::oEstado:nAt == 3
         bValid   := {|| ::oPedCliT:nEstado == 3 }
      case ::oEstado:nAt == 4
         bValid   := {|| .T. }
   end








   ::aHeader   := {  {|| "Fecha  : " + Dtoc( Date() ) }, {|| "Periodo: " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Almacen: " + ::cAlmOrg         + " > " + ::cAlmDes }, {|| "Estado : " + ::aEstado[ ::oEstado:nAt ] } }





   WHILE ! ::oPedCliT:Eof()




      IF Eval( bValid )                                        .AND. ::oPedCliT:DFECPED >= ::dIniInf                       .AND. ::oPedCliT:DFECPED <= ::dFinInf                       .AND. lChkSer( ::oPedCliT:CSERPED, ::aSer )





         if ::oPedCliL:Seek( ::oPedCliT:CSERPED + Str( ::oPedCliT:NNUMPED ) + ::oPedCliT:CSUFPED )

            while ::oPedCliT:CSERPED + Str( ::oPedCliT:NNUMPED ) + ::oPedCliT:CSUFPED == ::oPedCliL:CSERPED + Str( ::oPedCliL:NNUMPED ) + ::oPedCliL:CSUFPED .AND. ! ::oPedCliL:eof()





               if ::oPedCliL:CREF >= ::cArtOrg                 .AND. ::oPedCliL:CREF <= ::cArtDes                 .AND. ::oPedCliL:cAlmLin >= ::cAlmOrg              .AND. ::oPedCliL:cAlmLin <= ::cAlmDes              .AND. !( ::lExcCero .AND. ::oPedCliL:NUNICAJA == 0 )

                  ::oDbf:Append()

                  ::oDbf:cCodAlm := ::oPedCliL:cAlmLin
                  ::oDbf:dFecMov := ::oPedCliT:dFecPed

                  ::oDbf:cCodArt := ::oPedCliL:cRef
                  ::oDbf:cNomArt    := RetArticulo( ::oPedCliL:cRef, ::oDbfArt )

                  ::oDbf:nCajEnt := ::oPedCliL:nCanEnt
                  ::oDbf:nUntEnt := nTotNPedCli( ::oPedCliL )
                  ::oDbf:nUnidad := ::oPedCliL:nUniCaja
                  ::oDbf:nPreDiv    := nTotUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTrn    := nTrnUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nPntVer    := nPntUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTot    := nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:cTipDoc := "Pedido"
                  ::oDbf:cDocMov := lTrim ( ::oPedCliL:cSerPed ) + "/" + lTrim ( Str( ::oPedCliL:nNumPed ) ) + "/" + lTrim ( ::oPedCliL:cSufPed )

                  ::AddCliente( ::oPedCliT:cCodCli, ::oPedCliT, .F. )

                  ::oDbf:Save()

               end

               ::oPedCliL:Skip()

            end

         end

      end

      ::oPedCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oPedCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
