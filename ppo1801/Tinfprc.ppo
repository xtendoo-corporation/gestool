#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 13 ".\.\Prg\Tinfprc.prg"
_HB_CLASS TInfDetPre ; function TInfDetPre ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfDetPre", iif( .T., { @TInfAlm() }, { @HBObject() } ), @TInfDetPre() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oPreCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPreCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oPreCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPreCliL"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Aceptado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER create(); oClass:AddMethod( "create", @TInfDetPre_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfDetPre_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfDetPre_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfDetPre_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfDetPre_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfDetPre ;



static FUNCTION TInfDetPre_create( ) ; local Self AS CLASS TInfDetPre := QSelf() AS CLASS TInfDetPre

   ::CreateFields()

   ::AddTmpIndex( "CCODALM", "CCODALM + CCODART" )

   ::AddGroup( {|| ::oDbf:cCodAlm },                     {|| "Almacén  : " + Rtrim( ::oDbf:cCodAlm ) + "-" + Rtrim( oRetFld( ::oDbf:cCodAlm, ::oDbfAlm ) ) }, {||"Total almacén..."} )
   ::AddGroup( {|| ::oDbf:cCodAlm + ::oDbf:cCodArt },    {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + Rtrim( oRetFld( ::oDbf:cCodArt, ::oDbfArt ) ) }, {||""} )

RETURN ( self )






static FUNCTION TInfDetPre_OpenFiles( ) ; local Self AS CLASS TInfDetPre := QSelf() AS CLASS TInfDetPre

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oPreCliT  := TDataCenter():oPreCliT()

      ::oPreCliL := DbfServer( "PRECLIL.DBF", ):NewOpen( "PRECLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPreCliL:AddBag( "PRECLIL.CDX" ) ; ::oPreCliL:AddBag( ) ; ::oPreCliL:AutoIndex()

      ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfDetPre_CloseFiles( ) ; local Self AS CLASS TInfDetPre := QSelf() AS CLASS TInfDetPre

   if !Empty( ::oPreCliT ) .AND. ::oPreCliT:Used()
      ::oPreCliT:End()
   end

   if !Empty( ::oPreCliL ) .AND. ::oPreCliL:Used()
      ::oPreCliL:End()
   end

   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

RETURN ( Self )



static FUNCTION TInfDetPre_lResource( cFld ) ; local Self AS CLASS TInfDetPre := QSelf() AS CLASS TInfDetPre

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN01C" )
      return .F.
   end





   ::oDefAlmInf( 70, 80, 90, 100 )





   ::lDefArtInf( 110, 120, 130, 140 )





   ::oMtrInf:SetTotal( ::oPreCliT:Lastrec() )

   ::oDefExcInf()

   ::oDefResInf()





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

RETURN .T.






static FUNCTION TInfDetPre_lGenerate( ) ; local Self AS CLASS TInfDetPre := QSelf() AS CLASS TInfDetPre

   local bValid   := {|| .T. }
   ::oDlg:Disable()

   ::oDbf:Zap()
   ::oPreCliT:GoTop()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oPreCliT:lEstado }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oPreCliT:lEstado }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end








   ::aHeader      := {  {|| "Fecha  : " + Dtoc( Date() ) }, {|| "Periodo: " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Almacen: " + ::cAlmOrg         + " > " + ::cAlmDes }, {|| "Estado : " + ::aEstado[ ::oEstado:nAt ] } }





   while ! ::oPreCliT:Eof()




      if Eval( bValid )                                                                     .AND. ::oPreCliT:dFecPre >= ::dIniInf                                                    .AND. ::oPreCliT:dFecPre <= ::dFinInf                                                    .AND. lChkSer( ::oPreCliT:cSerPre, ::aSer )





         if ::oPreCliL:Seek( ::oPreCliT:CSERPRE + Str( ::oPreCliT:NNUMPRE ) + ::oPreCliT:CSUFPRE )

            while ::oPreCliT:cSerPre + Str( ::oPreCliT:nNumPre ) + ::oPreCliT:cSufPre == ::oPreCliL:cSerPre + Str( ::oPreCliL:nNumPre ) + ::oPreCliL:cSufPre .AND. ! ::oPreCliL:eof()





               if ::oPreCliL:cRef >= ::cArtOrg                                    .AND. ::oPreCliL:cRef <= ::cArtDes                                    .AND. ::oPreCliL:cAlmLin >= ::cAlmOrg                                 .AND. ::oPreCliL:cAlmLin <= ::cAlmDes                                 .AND. !( ::lExcCero .AND. ::oPreCliL:NUNICAJA == 0 )

                  ::oDbf:Append()

                  ::oDbf:cCodAlm    := ::oPreCliL:cAlmLin
                  ::oDbf:dFecMov    := ::oPreCliT:dFecPre

                  ::oDbf:cCodArt    := ::oPreCliL:cRef
                  ::oDbf:cNomArt    := RetArticulo( ::oPreCliL:cRef, ::oDbfArt )
                  ::oDbf:nCajEnt    := ::oPreCliL:nCanEnt
                  ::oDbf:nUnidad    := ::oPreCliL:NUNICAJA
                  ::oDbf:nUntEnt    := nTotNPreCli( ::oPreCliL )
                  ::oDbf:nPreDiv    := nTotUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTrn    := nTrnUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nPntVer    := nPntUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTot    := nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:cTipDoc := "Presupuesto"
                  ::oDbf:cDocMov    := lTrim ( ::oPreCliL:cSerPre ) + "/" + lTrim ( Str( ::oPreCliL:nNumPre ) ) + "/" +  lTrim( ::oPreCliL:cSufPre )

                  ::AddCliente( ::oPreCliT:cCodCli, ::oPreCliT, .F. )

                  ::oDbf:Save()

               end

               ::oPreCliL:Skip()

            end

         end

      end

      ::oPreCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oPreCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
