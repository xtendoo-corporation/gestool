#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinfpre.prg"
_HB_CLASS TInfPre ; function TInfPre ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfPre", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfPre() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oSitua } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSitua"}, .F. )
   _HB_MEMBER { AS CHARACTER cSitua } ; oClass:AddMultiData( "CHARACTER", "Todas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cSitua"}, .F. )
   _HB_MEMBER { AS OBJECT oPreCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPreCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oPreCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPreCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfObr } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfObr"}, .F. )

   _HB_MEMBER { AS OBJECT oOrden } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOrden"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Aceptado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aSitua } ; oClass:AddMultiData( "ARRAY", { "Todas", "En curso", "En estudio", "Finalizado", "A revisar", "Aceptado", "Rechazado", "Espera", "Enviado", "Pdte. envio" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSitua"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfPre_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfPre_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfPre_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfPre_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfPre_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ImprimeInicioGrupo(); oClass:AddMethod( "ImprimeInicioGrupo", @TInfPre_ImprimeInicioGrupo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfPre ;



static FUNCTION TInfPre_Create( ) ; local Self AS CLASS TInfPre := QSelf() AS CLASS TInfPre

   ::AddField( "cNumDoc",   "C", 14, 0, {|| "@!" },        "Doc",            .F., "Documento",            8, .F. )
   ::AddField( "dFecDoc",   "D",  8, 0, {|| "@!" },        "Fecha",          .F., "Fecha del documento", 10, .F. )
   ::AddField( "cCodCli",   "C", 12, 0, {|| "@!" },        "Cliente",        .F., "Cod. cliente",         8, .F. )
   ::AddField( "cNomCli",   "C", 50, 0, {|| "@!" },        "Nombre",         .F., "Nom. cliente",         8, .F. )
   ::AddField( "cCodObr",   "C", 12, 0, {|| "@!" },        "Dirección",           .F., "Cod. dirección",            8, .F. )
   ::AddField( "cEstado",   "C",  9, 0, {|| "@!" },        "Estado",         .F., "Estado del doc.",     10, .F. )
   ::AddField( "cSituac",   "C", 20, 0, {|| "@!" },        "Situac.",        .F., "Situación del doc.",  10, .F. )
   ::AddField( "cRetPor",   "C",100, 0, {|| "@!" },        "Retirado por",   .F., "Retirado por",        70, .F. )
   ::AddField( "cCodArt",   "C", 18, 0, {|| "@!" },        "Cod.",           .T., "Cod. artículo",       10, .F. )
   ::AddField( "cNomArt",   "C",100, 0, {|| "@!" },        "Artículo",       .T., "Nom. artículo",       40, .F. )
   ::FldPropiedades()
   ::AddField( "nCajas",    "N", 16, 6, {|| ::cPicOut },   cNombreCajas(),   .F., cNombreCajas(),        12, .F. )
   ::AddField( "nUnidades", "N", 16, 6, {|| ::cPicOut },   cNombreUnidades(),.F., cNombreUnidades(),     12, .F. )
   ::AddField( "nUniCaj",   "N", 16, 6, {|| ::cPicOut },   "Tot. " + cNombreUnidades(), .T., "Total " + cNombreUnidades(), 12, .F. )
   ::AddField( "nPreArt",   "N", 16, 6, {|| ::cPicOut },   "Precio",         .T., "Precio artículo",     12, .F. )
   ::AddField( "nBase",     "N", 16, 6, {|| ::cPicOut },   "Base",           .T., "Base",                12, .T. )
   ::AddField( "nIva",      "N", 16, 6, {|| ::cPicOut },   cImp(),            .T., cImp(),                 12, .T. )
   ::AddField( "nTotal",    "N", 16, 6, {|| ::cPicOut },   "Total",          .T., "Total",               12, .T. )

   ::AddTmpIndex( "cNumDoc", "cNumDoc" )
   ::AddTmpIndex( "dFecDoc", "dToc( dFecDoc )" )
   ::AddTmpIndex( "cCodCli", "cCodCli" )
   ::AddTmpIndex( "cNomCli", "cNomCli" )





   ::AddGroup( {|| ::oDbf:cNumDoc }, {|| if( !Empty( ::oDbf:cCodObr), " Obra: " + Rtrim( ::oDbf:cCodObr ) + " - " + AllTrim( retObras( ::oDbf:cCodCli, ::oDbf:cCodObr, ::oDbfObr:cAlias ) ), "" ) + if( !Empty( ::oDbf:cRetPor), " Contacto: " + Rtrim( ::oDbf:cRetPor ), "" ) +  " Estado:" + RTrim( ::oDbf:cEstado ) +  if( !Empty( ::oDbf:cSituac ), " Situación:" + RTrim( ::oDbf:cSituac ), "" ) }, {|| Space(1) }  )









   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes  : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) }, {|| "Estado    : " + ::aEstado[ ::oEstado:nAt ] }, {|| "Situación : " + ::aSitua[ ::oSitua:nAt ] } }

   ::bStartGroup  := {| oGroup | ::ImprimeInicioGrupo( oGroup ) }


RETURN ( self )



static FUNCTION TInfPre_OpenFiles( ) ; local Self AS CLASS TInfPre := QSelf() AS CLASS TInfPre

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oPreCliT  := TDataCenter():oPreCliT()

   ::oPreCliL := DbfServer( "PRECLIL.DBF", ):NewOpen( "PRECLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPreCliL:AddBag( "PRECLIL.CDX" ) ; ::oPreCliL:AddBag( ) ; ::oPreCliL:AutoIndex()

   ::oDbfObr := DbfServer( "OBRAST.DBF", ):NewOpen( "OBRAST.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfObr:AddBag( "OBRAST.CDX" ) ; ::oDbfObr:AddBag( ) ; ::oDbfObr:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfPre_CloseFiles( ) ; local Self AS CLASS TInfPre := QSelf() AS CLASS TInfPre

   if !Empty( ::oPreCliT ) .AND. ::oPreCliT:Used()
      ::oPreCliT:End()
   end
   if !Empty( ::oPreCliL ) .AND. ::oPreCliL:Used()
      ::oPreCliL:End()
   end
   if !Empty( ::oDbfObr ) .AND. ::oDbfObr:Used()
      ::oDbfObr:End()
   end

   ::oDbfObr  := nil
   ::oPreCliT := nil
   ::oPreCliL := nil

RETURN ( Self )



static FUNCTION TInfPre_lResource( cFld ) ; local Self AS CLASS TInfPre := QSelf() AS CLASS TInfPre

   local cOrden   := "Número"
   local cEstado  := "Todos"

   if !::StdResource( "INFPRESUPUESTOSB" )
      return .F.
   end





   if !::oDefCliInf( 70, 71, 80, 81, , 910 )
      return .F.
   end





   ::oOrden := TComboBox():ReDefine( 217, { | u | If( PCount()==0, cOrden, cOrden:= u ) }, { "Número", "Fecha", "Código cliente", "Nombre cliente" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oOrden",,,,,,, )





   ::oSitua := TComboBox():ReDefine( 219, { | u | If( PCount()==0, ::cSitua, ::cSitua:= u ) }, ::aSitua, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oSitua",,,,,,, )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmPreCli(), ::oPreCliT:cAlias )





   ::oMtrInf:SetTotal( ::oPreCliT:Lastrec() )

RETURN .T.






static FUNCTION TInfPre_lGenerate( ) ; local Self AS CLASS TInfPre := QSelf() AS CLASS TInfPre

   local cExpresion  := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   ::oPreCliT:OrdSetFocus( "dFecPre" )

   do case
      case ::oEstado:nAt == 1
         cExpresion  := '!lEstado .and. dFecPre >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecPre <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpresion  := 'lEstado .and. dFecPre >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecPre <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpresion  := 'dFecPre >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecPre <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end





   cExpresion        += " .and. !Empty( cCodCli )"

   if !::lAllCli
      cExpresion     += " .and. cCodCli >= '" + Alltrim( ::cCliOrg ) + "' .and. cCodCli <= '" + Alltrim( ::cCliDes ) + "'"
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpresion     += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oPreCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oPreCliT:cFile ), ::oPreCliT:OrdKey(), ( cExpresion ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oPreCliT:OrdKeyCount() )

   ::oPreCliT:GoTop()

   while !::lBreak .AND. !::oPreCliT:Eof()

      if lChkSer( ::oPreCliT:cSerPre, ::aSer )

         if ::oPreCliL:Seek( ::oPreCliT:cSerPre + Str( ::oPreCliT:nNumPre ) + ::oPreCliT:cSufPre )

            while ::oPreCliT:cSerPre + Str( ::oPreCliT:nNumPre ) + ::oPreCliT:cSufPre == ::oPreCliL:cSerPre + Str( ::oPreCliL:nNumPre ) + ::oPreCliL:cSufPre .AND. ! ::oPreCliL:eof()

               if ::cSitua == "Todas" .OR. Rtrim( ::oPreCliT:cSituac ) == ::cSitua

                  ::oDbf:Append()

                  ::oDbf:cNumDoc     := AllTrim( ::oPreCliT:cSerPre ) + "/" + AllTrim( Str( ::oPreCliT:nNumPre ) ) + "/" + AllTrim( ::oPreCliT:cSufPre )
                  ::oDbf:dFecDoc     := ::oPreCliT:dFecPre
                  ::oDbf:cCodCli     := ::oPreCliT:cCodCli
                  ::oDbf:cNomCli     := ::oPreCliT:cNomCli
                  ::oDbf:cCodObr     := ::oPreCliT:cCodObr
                  ::oDbf:cRetPor     := ::oPreCliT:cRetPor
                  if !::oPreCliT:lEstado
                     ::oDbf:cEstado  := "Pendiente"
                  else
                     ::oDbf:cEstado  := "Aceptado"
                  end
                  ::oDbf:cSituac     := ::oPreCliT:cSituac
                  ::oDbf:cCodArt     := ::oPreCliL:cRef
                  ::oDbf:cNomArt     := ::oPreCliL:cDetalle
                  ::oDbf:cCodPr1     := ::oPreCliL:cCodPr1
                  ::oDbf:cNomPr1     := retProp( ::oPreCliL:cCodPr1 )
                  ::oDbf:cCodPr2     := ::oPreCliL:cCodPr2
                  ::oDbf:cNomPr2     := retProp( ::oPreCliL:cCodPr2 )
                  ::oDbf:cValPr1     := ::oPreCliL:cValPr1
                  ::oDbf:cNomVl1     := retValProp( ::oPreCliL:cCodPr1 + ::oPreCliL:cValPr1 )
                  ::oDbf:cValPr2     := ::oPreCliL:cValPr2
                  ::oDbf:cNomVl2     := retValProp( ::oPreCliL:cCodPr2 + ::oPreCliL:cValPr2 )
                  ::oDbf:nCajas      := ::oPreCliL:nCanPre
                  ::oDbf:nUnidades   := ::oPreCliL:nUniCaja
                  ::oDbf:nUniCaj     := nTotNPreCli( ::oPreCliL )
                  ::oDbf:nPreArt     := nTotUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nBase       := nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nIva        := nIvaLPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotal      := ::oDbf:nBase + ::oDbf:nIva

                  ::oDbf:Save()

               end

               ::oPreCliL:Skip()

            end

         end

      end

      ::oPreCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oPreCliT:LastRec() )

   ::oPreCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oPreCliT:cFile ) )

   ::oDbf:OrdSetFocus( ::oOrden:nAt )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TInfPre_ImprimeInicioGrupo( oGroup ) ; local Self AS CLASS TInfPre := QSelf() AS CLASS TInfPre

   local cText    := "Presupuesto: " + Rtrim( ::oDbf:cNumDoc )+ " - " + Dtoc( ::oDbf:dFecDoc )

   cText          += " Cliente:" + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( ::oDbf:cNomCli )

   ::oReport:StartLine()





   ::oReport:oDevice:Say(  ::oReport:nRow , ::oReport:nMargin , cText , ::oReport:aFont[ Eval( oGroup:bHeadFont ) ] , nil , ::oReport:aClrText[ Eval( oGroup:bHeadFont ) ], 2 )
   ::oReport:EndLine()

Return nil
