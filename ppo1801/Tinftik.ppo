#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinftik.prg"
_HB_CLASS TInfDetTik ; function TInfDetTik ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfDetTik", iif( .T., { @TInfAlm() }, { @HBObject() } ), @TInfDetTik() ) ) ;

   _HB_MEMBER { AS NUMERIC nEstado } ; oClass:AddMultiData( "NUMERIC", 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oTikeT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikeT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikeL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikeL"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfDetTik_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfDetTik_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfDetTik_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfDetTik_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfDetTik_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfDetTik ;



static FUNCTION TInfDetTik_Create( ) ; local Self AS CLASS TInfDetTik := QSelf() AS CLASS TInfDetTik

   ::CreateFields()

   ::AddTmpIndex ( "CCODALM", "CCODALM + CCODART" )
   ::AddGroup( {|| ::oDbf:cCodAlm },                     {|| "Almacén  : " + Rtrim( ::oDbf:cCodAlm ) + "-" + oRetFld( ::oDbf:cCodAlm, ::oDbfAlm ) },  {||"Total almacén ..."} )
   ::AddGroup( {|| ::oDbf:cCodAlm + ::oDbf:cCodArt },    {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + oRetFld( ::oDbf:cCodArt, ::oDbfArt ) },  {||"Total articulo..."} )


RETURN ( self )



static FUNCTION TInfDetTik_OpenFiles( ) ; local Self AS CLASS TInfDetTik := QSelf() AS CLASS TInfDetTik

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )





   BEGIN SEQUENCE

   ::oTikeT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikeT:AddBag( "TIKET.CDX" ) ; ::oTikeT:AddBag( ) ; ::oTikeT:AutoIndex()

   ::oTikeL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikeL:AddBag( "TIKEL.CDX" ) ; ::oTikeL:AddBag( ) ; ::oTikeL:AutoIndex()

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfDetTik_CloseFiles( ) ; local Self AS CLASS TInfDetTik := QSelf() AS CLASS TInfDetTik

   if !Empty( ::oTikeT ) .AND. ::oTikeT:Used()
      ::oTikeT:End()
   end
   if !Empty( ::oTikeL ) .AND. ::oTikeL:Used()
      ::oTikeL:End()
   end

   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

RETURN ( Self )



static FUNCTION TInfDetTik_lResource( cFld ) ; local Self AS CLASS TInfDetTik := QSelf() AS CLASS TInfDetTik

   if !::StdResource( "INF_GEN01A" )
      return .F.
   end





   ::oDefAlmInf( 70, 80, 90, 100 )





   ::lDefArtInf( 110, 120, 130, 140 )





   ::oMtrInf:SetTotal( ::oTikeT:Lastrec() )

   ::oDefExcInf()

   ::oDefResInf()





RETURN .T.






static FUNCTION TInfDetTik_lGenerate( ) ; local Self AS CLASS TInfDetTik := QSelf() AS CLASS TInfDetTik

   ::oDlg:Disable()

   ::oDbf:Zap()
   ::oTikeT:GoTop()





   WHILE ! ::oTikeT:Eof()



      if ( ::oTikeT:cTipTik == "1" .OR. ::oTikeT:cTipTik == "4" ) .AND. ::oTikeT:DFECTIK >= ::dIniInf                            .AND. ::oTikeT:DFECTIK <= ::dFinInf

         if ::oTikeL:Seek( ::oTikeT:CSERTIK +  ::oTikeT:CNUMTIK + ::oTikeT:CSUFTIK )





            while ::oTikeT:CSERTIK + ::oTikeT:CNUMTIK + ::oTikeT:CSUFTIK == ::oTikeL:CSERTIL + ::oTikeL:CNUMTIL + ::oTikeL:CSUFTIL .AND. !::oTikeL:eof()






               if !Empty( ::oTikeL:cCbaTil )                      .AND. ::oTikeL:cCbaTil >= ::cArtOrg                   .AND. ::oTikeL:cCbaTil <= ::cArtDes                   .AND. ::oTikeL:CALMLIN >= ::cAlmOrg                   .AND. ::oTikeL:CALMLIN <= ::cAlmDes                   .AND. !( ::lExcCero .AND. ::oTikeL:nPvpTil == 0 )




                  ::AddTik()

               end










               if !Empty( ::oTikeL:cComTil )                      .AND. ::oTikeL:cComTil >= ::cArtOrg                   .AND. ::oTikeL:cComTil <= ::cArtDes                   .AND. ::oTikeL:CALMLIN >= ::cAlmOrg                   .AND. ::oTikeL:CALMLIN <= ::cAlmDes                   .AND. !( ::lExcCero .AND. ::oTikeL:nPvpTil == 0 )

                  ::AddTik()

               end

               ::oTikeL:Skip()

            end

         end

      end

      ::oTikeT:Skip()

      ::oMtrInf:AutoInc( ::oTikeT:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oTikeT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
