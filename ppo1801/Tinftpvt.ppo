#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tinftpvt.prg"
_HB_CLASS TInfTpvT ; function TInfTpvT ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfTpvT", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfTpvT() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )


   _HB_MEMBER create(); oClass:AddMethod( "create", @TInfTpvT_create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfTpvT_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfTpvT_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfTpvT_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfTpvT_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfTpvT ;



static FUNCTION TInfTpvT_create( ) ; local Self AS CLASS TInfTpvT := QSelf() AS CLASS TInfTpvT

   ::AddField( "cNumDoc",   "C", 14, 0, {|| "@!" },        "Doc",            .F., "Documento",            8, .F. )
   ::AddField( "dFecDoc",   "D",  8, 0, {|| "@!" },        "Fecha",          .F., "Fecha del documento", 10, .F. )
   ::AddField( "cCodCli",   "C", 12, 0, {|| "@!" },        "Cliente",        .F., "Cod. cliente",         8, .F. )
   ::AddField( "cNomCli",   "C", 50, 0, {|| "@!" },        "Nombre",         .F., "Nom. cliente",         8, .F. )
   ::AddField( "cCodObr",   "C", 12, 0, {|| "@!" },        "Dirección",           .F., "Cod. dirección",            8, .F. )
   ::AddField( "cCodArt",   "C", 18, 0, {|| "@!" },        "Cod.",           .T., "Cod. artículo",       10, .F. )
   ::AddField( "cNomArt",   "C",100, 0, {|| "@!" },        "Artículo",       .T., "Nom. artículo",       40, .F. )
   ::FldPropiedades()
   ::AddField( "nUniCaj",   "N", 16, 6, {|| ::cPicOut },   cNombreUnidades(),.T., cNombreUnidades(),     12, .F. )
   ::AddField( "nPreArt",   "N", 16, 6, {|| ::cPicOut },   "Precio",         .T., "Precio artículo",     12, .F. )
   ::AddField( "nBase",     "N", 16, 6, {|| ::cPicOut },   "Base",           .T., "Base",                12, .T. )
   ::AddField( "nIva",      "N", 16, 6, {|| ::cPicOut },   cImp(),            .T., cImp(),                 12, .T. )
   ::AddField( "nTotal",    "N", 16, 6, {|| ::cPicOut },   "Total",          .T., "Total",               12, .T. )

   ::AddTmpIndex( "cNumDoc", "cNumDoc" )

   ::AddGroup( {|| ::oDbf:cNumDoc }, {|| "Tiket: " + Rtrim( ::oDbf:cNumDoc )+ " - " + Dtoc( ::oDbf:dFecDoc ) + " Cliente:" + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( ::oDbf:cNomCli ) + if( !Empty( ::oDbf:cCodObr), " Obra:" + Rtrim( ::oDbf:cCodObr ) , " " ) }, {||Space(1)} )

RETURN ( self )



static FUNCTION TInfTpvT_OpenFiles( ) ; local Self AS CLASS TInfTpvT := QSelf() AS CLASS TInfTpvT

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfTpvT_CloseFiles( ) ; local Self AS CLASS TInfTpvT := QSelf() AS CLASS TInfTpvT

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end
   if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end

   ::oTikCliT := nil
   ::oTikCliL := nil

RETURN ( Self )



static FUNCTION TInfTpvT_lResource( cFld ) ; local Self AS CLASS TInfTpvT := QSelf() AS CLASS TInfTpvT

   if !::StdResource( "INFTIKET" )
      return .F.
   end





   if !::oDefCliInf( 70, 71, 80, 81, , 910 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oTikCliT:Lastrec() )

   ::CreateFilter( aItmTik(), ::oTikCliT:cAlias )

RETURN .T.






static FUNCTION TInfTpvT_lGenerate( ) ; local Self AS CLASS TInfTpvT := QSelf() AS CLASS TInfTpvT

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) } }

   ::oTikCliT:OrdSetFocus( "dFecTik" )

   cExpHead          := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead       += ' .and. cCliTik >= "' + Rtrim( ::cCliOrg ) + '" .and. cCliTik <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oTikCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )

   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer )

         if ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

            while ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik == ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil .AND. ! ::oTikCliL:eof()

               ::oDbf:Append()

               ::oDbf:cNumDoc        := AllTrim( ::oTikCliT:cSerTik ) + "/" + AllTrim( ::oTikCliT:cNumTik ) + "/" + AllTrim( ::oTikCliT:cSufTik )
               ::oDbf:dFecDoc        := ::oTikCliT:dFecTik
               ::oDbf:cCodCli        := ::oTikCliT:cCliTik
               ::oDbf:cNomCli        := ::oTikCliT:cNomTik
               ::oDbf:cCodObr        := ::oTikCliT:cCodObr
               if !Empty( ::oTikCliL:cCbaTil )
                  ::oDbf:cCodArt     := ::oTikCliL:cCbaTil
                  ::oDbf:cNomArt     := RetArticulo( ::oTikCliL:cCbaTil, ::oDbfArt )
                  ::oDbf:nPreArt     := nImpUTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, 1 )
                  ::oDbf:nBase       := nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 )
                  ::oDbf:nIva        := nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 1 )
               else
                  ::oDbf:cCodArt     := ::oTikCliL:cComTil
                  ::oDbf:cNomArt     := RetArticulo( ::oTikCliL:cComTil, ::oDbfArt )
                  ::oDbf:nPreArt     := nImpUTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, 2 )
                  ::oDbf:nBase       := nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 )
                  ::oDbf:nIva        := nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 2 )
               end

               ::oDbf:cCodPr1        := ::oTikCliL:cCodPr1
               ::oDbf:cNomPr1        := retProp( ::oTikCliL:cCodPr1 )
               ::oDbf:cCodPr2        := ::oTikCliL:cCodPr2
               ::oDbf:cNomPr2        := retProp( ::oTikCliL:cCodPr2 )
               ::oDbf:cValPr1        := ::oTikCliL:cValPr1
               ::oDbf:cNomVl1        := retValProp( ::oTikCliL:cCodPr1 + ::oTikCliL:cValPr1 )
               ::oDbf:cValPr2        := ::oTikCliL:cValPr2
               ::oDbf:cNomVl2        := retValProp( ::oTikCliL:cCodPr2 + ::oTikCliL:cValPr2 )

               if ::oTikCliT:cTipTik == "4"
                  ::oDbf:nUniCaj     := - ::oTikCliL:nUntTil
               else
                  ::oDbf:nUniCaj     := ::oTikCliL:nUntTil
               end

               ::oDbf:nTotal         := ::oDbf:nBase + ::oDbf:nIva

               ::oDbf:Save()

               ::oTikCliL:Skip()

            end

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oTikCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oTikCliT:cFile ) )

   ::oMtrInf:AutoInc( ::oTikCliT:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
