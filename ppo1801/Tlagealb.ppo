#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tlagealb.prg"
_HB_CLASS TdlAgeAlb ; function TdlAgeAlb ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TdlAgeAlb", iif( .T., { @TInfGen() }, { @HBObject() } ), @TdlAgeAlb() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lTvta } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTvta"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { cTipVen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipVen"}, .F. )
   _HB_MEMBER { cTipVen2 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipVen2"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "No Facturado", "Facturado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TdlAgeAlb_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TdlAgeAlb_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TdlAgeAlb_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TdlAgeAlb_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TdlAgeAlb_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TdlAgeAlb ;



static FUNCTION TdlAgeAlb_Create( ) ; local Self AS CLASS TdlAgeAlb := QSelf() AS CLASS TdlAgeAlb

   ::AddField( "cCodAge", "C",  3, 0,  {|| "@!" },         "Cod. age.",                 .F., "Código agente",               3 )
   ::AddField( "cNomAge", "C", 50, 0,  {|| "@!" },         "Agente",                    .F., "Agente",                     25 )
   ::AddField( "cRefArt", "C", 18, 0,  {|| "@!" },         "Código artículo",                 .T., "Código artículo",            10 )
   ::AddField( "cDesArt", "C", 50, 0,  {|| "@!" },         "Artículo",                  .T., "Artículo",                   25 )
   ::FldCliente()
   ::AddField( "cDocMov", "C", 14, 0,  {|| "@!" },         "N/Albarán",                 .F., "Nuestro albarán",            14 )
   ::AddField( "cCsuAlb", "C", 12, 0,  {|| "@!" },         "S/Albarán",                 .T., "Su albarán Nº",              12 )
   ::AddField( "dFecMov", "D",  8, 0,  {|| "@!" },         "Fecha",                     .T., "Fecha",                       8 )
   ::AddField( "nUndCaj", "N", 13, 6,  {|| MasUnd() },     "Caj.",                      .T., "Cajas",                       8 )
   ::AddField( "nUndArt", "N", 13, 6,  {|| MasUnd() },     "Und.",                      .T., "Unidades",                    8 )
   ::AddField( "nCajUnd", "N", 13, 6,  {|| MasUnd() },     "Tot. und.",                 .F., "Total unidades",             10 )
   ::AddField( "nBasCom", "N", 13, 6,  {|| ::cPicOut },    "Base",                      .T., "Base comisión",              10 )
   ::AddField( "nComAge", "N",  4, 1,  {|| ::cPicOut },    "%Com",                      .T., "Porcentaje de comisión",     10 )
   ::AddField( "nTotCom", "N", 13, 6,  {|| ::cPicOut },    "Comisión",                  .T., "Comisión",                   10 )
   ::AddField( "cTipVen", "C", 20, 0,  {|| "@!" },         "Venta",                     .F., "Tipo de venta",              20 )

   ::AddTmpIndex( "cCodAge", "cCodAge" )

RETURN ( self )



static FUNCTION TdlAgeAlb_OpenFiles( ) ; local Self AS CLASS TdlAgeAlb := QSelf() AS CLASS TdlAgeAlb

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TdlAgeAlb_CloseFiles( ) ; local Self AS CLASS TdlAgeAlb := QSelf() AS CLASS TdlAgeAlb

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
   ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
   ::oAlbCliL:End()
   end
   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
   ::oDbfCli:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oDbfCli  := nil

RETURN ( Self )



static FUNCTION TdlAgeAlb_lResource( cFld ) ; local Self AS CLASS TdlAgeAlb := QSelf() AS CLASS TdlAgeAlb

   local oTipVen
   local oTipVen2
   local cEstado     := "Todos"
   local This        := Self

   if !::StdResource( "INF_GEN17RA" )
      return .F.
   end





   if !::oDefAgeInf( 70, 80, 90, 100, 930 )
      return .F.
   end





   if !::lDefArtInf( 110, 120, 130, 140, 800 )
      return .F.
   end

   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDefExcInf( 210 )
   ::oDefExcImp( 211 )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmAlbCli(), ::oAlbCliT:cAlias )

RETURN .T.






static FUNCTION TdlAgeAlb_lGenerate( ) ; local Self AS CLASS TdlAgeAlb := QSelf() AS CLASS TdlAgeAlb

   local cExpHead := ""
   local cExpLine := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()








   ::aHeader      := {{|| "Fecha         : "   + Dtoc( Date() ) }, {|| "Periodo       : "   + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Agentes       : "   + if( ::lAgeAll, "Todos", AllTrim( ::cAgeOrg ) + " > " + AllTrim( ::cAgeDes ) ) }, {|| "Artículos     : "   + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg ) + " > " + AllTrim( ::cArtDes ) ) }, {|| if ( ::lTvta, (if (!Empty( ::cTipVen ), "Tipo de Venta : " + ::cTipVen2, "Tipo de Venta : Todos" ) ), "Tipo de Venta: Ninguno" ) }, {|| "Estado        : " + ::aEstado[ ::oEstado:nAt ] }, {|| if( ::lTvta, "Aplicando comportamiento de los tipos de venta", "" ) } }


   ::oAlbCliT:OrdSetFocus( "dFecAlb" )
   ::oAlbCliL:OrdSetFocus( "nNumAlb" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := 'nFacturado < 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'nFacturado == 3 .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !::lAgeAll
      cExpHead       += ' .and. cCodAge >= "' + Rtrim( ::cAgeOrg ) + '" .and. cCodAge <= "' + Rtrim( ::cAgeDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oAlbCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::cArtOrg + '" .and. cRef <= "' + ::cArtDes + '"'
   end

   ::oAlbCliL:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ), ::oAlbCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oAlbCliT:GoTop()

   while !::lBreak .AND. !::oAlbCliT:Eof()

      if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )

         if ::oAlbCliL:Seek( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb )

            while ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb == ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb .AND. ! ::oAlbCliL:eof()


               if !( ::lExcCero .AND. nTotNAlbCli( ::oAlbCliL:cAlias ) == 0 ) .AND. !( ::lExcImp .AND. nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )





                  if ::lTvta

                     if  ( if (!Empty( ::cTipVen ), ::oAlbCliL:cTipMov == ::cTipVen, .T. ) )

                        ::oDbf:Append()
                        ::oDbf:Blank()

                        ::oDbf:cCodAge := ::oAlbCliT:cCodAge
                        ::oDbf:cCodCli := ::oAlbCliT:cCodCli
                        ::oDbf:cNomCli := ::oAlbCliT:cNomCli
                        ::oDbf:dFecMov := ::oAlbCliT:dFecAlb
                        ::oDbf:cCsuAlb := ::oAlbCliT:cCodSuAlb
                        ::oDbf:cDocMov := ::oAlbCliT:cSerAlb + "/" + AllTrim( Str( ::oAlbCliT:nNumAlb ) ) + "/" + ::oAlbCliT:cSufAlb
                        ::oDbf:cRefArt := ::oAlbCliL:cRef
                        ::oDbf:cDesArt := ::oAlbCliL:cDetalle

                        ::AddCliente( ::oAlbCliT:CCODCLI, ::oAlbCliT, .F. )

                        if ( ::oDbfAge:Seek (::oAlbCliT:cCodAge) )
                           ::oDbf:cNomAge := ::oDbfAge:cApeAge + ", " + ::oDbfAge:cNbrAge
                        end

                        ::oDbf:Save()

                    end





                  else

                     ::oDbf:Append()

                     ::oDbf:cCodAge := ::oAlbCliT:cCodAge
                     ::oDbf:cCodCli := ::oAlbCliT:cCodCli
                     ::oDbf:cNomCli := ::oAlbCliT:cNomCli
                     ::oDbf:dFecMov := ::oAlbCliT:dFecAlb
                     ::oDbf:cCsuAlb := ::oAlbCliT:cCodSuAlb
                     ::oDbf:cDocMov := ::oAlbCliT:cSerAlb + "/" + AllTrim( Str( ::oAlbCliT:nNumAlb ) ) + "/" + ::oAlbCliT:cSufAlb
                     ::oDbf:cRefArt := ::oAlbCliL:cRef
                     ::oDbf:cDesArt := ::oAlbCliL:cDetalle

                     ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )

                     if ( ::oDbfAge:Seek (::oAlbCliT:cCodAge) )
                        ::oDbf:cNomAge := ::oDbfAge:cApeAge + ", " + ::oDbfAge:cNbrAge
                     end

                     ::oDbf:nUndCaj := ::oAlbCliL:nCanEnt
                     ::oDbf:nCajUnd := NotCaja( ::oAlbCliL:nCanEnt )* ::oAlbCliL:nUniCaja
                     ::oDbf:nUndArt := ::oAlbCliL:nUniCaja
                     ::oDbf:nComAge := ( ::oAlbCliL:nComAge )
                     ::oDbf:nBasCom := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
                     ::oDbf:nTotCom := nComLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )

                     ::oDbf:Save()

                  end

               end

               ::oAlbCliL:Skip()

            end

         end

         end

         ::oAlbCliT:Skip()

         ::oMtrInf:AutoInc()

   end

   ::oAlbCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliT:cFile ) )

   ::oAlbCliL:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oAlbCliL:cFile ) )

   ::oMtrInf:AutoInc( ::oAlbCliT:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
