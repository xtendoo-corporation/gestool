#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Tlisrut.prg"
_HB_CLASS TLisRutInf ; function TLisRutInf ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLisRutInf", iif( .T., { @TInfGen() }, { @HBObject() } ), @TLisRutInf() ) ) ;

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TLisRutInf_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TLisRutInf_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TLisRutInf_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TLisRutInf_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TLisRutInf_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER oDefIniInf() ; oClass:AddVirtual( "oDefIniInf" )
   _HB_MEMBER oDefFinInf() ; oClass:AddVirtual( "oDefFinInf" )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLisRutInf ;



static FUNCTION TLisRutInf_Create( ) ; local Self AS CLASS TLisRutInf := QSelf() AS CLASS TLisRutInf

   ::AddField ( "cCodRut", "C",  4, 0, {|| "@!" },    "Cod.",                      .F., "Código ruta",                 4 )
   ::AddField ( "cNomRut", "C", 50, 0, {|| "@!" },    "Ruta",                      .F., "Nombre de la ruta",          25 )
   ::AddField ( "cCodCli", "C", 12, 0, {|| "@!" },    "Cod. Cli.",                 .T., "Código de cliente",           8 )
   ::AddField ( "cNomCli", "C", 50, 0, {|| "@!" },    "Cliente",                   .T., "Nombre de cliente",          30 )
   ::AddField ( "cNifCli", "C", 15, 0, {|| "@!" },    "Nif",                       .F., "Nif",                        15 )
   ::AddField ( "cDomCli", "C", 35, 0, {|| "@!" },    "Domicilio",                 .T., "Domicilio",                  25 )
   ::AddField ( "cPobCli", "C", 25, 0, {|| "@!" },    "Población",                 .T., "Población",                  25 )
   ::AddField ( "cProCli", "C", 20, 0, {|| "@!" },    "Provincia",                 .T., "Provincia",                  20 )
   ::AddField ( "cCdpCli", "C",  7, 0, {|| "@!" },    "CP",                        .T., "Cod. Postal",                 7 )
   ::AddField ( "cTlfCli", "C", 12, 0, {|| "@!" },    "Tlf",                       .F., "Teléfono",                   12 )
   ::AddField ( "cFaxCli", "C", 12, 0, {|| "@!" },    "Fax",                       .F., "Fax",                        12 )
   ::AddField ( "cMovCli", "C", 12, 0, {|| "@!" },    "Móvil",                     .F., "Móvil",                      12 )

   ::AddTmpIndex ( "CCODRUT", "CCODRUT + CCODCLI" )

   ::AddGroup( {|| ::oDbf:cCodRut }, {|| "Ruta  : " + ::oDbf:cCodRut + "-" + ::oDbf:cNomRut }, {|| Space(1) } )

RETURN ( self )



static FUNCTION TLisRutInf_OpenFiles( ) ; local Self AS CLASS TLisRutInf := QSelf() AS CLASS TLisRutInf

RETURN ( Self )



static FUNCTION TLisRutInf_CloseFiles( ) ; local Self AS CLASS TLisRutInf := QSelf() AS CLASS TLisRutInf

RETURN ( Self )



static FUNCTION TLisRutInf_lResource( cFld ) ; local Self AS CLASS TLisRutInf := QSelf() AS CLASS TLisRutInf

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

   if !::StdResource( "INF_GEN27" )
      return .F.
   end





   if !::oDefRutInf( 70, 80, 90, 100, 900 )
      return .F.
   end





   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oDbfCli:Lastrec() )

   ::CreateFilter( aItmCli(), ::oDbfCli:cAlias )

RETURN .T.






static FUNCTION TLisRutInf_lGenerate( ) ; local Self AS CLASS TLisRutInf := QSelf() AS CLASS TLisRutInf

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()



   ::aHeader   := {{|| "Fecha    : " + Dtoc( Date() ) }, {|| "Ruta     : " + if( ::lAllRut, "Todas", AllTrim( ::cRutOrg ) + " > " + AllTrim( ::cRutDes ) ) }, {|| "Clientes : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) } }

   ::oDbfCli:OrdSetFocus( "COD" )

   if !::lAllCli
      cExpHead       := 'Cod >= "' + Rtrim( ::cCliOrg ) + '" .and. Cod <= "' + Rtrim( ::cCliDes ) + '"'
   else
      cExpHead       := ".t."
   end

   if !::lAllRut
      cExpHead       += ' .and. cCodRut >= "' + Rtrim( ::cRutOrg ) + '" .and. cCodRut <= "' + Rtrim( ::cRutDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oDbfCli:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ), ::oDbfCli:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oDbfCli:OrdKeyCount() )

   ::oDbfCli:GoTop()

   while !::lBreak .AND. !::oDbfCli:Eof()

      ::oDbf:Append()

      ::oDbf:cCodRut := ::oDbfCli:cCodRut
      ::oDbf:cNomRut := oRetFld( ::oDbfCli:cCodRut, ::oDbfRut )
      ::oDbf:cCodCli := ::oDbfCli:Cod
      ::oDbf:cNomCli := ::oDbfCli:Titulo
      ::oDbf:cNifCli := ::oDbfCli:Nif
      ::oDbf:cDomCli := ::oDbfCli:Domicilio
      ::oDbf:cPobCli := ::oDbfCli:Poblacion
      ::oDbf:cProCli := ::oDbfCli:Provincia
      ::oDbf:cCdpCli := ::oDbfCli:CodPostal
      ::oDbf:cTlfCli := ::oDbfCli:Telefono
      ::oDbf:cFaxCli := ::oDbfCli:Fax
      ::oDbf:cMovCli := ::oDbfCli:Movil

      ::oDbf:Save()

      ::oDbfCli:Skip()

      ::oMtrInf:AutoInc( ::oDbfCli:OrdKeyNo() )

   end

   ::oDbfCli:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfCli:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
