#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 19 ".\.\Prg\Tloitem.prg"
_HB_CLASS TLOItem ; function TLOItem ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TLOItem", iif( .F., { }, { @HBObject() } ), @TLOItem() ) ) ;

      _HB_MEMBER { oLabel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLabel"}, .F. )
      _HB_MEMBER { aData, aPicture } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aData", "aPicture"}, .F. )
      _HB_MEMBER { oFont } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFont"}, .F. )
      _HB_MEMBER { nColor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nColor"}, .F. )
      _HB_MEMBER { nWidth, nDataHeight, nCol, nSize, nPad, nPen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nWidth", "nDataHeight", "nCol", "nSize", "nPad", "nPen"}, .F. )
      _HB_MEMBER { lShadow, lGrid } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lShadow", "lGrid"}, .F. )
      _HB_MEMBER { lEan13, lHorz, lBanner } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lEan13", "lHorz", "lBanner"}, .F. )


      _HB_MEMBER New( nCol, aData, nSize, aPicture, oFont, cFmt, lShadow, lGrid, lEan13, lHorz, lBanner, nColor, oLabel) AS CLASS TLOItem; oClass:AddMethod( "New", @TLOItem_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

     _HB_MEMBER Stabilize(); oClass:AddMethod( "Stabilize", @TLOItem_Stabilize(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER SayData( nRow, nCol, nLine); oClass:AddMethod( "SayData", @TLOItem_SayData(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TLOItem ;




static FUNCTION TLOItem_New( nCol,    aData, nSize, aPicture,    oFont, nPen, cFmt, lShadow, lGrid, lEan13, lHorz, lBanner, nColor, oLabel ) ; local Self AS CLASS TLOItem := QSelf() AS CLASS TLOItem














      If( aData == nil, aData := {{|| ""} }, ) ; If( nSize == nil, nSize := 0, ); If( aPicture == nil, aPicture := {""}, ); If( nCol == nil, nCol := 0, ); If( oFont == nil, oFont := TFont():New( "Ms Sans Serif", 6, 12, .F. ), ); If( nPen == nil, nPen := 1, ); If( lShadow == nil, lShadow := .F., ); If( lGrid == nil, lGrid := .F., ); If( nColor == nil, nColor := 0, ); If( lEan13 == nil, lEan13 := .F., ); If( lHorz == nil, lHorz := .T., ); If( lBanner == nil, lBanner := .T., ); If( cFmt == nil, cFmt := iif(Valtype(Eval(aData[1]))=="N", "RIGHT", "LEFT"), );

     ::aData      = aData
     ::nSize      = nSize
      ::aPicture   = aPicture
      ::oFont         = oFont
     ::lShadow    = lShadow
     ::lGrid      = lGrid
     ::nPen       = nPen
      ::oLabel     = oLabel
      ::nCol       = nCol
      ::nWidth     = 0
      ::lEan13     = lEan13
      ::lHorz      = lHorz
      ::lBanner    = lBanner
      ::nColor     = nColor

      IF cFmt == "LEFT"
             ::nPad = 1
      ELSEIF cFmt == "RIGHT"
             ::nPad = 2
      ELSEIF cFmt == "CENTER" .OR. cFmt == "CENTERED"
             ::nPad = 3
      ELSE
             ::nPad = 1
      ENDIF

     while len(::aPicture) < len(::aData)
             Aadd(::aPicture, "" )
     ENDDO

RETURN Self



static FUNCTION TLOItem_Stabilize( ) ; local Self AS CLASS TLOItem := QSelf() AS CLASS TLOItem

      ::nDataHeight  := ::oLabel:oDevice:GetTextHeight("B", ::oFont )






      IF ::nDataHeight > ::oLabel:nLblHeight
             ::nDataHeight := ::oLabel:nLblHeight
      end






















          ::nWidth := ::oLabel:nLblWidth



RETURN Self





































static FUNCTION TLOItem_SayData( nRow, nCol, nLine ) ; local Self AS CLASS TLOItem := QSelf() AS CLASS TLOItem

     LOCAL cText
     LOCAL nWidth
     LOCAL cLine
     LOCAL nPos      := 0



     If( nRow == nil, nRow := 0, ) ; If( nCol == nil, nCol := 0, ); If( nLine == nil, nLine := 1, );

     IF nLine > len(::aData)
          RETU NIL
      ENDIF

      IF ::nCol <> 0
             nCol += ::nCol
      end

     cText  := Transform(eval(::aData[nLine]),::aPicture[nLine])

     while len( cText ) <> 0

         nWidth         := ::oLabel:oDevice:GetTextWidth(cText,::oFont)
         cLine          := cText

         while nWidth > ::nWidth
            nPos        := Rat( " ", cLine )
            if nPos <> 0
               cLine    := SubStr( cLine, 1, nPos - 1 )
               nWidth   := ::oLabel:oDevice:GetTextWidth( cLine, ::oFont )
            else
               exit
            end
         end

         if nPos <> 0
            ::oLabel:oDevice:Say( nRow, nCol, cLine, ::oFont, ::nWidth, ::nColor, , ::nPad - 1 )
            ::oLabel:NewLine()
            cText       := SubStr( cText, nPos + 1 )
            nRow        += ::nDataHeight
            nPos        := 0
         else
            ::oLabel:oDevice:Say( nRow, nCol, cText, ::oFont, ::nWidth, ::nColor, , ::nPad - 1 )
            cText       := ""
         end

     end

RETURN NIL
