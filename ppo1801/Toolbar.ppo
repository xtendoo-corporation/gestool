#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 34 ".\.\Prg\Toolbar.prg"
_HB_CLASS TToolBar ; function TToolBar ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TToolBar", iif( .T., { @TControl() }, { @HBObject() } ), @TToolBar() ) ) ;

   _HB_MEMBER { nBtnWidth, nBtnHeight } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nBtnWidth", "nBtnHeight"}, .F. )
   _HB_MEMBER { aButtons } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aButtons"}, .F. )
   _HB_MEMBER { oImageList } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oImageList"}, .F. )

   _HB_MEMBER New( oWnd, nBtnWidth, nBtnHeight, oImageList) AS CLASS TToolBar; oClass:AddMethod( "New", @TToolBar_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TToolBar_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddButton( bAction, cToolTip, cText, bWhen); oClass:AddMethod( "AddButton", @TToolBar_AddButton(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddSeparator(); oClass:AddInline( "AddSeparator", {|Self | ( ( Self ) ), TBAddSeparator( ::hWnd ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Command( nWParam, nLParam); oClass:AddMethod( "Command", @TToolBar_Command(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


      _HB_MEMBER Display(); oClass:AddInline( "Display", {|Self | ( ( Self ) ), ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER EnableButton(); oClass:AddInline( "EnableButton", {|Self, nButton, lOnOff | ( ( Self ) ), TBEnableButton( ::hWnd, nButton, lOnOff ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AutoSize(); oClass:AddInline( "AutoSize", {|Self | ( ( Self ) ), SendMessage( ::hWnd, 1057, 0, 0 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

      _HB_MEMBER EraseBkGnd(); oClass:AddInline( "EraseBkGnd", {|Self, hDC | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


   _HB_MEMBER GotFocus(); oClass:AddInline( "GotFocus", {|Self | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER RButtonDown() ; oClass:AddVirtual( "RButtonDown" )

   _HB_MEMBER MouseMove() ; oClass:AddVirtual( "MouseMove" )

   _HB_MEMBER Notify( nIdCtrl, nPtrNMHDR); oClass:AddMethod( "Notify", @TToolBar_Notify(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


      _HB_MEMBER Paint(); oClass:AddMethod( "Paint", @TToolBar_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TToolBar ;



static FUNCTION TToolBar_New( oWnd, nBtnWidth, nBtnHeight, oImageList ) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   If( oWnd == nil, oWnd := GetWndDefault(), ) ; If( nBtnWidth == nil, nBtnWidth := 33, ); If( nBtnHeight == nil, nBtnHeight := 33, );

   ::oWnd         = oWnd
   ::nId          = ::GetNewId()
   ::nBtnWidth    = nBtnWidth
   ::nBtnHeight   = nBtnHeight
   ::aButtons     = {}
   ::oImageList   = oImageList
   ::lDrag        = .F.

   if Upper( oWnd:ClassName() ) <> "TREBAR"
      oWnd:oTop   = Self
   endif

   InitCommonControls()

   if ! Empty( oWnd:hWnd )
      ::Create()
      ::nHeight   = nBtnHeight + 3
      oWnd:AddControl( Self )
      if oImageList <> nil
         SendMessage( ::hWnd, 1072, 0, oImageList:hImageList )
      endif
   else
      oWnd:DefControl( Self )
   endif

return Self



static FUNCTION TToolBar_AddButton( bAction, nBitmap, cToolTip, cText, bWhen ) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   AAdd( ::aButtons, { bAction, cToolTip } )

   If( nBitmap == nil, nBitmap := Len( ::aButtons ), ) ;

   TBAddButton( ::hWnd, Len( ::aButtons ), nBitmap, cText )

   if bWhen <> nil .AND. ! Eval( bWhen )
      ::EnableButton( Len( ::aButtons ), .F. )
   endif

return nil



static FUNCTION TToolBar_Create( ) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local nTransStyle := If( ! Upper( ::oWnd:ClassName() ) $ "TWINDOW,TMDIFRAME,TMDICHILD", 32768, 0 )







   nTransStyle       := nOr(  nTransStyle, 512, 2048, 256, 64, 4, 32 )

   ::hWnd            := CreateTlBar( ::oWnd:hWnd, ::nId, ::nBtnWidth, ::nBtnHeight )

   if ::hWnd == 0
      WndCreateError( Self )
   else
      nTransStyle    := nOr( SendMessage( ::hWnd, 1081 ), nTransStyle )

      SendMessage( ::hWnd, 1080, 0, nTransStyle )

      ::Link()
   endif

return nil



static FUNCTION TToolBar_Command( nWParam, nLParam ) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local nNotifyCode, nID, hWndCtl
   local bAction






      nNotifyCode = nHiWord( nWParam )
      nID         = nLoWord( nWParam )
      hWndCtl     = nLParam


   if ( nID <= len( ::aButtons ) ) .AND. ( bAction := ::aButtons[ nID, 1 ] ) <> nil
      Eval( bAction, Self )
   endif

return nil



static FUNCTION TToolBar_Notify( nIdCtrl, nPtrNMHDR ) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local nCode := GetNMHDRCode( nPtrNMHDR )



   do case
      case nCode == -530
           TTNSetText( nPtrNMHDR, ::aButtons[ GetNMHDRIdFrom( nPtrNMHDR ) ][ 2 ] )
   endcase

return nil





static FUNCTION TToolBar_Paint( ) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local aInfo := ::DispBegin()

   if ::oBrush <> nil
      FillRect( ::hDC, GetClientRect( ::hWnd ), ::oBrush:hBrush )
   else
      CallWindowProc( ::nOldProc, ::hWnd, 20, ::hDC, 0 )
   endif
   CallWindowProc( ::nOldProc, ::hWnd, 15, ::hDC, 0 )

   ::DispEnd( aInfo )

return 1
