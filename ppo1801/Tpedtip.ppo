#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tpedtip.prg"
_HB_CLASS TInfPedTip ; function TInfPedTip ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfPedTip", iif( .T., { @TInfTip() }, { @HBObject() } ), @TInfPedTip() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oPedCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oPedCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oArt"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Parcialmente", "Pendiente y parc.", "Entregado", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfPedTip_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfPedTip_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfPedTip_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( cFld); oClass:AddMethod( "Resource", @TInfPedTip_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfPedTip_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfPedTip ;



static FUNCTION TInfPedTip_Create( ) ; local Self AS CLASS TInfPedTip := QSelf() AS CLASS TInfPedTip

   ::DetCreateFields()

   ::AddTmpIndex( "cCodTip", "cCodTip + cCodArt" )
   ::AddGroup( {|| ::oDbf:cCodTip }, {|| "Tipo art.  : " + Rtrim( ::oDbf:cCodTip ) + "-" + oRetFld( ::oArt:cCodTip, ::oTipArt:oDbf, "cNomTip" ) }, {||"Total tipo artículo..."}, , ::lSalto )
   ::AddGroup( {|| ::oDbf:cCodTip + ::oDbf:cCodArt },    {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + Rtrim( oRetFld( ::oDbf:cCodArt, ::oArt ) ) }, {||""} )


RETURN ( Self )



static FUNCTION TInfPedTip_OpenFiles( ) ; local Self AS CLASS TInfPedTip := QSelf() AS CLASS TInfPedTip

   ::oPedCliT := TDataCenter():oPedCliT()

   ::oPedCliL := DbfServer( "PedCliL.DBF", ):NewOpen( "PedCliL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliL:AddBag( "PedCliL.CDX" ) ; ::oPedCliL:AddBag( ) ; ::oPedCliL:AutoIndex()

   ::oArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oArt:AddBag( "ARTICULO.CDX" ) ; ::oArt:AddBag( ) ; ::oArt:AutoIndex()

RETURN ( Self )



static FUNCTION TInfPedTip_CloseFiles( ) ; local Self AS CLASS TInfPedTip := QSelf() AS CLASS TInfPedTip

   ::oPedCliT:End()
   ::oPedCliL:End()
   ::oArt:End()

RETURN ( Self )



static FUNCTION TInfPedTip_Resource( cFld ) ; local Self AS CLASS TInfPedTip := QSelf() AS CLASS TInfPedTip

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN11C" )
      return .F.
   end



   ::oDefTipInf( 110, 120, 130, 140 )





   ::lDefArtInf( 70, 80, 90, 100 )



   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

   ::oDefExcInf( 204 )

   ::oDefSalInf( 201 )



   TCheckBox():ReDefine( ( 203 ), { | u | If( PCount()==0, ::lExcMov, ::lExcMov:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

RETURN ( Self )






static FUNCTION TInfPedTip_lGenerate( ) ; local Self AS CLASS TInfPedTip := QSelf() AS CLASS TInfPedTip

   local bValid   := {|| .T. }
   local cCodTip

   ::oDlg:Disable()

   ::oDbf:Zap()

  do case
      case ::oEstado:nAt == 1
         bValid   := {|| ::oPedCliT:nEstado == 1 }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oPedCliT:nEstado == 2 }
      case ::oEstado:nAt == 3
         bValid   := {|| ::oPedCliT:nEstado == 1 .OR. ::oPedCliT:nEstado == 2  }
      case ::oEstado:nAt == 4
         bValid   := {|| ::oPedCliT:nEstado == 3 }
      case ::oEstado:nAt == 5
         bValid   := {|| .T. }
   end




   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf ) }, {|| "Tipos   : " + ::cTipOrg           + " > " + ::cTipDes         }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] } }

   ::oPedCliT:GoTop()

   WHILE !::oPedCliT:Eof()






      if Eval ( bValid )                                                         .AND. ::oPedCliT:dFecPed >= ::dIniInf                                         .AND. ::oPedCliT:dFecPed <= ::dFinInf                                         .AND. lChkSer( ::oPedCliT:cSerPed, ::aSer )                                   .AND. !( ::lExcCero .AND. nTotNPedCli( ::oPedCliL:cAlias ) == 0 )             .AND. !( ::lExcMov )

         if ::oPedCliL:Seek( ::oPedCliT:cSerPed + Str( ::oPedCliT:nNumPed ) + ::oPedCliT:cSufPed )

            while ::oPedCliT:cSerPed + Str( ::oPedCliT:nNumPed ) + ::oPedCliT:cSufPed == ::oPedCliL:cSerPed + Str( ::oPedCliL:nNumPed ) + ::oPedCliL:cSufPed

               cCodTip := oRetFld( ::oPedCliL:cRef, ::oArt , "cCodTip")




               if cCodTip            >= ::cTipOrg                                 .AND. cCodTip            <= ::cTipDes                                 .AND. ::oPedCliL:cRef    >= ::cArtOrg                                 .AND. ::oPedCliL:cRef    <= ::cArtDes





                  ::oDbf:Append()

                  ::AddCliente      ( ::oPedCliT:cCodCli, ::oPedCliT, .F. )

                  ::oDbf:cCodTip    := cCodTip
                  ::oDbf:cNomTip    := oRetFld( cCodTip, ::oTipArt:oDbf, "cNomTip" )
                  ::oDbf:cCodArt    := ::oPedCliL:cRef
                  ::oDbf:cNomArt    := ::oPedCliL:cDetalle
                  ::oDbf:nNumCaj    := ::oPedCliL:nCanPed
                  ::oDbf:nUniDad    := ::oPedCliL:NUNICAJA
                  ::oDbf:nNumUni    := nTotNPedCli( ::oPedCliL )
                  ::oDbf:nImpArt    := nTotUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTrn    := nTrnUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nPntVer    := nPntUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
                  ::oDbf:nImpTot    := nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:nIvaArt    := Round( ::oDbf:nImpArt * ::oPedCliL:nIva / 100, ::nDerOut )

                  ::oDbf:cDocMov    := lTrim( ::oPedCliL:CSERPED ) + "/" + lTrim ( Str( ::oPedCliL:NNUMPED ) ) + "/" + lTrim ( ::oPedCliL:CSUFPED )
                  ::oDbf:dFecMov    := ::oPedCliT:DFECPED

                  ::oDbf:Save()

               end

               ::oPedCliL:Skip()

            end

         end

      end

      ::oPedCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oPedCliT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
