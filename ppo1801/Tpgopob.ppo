#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tpgopob.prg"
_HB_CLASS TInfPgoPob ; function TInfPgoPob ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfPgoPob", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfPgoPob() ) ) ;

   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIva"}, .F. )
   _HB_MEMBER { oEstado } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendientes", "Cobrados", "Descontados", "Todos" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS CHARACTER cEstado } ; oClass:AddMultiData( "CHARACTER", "Pendientes", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfPgoPob_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfPgoPob_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfPgoPob_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfPgoPob_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfPgoPob_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lIsValid(); oClass:AddMethod( "lIsValid", @TInfPgoPob_lIsValid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfPgoPob ;



static FUNCTION TInfPgoPob_Create( ) ; local Self AS CLASS TInfPgoPob := QSelf() AS CLASS TInfPgoPob

   ::AddField( "cNumDoc", "C", 15, 0,  {|| "" },           "Doc.",                      .T., "Documento",                  12 )
   ::AddField( "cCodCli", "C", 12, 0,  {|| "@!" },         "Cód. cli.",                 .T., "Cod. Cliente",                8 )
   ::AddField( "cNomCli", "C", 50, 0,  {|| "@!" },         "Cliente",                   .T., "Nom. Cliente",               40 )
   ::AddField( "cNifCli", "C", 15, 0,  {|| "@!" },         "Nif",                       .F., "Nif",                        12 )
   ::AddField( "cDomCli", "C", 35, 0,  {|| "@!" },         "Domicilio",                 .F., "Domicilio",                  20 )
   ::AddField( "cPobCli", "C", 25, 0,  {|| "@!" },         "Población",                 .F., "Población",                  25 )
   ::AddField( "cProCli", "C", 20, 0,  {|| "@!" },         "Provincia",                 .F., "Provincia",                  20 )
   ::AddField( "cCdpCli", "C",  7, 0,  {|| "@!" },         "Cod. Postal",               .F., "Cod. Postal",                 7 )
   ::AddField( "cTlfCli", "C", 12, 0,  {|| "@!" },         "Teléfono",                  .F., "Teléfono",                   12 )
   ::AddField( "dFecDoc", "D",  8, 0,  {|| "" },           "Emisión",                   .T., "Fecha",                      10 )
   ::AddField( "cForPag", "C",  2, 0,  {|| "" },           "Pgo.",                      .F., "Forma pago",                  3 )
   ::AddField( "cNomPgo", "C", 40, 0,  {|| "@!" },         "Forma de pago",             .F., "Nombre de formas de pago"  , 40, .F.)
   ::AddField( "dFecVen", "D",  8, 0,  {|| "" },           "Vcto.",                     .T., "Fecha vencimiento",          10 )
   ::AddField( "dEstFac", "C",  2, 0,  {|| "" },           "Estado",                    .F., "Estado factura",              2 )
   ::AddField( "nTotRec", "N", 16, 6,  {|| ::cPicOut },    "Total",                     .T., "Total",                      10 )
   ::AddField( "cBanco",  "C", 50, 0,  {|| "@!" },         "Banco",                     .F., "Nombre del banco",           20 )
   ::AddField( "cCuenta", "C", 30, 0,  {|| "@!" },         "Cuenta",                    .F., "Cuenta bancaria",            35 )

   ::AddTmpIndex( "cForPag", "cForPag" )
   ::AddTmpIndex( "cPobCli", "cForPag + cPobCli" )

   ::AddGroup( {|| ::oDbf:cPobCli }, {|| "Población : " + Rtrim( ::oDbf:cPobCli )}, {||"Total población..."} )
   ::AddGroup( {|| ::oDbf:cPobCli + ::oDbf:cForPag }, {|| "Forma de pago : " + Rtrim( ::oDbf:cForPag ) + "-" + Rtrim( ::oDbf:cNomPgo ) }, {||"Total formas de pago..."} )
   ::AddGroup( {|| ::oDbf:cPobCli + ::oDbf:cForPag + ::oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) } )

RETURN ( Self )



static FUNCTION TInfPgoPob_OpenFiles( ) ; local Self AS CLASS TInfPgoPob := QSelf() AS CLASS TInfPgoPob

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oIva:AddBag( "TIVA.CDX" ) ; ::oIva:AddBag( ) ; ::oIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TInfPgoPob_CloseFiles( ) ; local Self AS CLASS TInfPgoPob := QSelf() AS CLASS TInfPgoPob

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oIva ) .AND. ::oIva:Used()
      ::oIva:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacCliP := nil
   ::oIva     := nil

RETURN ( Self )



static FUNCTION TInfPgoPob_lResource( cFld ) ; local Self AS CLASS TInfPgoPob := QSelf() AS CLASS TInfPgoPob

   if !::StdResource( "INF_GEN25B" )
      return .F.
   end

   if !::oDefFpgInf( 1450, 1451, 1460, 1461, 920 )
      return .F.
   end

   if !::oDefCliInf( 1470, 1471, 1480, 1481, , 600 )
      return .F.
   end




   ::oEstado := TComboBox():ReDefine( 1490, { | u | If( PCount()==0, ::cEstado, ::cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::oMtrInf:SetTotal( ::oFacCliP:Lastrec() )

   ::CreateFilter( aItmRecCli(), ::oFacCliP:cAlias )

RETURN .T.






static FUNCTION TInfPgoPob_lGenerate( ) ; local Self AS CLASS TInfPgoPob := QSelf() AS CLASS TInfPgoPob

   local cCodFpg
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()





   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "F. pago  : " + Rtrim ( ::cFpgDes ) + " > " + Rtrim ( ::cFpgHas ) }, {|| "Clientes : " + Rtrim ( ::cCliOrg ) + " > " + Rtrim ( ::cCliDes ) }, {|| "Estado   : " + ::cEstado } }

   ::oFacCliP:OrdSetFocus( "dPreCob" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oFacCliP:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ), ::oFacCliP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oFacCliP:GoTop()

   while !::lBreak .AND. !::oFacCliP:Eof()




      cCodFpg  := cPgoFacCli( ::oFacCliP:cSerie + Str( ::oFacCliP:nNumFac ) + ::oFacCliP:cSufFac, ::oFacCliT )






      if ::lIsValid()                                                                                 .AND. ::oFacCliP:dPreCob >= ::dIniInf                                                              .AND. ::oFacCliP:dPreCob <= ::dFinInf                                                              .AND. ( ::lAllFpg .OR. ( cCodFpg >= ::cFpgDes .AND. cCodFpg <= ::cFpgHas ) )                       .AND. ( ::lAllCli .OR. ( ::oFacClip:cCodCli >= ::cCliOrg .AND. ::oFacClip:cCodCli <= ::cCliDes ) ) .AND. lChkSer( ::oFacCliP:cSerie, ::aSer )

         ::oDbf:Append()

         ::oDbf:cCodCli := ::oFacCliP:cCodCli
         if ::oDbfCli:Seek( ::oFacCliP:cCodCli )
            ::oDbf:cNomCli := ::oDbfCli:Titulo
            ::oDbf:cNifCli := ::oDbfCli:Nif
            ::oDbf:cDomCli := ::oDbfCli:Domicilio
            ::oDbf:cPobCli := ::oDbfCli:Poblacion
            ::oDbf:cProCli := ::oDbfCli:Provincia
            ::oDbf:cCdpCli := ::oDbfCli:CodPostal
            ::oDbf:cTlfCli := ::oDbfCli:Telefono
         end

         ::oDbf:dFecDoc    := ::oFacCliP:dPreCob
         ::oDbf:cForPag    := cCodFpg
         ::oDbf:cNomPgo    := cNbrFPago( cCodFpg, ::oDbfFpg )
         ::oDbf:cNumDoc    := lTrim ( ::oFacCliP:cSerie ) + "/" + lTrim ( Str( ::oFacCliP:nNumFac ) ) + "/" + lTrim ( ::oFacCliP:cSufFac ) + "/" + lTrim ( Str( ::oFacCliP:nNumRec ) )
         ::oDbf:nTotRec    := nTotRecCli( ::oFacCliP, ::oDbfDiv )
         ::oDbf:dFecVen    := ::oFacClip:dFecVto
         ::oDbf:cBanco     := ::oFacCliP:cBncCli
         ::oDbf:cCuenta    := ::oFacCliP:cEntCli + "-" + ::oFacCliP:cSucCli + "-" + ::oFacCliP:cDigCli + "-" + ::oFacCliP:cCtaCli

         ::oDbf:Save()

      end

      ::oFacCliP:Skip()

      ::oMtrInf:AutoInc( ::oFacCliP:OrdKeyNo() )

   end

   ::oFacCliP:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliP:cFile ) )

   ::oMtrInf:AutoInc( ::oFacCliP:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )


static FUNCTION TInfPgoPob_lIsValid( ) ; local Self AS CLASS TInfPgoPob := QSelf() AS CLASS TInfPgoPob

   local lRet  := .T.

   do case
      case ::oEstado:nAt == 1
         lRet  := !::oFacCliP:lCobrado
      case ::oEstado:nAt == 2
         lRet  := ::oFacCliP:lCobrado
      case ::oEstado:nAt == 3
         lRet  := ::oFacCliP:lRecDto
      case ::oEstado:nAt == 4
         lRet  := .T.
   end

RETURN ( lRet )
