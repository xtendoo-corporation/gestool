#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\TpvMenuOrdenes.prg"
_HB_CLASS TpvMenuOrdenes ; function TpvMenuOrdenes ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TpvMenuOrdenes", iif( .T., { @TDet() }, { @HBObject() } ), @TpvMenuOrdenes() ) ) ;

   _HB_MEMBER { oBrwArticulosOrden } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oBrwArticulosOrden"}, .F. )

   _HB_MEMBER { cScopeValue } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cScopeValue"}, .F. )

   _HB_MEMBER { oGetOrdenComanda } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oGetOrdenComanda"}, .F. )

   _HB_MEMBER DefineFiles(); oClass:AddMethod( "DefineFiles", @TpvMenuOrdenes_DefineFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles( lExclusive); oClass:AddMethod( "OpenFiles", @TpvMenuOrdenes_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TpvMenuOrdenes_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Resource( nMode, lLiteral); oClass:AddMethod( "Resource", @TpvMenuOrdenes_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lPreSave(); oClass:AddMethod( "lPreSave", @TpvMenuOrdenes_lPreSave(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PreSaveDetails(); oClass:AddMethod( "PreSaveDetails", @TpvMenuOrdenes_PreSaveDetails(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PreEdit(); oClass:AddMethod( "PreEdit", @TpvMenuOrdenes_PreEdit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER PostEdit(); oClass:AddMethod( "PostEdit", @TpvMenuOrdenes_PostEdit(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER PreDelete(); oClass:AddMethod( "PreDelete", @TpvMenuOrdenes_PreDelete(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ValidOrden( cGetOrd); oClass:AddMethod( "ValidOrden", @TpvMenuOrdenes_ValidOrden(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER StartResource(); oClass:AddMethod( "StartResource", @TpvMenuOrdenes_StartResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER aOrdenes(); oClass:AddMethod( "aOrdenes", @TpvMenuOrdenes_aOrdenes(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nIntercambiables(); oClass:AddMethod( "nIntercambiables", @TpvMenuOrdenes_nIntercambiables(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lIntercambiable(); oClass:AddMethod( "lIntercambiable", @TpvMenuOrdenes_lIntercambiable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Intercambiable(); oClass:AddMethod( "Intercambiable", @TpvMenuOrdenes_Intercambiable(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lDegustacion(); oClass:AddMethod( "lDegustacion", @TpvMenuOrdenes_lDegustacion(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER nUnidadesOrdenAcompannamiento(); oClass:AddMethod( "nUnidadesOrdenAcompannamiento", @TpvMenuOrdenes_nUnidadesOrdenAcompannamiento(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TpvMenuOrdenes ;



static FUNCTION TpvMenuOrdenes_DefineFiles( cPath, cVia, lUniqueName, cFileName ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local oDbf

   If( cPath == nil, cPath := ::cPath, ) ;
   If( cVia == nil, cVia := cDriver(), ) ;
   If( lUniqueName == nil, lUniqueName := .F., ) ;
   If( cFileName == nil, cFileName := "TpvMnuOrd", ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "Ordenes menú", ( cPath ) )

      oDbf:AddField( "cCodMnu", "C", 03, 0,,,,, "Código menu", .F.,, .F., {} )
      oDbf:AddField( "cCodOrd", "C", 02, 0,,,,, "Código orden", .F.,, .F., {} )
      oDbf:AddField( "lIntOrd", "L", 01, 0,,,,, "Orden intercambiable", .F.,, .T., {} )
      oDbf:AddField( "lDgstcn", "L", 01, 0,,,,, "Menú degustación", .F.,, .T., {} )
      oDbf:AddField( "nUndAcomp", "N", 01, 0,,,,, "Unidades menú acompañamiento", .F.,, .T., {} )

      oDbf:AddIndex( "cCodMnu", ( cFileName ), "cCodMnu",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodOrd", ( cFileName ), "cCodOrd",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cMnuOrd", ( cFileName ), "cCodMnu + cCodOrd",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



static FUNCTION TpvMenuOrdenes_OpenFiles( lExclusive ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local lOpen             := .T.
   local oError
   local oBlock

   If( lExclusive == nil, lExclusive := .F., ) ;

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if empty( ::oDbf )
         ::oDbf            := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !lExclusive )

      ::bOnPreSaveDetail   := {|| ::PreSaveDetails() }

      ::bOnPreAppend       := {|| ::PreEdit() }
      ::bOnPreEdit         := {|| ::PreEdit() }

      ::bOnPostAppend      := {|| ::PostEdit() }
      ::bOnPostEdit        := {|| ::PostEdit() }

      ::bOnPreDelete       := {|| ::PreDelete() }

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen                := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TpvMenuOrdenes_CloseFiles( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   if !empty( ::oDbf ) .AND. ::oDbf:Used()
      ::oDbf:end()
   end

   ::oDbf                  := nil

RETURN .T.



static FUNCTION TpvMenuOrdenes_PreEdit( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   ::cScopeValue        := ::oDbfVir:cCodOrd

   ::oParent:oDetMenuArticulo:oDbfVir:OrdSetFocus( "cCodOrd" )
   ::oParent:oDetMenuArticulo:oDbfVir:SetScope( ::cScopeValue )
   ::oParent:oDetMenuArticulo:oDbfVir:GoTop()

RETURN .T.



static FUNCTION TpvMenuOrdenes_PostEdit( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   ::oParent:oDetMenuArticulo:oDbfVir:ClearScope()
   ::oParent:oDetMenuArticulo:oDbfVir:OrdSetFocus( "cCodMnu" )

RETURN .T.



static FUNCTION TpvMenuOrdenes_PreDelete( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   while ( ::oParent:oDetMenuArticulo:oDbfVir:SeekInOrd( ::oDbfVir:cCodOrd, "cCodOrd" ) )
      ::oParent:oDetMenuArticulo:oDbfVir:Delete()
   end

RETURN .T.



static FUNCTION TpvMenuOrdenes_ValidOrden( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local lValid      := .T.

   if ::nMode == 1

      if ::oParent:oOrdenComandas:Existe( ::oGetOrdenComanda, ::oGetOrdenComanda:oHelpText )

         ::oDbfVir:GetStatus()

         if ::oDbfVir:SeekInOrd( ::oGetOrdenComanda:varGet(), "cCodOrd" )
            lValid   := .F.
            msgStop( "El orden ya esta agregado" )
         end

         ::oDbfVir:SetStatus()

      else

         lValid      := .F.

      end

   end

RETURN ( lValid )



static FUNCTION TpvMenuOrdenes_Resource( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local oDlg

   if ::nMode == 1
      ::oDbfVir:nUndAcomp   := 1
   end



   oDlg = TDialog():New(,,,, LblTitle( ::nMode ) + "orden de comanda", "TpvMenuOrdenes",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






      ::oGetOrdenComanda := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbfVir:cCodOrd, ::oDbfVir:cCodOrd:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "Lupa",, 101 )

      ::oGetOrdenComanda:bWhen     := {|| ::nMode == 1 }
      ::oGetOrdenComanda:bValid    := {|| ::ValidOrden() }
      ::oGetOrdenComanda:bHelp     := {|| ::oParent:oOrdenComandas:Buscar( ::oGetOrdenComanda ) }



      ::oBrwArticulosOrden                := IXBrowse():New( oDlg )

      ::oBrwArticulosOrden:bClrSel        := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwArticulosOrden:bClrSelFocus   := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oParent:oDetMenuArticulo:oDbfVir:SetBrowse( ::oBrwArticulosOrden )

      ::oBrwArticulosOrden:bLDblClick     := {|| ::oParent:oDetMenuArticulo:Edit( ::oBrwArticulosOrden ) }

      ::oBrwArticulosOrden:nMarqueeStyle  := 6
      ::oBrwArticulosOrden:cName          := "Lineas de menus de articulos"
      ::oBrwArticulosOrden:lFooter        := .F.

      ::oBrwArticulosOrden:CreateFromResource( 400 )

      with object ( ::oBrwArticulosOrden:AddCol() )
         :cHeader          := "Código"
         :bStrData         := {|| ::oParent:oDetMenuArticulo:oDbfVir:cCodArt }
         :nWidth           := 100
      end

      with object ( ::oBrwArticulosOrden:AddCol() )
         :cHeader          := "Artículo"
         :bStrData         := {|| retArticulo( ::oParent:oDetMenuArticulo:oDbfVir:cCodArt, ::oParent:oDbfArticulo:cAlias ) }
         :nWidth           := 240
      end




      TCheckBox():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:lIntOrd, ::oDbfVir:lIntOrd:= u ) }, oDlg,,,,,,, .F., {||     ( ::nMode <> 3 )}, .F. )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:nUndAcomp, ::oDbfVir:nUndAcomp:= u ) }, oDlg,,,,,,,,, .F., {||     ( ::nMode <> 3 .AND. ::oParent:oDbf:lAcomp )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 130, { | u | If( PCount()==0, ::oDbfVir:lDgstcn, ::oDbfVir:lDgstcn:= u ) }, oDlg,,,,,,, .F., {||     ( ::nMode <> 3 )}, .F. )





      TButton():ReDefine( 500, {||( ::oParent:oDetMenuArticulo:Append( ::oBrwArticulosOrden ) )}, oDlg,,, .F., {||     ( ::nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( ::oParent:oDetMenuArticulo:Del( ::oBrwArticulosOrden ) )}, oDlg,,, .F., {||     ( ::nMode <> 3 )},,, .F. )




      TButton():ReDefine( 502, {||( EdtArticulo( ::oParent:oDetMenuArticulo:oDbfVir:cCodArt ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 503, {||( ::oParent:oDetMenuArticulo:Edit( ::oBrwArticulosOrden ) )}, oDlg,,, .F., {||     ( ::nMode <> 3 )},,, .F. )







      TButton():ReDefine( 1, {||( ::lPreSave( oDlg ) )}, oDlg,,, .F., {||     ( ::nMode <> 3 )},,, .F. )




      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

      if ::nMode <> 3
         oDlg:AddFastKey( 113, {|| ::oParent:oDetMenuArticulo:Append( ::oBrwArticulosOrden ) } )
         oDlg:AddFastKey( 114, {|| ::oParent:oDetMenuArticulo:Edit( ::oBrwArticulosOrden ) } )
         oDlg:AddFastKey( 115, {|| ::oParent:oDetMenuArticulo:Del( ::oBrwArticulosOrden ) } )
         oDlg:AddFastKey( 116, {|| ::lPreSave( oDlg ) } )
      end

      oDlg:bStart    := {|| ::StartResource() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static FUNCTION TpvMenuOrdenes_StartResource( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   if ( ::nMode <> 1 )
      ::oParent:oOrdenComandas:Existe( ::oGetOrdenComanda, ::oGetOrdenComanda:oHelpText )
   end

RETURN (Self)



static FUNCTION TpvMenuOrdenes_lPreSave( oDlg ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   if Empty( ::oDbfVir:cCodOrd )
      MsgStop( "Código del orden no puede estar vacio" )
      Return ( .F. )
   end

   if ::oDbfVir:nUndAcomp <= 0
      MsgStop( "Número de unidades de acompañamiento tiene que ser superior a 0" )
      Return ( .F. )
   end

   if !::oGetOrdenComanda:lValid()
      Return ( .F. )
   end

   ::oParent:oDetMenuArticulo:oDbfVir:GoTop()
   while !::oParent:oDetMenuArticulo:oDbfVir:eof()

      ::oParent:oDetMenuArticulo:oDbfVir:cCodOrd   := ::oDbfVir:cCodOrd

      if ::nMode == 1
         ::oParent:oDetMenuArticulo:oDbfVir:GoTop()
      else
         ::oParent:oDetMenuArticulo:oDbfVir:skip()
      end

   end

RETURN ( oDlg:End( 1 ) )



static FUNCTION TpvMenuOrdenes_PreSaveDetails( ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   ::oDbfVir:cCodMnu                               := ::oParent:oDbf:cCodMnu

RETURN ( Self )



static FUNCTION TpvMenuOrdenes_aOrdenes( cCodMnu ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local aOrdenes      := {}

   ::oDbf:GetStatus()

   ::oDbf:OrdSetFocus( "cCodMnu" )

   if ::oDbf:Seek( cCodMnu )

      while ( cCodMnu == ::oDbf:cCodMnu ) .AND. !::oDbf:eof()

         aAdd( aOrdenes, ::oDbf:cCodOrd )

         ::oDbf:skip()

      end

   end

   ::oDbf:SetStatus()

RETURN ( aOrdenes )



static FUNCTION TpvMenuOrdenes_nIntercambiables( cCodMnu, dbf ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local nIntercambiable   := 0

   dbf:GetStatus()

   dbf:GoTop()

   dbf:OrdSetFocus( "cCodMnu" )

   if dbf:Seek( cCodMnu )

      while ( cCodMnu == dbf:cCodMnu ) .AND. !dbf:eof()

         if dbf:lIntOrd
            nIntercambiable++
         end

         dbf:Skip()

      end

   end

   dbf:SetStatus()

Return ( nIntercambiable )



static FUNCTION TpvMenuOrdenes_lIntercambiable( cCodOrd ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local lIntercambiable   := .F.

   if ::oDbf:SeekInOrd( cCodOrd, "cCodOrd" )
      lIntercambiable   := ::oDbf:lIntOrd
   end

Return ( lIntercambiable )



static FUNCTION TpvMenuOrdenes_Intercambiable( logico ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local clogico

   if logico == .T.
      clogico  := "Si"
   else
      clogico  := "No"
   end

Return ( clogico )



static FUNCTION TpvMenuOrdenes_lDegustacion( cCodigoMenu, cCodigoOrden ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local lDegustacion   := .F.

   ::oDbf:GetStatus()

   if ::oDbf:SeekInOrd( cCodigoMenu + cCodigoOrden, "cMnuOrd" )
      lDegustacion      := ::oDbf:lDgstcn
   end

   ::oDbf:SetStatus()

Return ( lDegustacion )



static FUNCTION TpvMenuOrdenes_nUnidadesOrdenAcompannamiento( cCodigoMenu, cCodigoOrden ) ; local Self AS CLASS TpvMenuOrdenes := QSelf() AS CLASS TpvMenuOrdenes

   local nUnidades      := 0

   ::oDbf:GetStatus()

   if ::oDbf:SeekInOrd( cCodigoMenu + cCodigoOrden, "cMnuOrd" )
      nUnidades         := ::oDbf:nUndAcomp
   end

   ::oDbf:SetStatus()

RETURN ( nUnidades )
