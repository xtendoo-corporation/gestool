#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\TraduccionesController.prg"
_HB_CLASS TraduccionesController ; function TraduccionesController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TraduccionesController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @TraduccionesController() ) ) ;

   _HB_MEMBER { oLenguajesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLenguajesController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @TraduccionesController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @TraduccionesController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadedBlankBuffer(); oClass:AddMethod( "loadedBlankBuffer", @TraduccionesController_loadedBlankBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER gettingSelectSentence(); oClass:AddMethod( "gettingSelectSentence", @TraduccionesController_gettingSelectSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER insertBuffer(); oClass:AddInline( "insertBuffer", {|Self | ( ( Self ) ), ( ::oModel:insertBuffer() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER loadedDuplicateBuffer( uuidEntidad); oClass:AddMethod( "loadedDuplicateBuffer", @TraduccionesController_loadedDuplicateBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER deleteBuffer( aUuidEntidades); oClass:AddMethod( "deleteBuffer", @TraduccionesController_deleteBuffer(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TraduccionesController ;



static FUNCTION TraduccionesController_New( oSenderController ) ; local Self AS CLASS TraduccionesController := QSelf() AS CLASS TraduccionesController

   ::Super:New( oSenderController )

   ::lTransactional        := .T.

   ::cTitle                := "Traducciones"

   ::cName                 := "traducciones"



   ::hImage                := {  "16" => "gc_user_message_16", "32" => "gc_user_message_32", "48" => "gc_user_message_48" }

   ::oModel                := SQLTraduccionesModel():New( self )

   ::oBrowseView           := TraduccionesBrowseView():New( self )

   ::oDialogView           := TraduccionesView():New( self )

   ::oValidator            := TraduccionesValidator():New( self, ::oDialogView )

   ::oLenguajesController  := LenguajesController():New( self )

   ::setEvent( "appended",                      {|| ::oBrowseView:Refresh() } )
   ::setEvent( "edited",                        {|| ::oBrowseView:Refresh() } )
   ::setEvent( "deletedSelection",              {|| ::oBrowseView:Refresh() } )

   ::oModel:setEvent( "loadedBlankBuffer",      {|| ::loadedBlankBuffer() } )
   ::oModel:setEvent( "gettingSelectSentence",  {|| ::gettingSelectSentence() } )

RETURN ( Self )



static FUNCTION TraduccionesController_End( ) ; local Self AS CLASS TraduccionesController := QSelf() AS CLASS TraduccionesController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oLenguajesController:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION TraduccionesController_loadedBlankBuffer( ) ; local Self AS CLASS TraduccionesController := QSelf() AS CLASS TraduccionesController

   local uuid        := ::getSenderController():getUuid()

   if !empty( uuid )
      hset( ::oModel:hBuffer, "parent_uuid", uuid )
   end

RETURN ( Self )



static FUNCTION TraduccionesController_gettingSelectSentence( ) ; local Self AS CLASS TraduccionesController := QSelf() AS CLASS TraduccionesController

   local uuid        := ::getSenderController():getUuid()

   if !empty( uuid )
      ::oModel:setGeneralWhere( "parent_uuid = " + quoted( uuid ) )
   end

RETURN ( Self )



static FUNCTION TraduccionesController_loadedDuplicateBuffer( uuidEntidad ) ; local Self AS CLASS TraduccionesController := QSelf() AS CLASS TraduccionesController

   hset( ::oModel:hBuffer, "parent_uuid", uuidEntidad )

RETURN ( self )



static FUNCTION TraduccionesController_deleteBuffer( aUuidEntidades ) ; local Self AS CLASS TraduccionesController := QSelf() AS CLASS TraduccionesController

   if empty( aUuidEntidades )
      RETURN ( self )
   end

   ::oModel:deleteWhereParentUuid( aUuidEntidades )

RETURN ( self )







_HB_CLASS TraduccionesBrowseView ; function TraduccionesBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TraduccionesBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @TraduccionesBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @TraduccionesBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TraduccionesBrowseView ;



static FUNCTION TraduccionesBrowseView_addColumns( ) ; local Self AS CLASS TraduccionesBrowseView := QSelf() AS CLASS TraduccionesBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "uuid"
      :cHeader             := "Uuid"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "parent_uuid"
      :cHeader             := "Uuid entidad"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "parent_uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 60
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Lenguaje"
      :nWidth              := 200
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "texto"
      :cHeader             := "Texto"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "texto" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )







_HB_CLASS TraduccionesView ; function TraduccionesView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TraduccionesView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @TraduccionesView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @TraduccionesView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER startActivate(); oClass:AddMethod( "startActivate", @TraduccionesView_startActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TraduccionesView ;



static FUNCTION TraduccionesView_Activate( ) ; local Self AS CLASS TraduccionesView := QSelf() AS CLASS TraduccionesView



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "traducciones", "TRADUCCIONES",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )

   ::oController:oLenguajesController:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "lenguaje_uuid" ], ::oController:oModel:hBuffer[ "lenguaje_uuid" ]:= u ) } )
   ::oController:oLenguajesController:oGetSelector:Activate( 100, 101, ::oDialog )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "texto" ], ::oController:oModel:hBuffer[ "texto" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "texto" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   TMultiGet():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "texto_extendido" ], ::oController:oModel:hBuffer[ "texto_extendido" ]:= u ) }, ::oDialog,,,,,,, .F., {||        ( ::oController:isNotZoomMode() )}, .F., {||       ( ::oController:validate( "texto_extendido" ) )}, )





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::startActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )



static FUNCTION TraduccionesView_startActivate( ) ; local Self AS CLASS TraduccionesView := QSelf() AS CLASS TraduccionesView

   CursorWait()

   ::oController:oLenguajesController:oGetSelector:Start()

   CursorWE()

RETURN ( self )







_HB_CLASS TraduccionesValidator ; function TraduccionesValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TraduccionesValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @TraduccionesValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @TraduccionesValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TraduccionesValidator ;



static FUNCTION TraduccionesValidator_getValidators( ) ; local Self AS CLASS TraduccionesValidator := QSelf() AS CLASS TraduccionesValidator

   ::hValidators  := {  "texto"  => {  "required"  => "El texto de la traducción es un dato requerido" } }

RETURN ( ::hValidators )







_HB_CLASS SQLTraduccionesModel ; function SQLTraduccionesModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLTraduccionesModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLTraduccionesModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "traducciones", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLTraduccionesModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLTraduccionesModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getLenguajeUuidAttribute(); oClass:AddInline( "getLenguajeUuidAttribute", {|Self, uuid | ( ( Self ) ), ( if( empty( uuid ), space( 3 ), SQLLenguajesModel():getCodigoWhereUuid( uuid ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setLenguajeUuidAttribute(); oClass:AddInline( "setLenguajeUuidAttribute", {|Self, codigo | ( ( Self ) ), ( if( empty( codigo ), "", SQLLenguajesModel():getUuidWhereCodigo( codigo ) ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLTraduccionesModel ;



static FUNCTION SQLTraduccionesModel_getInitialSelect( ) ; local Self AS CLASS SQLTraduccionesModel := QSelf() AS CLASS SQLTraduccionesModel










   local cSelect  := "SELECT traducciones.id, "                               +  "traducciones.uuid, "                                 +  "traducciones.parent_uuid, "                          +  "lenguajes.codigo, "                                  +  "lenguajes.nombre, "                                  +  "traducciones.texto, "                                +  "LEFT( traducciones.texto_extendido, 256 ) "          +  "FROM traducciones AS traducciones "                  +  "INNER JOIN lenguajes AS lenguajes "                  +  "ON lenguajes.uuid = traducciones.lenguaje_uuid"

RETURN ( cSelect )



static FUNCTION SQLTraduccionesModel_getColumns( ) ; local Self AS CLASS SQLTraduccionesModel := QSelf() AS CLASS SQLTraduccionesModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",       {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "lenguaje_uuid",     {  "create"    => "VARCHAR( 40 ) NOT NULL"                  , "default"   => {|| space( 40 ) } }                       )


   hset( ::hColumns, "texto",             {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "texto_extendido",   {  "create"    => "TEXT"                                    , "default"   => {|| "" } }                                )

RETURN ( ::hColumns )
