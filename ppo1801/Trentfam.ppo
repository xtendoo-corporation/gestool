#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Trentfam.prg"
_HB_CLASS TInfRenFam ; function TInfRenFam ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TInfRenFam", iif( .T., { @TInfGen() }, { @HBObject() } ), @TInfRenFam() ) ) ;

   _HB_MEMBER { AS LOGIC lExcMov } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcMov"}, .F. )
   _HB_MEMBER { AS LOGIC lFactura } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lFactura"}, .F. )
   _HB_MEMBER { AS LOGIC lAlbaran } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAlbaran"}, .F. )
   _HB_MEMBER { AS LOGIC lTiket } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTiket"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oTikCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oTikCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oArt } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oArt"}, .F. )
   _HB_MEMBER { AS OBJECT oIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFamilia } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFamilia"}, .F. )

   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TInfRenFam_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TInfRenFam_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TInfRenFam_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TInfRenFam_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TInfRenFam_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AppAlbaran(); oClass:AddMethod( "AppAlbaran", @TInfRenFam_AppAlbaran(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AppFactura(); oClass:AddMethod( "AppFactura", @TInfRenFam_AppFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AppTiket(); oClass:AddMethod( "AppTiket", @TInfRenFam_AppTiket(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TInfRenFam ;



static FUNCTION TInfRenFam_OpenFiles( ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam





   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()
   ::oFacCliL:OrdSetFocus( "CREF" )

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()
   ::oAlbCliL:OrdSetFocus( "CREF" )

   ::oTikCliT := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()
   ::oTikCliL:OrdSetFocus( "CREF" )

   ::oArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oArt:AddBag( "ARTICULO.CDX" ) ; ::oArt:AddBag( ) ; ::oArt:AutoIndex()



   ::oIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oIva:AddBag( "TIVA.CDX" ) ; ::oIva:AddBag( ) ; ::oIva:AutoIndex()





   ::oFamilia := DbfServer( "FAMILIAS.DBF", ):NewOpen( "FAMILIAS.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFamilia:AddBag( "FAMILIAS.CDX" ) ; ::oFamilia:AddBag( ) ; ::oFamilia:AutoIndex()

RETURN ( Self )



static FUNCTION TInfRenFam_CloseFiles( ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam

   ::oFacCliT:End()
   ::oFacCliL:End()
   ::oFacCliP:End()
   ::oAlbCliT:End()
   ::oAlbCliL:End()
   ::oTikCliT:End()
   ::oTikCliL:End()
   ::oArt:End()
   ::oIva:End()
   ::oFamilia:End()

RETURN ( Self )



static FUNCTION TInfRenFam_Create( ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam

   ::AddField( "CCODFAM", "C", 16, 0, {|| "@!" },           "Cod.",              .T., "Código família",   8, .F. )
   ::AddField( "CNOMFAM", "C", 40, 0, {|| "@!" },           "Família",           .T., "Família",         25, .F. )
   ::AddField( "NTOTCAJ", "N", 16, 6, {|| MasUnd() },       "Cajas",             .F., "Cajas",           12, .T. )
   ::AddField( "NTOTUNI", "N", 16, 6, {|| MasUnd() },       "Unds.",             .T., "Unidades",        12, .T. )
   ::AddField( "NTOTIMP", "N", 16, 6, {|| ::cPicOut },      "Tot. importe",      .T., "Tot. importe",    12, .T. )
   ::AddField( "NTOTCOS", "N", 16, 6, {|| ::cPicOut },      "Tot. costo",        .T., "Total costo",     12, .T. )
   ::AddField( "NMARGEN", "N", 16, 6, {|| ::cPicOut },      "Margen",            .T., "Margen",          12, .T. )
   ::AddField( "NRENTAB", "N", 16, 6, {|| ::cPicOut },      "%Rent.",            .T., "Rentabilidad",    12, .F. )
   ::AddField( "NPREMED", "N", 16, 6, {|| ::cPicImp },      "Precio medio",      .F., "Precio medio",    12, .F. )
   ::AddField( "NCOSMED", "N", 16, 6, {|| ::cPicOut },      "Costo medio",       .T., "Costo medio",     12, .F. )

   ::AddTmpIndex( "CCODFAM", "CCODFAM" )



RETURN ( Self )



static FUNCTION TInfRenFam_lResource( cFld ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam

   local cEstado := "Todas"

   if !::StdResource( "INF_GEN10C" )
      return .F.
   end





   ::lDefFamInf( 110, 120, 130, 140 )

   ::oDefExcInf( 204 )



   TCheckBox():ReDefine( ( 203 ), { | u | If( PCount()==0, ::lExcMov, ::lExcMov:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 219, { | u | If( PCount()==0, ::lAlbaran, ::lAlbaran:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 220, { | u | If( PCount()==0, ::lFactura, ::lFactura:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F., {||     ::lFactura},,,,,, "::oEstado",,,,,,, )



   TCheckBox():ReDefine( 221, { | u | If( PCount()==0, ::lTiket, ::lTiket:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

RETURN .T.






static FUNCTION TInfRenFam_lGenerate( ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam

   ::oDlg:Disable()

   ::oDbf:Zap()





   if ::lAlbaran
      ::AppAlbaran()
   end





   if ::lFactura
      ::AppFactura()
   end





   if ::lTiket
      ::AppTiket()
   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TInfRenFam_AppAlbaran( ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam

   local cCodFam
   local nTotUni
   local nTotImpUni
   local nTotCosUni





   ::oMtrInf:SetTotal( ::oAlbCliL:Lastrec() )

   ::oAlbCliL:GoTop()

   while !::oAlbCliL:Eof()

      cCodFam  := cCodFam( ::oAlbCliL:cRef, ::oArt )









      if cCodFam >= ::cFamOrg                                                                                        .AND. cCodFam <= ::cFamDes                                                                                        .AND. dFecAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT ) >= ::dIniInf  .AND. dFecAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT ) <= ::dFinInf  .AND. !lFacAlbCli( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb, ::oAlbCliT )              .AND. lChkSer( ::oAlbCliL:cSerAlb, ::aSer )                                                                       .AND. !( ::oAlbCliL:lKitChl )                                                                                        .AND. !( ::lExcCero .AND. ( nTotNAlbCli( ::oAlbCliL:cAlias ) == 0 ) )                                             .AND. !( ::lExcMov  .AND. ( nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut ) == 0  ) )





         nTotUni              := nTotNAlbCli( ::oAlbCliL:cAlias )
         nTotImpUni           := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )

         if ::oAlbCliL:nCosDiv <> 0
            nTotCosUni        := ::oAlbCliL:nCosDiv * nTotUni
         else
            nTotCosUni        := nRetPreCosto( ::oArt:cAlias, ::oAlbCliL:cRef ) * nTotUni
         end

         if !::oDbf:Seek( cCodFam )

            ::oDbf:Append()

            ::oDbf:cCodFam    := cCodFam
            ::oDbf:cNomFam    := cNomFam( cCodFam, ::oDbfFam )

            ::oDbf:nTotCaj    := ::oAlbCliL:nCanEnt
            ::oDbf:nTotUni    := nTotUni
            ::oDbf:nTotImp    := nTotImpUni
            ::oDbf:nTotCos    := nTotCosUni
            ::oDbf:nMargen    := ( nTotImpUni ) - ( nTotCosUni )

            if nTotUni <> 0 .AND. nTotCosUni <> 0
               ::oDbf:nRentab := ( ( nTotImpUni / nTotCosUni ) - 1 ) * 100
               ::oDbf:nPreMed := nTotImpUni / nTotUni
               ::oDbf:nCosMed := nTotCosUni / nTotUni
            else
               ::oDbf:nRentab := 0
               ::oDbf:nPreMed := 0
               ::oDbf:nCosMed := 0
            end

            ::oDbf:Save()

         else

            ::oDbf:Load()

            ::oDbf:nTotCaj    += ::oAlbCliL:nCanEnt
            ::oDbf:nTotUni    += nTotUni
            ::oDbf:nTotImp    += nTotImpUni
            ::oDbf:nTotCos    += nTotCosUni
            ::oDbf:nMargen    += ( nTotImpUni ) - ( nTotCosUni )

            if nTotUni <> 0 .AND. nTotCosUni <> 0
               ::oDbf:nRentab := ( ( ::oDbf:nTotImp / ::oDbf:nTotCos ) - 1 ) * 100
               ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
               ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
            end

            ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc( ::oAlbCliL:OrdKeyNo() )

      ::oAlbCliL:Skip()

   end

RETURN ( Self )



static FUNCTION TInfRenFam_AppFactura( ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam

   local cCodFam
   local dFacCli
   local nPagFac
   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local bValid

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| nPagFac == 2 }
      case ::oEstado:nAt == 2
         bValid   := {|| nPagFac == 1 }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end

   ::oMtrInf:SetTotal( ::oFacCliL:Lastrec() )

   ::oFacCliL:GoTop()

   WHILE !::oFacCliL:Eof()

      cCodFam  := cCodFam( ::oFacCliL:cRef, ::oArt )
      dFacCli  := dFecFacCli( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac, ::oFacCliT )
      nPagFac  := nChkPagFacCli( ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac, ::oFacCliT:cAlias, ::oFacCliP:cAlias )









      IF cCodFam >= ::cFamOrg                                                                                        .AND. cCodFam <= ::cFamDes                                                                                        .AND. dFacCli >= ::dIniInf                                                                                        .AND. dFacCli <= ::dFinInf                                                                                        .AND. lChkSer( ::oFacCliL:cSerie, ::aSer )                                                                        .AND. Eval( bValid )                                                                                              .AND. !( ::oFacCliL:lKitChl )                                                                                     .AND. !( ::lExcCero .AND. ( nTotNFacCli( ::oFacCliL:cAlias ) == 0 ) )                                             .AND.  !( ::lExcMov  .AND. ( nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut ) == 0  ) )





         nTotUni              := nTotNFacCli( ::oFacCliL:cAlias )
         nTotImpUni           := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
         nTotCosUni           := ::oFacCliL:nCosDiv * nTotUni

         if !::oDbf:Seek( cCodFam )

            ::oDbf:Append()

            ::oDbf:cCodFam    := cCodFam
            ::oDbf:cNomFam    := cNomFam( cCodFam, ::oDbfFam )

            ::oDbf:nTotCaj    := ::oFacCliL:nCanEnt
            ::oDbf:nTotUni    := nTotUni
            ::oDbf:nTotImp    := nTotImpUni
            ::oDbf:nTotCos    := nTotCosUni
            ::oDbf:nMargen    := ( nTotImpUni ) - ( nTotCosUni )

            if nTotUni <> 0 .AND. nTotCosUni <> 0
               ::oDbf:nRentab := ( ( nTotImpUni / nTotCosUni ) - 1 ) * 100
               ::oDbf:nPreMed := nTotImpUni / nTotUni
               ::oDbf:nCosMed := nTotCosUni / nTotUni
            else
               ::oDbf:nRentab := 0
               ::oDbf:nPreMed := 0
               ::oDbf:nCosMed := 0
            end

            ::oDbf:Save()

         else

            ::oDbf:Load()

            ::oDbf:nTotCaj    += ::oFacCliL:nCanEnt
            ::oDbf:nTotUni    += nTotUni
            ::oDbf:nTotImp    += nTotImpUni
            ::oDbf:nTotCos    += nTotCosUni
            ::oDbf:nMargen    += ( nTotImpUni ) - ( nTotCosUni )

            if nTotUni <> 0 .AND. nTotCosUni <> 0
               ::oDbf:nRentab := ( ( ::oDbf:nTotImp / ::oDbf:nTotCos ) - 1 ) * 100
               ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
               ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
            end

            ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc()

      ::oFacCliL:Skip()

   end

   ::oMtrInf:AutoInc()

RETURN ( Self )



static FUNCTION TInfRenFam_AppTiket( ) ; local Self AS CLASS TInfRenFam := QSelf() AS CLASS TInfRenFam

   local bValid
   local cCodFam
   local nTotUni
   local nTotImpUni
   local nTotCosUni

   do case
      case ::oEstado:nAt == 1
         bValid      := {|| ::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 2
         bValid      := {|| !::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 3
         bValid      := {|| .T. }
   end

   ::oTikCliL:GoTop()

   WHILE !::oTikCliL:Eof()

      cCodFam                 := cCodFam( ::oTikCliL:cCbaTil, ::oArt )

      ::oMtrInf:SetTotal( ::oTikCliL:Lastrec() )









      IF cCodFam >= ::cFamOrg                                                                                        .AND. cCodFam <= ::cFamDes                                                                                        .AND. dFecTik( ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil, ::oTikCliT ) >= ::dIniInf            .AND. dFecTik( ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil, ::oTikCliT ) <= ::dFinInf            .AND. cTipTik( ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil, ::oTikCliT ) == "1"                  .AND. lChkSer( ::oTikCliL:cSerTil, ::aSer )                                                                       .AND. !( ::oTikCliL:lKitChl )                                                                                     .AND. !( ::lExcCero .AND. ( ::oTikCliL:nUntTil == 0 ) )                                                           .AND. !( ::lExcMov  .AND. ( nImpLTpv( ::oTikCliT, ::oTikCliL:cAlias, ::nDecOut, ::nDerOut ) == 0  ) )

         nTotUni              := ::oTikCliL:nUntTil
         nTotImpUni           := nTotLTpv( ::oTikCliL:cAlias, ::nDecOut, ::nDerOut )

         if ::oTikCliL:nCosDiv <> 0
            nTotCosUni        := ::oTikCliL:nCosDiv * nTotUni
         else
            nTotCosUni        := nRetPreCosto( ::oArt:cAlias, ::oTikCliL:cCbaTil ) * nTotUni
         end

         if !::oDbf:Seek( cCodFam )

            ::oDbf:Append()

            ::oDbf:cCodFam    := cCodFam
            ::oDbf:cNomFam    := cNomFam( cCodFam, ::oDbfFam )

            ::oDbf:nTotUni    := nTotUni
            ::oDbf:nTotImp    := nTotImpUni
            ::oDbf:nTotCos    := nTotCosUni
            ::oDbf:nMargen    := ( nTotImpUni ) - ( nTotCosUni )

            if nTotUni <> 0 .AND. nTotCosUni <> 0
               ::oDbf:nRentab := ( ( nTotImpUni / nTotCosUni ) - 1 ) * 100
               ::oDbf:nPreMed := nTotImpUni / nTotUni
               ::oDbf:nCosMed := nTotCosUni / nTotUni
            else
               ::oDbf:nRentab := 0
               ::oDbf:nPreMed := 0
               ::oDbf:nCosMed := 0
            end

            ::oDbf:Save()

         else

            ::oDbf:Load()


            ::oDbf:nTotUni    += nTotUni
            ::oDbf:nTotImp    += nTotImpUni
            ::oDbf:nTotCos    += nTotCosUni
            ::oDbf:nMargen    += ( nTotImpUni ) - ( nTotCosUni )

            if nTotUni <> 0 .AND. nTotCosUni <> 0
               ::oDbf:nRentab := ( ( ::oDbf:nTotImp / ::oDbf:nTotCos ) - 1 ) * 100
               ::oDbf:nPreMed := ::oDbf:nTotImp / ::oDbf:nTotUni
               ::oDbf:nCosMed := ::oDbf:nTotCos / ::oDbf:nTotUni
            end

            ::oDbf:Save()

         end

      end

      ::oMtrInf:AutoInc( ::oTikCliL:OrdKeyNo() )

      ::oTikCliL:Skip()

   end

   ::oMtrInf:AutoInc( ::oTikCliL:OrdKeyNo() )

RETURN ( Self )
