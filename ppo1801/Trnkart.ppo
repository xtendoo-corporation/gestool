#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Trnkart.prg"
_HB_CLASS TRnkArticulo ; function TRnkArticulo ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRnkArticulo", iif( .T., { @TInfGen() }, { @HBObject() } ), @TRnkArticulo() ) ) ;

   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )

   _HB_MEMBER { AS OBJECT oLimit } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLimit"}, .F. )
   _HB_MEMBER { nLimit } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLimit"}, .F. )
   _HB_MEMBER { AS LOGIC lAllPrc } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllPrc"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TRnkArticulo_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TRnkArticulo_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TRnkArticulo_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TRnkArticulo_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TRnkArticulo_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SumaImporte( lSuma); oClass:AddMethod( "SumaImporte", @TRnkArticulo_SumaImporte(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRnkArticulo ;



static FUNCTION TRnkArticulo_Create( ) ; local Self AS CLASS TRnkArticulo := QSelf() AS CLASS TRnkArticulo

   ::AddField( "cCodArt", "C", 18, 0, {|| "@!"          },"Código",                    .T., "Código artículo",            9 )
   ::AddField( "cNomArt", "C",100, 0, {|| "@!"          },"Artículo",                  .T., "Nombre artículo",           35 )
   ::AddField( "nTotCaj", "N", 16, 6, {|| MasUnd()      },cNombreCajas(),              .F., cNombreCajas(),              10 )
   ::AddField( "nTotUnd", "N", 16, 6, {|| MasUnd()      },cNombreUnidades(),           .F., cNombreUnidades(),           10 )
   ::AddField( "nTotTot", "N", 16, 3, {|| MasUnd()      },"Tot. " + cNombreUnidades(), .T., "Total " + cNombreunidades(),10 )
   ::AddField( "nTotNet", "N", 16, 6, {|| ::cPicOut     },"Neto",                      .T., "Neto",                      10 )
   ::AddField( "nTotIva", "N", 16, 6, {|| ::cPicOut     },cImp(),                       .T., cImp(),                       10 )
   ::AddField( "nTotReq", "N", 16, 3, {|| ::cPicOut     },"Rec",                       .F., "Recargo equivalencia",      10 )
   ::AddField( "nTotDoc", "N", 16, 6, {|| ::cPicOut     },"Total",                     .T., "Total",                     10 )
   ::AddField( "nAcuCaj", "N", 16, 6, {|| MasUnd()      },"Acu. Caj.",                 .F., "Cajas acumuladas",          10 )
   ::AddField( "nAcuUnd", "N", 16, 6, {|| MasUnd()      },"Acu. Und.",                 .F., "Unidades acumulada",        10 )
   ::AddField( "nAcuTot", "N", 16, 3, {|| MasUnd()      },"Acu. Tot.",                 .F., "Total unidades acumuladas", 10 )
   ::AddField( "nAcuNet", "N", 16, 6, {|| ::cPicOut     },"Acu. Neto",                 .F., "Neto acumulado",            10 )
   ::AddField( "nAcuIva", "N", 16, 6, {|| ::cPicOut     },"Acu. " + cImp(),                  .F., cImp() + " acumulado",             10 )
   ::AddField( "nAcuReq", "N", 16, 3, {|| ::cPicOut     },"Acu. Rec.",                 .F., "Recargo equivalencia acumulado", 10 )
   ::AddField( "nAcuDoc", "N", 16, 6, {|| ::cPicOut     },"Acu. Total",                .F., "Total acumulado",           10 )

   ::AddTmpIndex( "CCODART", "CCODART", , , , .T. )
   ::AddTmpIndex( "NTOTDOC", "NTOTDOC", , , , .T. )

RETURN ( Self )



static FUNCTION TRnkArticulo_OpenFiles( ) ; local Self AS CLASS TRnkArticulo := QSelf() AS CLASS TRnkArticulo

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::bForReport   := {|| ::lAllPrc .OR. ::oDbf:nTotNet >= ::nLimit }

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TRnkArticulo_CloseFiles( ) ; local Self AS CLASS TRnkArticulo := QSelf() AS CLASS TRnkArticulo

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end

   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil

   ::oDbfIva  := nil

RETURN ( Self )



static FUNCTION TRnkArticulo_lResource( cFld ) ; local Self AS CLASS TRnkArticulo := QSelf() AS CLASS TRnkArticulo

   local cEstado := "Todas"

   if !::StdResource( "INF_GEN15A" )
      return .F.
   end





   if !::lDefArtInf( 110, 120, 130, 140, 800 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )



   TCheckBox():ReDefine( 160, { | u | If( PCount()==0, ::lAllPrc, ::lAllPrc:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   ::oLimit := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::nLimit, ::nLimit:= u ) }, ::oFld:aDialogs[1],, PicOut(),, "N/W*",,,,, .F., {||     !::lAllPrc},, .F., .F.,,,,,, nil,,, )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )

RETURN .T.






static FUNCTION TRnkArticulo_lGenerate( ) ; local Self AS CLASS TRnkArticulo := QSelf() AS CLASS TRnkArticulo

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()
   ::oDbf:OrdSetFocus( "CCODART" )




   ::aHeader   :={ {|| "Fecha     : "  + Dtoc( Date() ) }, {|| "Artículos : "  + if( ::lAllArt, "Todos", AllTrim( ::cArtOrg )+ " > " + AllTrim( ::cArtDes ) ) }, {|| "Importe   : "  + if( ::lAllPrc, "Todos los importes", "Mayor de : " + Str( ::nLimit ) ) }, {|| "Estado    : "  + ::aEstado[ ::oEstado:nAt ] } }

   ::oFacCliT:OrdSetFocus( "dFecFac" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:CSERIE, ::aSer )

         ::SumaImporte( .T. )

      else

         ::SumaImporte( .F. )

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )

   ::oMtrInf:AutoInc( ::oFacCliT:LastRec() )

   ::oDlg:Enable()

   ::oDbf:OrdSetFocus( "NTOTDOC" )

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TRnkArticulo_SumaImporte( lSuma ) ; local Self AS CLASS TRnkArticulo := QSelf() AS CLASS TRnkArticulo

   local nTotCaj     := 0
   local nTotUnd     := 0
   local nTotTot     := 0
   local nTotNet     := 0
   local nTotIva     := 0
   local nTotReq     := 0
   local nTotDoc     := 0

   if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

      while ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac == ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac .AND. !::oFacCliL:eof()


         if !( ::oFacCliL:lTotLin ) .AND. !( ::oFacCliL:lControl )                           .AND. ( ::lAllArt .OR. ( ::oFacCliL:cRef >= ::cArtOrg .AND. ::oFacCliL:cRef <= ::cArtDes ) )

            nTotCaj     := ::oFacCliL:nCanEnt
            nTotUnd     := ::oFacCliL:nUniCaja
            nTotTot     := nTotNFacCli( ::oFacCliL )
            nTotNet     := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
            nTotIva     := Round( nTotNet * ::oFacCliL:nIva / 100, ::nDerOut )
            nTotReq     := If( ::oFacCliT:lRecargo, Round( nTotNet * nPReq( ::oDbfIva:cAlias, ::oFacCliL:nIva ) / 100, ::nDerOut ), 0 )
            nTotDoc     := nTotNet + nTotIva + nTotReq

            if ::oDbf:Seek( ::oFacCliL:cRef )

               ::oDbf:Load()

               if lSuma
                  ::oDbf:nTotCaj += nTotCaj
                  ::oDbf:nTotUnd += nTotUnd
                  ::oDbf:nTotTot += nTotTot
                  ::oDbf:nTotNet += nTotNet
                  ::oDbf:nTotIva += nTotIva
                  ::oDbf:nTotReq += nTotReq
                  ::oDbf:nTotDoc += nTotDoc
               end

               ::oDbf:nAcuCaj    += nTotCaj
               ::oDbf:nAcuUnd    += nTotUnd
               ::oDbf:nAcuTot    += nTotTot
               ::oDbf:nAcuNet    += nTotNet
               ::oDbf:nAcuIva    += nTotIva
               ::oDbf:nAcuReq    += nTotReq
               ::oDbf:nAcuDoc    += nTotDoc

               ::oDbf:Save()

            else

               ::oDbf:Append()
               ::oDbf:Blank()

               ::oDbf:cCodArt    := ::oFacCliL:cRef
               ::oDbf:cNomArt    := ::oFacCliL:cDetalle

               if lSuma
                  ::oDbf:nTotCaj := nTotCaj
                  ::oDbf:nTotUnd := nTotUnd
                  ::oDbf:nTotTot := nTotTot
                  ::oDbf:nTotNet := nTotNet
                  ::oDbf:nTotIva := nTotIva
                  ::oDbf:nTotReq := nTotReq
                  ::oDbf:nTotDoc := nTotDoc
               end

               ::oDbf:nAcuCaj    := nTotCaj
               ::oDbf:nAcuUnd    := nTotUnd
               ::oDbf:nAcuTot    := nTotTot
               ::oDbf:nAcuNet    := nTotNet
               ::oDbf:nAcuIva    := nTotIva
               ::oDbf:nAcuReq    := nTotReq
               ::oDbf:nAcuDoc    := nTotDoc

               ::oDbf:Save()

            end

         end

         ::oFacCliL:Skip()

      end

   end

RETURN ( Self )
