#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Trutcfac.prg"
_HB_CLASS TRCFacInf ; function TRCFacInf ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRCFacInf", iif( .T., { @TInfGen() }, { @HBObject() } ), @TRCFacInf() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )


   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TRCFacInf_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TRCFacInf_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TRCFacInf_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TRCFacInf_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TRCFacInf_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRCFacInf ;



static FUNCTION TRCFacInf_Create( ) ; local Self AS CLASS TRCFacInf := QSelf() AS CLASS TRCFacInf

   ::AddField ( "cCodRut", "C",  4, 0, {|| "@!" },          "Ruta",      .F., "Codigo ruta",                4 )
   ::AddField ( "cCodCli", "C", 12, 0, {|| "@!" },          "Cli.",      .F., "Codigo cliente",             8 )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },          "Art.",      .T., "Codigo artículo",           10 )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },          "Articulo",  .T., "Nombre artículo",           25 )
   ::AddField ( "cNomCli", "C", 50, 0, {|| "@!" },          "Nombre",    .F., "Nombre cliente",            25 )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },          "Ult. venta",.F., "Ultima venta",               8 )
   ::AddField ( "nNumCaj", "N", 16, 6, {|| MasUnd() },      "Caj.",      .F., "Cajas",                      8 )
   ::AddField ( "nNumUnd", "N", 16, 6, {|| MasUnd() },      "Und.",      .F., "Unidades",                   8 )
   ::AddField ( "nUndCaj", "N", 16, 6, {|| MasUnd() },      "Tot. Und.", .T., "Total unidades",             8 )
   ::AddField ( "nComAge", "N", 16, 6, {|| ::cPicOut },     "Com. Age.", .F., "Comisión agente",            8 )
   ::AddField ( "nAcuImp", "N", 16, 6, {|| ::cPicOut },     "Imp. Acu.", .F., "Importe acumulado",         10 )
   ::AddField ( "nAcuCaj", "N", 16, 6, {|| MasUnd() },      "Caj. Acu.", .F., "Cajas acumuladas" ,          8 )
   ::AddField ( "nAcuUnd", "N", 16, 6, {|| MasUnd() },      "Und. Acu.", .F., "Unidades acumuladas" ,       8 )
   ::AddField ( "nAcuUxc", "N", 16, 6, {|| MasUnd() },      "Tot. Acu.", .T., "Total unidades acumuladas",  8 )
   ::AddField ( "nTotMov", "N", 16, 6, {|| ::cPicOut },     "Total",     .T., "Total" ,                    10 )

   ::AddTmpIndex( "CCODRUT", "CCODRUT + CCODCLI + CCODART" )

   ::AddGroup( {|| ::oDbf:cCodRut }, {|| "Ruta  : " + Rtrim( ::oDbf:cCodRut ) + "-" + oRetFld( ::oDbf:cCodRut, ::oDbfRut ) } , {|| "Total Ruta... "   } )
   ::AddGroup( {|| ::oDbf:cCodRut + ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) }, {|| "Total Cliente... " } )


RETURN ( self )



static FUNCTION TRCFacInf_OpenFiles( ) ; local Self AS CLASS TRCFacInf := QSelf() AS CLASS TRCFacInf

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE


   ::oFacCliT := TDataCenter():oFacCliT()
   ::oFacCliT:OrdSetFocus( "CCODCLI" )

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()
   ::oFacRecT:OrdSetFocus( "CCODCLI" )

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oDbfFam := DbfServer( "FAMILIAS.DBF", ):NewOpen( "FAMILIAS.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfFam:AddBag( "FAMILIAS.CDX" ) ; ::oDbfFam:AddBag( ) ; ::oDbfFam:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TRCFacInf_CloseFiles( ) ; local Self AS CLASS TRCFacInf := QSelf() AS CLASS TRCFacInf

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end


   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil


RETURN ( Self )



static FUNCTION TRCFacInf_lResource( cFld ) ; local Self AS CLASS TRCFacInf := QSelf() AS CLASS TRCFacInf

   local cEstado := "Todas"

   if !::StdResource( "INF_GEN21" )
      return .F.
   end





   if !::oDefRutInf( 70, 80, 90, 100, 900 )
      return .F.
   end





   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end





   if !::lDefArtInf( 150, 160, 170, 180, 800 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oDbfCli:Lastrec() )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmCli(), ::oDbfCli:cAlias )

RETURN .T.






static FUNCTION TRCFacInf_lGenerate( ) ; local Self AS CLASS TRCFacInf := QSelf() AS CLASS TRCFacInf

   local bValid   := {|| .T. }
   local lExcCero := .F.
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end






   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Rutas   : " + ::cRutOrg         + " > " + ::cRutDes }, {|| "Clientes: " + AllTrim( ::cCliOrg )         + " > " + AllTrim( ::cCliDes ) }, {|| "Articulo: " + AllTrim( ::cArtOrg )         + " > " + AllTrim( ::cArtDes )}, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] } }









   ::oDbfCli:OrdSetFocus( "COD" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfCli:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ), ::oDbfCli:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oDbfCli:GoTop()

   while !::lBreak .AND. !::oDbfCli:Eof()
      if ( ::lAllCli .OR. ( ::oDbfCli:Cod >= ::cCliOrg .AND. ::oDbfCli:Cod <= ::cCliDes ) )





   if ::oFacRecT:Seek( ::oDbfCli:Cod )

      while ::oDbfCli:Cod == ::oFacRecT:cCodCli .AND. !::oFacRecT:eof()








       if ( ::lAllRut .OR. ( ::oFacRecT:cCodRut >= ::cRutOrg .AND. ::oFacRecT:cCodRut <= ::cRutDes ) ) .AND. ( ::lAllCli .OR. ( ::oFacRecT:cCodCli >= ::cCliOrg .AND. ::oFacRecT:cCodCli <= ::cCliDes ) ) .AND. lChkSer( ::oFacRecT:cSerie, ::aSer )                                                         .AND. Eval( bValid )





          if ::oFacRecL:Seek( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac )





                if ::oFacRecT:dFecFac >= ::dIniInf .AND. ::oFacRecT:dFecFac <= ::dFinInf

                   while ::oFacRecL:cSerie + Str( ::oFacRecL:nNumFac ) + ::oFacRecL:cSufFac == ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac .AND. !::oFacRecL:eof()



                      if ( ::lAllArt .OR. ( ::oFacRecL:cRef >= ::cArtOrg .AND. ::oFacRecL:cRef <= ::cArtDes ) )  .AND. !::oFacRecL:lTotLin                                                                     .AND. !::oFacRecL:lControl





                         if !::oDbf:Seek( ::oFacRecT:cCodRut + ::oFacRecT:cCodCli + ::oFacRecL:cRef)

                            ::oDbf:Append()

                            ::oDbf:cCodRut := ::oFacRecT:cCodRut
                            ::oDbf:cCodCli := ::oFacRecT:cCodCli
                            ::oDbf:cCodArt := ::oFacRecL:cRef
                            ::oDbf:cNomArt := ::oFacRecL:cDetalle
                            ::oDbf:cNomCli := ::oFacRecT:cNomcli
                            ::oDbf:dFecMov := ::oFacRecT:dFecFac
                            ::oDbf:nNumCaj := ::oFacRecL:nCanEnt
                            ::oDbf:nNumUnd := ::oFacRecL:nUniCaja
                            ::oDbf:nUndCaj := NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                            ::oDbf:nComAge := nComLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                            ::oDbf:nAcuImp := ::oFacRecL:nPreUnit
                            ::oDbf:nAcuCaj := ::oFacRecL:nCanEnt
                            ::oDbf:nAcuUnd := ::oFacRecL:nUniCaja
                            ::oDbf:nAcuUxc := NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                            ::oDbf:nTotMov := nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                            ::oDbf:Save()

                         else

                            ::oDbf:Load()

                            ::oDbf:nNumCaj += ::oFacRecL:nCanEnt
                            ::oDbf:nNumUnd += ::oFacRecL:nUniCaja
                            ::oDbf:nUndCaj += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                            ::oDbf:nComAge += ( NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja ) * ::oFacRecL:nComAge
                            ::oDbf:nAcuImp += ::oFacRecL:nPreUnit
                            ::oDbf:nAcuCaj += ::oFacRecL:nCanEnt
                            ::oDbf:nAcuUnd += ::oFacRecL:nUniCaja
                            ::oDbf:nAcuUxc += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                            ::oDbf:nTotMov += nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                            ::oDbf:Save()

                         end

                      end

                      ::oFacRecL:Skip()

                   end

               else





                  while ::oFacRecL:cSerie + Str( ::oFacRecL:nNumFac ) + ::oFacRecL:cSufFac == ::oFacReCT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac .AND. !::oFacRecL:eof()



                     if !::oDbf:Seek( ::oFacRecT:cCodRut + ::oFacRecT:cCodCli + cCodFam( ::oFacRecL:cRef, ::oDbfArt ) )  .AND. !::oFacRecL:lTotLin                                                                              .AND. !::oFacRecL:lControl

                        ::oDbf:Append()

                        ::oDbf:cCodRut := ::oFacRecT:cCodRut
                        ::oDbf:cCodCli := ::oFacRecT:cCodCli
                        ::oDbf:cCodArt := ::oFacRecL:cRef
                        ::oDbf:cNomArt := ::oFacRecL:cDetalle
                        ::oDbf:cNomCli := ::oFacRecT:cNomcli
                        ::oDbf:dFecMov := ::oFacRecT:dFecFac
                        ::oDbf:nNumCaj := 0
                        ::oDbf:nNumUnd := 0
                        ::oDbf:nUndCaj := 0
                        ::oDbf:nComAge := 0
                        ::oDbf:nAcuImp += ::oFacRecL:nPreUnit
                        ::oDbf:nAcuCaj += ::oFacRecL:nCanEnt
                        ::oDbf:nAcuUnd += ::oFacRecL:nUniCaja
                        ::oDbf:nAcuUxc += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                        ::oDbf:nTotMov += nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                        ::oDbf:Save()

                     else

                        ::oDbf:Load()

                        ::oDbf:nAcuImp += ::oFacRecL:nPreUnit
                        ::oDbf:nAcuCaj += ::oFacRecL:nCanEnt
                        ::oDbf:nAcuUnd += ::oFacRecL:nUniCaja
                        ::oDbf:nAcuUxc += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                        ::oDbf:nTotMov += nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                        ::oDbf:Save()

                     end

                     ::oFacRecL:Skip()

                  end

               end

            end

         end

         ::oFacRecT:Skip()

         end

      end

   end

   ::oDbfCli:Skip()

   ::oMtrInf:AutoInc( ::oDbfCli:OrdKeyNo() )

   end

   ::oDbfCli:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ) )
   ::oMtrInf:AutoInc( ::oDbfCli:LastRec() )


     ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
