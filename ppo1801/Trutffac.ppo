#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Trutffac.prg"
_HB_CLASS TRFFacInf ; function TRFFacInf ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRFFacInf", iif( .T., { @TInfGen() }, { @HBObject() } ), @TRFFacInf() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )


   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TRFFacInf_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TRFFacInf_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TRFFacInf_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TRFFacInf_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TRFFacInf_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRFFacInf ;



static FUNCTION TRFFacInf_Create( ) ; local Self AS CLASS TRFFacInf := QSelf() AS CLASS TRFFacInf

   ::AddField ( "CCODRUT", "C",  4, 0, {|| "@!" },          "Ruta",           .F., "Codigo ruta",                 4 )
   ::AddField ( "CCODCLI", "C", 12, 0, {|| "@!" },          "Cli.",           .F., "Codigo cliente",              8 )
   ::AddField ( "CCODFAM", "C", 16, 0, {|| "@!" },          "Fam.",           .T., "Codigo familia",              5 )
   ::AddField ( "CNOMFAM", "C", 30, 0, {|| "@!" },          "Nom. Fam.",      .T., "Nombre familia",             25 )
   ::AddField ( "CNOMCLI", "C", 50, 0, {|| "@!" },          "Nom.",           .F., "Nombre cliente",             25 )
   ::AddField ( "DFECMOV", "D",  8, 0, {|| "@!" },          "Ult. Venta",     .F., "Ultima venta",                8 )
   ::AddField ( "NNUMCAJ", "N", 16, 6, {|| MasUnd() },      "Caj.",           .F., "Cajas",                       8 )
   ::AddField ( "NNUMUND", "N", 16, 6, {|| MasUnd() },      "Und.",           .F., "Unidades",                    8 )
   ::AddField ( "NUNDCAJ", "N", 16, 6, {|| MasUnd() },      "Und x Caj.",     .T., "Unidades por caja",           8 )
   ::AddField ( "NCOMAGE", "N", 16, 6, {|| ::cPicOut  },    "Com. Age.",      .F., "Comisión agente",             8 )
   ::AddField ( "NACUIMP", "N", 16, 6, {|| ::cPicOut  },    "Imp. Acu.",      .F., "Importe acumulado",          10 )
   ::AddField ( "NACUCAJ", "N", 16, 6, {|| MasUnd() },      "Caj. Acu.",      .F., "Cajas acumuladas" ,           8 )
   ::AddField ( "NACUUND", "N", 16, 6, {|| MasUnd() },      "Und. Acu.",      .F., "Unidades acumuladas" ,        8 )
   ::AddField ( "NACUUXC", "N", 16, 6, {|| MasUnd() },      "UxC. Acu.",      .T., "Acumulado Cajas x Unidades",  8 )
   ::AddField ( "NTOTMOV", "N", 16, 6, {|| ::cPicOut },     "Total",          .T., "Total" ,                     10 )

   ::AddTmpIndex( "CCODRUT", "CCODRUT + CCODCLI + CCODFAM" )

   ::AddGroup( {|| ::oDbf:cCodRut },                  {|| "Ruta  : " + Rtrim( ::oDbf:cCodRut ) + "-" + oRetFld( ::oDbf:cCodRut, ::oDbfRut ) } , {|| "Total Ruta... "   } )
   ::AddGroup( {|| ::oDbf:cCodRut + ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + oRetFld( ::oDbf:cCodCli, ::oDbfCli ) }, {|| "Total Cliente... " } )

RETURN ( self )



static FUNCTION TRFFacInf_OpenFiles( ) ; local Self AS CLASS TRFFacInf := QSelf() AS CLASS TRFFacInf

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE


   ::oFacCliT := TDataCenter():oFacCliT()
   ::oFacCliT:OrdSetFocus( "CCODCLI" )

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()
   ::oFacRecT:OrdSetFocus( "CCODCLI" )

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TRFFacInf_CloseFiles( ) ; local Self AS CLASS TRFFacInf := QSelf() AS CLASS TRFFacInf

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end


   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacRecT := nil
   ::oFacRecL := nil


RETURN ( Self )



static FUNCTION TRFFacInf_lResource( cFld ) ; local Self AS CLASS TRFFacInf := QSelf() AS CLASS TRFFacInf

   local cEstado := "Todas"

   if !::StdResource( "INFGEN21C" )
      return .F.
   end





   if !::oDefRutInf( 70, 80, 90, 100, 900 )
      return .F.
   end





   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end





   if !::lDefFamInf( 150, 160, 170, 180, 500 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oDbfCli:Lastrec() )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )

   ::CreateFilter( aItmCli(), ::oDbfCli:cAlias )

RETURN .T.







static FUNCTION TRFFacInf_lGenerate( ) ; local Self AS CLASS TRFFacInf := QSelf() AS CLASS TRFFacInf

   local bValid   := {|| .T. }
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end






   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Rutas   : " + AllTrim( ::cRutOrg  )      + " > " + AllTrim( ::cRutDes ) }, {|| "Clientes: " + AllTrim( ::cCliOrg  )      + " > " + AllTrim( ::cCliDes ) }, {|| "Familias: " + AllTrim( ::cFamOrg )     + " > " + AllTrim( ::cFamDes ) }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] } }





   ::oDbfCli:OrdSetFocus( "COD" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfCli:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ), ::oDbfCli:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oDbfCli:GoTop()

   while !::lBreak .AND. !::oDbfCli:Eof()
   if ( ::lAllCli .OR. ( ::oDbfCli:Cod >= ::cCliOrg .AND. ::oDbfCli:Cod <= ::cCliDes ) )





      if ::oFacRecT:Seek( ::oDbfCli:Cod )

      while ::oDbfCli:Cod == ::oFacRecT:cCodCli .AND. !::oFacRecT:eof()








          if ( ::lAllRut .OR. ( ::oFacRecT:cCodRut >= ::cRutOrg .AND. ::oFacCliT:cCodRut <= ::cRutDes ) ) .AND. ( ::lAllCli .OR. ( ::oFacRecT:cCodCli >= ::cCliOrg .AND. ::oFacRecT:cCodCli <= ::cCliDes ) ) .AND. lChkSer( ::oFacRecT:cSerie, ::aSer )                                                         .AND. Eval( bValid )





             if ::oFacRecL:Seek( ::oFacCliT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac )





                     if ::oFacRecT:dFecFac >= ::dIniInf .AND. ::oFacRecT:dFecFac <= ::dFinInf

                      while ::oFacRecL:cSerie + Str( ::oFacRecL:nNumFac ) + ::oFacRecL:cSufFac == ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac .AND. !::oFacRecL:eof()

                         if ( ::lAllFam .OR. ( cCodFam( ::oFacRecL:cRef, ::oDbfArt ) >= ::cFamOrg .AND. cCodFam( ::oFacRecL:cRef, ::oDbfArt ) <= ::cFamDes ) )





                            if !::oDbf:Seek( ::oFacRecT:cCodRut + ::oFacRecT:cCodCli + cCodFam( ::oFacRecL:cRef, ::oDbfArt ) )

                               ::oDbf:Append()

                               ::oDbf:cCodRut := ::oFacRecT:cCodRut
                               ::oDbf:cCodCli := ::oFacRecT:cCodCli
                               ::oDbf:cCodFam := cCodFam( ::oFacRecL:cRef, ::oDbfArt )
                               ::oDbf:cNomFam := RetFamilia ( cCodFam( ::oFacRecL:cRef, ::oDbfArt ), ::oDbfFam:cAlias )
                               ::oDbf:cNomCli := ::oFacRecT:cNomcli
                               ::oDbf:dFecMov := ::oFacRecT:dFecFac
                               ::oDbf:nNumCaj := ::oFacRecL:nCanEnt
                               ::oDbf:nNumUnd := ::oFacRecL:nUniCaja
                               ::oDbf:nUndCaj := NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                               ::oDbf:nComAge := nComLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                               ::oDbf:nAcuImp := ::oFacRecL:nPreUnit
                               ::oDbf:nAcuCaj := ::oFacRecL:nCanEnt
                               ::oDbf:nAcuUnd := ::oFacRecL:nUniCaja
                               ::oDbf:nAcuUxc := NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                               ::oDbf:nTotMov := nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                               ::oDbf:Save()

                            else

                               ::oDbf:Load()

                               ::oDbf:nNumCaj += ::oFacRecL:nCanEnt
                               ::oDbf:nNumUnd += ::oFacRecL:nUniCaja
                               ::oDbf:nUndCaj += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                               ::oDbf:nComAge += nComLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                               ::oDbf:nAcuImp += ::oFacRecL:nPreUnit
                               ::oDbf:nAcuCaj += ::oFacRecL:nCanEnt
                               ::oDbf:nAcuUnd += ::oFacRecL:nUniCaja
                               ::oDbf:nAcuUxc += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                               ::oDbf:nTotMov += nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                               ::oDbf:Save()

                            end

                         end

                         ::oFacRecL:Skip()

                      end

                  else





                     while ::oFacRecL:cSerie + Str( ::oFacRecL:nNumFac ) + ::oFacRecL:cSufFac == ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac .AND. !::oFacRecL:eof()

                        if  !::oDbf:Seek( ::oFacRecT:cCodRut + ::oFacRecT:cCodCli + cCodFam( ::oFacRecL:cRef, ::oDbfArt ) )

                           ::oDbf:Append()

                           ::oDbf:cCodRut := ::oFacRecT:cCodRut
                           ::oDbf:cCodCli := ::oFacRecT:cCodCli
                           ::oDbf:cCodFam := cCodFam( ::oFacRecL:cRef, ::oDbfArt )
                           ::oDbf:cNomFam := RetFamilia ( cCodFam( ::oFacRecL:cRef, ::oDbfArt ), ::oDbfFam:cAlias )
                           ::oDbf:cNomCli := ::oFacRecT:cNomcli
                           ::oDbf:dFecMov := ::oFacRecT:dFecFac
                           ::oDbf:nNumCaj := 0
                           ::oDbf:nNumUnd := 0
                           ::oDbf:nUndCaj := 0
                           ::oDbf:nComAge := 0
                           ::oDbf:nAcuImp += ::oFacRecL:nPreUnit
                           ::oDbf:nAcuCaj += ::oFacRecL:nCanEnt
                           ::oDbf:nAcuUnd += ::oFacRecL:nUniCaja
                           ::oDbf:nAcuUxc += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                           ::oDbf:nTotMov += nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                           ::oDbf:Save()

                        else

                           ::oDbf:Load()

                           ::oDbf:nAcuImp += ::oFacRecL:nPreUnit
                           ::oDbf:nAcuCaj += ::oFacRecL:nCanEnt
                           ::oDbf:nAcuUnd += ::oFacRecL:nUniCaja
                           ::oDbf:nAcuUxc += NotCaja( ::oFacRecL:nCanEnt ) * ::oFacRecL:nUniCaja
                           ::oDbf:nTotMov += nImpLFacCli( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

                           ::oDbf:Save()

                        end

                        ::oFacRecL:Skip()

                     end

                  end

               end

            end

         ::oFacRecT:Skip()

      end

      end

      end

      ::oDbfCli:Skip()

      ::oMtrInf:AutoInc( ::oDbfCli:OrdKeyNo() )

   end

   ::oDbfCli:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ) )
   ::oMtrInf:AutoInc( ::oDbfCli:LastRec() )


    ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
