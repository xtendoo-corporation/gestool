#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\.\Prg\Tsysdata.prg"
_HB_CLASS TSysData ; function TSysData ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TSysData", iif( .F., { }, { @HBObject() } ), @TSysData() ) ) ;

    _HB_MEMBER { oDict } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDict"}, .F. )

    _HB_MEMBER New( cPath) AS CLASS TSysData; oClass:AddMethod( "New", @TSysData_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER cDbfByName(); oClass:AddInline( "cDbfByName", {|Self, cName | ( ( Self ) ), ::oDict:cDbfByName( cName ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER Activate(); oClass:AddInline( "Activate", {|Self, oDb | ( ( Self ) ), ::oDict:Activate( oDb ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER SyncAllDbf( cPathTmp); oClass:AddMethod( "SyncAllDbf", @TSysData_SyncAllDbf(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TSysData ;



static FUNCTION TSysData_New( cPath ) ; local Self AS CLASS TSysData := QSelf() AS CLASS TSysData

   local aoDbf    := Array( 3 )

   If( cPath == nil, cPath := cPatEmp(), ) ;

   ::oDict := TDict():New( ( cDriver() ), "cPath", !.T., .T., .F., .F., .F., "Diccionario de datos" )





































      aoDbf[1] := DbfServer( "Agenda.Dbf", "AGENDA" ):New( "Agenda.Dbf", "AGENDA", ( cDriver() ), "Listin telefonico", ( cPatDat() ) )

      aoDbf[1]:AddField( "CNIF", "C", 15, 0,, "CIF",,, "NIF", .F.,, .F., {} )
      aoDbf[1]:AddField( "CAPELLIDOS", "C", 40, 0,, "Nombre completo",,, "Nombre completo", .F.,, .F., {} )
      aoDbf[1]:AddField( "CDOMICILIO", "C", 40, 0,, "Domicilio",,, "Domicilio", .F.,, .F., {} )
      aoDbf[1]:AddField( "CPOBLACION", "C", 30, 0,, "Población",,, "Población", .F.,, .F., {} )
      aoDbf[1]:AddField( "CPROVINCIA", "C", 30, 0,, "Provincia",,, "Provincia", .F.,, .F., {} )
      aoDbf[1]:AddField( "CCODPOSTAL", "C", 5, 0,,,,, "Codigo Postal", .F.,, .F., {} )
      aoDbf[1]:AddField( "CTEL", "C", 12, 0,,,,, "Teléfono 1", .F.,, .F., {} )
      aoDbf[1]:AddField( "CMOV", "C", 12, 0,,,,, "Móvil", .F.,, .F., {} )
      aoDbf[1]:AddField( "CFAX", "C", 12, 0,,,,, "Fax", .F.,, .F., {} )
      aoDbf[1]:AddField( "CDESTEL", "C", 20, 0,,,,, "Nombre teléfono 1", .F.,, .F., {} )
      aoDbf[1]:AddField( "CDESMOV", "C", 20, 0,,,,, "Nombre móvil", .F.,, .F., {} )
      aoDbf[1]:AddField( "CDESFAX", "C", 20, 0,,,,, "Nombre fax", .F.,, .F., {} )
      aoDbf[1]:AddField( "COBSERVA", "C", 250, 0,, "Observaciones",,, "Observaciones", .F.,, .F., {} )
      aoDbf[1]:AddField( "LSELECT", "L", 1, 0,,,,, "", .F.,, .F., {} )

      aoDbf[1]:AddIndex( "CAPELLIDOS", "AGENDA.CDX", "UPPER( CAPELLIDOS )",,, .F., .F.,,,, .F., .F. )
      aoDbf[1]:AddIndex( "CNIF", "AGENDA.CDX", "CNIF",,, .F., .F.,,,, .F., .F. )

      ::oDict:AddDBF( aoDbf[1],,,,, )





      aoDbf[2] := DbfServer( "Tankes.Dbf", "TANKES" ):New( "Tankes.Dbf", "TANKES", ( cDriver() ), "Tanques de combustible", ( cPatEmp() ) )

      aoDbf[2]:AddField( "CCODTNK", "C", 3, 0,, "01",,, "Código", .F.,, .F., {} )
      aoDbf[2]:AddField( "CNOMTNK", "C", 35, 0,, "Nombre completo",,, "Nombre del tanque", .F.,, .F., {} )
      aoDbf[2]:AddField( "NLTRTNK", "N", 13, 0, "@EZ 999,999,999.999", 0,,, "Capacidad", .F.,, .F., {} )
      aoDbf[2]:AddField( "LSELECT", "L", 1, 0,,,,, "", .F.,, .T., {} )

      aoDbf[2]:AddIndex( "CCODTNK", "TANKES.CDX", "CCODTNK",,, .F., .F., "Código",,, .T., .F. )
      aoDbf[2]:AddIndex( "CNOMTNK", "TANKES.CDX", "CNOMTNK",,, .F., .F., "Nombre",,, .T., .F. )

      ::oDict:AddDBF( aoDbf[2],,,,, )




















































































RETURN ( Self )



static FUNCTION TSysData_SyncAllDbf( cPathTmp ) ; local Self AS CLASS TSysData := QSelf() AS CLASS TSysData

   local n

   FOR n := 1 TO ::oDict:nDbfCount
      lCheckDbf( ::oDict:aTDbf[ n ] )
   NEXT

RETURN ( Self )
