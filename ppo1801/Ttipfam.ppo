#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Ttipfam.prg"
_HB_CLASS TTipFam ; function TTipFam ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TTipFam", iif( .T., { @TInfGen() }, { @HBObject() } ), @TTipFam() ) ) ;

   _HB_MEMBER { AS LOGIC lAllCli } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllCli"}, .F. )
   _HB_MEMBER { AS LOGIC lAllTip } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllTip"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oCmbAnio } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCmbAnio"}, .F. )
   _HB_MEMBER { AS ARRAY aCmbAnio } ; oClass:AddMultiData( "ARRAY", { "Todos", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aCmbAnio"}, .F. )
   _HB_MEMBER { AS CHARACTER cCmbAnio } ; oClass:AddMultiData( "CHARACTER", "Todos", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCmbAnio"}, .F. )
   _HB_MEMBER { AS LOGIC lImporteMinimo } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lImporteMinimo"}, .F. )
   _HB_MEMBER { AS NUMERIC nImporteMinimo } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nImporteMinimo"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TTipFam_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TTipFam_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TTipFam_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TTipFam_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TTipFam_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lAppLine(); oClass:AddMethod( "lAppLine", @TTipFam_lAppLine(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lAppLineAlb(); oClass:AddMethod( "lAppLineAlb", @TTipFam_lAppLineAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Cabecera(); oClass:AddMethod( "Cabecera", @TTipFam_Cabecera(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Suma(); oClass:AddMethod( "Suma", @TTipFam_Suma(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Acumula(); oClass:AddMethod( "Acumula", @TTipFam_Acumula(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CabeceraAlb(); oClass:AddMethod( "CabeceraAlb", @TTipFam_CabeceraAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SumaAlb(); oClass:AddMethod( "SumaAlb", @TTipFam_SumaAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AcumulaAlb(); oClass:AddMethod( "AcumulaAlb", @TTipFam_AcumulaAlb(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TTipFam ;



static FUNCTION TTipFam_Create( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   ::AddField( "cCodRut", "C",  4, 0, {|| "@!" },          "Ruta",         .F., "Código ruta",                4  )
   ::AddField( "cCodCli", "C", 12, 0, {|| "@!" },          "Cod. cli.",    .F., "Código cliente",            12  )
   ::AddField( "cCodTip", "C",  4, 0, {|| "@!" },          "Cod. ",        .T., "Código tipo",                5  )
   ::AddField( "cNomTip", "C", 35, 0, {|| "@!" },          "Tipo artículo",.T., "Tipo de artículo",          35  )
   ::AddField( "cNomCli", "C", 50, 0, {|| "@!" },          "Nombre",       .F., "Nombre cliente",            35  )
   ::AddField( "nNumCaj", "N", 19, 6, {|| MasUnd() },      "Caj.",         .F., "Cajas",                     12  )
   ::AddField( "nNumUnd", "N", 19, 6, {|| MasUnd() },      "Und.",         .F., "Unidades",                  12  )
   ::AddField( "nUndCaj", "N", 19, 6, {|| MasUnd() },      "Tot. und.",    .T., "Total unidades",            12  )
   ::AddField( "nAcuImp", "N", 19, 6, {|| ::cPicOut },     "Imp.",         .T., "Importe",                   12  )
   ::AddField( "nAcuCaj", "N", 19, 6, {|| MasUnd() },      "Caj. acu.",    .F., "Cajas acumuladas" ,         12  )
   ::AddField( "nAcuUnd", "N", 19, 6, {|| MasUnd() },      "Und. acu.",    .T., "Unidades acumuladas" ,      12  )
   ::AddField( "nAcuUxc", "N", 19, 6, {|| MasUnd() },      "Tot. acu.",    .F., "Total unidades acumuladas", 12  )
   ::AddField( "nAcuPes", "N", 19, 6, {|| MasUnd() },      "Pes. acu.",    .F., "Total peso acumulado",      12  )
   ::AddField( "nTotMov", "N", 19, 6, {|| ::cPicOut },     "Imp. acu.",    .T., "Importe acumulado" ,        12  )
   ::AddField( "nComAge", "N", 19, 6, {|| ::cPicOut },     "Com. age.",    .T., "Comisión agente",           12  )

   ::AddTmpIndex( "cCodRut", "cCodRut + cCodCli + cCodTip" )

   ::AddGroup( {|| ::oDbf:cCodRut }, {|| "Ruta : " + Rtrim( ::oDbf:cCodRut ) + "-" + Rtrim( oRetFld( ::oDbf:cCodRut, ::oDbfRut ) ) }, {|| "Total Ruta... " } )
   ::AddGroup( {|| ::oDbf:cCodRut + ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( ::oDbf:cNomCli ) }, {|| "Total cliente... " } )

   ::bForReport   := {|| if( ::lImporteMinimo, ::oDbf:nAcuImp >= ::nImporteMinimo, .T. ) }

RETURN ( Self )



static FUNCTION TTipFam_OpenFiles( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT     := TDataCenter():oFacCliT()
   ::oFacCliT:OrdSetFocus( "cCodCli" )

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oAlbCliT := DbfServer( "ALBCLIT.DBF", ):NewOpen( "ALBCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliT:AddBag( "ALBCLIT.CDX" ) ; ::oAlbCliT:AddBag( ) ; ::oAlbCliT:AutoIndex()
   ::oAlbCliT:OrdSetFocus( "cCodCli" )

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
         ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TTipFam_CloseFiles( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oDbfArt  := nil

RETURN ( Self )



static FUNCTION TTipFam_lResource( cFld ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   local cEstado  := "Todas"

   if !::StdResource( "INF_GEN21B" )
      return .F.
   end





   if !::oDefRutInf( 70, 80, 90, 100, 900 )
      return .F.
   end





   if !::oDefCliInf( 110, 120, 130, 140, , 600 )
      return .F.
   end





   if !::oDefTipInf( 150, 160, 170, 180, 500 )
      return .F.
   end





   ::SetMetInf( ::oFacCliT )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )



   TCheckBox():ReDefine( 215, { | u | If( PCount()==0, ::lImporteMinimo, ::lImporteMinimo:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::nImporteMinimo, ::nImporteMinimo:= u ) }, ::oFld:aDialogs[1],, ::cPicOut,,,,,,, .F., {||     ::lImporteMinimo},, .F., .T.,,,,,, nil,,, )





   ::oCmbAnio := TComboBox():ReDefine( 300, { | u | If( PCount()==0, ::cCmbAnio, ::cCmbAnio:= u ) }, ::aCmbAnio, ::oFld:aDialogs[1],,,, "N/W*",,, .F.,,,,,,, "::oCmbAnio",,,,,,, )

   ::CreateFilter( aItmCli(), ::oDbfCli:cAlias )

RETURN .T.



static FUNCTION TTipFam_lGenerate( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   local cExpHead := ""
   local bValid   := {|| .T. }

   ::oDlg:Disable()
   ::oBtnCancel:Enable()

   ::oMtrInf:SetTotal( ::oDbfCli:Lastrec() )

   ::oDbf:Zap()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oFacCliT:lLiquidada }
      case ::oEstado:nAt == 3
         bValid   := {|| .T. }
   end








   ::aHeader   := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf )    + " > " + Dtoc( ::dFinInf )    }, {|| "Rutas    : " + if( ::lAllRut, "Todas", AllTrim( ::cRutOrg ) + " > " + AllTrim( ::cRutDes ) ) }, {|| "Clientes : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) }, {|| "Tip. Art.: " + if( ::lAllTip, "Todos", AllTrim( ::cTipOrg ) + " > " + AllTrim( ::cTipDes ) ) }, {|| "Estado   : " + ::aEstado[ ::oEstado:nAt ] }, {|| "Ejercicio: " + ::aCmbAnio[ ::oCmbAnio:nAt ] }, {|| if( ::lImporteMinimo, "Imp. Min.: " + AllTrim ( Trans( ::nImporteMinimo , MasUnd() ) ), "" ) } }


   ::oDbfCli:OrdSetFocus( "COD" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfCli:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ), ::oDbfCli:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oDbfCli:GoTop()

   while !::lBreak .AND. !::oDbfCli:Eof()


      if ( ::lAllRut .OR. ( ::oDbfCli:cCodRut >= ::cRutOrg .AND. ::oDbfCli:cCodRut <= ::cRutDes  ) ) .AND. ( ::lAllCli .OR. ( ::oDbfCli:Cod >= ::cCliOrg .AND. ::oDbfCli:Cod <= ::cCliDes ) )

      if ::lAllCli
         ::oDbf:Append()
         ::oDbf:Blank()
         ::oDbf:cCodRut := ::oDbfCli:cCodRut
         ::oDbf:cCodCli := ::oDbfCli:Cod
         ::oDbf:cNomCli := ::oDbfCli:Titulo
         ::oDbf:Save()
      end





      if ::oAlbCliT:Seek( ::oDbfCli:Cod )

         while ::oDbfCli:Cod == ::oAlbCliT:cCodCli .AND. !::oAlbCliT:eof()








            if ( ::lAllRut .OR. ( ::oAlbCliT:cCodRut >= ::cRutOrg .AND. ::oAlbCliT:cCodRut <= ::cRutDes ) ) .AND. ( ::lAllCli .OR. ( ::oAlbCliT:cCodCli >= ::cCliOrg .AND. ::oAlbCliT:cCodCli <= ::cCliDes ) ) .AND. lChkSer( ::oAlbCliT:cSerAlb, ::aSer )                                                        .AND. ::oAlbCliT:nFacturado < 3





               ::lAppLineAlb( ::oAlbCliT:dFecAlb >= ::dIniInf .AND. ::oAlbCliT:dFecAlb <= ::dFinInf )

            end

         ::oAlbCliT:Skip()

         end

      end





      if ::oFacCliT:Seek( ::oDbfCli:Cod )

         while ::oDbfCli:Cod == ::oFacCliT:cCodCli .AND. !::oFacCliT:eof()








         if ( ::lAllRut .OR. ( ::oFacCliT:cCodRut >= ::cRutOrg .AND. ::oFacCliT:cCodRut <= ::cRutDes ) ) .AND. ( ::lAllCli .OR. ( ::oFacCliT:cCodCli >= ::cCliOrg .AND. ::oFacCliT:cCodCli <= ::cCliDes ) ) .AND. lChkSer( ::oFacCliT:cSerie, ::aSer )                                                         .AND. Eval( bValid )





            ::lAppLine( ::oFacCliT:dFecFac >= ::dIniInf .AND. ::oFacCliT:dFecFac <= ::dFinInf )

         end

         ::oFacCliT:Skip()

         end

      end

      end

      ::oDbfCli:Skip()

      ::oMtrInf:AutoInc( ::oDbfCli:OrdKeyNo() )

   end

   ::oDbfCli:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfCli:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TTipFam_lAppLine( lSuma ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam





   if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

      while ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac == ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac .AND. !::oFacCliL:eof()

         if ::oDbfArt:Seek( ::oFacCliL:cRef )



            if ( ::lAllTip .OR. ( ::oDbfArt:cCodTip >= ::cTipOrg .AND. ::oDbfArt:cCodTip <= ::cTipDes ) ) .AND.  !::oFacCliL:lTotLin                                                                        .AND.  !::oFacCliL:lControl





               if !::oDbf:Seek( ::oFacCliT:cCodRut + ::oFacCliT:cCodCli + ::oDbfArt:cCodTip )

                  ::oDbf:Append()
                  ::oDbf:Blank()

                  ::Cabecera()

                  if lSuma
                     ::Suma()
                  end

                  if ( ::cCmbAnio == "Todos" .OR. Val( ::cCmbAnio ) == Year( ::oFacCliT:dFecFac ) )
                     ::Acumula()
                  end

                  ::oDbf:Save()

               else

                  ::oDbf:Load()

                  if lSuma
                     ::Suma()
                  end

                  if ( ::cCmbAnio == "Todos" .OR. Val( ::cCmbAnio ) == Year( ::oFacCliT:dFecFac ) )
                     ::Acumula()
                  end

                  ::oDbf:Save()

               end

            end

         end

         ::oFacCliL:Skip()

      end

   end

RETURN ( Self )




static FUNCTION TTipFam_lAppLineAlb( lSuma ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam





   if ::oAlbCliL:Seek( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb )

      while ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb == ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb .AND. !::oAlbCliL:eof()

         if ::oDbfArt:Seek( ::oAlbCliL:cRef )



            if ( ::lAllTip .OR. ( ::oDbfArt:cCodTip >= ::cTipOrg .AND. ::oDbfArt:cCodTip <= ::cTipDes ) ) .AND.  !::oAlbCliL:lTotLin                                                                        .AND.  !::oAlbCliL:lControl





               if !::oDbf:Seek( ::oAlbCliT:cCodRut + ::oAlbCliT:cCodCli + ::oDbfArt:cCodTip )

                  ::oDbf:Append()
                  ::oDbf:Blank()

                  ::CabeceraAlb()

                  if lSuma
                     ::SumaAlb()
                  end

                  if ( ::cCmbAnio == "Todos" .OR. Val( ::cCmbAnio ) == Year( ::oAlbCliT:dFecAlb ) )
                     ::AcumulaAlb()
                  end

                  ::oDbf:Save()

               else

                  ::oDbf:Load()

                  if lSuma
                     ::SumaAlb()
                  end

                  if ( ::cCmbAnio == "Todos" .OR. Val( ::cCmbAnio ) == Year( ::oAlbCliT:dFecAlb ) )
                     ::AcumulaAlb()
                  end

                  ::oDbf:Save()

               end

            end

         end

         ::oAlbCliL:Skip()

      end

   end

RETURN ( Self )



static FUNCTION TTipFam_Cabecera( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   ::oDbf:cCodRut := ::oFacCliT:cCodRut
   ::oDbf:cCodCli := ::oFacCliT:cCodCli
   ::oDbf:cCodTip := ::oDbfArt:cCodTip
   ::oDbf:cNomTip := oRetFld( ::oDbf:cCodTip, ::oTipArt:oDbf )
   ::oDbf:cNomCli := ::oFacCliT:cNomcli

RETURN ( Self )



static FUNCTION TTipFam_Suma( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   ::oDbf:nNumCaj += ::oFacCliL:nCanEnt
   ::oDbf:nNumUnd += ::oFacCliL:nUniCaja
   ::oDbf:nUndCaj += nTotNFacCli( ::oFacCliL )
   ::oDbf:nComAge += nComLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
   ::oDbf:nAcuImp += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

RETURN ( Self )



static FUNCTION TTipFam_Acumula( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   ::oDbf:nAcuCaj += ::oFacCliL:nCanEnt
   ::oDbf:nAcuUnd += ::oFacCliL:nUniCaja
   ::oDbf:nAcuUxc += nTotNFacCli( ::oFacCliL )
   ::oDbf:nAcuPes += nTotNFacCli( ::oFacCliL ) * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nTotMov += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, .F., .T., .F., .F. )

RETURN ( Self )



static FUNCTION TTipFam_CabeceraAlb( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   ::oDbf:cCodRut := ::oAlbCliT:cCodRut
   ::oDbf:cCodCli := ::oAlbCliT:cCodCli
   ::oDbf:cCodTip := ::oDbfArt:cCodTip
   ::oDbf:cNomTip := oRetFld( ::oDbf:cCodTip, ::oTipArt:oDbf )
   ::oDbf:cNomCli := ::oAlbCliT:cNomcli

RETURN ( Self )



static FUNCTION TTipFam_SumaAlb( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   ::oDbf:nNumCaj += ::oAlbCliL:nCanEnt
   ::oDbf:nNumUnd += ::oAlbCliL:nUniCaja
   ::oDbf:nUndCaj += nTotNAlbCli( ::oAlbCliL )
   ::oDbf:nComAge += nComLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
   ::oDbf:nAcuImp += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

RETURN ( Self )



static FUNCTION TTipFam_AcumulaAlb( ) ; local Self AS CLASS TTipFam := QSelf() AS CLASS TTipFam

   ::oDbf:nAcuCaj += ::oAlbCliL:nCanEnt
   ::oDbf:nAcuUnd += ::oAlbCliL:nUniCaja
   ::oDbf:nAcuUxc += nTotNAlbCli( ::oAlbCliL )
   ::oDbf:nAcuPes += nTotNAlbCli( ::oAlbCliL ) * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nTotMov += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

RETURN ( Self )
