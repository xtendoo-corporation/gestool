#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\Tultart.prg"
_HB_CLASS TIUltArt ; function TIUltArt ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TIUltArt", iif( .T., { @TInfGen() }, { @HBObject() } ), @TIUltArt() ) ) ;

   _HB_MEMBER { AS LOGIC lSinVta } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSinVta"}, .F. )
   _HB_MEMBER { AS NUMERIC nSinVta } ; oClass:AddMultiData( "NUMERIC", 15, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nSinVta"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS CHARACTER cAgeDoc } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAgeDoc"}, .F. )
   _HB_MEMBER { AS CHARACTER cCliDoc } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cCliDoc"}, .F. )
   _HB_MEMBER { AS CHARACTER cNomDoc } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNomDoc"}, .F. )
   _HB_MEMBER { dLasDoc } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dLasDoc"}, .F. )
   _HB_MEMBER { AS CHARACTER cNumDoc } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNumDoc"}, .F. )
   _HB_MEMBER { AS CHARACTER cTipDoc } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTipDoc"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TIUltArt_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TIUltArt_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TIUltArt_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TIUltArt_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TIUltArt_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetInfCli(); oClass:AddMethod( "GetInfCli", @TIUltArt_GetInfCli(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetDocument(); oClass:AddMethod( "GetDocument", @TIUltArt_GetDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddDocument(); oClass:AddMethod( "AddDocument", @TIUltArt_AddDocument(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER AddEmpty(); oClass:AddMethod( "AddEmpty", @TIUltArt_AddEmpty(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddFactura(); oClass:AddMethod( "AddFactura", @TIUltArt_AddFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddAlbaran(); oClass:AddMethod( "AddAlbaran", @TIUltArt_AddAlbaran(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TIUltArt ;



static FUNCTION TIUltArt_Create( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   ::AddField ( "cCodAge", "C",  3, 0, {|| "@!" },         "Cód. age.",               .F., "Código agente"           ,  8 )
   ::AddField ( "cNomAge", "C", 50, 0, {|| "@!" },         "Agente",                  .F., "Nombre agente"           , 25 )
   ::AddField ( "cCodCli", "C", 12, 0, {|| "@!" },         "Cód. cli",                .F., "Código cliente"          ,  8 )
   ::AddField ( "cNomCli", "C", 50, 0, {|| "@!" },         "Cliente",                 .F., "Nombre cliente"          , 25 )
   ::AddField ( "cNifCli", "C", 15, 0, {|| "@!" },         "Nif",                     .F., "Nif"                     ,  8 )
   ::AddField ( "cDomCli", "C", 35, 0, {|| "@!" },         "Domicilio",               .F., "Domicilio"               , 25 )
   ::AddField ( "cPobCli", "C", 25, 0, {|| "@!" },         "Población",               .F., "Población"               , 20 )
   ::AddField ( "cProCli", "C", 20, 0, {|| "@!" },         "Provincia",               .F., "Provincia"               , 20 )
   ::AddField ( "cCdpCli", "C",  7, 0, {|| "@!" },         "CP",                      .F., "Código postal"           , 20 )
   ::AddField ( "cTlfCli", "C", 12, 0, {|| "@!" },         "Tlf",                     .F., "Teléfono"                ,  7 )
   ::AddField ( "cTipDoc", "C", 10, 0, {|| "@!" },         "Tipo documento",          .F., "Tipo documento"          , 12 )
   ::AddField ( "cDocFac", "C", 12, 0, {|| "@!" },         "Documento",               .F., "Documento"               , 12 )
   ::AddField ( "dFecFac", "D",  8, 0, {|| "" },           "Fecha",                   .F., "Fecha factura"           , 10 )
   ::AddField ( "nBasFac", "N", 16, 6, {|| ::cPicOut },    "Base",                    .F., "Base"                    , 12 )
   ::AddField ( "nIvaFac", "N", 16, 6, {|| ::cPicOut },    cImp(),                  .F., cImp()                  , 12 )
   ::AddField ( "nReqFac", "N", 16, 6, {|| ::cPicOut },    "R.E.",                    .F., "R.E."                    , 12 )
   ::AddField ( "nTotFac", "N", 16, 6, {|| ::cPicOut },    "Total",                   .F., "Total"                   , 12 )
   ::AddField ( "nTotCob", "N", 16, 6, {|| ::cPicOut },    "Cobrado",                 .F., "Total cobrado"           , 12 )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "" },           "Código artículo",               .T., "Código artículo"         , 12 )
   ::AddField ( "cNomArt", "C",100, 0, {|| "" },           "Nom. art.",               .T., "Nombre artículo"         , 30 )
   ::AddField ( "cCodAlm", "C", 16, 0, {|| "" },           "Alm.",                    .T., "Código almecén"          ,  4 )
   ::AddField ( "nCajArt", "N", 16, 6, {|| ::cPicOut },    cNombreCajas(),            lUseCaj(), cNombreCajas()      , 12 )
   ::AddField ( "nUndArt", "N", 16, 6, {|| ::cPicOut },    cNombreUnidades(),         lUseCaj(), cNombreUnidades()   , 12 )
   ::AddField ( "nTotArt", "N", 16, 6, {|| ::cPicOut },    "Tot. " + cNombreUnidades(),.T., "Total " + cNombreUnidades() , 12 )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicOut },    "Tot. imp.",               .T., "Total importe"           , 12 )

   ::AddTmpIndex ("cCodAge", "cCodAge + cCodCli + cCodArt")

   ::AddGroup( {|| ::oDbf:cCodAge }, {|| "Agente : " + Rtrim( ::oDbf:cCodAge ) + "-" + Rtrim( oRetFld( ::oDbf:cCodAge, ::oDbfAge ) ) }, {||"Total agente..."} )
   ::AddGroup( {|| ::oDbf:cCodAge + ::oDbf:cCodCli }, {|| ::GetInfCli() }, {||"Total cliente..."} )

RETURN ( self )



static FUNCTION TIUltArt_OpenFiles( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FacCliL.DBF", ):NewOpen( "FacCliL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FacCliL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAlbCliT := TDataCenter():oAlbCliT()

   ::oAlbCliL := DbfServer( "AlbCliL.DBF", ):NewOpen( "AlbCliL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "AlbCliL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oAntCliT := DbfServer( "AntCliT.DBF", ):NewOpen( "AntCliT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "AntCliT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TIUltArt_CloseFiles( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end
   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacCliP := nil
   ::oAlbCliT := nil
   ::oAlbCliL := nil
   ::oDbfIva  := nil
   ::oAntCliT := nil

RETURN ( Self )



static FUNCTION TIUltArt_lResource( cFld ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   if !::StdResource( "INF_GEN29B" )
      return .F.
   end





   if !::oDefAgeInf( 110, 120, 130, 140, 500 )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   if !::lDefArtInf( 150, 160, 170, 180, 800 )
      return .F.
   end



   TCheckBox():ReDefine( 190, { | u | If( PCount()==0, ::lSinVta, ::lSinVta:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )







   TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::nSinVta, ::nSinVta:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      999},, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfCli:Lastrec() )

   ::CreateFilter( aItmCli(), ::oDbfCli:cAlias )

RETURN .T.






static FUNCTION TIUltArt_lGenerate( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   local cExpHead
   local aTotFac

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   ::oFacCliT:GetStatus()
   ::oFacCliT:OrdSetFocus( "cCodCli" )

   ::oAlbCliT:GetStatus()
   ::oAlbCliT:OrdSetFocus( "cCodCli" )









   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf )    }, {|| "Cliente   : " + Rtrim( ::cCliOrg )  + " > " + Rtrim( ::cCliDes )   }, {|| "Agente    : " + Rtrim( ::cAgeOrg )  + " > " + Rtrim( ::cAgeDes )   }, {|| "Artículos : " + Rtrim( ::cArtOrg )  + " > " + Rtrim( ::cArtDes ) } }

   ::oDbfCli:OrdSetFocus( "COD" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfCli:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ), ::oDbfCli:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oDbfCli:GoTop()
   while !::lBreak .AND. !::oDbfCli:Eof()


      if ( ::lAllCli .OR. ( ::oDbfCli:Cod >= ::cCliOrg .AND. ::oDbfCli:Cod <= ::cCliDes ) )           .AND. ( ::lAgeAll .OR. ( ::oDbfCli:cAgente >= ::cAgeOrg .AND. ::oDbfCli:cAgente <= ::cAgeDes ) )

         ::GetDocument()

         if ::lSinVta

            if Empty( ::dLasDoc ) .OR. ( GetSysDate() - ::dLasDoc ) >= ::nSinVta
               ::AddDocument()
            end

         else

            if !Empty( ::dLasDoc )
               ::AddDocument()
            end

         end

      end

      ::oDbfCli:Skip()

      ::oMtrInf:AutoInc( ::oDbfCli:OrdKeyNo() )

   end

   ::oDbfCli:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfCli:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfCli:LastRec() )

   ::oFacCliT:SetStatus()
   ::oAlbCliT:SetStatus()

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TIUltArt_GetInfCli( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   local cTxt  := "Cliente : " + Rtrim( ::oDbf:cCodCli ) + " - " + Rtrim( oRetFld( ::oDbf:cCodCli, ::oDbfCli ) ) + " - "
         cTxt  += AllTrim( ::oDbf:cTipDoc ) + " : " + AllTrim( ::oDbf:cDocFac ) + " - "
         cTxt  += "Fecha : " + Dtoc( ::oDbf:dFecFac )

RETURN ( cTxt )



static FUNCTION TIUltArt_GetDocument( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   ::cCliDoc      := ::oDbfCli:Cod
   ::cNomDoc      := ::oDbfCli:Titulo
   ::cAgeDoc      := ::oDbfCli:cAgente
   ::dLasDoc      := Ctod( "" )
   ::cNumDoc      := ""
   ::cTipDoc      := ""

   if ::oAlbCliT:Seek( ::oDbfCli:Cod )

      while ::oAlbCliT:cCodCli == ::oDbfCli:Cod .AND. !::oAlbCliT:Eof()






         if !lFacturado( ::oAlbCliT )                                                                .AND. ( ::lAgeAll .OR. ::oAlbCliT:cCodAge >= ::cAgeOrg .AND. ::oAlbCliT:cCodAge <= ::cAgeDes ) .AND. ::oAlbCliT:dFecAlb >= ::dIniInf                                                          .AND. ::oAlbCliT:dFecAlb <= ::dFinInf                                                          .AND. lChkSer( ::oAlbCliT:cSerAlb, ::aSer )                                                    .AND. ::oAlbCliT:dFecAlb >= ::dLasDoc

            ::cAgeDoc   := ::oAlbCliT:cCodAge
            ::cCliDoc   := ::oAlbCliT:cCodCli
            ::dLasDoc   := ::oAlbCliT:dFecAlb
            ::cNumDoc   := ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb
            ::cTipDoc   := "Albaran"

         end

         ::oAlbCliT:Skip()

      end

   end

   if ::oFacCliT:Seek( ::oDbfCli:Cod )

      while ::oFacCliT:cCodCli == ::oDbfCli:Cod .AND. !::oFacCliT:Eof()





         if ( ::lAgeAll .OR. ::oFacCliT:cCodAge >= ::cAgeOrg .AND. ::oFacCliT:cCodAge <= ::cAgeDes ) .AND. ::oFacCliT:dFecFac >= ::dIniInf                                                          .AND. ::oFacCliT:dFecFac <= ::dFinInf                                                          .AND. lChkSer( ::oFacCliT:cSerie, ::aSer )                                                     .AND. ::oFacCliT:dFecFac >= ::dLasDoc

            ::cAgeDoc   := ::oFacCliT:cCodAge
            ::cCliDoc   := ::oFacCliT:cCodCli
            ::dLasDoc   := ::oFacCliT:dFecFac
            ::cNumDoc   := ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac
            ::cTipDoc   := "Factura"

         end

         ::oFacCliT:Skip()

      end

   end

RETURN ( Self )



static FUNCTION TIUltArt_AddDocument( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   do case
      case ::cTipDoc == ""
         ::AddEmpty()
      case ::cTipDoc == "Factura"
         ::AddFactura()
      case ::cTipDoc == "Albaran"
         ::AddAlbaran()
   end

RETURN ( nil )



static FUNCTION TIUltArt_AddFactura( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   local aTotFac





   if ::oFacCliL:Seek( ::cNumDoc )

      while ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac == ::cNumDoc .AND. !::oFacCliL:Eof()






         if !Empty( ::oFacCliL:cRef )                       .AND.  ( ::lAllArt .OR. ( ::oFacCliL:cRef >= ::cArtOrg .AND. ::oFacCliL:cRef <= ::cArtDes ) )





            if !::oDbf:Seek( ::cAgeDoc + ::cCliDoc + ::oFacCliL:cRef )

               ::oDbf:Append()
               ::oDbf:Blank()

               ::oDbf:cTipDoc := "Factura"
               ::oDbf:dFecFac := ::dLasDoc

               ::oDbf:dFecFac := ::dLasDoc
               ::oDbf:cCodAge := ::cAgeDoc
               ::oDbf:cCodCli := ::cCliDoc
               ::oDbf:cNomCli := ::cNomDoc

               ::AddCliente( ::cCliDoc, ::oFacCliT, .F. )

               ::oDbf:cDocFac := StrTran( ::oFacCliL:cSerie + "/" + Str( ::oFacCliL:nNumFac ) + "/" + ::oFacCliL:cSufFac, " ", "" )
               aTotFac        := aTotFacCli( ::cNumDoc, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias, ::oAntCliT:cAlias )
               ::oDbf:nBasFac := aTotFac[ 1 ] - aTotFac[ 5 ] - aTotFac[ 6 ]
               ::oDbf:nIvaFac := aTotFac[ 2 ]
               ::oDbf:nReqFac := aTotFac[ 3 ]
               ::oDbf:nTotFac := aTotFac[ 4 ]

               ::oDbf:cCodArt := ::oFacCliL:cRef
               ::oDbf:cNomArt := ::oFacCliL:cDetalle

               ::oDbf:nCajArt := ::oFacCliL:nCanEnt
               ::oDbf:nUndArt := ::oFacCliL:nUniCaja
               ::oDbf:nTotArt := nTotNFacCli( ::oFacCliL )
               ::oDbf:nImpArt := nTotLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
               ::oDbf:cCodAlm := ::oFacCliL:cAlmLin

               ::oDbf:Save()

            else

               ::oDbf:Load()

               ::oDbf:nCajArt += ::oFacCliL:nCanEnt
               ::oDbf:nUndArt += ::oFacCliL:nUniCaja
               ::oDbf:nTotArt += nTotNFacCli( ::oFacCliL )
               ::oDbf:nImpArt += nTotLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )

               ::oDbf:Save()

            end

         end

         ::oFacCliL:Skip()

      end

   end

RETURN ( Self )



static FUNCTION TIUltArt_AddAlbaran( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   local aTotAlb





   if ::oAlbCliL:Seek( ::cNumDoc )

      while ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb == ::cNumDoc .AND. !::oAlbCliL:Eof()






         if !Empty( ::oAlbCliL:cRef )                       .AND. ( ::lAllArt .OR. ( ::oAlbCliL:cRef >= ::cArtOrg .AND. ::oAlbCliL:cRef <= ::cArtDes ) )





            if !::oDbf:Seek( ::cAgeDoc + ::cCliDoc + ::oAlbCliL:cRef )

               ::oDbf:Append()
               ::oDbf:Blank()

               ::oDbf:cTipDoc := "Albaran"

               ::oDbf:dFecFac := ::dLasDoc
               ::oDbf:cCodAge := ::cAgeDoc
               ::oDbf:cCodCli := ::cCliDoc
               ::oDbf:cNomCli := ::cNomDoc

               ::AddCliente( ::cCliDoc, ::oAlbCliT, .F. )

               ::oDbf:cDocFac := StrTran( ::oAlbCliL:cSerAlb + "/" + Str( ::oAlbCliL:nNumAlb ) + "/" + ::oAlbCliL:cSufAlb, " ", "" )
               aTotAlb        := aTotAlbCli( ::cNumDoc, ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
               ::oDbf:nBasFac := aTotAlb[ 1 ] - aTotAlb[ 5 ] - aTotAlb[ 6 ]
               ::oDbf:nIvaFac := aTotAlb[ 2 ]
               ::oDbf:nReqFac := aTotAlb[ 3 ]
               ::oDbf:nTotFac := aTotAlb[ 4 ]

               ::oDbf:cCodArt := ::oAlbCliL:cRef
               ::oDbf:cNomArt := ::oAlbCliL:cDetalle

               ::oDbf:nCajArt := ::oAlbCliL:nCanEnt
               ::oDbf:nUndArt := ::oAlbCliL:nUniCaja
               ::oDbf:nTotArt := nTotNAlbCli( ::oAlbCliL )
               ::oDbf:nImpArt := nTotLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
               ::oDbf:cCodAlm := ::oAlbCliL:cAlmLin

               ::oDbf:Save()

            else

               ::oDbf:Load()

               ::oDbf:nCajArt += ::oAlbCliL:nCanEnt
               ::oDbf:nUndArt += ::oAlbCliL:nUniCaja
               ::oDbf:nTotArt += nTotNAlbCli( ::oAlbCliL )
               ::oDbf:nImpArt += nTotLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )

               ::oDbf:Save()

            end

         end

         ::oAlbCliL:Skip()

      end

   end

RETURN ( Self )



static FUNCTION TIUltArt_AddEmpty( ) ; local Self AS CLASS TIUltArt := QSelf() AS CLASS TIUltArt

   ::oDbf:Append()
   ::oDbf:Blank()

   ::oDbf:cTipDoc := ""
   ::oDbf:dFecFac := ::dLasDoc
   ::oDbf:cCodAge := ::cAgeDoc
   ::oDbf:cCodCli := ::cCliDoc
   ::oDbf:cNomCli := ::cNomDoc

   ::oDbf:Save()

RETURN ( Self )
