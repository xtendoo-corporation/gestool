#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 7 ".\.\Prg\Tultcom.prg"
_HB_CLASS TIUltCom ; function TIUltCom ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TIUltCom", iif( .T., { @TInfGen() }, { @HBObject() } ), @TIUltCom() ) ) ;

   _HB_MEMBER { AS LOGIC lSinCom } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSinCom"}, .F. )
   _HB_MEMBER { AS NUMERIC nSinCom } ; oClass:AddMultiData( "NUMERIC", 15, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nSinCom"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oAlbPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAlbPrvL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS CHARACTER cPrvFac } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPrvFac"}, .F. )
   _HB_MEMBER { dLasFac } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dLasFac"}, .F. )
   _HB_MEMBER { AS CHARACTER cNumFac } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNumFac"}, .F. )
   _HB_MEMBER { AS CHARACTER cPrvAlb } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cPrvAlb"}, .F. )
   _HB_MEMBER { dLasAlb } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dLasAlb"}, .F. )
   _HB_MEMBER { AS CHARACTER cNumAlb } ; oClass:AddMultiData( "CHARACTER", "", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cNumAlb"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TIUltCom_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TIUltCom_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TIUltCom_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TIUltCom_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TIUltCom_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetInfPrv(); oClass:AddMethod( "GetInfPrv", @TIUltCom_GetInfPrv(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetFactura(); oClass:AddMethod( "GetFactura", @TIUltCom_GetFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddFactura(); oClass:AddMethod( "AddFactura", @TIUltCom_AddFactura(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GetAlbaran(); oClass:AddMethod( "GetAlbaran", @TIUltCom_GetAlbaran(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddAlbaran(); oClass:AddMethod( "AddAlbaran", @TIUltCom_AddAlbaran(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TIUltCom ;



static FUNCTION TIUltCom_Create( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   ::AddField ( "cCodPrv", "C", 12, 0, {|| "@!" },         "Cód. Prv",                .F., "Código Prvente"          ,  8 )
   ::AddField ( "cNomPrv", "C", 50, 0, {|| "@!" },         "Prvente",                 .F., "Nombre Prvente"          , 25 )
   ::AddField ( "cNifPrv", "C", 15, 0, {|| "@!" },         "Nif",                     .F., "Nif"                     ,  8 )
   ::AddField ( "cDomPrv", "C", 35, 0, {|| "@!" },         "Domicilio",               .F., "Domicilio"               , 25 )
   ::AddField ( "cPobPrv", "C", 25, 0, {|| "@!" },         "Población",               .F., "Población"               , 20 )
   ::AddField ( "cProPrv", "C", 20, 0, {|| "@!" },         "Provincia",               .F., "Provincia"               , 20 )
   ::AddField ( "cCdpPrv", "C",  7, 0, {|| "@!" },         "CP",                      .F., "Código postal"           , 20 )
   ::AddField ( "cTlfPrv", "C", 12, 0, {|| "@!" },         "Tlf",                     .F., "Teléfono"                ,  7 )
   ::AddField ( "cTipDoc", "C", 10, 0, {|| "@!" },         "Tipo documento",          .F., "Tipo documento"          , 12 )
   ::AddField ( "cDocFac", "C", 12, 0, {|| "@!" },         "Documento",               .F., "Documento"               , 12 )
   ::AddField ( "dFecFac", "D",  8, 0, {|| "" },           "Fecha",                   .F., "Fecha factura"           ,  8 )
   ::AddField ( "nBasFac", "N", 16, 6, {|| ::cPicOut },    "Base",                    .F., "Base"                    , 12 )
   ::AddField ( "nIvaFac", "N", 16, 6, {|| ::cPicOut },    cImp(),                  .F., cImp()                  , 12 )
   ::AddField ( "nReqFac", "N", 16, 6, {|| ::cPicOut },    "R.E.",                    .F., "R.E."                    , 12 )
   ::AddField ( "nTotFac", "N", 16, 6, {|| ::cPicOut },    "Total",                   .F., "Total"                   , 12 )
   ::AddField ( "nTotCob", "N", 16, 6, {|| ::cPicOut },    "Cobrado",                 .F., "Total cobrado"           , 12 )
   ::AddField ( "cCodFam", "C", 16, 0, {|| "" },           "Cod. fam.",               .T., "Código família"          ,  8 )
   ::AddField ( "cNomFam", "C", 40, 0, {|| "" },           "Nom. fam.",               .T., "Nombre família"          , 20 )
   ::AddField ( "nCajFam", "N", 16, 6, {|| ::cPicOut },    cNombreCajas(),            lUseCaj(), cNombreCajas()      , 12 )
   ::AddField ( "nUndFam", "N", 16, 6, {|| ::cPicOut },    cNombreUnidades(),         lUseCaj(), cNombreUnidades()   , 12 )
   ::AddField ( "nTotFam", "N", 16, 6, {|| ::cPicOut },    "Tot. " + cNombreUnidades(),.T., "Total " + cNombreUnidades(), 12 )
   ::AddField ( "nImpFam", "N", 16, 6, {|| ::cPicOut },    "Tot. imp.",               .T., "Total importe"           , 12 )

   ::AddTmpIndex ( "cCodPrv", "cCodPrv + cCodFam" )
   ::AddGroup( {|| ::oDbf:cCodPrv }, {|| ::GetInfPrv() }, {||"Total Proveedor..."} )

RETURN ( self )



static FUNCTION TIUltCom_OpenFiles( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   ::oAlbPrvT := DbfServer( "ALBPROVT.DBF", ):NewOpen( "ALBPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "ALBPROVT.CDX" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

   ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TIUltCom_CloseFiles( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end
   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end
   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end
   if !Empty( ::oAlbPrvT ) .AND. ::oAlbPrvT:Used()
      ::oAlbPrvT:End()
   end
   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   ::oFacPrvT := nil
   ::oFacPrvL := nil
   ::oFacPrvP := nil
   ::oAlbPrvT := nil
   ::oAlbPrvL := nil
   ::oDbfIva  := nil
   ::oDbfArt  := nil

RETURN ( Self )



static FUNCTION TIUltCom_lResource( cFld ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   if !::StdResource( "INF_GEN29A" )
      return .F.
   end





   ::oDefPrvInf( 70, 80, 90, 100, 900 )





   ::lDefFamInf( 150, 160, 170, 180, 600 )



   TCheckBox():ReDefine( 190, { | u | If( PCount()==0, ::lSinCom, ::lSinCom:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )







   TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::nSinCom, ::nSinCom:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      999},, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfPrv:Lastrec() )

   ::CreateFilter( aItmPrv(), ::oDbfPrv:cAlias )

RETURN .T.






static FUNCTION TIUltCom_lGenerate( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   local aTotFac
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()

   ::oFacPrvT:GetStatus()
   ::oFacPrvT:OrdSetFocus( "cCodPrv" )

   ::oAlbPrvT:GetStatus()
   ::oAlbPrvT:OrdSetFocus( "cCodPrv" )








   ::aHeader   := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf )   + " > " + Dtoc( ::dFinInf )    }, {|| "Proveedor : " + Rtrim( ::cPrvOrg )  + " > " + Rtrim( ::cPrvDes )   }, {|| "Família   : " + Rtrim( ::cFamOrg )+ " > " + Rtrim( ::cFamDes ) } }

   ::oDbfPrv:OrdSetFocus( "COD" )

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       := ::oFilter:cExpresionFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfPrv:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oDbfPrv:cFile ), ::oDbfPrv:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oDbfPrv:GoTop()

   while !::lBreak .AND. !::oDbfPrv:Eof()

      if ( ::lAllPrv .OR. ( ::oDbfPrv:Cod >= ::cPrvOrg .AND. ::oDbfPrv:Cod <= ::cPrvDes ) )

         ::GetFactura()
         ::GetAlbaran()

         do case


            case !Empty( ::dLasFac )                        .AND. ::dLasFac >= ::dLasAlb                       .AND. if( ::lSinCom, ( GetSysDate() - ::dLasFac ) >= ::nSinCom, .T. )

               ::AddFactura()



            case !Empty( ::dLasAlb )                        .AND. ::dLasAlb > ::dLasFac                        .AND. if( ::lSinCom, ( GetSysDate() - ::dLasFac ) >= ::nSinCom, .T. )

               ::AddAlbaran()

         end

      end

      ::oDbfPrv:Skip()

      ::oMtrInf:AutoInc( ::oDbfPrv:OrdKeyNo() )

   end

   ::oDbfPrv:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oDbfPrv:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfPrv:LastRec() )

   ::oFacPrvT:SetStatus()
   ::oAlbPrvT:SetStatus()

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



static FUNCTION TIUltCom_GetInfPrv( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   local cTxt  := "Proveedor : " + Rtrim( ::oDbf:cCodPrv ) + " - " + Rtrim( oRetFld( ::oDbf:cCodPrv, ::oDbfPrv ) ) + " - "
         cTxt  += AllTrim( ::oDbf:cTipDoc ) + " : " + AllTrim( ::oDbf:cDocFac ) + " - "
         cTxt  += "Fecha : " + Dtoc( ::oDbf:dFecFac ) + " - "
         cTxt  += "Importe : " + Ltrim( Trans( ::oDbf:nBasFac, ::cPicOut ) )

RETURN ( cTxt )



static FUNCTION TIUltCom_GetFactura( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   local lGetFac  := .F.

   ::dLasFac      := Ctod( "" )

   if ::oFacPrvT:Seek( ::oDbfPrv:Cod )

      while ::oFacPrvT:cCodPrv == ::oDbfPrv:Cod .AND. !::oFacPrvT:Eof()




         if ::oFacPrvT:dFecFac >= ::dIniInf           .AND. ::oFacPrvT:dFecFac <= ::dFinInf           .AND. lChkSer( ::oFacPrvT:cSerFac, ::aSer )      .AND. ::oFacPrvT:dFecFac > ::dLasFac

            ::cPrvFac   := ::oFacPrvT:cCodPrv
            ::dLasFac   := ::oFacPrvT:dFecFac
            ::cNumFac   := ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac
            lGetFac     := .T.

         end

         ::oFacPrvT:Skip()

      end

   end

RETURN ( lGetFac )



static FUNCTION TIUltCom_AddFactura( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   local aTotFac
   local cCodFam





   if ::oFacPrvL:Seek( ::cNumFac )

      while ::oFacPrvL:cSerFac + Str( ::oFacPrvL:nNumFac ) + ::oFacPrvL:cSufFac == ::cNumFac .AND. !::oFacPrvL:Eof()





         cCodFam  := RetFamArt( ::oFacPrvL:cRef, ::oDbfArt:cAlias )





         if ( ::lAllFam .OR. ( cCodFam >= ::cFamOrg .AND. cCodFam <= ::cFamDes ) )





            if !::oDbf:Seek( ::cPrvFac + cCodFam )

               ::oDbf:Append()
               ::oDbf:Blank()

               ::oDbf:cCodPrv := ::oDbfPrv:Cod
               ::oDbf:cNomPrv := ::oDbfPrv:Titulo
               ::AddProveedor( ::oDbfPrv:Cod )
               ::oDbf:dFecFac := ::dLasFac
               ::oDbf:cCodFam := cCodFam

               ::oDbf:cTipDoc := "Factura"
               ::oDbf:cDocFac := StrTran( ::cNumFac, " ", "" )
               aTotFac        := aTotFacPrv( ::cNumFac, ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacPrvP:cAlias, nil, ::cDivInf )
               ::oDbf:nBasFac := aTotFac[ 1 ]
               ::oDbf:nIvaFac := aTotFac[ 2 ]
               ::oDbf:nReqFac := aTotFac[ 3 ]
               ::oDbf:nTotFac := aTotFac[ 4 ]

               ::oDbf:cNomFam := Rtrim( oRetFld( cCodFam, ::oDbfFam ) )

               ::oDbf:nCajFam := ::oFacPrvL:nCanEnt
               ::oDbf:nUndFam := ::oFacPrvL:nUniCaja
               ::oDbf:nTotFam := nTotNFacPrv( ::oFacPrvL )
               ::oDbf:nImpFam := nTotLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut )

               ::oDbf:Save()

            else

               ::oDbf:Load()

               ::oDbf:nCajFam += ::oFacPrvL:nCanEnt
               ::oDbf:nUndFam += ::oFacPrvL:nUniCaja
               ::oDbf:nTotFam += nTotNFacPrv( ::oFacPrvL )
               ::oDbf:nImpFam += nTotLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut )

               ::oDbf:Save()

            end

         end

         ::oFacPrvL:Skip()

      end

   end

RETURN ( Self )



static FUNCTION TIUltCom_GetAlbaran( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   local lGetAlb  := .F.

   ::dLasAlb      := Ctod( "" )

   if ::oAlbPrvT:Seek( ::oDbfPrv:Cod )

      while ::oAlbPrvT:cCodPrv == ::oDbfPrv:Cod .AND. !::oAlbPrvT:Eof()





         if !::oAlbPrvT:lFacturado                    .AND. ::oAlbPrvT:dFecAlb >= ::dIniInf           .AND. ::oAlbPrvT:dFecAlb <= ::dFinInf           .AND. lChkSer( ::oAlbPrvT:cSerAlb, ::aSer )     .AND. ::oAlbPrvT:dFecAlb > ::dLasAlb

            ::cPrvAlb   := ::oAlbPrvT:cCodPrv
            ::dLasAlb   := ::oAlbPrvT:dFecAlb
            ::cNumAlb   := ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb
            lGetAlb     := .T.

         end

         ::oAlbPrvT:Skip()

      end

   end

RETURN ( lGetAlb )



static FUNCTION TIUltCom_AddAlbaran( ) ; local Self AS CLASS TIUltCom := QSelf() AS CLASS TIUltCom

   local aTotAlb
   local cCodFam





   if ::oAlbPrvL:Seek( ::cNumAlb )

      while ::oAlbPrvL:cSerAlb + Str( ::oAlbPrvL:nNumAlb ) + ::oAlbPrvL:cSufAlb == ::cNumAlb .AND. !::oAlbPrvL:Eof()





         cCodFam  := RetFamArt( ::oAlbPrvL:cRef, ::oDbfArt:cAlias )





         if ( ::lAllFam .OR. ( cCodFam >= ::cFamOrg .AND. cCodFam <= ::cFamDes ) )





            if !::oDbf:Seek( ::cPrvAlb + cCodFam )

               ::oDbf:Append()
               ::oDbf:Blank()

               ::oDbf:cCodPrv := ::oDbfPrv:Cod
               ::oDbf:cNomPrv := ::oDbfPrv:Titulo
               ::AddProveedor( ::oDbfPrv:Cod )
               ::oDbf:dFecFac := ::dLasAlb
               ::oDbf:cCodFam := cCodFam

               ::oDbf:cTipDoc := "Albaran"
               ::oDbf:cDocFac := StrTran( ::cNumAlb, " ", "" )
               aTotAlb        := aTotAlbPrv( ::cNumAlb, ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf )
               ::oDbf:nBasFac := aTotAlb[ 1 ]
               ::oDbf:nIvaFac := aTotAlb[ 2 ]
               ::oDbf:nReqFac := aTotAlb[ 3 ]
               ::oDbf:nTotFac := aTotAlb[ 4 ]

               ::oDbf:cNomFam := Rtrim( oRetFld( cCodFam, ::oDbfFam ) )

               ::oDbf:nCajFam := ::oAlbPrvL:nCanEnt
               ::oDbf:nUndFam := ::oAlbPrvL:nUniCaja
               ::oDbf:nTotFam := nTotNAlbPrv( ::oAlbPrvL )
               ::oDbf:nImpFam := nTotLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut )

               ::oDbf:Save()

            else

               ::oDbf:Load()

               ::oDbf:nCajFam += ::oAlbPrvL:nCanEnt
               ::oDbf:nUndFam += ::oAlbPrvL:nUniCaja
               ::oDbf:nTotFam += nTotNAlbPrv( ::oAlbPrvL )
               ::oDbf:nImpFam += nTotLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut )

               ::oDbf:Save()

            end

         end

         ::oAlbPrvL:Skip()

      end

   end

RETURN ( Self )
