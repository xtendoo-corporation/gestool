#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 11 ".\.\Prg\Tvta.prg"
static oWndBrw
static dbfTVta
static bEdit   := { |aTemp, aoGet, dbfTVta, oBrw, bWhen, bValid, nMode | EdtRec( aTemp, aoGet, dbfTVta, oBrw, bWhen, bValid, nMode ) }



static aTipVta := {  { "00", "Ventas",             1, 1 }, { "01", "Ventas especiales",  1, 1 }, { "02", "Devoluciones",       1, 1 }, { "03", "Canjeos",            1, 1 } }



function aItmTVta()

   local aItmTVta := {}

   aAdd( aItmTVta, { "CCODMOV",  "C",  2,  0, "Tipo de movimiento" ,                   "",  "", "( cDbf )" } )
   aAdd( aItmTVta, { "CDESMOV",  "C", 20,  0, "Descripción del tipo de movimiento" ,   "",  "", "( cDbf )" } )
   aAdd( aItmTVta, { "NUNDMOV",  "N",  1,  0, "Comportamiento en unidades" ,           "",  "", "( cDbf )" } )
   aAdd( aItmTVta, { "NIMPMOV",  "N",  1,  0, "Comportamiento en precio" ,             "",  "", "( cDbf )" } )

return ( aItmTVta )



FUNCTION TVta( oMenuItem, oWnd )

   local nLevel

   If( oMenuItem == nil, oMenuItem := "01043", ) ;
   If( oWnd == nil, oWnd := oWnd(), ) ;

    IF oWndBrw == NIL





      nLevel            := Auth():Level( oMenuItem )

      if nAnd( nLevel, 1 ) == 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      IF !OpenFiles()
         RETURN NIL
      end





      AddMnuNext( "Tipos de venta", ProcName() )














      oWndBrw := TShell():New( 2, 10, 18, 70, "Tipos de venta",, oWnd,,, .F.,,, ( dbfTVta ),,,,, {"Código",    "Nombre"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfTVta ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfTVta ) )}, {||( WinDelRec( oWndBrw:oBrw, dbfTVta ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfTVta ) )}, nil, nLevel, "gc_wallet_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodMov"
         :bEditValue       := {|| ( dbfTVta )->cCodMov }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cDesMov"
         :bEditValue       := {|| ( dbfTVta )->cDesMov }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      oWndBrw:cHtmlHelp    := "Movimientos de ventas"

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )







        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )







        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfTVta ) )}, "(Z)oom", "Z",,, 8,, .F. )







        oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp, .F. )

    ELSE

        oWndBrw:SetFocus()

    end

RETURN NIL



STATIC FUNCTION EdtRec( aTemp, aoGet, dbfTVta, oBrw, bWhen, bValid, nMode )

    local oDlg
    local oGet

    oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Tipos de Venta", "TVTA",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )







        oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTemp[1], aTemp[1]:= u ) }, oDlg,, "@!", {||    ( NotValid( oGet, dbfTVta, .T., "0" ) )}, "N/W*",,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )





        TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTemp[2], aTemp[2]:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




        TRadMenu():Redefine( { | u | If( PCount()==0, aTemp[3], aTemp[3]:= u ) }, oDlg,, { 130, 131, 132 },,,,, .F., {||         ( nMode <> 3 )}, )




        TRadMenu():Redefine( { | u | If( PCount()==0, aTemp[4], aTemp[4]:= u ) }, oDlg,, { 140, 141, 142 },,,,, .F., {||         ( nMode <> 3 )}, )





        TButton():ReDefine( 1, {||( if( nMode == 4, if( oGet:lValid(), lPreSave( aTemp, aoGet, dbfTVta, oBrw, nMode, oDlg ), ),  lPreSave( aTemp, aoGet, dbfTVta, oBrw, nMode, oDlg ) ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 559, {||( GoHelp() )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3


      oDlg:AddFastKey( 116, {|| if( nMode == 4, if(  oGet:lValid(), lPreSave( aTemp, aoGet, dbfTVta, oBrw, nMode, oDlg ), ), lPreSave( aTemp, aoGet, dbfTVta, oBrw, nMode, oDlg ) ) } )
   end

   oDlg:AddFastKey ( 112, {|| GoHelp() } )

   oDlg:bStart := { || oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION lPreSave( aTemp, aoGet, dbfTVta, oBrw, nMode, oDlg )

   if nMode == 1 .OR. nMode == 4

      if dbSeekInOrd( aTemp[ 2 ], "CCODMOV", dbfTVta )
         MsgStop( "Código ya existe " + Rtrim( aTemp[ 2 ] ) )
         return nil
      end

   end

   if Empty( aTemp[ 2 ] )
      MsgStop( "La descripción del tipo de venta no puede estar vacía." )
      Return .F.
   end

   WinGather( aTemp, aoGet, dbfTVta, oBrw, nMode )

Return oDlg:end( 1 )



STATIC FUNCTION GenReport( dbfTVta )

    local oReport
    local oFont1
    local oFont2
    local nRecno         := ( dbfTVta )->( RecNo() )
   local cTitulo     := Padr( cCodEmp() + " - " + cNbrEmp(), 50 )
   local cSubTitulo  := Padr( "Listado de tipos de ventas", 50 )
    local nDevice        := 1





    IF SetRep( @cTitulo, @cSubTitulo, @nDevice )

        (dbfTVta)->(DbGoTop())





      oFont1 := TFont():New( "Courier New", 0, -10,, .T.,,,,,,,,,,,, )
      oFont2 := TFont():New( "Courier New", 0, -10,,,,,,,,,,,,,, )

        IF nDevice == 1








            oReport := RptBegin({{||      Rtrim( cTitulo )}, {||    Rtrim( cSubTitulo )}}, {{||     "Fecha: " + dtoc(date())}}, {{||   "Página : " + str( oReport:nPage, 3 )}}, {oFont1, oFont2}, {}, .F.,,,, .T.,,, "Listando Tipos de Ventas",, UPPER("RIGHT"), UPPER("CENTERED"), )

        ELSE








            oReport := RptBegin({{||      Rtrim( cTitulo )}, {||    Rtrim( cSubTitulo )}}, {{||     "Fecha: " + dtoc(date())}}, {{||   "Página : "  + str(oReport:nPage,3)}}, {oFont1, oFont2}, {}, .F.,,, .T., .F.,,, "Listando Tipos de Ventas",, UPPER("RIGHT"), UPPER("CENTERED"), )

        end



            RptAddColumn( {{|| "Tipo"}}, , {{|| (dbfTVta)->CCODMOV}},, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F.,, .F.,,, .F.,, {},,,,, )



         RptAddColumn( {{|| "Descripción"}}, , {{|| (dbfTVta)->CDESMOV}},, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F.,, .F.,,, .F.,, {},,,,, )

        RptEnd()

      IF !Empty( oReport ) .AND.  oReport:lCreated
            oReport:Margin(0, 2, 2)
            oReport:bSkip    := {|| (dbfTVta)->(DbSkip()) }
        end

        oReport:Activate(, {|| !(dbfTVta)->(Eof())},,,,,,,,,,,, )

        oFont1:end()
        oFont2:end()

    end

    (dbfTVta)->(DbGoto( nRecno ) )

RETURN NIL




FUNCTION cTVta( oGet, dbfTVta, oGet2 )

   local lValid   := .F.
    local xValor     := oGet:varGet()

   if Empty( xValor )
      if( oGet2 <> nil, oGet2:cText( "" ), )
      return .T.
   else
      xValor   := RJustObj( oGet, "0" )
   end

   if ( dbfTVta )->( dbSeek( xValor ) )

      oGet:cText( ( dbfTVta )->cCodMov )

      if oGet2 <> nil
         oGet2:cText( ( dbfTVta )->cDesMov )
      end

      lValid      := .T.

   else

        msgStop( "Tipo de movimiento no encontrado" )

   end

RETURN lValid



FUNCTION retTVta( dbfTVta, cCodMov )

   local oError
   local oBlock
   local cTemp    := ""
    local lClose    := .F.
   local cPath    := cPatDat()

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !Empty( dbfTVta )
         dbUseArea( .T., ( cDriver() ), ( cPath + "TVTA.DBF" ), ( cCheckArea( "TVta", @dbfTVta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPath + "TVTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
         lClose      := .T.
      end

      if ( dbfTVta )->( dbSeek( cCodMov ) )
         cTemp       := ( dbfTVta )->cDesMov
      end

      if lClose
         ( dbfTVta )->( dbCloseArea() )
      end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de movimientos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN cTemp



FUNCTION BrwTVta( oGet, dbfTVta, oGet2 )

    local oDlg
   local oGet1
   local cGet1
    local oBrw
   local oError
   local oBlock
   local nOrd     := GetBrwOpt( "BrwTVta" )
    local oCbxOrd
   local aCbxOrd  := { "Código", "Nombre" }
   local cCbxOrd
   local lClose   := .F.
   local cPath    := cPatDat()
   local nLevel   := Auth():Level( "01042" )

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if !Empty( dbfTVta )
      dbUseArea( .T., ( cDriver() ), ( cPath + "TVTA.DBF" ), ( cCheckArea( "TVta", @dbfTVta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPath + "TVTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      lClose      := .T.
   end

   ( dbfTVta )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Tipos de venta", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F.,, "oDlg", nil, )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfTVta ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfTVta ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfTVta )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,,, "oCbxOrd",,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfTVta

      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Movimientos de ventas"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodMov"
         :bEditValue       := {|| ( dbfTVta )->cCodMov }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cDesMov"
         :bEditValue       := {|| ( dbfTVta )->cDesMov }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )






        TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfTVta ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. !IsReport() )},,, .F. )




        TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfTVta ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 .AND. !IsReport() )},,, .F. )


   if nAnd( nLevel, 2 ) <> 0 .AND. !IsReport()
      oDlg:AddFastKey( 113,    {|| WinAppRec( oBrw, bEdit, dbfTVta ) } )
   end

   if nAnd( nLevel, 4 ) <> 0 .AND. !IsReport()
      oDlg:AddFastKey( 114,    {|| WinEdtRec( oBrw, bEdit, dbfTVta ) } )
   end

   oDlg:AddFastKey( 116,       {|| oDlg:end(1) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end(1) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      oGet:cText( ( dbfTVta )->cCodMov )
        oGet:lValid()

      if ValType( oGet2 ) == "O"
         oGet2:cText( ( dbfTVta )->cDesMov )
      end

   end

   DestroyFastFilter( dbfTVta )

   SetBrwOpt( "BrwTVta", ( dbfTVta )->( OrdNumber() ) )

    oGet:setFocus()

   if lClose
        ( dbfTVta )->( dbCloseArea() )
   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de tipos de ventas" )

   end

   ErrorBlock( oBlock )

RETURN ( oDlg:nResult == 1 )



FUNCTION lTVta( dbfTVta, cCodMov )

   local oError
   local oBlock
   local lReturn  := .F.
   local lClose   := .F.
   local cPath    := cPatDat()

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !Empty( dbfTVta )
         dbUseArea( .T., ( cDriver() ), ( cPath + "TVTA.DBF" ), ( cCheckArea( "TVta", @dbfTVta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
         if !lAIS() ; ordListAdd( ( cPath + "TVTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
         lClose      := .T.
      end

      if ( dbfTVta )->( dbSeek( cCodMov ) )
         lReturn     := .T.
      else
         MsgStop( "Tipo de movimiento inexistente" )
         lReturn     := .F.
      end

      if lClose
         ( dbfTVta )->( dbCloseArea() )
      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de tipos de ventas" )

   end

   ErrorBlock( oBlock )

RETURN lReturn



STATIC FUNCTION OpenFiles( dbf )

   local cPath       := cPatDat()
   local lOpen       := .T.
   local oError
   local oBlock

   IF !lExistTable( cPath + "TVta.Dbf" )
      mkTVta( cPath )
   end

   IF !lExistIndex( cPath + "TVta.Cdx" )
      rxTVta( cPath )
   end

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPath + "TVta.Dbf" ), ( cCheckArea( "TVTA", @dbfTVta ) ), iif( .T. .OR. .F., ! .F., NIL ), .F. )
      if !lAIS() ; ordListAdd( ( cPath + "TVta.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   RECOVER

      CloseFiles()

      lOpen          := .F.

      msgStop( "Imposible abrir todas las bases de datos de tipos de ventas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



STATIC FUNCTION CloseFiles()

   ( dbfTVta )->( dbCloseArea() )

   oWndBrw     := nil

RETURN .T.



FUNCTION mkTVta( cPath, lAppend )

   local nCont
    local dbfTVta

   If( lAppend == nil, lAppend := .F., ) ;

   if !lExistTable( cPath + "TVta.Dbf" )

      dbCreate( cPath + "TVta.Dbf", aSqlStruct( aItmTVta() ), cDriver() )













   end

   rxTVta( cPath )

RETURN NIL



FUNCTION rxTVta( cPath, oMeter )

    local dbfTVta

   If( cPath == nil, cPath := cPatDat(), ) ;

   if !lExistTable( cPath + "TVta.Dbf" )
        mkTVta( cPath )
   end

   if lExistIndex( cPath + "TVta.Cdx" )
      fErase( cPath + "TVta.Cdx" )
   end

   dbUseArea( .T., cDriver(), cPath + "TVTA.DBF", cCheckArea( "TVta", @dbfTVta ), .F. )
   if !( dbfTVta )->( neterr() )
      ( dbfTVta )->( __dbPack() )

      ( dbfTVta )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTVta )->( ordCreate( cPath + "TVTA.CDX", "CCODMOV", "Field->CCODMOV", {|| Field->CCODMOV }, ) )

      ( dbfTVta )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTVta )->( ordCreate( cPath + "TVTA.CDX", "CDESMOV", "Field->CDESMOV", {|| Field->CDESMOV } ) )

      ( dbfTVta )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de tipos de ventas" )
   end

RETURN NIL







FUNCTION nVtaUnd( cRef, dbfTVta )

   local nCom  := 1

   IF ( dbfTVta )->( dbSeek( cRef ) )

      DO CASE
      CASE ( dbfTVta )->NUNDMOV == 1
         nCom  := 1
      CASE ( dbfTVta )->NUNDMOV == 2
         nCom  := -1
      CASE ( dbfTVta )->NUNDMOV == 3
         nCom  := 0
      end

   end

RETURN ( nCom )







Function nVtaImp( cRef, dbfTVta )

   local nCom  := 1

   IF ( dbfTVta )->( dbSeek( cRef ) )

      DO CASE
      CASE ( dbfTVta )->NIMPMOV == 1
         nCom := 1
      CASE ( dbfTVta )->NIMPMOV == 2
         nCom := -1
      CASE ( dbfTVta )->NIMPMOV == 3
         nCom := 0
      end

   end

Return ( nCom )



function IsTipoVentas()

   local nCont

   if OpenFiles()

      for nCont := 1 to Len( aTipVta )
         ( dbfTVta )->( __dbLocate( { || ( dbfTVta )->cCodMov == aTipVta[ nCont, 1 ] } ) )
         if!( dbfTVta )->( Found() )
            dbGather( aTipVta[ nCont ], dbfTVta, .T. )
         end
      next

      CloseFiles()

   end

return ( .T. )
