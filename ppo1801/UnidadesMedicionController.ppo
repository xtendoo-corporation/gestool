#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\UnidadesMedicionController.prg"
_HB_CLASS UnidadesMedicionController ; function UnidadesMedicionController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @UnidadesMedicionController() ) ) ;

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @UnidadesMedicionController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @UnidadesMedicionController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER isSystemRegister(); oClass:AddInline( "isSystemRegister", {|Self | ( ( Self ) ), ( iif( ::getRowSet():fieldGet( "sistema" ), ( msgStop( "Este registro pertenece al sistema, no se puede alterar." ), .F. ), .T. ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionController ;



static FUNCTION UnidadesMedicionController_New( oSenderController ) ; local Self AS CLASS UnidadesMedicionController := QSelf() AS CLASS UnidadesMedicionController

   ::Super:New( oSenderController )

   ::cTitle                         := "Unidades de medición"

   ::cName                          := "unidades_medicion"



   ::hImage                         := {  "16" => "gc_tape_measure2_16", "32" => "gc_tape_measure2_32", "48" => "gc_tape_measure2_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLUnidadesMedicionModel():New( self )

   ::oBrowseView                    := UnidadesMedicionBrowseView():New( self )

   ::oDialogView                    := UnidadesMedicionView():New( self )

   ::oValidator                     := UnidadesMedicionValidator():New( self, ::oDialogView )

   ::oRepository                    := UnidadesMedicionRepository():New( self )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oGetSelector                   := GetSelector():New( self )

   ::setEvents( { "editing", "deleting" }, {|| ::isSystemRegister() } )

RETURN ( Self )



static FUNCTION UnidadesMedicionController_End( ) ; local Self AS CLASS UnidadesMedicionController := QSelf() AS CLASS UnidadesMedicionController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oGetSelector:End()

   ::oCamposExtraValoresController:End()

   ::Super:End()

RETURN ( Self )







_HB_CLASS UnidadesMedicionBrowseView ; function UnidadesMedicionBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @UnidadesMedicionBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @UnidadesMedicionBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionBrowseView ;



static FUNCTION UnidadesMedicionBrowseView_addColumns( ) ; local Self AS CLASS UnidadesMedicionBrowseView := QSelf() AS CLASS UnidadesMedicionBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo_iso"
      :cHeader             := "Código ISO"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo_iso" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )







_HB_CLASS UnidadesMedicionView ; function UnidadesMedicionView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @UnidadesMedicionView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @UnidadesMedicionView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionView ;



static FUNCTION UnidadesMedicionView_Activate( ) ; local Self AS CLASS UnidadesMedicionView := QSelf() AS CLASS UnidadesMedicionView

   local oSayCamposExtra
   local oDialog
   local oBtnEdit
   local oBtnAppend
   local oBtnDelete
   local oBmpGeneral



   ::oDialog = TDialog():New(,,,, ::LblTitle() + "unidad de medición", "UNIDAD_MEDICION",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isAppendOrDuplicateMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo_iso" ], ::oController:oModel:hBuffer[ "codigo_iso" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "codigo_iso" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )






   ::oSayCamposExtra := TSay():ReDefine( 130, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()

RETURN ( ::oDialog:nResult )







_HB_CLASS UnidadesMedicionValidator ; function UnidadesMedicionValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @UnidadesMedicionValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @UnidadesMedicionValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionValidator ;



static FUNCTION UnidadesMedicionValidator_getValidators( ) ; local Self AS CLASS UnidadesMedicionValidator := QSelf() AS CLASS UnidadesMedicionValidator




   ::hValidators  := {  "descripcion" =>  {  "required"           => "La descripción es un dato requerido", "unique"             => "La descripción introducida ya existe" }, "codigo" =>       {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe"  } }
RETURN ( ::hValidators )







_HB_CLASS SQLUnidadesMedicionModel ; function SQLUnidadesMedicionModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLUnidadesMedicionModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLUnidadesMedicionModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "unidades_medicion", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLUnidadesMedicionModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInsertUnidadesMedicionSentence(); oClass:AddMethod( "getInsertUnidadesMedicionSentence", @SQLUnidadesMedicionModel_getInsertUnidadesMedicionSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLUnidadesMedicionModel ;



static FUNCTION SQLUnidadesMedicionModel_getColumns( ) ; local Self AS CLASS SQLUnidadesMedicionModel := QSelf() AS CLASS SQLUnidadesMedicionModel


   hset( ::hColumns, "id",                {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",              {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "codigo",            {  "create"    => "VARCHAR( 20 ) UNIQUE"                     , "default"   => {|| space( 20 ) } }                        )
   ::getEmpresaColumns()


   hset( ::hColumns, "nombre",            {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "codigo_iso",        {  "create"    => "VARCHAR( 6 )"                            , "default"   => {|| space( 6 ) } }                        )


   hset( ::hColumns, "sistema",           {  "create"    => "BIT"                                     , "default"   => {|| .F. } }                               )

RETURN ( ::hColumns )



static FUNCTION SQLUnidadesMedicionModel_getInsertUnidadesMedicionSentence( ) ; local Self AS CLASS SQLUnidadesMedicionModel := QSelf() AS CLASS SQLUnidadesMedicionModel

   local cSentence

   cSentence  := "INSERT IGNORE INTO " + ::cTableName + " "
   cSentence  +=    "( uuid, codigo, nombre, codigo_iso, sistema ) "
   cSentence  += "VALUES "
   cSentence  +=    "( UUID(), 'UDS', 'Unidades', 'UDS', 1 )"

RETURN ( cSentence )







_HB_CLASS UnidadesMedicionRepository ; function UnidadesMedicionRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @UnidadesMedicionRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLUnidadesMedicionModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionRepository ;