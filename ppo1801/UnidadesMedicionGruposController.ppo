#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\UnidadesMedicionGruposController.prg"
_HB_CLASS UnidadesMedicionGruposController ; function UnidadesMedicionGruposController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposController", iif( .T., { @SQLNavigatorController() }, { @HBObject() } ), @UnidadesMedicionGruposController() ) ) ;

   _HB_MEMBER { oUnidadesMedicionGruposLineasController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oUnidadesMedicionGruposLineasController"}, .F. )

   _HB_MEMBER { oCamposExtraValoresController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oCamposExtraValoresController"}, .F. )

   _HB_MEMBER { oUnidadesMedicionController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oUnidadesMedicionController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @UnidadesMedicionGruposController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @UnidadesMedicionGruposController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposController ;



static FUNCTION UnidadesMedicionGruposController_New( oSenderController ) ; local Self AS CLASS UnidadesMedicionGruposController := QSelf() AS CLASS UnidadesMedicionGruposController

   ::Super:New( oSenderController )

   ::cTitle                         := "Grupos de unidades de medición"

   ::cName                          := "unidades_medicion_grupos"



   ::hImage                         := {  "16" => "gc_tape_measure2_16", "32" => "gc_tape_measure2_32", "48" => "gc_tape_measure2_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLUnidadesMedicionGruposModel():New( self )

   ::oBrowseView                    := UnidadesMedicionGruposBrowseView():New( self )

   ::oDialogView                    := UnidadesMedicionGruposView():New( self )

   ::oValidator                     := UnidadesMedicionGruposValidator():New( self, ::oDialogView )

   ::oRepository                    := UnidadesMedicionGruposRepository():New( self )

   ::oUnidadesMedicionGruposLineasController :=UnidadesMedicionGruposLineasController():New( self )

   ::oUnidadesMedicionController    := UnidadesMedicionController():New( self )

   ::oCamposExtraValoresController  := CamposExtraValoresController():New( self, ::oModel:cTableName )

   ::oGetSelector                   := GetSelector():New( self )


RETURN ( Self )



static FUNCTION UnidadesMedicionGruposController_End( ) ; local Self AS CLASS UnidadesMedicionGruposController := QSelf() AS CLASS UnidadesMedicionGruposController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oUnidadesMedicionGruposLineasController:End()

   ::oUnidadesMedicionController:End()

   ::oCamposExtraValoresController:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )







_HB_CLASS UnidadesMedicionGruposBrowseView ; function UnidadesMedicionGruposBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @UnidadesMedicionGruposBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @UnidadesMedicionGruposBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposBrowseView ;



static FUNCTION UnidadesMedicionGruposBrowseView_addColumns( ) ; local Self AS CLASS UnidadesMedicionGruposBrowseView := QSelf() AS CLASS UnidadesMedicionGruposBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "codigo"
      :cHeader             := "Código"
      :nWidth              := 50
      :bEditValue          := {|| ::getRowSet():fieldGet( "codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "nombre"
      :cHeader             := "Nombre"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "unidad_base_nombre"
      :cHeader             := "Unidad base"
      :nWidth              := 150
      :bEditValue          := {|| ::getRowSet():fieldGet( "unidad_base_nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )







_HB_CLASS UnidadesMedicionGruposView ; function UnidadesMedicionGruposView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @UnidadesMedicionGruposView() ) ) ;

   _HB_MEMBER { oSayCamposExtra } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oSayCamposExtra"}, .F. )

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @UnidadesMedicionGruposView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER StartActivate(); oClass:AddMethod( "StartActivate", @UnidadesMedicionGruposView_StartActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposView ;



static FUNCTION UnidadesMedicionGruposView_Activate( ) ; local Self AS CLASS UnidadesMedicionGruposView := QSelf() AS CLASS UnidadesMedicionGruposView

   local oDialog
   local oSayCamposExtra
   local oBtnEdit
   local oBtnAppend
   local oBtnDelete



   ::oDialog = TDialog():New(,,,, ::LblTitle() + " grupo de unidades de medición", "GRUPO_UNIDAD_MEDICION",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )
   ::oController:oUnidadesMedicioncontroller:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "unidad_base_codigo" ], ::oController:oModel:hBuffer[ "unidad_base_codigo" ]:= u ) } )

   ::oController:oUnidadesMedicioncontroller:oGetSelector:setEvent( "validated", {|| ::UnidadesMedicionControllerValidated() } )

   ::oController:oUnidadesMedicioncontroller:oGetSelector:Activate( 120, 122, ::oDialog )








   oBtnAppend := TButton():ReDefine( 130,, ::oDialog,,, .F., {||        ( !empty( ::oController:oModel:hBuffer[ "unidad_base_codigo" ] ) .AND. ::oController:isNotZoomMode() )},,, .F. )
   oBtnAppend:bAction   := {|| ::oController:oUnidadesMedicionGruposLineasController:Append() }





   oBtnEdit := TButton():ReDefine( 140,, ::oDialog,,, .F., {||        ( !empty( ::oController:oModel:hBuffer[ "unidad_base_codigo" ] ) .AND. ::oController:isNotZoomMode() )},,, .F. )
   oBtnEdit:bAction   := {|| ::oController:oUnidadesMedicionGruposLineasController:Edit() }





   oBtnDelete := TButton():ReDefine( 150,, ::oDialog,,, .F., {||        ( !empty( ::oController:oModel:hBuffer[ "unidad_base_codigo" ] ) .AND. ::oController:isNotZoomMode() )},,, .F. )
   oBtnDelete:bAction   := {|| ::oController:oUnidadesMedicionGruposLineasController:Delete() }

   ::oController:oUnidadesMedicionGruposLineasController:Activate( 160, ::oDialog )









   ::oSayCamposExtra := TSay():ReDefine( 170, {||      "Campos extra..."}, ::oDialog,, ( 10 + ( 152 * 256 ) + ( 234 * 65536 ) ),, .F., getBoldFont(), .F., .F., )
   ::oSayCamposExtra:lWantClick  := .T.
   ::oSayCamposExtra:OnClick     := {|| ::oController:oCamposExtraValoresController:Edit( ::oController:getUuid() ) }





   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::StartActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()


RETURN ( ::oDialog:nResult )



static FUNCTION UnidadesMedicionGruposView_StartActivate( ) ; local Self AS CLASS UnidadesMedicionGruposView := QSelf() AS CLASS UnidadesMedicionGruposView

   ::oController:oUnidadesMedicioncontroller:oGetSelector:Start()

RETURN ( self )





_HB_CLASS UnidadesMedicionGruposValidator ; function UnidadesMedicionGruposValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @UnidadesMedicionGruposValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @UnidadesMedicionGruposValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposValidator ;



static FUNCTION UnidadesMedicionGruposValidator_getValidators( ) ; local Self AS CLASS UnidadesMedicionGruposValidator := QSelf() AS CLASS UnidadesMedicionGruposValidator




   ::hValidators  := {  "nombre" =>       {  "required"           => "La descripción es un dato requerido", "unique"             => "La descripción introducida ya existe" }, "codigo" =>       {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe"  } }
RETURN ( ::hValidators )







_HB_CLASS SQLUnidadesMedicionGruposModel ; function SQLUnidadesMedicionGruposModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLUnidadesMedicionGruposModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLUnidadesMedicionGruposModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "unidades_medicion_grupos", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLUnidadesMedicionGruposModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLUnidadesMedicionGruposModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLUnidadesMedicionGruposModel ;



static FUNCTION SQLUnidadesMedicionGruposModel_getColumns( ) ; local Self AS CLASS SQLUnidadesMedicionGruposModel := QSelf() AS CLASS SQLUnidadesMedicionGruposModel


   hset( ::hColumns, "id",                            {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                          {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "codigo",                        {  "create"    => "VARCHAR( 20 ) UNIQUE"                    , "default"   => {|| space( 20 ) } }                       )


   hset( ::hColumns, "nombre",                        {  "create"    => "VARCHAR( 200 )"                          , "default"   => {|| space( 200 ) } }                      )


   hset( ::hColumns, "unidad_base_codigo",            {  "create"    => "VARCHAR( 20 )"                           , "default"   => {|| space( 20 ) } }                       )


RETURN ( ::hColumns )



static FUNCTION SQLUnidadesMedicionGruposModel_getInitialSelect( ) ; local Self AS CLASS SQLUnidadesMedicionGruposModel := QSelf() AS CLASS SQLUnidadesMedicionGruposModel








   local cSelect  := "SELECT unidades_medicion_grupos.id,"                                                                          + " " +  "unidades_medicion_grupos.uuid,"                                                                            + " " +  "unidades_medicion_grupos.codigo,"                                                                          + " " +  "unidades_medicion_grupos.nombre,"                                                                          + " " +  "unidades_medicion_grupos.unidad_base_codigo,"                                                              + " " +  "unidades_medicion.nombre as unidad_base_nombre"                                                            + " " +  "FROM unidades_medicion_grupos"                                                                                + " " +  "INNER JOIN unidades_medicion  ON unidades_medicion_grupos.unidad_base_codigo = unidades_medicion.codigo"   + " "

RETURN ( cSelect )






_HB_CLASS UnidadesMedicionGruposRepository ; function UnidadesMedicionGruposRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @UnidadesMedicionGruposRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLUnidadesMedicionGruposModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposRepository ;