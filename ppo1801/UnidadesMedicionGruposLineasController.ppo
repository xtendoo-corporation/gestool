#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\UnidadesMedicionGruposLineasController.prg"
_HB_CLASS UnidadesMedicionGruposLineasController ; function UnidadesMedicionGruposLineasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposLineasController", iif( .T., { @SQLBrowseController() }, { @HBObject() } ), @UnidadesMedicionGruposLineasController() ) ) ;

   _HB_MEMBER { oUnidadesMedicionController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oUnidadesMedicionController"}, .F. )


   _HB_MEMBER New(); oClass:AddMethod( "New", @UnidadesMedicionGruposLineasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @UnidadesMedicionGruposLineasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposLineasController ;



static FUNCTION UnidadesMedicionGruposLineasController_New( oSenderController ) ; local Self AS CLASS UnidadesMedicionGruposLineasController := QSelf() AS CLASS UnidadesMedicionGruposLineasController

   ::Super:New( oSenderController )

   ::cTitle                         := "Equivalencia de unidades de medición"

   ::cName                          := "unidades_medicion_grupos"



   ::hImage                         := {  "16" => "gc_tape_measure2_16", "32" => "gc_tape_measure2_32", "48" => "gc_tape_measure2_48" }

   ::nLevel                         := Auth():Level( ::cName )

   ::oModel                         := SQLUnidadesMedicionGruposLineasModel():New( self )

   ::oBrowseView                    := UnidadesMedicionGruposLineasBrowseView():New( self )

   ::oDialogView                    := UnidadesMedicionGruposLineasView():New( self )

   ::oValidator                     := UnidadesMedicionGruposLineasValidator():New( self, ::oDialogView )

   ::oRepository                    := UnidadesMedicionGruposLineasRepository():New( self )

   ::oUnidadesMedicionController    := UnidadesMedicionController():New( self )

   ::oGetSelector                   := GetSelector():New( self )

RETURN ( Self )



static FUNCTION UnidadesMedicionGruposLineasController_End( ) ; local Self AS CLASS UnidadesMedicionGruposLineasController := QSelf() AS CLASS UnidadesMedicionGruposLineasController

   ::oModel:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::oRepository:End()

   ::oUnidadesMedicionController:End()

   ::oGetSelector:End()

   ::Super:End()

RETURN ( Self )







_HB_CLASS UnidadesMedicionGruposLineasBrowseView ; function UnidadesMedicionGruposLineasBrowseView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposLineasBrowseView", iif( .T., { @SQLBrowseView() }, { @HBObject() } ), @UnidadesMedicionGruposLineasBrowseView() ) ) ;

   _HB_MEMBER addColumns(); oClass:AddMethod( "addColumns", @UnidadesMedicionGruposLineasBrowseView_addColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposLineasBrowseView ;



static FUNCTION UnidadesMedicionGruposLineasBrowseView_addColumns( ) ; local Self AS CLASS UnidadesMedicionGruposLineasBrowseView := QSelf() AS CLASS UnidadesMedicionGruposLineasBrowseView

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "id"
      :cHeader             := "Id"
      :nWidth              := 80
      :bEditValue          := {|| ::getRowSet():fieldGet( "id" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cHeader             := "Uuid"
      :nWidth              := 300
      :bEditValue          := {|| ::getRowSet():fieldGet( "uuid" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "cantidad_alternativa"
      :cHeader             := "Cantidad"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "cantidad_alternativa" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "unidad_alternativa_codigo"
      :cHeader             := "Código de Unidad alternativa"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "unidad_alternativa_codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "unidad_alternativa_nombre"
      :cHeader             := "Nombre de Unidad alternativa"
      :nWidth              := 150
      :bEditValue          := {|| ::getRowSet():fieldGet( "unidad_alternativa_nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

   with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "cantidad_base"
      :cHeader             := "Cantidad"
      :nWidth              := 100
      :bEditValue          := {|| transform( ::getRowSet():fieldGet( "cantidad_base" ), "@E 999999999.999" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

      with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "unidad_base_codigo"
      :cHeader             := "Código de Unidad base"
      :nWidth              := 100
      :bEditValue          := {|| ::getRowSet():fieldGet( "unidad_base_codigo" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
      :lHide               := .T.
   end

  with object ( ::oBrowse:AddCol() )
      :cSortOrder          := "unidad_base_nombre"
      :cHeader             := "Nombre de Unidad base"
      :nWidth              := 150
      :bEditValue          := {|| ::getRowSet():fieldGet( "unidad_base_nombre" ) }
      :bLClickHeader       := {| row, col, flags, oColumn | ::onClickHeader( oColumn ) }
   end

RETURN ( self )







_HB_CLASS UnidadesMedicionGruposLineasView ; function UnidadesMedicionGruposLineasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposLineasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @UnidadesMedicionGruposLineasView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @UnidadesMedicionGruposLineasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER StartActivate(); oClass:AddMethod( "StartActivate", @UnidadesMedicionGruposLineasView_StartActivate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposLineasView ;



static FUNCTION UnidadesMedicionGruposLineasView_Activate( ) ; local Self AS CLASS UnidadesMedicionGruposLineasView := QSelf() AS CLASS UnidadesMedicionGruposLineasView

   local oDialog
   local cUnidadBaseCodigo := ::oController:oSenderController:getModelBuffer( "unidad_base_codigo" )
   local cUnidadBaseNombre := SQLUnidadesMedicionModel():getField( "nombre", "codigo", cUnidadBaseCodigo )



   ::oDialog = TDialog():New(,,,, ::LblTitle() + " grupo de unidades de medición", "LINEA_GRUPO_UNIDAD_MEDICION",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )






   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getImage( "48" ),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )


   ::oController:oUnidadesMedicioncontroller:oGetSelector:Bind( { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "unidad_alternativa_codigo" ], ::oController:oModel:hBuffer[ "unidad_alternativa_codigo" ]:= u ) } )

   ::oController:oUnidadesMedicioncontroller:oGetSelector:setEvent( "validated", {|| ::UnidadesMedicionControllerValidated() } )

   ::oController:oUnidadesMedicioncontroller:oGetSelector:Activate( 120, 122, ::oDialog )







   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cantidad_alternativa" ], ::oController:oModel:hBuffer[ "cantidad_alternativa" ]:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( .F. )},, .F., .T.,,, {|| 1},,, nil,,, )







   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cUnidadBaseCodigo, cUnidadBaseCodigo:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 142, { | u | If( PCount()==0, cUnidadBaseNombre, cUnidadBaseNombre:= u ) }, ::oDialog,,,,,,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )







   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "cantidad_base" ], ::oController:oModel:hBuffer[ "cantidad_base" ]:= u ) }, ::oDialog,, "@E 999999999.999",,,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .T.,,, {|| 1.000},,, nil,,, )




   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:bStart  := {|| ::StartActivate() }

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

  ::oBitmap:end()


RETURN ( ::oDialog:nResult )



static FUNCTION UnidadesMedicionGruposLineasView_StartActivate( ) ; local Self AS CLASS UnidadesMedicionGruposLineasView := QSelf() AS CLASS UnidadesMedicionGruposLineasView

   ::oController:oUnidadesMedicioncontroller:oGetSelector:Start()

RETURN ( self )






_HB_CLASS UnidadesMedicionGruposLineasValidator ; function UnidadesMedicionGruposLineasValidator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposLineasValidator", iif( .T., { @SQLBaseValidator() }, { @HBObject() } ), @UnidadesMedicionGruposLineasValidator() ) ) ;

   _HB_MEMBER getValidators(); oClass:AddMethod( "getValidators", @UnidadesMedicionGruposLineasValidator_getValidators(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )


oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposLineasValidator ;



static FUNCTION UnidadesMedicionGruposLineasValidator_getValidators( ) ; local Self AS CLASS UnidadesMedicionGruposLineasValidator := QSelf() AS CLASS UnidadesMedicionGruposLineasValidator




   ::hValidators  := {  "nombre" =>       {  "required"           => "La descripción es un dato requerido", "unique"             => "La descripción introducida ya existe" }, "codigo" =>       {  "required"           => "El código es un dato requerido" , "unique"             => "EL código introducido ya existe"  } }
RETURN ( ::hValidators )







_HB_CLASS SQLUnidadesMedicionGruposLineasModel ; function SQLUnidadesMedicionGruposLineasModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "SQLUnidadesMedicionGruposLineasModel", iif( .T., { @SQLBaseModel() }, { @HBObject() } ), @SQLUnidadesMedicionGruposLineasModel() ) ) ;

   _HB_MEMBER { cTableName } ; oClass:AddMultiData(, "unidades_medicion_grupos_lineas", nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTableName"}, .F. )

   _HB_MEMBER getColumns(); oClass:AddMethod( "getColumns", @SQLUnidadesMedicionGruposLineasModel_getColumns(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInitialSelect(); oClass:AddMethod( "getInitialSelect", @SQLUnidadesMedicionGruposLineasModel_getInitialSelect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS SQLUnidadesMedicionGruposLineasModel ;



static FUNCTION SQLUnidadesMedicionGruposLineasModel_getColumns( ) ; local Self AS CLASS SQLUnidadesMedicionGruposLineasModel := QSelf() AS CLASS SQLUnidadesMedicionGruposLineasModel


   hset( ::hColumns, "id",                            {  "create"    => "INTEGER AUTO_INCREMENT UNIQUE"           , "default"   => {|| 0 } }                                 )


   hset( ::hColumns, "uuid",                          {  "create"    => "VARCHAR( 40 ) NOT NULL UNIQUE"           , "default"   => {|| win_uuidcreatestring() } }            )


   hset( ::hColumns, "parent_uuid",                   {  "create"    => "VARCHAR( 40 )"                           , "default"   => {|| ::getSenderControllerParentUuid() } }  )


   hset( ::hColumns, "unidad_alternativa_codigo",     {  "create"    => "VARCHAR( 20 )"                           , "default"   => {|| space( 20 ) } }                        )


   hset( ::hColumns, "cantidad_alternativa",          {  "create"    => "INTEGER"                                 , "default"   => {|| 1 } }                                 )


   hset( ::hColumns, "cantidad_base",                 {  "create"    => "FLOAT (10,3)"                              , "default"   => {|| 1    } }                               )

RETURN ( ::hColumns )



static FUNCTION SQLUnidadesMedicionGruposLineasModel_getInitialSelect( ) ; local Self AS CLASS SQLUnidadesMedicionGruposLineasModel := QSelf() AS CLASS SQLUnidadesMedicionGruposLineasModel













   local cSelect  := "SELECT unidades_medicion_grupos_lineas.id,"                                                                      + " " +  "unidades_medicion_grupos_lineas.uuid,"                                                                        + " " +  "unidades_medicion_grupos_lineas.parent_uuid,"                                                                 + " " +  "unidades_medicion_grupos_lineas.unidad_alternativa_codigo,"                                                   + " " +  "unidades_medicion_alternativa.nombre as unidad_alternativa_nombre,"                                           + " " +  "unidades_medicion_grupos_lineas.cantidad_alternativa,"                                                        + " " +  "unidades_medicion_grupos_lineas.cantidad_base,"                                                               + " " +  "unidades_medicion_grupos.unidad_base_codigo as unidad_base_codigo,"                                           + " " +  "unidades_medicion_base.nombre as unidad_base_nombre"                                                          + " " +  "FROM unidades_medicion_grupos_lineas"                                                                            + " " +  "INNER JOIN unidades_medicion_grupos as unidades_medicion_grupos ON unidades_medicion_grupos_lineas.parent_uuid = unidades_medicion_grupos.uuid"           + " " +  "INNER JOIN unidades_medicion as unidades_medicion_alternativa ON unidades_medicion_grupos_lineas.unidad_alternativa_codigo = unidades_medicion_alternativa.codigo"  + " " +  "INNER JOIN unidades_medicion as unidades_medicion_base ON unidades_medicion_grupos.unidad_base_codigo = unidades_medicion_base.codigo"                                      + " "


RETURN ( cSelect )







_HB_CLASS UnidadesMedicionGruposLineasRepository ; function UnidadesMedicionGruposLineasRepository ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UnidadesMedicionGruposLineasRepository", iif( .T., { @SQLBaseRepository() }, { @HBObject() } ), @UnidadesMedicionGruposLineasRepository() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ( SQLUnidadesMedicionGruposLineasModel():getTableName() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UnidadesMedicionGruposLineasRepository ;