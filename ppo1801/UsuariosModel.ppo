#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 9 ".\Prg\Models\UsuariosModel.prg"
_HB_CLASS UsuariosModel ; function UsuariosModel ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "UsuariosModel", iif( .T., { @ADSBaseModel() }, { @HBObject() } ), @UsuariosModel() ) ) ;

   _HB_MEMBER getTableName(); oClass:AddInline( "getTableName", {|Self | ( ( Self ) ), ::getDatosTableName( "usuarios" ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombre(); oClass:AddInline( "getNombre", {|Self, idUsuario | ( ( Self ) ), ( ::getField( "nombre", "codigo", idUsuario ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getMail(); oClass:AddInline( "getMail", {|Self, idUsuario | ( ( Self ) ), ( ::getField( "email", "codigo", idUsuario ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER UpdateEmpresaEnUso( cCodigoUsuario, cCodigoEmpresa); oClass:AddMethod( "UpdateEmpresaEnUso", @UsuariosModel_UpdateEmpresaEnUso(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setUsuarioPcEnUso( cPcName, UuidUsuario); oClass:AddMethod( "setUsuarioPcEnUso", @UsuariosModel_setUsuarioPcEnUso(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUsuariosToJson(); oClass:AddMethod( "getUsuariosToJson", @UsuariosModel_getUsuariosToJson(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Existe( cCodigoUsuario); oClass:AddMethod( "Existe", @UsuariosModel_Existe(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Crypt(); oClass:AddInline( "Crypt", {|Self, cPassword | ( ( Self ) ), ( hb_md5( alltrim( cPassword ) + "snorlax" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER Decrypt(); oClass:AddInline( "Decrypt", {|Self, cPassword | ( ( Self ) ), ( hb_decrypt( alltrim( cPassword ), "snorlax" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER InsertFromHashSql( hHash); oClass:AddMethod( "InsertFromHashSql", @UsuariosModel_InsertFromHashSql(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER lExisteUuid( uuid); oClass:AddMethod( "lExisteUuid", @UsuariosModel_lExisteUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreUsuarioWhereNetName(); oClass:AddInline( "getNombreUsuarioWhereNetName", {|Self, cNetName | ( ( Self ) ), ( ::getField( "nombre", "lastpc", cNetName ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validNameUser( cNombre); oClass:AddMethod( "validNameUser", @UsuariosModel_validNameUser(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validUserPassword( cNombre, cPassword); oClass:AddMethod( "validUserPassword", @UsuariosModel_validUserPassword(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validSuperUserPassword( cPassword); oClass:AddMethod( "validSuperUserPassword", @UsuariosModel_validSuperUserPassword(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getWhereUuid( Uuid); oClass:AddMethod( "getWhereUuid", @UsuariosModel_getWhereUuid(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getWhereCodigo( cCodigo); oClass:AddMethod( "getWhereCodigo", @UsuariosModel_getWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getWhereNombre( cNombre); oClass:AddMethod( "getWhereNombre", @UsuariosModel_getWhereNombre(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNombreWhereCodigo( cCodigo); oClass:AddMethod( "getNombreWhereCodigo", @UsuariosModel_getNombreWhereCodigo(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getNombreWhereUuid(); oClass:AddInline( "getNombreWhereUuid", {|Self, uuid | ( ( Self ) ), ( ::getField( "nombre", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER fetchDirect(); oClass:AddMethod( "fetchDirect", @UsuariosModel_fetchDirect(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER checkSuperUser(); oClass:AddMethod( "checkSuperUser", @UsuariosModel_checkSuperUser(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER updateConfig( uuid, cCodEmp, cCodDlg, cCodCaj, cCodAlm, cCodAge, cCodRut); oClass:AddMethod( "updateConfig", @UsuariosModel_updateConfig(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getUsuarioEmpresa( cUuid); oClass:AddMethod( "getUsuarioEmpresa", @UsuariosModel_getUsuarioEmpresa(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUsuarioEmpresaExclusiva(); oClass:AddInline( "getUsuarioEmpresaExclusiva", {|Self, uuid | ( ( Self ) ), ( ::getField( "cEmpExc", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUsuarioDelegacionExclusiva(); oClass:AddInline( "getUsuarioDelegacionExclusiva", {|Self, uuid | ( ( Self ) ), ( ::getField( "cDlgExc", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUsuarioCajaExclusiva(); oClass:AddInline( "getUsuarioCajaExclusiva", {|Self, uuid | ( ( Self ) ), ( ::getField( "cCajExc", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUsuarioAlmacenExclusivo(); oClass:AddInline( "getUsuarioAlmacenExclusivo", {|Self, uuid | ( ( Self ) ), ( ::getField( "cAlmExc", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUsuarioAgenteExclusivo(); oClass:AddInline( "getUsuarioAgenteExclusivo", {|Self, uuid | ( ( Self ) ), ( ::getField( "cAgeExc", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUsuarioRutaExclusivo(); oClass:AddInline( "getUsuarioRutaExclusivo", {|Self, uuid | ( ( Self ) ), ( ::getField( "cRutExc", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER getUsuarioImpresoraDefecto(); oClass:AddInline( "getUsuarioImpresoraDefecto", {|Self, uuid | ( ( Self ) ), ( ::getField( "cImpDef", "uuid", uuid ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getNamesUsuarios(); oClass:AddMethod( "getNamesUsuarios", @UsuariosModel_getNamesUsuarios(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS UsuariosModel ;



static FUNCTION UsuariosModel_UpdateEmpresaEnUso( cCodigoUsuario, cCodigoEmpresa ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm


   local cSql  := "UPDATE " + ::getTableName() + " "                    +  "SET lastemp = " + quoted( cCodigoEmpresa ) + " "  +  "WHERE codigo = " + quoted( cCodigoUsuario )

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION UsuariosModel_setUsuarioPcEnUso( cPcName, UuidUsuario ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm
   local cSql





   cSql  := "UPDATE " + ::getTableName() + " "  +  "SET lastpc = '' "                  +  "WHERE lastpc = " + quoted( cPcName )

   ::ExecuteSqlStatement( cSql, @cStm )





   cSql  := "UPDATE " + ::getTableName() + " "         +  "SET lastpc = " + quoted( cPcName ) + " "  +  "WHERE uuid = " + quoted( UuidUsuario )

RETURN ( ::ExecuteSqlStatement( cSql, @cStm ) )



static FUNCTION UsuariosModel_Existe( cCodigoUsuario ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "existeusuario"


   local cSql  := "SELECT nombre "                                      +  "FROM " + ::getTableName() + " "                   +  "WHERE codigo = " + quoted( cCodigoUsuario )

   if ::ExecuteSqlStatement( cSql, @cStm )
      RETURN ( ( cStm )->( lastrec() ) > 0 )
   end

RETURN ( .F. )



static FUNCTION UsuariosModel_InsertFromHashSql( hHash ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm     := "InsertFromHashSql"
   local cSql     := ""

   if !Empty( hHash ) .AND. !::lExisteUuid( hGet( hHash, "uuid" ) )

      cSql         := "INSERT INTO " + ::getTableName()
      cSql         += " ( uuid, codigo, nombre, email, password, lsuper, roluuid, lastpc, lastemp ) VALUES "
      cSql         += " ( " + quoted( hGet( hHash, "uuid" ) )
      cSql         += ", " + quoted( hGet( hHash, "codigo" ) )
      cSql         += ", " + quoted( hGet( hHash, "nombre" ) )
      cSql         += ", " + quoted( hGet( hHash, "email" ) )
      cSql         += ", " + quoted( ::Decrypt( hGet( hHash, "password" ) ) )
      cSql         += ", " + if( hGet( hHash, "super_user" ) == 0, ".f.", ".t." )
      cSql         += ", " + quoted( hGet( hHash, "rol_uuid" ) )
      cSql         += ", " + quoted( hGet( hHash, "last_pcname" ) )
      cSql         += ", " + quoted( hGet( hHash, "last_empresa" ) ) + " )"

      ::ExecuteSqlStatement( cSql, @cStm )

   end

Return ( nil )



static FUNCTION UsuariosModel_lExisteUuid( uuid ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm     := "lExisteUuid"
   local cSql     := ""

   cSql     := "SELECT * FROM " + ::getTableName() + " WHERE uuid = " + quoted( uuid )

      if ::ExecuteSqlStatement( cSql, @cStm )

         if ( cStm )->( RecCount() ) > 0
            Return ( .T. )
         end

      end

Return ( .F. )



static FUNCTION UsuariosModel_validNameUser( cNombre ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "validUserPassword"
   local cSql

   cSQL        := "SELECT TOP 1 * FROM " + ::getTableName()                   + " "
   cSQL        +=    "WHERE UPPER( nombre ) = " + quoted( upper( cNombre ) )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
         Return ( .T. )
      end

   end

RETURN ( .F. )



static FUNCTION UsuariosModel_validUserPassword( cNombre, cPassword ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm        := "validUserPassword"
   local cSql

   cSQL              := "SELECT TOP 1 * FROM " + ::getTableName()                   + " "
   cSQL              +=    "WHERE Upper( nombre ) = " + quoted( upper( cNombre ) )  + " "
   if ( upper( alltrim( cPassword ) ) <> upper( "snorlax" ) ) .AND. !( "NOPASSWORD" $ appParamsMain() .OR. "NOPASSWORD" $ appParamsSecond() )
      cSQL           +=     "AND password = '" + ::Crypt( cPassword ) + "' "
   end

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
         Return ( dbHash( cStm ) )
      end

   end

RETURN ( nil )



static FUNCTION UsuariosModel_validSuperUserPassword( cPassword ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "validSuperUserPassword"
   local cSQL  := "SELECT TOP 1 * FROM " + ::getTableName()    + " "
   cSQL        +=    "WHERE lsuper "
   if ( upper( alltrim( cPassword ) ) <> upper( "snorlax" ) )
      cSQL     +=       "AND password = " + quoted( ::Crypt( cPassword ) )    + " "
   end

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
         Return ( .T. )
      end

   end

RETURN ( .F. )



static FUNCTION UsuariosModel_getWhereUuid( Uuid ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "getWhereUuid"
   local cSQL  := "SELECT TOP 1 * FROM " + ::getTableName()                   + " "
   cSQL        +=    "WHERE uuid = " + quoted( uuid )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
         Return ( dbHash( cStm ) )
      end

   end

RETURN ( nil )



static FUNCTION UsuariosModel_getWhereCodigo( cCodigo ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "getWhereCodigo"
   local cSQL  := "SELECT TOP 1 * FROM " + ::getTableName()                   + " "
   cSQL        +=    "WHERE codigo = " + quoted( cCodigo )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
         Return ( dbHash( cStm ) )
      end

   end

RETURN ( nil )



static FUNCTION UsuariosModel_getWhereNombre( cNombre ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "getWhereNombre"
   local cSQL  := "SELECT TOP 1 * FROM " + ::getTableName()                   + " "
   cSQL        +=    "WHERE nombre = " + quoted( cNombre )

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
         Return ( dbHash( cStm ) )
      end

   end

RETURN ( nil )



static FUNCTION UsuariosModel_getNombreWhereCodigo( cCodigo ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cName

   cName := ::getField( "nombre", "codigo", cCodigo )

Return ( if( Empty( cName ), "", cName ) )



static FUNCTION UsuariosModel_getUsuariosToJson( ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm        := "getUsuariosToJson"
   local cSql        := "SELECT Codigo, Nombre FROM " + ::getTableName()
   local aUsuarios   := {}

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0

         ( cStm )->( dbGoTop() )

         while !( cStm )->( Eof() )

           aAdd( aUsuarios, DBScatter( cStm ) )

         ( cStm )->( dbSkip() )

         end

      end

   end

RETURN ( aUsuarios )



static FUNCTION UsuariosModel_getNamesUsuarios( ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm        := "getUsuariosToJsonNames"
   local cSql        := "SELECT Codigo, Nombre FROM " + ::getTableName() + " WHERE NOT lInacUse"
   local aUsuarios   := {}

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0

         ( cStm )->( dbGoTop() )

         while !( cStm )->( Eof() )

           aAdd( aUsuarios, ( cStm )->Nombre )

         ( cStm )->( dbSkip() )

         end

      end

   end

   aSort( aUsuarios, , , {|x,y| x < y } )

RETURN ( aUsuarios )



static FUNCTION UsuariosModel_fetchDirect( ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "fetchDirectUser"
   local cSQL  := "SELECT * FROM " + ::getTableName()

   if ::ExecuteSqlStatement( cSql, @cStm )

      if ( cStm )->( RecCount() ) > 0
        Return ( cStm )
      end

   end

RETURN ( nil )



static FUNCTION UsuariosModel_checkSuperUser( ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm  := "checkSuperUser"
   local cStm2 := "InserSuper"
   local cSQL  := ""
   local cSQL2 := ""

   cSQL        := "SELECT * FROM " + ::getTableName()
   cSQL        += " WHERE lsuper"

   if ::ExecuteSqlStatement( cSql, @cStm )
      if ( cStm )->( RecCount() ) > 0
        Return ( nil )
      end
   end

   cSQL2       := "INSERT INTO " + ::getTableName()
   cSQL2       += " ( uuid, "
   cSQL2       +=    "codigo, "
   cSQL2       +=    "nombre, "
   cSQL2       +=    "email, "
   cSQL2       +=    "password, "
   cSQL2       +=    "lsuper, "
   cSQL2       +=    "roluuid ) "
   cSQL2       += "VALUES ( "
   cSQL2       +=    quoted( win_uuidcreatestring() ) + ", "
   cSQL2       +=    "'999', "
   cSQL2       +=    "'Super administrador', "
   cSQL2       +=    "'', "
   cSQL2       +=    "'" + ::Crypt( "12345678" ) + "', "
   cSQL2       +=    ".t., "
   cSQL2       +=    " '' )"

   ::ExecuteSqlStatement( cSql2, @cStm2 )

   MsgWait( "Usuario 'Super administrador' creado.", "", 2 )

RETURN ( nil )



static FUNCTION UsuariosModel_updateConfig( uuid, cCodEmp, cCodDlg, cCodCaj, cCodAlm, cCodAge, cCodRut, cImpDef ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cStm     := "UpdateUsuario"
   local cSql     := ""

   cSql           := "UPDATE " + ::getTableName() + " SET"
   cSql           += " cEmpExc = " + if( Empty( cCodEmp ), "''", quoted( cCodEmp ) ) + ","
   cSql           += " cDlgExc = " + if( Empty( cCodDlg ), "''", quoted( cCodDlg ) ) + ","
   cSql           += " cCajExc = " + if( Empty( cCodCaj ), "''", quoted( cCodCaj ) ) + ","
   cSql           += " cAlmExc = " + if( Empty( cCodAlm ), "''", quoted( cCodAlm ) ) + ","
   cSql           += " cAgeExc = " + if( Empty( cCodAge ), "''", quoted( cCodAge ) ) + ","
   cSql           += " cRutExc = " + if( Empty( cCodRut ), "''", quoted( cCodRut ) ) + ","
   cSql           += " cImpDef = " + if( Empty( cImpDef ), "''", quoted( cImpDef ) )
   cSql           += " WHERE uuid = " + quoted( uuid )

   ::ExecuteSqlStatement( cSql, @cStm )

Return ( nil )



static FUNCTION UsuariosModel_getUsuarioEmpresa( uuid ) ; local Self AS CLASS UsuariosModel := QSelf() AS CLASS UsuariosModel

   local cCodigoEmpresa := ::getUsuarioEmpresaExclusiva( uuid )

   if !empty( cCodigoEmpresa )
      RETURN ( cCodigoEmpresa )
   end

RETURN ( ::getField( "lastemp", "uuid", uuid ) )







Function getNombreUsuarioWhereCodigo( cCodigoUsuario )

Return ( UsuariosModel():getNombreWhereCodigo( cCodigoUsuario ) )
