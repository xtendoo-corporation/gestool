#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\view\ViewSearchNavigator.prg"
_HB_CLASS ViewSearchNavigator ; function ViewSearchNavigator ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ViewSearchNavigator", iif( .T., { @ViewNavigator() }, { @HBObject() } ), @ViewSearchNavigator() ) ) ;

   _HB_MEMBER { lSelectorMode } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSelectorMode"}, .F. )

   _HB_MEMBER { getSearch } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"getSearch"}, .F. )
   _HB_MEMBER { comboboxSearch } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"comboboxSearch"}, .F. )

   _HB_MEMBER { hashItemsSearch } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hashItemsSearch"}, .F. )
   _HB_MEMBER { aOrderBusqueda } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aOrderBusqueda"}, .F. )

   _HB_MEMBER New( oSender); oClass:AddMethod( "New", @ViewSearchNavigator_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setItemsBusqueda() ; oClass:AddVirtual( "setItemsBusqueda" )

   _HB_MEMBER Resource(); oClass:AddMethod( "Resource", @ViewSearchNavigator_Resource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER initDialog(); oClass:AddMethod( "initDialog", @ViewSearchNavigator_initDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER validDialog(); oClass:AddMethod( "validDialog", @ViewSearchNavigator_validDialog(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER defineBarraBusqueda(); oClass:AddMethod( "defineBarraBusqueda", @ViewSearchNavigator_defineBarraBusqueda(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getComboboxOrden(); oClass:AddInline( "getComboboxOrden", {|Self | ( ( Self ) ), ( if( !empty( ::comboboxSearch ), ::comboboxSearch:varGet(), "" ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER setComboboxOrden(); oClass:AddInline( "setComboboxOrden", {|Self, cOrden | ( ( Self ) ), ( if( !empty( ::comboboxSearch ), ( ::comboboxSearch:set( cOrden ), ::changeComboboxOrden() ), ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER getInitialComboboxOrden(); oClass:AddMethod( "getInitialComboboxOrden", @ViewSearchNavigator_getInitialComboboxOrden(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
      _HB_MEMBER changeComboboxOrden(); oClass:AddMethod( "changeComboboxOrden", @ViewSearchNavigator_changeComboboxOrden(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER changeComboboxSearch(); oClass:AddInline( "changeComboboxSearch", {|Self | ( ( Self ) ), ( ::changeComboboxOrden(), ::getSearch:setFocus(), ::refreshBrowse() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER restoreStatusComboboxSearch(); oClass:AddMethod( "restoreStatusComboboxSearch", @ViewSearchNavigator_restoreStatusComboboxSearch(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER saveStatusComboboxSearch(); oClass:AddInline( "saveStatusComboboxSearch", {|Self | ( ( Self ) ), ( setGridOrder( ::getBrowseConfigurationName(), ::getComboboxOrden() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER setSelectorMode(); oClass:AddInline( "setSelectorMode", {|Self | ( ( Self ) ), ( ::lSelectorMode  := .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER isEndOk(); oClass:AddInline( "isEndOk", {|Self | ( ( Self ) ), ( ::oDlg:nResult == 1 ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER validBarraBusqueda(); oClass:AddInline( "validBarraBusqueda", {|Self | ( ( Self ) ), ( ordClearScope( ::oBrowse, ::getWorkArea() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ViewSearchNavigator ;



static FUNCTION ViewSearchNavigator_New( oSender ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   ::oSender                  := oSender

   ::setDblClickBrowseGeneral( {|| if( ::oSender:lAlowEdit, ::oSender:Edit(), ::oSender:Zoom() ), ::refreshBrowse() } )

   ::setItemsBusqueda()

Return ( self )



static FUNCTION ViewSearchNavigator_Resource( ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   ::oDlg                     := TDialog():New( 1, 5, 40, 100, "gestool TABLET",,, .F., ::Style,, ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ),,, .F.,, oGridFont(),,,, .F.,, "oDlg" )

   ::defineTitulo()

   if ::lSelectorMode
      ::defineAceptarCancelar()
   else
      ::defineSalir()
   end

   ::defineBarraBusqueda()

   ::botonesAcciones()

   ::botonesMovimientoBrowse()

   ::browseGeneral()

   ::oDlg:bResized            := {|| ::resizeDialog() }

   ::oDlg:Activate( , , ,.T., {|| ::validDialog() },, {|| ::initDialog() } )

   ::endDialog()

Return ( self )



static FUNCTION ViewSearchNavigator_initDialog( ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   ::Super:initDialog()

   ::oSender:initDialog()

   ::restoreStatusComboboxSearch()

   ::refreshBrowse()

Return ( self )



static FUNCTION ViewSearchNavigator_validDialog( ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   ::saveStatusComboboxSearch()

Return ( .T. )



static FUNCTION ViewSearchNavigator_defineBarraBusqueda( ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   local cGetSearch
   local cComboboxOrden

   cGetSearch        := Space( 100 )
   cComboboxOrden    := ::getInitialComboboxOrden()








   ::getSearch       := TGridGet():Build(       {  "nRow"      => 45, "nCol"      => {|| GridWidth( 0.5, ::oDlg ) }, "bSetGet"   => {|u| if( PCount() == 0, cGetSearch, cGetSearch := u ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 9, ::oDlg ) }, "nHeight"   => 25, "bValid"    => {|| ::validBarraBusqueda() }, "bChanged"  => {| nKey, nFlags | AutoSeek( nKey, nFlags, ::getSearch, ::oBrowse, ::getWorkArea(), .T. ) } } )








   ::comboboxSearch  := TGridComboBox():Build(  {  "nRow"      => 45, "nCol"      => {|| GridWidth( 9.5, ::oDlg ) }, "bSetGet"   => {|u| if( PCount() == 0, cComboboxOrden, cComboboxOrden := u ) }, "oWnd"      => ::oDlg, "nWidth"    => {|| GridWidth( 2, ::oDlg ) }, "nHeight"   => 25, "aItems"    => hGetKeys( ::hashItemsSearch ), "bChange"   => {|| ::changeComboboxSearch() } } )

Return ( self )



static FUNCTION ViewSearchNavigator_getInitialComboboxOrden( ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   local cOrden   := ""

   if isHash( ::hashItemsSearch ) .AND. len( ::hashItemsSearch ) > 1
      cOrden      := hgetkeyat( ::hashItemsSearch, 1 )
   end

Return ( cOrden )



static FUNCTION ViewSearchNavigator_changeComboboxOrden( ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   local textComboboxSearch   :=  ::getComboboxOrden()

   if !empty( textComboboxSearch )
      ( ::getWorkArea() )->( ordsetfocus( ::hashItemsSearch[ textComboboxSearch ] ) )
   end

Return ( self )



static FUNCTION ViewSearchNavigator_restoreStatusComboboxSearch( ) ; local Self AS CLASS ViewSearchNavigator := QSelf() AS CLASS ViewSearchNavigator

   local gridOrder            := getGridOrder( ::getBrowseConfigurationName() )

   if !empty( gridOrder )
      ::setComboboxOrden( gridOrder )
   else
      ::changeComboboxOrden()
   end

   ( ::getWorkArea() )->( dbgotop() )

Return ( self )
