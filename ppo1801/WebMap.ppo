#line 91 "\fwh1801\include\FiveWin.ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 3 ".\.\Prg\WebMap.prg"
_HB_CLASS WebMap ; function WebMap ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "WebMap", iif( .F., { }, { @HBObject() } ), @WebMap() ) ) ;
   _HB_MEMBER { aAddress } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aAddress"}, .F. )
   _HB_MEMBER { nZoomLevel } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nZoomLevel"}, .F. )
   _HB_MEMBER { cMapType } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMapType"}, .F. )
   _HB_MEMBER { oIe } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oIe"}, .F. )
   _HB_MEMBER { cLink } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cLink"}, .F. )
   _HB_MEMBER { cWhatsNear } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cWhatsNear"}, .F. )
   _HB_MEMBER New(); oClass:AddMethod( "New", @WebMap_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ShowMap(); oClass:AddMethod( "ShowMap", @WebMap_ShowMap(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER ShowMapInWin(); oClass:AddMethod( "ShowMapInWin", @WebMap_ShowMapInWin(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddStop(); oClass:AddMethod( "AddStop", @WebMap_AddStop(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER AddStopSep(); oClass:AddMethod( "AddStopSep", @WebMap_AddStopSep(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
   _HB_MEMBER GenLink(); oClass:AddMethod( "GenLink", @WebMap_GenLink(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS WebMap ;

static FUNCTION WebMap_New( xAddress, nZoomLevel ) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap
   if nZoomLevel == nil

      ::nZoomLevel := 0
   else
      ::nZoomLevel := nZoomLevel
   endif
   ::cLink := ""
   ::cWhatsNear := ""

   do case
      case xAddress == nil
         ::aAddress := {}
      case valtype( xAddress ) == "A"
         ::aAddress := xAddress
      otherwise
         ::aAddress := { xAddress }
   endcase
RETURN( self )






static FUNCTION WebMap_ShowMap( ) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap

   ::GenLink()

   if ! empty( ::cLink )
      ShellExecute( 0, "open", ::cLink,,, 5 )
      sysrefresh()
   endif

RETURN nil







static FUNCTION WebMap_ShowMapInWin( ) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap

   local oWnd, oActiveX, oBar
   local cEvents := ""

   ::GenLink()

   if ! empty( ::cLink )


      oWnd := TWindow():New( 0, 0, 600, 800, "Google Map Demo in Fivewin window",,,,,,,,,,,, !.F., !.F., !.F., !.F., .T.,, "oWnd",, )

      ::oIe          := TActiveX():New( oWnd, "Shell.Explorer" )

      oWnd:oClient   := ::oIe


      ::oIe:SetProp( "Visible", .T. )
      ::oIe:SetProp( "Toolbar", .T. )
      ::oIe:SetProp( "Statusbar", .T. )
      ::oIe:SetProp( "MenuBar", .T. )
      ::oIe:Do( "Navigate", ::cLink )
      sysrefresh()

      oWnd:Activate(, oWnd:bLClicked, oWnd:bRClicked, oWnd:bMoved, oWnd:bResized, oWnd:bPainted, oWnd:bKeyDown, oWnd:bInit,,,,,,,,,,, oWnd:bLButtonUp, .F. )

      sysrefresh()

   endif

RETURN nil







static FUNCTION WebMap_AddStop( cAddress ) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap
   if cAddress <> nil

      aadd( ::aAddress, strtran( trim( cAddress )," ", "+" ) )
   endif
RETURN nil












static FUNCTION WebMap_AddStopSep( cStreet, cCity, cState, cZip, cCountry ) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap
   local cAddr2




   If( cStreet == nil, cStreet := "", ) ; If( cCity == nil, cCity := "", ); If( cState == nil, cState := "", ); If( cZip == nil, cZip := "", ); If( cCountry == nil, cCountry := "", );

   cAddr2 := ltrim( trim( cCity )+" " )
   cAddr2 += ltrim( trim( cState )+" " )
   cAddr2 += ltrim( trim( cZip )+" " )
   cAddr2 += ltrim( trim( cCountry ) )
   if at( ",", cAddr2 ) > 0

      cAddr2 := strtran( cAddr2,",", " " )

      cAddr2 := strtran( cAddr2,"  ", " " )
   endif
   do case
      case ! empty( cStreet ) .AND. ! empty( cAddr2 )
         ::AddStop( trim( cStreet)+", "+cAddr2 )
      case empty( cStreet ) .AND. ! empty( cAddr2 )
         ::AddStop( cAddr2 )
      case ! empty( cStreet ) .AND. empty( cAddr2 )
         ::AddStop( trim( cStreet) )
   endcase
RETURN nil







static FUNCTION WebMap_GenLink( ) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap

   local nCounter, nFor
   local cLink

   cLink := "http://maps.google.com/maps?"

   do case
      case len( ::aAddress ) = 0

         ::cMapType := "MAP"
      case len( ::aAddress ) > 1

         ::cMapType := "ROUTE"
      otherwise
         ::cMapType := "MAP"
   endcase

   for nFor := 1 to len( ::aAddress )
      do case
         case nFor = 1
            if ::cMapType = "ROUTE"
               cLink += "saddr="+::aAddress[ nFor ]
            else


               if empty( ::cWhatsNear )
                  cLink += "q="+::aAddress[ nFor ]
               else
                  cLink += "q="+::cWhatsNear
                  cLink += chr(38)+"near="+::aAddress[ nFor ]
               endif
            endif
         case nFor = 2
            cLink += chr(38)+"daddr="+::aAddress[ nFor ]
         otherwise
            cLink += ",+to:"+::aAddress[ nFor ]
      endcase

   next

   if ! empty( cLink )
      if ::nZoomLevel > 0
         cLink += chr(38)+"z="+ltrim( str( ::nZoomLevel ) )
      endif
   endif

   ::cLink := cLink

RETURN( ::cLink )
