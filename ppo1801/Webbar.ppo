#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 21 ".\.\Prg\Webbar.prg"
_HB_CLASS TWebBar ; function TWebBar ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TWebBar", iif( .T., { @TControl() }, { @HBObject() } ), @TWebBar() ) ) ;

   _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )

   _HB_MEMBER { hBitmap } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hBitmap"}, .F. )
   _HB_MEMBER { hPalette } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hPalette"}, .F. )
   _HB_MEMBER { lCaptured } ; oClass:AddMultiData(, .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lCaptured"}, .F. )
   _HB_MEMBER { nDesp } ; oClass:AddMultiData(, 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDesp"}, .F. )
   _HB_MEMBER { cBitmap } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBitmap"}, .F. )
   _HB_MEMBER { cResBmp } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cResBmp"}, .F. )
   _HB_MEMBER { nCtlHeight } ; oClass:AddMultiData(, 20, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nCtlHeight"}, .F. )
   _HB_MEMBER { nClrLine } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrLine"}, .F. )
   _HB_MEMBER { aSay } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aSay"}, .F. )
   _HB_MEMBER { AS NUMERIC nLeftMargin } ; oClass:AddMultiData( "NUMERIC", 10, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nLeftMargin"}, .F. )
   _HB_MEMBER { AS NUMERIC nRightMargin } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nRightMargin"}, .F. )
   _HB_MEMBER { AS NUMERIC nTopMargin } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTopMargin"}, .F. )
   _HB_MEMBER { AS NUMERIC nDnMargin } ; oClass:AddMultiData( "NUMERIC", 0, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDnMargin"}, .F. )

   _HB_MEMBER { AS NUMERIC nOption } ; oClass:AddMultiData( "NUMERIC", 1, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nOption"}, .F. )



   _HB_MEMBER New( nTop, nLeft, nWidth, nHeight, nCtlHeight, cBitmap, cResBmp, nClrFore, nClrBack, nStyle, oBrush, oFont,  lPixel, cMsg, oWnd, nHelpID, bRClick) AS CLASS TWebBar; oClass:AddMethod( "New", @TWebBar_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )



   _HB_MEMBER Redefine( nId, nCtlHeight, cBitmap, cResBmp, nClrFore, nClrBack, nStyle, oBrush, oFont, lPixel, cMsg, oWnd, nHelpID, bRClick) AS CLASS TWebBar; oClass:AddMethod( "Redefine", @TWebBar_Redefine(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddInline( "End", {|Self | ( ( Self ) ), ( if( ::hWnd == 0, ::Destroy(), ::Super:End() ) ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Display(); oClass:AddInline( "Display", {|Self | ( ( Self ) ), ( ::BeginPaint(), ::Paint(), ::EndPaint() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Paint(); oClass:AddMethod( "Paint", @TWebBar_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER EraseBkground(); oClass:AddInline( "EraseBkground", {|Self | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Destroy(); oClass:AddMethod( "Destroy", @TWebBar_Destroy(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadImage( cResName, cBmpFile); oClass:AddMethod( "LoadImage", @TWebBar_LoadImage(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Say( nRow, nCol, cText); oClass:AddMethod( "Say", @TWebBar_Say(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TWebBar ;





static FUNCTION TWebBar_New( nTop, nLeft, nWidth, nHeight, nCtlHeight, cBitmap, cResBmp, nClrFore, nClrBack, nStyle, oBrush, oFont,  lPixel, cMsg, oWnd, nHelpID, bRClick ) ; local Self AS CLASS TWebBar := QSelf() AS CLASS TWebBar






   If( nClrFore == nil, nClrFore := 16777215, ) ; If( nClrBack == nil, nClrBack := GetSysColor( 15 ), ); If( nStyle == nil, nStyle := nOr( 1073741824, 268435456, 67108864, 33554432 ), ); If( nCtlHeight == nil, nCtlHeight := 30, ); If( lPixel == nil, lPixel := .T., ); If( oBrush == nil, oBrush := TBrush():New( , ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ) ), );



   ::nStyle       = nStyle
   ::nId          = ::GetNewId()
   ::oWnd         = oWnd
   ::nTop         = If( lPixel, nTop, nTop * 16 )
   ::nLeft        = If( lPixel, nLeft, nLeft * 8 )
   ::nBottom      = ::nTop + nHeight - 1
   ::nRight       = ::nLeft + nWidth - 1
   ::nCtlHeight   = nCtlHeight
   ::lCaptured    = .F.
   ::cBitmap      = cBitmap
   ::cResBmp      = cResBmp
   ::hBitmap      = 0
   ::nClrPane     = nClrBack
   ::nClrText     = nClrFore
   ::bRClicked    = bRClick
   ::nHelpID      = nHelpID
   ::nClrLine     = ( 51 + ( 51 * 256 ) + ( 255 * 65536 ) )
   ::oBrush       = oBrush
   ::nOption      = 1



   ::setFont( oFontBigTitle() )

   if ValType( cResBmp ) == "C" .OR. ValType( cBitmap ) == "C"
      ::LoadImage( cResBmp, cBitmap )
   elseif ValType( cResBmp ) == "N"
      ::SetBitmap( cResBmp )
   else
      ::SetColor( nClrFore, nClrBack )
   end

   ::Register( nOR( 1, 2 ) )

   if !Empty( oWnd:hWnd )
      ::Create()
      oWnd:AddControl( Self )
   else
      oWnd:DefControl( Self )
   endif

return Self




static FUNCTION TWebBar_Redefine( nId, nCtlHeight, cBitmap, cResBmp, nClrFore, nClrBack, nStyle,  oBrush, oFont, lPixel, cMsg, oWnd, nHelpID, bRClick ) ; local Self AS CLASS TWebBar := QSelf() AS CLASS TWebBar







   If( nClrFore == nil, nClrFore := 0, ) ; If( nClrBack == nil, nClrBack := GetSysColor( 15 ), ); If( nStyle == nil, nStyle := nOr( 1073741824, 268435456, 67108864, 33554432 ), ); If( nCtlHeight == nil, nCtlHeight := 30, ); If( lPixel == nil, lPixel := .T., ); If( oWnd == nil, oWnd := GetWndDefault(), ); If( oBrush == nil, oBrush := TBrush():New( , nClrBack ), );


   ::nStyle       = nStyle
   ::nId          = nId
   ::oWnd         = oWnd
   ::nCtlHeight   = nCtlHeight
   ::lCaptured    = .F.
   ::cBitmap      = cBitmap
   ::cResBmp      = cResBmp
   ::hBitmap      = 0
   ::nClrPane     = nClrBack
   ::nClrText     = nClrFore
   ::bRClicked    = bRClick
   ::nHelpID      = nHelpID
   ::nClrLine     = ( 255 + ( 154 * 256 ) + ( 49 * 65536 ) )
   ::oBrush       = oBrush


   ::setFont( oFontBigTitle() )

   ::LoadImage( cResBmp, cBitmap )

   ::Register( nOR( 1, 2 ) )

   if oWnd <> nil
      oWnd:DefControl( Self )
   end

return Self



static FUNCTION TWebBar_Paint( ) ; local Self AS CLASS TWebBar := QSelf() AS CLASS TWebBar

   local n
   local nWidth
   local nHeight
   local nBmpWidth
   local nBmpHeight
   local nRow        := 0
   local nCol        := 0
   local aInfo       := ::DispBegin()

   if !Empty( ::hBitmap )

      nWidth         := ::nWidth()
      nHeight        := ::nHeight()
      nBmpWidth      := nBmpWidth( ::hBitmap )
      nBmpHeight     := nBmpHeight( ::hBitmap )

      while nRow <= nHeight
         nCol        := 0
         while nCol <= nWidth
            PalBmpDraw( ::hDC, nRow, nCol, ::hBitmap, ::hPalette )
            nCol     += nBmpWidth
         end
         nRow        += nBmpHeight
      end

   else

      FillRect( ::hDC, GetClientRect( ::hWnd ), ::oBrush:hbrush )

   end

   if ::aSay <> nil
      for n := 1 to len( ::aSay )
         wSay( ::hWnd, ::hDC, ::aSay[ n, 1 ], ::aSay[ n, 2 ], ::aSay[ n, 3 ], ::nClrText, , ::oFont:hFont, .T., .T. )
      next
   end

   ::DispEnd( aInfo )

return nil



static FUNCTION TWebBar_Destroy( ) ; local Self AS CLASS TWebBar := QSelf() AS CLASS TWebBar

   PalBmpFree( ::hBitmap, ::hPalette )

   if ::hWnd <> 0
      ::Super:Destroy()
   endif

   ::hBitmap   := nil
   ::hPalette  := nil

return nil



static FUNCTION TWebBar_LoadImage( cResName, cBmpFile ) ; local Self AS CLASS TWebBar := QSelf() AS CLASS TWebBar

   local aBmp

   if !Empty( cResName )
      aBmp        := PalBmpLoad( cResName )
      ::hBitmap   := aBmp[ 1 ]
      ::hPalette  := aBmp[ 2 ]
      ::cBitmap   := cResName
   endif

   if !Empty( cBmpFile ) .AND. File( cBmpFile )
      aBmp        := PalBmpRead( ::GetDC(), cBmpFile )
      ::hBitmap   := aBmp[ 1 ]
      ::hPalette  := aBmp[ 2 ]
      ::cBitmap   := AllTrim( cBmpFile )
      ::ReleaseDC()
   endif

   if ::hBitmap <> 0
      PalBmpNew( ::hWnd, ::hBitmap, ::hPalette )
   endif

return Self



static FUNCTION TWebBar_Say( nRow, nCol, cText ) ; local Self AS CLASS TWebBar := QSelf() AS CLASS TWebBar



   If( nRow == nil, nRow := 0, ) ; If( nCol == nil, nCol := 0, ); If( cText == nil, cText := "", );

   if ::aSay == nil
      ::aSay   := {}
   end

   aAdd( ::aSay, { nRow, nCol, cText } )

RETURN Self
