#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 22 ".\.\Prg\Webbtn.prg"
_HB_CLASS TWebBtn ; function TWebBtn ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TWebBtn", iif( .T., { @TControl() }, { @HBObject() } ), @TWebBtn() ) ) ;

   _HB_MEMBER { AS LOGICAL lRegistered } ; oClass:AddMultiClsData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lRegistered"}, .F. )
   _HB_MEMBER { AS ARRAY aBitMaps } ; oClass:AddMultiClsData( "ARRAY", {}, nScope + iif( .F., 16, 0 ) + iif( .T., 32, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aBitMaps"}, .F. )

   _HB_MEMBER { bAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bAction"}, .F. )
   _HB_MEMBER { cAction } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cAction"}, .F. )
   _HB_MEMBER { lPressed } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lPressed"}, .F. )
   _HB_MEMBER { lCaptured } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lCaptured"}, .F. )
   _HB_MEMBER { AS LOGICAL lBeginGrp } ; oClass:AddMultiData( "LOGICAL",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lBeginGrp"}, .F. )
   _HB_MEMBER { lWorking } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lWorking"}, .F. )
   _HB_MEMBER { lBtnUp, lBtnDown } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lBtnUp", "lBtnDown"}, .F. )
   _HB_MEMBER { hBmpPal1, hBmpPal2, hBmpPal3 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"hBmpPal1", "hBmpPal2", "hBmpPal3"}, .F. )
   _HB_MEMBER { cResName1, cResName2, cResName3 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cResName1", "cResName2", "cResName3"}, .F. )
   _HB_MEMBER { cBmpFile1, cBmpFile2, cBmpFile3 } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cBmpFile1", "cBmpFile2", "cBmpFile3"}, .F. )
   _HB_MEMBER { AS LOGICAL lProcessing } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lProcessing"}, .F. )
   _HB_MEMBER { AS LOGICAL lBorder } ; oClass:AddMultiData( "LOGICAL", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lBorder"}, .F. )
   _HB_MEMBER { oFontOver } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFontOver"}, .F. )
   _HB_MEMBER { nClrTextOver } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrTextOver"}, .F. )
   _HB_MEMBER { nClrPaneOver } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrPaneOver"}, .F. )
   _HB_MEMBER { nClrBTop } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrBTop"}, .F. )
   _HB_MEMBER { nClrBBot } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrBBot"}, .F. )
   _HB_MEMBER { nClrBTopOver } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrBTopOver"}, .F. )
   _HB_MEMBER { nClrBBotOver } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nClrBBotOver"}, .F. )
   _HB_MEMBER { nPad } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nPad"}, .F. )
   _HB_MEMBER { AS NUMERIC nStepBmp } ; oClass:AddMultiData( "NUMERIC", 16, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nStepBmp"}, .F. )
   _HB_MEMBER { bMenu } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"bMenu"}, .F. )
   _HB_MEMBER { AS LOGIC lMenu } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lMenu"}, .F. )
   _HB_MEMBER { AS LOGIC lIsOverMenu } ; oClass:AddMultiData( "LOGIC",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lIsOverMenu"}, .F. )
   _HB_MEMBER { AS LOGIC lOpnGroup } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lOpnGroup"}, .F. )
   _HB_MEMBER { AS LOGIC lInGroup } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lInGroup"}, .F. )
   _HB_MEMBER { AS LOGIC lSelect } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSelect"}, .F. )
   _HB_MEMBER { AS LOGIC lNowSelect } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lNowSelect"}, .F. )
   _HB_MEMBER { AS LOGIC lTransparent } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lTransparent"}, .F. )
   _HB_MEMBER { AS LOGIC lSingleLine } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lSingleLine"}, .F. )

   _HB_MEMBER { nDlgCode } ; oClass:AddMultiData(, 4, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nDlgCode"}, .F. )





   _HB_MEMBER New( nTop, nLeft, nWidth, nHeight, cResName1, cResName2, cBmpFile1, cBmpFile2, bAction, oWnd, cMsg, bWhen, lUpdate, bSetGet, cPad, oFont, oFontOver, cResName3, cBmpFile3, nClrText, nClrTextOver, nClrPane, nClrPaneOver, lBorder, bMenu, oGroup, lSelect) AS CLASS TWebBtn; oClass:AddMethod( "New", @TWebBtn_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )





   _HB_MEMBER NewBar( cResName1, cResName2, cBmpFile1, cBmpFile2, bAction, oBar, cMsg, bWhen, lUpdate, cPrompt, cPad, oFont, oFontOver, cResName3, cBmpFile3, nClrText, nClrTextOver, nClrPane, nClrPaneOver, lBorder, cToolTip, bDrop, bMenu, lBeginGrp, oGroup) AS CLASS TWebBtn; oClass:AddMethod( "NewBar", @TWebBtn_NewBar(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )





   _HB_MEMBER ReDefine( nId, cResName1, cResName2, cBmpFile1, cBmpFile2, bAction, oWnd, cMsg, bWhen, lUpdate, bSetGet, cPad, oFont, oFontOver, cResName3, cBmpFile3, nClrText, nClrTextOver, nClrPane, nClrPaneOver, lBorder, cToolTip, bDrop, bMenu, lBeginGrp, oBrush) AS CLASS TWebBtn; oClass:AddMethod( "ReDefine", @TWebBtn_ReDefine(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Click( lMenu); oClass:AddMethod( "Click", @TWebBtn_Click(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Display(); oClass:AddInline( "Display", {|Self | ( ( Self ) ), ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER FreeBitmaps(); oClass:AddMethod( "FreeBitmaps", @TWebBtn_FreeBitmaps(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER HideBitmaps(); oClass:AddMethod( "HideBitmaps", @TWebBtn_HideBitmaps(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GoDown(); oClass:AddInline( "GoDown", {|Self | ( ( Self ) ), ::lPressed := ::lBtnDown := .T., ::Refresh() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GoUp(); oClass:AddInline( "GoUp", {|Self | ( ( Self ) ), ::lPressed := ::lBtnDown := .F., ::Refresh() }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LButtonDown( nRow, nCol); oClass:AddMethod( "LButtonDown", @TWebBtn_LButtonDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LButtonUp( nRow, nCol); oClass:AddMethod( "LButtonUp", @TWebBtn_LButtonUp(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LoadBmp( cResName1, cResName2, cBmpFile1, cBmpFile2); oClass:AddMethod( "LoadBmp", @TWebBtn_LoadBmp(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER GotFocus( hCtlLost); oClass:AddMethod( "GotFocus", @TWebBtn_GotFocus(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Initiate( hDlg); oClass:AddMethod( "Initiate", @TWebBtn_Initiate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER KeyChar( nKey, nFlags); oClass:AddMethod( "KeyChar", @TWebBtn_KeyChar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER LostFocus(); oClass:AddMethod( "LostFocus", @TWebBtn_LostFocus(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER EraseBkGnd(); oClass:AddInline( "EraseBkGnd", {|Self, hDC | ( ( Self ) ), 1 }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Paint(); oClass:AddMethod( "Paint", @TWebBtn_Paint(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER MouseMove( nRow, nCol, nKeyFlags); oClass:AddMethod( "MouseMove", @TWebBtn_MouseMove(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Toggle(); oClass:AddMethod( "Toggle", @TWebBtn_Toggle(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )




   _HB_MEMBER SetText(); oClass:AddInline( "SetText", {|Self, cText | ( ( Self ) ), (   if ( ::lWhen(), ::cCaption := cValToChar( cText ), ::cCaption := "" ), SetWindowText( ::hWnd, ::cCaption ), ::Refresh() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER cText( cText); _HB_MEMBER _cText( cText); oClass:AddMethod( "cText", @TWebBtn_cText(), nScope + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) ) ; oClass:AddMethod( "_cText", @TWebBtn_cText(), nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddInline( "End", {|Self | ( ( Self ) ), ( ::Destroy(), ::Super:End() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER VarGet(); oClass:AddInline( "VarGet", {|Self | ( ( Self ) ), ( ::cCaption ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Destroy(); oClass:AddMethod( "Destroy", @TWebBtn_Destroy(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ShowPaint(); oClass:AddInline( "ShowPaint", {|Self | ( ( Self ) ), ( ::Show(), ::Paint() ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER SetTransparent(); oClass:AddInline( "SetTransparent", {|Self | ( ( Self ) ), ( ::lTransparent := .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TWebBtn ;







static FUNCTION TWebBtn_New( nTop, nLeft, nWidth, nHeight, cResName1, cResName2, cBmpFile1, cBmpFile2, bAction, oWnd, cMsg, bWhen, lUpdate, bSetGet, cPad, oFont, oFontOver, cResName3, cBmpFile3, nClrText, nClrTextOver, nClrPane, nClrPaneOver, lBorder, bMenu, oGroup, lSelect ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn















   If( cMsg == nil, cMsg := " ", ) ; If( nWidth == nil, nWidth := 20, ); If( nHeight == nil, nHeight := 20, ); If( lUpdate == nil, lUpdate := .F., ); If( oWnd == nil, oWnd := GetWndDefault(), ); If( nClrText == nil, nClrText := GetSysColor( 18 ), ); If( nClrTextOver == nil, nClrTextOver := GetSysColor( 18 ), ); If( nClrPane == nil, nClrPane := if( oWnd <> nil, oWnd:nClrPane, GetSysColor( 15 ) ), ); If( nClrPaneOver == nil, nClrPaneOver := if( oWnd <> nil, oWnd:nClrPane, GetSysColor( 15 ) ), ); If( cPad == nil, cPad := "LEFT", ); If( lBorder == nil, lBorder := .F., ); If( oFont == nil, oFont := TFont():New( "Verdana", 0, -10, .F., .T. ), ); If( oFontOver == nil, oFontOver := TFont():New( "Verdana", 0, -10, .F., .T., , , , , .T. ), ); If( oGroup == nil, oGroup := nil, ); If( lSelect == nil, lSelect := .F., );

   ::nStyle       = nOR( 1073741824, 268435456, If( Upper( oWnd:ClassName() ) <> "TWEBBAR", 65536, 0 ) )
   ::nId          = ::GetNewId()
   ::oWnd         = oWnd
   ::bAction      = bAction
   ::bMenu        = bMenu
   ::cMsg         = cMsg
   ::nTop         = nTop
   ::nLeft        = nLeft
   ::nBottom      = nTop + nHeight - 1
   ::nRight       = nLeft + nWidth - 1
   ::lPressed     = .F.
   ::lWorking     = .F.
   ::lDrag        = .F.
   ::lCaptured    = .F.
   ::bWhen        = bWhen
   ::lUpdate      = lUpdate
   ::lBorder      = lBorder
   ::lBtnDown     = .F.

   ::hBmpPal1     = 0
   ::hBmpPal2     = 0

   if ValType( bSetGet ) == "C"
      ::cCaption  = bSetGet
   elseif ValType( bSetGet ) == "B" .AND. ::lWhen()
      ::cCaption  = cValToChar( Eval( bSetGet ) )
    else
      ::cCaption  = ""
    endif

   ::bSetGet      = bSetGet
   ::nPad         = Max( aScan( {"LEFT", "CENTER", "RIGHT" }, Upper( cPad ) ), 1 )
   ::oFont        = oFont
   ::oFontOver    = oFontOver

   ::nClrText     = nClrText
   ::nClrTextOver = nClrTextOver
   ::nClrPane     = nClrPane
   ::nClrPaneOver = nClrPaneOver
   ::nClrBTop     = nClrText
   ::nClrBBot     = nClrText
   ::nClrBTopOver = nClrText
   ::nClrBBotOver = nClrText

   ::oCursor      = TCursor():New( , "HAND" )
   ::oBrush       = TBrush():New( "NULL" )

   ::lSelect      = lSelect
   ::lNowSelect   = .F.






   ::Register( nOR( 1, 2 ) )

   if ! Empty( oWnd:hWnd )
      ::Create()

      oWnd:AddControl( Self )
   else
      oWnd:DefControl( Self )
   endif

   ::LoadBmp( cResName1, cResName2, cBmpFile1, cBmpFile2, cResName3, cBmpFile3 )

return Self







static FUNCTION TWebBtn_NewBar( cResName1, cResName2, cBmpFile1, cBmpFile2, bAction, oWnd, cMsg, bWhen, lUpdate, bSetGet, cPad, oFont, oFontOver, cResName3, cBmpFile3, nClrText, nClrTextOver, nClrPane, nClrPaneOver, lBorder, cToolTip, bDrop, bMenu, lBeginGrp, lOpened, oGroup, lSelect ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn















   If( cMsg == nil, cMsg := " ", ) ; If( lUpdate == nil, lUpdate := .F., ); If( oWnd == nil, oWnd := GetWndDefault(), ); If( nClrText == nil, nClrText := ( 255 + ( 154 * 256 ) + ( 49 * 65536 ) ), ); If( nClrTextOver == nil, nClrTextOver := ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), ); If( nClrPane == nil, nClrPane := GetSysColor( 15 ), ); If( nClrPaneOver == nil, nClrPaneOver := GetSysColor( 15 ), ); If( cPad == nil, cPad := "LEFT", ); If( lBorder == nil, lBorder := .F., ); If( oFont == nil, oFont := TFont():New( "Verdana", 0, -10, .F., .F. ), ); If( oFontOver == nil, oFontOver := TFont():New( "Verdana", 0, -10, .F., .F., , , , , .T. ), ); If( lBeginGrp == nil, lBeginGrp := .F., ); If( lOpened == nil, lOpened := .T., ); If( oGroup == nil, oGroup := nil, ); If( lSelect == nil, lSelect := .F., );

   ::nStyle       = nOR( 1073741824, 268435456 )
   ::nId          = ::GetNewId()
   ::oWnd         = oWnd
   ::bAction      = bAction
   ::bMenu        = bMenu
   ::cMsg         = cMsg
   ::nTop         = 0
   ::nLeft        = oWnd:nLeftMargin
   ::nBottom      = oWnd:nCtlHeight
   ::nRight       = oWnd:nWidth - oWnd:nLeftMargin - oWnd:nRightMargin - 2
   ::lCaptured    = .F.
   ::lWorking     = .F.
   ::lDrag        = .F.
   ::lBeginGrp    = lBeginGrp
   ::bWhen        = bWhen
   ::cToolTip     = cToolTip
   ::bDropOver    = bDrop
   ::cResName1    = cResName1
   ::cResName2    = cResName2
   ::cBmpFile1    = cBmpFile1
   ::cBmpFile2    = cBmpFile2
   ::bAction      = bAction
   ::oFont        = oFont
   ::oFontOver    = oFontOver
   ::lBorder      = lBorder
   ::lActive      = lOpened

   if ValType( bSetGet ) == "C"
      ::cCaption  = bSetGet
   elseif ValType( bSetGet ) == "B" .AND. ::lWhen()
      ::cCaption  = cValToChar( Eval( bSetGet ) )
    else
      ::cCaption  = ""
    endif

   ::bSetGet      = bSetGet
   ::hBmpPal1     = 0
   ::hBmpPal2     = 0
   ::nPad         = Max( aScan( {"LEFT", "CENTER", "RIGHT" }, Upper( cPad ) ), 1 )

   ::nClrText     = nClrText
   ::nClrTextOver = nClrTextOver
   ::nClrPane     = nClrPane
   ::nClrPaneOver = nClrPaneOver
   ::nClrBTop     = nClrText
   ::nClrBBot     = nClrText
   ::nClrBTopOver = nClrText
   ::nClrBBotOver = nClrText

   ::oCursor      = TCursor():New( , "HAND" )
   ::oBrush       = TBrush():New( "NULL" )

   ::lSelect      = lSelect

   ::Register( nOR( 1, 2 ) )

   ::Create()

   oWnd:Add( Self )

   if oGroup <> nil
      oGroup:AddControl( Self )
      ::lInGroup  := .T.
   end



   ::LoadBmp( cResName1, cResName2, cBmpFile1, cBmpFile2, cResName3, cBmpFile3 )

return Self







static FUNCTION TWebBtn_ReDefine( nId, cResName1, cResName2, cBmpFile1, cBmpFile2, bAction, oWnd, cMsg, bWhen, lUpdate, bSetGet, cPad,  oFont, oFontOver, cResName3, cBmpFile3, nClrText, nClrTextOver, nClrPane, nClrPaneOver, lBorder, cToolTip, bDrop, bMenu, lBeginGrp, oBrush, lOpened, oGroup, lSelect ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn












   If( cMsg == nil, cMsg := " ", ) ; If( lUpdate == nil, lUpdate := .F., ); If( lBorder == nil, lBorder := .F., ); If( oWnd == nil, oWnd := GetWndDefault(), ); If( oFont == nil, oFont := TFont():New( GetSysFont(), 0, -12, .F., .F. ), ); If( oFontOver == nil, oFontOver := TFont():New( GetSysFont(), 0, -12, .F., .F., , , , , .T. ), ); If( cPad == nil, cPad := "LEFT", ); If( nClrText == nil, nClrText := GetSysColor( 18 ), ); If( nClrTextOver == nil, nClrTextOver := GetSysColor( 18 ), ); If( nClrPane == nil, nClrPane := if( oWnd <> nil, oWnd:nClrPane, GetSysColor( 15 ) ), ); If( nClrPaneOver == nil, nClrPaneOver := if( oWnd <> nil, oWnd:nClrPane, GetSysColor( 15 ) ), ); If( oBrush == nil, oBrush := TBrush():New( "NULL" ), );

   ::nId          = nId
   ::oWnd         = oWnd
   ::hWnd         = 0
   ::bAction      = bAction
   ::bMenu        = bMenu
   ::cMsg         = cMsg
   ::lPressed     = .F.
   ::lCaptured    = .F.
   ::lWorking     = .F.
   ::lDrag        = .F.
   ::lTransparent = .F.
   ::oFont        = oFont
   ::oFontOver    = oFontOver
   ::nPad         = Max( aScan( {"LEFT", "CENTER", "RIGHT" }, Upper( cPad ) ), 1 )
   ::nClrText     = nClrText
   ::nClrTextOver = nClrTextOver
   ::nClrPane     = nClrPane
   ::nClrPaneOver = nClrPaneOver
   ::bWhen        = bWhen
   ::lUpdate      = lUpdate
   ::cToolTip     = cToolTip
   ::lBorder      = lBorder
   ::lBtnDown     = .F.
   ::oCursor      = TCursor():New( , "HAND" )
   ::nClrBTop     = nClrText
   ::nClrBBot     = nClrText
   ::nClrBTopOver = nClrText
   ::nClrBBotOver = nClrText

   if ValType( bSetGet ) == "C"
      ::cCaption  = bSetGet
   elseif ValType( bSetGet ) == "B" .AND. ::lWhen()
      ::cCaption  = cValToChar( Eval( bSetGet ) )
    else
      ::cCaption  = ""
    endif

   ::bSetGet      = bSetGet
   ::hBmpPal1     = 0
   ::hBmpPal2     = 0

   if ::oFont <> nil
      ::SetFont( ::oFont )
   else
      ::SetFont( ::oWnd:oFont )
   endif

   ::Register( nOR( 1, 2 ) )

   ::LoadBmp( cResName1, cResName2, cBmpFile1, cBmpFile2, cResName3, cBmpFile3 )

   oWnd:DefControl( Self )

   if ::oBrush <> nil
      ::oBrush:End()
   endif

   ::oBrush       = oBrush

return Self



static FUNCTION TWebBtn_Click( lMenu ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   If( lMenu == nil, lMenu := .F., ) ;

   if !::lProcessing
      ::lProcessing     := .T.

      if ::bMenu <> nil .AND. lMenu
         Eval( ::bMenu, Self )
      elseif ::bAction <> nil
         Eval( ::bAction, if( !Empty( ::Cargo ), ::Cargo, Self ) )
      endif

      if ::lSelect
         if ::oWnd <> nil .AND. ::oWnd:ClassName() == "TWEBBAR"
            ::oWnd:Reset()
         end
         ::lNowSelect   := .T.
         if ::oWnd <> nil .AND. ::oWnd:ClassName() == "TWEBBAR"
            ::oWnd:GetOption()
         end
      end

      ::Super:Click()
      ::lProcessing     := .F.
   endif

return nil



static FUNCTION TWebBtn_GotFocus( hCtlLost ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

return ::Super:GotFocus()



static FUNCTION TWebBtn_Initiate( hDlg ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   LOCAL aRect

   ::Super:Initiate( hDlg )

   if ! Empty( ::cCaption )
      SetWindowText( ::hWnd, ::cCaption )
   else
      ::cCaption  := GetWindowText( ::hWnd )
   endif

   aRect          := GetCoors( ::hWnd )

   ::nTop         := aRect[1]
   ::nLeft        := aRect[2]
   ::nBottom      := aRect[3]
   ::nRight       := aRect[4]

return nil



static FUNCTION TWebBtn_KeyChar( nKey, nFlags ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   if nKey == 13 .OR. nKey == 32
      ::Click()
   else
      return ::Super:KeyChar( nKey, nFlags )
   endif

return nil



static FUNCTION TWebBtn_LostFocus( ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   if ::lCaptured
      ::lCaptured = .F.
      ReleaseCapture()
   end

   ::Refresh()

Return ::Super:LostFocus()



static FUNCTION TWebBtn_LButtonDown( nRow, nCol ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   if ::oDragCursor <> nil
      return ::Super:LButtonDown( nRow, nCol )
   endif

   ::lWorking = .T.
   ::lBtnUp   = .F.

   SetFocus( ::hWnd )
   SysRefresh()

   if GetFocus() == ::hWnd
      ::lCaptured = .T.
      ::lPressed  = .T.
      ::Capture()
      ::Refresh()
   endif

   ::lWorking = .F.

   if ::lBtnUp
      ::LButtonUp( nRow, nCol )
      ::lBtnUp = .F.
   endif

return 0



static FUNCTION TWebBtn_LButtonUp( nRow, nCol ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   local lClick := IsOverWnd( ::hWnd, nRow, nCol )

   if ::oDragCursor <> nil
      return ::Super:LButtonUp( nRow, nCol )
   endif

   ::lBtnUp  = .T.

   if ! ::lWorking
      if ::lCaptured
         ::lCaptured = .F.
         ReleaseCapture()
         if lClick
            ::Click( nCol > ::nRight - ::nStepBmp )
         endif
      endif
   endif

return 0



static FUNCTION TWebBtn_Destroy( ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   if !Empty( ::oFont )
      ::oFont:end()
   end

   if !Empty( ::oFontOver )
      ::oFontOver:end()
   end

   if ::oCursor <> nil
      ::oCursor:end()
   end

   if ::oBrush <> nil
      ::oBrush:end()
   end

   if ::oDragCursor <> nil
      ::oDragCursor:end()
   end

   ::Super:Destroy()

return 0



static FUNCTION TWebBtn_FreeBitmaps( ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   if ::hBmpPal1 <> 0
      DeleteObject( ::hBmpPal1 )
   endif

   if ::hBmpPal2 <> 0
      DeleteObject( ::hBmpPal2 )
   endif

   if ::hBmpPal3 <> 0
      DeleteObject( ::hBmpPal3 )
   endif

   ::hBmpPal1 = 0
   ::hBmpPal2 = 0
   ::hBmpPal3 = 0

return nil



static FUNCTION TWebBtn_HideBitmaps( ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   ::hBmpPal1 = 0
   ::hBmpPal2 = 0
   ::hBmpPal3 = 0

return ( Self )



static FUNCTION TWebBtn_LoadBmp( cResName1, cResName2, cBmpFile1, cBmpFile2, cResName3, cBmpFile3 ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   local nPos

   nPos  := aScan( ::aBitMaps, {| cBmp | cBmp[ 1 ] == cResName1 .OR. cBmp[ 1 ] == cBmpFile1 } )

   if nPos <> 0

      ::hBmpPal1     := ::aBitMaps[ nPos, 2 ]

   else

      if !Empty( cResName1 )



         ::hBmpPal1  := PalBmpLoad( cResName1 )

         ::cBmpFile1 := cResName1
      endif

      if !Empty( cBmpFile1 ) .AND. File( cBmpFile1 )

         ::cBmpFile1 := cBmpFile1



         ::hBmpPal1  := PalBmpRead( ::GetDC(), cBmpFile1 )

         ::ReleaseDC()
      endif

      if  !Empty( ::cBmpFile1 )
         aAdd( ::aBitMaps, { ::cBmpFile1, ::hBmpPal1 } )
      end

      if ! Empty( ::hBmpPal1 )
         PalBmpNew( ::hWnd, ::hBmpPal1 )
      endif

   end





   nPos  := aScan( ::aBitMaps, {| cBmp | cBmp[ 1 ] == cResName2 .OR. cBmp[ 1 ] == cBmpFile2 } )

   if nPos <> 0

      ::hBmpPal2     := ::aBitMaps[ nPos, 2 ]

   else

      if ! Empty( cResName2 )



         ::hBmpPal2  := PalBmpLoad( cResName2 )

         ::cBmpFile2 := cResName2
      endif

      if ! Empty( cBmpFile2 ) .AND. File( cBmpFile2 )
         ::cBmpFile2 := cBmpFile2



         ::hBmpPal2  := PalBmpRead( ::GetDC(), cBmpFile2 )

         ::ReleaseDC()
      endif

      if  !Empty( ::cBmpFile2 )
         aAdd( ::aBitMaps, { ::cBmpFile2, ::hBmpPal2 } )
      end

      if ! Empty( ::hBmpPal2 )
         PalBmpNew( ::hWnd, ::hBmpPal2 )
      endif

   end





   nPos  := aScan( ::aBitMaps, {| cBmp | cBmp[ 1 ] == cResName3 .OR. cBmp[ 1 ] == cBmpFile3 } )

   if nPos <> 0

      ::hBmpPal3     := ::aBitMaps[ nPos, 2 ]

   else

      if ! Empty( cResName3 )
         ::hBmpPal3  := PalBmpLoad( cResName3 )



         ::hBmpPal3  := PalBmpLoad( cResName3 )

         ::cBmpFile3 := cResName3
      endif

      if ! Empty( cBmpFile3 ) .AND. File( cBmpFile3 )
         ::cBmpFile3 := cBmpFile3



         ::hBmpPal3  := PalBmpRead( ::GetDC(), cBmpFile3 )

         ::ReleaseDC()
      endif

      if  !Empty( ::cBmpFile3 )
         aAdd( ::aBitMaps, { ::cBmpFile3, ::hBmpPal3 } )
      end

      if ! Empty( ::hBmpPal3 )
         PalBmpNew( ::hWnd, ::hBmpPal3 )
      endif

   end

return ( Self )



static FUNCTION TWebBtn_MouseMove( nRow, nCol, nKeyFlags ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   local lMenu := nCol > ::nRight - 18 .AND. ::bMenu <> nil

   ::Super:MouseMove( nRow, nCol, nKeyFlags )





   if !::lCaptured
      ::lIsOverMenu  := lMenu
   end





   if IsOverWnd( ::hWnd, nRow, nCol )
      if !::lCaptured .OR. ::lIsOverMenu <> lMenu
         ::lCaptured    := .T.
         ::lIsOverMenu  := lMenu
         ::Capture()
         ::Paint()
      end
   else
      ::lCaptured    := .F.
      ::lIsOverMenu  := .F.
      ::Paint()
      ReleaseCapture()
   end

   ::oWnd:SetMsg( ::cMsg )

return 0



static FUNCTION TWebBtn_Toggle( ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   ::lOpnGroup := !::lOpnGroup

   if !Empty( ::aControls )
      aEval( ::aControls, {|o| if( ::lOpnGroup, ( o:Enable(), o:Show() ), ( o:Disable(), o:Disable() ) ) } )
   end

   ::oWnd:Resize()
   ::oWnd:Refresh()

return ( Self )



static FUNCTION TWebBtn_Paint( ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   local lWebBar        := Upper( ::oWnd:ClassName() ) == "TWEBBAR"

   if !::lTransparent








   CleanWB( ::hWnd, ::hDC, ::nWidth, ::nHeight, ::nLeft, ::nTop, if( lWebBar, ::oWnd:hBmpPal, nil ), if( ::lCaptured, ::nClrPaneOver, ::nClrPane ) )

   end











































   PaintWB( ::hWnd, ::hDC, ::lCaptured, ::cCaption, ::bMenu <> nil, ::hBmpPal1, ::oFont:hFont, ::oFontOver:hFont, ::nClrText, ::nClrTextOver, ::nTop, ::nLeft, ::nHeight, ::nWidth, ::nPad, ::hBmpPal2, if( lWebBar, ::oWnd:nLeftMargin,  0 ), if( lWebBar, ::oWnd:nRightMargin, 0 ), if( lWebBar, ::oWnd:nTopMargin,   0 ), if( lWebBar, ::oWnd:nDnMargin,    0 ), ::lIsOverMenu, ::lBorder, ::nClrBTop, ::nClrBBot, ::nClrBTopOver, ::nClrBBotOver, ::lBtnDown, lWebBar, ::lOpnGroup, ::lNowSelect, ::lTransparent, ::lSingleLine )

return nil



static FUNCTION TWebBtn_cText( uVal ) ; local Self AS CLASS TWebBtn := QSelf() AS CLASS TWebBtn

   if PCount() == 1
      Eval( ::bSetGet, uVal )
      ::SetText( uVal )
   endif

return ( GetWindowText( ::hWnd ) )





#pragma BEGINDUMP

#include "windows.h"
#include "hbapi.h"

#define S_ANY              0xFFFF
#define S_ARRAY            0x8000

#define UNDEF                 0
#define CHARACTER             1
#define NUMERIC               2
#define LOGICAL               4
#define DATE                  8
#define ALIAS                16
#define MPTR                 32      /* or'ed with type when passed by reference */
#define MEMO                 64
#define ARRAY               512
#define BLOCK              1024
#define DOUBLE             2048

#define PCOUNT()           (_parinfo(0))
#define ISCHAR(n)          (_parinfo(n) & CHARACTER)
#define ISNUM(n)           (_parinfo(n) & NUMERIC)
#define ISLOG(n)           (_parinfo(n) & LOGICAL)
#define ISLOGICAL(n)       (_parinfo(n) & LOGICAL)
#define ISDATE(n)          (_parinfo(n) & DATE)
#define ISMEMO(n)          (_parinfo(n) & MEMO)
#define ISBYREF(n)         (_parinfo(n) & MPTR)
#define ISARRAY(n)         (_parinfo(n) & ARRAY)
#define ALENGTH(n)         (_parinfa(n, 0))
#define ISBLOCK(n)         (_parinfo(n) & BLOCK)

#define DT_EDITCONTROL     0x00002000
#define DT_MODIFYSTRING    0x00010000
#define DT_WORD_ELLIPSIS   0x00040000
#define DT_END_ELLIPSIS    0x00008000

#define TRANSPARENT        1
#define OPAQUE             2

#define BORDER_SPACE       2
#define MENU_SPACE         18

void DrawMasked( HDC hDC, HBITMAP hBmp, WORD wRow, WORD wCol );
void DrawBitmap( HDC hDC, HBITMAP hBmp, WORD wCol, WORD wRow, WORD wWidth, WORD wHeight, DWORD dwRaster );
void WndDrawBox( HDC hDC, RECT * rct, HPEN hPUpLeft, HPEN hPBotRit );

//---------------------------------------------------------------------------//

//---------------------------------------------------------------------------//

HB_FUNC( PAINTWB )   // hWnd, hDC, bIsOver, strText, bIsMenu, hPalBmp1, hFont, hFontOver
{                           // nClrText, nClrTextOver, nTop, nLeft, nHeight, nWidth, nPad
                            // hPalBmp2, bIsOverMenu

    int hOldDC;

    HFONT hOldFont;
    BITMAP bm;
    RECT rct;
    RECT brdrct;
    HBRUSH hBrush;
    HBRUSH hBrushOld;
    HPEN hOldPen;
    HPEN hPen;
    BOOL bDestroyDC         = FALSE;

    HWND hWnd               = ( HWND ) hb_parnl( 1 );
    HDC hDC                 = ( HDC ) hb_parnl( 2 );

    BOOL bIsOver            = hb_parl( 3 );
    LPSTR strText           = ( LPSTR ) hb_parc( 4 );
    WORD wLen               = hb_parclen( 4 );
    BOOL bIsMenu            = hb_parl( 5 );
    HBITMAP hPalBmp1        = ( HBITMAP ) hb_parnl( 6 );
    HFONT hFont             = ( HFONT ) hb_parnl( 7 );
    HFONT hFontOver         = ( HFONT ) hb_parnl( 8 );
    COLORREF clrText        = hb_parnl( 9 );
    COLORREF clrTextOver    = hb_parnl( 10 );
    WORD wPad               = hb_parnl( 15 );
    HBITMAP hPalBmp2        = ( HBITMAP ) hb_parnl( 16 );
    BOOL bIsOverMenu        = hb_parl( 21 );
    BOOL bBorder            = hb_parl( 22 );
    COLORREF clrBrdTop      = hb_parnl( 23 );
    COLORREF clrBrdBot      = hb_parnl( 24 );
    COLORREF clrBrdTopOver  = hb_parnl( 25 );
    COLORREF clrBrdBotOver  = hb_parnl( 26 );
    BOOL bPressed           = hb_parl( 27 );
    BOOL bWebBar            = hb_parl( 28 );
    BOOL bOpnGrp            = hb_parl( 29 );
    BOOL bSelect            = hb_parl( 30 );
    BOOL bTransparent       = hb_parl( 31 );
    BOOL bSingleLine        = hb_parl( 32 );

    POINT pt[3];
    int iBitmapPosition;


    if ( bPressed )
    {
        bIsOver             = bPressed;
    }

    if( ! hDC )
    {
        bDestroyDC          = TRUE;
        hDC                 = GetDC( hWnd );
    }

    hOldDC                  = SaveDC( hDC );

    rct.top                 = BORDER_SPACE;
    rct.left                = BORDER_SPACE;
    if ( LOWORD( hPalBmp1 ) )
        {
        GetObject( ( HGDIOBJ ) LOWORD( hPalBmp1 ), sizeof( BITMAP ), ( LPSTR ) &bm );
        rct.left            = bm.bmWidth > 0 ? BORDER_SPACE + bm.bmWidth + BORDER_SPACE : BORDER_SPACE ;
        }
    rct.bottom              = hb_parnl( 13 ) - BORDER_SPACE;
    rct.right               = hb_parnl( 14 ) - ( bWebBar ? MENU_SPACE : 0 );

    SetBkMode( hDC, TRANSPARENT );

    hOldFont                = SelectObject( hDC, bIsOver && !bIsOverMenu ? hFontOver : hFont );
    SetTextColor( hDC, bIsOver && !bIsOverMenu ? clrTextOver : clrText );

    if ( LOWORD( hPalBmp1 ) )
    {
        switch ( wPad )
        {
            case 1 :
                if ( bTransparent )
                {
                    DrawMasked( hDC, bIsOver ? hPalBmp2 : hPalBmp1, ( ( rct.bottom - rct.top ) - bm.bmHeight ) / 2 , BORDER_SPACE );
                }
                else
                {
                    DrawBitmap( hDC, bIsOver ? hPalBmp2 : hPalBmp1, ( ( rct.bottom - rct.top ) - bm.bmHeight ) / 2 , BORDER_SPACE, bm.bmWidth, bm.bmHeight, 0 );
                }
                break;

            case 2 :
                iBitmapPosition = ( rct.right - rct.left ) - ( bm.bmWidth / 2 );
                if ( iBitmapPosition < 0 )
                {
                    iBitmapPosition = 0 ;
                }

                if ( bTransparent )
                {
                    DrawMasked( hDC, bIsOver ? hPalBmp2 : hPalBmp1, ( ( rct.bottom - rct.top ) - bm.bmHeight ) / 2 , iBitmapPosition );
                }
                else
                {
                    DrawBitmap( hDC, bIsOver ? hPalBmp2 : hPalBmp1, ( ( rct.bottom - rct.top ) - bm.bmHeight ) / 2 , iBitmapPosition, bm.bmWidth, bm.bmHeight, 0 );
                }
                break;
        }
    }

    switch ( wPad )
    {
        case 1 :
            DrawText( hDC, strText, wLen, &rct, ( DT_EDITCONTROL | ( bSingleLine ? DT_SINGLELINE : DT_WORDBREAK ) | DT_END_ELLIPSIS | DT_TOP | DT_LEFT ) );
            break;
        case 2 :
            DrawText( hDC, strText, wLen, &rct, ( DT_EDITCONTROL | ( bSingleLine ? DT_SINGLELINE : DT_WORDBREAK ) | DT_END_ELLIPSIS | DT_TOP | DT_CENTER ) );
            break;
        case 3 :
            DrawText( hDC, strText, wLen, &rct, ( DT_EDITCONTROL | ( bSingleLine ? DT_SINGLELINE : DT_WORDBREAK ) | DT_END_ELLIPSIS | DT_TOP | DT_RIGHT ) );
            break;
    }

    if ( bIsMenu )
    {
        hPen            = CreatePen( PS_SOLID, 1,  bIsOverMenu ? clrTextOver : clrText );
        hOldPen         = SelectObject( hDC, hPen );
        hBrush          = CreateSolidBrush(  bIsOverMenu ? clrTextOver : clrText );
        hBrushOld       = SelectObject( hDC, hBrush );

        if( bOpnGrp )
        {
            MoveToEx( hDC, rct.right +  4,  9, NULL );
            LineTo( hDC, rct.right + 10,  9 );
            LineTo( hDC, rct.right +  7,  6 );
            LineTo( hDC, rct.right +  4,  9 );

            ExtFloodFill( hDC, rct.right + 7, 8, bIsOverMenu ? clrTextOver : clrText, 0 );
        }
        else
        {
            MoveToEx( hDC, rct.right +  4,  6, NULL );
            LineTo( hDC, rct.right + 10,  6 );
            LineTo( hDC, rct.right +  7,  9 );
            LineTo( hDC, rct.right +  4,  6 );

            ExtFloodFill( hDC, rct.right + 6, 7, bIsOverMenu ? clrTextOver : clrText, 0 );
        }
        SelectObject( hDC, hOldPen );
        DeleteObject( hPen );
        SelectObject( hDC, hBrushOld );
        DeleteObject( hBrush );
    }

    SetBkMode( hDC, OPAQUE );
    SelectObject( hDC, hOldFont );

    if ( bBorder )
    {
        GetClientRect( hWnd, &brdrct );

        hPen            = CreatePen( PS_SOLID, 1, bIsOver ? clrBrdTopOver : clrBrdTop );
        hOldPen         = SelectObject( hDC, hPen );
        MoveToEx( hDC, 0, brdrct.bottom, NULL );
        LineTo( hDC, 0, 0 );
        LineTo( hDC, brdrct.right, 0 );
        SelectObject( hDC, hOldPen );
        DeleteObject( hPen );

        hPen            = CreatePen( PS_SOLID, 1, bIsOver ? clrBrdBotOver : clrBrdBot );
        hOldPen         = SelectObject( hDC, hPen );
        MoveToEx( hDC, 0, brdrct.bottom - 1, NULL );
        LineTo( hDC, brdrct.right - 1, brdrct.bottom - 1 );
        LineTo( hDC, brdrct.right - 1, 0 );
        SelectObject( hDC, hOldPen );
        DeleteObject( hPen );
    }

    if( bSelect )
    {
        GetClientRect( hWnd, &brdrct );

        hPen            = CreatePen( PS_SOLID, 1, clrText );
        hOldPen         = SelectObject( hDC, hPen );
        MoveToEx( hDC, brdrct.right - 1, 0, NULL );
        LineTo( hDC, brdrct.right - 1, 1 );
        LineTo( hDC, 0, 1 );
        LineTo( hDC, 0, brdrct.bottom - 4 );
        LineTo( hDC, brdrct.right - 1, brdrct.bottom - 4 );
        LineTo( hDC, brdrct.right - 1, brdrct.bottom - 2 );
        SelectObject( hDC, hOldPen );
        DeleteObject( hPen );
    }

    RestoreDC( hDC, hOldDC );

    if( bDestroyDC )
        ReleaseDC( hWnd, hDC );

}
//---------------------------------------------------------------------------//

HB_FUNC( CLEANWB )   // hWnd, hDC, nWidth, nHeight, nLeft, nTop, hPalBmpBk, nColor
{

    HDC hDCMemX;
    HBITMAP hBmpOld;
    HBRUSH hBrush;
    RECT rct;
    BOOL bDestroyDC         = FALSE;

    HWND hWnd               = ( HWND ) hb_parnl( 1 );
    HDC hDC                 = ( HDC ) hb_parnl( 2 );
    HBITMAP hPalBmpBk       = ( HBITMAP ) hb_parnl( 7 );
    COLORREF nColor         = hb_parnl( 8 );

    if( ! hDC )
    {
        bDestroyDC          = TRUE;
        hDC                 = GetDC( hWnd );
    }

    if( hPalBmpBk != 0 )
    {
        hDCMemX             = CreateCompatibleDC( hDC );
        hBmpOld             = SelectObject( hDCMemX, hPalBmpBk );

        BitBlt( hDC, 0, 0, hb_parnl( 3 ), hb_parnl( 4 ), hDCMemX, hb_parnl( 5 ), hb_parnl( 6 ), SRCCOPY );

        SelectObject( hDCMemX, hBmpOld );
        DeleteDC( hDCMemX );
    }
    else
    {
        hBrush              = CreateSolidBrush( nColor ) ;
        GetClientRect( hWnd, &rct );
        FillRect( hDC, &rct, hBrush ) ;
        DeleteObject( hBrush );
    }

    if( bDestroyDC )
        ReleaseDC( hWnd, hDC );
}

//---------------------------------------------------------------------------//

HB_FUNC( COMPATDC ) 
{
   hb_retnl( ( long ) CreateCompatibleDC( ( HDC ) hb_parnl( 1 ) ) );

}

//---------------------------------------------------------------------------//

HB_FUNC( COMPATBMP ) 
{
   hb_retnl( ( long ) CreateCompatibleBitmap( ( HDC ) hb_parnl( 1 ), hb_parnl( 2 ), hb_parnl( 3 ) ) );

}

//---------------------------------------------------------------------------//

#pragma ENDDUMP
