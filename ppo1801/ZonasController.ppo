#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 6 ".\Prg\Controllers\ZonasController.prg"
_HB_CLASS ZonasController ; function ZonasController ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ZonasController", iif( .T., { @SQLBrowseController() }, { @HBObject() } ), @ZonasController() ) ) ;

   _HB_MEMBER { oUbicacionesController } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oUbicacionesController"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @ZonasController_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER End(); oClass:AddMethod( "End", @ZonasController_End(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER gettingSelectSentence(); oClass:AddMethod( "gettingSelectSentence", @ZonasController_gettingSelectSentence(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ZonasController ;



static FUNCTION ZonasController_New( oController ) ; local Self AS CLASS ZonasController := QSelf() AS CLASS ZonasController

   ::Super:New( oController )

   ::cTitle                      := "Zonas"

   ::cName                       := "zonas"



   ::hImage                      := {  "16" => "gc_shelf_full_16", "32" => "gc_shelf_full_32", "48" => "gc_shelf_full_48" }

   ::oModel                      := SQLAlmacenesModel():New( self )

   ::oRepository                 := AlmacenesRepository():New( self )

   ::oBrowseView                 := AlmacenesBrowseView():New( self )

   ::oDialogView                 := ZonasView():New( self )

   ::oValidator                  := AlmacenesValidator():New( self, ::oDialogView )

   ::oUbicacionesController      := UbicacionesController():New( self )

   ::oModel:setEvent( "gettingSelectSentence",  {|| ::gettingSelectSentence() } )

RETURN ( Self )



static FUNCTION ZonasController_End( ) ; local Self AS CLASS ZonasController := QSelf() AS CLASS ZonasController

   ::oRepository:End()

   ::oBrowseView:End()

   ::oDialogView:End()

   ::oValidator:End()

   ::Super:End()

RETURN ( Self )



static FUNCTION ZonasController_gettingSelectSentence( ) ; local Self AS CLASS ZonasController := QSelf() AS CLASS ZonasController

   local uuid        := ::getSenderController():getUuid()

   if !empty( uuid )
      ::oModel:setGeneralWhere( "almacen_uuid = " + quoted( uuid ) )
   end

RETURN ( Self )








_HB_CLASS ZonasView ; function ZonasView ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "ZonasView", iif( .T., { @SQLBaseView() }, { @HBObject() } ), @ZonasView() ) ) ;

   _HB_MEMBER Activate(); oClass:AddMethod( "Activate", @ZonasView_Activate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER Activating(); oClass:AddMethod( "Activating", @ZonasView_Activating(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS ZonasView ;



static FUNCTION ZonasView_Activating( ) ; local Self AS CLASS ZonasView := QSelf() AS CLASS ZonasView

   if ::oController:isAppendOrDuplicateMode()
      ::oController:oModel:hBuffer()
   end

RETURN ( self )







static FUNCTION ZonasView_Activate( ) ; local Self AS CLASS ZonasView := QSelf() AS CLASS ZonasView

   local oBtnAppend
   local oBtnEdit
   local oBtnDelete




   ::oDialog = TDialog():New(,,,, ::LblTitle() + "zonas", "ZONAS",, .F.,,,,,, .F.,,,,,, .F.,, "::oDialog", nil, )





   ::oBitmap := TBitmap():ReDefine( 900, ::oController:getimage("48"),, ::oDialog,,, .F., .F.,,, .F.,,, .T. )




   ::oMessage := TSay():ReDefine( 800,, ::oDialog,,,, .F., getBoldFont(), .F., .F., )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "codigo" ], ::oController:oModel:hBuffer[ "codigo" ]:= u ) }, ::oDialog,, "@! NNNNNNNNNNNNNNNNNN", {||       ( ::oController:validate( "codigo" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oController:oModel:hBuffer[ "nombre" ], ::oController:oModel:hBuffer[ "nombre" ]:= u ) }, ::oDialog,,, {||       ( ::oController:validate( "nombre" ) )},,,,,, .F., {||        ( ::oController:isNotZoomMode() )},, .F., .F.,,,,,, nil,,, )







   oBtnAppend := TButton():ReDefine( 120,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnAppend:bAction   := {|| ::oController:oUbicacionesController:Append() }





   oBtnEdit := TButton():ReDefine( 130,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnEdit:bAction   := {|| ::oController:oUbicacionesController:Edit() }





   oBtnDelete := TButton():ReDefine( 140,, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )
   oBtnDelete:bAction   := {|| ::oController:oUbicacionesController:Delete() }

   ::oController:oUbicacionesController:Activate( 150, ::oDialog )







   TButton():ReDefine( 1, {||( if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) )}, ::oDialog,,, .F., {||        ( ::oController:isNotZoomMode() )},,, .F. )





   TButton():ReDefine( 2, {||( ::oDialog:end() )}, ::oDialog,,, .F.,,,, .T. )

   if ::oController:isNotZoomMode()
      ::oDialog:AddFastKey( 116, {|| if( validateDialog( ::oDialog ), ::oDialog:end( 1 ), ) } )
   end

   ::oDialog:Activate( ::oDialog:bLClicked, ::oDialog:bMoved, ::oDialog:bPainted, .T.,,,, ::oDialog:bRClicked,,, )

   ::oBitmap:end()

RETURN ( ::oDialog:nResult )
