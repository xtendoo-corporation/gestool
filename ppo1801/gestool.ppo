#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 287 "\fwh1801\include\Xbrowse.ch"
   EXTERNAL ADSKEYCOUNT, ADSGETRELKEYPOS, ADSSETRELKEYPOS, ADSKEYNO
#line 24 ".\.\Prg\gestool.prg"
static hDLLRich



PROCEDURE RddInit()

   ANNOUNCE RDDSYS

   EXTERNAL DBFCDX
   EXTERNAL DBFFPT
   EXTERNAL ADS

   EXTERNAL RDLMYSQL

   EXTERNAL OrdKeyCount
   EXTERNAL OrdKeyNo
   EXTERNAL OrdKeyGoto

   EXTERNAL AdsKeyNo
   EXTERNAL AdsKeyCount
   EXTERNAL AdsGetRelKeyPos
   EXTERNAL AdsSetRelKeyPos

RETURN



INIT PROCEDURE InitAplication()

   EXTERNAL HB_LANG_ES
   EXTERNAL HB_CODEPAGE_ESWIN

   hb_langselect( "ES" )
   hb_setcodepage( "ESWIN" )

   loadLibrary( "Riched20.dll" )

RETURN








FUNCTION Main( paramsMain, paramsSecond, paramsThird )

   local oIndex
   local oIconApp
   local hConfig

   appParamsMain( paramsMain )

   appParamsSecond( paramsSecond )

   appParamsThird( paramsThird )

   appSettings()

   appDialogExtend()

   appLoadAds()



   if ( "SCRIPTS" $ appParamsMain() )
      TScripts():runAutoExecute()
      RETURN ( nil )
   end



   if ( "ADMINISTRADOR" $ appParamsMain() )
      TDataCenter():lAdministratorTask()
      RETURN ( nil )
   end










   if !( appConnectADS() )
      msgStop( "Imposible conectar con GstApolo ADS data dictionary" )
      RETURN ( nil )
   end

   TDataCenter():BuildData()

   mainTest()



   oIconApp := TIcon():New( ,, "gestool",, )



   do case
      case ( "ENVIO" $ appParamsMain() )

         if ( ":" $ appParamsMain() )
            cEmpUsr( Right( appParamsMain(), 2 ) )
         end

         if lInitCheck()
            TSndRecInf():Init():AutoExecute()
         end

         RETURN ( nil )

      case ( "REINDEXA" $ appParamsMain() )















      case ( "EMPRESA" $ appParamsMain() )

         if ( ":" $ appParamsMain() )
            cEmpUsr( Right( appParamsMain(), 2 ) )
         end

      case ( !empty( appParamsMain() ) .AND. !empty( appParamsSecond() ) .AND. !empty( appParamsThird() ) )

         Auth():guardWhereUuid( appParamsMain() )

         setEmpresa( appParamsSecond() )

         ApplicationLoad()

         controllerReportGallery( appParamsThird() )

         RETURN ( nil )

   end



   IsStandard()
   IsProfesional()
   IsOsCommerce()

   cNameVersion()



   if !TReindex():lFreeHandle()

      msgStop( "Existen procesos exclusivos, no se puede acceder a la aplicación" + Chr(13)+Chr(10) +  "en estos momentos, reintentelo pasados unos segundos." )
      RETURN .F.
   end

   XbrNumFormat( "E", .T. )

   do case
      case ( "TACTIL" $ appParamsMain() )

         if TUsuarios():isLoginTCT()
            CreateMainTactilWindow( oIconApp )
         end

      case ( "TABLET" $ appParamsMain() )

         if AccessCode():loadTableConfiguration()
            CreateMainTabletWindow( oIconApp )
         end

      case ( "VERIFICAPRODUCTO" $ appParamsMain() )

         if AccessCode():loadTableConfiguration()
            CreateMainVProductWindow( oIconApp )
         end

      otherwise

         if TUsuarios():isLogin()
            CreateMainWindow( oIconApp )
         end

   end

   AsistenciasModel():RegSalida()

   if !empty( oIconApp )
      oIconApp:end()
   end





RETURN ( nil )



STATIC FUNCTION controllerReportGallery( cInitOptions )

   local hReportGallery

   do case
      case upper( cInitOptions ) == "ARTICULOS"

         if validRunReport( "reporting_articulos" )
            TFastVentasArticulos():New():Play()
         endif

      case upper( cInitOptions ) == "CLIENTES"

         if validRunReport( "reporting_clientes" )
            TFastVentasClientes():New():Play()
         endif

      case upper( cInitOptions ) == "PROVEEDORES"

         if validRunReport( "reporting_proveedores" )
            TFastComprasProveedores():New():Play()
         end

      case upper( cInitOptions ) == "PRODUCCION"

         if validRunReport( "reporting_produccion" )
            TFastProduccion():New():Play()
         end

      case upper( cInitOptions ) == "ALMACENES"

         if validRunReport( "reporting_almacenes" )
            TFastReportAlmacen():New():Play()
         end

      case upper( cInitOptions ) == "GENERALES"

         if validRunReport( "reporting_generales" )
            TFastReportGeneral():New():Play()
         end

   end

RETURN ( nil )



FUNCTION HelpTopic()

   msgStop( "Help wanted!" )

RETURN ( Nil )



FUNCTION HelpIndex()

   goWeb( "http://www.gestool.es/ayuda/Index.html" )

RETURN ( Nil )



STATIC FUNCTION CreateMainTabletWindow()

   lDemoMode( .F. )

   if lInitCheck()
      MainTablet()
   end

RETURN ( .T. )



STATIC FUNCTION CreateMainVProductWindow()

   lDemoMode( .F. )

   if lInitCheck()
      VerificaProduct():New()
   end

RETURN ( .T. )








STATIC FUNCTION CreateMainPdaWindow( oIconApp )





   lInitCheck()

RETURN ( nil )



STATIC FUNCTION ExecuteMainPdaWindow( oListView, oDlg )

RETURN ( nil )



STATIC FUNCTION CreateMainTactilWindow()

   lDemoMode( .F. )

   if !( lInitCheck() )
      RETURN nil
   end

   if ( "REINDEXA" $ appParamsMain() )
      InitReindexa()
   end

   selCajTactil( , .T. )



   chkTurno()

   TpvTactil():New():Activate( .T. )

RETURN ( nil )



STATIC FUNCTION SetFidelity( oBtnFidelity )

   local lFidelity            := !uFieldEmpresa( "lFidelity" )

   SetFieldEmpresa( lFidelity, "lFidelity" )

   if !Empty( oBtnFidelity )
      oBtnFidelity:lSelected  := lFidelity
      if lFidelity
         oBtnFidelity:cCaption( "Fidelity activado" )
      else
         oBtnFidelity:cCaption( "Fidelity desactivado" )
      end
   end

RETURN ( lFidelity )





FUNCTION MainTablet()

    local oDlg
   local nRow           := 0
   local cTitle         := "gestool TABLET : " + uFieldEmpresa( "CodEmp" ) + "-" + uFieldEmpresa( "cNombre" )
   local oGridTree

   oDlg                 := TDialog():New( 1, 5, 40, 100, cTitle,,, .F., nOR( 128, 2147483648, 12582912, 524288, 131072, 65536 ),, ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ),,, .F.,, oGridFont(),,,, .F.,, "oDlg" )















   TGridSay():Build(    {     "nRow"      => nRow,    "nCol"      => {|| GridWidth( 0.5, oDlg ) },    "bText"     => {|| "gestool tablet" },    "oWnd"      => oDlg,    "oFont"     => oGridFontBold(),    "lPixels"   => .T.,    "nClrText"  => ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ),    "nClrBack"  => ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ),    "nWidth"    => {|| GridWidth( 5, oDlg ) },    "nHeight"   => {|| GridRow() },    "lDesign"   => .F. } )







   TGridImage():Build(  {  "nTop"      => 4, "nLeft"     => {|| GridWidth( 11.5, oDlg ) - 138 }, "nWidth"    => 138, "nHeight"   => 64, "cResName"  => "gestool", "bLClicked" => {|| runAsistenciaRemota() }, "oWnd"      => oDlg } )









   TGridImage():Build(  {  "nTop"      => {|| GridRow( 3 ) }, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_user_64", "bLClicked" => {|| NeedReindex(), Customer():New():runNavigatorCustomer() }, "oWnd"      => oDlg } )










   TGridUrllink():Build({  "nTop"      => {|| GridRow( 3 ) }, "nLeft"     => {|| GridWidth( 1.5, oDlg ) }, "cURL"      => "Clientes", "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| NeedReindex(), Customer():New():runNavigatorCustomer() } } )









   TGridImage():Build(  {  "nTop"      => {|| GridRow( 3 ) }, "nLeft"     => {|| GridWidth( 11.5, oDlg ) - 64 }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_door_open_64", "bLClicked" => {|| oDlg:End() }, "oWnd"      => oDlg } )









   TGridImage():Build(  {  "nTop"      => {|| GridRow( 6 ) }, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_clipboard_empty_user_64", "bLClicked" => {|| NeedReindex(), OrderCustomer():New():Play() }, "oWnd"      => oDlg } )










   TGridUrllink():Build({  "nTop"      => {|| GridRow( 6 ) }, "nLeft"     => {|| GridWidth( 1.5, oDlg ) }, "cURL"      => getConfigTraslation("Pedidos de clientes"), "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| NeedReindex(), OrderCustomer():New():Play() } } )



   if AccessCode():lSalesView







   TGridImage():Build(  {  "nTop"      => {|| GridRow( 6 ) }, "nLeft"     => {|| GridWidth( 11.5, oDlg ) - 64 }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_speech_balloon_answer_64", "bLClicked" => {|| DailySummarySales():New():Play() }, "oWnd"      => oDlg } )

   end











   TGridImage():Build(  {  "nTop"      => {|| GridRow( 9 ) }, "nLeft"     => {|| GridWidth( 11.5, oDlg ) - 64 }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_cabinet_open_64", "bLClicked" => {|| NeedReindex(), Reporting():New():Resource() }, "oWnd"      => oDlg } )









   TGridImage():Build(  {  "nTop"      => {|| GridRow( 9 ) }, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_document_empty_user_64", "bLClicked" => {|| NeedReindex(), DeliveryNoteCustomer():New():Play() }, "oWnd"      => oDlg } )










   TGridUrllink():Build({  "nTop"      => {|| GridRow( 9 ) }, "nLeft"     => {|| GridWidth( 1.5, oDlg ) }, "cURL"      => "Albaranes de clientes", "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| NeedReindex(), DeliveryNoteCustomer():New():Play() } } )











   TGridImage():Build(  {  "nTop"      => {|| GridRow( 12 ) }, "nLeft"     => {|| GridWidth( 11.5, oDlg ) - 64 }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_shield_64", "bLClicked" => {|| BackupPresenter():New():Play() }, "oWnd"      => oDlg } )










   TGridImage():Build(  {  "nTop"      => {|| GridRow( 12 ) },    "nLeft"     => {|| GridWidth( 0.5, oDlg ) },    "nWidth"    => 64,    "nHeight"   => 64,    "cResName"  => "gc_document_text_user_64",    "bLClicked" => {|| NeedReindex(), InvoiceCustomer():New():play() },    "oWnd"      => oDlg } )










   TGridUrllink():Build({  "nTop"      => {|| GridRow( 12 ) }, "nLeft"     => {|| GridWidth( 1.5, oDlg ) }, "cURL"      => "Facturas de clientes", "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| NeedReindex(), InvoiceCustomer():New():play() } } )









   TGridImage():Build(  {  "nTop"      => {|| GridRow( 15 ) }, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_briefcase2_user_64", "bLClicked" => {|| NeedReindex(), ReceiptInvoiceCustomer():New():play() }, "oWnd"      => oDlg } )










   TGridUrllink():Build({  "nTop"      => {|| GridRow( 15 ) }, "nLeft"     => {|| GridWidth( 1.5, oDlg ) }, "cURL"      => "Recibos de clientes", "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| NeedReindex(), ReceiptInvoiceCustomer():New():play() } } )









   TGridImage():Build(  {  "nTop"      => {|| GridRow( 15 ) }, "nLeft"     => {|| GridWidth( 11.5, oDlg ) - 64 }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "GC_RECYCLE_64", "bLClicked" => {|| ReindexaPresenter():New():Play() }, "oWnd"      => oDlg } )









   TGridImage():Build(  {  "nTop"      => {|| GridRow( 18 ) }, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "nWidth"    => 64, "nHeight"   => 64, "cResName"  => "gc_satellite_dish_64", "bLClicked" => {|| NeedReindex(), TSndRecInf():New():ActivateTablet() }, "oWnd"      => oDlg } )










   TGridUrllink():Build({  "nTop"      => {|| GridRow( 18 ) }, "nLeft"     => {|| GridWidth( 1.5, oDlg ) }, "cURL"      => "Envío y recepción", "oWnd"      => oDlg, "oFont"     => oGridFont(), "lPixel"    => .T., "nClrInit"  => nGridColor(), "nClrOver"  => nGridColor(), "nClrVisit" => nGridColor(), "bAction"   => {|| NeedReindex(), TSndRecInf():New():ActivateTablet() } } )









   oGridTree   := TGridTreeView():Build(  {  "nTop"      => {|| GridRow( 10 ) }, "nLeft"     => {|| GridWidth( 0.5, oDlg ) }, "oWnd"      => oDlg, "lPixel"    => .T., "nWidth"    => {|| GridWidth( 17, oDlg ) }, "nHeight"   => {|| GridRow( 21, oDlg ) } } )



   oDlg:bResized        := {|| GridResize( oDlg ) }
   oDlg:bStart          := {|| StartMainTablet( oGridTree ) }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( GridMaximize( oDlg ) )}, oDlg:bRClicked,,, )

RETURN ( .T. )



FUNCTION StartMainTablet( oGridTree )

   oGridTree:Add( "Empresa : "      + uFieldEmpresa( "CodEmp" ) + "-" + uFieldEmpresa( "cNombre" ) )
   oGridTree:Add( "Usuario : "      + rtrim( Auth():Nombre() ) )
   oGridTree:Add( "Delegación : "   + rtrim( Application():CodigoDelegacion() ) )
   oGridTree:Add( "Caja : "         + Application():CodigoCaja() )
   oGridTree:Add( "Almacén : "      + rtrim( Application():codigoAlmacen() ) + "-" + RetAlmacen( Application():codigoAlmacen() ) )



   NeedReindex()

RETURN ( .T. )



FUNCTION NeedReindex()

   local dLastReindex
   local oReindexPresenter

   dLastReindex            := stod( getPvProfString( "Tablet", "LastReindex", "", cIniAplication() ) )

   if empty( dLastReindex ) .OR. ( date() > dLastReindex )
      oReindexPresenter    := ReindexaPresenter():New()
      oReindexPresenter:setSyncronize( .F. )
      oReindexPresenter:Play()
      TDataCenter():CloseAllTables()
   end

RETURN ( .T. )



FUNCTION InitReindexa()

   local oClassReindexa
   local dLastReindex   := stod( getPvProfString( "REINDEXA", "LastReindex", "", cIniAplication() ) )

   if empty( dLastReindex ) .OR. ( date() > dLastReindex )

      oClassReindexa    := TDataCenter()

      if !Empty( oClassReindexa )


         oClassReindexa:aLgcIndices := { .T., .T., .F. }
         oClassReindexa:lAutoStart  := .T.

         oClassReindexa:Resource()

      end

      writePProString( "REINDEXA", "LastReindex", dtos( date() ), cIniAplication() )

   end

RETURN ( .T. )



FUNCTION nextRow( nRow )

   nRow := nRow + 3

RETURN ( by( nRow ) )



Function mainTest()
Return ( nil )



FUNCTION GetSysFont()

RETURN "Ms Sans Serif"



FUNCTION getBoldFont()

   static oBoldFont

   if empty( oBoldFont )
      oBoldFont   := TFont():New( GetSysFont(), 0, -8, .F., .T. )
   end

RETURN ( oBoldFont )
