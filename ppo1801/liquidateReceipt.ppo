#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 4 ".\Prg\tablet\presenter\documentos\ventas\liquidateReceipt.prg"
_HB_CLASS LiquidateReceipt ; function LiquidateReceipt ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "LiquidateReceipt", iif( .T., { @DocumentsSales() }, { @HBObject() } ), @LiquidateReceipt() ) ) ;

   _HB_MEMBER { oLiquidateReceipt } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oLiquidateReceipt"}, .F. )
   _HB_MEMBER { idCliente } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"idCliente"}, .F. )

   _HB_MEMBER New(); oClass:AddMethod( "New", @LiquidateReceipt_New(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER play(); oClass:AddMethod( "play", @LiquidateReceipt_play(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER runNavigator(); oClass:AddMethod( "runNavigator", @LiquidateReceipt_runNavigator(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER onPreRunNavigator(); oClass:AddInline( "onPreRunNavigator", {|Self | ( ( Self ) ), ( .T. ) }, nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER nTotalPendiente(); oClass:AddMethod( "nTotalPendiente", @LiquidateReceipt_nTotalPendiente(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER ProcessLiquidateReceipt( nEntregado); oClass:AddMethod( "ProcessLiquidateReceipt", @LiquidateReceipt_ProcessLiquidateReceipt(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS LiquidateReceipt ;



static FUNCTION LiquidateReceipt_New( nView, idCliente ) ; local Self AS CLASS LiquidateReceipt := QSelf() AS CLASS LiquidateReceipt

   ::nView                 := nView
   ::idCliente             := idCliente

   ::oLiquidateReceipt     := LiquidateReceiptView():New( self )
   ::oLiquidateReceipt:setTitleDocumento( "Liquidación de recibos" )

Return( self )



static FUNCTION LiquidateReceipt_play( ) ; local Self AS CLASS LiquidateReceipt := QSelf() AS CLASS LiquidateReceipt

   if ::onPreRunNavigator()
      ::runNavigator()
   end

return ( self )



static FUNCTION LiquidateReceipt_runNavigator( ) ; local Self AS CLASS LiquidateReceipt := QSelf() AS CLASS LiquidateReceipt

   if !empty( ::oLiquidateReceipt )
      ::oLiquidateReceipt:Resource()
   end

Return( self )



static FUNCTION LiquidateReceipt_nTotalPendiente( ) ; local Self AS CLASS LiquidateReceipt := QSelf() AS CLASS LiquidateReceipt

   local nRec           := ( D():FacturasClientesCobros( ::nView ) )->( Recno() )
   local nOrdAnt        := ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( "lCodCli" ) )
   local nPendiente     := 0

   if ( D():FacturasClientesCobros( ::nView ) )->( dbSeek( ::idCliente ) )


      while ( D():FacturasClientesCobros( ::nView ) )->cCodCli == ::idCliente .AND. !( D():FacturasClientesCobros( ::nView ) )->( Eof() )

         if !( D():FacturasClientesCobros( ::nView ) )->lDevuelto
            nPendiente  +=  ( D():FacturasClientesCobros( ::nView ) )->nImporte
         end

         ( D():FacturasClientesCobros( ::nView ) )->( dbskip() )

      end

   end

   ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientesCobros( ::nView ) )->( dbGoTo( nRec ) )

Return ( nPendiente )



static FUNCTION LiquidateReceipt_ProcessLiquidateReceipt( nEntregado ) ; local Self AS CLASS LiquidateReceipt := QSelf() AS CLASS LiquidateReceipt

   local nRec        := ( D():FacturasClientesCobros( ::nView ) )->( Recno() )
   local nOrdAnt     := ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( "lCodCli" ) )
   local nRecFac     := ( D():FacturasClientes( ::nView ) )->( Recno() )
   local nOrdFac     := ( D():FacturasClientes( ::nView ) )->( OrdSetFocus( "nNumFac" ) )
   local nPendiente  := 0

   if ( D():FacturasClientesCobros( ::nView ) )->( dbSeek( ::idCliente ) )



      while ( D():FacturasClientesCobros( ::nView ) )->cCodCli == ::idCliente .AND. !( D():FacturasClientesCobros( ::nView ) )->( Eof() ) .AND. ( nEntregado > 0 )

         if !( D():FacturasClientesCobros( ::nView ) )->lDevuelto

            if ( D():FacturasClientesCobros( ::nView ) )->nImporte <= nEntregado

               if dbLock( D():FacturasClientesCobros( ::nView ) )
                  ( D():FacturasClientesCobros( ::nView ) )->lCobrado   := .T.
                  ( D():FacturasClientesCobros( ::nView ) )->dEntrada   := Date()
                  ( D():FacturasClientesCobros( ::nView ) )->( dbUnLock() )
               end

               nEntregado -= ( D():FacturasClientesCobros( ::nView ) )->nImporte

            else

               LiquidaRecibo( nEntregado, D():FacturasClientesCobros( ::nView ), D():FacturasClientes( ::nView ) )

               nEntregado := 0

            end

            if ( D():FacturasClientes( ::nView ) )->( dbSeek( ( D():FacturasClientesCobros( ::nView ) )->cSerie + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ) + ( D():FacturasClientesCobros( ::nView ) )->cSufFac ) )

               ChkLqdFacCli( , D():FacturasClientes( ::nView ), D():FacturasClientesLineas( ::nView ), D():FacturasClientesCobros( ::nView ), D():AnticiposClientes( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )

               if dbLock( D():FacturasClientes( ::nView ) )
                  ( D():FacturasClientes( ::nView ) )->nTotPdt   := ( D():FacturasClientes( ::nView ) )->nTotFac - nPagFacCli( ( D():FacturasClientesCobros( ::nView ) )->cSerie + Str( ( D():FacturasClientesCobros( ::nView ) )->nNumFac ) + ( D():FacturasClientesCobros( ::nView ) )->cSufFac, D():FacturasClientes( ::nView ), D():FacturasClientesCobros( ::nView ), D():TiposIva( ::nView ), D():Divisas( ::nView ) )
                  ( D():FacturasClientes( ::nView ) )->( dbUnLock() )
               end

            end

         end

         ( D():FacturasClientesCobros( ::nView ) )->( dbskip() )

      end

   end

   ( D():FacturasClientes( ::nView ) )->( OrdSetFocus( nOrdFac ) )
   ( D():FacturasClientes( ::nView ) )->( dbGoTo( nRecFac ) )
   ( D():FacturasClientesCobros( ::nView ) )->( OrdSetFocus( nOrdAnt ) )
   ( D():FacturasClientesCobros( ::nView ) )->( dbGoTo( nRec ) )

Return ( self )
