#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\tfacrec.prg"
_HB_CLASS TFacRecIva ; function TFacRecIva ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TFacRecIva", iif( .T., { @TInfGen() }, { @HBObject() } ), @TFacRecIva() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oEstado } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oEstado"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvL"}, .F. )
   _HB_MEMBER { AS CHARACTER cIvaDes } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIvaDes"}, .F. )
   _HB_MEMBER { AS CHARACTER cIvaHas } ; oClass:AddMultiData( "CHARACTER",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cIvaHas"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacPrvP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacPrvP"}, .F. )
   _HB_MEMBER { AS ARRAY aEstado } ; oClass:AddMultiData( "ARRAY", { "Pendiente", "Liquidada", "Todas" }, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"aEstado"}, .F. )
   _HB_MEMBER { AS LOGIC lAllIva } ; oClass:AddMultiData( "LOGIC", .T., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lAllIva"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TFacRecIva_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TFacRecIva_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TFacRecIva_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TFacRecIva_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TFacRecIva_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TFacRecIva ;



  static FUNCTION TFacRecIva_Create( ) ; local Self AS CLASS TFacRecIva := QSelf() AS CLASS TFacRecIva

   ::AddField ( "cNumFac", "C", 14, 0, {|| "@!" },        "Factura",                     .T., "Factura",                   14  )
   ::AddField ( "cTipIva", "C",  1, 0, {|| "@!" },        "Tipo",                        .F., "Tipo I.V.A",                 1  )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },        "Fecha",                       .T., "Fecha",                     14  )
   ::AddField ( "cCodPrv", "C", 12, 0, {|| "@!" },        "Cod. prv.",                   .F., "Cod. proveedor",             8  )
   ::AddField ( "cNomPrv", "C", 50, 0, {|| "@!" },        "Proveedor",                   .F., "Nombre proveedor",          25  )
   ::AddField ( "cNifPrv", "C", 15, 0, {|| "@!" },        "Nif",                         .F., "Nif",                       10  )
   ::AddField ( "cDomPrv", "C", 35, 0, {|| "@!" },        "Domicilio",                   .F., "Domicilio",                 25  )
   ::AddField ( "cPobPrv", "C", 25, 0, {|| "@!" },        "Población",                   .F., "Población",                 25  )
   ::AddField ( "cProPrv", "C", 20, 0, {|| "@!" },        "Provincia",                   .F., "Provincia",                 20  )
   ::AddField ( "cCdpPrv", "C",  7, 0, {|| "@!" },        "CP",                          .F., "Cod. postal",               20  )
   ::AddField ( "cTlfPrv", "C", 12, 0, {|| "@!" },        "Tlf",                         .F., "Teléfono",                   7  )
   ::AddField ( "nBasFac", "N", 16, 3, {|| ::cPicIn },    "Base",                        .T., "Base",                      16  )
   ::AddField ( "nIvaFac", "N", 16, 3, {|| ::cPicIn },    cImp(),                         .T., cImp(),                       16  )
   ::AddField ( "nReqFac", "N", 16, 3, {|| ::cPicIn },    "Rec",                         .T., "Recargo",                   16  )
   ::AddField ( "nTotFac", "N", 16, 6, {|| ::cPicIn },    "Total",                       .T., "Total factura",             16  )
   ::AddField ( "dFecCon", "D",  8, 0, {|| "@!" },        "Contabilización",             .F., "Fecha contabilización",     25  )

   ::AddTmpIndex ( "cTipIva", "cTipIva" )

   ::AddGroup ( {|| ::oDbf:cTipIva }, {|| "tipo " + cImp() + " : " + Rtrim( ::oDbf:cTipIva ) + "-" + oRetFld( ::oDbf:cTipIva, ::oDbfIva ) }, {|| "Total tipo " + cImp() } )

RETURN ( self )



static FUNCTION TFacRecIva_OpenFiles( ) ; local Self AS CLASS TFacRecIva := QSelf() AS CLASS TFacRecIva

   local lOpen    := .T.




   ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

   ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oDbfPrv := DbfServer( "PROVEE.DBF", ):NewOpen( "PROVEE.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfPrv:AddBag( "PROVEE.CDX" ) ; ::oDbfPrv:AddBag( ) ; ::oDbfPrv:AutoIndex()











RETURN ( lOpen )



static FUNCTION TFacRecIva_CloseFiles( ) ; local Self AS CLASS TFacRecIva := QSelf() AS CLASS TFacRecIva

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end
   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end
   if !Empty( ::oDbfPrv ) .AND. ::oDbfPrv:Used()
      ::oDbfPrv:End()
   end

   ::oFacPrvT  := nil
   ::oFacPrvL  := nil
   ::oDbfIva   := nil
   ::oFacPrvP  := nil
   ::oDbfPrv   := nil

RETURN ( Self )



static FUNCTION TFacRecIva_lResource( cFld ) ; local Self AS CLASS TFacRecIva := QSelf() AS CLASS TFacRecIva

   local cEstado := "Todas"
   local oIvaDes
   local oIvaHas
   local oIvaDesTxt
   local oIvaHasTxt
   local cIvaDesTxt
   local cIvaHasTxt

   local oThis := ::oDbfIva
   if !::StdResource( "INF_GEN19" )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacPrvT:Lastrec() )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,,, "::oEstado",,,,,,, )





   ::cIvaDes   := dbFirst( ::oDbfIva, 1 )
   ::cIvaHas   := dbLast(  ::oDbfIva, 1 )
   cIvaDesTxt  := dbFirst( ::oDbfIva, 2 )
   cIvaHasTxt  := dbLast(  ::oDbfIva, 2 )



   TCheckBox():ReDefine( 500, { | u | If( PCount()==0, ::lAllIva, ::lAllIva:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )







   oIvaDes := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cIvaDes, ::cIvaDes:= u ) }, ::oFld:aDialogs[1],,, {||    ( cTiva( oIvaDes, oThis:cAlias, oIvaDesTxt ) )},,,,,, .F., {||     ( !::lAllIva )},, .F., .F.,,,,, {|Self|( BrwIva( oIvaDes, oThis:cAlias, oIvaDesTxt ) )}, nil, "LUPA",, )




   oIvaDesTxt := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cIvaDesTxt, cIvaDesTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







   oIvaHas := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::cIvaHas, ::cIvaHas:= u ) }, ::oFld:aDialogs[1],,, {||    ( cTiva( oIvaHas, oThis:cAlias, oIvaHasTxt ) )},,,,,, .F., {||     ( !::lAllIva )},, .F., .F.,,,,, {|Self|( BrwIva( oIvaHas, oThis:cAlias, oIvaHasTxt ) )}, nil, "LUPA",, )




   oIvaHasTxt := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cIvaHasTxt, cIvaHasTxt:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )

   ::CreateFilter( aItmFacPrv(), ::oFacPrvT:cAlias )

RETURN .T.






static FUNCTION TFacRecIva_lGenerate( ) ; local Self AS CLASS TFacRecIva := QSelf() AS CLASS TFacRecIva

   local n
   local cCodIva
   local aTotFac
   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()






   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "tipo " + cImp() + " : " + if( ::lAllIva, "Todos", AllTrim( ::cIvaDes ) + " > " + AllTrim( ::cIvaHas ) ) }, {|| "Estado   : " + ::aEstado[ ::oEstado:nAt ] } }



   ::oFacPrvT:OrdSetFocus( "dFecFac" )

   do case
      case ::oEstado:nAt == 1
         cExpHead    := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 2
         cExpHead    := 'lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
      case ::oEstado:nAt == 3
         cExpHead    := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacPrvT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ), ::oFacPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oFacPrvT:GoTop()

   while !::lBreak .AND. !::oFacPrvT:Eof()

      if lChkSer( ::oFacPrvT:cSerFac, ::aSer )

         aTotFac           := aTotFacPrv( ::oFacPrvT:CSERFAC + Str( ::oFacPrvT:NNUMFAC ) + ::oFacPrvT:CSUFFAC, ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacPrvP:cAlias, nil, ::cDivInf, .F. )[ 5 ]

         for n := 1 to len( aTotFac )

            if hGet( aTotFac[ n ], "porcentajeiva" ) <> nil

               cCodIva           := cCodigoIva( ::oDbfIva:cAlias, hGet( aTotFac[ n ], "porcentajeiva" ) )

               if ( ::lAllIva .OR. ( cCodIva >= ::cIvaDes .AND. cCodIva <= ::cIvaHas ) )

                  ::oDbf:Append()

                  ::oDbf:cNumFac := AllTrim( ::oFacPrvT:cSerFac ) + "/" + Alltrim( Str( ::oFacPrvT:nNumFac ) ) + "/" + AllTrim( ::oFacPrvT:cSufFac )
                  ::oDbf:dFecMov := ::oFacPrvT:dFecFac
                  ::oDbf:dFecCon := ::oFacPrvT:dFecEnt
                  ::oDbf:cTipIva := cCodIva
                  ::oDbf:nBasFac := hGet( aTotFac[ n ], "neto" )
                  ::oDbf:nIvaFac := ( hGet( aTotFac[ n ], "neto" ) * hGet( aTotFac[ n ], "porcentajeiva" ) ) / 100
                  if ::oFacPrvT:lRecargo
                     ::oDbf:nReqFac := ( hGet( aTotFac[ n ], "neto" ) * hGet( aTotFac[ n ], "porcentajere" ) ) / 100
                  else
                     ::oDbf:nReqFac := 0
                  end
                  ::oDbf:nTotFac := ::oDbf:nBasFac + ::oDbf:nIvaFac + ::oDbf:nReqFac

                  ::AddProveedor( ::oFacPrvT:cCodPrv )

                  ::oDbf:Save()

               end

            end

         next

      end

      ::oFacPrvT:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvT:OrdKeyNo() )

   end

   ::oFacPrvT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacPrvT:cFile ) )

   ::oMtrInf:AutoInc( ::oFacPrvT:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
