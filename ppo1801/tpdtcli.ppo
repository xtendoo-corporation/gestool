#line 91 "\fwh1801\include\FiveWin.Ch"
         EXTERNAL FW_GT
















extern errorsys









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































static aFwStack      := {}
#line 8 ".\.\Prg\tpdtcli.prg"
_HB_CLASS TIPdtCli ; function TIPdtCli ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TIPdtCli", iif( .T., { @TInfGen() }, { @HBObject() } ), @TIPdtCli() ) ) ;

   _HB_MEMBER { AS LOGIC lResumen } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lResumen"}, .F. )
   _HB_MEMBER { AS LOGIC lExcCero } ; oClass:AddMultiData( "LOGIC", .F., nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"lExcCero"}, .F. )
   _HB_MEMBER { AS OBJECT oOrden } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oOrden"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliL"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecT"}, .F. )
   _HB_MEMBER { AS OBJECT oFacRecL } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacRecL"}, .F. )
   _HB_MEMBER { AS OBJECT oDbfIva } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oDbfIva"}, .F. )
   _HB_MEMBER { AS OBJECT oFacCliP } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oFacCliP"}, .F. )
   _HB_MEMBER { AS OBJECT oAntCliT } ; oClass:AddMultiData( "OBJECT",, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"oAntCliT"}, .F. )

   _HB_MEMBER Create(); oClass:AddMethod( "Create", @TIPdtCli_Create(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER OpenFiles(); oClass:AddMethod( "OpenFiles", @TIPdtCli_OpenFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER CloseFiles(); oClass:AddMethod( "CloseFiles", @TIPdtCli_CloseFiles(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lResource( cFld); oClass:AddMethod( "lResource", @TIPdtCli_lResource(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

   _HB_MEMBER lGenerate(); oClass:AddMethod( "lGenerate", @TIPdtCli_lGenerate(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TIPdtCli ;



static FUNCTION TIPdtCli_Create( ) ; local Self AS CLASS TIPdtCli := QSelf() AS CLASS TIPdtCli

   ::AddField ( "CCODCLI", "C", 12, 0, {|| "@!" },         "Cod. cli",                .F., "Cod. cliente"            ,  8 )
   ::AddField ( "CNOMCLI", "C", 50, 0, {|| "@!" },         "Nombre",                  .F., "Nombre cliente"          , 25 )
   ::AddField ( "CDOCMOV", "C", 14, 0, {|| "@!" },         "Factura",                 .T., "Factura"                 , 14 )
   ::AddField ( "DFECMOV", "D",  8, 0, {|| "@!" },         "Fecha",                   .T., "Fecha"                   , 14 )
   ::AddField ( "CNIFCLI", "C", 15, 0, {|| "@!" },         "Nif",                     .F., "Nif"                     ,  8 )
   ::AddField ( "CDOMCLI", "C", 35, 0, {|| "@!" },         "Domicilio",               .F., "Domicilio"               , 25 )
   ::AddField ( "CPOBCLI", "C", 25, 0, {|| "@!" },         "Población",               .F., "Población"               , 20 )
   ::AddField ( "CPROCLI", "C", 20, 0, {|| "@!" },         "Provincia",               .F., "Provincia"               , 20 )
   ::AddField ( "CCDPCLI", "C",  7, 0, {|| "@!" },         "CP",                      .F., "Cod. postal"             , 20 )
   ::AddField ( "CTLFCLI", "C", 12, 0, {|| "@!" },         "Tlf",                     .F., "Teléfono"                ,  7 )
   ::AddField ( "COBRCLI", "C", 10, 0, {|| "@!" },         "Dirección",                    .F., "Código dirección"             , 12 )
   ::AddField ( "CNBREST", "C", 50, 0, {|| "@!" },         "Establecimiento",         .F., "Establecimiento"         , 25 )
   ::AddField ( "NTOTDOC", "N", 16, 3, {|| ::cPicOut },    "Facturado",               .T., "Total factura"           , 10 )
   ::AddField ( "NTOTCOB", "N", 16, 3, {|| ::cPicOut },    "Cobrado",                 .T., "Total fobrado"           , 10 )
   ::AddField ( "NTOTPEN", "N", 16, 3, {|| ::cPicOut },    "Pendiente",               .T., "Total pendiente"         , 10 )
   ::AddField ( "CTIPVEN", "C", 20, 0, {|| "@!" },         "Venta",                   .F., "Tipo de venta"           , 15 )
   ::AddField ( "CABNFAC", "C", 12, 0, {|| "@!" },         "Abono",                   .F., "Abono de factura"        , 12 )

   ::AddTmpIndex ( "CCODCLI", "CCODCLI" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente   : " + Rtrim( ::oDbf:cCodCli ) + "-" + Rtrim( oRetFld( ::oDbf:cCodCli, ::oDbfCli ) ) }, {||"Total cliente..."} )

RETURN ( self )



static FUNCTION TIPdtCli_OpenFiles( ) ; local Self AS CLASS TIPdtCli := QSelf() AS CLASS TIPdtCli

   local lOpen    := .T.
   local oError
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oFacCliT     := TDataCenter():oFacCliT()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oFacRecT := DbfServer( "FACRECT.DBF", ):NewOpen( "FACRECT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.CDX" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

   ::oFacRecL := DbfServer( "FACRECL.DBF", ):NewOpen( "FACRECL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.CDX" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

   ::oFacCliP := TDataCenter():oFacCliP()

   ::oAntCliT := DbfServer( "ANTCLIT.DBF", ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAntCliT:AddBag( "ANTCLIT.CDX" ) ; ::oAntCliT:AddBag( ) ; ::oAntCliT:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   RECOVER USING oError


      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



static FUNCTION TIPdtCli_CloseFiles( ) ; local Self AS CLASS TIPdtCli := QSelf() AS CLASS TIPdtCli

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end
   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end
   if !Empty( ::oFacRecT ) .AND. ::oFacRecT:Used()
      ::oFacRecT:End()
   end
   if !Empty( ::oFacRecL ) .AND. ::oFacRecL:Used()
      ::oFacRecL:End()
   end
   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end
   if !Empty( ::oDbfIva ) .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end
   if !Empty( ::oAntCliT ) .AND. ::oAntCliT:Used()
      ::oAntCliT:End()
   end

   ::oFacCliT := nil
   ::oFacCliL := nil
   ::oFacCliP := nil
   ::oAntCliT := nil
   ::oDbfIva  := nil
   ::oFacRecT := nil
   ::OfACRecL :=nil

RETURN ( Self )



static FUNCTION TIPdtCli_lResource( cFld ) ; local Self AS CLASS TIPdtCli := QSelf() AS CLASS TIPdtCli

   local cOrden := "Cliente"

   if !::StdResource( "INF_GEN16A" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   if !::oDefAgeInf( 110, 120, 130, 140, 940 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )

   ::CreateFilter( aItmFacCli(), ::oFacCliT:cAlias )

RETURN .T.






static FUNCTION TIPdtCli_lGenerate( ) ; local Self AS CLASS TIPdtCli := QSelf() AS CLASS TIPdtCli

   local nTotFacCli     := 0
   local nPagFacCli     := 0
   local bValid         := {|| .T. }
   local lExcCero       := .F.
   local cExpHead       := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente : " + if( ::lAllCli, "Todos", AllTrim( ::cCliOrg ) + " > " + AllTrim( ::cCliDes ) ) }, {|| "Agente  : " + if ( !Empty( ::cAgeOrg ),( ::cAgeOrg + " > " + ::cAgeDes ), "Ninguno" ) } }

   ::oFacCliT:OrdSetFocus( "dFecFac" )

   cExpHead          := '!lLiquidada .and. dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lAllCli
      cExpHead       += ' .and. cCodCli >= "' + Rtrim( ::cCliOrg ) + '" .and. cCodCli <= "' + Rtrim( ::cCliDes ) + '"'
   end

   if !::lAgeAll
      cExpHead       += ' .and. cCodAge >= "' + Rtrim( ::cAgeOrg ) + '" .and. cCodAge <= "' + Rtrim( ::cAgeDes ) + '"'
   end

   if !Empty( ::oFilter:cExpresionFilter )
      cExpHead       += " .and. " + ::oFilter:cExpresionFilter
   end

   ::oFacCliT:AddTmpIndex( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )

   ::oFacCliT:GoTop()

   WHILE !::lBreak .AND. !::oFacCliT:Eof()



      if lChkSer( ::oFacCliT:CSERIE, ::aSer )

         nTotFacCli  := nTotFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias )
         nPagFacCli  := nPagFacCli( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac, ::oFacCliT:cAlias, ::oFacCliP:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias )

         if abs( nTotFacCli ) > abs( nPagFacCli )



            ::oDbf:Append()

            ::oDbf:CCODCLI := ::oFacCliT:CCODCLI
            ::oDbf:CNOMCLI := ::oFacCliT:CNOMCLI
            ::oDbf:DFECMOV := ::oFacCliT:DFECFAC
            ::oDbf:CDOCMOV := lTrim ( ::oFacCliT:CSERIE ) + "/" + lTrim ( Str( ::oFacCliT:NNUMFAC ) ) + "/" + lTrim ( ::oFacCliT:CSUFFAC )



            ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )

            ::oDbf:nTotDoc := nTotFacCli
            ::oDbf:nTotCob := nPagFacCli
            ::oDbf:nTotPen := nTotFacCli - nPagFacCli

            ::oDbf:Save()

         end

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliT:IdxDelete( Auth():Codigo(), GetFileNoExt( ::oFacCliT:cFile ) )
   ::oMtrInf:AutoInc( ::oFacCliT:LastRec() )







































































    ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )
